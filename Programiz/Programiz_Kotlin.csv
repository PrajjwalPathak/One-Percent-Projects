,main_headings,main_contents,video_headings,video_urls,sub_headings_h2,sub_headings_h3,image_urls,facts,definitions,explanations,snippets,codes,outputs,table_data,list_items
0,['Kotlin Hello World - You First Kotlin Program'],"['In this article, you will learn to write Hello World program in Kotlin.']",[],[],"['Kotlin ""Hello, World!"" Program', 'Comparison With Java ""Hello, World!"" program']","['How this program works?', 'Few Important Notes']","['//cdn.programiz.com/sites/tutorial2program/files/kotlin-class-create-java.png', '//cdn.programiz.com/sites/tutorial2program/files/console.kt-file-declaration.png']","['Let\'s explore how ""Hello, World!"" program works in Kotlin.', 'When you run the program, the output will be:']","['Before you write the program, make sure your computer can run Kotlin. For that visit: How to Run Kotlin on Your Computer?', 'As you know, Kotlin is 100% interoperable with Java. Here\'s an equivalent Java ""Hello, World!"" program.']","['A ""Hello, World!"" is a simple program that outputs Hello, World! on the screen. Since it\'s a very simple program, it\'s often used to introduce a new programming language.']","['    println(""Hello, World!"")', 'class HelloWorldKt {']","['fun main(args : Array<String>) {', '    public static void main(String[] args) {', '        System.out.println(""Hello, World!""); ']","['Hello, World!', 'fun main(args : Array<String>) {', '    ... .. ...', '}']",[],"['// Hello World Program|||Any line starting with // is a comment in Kotlin (similar to Java). Comments are ignored by the compiler. They are intended for person reading the code to better understand the intent and functionality of the program. To learn more, visit Kotlin comments.|||fun main(args : Array<String>) { ... }|||This is the main function, which is mandatory in every Kotlin application. The Kotlin compiler starts executing the code from the main function.|||The function takes array of strings as a parameter and returns Unit. You will learn about functions and parameters in later chapters.|||For now, just remember that main function is a mandatory function which is the entry point of every Kotlin program. The signature of main function is:||||||fun main(args : Array<String>) {|||    ... .. ...|||}||||||println(""Hello, World!"")|||The println() function prints the given message inside the quotation marks and newline to the standard output stream. In this program, it prints Hello, World! and new line.|||Unlike Java, it is not mandatory to create a class in every Kotlin program. It\'s because the Kotlin compiler creates the class for us.|||If you are using IntelliJ IDEA, go to Run > Edit Configurations to view this class. If you named your Kotlin file HelloWorld.kt, the compiler creates HelloWorldKt class.|||The println() function calls System.out.println() internally.|||If you are using IntelliJ IDEA, put your mouse cursor next to println and go to Navigate > Declaration ( Shortcut: Ctrl + B . For Mac: Cmd + B), this will open Console.kt (declaration file). You can see that println() function is internally calling System.out.println().|||']"
1,['Kotlin Variables and Basic Types'],"['In this tutorial, you will learn about variables, how to create them, and basic data types that Kotlin supports for creating variables.']",[],[],"['Kotlin Basic Types', 'Kotlin Arrays', 'Kotlin Strings']","['How to declare a variable in Kotlin?', 'Difference Between var and val', 'Number Type', 'Recommended Readings']",['//cdn.programiz.com/sites/tutorial2program/files/view-type-of-variable-IntelliJ-IDEA.png'],"['However, you can explicitly specify the type if you want to:', 'Here are few examples that results into error.', 'Here are few examples:', 'The built-in types in Kotlin can be categorized as:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'To learn more, visit: Kotlin smart casts', 'To represent a character in Kotlin, Char types are used.', 'When you run the program, the output will be:', 'In Java, you can do something like:', 'However, the following code gives error in Kotlin.', 'To learn in detail about arrays, visit: Kotlin Arrays', 'To learn in detail about strings, vist: Kotlin Strings']","['As you know, a variable is a location in memory (storage area) to hold data.', 'To declare a variable in Kotlin, either var or val keyword is used. Here is an example:', ""The difference in using var and val is discussed later in the article. For now, let's focus on variable declaration."", 'Here, the type of language variable is not explicitly specified, nor the variable is initialized during declaration.', '\u200b\u200b\u200b\u200bHere, we are trying to assign 14 (integer value) to variable of different type (String).', 'Here, language variable is reassigned to German. Since, the variable is declared using var, this code work perfectly.', 'You cannot reassign language variable to German in the above example because the variable is declared using val.', ""Now, you know what Kotlin variables are, it's time to learn different values a Kotlin variable can take."", 'Here, the compiler knows that language is of type Int, and marks is of type Double before the compile time.', 'Numbers in Kotlin are similar to Java. There are 6 built-in types representing numbers.', 'If you are using IntelliJ IDEA, you can place cursor inside the variable and press Ctrl + Shift + P to see its type.', 'Similarly, you can use capital letter L to specify that the variable is of type Long. For example,', 'To tell compiler to treat 19.5 as Float, you need to use F at the end.', 'Unlike Java, Char types cannot be treated as numbers. Visit this page to learn more about Java char Type.', 'Booleans are used in decision making statements (will be discussed in later chapter).']","['To indicate the storage area, each variable should be given a unique name (identifier). Learn more about How to name a variable in Kotlin?', 'Here, language is a variable of type String, and score is a variable of type Int. You don\'t have to specify the type of variables; Kotlin implicitly does that for you. The compiler knows this by initializer expression (""French"" is a String, and 95 is an integer value in the above program). This is called type inference in programming.', ""We have initialized variable during declaration in above examples. However, it's not necessary. You can declare variable and specify its type in one statement, and initialize the variable in another statement later in the program."", 'If you assign an integer between -231 to 231-1 to a variable without explicitly specifying its type, the variable will be of Int type. For example,', 'If you assign an integer value greater than 231-1 or less than -231 to a variable (without explicitly specifying its type), the variable will be of Long type. For example,', 'Notice that, we have used 19.5F instead of 19.5\xa0in the above program. It is because 19.5 is a Double literal, and you cannot assign Double value to a variable of type Float.', 'If you are not sure what number value\xa0a variable will be assigned in the program, you can specify it as Number type. This allows you to assign both integer and floating-point value to the variable (one at a time). For example:', 'An array is a container that holds data (values) of one single type. For example, you can create an array that can hold 100\xa0values of\xa0Int\xa0type.', 'In Kotlin, arrays are\xa0represented by the\xa0Array\xa0class. The class has\xa0get\xa0and\xa0set\xa0functions, size\xa0property, and a few other useful member functions.', 'In Kotlin, strings are represented by the String class. The string literals such as ""this is a string""\xa0is implemented as an instance of this class.']","['    val range: Byte = 112', '    println(""$range"")', '    println(""$temperature"")', '    val score: Int =  100000', '    println(""$score"")', '    val score = 10', '    println(""$score"")', '    println(""$highestScore"")', '    val distance = 999.5', '    println(""$distance"")', '    var test: Number = 12.2', '    println(""$test"")', '    test = 12', '    println(""$test"")', '    test = 120L', '    println(""$test"")', '    val letter: Char', ""    letter = 'k'"", '    println(""$letter"")', '    val flag = true', '    println(""$flag"")']","['fun main(args : Array<String>) {', 'fun main(args : Array<String>) {', '    val temperature: Short = -11245', 'fun main(args : Array<String>) {', 'fun main(args : Array<String>) {', 'fun main(args : Array<String>) {', '    val highestScore: Long = 9999', 'fun main(args : Array<String>) {', 'fun main(args : Array<String>) {', 'fun main(args : Array<String>) {', 'fun main(args : Array<String>) {']","['var language = ""French""', 'val score = 95', 'var language: String = ""French""', 'val score: Int = 95', 'var language: String      // variable declaration of type String', '... .. ...', 'language = ""French""       // variable initialization', 'val score: Int          // variable declaration of type Int ', '... .. ...', 'score = 95             // variable initialization ', 'var language           // Error ', 'language = ""French""', 'var language: String', 'language = 14         // Error', 'var language = ""French""', 'language = ""German""     ', 'val language = ""French""', 'language = ""German""      // Error', 'val language: Int', 'val marks = 12.3', '112', '-11245', '100000', '9999', 'val distance = 10000000000  // distance variable of type Long', 'val distance = 100L    // distance value of type Long', '999.5', 'fun main(args : Array<String>) {', '    val distance = 19.5F', '    println(""$distance"")', '}', '19.5', '12.2', '12', '120', 'k', 'char letter = 65;', 'var letter: Char = 65  // Error']",[],"['val (Immutable reference) - The variable declared using val keyword cannot be changed once the value is assigned. It is similar to final variable in Java.|||var (Mutable reference) - The variable declared using var keyword can be changed later in the program. It corresponds to regular Java variable.|||Numbers|||Characters|||Booleans|||Arrays|||Byte|||Short|||Int|||Long|||Float|||Double|||The Byte data type can have values from -128 to 127 (8-bit signed two\'s complement integer).|||It is\xa0used instead of Int or other integer data types to save memory if it\'s certain that the value of a variable will be within [-128, 127]|||Example:||||||fun main(args : Array<String>) {|||    val range: Byte = 112|||    println(""$range"")||||||    // The code below gives error. Why?|||    // val range1: Byte = 200|||}||||||The Short data type can have values from -32768 to 32767 (16-bit signed two\'s complement integer).|||It is\xa0used instead of other integer data types to save memory if it\'s certain that the value of the variable will be within [-32768, 32767].|||Example:|||The Int data type can have values from -231 to 231-1 (32-bit signed two\'s complement integer).|||Example:|||The Long data type can have values from -263 to 263-1 (64-bit signed two\'s complement integer).|||Example:|||The Double type is a double-precision 64-bit floating point.|||Example:|||The Float data type is a single-precision 32-bit floating point. Learn more about single precision and double precision floating point if you are interested.|||Example:|||The\xa0Boolean\xa0data type has two possible values, either\xa0true\xa0or\xa0false.|||Example:|||Type conversion in Kotlin|||Smart casts in Kotlin|||Kotlin nullable types|||']"
2,['Kotlin Operators'],"['Kotlin has a set of operators to perform arithmetic, assignment, comparison operators and more. You will learn to use these operators in this article.']",[],[],"['1. Arithmetic Operators', '2. Assignment Operators', '3. Unary prefix and Increment / Decrement Operators', '4. Comparison and Equality Operators', '5. Logical Operators', '6. in Operator', '7. Index access Operator', '8. Invoke Operator']","['Example: Arithmetic Operators', 'Example: Concatenation of Strings', 'How arithmetic operators actually work?', 'Example: Assignment Operators', 'Example: Unary Operators', 'Example: Comparison and Equality Operators', 'Example: Logical Operators', 'Example: in Operator', 'Example: Index access Operator', 'Bitwise Operation']",[],"[""Here's a list of arithmetic operators in Kotlin:"", 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'Recommended Reading: Kotlin Operator Overloading', 'Here, 5 is assigned to variable age using = operator.', 'When you run the program, the output will be:', 'Recommended Reading: Overloading assignment operators in Kotlin.', 'When you run the program, the output will be:', 'Recommended Reading: Overloading Unary Operators', 'When you run the program, the output will be:', 'There are two logical operators in Kotlin: || and &&', 'Note that, or and and are functions that support infix notation.', 'When you run the program, the output will be:', 'Recommended Reading: Overloading of Logical\xa0Operators in Kotlin', 'When you run the program, the output will be:', 'Recommended Reading: Kotlin in Operator Overloading', 'When you run the program, the output will be:', 'Recommended Reading: Kotlin Index access operator Overloading', 'Recommended Reading: Invoke Operator Overloading in Kotlin', 'Visit this page to learn more about Bitwise Operations in Kotlin.', 'Also, there is no ternary operator in Kotlin unlike Java.']","['The + operator is also used for the concatenation of String values.', 'Suppose, you are using + arithmetic operator to add two numbers a and b.', 'You can also use + operator to work with user-defined types (like objects) by overloading plus() function.', ""Here's a table of arithmetic operators and their corresponding functions:"", 'Assignment operators are used to assign value to a variable. We have already used simple assignment operator = before.', ""Here's a list of all assignment operators and their corresponding functions:"", ""Here's a table of unary operators, their meaning, and corresponding functions:"", ""Here's a table of equality and comparison operators, their meaning, and corresponding functions:"", 'Comparison and equality operators are used in control flow such as if expression, when expression, and loops.', 'Recommended Reading: Overloading of Comparison and Equality Operators in Kotlin', ""Here's a table of logical operators, their meaning, and corresponding functions."", 'Logical operators are used in control flow such as if expression, when expression, and loops.', 'The in operator is used to check whether an object belongs to a collection.', 'Here are some expressions using index access operator with corresponding functions in Kotlin.', 'Here are some expressions using invoke operator with corresponding functions in Kotlin.', 'In Kotlin, parenthesis are translated to call invoke member function.']","['Operators are special symbols (characters) that carry out operations on operands (variables and values). For example, + is an operator that performs addition.', 'In Java variables article, you learned to declare variables and assign values to variables. Now, you will learn to use operators perform various operations on them.', 'Under the hood, the expression a + b calls a.plus(b) member function. The plus operator is overloaded to work with String values and other basic data types (except Char and Boolean).', 'Unlike Java, there are no bitwise and bitshift operators in Kotlin. To perform these task, various functions (supporting infix notation) are used:']","['    val number1 = 12.5', '    val number2 = 3.5', '    var result: Double', '    result = number1 + number2', '    result = number1 - number2', '    result = number1 * number2', '    result = number1 / number2', '    result = number1 % number2', '    println(result)', '    var number = 12', '    val a = 1', '    val b = true', '    var c = 1', '    var result: Int', '    var booleanResult: Boolean', '    result = -a', '    println(""-a = $result"")', '    booleanResult = !b', '    println(""--c = $c"")', '!b = false', '    val a = -12', '    val b = 12', '    val max = if (a > b) {', '        a', '    } else {', '        b', '    println(""max = $max"")', '    val a = 10', '    val b = 9', '    val c = -1', '    val result: Boolean', '    println(result)', '    if (4 in numbers) {', '    println(a[1])   ', '    a[1]= 12', '    println(a[1])']","['    println(""number1 + number2 = $result"")', '    println(""number1 - number2 = $result"")', '    println(""number1 * number2 = $result"")', '    println(""number1 / number2 = $result"")', '    println(""number1 % number2 = $result"")', '    val start = ""Talk is cheap. ""', '    val middle = ""Show me the code. ""', '    val end = ""- Linus Torvalds""', '    val result = start + middle + end', '    number *= 5   // number = number*5', '    println(""number  = $number"")', '    println(""!b = $booleanResult"")', '        println(""a is larger than b."")', '        println(""b is larger than a."")', '    result = (a>b) && (a>c) // result = (a>b) and (a>c)', '    val numbers = intArrayOf(1, 4, 42, -3)', '        println(""numbers array contains 4."")', '    val a  = intArrayOf(1, 2, 3, 4, - 1)']","['number1 + number2 = 16.0', 'number1 - number2 = 9.0', 'number1 * number2 = 43.75', 'number1 / number2 = 3.5714285714285716', 'number1 % number2 = 2.0', 'Talk is cheap. Show me the code. - Linus Torvalds', 'operator fun plus(other: Byte): Int', 'operator fun plus(other: Short): Int', 'operator fun plus(other: Int): Int', 'operator fun plus(other: Long): Long', 'operator fun plus(other: Float): Float', 'operator fun plus(other: Double): Double', 'operator fun String?.plus(other: Any?): String', 'val age = 5', 'number = 60', 'b is larger than a.', 'max = 12', 'true', 'numbers array contains 4.', '2', '12']","['perator|||Meaning&&&|||Addition (also used for string concatenation)&&&|||Subtraction Operator&&&|||Multiplication Operator&&&|||Division Operator&&&|||Modulus Operator', 'xpression|||Function name|||Translates to&&& + b|||plus|||a.plus(b)&&& - b|||minus|||a.minus(b)&&& * b|||times|||a.times(b)&&& / b|||div|||a.div(b)&&& % b|||mod|||a.mod(b)', 'xpression|||Equivalent to|||Translates to&&& +=b|||a = a + b|||a.plusAssign(b)&&& -= b|||a = a - b|||a.minusAssign(b)&&& *= b|||a = a * b|||a.timesAssign(b)&&& /= b|||a = a / b|||a.divAssign(b)&&& %= b|||a = a % b|||a.modAssign(b)', 'perator|||Meaning|||Expression|||Translates to&&&|||Unary plus|||+a|||a.unaryPlus()&&&|||Unary minus (inverts sign)|||-a|||a.unaryMinus()&&&|||not (inverts value)|||!a|||a.not()&&&+|||Increment: increases value by1|||++a|||a.inc()&&&-|||Decrement: decreases value by 1|||--a|||a.dec()', 'perator|||Meaning|||Expression|||Translates to&&&|||greater than|||a > b|||a.compareTo(b) > 0&&&|||less than|||a < b|||a.compareTo(b) < 0&&&=|||greater than or equals to|||a >= b|||a.compareTo(b) >= 0&&&=|||less than or equals to|||a < = b|||a.compareTo(b) <= 0&&&=|||is equal to|||a == b|||a?.equals(b) ?: (b === null)&&&=|||not equal to|||a != b|||!(a?.equals(b) ?: (b === null))', 'perator|||Description|||Expression|||Corresponding Function&&&||||true if either of the Boolean expression is true|||(a>b)||(a<c)|||(a>b)or(a<c)&&&&|||true if all Boolean expressions are true|||(a>b)&&(a<c)|||(a>b)and(a<c)', 'perator|||Expression|||Translates to&&&n|||a in b|||b.contains(a)&&&in|||a !in b|||!b.contains(a)', 'xpression|||Translated to&&&[i]|||a.get(i)&&&[i, n]|||a.get(i, n)&&&[i1, i2, ..., in]|||a.get(i1, i2, ..., in)&&&[i] = b|||a.set(i, b)&&&[i, n] = b|||a.set(i, n, b)&&&[i1, i2, ..., in] = b|||a.set(i1, i2, ..., in, b)', 'xpression|||Translated to&&&()|||a.invoke()&&&(i)|||a.invoke(i)&&&(i1, i2, ..., in)|||a.inkove(i1, i2, ..., in)&&&[i] = b|||a.set(i, b)']",['shl - Signed shift left|||shr - Signed shift right|||ushr - Unsigned shift right|||and - Bitwise and|||or - Bitwise or|||xor - Bitwise xor|||inv - Bitwise inversion|||']
3,['Kotlin Type Conversion'],"['In this article, you will learn about type conversion; how to convert a variable of one type to another with the help of example.']",[],[],[],['Conversion from Larger to Smaller Type'],[],"['In Java,', 'In Kotlin,', ""Here's a\xa0list of functions in Kotlin used for type conversion:"", 'Note, there is no conversion for Boolean types.', 'When you run the program, the output will be:', 'Also check out these articles related to type conversion:']","['Here, value of number1\xa0of type\xa0int\xa0is automatically converted to type long, and assigned to variable number2.', ""Though the size of Long is larger than Int, Kotlin doesn't automatically convert Int to Long.\xa0"", 'Instead, you need to use\xa0toLong()\xa0explicitly\xa0(to convert to type\xa0Long). Kotlin does it for type safety to avoid surprises.', 'However, conversion from larger to smaller type may truncate the value. For example,']","['In Kotlin, a numeric value of one type is not automatically converted to another type even when\xa0the other type is larger. This is different from how Java handles numeric conversions. For example;', 'The functions mentioned above can be used in both directions (conversion from larger to smaller type and conversion from smaller to larger type).']",['    val number1: Int = 545344'],"['fun main(args : Array<String>) {', '    val number2: Byte = number1.toByte()', '    println(""number1 = $number1"")', '    println(""number2 = $number2"")']","['int number1 = 55;', 'long number2 = number1;    // Valid code ', 'val number1: Int = 55', 'val number2: Long = number1   // Error: type mismatch.', 'val number1: Int = 55', 'val number2: Long = number1.toLong()', 'number1 = 545344', 'number2 = 64']",[],"['toByte()\xa0|||toShort()|||toInt()|||toLong()|||toFloat()|||toDouble()|||toChar()|||String to Int, and Int to String Conversion|||Long to Int, and Int to Long Conversion|||Double to Int, and Int to Double Conversion|||Long to Double, and Double to Long Conversion|||Char to Int, and Int to Char|||String to Long, and Long to String Conversion|||String to Array, and Array to String Conversion|||String to Boolean, and Boolean to String Conversion|||String to Byte, and Byte to String Conversion|||Int to Byte, and Byte to Int Conversion|||']"
4,"['Kotlin Expression, Statements and Blocks']","['In this article, you will learn about Kotlin expressions, Kotlin statements, difference between expression and statement, and Kotlin blocks.']",[],[],"['Kotlin Expressions', 'Kotlin Statements', 'Kotlin Blocks']",[],[],"[""Let's take an example,"", 'Here, 90 + 25 is an expression that returns Int value.', 'Expressions are part of statements.', 'Some examples:', 'Similarly, the main() function also has a block body.']","['Expressions consist of variables, operators etc that evaluates to a single value.', 'In Kotlin, if is an expression unlike Java (In Java, if is a statement). For example,', 'Statements are everything that make up a complete unit of execution. For example,', 'Here, 90 + 25 is an expression that returns 115, and val score = 9*5; is a statement.', 'A block is a group of statements (zero or more) that is enclosed in curly braces { }. For example,', 'There are two statements print(""Hey "") and print("" jude!"") inside if branch block.']","['Here, if (a > b) a else b is an expression. Then value of the expression is assigned to max variable in the above program. Visit this page to learn more about Kotlin if expression.']","['    val a = 12', '    val b = 13', '    val max: Int', '    max = if (a > b) a else b', '    println(""$max"")', '    val flag = true', '        print(""Hey "")', '        print(""jude!"")']","['fun main(args: Array<String>) {  // main function block', '    if (flag == true) {      // start of if block', '    }                        // end of if block', '}                            // end of main function block']","['val score: Int', 'score = 90 + 25', 'val score = 90 + 25', 'println(""Howdy"")', 'var a = 5', '++a', 'max = if (a > b) a else b', 'print(""Hey "")', 'print(""jude!"")', 'val flag = true', 'if (flag == true) {      // start of block', '    print(""Hey "")', '    print(""jude!"")', '}                        // end of block']",[],[]
5,['Kotlin Comments'],"['In this article, you will learn about Kotlin comments, and why and how to use them.']",[],[],"['Traditional comment /* ... */', 'End of Line Comment //', 'Use Comments the Right Way']",[],[],"['Similar like Java,\xa0there are two types of comments in Kotlin', 'The program above contains two end of line comments:']","['The compiler ignores everything from\xa0//\xa0to the end of the line. For example,', ""In most cases, use comments to explain 'why' rather than 'how' and you are good to go.""]","['In programming, comments are portion of the program intended for you and your fellow programmers to understand the code. They are completely ignored by the Kotlin compiler (Kompiler).', 'This is a multiline comment that can span over multiple lines. The Kotlin compiler ignores everything from\xa0/*\xa0to\xa0*/. For example,', 'The tradition comment is also used for documenting Kotlin code (KDoc)\xa0with a little variation. The KDoc\xa0comments starts with /** and ends with */.', ""Comments shouldn't be the substitute for a way to explain poorly written code in English. Write well structured and readable code, and then use comments."", ""Some believe that code should be self-documenting and comments should be scarce. However, I have to disagree with it completely (It's my personal opinion). There is nothing wrong with using comments to explain complex algorithms,\xa0regex\xa0or\xa0scenarios where you have chosen\xa0one technique over other (for future reference) to solve the problem.""]","['   println(""Hello, World!"")']","['/* This is a multi-line comment.', ' * The problem prints ""Hello, World!"" to the standard output.']","['fun main(args: Array<String>) {', '   println(""Hello, World!"")      // outputs Hello, World! on the screen', '}']",[],['/* ... */|||// ....|||']
6,['Kotlin Basic Input/Output'],"['In this article, you will learn to display output to the screen, and take input from the user in Kotlin.']",[],[],"['Koltin Output', 'Kotlin Input']","['Difference Between println() and print()', 'Example 1: print() and println()', 'Example 2: Print Variables and Literals', 'Example 3: Print String Entered By the User', 'Example 4: Getting Integer Input from the User']",[],"['When you run the program, the output will be:', 'Here, println() outputs the string (inside quotes).', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'In this section, you will learn to take input from the user..', 'When you run the program, the output will be:', 'Then, you need to create Scanner object from this class.', 'Now, the reader object is used to take input from the user.', 'When you run the program, the output will be:']","[""You can use println() and print() functions to send output to the standard output (screen). Let's take an example:"", 'Similarly, when you use print() function, it calls System.out.print() function.', 'To read a line of string in Kotlin, you can use readline() function.', 'If you want input of other data types, you can use Scanner object.', 'For that, you need to import Scanner class from Java standard library using:']","['When you use println() function, it calls System.out.println() function internally. (System.out.println() is used to print output to the screen in Java).', 'If you are using IntelliJ IDEA, put your mouse cursor next to println and go to Navigate > Declaration ( Shortcut: Ctrl + B . For Mac: Cmd + B), this will open Console.kt (declaration file). You can see that println() function is internally calling System.out.println().', ""It's possible to take input as a string using readLine() function, and convert it to values of other data type (like Int) explicitly."", 'Here, reader object of Scanner class is created. Then, the nextInt() method is called which takes integer input from the user which is stored in variable integer.', 'To get Long, Float, double and Boolean input from the user, you can use nextLong(), nextFloat(), nextDouble() and nextBoolean() methods respectively.']","['    println(""1. println "");', '    println(""2. println "");', '    print(""1. print "");', '    print(""2. print"");', '    val score = 12.3', '    println(""score"")', '    println(""$score"")', '    println(""score = $score"")', '    println(12.3)', '    print(""Enter text: "")', 'import java.util.Scanner', 'import java.util.Scanner', '    print(""Enter a number: "")']","['fun main(args : Array<String>) {', '    println(""Kotlin is interesting."")', 'fun main(args : Array<String>) {', 'fun main(args : Array<String>) {', '    val stringInput = readLine()!!', '    println(""You entered: $stringInput"")', 'val reader = Scanner(System.`in`)', '    val reader = Scanner(System.`in`)', '    var integer:Int = reader.nextInt()', '    println(""You entered: $integer"")']","['Kotlin is interesting.', '1. println ', '2. println ', '1. print 2. print', 'score', '12.3', 'score = 12.3', '24.6', '12.3', 'Enter text: Hmm, interesting!', 'You entered: Hmm, interesting!', 'Enter a number: -12', 'You entered: -12']",[],['print() - prints string inside the quotes.|||println() - prints string inside the quotes similar like print() function. Then the cursor moves to the beginning of the next line.|||']
7,['Kotlin if Expression'],"['In this article, you will learn to use if expression in Kotlin with the help of examples.']",[],[],"['Traditional Usage of if...else', 'Kotlin if expression', 'Kotlin if..else..if Ladder', 'Kotlin Nested if Expression']","['Example: Traditional Usage of if...else', 'Example: Kotin if expression', 'Example: if block With Multiple Expressions', 'Example: if...else...if Ladder', 'Example: Nested if Expression']",[],"['The syntax of if...else is:', 'When you run the program, the output will be:', 'Here is an example:', 'When you run the program, the output will be:', 'The else branch is mandatory when using if as an expression.', 'When you run the program, the output will be:', 'Recommended Reading: Kotlin when Statement', 'This program computes the largest number among three numbers.', 'When you run the program, the output will be:']","['The curly braces are optional if the body of if has only one statement. For example,', 'This is similar to ternary operator in Java. Hence, there is no ternary operator in Kotlin.', 'If the block of if branch contains more than one expression, the last expression is returned as the value of the block.', 'You can return a block of code among many blocks in Kotlin using if..else...if ladder.', 'This program checks whether number is positive number, negative number, or zero.', 'An if expression can be inside the block of another if expression known as nested if expression.']","['if executes a certain section of code if the testExpression is evaluated to true. It can have optional else clause. Codes inside else clause are executed if the testExpression is false.', 'Unlike Java (and other many programming languages), if\xa0can be used an expression in Kotlin; it returns a value. Recommended Reading: Kotlin expression']","['    val number = -10', '    if (number > 0) {', '    } else {', '    val number = -10', '        ""Positive number""', '    } else {', '        ""Negative number""', '    println(result)', '    val number = -10', '    println(result)', '    val a = -9', '    val b = -11', '    val max = if (a > b) {', '        a', '    } else {', '        b', '    println(""max = $max"")', '    val number = 0', '        ""positive number""', '    else if (number < 0)', '        ""negative number""', '    else ', '        ""zero""', '    val n1 = 3', '    val n2 = 5', '    val n3 = -2', '    val max = if (n1 > n2) {', '        if (n1 > n3)', '            n1', '        else', '            n3', '    } else {', '        if (n2 > n3)', '            n2', '        else', '            n3', '    println(""max = $max"")']","['        print(""Positive number"")', '        print(""Negative number"")', '    val result = if (number > 0) {', '    val result = if (number > 0) ""Positive number"" else ""Negative number""', '        println(""$a is larger than $b."")', '        println(""max variable holds value of a."")', '        println(""$b is larger than $a."")', '        println(""max variable holds value of b."")', '    val result = if (number > 0)', '    println(""number is $result"")']","['if (testExpression) {', '}', 'else {', '}', 'Negative number', 'Negative number', '-9 is larger than -11.', 'max variable holds value of a.', 'max = -9', 'max = 5']",[],[]
8,['Kotlin when Expression'],"['In this article, you will learn about when construct in Kotlin with the help of various examples.']",[],[],"['Kotlin when Construct', 'Few possibilities']",['Example: Simple when Expression'],[],"['When you run the program, the output will be something like:', 'When you run the program, the output will be something like:', 'Combine two or more branch conditions with a comma. For example,', 'When you run the program, the output will be:', 'Check value\xa0in the\xa0range. For example,', 'When you run the program, the output will be:', 'Check if a value is of a particular type.', 'Use expressions as branch condition. For example,', 'When you run the program, the output will be:']","['If none of the branch conditions are satisfied (user entered anything except +, -, *, or /) , else branch is evaluated.', ""In the above example, we used when as an expression. However, it's not mandatory to use when as an expression. For example,"", 'To check whether a value is of a particular type in runtime, we can use is and !is operator. For example,']","['The when construct in Kotlin can be thought of as a replacement for Java switch Statement. It evaluates a section of code among many alternatives.', 'The program above takes an input string from the user (Recommended Reading: Get String Input from the User in Kotlin). Suppose, the user entered *. In this case, the expression a * b is evaluated, and the value is assigned to variable result.', 'Here, when is not an expression (return value from when is not assigned to anything). In this case, the else branch is not mandatory.']","['    val a = 12', '    val b = 5', '    val operator = readLine()', '        ""+"" -> a + b', '        ""-"" -> a - b', '        ""*"" -> a * b', '        ""/"" -> a / b', '    val a = 12', '    val b = 5', '    val operator = readLine()', '    when (operator) {', '    val n = -1', '    when (n) {', '    val a = 100', '    when (a) {', '    val a = 11', '    val n = ""11""', '    when (n) {']","['    println(""Enter operator either +, -, * or /"")', '    val result = when (operator) {', '        else -> ""$operator operator is invalid operator.""', '    println(""Enter operator either +, -, * or /"")', '        ""+"" -> println(""$a + $b = ${a + b}"")', '        ""-"" -> println(""$a - $b = ${a - b}"")', '        ""*"" -> println(""$a * $b = ${a * b}"")', '        ""/"" -> println(""$a / $b = ${a / b}"")', '        else -> println(""$operator is invalid"")', '        1, 2, 3 -> println(""n is a positive integer less than 4."")', '        0 -> println(""n is zero"")', '        -1, -2 -> println(""n is a negative integer greater than 3."")', '        in 1..10 -> println(""A positive number less than 11."")', '        in 10..100 -> println(""A positive number between 10 and 100 (inclusive)"")', '        ""cat"" -> println(""Cat? Really?"")', '        12.toString() -> println(""Close but not close enough."")', '        a.toString() -> println(""Bingo! It\'s eleven."")']","['Enter operator either +, -, * or /', '*', 'result = 60', 'Enter operator either +, -, * or /', '-', '12 - 5 = 7', 'n is a negative integer greater than 3.', 'A positive number between 10 and 100 (inclusive)', 'when (x) {', '    is Int -> print(x + 1)', '    is String -> print(x.length + 1)', '    is IntArray -> print(x.sum())', '}', ""Bingo! It's eleven.""]",[],[]
9,['Kotlin while and do...while Loop'],"['Loop is used in programming to repeat a specific block of code. In this article, you will learn to create while and do...while loops in Kotlin programming.']",[],[],"['Kotlin while Loop', 'Kotlin do...while Loop']","['How while loop works?', 'Flowchart of while Loop', 'Example: Kotlin while Loop', 'Example: Compute sum of Natural Numbers', 'How do...while loop works?', 'Flowchart of do...while Loop', 'Example: Kotlin do...while Loop']","['//cdn.programiz.com/sites/tutorial2program/files/kotlin-while-loop-flowchart.jpg', '//cdn.programiz.com/sites/tutorial2program/files/kotlin-do-while-loop.jpg']","['The syntax of while loop is:', 'If the test expression is evaluated to true,', 'If the test expression is evaluated to false,', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'Its syntax is:', 'When you run the program, the output will be something like:']","['Loop is used in programming to repeat a specific block of code until certain condition is met (test expression is false).', 'You will learn about two loops while and do..while in this article with the help of examples.', 'If you are familiar with while and do...while loops in Java, you are already familiar with these loops in Kotlin as well.', 'The test expression inside the parenthesis is a Boolean expression.', 'This process goes on until the test expression is evaluated to false.', ""If the body of loop has only one statement, it's not necessary to use curly braces { }.\xa0"", 'To learn more about test expression and how it is evaluated, visit comparison and logical operators.', 'When the test expression is evaluated to false, do..while loop terminates.', 'The program below calculates the sum of numbers entered by the user until user enters 0.', 'To take input from the user, readline() function is used. Recommended Reading: Kotlin Basic Input']","['Loops are what makes computers interesting machines. Imagine you need to print a sentence 50 times on your screen. Well, you can do it by using print statement 50 times (without using loops). How about you need to print a sentence one million times? You need to use loops.', 'Notice, ++i statement inside the while loop. After 5 iterations, variable i will be incremented to 6. Then, the test expression i <= 5 is evaluated to false and the loop terminates.', 'Here, the variable sum is initialized to 0 and i is initialized to 100. In each iteration of while loop, variable sum is assigned sum + i, and the value of i is decreased by 1 until i is equal to 0. For better visualization,', 'The do...while loop is similar to while loop with one key difference. The body of do...while loop is executed once\xa0before the test expression is checked.', 'The codes inside the body of do construct is executed once (without checking the testExpression). Then, the test expression is checked.', 'If the test expression is evaluated to true, codes inside the body of the loop are executed, and test expression is evaluated again. This process goes on until the test expression is evaluated to false.']","['    var i = 1', '    while (i <= 5) {', '        println(""Line $i"")', '        ++i', '    var sum = 0', '    var i = 100', '    while (i != 0) {', '        --i', '    println(""sum = $sum"")', '    var sum: Int = 0', '    var input: String', '    do {', '        input = readLine()!!', '        sum += input.toInt()', '    } while (input != ""0"")', '    println(""sum = $sum"")']","['        sum += i     // sum = sum + i;', '        print(""Enter an integer: "")']","['while (testExpression) {', '}', 'Line 1', 'Line 2', 'Line 3', 'Line 4', 'Line 5', 'sum = 5050', '1st iteration: sum = 0+100 = 100, i = 99', '2nd iteration: sum = 100+99 = 199, i = 98', '3rd iteration: sum = 199+98 = 297, i = 97', '... .. ...', '... .. ...', '99th iteration: sum = 5047+2 = 5049, i = 1', '100th iteration: sum = 5049+1 = 5050, i = 0 (then loop terminates)', 'do {', '} while (testExpression);', 'Enter an integer: 4', 'Enter an integer: 3', 'Enter an integer: 2', 'Enter an integer: -6', 'Enter an integer: 0', 'sum = 3']",[],"['statements inside the while loop are executed.|||then, the test expression is evaluated again.|||while loop is terminated.|||']"
10,['Kotlin for Loop'],"['The for loop in Kotlin iterates through anything that provides an iterator. In this article, you learn to create for loop (with the help of examples).']",[],[],"['Iterating Through an Array', 'Iterating Through a String']","['Example: Iterate Through a Range', 'Example: Different Ways to Iterate Through a Range']",[],"['The\xa0syntax of for loop in Kotlin is:', 'Output', 'Output', ""Here's an example to iterate through a String array."", 'Output', 'Output', 'If you want to learn more about arrays, visit Kotlin arrays.', 'Output', 'Output']","['There is\xa0no traditional for loop in Kotlin unlike Java and other languages.', 'In Kotlin, for loop is used to iterate through ranges, arrays, maps and so on (anything that provides an iterator).', 'Here, the loop iterates through\xa0the\xa0range and prints individual item.', ""If the body of the loop contains only one statement (like above example), it's not necessary to use curly braces { }."", ""It's possible to\xa0iterate through an array with an index. For example,"", 'Note: Here, language.indices returns all all indices of each array elements.', 'Similar like arrays, you can iterate through a String with an index. For example,', 'You will learn to iterate over a map using for loop in Kotin map article.']","[""It's possible to iterate\xa0through a range using for loop because ranges provides an iterator. To learn more, visit Kotlin iterators.""]","['    for (i in 1..5) {', '        println(i)', '    for (i in 1..5) println(i)', '    for (i in 1..5) print(i)', '    println()', '    println()', '    println()', '    println()', '    for (item in language)', '        println(item)', '        if (item%2 == 0)', '    var text= ""Kotlin""', '    for (letter in text) {', '        println(letter)', '    var text= ""Kotlin""', '        println(text[item])']","['    print(""for (i in 1..5) print(i) = "")', '    print(""for (i in 5..1) print(i) = "")', '    for (i in 5..1) print(i)             // prints nothing', '    print(""for (i in 5 downTo 1) print(i) = "")', '    for (i in 5 downTo 1) print(i)', '    print(""for (i in 1..5 step 2) print(i) = "")', '    for (i in 1..5 step 2) print(i)', '    print(""for (i in 5 downTo 1 step 2) print(i) = "")', '    for (i in 5 downTo 1 step 2) print(i)', '    var language = arrayOf(""Ruby"", ""Kotlin"", ""Python"" ""Java"")', '    var language = arrayOf(""Ruby"", ""Kotlin"", ""Python"", ""Java"")', '    for (item in language.indices) {', '            println(language[item])', '    for (item in text.indices) {']","['for (item in collection) {', '}', '1', '2', '3', '4', '5', 'for (i in 1..5) print(i) = 12345', 'for (i in 5..1) print(i) = ', 'for (i in 5 downTo 1) print(i) = 54321', 'for (i in 1..5 step 2) print(i) = 135', 'for (i in 5 downTo 1 step 2) print(i) = 531', 'K', 'o', 't', 'l', 'i', 'n', 'K', 'o', 't', 'l', 'i', 'n']",[],[]
11,['Kotlin break Expression'],"['In this tutorial, you will learn to use break to terminate a loop. Also, you will also learn about break labels.']",[],[],"['How break works?', 'Kotlin Labeled break']","['Example: Kotlin break', 'Example: Calculate Sum Until User enters 0', 'How labeled break works?']","['//cdn.programiz.com/sites/tutorial2program/files/kotlin-break.jpg', '//cdn.programiz.com/sites/tutorial2program/files/kotlin-labeled-break.jpg']","['It is almost always used with if..else construct. For example,', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'Label in Kotlin starts with an identifier which is followed by @.', ""Here's an example:"", 'When you run the program, the output will be:', ""Here's a little variation of the above program."", 'When you run the program, the output will be:']","['If testExpression is evaluated to true, break is executed which terminates the for loop.', 'The program below calculates the sum of numbers entered by the user until user enters 0.', 'Visit Kotlin Basic Input Output to learn more on how to take input from the user.', 'In the above program, the test expression of the while loop is always true.', 'Here, the while loop runs until user enters 0. When user inputs 0, break is executed which terminates the while loop.', 'Here, when i == 2 expression is evaluated to true, break@first is executed which terminates the loop marked with label first@.', 'In the program below, break terminates the loop marked with label @second.']","['Suppose you are working with loops. It is sometimes desirable to terminate the loop immediately without checking the test expression.', 'In such case, break is used. It terminates the nearest enclosing loop when encountered (without checking the test expression). This is similar to how break statement works in Java.', 'When the value of i is equal to 5, expression i == 5 inside if is evaluated to true, and break is executed. This terminates the for loop.', 'What you have learned till now is an unlabeled form of break, which terminates the nearest enclosing loop. There is another way break can be used (labeled form) to terminate the desired loop (can be an outer loop).', 'Here, test@ is a label marked at the outer while loop. Now, by using break with a label (break@test in this case), you can break the specific loop.', 'Note: Since, break is used to terminate the innermost loop in this program, it is not necessary to use labeled break in this case.', 'There are 3 structural jump expressions in Kotlin: break, continue and return. To learn about continue and return expression, visit:']","['    for (i in 1..10) {', '        if (i == 5) {', '            break', '        }', '        println(i)', '    var sum = 0', '    var number: Int', '    while (true) {', '        if (number == 0)', '            break', '        sum += number', '    print(""sum = $sum"")', '    first@ for (i in 1..4) {', '            if (i == 2)', '                break@first', '        }', '    first@ for (i in 1..4) {', '            if (i == 2)', '                break@second', '        }']","['        print(""Enter a number: "")', '        number = readLine()!!.toInt()', '        second@ for (j in 1..2) {', '            println(""i = $i; j = $j"")', '        second@ for (j in 1..2) {', '            println(""i = $i; j = $j"")']","['for (...) {', '    if (testExpression) {', '        break', '    }', '}', '1', '2', '3', '4', 'Enter a number: 4', 'Enter a number: 12', 'Enter a number: 6', 'Enter a number: -9', 'Enter a number: 0', 'sum = 13', 'i = 1; j = 1', 'i = 1; j = 2', 'i = 2; j = 1', 'i = 1; j = 1', 'i = 1; j = 2', 'i = 2; j = 1', 'i = 3; j = 1', 'i = 3; j = 2', 'i = 4; j = 1', 'i = 4; j = 2']",[],['Kotlin continue|||Kotlin function|||']
12,['Kotlin continue Expression'],"['In this tutorial, you will learn to use continue to skip the current iteration of a loop. Also, you will also learn about continue labels in this article.']",[],[],"['How continue works?', 'Kotlin Labeled continue']","['Example: Kotlin continue', 'Example: Calculate Sum of Positive Numbers Only', 'How labeled continue works?', 'Example: labeled continue']","['//cdn.programiz.com/sites/tutorial2program/files/continue-kotlin.jpg', '//cdn.programiz.com/sites/tutorial2program/files/how-labeled-continue-works.jpg']","['It is almost always used with if...else construct. For example,', 'When you run the program, the output will be:', 'statement.', 'However, the statement', 'When you run the program, the output will be:', 'Label in Kotlin starts with an identifier which is followed by @.', 'When you run the program, the output will be:']","['Suppose you are working with loops. It is sometimes desirable to skip the current iteration of the loop.', 'When the value of i is greater than 1 and less than 5, continue is executed, which skips the execution of', 'is executed in each iteration of the loop because this statement exists before the continue construct.', 'Visit Kotlin Basic Input Output to learn more on how to take input from the user.']","['In such case, continue is used. The continue construct skips the current iteration of the enclosing loop, and the control of the program jumps to the end of the loop body.', 'If the testExpression2 is evaluated to true, continue is executed which skips all the codes inside while loop after it for that iteration.', 'The program below calculates the sum of maximum of 6 positive numbers entered by the user. If the user enters negative number or zero, it is skipped from calculation.', 'What you have learned till now is unlabeled form of continue, which skips current iteration of the nearest enclosing loop. continue can also be used to skip the iteration of the desired loop (can be outer loop) by using continue labels.', 'Here, outerloop@ is a label marked at outer while loop. Now, by using continue with the label (continue@outerloop in this case), you can skip the execution of codes of the specific loop for that iteration.', 'The use of labeled continue is often discouraged as it makes your code hard to understand. If you are in a situation where you have to use labeled continue, refactor your code and try to solve it in a different way to make it more readable.', 'There are 3 structural jump expressions in Kotlin: break, continue and return. To learn about break and return expression, visit:']","['    for (i in 1..5) {', '        if (i > 1 && i < 5) {', '            continue', '        }', '    var number: Int', '    var sum = 0', '    for (i in 1..6) {', '        if (number <= 0)', '            continue', '        ', '        sum += number', '    println(""sum = $sum"")', '    here@ for (i in 1..5) {', '        for (j in 1..4) {', '                continue@here', '        }']","['        println(""$i Always printed."")', '        println(""$i Not always printed."")', '        print(""Enter an integer: "")', '        number = readLine()!!.toInt()', '            if (i == 3 || j == 2)', '            println(""i = $i; j = $j"")']","['while (testExpression1) {', '    if (testExpression2) {', '        continue', '    }', '}', '1 Always printed.', '1 Not always printed.', '2 Always printed.', '3 Always printed.', '4 Always printed.', '5 Always printed.', '5 Not always printed.', 'println(""$i Not always printed."")', 'println(""$i Always printed."")', 'Enter an integer: 4', 'Enter an integer: 5', 'Enter an integer: -50', 'Enter an integer: 10', 'Enter an integer: 0', 'Enter an integer: 12', 'sum = 31', 'i = 1; j = 1', 'i = 2; j = 1', 'i = 4; j = 1', 'i = 5; j = 1']",[],['Kotlin break|||Kotlin function|||']
13,['Kotlin Functions'],"[""In this article, you'll learn about functions; what functions are, its syntax and how to create a user-function in Kotlin.""]",[],[],['Types of Functions'],"['Kotlin Standard Library Function', 'User-defined Functions', 'How to create a user-defined function in Kotlin?', 'How to call a function?', 'Example: Simple Function Program', 'Example: Add Two Numbers Using Function', 'How functions with arguments and return value work?', 'Example: Display Name by Using Function']","['//cdn.programiz.com/sites/tutorial2program/files/kotlin-function-call.jpg', '//cdn.programiz.com/sites/tutorial2program/files/passing-arguments-function-kotlin.jpg', '//cdn.programiz.com/sites/tutorial2program/files/return-value-function-kotlin.jpg']","['Furthermore, it avoids repetition and makes code reusable.', 'When you run the program, the output will be:', 'Here is a link to the Kotlin Standard Library for you to explore.', 'Before you can use (call) a function, you need to define it.', ""Here's how you can define a function in Kotlin:"", 'The codes inside curly braces { } is the body of the function.', 'This statement calls the callMe() function declared earlier.', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'Here,', 'Notice,', 'When you run the program, the output will be:']","['In programming, function is a group of related statements that perform a specific task.', 'Dividing a complex program into smaller components makes our program more organized and manageable.', 'Depending on whether a function is defined by the user, or available in standard library, there are two types of functions:', 'The standard library functions are built-in functions in Kotlin that are readily available for use. For example,', 'As mentioned, you can create functions yourself. Such functions are called user-defined functions.', ""You have to call the function to run codes inside the body of the function. Here's how:"", ""The callMe() function in the above code doesn't accept any argument."", ""Also, the function doesn't return any value (return type is Unit)."", ""Let's take another function example. This function will accept arguments and also returns a value."", 'In Kotlin, arguments are separated using commas. Also, the type of the formal argument must be explicitly typed.', 'In the program, sumInteger is returned from addNumbers() function. This value is assigned to the variable result.', 'Here, the getName() function takes two String arguments, and returns a String.', 'This is just the brief introduction to functions in Kotlin. Recommended articles related to functions:']","['Functions are used to break a large program into smaller and modular chunks. For example, you need to create and color a circle based on input from the user. You can create two functions to solve this problem:', 'To define a function in Kotlin, fun keyword is used. Then comes the name of the function (identifier). Here, the name of the function is callMe.', ""In the above program, the parenthesis ( ) is empty. It means, this function doesn't accept any argument. You will learn about arguments later in this article."", 'Here, two arguments number1 and number2 of type Double are passed to the addNumbers() function during function call. These arguments are called actual arguments.', 'The parameters n1 and n2 accepts the passed arguments (in the function definition). These arguments are called formal arguments (or parameters).', 'Note that, the data type of actual and formal arguments should match, i.e., the data type of first actual argument should match the type of first formal argument. Similarly, the type of second actual argument must match the type of second formal argument and so on.', 'is the return statement. This code terminates the addNumbers() function, and control of the program jumps to the main() function.', ""If the function doesn't return any value, its return type is Unit. It is optional to specify the return type in the function definition if the return type is Unit."", 'You can omit the curly braces { } of the function body and specify the body after = symbol if the function returns a single expression (like above example).', 'It is optional to explicitly declare the return type in such case because the return type can be inferred by the compiler. In the above example, you can replace']","['    var number = 5.5', 'fun callMe() {', '    callMe()', '    val sum = n1 + n2', '    return sumInteger', '    val number1 = 12.2', '    val number2 = 3.4', '    val result: Int']","['    print(""Result = ${Math.sqrt(number)}"")', '    println(""Printing from callMe() function."")', '    println(""This is cool (still printing from inside)."")', '    println(""Printing outside from callMe() function."")', 'fun addNumbers(n1: Double, n2: Double): Int {', '    val sumInteger = sum.toInt()', '    result = addNumbers(number1, number2)', '    println(getName(""John"", ""Doe""))', 'fun getName(firstName: String, lastName: String): String = ""$firstName $lastName""']","['Result = 2.345207879911715', 'fun callMe() {', '}', 'callme()', 'Printing from callMe() function.', 'This is cool (still printing from inside).', 'Printing outside from callMe() function.', 'result = 15', 'result = addNumbers(number1, number2)', 'return sumInteger', 'fun addNumbers(n1: Double, n2: Double): Int {', '    ... .. ...', '}', 'John Doe', 'fun getName(firstName: String, lastName: String): String = ""$firstName $lastName""', 'fun getName(firstName: String, lastName: String) = ""$firstName $lastName""']",[],"['createCircle() Function|||colorCircle() Function|||Kotlin Standard Library Function|||User-defined functions|||print() is a library function that prints message to the standard output stream (monitor).|||sqrt() returns square root of a number (Double value)|||both sumInteger and result are of type Int.|||the return type of the function is specified in the function definition.||||||// return type is Int|||fun addNumbers(n1: Double, n2: Double): Int {|||    ... .. ...|||}||||||Kotlin inline functions|||Kotlin infix functions|||Kotlin function scope|||Kotlin Default and Named Arguments|||Kotlin Recursion|||Kotlin Tail Recursive function|||Kotlin Extension Function|||Kotlin High-Order Functions & Lambdas|||']"
14,['Kotlin Infix Function Call'],"['In this article, you will learn to use infix notation to call a function in Kotlin (with the help of examples).']",[],[],[],"['Example: Kotlin or & and function', 'How to create a function with infix notation?', 'Example: User-defined Function With Infix Notation']",[],"['These two functions support infix notation.', 'When you run the program, the output will be:', 'When you run the program, the output will be:']","[""Before you learn how to create a function having infix notation, let's explore two commonly used infix functions."", 'When you use || and && operations, the compiler look up for or and and functions respectively, and calls them under the hood.', 'You can make a function call in Kotlin using infix notation if the function', 'The number of rows of the pyramind depends on the argument passed to the function.']","['In the above program, a or b instead of a.or(b), and a and b instead of a.and(b) is used. It was possible because these two functions support infix notation.', 'Here, createPyramid() is an infix function that creates a pyramid structure. It is a member function of class Structure, takes only one parameter of type Int, and starts with keyword infix.']","['    val a = true', '    val b = false', '    var result: Boolean', '    result = a or b // a.or(b)', 'class Structure() {', '        var k = 0', '        for (i in 1..rows) {', '            k = 0', '                print(""  "")', '            }', '                print(""* "")', '                ++k', '            }', '            println()', '        }', '    val p = Structure()', '      * ', '    * * * ', '  * * * * * ', '* * * * * * * ']","['    result = a and b // a.and(b)', '    infix fun createPyramid(rows: Int) {', '            for (space in 1..rows-i) {', '            while (k != 2*i-1) {', '    p createPyramid 4       // p.createPyramid(4)']","['result = true', 'result = false']",[],['is a member function (or an extension function).|||has only one single parameter.|||is marked with infix keyword.|||']
15,['Kotlin Default and Named Arguments'],"['In this article, you will learn about default and named arguments with the help of examples.']",[],[],"['Kotlin Default Argument', 'Kotlin named argument']","['How default arguments works?', 'Example: Kotlin Default Argument', 'Example: Kotlin named argument']","['//cdn.programiz.com/sites/tutorial2program/files/both-argument-passed-kotlin.jpg', '//cdn.programiz.com/sites/tutorial2program/files/all-arguments-not-passed.jpg', '//cdn.programiz.com/sites/tutorial2program/files/no-argument-passed-default-argument.jpg', '//cdn.programiz.com/sites/tutorial2program/files/named-argument-kotlin-programming.jpg']","['Case I: All arguments passed', 'Case II: All arguments are not passed', 'Case III: No argument is passed', 'When you run the program, the output will be:', ""To solve this situation, named arguments can be used. Here' how:"", 'When you run the program, the output will be:']","['In Kotlin, you can provide default values to parameters in function definition.', ""The value of letter and number will be 'x' and 2 respectively inside the foo() function."", ""The value of letter and number will be 'y' and 15 respectively inside the foo() function."", 'Here, the foo() function is called without passing any argument. Hence, both arguments uses its default values.', ""The value of letter and number will be 'a' and 15 respectively inside the foo() function."", 'Before talking about named argument, let us consider a little modification of the above code:', ""The first argument character uses the default value '=' in the program.""]","['If the function is called with arguments passed, those arguments are used as parameters. However, if the function is called without passing argument(s), default arguments are used.', 'The function foo() takes two arguments. The arguments are provided with default values. However, foo() is called by passing both arguments in the above program. Hence, the default arguments are not used.', 'Here, only one (first) argument is passed to the foo() function. Hence, the first argument uses the value passed to the function. However, second argument number will take the default value since the second argument is not passed during function call.', ""Here, we are trying to pass second argument to the displayBorder() function, and use default argument for first argument. However, this code will give use an error. It's because the compiler thinks we are trying to provide 5 (Int value) to character (Char type)."", ""In the above program, we are using named argument (length = 5) specifying that the length parameter in the function definition should take this value (doesn't matter the position of the argument).""]","['    for (i in 1..length) {', '        print(character)', '    displayBorder()', ""    displayBorder('*')"", ""    displayBorder('*', 5)"", '    for (i in 1..length) {', '        print(character)', '    displayBorder(5)', '    for (i in 1..length) {', '        print(character)', '    displayBorder(length = 5)']","[""fun displayBorder(character: Char = '=', length: Int = 15) {"", '    println(""Output when no argument is passed:"")', '    println(""\\n\\n\'*\' is used as a first argument."")', '    println(""Output when first argument is passed:"")', '    println(""\\n\\n\'*\' is used as a first argument."")', '    println(""5 is used as a second argument."")', '    println(""Output when both arguments are passed:"")', ""fun displayBorder(character: Char = '=', length: Int = 15) {"", ""fun displayBorder(character: Char = '=', length: Int = 15) {""]","['Output when no argument is passed:', '===============', ""'*' is used as a first argument."", 'Output when first argument is passed:', '***************', ""'*' is used as a first argument."", '5 is used as a second argument.', 'Output when both arguments are passed:', '*****', '=====']",[],[]
16,['Kotlin Recursion (Recursive Function) and Tail Recursion'],"['In this article, you will learn to create recursive functions; a function that calls itself. Also, you will learn about tail recursive function.']",[],[],[],"['How does recursion work in programming?', 'Example: Find factorial of a Number using Recursion', 'How this program works?', 'Kotlin Tail Recursion', 'What is tail recursion?', 'Condition for tail recursion', 'Example: Tail Recursion', 'Example: Factorial Using Tail Recursion']","['//cdn.programiz.com/sites/tutorial2program/files/recursive-call-kotlin.jpg', '//cdn.programiz.com/sites/tutorial2program/files/working-recursion-kotlin.jpg']","['When you run the program, the output will be:', 'Here are the steps involved:', 'When you run the program, the output will be:', 'When you run the program, the output will be:']","['A function that calls itself is known as recursive function. And, this technique is known as recursion.', ""Here, the recurse() function is called from the body of recurse() function itself. Here's how this program works:"", 'Here, the recursive call continues forever causing infinite recursion.', 'The recursive call of the factorial() function can be explained in the following figure:', 'Example 1: Not eligible for tail recursion because the function call to itself n*factorial(n-1) is not the last operation.', 'Example 2: Eligible for tail recursion because function call to itself fibonacci(n-1, a+b, a) is the last operation.', 'To tell compiler to perform tail recursion in Kotlin, you need to mark the function with tailrec modifier.']","['A physical world example would be to place two parallel mirrors facing each other. Any object in between them would be reflected recursively.', ""To avoid infinite recursion, if...else (or similar approach) can be used where one branch makes the recursive call and other doesn't."", 'Tail recursion is a generic concept rather than the feature of Kotlin language. Some programming languages including Kotlin use it to optimize recursive calls, whereas other languages (eg. Python) do not support them.', ""In normal recursion, you perform all recursive calls first, and calculate the result from return values at last (as show in the above example). Hence, you don't get result until all recursive calls are made."", 'In tail recursion, calculations are performed first, then recursive calls are executed (the recursive call passes the result of your current step to the next recursive call). This makes the recursive call equivalent to looping, and avoids the risk of stack overflow.', 'A recursive function is eligible for tail recursion if the function call to itself is the last operation it performs. For example,', 'This program computes the 100th term of the Fibonacci series. Since, the output can be a very large integer, we have imported BigInteger class from Java standard library.', 'Here, the function fibonacci() is marked with tailrec modifier and the function is eligible for tail recursive call. Hence, the compiler optimizes the recursion in this case.', ""If you try to find the 20000th term (or any other big integer) of the Fibonacci series without using tail recursion, the compiler will throw java.lang.StackOverflowError exception. However, our program above works just fine. It's because we have used tail recursion which uses efficient loop based version instead of traditional recursion."", ""The example to compute factorial of a number in the above example (first example) cannot be optimized for tail recursion. Here's a different program to perform the same task."", 'The compiler can optimize the recursion in this program as the recursive function is eligible for tail recursion, and we have used tailrec modifier that tells compiler to optimize the recursion.']","['    val number = 4', '    val result: Long', '    result = factorial(number)', 'fun factorial(n: Int): Long {', 'import java.math.BigInteger', '    val n = 100', '    val number = 5']","['    println(""Factorial of $number = $result"")', '    return if (n == 1) n.toLong() else n*factorial(n-1)', '    val second = BigInteger(""1"")', '    println(fibonacci(n, first, second))', 'tailrec fun fibonacci(n: Int, a: BigInteger, b: BigInteger): BigInteger {', '    return if (n == 0) a else fibonacci(n-1, b, a+b)', '    println(""Factorial of $number = ${factorial(number)}"")', 'tailrec fun factorial(n: Int, run: Int = 1): Long {', '    return if (n == 1) run.toLong() else factorial(n-1, run*n)']","['fun main(args: Array<String>) {', '    ... .. ...', '    recurse()', '    ... .. ...', '}', 'fun recurse() {', '    ... .. ...', '    recurse()', '    ... .. ...', '}', 'Factorial of 4 = 24', 'factorial(4)              // 1st function call. Argument: 4', '4*factorial(3)            // 2nd function call. Argument: 3', '4*(3*factorial(2))        // 3rd function call. Argument: 2', '4*(3*(2*factorial(1)))    // 4th function call. Argument: 1 ', '4*(3*(2*1))                 ', '24', 'fun factorial(n: Int): Long {', '    if (n == 1) {', '        return n.toLong()', '    } else {', '        return n*factorial(n - 1)     ', '    }', '}', 'fun fibonacci(n: Int, a: Long, b: Long): Long {', '    return if (n == 0) b else fibonacci(n-1, a+b, a)', '}', '354224848179261915075', 'Factorial of 5 = 120']",[],[]
17,['Kotlin Class and Objects'],"[""In this article, you'll be introduced to Object-oriented programming in Kotlin. You'll learn what a class is, how to create objects and use it in your program.""]",[],[],"['Object-oriented Programming (OOP)', 'Kotlin Class']","['How to define a class in Kotlin?', 'Kotlin Objects', 'How to access members?', 'Example: Kotlin Class and Object']",[],"['Kotlin supports both functional and object-oriented programming.', 'These objects share two characteristics:', ""Let's take few examples:"", 'Recommended reading: What is an object?', 'Before you create objects in Kotlin, you need to define a class.', 'A class is a blueprint for the object.', 'To define a class in Kotlin, class keyword is used:', ""Here's an example:"", 'Here, we defined a class named Lamp.', 'Recommended Reading: Kotlin functions', 'Other visibility modifiers are:', 'This statement calls turnOn() function for l1 object.', ""Let's take another example:"", 'When you run the program, the output will be:', 'In the above program,', 'For example:', 'When you run the program, the output will be:']","['In object-oriented style of programming, you can divide a complex problem into smaller sets by creating objects.', 'Since, many houses can be made from the same description, we can create many objects from a class.', 'The class has one property isOn (defined in same way as variable), and two member functions turnOn() and turnOff().', 'You will learn about protected and internal modifiers later in Kotlin visibility modifiers article.', 'If you do not specify the visibility modifier, it will be public by default.', 'In the above program, turnOn() and turnOff() member functions are public whereas, isOn property is private.', 'When class is defined, only the specification for the object is defined; no memory or storage is allocated.', ""To access members defined within the class, you need to create objects. Let's create objects of Lamp class."", 'This program creates two objects l1 and l2 of class Lamp. The isOn property for both lamps l1 and l2 will be false.', 'You can access properties and member functions of a class by using . notation. For example,', 'This article is just an introduction to object-oriented programming in Kotlin. Check these chapters in sequence to learn more:']","['Kotlin supports features such as higher-order functions, function types and lambdas which makes it a great choice for working in functional programming style. You will learn about these concept in later chapters. This article will focus on object-oriented style of programming in Kotlin.', 'You will learn about detail features of an object-oriented programming like: data encapsulation, inheritance and polymorphism as we go on. This article will focus on the basics to keep things simple.', 'We can think of class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows etc. Based on these descriptions we build the house. House is the object.', 'In Kotlin, either the property must be initialized or must be declared abstract (Visit: Kotlin Abstract Class to learn more). In the above example, isOn property is initialized to false.', 'Classes, objects, properties, member function etc. can have visibility modifiers. For example, the isOn property is private. This means, the isOn property can be changed from only inside the Lamp class.', 'Here, we tried to assign true to isOn property of l2 object. Note that, isOn property is private,\xa0and if you try to access\xa0isOn from outside the class, an exception is thrown.', ""Notice that, the isOn property is initialized to false inside the class. When an object of the class is created, isOn property for the object is initialized to false automatically. So, it's not necessary for l2 object to call turnOff() to set isOn property to false.""]","['class Lamp {', '    fun turnOn() {', '        isOn = true', '    fun turnOff() {', '        isOn = false', 'class Lamp {', '    fun turnOn() {', '        isOn = true', '    fun turnOff() {', '        isOn = false', '        if (isOn == true)', '        else', '    l1.turnOn()', '    l2.turnOff()', 'class Lamp {', '    fun turnOn() {', '        isOn = true', '    fun turnOff() {', '        isOn = false', '    fun displayLightStatus() {', '        if (isOn == true)', '        else', '    val lamp = Lamp()', '    lamp.displayLightStatus()']","['    private var isOn: Boolean = false', '    val l1 = Lamp() // create l1 object of Lamp class', '    val l2 = Lamp() // create l2 object of Lamp class', '    private var isOn: Boolean = false', '    fun displayLightStatus(lamp: String) {', '            println(""$lamp lamp is on."")', '            println(""$lamp lamp is off."")', '    val l1 = Lamp() // create l1 object of Lamp class', '    val l2 = Lamp() // create l2 object of Lamp class', '    private var isOn: Boolean = false', '            println(""lamp is on."")', '            println(""lamp is off."")']","['class ClassName {', '    ... .. ...', '}', 'class Lamp {', '    private var isOn: Boolean = false', '    fun turnOn() {', '        isOn = true', '    }', '    fun turnOff() {', '        isOn = false', '    }', '}', 'l1.turnOn()', 'l2.isOn = true', 'l1 Lamp is on.', 'l2 Lamp is off.', 'lamp is off.']",[],"['state|||behavior|||It can be in on or off state.|||You can turn on and turn off lamp (behavior).|||It has current gear, two wheels, number of gear etc. states.|||It has braking, accelerating, changing gears etc. behavior.|||private - visible (can be accessed) from inside the class only.|||public - visible everywhere.|||protected - visible to the class and its subclass.|||internal - any client inside the module can access them.|||Lamp class is created.|||The class has a property isOn and three member functions turnOn(), turnOff() and displayLightStatus().|||Two objects l1 and l2 of Lamp class are created in the main() function.|||Here, turnOn() function is called using l1 object: l1.turnOn(). This method sets isOn instance variable of l1 object to true.|||And, turnOff() function is called using l2 object: l1.turnOff(). This method sets isOff instance variable of l2 object to false.|||Then, displayLightStatus() function is called for l1 and l2 objects which prints appropriate message depending on whether isOn property is true or false.|||Kotlin Constructors and Initializers|||Kotlin this Keyword|||Kotlin Nested Class|||&&&Lamp is an object||||||It can be in on or off state.|||You can turn on and turn off lamp (behavior).||||||Bicycle is an object|||It has current gear, two wheels, number of gear etc. states.|||It has braking, accelerating, changing gears etc. behavior.||||||']"
18,['Kotlin Constructors'],"['In this article, you will learn about constructors in Kotlin (both primary and secondary constructors) as well as initializer blocks with the help of examples.']",[],[],"['Primary Constructor', 'Kotlin Secondary Constructor']","['Example: Primary Constructor', 'Primary Constructor and Initializer Blocks', 'Default Value in Primary Constructor', 'Example: Kotlin Secondary Constructor']","['//cdn.programiz.com/sites/tutorial2program/files/calling-constructor-inheritance.jpg', '//cdn.programiz.com/sites/tutorial2program/files/calling-constructor-kotlin.jpg']","['A constructor is a concise way to initialize class properties.', 'In Kotlin, there are two constructors:', 'When you run the program, the output will be:', 'There are other ways of using primary constructors.', 'When you run the program, the output will be:', 'Here is another way to perform the same task:', 'When you run the program, the output will be:', ""Here's how you can create a secondary constructor in Kotlin:"", 'You can extend the class as:', 'When you run the program, the output will be:']","[""The primary constructor is part of the class header. Here's an example:"", 'The block of code surrounded by parentheses is the primary constructor: (val firstName: String, var age: Int).', 'When the object of Person class is created, ""Joe"" and 25 values are passed as if Person is a function.', 'This initializes firstName and age properties of person1 object to ""Joe"" and 25 respectively.', 'The primary constructor has a constrained syntax, and cannot contain any code.', 'The Person class has two properties firstName, and age are declared.', 'You can provide default value to constructor parameters (similar to providing default arguments to functions). For example:', 'In Kotlin, a class can also contain one or more secondary constructors. They are created using constructor keyword.', 'Here, the Log class has two secondary constructors, but no primary constructor.', 'In Kotlin, you can also call a constructor from another constructor of the same class (like in Java) using this().']","['It is\xa0a\xa0special member function that is called when an object is instantiated (created). However, how they work in Kotlin is slightly different.', ""The constructor declared two properties: firstName (read-only property as it's declared using keyword val) and age (read-write property as it is declared with keyword var)."", ""To put the initilization code (not only code to initialize properties), initializer block is\xa0used. It is prefixed with\xa0init keyword. Let's modify the above example with initializer block:"", 'Here, parameters fName and personAge inside the parenthesis accepts values ""Joe"" and 25 respectively when person1 object is created. However, fName and personAge are used without using var or val, and are not properties of the Person class.', 'When person1 object is created, code inside initializer block is executed. The initializer block not only initializes its properties but also prints them.', ""To distinguish the constructor parameter and property, different names are used (fName and firstName, and personAge and age). It's more common to use _firstName and _age instead of completely different name for constructor parameters. For example:"", 'Secondary constructors are not that common in Kotlin. The most common use of secondary constructor comes up when you need to extend a class that provides multiple constructors that initialize the class in different ways. Be sure to check Kotlin Inheritance before you learn it.', 'Here, constructors of the derived class AuthLog calls the corresponding constructor of the base class Log. For that, super() is used.', 'Note: The secondary constructor must initialize the base class or delegate to another constructor (like in above example) if the class has no primary constructor.']","['    val firstName: String', '    var age: Int', '    init {', '        age = personAge', '        println(""Age = $age"")', 'First Name = Joe', 'Age = 25', '    var age = personAge', '    init {', '        println(""Age = $age"")', '    val person3 = Person()', '    var age = _age', '    init {', 'open class Log {', '    var data: String = """"', '    var numberOfData = 0', '        data = _data', 'class AuthLog: Log {']","['    val person1 = Person(""Joe"", 25)', '    println(""First Name = ${person1.firstName}"")', '    println(""Age = ${person1.age}"")', 'class Person(val firstName: String, var age: Int) {', '    val person1 = Person(""joe"", 25)', 'class Person(fName: String, personAge: Int) {', '        firstName = fName.capitalize()', '        println(""First Name = $firstName"")', '    val person1 = Person(""joe"", 25)', 'class Person(fName: String, personAge: Int) {', '    val firstName = fName.capitalize()', '        println(""First Name = $firstName"")', '    println(""person1 is instantiated"")', '    val person1 = Person(""joe"", 25)', '    println(""person2 is instantiated"")', '    val person2 = Person(""Jack"")', '    println(""person3 is instantiated"")', 'class Person(_firstName: String = ""UNKNOWN"", _age: Int = 0) {', '    val firstName = _firstName.capitalize()', '        println(""First Name = $firstName"")', '    val p1 = AuthLog(""Bad Password"")', '    constructor(_data: String) {', '    constructor(_data: String, _numberOfData: Int) {', '        numberOfData = _numberOfData', '        println(""$data: $numberOfData times"")', '    constructor(_data: String): this(""From AuthLog -> "" + _data, 10) {', '    constructor(_data: String, _numberOfData: Int): super(_data, _numberOfData) {']","['class Person(val firstName: String, var age: Int) {', '}', 'First Name = Joe', 'Age = 25', 'class Person(_firstName: String, _age: Int) {', '    val firstName = _firstName.capitalize()', '    var age = _age', '    init {', '        ... .. ...', '    }', '}', 'First Name = Joe', 'Age = 25', 'person2 is instantiated', 'First Name = Jack', 'Age = 0', 'person3 is instantiated', 'First Name = UNKNOWN', 'Age = 0', 'class Log {', '    constructor(data: String) {', '    }', '    constructor(data: String, numberOfData: Int) {', '    }', '}', 'class Log {', '    constructor(data: String) {', '    }', '    constructor(data: String, numberOfData: Int) {', '    }', '}', 'class AuthLog: Log {', '    constructor(data: String): super(data) {', '    }', '    constructor(data: String, numberOfData: Int): super(data, numberOfData) {', '    }', '}', 'class AuthLog: Log {', '    constructor(data: String): this(data, 10) {', '    }', '    constructor(data: String, numberOfData: Int): super(data, numberOfData) {', '    }', '}', 'From AuthLog -> Bad Password: 10 times']",[],['Primary constructor - concise way to initialize a class|||Secondary constructor - allows you to put additional initialization logic|||']
19,['Kotlin Getters and Setters'],"['In this article, you will learn to use getters and setters in Kotlin with the help of an example.']",[],[],['How getters and setters work?'],['Example: Changing value of the property'],[],"['The following code in Kotlin', 'is equivalent to', ""Here's an working example:"", 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'Here, the actualAge property works as expected.']","['Before you learn about getters and setter, be sure to check Kotlin class and objects.', 'In Kotlin, getters and setters are optional and are auto-generated if you do not create them in your program.', 'Now, when you access name property of the object, you will get field because of the code get() = field.', 'However, there is additional logic is setters to modify value of the age property.']","['In programming, getters are used for getting value of the\xa0property. Similarly, setters are used for setting value of the property.', 'When you instantiate\xa0object of the\xa0Person class and initialize the name property, it is passed to the setters parameter value and sets field to value.', 'This is how getters and setters work by default. However, you can change value of the property (modify value) using getters and setters.']","['    val p = Person()', '    p.name = ""jack""', '    println(""${p.name}"")', 'class Person {', '    get() = field', '    set(value) {', '        field = value', '    val maria = Girl()', '    maria.actualAge = 15', '    maria.age = 15', '    val angela = Girl()', '    angela.actualAge = 35', '    angela.age = 35', 'class Girl {', '    var age: Int = 0', '    get() = field', '    set(value) {', '            18', '            value', '        else', '            value-3', '    var actualAge: Int = 0']","['    var name: String = ""defaultValue""', '    println(""Maria: actual age = ${maria.actualAge}"")', '    println(""Maria: pretended age = ${maria.age}"")', '    println(""Angela: actual age = ${angela.actualAge}"")', '    println(""Angela: pretended age = ${angela.age}"")', '        else if (value >= 18 && value <= 30)']","['class Person {', '    var name: String = ""defaultValue""', '}', 'class Person {', '    var name: String = ""defaultValue""', '    get() = field', '    set(value) {', '        field = value', '    }', '}', 'val p = Person()', 'p.name = ""jack""', 'println(""${p.name}"")', 'jack', 'Maria: actual age = 15', 'Maria: pretended age = 18', 'Angela: actual age = 35', 'Angela: pretended age = 32']",[],[]
20,['Kotlin Inheritance'],"[""In this article, you'll learn about inheritance. More specifically, what is inheritance and how to implement it in Kotlin (with the help of examples).""]",[],[],"['Why inheritance?', 'Kotlin inheritance', 'Example: Kotlin Inheritance', 'Important Notes: Kotlin Inheritance', 'Overriding Member Functions and Properties', 'Example: Overriding Member Function']",['Calling Members of Base Class from Derived Class'],"['//cdn.programiz.com/sites/tutorial2program/files/kotlin-inheritance-examples.jpg', '//cdn.programiz.com/sites/tutorial2program/files/kotlin-example-inheritance.jpg']","['This makes your code cleaner, understandable and extendable.', ""Let's try to implement the above discussion in code:"", 'When you run the program, the output will be:', 'When the object t1 of MathTeacher class is created,', 'When you run the program, the output will be:', 'You can override property of the base class in similar way.', 'When you run the program, the output will be:', 'When you run the program, the output will be:']","['The derived class inherits all the features from the base class and can have additional features of its own.', 'Before going into details about Kotlin inheritance, we recommend you to check these two articles:', 'Suppose, in your application, you want three characters - a math\xa0teacher, a footballer and a businessman.', 'You can individually create three classes who can walk, talk and perform their special skill.', 'In each of the classes, you would be copying the same code to walk and talk for each character.', 'Here, Person is a base class, and classes MathTeacher, Footballer, and Businessman are derived from the Person class.', ""Notice, the keyword open before the base class, Person. It's important."", 'Here, two classes MathTeacher and Footballer are derived from the Person class.', 'Next, the teachMaths() function for object t1 is called using t1.teachMaths() statement.', 'Here, girl.displayAge(31) calls the displayAge() method of the derived class Girl.', 'Visit how Kotlin getters and setters work in Kotlin before you check the example below.', 'As you can see, we have used override and open keywords for age property in derived class and base class respectively.', ""You can call functions (and access properties)\xa0of the base class from a derived class using super keyword. Here's how:""]","['Inheritance is one of the key features of object-oriented programming. It allows user to create a new class (derived class) from an existing class (base class).', 'Since, all of the characters are persons, they can walk and talk. However, they also have some special skills. A math\xa0teacher can teach math, a footballer can play football and a businessman can run a business.', 'If you want to add a new feature - eat, you need to implement the same code for each character. This can easily become error-prone (when copying) and duplicate codes.', 'It would be a lot easier if we had a Person class with basic features like talk, walk, eat, sleep, and add special skills to those features as per our characters. This is done using inheritance.', ""Using inheritance, now you don't implement the same code for walk(), talk() and eat() for each class. You just need to inherit them."", 'So, for MathTeacher (derived class), you inherit all features of a Person (base class) and add a new feature teachMath(). Likewise, for the Footballer class, you inherit all the features of the Person class and add a new feature playFootball() and so on.', 'It is important to remember: When working with inheritance, each derived class should satisfy the condition whether it ""is a"" base class or not. In the example above, MathTeacher is a Person, Footballer is a Person. You cannot have something like, Businessman is a Business.', 'By default, classes in Kotlin are final. If you are familiar with Java, you know that a final class cannot be subclassed. By using the open annotation on a class, compiler allows you to derive new classes from it.', 'The primary constructor of the Person class declared two properties: age and name, and it has an initializer block. The initilizer block (and member functions) of the base class Person can be accessed by the objects of derived classes (MathTeacher and Footballer).', 'Derived classes MathTeacher and Footballer have their own member functions teachMaths() and playFootball() respectively. These functions are accessible only from the objects of their respective class.', 'The parameters are passed to the primary constructor. In Kotlin, init block is called when the object is created. Since, MathTeacher is derived from Person class, it looks for initializer block in the base class (Person) and executes it. If the MathTeacher had init block, the compiler would have also executed the init block of the derived class.', 'The program works similarly when object f1 of Footballer class is created. It executes the init block of the base class. Then, the playFootball() method of Footballer class is called using statement f1.playFootball().', 'If the base class and the derived class contains a member function (or property) with the same name, you can need to override the member function of the derived class using override keyword, and use open keyword for the member function of the base class.']","['    init {', '    fun teachMaths() {', '    fun playFootball() {', '    t1.teachMaths()', '    println()', '    f1.playFootball()', '    init {', '    fun playFootball() {', 'open class Log {', '    var data: String = """"', '    var numberOfData = 0', '        data = _data', 'class AuthLog: Log {', 'open class Person() {', 'class Girl: Person() {', '    val girl = Girl()', '    girl.displayAge(31)', 'open class Person() {', '    open var age: Int = 0', '        get() = field', '        set(value) {', '            field = value', '        }', 'class Girl: Person() {', '    override var age: Int = 0', '        get() = field', '        set(value) {', '            field = value - 5', '        }', '    val girl = Girl()', '    girl.age = 31', 'open class Person() {', 'class Girl: Person() {', '        super.displayAge(age)', '        ', '    val girl = Girl()', '    girl.displayAge(31)']","['open class Person(age: Int, name: String) {', '        println(""My name is $name."")', '        println(""My age is $age"")', 'class MathTeacher(age: Int, name: String): Person(age, name) {', '        println(""I teach in primary school."")', 'class Footballer(age: Int, name: String): Person(age, name) {', '        println(""I play for LA Galaxy."")', '    val t1 = MathTeacher(25, ""Jack"")', '    val f1 = Footballer(29, ""Christiano"")', 'open class Person(age: Int, name: String) {', 'class Footballer(age: Int, name: String, club: String): Person(age, name) {', '        println(""Football player $name of age $age and plays for $club."")', '        println(""I am playing football."")', '    val f1 = Footballer(29, ""Cristiano"", ""LA Galaxy"")', '    val p1 = AuthLog(""Bad Password"")', '    constructor(_data: String) {', '    constructor(_data: String, _numberOfData: Int) {', '        numberOfData = _numberOfData', '        println(""$data: $numberOfData times"")', '    constructor(_data: String): this(""From AuthLog -> + $_data"", 10) {', '    constructor(_data: String, _numberOfData: Int): super(_data, _numberOfData) {', '    open fun displayAge(age: Int) {', '        println(""My age is $age."")', '    override fun displayAge(age: Int) {', '        println(""My fake age is ${age - 5}."")', '    println(""My fake age is ${girl.age}."")', '    open fun displayAge(age: Int) {', '        println(""My actual age is $age."")', '    override fun displayAge(age: Int) {', '        println(""My fake age is ${age - 5}."")']","['open class Person(age: Int) {', '}', 'class MathTeacher(age: Int): Person(age) {', '}', 'class Footballer(age: Int): Person(age) {', '}', 'class Businessman(age: Int): Person(age) {', '}', 'My name is Jack.', 'My age is 25', 'I teach in primary school.', 'My name is Cristiano.', 'My age is 29', 'I play for LA Galaxy.', 'val t1 = MathTeacher(25, ""Jack"")', 'My fake age is 26.', 'My fake age is 26.', 'My age is 31.', 'My fake age is 26.']",[],"['Kotlin Class and Objects|||Kotlin Primary Constructor|||If the class has a primary constructor, the base must be initialized using the parameters of the primary constructor. In the above program, both derived classes have two parameters age and name, and both these parameters are initialized in primary constructor in the base class.|||Here\'s another example:||||||open class Person(age: Int, name: String) {|||    // some code|||}||||||class Footballer(age: Int, name: String, club: String): Person(age, name) {|||    init {|||        println(""Football player $name of age $age and plays for $club."")|||    }||||||    fun playFootball() {|||        println(""I am playing football."")|||    }|||}||||||fun main(args: Array<String>) {|||    val f1 = Footballer(29, ""Cristiano"", ""LA Galaxy"")|||}|||||||||Here the primary constructor of the derived class has 3 parameters, and the base class has 2 parameters. Note that, both parameters of the base class are initialized.|||\xa0|||In case of no primary constructor, each base class has to initialize the base (using super keyword), or delegate to another constructor which does that. For example,||||||fun main(args: Array<String>) {||||||    val p1 = AuthLog(""Bad Password"")|||}||||||open class Log {|||    var data: String = """"|||    var numberOfData = 0|||    constructor(_data: String) {||||||    }|||    constructor(_data: String, _numberOfData: Int) {|||        data = _data|||        numberOfData = _numberOfData|||        println(""$data: $numberOfData times"")|||    }|||}||||||class AuthLog: Log {|||    constructor(_data: String): this(""From AuthLog -> + $_data"", 10) {|||    }||||||    constructor(_data: String, _numberOfData: Int): super(_data, _numberOfData) {|||    }|||}|||To learn more on how this program works, visit Kotlin Secondary Constructor.|||']"
21,['Kotlin Visibility Modifiers'],"['In this article, you will learn about all 4 visibility modifiers in Kotlin and how they work in different scenarios.']",[],[],"['Visibility Modifiers Inside Package', 'Visibility Modifiers Inside Classes and Interfaces', 'Changing Visibility of a Constructor']",[],[],"[""Let's take an example:"", ""Let's take an example:"", 'The constructor is public by default in the example below:', ""Here's how you can change its visibility."", 'Here the constructor is private.']","['Note: If visibility modifier is not specified, it is public by default.', ""Here's how visibility modifiers works for members (functions, properties) declared inside a class:"", 'Note:\xa0In Kotlin, local functions, variables and classes cannot have visibility modifiers.']","['Visibility modifiers are keywords that set the visibility (accessibility) of classes, objects, interface, constructors, functions, properties and their setters. (You cannot set visibility modifier of getters\xa0as they always take the same visibility as that of the property.)', 'In Kotlin Class and Objects article, you learned about visibility modifiers public and private in brief. You will learn about two more visibility modifiers protected and internal (as well as public and private) in detail.', 'A package organizes a set of related functions, properties and classes, objects, and interfaces. Recommended reading: Kotlin Packages', 'Note: If you override a protected member in the derived class without specifying its visibility, its visibility will also be protected.', 'By default, the visibility of a\xa0constructor is public. However, you can change it. For that, you need to explicitly add constructor keyword.']",[],[],"['package test', 'fun function1() {}   // public by default and visible everywhere', 'private fun function2() {}   // visible inside hello.kt', 'internal fun function3() {}   // visible inside the same module', 'var name = ""Foo""   // visible everywhere', '    get() = field   // visible inside hello.kt (same as its property)', '    private set(value) {   // visible inside hello.kt', '        field = value', '    }', 'private class class1 {}   // visible inside hello.kt', 'open class Base() {', '    var a = 1                 // public by default', '    private var b = 2         // private to Base class', '    protected open val c = 3  // visible to the Base and the Derived class', '    internal val d = 4        // visible inside the same module', '    protected fun e() { }     // visible to the Base and the Derived class', '}', 'class Derived: Base() {', '    override val c = 9        // c is protected', '}', 'fun main(args: Array<String>) {', '    val base = Base()', '    val derived = Derived()', '}', 'class Test(val a: Int) {', '}', 'class Test private constructor(val a: Int) {', '}']","['odifier|||Description&&&ublic|||declarations are visible everywhere&&&rivate|||visible inside the file containing the declaration&&&nternal|||visible inside the same module (a set of Kotlin files compiled together)&&&rotected|||not available for packages (used for subclasses)', 'odifier|||Description&&&ublic|||visible to any client who can see the declaring class&&&rivate|||visible inside the class only&&&rotected|||visible inside the class and its subclasses&&&nternal|||visible to any client inside the module that can see the declaring class']",[]
22,['Kotlin Abstract Class'],"['In this article, you will learn about abstract class and how to implement it in Kotlin (with the help of examples).']",[],[],['Example: Kotlin Abstract Class and Method'],[],[],"['Here,', 'When you run the program, the output will be:', 'Here, a class Teacher is derived from an abstract class Person.', 'Recommended Reading:\xa0Kotlin Interfaces']","['Note: Abstract classes are always open. You do not need to explicitly use open keyword to inherit subclasses from them.', 'Kotlin interfaces are similar to abstract classes. However, interfaces\xa0cannot store state whereas abstract classes can.']","['Like Java, abstract keyword is used to declare abstract classes in Kotlin. An abstract class cannot be instantiated (you cannot create objects of an abstract class). However, you can inherit subclasses from can them.', ""The members (properties and methods) of an abstract class are non-abstract unless you explictly use abstract keyword to make them abstract. Let's take an example:"", 'An object jack of Teacher class is instantiated. We have passed ""Jack Smith"" as a parameter to the primary constructor while creating it. This executes the initializer block of the Person class.', 'Then, displayJob() method is called using jack object. Note, that the displayJob() method is declared abstract in the base class, and overridden in the derived class.', 'Finally, displaySSN() method is called using jack object. The method is non-abstract and declared in Person class (and not declared in Teacher class).', ""Meaning, interface may have property but it needs to be abstract or has to provide accessor implementations. Whereas, it's not mandatory for property of an abstract class to be abstract.""]","['    init {', '    fun displaySSN(ssn: Int) {', '        println(description)', '    jack.displaySSN(23123)']","['abstract class Person(name: String) {', '        println(""My name is $name."")', '        println(""My SSN is $ssn."")', '    abstract fun displayJob(description: String)', 'class Teacher(name: String): Person(name) {', '    override fun displayJob(description: String) {', '    val jack = Teacher(""Jack Smith"")', '    jack.displayJob(""I\'m a mathematics teacher."")']","['abstract class Person {', '    ', '\xa0   var age: Int = 40', '    fun displaySSN(ssn: Int) {', '        println(""My SSN is $ssn."")', '    }', '    abstract fun displayJob(description: String)', '}', 'My name is Jack Smith.', ""I'm a mathematics teacher."", 'My SSN is 23123.']",[],"[""an abstract class Person is created. You cannot create objects of the class.|||the class has a non-abstract property age\xa0and a non-abstract method displaySSN(). If you need to override these members in the subclass, they\xa0should be marked with open keyword.|||The class has an abstract method displayJob(). It doesn't have any implementation and must be overridden in its subclasses.|||""]"
23,['Kotlin Interfaces'],"['In this article, you will learn about interfaces and how to implement it in Kotlin with the help of examples.']",[],[],"['How to define an interface?', 'How to implement interface?', 'Example: How interface works?', 'Implementing Two or More Interfaces in a Class', 'Resolving overriding conflicts (Multiple Interface)']",[],[],"['Recommended Reading: Kotlin Abstract Class', 'Here,', ""Here's how a class or object can implement the interface:"", 'Here, a class InterfaceImp implements the MyInterface interface.', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', ""Here's the error:"", 'Now when you run the program, the output will be:']","['Meaning, interface may have property but it needs to be abstract or has to provide accessor implementations.', 'Keyword interface is used to define interfaces in Kotlin. For example,', 'The class overrides abstract members (test property and foo() method) of the interface.', 'As mentioned above, an interface may also have a property that provide accessor implementation. For example,', ""Here, prop is not abstract. However, it's valid inside the interface because it provides implementation for accessor."", 'However, you cannot do something like val prop: Int = 23 inside the interface.', ""To solve this issue, you need to provide your own implementation. Here's how:"", 'Here, explicit implementation of callMe() method is provided in class C.']","['Kotlin interfaces are similar to interfaces in Java 8. They can contain definitions of abstract methods as well as implementations of non-abstract methods. However, they cannot contain any state.', ""Abstract classes in Kotlin are similar to interface with one important difference. It's not mandatory for properties of an abstract class to be abstract or provide accessor implementations."", ""Kotlin does not allow true multiple inheritance. However, it's possible to implement two or more interfaces in a single class. For example,"", ""Suppose, two interfaces(A and B) have a non-abstract method with the same name (let's say callMe() method). You implemented these two interfaces in a class (let's say C). Now, if you call the callMe() method using the object of class C, compiler will throw error. For example,"", 'The statement super<A>.callMe() calls the callMe() method of class A. Similarly, super<B>.callMe() calls the callMe() method of class B.']","['interface MyInterface {', '    val test: Int', '    fun foo() : String', '    fun hello() {', '    override fun foo() = ""Lol""', '    val obj = InterfaceImp()', '    print(""Calling hello(): "")', '    obj.hello()', '    println(obj.foo())', 'interface MyInterface {', '    val prop: Int', '        get() = 23', '    val obj = InterfaceImp()', '    println(obj.prop)', 'interface A {', '    fun callMe() {', 'interface B  {', '    fun callMeToo() {', 'class Child: A, B', '    val obj = Child()', '    obj.callMe()', '    obj.callMeToo()', 'interface A {', '    fun callMe() {', 'interface B  {', '    fun callMe() {', 'class Child: A, B ', '    val obj = Child()', '    obj.callMe()', 'interface A {', '    fun callMe() {', 'interface B  {', '    fun callMe() {', 'class C: A, B {', '    override fun callMe() {', '        super<A>.callMe()', '        super<B>.callMe()', '    val obj = C()', '    obj.callMe()']","['        println(""Hello there, pal!"")', 'class InterfaceImp : MyInterface {', '    println(""test = ${obj.test}"")', '    print(""Calling and printing foo(): "")', 'class InterfaceImp : MyInterface {', '        println(""From interface A"")', '        println(""From interface B"")', '        println(""From interface A"")', '        println(""From interface B"")', '        println(""From interface A"")', '        println(""From interface B"")']","['interface MyInterface {', '    var test: String   // abstract property', '    fun foo()          // abstract method', '    fun hello() = ""Hello there"" // method with default implementation', '}', 'interface MyInterface {', '    val test: Int   // abstract property', '    fun foo() : String   // abstract method (returns String)', '    fun hello() {   // method with default implementation', '    }', '}', 'class InterfaceImp : MyInterface {', '    override val test: Int = 25', '    override fun foo() = ""Lol""', '}', 'test = 25', 'Calling hello(): Hello there, pal!', 'Calling and printing foo(): Lol', '23', 'From interface A', 'From interface B', ""Error:(14, 1) Kotlin: Class 'C' must override public open fun callMe(): Unit defined in A because it inherits multiple interface methods of it"", 'From interface A', 'From interface B', 'class C: A, B {', '    override fun callMe() {', '        super<A>.callMe()', '        super<B>.callMe()', '    }', '}']",[],['an interface MyInterface is created.|||the interface has an abstract property test and an abstract method foo().|||the interface also has a non-abstract method hello().|||']
24,['Kotlin Nested and Inner Class'],"['In this article, you will learn to work with nested and inner classes with the help of examples.']",[],[],"['Kotlin Nested Class', 'Kotlin Inner Class']","['Example: Kotlin Nested Class', 'Example: Kotlin Inner Class']",[],"['When you run the program, the output will be:', 'For Java Users', 'When you run the program, the output will be:', 'Recommended Reading: Anonymous Inner Class']","['Similar like Java, Kotlin allows you to define a class within another class known as nested class.', 'Since Nested class is a member of its enclosing class Outer, you can use . notation to access Nested class and its members.', 'The nested class in Kotlin is similar to static nested class in Java.', 'The nested classes in Kotlin do not have access to the outer class instance. For example,', ""The above code won't compile because we tried to access foo property of Outer class from inside Nested class.""]","['In Java, when you declare a class inside another class, it becomes an inner class by default. However in Kotlin, you need to use inner modifier to create an inner class which we will discuss next.', 'In order to solve this issue, you need to mark the nested class with inner to create an inner class. Inner classes carry a reference to an outer class, and can access outer class members.']","['class Outer {', '    class Nested {', '    println(Outer.Nested().b)', '    println(nested.callMe())', 'class Outer {', '    class Nested {', '        fun callMe() = foo', '    val outer = Outer()', 'class Outer {', '    inner class Inner {', '        fun callMe() = a', '    val outer = Outer()']","['    val a = ""Outside Nested class.""', '        val b = ""Inside Nested class.""', '        fun callMe() = ""Function call from inside Nested class.""', '    val foo = ""Outside Nested class.""', '    println(outer.Nested().callMe())', '    val a = ""Outside Nested class.""', '    println(""Using outer object: ${outer.Inner().callMe()}"")', '    println(""Using inner object: ${inner.callMe()}"")']","['class Outer {', '    ... .. ...', '    class Nested {', '        ... .. ...', '    }', '}', 'Inside Nested class.', 'Function call from inside Nested class.', 'Using outer object: Outside Nested class.', 'Using inner object: Outside Nested class.']",[],[]
25,['Kotlin Data Class'],"['In this article, you will learn to create data classes in Kotlin. You will also learn about requirements that data class must fulfill, and their standard functionalities.']",[],[],"['Kotlin Data Class Requirements', 'Example: Kotlin Data Class']","['Copying', 'toString() method', 'hashCode() and equals()', 'Destructuring Declarations']",[],"['For this class, the compiler automatically generates:', 'Here are the requirements:', 'When you run the program, the output will be:', ""Let's use these functions:"", 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:']","[""Before talking about these features in detail, let's talk about requirements that a data class must fulfill."", 'The toString() function returns a string representation of the object.', 'You can destructure an object into a number of variables using destructing declaration. For example:', 'This was possible because the compiler generates componentN() functions all properties for a data class. For example:']","['There may arise a situation where you need to create a class solely to hold data. In such cases, you can mark the class as data to create a data class. For example,', 'When you declare a data class, the compiler automatically generates several functions such as toString(), equals(), hashcode() etc behind the scenes. This helps to keep you code concise. Had you used Java, you would need to write a lot of boilerplate code.', ""For a data class, you can create a copy of an object with some of its properties different using copy() function. Here's how it works:"", 'The hasCode()\xa0method returns hash code for the object. If two objects are equal,\xa0hashCode()\xa0produces the same integer result. Recommended Reading: hashCode()', 'The equals() returns true if two objects are equal (has same hashCode()). If objects are not equal, equals() returns false. Recommended Reading: equals()']","['    val u1 = User(""John"", 29)', '    val u1 = User(""John"", 29)', '    println(u1.toString())', '    val u1 = User(""John"", 29)', '    val u2 = u1.copy()', '    if (u1.equals(u2) == true)', '    else', '    if (u1.equals(u3) == true)', '    else', '    println(""name = $name"")', '    println(""age = $age"")']","['data class User(val name: String, val age: Int)', '    println(""name = ${jack.name}"")', '    println(""age = ${jack.age}"")', 'data class User(val name: String, val age: Int)', '    val u2 = u1.copy(name = ""Randy"")', '    println(""u1: name = ${u1.name}, name = ${u1.age}"")', '    println(""u2: name = ${u2.name}, name = ${u2.age}"")', 'data class User(val name: String, val age: Int)', 'data class User(val name: String, val age: Int)', '    val u3 = u1.copy(name = ""Amanda"")', '    println(""u1 hashcode = ${u1.hashCode()}"")', '    println(""u2 hashcode = ${u2.hashCode()}"")', '    println(""u3 hashcode = ${u3.hashCode()}"")', '        println(""u1 is equal to u2."")', '        println(""u1 is not equal to u2."")', '        println(""u1 is equal to u3."")', '        println(""u1 is not equal to u3."")', '    val u1 = User(""John"", 29, ""Male"")', '    val (name, age, gender) = u1', 'data class User(val name: String, val age: Int, val gender: String)', '    val u1 = User(""John"", 29, ""Male"")', '    println(u1.component1())     // John', '    println(u1.component2())     // 29  ', '    println(u1.component3())     // ""Male""']","['data class Person(val name: String, var age: Int)', 'name = jack', 'age = 29', 'u1: name = John, name = 29', 'u2: name = Randy, name = 29', 'User(name=John, age=29)', 'u1 hashcode = 71750738', 'u2 hashcode = 71750738', 'u3 hashcode = 771732263', 'u1 is equal to u2.', 'u1 is not equal to u3.', 'name = John', 'age = 29', 'gender = Male', 'John', '29', 'Male']",[],"['copy() function, equals() and hashCode() pair, and toString() form of the primary constructor|||componentN() functions|||The primary constructor must have at least one parameter.|||The parameters of the primary constructor must be marked as either val (read-only) or var (read-write).|||The class cannot be open, abstract, inner or sealed.|||The class may extend other classes or implement interfaces. If you are using Kotlin version before 1.1, the class can only implement interfaces.|||']"
26,['Kotlin Sealed Classes'],"['In this article, you will learn about Sealed class, how they are created, and when to use them with the help of examples.']",[],[],[],"['Example: Sealed Class', 'Few Important Notes', 'Difference Between Enum and Sealed Class']",[],"['To create a sealed class, sealed modifier is used. For example,', ""Here's how you can solve the above problem using sealed class:""]","['Sealed classes are used when a value can have only one of the types from a limited set (restricted hierarchies).', 'Enum class and sealed class are pretty similar. The set of values for an enum type is also restricted like a sealed class.']","[""Before going into details about sealed classes, let's explore what problem they solve. Let's take an example (taken from official Kotlin website - Sealed classes article):"", ""In the above program, the base class Expr has two derived classes Const (represents a number) and Sum (represents sum of two expressions). Here, it's mandatory to use else branch for default condition in\xa0when expression."", ""Now, if you derive a new subclass from Expr class, the compiler won't detect anything as else branch handles it which can lead to bugs. It would have been better if the compiler issued an error when we added a new subclass."", ""To solve this problem, you can use sealed class. As mentioned, sealed class restricts the possibility of creating subclasses. And, when you handle all subclasses of a sealed class in an when expression, it's not necessary to use else branch."", 'As you can see, there is no else branch. If you derive a new subclass from Expr class, the compiler will complain unless the subclass is handled in the when expression.', 'The only difference is that, enum can have just a single instance, whereas a subclass of a sealed class can have multiple instances.']","['class Expr', 'fun eval(e: Expr): Int =', '        when (e) {', '            else ->', '        }', 'sealed class Expr', 'object NotANumber : Expr()', 'fun eval(e: Expr): Int =', '        when (e) {', '        }']","['class Const(val value: Int) : Expr', 'class Sum(val left: Expr, val right: Expr) : Expr', '            is Sum -> eval(e.right) + eval(e.left)', '                throw IllegalArgumentException(""Unknown expression"")', 'class Const(val value: Int) : Expr()', 'class Sum(val left: Expr, val right: Expr) : Expr()', '            is Sum -> eval(e.right) + eval(e.left)', '            NotANumber -> java.lang.Double.NaN']",['sealed class Expr'],[],"['All subclasses of a sealed class must be declared in the same file where sealed class is declared.|||A sealed class is abstract by itself, and you cannot instantiate objects from it.|||You cannot create non-private constructors of a sealed class; their constructors are private by default.|||']"
27,['Kotlin Object Declarations and Expressions'],"['In this article, you will learn about object declarations (singletons) and object expressions with the help of examples.']",[],[],"['Object Declarations', 'Kotlin object Expressions']","['Example: Object Declaration', 'Singletons and Dependency Injection', 'Example: Kotlin Object Expression']",[],"['When you run the program, the output will be:', '(The example is taken from official Kotlin docs page.)', 'When you run the program, the output will be:', 'When you run the program, the output will be:']","['Singleton is an object-oriented pattern where a class can have only one instance (object).', 'Kotlin provides an easy way to create singletons using the object declaration feature. For that, object keyword is used.', 'The above code combines a class declaration and a declaration of a single instance SingletonExample of the class.', 'Similar to objects of a normal class, you can call methods and access properties by using the . notation.', 'Object declaration can inherit from classes and interfaces in a similar way like normal classes.', 'Recommended Reading: Dependency Injection & Singleton Design pattern', 'If necessary, you can assign a name to the anonymous object and store it in a variable. For example,', 'Here, anonymous object is stored in variable atheist which implements Person class with pray() method is overridden.']","['For example, you are working an application having SQL database backend. You want to create a connection pool to access the database while reusing the same connection for all clients. For this, you can create the connection through singleton class so that every client get the same connection.', 'An object declaration can contain properties, methods and so on. However, they are not allowed to have constructors (which makes sense). Why?', 'Object declarations can be useful sometimes. However, they are not ideal in large software systems that interact with many other parts of the system.', 'The object keyword can also be used to create objects of an anonymous class known as anonymous objects. They are used if you need to create an object of a slight modification of some class or interface without declaring a subclass for it. For example ,', 'Here, an anonymous object is declared extending MouseAdapter class.The program overrides two MouseAdapter methods: mouseClicked() and mouseEntered().', 'If you are implementing a class that has a constructor to declare an anonymous object, you need to pass appropriate constructor parameters. For example,']","['object Test {', '    private var a: Int = 0', '    var b: Int = 1', '    fun makeMe12(): Int {', '        a = 12', '        return a', '    val result: Int', '    result = Test.makeMe12()', '    println(""b = ${Test.b}"")', 'open class Person() {', '    atheist.eat()', '    atheist.talk()', '    atheist.pray()', '    init {', '    atheist.eat()', '    atheist.talk()', '    atheist.pray()']","['    fun eat() = println(""Eating food."")', '    fun talk() = println(""Talking with people."")', '    open fun pray() = println(""Praying god."")', '    val atheist = object : Person() {', '        override fun pray() = println(""I don\'t pray. I am an atheist."")', 'open class Person(name: String, age: Int) {', '        println(""name: $name, age: $age"")', '    fun eat() = println(""Eating food."")', '    fun talk() = println(""Talking with people."")', '    open fun pray() = println(""Praying god."")', '    val atheist = object : Person(""Jack"", 29) {', '        override fun pray() = println(""I don\'t pray. I am an atheist."")']","['object SingletonExample {', '    ... .. ...', '    ... .. ...', '}', 'b = 1', 'result = 12', 'window.addMouseListener(object : MouseAdapter() {', '    override fun mouseClicked(e: MouseEvent) {', '    }', '    override fun mouseEntered(e: MouseEvent) {', '    }', '})', 'val obj = object : MouseAdapter() {', '    override fun mouseClicked(e: MouseEvent) {', '    }', '    override fun mouseEntered(e: MouseEvent) {', '    }', '}', 'Eating food.', 'Talking with people.', ""I don't pray. I am an atheist."", 'name: Jack, age: 29', 'Eating food.', 'Talking with people.', ""I don't pray. I am an atheist.""]",[],[]
28,['Kotlin Companion Objects'],"['In this article, you will learn to create and use companion objects in your Kotlin program with the help of examples.']",[],[],[],['Example: Companion objects'],[],"['When you run the program, the output will be:', 'The name of the companion object is optional and can be omitted.']","[""Before taking about companion objects, let's take an example to access members of a class."", ""Here, we created an object\xa0p1\xa0of the\xa0Person class to call callMe() method. That's how things normally work.""]","['However, in Kotlin, you can also call\xa0callMe() method\xa0by using the class name, i.e, Person\xa0in this case. For that, you need to create a companion object by marking object declaration with companion keyword.', 'In the program, Test object declaration is marked with keyword companion to create a companion object. Hence, it is possible to call callMe() method by using the name of the class as:', 'If you are familiar with Java, you may relate companion objects with static methods (even though how they work internally is totally different).', 'The companion objects can access private members of the class. Hence, they can be used to implement the factory method patterns.']","['class Person {', '    val p1 = Person()', '    p1.callMe()    ', 'class Person {', '    companion object Test {', '    Person.callMe()', 'class Person {', '    companion object {', '    Person.callMe()']","['    fun callMe() = println(""I\'m called."")', '        fun callMe() = println(""I\'m called."")', '        fun callMe() = println(""I\'m called."")']","[""I'm called."", 'Person.callMe()']",[],[]
