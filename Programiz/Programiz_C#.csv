,main_headings,main_contents,video_headings,video_urls,sub_headings_h2,sub_headings_h3,image_urls,facts,definitions,explanations,snippets,codes,outputs,table_data,list_items
0,['C# Hello World - Your First C# Program'],"['In this tutorial, we will learn how to write a simple ""Hello World!"" program in C#. This will get you familiar with the basic syntax and requirements of a C# program.']",[],[],"['""Hello World!"" in C#', 'How the ""Hello World!"" program in C# works?', 'Alternative Hello World! implementation', 'Things to remember from this article']",[],[],"['When you run the program, the output will be:', ""Let's break down the program line by line."", 'Here’s an alternative way to write the “Hello World!” program.']","['The purpose of this program is to get us familiar with the basic syntax and requirements of a programming language.', 'Notice in this case, we’ve written using System; at the start of the program. By using this, we can now replace', 'This is a convenience we’ll be using in our later chapters as well.']","['The “Hello World!” program is often the first program we see when we dive into a new language. It simply prints Hello World! on the output screen.', ""This is just a simple program for introducing C# to a newbie. If you did not understand certain things in this article, that's okay (even I did not when I started). As we move on with this tutorial series, everything will start to make sense.""]","['namespace HelloWorld', '    class Hello {         ', '        {', '        }', 'using System;', 'namespace HelloWorld', '    class Hello {         ', '        {', '        }']","['        static void Main(string[] args)', '            System.Console.WriteLine(""Hello World!"");', '        static void Main(string[] args)', '            Console.WriteLine(""Hello World!"");']","['Hello World!', 'System.Console.WriteLine(""Hello World!"");', 'Console.WriteLine(""Hello World!"");']",[],"['Every C# program must have a class definition.|||The execution of program begins from the Main() method.|||Main() method must be inside a class definition.|||&&&// Hello World! Program// indicates the beginning of a comment in C#. Comments are not executed by the C# compiler.|||They are intended for the developers to better understand a piece of code. To learn more about comments in C#, visit C# comments.|||\xa0|||namespace HelloWorld{...}|||The namespace keyword is used to define our own namespace. Here we are creating a namespace called HelloWorld.|||Just think of namespace as a container which consists of classes, methods and other namespaces. To get a detailed overview of namespaces, visit C# Namespaces.|||\xa0|||class Hello{...}|||The above statement creates a class named - Hello in C#. Since, C# is an object-oriented programming language, creating a class is mandatory for the program’s execution.|||\xa0|||static void Main(string[] args){...}Main() is a method of class Hello. The execution of every C# program starts from the Main() method. So it is mandatory for a C# program to have a Main() method.|||The signature/syntax of the Main() method is:||||||static void Main(string[] args)|||{|||    ...|||}|||We’ll learn more about methods in the later chapters.|||\xa0|||System.Console.WriteLine(""Hello World!"");|||For now, just remember that this is the piece of code that prints Hello World! to the output screen.You’ll learn more about how it works in the later chapters.|||']"
1,['C# Keywords and Identifiers'],"['In this tutorial, we will learn about keywords (reserved words) and identifiers in C# programming language.']",[],[],"['C# Keywords', 'C# Identifiers', 'Rules for Naming an Identifier', 'Example: Find list of keywords and identifiers in a program']",['Contextual Keywords'],[],"['For example,', 'The above statement will create a variable @void of type int.', 'This statement will generate an error in compile time.', 'To learn more about variables, visit C# Variables.', 'Here are some of the valid and invalid identifiers:', 'The ""Hello World!"" inside WriteLine method is a string literal.']","['Also, keywords like long, int, char, etc can not be used as identifiers. So, we cannot have something like:', 'C# has a total of 79 keywords. All these keywords are in lowercase. Here is a complete list of all C# keywords.', 'Although keywords are reserved words, they can be used as identifiers if @ is added as prefix. For example,', 'If you are interested to know the function of every keywords, I suggest you visit C# keywords (official C# docs).', ""Just to clear the concept, let's find the list of keywords and identifiers in the program we wrote in C# Hello World.""]","['Keywords are predefined sets of reserved words that have special meaning in a program. The meaning of keywords can not be changed, neither can they be directly used as identifiers in a program.', 'Here, long is a keyword and mobileNum is a variable (identifier). long has a special meaning in C# i.e. it is used to declare variables of type long and this function cannot be changed.', 'Besides regular keywords, C# has 25 contextual keywords. Contextual keywords have specific meaning in a limited program context and can be used as identifiers outside that context. They are not reserved words in C#.', 'Identifiers are the name given to entities such as variables, methods, classes, etc. They are tokens in a program which uniquely identify an element. For example,', 'Here, value is the name of variable. Hence it is an identifier. Reserved keywords can not be used as identifiers unless @ is added as prefix. For example,']","['using System;', 'namespace HelloWorld', '    class Hello', '{         ', '        {', '        }']","['        static void Main(string[] args)', '          Console.WriteLine(""Hello World!"");']","['long mobileNum;', 'long long;', 'int @void;', 'int value;', 'int break;']","['bstract|||as|||base|||bool&&&reak|||byte|||case|||catch&&&har|||checked|||class|||const&&&ontinue|||decimal|||default|||delegate&&&o|||double|||else|||enum&&&vent|||explicit|||extern|||false&&&inally|||fixed|||float|||for&&&oreach|||goto|||if|||implicit&&&n|||in (generic modifier)|||int|||interface&&&nternal|||is|||lock|||long&&&amespace|||new|||null|||object&&&perator|||out|||out (generic modifier)|||override&&&arams|||private|||protected|||public&&&eadonly|||ref|||return|||sbyte&&&ealed|||short|||sizeof|||stackalloc&&&tatic|||string|||struct|||switch&&&his|||throw|||true|||try&&&ypeof|||uint|||ulong|||unchecked&&&nsafe|||ushort|||using|||using static&&&oid|||volatile|||while|||\xa0', 'dd|||alias|||ascending&&&sync|||await|||descending&&&ynamic|||from|||get&&&lobal|||group|||into&&&oin|||let|||orderby&&&artial (type)|||partial (method)|||remove&&&elect|||set|||value&&&ar|||when (filter condition)|||where (generic type constraint)&&&ield|||\xa0|||\xa0', 'dentifiers|||Remarks&&&umber|||Valid&&&alculateMarks|||Valid&&&ello$|||Invalid (Contains $)&&&ame1|||Valid&&&if|||Valid (Keyword with prefix @)&&&f|||Invalid (C# Keyword)&&&y name|||Invalid (Contains whitespace)&&&hello_hi|||Valid', 'eywords|||Identifiers&&&sing|||System&&&amespace|||HelloWorld (namespace)&&&lass|||Hello (class)&&&tatic|||Main (method)&&&oid|||args&&&tring|||Console&&&|||WriteLine']","['An identifier can not be a C# keyword.|||An identifier must begin with a letter, an underscore or @ symbol. The remaining part of identifier can contain letters, digits and underscore symbol.|||Whitespaces are not allowed. Neither it can have symbols other than letter, digits and underscore.|||Identifiers are case-sensitive. So, getName, GetName and getname represents 3 different identifiers.|||']"
2,['C# Variables and (Primitive) Data Types'],"['In this tutorial, we will learn about variables, how to create variables in C# and different data types that C# programming language supports.']",[],[],"['How to declare variables in C#?', 'Rules for Naming Variables in C#', 'Best Practices for Naming a Variable', 'C# Primitive Data Types', 'C# Literals']","['Implicitly typed variables', 'Boolean (bool)', 'Signed Integral', 'Unsigned Integral', 'Floating Point', 'Character (char)', 'Decimal', 'Boolean Literals', 'Integer Literals', 'Floating Point Literals', 'Character and String Literals']",[],"[""Here's an example to declare a variable in C#."", 'Here, the value of age is changed to 35 from 24.', 'For now remember,we can not do the following in C#:', 'You can learn more about implicitly typed local variables.', 'You can learn more about naming conventions in C# here.', 'For Example:', 'When we run the program, the output will be:', '1. sbyte', 'For example:', 'When we run the program, the output will be:', '2. short', 'For example:', 'When we run the program, the output will be:', '3. int', 'For example:', 'When we run the program, the output will be:', '4. long', 'For example:', 'When we run the program, the output will be:', '1. byte', 'For example:', 'When we run the program, the output will be:', '2. ushort', 'For example:', 'When we run the program, the output will be:', '3. uint', 'For example:', 'When we run the program, the output will be:', '4. ulong', 'For example:', 'When we run the program, the output will be:', '1. float', 'For example:', 'When we run the program, the output will be:', '2. double', 'For example:', 'When we run the program, the output will be:', 'For example: ', 'When we run the program, the output will be:', 'For example: ', 'When we run the program, the output will be:', ""Let's look at the following statement:"", 'Here,', 'For example:']","['A variable is a symbolic name given to a memory location. Variables are used to store data in a computer program.', 'In this example, a variable age of type int (integer) is declared and it can only store integer values.', 'We can assign a value to the variable later in our program like such:', 'However, the variable can also be initialized to some value during declaration. For example,', 'Here, a variable age of type int is declared and initialized to 24 at the same time.', 'Since, it’s a variable, we can change the value of variables as well. For example,', 'Variables declared using var keyword must be initialized at the time of declaration.', 'There are certain rules we need to follow while naming a variable. The rules for naming a variable in C# are:', ""Don't worry about public and private member variables. We will learn about them in later chapters."", 'These data types hold integer values (both positive and negative). Out of the total available bits, one bit is used for sign.', 'Try assigning values out of range i.e. less than -128 or greater than 127 and see what happens.', 'These data types hold floating point values i.e. numbers containing decimal values. For example, 12.36, -92.17, etc.', ""The unicode value of 'B' is '\\u0042', hence printing ch1 will print 'B'."", 'The suffix M or m must be added at the end otherwise the value will be treated as a double and an error will be generated.']","['Variables in C# must be declared before they can be used. This means, the name and type of variable must be known before they can be assigned a value. This is why C# is called a statically-typed language.', 'Once declared, the datatype of a variable can not be changed within a scope. A scope can be thought as a block of code where the variable is visible or available to use. If you don’t understand the previous statement, don’t worry we’ll learn about scopes in the later chapters.', 'Alternatively in C#, we can declare a variable without knowing its type using var keyword. Such variables are called implicitly typed local variables.', 'The compiler determines the type of variable from the value that is assigned to the variable. In the above example, value is of type int. This is equivalent to:', 'Variables in C# are broadly classified into two types: Value types and Reference types. In this tutorial we will be discussing about primitive (simple) data types which is a subclass of Value types.', 'Reference types will be covered in later tutorials. However, if you want to know more about variable types, visit C# Types and variables (official C# docs).', ""These data types only hold values equal to or greater than 0. We generally use these data types to store values when we are sure, we won't have negative values."", ""Literals are fixed values that appear in the program. They do not require any computation. For example, 5, false, 'w' are literals that appear in a program directly without any computation.""]","['using System;', 'namespace DataType', '    class BooleanExample', '        {', '        }', 'using System;', 'namespace DataType', '    class SByteExample', '        {', '            sbyte level = 23;', '        }', 'using System;', 'namespace DataType', '    class ShortExample', '        {', '        }', 'using System;', 'namespace DataType', '    class IntExample', '        {', '            int score = 51092;', '        }', 'using System;', 'namespace DataType', '    class LongExample', '        {', '        }', 'using System;', 'namespace DataType', '    class ByteExample', '        {', '            byte age = 62;', '        }', 'using System;', 'namespace DataType', '    class UShortExample', '        {', '        }', 'using System;', 'namespace DataType', '    class UIntExample', '        {', '        }', 'using System;', 'namespace DataType', '    class ULongExample', '        {', '        }', 'using System;', 'namespace DataType', '    class FloatExample', '        {', '        }', 'using System;', 'namespace DataType', '    class DoubleExample', '        {', '        }', 'using System;', 'namespace DataType', '    class CharExample', '        {', ""            char ch2 = 'x';"", '        }', 'using System;', 'namespace DataType', '    class DecimalExample', '        {', '        }']","['        public static void Main(string[] args)', '            bool isValid = true;', '            Console.WriteLine(isValid);', '        public static void Main(string[] args)', '            Console.WriteLine(level);', '        public static void Main(string[] args)', '            short value = -1109;', '            Console.WriteLine(value);', '        public static void Main(string[] args)', '            Console.WriteLine(score);', '        public static void Main(string[] args)', '            long range = -7091821871L;', '            Console.WriteLine(range);', '        public static void Main(string[] args)', '            Console.WriteLine(level);', '        public static void Main(string[] args)', '            ushort value = 42019;', '            Console.WriteLine(value);', '        public static void Main(string[] args)', '            uint totalScore = 1151092;', '            Console.WriteLine(totalScore);', '        public static void Main(string[] args)', '            ulong range = 17091821871L;', '            Console.WriteLine(range);', '        public static void Main(string[] args)', '            float number = 43.27F;', '            Console.WriteLine(number);', '        public static void Main(string[] args)', '            double value = -11092.53D;', '            Console.WriteLine(value);', '        public static void Main(string[] args)', '            Console.WriteLine(ch1);', '            Console.WriteLine(ch2);', '        public static void Main(string[] args)', '         decimal bankBalance = 53005.25M;', '            Console.WriteLine(bankBalance);']","['int age;', 'int age;', '... ... ...', 'age = 24;', 'int age = 24;', 'int age = 24;', 'age = 35;', 'int age;', 'age = 24;', '... ... ...', 'float age;', 'var value = 5;', 'int value;', 'value = 5;', 'True', '23', '-1109', '51092', '-7091821871', '62', '42019', '1151092', '17091821871', '43.27', '-11092.53', 'B', 'x', '53005.25', 'int number = 41;', 'bool isValid = true;', 'bool isPresent = false;', 'long value1 = 4200910L;', 'long value2 = -10928190L;', 'int decimalValue = 25;', 'int hexValue = 0x11c;// decimal value 284', 'double number = 24.67;// double by default', 'float value = -12.29F;', 'double scientificNotation = 6.21e2;// equivalent to 6.21 x 102 i.e. 621', ""char ch1 = 'R';// character"", ""char ch2 = '\\x0072';// hexadecimal"", ""char ch3 = '\\u0059';// unicode"", 'char ch4 = (char)107;// casted from integer', 'string firstName = ""Richard"";', 'string lastName = "" Feynman"";']","['ariable Names|||Remarks&&&ame|||Valid&&&ubject101|||Valid&&&age|||Valid (Best practice for naming private member variables)&&&break|||Valid (Used if name is a reserved keyword)&&&01subject|||Invalid (Starts with digit)&&&our_name|||Valid&&&our name|||Invalid (Contains whitespace)', 'haracter|||Meaning&&&\'|||Single quote&&&""|||Double quote&&&\\|||Backslash&&&n|||Newline&&&r|||Carriage return&&&t|||Horizontal Tab&&&a|||Alert&&&b|||Backspace']","['Boolean data type has two possible values: true or false|||Default value: false|||Boolean variables are generally used to check conditions such as in if statements, loops, etc.|||Size: 8 bits|||Range: -128 to 127.|||Default value: 0|||Size: 16 bits|||Range: -32,768 to 32,767|||Default value: 0|||Size: 32 bits|||Range: -231 to 231-1|||Default value: 0|||Size: 64 bits|||Range: -263 to 263-1|||Default value: 0L [L at the end represent the value is of long type]|||Size: 8 bits|||Range: 0 to 255.|||Default value: 0|||Size: 16 bits|||Range: 0 to 65,535|||Default value: 0|||Size: 32 bits|||Range: 0 to 232-1|||Default value: 0|||Size: 64 bits|||Range: 0 to 264-1|||Default value: 0|||Single-precision floating point type|||Size: 32 bits|||Range: 1.5 × 10−45 to 3.4 × 1038|||Default value: 0.0F [F at the end represent the value is of float type]|||Double-precision floating point type. What is the difference between single and double precision floating point?|||Size: 64 bits|||Range: 5.0 × 10−324 to 1.7 × 10308|||Default value: 0.0D [D at the end represent the value is of double type]|||It represents a 16 bit unicode character.|||Size: 16 bits|||Default value: \'\\0\'|||Range: U+0000 (\'\\u0000\') to U+FFFF (\'\\uffff\')|||Decimal type has more precision and a smaller range as compared to floating point types (double and float). So it is appropriate for monetary calculations.|||Size: 128 bits|||Default value: 0.0M [M at the end represent the value is of decimal type]|||Range: (-7.9 x 1028 to 7.9 x 1028) / (100 to 28)|||int is a data type|||number is a variable and|||41 is a literal|||true and false are the available boolean literals.|||They are used to initialize boolean variables.|||Integer literals are used to initialize variables of integer data types i.e. sbyte, short, int, long, byte, ushort, uint and ulong.|||If an integer literal ends with L or l, it is of type long. For best practice use L (not l).||||||long value1 = 4200910L;|||long value2 = -10928190L;||||||If an integer literal starts with a 0x, it represents hexadecimal value. Number with no prefixes are treated as decimal value. Octal and binary representation are not allowed in C#.||||||int decimalValue = 25;|||int hexValue = 0x11c;// decimal value 284||||||Floating point literals are used to initialize variables of float and double data types.|||If a floating point literal ends with a suffix f or F, it is of type float. Similarly, if it ends with d or D, it is of type double. If neither of the suffix is present, it is of type double by default.|||These literals contains e or E when expressed in scientific notation.||||||double number = 24.67;// double by default|||float value = -12.29F;|||double scientificNotation = 6.21e2;// equivalent to 6.21 x 102 i.e. 621||||||Character literals are used to initialize variables of char data types.|||Character literals are enclosed in single quotes. For example, \'x\', \'p\', etc.|||They can be represented as character, hexadecimal escape sequence, unicode representation or integral values casted to char.||||||char ch1 = \'R\';// character|||char ch2 = \'\\x0072\';// hexadecimal|||char ch3 = \'\\u0059\';// unicode|||char ch4 = (char)107;// casted from integer||||||String literals are the collection of character literals.|||They are enclosed in double quotes. For example, ""Hello"", ""Easy Programming"", etc.||||||string firstName = ""Richard"";|||string lastName = "" Feynman"";||||||C# also supports escape sequence characters such as:|||\xa0|||Character|||Meaning|||\\\'|||Single quote|||\\""|||Double quote|||\\\\|||Backslash|||\\n|||Newline|||\\r|||Carriage return|||\\t|||Horizontal Tab|||\\a|||Alert|||\\b|||Backspace||||||&&&The variable name can contain letters (uppercase and lowercase), underscore( _ ) and digits only.|||The variable name must start with either letter, underscore or @ symbol. For example,|||Rules for naming variables in C#|||Variable Names|||Remarks|||name|||Valid|||subject101|||Valid|||_age|||Valid (Best practice for naming private member variables)|||@break|||Valid (Used if name is a reserved keyword)|||101subject|||Invalid (Starts with digit)|||your_name|||Valid|||your name|||Invalid (Contains whitespace)||||||C# is case sensitive. It means age and Age refers to 2 different variables.|||A variable name must not be a C# keyword. For example, if, for, using can not be a variable name. We will be discussing more about C# keywords in the next tutorial.|||Choose a variable name that make sense. For example, name, age, subject makes more sense than n, a and s.|||Use camelCase notation (starts with lowercase letter) for naming local variables. For example, numberOfStudents, age, etc.|||Use PascalCase or CamelCase (starts with uppercase letter) for naming public member variables. For example, FirstName, Price, etc.|||Use a leading underscore (_) followed by camelCase notation for naming private member variables. For example, _bankBalance, _emailAddress, etc.|||']"
3,['C# Operators'],"['In this article, we will learn everything about different types of operators in C# programming language and how to use them.']",[],[],"['1. Basic Assignment Operator', '2. Arithmetic Operators', '3. Relational Operators', '4. Logical Operators', '5. Unary Operators', '6. Ternary Operator', '7. Bitwise and Bit Shift Operators', '8. Compound Assignment Operators']","['Example 1: Basic Assignment Operator', 'Example 2: Arithmetic Operators', 'Example 3: Relational Operators', 'Example 4: Logical Operators', 'Example 5: Unary Operators', 'Example 6: Post and Pre Increment operators in C#', 'Example 7: Ternary Operator', 'Example 8: Bitwise and Bit Shift Operator', 'Example 9: Compound Assignment Operator']",[],"['Here, 50.05 is assigned to x.', 'When we run the program, the output will be:', 'For example,', 'When we run the program, the output will be:', 'Relational operators are used in decision making and loops.', 'When we run the program, the output will be:', 'In simple words, the table can be summarized as:', 'When we run the program, the output will be:', 'When we run the program, the output will be:', 'When we run the program, the output will be:', 'prints 12.', 'The case is same for decrement operator (--).', 'The ternary operator works as follows:', 'When we run the program, the output will be:', 'To learn more, visit C# ternary operator.', 'When we run the program, the output will be:', 'To learn more, visit C# Bitwise and Bit Shift operator.', 'When we run the program, the output will be:', 'We will discuss about Lambda operators in later tutorial.']","['Operators are symbols that are used to perform operations on operands. Operands may be variables and/or constants.', 'For example, in 2+3, + is an operator that is used to carry out addition operation, while 2 and 3 are operands.', 'Basic assignment operator (=) is used to assign values to variables. For example,', 'This is a simple example that demonstrates the use of assignment operator.', 'Arithmetic operators are used to perform arithmetic operations such as addition, subtraction, multiplication, division, etc.', 'Here is how the result is evaluated for logical AND and OR operators.', 'Unlike other operators, the unary operators operates on a single operand.', 'prints 10 instead of 11. After the value is printed, the value of number is incremented by 1.', 'The process is opposite when ++ is used as prefix. The value is incremented before printing. Hence the statement', 'Bitwise and bit shift operators are used to perform bit manipulation operations.']","['Operators are used to manipulate variables and values in a program. C# supports a number of operators that are classified based on the type of operations they perform.', 'You might have noticed the use of curly brackets { } in the example. We will discuss about them in string formatting. For now, just keep in mind that {0} is replaced by the first variable that follows the string, {1} is replaced by the second variable and so on.', 'Arithmetic operations are carried out in the above example. Variables can be replaced by constants in the statements. For example,', 'Relational operators are used to check the relationship between two operands. If the relationship is true the result will be true, otherwise it will result in false.', 'Logical operators are used to perform logical operation such as and, or. Logical operators operates on boolean expressions (true and false) and returns boolean values. Logical operators are used in decision making and loops.', 'The increment (++) and decrement (--) operators can be used as prefix and postfix. If used as prefix, the change in value of variable is seen on the same line and if used as postfix, the change in value of variable is seen on the next line. This will be clear by the example below.', 'We can see the effect of using ++ as prefix and postfix. When ++ is used after the operand, the value is first evaluated and then it is incremented by 1. Hence the statement', 'The ternary operator ? : operates on three operands. It is a shorthand for if-then-else statement. Ternary operator can be used as follows:']","['using System;', 'namespace Operator', '\tclass AssignmentOperator', '\t\t\tfirstNumber = 10;', '\t\t\tsecondNumber = firstNumber;', 'using System;', 'namespace Operator', '\tclass ArithmeticOperator', '\t\t\trem = num1 % num2;', 'using System;', 'namespace Operator', '\tclass RelationalOperator', '\t\t\tbool result;', 'using System;', 'namespace Operator', '\tclass LogicalOperator', '\t\t\tbool result;', '\t\t\tConsole.WriteLine(result);', '\t\t\tConsole.WriteLine(result);', 'using System;', 'namespace Operator', '\tclass UnaryOperator', '\t\t\tint number = 10, result;', '\t\t\tbool flag = true;', '\t\t\tresult = +number;', '\t\t\tresult = -number;', '\t\t\tresult = ++number;', '\t\t\tresult = --number;', 'using System;', 'namespace Operator', '\tclass UnaryOperator', '\t\t\tint number = 10;', 'using System;', 'namespace Operator', '\tclass TernaryOperator', '\t\t\tint number = 10;', '\t\t\tstring result;', 'using System;', 'namespace Operator', '\tclass BitOperator', '\t\t\tint firstNumber = 10;', '\t\t\tint secondNumber = 20;', '\t\t\tint result;', '\t\t\tresult = ~firstNumber;', '\t\t\tresult = firstNumber << 2;', '\t\t\tresult = firstNumber >> 2;', 'using System;', 'namespace Operator', '\tclass BitOperator', '\t\t\tint number = 10;', '\t\t\tnumber += 5;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber -= 3;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber *= 2;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber /= 3;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber %= 3;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber &= 10;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber |= 14;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber ^= 12;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber <<= 2;', '\t\t\tConsole.WriteLine(number);', '\t\t\tnumber >>= 3;', '\t\t\tConsole.WriteLine(number);']","['\t\tpublic static void Main(string[] args)', '\t\t\tint firstNumber, secondNumber;', '\t\t\tConsole.WriteLine(""First Number = {0}"", firstNumber);', '\t\t\tConsole.WriteLine(""Second Number = {0}"", secondNumber);', '\t\tpublic static void Main(string[] args)', '\t\t\tdouble firstNumber = 14.40, secondNumber = 4.60, result;', '\t\t\tint num1 = 26, num2 = 4, rem;', '\t\t\tresult = firstNumber + secondNumber;', '\t\t\tConsole.WriteLine(""{0} + {1} = {2}"", firstNumber, secondNumber, result);', '\t\t\tresult = firstNumber - secondNumber;', '\t\t\tConsole.WriteLine(""{0} - {1} = {2}"", firstNumber, secondNumber, result);', '\t\t\tresult = firstNumber * secondNumber;', '\t\t\tConsole.WriteLine(""{0} * {1} = {2}"", firstNumber, secondNumber, result);', '\t\t\tresult = firstNumber / secondNumber;', '\t\t\tConsole.WriteLine(""{0} / {1} = {2}"", firstNumber, secondNumber, result);', '\t\t\tConsole.WriteLine(""{0} % {1} = {2}"", num1, num2, rem);', '\t\tpublic static void Main(string[] args)', '\t\t\tint firstNumber = 10, secondNumber = 20;', '\t\t\tresult = (firstNumber==secondNumber);', '\t\t\tConsole.WriteLine(""{0} == {1} returns {2}"",firstNumber, secondNumber, result);', '\t\t\tresult = (firstNumber > secondNumber);', '\t\t\tConsole.WriteLine(""{0} > {1} returns {2}"",firstNumber, secondNumber, result);', '\t\t\tresult = (firstNumber < secondNumber);', '\t\t\tConsole.WriteLine(""{0} < {1} returns {2}"",firstNumber, secondNumber, result);', '\t\t\tresult = (firstNumber >= secondNumber);', '\t\t\tConsole.WriteLine(""{0} >= {1} returns {2}"",firstNumber, secondNumber, result);', '\t\t\tresult = (firstNumber <= secondNumber);', '\t\t\tConsole.WriteLine(""{0} <= {1} returns {2}"",firstNumber, secondNumber, result);', '\t\t\tresult = (firstNumber != secondNumber);', '\t\t\tConsole.WriteLine(""{0} != {1} returns {2}"",firstNumber, secondNumber, result);', '\t\tpublic static void Main(string[] args)', '\t\t\tint firstNumber = 10, secondNumber = 20;', '\t\t\tresult = (firstNumber == secondNumber) || (firstNumber > 5);', '\t\t\tresult = (firstNumber == secondNumber) && (firstNumber > 5);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""+number = "" + result);', '\t\t\tConsole.WriteLine(""-number = "" + result);', '\t\t\tConsole.WriteLine(""++number = "" + result);', '\t\t\tConsole.WriteLine(""--number = "" + result);', '\t\t\tConsole.WriteLine(""!flag = "" + (!flag));', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine((number++));', '\t\t\tConsole.WriteLine((++number));', '\t\tpublic static void Main(string[] args)', '\t\t\tresult = (number % 2 == 0)? ""Even Number"" : ""Odd Number"";', '\t\t\tConsole.WriteLine(""{0} is {1}"", number, result);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""~{0} = {1}"", firstNumber, result);', '\t\t\tresult = firstNumber & secondNumber;', '\t\t\tConsole.WriteLine(""{0} & {1} = {2}"", firstNumber,secondNumber, result);', '\t\t\tresult = firstNumber | secondNumber;', '\t\t\tConsole.WriteLine(""{0} | {1} = {2}"", firstNumber,secondNumber, result);', '\t\t\tresult = firstNumber ^ secondNumber;', '\t\t\tConsole.WriteLine(""{0} ^ {1} = {2}"", firstNumber,secondNumber, result);', '\t\t\tConsole.WriteLine(""{0} << 2 = {1}"", firstNumber, result);', '\t\t\tConsole.WriteLine(""{0} >> 2 = {1}"", firstNumber, result);', '\t\tpublic static void Main(string[] args)']","['double x;', 'x = 50.05;', 'First Number = 10', 'Second Number = 10', 'int x = 5;', 'int y = 10;', 'int z = x + y;// z = 15', '14.4 + 4.6 = 19', '14.4 - 4.6 = 9.8', '14.4 * 4.6 = 66.24', '14.4 / 4.6 = 3.1304347826087', '26 % 4 = 2', 'result = 4.5 + 2.7 ; // result will hold 7.2', 'result = firstNumber - 3.2; // result will hold 11.2', '10 == 20 returns False', '10 > 20 returns False', '10 < 20 returns True', '10 >= 20 returns False', '10 <= 20 returns True', '10 != 20 returns True', 'True', 'False', '+number = 10', '-number = -10', '++number = 11', '--number = 10', '!flag = False', '10', '11', '12', '12', 'Console.WriteLine((number++));', 'Console.WriteLine((++number));', 'variable = Condition? Expression1 : Expression2;', '10 is Even Number', '~10 = -11', '10 & 20 = 0', '10 | 20 = 30', '10 ^ 20 = 30', '10 << 2 = 40', '10 >> 2 = 2', '15', '12', '24', '8', '2', '2', '14', '2', '8', '1']","['perator|||Operator Name|||Example&&&|||Addition Operator|||6 + 3 evaluates to 9&&&|||Subtraction Operator|||10 - 6 evaluates to 4&&&|||Multiplication Operator|||4 * 2 evaluates to 8&&&|||Division Operator|||10 / 5 evaluates to 2&&&|||Modulo Operator (Remainder)|||16 % 3 evaluates to 1', 'perator|||Operator Name|||Example&&&=|||Equal to|||6 == 4 evaluates to false&&&|||Greater than|||3 > -1 evaluates to true&&&|||Less than|||5 < 3 evaluates to false&&&=|||Greater than or equal to|||4 >= 4 evaluates to true&&&=|||Less than or equal to|||5 <= 3 evaluates to false&&&=|||Not equal to|||10 != 2 evaluates to true', 'perand 1|||Operand 2|||OR (||)|||AND (&&)&&&rue|||true|||true|||true&&&rue|||false|||true|||false&&&alse|||true|||true|||false&&&alse|||false|||false|||false', 'perator|||Operator Name|||Description&&&|||Unary Plus|||Leaves the sign of operand as it is&&&|||Unary Minus|||Inverts the sign of operand&&&+|||Increment|||Increment value by 1&&&-|||Decrement|||Decrement value by 1&&&|||Logical Negation (Not)|||Inverts the value of a boolean', 'perator|||Operator Name&&&|||Bitwise Complement&&&|||Bitwise AND&&&|||Bitwise OR&&&|||Bitwise Exclusive OR&&&<|||Bitwise Left Shift&&&>|||Bitwise Right Shift', 'perator|||Operator Name|||Example|||Equivalent To&&&=|||Addition Assignment|||x += 5|||x = x + 5&&&=|||Subtraction Assignment|||x -= 5|||x = x - 5&&&=|||Multiplication Assignment|||x *= 5|||x = x * 5&&&=|||Division Assignment|||x /= 5|||x = x / 5&&&=|||Modulo Assignment|||x %= 5|||x = x % 5&&&=|||Bitwise AND Assignment|||x &= 5|||x = x & 5&&&=|||Bitwise OR Assignment|||x |= 5|||x = x | 5&&&=|||Bitwise XOR Assignment|||x ^= 5|||x = x ^ 5&&&<=|||Left Shift Assignment|||x <<= 5|||x = x << 5&&&>=|||Right Shift Assignment|||x >>= 5|||x = x >> 5&&&>|||Lambda Operator|||x => x*x|||Returns x*x']","['If one of the operand is true, the OR operator will evaluate it to true.|||If one of the operand is false, the AND operator will evaluate it to false.|||If the expression stated by Condition is true, the result of Expression1 is assigned to variable.|||If it is false, the result of Expression2 is assigned to variable.|||']"
4,['C# Operator Precedence and Associativity'],['In this tutorial we you will learn about operator precedence and associativity in C#. This will give us an idea of how an expression is evaluated by the C# compiler.'],[],[],"['C# Operator Precedence', 'Associativity of Operators in C#']","['Operator Precedence Table', 'Example 1: Operator Precedence', 'Example 2: Associativity of Operators']","['//cdn.programiz.com/sites/tutorial2program/files/first-operator-precedence-evaluation.png', '//cdn.programiz.com/sites/tutorial2program/files/second-operator-precedence-evaluation.png', '//cdn.programiz.com/sites/tutorial2program/files/third-operator-precedence-evaluation.png', '//cdn.programiz.com/sites/tutorial2program/files/final-operator-precedence-evaluation.png']","['Take a look at the statement below.', 'What will be the value of x after executing this statement?', 'When we run the program, the output will be:', ""Let's understand how the expression is evaluated in the program."", 'is equivalent to', 'But what if both the operators have same precedence?', 'For example:', ""Let's take a look at another example."", 'The table below shows the associativity of C# operators:', 'When we run the program, the output will be:']","['If addition would have a higher precedence, 4 + 3 would be evaluated first and the value of x would be 35.', 'The higher the precedence of operator is, the higher it appears in the table', 'The precedence of -- and ++ is higher than *, and precedence of * is higher than -. Hence the statement,', 'The expression inside parentheses is always evaluated first no matter what the precedence of operators outside it is.', 'In such case, the expression is evaluated based on the associativity of operator (left to right or right to left).', 'Almost all the operators have associativity from left to right. The operators having associativity from right to left are:']","['Operator precedence is a set of rules which defines how an expression is evaluated. In C#, each C# operator has an assigned priority and based on these priorities, the expression is evaluated.', 'For example, the precedence of multiplication (*) operator is higher than the precedence of addition (+) operator. Therefore, operation involving multiplication is carried out before addition.', 'The operand 3 is associated with + and *. As stated earlier, multiplication has a higher precedence than addition. So, the operation 3 * 5 is carried out instead of 4 + 3. The value of variable x will be 19.', 'The assignment operators have the lowest precedence while the postfix increment and decrement operators have the highest precedence.', 'In the next expression, the precedence of + is higher than >=. So, c and a is added first and the sum is compared with b to produce false.', 'In the previous section, we discussed about operator precedence. If two operators with different precedence are used, the operator with higher precedence is evaluated first.', 'Here, both * and / have the same precedence. But since the associativity of these operators is from left to right, a * b is evaluated first and then division is carried out. The final result of this expression will be 10.', 'In this particular example, the associativity does not really matter. Because even if division was carried out before multiplication, the result would be unaffected.', 'The associativity of = operator is from right to left. So the value of c (i.e. 3) is assigned to b, and then the value of b is assigned to a. So after executing this statement, the values of a, b and c will be 3.']","['using System;', 'namespace Operator', '\tclass OperatorPrecedence', '\t\t\tint result1;', '\t\t\tint a = 5, b = 6, c = 4;', '\t\t\tresult1 = --a * b - ++c;', '\t\t\tConsole.WriteLine(result1);', '\t\t\tbool result2;', '\t\t\tresult2 = b >= c + a;', '\t\t\tConsole.WriteLine(result2);', 'using System;', 'namespace Operator', '\tclass OperatorPrecedence', '\t\t\tint a = 5, b = 6, c = 3;', '\t\t\tint result = a * b / c;', '\t\t\tConsole.WriteLine(result);', '\t\t\ta = b = c;']","['\t\tpublic static void Main(string[] args)', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""a = {0}, b = {1}, c = {2}"", a, b, c);']","['int x = 4 + 3 * 5;', '19', 'False', 'result1 = --a * b - ++c;', 'result1 = ((--a)*b)-(++c);', 'int a = 5, b = 6, c = 3;', 'int result = a * b / c;', 'int a = 5, b = 6, c = 3;', 'a = b = c;', '10', 'a = 3, b = 3, c = 3']","['ategory|||Operators&&&ostfix Increment and Decrement|||++, --&&&refix Increment, Decrement and Unary|||++, --, +, -, !, ~&&&ultiplicative|||*, /, %&&&dditive|||+, -&&&hift|||<<, >>&&&elational|||<, <=, >, >=&&&quality|||==, !=&&&itwise AND|||&&&&itwise XOR|||^&&&itwise OR||||&&&ogical AND|||&&&&&ogical OR|||||&&&ernary|||? :&&&ssignment|||=, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=', 'ategory|||Operators|||Associativity&&&ostfix Increment and Decrement|||++, --|||Left to Right&&&refix Increment, Decrement and Unary|||++, --, +, -, !, ~|||Right to Left&&&ultiplicative|||*, /, %|||Left to Right&&&dditive|||+, -|||Left to Right&&&hift|||<<, >>|||Left to Right&&&elational|||<, <=, >, >=|||Left to Right&&&quality|||==, !=|||Left to Right&&&itwise AND|||&|||Left to Right&&&itwise XOR|||^|||Left to Right&&&itwise OR|||||||Left to Right&&&ogical AND|||&&|||Left to Right&&&ogical OR||||||||Left to Right&&&ernary|||? :|||Right to Left&&&ssignment|||=, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=|||Right to Left']","['At first, (--a) is evaluated resulting into 4.|||Then (++c) is evaluated resulting into 5.|||Now, (a * b) is evaluated resulting into 24.|||Finally, the subtraction is carried out resulting into 19.|||Hence the final value of result1 will be 19.|||Unary operators|||Prefix Increment and Decrement Operators|||Ternary Operator|||Assignment Operators|||']"
5,['C# Bitwise and Bit Shift Operators'],"['In this tutorial, we will learn in detail about bitwise and bit shift operators in C#. C# provides 4 bitwise and 2 bit shift operators.']",[],[],"['Bitwise OR', 'Bitwise AND', 'Bitwise XOR', 'Bitwise Complement', 'Bitwise Left Shift', 'Bitwise Right Shift']","['Example 1: Bitwise OR', 'Example 2: Bitwise AND', 'Example 3: Bitwise XOR', 'Example 4: Bitwise Complement', 'Example 5: Bitwise Left Shift', 'Example 6: Bitwise Right Shift']",[],"['For Example,', 'Bitwise OR operation between 14 and 11:', 'When we run the program, the output will be:', 'For Example,', 'Bitwise AND operation between 14 and 11:', 'When we run the program, the output will be:', 'For Example,', 'Bitwise XOR operation between 14 and 11:', 'When we run the program, the output will be:', 'For Example,', 'Bitwise Complement operation on 26:', 'When we run the program, the output will be:', ""For any integer n, 2's complement of n will be -(n+1)."", ""Overflow values are ignored in 2's complement."", 'In decimal, it is equivalent to', 'For Example,', 'Bitwise Lift Shift operation on 42:', 'When we run the program, the output will be:', 'In decimal, it is equivalent to', 'For Example,', 'Bitwise Lift Shift operation on 42:', 'When we run the program, the output will be:']","['If you are interested to explore more, visit practical applications of bitwise operations.', 'The bitwise and bit shift operators available in C# are listed below.', 'If the operands are of type bool, the bitwise OR operation is equivalent to logical OR operation between them.', 'If the operands are of type bool, the bitwise AND operation is equivalent to logical AND operation between them.', 'If the operands are of type bool, the bitwise XOR operation is equivalent to logical XOR operation between them.', 'If you want to more about the usage of Bitwise XOR, visit The Magic of XOR', 'We got -27 as output when we were expecting 229. Why did this happen?', ""The bitwise complement of 26 is 229 (in decimal) and the 2's complement of 229 is -27. Hence the output is -27 instead of 229.""]","['Bitwise and bit shift operators are used to perform bit level operations on integer (int, long, etc) and boolean data. These operators are not commonly used in real life situations.', 'Bitwise OR operator is represented by |. It performs bitwise OR operation on the corresponding bits of two operands. If either of the bits is 1, the result is 1. Otherwise the result is 0.', 'Bitwise AND operator is represented by &. It performs bitwise AND operation on the corresponding bits of two operands. If either of the bits is 0, the result is 0. Otherwise the result is 1.', 'Bitwise XOR operator is represented by ^. It performs bitwise XOR operation on the corresponding bits of two operands. If the corresponding bits are same, the result is 0. If the corresponding bits are different, the result is 1.', 'Bitwise Complement operator is represented by ~. It is a unary operator, i.e. operates on only one operand. The ~ operator inverts each bits i.e. changes 1 to 0 and 0 to 1.', ""It happens because the binary value 11100101 which we expect to be 229 is actually a 2's complement representation of -27. Negative numbers in computer are represented in 2's complement representation."", 'Bitwise left shift operator is represented by <<. The << operator shifts a number to the left by a specified number of bits. Zeroes are added to the least significant bits.', 'Bitwise left shift operator is represented by >>. The >> operator shifts a number to the right by a specified number of bits. The first operand is shifted to right by the number of bits specified by second operand.']","['using System;', 'namespace Operator', '\tclass BitWiseOR', 'using System;', 'namespace Operator', '\tclass BitWiseAND', 'using System;', 'namespace Operator', '\tclass BitWiseXOR', 'using System;', 'namespace Operator', '\tclass BitWiseComplement', '\t\t\tint number = 26, result;', '\t\t\tresult = ~number;', 'using System;', 'namespace Operator', '\tclass LeftShift', '\t\t\tint number = 42;', 'using System;', 'namespace Operator', '\tclass LeftShift', '\t\t\tint number = 42;']","['\t\tpublic static void Main(string[] args)', '\t\t\tint firstNumber = 14, secondNumber = 11, result;', '\t\t\tresult = firstNumber | secondNumber;', '\t\t\tConsole.WriteLine(""{0} | {1} = {2}"", firstNumber, secondNumber, result);', '\t\tpublic static void Main(string[] args)', '\t\t\tint firstNumber = 14, secondNumber = 11, result;', '\t\t\tresult = firstNumber & secondNumber;', '\t\t\tConsole.WriteLine(""{0} & {1} = {2}"", firstNumber, secondNumber, result);', '\t\tpublic static void Main(string[] args)', '\t\t\tint firstNumber = 14, secondNumber = 11, result;', '\t\t\tresult = firstNumber^secondNumber;', '\t\t\tConsole.WriteLine(""{0} ^ {1} = {2}"", firstNumber, secondNumber, result);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""~{0} = {1}"", number, result);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""{0}<<1 = {1}"", number, number<<1);', '\t\t\tConsole.WriteLine(""{0}<<2 = {1}"", number, number<<2);', '\t\t\tConsole.WriteLine(""{0}<<4 = {1}"", number, number<<4);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""{0}>>1 = {1}"", number, number>>1);', '\t\t\tConsole.WriteLine(""{0}>>2 = {1}"", number, number>>2);', '\t\t\tConsole.WriteLine(""{0}>>4 = {1}"", number, number>>4);']","['14 = 00001110 (In Binary)', '11 = 00001011 (In Binary)', '00001110', '00001011', '--------', '00001111 = 15 (In Decimal)', '14 | 11 = 15', '14 = 00001110 (In Binary)', '11 = 00001011 (In Binary)', '00001110', '00001011', '--------', '00001010 = 10 (In Decimal)', '14 & 11 = 10', '14 = 00001110 (In Binary)', '11 = 00001011 (In Binary)', '00001110', '00001011', '--------', '00000101 = 5 (In Decimal)', '14 ^ 11 = 5', '26 = 00011010 (In Binary)', '~ 00011010 = 11100101 = 229 (In Decimal)', '~26 = -27', 'num * 2bits', '42 = 101010 (In Binary)', '42 << 1 = 84 (In binary 1010100)', '42 << 2 = 168 (In binary 10101000)', '42 << 4 = 672 (In binary 1010100000)', '42<<1 = 84', '42<<2 = 168', '42<<4 = 672', 'floor(num / 2bits)', '42 = 101010 (In Binary)', '42 >> 1 = 21 (In binary 010101)', '42 >> 2 = 10 (In binary 001010)', '42 >> 4 = 2 (In binary 000010)', '42>>1 = 21', '42>>2 = 10', '42>>4 = 2']","['perator|||Operator Name&&&|||Bitwise Complement&&&|||Bitwise AND&&&|||Bitwise OR&&&|||Bitwise Exclusive OR (XOR)&&&<|||Bitwise Left Shift&&&>|||Bitwise Right Shift', ""ecimal|||Binary|||2's Complement&&&|||00000000|||-(11111111 + 1) = -00000000 = -0 (In Decimal)&&&|||00000001|||-(11111110 + 1) = -11111111 = -256 (In Decimal)&&&29|||11100101|||-(00011010 + 1) = -00011011 = -27""]",[]
6,['C# Basic Input and Output'],"['In this tutorial, we will learn how to take input from user and and display output in C# using various methods']",[],[],"['C# Output', 'C# Input']","['Example 1: Printing String using WriteLine()', 'Difference between WriteLine() and Write() method', 'Printing Variables and Literals using WriteLine() and Write()', 'Combining (Concatenating) two strings using + operator and printing them', 'Printing concatenated string using Formatted String [Better Alternative]', 'Example 6: Get String Input From User', 'Difference between ReadLine(), Read() and ReadKey() method:', 'Reading numeric values (integer and floating point types)']",[],"['In order to output something in C#, we can use', 'When we run the program, the output will be', 'When we run the program, the output will be', 'When we run the program, the output will be', 'When we run the program, the output will be', 'The following line,', 'can be replaced by,', 'When we run the program, the output will be', 'To know more about string formatting, visit C# string formatting.', 'When we run the program, the output will be:', 'When we run the program, the output will be', 'When we run the program, the output will be']","['Here, System is a namespace, Console is a class within namespace System and WriteLine and Write are methods of class Console.', ""Let's look at a simple example that prints a string to output screen."", ""Let's take at a look at the example below to understand the difference between these methods."", ""The WriteLine() and Write() method can be used to print variables and literals. Here's an example."", 'Strings can be combined/concatenated using the + operator while printing.', 'Multiple variables can be used in the formatted string. We will see that in the example below.', 'The difference between ReadLine(), Read() and ReadKey() method is:', 'Reading a character or string is very simple in C#. All you need to do is call the corresponding methods as required.', 'One simple approach for converting our input is using the methods of Convert class.', 'There are other ways to get numeric inputs from user. To learn more, visit Reading an integer from user input.']","['The main difference between WriteLine() and Write() is that the Write() method only prints the string provided to it, while the WriteLine() method prints the string and moves to the start of next line as well.', 'A better alternative for printing concatenated string is using formatted string. Formatted string allows programmer to use placeholders for variables. For example,', '{0} is the placeholder for variable val which will be replaced by value of val. Since only one variable is used so there is only one placeholder.', 'Here, {0} is replaced by firstNumber, {1} is replaced by secondNumber and {2} is replaced by result. This approach of printing output is more readable and less error prone than using + operator.', 'In C#, the simplest method to get input from the user is by using the ReadLine() method of the Console class. However, Read() and ReadKey() are also available for getting input from the user. They are also included in Console class.', 'If you want to know more about these methods, here is an interesting discussion on StackOverflow on: Difference between Console.Read() and Console.ReadLine()?.', 'From this example, it must be clear how ReadKey() and Read() method works. While using ReadKey(), as soon as the key is pressed, it is displayed on the screen.', 'When Read() is used, it takes a whole line but only returns the ASCII value of first character. Hence, 76\xa0(ASCII value of L) is printed.', 'But, reading numeric values can be slightly tricky in C#. We’ll still use the same ReadLine() method we used for getting string values. But since the ReadLine() method receives the input as string, it needs to be converted into integer or floating point type.', 'The ToInt32() and ToDouble() method of Convert class converts the string input to integer and double type respectively. Similarly we can convert the input to other types. Here is a complete list of available methods for Convert class.']","['using System;', 'namespace Sample', '\tclass Test', 'using System;', 'namespace Sample', '\tclass Test', '\t\t\tConsole.Write(""Same line"");', 'using System;', 'namespace Sample', '\tclass Test', '\t\t\tint value = 10;', '\t\t\tConsole.WriteLine(value);', '\t\t\tConsole.WriteLine(50.05);', 'using System;', 'namespace Sample', '\tclass Test', '\t\t\tint val = 55;', 'using System;', 'namespace Sample', '\tclass Test', 'using System;', 'namespace Sample', '\tclass Test', '\t\t\tstring testString;', 'using System;', 'namespace Sample', '\tclass Test', '\t\t\tint userInput;', '\t\t\tConsole.ReadKey();', '\t\t\tConsole.WriteLine();', '\t\t\tuserInput = Console.Read();', 'using System;', 'namespace UserInput', '\tclass MyClass', '\t\t\tstring userInput;', '\t\t\tint intVal;', '\t\t\tdouble doubleVal;']","['\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""C# is cool"");', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""Prints on "");', '\t\t\tConsole.WriteLine(""New line"");', '\t\tpublic static void Main(string[] args)', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""Hello "" + ""World"");', '\t\t\tConsole.WriteLine(""Value = "" + val);', '\t\tpublic static void Main(string[] args)', '\t\t\tint firstNumber = 5, secondNumber = 10, result;', '\t\t\tresult = firstNumber + secondNumber;', '\t\t\tConsole.WriteLine(""{0} + {1} = {2}"", firstNumber, secondNumber, result);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.Write(""Enter a string - "");', '\t\t\ttestString = Console.ReadLine();', '\t\t\tConsole.WriteLine(""You entered \'{0}\'"", testString);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""Press any key to continue..."");', '\t\t\tConsole.Write(""Input using Read() - "");', '\t\t\tConsole.WriteLine(""Ascii Value = {0}"",userInput);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.Write(""Enter integer value: "");', '\t\t\tuserInput = Console.ReadLine();', '\t\t\t/* Converts to integer type */', '\t\t\tintVal = Convert.ToInt32(userInput);', '\t\t\tConsole.WriteLine(""You entered {0}"",intVal);', '\t\t\tConsole.Write(""Enter double value: "");', '\t\t\tuserInput = Console.ReadLine();', '\t\t\t/* Converts to double type */', '\t\t\tdoubleVal = Convert.ToDouble(userInput);', '\t\t\tConsole.WriteLine(""You entered {0}"",doubleVal);']","['System.Console.WriteLine() OR', 'System.Console.Write()', 'C# is cool', 'Prints on', 'New line', 'Prints on Same line', '10', '50.05', 'Hello World', 'Value = 55', 'Console.WriteLine(""Value = "" + val);', 'Console.WriteLine(""Value = {0}"", val);', '5 + 10 = 15', 'Enter a string - Hello World', ""You entered 'Hello World'"", 'Press any key to continue...', 'x', 'Input using Read() - Learning C#', 'Ascii Value = 76', 'Enter integer value: 101', 'You entered 101', 'Enter double value: 59.412', 'You entered 59.412']",[],['ReadLine(): The ReadLine() method reads the next line of input from the standard input stream. It returns the same string.|||Read(): The Read() method reads the next character from the standard input stream. It returns the ascii value of the character.|||ReadKey(): The ReadKey() method obtains the next key pressed by user. This method is usually used to hold the screen until user press a key.|||']
7,"['C# Expressions, Statements and Blocks (With Examples)']","['In this article, we will learn about C# expressions, C# statements, difference between expression and statement, and C# blocks.']",[],[],"['C# Expressions', 'C# Statements', 'C# Blocks', 'Example 1: C# Blocks with statements']","['Declaration Statement', 'Expression Statement', 'Example 2: C# Blocks without statements']",[],"[""Let's look at the example below:"", 'Here, a + b + c is an expression.', 'For example:', 'In the above example, both lines above are statements.', 'For example:', 'Both char ch; and int maxValue = 55; are declaration statements.', 'For example:', 'Beside declaration and expression statement, there are:', 'These statements will be discussed in later tutorials.', 'For example:', 'When we run the program, the output will be:', 'Here, the two statements inside { }:', 'forms a block.']","['Here, 42.05 is an expression. Also, temperature = 42.05 is an expression too.', 'Here, (age>=18 && age<58) is an expression that returns a boolean value. ""Eligible to work"" is also an expression.', 'A statement is a basic unit of execution of a program. A program consists of multiple statements.', 'There are different types of statements in C#. In this tutorial, we’ll mainly focus on two of them:', 'Declaration statements are used to declare and initialize variables.', 'An expression followed by a semicolon is called an expression statement.', 'Here, 3.14 * radius * radius \xa0is an expression and area = 3.14 * radius * radius; is an expression statement.', 'Likewise, System.Console.WriteLine(""Hello""); is both an expression and a statement.', 'If you want to learn more about statements, visit C# Statements ( C# reference)', 'A block is a combination of zero or more statements that is enclosed inside curly brackets { }.', 'A block may not have any statements within it as shown in the below example.', 'Here, the curly braces { } after if(temperature > 32) contains only comments and no statements.']","['Expressions, statements and blocks are the building block of a C# program. We have been using them since our first ""Hello World"" program.', 'An expression in C# is a combination of operands (variables, literals, method calls) and operators that can be evaluated to a single value. To be precise, an expression must have at least one operand but may not have any operator.']","['using System;', 'namespace Blocks', '\tclass BlockExample', '\t\t\tdouble temperature = 42.05;', '\t\t\tif (temperature > 32)', '\t\t\t{\t// Start of block', '\t\t\t}\t// End of block', 'using System;', 'namespace Blocks', '\tclass BlockExample', '\t\t\tdouble temperature = 42.05;', '\t\t\tif (temperature > 32)', '\t\t\t{\t// Start of block', '\t\t\t}\t// End of block']","['\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""Current temperature = {0}"", temperature);', '\t\t\t\tConsole.WriteLine(""It\'s hot"");', '\t\tpublic static void Main(string[] args)']","['double temperature;', 'temperature = 42.05;', 'int a, b, c, sum;', 'sum = a + b + c;', 'if (age>=18 && age<58)', '\tConsole.WriteLine(""Eligible to work"");', 'int age = 21;', 'Int marks = 90;', 'char ch;', 'int maxValue = 55;', '/* Assignment */', 'area = 3.14 * radius * radius;', '/* Method call is an expression*/', 'System.Console.WriteLine(""Hello"");', 'Current temperature = 42.05', ""It's hot"", 'Console.WriteLine(""Current temperature = {0}"", temperature);', 'Console.WriteLine(""It\'s hot"");']",[],"['Selection Statements (if...else, switch)|||Iteration Statements (do, while, for, foreach)|||Jump Statements (break, continue, goto, return, yield)|||Exception Handling Statements (throw, try-catch, try-finally, try-catch-finally)|||&&&Declaration Statement|||Expression Statement|||']"
8,['C# Comments'],"['In this article, we will learn about C# comments, different style of comments, and why and how to use them in a program.']",[],[],"['Single Line Comments', 'Multi Line Comments', 'XML Documentation Comments', 'Use Comments the Right Way']","['Example 1: Using single line comment', 'Example 2: Using multi line comment', 'Example 3: Using XML documentation comment']",[],"['In C#, there are 3 types of comments:', 'Here, Adding 5 and 7 is the comment.', 'The above program contains 3 single line comments:', 'The above program contains 2 multi line comments:', 'If you are not familiar with XML, see What is XML?', 'The XML comment used in the above program is', 'The XML documentation (.xml file) generated will contain:', 'For example:']","['Multi line comments start with /* and ends with */. Multi line comments can span over multiple lines.', 'Visit XML Documentation Comments if you are interested in learning more.', 'Comments are used to explain parts of code but they should not be overused .']","['Comments are used in a program to help us understand a piece of code. They are human readable words intended to make the code readable. Comments are completely ignored by the compiler.', 'Single line comments start with a double slash //. The compiler ignores everything after // to the end of the line. For example,', 'Single line comments can be written in a separate line or along with the codes in same line. However, it is recommended to use comments in a separate line.', 'Here, we may have noticed that it is not compulsory for a multi line comment to span over multiple lines. /* … */ can be used instead of single line comments.', 'XML documentation comment is a special feature in C#. It starts with a triple slash /// and is used to categorically describe a piece of code.. This is done using XML tags within a comment. These comments are then, used to create a separate XML documentation file.', 'Using comment in the above example is not necessary. It is obvious that the line will print Hello World. Comments should be avoided in such cases.']","['using System;', 'namespace HelloWorld', '\tclass Program', 'using System;', 'namespace HelloWorld', '\tclass Program', 'using System;', 'namespace HelloWorld', '\tclass Program']","['\t\tpublic static void Main(string[] args)  // Execution Starts from Main method', '\t\t\tConsole.WriteLine(""Hello World!"");', '\tThis is a Hello World Program in C#.', '\tThis program prints Hello World.', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""Hello World!"");', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""Hello World!"");']","['int a = 5 + 7; // Adding 5 and 7', '/*', 'This is a Hello World Program in C#.', 'This program prints Hello World.', '*/', '/* Prints Hello World */', '<?xml version=""1.0""?>', '<doc>', '\t<assembly>', '\t\t<name>HelloWorld</name>', '\t</assembly>', '\t<members>', '\t</members>', '</doc>', 'Console.WriteLine(""Hello World"");']",[],"['Instead comments should be used in the program to explain complex algorithms and techniques.|||Comments should be short and to the point instead of a long description.|||As a rule of thumb, it is better to explain why instead of how, using comments.|||&&&Single Line Comments ( // )|||Multi Line Comments (/* */)|||XML Comments ( /// )|||']"
9,"['C# if, if...else, if...else if and Nested if Statement']","['In this article, we will learn how to use if, if...else, if...else if statement in C# to control the flow of our program’s execution.']",[],[],"['C# if (if-then) Statement', 'C# if...else (if-then-else) Statement', 'C# if...else if (if-then-else if) Statement', 'Nested if...else Statement']","['How if statement works?', 'Example 1: C# if Statement', 'How if...else Statement works?', 'Example 2: C# if...else Statement', 'Example 3: C# if...else if Statement', 'Example 4: Nested if...else Statement']","['//cdn.programiz.com/sites/tutorial2program/files/if-statement-csharp.png', '//cdn.programiz.com/sites/tutorial2program/files/if-else-statement-csharp.png']","['For example,', 'In this example, the statement', 'will be executed only if the value of number is less than 5.', 'Remember the += operator?', 'When we run the program, the output will be:', 'The syntax of if...else statement in C# is:', 'For example,', 'In this example, the statement', 'will be executed only if the value of number is less than 5.', 'The statement', 'When we run the program, the output will be:', 'Alternatively, we can use switch statement in such condition.', 'When we run the program, the output will be:', 'The general structure of nested if…else statement is:', 'When we run the program, the output will be:']","[""In this article, we'll learn to test conditions using if statement in C#."", 'C# if-then statement will execute a block of code if the given condition is true. The syntax of if-then statement in C# is:', 'Now, change the value of number to something greater than 5, say 10. When we run the program the output will be:', ""The expression number < 5 will return false, hence the code inside if block won't be executed."", 'will be executed if the value of number is greater than or equal to 5.', 'Now, change the value of number to something less than 5, say 2. When we run the program the output will be:', 'The expression number < 5 will return true, hence the code inside if block will be executed.', 'Ternary operator in C# provides a shortcut for C# if...else statement.', 'For such case, we can use if..else if statement in C#. The syntax for if...else if statement is:', 'If none of the expression is true, the code inside the else block is executed.', 'Similarly, we can change the value of number to alter the flow of execution.', 'An if...else statement can exist within another if...else statement. Such statements are called nested if...else statement.', 'The following program computes the largest number among 3 numbers using nested if...else statement.']","[""Testing a condition is inevitable in programming. We will often face situations where we need to test conditions (whether it is true or false) to control the flow of program. These conditions may be affected by user's input, time factor, current environment where the program is running, etc."", 'The value of number is initialized to 2. So the expression number < 5 is evaluated to true. Hence, the code inside the if block are executed. The code after the if statement will always be executed irrespective to the expression.', 'The if statement in C# may have an optional else statement. The block of code inside the else statement will be executed if the expression is evaluated to false.', 'Here, the value of number is initialized to 12. So the expression number < 5 is evaluated to false. Hence, the code inside the else block are executed. The code after the if..else statement will always be executed irrespective to the expression.', 'When we have only one condition to test, if-then and if-then-else statement works fine. But what if we have a multiple condition to test and execute one of the many block of code.', 'The if...else if statement is executed from the top to bottom. As soon as a test expression is true, the code inside of that if ( or else if ) block is executed. Then the control jumps out of the if...else if block.', 'The value of number is initialized to 12. The first test expression number < 5 is false, so the control will move to the else if block. The test expression number > 5 is true hence the block of code inside else if will be executed.', 'Nested if statements are generally used when we have to test one condition followed by another. In a nested if statement, if the outer if statement returns true, it enters the body to check the inner if statement.']","['using System;', 'namespace Conditional', '\tclass IfStatement', '\t\t\tint number = 2;', '\t\t\tif (number < 5)', 'using System;', 'namespace Conditional', '\tclass IfElseStatement', '\t\t\tint number = 12;', '\t\t\tif (number < 5)', 'using System;', 'namespace Conditional', '\tclass IfElseIfStatement', '\t\t\tint number = 12;', '\t\t\tif (number < 5)', '\t\t\telse if (number > 5)', 'using System;', 'namespace Conditional', '\tclass Nested', '\t\t\tif (first > second)', '\t\t\t\tif (firstNumber > third)', '\t\t\t\telse', '\t\t\t\tif (second > third)', '\t\t\t\telse']","['\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""{0} is less than 5"", number);', '\t\t\tConsole.WriteLine(""This statement is always executed."");', '\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""{0} is less than 5"", number);', '\t\t\t\tConsole.WriteLine(""{0} is greater than or equal to 5"", number);', '\t\t\tConsole.WriteLine(""This statement is always executed."");', '\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""{0} is less than 5"", number);', '\t\t\t\tConsole.WriteLine(""{0} is greater than 5"", number);', '\t\t\t\tConsole.WriteLine(""{0} is equal to 5"");', '\t\tpublic static void Main(string[] args)', '\t\t\tint first = 7, second = -23, third = 13;', '\t\t\t\t\tConsole.WriteLine(""{0} is the largest"", first);', '\t\t\t\t\tConsole.WriteLine(""{0} is the largest"", third);', '\t\t\t\t\tConsole.WriteLine(""{0} is the largest"", second);', '\t\t\t\t\tConsole.WriteLine(""{0} is the largest"", third);']","['if (boolean-expression)', '{', '}', 'if (number < 5)', '{', '\tnumber += 5;', '}', 'number += 5;', '2 is less than 5', 'This statement is always executed.', 'This statement is always executed.', 'if (boolean-expression)', '{', '}', 'else', '{', '}', 'if (number < 5)', '{', '\tnumber += 5;', '}', 'else', '{', '\tnumber -= 5;', '}', 'number += 5;', 'number -= 5;', '12 is greater than or equal to 5', 'This statement is always executed.', '2 is less than 5', 'This statement is always executed.', 'if (boolean-expression-1)', '{', '}', 'else if (boolean-expression-2)', '{', '}', 'else if (boolean-expression-3)', '{', '}', '.', '.', '.', 'else', '{', '}', '12 is greater than 5', 'if (boolean-expression)', '{', '\tif (nested-expression-1)', '\t{', '\t}', '\telse', '\t{', '\t}', '}', 'else', '{', '\tif (nested-expression-2)', '\t{', '\t}', '\telse', '\t{', '\t}', '}', '13 is the largest']",[],"['The boolean-expression will return either true or false.|||If the boolean-expression returns true, the statements inside the body of if ( inside {...} ) will be executed.|||If the boolean-expression returns false, the statements inside the body of if will be ignored.|||']"
10,['C# switch Statement'],"['In this article, we will learn about switch statement in C# and how to use them with examples.']",[],[],"['Example 1: C# switch Statement', 'Example 2: C# switch Statement with grouped cases', 'Example 3: Simple calculator program using C# switch Statement']",[],[],"['The syntax of switch statement is:', 'To learn more about break statement, visit C# break statement.', 'When we run the program, the output will be:', 'When we run the program, the output will be:']","['Then, the switch statement checks whether the alphabet entered by user is any of a, e, i, o or u.', 'If one of the case matches, Vowel is printed otherwise the control goes to default block and Not a vowel is printed as output.', 'Since, the output for all vowels are the same, we can join the cases as:', 'The above program takes two operands and an operator as input from the user and performs the operation based on the operator.', 'The inputs are taken from the user using the ReadLine() and Read() method. To learn more, visit C# Basic Input and Output.']","['Switch statement can be used to replace the if...else if statement in C#. The advantage of using switch over if...else if statement is the codes will look much cleaner and readable with switch.', 'The switch statement evaluates the expression (or variable) and compare its value with the values (or expression) of each case (value1, value2, …). When it finds the matching value, the statements inside that case are executed.', 'But, if none of the above cases matches the expression, the statements inside default block is executed. The default statement at the end of switch is similar to the else block in if else statement.', 'However a problem with the switch statement is, when the matching value is found, it executes all statements after it until the end of switch block.', 'To avoid this, we use break statement at the end of each case. The break statement stops the program from executing non-matching statements by terminating the execution of switch statement.', 'In this example, the user is prompted to enter an alphabet. The alphabet is converted to lowercase by using ToLower() method if it is in uppercase.', 'The output of both programs is same. In the above program, all vowels print the output Vowel and breaks from the switch statement.', 'Although switch statement makes the code look cleaner than if...else if statement, switch is restricted to work with limited data types. Switch statement in C# only works with:', 'The program uses switch case statement for decision making. Alternatively, we can use if-else if ladder to perform the same operation.']","['using System;', 'namespace Conditional', '    class SwitchCase', '        {', '            char ch;', '            {', ""                case 'a':"", '                    break;', ""                case 'e':"", '                    break;', ""                case 'i':"", '                    break;', ""                case 'o':"", '                    break;', ""                case 'u':"", '                    break;', '                default:', '                    break;', '            }', '        }', 'using System;', 'namespace Conditional', '    class SwitchCase', '        {', '            char ch;', '            {', ""                case 'a':"", ""                case 'e':"", ""                case 'i':"", ""                case 'o':"", ""                case 'u':"", '                    break;', '                default:', '                    break;', '            }', '        }', 'using System;', 'namespace Conditional', '    class SwitchCase', '        {', '            char op;', '             ', '            switch(op)', '            {', ""                case '+':"", '                    break;', '                 ', ""                case '-':"", '                    break;', '                 ', ""                case '*':"", '                    break;', '                 ', ""                case '/':"", '                    break;', '                default:', '                    break;', '                     ', '            }', '        }']","['        public static void Main(string[] args)', '            Console.WriteLine(""Enter an alphabet"");', '            ch = Convert.ToChar(Console.ReadLine());', '            switch(Char.ToLower(ch))', '                    Console.WriteLine(""Vowel"");', '                    Console.WriteLine(""Vowel"");', '                    Console.WriteLine(""Vowel"");', '                    Console.WriteLine(""Vowel"");', '                    Console.WriteLine(""Vowel"");', '                    Console.WriteLine(""Not a vowel"");', '        public static void Main(string[] args)', '            Console.WriteLine(""Enter an alphabet"");', '            ch = Convert.ToChar(Console.ReadLine());', '            switch(Char.ToLower(ch))', '                    Console.WriteLine(""Vowel"");', '                    Console.WriteLine(""Not a vowel"");', '        public static void Main(string[] args)', '            double first, second, result;', '            Console.Write(""Enter first number: "");', '            first = Convert.ToDouble(Console.ReadLine());', '            Console.Write(""Enter second number: "");', '            second = Convert.ToDouble(Console.ReadLine());', '            Console.Write(""Enter operator (+, -, *, /): "");', '            op = (char)Console.Read();', '                    result = first + second;', '                    Console.WriteLine(""{0} + {1} = {2}"", first, second, result);', '                    result = first - second;', '                    Console.WriteLine(""{0} - {1} = {2}"", first, second, result);', '                    result = first * second;', '                    Console.WriteLine(""{0} * {1} = {2}"", first, second, result);', '                    result = first / second;', '                    Console.WriteLine(""{0} / {1} = {2}"", first, second, result);', '                    Console.WriteLine(""Invalid Operator"");']","['switch (variable/expression)', '{', '    case value1:', '        break;', '    case value2:', '        break;', '    ... ... ... ', '    ... ... ... ', '    default:', '}', 'Enter an alphabet', 'X', 'Not a vowel', 'Enter first number: -13.11', 'Enter second number: 2.41', 'Enter operator (+, -, *, /): *', '-13.11 * 2.41 = -31.5951']",[],"['Primitive data types: bool, char and integral type|||Enumerated Types (Enum)|||String Class|||Nullable types of above data types|||']"
11,['C# ternary (? :) Operator'],"['In this article, we will learn about C# ternary operator and how to use it to control the flow of program.']",[],[],"['Example 1: C# Ternary Operator', 'When to use ternary operator?']",[],[],"['The syntax of ternary operator is:', 'The ternary operator works as follows:', 'For example, we can replace the following code', 'Why is it called ternary operator?', 'This operator takes 3 operand, hence called ternary operator.', 'When we run the program, the output will be:', 'For example, we can replace the following if..else if code', 'with a single line of code']","['Instead of storing the return value in variable isEven, we can directly print the value returned by ternary operator as,', ""Ternary operator can be used to replace multi lines of code with a single line. However, we shouldn't overuse it."", ""Hence, it's better to only use ternary operator to replace simple if else statements.""]","[""Ternary operator are a substitute for if...else statement. So before you move any further in this tutorial, go through C# if...else statement (if you haven't)."", 'Since, 2 is even, the expression (number % 2 == 0) returns true. We can also use ternary operator to return numbers, strings and characters.', 'As we can see, the use of ternary operator may decrease the length of code but it makes us difficult to understand the logic of the code.']","['using System;', 'namespace Conditional', '\tclass Ternary', '\t\t\tint number = 2;', '\t\t\tbool isEven;', '\t\t\tConsole.WriteLine(isEven);']","['\t\tpublic static void Main(string[] args)', '\t\t\tisEven = (number % 2 == 0) ? true : false ;  ']","['Condition ? Expression1 : Expression2;', 'if (number % 2 == 0)', '{', '\tisEven = true;', '}', 'else', '{', '\tisEven = false;', '}', 'isEven = (number % 2 == 0) ? true : false ;', 'True', 'Console.WriteLine((number % 2 == 0) ? true : false);', 'if (a > b)', '{', '\tresult = ""a is greater than b"";', '}', 'else if (a < b)', '{', '\tresult = ""b is greater than a"";', '}', 'else', '{', '\tresult = ""a is equal to b"";', '}', 'result = a > b ? ""a is greater than b"" : a < b ? ""b is greater than a"" : ""a is equal to b"";']",[],"['If the expression stated by Condition is true, the result of Expression1 is returned by the ternary operator.|||If it is false, the result of Expression2 is returned.|||']"
12,['C# while and do...while loop'],"['In this article, we will learn about while and do...while loop in C#, how to use them and difference between them.']",[],[],"['C# while loop', 'C# do...while loop', 'Infinite while and do...while loop']","['How while loop works?', 'while loop Flowchart', 'Example 1: while Loop', 'Example 2: while loop to compute sum of first 5 natural numbers', 'How do...while loop works?', 'do...while loop Flowchart', 'Example 3: do...while loop', 'Infinite while loop', 'Infinite do...while loop']","['//cdn.programiz.com/sites/tutorial2program/files/while-loop-csharp.png', '//cdn.programiz.com/sites/tutorial2program/files/do-while-loop-csharp.png']","[""In this article, we'll learn to use while loops in C#."", 'When we run the program, the output will be:', 'Initially the value of i is 1.', 'When the program reaches the while loop statement,', 'When we run the program, the output will be:', 'This program computes the sum of first 5 natural numbers.', ""Let's see what happens in the given program on each iteration."", 'Initially, i = 1, sum = 0', 'So, the final value of sum will be 15.', 'The syntax for do...while loop is:', 'When we run the program, the output will be:', 'For example:']","['The while keyword is used to create while loop in C#. The syntax for while loop is:', 'This is why, the body of do...while loop will execute at least once irrespective to the test-expression.', 'As we can see, the above program prints the multiplication table of a number (5).', 'The infinite loop is useful when we need a loop to run as long as our program runs.']","['In programming, it is often desired to execute certain block of statements for a specified number of times. A possible solution will be to type those statements for the required number of times. However, the number of repetition may not be known in advance (during compile time) or maybe large enough (say 10000).', 'The best solution to such problem is loop. Loops are used in programming to repeatedly execute a certain block of statements until some condition is met.', 'The do and while keyword is used to create a do...while loop. It is similar to a while loop, however there is a major difference between them.', 'In while loop, the condition is checked before the body is executed. It is the exact opposite in do...while loop, i.e. condition is checked after the body is executed.', 'If the test expression in the while and do...while loop never evaluates to false, the body of loop will run forever. Such loops are called infinite loop.', 'For example, if your program is an animation, you will need to constantly run it until it is stopped. In such cases, an infinite loop is necessary to keep running the animation repeatedly.']","['using System;', 'namespace Loop', '\tclass WhileLoop', '\t\t\tint i=1;', '\t\t\twhile (i<=5)', '\t\t\t\ti++;', 'using System;', 'namespace Loop', '\tclass WhileLoop', '\t\t\tint i=1, sum=0;', '\t\t\twhile (i<=5)', '\t\t\t\tsum += i;', '\t\t\t\ti++;', 'using System;', 'namespace Loop', '\tclass DoWhileLoop', '\t\t\tint i = 1, n = 5, product;', '\t\t\t\tproduct = n * i;', '\t\t\t\ti++;', '\t\t\t} while (i <= 10);']","['\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""C# For Loop: Iteration {0}"", i);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""Sum = {0}"", sum);', '\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""{0} * {1} = {2}"", n, i, product);']","['while (test-expression)', '{', '}', 'C# For Loop: Iteration 1', 'C# For Loop: Iteration 2', 'C# For Loop: Iteration 3', 'C# For Loop: Iteration 4', 'C# For Loop: Iteration 5', 'Sum = 15', 'do', '{', '} while (test-expression);', '5 * 1 = 5', '5 * 2 = 10', '5 * 3 = 15', '5 * 4 = 20', '5 * 5 = 25', '5 * 6 = 30', '5 * 7 = 35', '5 * 8 = 40', '5 * 9 = 45', '5 * 10 = 50', 'while (true)', '{', '}', 'do', '{', '} while (true);']",['teration|||Value of i|||i<=5|||Value of sum&&&|||1|||true|||0+1 = 1&&&|||2|||true|||1+2 = 3&&&|||3|||true|||3+3 = 6&&&|||4|||true|||6+4 = 10&&&|||5|||true|||10+5 = 15&&&|||6|||false|||Loop terminates'],"['the test expression i <=5 is evaluated. Since i is 1 and 1 <= 5 is true, it executes the body of the while loop. Here, the line is printed on the screen with Iteration 1, and the value of i is increased by 1 to become 2.|||Now, the test expression (i <=5) is evaluated again. This time too, the expression returns true (2 <= 5), so the line is printed on the screen and the value of i is now incremented to 3..|||This goes and the while loop executes until i becomes 6. At this point, the test-expression will evaluate to false and hence the loop terminates.|||Initially the value of sum is initialized to 0.|||On each iteration, the value of sum is updated to sum+i and the value of i is incremented by 1.|||When the value of i reaches 6, the test expression i<=5 will return false and the loop terminates.|||Initially, the value of i is 1. The program, then enters the body of do..while loop without checking any condition (as opposed to while loop).|||Inside the body, product is calculated and printed on the screen. The value of i is then incremented to 2.|||After the execution of the loop’s body, the test expression i <= 10 is evaluated. In total, the do...while loop will run for 10 times.|||Finally, when the value of i is 11, the test-expression evaluates to false and hence terminates the loop.|||&&&C# while loop consists of a test-expression.|||If the test-expression is evaluated to true,|||statements inside the while loop are executed.|||after execution, the test-expression is evaluated again.||||||If the test-expression is evaluated to false, the while loop terminates.|||statements inside the while loop are executed.|||after execution, the test-expression is evaluated again.|||The body of do...while loop is executed at first.|||Then the test-expression is evaluated.|||If the test-expression is true, the body of loop is executed.|||When the test-expression is false, do...while loop terminates.|||']"
13,['C# for loop'],"['In this article, we will learn about for loop in C# and different ways to use them in a program.']",[],[],"['C# for loop', 'How for loop works?', 'for Loop Flowchart', 'Multiple expressions inside a for loop', 'For loop without initialization and iterator statements', 'Infinite for loop']","['Example 1: C# for Loop', 'Example 2: for loop to compute sum of first n natural numbers', 'Example 3: for loop with multiple initialization and iterator expressions', 'Example 4: for loop without initialization and iterator statement', 'Example 5: Infinite for loop']",['//cdn.programiz.com/sites/tutorial2program/files/for-loop-csharp.png'],"['In this article, we’ll look at for loop in C#.', 'When we run the program, the output will be:', 'In this program,', 'When the program runs,', 'When we run the program, the output will be:', ""Let's see what happens in the given program on each iteration."", 'Initially, i = 1, sum = 0 and n = 3', 'So, the final value of sum will be 15 when n = 5.', 'When we run the program, the output will be:', 'When we run the program, the output will be:']","['The for keyword is used to create for loop in C#. The syntax for for loop is:', 'In this program, we have declared and initialized two variables: i and j in the initialization statement.', 'Also, we have two expressions in the iterator part. That means both i and j are incremented by 1 on each iteration.', ""In such cases, for loop acts as a while loop. Let's see the example below."", ""In this example, we haven't used the initialization and iterator statement."", 'If the condition in a for loop is always true, for loop will run forever. This is called infinite for loop.', 'We can also create an infinite loop by replacing the condition with a blank. For example,']","['In programming, it is often desired to execute certain block of statements for a specified number of times. A possible solution will be to type those statements for the required number of times. However, the number of repetition may not be known in advance (during compile time) or maybe large enough (say 10000).', 'The best solution to such problem is loop. Loops are used in programming to repeatedly execute a certain block of statements until some condition is met.', 'Here, the value of sum and n are initialized to 0 and 5 respectively. The iteration variable i is initialized to 1 and incremented on each iteration.', ""Inside the for loop, value of sum is incremented by i i.e. sum = sum + i. The for loop continues until i is less than or equal to n (user's input)."", ""We can also use multiple expressions inside a for loop. It means we can have more than one initialization and/or iterator statements within a for loop. Let's see the example below."", 'The initialization, condition and the iterator statement are optional in a for loop. It means we can run a for loop without these statements as well.', 'The variable i is initialized above the for loop and its value is incremented inside the body of loop. This program is same as the one in Example 1.', ""Similarly, the condition is also an optional statement. However if we don't use test expression, the for loop won't test any condition and will run forever (infinite loop)."", 'Here, i is initialized to 1 and the condition is i>0. On each iteration we are incrementing the value of i by 1, so the condition will never be false. This will cause the loop to execute infinitely.']","['using System;', 'namespace Loop', '\tclass ForLoop', '\t\t\tfor (int i=1; i<=5; i++)', 'using System;', 'namespace Loop', '\tclass ForLoop', '\t\t\tint n = 5,sum = 0;', '\t\t\tfor (int i=1; i<=n; i++)', '\t\t\t\tsum += i;', 'using System;', 'namespace Loop', '\tclass ForLoop', '\t\t\t}         ', 'using System;', 'namespace Loop', '\tclass ForLoop', '\t\t\tint i = 1;', '\t\t\tfor ( ; i<=5; )', '\t\t\t\ti++;', 'using System;', 'namespace Loop', '\tclass ForLoop', '\t\t\tfor (int i=1 ; i>0; i++)']","['\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""C# For Loop: Iteration {0}"", i);', '\t\tpublic static void Main(string[] args)', '\t\t\tConsole.WriteLine(""Sum of first {0} natural numbers = {1}"", n, sum);', '\t\tpublic static void Main(string[] args)', '\t\t\tfor (int i=0, j=0; i+j<=5; i++, j++)', '\t\t\t\tConsole.WriteLine(""i = {0} and j = {1}"", i,j);', '\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""C# For Loop: Iteration {0}"", i);', '\t\tpublic static void Main(string[] args)', '\t\t\t\tConsole.WriteLine(""C# For Loop: Iteration {0}"", i);']","['for (initialization; condition; iterator)', '{', '}', 'C# For Loop: Iteration 1', 'C# For Loop: Iteration 2', 'C# For Loop: Iteration 3', 'C# For Loop: Iteration 4', 'C# For Loop: Iteration 5', 'Sum of first 5 natural numbers = 15', 'i = 0 and j = 0', 'i = 1 and j = 1', 'i = 2 and j = 2', 'C# For Loop: Iteration 1', 'C# For Loop: Iteration 2', 'C# For Loop: Iteration 3', 'C# For Loop: Iteration 4', 'C# For Loop: Iteration 5', 'for ( ; ; )', '{', '}', 'for (initialization ; ; iterator)', '{', '}']",['teration|||Value of i|||i<=5|||Value of sum&&&|||1|||true|||0+1 = 1&&&|||2|||true|||1+2 = 3&&&|||3|||true|||3+3 = 6&&&|||4|||true|||6+4 = 10&&&|||5|||true|||10+5 = 15&&&|||6|||false|||Loop terminates'],"['initialization statement is int i=1|||condition statement is i<=5|||iterator statement is i++|||First, the variable i is declared and initialized to 1.|||Then, the condition (i<=5) is evaluated.|||Since, the condition returns true, the program then executes the body of the for loop. It prints the given line with Iteration 1 (Iteration simply means repetition).|||Now, the iterator (i++) is evaluated. This increments the value of i to 2.|||The condition (i<=5) is evaluated again and at the end, the value of i is incremented by 1. The condition will evaluate to true for the first 5 times.|||When the value of i will be 6 and the condition will be false, hence the loop will terminate.|||&&&C# for loop has three statements: initialization, condition and iterator.|||The initialization statement is executed at first and only once. Here, the variable is usually declared and initialized.|||Then, the condition is evaluated. The condition is a boolean expression, i.e. it returns either true or false.|||If the condition is evaluated to true:|||The statements inside the for loop are executed.|||Then, the iterator statement is executed which usually changes the value of the initialized variable.|||Again the condition is evaluated.|||The process continues until the condition is evaluated to false.||||||If the condition is evaluated to false, the for loop terminates.|||The statements inside the for loop are executed.|||Then, the iterator statement is executed which usually changes the value of the initialized variable.|||Again the condition is evaluated.|||The process continues until the condition is evaluated to false.|||']"
14,[' C# break Statement '],"['In this tutorial, you will learn about the working C# break statement with the help of examples.']",[],[],"['Example: C# break statement with for loop', 'Example: C# break statement with while loop', 'Working of break statement in C#', 'break Statement with Nested Loop', 'break with foreach Loop', 'break with Switch Statement']",[],['//cdn.programiz.com/cdn/farfuture/Q82kNS-JvkgMIodDHAMrqfu_L4lMRMjE2iOIxF4qu-k/mtime:1624358610/sites/tutorial2program/files/charp-break-statement.png'],"['In C#, we use the break statement to terminate the loop.', 'Before we learn about break, make sure to learn about', 'Output', 'Output', 'Now, the while loop is terminated.', 'Output', 'Hence, the value of i = 2 is never printed.', 'Output', 'This immediately terminates the foreach loop.', 'Output', 'To learn more, visit C# switch statement.']","['In such cases, the break statement is used. The syntax of break statement is,', 'Now, the loop is terminated suddenly. So, we only get 1 and 2 as output.', 'Note: The break statement is used with decision-making statements like if..else.', 'In the above example, we have created a while loop that is supposed to run from i = 1 to 5.', 'However, when i is equal to 4, the break statement is encountered.', 'We can also use the break statement with nested loops. For example,', 'If you want to learn the working of nested loops, visit C# Nested Loops.', 'We can also use the break statement with foreach loops. For example,', 'However, the loop only prints 1 and 2. This is because when the number is equal to 3, the break statement is executed.', 'We can also use the break statement inside a switch case statement. For example,']","['As we know, loops iterate over a block of code until the test expression is false. However, sometimes we may need to terminate the loop immediately without checking the test expression.', 'In the above program, our for loop runs 4 times from i = 1 to 4. However, when i is equal to 3, the break statement is encountered.', 'In the above example, we have used the break statement inside the inner for loop. Here, the break statement is executed when i == 2.', 'Note: The break statement only terminates the inner for loop. This is because we have used the break statement inside the inner loop.', 'In the above example, we have created an array with values: 1, 2, 3, 4, 5. Here, we have used the foreach loop to print each element of the array.', 'Here, we have used the break statement inside each case. It helps us to terminate the switch statement when a matching case is found.']","['using System;', 'namespace CSharpBreak {', '  class Program {', '        ', '        if (i == 3) {', '          break; ', '        }', '            \t', '        Console.WriteLine(i);', '      \t ', '      Console.ReadLine();', 'if (i == 3) {', '  break;', 'using System;', 'namespace WhileBreak {', '  class Program {', '      int i = 1;', '      while (i <= 5) {', '        Console.WriteLine(i);', '         i++;', '           if (i == 4) {', '             break; ', '           }', '      Console.ReadLine();', 'if (i == 4) {', '  break;', 'using System;', 'namespace NestedBreak {', '  class Program {', '      int sum = 0;', '        if (i == 2) {', '          break;', '        }', '    Console.ReadLine();', 'using System;', 'namespace ForEachBreak {', '  class Program {', '         if(number==3) {', '           break; ', '           }', '        }', 'if (number == 3) {', '  break;', 'using System;', 'namespace ConsoleApp1 {', '  class Program {', ""      char ch='e';"", '       switch (ch) {', ""         case 'a':"", '           break;', ""         case 'e':"", '           break;', ""         case 'i':"", '           break;', ""         case 'o':"", '           break;', ""         case 'u':"", '           break;', '         default:', '       }']","['    static void Main(string[] args) {', '      for (int i = 1; i <= 4; ++i) {', '    static void Main(string[] args) {', '    static void Main(string[] args) {', '      for(int i = 1; i <= 3; i++) { //outer loop', '      for(int j = 1; j <= 3; j++) { ', '      Console.WriteLine(""i = "" + i + "" j = "" +j);', '    static void Main(string[] args) {', '      int[] num = { 1, 2, 3, 4, 5 };', '      foreach(int number in num) {', '      Console.WriteLine(number);', '    static void Main(string[] args) {', '           Console.WriteLine(""Vowel"");', '           Console.WriteLine(""Vowel"");', '           Console.WriteLine(""Vowel"");', '           Console.WriteLine(""Vowel"");', '           Console.WriteLine(""Vowel"");', '           Console.WriteLine(""Not a vowel"");']","['1', '2', '1', '2', '3', 'i = 1 j = 1', 'i = 1 j = 2', 'i = 1 j = 3', 'i = 3 j = 1', 'i = 3 j = 2', 'i = 3 j = 3', '1', '2', 'Vowel']",[],['for loop|||if...else|||while loop|||']
15,['C# continue Statement'],"['In this tutorial, you will learn about the working of C# continue statement with the help of examples.']",[],[],"['Example1: C# continue with for loop', 'Example: C# continue with while loop', 'continue with Nested Loop', 'C# continue with foreach Loop']",['Working of C# continue Statement'],['//cdn.programiz.com/cdn/farfuture/OGOZb8JvujgfVEgA2o2UYnCEBJGDW1-Q-MjrVePHwAw/mtime:1624520660/sites/tutorial2program/files/csharp-continue-statement.png'],"['The syntax for continue is:', 'Before we learn about continue, make sure to learn about', 'Output', 'Output', 'Hence, 3 is not printed on the screen.', 'We use the continue statement with nested as well. For example:', 'Output', 'Hence, the value of j = 2 is ignored.', 'Output', 'Hence, the print statement for this iteration is skipped.']","['In C#, we use the continue statement to skip a current iteration of a loop.', 'In the above example, we have used the for loop to print numbers from i = 1 to 5. However, the number 3 is not printed.', 'This is because when the value of i is 3, the continue statement is executed.', 'Note: The continue statement is usually used with the if...else statement.', 'If you want to learn the working of nested loops, visit C# Nested Loops.', 'We can also use the continue statement with foreach loops. For example,']","['When our program encounters the continue statement, the program control moves to the end of the loop and executes the test condition (update statement in case of for loop).', 'This skips the current iteration of loop and moves the program control to the update statement. Hence, the value 3 is not printed.', 'Here, we have used the continue statement inside the while loop. Similar to the earlier program, when the value of i is 3, the continue statement is executed.', 'In the above example, we have used the continue statement inside the inner for loop. Here, the continue statement is executed when j == 2.', 'In the above example, we have created an array with values: 1, 2, 3, 4, 5. Here, we have used the foreach loop to print each element of the array.']","['continue;', 'using System;', 'namespace ContinueLoop {', '  class Program {', '                ', '        if (i == 3) {', '          continue;', '        }', '        Console.WriteLine(i);', 'if (i == 3) {', '  continue;  ', 'using System;', 'namespace ContinueWhile {', '  class Program{', '      int i = 0;', '      while (i < 5) {', '        i++;', '        if (i == 3) {', '          continue;', '        }', '        Console.WriteLine(i);', 'using System;', 'namespace ContinueNested {', '    class Program {', '      int sum = 0;', '        if (j == 2) {', '          continue;', '        }', 'using System;', 'namespace ContinueForeach {', '  class Program {', '        if(number==3) {', '          continue; ', '         }', 'if (number == 3) {', '  continue;']","['    static void Main(string[] args){', '      for (int i = 1; i <= 5; ++i{', '    static void Main(string[] args) {', '       static void Main(string[] args) {', '      for(int i = 1; i <= 3; i++) { ', '      for(int j = 1; j <= 3; j++) { ', '      Console.WriteLine(""i = "" + i + "" j = "" +j);', '    static void Main(string[] args) {', '      int[] num = { 1, 2, 3, 4, 5 };', '      foreach(int number in num) {', '        Console.WriteLine(number);']","['1', '2', '4', '5', '1', '2', '4', '5', 'i = 1 j = 1', 'i = 1 j = 3', 'i = 2 j = 1', 'i = 2 j = 3', 'i = 3 j = 1', 'i = 3 j = 3', '1', '2', '4', '5 ']",[],['for loop|||while loop|||if...else|||']
16,['C# Arrays'],"['In this tutorial, we will learn about C# arrays. We will learn to create, initialize, and access array with the help of examples.']",[],[],"['1. C# Array Declaration', '2. Array initialization in C#', '3. Access Array Elements', '4. Change Array Elements', '5. Iterating C# Array using Loops', '6. C# Array Operations using System.Linq']","['Example: C# Array', 'Example: Using for loop', 'Example: Using foreach loop', 'Example: Find Minimum and Maximum Element', 'Example: Find the Average of an Array']","['//cdn.programiz.com/cdn/farfuture/CAXqbzzXtR_sBYJh2JXTqI61jGw5LH4Vkye3BRprt2s/mtime:1624947460/sites/tutorial2program/files/csharp-array-intro.png', '//cdn.programiz.com/cdn/farfuture/qBq1YOgnXwheXjupxURkf9rYl4e9GuEDiVRYyPWSSZo/mtime:1624947466/sites/tutorial2program/files/initialize-array-during-declaration-csharp.png']","['An array is a collection of similar types of data. For example,', 'In C#, here is how we can declare an array.', 'Here,', ""Let's see an example,"", 'But how many elements can it store?', 'Note:', 'Here,', 'Output', 'Output', 'Output', 'Output', 'Output', 'In the above example,', 'Output', 'In the above example, we have used', 'We then divide the sum by count to get the average.']","['Suppose we need to record the age of 5 students. Instead of creating 5 separate variables, we can simply create an array:', 'Here, we have created an array named age. It can store elements of int type.', 'To define the number of elements that an array can hold, we have to allocate memory for the array in C#. For example,', 'Here, new int[5] represents that the array can store 5 elements. We can also say the size/length of the array is 5.', 'Note: We can also declare and allocate the memory of an array in a single line. For example,', 'In C#, we can initialize an array during the declaration. For example,', 'Here, we have created an array named numbers and initialized it with values 1, 2, 3, 4, and 5 inside the curly braces.', 'We can access the elements in the array using the index of the array. For example,', 'In the above example, the initial value at index 0 is 1. Notice the line,', 'Here, we are assigning a new value of 11 to the index 0. Now, the value at index 0 is changed from 1 to 11.', 'In C#, we can use loops to iterate through each element of an array. For example,', 'In the above example, we have used a for loop to iterate through the elements of the array, numbers. Notice the line,', 'Here, the Length property of the array gives the size of the array.', 'We can also use a foreach loop to iterate through the elements of an array. For example,', 'Here, we have also used the numbers.Average() method of the System.Linq namespace to get the average directly.', 'Note: It is compulsory to use the System.Linq namespace while using Min(), Max(), Sum(), Count(), and Average() methods.']","['Note that we have not provided the size of the array. In this case, the C# automatically specifies the size by counting the number of elements in the array (i.e. 5).', 'In an array, we use an index number to determine the position of each array element. We can use the index number to initialize an array in C#. For example,', 'In the above example, we have created an array named numbers with elements 1, 2, 3. Here, we are using the index number to access elements of the array.', 'We can also change the elements of an array. To change the element, we simply assign a new value to that particular index. For example,', 'In C#, we have the System.Linq namespace that provides different methods to perform various operations in an array. For example,']","['datatype[] arrayName;', 'int[] age;', 'int[] age;', 'age = new int[5];', 'int[] age = new int[5];', 'int[] age = new int[5];', 'age[0] = 12;', 'age[1] = 4;', 'age[2] = 5;', 'array[2];', 'array[4];', 'using System;', 'namespace AccessArray {', '  class Program  {', '      Console.ReadLine();', 'using System;', 'namespace ChangeArray {', '  class Program {', '      numbers[0] = 11;', '      Console.ReadLine();', 'numbers[0] = 11;', 'using System;', 'namespace AccessArrayFor {', '  class Program {', '      Console.ReadLine();', 'numbers.Length', 'using System;', 'namespace AccessArrayForeach {', '  class Program {', '      Console.ReadLine();', 'using System;', 'using System.Linq;', 'namespace ArrayMinMax {', '  class Program  {', '      Console.ReadLine();', 'using System;', 'using System.Linq;', 'namespace ArrayFunction {', '  class Program  {', '      Console.ReadLine();', 'float average = sum / count;']","['int [] numbers = {1, 2, 3, 4, 5};', '    static void Main(string[] args) {', '      int[] numbers = {1, 2, 3};', '      Console.WriteLine(""Element in first index : "" + numbers[0]);', '      Console.WriteLine(""Element in second index : "" + numbers[1]);', '      Console.WriteLine(""Element in third index : "" + numbers[2]);', '    static void Main(string[] args) {', '      int[] numbers = {1, 2, 3};', '      Console.WriteLine(""Old Value at index 0: "" + numbers[0]);', '      Console.WriteLine(""New Value at index 0: "" + numbers[0]);', '    static void Main(string[] args) {', '      int[] numbers = { 1, 2, 3};', '      for(int i=0; i < numbers.Length; i++) {', '        Console.WriteLine(""Element in index "" + i + "": "" + numbers[i]);', '    static void Main(string[] args) {', '      int[] numbers = {1, 2, 3};', '      Console.WriteLine(""Array Elements: "");', '      foreach(int num in numbers) {', '    static void Main(string[] args) {', '      int[] numbers = {51, 1, 3, 4, 98};', '      Console.WriteLine(""Smallest  Element: "" + numbers.Min());  ', '      Console.WriteLine(""Largest Element: "" + numbers.Max());  ', '    static void Main(string[] args) {', '      int[] numbers = {30, 31, 94, 86, 55};', '      float sum = numbers.Sum();', '      int count = numbers.Count();', '      float average = sum/count;', '      Console.WriteLine(""Average : "" + average);', '      Console.WriteLine(""Average using Average() : "" + numbers.Average());']","['Element in first index : 1', 'Element in second index : 2', 'Element in third index : 3', 'Old Value at index 0: 1', 'New Value at index 0: 11', 'Element in index 0: 1', 'Element in index 1: 2', 'Element in index 2: 3', 'Array Elements:', '1', '2', '3', 'Smallest Element: 1', 'Largest Element: 98', 'Average : 59.2', 'Average using Average() : 59.2']",[],"['dataType - data type like int, string, char, etc|||arrayName - it is an identifier|||An array index always starts at 0. That is, the first element of an array is at index 0.|||If the size of an array is 5, the index of the last element will be at 4 (5 - 1).|||array[2] - access the 3rd element|||array[4] - access the 5th element|||numbers[0] - access first element, 1|||numbers[1] - access second element, 2|||numbers[3] - access third element, 3|||numbers.Min() - returns the smallest number in an array, 1|||numbers.Max() - returns the largest number in an array, 98|||numbers.Sum() to get the sum of all the elements of the array|||numbers.Count() to get the total number of element present inside the array|||']"
17,['C# Multidimensional Array'],"['In this tutorial, we will learn about the multidimensional array in C# using the example of two-dimensional array.']",[],[],"['Two-dimensional array in C#', '3. Access Elements from 2D Array', 'Example: C# 2D Array', 'Change Array Elements', 'Iterating C# Array using Loop']","['1. Two-Dimensional Array Declaration', '2. Two-Dimensional Array initialization']","['//cdn.programiz.com/cdn/farfuture/TfyzgyAQehhTU6gX3i1mOIw1Srn-f2loGR2GfnzsSXU/mtime:1625568043/sites/tutorial2program/files/csharp-array-as-table.png', '//cdn.programiz.com/cdn/farfuture/YCAmEweRG3xPcYC5I1ne2IUzaEC1BsZSWk82WAp9hes/mtime:1625568034/sites/tutorial2program/files/csharp-2d-array-index.png']","['Here, rows {1, 2, 3} and {3, 4, 5} are elements of a 2D array.', ""Here's how we declare a 2D array in C#."", 'So, all together the array can store 6 elements (2 * 3).', 'Output', 'Output', 'Output', 'Here, [ , , ] (2 commas) denotes the 3D array.']","['Before we learn about the multidimensional arrays, make sure to know about the single-dimensional array in C#.', 'In a multidimensional array, each element of the array is also an array. For example,', 'Here, x is a two-dimensional array with 2 elements. And, each element is also an array with 3 elements.', 'Note: The single comma [ , ] represents the array is 2 dimensional.', 'In C#, we can initialize an array during the declaration. For example,', 'Here, x is a 2D array with two elements {1, 2, 3} and {3, 4, 5}. We can see that each element of the array is also an array.', 'We can also specify the number of rows and columns during the initialization. For example,', 'We use the index number to access elements of a 2D array. For example,', 'In the above example, we have created a 2D array named numbers with rows {2, 3} and {4, 5}.', 'Here, we are using the index numbers to access elements of the 2D array.', 'In the above example, the initial value at index [0, 0] is 2. Notice the line,', 'Here, we are assigning a new value 222 at index [0, 0]. Now, the value at index [0, 0] is changed from 2 to 222.', 'In the above example, we have used a nested for loop to iterate through the elements of a 2D array. Here,']","['Here, x is a multidimensional array which has two elements: {1, 2, 3} and {3, 4, 5}. And, each element of the array is also an array with 3 elements.', 'A two-dimensional array consists of single-dimensional arrays as its elements. It can be represented as a table with a specific number of rows and columns.', 'We can also change the elements of a two-dimensional array. To change the element, we simply assign a new value to that particular index. For example,', 'Note: We can also create a 3D array. Technically, a 3D array is an array that has multiple two-dimensional arrays as its elements. For example,']","['int[ , ] x = new int [2, 3];', 'x[0, 0];  // returns 1', 'x[1, 2];  // returns 5', 'x[0, 2];  // returns 3', 'using System;', 'namespace MultiDArray {', '  class Program {', '           ', 'using System;', 'namespace MultiDArray {', '  class Program {', '    numbers[0, 0] = 222;', 'numbers[0, 0] = 222;', 'using System;', 'namespace MultiDArray {', '  class Program  {', '        }', '        Console.WriteLine(); ', '      }  ']","['int[ , ] x = { { 1, 2 ,3}, { 3, 4, 5 } };', 'int[ , ] x = { { 1, 2 ,3}, { 3, 4, 5 } };', 'int [ , ] x = new int[2, 3]{ {1, 2, 3}, {3, 4, 5} };', 'int[ , ] x = { { 1, 2 ,3}, { 3, 4, 5 } };', '    static void Main(string[] args) {', '       int[ , ] numbers = {{2, 3}, {4, 5}};', '       Console.WriteLine(""Element at index [0, 0] : ""+numbers[0, 0]);', '       Console.WriteLine(""Element at index [1, 0] : ""+numbers[1, 0]);', '    static void Main(string[] args) {', '    int[ , ] numbers = {{2, 3}, {4, 5}};', '    Console.WriteLine(""Old element at index [0, 0] : ""+numbers[0, 0]);', '    Console.WriteLine(""New element at index [0, 0] : ""+numbers[0, 0]);', '    static void Main(string[] args)  {', '      int[ , ] numbers = { {2, 3, 9}, {4, 5, 9} };', '      for(int i = 0; i < numbers.GetLength(0); i++)  { ', '        Console.Write(""Row ""+ i+"": "");', '        for(int j = 0; j < numbers.GetLength(1); j++)  { ', '          Console.Write(numbers[i, j]+"" "");', 'int[ , , ] numbers = { { { 1, 3, 5 }, { 2, 4, 6 } },', '                                 { { 2, 4, 9 }, { 5, 7, 11 } } };']","['Element at index [0, 0] : 2', 'Element at index [1, 0] : 4', 'Old element at index [0, 0] : 2', 'New element at index [0, 0] : 222', 'Row 0: 2 3 9', 'Row 1: 4 5 9']",[],"['numbers[0, 0] - access the first element from the first row (2)|||numbers[1, 0] - access the first element from the second row (4)|||numbers.GetLength(0) - gives the number of rows in a 2D array|||numbers.GetLength(1) - gives the number of elements in the row|||']"
18,['C# Jagged Array'],"['In this tutorial, we will learn about the C# jagged array. We will learn to declare, initialize, and access the jagged array with the help of examples.']",[],[],"['C# Jagged Array Declaration', 'Initializing Jagged Array', 'Accessing elements of a jagged array', 'Example: C# Jagged Array', 'Iterating through a jagged array', 'Jagged Array with Multidimensional Array']",[],[],"['Before you learn about jagged array, make sure to know about', ""Here's a syntax to declare a jagged array in C#."", ""Let's see an example,"", 'Here, ', '1. Using the index number', 'Here,', '2. Initialize without setting size of array elements', '3. Initialize while declaring Jagged Array', 'Output', 'Here, inside a jagged array,', 'Output', '1. Outer for loop', '2. Inner for loop', ""Let's see an example,"", 'Output', 'In the above example, notice the code,', 'Here,']","['Since we know each element of a jagged array is also an array, we can set the size of the individual array. For example,', 'There are different ways to initialize a jagged array. For example,', 'Once we declare a jagged array, we can use the index number to initialize it. For example,', 'We can access the elements of the jagged array using the index number. For example,', 'In C#, we can use loops to iterate through each element of the jagged array. For example,', 'In the above example, we have used a nested for loop to iterate through the jagged array. Here,', 'In C#, we can also use multidimensional arrays as Jagged Array Elements. For example,', 'Here, each element of the jagged array is a multidimensional array:']","['In C#, a jagged array consists of multiple arrays as its element. However, unlike multidimensional arrays, each array inside a jagged array can be of different sizes.']","['jaggedArray[0] = new int[3];', 'jaggedArray[1] = new int[2];', 'jaggedArray[0][0] = 1;', 'jaggedArray[0][1] = 3;', 'jaggedArray[0][2] = 5;', 'jaggedArray[1][0] = 2;', 'jaggedArray[1][1] = 4;', 'int[ ][ ] jaggedArray = {', '    new int[ ] {10, 20, 30},', '    new int[ ] {11, 22},', '    new int[ ] {88, 99}', 'jaggedArray[1][0];', 'jaggedArray[1][1];', 'jaggedArray[0][1];', 'using System;', 'namespace JaggedArray {', '  class Program {', '     int[ ][ ] jaggedArray = {', '         new int[] {1, 3, 5},', '         new int[] {2, 4},', '      };', '     Console.ReadLine();', '    }    ', 'using System;', 'namespace JaggedArray {', '  class Program {', '      jaggedArray[0][0] = 1;', '      jaggedArray[0][1] = 3;', '      jaggedArray[0][2] = 5;', '      jaggedArray[1][0] = 2;', '      jaggedArray[1][1] = 2;', '      \t ', '         }', '      Console.WriteLine();', '      Console.ReadLine();', 'using System;', 'namespace JaggedArray  {', '  class Program {', '      };', '      Console.ReadLine();', '    }    ', 'jaggedArray[0][0, 1]']","['dataType[ ][ ] nameOfArray = new dataType[rows][ ];', 'int[ ][ ] jaggedArray = new int[2][ ];', 'int[ ][ ] jaggedArray = new int[2] [ ];', 'jaggedArray[0] = new int[] {1, 3, 5};', 'jaggedArray[1] = new int[] {2, 4};', '    static void Main(string[] args) {', '     Console.WriteLine(""jaggedArray[1][0]: "" + jaggedArray[1][0]);', '     Console.WriteLine(""jaggedArray[1][1]: "" + jaggedArray[1][1]);', '     Console.WriteLine(""jaggedArray[0][2]: "" + jaggedArray[0][2]);', '    static void Main(string[] args) {', '      int[][] jaggedArray = new int[2][];', '      jaggedArray[0] = new int[3];', '      jaggedArray[1] = new int[2];', '      for (int i = 0; i < jaggedArray.Length; i++) {', '        Console.Write(""Element ""+ i +"": "");', '        for (int j = 0; j < jaggedArray[i].Length; j++) {', '          Console.Write(jaggedArray[i][j] + "" "");', 'int[ ][ , ] jaggedArrayTwoD = new int[2][ , ] {', '    \tnew int[,] { {1, 8}, {6, 7} },', '    \tnew int[,] { {0, 3}, {5, 6}, {9, 10} }', '    static void Main(string[] args)  {', '      int[][,] jaggedArray = new int[3][ , ]  {', '          new int[ , ] { {1, 8}, {6, 7} },', '          new int[ , ] { {0, 3}, {5, 6}, {9, 10} },', '          new int[ , ] { {11, 23}, {100, 88}, {0, 10} }', '      Console.WriteLine(jaggedArray[0][0, 1]);', '      Console.WriteLine(jaggedArray[1][2, 1]);', '      Console.WriteLine(jaggedArray[2][1, 0]);']","['jaggedArray[1][0]: 2', 'jaggedArray[1][1]: 4', 'jaggedArray[0][2]: 5', 'Element 0: 1 3 5', 'Element 1: 2 2', '8', '10', '100']",[],"['C# Arrays|||C# Multidimensional Arrays|||int - data type of the array|||[][] - represents jagged array|||jaggedArray - name of the jagged array|||[2][] - represents the number of elements (arrays) inside the jagged array|||index at the first square bracket represents the index of the jagged array element|||index at the second square bracket represents the index of the element inside each element of the jagged array|||jaggedArray[1][0] - first element of the second array|||jaggedArray[1][1] - second element of the second array |||jaggedArray[0][2] - third element of the first array|||to access the elements (arrays) of the jagged array|||jaggedArray.Length - gives the size of jagged array|||to access the elements of the individual array inside the jagged array.|||jaggedArray[i].Length - gives the size of elements of the ith array inside the jagged array|||new int[,] { {1, 8}, {6, 7} } - 2D array with 2 elements|||new int[ , ] { {0, 3}, {5, 6}, {9, 10} } - 2D array with 3 elements|||[0] - represents the first element (2D array) of the jagged array|||[0, 1] - represents the second element of the first array inside the 2D array|||']"
19,['C# foreach loop'],"['In this article, we will learn about foreach loops (an alternative to for loop) and how to use them with arrays and collections.']",[],[],"['Syntax of foreach loop', 'How foreach loop works?', 'Example 1: Printing array using for loop', 'Example 2: Printing array using foreach loop', 'Example 3: Traversing an array of gender using foreach loop', 'Example 4: foreach loop with List (Collection)']",[],['//cdn.programiz.com/sites/tutorial2program/files/csharp-foreach-flowchart.jpg'],"['Before moving forward with foreach loop, visit:', 'Here iterable-item can be an array or a class of collection.', 'The same task can be done using the foreach loop.', 'When we run the both program, the output will be:', 'This program computes the number of male and female candidates.', 'When we run the program, the output will be:', 'This program computes the sum of elements in a List.', 'When we run the program, the output will be:']","['The number of times the foreach loop will execute is equal to the number of elements in the array or collection.', 'Here is an example of iterating through an array using the for loop:', 'Hence, foreach loop is preferred over for loop when working with arrays and collections.']","['C# provides an easy to use and more readable alternative to for loop, the foreach loop when working with arrays and collections to iterate through the items of arrays/collections. The foreach loop iterates through each item, hence called foreach loop.', 'The in keyword used along with foreach loop is used to iterate over the iterable-item. The in keyword selects an item from the iterable-item on each iteration and store it in the variable element.', 'On first iteration, the first item of iterable-item is stored in element. On second iteration, the second element is selected and so on.', 'In the above program, the foreach loop iterates over the array, myArray. On first iteration, the first element i.e. myArray[0] is selected and stored in ch.', 'Similarly on the last iteration, the last element i.e. myArray[4] is selected. Inside the body of loop, the value of ch is printed.', 'When we look at both programs, the program that uses foreach loop is more readable and easy to understand. This is because of its simple and expressive syntax.', 'In this program, foreach loop is used to traverse through a collection. Traversing a collection is similar to traversing through an array.', 'The first element of collection is selected on the first iteration, second element on second iteration and so on till the last element.']","['using System;', 'namespace Loop', '    class ForLoop', '        {', '            {', '            }', '        }', 'using System;', 'namespace Loop', '    class ForEachLoop', '        {', '            {', '            }', '        }', 'using System;', 'namespace Loop', '    class ForEachLoop', '        {', '            {', ""                if (g == 'm')"", '            }', '        }', 'using System;', 'namespace Loop {', '  class ForEachLoop {', '      int sum = 0;', '        sum += number;', '      Console.ReadLine();']","['        public static void Main(string[] args)', ""            char[] myArray = {'H','e','l','l','o'};"", '            for(int i = 0; i < myArray.Length; i++)', '                Console.WriteLine(myArray[i]);', '        public static void Main(string[] args)', ""            char[] myArray = {'H','e','l','l','o'};"", '            foreach(char ch in myArray)', '                Console.WriteLine(ch);', '        public static void Main(string[] args)', ""            char[] gender = {'m','f','m','m','m','f','f','m','m','f'};"", '            int male = 0, female = 0;', '            foreach (char g in gender)  ', ""                else if (g =='f')"", '                        female++;', '            Console.WriteLine(""Number of male = {0}"", male);', '            Console.WriteLine(""Number of female = {0}"", female);', 'using System.Collections.Generic;', '    public static void Main(string[] args) {', '      var numbers = new List<int>() { 5, -8, 3, 14, 9, 17, 0, 4 };', '      foreach (int number in numbers) {', '      Console.WriteLine(""Sum = {0}"", sum);']","['foreach (element in iterable-item)', '{', '}', 'H', 'e', 'l', 'l', 'o', 'Number of male = 6', 'Number of female = 4', 'Sum = 44']",[],['C# for loop|||C# arrays|||C# collections|||']
20,['C# Class and Object'],"['In this tutorial, you will learn about the concept of classes and objects in C# with the help of examples.']",[],[],"['C# Class', 'C# Objects', 'Access Class Members using Object', 'Creating Multiple Objects of a Class', 'Creating objects in a different class', 'Why Objects and Classes?']",[],[],"['Create a class in C#', 'We use the class keyword to create an object. For example,', ""Let's see an example,"", 'In the above example,', 'Creating an Object of a class', ""In C#, here's how we create an object of the class."", 'Output', 'and the bark() method', 'We can create multiple objects from the same class. For example,', 'Output', 'For example,', 'Output']","['To work with objects, we need to perform the following activities:', 'Before we learn about objects, we need to understand the working of classes. Class is the blueprint for the object.', 'Like many houses can be made from the sketch, we can create many objects from a class.', 'Here, we have created a class named ClassName. A class can contain', 'Note: In C#, fields and methods inside a class are called members of a class.', 'An object is an instance of a class. Suppose, we have a class Dog. Bulldog, German Shepherd, Pug are objects of the class.', 'Now, the bullDog object can access the fields and methods of the Dog class.', 'We use the name of objects along with the . operator to access members of a class. For example,', 'In the above example, we have created two objects: sheeran and taylor from the Employee class.', 'Here, you can see both the objects have their own version of the department field with different values.', 'In C#, we can also create an object of a class in another class. For example,', 'Objects and classes help us to divide a large project into smaller sub-problems.', 'Now, instead of thinking of projects in terms of variables and methods, we can think of them in terms of objects.', 'This helps to manage complexity as well as make our code reusable.']","['We can think of the class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. We can build a house based on these descriptions. House is the object.', 'Here, we have used the new keyword to create an object of the class. And, obj is the name of the object. Now, let us create an object from the Dog class.', 'In the above program, we have created an object named bullDog from the Dog class. Notice that we have used the object name and the . (dot operator) to access the breed field', 'In the above example, we have two classes: Employee and EmployeeDrive. Here, we are creating an object e1 of the Employee class in the EmployeeDrive class.', 'We have used the e1 object to access the members of the Employee class from EmployeeDrive. This is possible because the members in the Employee class are public.', 'Here, public is an access specifier that means the class members are accessible from any other classes. To learn more, visit C# Access Modifiers.', 'Suppose you want to create a game that has hundreds of enemies and each of them has fields like health, ammo, and methods like shoot() and run().', 'With OOP we can create a single Enemy class with required fields and methods. Then, we can create multiple enemy objects from it.', 'Each of the enemy objects will have its own version of health and ammo fields. And, they can use the common shoot() and run() methods.']","['class ClassName {', 'class Dog {', '  string breed;', '  public void bark() {', 'Dog bullDog = new Dog();', 'using System;', 'namespace ClassObject {', '  class Dog {', '    string breed;', '    public void bark() {', '      Dog bullDog = new Dog();', '      bullDog.bark();   ', '      Console.ReadLine();', 'bullDog.breed = ""Bull Dog"";', 'bullDog.bark();', 'using System;', 'namespace ClassObject {', '  class Employee {', '    string department;', '      Console.ReadLine();', 'using System;', 'namespace ClassObject {', '  class Employee {', '    public string name;', '  class EmployeeDrive {', '      e1.name=""Gloria"";', '      e1.work(""Coding""); ', '      Console.ReadLine();']","['ClassName obj = new ClassName();', '      Console.WriteLine(""Bark Bark !!"");', '    static void Main(string[] args) {', '      bullDog.breed = ""Bull Dog"";', '      Console.WriteLine(bullDog.breed);', '    static void Main(string[] args) {', '      Employee sheeran = new Employee();', '      sheeran.department = ""Development"";', '      Console.WriteLine(""Sheeran: "" + sheeran.department);', '      Employee taylor = new Employee();', '      taylor.department = ""Content Writing"";', '      Console.WriteLine(""Taylor: "" + taylor.department);', '    public void work(string work) {', '      Console.WriteLine(""Work: "" + work);', '    static void Main(string[] args) {', '      Employee e1= new Employee();', '      Console.WriteLine(""Employee 1"");', '      Console.WriteLine(""Name: "" + e1.name);']","['Bull Dog', 'Bark Bark !!', 'Sheeran: Development', 'Taylor: Content Writing', 'Employee 1', 'Name: Gloria', 'Work: Coding']",[],['create a class|||create objects from the class|||fields - variables to store data|||methods - functions to perform specific tasks|||Dog - class name|||breed - field|||bark() - method|||']
21,['C# Method '],"['In this tutorial, we will learn about the C# method with the help of examples.']",[],[],"['Declaring a Method in C#', 'Calling a Method in C#', 'C# Method Return Type', 'C# Methods Parameters', 'Built-in methods', 'Method Overloading in C#']","['Example: C# Method', 'Example: Method Return Type', 'Example 1: C# Methods with Parameters', 'C# Methods with Single Parameter', 'Example: Math.Sqrt() Method']","['//cdn.programiz.com/cdn/farfuture/JbNoJ8Uca_H8SdjIAni1NR8fNdliU5F1FVdaeud-8JI/mtime:1628161409/sites/tutorial2program/files/csharp-methods.png', '//cdn.programiz.com/cdn/farfuture/iV_w6qNdBnkRgUaBCHUiw2GGNYDxMgoOh9tuBLht7yI/mtime:1628161419/sites/tutorial2program/files/csharp-methods-parameters.png']","[""Here's the syntax to declare a method in C#."", 'Here,', 'If the method does not return a value, its return type is void.', ""Let's see an example,"", ""Here's how we can call the display() method."", 'Output', 'Notice the line,', 'Here, we are using the object to call the display() method.', 'Output', 'Here, We have passed 2 arguments (100, 100).', 'Output', 'Output', 'Here, the work() method has a single parameter work.', 'Output', 'In the above program, we have used', 'Output', 'To know more visit C# Method Overloading']","['Dividing a complex problem into smaller chunks makes your program easy to understand and reusable.', 'Here, the name of the method is display(). And, the return type is void.', 'In the above example, we have declared a method named display(). Now, to use the method, we need to call it.', 'In the above example, we have created a method named display(). We have created an object p1 of the Program class.', 'If the method returns any value, we use the return statement to return any value. For example,', 'In our code, the return type is int. Hence, the data type of sum should be of int as well.', 'In the above example, we have a method named addNumbers() with the int return type.', 'In C#, we can also create a method that accepts some value. These values are called method parameters. For example,', 'Here, a and b are two parameters passed to the addNumber() function.', 'In C#, we can also create a method with a single parameter. For example,', 'So far we have defined our own methods. These are called user-defined methods.', 'to compute the square root of 9. Here, the Sqrt() is a built-in method that is defined inside the Math class.', 'In C#, we can create two or more methods with the same name. It is known as method overloading. For example,', 'In the above example, we have overloaded the display() method. It is possible because:']","['A method is a block of code that performs a specific task. Suppose you need to create a program to create a circle and color it. You can create two methods to solve this problem:', ""A C# method may or may not return a value. If the method doesn't return any value, we use the void keyword (shown in the above example)."", 'Here, we are returning the variable sum. One thing you should always remember is that the return type of the method and the returned value should be of the same type.', 'Here, we are storing the returned value from the addNumbers() to sum. We have used int data type to store the value because the method returns an int value.', 'Note: As the method is static we do not create a class object before calling the method. The static method belongs to the class rather than the object of a class.', 'If a method is created with parameters, we need to pass the corresponding values(arguments) while calling the method. For example,', 'However, in C#, there are various methods that can be directly used in our program. They are called built-in methods. For example,', 'We can simply use built-in methods in our program without writing the method definition. To learn more, visit C# built-in methods.']","['returnType methodName() {', 'void display() {', 'display();', 'using System;', 'namespace Method {', '  class Program {  ', '    public void display() {', '      p1.display();   ', '      Console.ReadLine();', 'p1.display();', 'int addNumbers() {', '  return sum;', 'using System;', 'namespace Method {', '  class Program {   ', '    static int addNumbers() {', '      int sum = 5 + 14;', '      return sum;', '      int sum = addNumbers();', '      Console.WriteLine(sum);', '      Console.ReadLine();', 'int sum = addNumbers();', 'int addNumber(int a, int b) {', 'addNumber(100, 100);', 'using System;', 'namespace Method {', '  class Program {   ', '      int sum = a + b;', '      return sum;', '      Console.ReadLine();', 'using System;', 'namespace Method {', '  class Program {   ', '    string work(string work) {', '     return work;', '      Console.ReadLine();', 'using System;', 'namespace Method {', '  class Program {   ', '      double a = Math.Sqrt(9);', 'double a = Math.Sqrt(9);', 'using System;', 'namespace MethodOverload {', '  class Program {  ', '    void display(int a) {', '      p1.display(100);', '      p1.display(100, 200);', '      Console.ReadLine();']","['      Console.WriteLine(""Hello World"");   ', '    static void Main(string[] args) {', '      Program p1 = new Program();', '    static void Main(string[] args) {', '    int addNumber (int a, int b) {', '    static void Main(string[] args) {', '      Program p1 = new Program();', '      int sum = p1.addNumber(100,100);   ', '      Console.WriteLine(""Sum: "" + sum);', '    static void Main(string[] args) {', '      Program p1 = new Program();', '      string work = p1.work(""Cleaning""); ;   ', '      Console.WriteLine(""Work: "" + work);', '    static void Main(string[] args) {', '      Console.WriteLine(""Square root of 9: "" + a);', '      Console.WriteLine(""Arguments: "" + a);', '    void display(int a, int b) {', '      Console.WriteLine(""Arguments: "" + a + "" and "" + b);', '    static void Main(string[] args) {', '      Program p1 = new Program();']","['Hello World', '19', 'Sum: 200', 'Work: Cleaning', 'Square root of 9: 3', 'Arguments: 100', 'Arguments: 100 and 200']",[],"['a method to draw the circle|||a method to color the circle|||returnType - It specifies what type of value a method returns. For example, if a method has an int return type then it returns an int value.|||methodName - It is an identifier that is used to refer to the particular method in a program.|||method body - It includes the programming statements that are used to perform some tasks. The method body is enclosed inside the curly braces { }|||Sqrt() - computes the square root of a number|||ToUpper() - converts a string to uppercase|||one method has one parameter|||another has two parameter|||']"
22,['C# Access Modifiers'],"['In this tutorial, we will learn about the public, private, protected, and internal access modifiers in C# with the help of examples.']",[],[],"['1. public access modifier', '2. private access modifier', '3. protected access modifier', '4. internal access modifier', '5. protected internal access modifier', '6. private protected access modifier']","['Example: internal within the same Assembly', 'Example: internal in different Assembly']",[],"['Here,', 'Types of Access Modifiers', 'In C#, there are 4 basic types of access modifiers.', 'Output', 'Here, the code will generate the following error.', 'Output', 'Output', ""Let's create one assembly first."", ""Now, let's create another assembly."", 'allows us to use the code from Assembly1 to Assembly2.', 'This is because name is an internal field present in Assembly1.', 'Output', 'The above code is in Assembly1.', 'Output', 'The above code is in Assembly2.', 'Output', 'The above code is in Assembly1', 'The above code is in Assembly2']","['When we declare a type or type member public, it can be accessed from anywhere. For example,', 'In the above example, we have created a class named Student with a field name and a method print().', 'Since the field and method are public, we are able to access them from the Program class.', 'In the above example, we have created a class named Student with a field name and a method print().', 'When we declare a type member as protected, it can only be accessed from the same class and its derived classes. For example,', ""Now, let's try to access the protected member from a derived class."", 'Since the protected member can be accessed from derived classes, we are able to access name from the Program class.', 'When we declare a type or type member as internal, it can be accessed only within the same assembly.', 'If we use internal within a single assembly, it works just like the public access modifier.', 'Here, this code is in Assembly2. We are trying to access the name field of the StudentName class(Assembly1).', 'To access fields from Assembly1, we first need to set the reference of Assembly1 in Assembly2. Now the code', 'Here, when we try to access the name field from Assembly2, we get an error.', 'The protected internal is a combination of protected and internal access modifiers.', ""Let's derive a class from Greet in another assembly and try to access the protected internal field msg from it."", 'In the above example, we have inherited the Program class from the Greet class(from Assembly1).', 'We are able to access the msg from the Greet class of Assembly1 from Assembly2.', 'This is because the msg is a protected internal field and we are trying to access it from the child class of Greet.', 'In the above example, we have created a class StudentName with a private protected field name.', 'Notice that we have inherited the Program1 class from the StudentName class.', 'In the above example, when we try to access the name field from the derived class of StudentName, we get an error.', 'This is because the name field is in Assembly1 and the derived class is in Assembly2.']","['In C#, access modifiers specify the accessibility of types (classes, interfaces, etc) and type members (fields, methods, etc). For example,', 'Note: We have used the object student1 of the Student class to access its members. To learn more, visit the C# class and objects.', 'When we declare a type member with the private access modifier, it can only be accessed within the same class or struct. For example,', 'Since the field and method are private, we are not able to access them from the Program class. Here, the code will generate the following error.', 'In the above example, we have created a class named Student with a field name. Since the field is protected, we are not able to access it from the Program class.', 'In the above example, we have created a class Student with a protected field name. Notice that we have inherited the Program class from the Student class.', 'An assembly is a collection of types (classes, interfaces, etc) and resources (data). They are built to work together and form a logical unit of functionality.', ""That's why when we run an assembly all classes and interfaces inside the assembly run together. To learn more, visit the C# Assembly."", 'In the above example, we have created a class named Student with a field name. Since the field is internal, we are able to access it from the Program class as they are in the same assembly.', 'Here, this code is in Assembly1. We have created an internal field name inside the class StudentName. Now, this field can only be accessed from the same assembly Assembly1.', 'When we declare a member protected internal, it can be accessed from the same assembly and the derived class of the containing class from any other assembly.', 'In the above example, we have created a class named Greet with a field msg. Since the field is protected internal, we are able to access it from the Program class as they are in the same assembly.', 'The private protected access modifier is a combination of private and protected. It is available from the C# version 7.2 and later.', 'When we declare a member private protected, it can only be accessed within the same class, and its derived class within the same assembly. For example,', 'Since the private protected member can be accessed from derived classes within the same assembly, we are able to access name from the Program1 class.', ""Let's derive a class from StudentName in another assembly and try to access the private protected field name from it. For example,"", 'Note: We can also use access modifiers with types (classes, interface, etc). However, we can only use types with public and internal access modifiers.']","['class Student {', '  public string name;', '  private int num;', 'using System;', 'namespace MyApplication {', '  class Student {', '    public void print() {', '  class Program {', '      student1.print();', '      Console.ReadLine();', 'student1.print();', 'using System;', 'namespace MyApplication {', '  class Student {', '    private void print() {', '  class Program {', '      student1.print();', '      Console.ReadLine();', 'student1.print();', 'using System;', 'namespace MyApplication {', '  class Student {', '  class Program {', '      Console.ReadLine();', 'using System;', 'namespace MyApplication {', '  class Student {', '  class Program : Student {', '      Console.ReadLine();', 'using System;', 'namespace Assembly {', '  class Student {', '  class Program {', '      Console.ReadLine();', 'using System;', 'namespace Assembly1 {', '  public class StudentName {', '  class Program {', 'using System;', 'using Assembly1;', 'namespace Assembly2 {', '  class Program {', '      Console.ReadLine();', 'using Assembly1;', 'using System;', 'namespace Assembly1 {', '  public class Greet {', '  class Program {', '      Console.ReadLine();', 'using System;', 'using Assembly1;', 'namespace Assembly2 {', '  class Program: Greet {', '      Console.ReadLine();', 'Console.Write(greet.msg);', 'using System;', 'namespace Assembly1 {', '  public class StudentName {', '      Console.ReadLine();', 'using System;', 'using Assembly1;', 'namespace Assembly2 {', '      Console.ReadLine();']","['    public string name = ""Sheeran"";', '      Console.WriteLine(""Hello from Student class"");', '    static void Main(string[] args) {', '      Student student1 = new Student();', '      Console.WriteLine(""Name: "" + student1.name);', 'Console.WriteLine(""Name: "" + student1.name);', '    private string name = ""Sheeran"";', '      Console.WriteLine(""Hello from Student class"");', '    static void Main(string[] args) {', '      Student student1 = new Student();', '      Console.WriteLine(""Name: "" + student1.name);', 'Console.WriteLine(""Name: "" + student1.name);', ""Error    CS0122    'Student.name' is inaccessible due to its protection level    "", ""Error    CS0122    'Student.print()' is inaccessible due to its protection level    "", '    protected string name = ""Sheeran"";', '    static void Main(string[] args) {', '      Student student1 = new Student();', '      Console.WriteLine(""Name: "" + student1.name);', ""Error    CS0122    'Student.name' is inaccessible due to its protection level    "", '    protected string name = ""Sheeran"";', '    static void Main(string[] args) {', '      Program program = new Program();', '      Console.WriteLine(""Name: "" + program.name);', 'Console.WriteLine(""Name: "" + program.name);', '   internal string name = ""Sheeran"";', '    static void Main(string[] args) {', '      Student theStudent = new Student();', '      Console.WriteLine(""Name: "" + theStudent.name);', '    internal string name = ""Sheeran"";', '    static void Main(string[] args) {', '    static void Main(string[] args) {', '      StudentName student = new StudentName();', '      Console.Write(student.name);', ""Error    CS0122    'StudentName.name' is inaccessible due to its protection level"", '    protected internal string msg=""Hello"";', '    static void Main(string[] args) {', '      Greet greet = new Greet();', '      Console.WriteLine(greet.msg);', '    static void Main(string[] args) {', '      Program greet = new Program();', '    private protected string name = ""Sheeran"";', '  class Program1 : StudentName {', '    static void Main(string[] args) {', '      Program1 student = new Program1();', '      Console.Write(student.name);', '    static void Main(string[] args) {', '      Program student = new Program();', '      Console.Write(student.name);', ""Error    CS0122    'StudentName.name' is inaccessible due to its protection level    ""]","['Name: Sheeran', 'Hello from Student class', 'Name: Sheeran', 'Name: Sheeran', 'Hello', 'Hello', 'Sheeran']",[],['name - public field that can be accessed from anywhere|||num - private field can only be accessed within the Student class|||public|||private|||protected|||internal|||']
23,['C# Variable Scope'],"['In this tutorial, you will learn about variable scope in C# with the help of examples.']",[],[],"['C# Class Level Variable Scope', 'Method Level Variable Scope', 'Block Level Variable Scope in C#']",[],[],"['In C#, a variable has three types of scope:', 'Output', 'we get an error.', 'Output', 'we get an error.']","['A variable scope refers to the availability of variables in certain parts of the code.', 'In the above example, we have initialized a variable named str inside the Program class.', 'Since it is a class level variable, we can access it from a method present inside the class.', 'This is because the class level variable is accessible throughout the class.', 'In the above example, we have created a variable named str inside method1().', 'Here, str is a method level variable. So, it cannot be accessed outside method1().', 'However, when we try to access the str variable from the method2()', 'This is because method level variables have scope inside the method where they are created. For example,', 'In the above program, we have initialized a block level variable i inside the for loop.', 'Since i is a block level variable, when we try to access the variable outside the for loop,']","['In C#, when we declare a variable inside a class, the variable can be accessed within the class. This is known as class level variable scope.', 'Class level variables are known as fields and they are declared outside of methods, constructors, and blocks of the class. For example,', 'Note: We cannot access the class level variable through static methods. For example, suppose we have a static method inside the Program class.', 'When we declare a variable inside a method, the variable cannot be accessed outside of the method. This is known as method level variable scope. For example,', 'Here, we have created the str variable and accessed it within the same method display(). Hence, the code runs without any error.', 'When we declare a variable inside a block (for loop, while loop, if..else), the variable can only be accessed within the block. This is known as block level variable scope. For example,']","['using System;', 'namespace VariableScope {', '  class Program {', '    public void display() {', '      Console.WriteLine(str);', '      ps.display();', '      Console.ReadLine();', 'public void display() {', '  Console.WriteLine(str);', 'static void display2() {', '  Console.WriteLine(str);', 'using System;', 'namespace VariableScope {', '  class Program {', '    public void method1() {', '    public void method2() {', '      Console.WriteLine(str);', '      ps.method2();', '      Console.ReadLine();', 'string str = ""method level"";', 'using System;', 'namespace VariableScope {', '  class Program {', '    public void display() {', '      Console.WriteLine(str);', '    ps.display();', '    Console.ReadLine();', 'using System;', 'namespace VariableScope {', '  class Program {', '    public void display() {', '      for(int i=0;i<=3;i++) {', '        \t ', '    Console.WriteLine(i);', '      ps.display();', '      Console.ReadLine();', 'for(int i=0;i<=3;i++) {', '       \t ', 'Console.WriteLine(i);']","['    static void Main(string[] args) {', '      Program ps = new Program();', '      string str = ""method level"";', '    static void Main(string[] args) {', '      Program ps = new Program();', 'Console.WriteLine(str);  // Error code', ""Error   CS0103     The name 'str' does not exist in the current context  "", '     string str = ""inside method"";', '    static void Main(string[] args) {', '    static void Main(string[] args) {', '      Program ps = new Program();', ""Error\t CS0103  The name 'i' does not exist in the current context""]","['Class Level', 'inside method']",[],['Class Level Scope|||Method Level Scope|||Block Level Scope|||']
24,['C# Constructor'],"['In this tutorial, we will learn about the C# constructors and their types with the help of examples.']",[],[],"['Create a C# constructor', 'Types of Constructors', '1. Parameterless Constructor', '2. C# Parameterized Constructor', '3. Default Constructor', '4. Copy Constructor in C#', '5. Private Constructor', '6. C# Static Constructor', 'C# Constructor Overloading']",['Example 1: Private Constructor'],[],"['However, unlike methods, a constructor:', ""Here's how we create a constructor in C#"", 'Here, Car() is a constructor. It has the same name as its class.', 'Call a constructor', 'There are the following types of constructors:', 'Output', 'In the above example, we have created a constructor named Car().', 'Output', 'Notice the statement,', 'Here, we are passing the two values to the constructor.', 'Output', 'Program p1 = new Program();', 'Hence, we get 0 as the value of the int variable a.', 'Output', 'In the above program, we have used a copy constructor.', 'we get an error', 'In the above example, we have created a static constructor.', 'Output', 'Output', 'In the above example, we have overloaded the Car constructor:', 'Here,', 'To learn more visit C# Constructor Overloading.']","['In C#, a constructor is similar to a method that is invoked when an object of the class is created.', 'Once we create a constructor, we can call it using the new keyword. For example,', 'In C#, a constructor is called when we try to create an object of a class. For example,', 'Here, we are calling the Car() constructor to create an object car1. To learn more about objects, visit C# Class and Objects.', 'When we create a constructor without parameters, it is known as a parameterless constructor. For example,', 'We can call a constructor by adding a new keyword to the constructor name.', 'In C#, a constructor can also accept parameters. It is called a parameterized constructor. For example,', 'In the above example, we have created a constructor named Car(). The constructor takes two parameters: theBrand and thePrice.', 'The values passed to the constructor are called arguments. We must pass the same number and type of values as parameters.', 'We use a copy constructor to create an object by copying data from another object. For example,', 'We can create a private constructor using the private access specifier. This is known as a private constructor in C#.', 'Once the constructor is declared private, we cannot create objects of the class in other classes.', 'In C#, we can also make our constructor static. We use the static keyword to create a static constructor. For example,', 'Note: We can have only one static constructor in a class. It cannot have any parameters or access modifiers.', 'In C#, we can create two or more constructor in a class. It is known as constructor overloading. For example,', 'Based on the number of the argument passed during the constructor call, the corresponding constructor is called.']","['If we have not defined a constructor in our class, then the C# will automatically create a default constructor with an empty code and no parameters. For example,', 'In the above example, we have not created any constructor in the Program class. However, while creating an object, we are calling the constructor.', 'Here, C# automatically creates a default constructor. The default constructor initializes any uninitialized variable with the default value.', 'Note: In the default constructor, all the numeric fields are initialized to 0, whereas string and object are initialized as null.', 'Here, this constructor accepts an object of Car as its parameter. So, when creating the car2 object, we have passed the car1 object as an argument to the copy constructor.', 'Inside the copy constructor, we have assigned the value of the brand for car1 object to the brand variable for car2 object. Hence, both objects have the same value of the brand.', 'In the above example, we have created a private constructor Car(). Since private members are not accessed outside of the class, when we try to create an object of Car', 'Note: If a constructor is private, we cannot create objects of the class. Hence, all fields and methods of the class should be declared static, so that they can be accessed using the class name.', 'We cannot call a static constructor directly. However, when we call a regular constructor, the static constructor gets called automatically.', 'Here, we are calling the Car() constructor. You can see that the static constructor is also called along with the regular constructor.', ""The static constructor is called only once during the execution of the program. That's why when we call the constructor again, only the regular constructor is called.""]","['class Car {', '  Car() {', 'new Car();', 'Car car1 = new Car();', 'using System;', 'namespace Constructor {', '  class Car {   ', '    Car() {', '      new Car();', '      Console.ReadLine();', 'new Car();', 'using System;', 'namespace Constructor {', '  class Car {   ', '    string brand;', '    int price;', '      brand = theBrand;', '      price = thePrice;', '      Console.ReadLine();', 'using System;', 'namespace Constructor {', '  class Program {  ', '    int a;', '      Console.ReadLine();', 'using System;', 'namespace Constructor {', '  class Car {  ', '    string brand;', '    Car (string theBrand) {', '      brand = theBrand;', '    Car(Car c1) {', '      brand = c1.brand;', '      Console.ReadLine();', 'Car(Car c1) {', '  brand = c1.brand;', 'Car car2 = new Car(car1);', 'using System;', 'namespace Constructor {', '  class Car {  ', '   private Car () {', '    class CarDrive {', '      Car car1 = new Car();', '      Console.ReadLine();', 'Car car1 = new Car();', 'using System;', 'namespace Constructor {', '  class Car {  ', '   static Car () {', '    Car() {', '      Car car1 = new Car();', '      Car car2 = new Car();', '      Console.ReadLine();', 'static Car () {', 'Car car1 = new Car();', 'using System;', '  class Car {   ', '    Car() {', '    Car(string brand) {', '      Car car = new Car();', '      Console.WriteLine();', '      Console.ReadLine();']","['      Console.WriteLine(""Car Constructor"");', '    static void Main(string[] args) {', '    Car(string theBrand, int thePrice) {', '    static void Main(string[] args) {', '      Car car1 = new Car(""Bugatti"", 50000);', '      Console.WriteLine(""Brand: "" + car1.brand);', '      Console.WriteLine(""Price: "" + car1.price);', 'Car car1 = new Car(""Bugatti"", 50000);', '    static void Main(string[] args) {', '      Program p1 = new Program();', '      Console.WriteLine(""Default value of a: "" + p1.a);', '    static void Main(string[] args) {', '      Car car1 = new Car(""Bugatti"");', '      Console.WriteLine(""Brand of car1: "" + car1.brand);', '      Console.WriteLine(""Brand of car2: "" + car2.brand);', '    Console.WriteLine(""Private Constructor"");    ', '      static void Main(string[] args) {', ""error CS0122: 'Car.Car()' is inaccessible due to its protection level"", '    Console.WriteLine(""Static Constructor"");    ', '     Console.WriteLine(""Default Constructor"");', '    static void Main(string[] args) {', '  Console.WriteLine(""Static Constructor"");    ', '      Console.WriteLine(""Car constructor"");', '      Console.WriteLine(""Car constructor with one parameter"");', '      Console.WriteLine(""Brand: "" + brand);', '    static void Main(string[] args) {', '      Car car2 =  new Car(""Bugatti"");']","['Car Constructor', 'Brand: Bugatti', 'Price: 50000', 'Default value of a: 0', 'Brand of car1: Bugatti', 'Brand of car2: Bugatti', 'Static Constructor', 'Default Constructor', 'Default Constructor', 'Car constructor', 'Car constructor with one parameter', 'Brand: Bugatti']",[],['has the same name as that of the class|||does not have any return type|||Parameterless Constructor|||Parameterized Constructor|||Default Constructor|||one constructor has one parameter|||another has two parameter|||Object car - calls constructor with one parameter|||Object car2 - calls constructor with two parameter|||']
25,['C# this Keyword'],"['In this article, we will learn about this keyword in C# with the help of examples.']",[],[],"['C# this with Same Name Variables', 'Invoke Constructor of the Same Class Using this', 'C# this as an object argument', 'this to declare a C# indexer']",['Example: this with Same Name Variables'],[],"['Output', 'Here are some of the major uses of this keyword in C#.', 'Output', 'We can solve this issue by using this.', 'Output', 'Output', 'Output', 'Output', 'Now, to access and set the value of the array, we use an indexer.']","['In C#, this keyword refers to the current instance of a class. For example,', 'Now, we are getting the expected output that is 4. It is because this.num refers to the instance variable of the class.', 'So, there is no confusion between the names of the instance variable and the parameter.', 'When we call the Test(int num) constructor the Test(int num1, int num2) constructor executes first.', 'Note: Calling one constructor from another constructor is known as constructor chaining.', 'We can use this keyword to pass the current object as an argument to a method. For example,', 'In the above program, we have a method passParameter(). It accepts the object of the class as an argument.', 'In the above program, we have created an indexer using this keyword.', 'The array name[] is private. So, we cannot access it from the Program class.']","['In the above example, we have created an object named t1 of the class Test. We have printed the name of the object t1 and this keyword of the class.', 'Here, we can see the name of both t1 and this is the same. This is because this keyword refers to the current instance of the class which is t1.', 'We cannot declare two or more variables with the same name inside a scope (class or method). However, instance variables and parameters may have the same name. For example,', 'In the above program, the instance variable and the parameter have the same name: num. We have passed 4 as a value to the constructor. ', 'However, we are getting 0 as an output. This is because the C# gets confused because the names of the instance variable and the parameter are the same.', 'While working with constructor overloading, we might have to invoke one constructor from another constructor. In this case, we can use this keyword. For example, ', 'In the above example, we have used : followed by this keyword to call constructor Test(int num1, num2) from the constructor Test(int num).', 'Here, we have passed this to the passParameter() method. As this refers to the instance of the class, we are able to access the value of num1 and num2.', 'As we have used this to create an indexer, we must use the object of the Student class to access the indexer. To know more about the indexer, visit C# indexer.']","['using System;', 'namespace ThisKeyword {', '  class Test {', '    int num;', '    Test(int num) {', '      this.num = num;', '      Test t1 = new Test(4);', '      Console.ReadLine();', 'using System;', 'namespace ThisKeyword {', '  class Test {', '    int num;', '    Test(int num) {', '      num = num;', '      Test t1 = new Test(4);', '      Console.ReadLine();', 'using System;', 'namespace ThisKeyword {', '  class Test {', '    int num;', '    Test(int num) {', '      this.num = num;', '      Test t1 = new Test(4);', '      Console.ReadLine();', 'using System;', 'namespace ThisKeyword {', '  class Test {', '    Test(int num1, int num2) {', '      Test t1 = new Test(11); ', '      Console.ReadLine();   ', 'using System;', 'namespace ThisKeyword {', '  class Test {', '    int num1;', '    int num2;', '    Test() {', '      num1 = 22;', '      num2 = 33;', '    void display() {', '      passParameter(this);', '      Test t1 = new Test();', '      t1.display();', '      Console.ReadLine();', 'passParameter(this);', 'using System;', 'namespace ThisKeyword {', '  class Student {', '      get {', '        return name[index];', '      set { ', '        name[index] = value;', '  class Program {', '      s1[0] = ""Ram"";', '      s1[1] = ""Shyam"";', '      s1[2] = ""Gopal"";', 'Student s1 = new Student();', 's1[0] = ""Ram"";', 's1[1] = ""Shyam"";', 's1[2] = ""Gopal"";']","['      Console.WriteLine(""object of this: "" + this);', '    static void Main(string[] args) {', '      Console.WriteLine(""object of t1: "" + t1);', '    static void Main(string[] args) {', '      Console.WriteLine(""value of num: "" + t1.num);', '    static void Main(string[] args) {', '      Console.WriteLine(""value of num: "" +t1.num);', '      Console.WriteLine(""Constructor with two parameter"");', '    Test(int num) : this(33, 22) {', '      Console.WriteLine(""Constructor with one parameter"");', '    public static void Main(String[] args) {', '    void passParameter(Test t1) {', '      Console.WriteLine(""num1: "" + num1);', '      Console.WriteLine(""num2: "" + num2);', '    public static void Main(String[] args) {', '    private string[] name = new string[3];', '    public string this[int index] {', '      Student s1 = new Student();', '      for (int i = 0; i < 3; i++) {', '        Console.WriteLine(s1[i] + "" "");']","['object of this: ThisKeyword.Test', 'object of t1: ThisKeyword.Test', '0', 'value of num: 4', 'Constructor with two parameter', 'Constructor with one parameter', 'num1: 22', 'num2: 33', 'Ram', 'Shyam', 'Gopal']",[],[]
26,['C# static Keyword'],"['In this tutorial, we will learn about the static keyword in C# with the help of examples.']",[],[],"['C# Static Variables', 'C# Static Methods', 'C# Static Class', 'Access static Members within the Class']","['Static Variables Vs Instance Variables', 'Example: C# Static Variable Vs. Instance Variable', 'Example: C# Static and Non-static Methods']",[],"['Output', 'Output', 'Inside the Program class, ', 'Output', 'Inside the Program class,', 'Note:  We cannot inherit a static class in C#. For example,', 'Output']","['In C#, if we use a static keyword with class members, then there will be a single copy of the type member.', 'And, all objects of the class share a single copy instead of creating individual copies.', 'If a variable is declared static, we can access the variable using the class name. For example,', 'In C#, every object of a class will have its own copy of instance variables. For example,', 'In the above program, the Student class has a non-static variable named studentName and a static variable named schoolName.', 'Just like static variables, we can call the static methods using the class name.', 'Here, we have accessed the static method directly from Program classes using the class name.', 'When we declare a method static, all objects of the class share the same static method.', 'Note: In C#, the Main method is static. So, we can call it without creating the object.', 'In C#, when we declare a class as static, we cannot create objects of the class. For example,', 'In the above example, we have a static class Test. We have created an object t1 of the class Test.', 'Since we cannot make an object of the static class, we get the following error:', 'Here, we are accessing the static field age and static method display() without using the class name.']","['In the above example, we have created a static variable named department. Since the variable is static, we have used the class name Student to access the variable.', 'Here, both the objects s1 and s2 will have separate copies of the variable studentName. And, they are different from each other.', ""However, if we declare a variable static, all objects of the class share the same static variable. And, we don't need to create objects of the class to access the static variables. "", 'Since the schoolName is the same for all students, it is good to make the schoolName static. It saves memory and makes the program more efficient.', 'In the above program, we have declared a non-static method named display1() and a static method named display2() inside the class Test.', 'Notice the field and method of the static class are also static because we can only have static members inside the static class.', 'If we are accessing the static variables and methods inside the same class, we can directly access them without using the class name. For example,']","['using System;', 'namespace StaticKeyword {', '  class Student {', '  class Program {', '      Console.ReadLine();', 'class Student {', '  public string studentName;', 'class Program {', 'using System;', 'namespace StaticKeyword {', '  class Student {', '    public string studentName;', '    class Program {', '      s1.studentName = ""Ram"";', '      Console.ReadLine();', 'class Test {', 'class Program {', '    Test.display();', 'using System;', 'namespace StaticKeyword {', '  class Test {', '    public void display1() {', '  class Program {', '      Test t1 = new Test();', '      t1.display1();', '      Test.display2();    ', '      Console.ReadLine();', 'using System;', 'namespace StaticKeyword {', '  static class Test {', '    static int a = 5;', '    static void display() {', '      Test t1 = new Test();', '      Console.WriteLine(a);', '      display();', 'static class A {', 'class B : A {', 'using System;', 'namespace StaticKeyword {', '  class Test {', '    static int age = 25;', '      Console.WriteLine(age);', '      display();', '      Console.ReadLine();']","['    public static string department = ""Computer Science"";', '    static void Main(string[] argos) {', '      Console.WriteLine(""Department: "" + Student.department);', '  static void Main(string[] args) {', '    static public string schoolName = ""Programiz School"";', '    static void Main(string[] args) {', '      Student s1 = new Student();', '      Console.WriteLine(""Name: "" + s1.studentName);', '      Console.WriteLine(""School: "" + Student.schoolName);', '      Student s2 = new Student();', '      Console.WriteLine(""Name: "" + s2.studentName);', '      Console.WriteLine(""School: "" + Student.schoolName);', '  public static void display() {....}', '  static void Main(string[] args) {', '      Console.WriteLine(""Non static method"");', '    public static void display2() {', '      Console.WriteLine(""Static method"");', '    static void Main(string[] args) {', '      Console.WriteLine(""Static method"");', '    static void Main(string[] args) {', ""error CS0723: Cannot declare a variable of static type 'Test' "", 'error CS0712: Cannot create an instance of the static class', '    public static void display() {', '      Console.WriteLine(""Static method"");', '    static void Main(string[] args) {']","['Department: Computer Science', 'Name: Ram', 'School: Programiz School', 'Name: Shyam', 'School: Programiz School', 'Non static method', 'Static method', '25', 'Static method']",[],['s1.studentName / s2.studentName - calls the non-static variable using objects  s1 and s2 respectively|||Student.schoolName - calls the static variable by using the class name|||t1.display1() - access the non-static method using s1 object|||Test.display2() - access the static method using the class name Test|||']
27,['C# String'],"['In this tutorial, we will learn about C# string and its methods with the help of examples.']",[],[],"['String Operations ', 'Immutability of String Objects', 'String Escape Sequences', 'String interpolation', 'Methods of C# string', 'Frequently Asked Questions\n\n']","['Example: Create string in C#', '1. Get the Length of a string', '2. Join two strings in C#', '3. C# compare two strings']",[],"['We use the string keyword to create a string. For example,', 'Output', 'Output', 'Output', 'Output', 'To understand it, consider an example:', 'Now suppose we want to change the string str.', 'But how are we able to modify the string when they are immutable?', ""Let's see what has happened here,"", 'Suppose we need to include double quotes inside a string.', 'Some of the escape sequences in C# are as follows:', 'Output', 'Notice that,', 'Output']","['In the above example, we have created two strings named str1 and str2 and printed them.', 'Note: A string variable in C# is not of primitive types like int, char, etc. Instead, it is an object of the String class.', 'To find the length of a string, we use the Length property. For example,', 'In the above example, the Length property calculates the total number of characters in the string and returns it.', 'We can join two strings in C# using the Concat() method. For example,', 'In the above example, we have created two strings named str1 and str2. Notice the statement,', 'Here, the Concat() method joins str1 and str2 and assigns it to the joinedString variable.', 'We can also join two strings using the + operator in C#. To learn more, visit C# string Concat.', 'In C#, strings are immutable. This means, once we create a string, we cannot change that string.', 'Here, we have created a string variable named str. The variable holds the string ""Hello "".', 'Here, we are using the Concat() method to add the string ""World"" to the previous string str.', 'To solve this issue, we use the escape character \\"" in C#. For example,', 'Now by using \\ before double quote "", we can include it in the string.', 'In the above example, we are using the name variable inside the message string.', 'There are various string methods in C#. Some of them are as follows:', 'An array of strings is created the same as an array for data types. For example,', 'There is no technical difference between string and String. In C# string is an alias for System.String.', 'It is recommended to use string as it works even without using System;.']","['In C#, a string is a sequence of characters. For example, ""hello"" is a string containing a sequence of characters \'h\', \'e\', \'l\', \'l\', and \'o\'.', 'Here, we have created a string named str and assigned the text ""C# Programming"". We use double quotes to represent strings in C#.', 'C# string provides various methods to perform different operations on strings. We will look into some of the commonly used string operations.', 'In C#, we can make comparisons between two strings using the Equals() method. The Equals() method checks if two strings are equal or not. For example,', 'In the above example, we have created 3 strings named str1, str2, and str3. Here, we are using the Equals() method to check if one string is equal to another.', 'The escape character is used to escape some of the characters present inside a string. In other words, we use escape sequences to insert special characters inside the string.', 'Since strings are represented by double quotes, the compiler will treat ""This is the "" as the string. And the above code will cause an error.', 'In C#, we can use string interpolation to insert variables inside a string. For string interpolation, the string literal must begin with the $ character.  For example,']","['string str = ""C# Programming"";', 'using System;  ', 'namespace CsharpString {  ', '  class Test {', '      Console.WriteLine(str1);', '      Console.WriteLine(str2);', '      Console.ReadLine();', 'using System;  ', 'namespace CsharpString {  ', '  class Test {', '      Console.ReadLine();', 'using System;  ', 'namespace CsharpString {  ', '  class Test {', '      string str1 = ""C# "";', '      Console.ReadLine();', 'using System;  ', 'namespace CsharpString {  ', '  class Test {', '      Console.ReadLine();', 'string str = ""Hello "";', 'using System;  ', 'namespace CsharpString {  ', '  class Test {', '      Console.ReadLine();', 'using System;  ', 'namespace CsharpString {  ', '  class Test {', '      Console.ReadLine();']","['    public static void Main(string [] args) {', '      string str1 = ""C# Programming"";', '      string str2 = ""Programiz"";', '    public static void Main(string [] args) {', '      string str = ""C# Programming"";', '      Console.WriteLine(""string: "" + str);', '      int length = str.Length;     ', '      Console.WriteLine(""Length: ""+ length);', '    public static void Main(string [] args) {', '      Console.WriteLine(""string str1: "" + str1);', '      string str2 = ""Programming"";', '      Console.WriteLine(""string str2: "" + str2);', '      string joinedString = string.Concat(str1, str2);', '      Console.WriteLine(""Joined string: "" + joinedString);', 'string joinedString = string.Concat(str1, str2);', '    public static void Main(string [] args) {', '      string str1 = ""C# Programming"";', '      string str2 = ""C# Programming"";', '      string str3 = ""Programiz"";', '      Boolean result1 = str1.Equals(str2);', '      Console.WriteLine(""string str1 and str2 are equal: "" + result1);', '      Boolean result2 = str1.Equals(str3);', '      Console.WriteLine(""string str1 and str3 are equal: "" + result2);     ', 'str = string.Concat(str, ""World"");', 'string str = ""This is the ""String"" class"";', 'string str = ""This is the \\""String\\"" class."";', '    public static void Main(string [] args) {', '      string name = ""Programiz"";', '      string message = $""Welcome to {name}"";', '      Console.WriteLine(message);', 'string message = $""Welcome to {name}"";', '    public static void Main(string [] args) {', '      string[] animals = {""Monkey"", ""Dog"", ""Cat""};', '      Console.WriteLine(animals[0]);', '      Console.WriteLine(animals[1]);', '      Console.WriteLine(animals[2]);']","['C# Programming', 'Programiz', 'string: C# Programming', 'Length: 14', 'string str1: C#', 'string str2: Programming', 'Joined string: C# Programming', 'string str1 and str2 are equal: True', 'string str1 and str3 are equal: False', 'Welcome to Programiz', 'Monkey', 'Dog', 'Cat']","['scape Sequence|||Character Name&&&\'|||single quote&&&"" |||double quote&&&\\ |||backslash&&&0|||null&&&n |||new line&&&t |||horizontal tab', 'ethods|||Description&&&ormat() |||returns a formatted string&&&plit()|||splits the string into substring&&&ubstring()|||returns substring of a string&&&ompare() |||compares string objects&&&eplace()|||replaces the specified old character with the specified new character&&&ontains()|||checks whether the string contains a substring&&&oin()|||joins the given strings using the specified separator&&&rim()|||removes any leading and trailing whitespaces&&&ndsWith()|||checks if the string ends with the given string&&&ndexOf()|||returns the position of the specified character in the string&&&emove() |||returns characters from a string&&&oUpper() |||converts the string to uppercase&&&oLower() |||converts the string to lowercase&&&adLeft()|||returns string padded with spaces or with a specified Unicode character on the left&&&adRight() |||returns string padded with spaces or with a specified Unicode character on the right&&&tartsWith()|||checks if the string begins with the given string&&&oCharArray()|||converts the string to a char array&&&&&&astIndexOf()|||returns index of the last occurrence of a specified string ']","['the string literal starts with $|||the name variable is placed inside the curly braces {}|||&&&C# takes the value of the string ""Hello "".|||Creates a new string by adding ""World"" to the string ""Hello "".|||Creates a new string object, gives it a value ""Hello World"", and stores it in str.|||The original string, ""Hello "", that was assigned to str is released for garbage collection because no other variable holds a reference to it.|||']"
28,['C# Inheritance '],"['In this tutorial, we will learn about C# inheritance and its types with the help of examples.']",[],[],"['How to perform inheritance in C#?', 'is-a relationship', 'protected Members in C# Inheritance', 'Types of inheritance', 'Method Overriding in C# Inheritance', 'base Keyword in C# Inheritance', 'Importance of Inheritance in C#']","['Example: C# Inheritance', 'Example: protected Members in Inheritance', '1. Single Inheritance', '2. Multilevel Inheritance', '3. Hierarchical Inheritance', '4. Multiple Inheritance', '5. Hybrid Inheritance', 'Example: base keyword in C# inheritance', 'Example: Importance of Inheritance']","['//cdn.programiz.com/cdn/farfuture/v6Ou61AxuPuNp70-mqjrSsyF1bD3wC0RXQc9kUYPt8M/mtime:1628848912/sites/tutorial2program/files/csharp-inheritance.png', '//cdn.programiz.com/cdn/farfuture/K9QILFhSs_IGLkJpsxME2GaGseQidPyLM5-CG0zRcPM/mtime:1628848891/sites/tutorial2program/files/csharp-single-inheritance.png', '//cdn.programiz.com/cdn/farfuture/1V_CPUffcw__-dA9ylMtxwSmICHc7cQ7GMYVtttT-r0/mtime:1628848902/sites/tutorial2program/files/csharp-multilevel-inheritance.png', '//cdn.programiz.com/cdn/farfuture/XI5xgw8w8HwPt4uPfpOBsaSCnKAjY9Rr-NNylusB7w4/mtime:1629090431/sites/tutorial2program/files/hierarchical-inheritance-csharp.png', '//cdn.programiz.com/cdn/farfuture/adTuqB5z1JQEvFgAs1w3Kyi2SMEpFKQ1O7BB3PdCzLQ/mtime:1629090422/sites/tutorial2program/files/multiple-inheritance-csharp.png', '//cdn.programiz.com/cdn/farfuture/qyvsV4-G7l3sWi1LYlgxieF4t1zLfLnsCd58FKvKG54/mtime:1628848919/sites/tutorial2program/files/csharp-hybrid-inheritance.png']","['In C#, we use the : symbol to perform inheritance. For example,', 'Output', 'Output', 'There are the following types of inheritance:', 'Output', 'When we call eat() using the Dog object labrador, ', 'Output', 'Output', 'Here, the Square and Rectangle inherit from RegularPolygon.']","['The derived class inherits the fields and methods of the base class. This helps with the code reusability in C#.', 'In the above example, we have derived a subclass Dog from the superclass Animal. Notice the statements,', 'Also, we have accessed the name field inside the method of the Dog class.', 'We can derive Dog from Animal class. Similarly, Apple from Fruit class and Car from Vehicle class.', 'When we declare a field or method as protected, it can only be accessed from the same class and its derived classes.', 'In the above example, we have created a class named Animal. The class includes a protected method eat().', 'We have derived the Dog class from the Animal class. Notice the statement,', 'Since the protected method can be accessed from derived classes, we are able to access the eat() method from the Dog class.', 'In single inheritance, a single derived class inherits from a single base class.', 'In hierarchical inheritance, multiple derived classes inherit from a single base class.', 'In the above example, the eat() method is present in both the base class and derived class. ', 'the method inside Dog is called. This is because the method inside Dog overrides the same method inside Animal.', 'Notice, we have used virtual and override with methods of the base class and derived class respectively. Here,', 'In the previous example, we saw that the method in the derived class overrides the method in the base class.', 'However, what if we want to call the method of the base class as well?', 'In that case, we use the base keyword to call the method of the base class from the derived class.', 'Here, we have used the base keyword to access the method of Animal class from the Dog class.', ""To understand the importance of Inheritance, let's consider a situation."", 'We pass the value of the length and sides to calculateperimeter() to compute the perimeter.', 'This is how inheritance makes our code reusable and more intuitive.', 'The formula to calculate the perimeter is common for all, so we have reused the calculatePerimeter() method of the base class.']","['In C#, inheritance allows us to create a new class from an existing class. It is a key feature of Object-Oriented Programming (OOP).', 'The class from which a new class is created is known as the base class (parent or superclass). And, the new class is called derived class (child or subclass)', 'Here, we are inheriting the derived class Dog from the base class Animal. The Dog class can now access the fields and methods of Animal class.C# Inheritance', 'Here, we are using labrador (object of Dog) to access the name and display() of the Animal class. This is possible because the derived class inherits all fields and methods of the base class.', 'In C#, inheritance is an is-a relationship. We use inheritance only if there is an is-a relationship between two classes. For example,', 'In multilevel inheritance, a derived class inherits from a base and then the same derived class acts as a base class for another class.', ""In multiple inheritance, a single derived class inherits from multiple base classes. C# doesn't support multiple inheritance. However, we can achieve multiple inheritance through interfaces."", 'Hybrid inheritance is a combination of two or more types of inheritance. The combination of multilevel and hierarchical inheritance is an example of Hybrid inheritance.', 'If the same method is present in both the base class and the derived class, the method in the derived class overrides the method in the base class. This is called method overriding in C#. For example,', 'In the above example, the eat() method is present in both the base class Animal and the derived class Dog. Notice the statement,', 'Suppose we are working with regular polygons such as squares, rectangles, and so on. And, we have to find the perimeter of these polygons based on the input.', '1. Since the formula to calculate perimeter is common for all regular polygons, we can create a RegularPolygon class and a method calculatePerimeter() to calculate perimeter.', '2. And inherit Square and Rectangle classes from the RegularPolygon class. Each of these classes will have properties to store the length and number of sides because they are different for all polygons.', 'In the above example, we have created a RegularPolygon class that has a method to calculate the perimeter of the regular polygon.', 'And since the formula to calculate the area is different for different shapes, we have created a separate method inside the derived class to calculate the area.']","['class Animal {  ', 'class Dog : Animal {', 'using System;', 'namespace Inheritance {', '  class Animal { ', '    public string name;', '    public void display() {', '  class Dog : Animal {', '    public void getName() {', '  class Program {', '      labrador.name = ""Rohu"";', '      labrador.display();', '      labrador.getName();', '      Console.ReadLine();', 'labrador.name = ""Rohu"";', 'labrador.getName();', 'using System;', 'namespace Inheritance {', '  class Animal { ', '    protected void eat() {', '  class Dog : Animal {', '      labrador.eat();', '      Console.ReadLine();', 'labrador.eat();', 'using System;', 'namespace Inheritance {', '  class Animal { ', '  class Dog : Animal {', '    }     ', '  class Program {', '      labrador.eat();', 'labrador.eat();', 'using System;', 'namespace Inheritance {', '  class Animal { ', '  class Dog : Animal {', '      base.eat();', '    }     ', '  class Program {', '      labrador.eat();', 'base.eat();', 'class RegularPolygon {', '  calculatePerimeter() {', '  int  length = 0;', '  int sides = 0;', 'using System;', 'namespace Inheritance {', '  class RegularPolygon {', '    public int  length = 200;', '    public int sides = 4;', '    public int length = 100;', '    public int breadth = 200;', '    public int sides = 4;', '  class Program {', '      s1.calculateArea();', '      t1.calculateArea();']","['      Console.WriteLine(""I am an animal"");', '      Console.WriteLine(""My name is "" + name);', '    static void Main(string[] args) {', '      Console.WriteLine(""I can eat"");', '     static void Main(string[] args) {', '      Console.WriteLine(""I eat food"");', '    public override void eat() {', '      Console.WriteLine(""I eat Dog food"");', '    static void Main(string[] args) {', '      Console.WriteLine(""Animals eat food."");', '    public override void eat() {', '      Console.WriteLine(""Dogs eat Dog food."");', '    static void Main(string[] args) {', '      public void calculatePerimeter(int length, int sides) {', '        int result = length * sides;', '        Console.WriteLine(""Perimeter: "" + result);', '  class Square : RegularPolygon {', '    public void calculateArea() {', '      int area = length * length;', '      Console.WriteLine(""Area of Square: "" + area);', ' class Rectangle : RegularPolygon {', '    public void calculateArea() {', '      int area = length * breadth;', '      Console.WriteLine(""Area of Rectangle: "" + area);', '    static void Main(string[] args) {', '      s1.calculatePerimeter(s1.length, s1.sides);', '      Rectangle t1 = new Rectangle();', '      t1.calculatePerimeter(t1.length, t1.sides);']","['I am an animal', 'My name is Rohu', 'I can eat', 'I eat Dog food', 'Animals eat food.', 'Dogs eat Dog food.', 'Area of Square: 40000', 'Perimeter: 800', 'Area of Rectangle: 20000', 'Perimeter: 400']",[],['Dog is an Animal|||Apple is a Fruit|||Car is a Vehicle|||virtual - allows the method to be overridden by the derived class|||override - indicates the method is overriding the method from the base class|||']
29,['C# abstract class and method '],"['In this tutorial, we will learn about C# abstract class and method with the help of examples.']",[],[],"['Abstract Class', 'Inheriting Abstract Class', 'C# Abstract Method', 'Abstract class with get and set accessors', 'Access Constructor of Abstract Classes', 'C# Abstraction']","['Example: Implementation of the abstract method', 'Example: C# Abstraction']",[],"['Before moving forward, make sure to know about C# inheritance.', 'Output', 'Output', 'We then used the object of the Dog class to access makeSound().', 'We can mark get and set accessors as abstract. For example,', 'Output', 'An abstract class can have constructors as well. For example,', 'Output', 'Note: We can also use destructors inside the abstract class.', 'The abstract classes are used to achieve abstraction in C#.', 'Output']","['In C#, we cannot create objects of an abstract class. We use the abstract keyword to create an abstract class. For example,', 'In the above example, we have created an abstract class named Language. The class contains a non-abstract method display().', 'We have created the Program class that inherits the abstract class. Notice the statement,', 'Here, obj is the object of the derived class Program. We are calling the method of the abstract class using the object obj.', 'Here, display() is an abstract method. An abstract method can only be present inside an abstract class.', 'When a non-abstract class inherits an abstract class, it should provide an implementation of the abstract methods.', 'In the above example, we have created an abstract class named Animal. We have an abstract method makeSound() inside the class.', 'In the above example, we have marked the get and set accessor as abstract.', 'We are setting and getting the value of the name field of the abstract class Animal using the object of the derived class Dog.', 'In the above example, we have created a constructor inside the abstract class Animal.', 'Here, when we create an object of the derived class Dog the constructor of the abstract class Animal gets called as well.', 'This helps us to manage complexity by hiding details with a simpler, higher-level idea.', 'In the above example, we have created an abstract class MotorBike. It has an abstract method brake().', 'As brake() is an abstract method the implementation of brake() in MotorBike is kept hidden.', 'Note: We use interfaces to achieve complete abstraction in C#. To learn more, visit C# Interface.']","['An abstract class can have both abstract methods (method without body) and non-abstract methods (method with the body). For example,', 'As we cannot create objects of an abstract class, we must create a derived class from it.  So that we can access members of the abstract class using the object of the derived class. For example,', 'Note: We can use abstract class only as a base class. This is why abstract classes cannot be sealed. To know more, visit C# sealed class and method.', 'A method that does not have a body is known as an abstract method. We use the abstract keyword to create abstract methods. For example,', 'We have a Dog class that inherits from the Animal class. Dog class provides the implementation of the abstract method makeSound().', 'Notice, we have used override with the makeSound() method. This indicates the method is overriding the method from the base class.', 'If the Dog class had not provided the implementation of the abstract method makeSound(), Dog class should have been marked abstract as well.', 'Note: Unlike the C# inheritance, we cannot use virtual with the abstract methods of the base class. This is because an abstract class is implicitly virtual.', 'Abstraction is one of the important concepts of object-oriented programming. It allows us to hide unnecessary details and only show the needed information.', 'A practical example of abstraction can be motorbike brakes. We know what a brake does. When we apply the brake, the motorbike will stop. However, the working of the brake is kept hidden from us.', 'The major advantage of hiding the working of the brake is that now the manufacturer can implement brakes differently for different motorbikes. However, what brake does will be the same.', 'Every motorbike has a different implementation of the brake. This is why SportsBike makes its own implementation of brake() and MountainBike makes its own implementation of brake().']","['abstract class Language {', 'Language obj = new Language();', 'abstract class Language {', '  public void display2() {', 'using System;', 'namespace AbstractClass {', '  abstract class Language {', '    public void display() {', '  class Program : Language {', '      obj.display();', '      Console.ReadLine();', 'obj.display();', 'using System;', 'namespace AbstractClass {', '  abstract class Animal {', '  class Dog : Animal {', '  class Program  {', '      Dog obj = new Dog();', '      obj.makeSound();    ', '      Console.ReadLine(); ', 'using System;', 'namespace AbstractClass {', '  abstract class Animal {', '    protected string name;', '      get;', '      set;', '  class Dog : Animal {', '      get {', '        return name;', '      set {', '        name = value; ', '  class Program  {', '      Dog obj = new Dog();  ', '      obj.Name = ""Tom"";', '      Console.ReadLine();', 'obj.Name = ""Tom"";', 'using System;', 'namespace AbstractClass {', '  abstract class Animal {', '    public Animal() {', '  class Dog : Animal {', '    public Dog() {', '    }   ', '  class Program  {', '      Dog d1 = new Dog();  ', '      Console.ReadLine();', 'Dog d1 = new Dog();', 'using System;', 'namespace AbstractClass {', '  abstract class MotorBike {', '  class Program  {', '      s1.brake();', '      m1.brake();', '      Console.ReadLine();']","['  public abstract void display1();', '    Console.WriteLine(""Non abstract method"");', '      Console.WriteLine(""Non abstract method"");', '    static void Main (string [] args) {', '      Program obj = new Program();', '    public abstract void makeSound();', '    public override void makeSound() {', '      Console.WriteLine(""Bark Bark"");', '    static void Main (string [] args) {', 'public override void makeSound() {', '  Console.WriteLine(""Bark Bark"");', '    public abstract string Name {', '    public override string Name {', '    static void Main (string [] args) {', '      Console.WriteLine(""Name: "" + obj.Name); ', 'Console.WriteLine(""Name: "" + obj.Name);', '      Console.WriteLine(""Animal Constructor"");', '      Console.WriteLine(""Dog Constructor"");', '    static void Main (string [] args) {', '    public abstract void brake();', '  class SportsBike : MotorBike {', '    public override void brake() {', '      Console.WriteLine(""Sports Bike Brake"");', '  class MountainBike : MotorBike {', '    public override void brake() {      ', '      Console.WriteLine(""Mountain Bike Brake"");', '    static void Main (string [] args) {', '      SportsBike s1 = new SportsBike();  ', '      MountainBike m1 = new MountainBike();']","['Non abstract method', 'Bark Bark ', 'Name: Tom', 'Animal Constructor', 'Dog Constructor', 'Sports Bike Brake', 'Mountain Bike Brake']",[],[]
30,['C# Nested Class'],"['In this tutorial, you will learn about the nested class in C# with the help of examples.']",[],[],"['Access Members', 'Access Outer Class Members Inside Inner Class', 'Access static Members of Outer Class Inside Inner Class', 'Inheriting Outer Class', 'Inheriting inner class']",['Example: C# Nested Class'],[],"['1.Create object of Outer class', 'Here, we have created the obj1 object of the class OuterClass.', '2. Create object of Inner Class', 'Output', 'We then used these objects to access methods of each class.', 'Output', 'Output', 'Output', 'In C#, we can inherit the inner class as well. For example,', 'Output']","['In C#, we can define a class within another class. It is known as a nested class.  For example,', 'Here, we have created the class InnerClass inside the class OuterClass. The InnerClass is called the nested class.', 'To access members of the nested classes we first need to create their objects.', 'In the above program, we have nested the Engine class inside the Car class.', 'Inside the Program class, we have created objects of both the outer class and the inner class.', 'Note: We cannot access the members of the inner class using the object of the outer class. For example, ', 'Here, we cannot access the displayEngine() method of the inner class Engine using the sportsCar object of the outer class. ', 'We can access members of the outer class inside the inner class. For this we use an object of the outer class. For example, ', 'In the above example, we have nested the Engine class inside the Car class. Notice the line,', 'Here, we have used the object of the class Car to access field brand.', 'In the above example, we have nested the Engine class inside the Car class. Car has a static field brand.', 'Here, we have accessed the static field brand inside the inner class (Engine) using the name of the outer class (Car).', 'Like a regular class, we can also inherit the outer class. For example,', 'In the above example, we have derived the class Laptop from the outer class Computer.', 'Because of this we are able to access the display() method of class Computer using the object of the class Laptop.', 'In the above example, we have derived the Laptop class from the inner class CPU.', 'Notice that we have used the name of the outer class along with the nested class to inherit the inner class.']","['You can see that we have used OuterClass.InnerClass to create the obj2 object of the inner class. This is because InnerClass is the nested class of OuterClass.', 'Once we have created the object of individual classes, we can use the object name and dot operator to access members of each class.', ""If we need to access static members of the outer class, we don't need to create its object. Instead, we can directly use the name of the outer class. For example,""]","['class OuterClass {', '  class InnerClass {', 'using System;', 'namespace CsharpNestedClass {', '  public class Car {', '    public void displayCar() {', '    public class Engine {', '  class Program {', '      sportsCar.displayCar();', '      Console.ReadLine();', 'Car sportsCar = new Car();', 'sportsCar.displayEngine();', 'using System;', 'namespace CsharpNestedClass {', '  public class Car {', '    public class Engine {', '  class Program {', '       engineObj.displayCar();', '      Console.ReadLine();', 'Car sportsCar = new Car();', 'using System;', 'namespace CsharpNestedClass {', '  public class Car {', '    public class Engine {', '      public void display() {', '        ', '  class Program {', '       obj.display();', '      Console.ReadLine();', 'using System;', 'namespace CsharpNestedClass {', '  class Computer {', '    public void display() {', '    public class CPU {', '    class Laptop : Computer {', '  class Program  {', '      obj.display();     ', '      Console.ReadLine();', 'using System;', 'namespace CsharpNestedClass {', '  class Computer {', '    public class CPU {', '      public void display() {', '  class Program  {', '      obj.display();     ', '      Console.ReadLine();', 'class Laptop : Computer.CPU {}']","['OuterClass obj1 = new OuterClass();', 'OuterClass.InnerClass obj2 = new OuterClass.InnerClass();', '      Console.WriteLine(""Car: Bugatti"");', '      public void displayEngine() {', '        Console.WriteLine(""Engine: Petrol Engine"");', '    static void Main(string[] args) {', '      Car sportsCar = new Car();', '      Car.Engine petrolEngine = new Car.Engine();', '      petrolEngine.displayEngine();', 'Car.Engine petrolEngine = new Car.Engine();', '    public string brand = ""Bugatti"";', '      public void displayCar() {', '        Car sportsCar = new Car();', '        Console.WriteLine(""Brand: "" + sportsCar.brand);', '    static void Main(string[] args) {', '       Car.Engine engineObj = new Car.Engine();', 'Console.WriteLine(""Brand: "" + sportsCar.brand);', '    public static string brand = ""Bugatti"";', '        Console.WriteLine(""Brand: "" + Car.brand);', '    static void Main(string[] args) {', '       Car.Engine obj = new Car.Engine();', 'Console.WriteLine(""Brand: "" + Car.brand);', '      Console.WriteLine(""Method of Computer class"");', '    static void Main(string[] args) {', '      Laptop obj = new Laptop();', '        Console.WriteLine(""Method of CPU class"");', '    static void Main(string[] args) {', '      Laptop obj = new Laptop();']","['Car: Bugatti', 'Engine: Petrol Engine', 'Brand: Bugatti', 'Brand: Bugatti', 'Method of Computer class', 'Method of CPU class']",[],['sportsCar.displayCar() - access outer class method using the object of Car|||petrolEngine.displayEngine() - access inner class method using the object of Engine|||']
31,['C# Partial Class and Partial Method'],['In this article we are going to learn about how and why partial class and partial methods be implemented in C# .'],[],[],"['Introduction to Partial Class', 'Introduction to Partial Methods']","['Example 1:', 'Things to Remember about Partial Class', 'Example 2:', 'Things to remember about Partial Method']",[],"['Here now we can see the main method of the project:', 'Places where partial class can be used:', 'A partial method declaration consists of two parts:']","['We have a project named as HeightWeightInfo which shows height and weight.', 'The method PrintRecord is called by the object myRecord which is defined in the File2.cs.', '**Note: The partial modifier is not available on delegate or enumeration declarations', 'They may be in separate parts of the partial class, or in the same part.']","['There are many situations when you might need to split a class definition,\xa0such as when working on a large scale projects, multiple developers and programmers might need to work on the same class at the same time. In this case we can use a feature called Partial Class.', 'While programming in C# (or OOP), we can split the definition of a class over two or more source files. The source files contains a section of the definition of class, and all parts are combined when the application is compiled. For splitting a class definition, we need to use the partial keyword.', 'We have a file named as File1.cs with a partial class named as Record. It has two integer variables h & w and a method/constructor named as Record which is assigning the values of h & w.', 'Here is another file named as File2.cs with the same partial class Record which has only the method PrintRecord. This method will display the values of h & w.', 'Here we have the object of the class Record as myRecord which is passing the parameter values as 10 and 15 to h and w respectively to the method defined in File1.cs.', 'This shows that the partial keyword helps to combine all the attributes of a class defined in various files to work as a single class.', 'The partial keyword specify that other parts of the class can be defined in the namespace. It is mandatory to use the partial keyword if we are trying to make a class partial. All the parts of the class should be in the same namespace and available at compile time to form the final type. All the parts must have same access modifier i.e. private, public, or so on.', 'A partial class may contain a partial method. One part of the class contains the signature of the method. An optional implementation may be defined in the same part or another part. If the implementation is not supplied, then the method and all calls are removed at compile time.', ""Let's take an example as a partial class Car defined in file1.cs which has three methods InitializeCar(), BuildRim() and BuildWheels(). Among those methods, InitializeCar is defined as partial."", 'And we have another file named as file2.cs which has two methods BuildEngine and InitializeCar. The method InitializeCar is partial method which is also defined in file1.cs.']","['namespace HeightWeightInfo', '    class File1', '        private int h;', '        private int w;', '        {', '            this.h = h;', '            this.w = w;', '        }', 'namespace HeightWeightInfo', '    class File2', '        {', '        }', 'namespace HeightWeightInfo', '    class Program', '        {', '        }', 'public partial class Car', '    public void BuildRim() { }', 'public partial class Car', '        string str = ""Car"";']","['        public Record(int h, int w)', '        public void PrintRecord()', '            Console.WriteLine(""Height:""+ h);', '            Console.WriteLine(""Weight:""+ w);', '        static void Main(string[] args)', '            Record myRecord = new Record(10, 15);', '            myRecord.PrintRecord();', '    partial void InitializeCar();', '    public void BuildWheels() { }', '    public void BuildEngine() { }', '    partial void InitializeCar()']",[],[],"['If any part is declared abstract, then the whole type is considered abstract.|||If any part is declared sealed, then the whole type is considered sealed.|||If any part declares a base type, then the whole type inherits that class.|||Any class member declared in a partial definition are available to all other parts.|||All parts of a partial class should be in the same namespace.|||partial keyword.|||return type void .|||implicitly private.|||and cannot be virtual.|||&&&While working on a larger projects with more than one developer, it helps the developers to work on the same class simultaneously.|||Codes can be added or modified to the class without re-creating source files which are automatically generated by the IDE (i.e. Visual Studio).|||The definition as in file1.cs.|||The implementation as in file2.cs.|||']"
32,['C# sealed class and method'],"['In this tutorial, we will learn about the sealed class and method in C# with the help of examples.']",[],[],"['Sealed Class', 'Sealed Method', 'Why Sealed Class?']",[],[],"['Hence, we get an error', 'It helps to prevent security issues. For example,']","[""In C#, when we don't want a class to be inherited by another class, we can declare the class as a sealed class. "", 'A sealed class cannot have a derived class. We use the sealed keyword to create a sealed class. For example,', 'In the above example, we have created a sealed class Animal. Here, we are trying to derive Dog class from the Animal class.', 'Since a sealed class cannot be inherited, the program generates the following error:', 'We use a sealed keyword with an overridden method to create a sealed method. For example,', 'In the above example, we have overridden the makeSound() method inside the Dog class.', 'when we try to further override the makeSound() method inside the Puppy class. ', 'Note: Sealing an overridden method prevents method overriding in multilevel inheritance.', 'As class A cannot be inherited, class B cannot override and manipulate the methods of class A.', '2. One of the best uses of sealed classes is when you have a class with static members.']","[""During method overriding, if we don't want an overridden method to be further overridden by another class, we can declare it as a sealed method."", 'Notice that we have used the sealed keyword with makeSound(). This means the Puppy class that inherits the Dog class is not allowed to override makeSound().', '1. We use sealed classes to prevent inheritance. As we cannot inherit from a sealed class, the methods in the sealed class cannot be manipulated from other classes.', 'The Pens class of the System.Drawing namespace is one of the examples of the sealed class. The Pens class has static members that represent the pens with standard colors. Pens.Blue represents a pen with blue color. ']","['using System;', 'namespace SealedClass {', '  sealed class Animal {', '  class Dog : Animal {', '  class Program  {', '      Dog d1 = new Dog();  ', '      Console.ReadLine();', 'using System;', 'namespace SealedClass {', '  class Animal {', '  class Dog : Animal {', '  class Puppy : Dog {', '  class Program  {', '      Console.ReadLine();', 'sealed class A { ', 'class B : A {']","['    static void Main (string [] args) {', ""error CS0509: 'Dog': cannot derive from sealed type 'Animal'"", '    public virtual void makeSound() {', '    Console.WriteLine(""Animal Sound"");', '    sealed public override void makeSound() {', '      Console.WriteLine(""Dog Sound"");', '    public override void makeSound() {', '      Console.WriteLine(""Puppy Sound"");', '    static void Main (string [] args) {', 'sealed public override void makeSound() {', '  Console.WriteLine(""Dog Sound"");', ""error CS0239: 'Puppy.makeSound()': cannot override inherited member 'Dog.makeSound()' because it is sealed""]",[],[],[]
33,['C# interface '],"['In this tutorial, we will learn about the C# interface with the help of examples.']",[],[],"['Implementing an Interface', 'Implementing Multiple Interfaces', 'Using reference variable of an interface', 'Practical Example of Interface', 'Advantages of C# interface']",[],[],"['We use the interface keyword to create an interface. For example,', 'Here,', 'Output', 'Output', 'Now, Rectangle has to implement the method of both interfaces.', 'We can use the reference variable of an interface. For example,', 'Output', ""Let's see a more practical example of C# Interface."", 'Output']","['Here, the Rectangle class implements IPolygon. And, provides the implementation of the calculateArea(int a, int b) method.', 'Note: We must provide the implementation of all the methods of interface inside the class that implements it.', 'Unlike inheritance, a class can implement multiple interfaces. For example,', 'In the above example, we have two interfaces, IPolygon and IColor.', 'We have implemented both interfaces in the Rectangle class separated by ,.', 'Notice, we have used the reference variable of interface IPolygon. It points to the class Rectangle that implements it.', 'In the above program, we have created an interface named IPolygon. It has an abstract method calculateArea().', 'We have two classes Square and Rectangle that implement the IPolygon interface. ', 'The rule for calculating the area is different for each polygon. Hence, calculateArea() is included without implementation.', ""Now that we know what interfaces are, let's learn about why interfaces are used in C#.""]","['In C#, an interface is similar to abstract class. However, unlike abstract classes, all methods of an interface are fully abstract (method without body).', 'We cannot create objects of an interface. To use an interface, other classes must implement it. Same as in C# Inheritance, we use : symbol to implement an interface. For example,', 'In the above example, we have created an interface named IPolygon. The interface contains a method calculateArea(int a, int b) without implementation.', 'In the above example, we have created an interface named IPolygon. The interface contains a method calculateArea(int l, int b) without implementation.', 'Though we cannot create objects of an interface, we can still use the reference variable of the interface that points to its implemented class.', 'Any class that implements IPolygon must provide an implementation of calculateArea(). Hence, implementation of the method in class Rectangle is independent of the method in class Square.']","['interface IPolygon {', '  void calculateArea();', 'using System;', 'namespace CsharpInterface {', '  interface IPolygon {', '  class Rectangle : IPolygon {', '      int area = l * b;', '  class Program {', 'using System;', 'namespace CsharpInterface {', '  interface IPolygon {', '  interface IColor {', '    void getColor();', '      int area = a * b;', '    public void getColor() {', '            ', '  class Program {', '      r1.getColor();', 'using System;', 'namespace CsharpInterface {', '  interface IPolygon {', '  class Rectangle : IPolygon {', '      int area = l * b;', '  class Program {', 'IPolygon r1 = new Rectangle();', 'using System;', 'namespace CsharpInterface {', '  interface IPolygon {', '    void calculateArea();', '  class Rectangle : IPolygon {', '      int l = 30;', '      int b = 90;', '      int area = l * b;', '  class Square : IPolygon {', '      int l = 30;', '      int area = l * l;', '  class Program {', '      r1.calculateArea();', '      s1.calculateArea();']","['    void calculateArea(int l, int b);', '    public void calculateArea(int l, int b) {', '      Console.WriteLine(""Area of Rectangle: "" + area);', '    static void Main (string [] args) {', '      Rectangle r1 = new Rectangle();', '      r1.calculateArea(100, 200);', '    void calculateArea(int a, int b);', '  class Rectangle : IPolygon, IColor {', '    public void calculateArea(int a, int b) {', '      Console.WriteLine(""Area of Rectangle: "" + area);', '      Console.WriteLine(""Red Rectangle"");', '    static void Main (string [] args) {', '      Rectangle r1 = new Rectangle();', '      r1.calculateArea(100, 200);', 'class Rectangle : IPolygon, IColor {', '    void calculateArea(int l, int b);', '    public void calculateArea(int l, int b) {', '      Console.WriteLine(""Area of Rectangle: "" + area);', '    static void Main (string [] args) {', '      IPolygon r1 = new Rectangle();', '      r1.calculateArea(100, 200);', '    public void calculateArea() {', '      Console.WriteLine(""Area of Rectangle: "" + area);', '    public void calculateArea() {', '      Console.WriteLine(""Area of Square: "" + area);', '    static void Main (string [] args) {', '      Rectangle r1 = new Rectangle();  ', '      Square s1 = new Square();  ']","['Area of Rectangle: 20000', 'Area of Rectangle: 20000', 'Red Rectangle', 'Area of Rectangle: 20000', 'Area of Rectangle: 2700', 'Area of Square: 900']",[],"[""IPolygon is the name of the interface.|||By convention, interface starts with I so that we can identify it just by seeing its name.|||We cannot use access modifiers inside an interface.|||All members of an interface are public by default.|||An interface doesn't allow fields.|||Similar to abstract classes, interfaces help us to achieve abstraction in C#.|||Here, the method calculateArea() inside the interface, does not have a body. Thus, it hides the implementation details of the method.|||Interfaces provide specifications that a class (which implements it) must follow.|||In our previous example, we have used calculateArea() as a specification inside the interface IPolygon. This is like setting a rule that we should calculate the area of every polygon.|||Now any class that implements the IPolygon interface must provide an implementation for the calculateArea() method.|||Interfaces are used to achieve multiple inheritance in C#.|||Interfaces provide loose coupling(having no or least effect on other parts of code when we change one part of a code).|||In our previous example, if we change the implementation of calculateArea() in the Square class it does not affect the Rectangle class.|||""]"
34,['C# Method Overloading '],"['In this article, you’ll learn about method overloading in C# with the help of examples.']",[],[],"['1. By changing the Number of Parameters', '2. By changing the Data types of the parameters', '3. By changing the Order of the parameters']",[],[],"['We can perform method overloading in the following ways:', 'Output', 'In the above example, we have overloaded the display() method:', 'Output', 'Output']","['Here, the display() method is overloaded. These methods have the same name but accept different arguments.', 'We can overload the method if the number of parameters in the methods is different.', 'Based on the number of the argument passed during the method call, the corresponding method is called.', 'In the above program, we have overloaded the display() method with different types of parameters.', 'Based on the type of arguments passed during the method call, the corresponding method is called.', 'In the above program, we have overloaded the display() method with different orders of parameters.', 'Based on the order of arguments passed during the method call, the corresponding method is called.']","['In C#, there might be two or more methods in a class with the same name but different numbers, types, and order of parameters, it is called method overloading. For example:', 'Note: The return types of the above methods are not the same. It is because method overloading is not associated with return types. Overloaded methods may have the same or different return types, but they must have different parameters.', 'Here, we have two methods in a class with the same name - display(). It is possible to have more than one method with the same name because the number of parameters in methods is different. For example,', 'Here, we have two methods - display() with the same number of parameters. It is possible to have more than one display() method with the same number of parameters because the data type of parameters in methods is different. For example,', 'Here, we have two methods - display(). It is possible to have more than one display() method with the same number and type of parameter because the order of data type of parameters in methods is different. For example,']","['void display() { ... }', 'void display(int a) { ... }', 'void display(int a) {', 'void display(int a, int b) {', 'using System;', 'namespace MethodOverload {', '  class Program {  ', '    void display(int a) {', '      p1.display(100);', '      p1.display(100, 200);', '      Console.ReadLine();', 'void display(int a) {', 'void display(string b) {', 'using System;', 'namespace MethodOverload {', '  class Program {  ', '    void display(int a) {', '    void display(string b) {', '      p1.display(100);', '      p1.display(""Programiz"");', '      Console.ReadLine();', 'using System;', 'namespace MethodOverload {', '  class Program {  ', '      Console.ReadLine();']","['float display(int a, float b) { ... }', '      Console.WriteLine(""Arguments: "" + a);', '    void display(int a, int b) {', '      Console.WriteLine(""Arguments: "" + a + "" and "" + b);', '    static void Main(string[] args) {', '      Program p1 = new Program();', '      Console.WriteLine(""int type: "" + a);', '      Console.WriteLine(""string type: "" + b);', '    static void Main(string[] args) {', '      Program p1 = new Program();', '    void display(int a, string b) {', '      Console.WriteLine(""int: "" + a);', '      Console.WriteLine(""string: "" + b);', '    void display(string b, int a) {', '      Console.WriteLine(""string: "" + b);', '      Console.WriteLine(""int: "" + a);', '    static void Main(string[] args) {', '      Program p1 = new Program();', '      p1.display(100, ""Programming"");', '      p1.display(""Programiz"", 400);']","['Arguments: 100', 'Arguments: 100 and 200', 'int type: 100', 'string type: Programiz', 'int: 100', 'string: Programming', 'string: Programiz', 'int: 400']",[],"['one method has one parameter|||another has two parameter|||p1.display(100) - calls the method with single parameter|||p1.display(100, 200) - calls the method with two parameters|||p1.display(100) - calls method with int type parameter|||p1.display(""Programiz"") - calls method with string type parameter|||p1.display(100, ""Programming"") - calls method with int and string parameter respectively|||p1.display(""Programiz"", 400) - calls method with string and int parameter respectively|||']"
35,['C# Constructor Overloading'],"['In this article, you’ll learn about constructor overloading in C# with the help of examples.']",[],[],"['1. Different number of parameters', '2. Different types of parameters', '3. Different order of parameters']","['Example: Constructor Overloading with different number of parameter', 'Example: Constructor overloading with different types of parameters', 'Example: Constructor overloading with different order of parameters']",[],"['We can perform constructor overloading in the following ways:', 'Notice that,', 'Output', 'In the above example, we have overloaded the Car constructor:', 'Here,', 'Notice that,', 'Output', 'Here,', 'Notice that,', 'Output', 'Here,']","['Before you learn about constructor overloading, make sure to know about C# constructors.', 'We can overload the constructor if the number of parameters in a constructor are different.', 'Based on the number of the argument passed during the constructor call, the corresponding constructor is called.', 'In the above program, we have overloaded the constructor with different types of parameters.', 'In the above program, we have overloaded the constructors with different orders of parameters.']","['In C#, similar to method overloading, we can also overload constructors. For constructor overloading, there must be two or more constructors with the same name but different', 'Here, we have three constructors in class Car. It is possible to have more than one constructor because the number of parameters in constructors is different. ', 'Here, we have two Car constructors with the same number of parameters. We are able to create constructors with the same parameters because the data type inside the parameters is different.', 'Here, we have two constructors with the same number of parameters. This is possible because the order of data type in parameters is different.']","[' class Car {   ', '  Car() {', '  Car(string brand) {', 'using System;', '  class Car {   ', '    Car() {', '    Car(string brand) {', '      Car car = new Car();', '      Console.WriteLine();', '      Console.ReadLine();', 'class Car {   ', '  Car(string brand) {', '  Car(int price) {', 'using System;', '  class Car {   ', '    Car(string brand) {', '    Car(int price) {', '      Console.WriteLine();', '      Console.ReadLine();', '    ... ', 'using System;', '  class Car {   ', '      Console.WriteLine();', '      Console.ReadLine();']","['  Car(string brand, int price) {', '      Console.WriteLine(""Car constructor"");', '      Console.WriteLine(""Car constructor with one parameter"");', '      Console.WriteLine(""Brand: "" + brand);', '    static void Main(string[] args) {', '      Car car2 =  new Car(""Bugatti"");', '      Console.WriteLine(""Brand: "" + brand);', '      Console.WriteLine(""Price: "" + price);', '    static void Main(string[] args) {', '      Car car = new Car(""Lamborghini"");', '  Car(string brand, int price) {', '  Car(int speed, string color) {', '    Car(string brand, int price) {', '      Console.WriteLine(""Brand: "" + brand);', '      Console.WriteLine(""Price: "" + price);', '    Car(int speed, string color) {', '      Console.WriteLine(""Speed: "" + speed + "" km/hr"");', '      Console.WriteLine(""Color: "" + color);', '    static void Main(string[] args) {', '      Car car = new Car(""Bugatti"", 50000);', '      Car car2 =new Car(60, ""Red"");']","['Car constructor', 'Car constructor with one parameter', 'Brand: Bugatti', 'Brand: Lamborghini', 'Price: 50000', 'Brand: Bugatti', 'Price: 50000', 'Speed: 60 km/hr', 'Color: Red']",[],"['number of parameters|||types of parameters|||order of parameters|||Car() { } - has no parameter|||Car(string brand) { } - has one parameter|||Car(string brand, int price) { } - has two parameters|||Object car - calls constructor with one parameter|||Object car2 - calls constructor with two parameter |||Car(string brand) { } - has parameter of string type|||Car(int price) { } - has parameter of int type|||Car(string brand, int price) { } - string data type comes before int|||Car(int speed, string color) { } - int data type comes before string|||&&&one constructor has one parameter|||another has two parameter|||Object car - calls constructor with string type parameter|||Object car2 - calls constructor with int type parameter|||Object car - calls constructor with string and int parameter respectively|||Object car2 - calls constructor with int and string parameter respectively|||']"
36,['C# using'],"['In this tutorial, we will learn about C# using and using static to import external resources in a program with the help of examples.']",[],[],"['C# using to create an alias', 'C# using static directive']",['Example: C# using static with System.Math'],[],"['Output', 'In the above example, notice the line', 'To learn more about the namespace, visit C# namespaces.', 'Output', 'Here, Programiz will work just like System.Console.', 'Output', 'In the above example, notice the line,', 'Output', 'In the above example, notice the line,']","['In C#, we use the using keyword to import external resources (namespaces, classes, etc) inside a program. For example,', ""Also, because of this, we don't have to write the fully qualified name of the print statement."", 'We can also create aliases with the help of using in C#. For example,', 'In the above program, we have created an alias for System.Console.', 'This allows us to use the alias Programiz instead of System.Console.', 'We use the using static directive to import classes in our program.', 'Here, this line helps us to directly access the methods of the Math class.', 'We have used the Sqrt() method directly without specifying the Math class.']","['Here, we are importing the System namespace inside our program. This helps us to directly use the classes present in the System namespace.', 'In C#, we can also import classes in our program. Once we import these classes, we can use the static members (fields, methods) of the class.', ""If we don't use the using static System.Math in our program, we have to include the class name Math while using Sqrt(). For example,"", ""Here, we are using Math.Sqrt() to compute the square root of 9. This is because we haven't imported the System.Math in this program.""]","['using System;', 'namespace Program {', '  class Program1 {', 'using System;', 'namespace HelloWorld {', '  class Program {', 'using System;', 'using static System.Math;', 'namespace Program {  ', '  class Program1  {  ', '       \t ', '      double n  = Sqrt(9);', '      \t ', 'using static System.Math;', 'double n = Sqrt(9);', 'using System; ', 'namespace Program {  ', '  class Program1 {  ', 'double n = Math.Sqrt(9);']","['    static void Main(string[] args) {', '      Console.WriteLine(""Hello World!"");   ', 'System.Console.WriteLine(""Hello World!"");', 'Console.WriteLine(""Hello World!"");', 'using Programiz = System.Console;', '    static void Main(string[] args) {', '      Programiz.WriteLine(""Hello World!"");    ', 'using Programiz = System.Console;', 'Programiz.WriteLine(""Hello World!"");', '    public static void Main(string[] args)  {  ', '      Console.WriteLine(""Square root of 9 is "" + n);  ', '    public static void Main(string[] args) {  ', '      Console.WriteLine(""Square root of 9 is "" + n);  ']","['Hello World!', 'Hello World!', 'Square root of 9 is 3', 'Square root of 9 is 3']",[],[]
