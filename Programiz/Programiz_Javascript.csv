,main_headings,main_contents,video_headings,video_urls,image_urls,sub_headings_h2,sub_headings_h3,facts,definitions,explanations,snippets,codes,outputs,table_data,list_items
0,['Getting Started With JavaScript'],"['In this tutorial, you will learn about different ways to run JavaScript on your computer.']",[],[],"['//cdn.programiz.com/cdn/farfuture/oqGe_wKCeELsiWAtpmseeY0u3x0fPir9NtAnbdKND3M/mtime:1607671716/sites/tutorial2program/files/inspect-browser.png', '//cdn.programiz.com/cdn/farfuture/sSgUOBuwYmDyLqqkYwUWCwGtbsmRuvSUt3GubJXZvh8/mtime:1607671703/sites/tutorial2program/files/console-tab-browser.png', '//cdn.programiz.com/cdn/farfuture/ivdwl9Iidnr6KdIt_ns9VxaA468YouvWnLxAH8rnN84/mtime:1607671710/sites/tutorial2program/files/hello-node-ide.png', '//cdn.programiz.com/cdn/farfuture/LvL8s2JlUCmx9L07NMfmJZKCuv5u5KxpMeIea3apv60/mtime:1607671739/sites/tutorial2program/files/node-execute.png', '//cdn.programiz.com/cdn/farfuture/Ke_RMa_MsXh4hV_zCA-22g0NjtRxOYChZra2I_snct4/mtime:1607671749/sites/tutorial2program/files/run-node.png', '//cdn.programiz.com/cdn/farfuture/26vFasrULPxEvGiIlih2XFs60HIIK0T52CnZ-zwZKuc/mtime:1607671731/sites/tutorial2program/files/main-js.png', '//cdn.programiz.com/cdn/farfuture/OqNhYMEB4VzbL3Lfy2c8c7yiEF6EkJdDsghQOJKM9ZU/mtime:1607671724/sites/tutorial2program/files/main-html.png', '//cdn.programiz.com/cdn/farfuture/uG8HVw9vGjs0lMuLZMlf624pWKmVl2b5SxGUBL3jdbk/mtime:1607671696/sites/tutorial2program/files/console-tab.png']","['1. Using Console Tab of Web Browsers', 'Using Node.js', 'By Creating Web Pages']",[],[],"['JavaScript is a popular programming language that has a wide range of applications.', 'Because of its wide range of applications, you can run JavaScript in several ways:', 'Node is a back-end run-time environment for executing JavaScript code. To run JS using Node.js, follow these steps:', ""Now that you know how to run JavaScript, let's start learning the fundamentals of JavaScript from the next tutorial.""]","['JavaScript was previously used mainly for making webpages interactive such as form validation, animation, etc. Nowadays, JavaScript is also used in many other areas such as server-side development, mobile app development and so on.', 'All the popular web browsers have built-in JavaScript engines. Hence, you can run JavaScript on a browser. To run JavaScript on a browser,', 'Note: It is also possible to run JavaScript on the terminal/command prompt directly. For that, simply type node and press enter. Then you can start writing JS code.', ""JavaScript was initially created to make web pages interactive, that's why JavaScript and HTML go hand in hand. To run JS from a webpage, follow these steps:""]","['<!doctype html>', '<html lang=""en"">', '  <meta charset=""utf-8"">', '  <title>Programiz</title>', '  <script src=""""></script>', ""console.log('hello world');""]",[],[],[],"['Using console tab of web browsers|||Using Node.js|||By creating web pages|||&&&Open your favorite browser (here we will use Google Chrome).|||Open the developer tools by right clicking on an empty area and select Inspect. Shortcut: F12.|||Inspect Browser|||On the developer tools, go to the console tab. Then, write JavaScript code and press enter to run the code.|||Console tab in Browser|||Install the latest version of Node.js.|||Install an IDE/Text Editor like Visual Studio Code. In VS code, create a file > write JS code > save it with .js extension.|||Code in IDE|||Open up the terminal/command prompt > navigate to the file location > type node hello.js > hit enter.|||Execute JS code in node|||You will get output on the terminal.|||Open VS Code > Go to File > New File > Save it with .html extension. For example, main.html.|||Copy this doctype (minimum valid HTML code) and save it in the file.||||||<!doctype html>||||||<html lang=""en"">|||<head>|||  <meta charset=""utf-8"">||||||  <title>Programiz</title>|||</head>||||||<body>|||  <script src=""""></script>|||</body>|||</html>||||||Similarly create a JS file, write the following JS code and save it with .js extension like main.js.||||||console.log(\'hello world\');|||JS code in a file|||From inside the HTML file, we need to link the main.js file to use it. You can achieve that by adding the following code in main.html.||||||<script scr=""main.js""></script>|||HTML code in a file|||Open the main.html file using a browser.|||To check if our JS code ran or not, Right click on the web page > Inspect > Choose console tab.|||Showing JS code in the console tab|||']"
1,[' JavaScript Variables and Constants '],"['In this tutorial, you will learn about JavaScript variables and constants, and also how to initialize and use them with the help of examples.']",[],[],[],"['JavaScript Variables', 'JavaScript Constants']","['JavaScript Declare Variables', 'JavaScript var Vs let', 'JavaScript Initialize Variables', 'Change the Value of Variables', 'Rules for Naming JavaScript Variables']","[""Here, num is a variable. It's storing 5."", 'Here, x and y are variables.', 'We use the assignment operator = to assign a value to a variable.', 'Here, 5 is assigned to variable x.', 'You can also initialize variables during its declaration.', 'The value of a variable may vary. Hence, the name variable.', 'The rules for naming variables are:', 'Notes:', 'Once a constant is initialized, we cannot change its value.']","['In programming, a variable is a container (storage area) to hold data. For example,', 'In JavaScript, we use either var or let keyword to declare variables. For example,', 'Both var and let are used to declare variables. However, there are some differences between them.', ""In JavaScript, it's possible to declare variables in a single statement."", 'If you use a variable without initializing it, it will have an undefined value.', 'Here x is the variable name and since it does not contain any value, it will be undefined.', 'You will learn about undefined and other data types in the next tutorial in detail.', ""It's possible to change the value stored in the variable. For example,"", 'The const keyword was also introduced in the ES6(ES2015) version to create constants. For example,', 'Simply, a constant is a type of variable whose value cannot be changed.', 'Also, you cannot declare a constant without initializing\xa0it. For example,', 'Now that you know about variables, you will learn about different types of data a variable can store in the next tutorial.']","['Note: It is recommended we\xa0use let instead of var. However, there are a few browsers that do not support let. Visit JavaScript let browser support to learn more.', ""Note: If you are sure that the value of a variable won't change throughout the program, it's recommended to use const. However, there are a few browsers that do not support const. Visit JavaScript const browser support to learn more.""]","['let num = 5;', 'let x = 5;', 'let y = 6;', 'let x = 5, y = 6, z = 7;', 'console.log(x); // undefined', 'let x = 5; ', 'console.log(x); // 5', 'console.log(x); // 3', ""let a = 'hello';"", ""let _a = 'hello';"", ""let $a = 'hello';"", 'let y = ""hi"";', 'let Y = 5;', 'console.log(y); // hi', 'console.log(Y); // 5', 'const x = 5;', 'const x = 5;', 'console.log(x)', 'console.log(x)']","['let x; // x is the name of the variable', ""Let 1a = 'hello'; // this gives an error"", 'let new = 5; // Error! new is a keyword.', 'x = 10;  // Error! constant cannot be changed.', 'const x;  // Error! Missing initializer in const declaration.']",[],"['var|||let|||var is used in the older versions of JavaScript|||let is the new way of declaring variables starting ES6 (ES2015).|||var is function scoped (will be discussed in later tutorials).|||let is block scoped (will be discussed in later tutorials).|||For example, var x;|||For example, let y;']","['Though you can name variables in any way you want, it\'s a good practice to give a descriptive variable name. If you are using a variable to store the number of apples, it better to use apples or numberOfApples rather than x or n.|||In JavaScript, the variable names are generally written in camelCase if it has multiple words. For example, firstName, annualSalary, etc.|||&&&Variable names must start with either a letter, an underscore _, or the dollar sign $. For example,|||||||||//valid|||let a = \'hello\';|||let _a = \'hello\';|||let $a = \'hello\';||||||Variable names cannot start with numbers. For example,||||||//invalid|||Let 1a = \'hello\'; // this gives an error||||||JavaScript is case-sensitive. So y and Y are different variables. For example,||||||let y = ""hi"";|||let Y = 5;||||||console.log(y); // hi|||console.log(Y); // 5||||||Keywords cannot be used as variable names. For example,||||||//invalid|||let new = 5; // Error! new is a keyword.||||||']"
2,['JavaScript console.log()'],"['In this tutorial, you will learn about JavaScript console with the help of examples.']",[],[],[],"['JavaScript console.log()', 'console.log() Syntax']","['Example 1: Print a Sentence', 'Example 2: Print Values Stored in Variables']","['When you run the above code, 44 is printed on the console.', 'Its syntax is:', 'Here, the message refers to either a variable or a value.', 'Output', 'Output']","['To learn more about using a console, visit: JavaScript Getting Started.', 'Note: We will be using the console.log() method to display the output in our upcoming lessons.', 'The console object also has various methods other than console.log(). To learn more, visit JavaScript console.']","['All modern browsers have a web console for debugging. The console.log() method is used to write messages to these consoles. For example,', ""As you can see from these examples, console.log() makes it easier to see the value inside a variable. That's why it's commonly used for testing/debugging code.""]","['let sum = 44;', 'console.log(sum);   // 44', 'console.log(message);', 'console.log(""I love JS"");', ""const greet = 'Hello';"", ""const name = 'Jack';""]","[""console.log(greet + ' ' + name);""]","['I love JS', 'Hello Jack']",[],[]
3,['JavaScript Data Types'],"['In this tutorial, you will learn about the various data types available in JavaScript with the help of examples.']",[],[],[],"['JavaScript Data Types', 'JavaScript String', 'JavaScript Number', 'JavaScript BigInt', 'JavaScript Boolean', 'JavaScript undefined', 'JavaScript null', 'JavaScript Symbol', 'JavaScript Object', 'JavaScript Type', 'JavaScript typeof']",[],"['Here,', 'There are eight basic data types in JavaScript. They are:', 'For example,', 'Output', 'The code above suggests that the number variable is empty.', 'Note: null is not the same as NULL or Null.', 'Visit JavaScript Symbol to learn more.', 'You will learn about JavaScript Objects in later tutorials.']","['There are different types of data that we can use in a JavaScript program. For example,', 'Here, all data types except Object are primitive data types, whereas Object is non-primitive.', 'String is used to store text. In JavaScript, strings are surrounded by quotes:', 'Single quotes and double quotes are practically the same and you can use either of them.', 'You will learn about the use of backticks in the JavaScript String tutorial.', 'Number represents integer and floating numbers (decimals and exponentials). For example,', 'A number type can also be +Infinity, -Infinity, and NaN (not a number). For example,', 'A BigInt number is created by appending n to the end of an integer. For example,', 'You will learn more about booleans in the JavaScript Comparison and Logical Operators tutorial.', 'It is also possible to explicitly assign a variable value undefined. For example,', 'In JavaScript, null is a special value that represents empty or unknown value. For example,', 'This data type was introduced in a newer version of JavaScript (from ES2015).', ""Though value1 and value2 both contain 'hello', they are different as they are of the Symbol type."", 'An object is a complex data type that allows us to store collections of data. For example,', 'It also means that a variable can be of one data type and later it can be changed to another data type. For example,', 'To find the type of a variable, you can use the typeof operator. For example,', 'Notice that typeof returned ""object"" for the null type. This is a known issue in JavaScript since its first release.']","['Note: The Object data type (non-primitive type) can store collections of data, whereas primitive data type can only store a single data.', 'Backticks are generally used when you need to include variables or expressions into a string. This is done by wrapping variables or expressions with ${variable or expression} as shown above.', 'In JavaScript, Number type can only represent numbers less than (253 - 1) and more than -(253 - 1). However, if you need to use a larger number than that, you can use the BigInt data type.', 'Note: BigInt was introduced in the newer version of JavaScript and is not supported by many browsers including Safari. Visit JavaScript BigInt support to learn more.', 'This data type represents logical entities. Boolean represents one of two values: true or false. It is easier to think of it as a yes/no switch. For example,', 'The undefined data type represents value that\xa0is not assigned. If a variable is declared but the value is not assigned, then the value of that variable will be undefined. For example,', ""Note: It is recommended not to explicitly assign undefined to a variable. Usually, null is used to assign 'unknown' or 'empty' value to a variable."", 'A value having the data type Symbol can be referred to as a symbol value. Symbol is an immutable primitive value that is unique. For example,', ""JavaScript is a dynamically typed (loosely typed) language. JavaScript automatically determines the variables' data type for you.""]","['const x = 5;', 'const y = ""Hello"";', ""const name = 'ram';"", 'const name1 = ""hari"";', 'const number1 = 3;', 'const number2 = 3.433;', 'const number1 = 3/0;', 'const number2 = -3/0;', 'const number3 = ""abc""/3; ', 'console.log(number3);  // NaN', 'const result1 = value1 + 1n;', 'const result2 = value2 + 1; ', 'console.log(result2); ', 'const dataChecked = true;', 'const valueCounted = false;', 'let name;', 'let name = undefined;', 'const number = null;', 'const student = {', ""    firstName: 'ram',"", '    lastName: null,', '    class: 10', 'let data;', 'data = 5;', ""const name = 'ram';"", 'const number = 4;', 'const valueChecked = true;', 'const a = null;', 'typeof(a); // returns ""object""']","['const result = `The names are ${name} and ${name1}`;', 'console.log(number1); // Infinity', 'console.log(number2); // -Infinity', 'const value1 = 900719925124740998n;', 'console.log(result1); // ""900719925124740999n""', 'const value2 = 900719925124740998n;', 'data = ""JavaScript Programming"";', 'typeof(name); // returns ""string""', 'typeof(number); //returns ""number""', 'typeof(valueChecked); //returns ""boolean""']","['900719925124740999n', 'Uncaught TypeError: Cannot mix BigInt and other types']","['Data Types|||Description|||Example|||String|||represents textual data|||\'hello\', ""hello world!"" etc|||Number|||an integer or a floating-point number|||3, 3.234, 3e-2 etc.|||BigInt|||an integer with arbitrary precision|||900719925124740999n , 1n etc.|||Boolean|||Any of two values: true or false|||true and false|||undefined|||a data type whose variable is not initialized|||let a;|||null|||denotes a null value|||let a = null;|||Symbol|||data type whose instances are unique and immutable|||let value = Symbol(\'hello\');|||Object|||key-value pairs of collection of data|||let student = { };']","['5 is an integer data.|||""Hello"" is a string data.|||Single quotes: \'Hello\'|||Double quotes: ""Hello""|||Backticks: `Hello`|||']"
4,['JavaScript Operators'],"['In this tutorial, you will learn about different operators available in JavaScript and how to use them with the help of examples.']",[],[],[],"['What is an Operator?', 'JavaScript Operator Types', 'JavaScript Assignment Operators', 'JavaScript Arithmetic Operators', 'JavaScript Comparison Operators']","['Example 1: Arithmetic operators in JavaScript', 'Example 2: Comparison operators in JavaScript', 'JavaScript Logical Operators', 'Example 3: Logical Operators in JavaScript', 'JavaScript Bitwise Operators', 'JavaScript String Operators', 'Example 4: String operators in JavaScript', 'Other JavaScript Operators']","['Here, the = operator is used to assign value 5 to variable x.', ""Here's a list of commonly used assignment operators:"", 'Here, the + operator is used to add two operands.', 'Visit ++ and -- operator to learn more.', 'Output', 'Output']","['In JavaScript, an operator is a special symbol used to perform operations on operands (values and variables). For example,', 'Here + is an operator that performs addition, and 2 and 3 are operands.', 'Here is a list of different operators you will learn in this tutorial.', 'Assignment operators are used to assign values to variables. For example,', 'Arithmetic operators are used to perform arithmetic calculations. For example,', 'Comparison operators compare two values and return a boolean value, either true or false. For example,', 'Here, the comparison operator > is used to compare whether a is greater than b.', 'Logical operators perform logical operations and return a boolean value, either true or false. For example,', 'Here, && is the logical operator AND. Since both x < 6 and y < 5 are true, the result is true.', 'Bitwise operators perform operations on binary representations of numbers.', 'In JavaScript, you can also use the + operator to concatenate (join) two or more strings.', 'Note: When + is used with strings, it performs concatenation. However, when + is used with numbers, it performs addition.', ""Here's a list of other operators available in JavaScript. You will learn about these operators in later tutorials.""]","['Note: The commonly used assignment operator is =. You will understand other assignment operators such as +=, -=, *= etc. once we learn arithmetic operators.', 'Note: The ** operator was introduced in ECMAScript 2016 and some browsers may not support them. To learn more, visit JavaScript exponentiation browser support.', 'Comparison operators are used in decision-making and loops. You will learn about the use of comparison operators in detail in later tutorials.', 'Logical operators are used in decision making and loops. You will learn about the use of logical operators in detail in later tutorials.', 'Bitwise operators are rarely used in everyday programming. If you are interested, visit JavaScript Bitwise Operators to learn more.']","['2 + 3; // 5', 'const x = 5;', 'const number = 3 + 5; // 8', 'let x = 5;', 'let y = 3;', 'const a = 3, b = 2;', 'console.log(a > b); // true ', 'console.log(2 == 2); // true', ""console.log(2 == '2'); // true"", 'console.log(3 != 2); // true', 'console.log(2 === 2); // true', 'console.log(2 !== 2); // false', 'const x = 5, y = 3;', '(x < 6) && (y < 5); // true', 'console.log(!true); // false', ""let a = 'JavaScript';"", 'console.log(a);']","[""console.log('x + y = ', x + y);  // 8"", ""console.log('x - y = ', x - y);  // 2"", ""console.log('x * y = ', x * y);  // 15"", ""console.log('x / y = ', x / y);  // 1.6666666666666667"", ""console.log('x % y = ', x % y);   // 2"", ""console.log('++x = ', ++x); // x is now 6"", ""console.log('x++ = ', x++); // prints 6 and then increased to 7"", ""console.log('x = ', x);     // 7"", ""console.log('--x = ', --x); // x is now 6"", ""console.log('x-- = ', x--); // prints 6 and then decreased to 5"", ""console.log('x = ', x);     // 5"", ""console.log('x ** y =', x ** y);"", ""console.log('hello' != 'Hello'); // true"", ""console.log(2 === '2'); // false"", 'console.log(true && true); // true', 'console.log(true && false); // false', 'console.log(true || false); // true', ""a += ' tutorial';  // a = a + ' tutorial';""]","['true', 'false', 'true', 'false', 'helloworld', 'JavaScript tutorial']","['Operator|||Name|||Example|||=|||Assignment operator|||a = 7; // 7|||+=|||Addition assignment|||a += 5; // a = a + 5|||-=|||Subtraction Assignment|||a -= 2; // a = a - 2|||*=|||Multiplication Assignment|||a *= 3; // a = a * 3|||/=|||Division Assignment|||a /= 2; // a = a / 2|||%=|||Remainder Assignment|||a %= 2; // a = a % 2|||**=|||Exponentiation Assignment|||a **= 2; // a = a**2|||&&&Operator|||Name|||Example|||+|||Addition|||x + y|||-|||Subtraction|||x - y|||*|||Multiplication|||x * y|||/|||Division|||x / y|||%|||Remainder|||x % y|||++|||Increment (increments by 1)|||++x or x++|||--|||Decrement (decrements by 1)|||--x or x--|||**|||Exponentiation (Power)|||x ** y|||&&&Operator|||Description|||Example|||==|||Equal to: returns true if the operands are equal|||x == y|||!=|||Not equal to: returns true if the operands are not equal|||x != y|||===|||Strict equal to: true if the operands are equal and of the same type|||x === y|||!==|||Strict not equal to: true if the operands are equal but of different type or not equal at all|||x !== y|||>|||Greater than: true if left operand is greater than the right operand|||x > y|||>=|||Greater than or equal to: true if left operand is greater than or equal to the right operand|||x >= y|||<|||Less than: true if the left operand is less than the right operand|||x < y|||<=|||Less than or equal to: true if the left operand is less than or equal to the right operand|||x <= y|||&&&Operator|||Description|||Example|||&&|||Logical AND: true if both the operands are true, else returns false|||x && y||||||||Logical OR: true if either of the operands is true; returns false if both are false|||x || y|||!|||Logical NOT: true if the operand is false and vice-versa.|||!x|||&&&Operator|||Description|||&|||Bitwise AND|||||||Bitwise OR|||^|||Bitwise XOR|||~|||Bitwise NOT|||<<|||Left shift|||>>|||Sign-propagating right shift|||>>>|||Zero-fill right shift|||&&&Operator|||Description|||Example|||,|||evaluates multiple operands and returns the value of the last operand.|||let a = (1, 3 , 4); // 4|||?:|||returns value based on the condition|||(5 > 3) ? \'success\' : \'error\'; // ""success""|||delete|||deletes an object\'s property, or an element of an array|||delete x|||typeof|||returns a string indicating the data type|||typeof 3; // ""number""|||void|||discards the expression\'s return value|||void(x)|||in|||returns true if the specified property is in the object|||prop in object|||instanceof|||returns true if the specified object is of of the specified object type|||object instanceof object_type']",['Assignment Operators|||Arithmetic Operators|||Comparison Operators|||Logical Operators|||Bitwise Operators|||String Operators|||Other Operators|||']
5,['JavaScript Comments'],"['In this tutorial, you will learn about JavaScript comments, why you should use them, and how to use them with the help of examples.']",[],[],[],"['Single Line Comments', 'Multi-line Comments', 'Using Comments for Debugging', 'Make Code Easier to Understand']",[],"['There are two ways to add comments to code:', 'Here, // printing name on the console is a comment.', 'You can also use single line comment like this:']","['In JavaScript, any line that starts with // is a single line\xa0comment. For example,', 'In Javascript, any text between /* and */ is a multi-line comment. For example,', 'Comments can also be used to disable code to prevent it from being executed. For example,', 'As a JavaScript developer, you will not only write code but may also have to modify code written by other developers.', 'As a general rule of thumb, use comments to explain why you did something rather than how you did something, and you are good.']","['JavaScript comments are hints that a programmer can add to make their code easier to read and understand. They are completely ignored by JavaScript engines.', 'Since the rest of the source code will be used to implement the rules of the game, the comment above is a good example where you might use a multi-line comment.', 'If you get an error while running the program, instead of removing the error-prone code, you can use comments to disable it from being executed; this can be a valuable debugging tool.', ""Pro Tip: Remember the shortcut for using comments; it can be really helpful. For most code editors, it's Ctrl + / for Windows and Cmd + / for Mac."", 'If you write comments on your code, it will be easier for you to understand the code in the future. Also, it will be easier for your fellow developers to understand the code.', ""Note: Comments shouldn't be the substitute for a way to explain poorly written code in English. You should always write well-structured and self-explanatory code. And, then use comments.""]","['name = ""Jack"";', 'console.log(""Hello "" + name);', 'name = ""Jack"";', 'console.log(""some code"");', 'console.log(""Error code);', 'console.log(""other code"");', 'console.log(""some code"");', 'console.log(""other code"");']","['console.log(""Hello "" + name);  // printing name on the console', '/* The following program contains the source code for a game called Baghchal. ', 'Baghchal is a popular board game in Nepal where two players choose either sheep or tiger. It is played on a 5x5 grid.', 'For the player controlling the tiger to win, they must capture all the sheep. There are altogether 4 tigers on the board.', 'For the sheep to win, all tigers must be surrounded and cornered so that they cannot move. The player controlling the sheep has 20 sheep at his disposal.']",[],[],['// - Single Line Comments|||/* */ -Multi-line Comments|||']
6,['JavaScript Type Conversions'],"['In this tutorial, you will learn about type conversions in JavaScript with the help of examples.']",[],[],[],"['JavaScript Implicit Conversion', 'JavaScript Explicit Conversion']","['Example 1: Implicit Conversion to String', 'Example 2: Implicit Conversion to Number', 'Example 3: Non-numeric String Results to NaN', 'Example 4: Implicit Boolean Conversion to Number', 'Example 5: null Conversion to Number', 'Example 6: undefined used with number, boolean or null', '1. Convert to Number Explicitly', '2. Convert to String Explicitly', '3. Convert to Boolean Explicitly', 'JavaScript Type Conversion Table']","['There are two types of type conversion in JavaScript.', 'Here are some common methods of explicit conversions.', 'To convert other data types to a boolean, you can use Boolean().', 'All other values give true. For example,', 'Related Examples:']","['Note: When a number is added to a string, JavaScript converts the number to a string before concatenation.', 'In JavaScript, explicit type conversions are done using built-in methods.', 'To convert numeric strings and boolean values to numbers, you can use Number(). For example,', 'In JavaScript, empty strings and null values return 0. For example,', 'If a string is an invalid number, the result will be NaN. For example,', 'To convert other data types to strings, you can use either String() or toString(). For example,', 'Note: String() takes null and undefined and converts them to string. However, toString() gives error when null are passed.', ""In JavaScript, undefined, null, 0, NaN, '' converts to false. For example,"", 'The table shows the conversion of different values to String, Number, and Boolean in JavaScript.', 'You will learn about the conversion of objects and arrays to other data types in later tutorials.']","['In programming, type conversion is the process of converting data of one type to another. For example: converting String data to Number.', 'In certain situations, JavaScript automatically converts one data type to another (to the right type). This is known as implicit conversion.', 'Note: JavaScript considers 0 as false and all non-zero number as true. And, if true is converted to a number, the result is always 1.', 'You can also convert one data type to another as per your needs. The type conversion that you do manually is known as explicit type conversion.', 'Note: You can also generate numbers from strings using parseInt(), parseFloat(), unary operator + and Math.floor(). For example,']","['let result;', ""result = '3' + 2; "", 'console.log(result) // ""32""', ""result = '3' + true; "", ""result = '3' + undefined; "", ""result = '3' + null; "", 'let result;', ""result = '4' - '2'; "", 'console.log(result); // 2', ""result = '4' - 2;"", 'console.log(result); // 2', ""result = '4' * 2;"", 'console.log(result); // 8', ""result = '4' / 2;"", 'console.log(result); // 2', 'let result;', ""result = 'hello' - 'world';"", 'console.log(result); // NaN', ""result = '4' - 'hello';"", 'console.log(result); // NaN', 'let result;', ""result = '4' - true;"", 'console.log(result); // 3', 'result = 4 + true;', 'console.log(result); // 5', 'result = 4 + false;', 'console.log(result); // 4', 'let result;', 'result = 4 + null;', 'console.log(result);  // 4', 'result = 4 - null;', 'console.log(result);  // 4', 'let result;', 'result = 4 + undefined;', 'console.log(result);  // NaN', 'result = 4 - undefined;', 'console.log(result);  // NaN', 'result = true + undefined;', 'console.log(result);  // NaN', 'result = null + undefined;', 'console.log(result);  // NaN', 'let result;', ""result = Number('324');"", 'console.log(result); // 324', ""result = Number('324e-1')  "", 'console.log(result); // 32.4', 'result = Number(true);', 'console.log(result); // 1', 'result = Number(false);', 'console.log(result); // 0', 'let result;', 'result = Number(null);', 'console.log(result);  // 0', ""let result = Number(' ')"", 'console.log(result);  // 0', 'let result;', ""result = Number('hello');"", 'console.log(result); // NaN', 'result = Number(undefined);', 'console.log(result); // NaN', 'result = Number(NaN);', 'console.log(result); // NaN', 'let result;', ""result = parseInt('20.01');"", 'console.log(result); // 20', ""result = parseFloat('20.01');"", 'console.log(result); // 20.01', ""result = +'20.01';"", 'console.log(result); // 20.01', ""result = Math.floor('20.01');"", 'console.log(result); // 20', 'let result;', 'result = String(324);', 'console.log(result);  // ""324""', 'result = String(2 + 4);', 'console.log(result); // ""6""', 'result = String(null);', 'console.log(result); // ""null""', 'result = String(undefined);', 'result = String(NaN);', 'console.log(result); // ""NaN""', 'result = String(true);', 'console.log(result); // ""true""', 'result = String(false);', 'result = (324).toString();', 'console.log(result); // ""324""', 'result = true.toString();', 'console.log(result); // ""true""', 'let result;', ""result = Boolean('');"", 'console.log(result); // false', 'result = Boolean(0);', 'console.log(result); // false', 'result = Boolean(undefined);', 'console.log(result); // false', 'result = Boolean(null);', 'console.log(result); // false', 'result = Boolean(NaN);', 'console.log(result); // false', 'result = Boolean(324);', 'console.log(result); // true', ""result = Boolean('hello');"", 'console.log(result); // true', ""result = Boolean(' ');"", 'console.log(result); // true']","['console.log(result); // ""3undefined""', 'console.log(result); // ""undefined""']",[],"['Value|||String Conversion|||Number Conversion|||Boolean Conversion|||1|||""1""|||1|||true|||0|||""0""|||0|||false|||""1""|||""1""|||1|||true|||""0""|||""0""|||0|||true|||""ten""|||""ten""|||NaN|||true|||true|||""true""|||1|||true|||false|||""false""|||0|||false|||null|||""null""|||0|||false|||undefined|||""undefined""|||NaN|||false|||\'\'|||""""|||0|||false|||\' \'|||"" ""|||0|||true']",['Implicit Conversion - automatic type conversion|||Explicit Conversion - manual type conversion|||JavaScript Dates to Numbers|||JavaScript Dates to Strings|||']
7,['JavaScript Comparison and Logical Operators '],"['In this tutorial, you will learn about the Comparison operators and Logical operators with the help of examples.']",[],[],[],"['JavaScript Comparison Operators', 'JavaScript Logical Operators']","['Example 1: Equal to Operator', 'Example 2: Not Equal to Operator', 'Example 3: Strict Equal to Operator', 'Example 4: Strict Not Equal to Operator', 'Example 5: Greater than Operator', 'Example 6: Greater than or Equal to Operator', 'Example 7: Less than Operator', 'Example 8: Less than or Equal to Operator', 'Example 9: Logical AND Operator', 'Example 10: Logical OR Operator', 'Example 11: Logical NOT Operator']","['== evaluates to true if the operands are equal.', '!= evaluates to true if the operands are not equal.', 'Note: The difference between == and === is that:', 'Logical operators perform logical operations: AND, OR and NOT.', '! evaluates to true if the operand is false and vice-versa.']","[""!== evaluates to true if the operands are strictly not equal. It's the complete opposite of strictly equal ===."", ""In the above example, 2 != '2' gives true. It's because their types are different even though they have the same value."", '> evaluates to true if the left operand is greater than the right operand.', '>= evaluates to true if the left operand is greater than or equal to the right operand.', '< evaluates to true if the left operand is less than the right operand.', '<= evaluates to true if the left operand is less than or equal to the right operand.', '&& evaluates to true if both the operands are true, else evaluates to false.', 'Note: You can also use logical operators with numbers. In JavaScript, 0 is false and all non-zero values are true.', '|| evaluates to true if either of the operands is true. If both operands are false, the result is false.']","['Comparison operators compare two values and give back a boolean value: either true or false. Comparison operators are used in decision making and loops.', 'Note: In JavaScript, == is a comparison operator, whereas = is an assignment operator. If you mistakenly use = instead of ==, you might get unwanted result.', ""=== evaluates totrue if the operands are equal and of the same type. Here 2 and '2' are the same numbers but the data type is different. And === also checks for the data type while comparing."", '== evaluates to true if the operands are equal, however, === evaluates to true only if the operands are equal and of the same type']","[""const a = 3, b = 'hello';"", 'console.log(a != 2); // true', 'const a = 2;', 'console.log(a === 2); // true', "" const a = 2, b = 'hello';"", 'console.log(a !== 2); // false', 'const a = 3;', 'console.log(a > 2); // true', 'const a = 3;', 'console.log(a >= 3); //true', 'const a = 3, b = 2;', 'console.log(a < 2); // false', 'console.log(b < 3); // true', 'const a = 2;', 'console.log(a <= 3) // true', 'console.log(a <= 2); // true', 'const a = true, b = false;', 'const c = 4;', 'console.log(a && a); // true', 'console.log(a && b);  // false', 'console.log(a || b); // true', 'console.log(b || b); // false', 'const a = true, b = false;', 'console.log(!a); // false', 'console.log(!b); // true']","[""const a = 5, b = 2, c = 'hello';"", 'console.log(a == 5);     // true', ""console.log(b == '2');   // true"", ""console.log(c == 'Hello');  // false"", ""console.log(b != 'Hello'); // true"", ""console.log(a === '2'); // false"", ""console.log(b !== 'Hello'); // true"", 'console.log((c > 2) && (c < 2)); // false', 'const a = true, b = false, c = 4;', 'console.log((c>2) || (c<2)); // true']",[],"[""Operator|||Description|||Example|||==|||Equal to: true if the operands are equal|||5==5; //true|||!=|||Not equal to: true if the operands are not equal|||5!=5; //false|||===|||Strict equal to: true if the operands are equal and of the same type|||5==='5'; //false|||!==|||Strict not equal to: true if the operands are equal but of different type or not equal at all|||5!=='5'; //true|||>|||Greater than: true if the left operand is greater than the right operand|||3>2; //true|||>=|||Greater than or equal to: true if the left operand is greater than or equal to the right operand|||3>=3; //true|||<|||Less than: true if the left operand is less than the right operand|||3<2; //false|||<=|||Less than or equal to: true if the left operand is less than or equal to the right operand|||2<=2; //true|||&&&Operator|||Description|||Example|||&&|||Logical AND: true if both the operands/boolean values are true, else evaluates to false|||true && false; // false||||||||Logical OR: true if either of the operands/boolean values is true. evaluates to false if both are false|||true || false; // true|||!|||Logical NOT: true if the operand is false and vice-versa.|||!true; // false""]",[]
8,['JavaScript if...else Statement'],"['In this tutorial, you will learn about the if...else statement to create decision making programs with the help of examples.']",[],[],"['//cdn.programiz.com/sites/tutorial2program/files/js-if-statement_0.png', '//cdn.programiz.com/sites/tutorial2program/files/js-if-else-statement.png', '//cdn.programiz.com/sites/tutorial2program/files/js-if-else-if-statement_0.png']","['JavaScript if Statement', 'JavaScript if...else statement', 'JavaScript if...else if statement', 'Nested if...else Statement', 'Body of if...else With Only One Statement', 'More on Decision Making']","['Example 1: if Statement', 'Example 2: if…else Statement', 'Example 3: if...else if Statement', 'Example 4: Nested if...else Statement']","['In JavaScript, there are three forms of the if...else statement.', 'The syntax of the if statement is:', 'Note: The code inside { } is the body of the if statement.', 'Output 1', 'Output 2', 'If the condition is evaluated to true,', '\n\tIf the condition is evaluated to false,', 'Output 1', 'Output 2', 'The syntax of the if...else if...else statement is:', 'Output', 'Output', 'Output']","['In such situations, you can use the JavaScript if...else statement to create a program that can make decisions.', 'The if statement evaluates the condition inside the parenthesis ().', 'Since console.log(""The if statement is easy""); is outside the body of the if statement, it is always executed.', 'An if statement can have an optional else clause. The syntax of the if...else statement is:', 'The if..else statement evaluates the condition inside the parenthesis.', 'You can also use an if...else statement inside of an if...else statement. This is known as nested if...else statement.', 'If the body of if...else has only one statement, we can omit { } in our programs. For example, you can replace']","['In computer programming, there may arise situations where you have to run a block of code among more than one alternatives. For example, assigning grades A, B or C based on marks obtained by a student.', 'Suppose the user entered 2. In this case, the condition number > 0 evaluates to true. And, the body of the if statement is executed.', 'Suppose the user entered -1. In this case, the condition number > 0 evaluates to false. Hence, the body of the if statement is skipped.', 'Comparison and logical operators are used in conditions. So to learn more about comparison and logical operators, you can visit JavaScript Comparison and Logical Operators.', 'Suppose the user entered 2. In this case, the condition number > 0 evaluates to true. Hence, the body of the if statement is executed and the body of the else statement is skipped.', 'Suppose the user entered -1. In this case, the condition number > 0 evaluates to false. Hence, the body of the else statement is executed and the body of the if statement is skipped.', 'The if...else statement is used to execute a block of code among two alternatives. However, if you need to make a choice between more than two alternatives, if...else if...else can be used.', 'Suppose the user entered 0, then the first test condition number > 0 evaluates to false. Then, the second test condition number == 0 evaluates to true and its corresponding block is executed.', 'Suppose the user entered 5. In this case, the condition number >= 0 evaluates to true, and the control of the program goes inside the outer if statement.', ""Then, the test condition, number == 0, of the inner if statement is evaluated. Since it's false, the else clause of the inner if statement is executed."", 'Note: As you can see, nested if...else makes our logic complicated and we should try to avoid using nested if...else whenever possible.', 'If you need to make a choice between more than one alternatives based on a given test condition, the switch statement can be used. To learn more, visit JavaScript switch.']","['if (condition) {', 'if (number > 0) {', 'if (condition) {', '} else {', 'if (number > 0) {', 'if (condition1) {', '} else if (condition2){', '} else {', 'if (number > 0) {', 'else if (number == 0) {', 'if (number >= 0) {', '    if (number == 0) {', '    } else {', '} else {', 'const number = 2;', 'if (number > 0) {', '} else {', 'const number = 2;', 'if (number > 0)']","['const number = prompt(""Enter a number: "");', '  console.log(""The number is positive"");', 'console.log(""The if statement is easy"");', 'const number = prompt(""Enter a number: "");', '  console.log(""The number is positive"");', '  console.log(""The number is either a negative number or 0"");', 'console.log(""The if...else statement is easy"");', 'const number = prompt(""Enter a number: "");', '    console.log(""The number is positive"");', '  console.log(""The number is 0"");', '    console.log(""The number is negative"");', 'console.log(""The if...else if...else statement is easy"");', 'const number = prompt(""Enter a number: "");', '        console.log(""You entered number 0"");', '        console.log(""You entered a positive number"");', '    console.log(""You entered a negative number"");', '    console.log(""The number is positive."");', '   console.log(""The number is negative or zero."");', '    console.log(""The number is positive."");', '   console.log(""The number is negative or zero."");']","['Enter a number: 2', 'The number is positive', 'The if statement is easy', 'Enter a number: -1', 'The if statement is easy', 'Enter a number: 2', 'The number is positive', 'The if...else statement is easy', 'Enter a number: -1', 'The number is either a negative number or 0', 'The if...else statement is easy', 'Enter a number: 0', 'The number is 0', 'The if...else if...else statement is easy', 'Enter a number: 5', 'You entered a positive number', 'The number is positive.']",[],"['If condition1 evaluates to true, the code block 1 is executed.|||If condition1 evaluates to false, then condition2 is evaluated.|||If the condition2 is true, the code block 2 is executed.|||If the condition2 is false, the code block 3 is executed.||||||If the condition2 is true, the code block 2 is executed.|||If the condition2 is false, the code block 3 is executed.|||&&&if statement|||if...else statement|||if...else if...else statement|||If the condition is evaluated to true, the code inside the body of if is executed.|||If the condition is evaluated to false, the code inside the body of if is skipped.|||the code inside the body of if is executed|||the code inside the body of else is skipped from execution|||the code inside the body of else is executed|||the code inside the body of if is skipped from execution|||']"
9,['JavaScript for loop'],"['In this tutorial, you will learn about the loops and about for loops in JavaScript with the help of examples.']",[],[],['//cdn.programiz.com/sites/tutorial2program/files/javascript-for-loop.png'],['JavaScript for loop'],"['Example 1: Display a Text Five Times', 'Example 2: Display Numbers from 1 to 5', 'Example 3: Display Sum of n Natural Numbers', 'JavaScript Infinite for loop']","['In programming, loops are used to repeat a block of code.', 'The syntax of the for loop is:', 'Here,', 'Output', 'Here is how this program works.', 'Output', 'Here is how this program works.', 'Output']","['This tutorial focuses on JavaScript for loop. You will learn about the other type of loops in the upcoming tutorials.', 'To learn more about the conditions, visit JavaScript Comparison and Logical Operators.', 'When i becomes 101, the test condition is false and sum will be equal to 0 + 1 + 2 + ... + 100.', 'The above program to add sum of natural numbers can also be written as', 'Although both ways are correct, you should try to make your code more readable.', 'If the test condition in a for loop is always true, it runs forever (until memory is full). For example,', 'In the above program, the condition is always true which will then run the code for infinite times.', 'In the next tutorial, you will learn about while and do...while loop.']","[""For example, if you want to show a message 100 times, then you can use a loop. It's just a simple example; you can achieve much more with loops."", 'Here, the value of sum is 0 initially. Then, a for loop is iterated from i = 1 to 100. In each iteration, i is added to sum and its value is increased by 1.', 'This program also gives the same output as the Example 3. You can accomplish the same task in many different ways in programming; programming is all about logic.']","['const n = 5;', 'for (let i = 1; i <= n; i++) {', 'const n = 5;', 'for (let i = 1; i <= n; i++) {', 'let sum = 0;', 'const n = 100', 'for (let i = 1; i <= n; i++) {', ""console.log('sum:', sum);"", 'let sum = 0;', 'const n = 100;', 'for(let i = n; i >= 1; i-- ) {', '    sum += i; // sum = sum + i', ""console.log('sum:',sum);"", 'for(let i = 1; i > 0; i++) {']","['for (initialExpression; condition; updateExpression) {', '    console.log(`I love JavaScript.`);', '    console.log(i);     // printing the value of i']","['I love JavaScript.', 'I love JavaScript.', 'I love JavaScript.', 'I love JavaScript.', 'I love JavaScript.', '1', '2', '3', '4', '5', 'sum: 5050']",['Iteration|||Variable|||Condition: i <= n|||Action|||1st|||i = 1n = 5|||true|||I love JavaScript. is printed.i is increased to 2.|||2nd|||i = 2n = 5|||true|||I love JavaScript. is printed.i is increased to 3.|||3rd|||i = 3n = 5|||true|||I love JavaScript. is printed.i is increased to 4.|||4th|||i = 4n = 5|||true|||I love JavaScript. is printed.i is increased to 5.|||5th|||i = 5n = 5|||true|||I love JavaScript. is printed.i is increased to 6.|||6th|||i = 6n = 5|||false|||The loop is terminated.|||&&&Iteration|||Variable|||Condition: i <= n|||Action|||1st|||i = 1n = 5|||true|||1 is printed.i is increased to 2.|||2nd|||i = 2n = 5|||true|||2 is printed.i is increased to 3.|||3rd|||i = 3n = 5|||true|||3 is printed.i is increased to 4.|||4th|||i = 4n = 5|||true|||4 is printed.i is increased to 5.|||5th|||i = 5n = 5|||true|||5 is printed.i is increased to 6.|||6th|||i = 6n = 5|||false|||The loop is terminated.'],"['If the condition is false, the for loop is terminated.|||If the condition is true, the block of code inside of the for loop is executed.|||&&&The initialExpression initializes and/or declares variables and executes only once.|||The condition is evaluated.|||If the condition is false, the for loop is terminated.|||If the condition is true, the block of code inside of the for loop is executed.||||||The updateExpression updates the value of initialExpression when the condition is true.|||The condition is evaluated again. This process continues until the condition is false.|||']"
10,['JavaScript while and do...while Loop'],"['In this tutorial, you will learn about while loop and do...while loop with the help of examples.']",[],[],"['//cdn.programiz.com/sites/tutorial2program/files/javascript-while-loop.png', '//cdn.programiz.com/sites/tutorial2program/files/javascript-do-while-loop.png']","['JavaScript while Loop', 'Flowchart of while Loop', 'JavaScript do...while Loop', 'for Vs while Loop']","['Example 1: Display Numbers from 1 to 5', 'Example 2: Sum of Positive Numbers Only', 'Flowchart of do...while Loop', 'Example 3: Display Numbers from 1 to 5', 'Example 4: Sum of Positive Numbers', 'Infinite while Loop']","['The syntax of the while loop is:', 'Here,', 'Output', 'Here is how this program works.', 'Output', 'In the above program, the user is prompted to enter a number.', 'The syntax of do...while loop is:', 'Here,', ""Let's see the working of do...while loop."", 'Output', 'Here is how this program works.', 'Output 1', 'Output 2', 'Here is an example of an infinite do...while loop.']","['To learn more about the conditions, visit JavaScript Comparison and Logical Operators.', 'When the user enters a negative number, the loop terminates. Finally, the total sum is displayed.', 'The body of the do...while loop runs only once if the user enters a negative number.', 'If the condition of a loop is always true, the loop runs for infinite times (until the memory is full). For example,', 'In the above programs, the condition is always true. Hence, the loop body will run for infinite times.', 'A for loop is usually used when the number of iterations is known. For example,', 'And while and do...while loops are usually used when the number of iterations are unknown. For example,']","[""In programming, loops are used to repeat a block of code. For example, if you want to show a message 100 times, then you can use a loop. It's just a simple example; you can achieve much more with loops."", 'In the previous tutorial, you learned about the JavaScript for loop. Here, you are going to learn about while and do...while loops.', ""Here, parseInt() is used because prompt() takes input from the user as a string. And when numeric strings are added, it behaves as a string. For example, '2' + '3' = '23'. So parseInt() converts a numeric string to number."", 'The while loop continues until the user enters a negative number. During each iteration, the number entered by the user is added to the sum variable.', 'Note: do...while loop is similar to the while loop. The only difference is that in do…while loop, the body of loop is executed at least once.', 'Here, the do...while loop continues until the user enters a negative number. When the number is negative, the loop terminates; the negative number is not added to the sum variable.']","['while (condition) {', 'let i = 1, n = 5;', 'while (i <= n) {', '    console.log(i);', '    i += 1;', 'let sum = 0;', 'while(number >= 0) {', '    sum += number;', '} while(condition)', 'let i = 1;', 'const n = 5;', '    console.log(i);', '    i++;', '} while(i <= n);', 'let sum = 0;', 'let number = 0;', '    sum += number;', '} while(number >= 0)', 'while(true){', 'const count = 1;', '} while(count == 1)', 'for (let i = 1; i <=5; ++i) {', 'while (condition) {']","[""let number = parseInt(prompt('Enter a number: '));"", ""    number = parseInt(prompt('Enter a number: '));"", 'console.log(`The sum is ${sum}.`);', ""    number = parseInt(prompt('Enter a number: '));"", 'console.log(`The sum is ${sum}.`);']","['1', '2', '3', '4', '5', 'Enter a number: 2', 'Enter a number: 5', 'Enter a number: 7', 'Enter a number: 0', 'Enter a number: -3', 'The sum is 14.', '1', '2', '3', '4', '5', 'Enter a number: 2', 'Enter a number: 4', 'Enter a number: -500', 'The sum is 6.', 'Enter a number: -80', 'The sum is 0.']",['Iteration|||Variable|||Condition: i <= n|||Action|||1st|||i = 1n = 5|||true|||1 is printed. i is increased to 2.|||2nd|||i = 2n = 5|||true|||2 is printed. i is increased to 3.|||3rd|||i = 3n = 5|||true|||3 is printed. i is increased to 4.|||4th|||i = 4n = 5|||true|||4 is printed. i is increased to 5.|||5th|||i = 5n = 5|||true|||5 is printed. i is increased to 6.|||6th|||i = 6n = 5|||false|||The loop is terminated|||&&&Iteration|||Variable|||Condition: i <= n|||Action|||\xa0|||i = 1n = 5|||not checked|||1 is printed. i is increased to 2.|||1st|||i = 2n = 5|||true|||2 is printed. i is increased to 3.|||2nd|||i = 3n = 5|||true|||3 is printed. i is increased to 4.|||3rd|||i = 4n = 5|||true|||4 is printed. i is increased to 5.|||4th|||i = 5n = 5|||true|||5 is printed. i is increased to 6.|||5th|||i = 6n = 5|||false|||The loop is terminated'],"['A while loop evaluates the condition inside the parenthesis ().|||If the condition evaluates to true, the code inside the while loop is executed.|||The condition is evaluated again.|||This process continues until the condition is false.|||When the condition evaluates to false, the loop stops.|||The body of the loop is executed at first. Then the condition is evaluated.|||If the condition evaluates to true, the body of the loop inside the do statement is executed again.|||The condition is evaluated once again.|||If the condition evaluates to true, the body of the loop inside the do statement is executed again.|||This process continues until the condition evaluates to false. Then the loop stops.|||']"
11,['JavaScript break Statement'],"['In this tutorial, you will learn about the break statement with the help of examples.']",[],[],['//cdn.programiz.com/sites/tutorial2program/files/javascript-break-statement.png'],"['Working of JavaScript break Statement', 'Example 1: break with for Loop', 'Example 2: break with while Loop', 'break with Nested Loop', 'JavaScript Labeled break']",[],"['The syntax of the break statement is:', 'Note: label is optional and rarely used.', 'Output', 'To learn more about for loop, visit JavaScript for loop.', 'Output', 'Here the break statement is used as:', 'To learn more about while loop, visit JavaScript while loop.', 'Output', 'Hence, the value of i = 2 is never displayed in the output.']","['The break statement is used to terminate the loop immediately when it is encountered.', 'In the above program, the for loop is used to print the value of i in each iteration. The break statement is used as:', 'In the above program, the user enters a number. The while loop is used to print the total sum of numbers entered by the user.', 'Thus, the while loop continues until the user enters a negative number.', 'When break is used inside of two nested loops, break terminates the inner loop. For example,', 'When using nested loops, you can also terminate the outer loop with a label statement.', 'However labeled break is rarely used in JavaScript because this makes the code harder to read and understand.', 'If you want to learn more about the labeled break statements, visit labeled break.', 'The break statement is also used with switch statements. To learn more, visit JavaScript switch statement.']","[""This means, when i is equal to 3, the break statement terminates the loop. Hence, the output doesn't include values greater than or equal to 3."", 'Note: The break statement is almost always used with decision-making statements. To learn more, visit JavaScript if...else Statement.', 'When the user enters a negative number, here -5, the break statement terminates the loop and the control flow of the program goes outside the loop.', 'In the above program, when i == 2, break statement executes. It terminates the inner loop and control flow of the program moves to the outer loop.']","['break [label];', 'for (let i = 1; i <= 5; i++) {', '    if (i == 3) {', '        break;', '    console.log(i);', 'if(i == 3) {', '    break;', 'let sum = 0, number;', 'while(true) {', '    if(number < 0) {', '        break;', '    sum += number;', 'if(number < 0) {', '    break;', 'for (let i = 1; i <= 3; i++) {', '        if (i == 2) {', '          break;', '        }']","[""    number = parseInt(prompt('Enter a number: '));"", 'console.log(`The sum is ${sum}.`);', '    for (let j = 1; j <= 3; j++) {', '        console.log(`i = ${i}, j = ${j}`);']","['1', '2', 'Enter a number: 1', 'Enter a number: 2', 'Enter a number: 3', 'Enter a number: -5', 'The sum is 6. ', 'i = 1, j = 1', 'i = 1, j = 2', 'i = 1, j = 3', 'i = 3, j = 1', 'i = 3, j = 2', 'i = 3, j = 3']",[],[]
12,['JavaScript continue Statement'],"['In this tutorial, you will learn about the continue statement with the help of examples.']",[],[],['//cdn.programiz.com/sites/tutorial2program/files/working-javascript-continue-statement.png'],"['Working of JavaScript continue Statement', 'continue with for Loop', 'continue with while Loop', 'continue with Nested Loop', 'JavaScript Labeled continue']","['Example 1: Print the Value of i', 'Example 2: Calculate Positive Number']","['The syntax of the continue statement is:', 'Note: label is optional and rarely used.', 'Output', 'Notice the continue statement inside the loop.', 'This means', 'To learn more about for loop, visit JavaScript for loop.', 'Output', 'Notice the use of the continue statement.', 'To learn more about the while loop, visit JavaScript while loop.', 'Output', 'Hence, the value of j = 2 is never displayed in the output.']","['In a for loop, continue skips the current iteration and control flow jumps to the updateExpression.', 'In the above program, for loop is used to print the value of i in each iteration.', 'Note: The break statement terminates the loop entirely. However, the continue statement only skips the current iteration.', 'In a while loop, continue skips the current iteration and control flow of the program jumps back to the while condition.', 'The continue statement works in the same way for while and do...while loops.', 'In the above program, isNaN() is used to check if the value entered by a user is a number or not.', 'When continue is used inside of two nested loops, continue skips the current iteration of the inner loop. For example,', 'But labeled continue is rarely used in JavaScript because this makes the code harder to read and understand.', 'If you want to learn more about the labeled continue statements, visit labeled continue.']","['The continue statement is used to skip the current iteration of the loop and the control flow of the program goes to the next iteration.', 'Note: The continue statement is almost always used with decision making statements. To learn more, visit JavaScript if...else Statement.', 'In the above program, the user enters a number. The while loop is used to print the total sum of positive numbers entered by the user.', 'In the above program, when the continue statement executes, it skips the current iteration in the inner loop and control flow of the program moves to the updateExpression of the inner loop.', ""When using nested loops, you can skip the current iteration and the control flow of the program can be passed to a label statement's updateExpression.""]","['continue [label];', 'for (let i = 1; i <= 5; i++) {', '    if (i == 3) {', '        continue;', '    console.log(i);', 'if(i == 3) {', '    continue;', 'let sum = 0;', 'let number = 0;', 'while (number >= 0) {', '    sum += number;', '    if (isNaN(number)) {', '        continue;', 'if (isNaN(number)) {', '    continue;', 'for (let i = 1; i <= 3; i++) {', '        if (j == 2) {', '          continue;', '        }']","[""    number = parseInt(prompt('Enter a number: '));"", ""        console.log('You entered a string.');"", '        number = 0; // the value of number is made 0 again', 'console.log(`The sum is ${sum}.`);', '    for (let j = 1; j <= 3; j++) {', '        console.log(`i = ${i}, j = ${j}`);']","['1', '2', '4', '5', 'Enter a number: 1', 'Enter a number: 2', 'Enter a number: hello', 'You entered a string.', 'Enter a number: 5', 'Enter a number: -2', 'The sum is 8. ', 'i = 1, j = 1', 'i = 1, j = 3', 'i = 2, j = 1', 'i = 2, j = 3', 'i = 3, j = 1', 'i = 3, j = 3']",[],"['When i is equal to 3, the continue statement skips the third iteration.|||Then, i becomes 4 and the test condition and continue statement is evaluated again.|||Hence, 4 and 5 are printed in the next two iterations.|||When the user enters a non-numeric number/string, the continue statement skips the current iteration. Then the control flow of the program goes to the condition of while loop.|||When the user enters a number less than 0, the loop terminates.|||']"
13,['JavaScript Switch Statement'],"['In this tutorial, you will learn about the JavaScript switch statement with the help of examples.']",[],[],['//cdn.programiz.com/sites/tutorial2program/files/javascript-switch-statement.png'],"['Flowchart of switch Statement', 'JavaScript\xa0switch With Multiple Case']","['Example 1: Simple Program Using switch Statement', 'Example 2: Type Checking in switch Statement', 'Example 3: Simple Calculator', 'Example 4: switch With Multiple Case']","['The JavaScript switch statement is used in decision making.', 'The syntax of the switch statement is:', 'Notes:', 'Output', 'Output', 'Output', 'Output', 'Recommended articles']","[""The switch statement evaluates an expression and executes the corresponding body that matches the expression's result."", 'The switch statement evaluates a variable/expression inside parentheses ().', 'In the above program, an expression a = 2 is evaluated with a switch statement.', 'In the above program, an expression a = 1 is evaluated with a switch statement.', ""Let's write a program to make a simple calculator with the switch statement."", 'In a JavaScript switch statement, cases can be grouped to share the same code.', 'In the above program, multiple cases are grouped. All the grouped cases share the same code.', 'If the value of the fruit variable had value mango or pineapple, the output would have been the same.']","['Note: In JavaScript, the switch statement checks the cases strictly (should be of the same data type) with the expression\'s result. Notice in the above example, 1 does not match with\xa0""1"".', 'In above program, the user is asked to enter either +, -, * or /, and two operands. Then, the switch statement executes cases based on the user input.']","['switch(variable/expression) {', '    case value1:  ', '        break;', '    case value2:  ', '        break;', '    case valueN:', '        break;', '    default:', 'let a = 2;', 'switch (a) {', '    case 1:', ""        a = 'one';"", '        break;', '    case 2:', ""        a = 'two';"", '        break;', '    default:', ""        a = 'not found';"", '        break;', 'let a = 1;', 'switch (a) {', '    case ""1"":', '        a = 1;', '        break;', '    case 1:', ""        a = 'one';"", '        break;', '    case 2:', ""        a = 'two';"", '        break;', '    default:', ""        a = 'not found';"", '        break;', 'let result;', 'switch(operator) {', ""    case '+':"", '        break;', ""    case '-':"", '        break;', ""    case '*':"", '        break;', ""    case '/':"", '        break;', '    default:', '        break;', ""let fruit = 'apple';"", 'switch(fruit) {', ""    case 'apple':"", ""    case 'mango':"", ""    case 'pineapple':"", '        break;', '    default:', '        break;']","['console.log(`The value is ${a}`);', 'console.log(`The value is ${a}`);', ""const operator = prompt('Enter operator ( either +, -, * or / ): ');"", ""const number1 = parseFloat(prompt('Enter first number: '));"", ""const number2 = parseFloat(prompt('Enter second number: '));"", '        result = number1 + number2;', '        console.log(`${number1} + ${number2} = ${result}`);', '        result = number1 - number2;', '        console.log(`${number1} - ${number2} = ${result}`);', '        result = number1 * number2;', '        console.log(`${number1} * ${number2} = ${result}`);', '        result = number1 / number2;', '        console.log(`${number1} / ${number2} = ${result}`);', ""        console.log('Invalid operator');"", '        console.log(`${fruit} is a fruit.`);', '        console.log(`${fruit} is not a fruit.`);']","['The value is two.', 'The value is one.', 'Enter operator: +', 'Enter first number: 4', 'Enter second number: 5', '4 + 5 = 9', 'apple is a fruit.']",[],"['If the result of the expression is equal to value1, its body is executed.|||If the result of the expression is equal to value2, its body is executed.|||This process goes on. If there is no matching case, the default body executes.|||The break statement is optional. If the break statement is encountered, the switch statement ends.|||If the break statement is not used, the cases after the matching case are\xa0also executed.|||The default clause is also optional.|||The expression\'s result is evaluated with case 1 which results in false.|||Then the switch statement goes to the second case. Here, the expression\'s result matches with case 2. So The value is two is displayed.|||The break statement terminates the block and control flow of the program jumps to outside of the switch block.|||In JavaScript, the switch statement checks the value strictly. So the expression\'s result does not match with case ""1"".|||Then the switch statement goes to the second case. Here, the expressions\'s result matches with case 1. So The value is one is displayed.|||The break statement terminates the block and control flow of the program jumps to outside of the switch block.|||JavaScript switch Without break|||Switch Vs if...else Statement|||']"
14,['JavaScript Function and Function Expressions'],"['In this tutorial, you will learn about JavaScript function and function expressions with the help of examples.']",[],[],"['//cdn.programiz.com/cdn/farfuture/NdxxeWlRfoHMPgdcWPkeVy1wN9MwAgoqoYqZkFQDMFQ/mtime:1591592059/sites/tutorial2program/files/javascript-function-example1.png', '//cdn.programiz.com/cdn/farfuture/oAZVf3IqOKOYj_aJ-IoYQvbJ2CB-B3y4HXSLXBUmYcY/mtime:1591592163/sites/tutorial2program/files/javascript-function-with-parameter.png', '//cdn.programiz.com/cdn/farfuture/b4h4Zo5ZYxj-EyfQyao-J5TqbKEefFgqqusPGLWPFS0/mtime:1591786573/sites/tutorial2program/files/javascript-return-statement.png']","['JavaScript Function', 'Function Expressions']","['Declaring a Function', 'Calling a Function', 'Example 1: Display a Text', 'Function Parameters', 'Example 2: Function with Parameters', 'Example 3: Add Two Numbers', 'Function Return', 'Example 4: Sum of Two Numbers', 'Benefits of Using a Function']","['A function is a block of code that performs a specific task.', 'In this tutorial, you will learn about user-defined functions.', 'The syntax to declare a function is:', 'For example,', ""Here's how you can call the above greet() function."", 'Output', 'Output', 'Output', 'If nothing is returned, the function returns an undefined value.', 'Output', 'Output', 'The function above is called an anonymous function.']","['Suppose you need to create a program to create a circle and color it. You can create two functions to solve this problem:', 'Dividing a complex problem into smaller chunks makes your program easy to understand and reusable.', 'In the above program, we have declared a function named greet(). To use that function, we need to call it.', 'A function can also be declared with parameters. A parameter is a value that is passed when declaring a function.', 'In the above program, the add function is used to find the sum of two numbers.', 'The return statement can be used to return the value to a function call.', 'The return statement denotes that the function has ended. Any code after return is not executed.', 'In Javascript, functions can also be defined as expressions. For example,', 'Note: In ES2015, JavaScript expressions are written as arrow functions. You will learn about them in later tutorials.']","['JavaScript also has a huge number of inbuilt functions. For example, Math.sqrt() is a function to calculate the square root of a number.', 'In the above program, the greet function is declared with a name parameter. The user is prompted to enter a name. Then when the function is called, an argument is passed into the function.', 'Note: When a value is passed when declaring a function, it is called parameter. And when the function is called, the value passed is called argument.', 'Notice that you can call a function as many times as you want. You can write one function and then call it multiple times with different arguments.', 'In the above program, the sum of the numbers is returned by the function using the return statement. And that value is stored in the result variable.', 'In the above program, variable x is used to store the function. Here the function is treated as an expression. And the function is called using the variable name.']","['function nameOfFunction () {', 'function greet() {', 'greet();', 'function greet() {', 'greet();', 'function greet(name) {', 'greet(name);', 'function add(a, b) {', '    console.log(a + b);', 'add(3,4);', 'add(2,9);', 'function add(a, b) {', '    return a + b;', 'console.log(x(4));', 'let y = x(3);', 'console.log(y);']","['    console.log(""Hello there!"");', '    console.log(""Hello "" + name + "":)"");', 'let name = prompt(""Enter a name: "");', 'let number1 = parseFloat(prompt(""Enter first number: ""));', 'let number2 = parseFloat(prompt(""Enter second number: ""));', 'let result = add(number1,number2);', 'console.log(""The sum is "" + result);', 'let x = function (num) { return num * num };']","['Hello there!', 'Enter a name: Simon', 'Hello Simon :)', '7', '11', 'Enter first number: 3.4', 'Enter second number: 4', 'The sum is 7.4', '16', '9']",[],"['a function to draw the circle|||a function to color the circle|||A function is declared using the function keyword.|||The basic rules of naming a function are similar to naming a variable. It is better to write a descriptive name for your function. For example, if a function is used to add two numbers, you could name the function add or addNumbers.|||The body of function is written within {}.|||The function is declared with two parameters a and b.|||The function is called using its name and passing two arguments 3 and 4 in one and 2 and 9 in another.|||Function makes the code reusable. You can declare it once and use it multiple times.|||Function makes the program easier as each small task is divided into a function.|||Function increases readability.|||']"
15,['JavaScript Variable Scope'],"['In this tutorial, you will learn about variable scope in JavaScript with the help of examples.']",[],[],[],"['Global Scope', 'Local Scope']","['Example 1: Local Scope Variable', 'let is Block Scoped', 'Example 2: block-scoped Variable']","['In JavaScript, a variable has two types of scope:', ""Let's see an example of a global scope variable."", 'For example,', 'In the above program, variable a is a global variable.', 'Output', 'Output', 'In the above program, variable', 'To learn more about let versus var, visit JavaScript let vs var.']","['Scope refers to the availability of variables and functions in certain parts of the code.', 'A variable declared at the top of a program or outside of a function is considered a global scope variable.', 'The value of a global variable can be changed inside a function. For example,', 'Hence, the value of a changes after changing it inside the function.', 'If the variable was declared using let a = ""hello"", the program would throw an error.', 'A variable can also have a local scope, i.e it can only be accessed within a function.', 'The let keyword is block-scoped (variable can be accessed only in the immediate block).', 'Hence, in the above program, the first two console.log() work without any issue.']","['In the above program, variable a is declared at the top of a program and is a global variable. It means the variable a can be used anywhere in the program.', 'In the above program, variable a is a global variable. The value of a is hello. Then the variable a is accessed inside a function and the value changes to 3.', 'Note: It is a good practice to avoid using global variables because the value of a global variable can change in different areas in the program. It can introduce unknown results in the program.', 'In JavaScript, a variable can also be used without declaring it. If a variable is used without declaring it, that variable automatically becomes a global variable.', 'Note: In JavaScript, there is ""strict mode""; in which a variable cannot be used without declaring it. To learn more about strict, visit JavaScript Strict.', 'In the above program, variable a is a global variable and variable b is a local variable. The variable b can be accessed only inside the function greet. Hence, when we try to access variable b outside of the function, an error occurs.', 'However, we are trying to access the block-scoped variable c outside of the block in the third console.log(). This will throw an error.', ""Note: In JavaScript, var is function scoped and let is block-scoped. If you try to use var c = 'hello'; inside the if statement in the above program, the whole program works, as c is treated as a local variable.""]","['let a = ""hello"";', 'function greet () {', '    console.log(a);', 'greet(); // hello', 'let a = ""hello"";', 'function greet() {', '    a = 3;', 'console.log(a);', 'greet();', 'console.log(a); // 3', 'function greet() {', '    a = ""hello""', 'greet();', 'console.log(a); // hello', 'let a = ""hello"";', 'function greet() {', '    let b = ""World""', '    console.log(a + b);', 'greet();', 'console.log(a + b); // error', ""let a = 'Hello';"", 'function greet() {', ""    let b = 'World';"", ""    console.log(a + ' ' + b);"", ""    if (b == 'World') {"", ""        let c = 'hello';"", 'greet();']","[""        console.log(a + ' ' + b + ' ' + c);"", ""    console.log(a + ' ' + b + ' ' + c);""]","['helloWorld', 'Uncaught ReferenceError: b is not defined', 'Hello World', 'Hello World hello', 'Uncaught ReferenceError: c is not defined']",[],['a is a global variable. It can be accessed anywhere in the program.|||b is a local variable. It can be accessed only inside the function greet.|||c is a block-scoped variable. It can be accessed only inside the if statement block.|||&&&Global Scope|||Local Scope|||']
16,['JavaScript Hoisting'],"['In this tutorial, you will learn about JavaScript hoisting with the help of examples.']",[],[],[],"['Variable Hoisting', 'Function Hoisting']",[],"['For example,', 'Output', 'The above program behaves as:', 'Output', 'Output', 'While using let, the variable must be declared first.', 'A function can be called before declaring it. For example,', 'Output', 'Output', 'If var was used in the above program, the error would be:', 'In the case of variables, it is better to use let than var.']","['Hoisting in JavaScript is a behavior in which a function or a variable can be used before declaration. For example,', 'The above program works and the output will be undefined. The above program behaves as', 'Since\xa0the variable test is only declared and has no value, undefined value is assigned to it.', 'If you want to learn more about variables, visit JavaScript Variables.', 'In terms of variables and constants, keyword var is hoisted and let and const does not allow hoisting.', 'However in JavaScript, initializations are not hoisted. For example,', 'Also, when the variable is used inside the function, the variable is hoisted only to the top of the function. For example,', 'To learn more about local and global variables, visit JavaScript Variable Scope.', 'Note: In hoisting, the variable declaration is only accessible to the immediate scope.', 'If a variable is used with the let keyword, that variable is not hoisted. For example,', 'However, when a function is used as an expression, an error occurs because only declarations are hoisted. For example;', 'Note: Generally, hoisting is not performed in other programming languages like Python, C, C++, Java.']","['Note: In hoisting, though it seems that the declaration has moved up in the program, the actual thing that happens is that the function and variable declarations are added to memory during the compile phase.', 'In the above example, variable a is used before declaring it. And the program works and displays the output 5. The program behaves as:', 'Only the declaration is moved to the memory in the compile phase. Hence, the value of variable a is undefined because a is printed without initializing it.', 'In the above example, variable b is hoisted to the top of the function greet and becomes a local variable. Hence b is only accessible inside the function. b does not become a global variable.', 'In the above program, the function greet is called before declaring it and the program shows the output. This is due to hoisting.', 'Hoisting can cause undesirable outcomes in your program. And it is best to declare variables and functions first before using them and avoid hoisting.']","['var test;', 'var test;', 'console.log(a);', 'var a; // 5', 'console.log(a); // 5', 'console.log(a);', 'var a = 5;', 'console.log(a);', 'var a = 4;', 'function greet() {', ""    b = 'hello';"", '    console.log(b); // hello', '    var b;', 'greet(); // hello', 'console.log(b);', 'console.log(a);', 'let a; // error', 'greet();', 'function greet() {', ""    console.log('Hi, there.');"", 'greet();', 'let greet = function() {', ""    console.log('Hi, there.');""]",['console.log(test);   // undefined'],"['undefined', 'hello', 'Uncaught ReferenceError: b is not defined', ""Uncaught ReferenceError: Cannot access 'a' before initialization"", 'Hi, there', 'Uncaught ReferenceError: greet is not defined', 'Uncaught TypeError: greet is not a function']",[],[]
17,['JavaScript Recursion'],"['In this tutorial, you will learn about recursion in JavaScript with the help of examples.']",[],[],"['//cdn.programiz.com/sites/tutorial2program/files/javascript-recursion.png', '//cdn.programiz.com/sites/tutorial2program/files/javascript-factorial-working.png']","['Example 1: Print Numbers', 'Example 2: Find Factorial']",[],"['The syntax for recursive function is:', 'So, it generally looks like this.', 'Output', 'This recursive call can be explained in the following steps:', 'Output', 'This recursive call can be explained in the following steps:']","['Recursion is a process of calling itself. A function that calls itself is called a recursive function.', 'Here, the recurse() function is a recursive function. It is calling itself inside the function.', 'A recursive function must have a condition to stop calling itself. Otherwise, the function is called indefinitely.', 'Once the\xa0condition is met, the function stops calling itself. This is called a base condition.', 'A simple example of a recursive function would be to count down the value to 1.', 'In the above program, the user passes a number as an argument when calling a function.', 'When the number reaches 0, the base condition is met, and the function is not called anymore.', 'When you call function factorial() with a positive integer, it will recursively call itself by decreasing the number.', 'This process continues until the number becomes 1. Then when the number reaches 0, 1 is returned.']","[""To prevent infinite recursion, you can use if...else statement (or similar approach) where one branch makes the recursive call, and the other doesn't."", 'In each iteration, the number value is decreased by 1 and function countDown() is called until the number is positive. Here, newNumber > 0 is the base condition.']","['function recurse() {', '    recurse();', 'recurse();', 'function recurse() {', '    if(condition) {', '        recurse();', '    else {', 'recurse();', 'function countDown(number) {', '    console.log(number);', '    if (newNumber > 0) {', '        countDown(newNumber);', 'countDown(4);', 'function factorial(x) {', '    if (x === 0) {', '        return 1;', '    else {', 'const num = 3;', 'if (num > 0) {']","['    const newNumber = number - 1;', '        return x * factorial(x - 1);', '    let result = factorial(num);', '    console.log(`The factorial of ${num} is ${result}`);']","['4', '3', '2', '1', 'countDown(4) prints 4 and calls countDown(3)', 'countDown(3) prints 3 and calls countDown(2)', 'countDown(2) prints 2 and calls countDown(1)', 'countDown(1) prints 1 and calls countDown(0)', 'The factorial of 3 is 6', 'factorial(3) returns 3 * factorial(2)', 'factorial(2) returns 3 * 2 * factorial(1)', 'factorial(1) returns 3 * 2 * 1 * factorial(0)', 'factorial(0) returns 3 * 2 * 1 * 1']",[],[]
18,['JavaScript Objects'],"['In this tutorial, you will learn about JavaScript objects with the help of examples.']",[],[],['//cdn.programiz.com/sites/tutorial2program/files/javascript-object-properties.png'],"['JavaScript Object Declaration', 'JavaScript Object Properties', 'Accessing Object Properties', 'JavaScript Nested Objects', 'JavaScript Object Methods']","['1. Using dot Notation', '2. Using bracket Notation']","['Here is an example of a JavaScript object.', 'The syntax to declare an object is:', 'For example,', 'You can also define an object in a single line.', ""Here, name: 'John' and age: 20 are properties."", 'You can access the value of a property by using its key.', ""Here's the syntax of the dot notation."", 'For example,', 'Here is the syntax of the bracket notation.', 'For example,', 'An object can also contain another object. For example,']","['JavaScript object is a non-primitive data-type that allows you to store multiple collections of data.', 'Here, student is an object that stores values such as strings and numbers.', 'In the above example, name and age are keys, and John and 20 are values respectively.', 'There are other ways to declare an object in JavaScript. To learn more, visit Different Ways to Declare JavaScript Objects.', 'In JavaScript, ""key: value"" pairs are called properties. For example,', 'In the above example, an object student contains an object value in the marks property.', 'In JavaScript, an object can also contain a function. For example,']","['In the JavaScript data types tutorial, you learned about 7 different primitive data types. And here, you are going to learn about the eighth data-type (JavaScript object).', 'Note: If you are familiar with other programming languages, JavaScript objects are a bit different. You do not need to create classes in order to create objects.', 'Here, an object object_name is defined. Each member of an object is a key: value pair separated by commas and enclosed in curly braces {}.', ""Here, a function is used as a value for the greet key. That's why we need to use person.greet() instead of person.greet to call the function inside the object."", 'A JavaScript method is a property containing a function declaration. In the next tutorial, you will learn about JavaScript Methods in detail.']","['const student = {', ""    firstName: 'ram',"", '    class: 10', 'const object_name = {', '   key1: value1,', '   key2: value2', 'const person = { ', ""    name: 'John',"", '    age: 20', 'let person = { ', ""    name: 'John',"", '    age: 20', 'objectName.key', 'const person = { ', ""    name: 'John', "", '    age: 20, ', 'objectName[""propertyName""]', 'const person = { ', ""    name: 'John', "", '    age: 20, ', 'const student = { ', ""    name: 'John', "", '    age: 20,', '    marks: {', '        science: 70,', '        math: 75', 'const person = {', ""    name: 'Sam',"", '    age: 30,', 'person.greet(); // hello']","['console.log(typeof person); // object', ""const person = { name: 'John', age: 20 };"", 'console.log(person.name); // John', 'console.log(person[""name""]); // John', 'console.log(student.marks); // {science: 70, math: 75}', 'console.log(student.marks.science); // 70', ""    greet: function() { console.log('hello') }""]",[],[],[]
19,['JavaScript Methods and this Keyword'],"['In this tutorial, you will learn about JavaScript object methods and this keyword with the help of examples.']",[],[],[],"['Accessing Object Methods', 'JavaScript Built-In Methods', 'Adding a Method to a JavaScript Object', 'JavaScript this Keyword']",[],"['In JavaScript, objects can also contain functions. For example,', 'In JavaScript, there are many built-in methods. For example,', 'You can also add a method in an object. For example,', 'Output', 'Output']","['Hence basically, the JavaScript method is an object property that has a function value.', 'You can access an object method using a dot notation. The syntax is:', 'Here, the greet method is accessed as person.greet() instead of person.greet.', 'If you try to access the method with only person.greet, it will give you a function definition.', 'Here, the parseInt() method of Number object is used to convert numeric string value to an integer value.', 'To learn more about built-in methods, visit JavaScript Built-In Methods.', 'In the above example, a person object is created. It contains properties (name and age) and a method greet.', 'In the method greet, while accessing a property of an object, this keyword is used.', 'In order to access the properties of an object, this keyword is used following by\xa0. and key.', ""Note: In JavaScript, this keyword when used with the object's method refers to the object. this is bound to an object."", ""However, the function inside of an object can access it's variable in a similar way as a normal function would. For example,""]","['In the above example, a person object has two keys (name and greet), which have a string value and a function value, respectively.', 'You can access property by calling an objectName and a key. You can access a method by calling an objectName and a key for that method along with (). For example,', 'In the above example, an empty student object is created. Then, the name property is added. Similarly, the greet method is also added. In this way, you can add a method as well as property to an object.', ""To access a property of an object from within a method of the same object, you need to use the this keyword. Let's consider an example.""]","['const person = {', ""    name: 'John',"", 'objectName.methodKey()', 'const person = {', ""    name: 'John',"", 'person.name; // John', 'person.greet(); // hello', ""let number = '23.32';"", 'let result = parseInt(number);', 'console.log(result); // 23', 'let student = { };', ""student.name = 'John';"", 'student.greet = function() {', ""    console.log('hello');"", 'student.greet(); // hello', 'const person = {', ""    name: 'John',"", '    age: 30,', 'person.greet();', 'const person = {', ""    name: 'John',"", '    age: 30,', '    greet: function() {', ""        let surname = 'Doe';"", 'person.greet();']","[""    greet: function() { console.log('hello'); }"", ""    greet: function() { console.log('hello'); }"", ""person.greet; // ƒ () { console.log('hello'); }"", ""    greet: function() { console.log('The name is' + ' ' + this.name); }"", ""        console.log('The name is' + ' ' + this.name + ' ' + surname); }""]","['The name is John', 'The name is John Doe']",[],[]
20,['JavaScript Constructor Function'],"['In this tutorial, you will learn about JavaScript constructor function with the help of examples.']",[],[],[],"['Create Multiple Objects with Constructor Function', 'JavaScript this Keyword', 'JavaScript Constructor Function Parameters', 'Create Objects: Constructor Function Vs Object Literal', 'Adding Properties And Methods in an Object', 'JavaScript Object Prototype', 'JavaScript Built-in Constructors']",[],"['console.log(person1.name); gives John', 'console.log(person2.name); gives Sam', 'You can add properties or methods in an object like this:', 'Output', 'To learn more about prototypes, visit JavaScript Prototype.', 'JavaScript also has built-in constructors. Some of them are:', 'In JavaScript, strings can be created as objects by:', 'In JavaScript, numbers can be created as objects by:', 'In JavaScript, booleans can be created as objects by:']","['In JavaScript, a constructor function is used to create objects. For example,', 'In the above example, function Person() is an object constructor function.', 'To create an object from a constructor function, we use the new keyword.', 'Note: It is considered a good practice to capitalize the first letter of your constructor function.', 'In JavaScript, you can create multiple objects from a constructor function. For example,', 'In the above program, two objects are created using the same constructor function.', 'Hence, when an object accesses the properties, it can directly access the property as person1.name.', 'You can also create a constructor function with parameters. For example,', 'In the above example, we have passed arguments to the constructor function during the creation of the object.', 'This allows each object to have different properties. As shown above,', 'Now this age property is unique to person1 object and is not available to person2 object.', 'In the above example, a new property gender and a new method greet() is added to the person1 object.', 'You can also add properties and methods to a constructor function using a prototype. For example,', 'You should not declare strings, numbers, and boolean values as objects because they slow down the program.']","['In JavaScript, when this keyword is used in a constructor function, this refers to the object when the object is created. For example,', 'However, if an object is created with an object literal, and if a variable is defined with that object value, any changes in variable value will change the original object. For example,', 'When an object is created with an object literal, any object variable derived from that object will act as a clone of the original object. Hence, any change you make in one object will also reflect in the other object.', 'However, this new property and method is only added to person1. You cannot access gender or greet() from person2. Hence the program gives error when we try to access person2.greet();', ""Note: It is recommended to use primitive data types and create them in a normal way, such as const name = 'John';, const\xa0number = 57; and const count = true;"", 'Note: In JavaScript, the keyword class was introduced in ES6 (ES2015) that also allows us to create objects. Classes are similar to constructor functions in JavaScript. To learn more, visit JavaScript Classes.']","['function Person () {', ""    this.name = 'John',"", '    this.age = 23', 'const person = new Person();', 'function Person () {', ""    this.name = 'John',"", '    this.age = 23,', ""        console.log('hello');"", 'const person1 = new Person();', 'const person2 = new Person();', 'function Person () {', ""    this.name = 'John',"", 'const person1 = new Person();', '    this.name = person_name,', '    this.age = person_age,', '    this.greet = function () {', 'let person = {', ""    name: 'Sam'"", 'function Person () {', ""    this.name = 'Sam'"", 'let person1 = new Person();', 'let person2 = new Person();', 'function Person () {', ""    this.name = 'Sam'"", 'let person1 = new Person();', 'let person2 = new Person();', 'person1.age = 20;', 'let person = {', ""    name: 'Sam'"", 'let student = person;', ""student.name = 'John';"", 'function Person () {', ""    this.name = 'John',"", '    this.age = 23', 'let person1 = new Person();', 'let person2 = new Person();', ""person1.gender = 'male';"", 'person1.greet = function () {', ""    console.log('hello');"", 'person1.greet();   // hello', 'person2.greet();', 'function Person () {', ""    this.name = 'John',"", '    this.age = 23', 'let person1 = new Person();', 'let person2 = new Person();', 'console.log(name); // ""John""', 'console.log(number); // 57', 'console.log(count); // true']","['console.log(person1.name);  // John', 'console.log(person2.name);  // John', 'console.log(person1.name);  // John', 'function Person (person_name, person_age, person_gender) {', '    this.gender = person_gender,', ""        return ('Hi' + ' ' + this.name);"", ""const person1 = new Person('John', 23, 'male');"", ""const person2 = new Person('Sam', 25, 'female');"", 'console.log(person1.name); // ""John""', 'console.log(person2.name); // ""Sam""', ""const person1 = new Person('John', 23, 'male');"", ""const person2 = new Person('Sam', 25, 'male');"", 'console.log(person.name); // Sam', 'console.log(person.name); // John', ""Person.prototype.gender = 'Male';"", 'console.log(person1.gender); // Male', 'console.log(person2.gender); // Male', 'let a = new Object();    // A new Object object', 'let b = new String();    // A new String object', 'let c = new Number();    // A new Number object', 'let d = new Boolean();   // A new Boolean object', ""const name = new String ('John');"", 'const count = new Boolean(true);']","['hello', 'Uncaught TypeError: person2.greet is not a function']",[],"['Object Literal is generally used to create a single object. The constructor function is useful if you want to create multiple objects. For example,|||Each object created from the constructor function is unique. You can have the same properties as the constructor function or add a new property to one particular object. For example,|||']"
21,['JavaScript Getter and Setter'],"['In this tutorial, you will learn about JavaScript getter and setter methods with the help of examples.']",[],[],[],"['Data Property', 'Accessor Property', 'JavaScript Setter', 'JavaScript Object.defineProperty()']",['JavaScript Getter'],"['In JavaScript, there are two kinds of object properties:', 'Note: To create a getter method, the get keyword is used.', 'When you try to access the value as a method, an error occurs.', 'Note: To create a setter method, the set keyword is used.', 'As shown in the above program, the value of firstName is Monica.', 'Then the value is changed to Sarah.', 'Note: Setter must have exactly one formal parameter.', 'The syntax for using Object.defineProperty() is:', 'The Object.defineProperty() method takes three arguments.']","[""Here's an example of data property that we have been using in the previous tutorials."", 'In JavaScript, accessor properties are methods that get or set the value of an object. For that, we use these two keywords:', 'In JavaScript, getter methods are used to access the properties of an object. For example,', 'In the above program, a getter method getName() is created to access the property of an object.', 'And also when accessing the value, we access the value as a property.', 'In JavaScript, setter methods are used to change the values of an object. For example,', 'In the above example, the setter method is used to change the value of an object.', 'In JavaScript, you can also use Object.defineProperty() method to add getters and setters. For example,', 'In the above example, Object.defineProperty() is used to access and change the property of an object.']",[],"['const student = {', ""    firstName: 'Monica';"", 'const student = {', ""    firstName: 'Monica',"", '    get getName() {', '        return this.firstName;', 'get getName() {', '    return this.firstName;', 'student.getName;', 'const student = {', ""    firstName: 'Monica',"", '    set changeName(newName) {', ""student.changeName = 'Sarah';"", 'set changeName(newName) {', '    this.firstName = newName;', ""student.chageName = 'Sarah';"", 'const student = {', ""    firstName: 'Monica'"", '    get : function () {', '        return this.firstName;', '    set : function (value) {', ""student.changeName = 'Sarah';""]","['console.log(student.firstName); // Monica', 'console.log(student.getName); // Monica', 'console.log(student.getName()); // error', 'console.log(student.getName()); // error', '        this.firstName = newName;', 'console.log(student.firstName); // Monica', 'console.log(student.firstName); // Sarah', 'Object.defineProperty(student, ""getName"", {', 'Object.defineProperty(student, ""changeName"", {', 'console.log(student.firstName); // Monica', 'console.log(student.firstName); // Sarah', 'Object.defineProperty(obj, prop, descriptor)']",[],[],['Data properties|||Accessor properties|||get - to define a getter method to get the property value|||set - to define a setter method to set the property value|||The first argument is the objectName.|||The second argument is the name of the property.|||The third argument is an object that describes the property.|||']
22,['JavaScript Prototype'],"['In this tutorial, you will learn about prototypes in JavaScript with the help of examples.']",[],[],[],"['JavaScript Prototype', 'Prototype Inheritance', 'Changing Prototype', 'JavaScript Prototype Chaining']",['Add Methods to a Constructor Function Using Prototype'],"['Before you learn prototypes, be sure to check these tutorials:', 'Output']","['As you know, you can create an object in JavaScript using an object constructor function. For example,', 'In JavaScript, every function and object has a property named prototype by default. For example,', 'In the above example, we are trying to access the prototype property of a Person constructor function.', 'Since the prototype property has no value at the moment, it shows an empty object { ... }.', 'In the above program, we have added a new property gender to the Person constructor function using:', 'Then object person1 and person2 inherits the property gender from the prototype property of Person constructor function.', 'Hence, both objects person1 and person2 can access the gender property.', 'Note: The syntax to add the property to an object constructor function is:', 'Prototype is used to provide additional property to all the objects created from a constructor function.', 'You can also add new methods to a constructor function using prototype. For example,', 'In the above program, a new method greet is added to the Person constructor function using a prototype.', 'Note: You can also access the prototype property of a constructor function from an object.']","['In the above example,\xa0function Person() is an object constructor function. We have created two objects person1 and person2 from it.', 'In JavaScript, a prototype can be used to add properties and methods to a constructor function. And objects inherit properties and methods from a prototype. For example,', 'If a prototype value is changed, then all the new objects will have the changed property value. All the previously created objects will have the previous value. For example,', 'Note: You should not modify the prototypes of standard JavaScript built-in objects like strings, arrays, etc. It is considered a bad practice.', 'If an object tries to access the same property that is in the constructor function and the prototype object, the object takes the property from the constructor function. For example,', 'In the above program, a property name is declared in the constructor function and also in the prototype property of the constructor function.', ""When the program executes, person1.name looks in the constructor function to see if there is a property named name. Since the constructor function has the name property with value 'John', the object takes value from that property."", ""When the program executes, person1.age looks in the constructor function to see if there is a property named age. Since the constructor function doesn't have age property, the program looks into the prototype object of the constructor function and the object inherits property from the prototype object (if available)."", 'In the above example, a person object is used to access the prototype property using __proto__. However, __proto__ has been deprecated and you should avoid using it.']","['function Person () {', ""    this.name = 'John',"", '    this.age = 23', 'const person1 = new Person();', 'const person2 = new Person();', 'function Person () {', ""    this.name = 'John',"", '    this.age = 23', 'const person = new Person();', 'function Person () {', ""    this.name = 'John',"", '    this.age = 23', 'const person1 = new Person();', 'const person2 = new Person();', 'console.log(Person.prototype);', 'console.log(person1.gender);', 'console.log(person2.gender);', 'function Person () {', ""    this.name = 'John',"", '    this.age = 23', 'const person1 = new Person();', 'const person2 = new Person();', 'person1.greet(); // hello John', 'person2.greet(); // hello John', 'function Person() {', ""    this.name = 'John'"", 'Person.prototype.age = 20;', 'const person1 = new Person();', 'Person.prototype = { age: 50 }', 'const person3 = new Person();', 'function Person() {', ""    this.name = 'John'"", 'Person.prototype.age = 23', 'const person1 = new Person();', 'function Person () {', ""    this.name = 'John'"", 'Person.prototype.age = 24;', 'const person = new Person();']","['console.log(Person.prototype); // { ... }', ""Person.prototype.gender = 'male';"", ""Person.prototype.gender = 'male';"", ""objectConstructorName.prototype.key = 'value';"", 'Person.prototype.greet = function() {', ""    console.log('hello' + ' ' +  this.name);"", ""Person.prototype.name = 'Peter';"", 'console.log(person1.name); // John', 'console.log(person.__proto__);   // { age: 24 }']","['{ gender: ""male"" }', 'male', 'male']",[],['JavaScript Objects|||JavaScript Constructor Function|||']
23,['JavaScript Arrays'],"['In this tutorial, you will learn about JavaScript arrays with the help of examples.']",[],[],"['//cdn.programiz.com/sites/tutorial2program/files/javascript-array-indexing.png', '//cdn.programiz.com/cdn/farfuture/1boQBEa6BRhsaADEL93Czau6ABhpoHq4t3735VgO1O8/mtime:1594110571/sites/tutorial2program/files/array-indexing1.png']","['Create an Array', 'Access Elements of an Array', 'Add an Element to an Array', 'Change the Elements of an Array', 'Remove an Element from an Array', 'Array length', 'Array Methods', 'Working of JavaScript Arrays']",['Example: JavaScript Array Methods'],"['Here, words is an array. The array is storing 3 values.', 'You can create an array using two ways:', '1. Using an array literal', '2. Using the new keyword', ""You can also create an array using JavaScript's new keyword."", 'Note: It is recommended to use array literal to create an array.', 'Here are more examples of arrays:', ""Note: Array's index starts with 0, not 1."", 'Some of the commonly used JavaScript array methods are:', 'Note: If the element is not in an array, indexOf() gives -1.', 'Visit JavaScript Array Methods to learn more.', 'Recommended Articles']","['An array is an object that can store multiple values at once. For example,', 'The easiest way to create an array is by using an array literal []. For example,', 'In both of the above examples, we have created an array having two elements.', 'You can also store arrays, functions and other objects inside an array. For example,', 'You can access elements of an array using indices (0, 1, 2 …). For example,', 'You can use the built-in method push() and unshift() to add elements to an array.', 'The push() method adds an element at the end of the array. For example,', 'The unshift() method adds an element at the beginning of the array. For example,', 'You can also add elements or change the elements by accessing the index value.', 'Basically, if you try to add elements to high indices, the indices in between will have undefined value.', 'You can find the length of an element (the number of elements in an array) using the length property. For example,', 'In JavaScript, there are various array methods available that makes it easier to perform useful calculations.', 'In JavaScript, an array is an object. And, the indices of arrays are objects keys.', 'You can also store values by passing a named key in an array. For example,', 'However, it is not recommended to store values by passing arbitrary names in an array.']","['Suppose, an array has two elements. If you try to add an element at index 3 (fourth element), the third element will be undefined. For example,', 'You can use the pop() method to remove the last element from an array. The pop() method also returns the returned value. For example,', 'If you need to remove the first element, you can use the shift() method. The shift() method removes the first element and also returns the removed element. For example,', 'Since arrays are objects, the array elements are stored by reference. Hence, when an array value is copied, any change in the copied array will also reflect in the original array. For example,']","['const myList = [ ];', 'const newData = [', ""    {'task1': 'exercise'},"", '    [1, 2 ,3],', 'dailyActivities.pop();', 'dailyActivities.shift();', ""let newRoutine = ['eat'];"", 'dailyActivities.sort();', 'console.log(position); // 2', ""let arr = ['h', 'e'];"", 'let arr1 = arr;', ""arr1.push('l');"", ""let arr = ['h', 'e'];"", ""arr.name = 'John';""]","[""const words = ['hello', 'world', 'welcome'];"", 'const array1 = [""eat"", ""sleep""];', 'const array2 = new Array(""eat"", ""sleep"");', 'const numberArray = [ 2, 4, 6, 8];', ""const stringArray = [ 'eat', 'work', 'sleep'];"", ""const newData = ['work', 'exercise', 1, true];"", ""    function hello() { console.log('hello')}"", ""const myArray = ['h', 'e', 'l', 'l', 'o'];"", 'console.log(myArray[0]);  // ""h""', ""let dailyActivities = ['eat', 'sleep'];"", ""dailyActivities.push('exercise');"", ""console.log(dailyActivities); //  ['eat', 'sleep', 'exercise']"", ""let dailyActivities = ['eat', 'sleep'];"", ""dailyActivities.unshift('work'); "", ""console.log(dailyActivities); // ['work', 'eat', 'sleep']"", ""let dailyActivities = [ 'eat', 'sleep'];"", ""dailyActivities[2] = 'exercise';"", ""console.log(dailyActivities); // ['eat', 'sleep', 'exercise']"", ""let dailyActivities = [ 'eat', 'sleep'];"", ""dailyActivities[3] = 'exercise';"", 'console.log(dailyActivities); // [""eat"", ""sleep"", undefined, ""exercise""]', ""let dailyActivities = ['work', 'eat', 'sleep', 'exercise'];"", ""console.log(dailyActivities); // ['work', 'eat', 'sleep']"", 'const removedElement = dailyActivities.pop();', ""console.log(removedElement); // 'sleep'"", ""console.log(dailyActivities);  // ['work', 'eat']"", ""let dailyActivities = ['work', 'eat', 'sleep'];"", ""console.log(dailyActivities); // ['eat', 'sleep']"", ""const dailyActivities = [ 'eat', 'sleep'];"", 'console.log(dailyActivities.length); // 2', ""let dailyActivities = ['sleep', 'work', 'exercise']"", ""console.log(dailyActivities); // ['exercise', 'sleep', 'work']"", ""const position = dailyActivities.indexOf('work');"", 'const newDailyActivities = dailyActivities.slice(1);', ""console.log(newDailyActivities); // [ 'sleep', 'work']"", 'const routine = dailyActivities.concat(newRoutine);', 'console.log(routine); // [""exercise"", ""sleep"", ""work"", ""eat""]', 'console.log(arr); // [""h"", ""e"", ""l""]', 'console.log(arr1); // [""h"", ""e"", ""l""]', 'console.log(arr.name); // ""John""', 'console.log(arr[\'name\']); // ""John""']",[],['Method|||Description|||concat()|||joins two or more arrays and returns a result|||indexOf()|||searches an element of an array and returns its position|||find()|||returns the first value of an array element that passes a test|||findIndex()|||returns the first index of an array element that passes a test|||forEach()|||calls a function for each element|||includes()|||checks if an array contains a specified element|||push()|||aads a new element to the end of an array and returns the new length of an array|||unshift()|||adds a new element to the beginning of an array and returns the new length of an array|||pop()|||removes the last element of an array and returns the removed element|||shift()|||removes the first element of an array and returns the removed element|||sort()|||sorts the elements alphabetically in strings and in ascending order|||slice()|||selects the part of an array and returns the new array|||splice()|||removes or replaces existing elements and/or adds new elements'],['JavaScript forEach|||JavaScript for...of|||JavaScript Multidimensional Array|||']
24,['JavaScript Multidimensional Array'],"['In this tutorial, you will learn about JavaScript multidimensional arrays with the help of examples.']",[],[],['//cdn.programiz.com/sites/tutorial2program/files/multidimensional-array.png'],"['Create a Multidimensional Array', 'Access Elements of an Array', 'Add an Element to a Multidimensional Array', 'Remove an Element from a Multidimensional Array', 'Iterating over Multidimensional Array']",[],"['Here is how you can create multidimensional arrays in JavaScript.', 'Example 1', 'Example 2', 'Adding Element to the Outer Array', 'Adding Element to the Inner Array', 'Remove Element from Outer Array', 'Remove Element from Inner Array', 'Output']","['A multidimensional array is an array that contains another array. For example,', 'Here, both example 1 and example 2 creates a multidimensional array with the same data.', 'You can access the elements of a multidimensional array using indices (0, 1, 2 …). For example,', 'You can think of a multidimensional array (in this case, x), as a table with 3 rows and 2 columns.', ""You can use the Array's push() method or an indexing notation to add elements to a multidimensional array."", ""You can also use the Array's splice() method to add an element at a specified index. For example,"", ""You can use the Array's pop() method to remove the element from a multidimensional array. For example,"", 'You can also use the splice() method to remove an element at a specified index. For example,', 'You can also use the for...of loop to iterate over the multidimensional array. For example,', 'You can also use the for loop to iterate over a multidimensional array. For example,']","[""You can iterate over a multidimensional array using the Array's forEach() method to iterate over the multidimensional array. For example,"", 'The first forEach() method is used to iterate over the outer array elements and the second forEach() is used to iterate over the inner array elements.']","[""let student1 = ['Jack', 24];"", ""let student2 = ['Sara', 23];"", ""let student3 = ['Peter', 24];"", 'let x = [', ""['Jack', 24],"", ""['Sara', 23], "", ""['Peter', 24]"", 'console.log(x[0][0]); // Jack', 'console.log(x[2][1]); // 24', ""studentsData[1][2] = 'hello';"", ""studentsData[1].push('hello');"", 'studentsData.pop();', 'studentsData[1].pop();', 'studentsData.splice(1,1);', '        console.log(data);', 'for (let i of studentsData) {', '  for (let j of i) {', '    console.log(j);']","['const data = [[1, 2, 3], [1, 3, 4], [4, 5, 6]];', ""let studentsData = [['Jack', 24], ['Sara', 23], ['Peter', 24]];"", 'let studentsData = [student1, student2, student3];', 'console.log(x[0]); // [""Jack"", 24]', ""let studentsData = [['Jack', 24], ['Sara', 23],];"", ""studentsData.push(['Peter', 24]);"", 'console.log(studentsData); //[[""Jack"", 24], [""Sara"", 23], [""Peter"", 24]', ""let studentsData = [['Jack', 24], ['Sara', 23],];"", 'console.log(studentsData); // [[""Jack"", 24], [""Sara"", 23, ""hello""]]', ""let studentsData = [['Jack', 24], ['Sara', 23],];"", 'console.log(studentsData); // [[""Jack"", 24], [""Sara"", 23, ""hello""]]', ""let studentsData = [['Jack', 24], ['Sara', 23],];"", ""studentsData.splice(1, 0, ['Peter', 24]);"", 'console.log(studentsData); // [[""Jack"", 24], [""Peter"", 24], [""Sara"", 23]]', ""let studentsData = [['Jack', 24], ['Sara', 23],];"", 'console.log(studentsData); // [[""Jack"", 24]]', ""let studentsData = [['Jack', 24], ['Sara', 23]];"", 'console.log(studentsData); // [[""Jack"", 24], [""Sara""]]', ""let studentsData = [['Jack', 24], ['Sara', 23],];"", 'console.log(studentsData); // [[""Jack"", 24]]', ""let studentsData = [['Jack', 24], ['Sara', 23],];"", 'studentsData.forEach((student) => {', ""let studentsData = [['Jack', 24], ['Sara', 23],];"", ""let studentsData = [['Jack', 24], ['Sara', 23],];"", 'for(let i = 0; i < studentsData.length; i++){', '    let innerArrayLength = studentsData[i].length;', '    for(let j = 0; j < innerArrayLength; j++) {', '        console.log(studentsData[i][j]);']","['Jack', '24', 'Sara', '23']",[],[]
25,['JavaScript String'],"['In this tutorial, you will learn about JavaScript string with the help of examples.']",[],[],[],"['Create JavaScript Strings', 'Access String Characters', 'JavaScript Strings are immutable', 'JavaScript is Case-Sensitive', 'JavaScript Multiline Strings', 'JavaScript String Length', 'JavaScript String Objects', 'JavaScript String Methods', 'JavaScript String() Function', 'Escape Character']",['Example: JavaScript String Methods'],"['For example,', 'You can also write a quote inside another quote. For example,', 'You can access the characters in a string in two ways.', 'In JavaScript, a and A are treated as different values.', 'You can also create strings using the new keyword. For example,', 'Here are the commonly used JavaScript String methods:', 'Output', 'In the above program, the same quote is included using \\.', 'Here are other ways that you can use \\:']","['JavaScript string is a primitive data type that is used to work with texts. For example,', 'In JavaScript, strings are created by surrounding them with quotes. There are three ways you can use quotes.', 'Single quotes and double quotes are practically the same and you can use either of them.', 'However, the quote should not match the surrounding quotes. For example,', 'In JavaScript, strings are immutable. That means the characters of a string cannot be changed. For example,', 'However, you can assign the variable name to a new string. For example,', 'To use a multiline string, you can either use the + operator or the \\ operator. For example,', 'To find the length of a string, you can use built-in length property. For example,', 'Note: It is recommended to avoid using string objects. Using string objects slows down the program.', '\n\tThe String() function is used to convert various data types to strings. For example,', 'If you want to learn more about the string conversion, visit JavaScript Type Conversion.', 'You can use the backslash escape character \\ to include special characters in a string. For example,']","['Backticks are generally used when you need to include variables or expressions into a string. This is done by wrapping variables or expressions with ${variable or expression} as shown above.', 'JavaScript is case-sensitive. That means in JavaScript, the lowercase and uppercase letters are treated as different values. For example,']","[""const name = 'John';"", ""const name = 'Peter';"", 'const name1 = ""Jack"";', ""const a = 'hello';"", 'console.log(a[1]); // ""e""', ""const a = 'hello';"", ""let a = 'hello';"", ""a[0] = 'H';"", 'console.log(a); // ""hello""', ""let a = 'hello';"", ""a = 'Hello';"", 'console.log(a); // ""Hello""', ""const a = 'a';"", ""const b = 'A'"", 'console.log(a === b); // false', ""    'in the code.'"", ""in the code.'"", ""const a = 'hello';"", 'console.log(a.length); // 5', ""const a = 'hello';"", ""const b = new String('hello');"", 'console.log(a); // ""hello""', 'console.log(b); // ""hello""', ""const text1 = 'hello';"", ""const text2 = 'world';"", 'console.log(result2); // HELLO', 'const result3 = text3.trim();', 'const result4 = text1.split();', 'console.log(result5); // ""el""', 'const a = 225; // number', 'const b = true; // boolean', 'const result1 = String(a);', 'const result2 = String(b);', 'console.log(result1); // ""225""', 'console.log(name);']","['const result = `The names are ${name} and ${name1}`;', 'const name = \'My name is ""Peter"".\';', ""const name = 'My name is 'Peter'.'; // error"", 'console.log(a.charAt(1)); // ""e""', ""const message1 = 'This is a long message ' +"", ""    'that spans across multiple lines' + "", ""const message2 = 'This is a long message \\"", 'that spans across multiple lines \\', 'console.log(typeof a); // ""string""', 'console.log(typeof b); // ""object""', ""const text3 = '     JavaScript    ';"", ""const result1 = text1.concat(' ', text2);"", 'console.log(result1); // ""hello world""', 'const result2 = text1.toUpperCase();', 'console.log(result3); // JavaScript', 'console.log(result4); // [""hello""]', 'const result5= text1.slice(1, 3);', ""const name = 'My name is \\'Peter\\'.';""]","[""My name is 'Peter'.""]","['Method|||Description|||charAt(index)|||returns the character at the specified index|||concat()|||joins two or more strings|||replace()|||replaces a string with another string|||split()|||converts the string to an array of strings|||substr(start, length)|||returns a part of a string|||substring(start,end)|||returns a part of a string|||slice(start, end)|||returns a part of a string|||toLowerCase()|||returns the passed string in lower case|||toUpperCase()|||returns the passed string in upper case|||trim()|||removes whitespace from the strings|||includes()|||searches for a string and returns a boolean value|||search()|||searches for a string and returns a position of a match|||&&&Code|||Output|||\\""|||include double quote|||\\\\|||include backslash|||\\n|||new line|||\\r|||carriage return|||\\v|||vertical tab|||\\t|||horizontal tab|||\\b|||backspace|||\\f|||form feed']","['Single quotes: \'Hello\'|||Double quotes: ""Hello""|||Backticks: `Hello`|||One way is to treat strings as an array. For example,|||Another way is to use the method charAt(). For example,|||']"
26,['JavaScript for...in loop'],"['In this tutorial, you will learn about the JavaScript for...in loop with the help of examples.']",[],[],[],"['JavaScript for...in loop', 'for...in with Strings', 'for...in with Arrays']","['Example 1: Iterate Through an Object', 'Example 2: Update Values of Properties']","['In the previous tutorials, we have covered:', 'The syntax of the for...in loop is:', 'Output', 'Output', 'Output', 'You can also use for...in with arrays. For example,', 'Output', 'You will learn more about the arrays in later tutorials.']","['There are also other types of loops. The for..in loop in JavaScript allows you to iterate over all property keys of an object.', 'In each iteration of the loop, a key is assigned to the key variable. The loop continues for all object properties.', 'Note: Once you get keys, you can easily find their corresponding values.', 'In the above program, the for...in loop is used to iterate over the student object and print all its properties.', 'You can also use for...in loop to iterate over string values. For example,', 'Note: You should not use for...in to iterate over an array where the index order is important.', 'One of the better ways to iterate over an array is using the for...of loop.', 'To learn more about the for...of loop, visit JavaScript for...of loop.']","['In the above example, the for...in loop is used to iterate over the properties of the salaries\xa0object. Then, the string $ is added to each value of the object.']","['for (key in object) {', 'const student = {', ""    name: 'Monica',"", '    class: 7,', '    age: 12', 'for ( let key in student ) {', 'const salaries= {', '    Jack : 24000,', '    Paul : 34000,', '    Monica : 55000', 'for ( let i in salaries) {', ""const string = 'code';"", 'for (let i in string) {', '    console.log(string[i]);', 'for (let x in arr) {', '    console.log(arr[x]);']","['    console.log(`${key} => ${student[key]}`);', '    let salary = ""$"" + salaries[i];', '    console.log(`${i} : ${salary}`);', ""const arr = [ 'hello', 1, 'JavaScript' ];""]","['name => Monica', 'class => 7', 'age => 12', 'Jack : $24000,', 'Paul : $34000,', 'Monica : $55000', 'c', 'o', 'd', 'e', 'hello', '1', 'JavaScript']",[],['JavaScript while and do...while loop|||JavaScript for loop|||The object key is assigned to the variable key.|||student[key] is used to access the value of key.|||']
27,['JavaScript Symbol'],"['In this tutorial, you will learn about JavaScript Symbol with the help of examples.']",[],[],[],"['JavaScript Symbol', 'Creating Symbol', 'Access Symbol Description', 'Add Symbol as an Object Key', 'Symbols are not included in for...in Loop', 'Benefit of Using Symbols in Object', 'Symbol Methods', 'Symbol Properties']","['Example: Symbol Methods', 'Example: Symbol Properties Example']","['You use the Symbol() function to create a Symbol. For example,', 'You can pass an optional string as its description. For example,', 'Output', 'There are various methods available with Symbol.']","['Though value1 and value2 both contain the same description, they are different.', 'To access the description of a symbol, we use the . operator. For example,', 'You can add symbols as a key in an object using square brackets []. For example,', 'The for...in loop does not iterate over Symbolic properties. For example,', 'In the above program, even if the same name is used to store values, the Symbol data type will have a unique value.', 'In the above program, the second user.id overwrites the previous value.']","['The JavaScript ES6 introduced a new primitive data type called Symbol. Symbols are immutable (cannot be changed) and are unique. For example,', ""If the same code snippet is used in various programs, then it is better to use Symbols in the object key. It's because you can use the same key name in different codes and avoid duplication issues. For example,"", ""In the above program, if the person object is also used by another program, then you wouldn't want to add a property that can be accessed or changed by another program. Hence by using Symbol, you create a unique property that you can use."", ""Now, if the other program also needs to use a property named id, just add a Symbol named id and there won't be duplication issues. For example,"", 'In the above program, if the string key was used, then the later program would have changed the value of the property. For example,']","['const x = Symbol()', 'typeof x; // symbol', ""const x = Symbol('hey');"", 'console.log(x); // Symbol(hey)', ""const x = Symbol('hey');"", 'let id = Symbol(""id"");', 'let person = {', '    name: ""Jack"",', '    [id]: 123 // not ""id"": 123', 'let id = Symbol(""id"");', 'let person = {', '    name: ""Jack"",', '    age: 25,', '    [id]: 12', 'for (let key in person) {', '    console.log(key);', 'let person = {', '    name: ""Jack""', 'let id = Symbol(""id"");', 'person[id] = 12;', 'let person = {', '    name: ""Jack""', 'let id = Symbol(""id"");', 'person[id] = ""Another value"";', 'let person = {', '    name: ""Jack""', 'person.id = 12;', 'console.log(person.id); // 12', ""person.id = 'Another value';"", ""let sym = Symbol.for('hello');"", ""let sym1 = Symbol.for('id');"", ""const x = Symbol('hey');"", 'const numberArray = [1, 2, 3];']","['console.log(value1 === value2); // false', 'console.log(x.description); // hey', 'console.log(person); // {name: ""Jack"", Symbol(id): 123}', 'console.log(person.id); // Another value', 'console.log( Symbol.keyFor(sym) ); // hello', 'console.log( Symbol.keyFor(sym1) ); // id', 'console.log(x.description); // hey', ""const stringArray = ['a', 'b', 'c'];"", 'numberArray[Symbol.isConcatSpreadable] = false;', 'let result = stringArray.concat(numberArray);', 'console.log(result); // [""a"", ""b"", ""c"", [1, 2, 3]]']","['name', 'age']",['Method|||Description|||for()|||Searches for existing symbols|||keyFor()|||Returns a shared symbol key from the global symbol registry.|||toSource()|||Returns a string containing the source of the Symbol object|||toString()|||Returns a string containing the description of the Symbol|||valueOf()|||Returns the primitive value of the Symbol object.|||&&&Properties|||Description|||asyncIterator|||Returns the default AsyncIterator for an object|||hasInstance|||Determines if a constructor object recognizes an object as its instance|||isConcatSpreadable|||Indicates if an object should be flattened to its array elements|||iterator|||Returns the default iterator for an object|||match|||Matches against a string|||matchAll|||Returns an iterator that yields matches of the regular expression against a string|||replace|||Replaces matched substrings of a string|||search|||Returns the index within a string that matches the regular expression|||split|||Splits a string at the indices that match a regular expression|||species|||Creates derived objects|||toPrimitive|||Converts an object to a primitive value|||toStringTag|||Gives the default description of an object|||description|||Returns a string containing the description of the symbol'],[]
28,['JavaScript try...catch...finally Statement'],"['In this tutorial, you will learn about the try...catch...finally statements to handle exceptions in JavaScript with the help of examples.']",[],[],[],"['Types of Errors', 'JavaScript try...catch Statement', 'JavaScript\xa0try...catch...finally Statement', 'JavaScript try...catch in setTimeout']","['Example 1: Display Undeclared Variable', 'Example 2: try...catch...finally Example']","['In programming, there can be two types of errors in the code:', 'Output', 'The syntax of try...catch...finally block is:', 'Output']","[""\n\tThese errors that occur during runtime are called exceptions. Now, let's see how you can handle these exceptions."", 'The try...catch statement is used to handle the exceptions. Its syntax is:', 'If no error occurs, the code inside the try block is executed and the catch block is skipped.', 'The try...catch won\'t catch the exception if it happened in ""timed"" code, like in setTimeout(). For example,', 'The try..catch block must be inside that function to catch an exception inside a timed function. For example,', 'You will learn about the JavaScript throw Statement in the next tutorial.']","['The try, catch and finally blocks are used to handle exceptions (a type of an error). Before you learn about them, you need to know about the types of errors in programming.', ""Syntax Error: Error in the syntax. For example, if you write consol.log('your result');, the above program throws a syntax error. The spelling of\xa0console is a mistake in the above code."", 'Runtime Error: This type of error occurs during the execution of the program. For example,\n\tcalling an invalid function or a variable.', 'The main code is inside the try block. While executing the try block, if any error occurs, it goes to the catch block. The catch block handles the errors as per the catch statements.', 'In the above program, a variable is not defined. When you try to print the a variable, the program throws an error. That error is caught in the catch block.', 'You can also use the try...catch...finally statement to handle exceptions. The finally block executes both when the code runs successfully or if an error occurs.', 'In the above program, an error occurs and that error is caught by the catch block. The finally block will execute in any situation ( if the program runs successfully or if an error occurs).', 'Note: You need to use catch or finally statement after try statement. Otherwise, the program will throw an error Uncaught SyntaxError: Missing catch or finally after try.', ""The above try...catch won't work because the engine has already left the try..catch construct and the function is executed later."", 'You can also use the throw statement with the try...catch statement to use user-defined exceptions. For example, a certain number is divided by 0. If you want to consider Infinity as an error in the program, then you can throw a user-defined exception using the throw statement to handle that condition.']","['catch(error) {', '    console.log(a);', 'catch(error) {', 'catch(error) {', 'finally() {', '     console.log(a);', 'catch(error) {', 'finally {', '    setTimeout(function() {', '    }, 3000);', '} catch (e) {', '  console.log( ""won\'t work"" );', 'setTimeout(function() {', '    try {', '    } catch {', '}, 3000);']","[""const numerator= 100, denominator = 'a';"", '     console.log(numerator/denominator);', ""    console.log('An error caught'); "", ""    console.log('Error message: ' + error);  "", ""const numerator= 100, denominator = 'a';"", '     console.log(numerator/denominator);', ""    console.log('An error caught'); "", ""    console.log('Error message: ' + error);  "", ""     console.log('Finally will execute every time');"", '        console.log( ""error is caught"" );']","['NaN', 'An error caught', 'Error message: ReferenceError: a is not defined', 'NaN', 'An error caught', 'Error message: ReferenceError: a is not defined', 'Finally will execute every time']",[],[]
29,['JavaScript throw Statement'],"['In this tutorial, you will learn about JavaScript throw statements with the help of examples.']",[],[],[],"['JavaScript throw statement', 'JavaScript throw with try...catch', 'Rethrow an Exception']",['Example 1: try...catch...throw Example'],"['The syntax of throw statement is:', 'Here, expression specifies the value of the exception.', 'For example,', 'The syntax of try...catch...throw is:', 'Output', 'For example,', 'Output']","['Note: The expression can be string, boolean, number, or object value.', 'The throw statement specifies the string The number is low as an expression.', 'You can also use throw statement inside the catch block to rethrow an exception. For example,', 'Here, the catch block handles the exception and no error occurs. Hence, the throw statement is not rethrown.']","['In the previous tutorial, you learned to handle exceptions using JavaScript try..catch statement. The try and catch statements handle exceptions in a standard way which is provided by JavaScript. However, you can use the throw statement to pass user-defined exceptions.', 'In JavaScript, the throw statement handles user-defined exceptions. For example, if a certain number is divided by 0, and if you need to consider Infinity as an exception, you can use the throw statement to handle that exception.', 'Note: When the throw statement is executed, it exits out of the block and goes to the catch block. And the code below the throw statement is not executed.', 'In the above program, a condition is checked. If the number is less than\xa051, an error is thrown. And that error is thrown using the throw statement.', 'Note: You can also use other built-in error constructors for standard errors: TypeError, SyntaxError, ReferenceError, EvalError, InternalError, and RangeError.', 'In the above program, the throw statement is used within the try block to catch an exception. And the throw statement is rethrown in the catch block which gets executed if the catch block cannot handle the exception.', 'If the error was not handled by the catch block, the throw statement would be rethrown with error message Uncaught Error: The value is low']","['throw expression;', 'const number = 5;', '    throw exception;', 'catch(error) {', 'const number = 40;', '    if(number > 50) {', '    else {', ""    console.log('hello');"", 'catch(error) {', 'const number = 5;', 'catch(error) {', '    if( number + 8 > 10) {', '    else {']","['throw number/0; // generate an exception when divided by 0', ""        throw new Error('The number is low');"", ""    console.log('An error caught'); "", ""    console.log('Error message: ' + error);  "", ""throw new ReferenceError('this is reference error');"", ""     throw new Error('This is the throw');"", ""    console.log('An error caught');"", ""         console.log('Error message: ' + error); "", ""        console.log('Error resolved');"", ""        throw new Error('The value is low');""]","['An error caught', 'Error message: Error: The number is low', 'An error caught', 'Error message: Error: This is the throw', 'Error resolved']",[],[]
30,['JavaScript Modules'],"['In this tutorial, you will learn about modules in JavaScript with the help of examples.']",[],[],[],"['Export Multiple Objects', 'Renaming imports and exports', 'Default Export', 'Modules Always use Strict Mode', 'Benefit of Using Module']","['1. Rename in the module (export file)', '2. Rename in the import file']","['Suppose, a file named greet.js\xa0contains the following code:', 'Here,', 'In the file module.js', 'In main file,', 'Here,', 'You can also perform default export of the module. For example,', 'In the file greet.js:', 'Then when importing, you can use:', 'While performing default export,', 'By default, modules are in strict mode. For example,']","['Now, to use the code of greet.js in another file, you can use the following code:', 'It is also possible to export multiple objects from a module. For example,', 'This imports both the name variable and the sum() function from the module.js file.', 'To avoid naming conflicts, you can rename these functions, objects, etc. during the export or during the import .', 'Note: A file can contain multiple exports. However, you can only have one default export in a file.', 'The use of import/export may not be supported in some browsers. To learn more, visit JavaScript import/export Support.']","['As our program grows bigger, it may contain many lines of code. Instead of putting everything in a single file, you can use modules to separate codes in separate files as per their functionality. This makes our code organized and easier to maintain.', ""Module is a file that contains code to perform a specific task. A module may contain variables, functions, classes etc. Let's see an example,"", 'Note: You can only access exported functions, objects, etc. from the module. You need to use the export keyword for the particular function, objects, etc. to import them and use them in other files.', 'If the objects (variables, functions etc.) that you want to import are already present in your main file, the program may not behave as you want. In this case, the program takes value from the main file instead of the imported file.', 'Here, while exporting the function from module.js file, new names (here, newName1 & newName2 ) are given to the function. Hence, when importing that function, the new name is used to reference that function.', 'Here, while importing the function, the new names (here, newName1 & newName2 ) are used for the function name. Now you use the new names to reference these functions.']","['    return `Hello ${name}`;', '    ... ', 'export function sum(x, y) {', '    return x + y;', 'console.log(name);', 'let add = sum(4, 9);', 'console.log(add); // 13', 'export {', '    function1 as newName1,', '    function2 as newName2', 'export {', '    function1,', '    function2', '    return `Hello ${name}`;', 'export const age = 23;', 'function greet() {', 'export greet();']","['export function greetPerson(name) {', ""import { greetPerson } from './greet.js';"", ""let displayName = greetPerson('Jack');"", 'console.log(displayName); // Hello Jack', 'export function greetPerson(name) {', ""import { greet } from '/.greet.js';"", ""export const name = 'JavaScript Program';"", ""import { name, sum } from './module.js';"", ""import { name, sum } from './module.js';"", ""import { newName1, newName2 } from './module.js';"", ""import { function1 as newName1, function2 as newName2 } from './module.js';"", 'export default function greet(name) {', ""import random_name from './greet.js';""]",[],[],"[""The greetPerson() function in the greet.js is exported using the export keyword|||||||||export function greetPerson(name) {|||    ... |||}||||||Then, we imported greetPerson() in another file using the import keyword. To import functions, objects, etc.,\xa0you need to wrap them around { }.||||||import { greet } from '/.greet.js';||||||random_name is imported from greet.js. Since, random_name is not in greet.js, the default export (greet() in this case) is exported as random_name.|||You can directly use the default export without enclosing curly brackets {}.|||The code base is easier to maintain because different code having different functionalities are in different files.|||Makes code reusable. You can define a module and use it numerous times as per your needs.|||""]"
