,main_headings,main_contents,video_headings,video_urls,sub_headings_h2,sub_headings_h3,image_urls,facts,definitions,explanations,snippets,codes,outputs,table_data,list_items
0,['How to Get Started With Python?'],"['In this tutorial, you will learn to install and run Python on your computer. Once we do that, we will also write our first Python program.']",['Video: Introduction to Python'],['https://www.youtube.com/embed/B7G5B8P8k9s?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['The Easiest Way to Run Python', 'Install Python Separately', 'Your first Python Program']","['1. Run Python in Immediate mode', '2. Run Python in the Integrated Development Environment (IDE)']","['//cdn.programiz.com/sites/tutorial2program/files/test.jpg', '//cdn.programiz.com/sites/tutorial2program/files/python-install_0.jpg', '//cdn.programiz.com/sites/tutorial2program/files/python-run-command-mode.jpg', '//cdn.programiz.com/sites/tutorial2program/files/idle-python.jpg', '//cdn.programiz.com/sites/tutorial2program/files/python-program-run-idle.jpg']","['The easiest way to run Python is by using Thonny IDE.', 'Follow the following steps to run Python on your computer.', 'Once you finish the installation process, you can run Python.', 'When you open IDLE, an interactive Python Shell is opened.', 'Then, run the file. You will get the following output.', 'Congratulations! You just wrote your first program in Python.']","[""The Thonny IDE comes with the latest version of Python bundled in it. So you don't have to install Python separately."", ""If you don't want to use Thonny, here's how you can install and run Python on your computer."", 'We can use any text editing software to write a Python script file.', 'Now you can create a new file and save it with .py extension. For example, hello.py', 'Write Python code in the file and save it. To run the file, go to Run > Run Module or simply click F5.', 'Now that we have Python up and running, we can write our first Python program.', 'Type the following code in any text editor or an IDE and save it as hello_world.py', 'As you can see, this was a pretty easy task. This is the beauty of the Python programming language.']","['Python is a cross-platform programming language, which means that it can run on multiple platforms like Windows, macOS, Linux, and has even been ported to the Java and .NET virtual machines. It is free and open-source.', ""Even though most of today's Linux and Mac have Python pre-installed in it, the version might be out-of-date. So, it is always a good idea to install the most current version."", 'Once Python is installed, typing python in the command line will invoke the interpreter in immediate mode. We can directly type in Python code, and press Enter to get the output.', 'Try typing in 1 + 1 and press enter. We get 2 as the output. This prompt can be used as a calculator. To exit this mode, type quit() and press enter.', 'We just need to save it with the .py extension. But using an IDE can make our life a lot easier. IDE is a piece of software that provides useful features like code hinting, syntax highlighting and checking, file explorers, etc. to the programmer for application development.', ""By the way, when you install Python, an IDE named IDLE is also installed. You can use it to run Python on your computer. It's a decent IDE for beginners."", 'Let\'s create a very simple program called Hello World. A ""Hello, World!"" is a simple program that outputs Hello, World! on the screen. Since it\'s a very simple program, it\'s often used to introduce a new programming language to beginners.']","['print(""Hello, world!"")']",[],"['Hello, world!']",[],"['Download Thonny IDE.|||Run the installer to install Thonny on your computer.|||Go to: File > New. Then save the file with .py extension. For example, hello.py, example.py, etc.|||You can give any name to the file. However, the file name should end with .py|||Write Python code in the file and save it.|||Running Python using Thonny IDE|||Then Go to Run > Run current script or simply click F5 to run it.|||Download the latest version of Python.|||Run the installer file and follow the steps to install Python|||During the install process, check Add Python to environment variables. This will add Python to environment variables, and you can run Python from any part of the computer.|||Also, you can choose the path where Python is installed.|||Installing Python on the computer|||']"
1,['Python Keywords and Identifiers'],"['In this tutorial, you will learn about keywords (reserved words in Python) and identifiers (names given to variables, functions, etc.).']",[],[],"['Python Keywords', 'Python Identifiers']","['Rules for writing identifiers', 'Things to Remember']",[],"['Keywords are the reserved words in Python.', 'In Python, keywords are case sensitive.']","['There are 33 keywords in Python 3.7. This number can vary slightly over the course of time.', 'Looking at all the keywords at once and trying to figure out what they mean might be overwhelming.', 'If you want to have an overview, here is the complete list of all the keywords with examples.', 'Python is a case-sensitive language. This means, Variable and variable are not the same.', 'Multiple words can be separated using an underscore, like this_is_a_long_variable.']","['We cannot use a keyword as a variable name, function name or any other identifier. They are used to define the syntax and structure of the Python language.', 'All the keywords except True, False and None are in lowercase and they must be written as they are. The list of all the keywords is given below.', 'An identifier is a name given to entities like class, functions, variables, etc. It helps to differentiate one entity from another.', 'Always give the identifiers a name that makes sense. While c = 10 is a valid name, writing count = 10 would make more sense, and it would be easier to figure out what it represents when you look at your code after a long gap.']",['global = 1'],[],"['  File ""<interactive input>"", line 1', '    global = 1', '           ^', 'SyntaxError: invalid syntax', '  File ""<interactive input>"", line 1', '    a@ = 0', '     ^', 'SyntaxError: invalid syntax']",['alse|||await|||else|||import|||pass&&&one|||break|||except|||in|||raise&&&rue|||class|||finally|||is|||return&&&nd|||continue|||for|||lambda|||try&&&s|||def|||from|||nonlocal|||while&&&ssert|||del|||global|||not|||with&&&sync|||elif|||if|||or|||yield'],"['Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore _. Names like myClass, var_1 and print_this_to_screen, all are valid example.|||An identifier cannot start with a digit. 1variable is invalid, but variable1 is a valid name.|||Keywords cannot be used as identifiers.||||||global = 1|||Output||||||  File ""<interactive input>"", line 1|||    global = 1|||           ^|||SyntaxError: invalid syntax||||||We cannot use special symbols like !, @, #, $, % etc. in our identifier.||||||a@ = 0|||Output||||||  File ""<interactive input>"", line 1|||    a@ = 0|||     ^|||SyntaxError: invalid syntax||||||An identifier can be of any length.|||']"
2,"['Python Statement, Indentation and Comments']","['In this tutorial, you will learn about Python statements, why indentation is important and use of comments in programming.']",[],[],"['Python Statement', 'Python Indentation', 'Python Comments']","['Multi-line statement', 'Multi-line comments', 'Docstrings in Python']",[],"['Incorrect indentation will result in IndentationError.', 'In Python, we use the hash (#) symbol to start writing a comment.', 'To learn more about comments, visit Python Comments.', 'A docstring is short for documentation string.', 'Triple quotes are used while writing docstrings. For example:', 'Output']","['Here, the surrounding parentheses ( ) do the line continuation implicitly. Same is the case with [ ] and { }. For example:', 'We can also put multiple statements in a single line using semicolons, as follows:', 'Generally, four whitespaces are used for indentation and are preferred over tabs. Here is an example.', 'both are valid and do the same thing, but the former style is clearer.', 'Another way of doing this is to use triple quotes, either \'\'\' or """""".', 'The docstrings are associated with the object as their __doc__ attribute.', 'So, we can access the docstrings of the above function with the following lines of code:', 'To learn more about docstrings in Python, visit Python Docstrings.']","['Instructions that a Python interpreter can execute are called statements. For example, a = 1 is an assignment statement. if statement, for statement, while statement, etc. are other kinds of statements which will be discussed later.', 'In Python, the end of a statement is marked by a newline character. But we can make a statement extend over multiple lines with the line continuation character (\\). For example:', 'This is an explicit line continuation. In Python, line continuation is implied inside parentheses ( ), brackets [ ], and braces { }. For instance, we can implement the above multi-line statement as:', 'Most of the programming languages like C, C++, and Java use braces { } to define a block of code. Python, however, uses indentation.', 'A code block (body of a function, loop, etc.) starts with indentation and ends with the first unindented line. The amount of indentation is up to you, but it must be consistent throughout that block.', 'The enforcement of indentation in Python makes the code look neat and clean. This results in Python programs that look similar and consistent.', ""Indentation can be ignored in line continuation, but it's always a good idea to indent. It makes the code more readable. For example:"", 'Comments are very important while writing a program. They describe what is going on inside a program, so that a person looking at the source code does not have a hard time figuring it out.', ""You might forget the key details of the program you just wrote in a month's time. So taking the time to explain these concepts in the form of comments is always fruitful."", 'It extends up to the newline character. Comments are for programmers to better understand a program. Python Interpreter ignores comments.', 'We can have comments that extend up to multiple lines. One way is to use the hash(#) symbol at the beginning of each line. For example:', 'These triple quotes are generally used for multi-line strings. But they can be used as a multi-line comment as well. Unless they are not docstrings, they do not generate any extra code.', 'Python docstrings (documentation strings) are the string literals that appear right after the definition of a function, method, class, or module.', 'Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.']","['a = 1 + 2 + 3 + \\', '    4 + 5 + 6 + \\', '    7 + 8 + 9', 'a = (1 + 2 + 3 +', '    4 + 5 + 6 +', '    7 + 8 + 9)', ""colors = ['red',"", ""          'blue',"", ""          'green']"", 'a = 1; b = 2; c = 3', 'for i in range(1,11):', '    print(i)', '    if i == 5:', '        break', 'if True:', ""    print('Hello')"", '    a = 5', ""if True: print('Hello'); a = 5"", '#This is a comment', '#print out Hello', ""print('Hello')"", '#This is a long comment', '#and it extends', '#to multiple lines', '""""""This is also a', 'perfect example of', 'multi-line comments""""""', 'def double(num):', '    return 2*num', 'def double(num):', '    return 2*num', 'print(double.__doc__)']","['    """"""Function to double the value""""""', '    """"""Function to double the value""""""']",['Function to double the value'],[],[]
3,"['Python Variables, Constants and Literals']","['In this tutorial, you will learn about Python variables, constants, literals and their use cases.']",['Video: Python Variables and print()'],['https://www.youtube.com/embed/i83VkP0LHPI?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Python Variables', 'Assigning values to Variables in Python', 'Constants', 'Assigning value to constant in Python', 'Rules and Naming Convention for Variables and constants', 'Literals', 'Numeric Literals', 'String literals', 'Boolean literals', 'Special literals', 'Literal Collections']","['Example 1: Declaring and assigning value to a variable', 'Example 2: Changing the value of a variable', 'Example 3: Assigning multiple values to multiple variables', 'Example 3: Declaring and assigning value to a constant', 'Example 4: How to use Numeric literals in Python?', 'Example 7: How to use string literals in Python?', 'Example 8: How to use boolean literals in Python?', 'Example 9: How to use special literals in Python?', 'Example 10: How to use literals collections in Python?']",[],"['Output', 'Output', 'Create a constant.py:', 'Create a main.py:', 'Output', 'Output', 'In the above program,', 'To learn more about Numeric Literals, refer to\xa0Python Numbers.', 'Output', 'r""raw \\n string"" is a raw string literal.', 'A Boolean literal can have any of the two values: True or False.', 'Output', 'Output', 'Output']","['Here, we have created a variable named number. We have assigned the value 10 to the variable.', 'You can think of variables as a bag to store books in it and that book can be replaced at any time.', 'Initially, the value of number was 10. Later, it was changed to 1.1.', 'As you can see from the above example, you can use the assignment operator = to assign a value to a variable.', 'If we want to assign the same value to multiple variables at once, we can do this as:', 'The second program assigns the same string to all the three variables x, y and z.', 'You can think of constants as a bag to store some books which cannot be replaced once placed inside the bag.', 'Literal is a raw data given in a variable or constant. In Python, there are various types of literals they are as follows:', 'In the above program, This is Python is a string literal and C is a character literal.', 'The value in triple-quotes """""" assigned to the multiline_str is a multi-line string literal.', 'Python contains one special literal i.e. None. We use it to specify that the field has not been created.', 'There are four different literal collections List literals, Tuple literals, Dict literals, and Set literals.', 'To learn more about literal collections, refer to Python Data Types.']","['A variable is a named location used to store data in the memory. It is helpful to think of variables as a container that holds data that can be changed later in the program. For example,', ""Note: In Python, we don't actually assign values to the variables. Instead, Python gives the reference of the object(value) to the variable."", 'In the above program, we assigned a value apple.com to the variable website. Then, we printed out the value assigned to website i.e.\xa0apple.com', ""Note: Python is a type-inferred language, so you don't have to explicitly define the variable type. It automatically knows that apple.com is a string and declares the website variable as a string."", 'In the above program, we have assigned apple.com\xa0to the website variable initially. Then, the value is changed to programiz.com.', 'A constant is a type of variable whose value cannot be changed. It is helpful to think of constants as containers that hold information which cannot be changed later.', 'In Python, constants are usually declared and assigned in a module. Here, the module is a new file containing variables, functions, etc which is imported to the main file. Inside the module, constants are written in all capital letters and underscores separating the words.', 'In the above program, we create a constant.py module file. Then, we assign the constant value to PI and GRAVITY. After that, we create a main.py file and import the constant module. Finally, we print the constant value.', ""Note: In reality, we don't use constants in Python. Naming them in all capital letters is a convention to separate them from variables, however, it does not actually prevent reassignment."", 'Numeric Literals are immutable (unchangeable). Numeric literals can belong to 3 different numerical types: Integer, Float, and Complex.', 'A string literal is a sequence of characters surrounded by quotes. We can use both single, double, or triple quotes for a string. And, a character literal is a single character surrounded by single or double quotes.', 'The string u""\\u00dcnic\\u00f6de"" is a Unicode literal which supports characters other than English. In this case, \\u00dc represents Ü and \\u00f6 represents ö.', 'In the above program, we use boolean literal True and False. In Python, True represents the value as 1 and False as 0. The value of x is True because 1 is equal to True. And, the value of y is False because 1 is not equal to False.', 'Similarly, we can use the True and False in numeric expressions as the value. The value of a is 5 because we add True which has a value of 1 with 4. Similarly, b is 10 because we add the False having value of 0 with 10.', 'In the above program, we define a menu function. Inside menu, when we set the argument as drink then, it displays Available. And, when the argument is food, it displays None.', 'In the above program, we created a list of fruits, a tuple of numbers, a dictionary dict having values with keys designated to each value and a set of vowels.']","['number = 10', 'number = 10', 'number = 1.1', 'website = ""apple.com""', 'print(website)', 'website = ""apple.com""', 'print(website)', 'website = ""programiz.com""', 'print(website)', 'a, b, c = 5, 3.2, ""Hello""', 'print (a)', 'print (b)', 'print (c)', 'x = y = z = ""same""', 'print (x)', 'print (y)', 'print (z)', 'PI = 3.14', 'GRAVITY = 9.8', 'import constant', 'print(constant.PI)', 'print(constant.GRAVITY)', 'a = 0b1010 #Binary Literals', 'b = 100 #Decimal Literal ', 'c = 0o310 #Octal Literal', 'd = 0x12c #Hexadecimal Literal', '#Float Literal', 'float_1 = 10.5 ', 'float_2 = 1.5e2', '#Complex Literal ', 'x = 3.14j', 'print(a, b, c, d)', 'print(float_1, float_2)', 'print(x, x.imag, x.real)', 'strings = ""This is Python""', 'char = ""C""', 'unicode = u""\\u00dcnic\\u00f6de""', 'raw_str = r""raw \\n string""', 'print(strings)', 'print(char)', 'print(multiline_str)', 'print(unicode)', 'print(raw_str)', 'x = (1 == True)', 'y = (1 == False)', 'a = True + 4', 'b = False + 10', 'print(""x is"", x)', 'print(""y is"", y)', 'print(""a:"", a)', 'print(""b:"", b)', 'drink = ""Available""', 'food = None', 'def menu(x):', '    if x == drink:', '        print(drink)', '    else:', '        print(food)', 'menu(drink)', 'menu(food)', 'numbers = (1, 2, 3) #tuple', 'print(fruits)', 'print(numbers)', 'print(alphabets)', 'print(vowels)']","['# assigning a new value to website', 'multiline_str = """"""This is a multiline string with more than one line code.""""""', 'fruits = [""apple"", ""mango"", ""orange""] #list', ""alphabets = {'a':'apple', 'b':'ball', 'c':'cat'} #dictionary"", ""vowels = {'a', 'e', 'i' , 'o', 'u'} #set""]","['apple.com', 'apple.com', 'programiz.com', '3.14', '9.8', 'snake_case', 'MACRO_CASE', 'camelCase', 'CapWords', 'my_name', 'current_salary', 'PI', 'G', 'MASS', 'SPEED_OF_LIGHT', 'TEMP', '10 100 200 300', '10.5 150.0', '3.14j 3.14 0.0', 'This is Python', 'C', 'This is a multiline string with more than one line code.', 'Ünicöde', 'raw \\n string', 'x is True', 'y is False', 'a: 5', 'b: 10', 'Available', 'None', ""['apple', 'mango', 'orange']"", '(1, 2, 3)', ""{'a': 'apple', 'b': 'ball', 'c': 'cat'}"", ""{'e', 'a', 'o', 'i', 'u'}""]",[],"[""We assigned integer literals into different variables. Here, a is binary literal, b is a decimal literal, c is an octal literal and d is a hexadecimal literal.|||When we print the variables, all the literals are converted into decimal values.|||10.5 and 1.5e2 are floating-point literals. 1.5e2 is expressed with exponential and is equivalent to 1.5 * 102.|||We assigned a complex literal i.e 3.14j in variable x. Then we use imaginary literal (x.imag) and real literal (x.real) to create imaginary and real parts of complex numbers.|||&&&Constant and variable names should have a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore (_). For example:|||||||||snake_case|||MACRO_CASE|||camelCase|||CapWords||||||Create a name that makes sense. For example,\xa0vowel makes more sense than v.|||If you want to create a variable name having two words, use underscore to separate them.\xa0For example:||||||my_name|||current_salary||||||Use capital letters possible to declare a constant. For example:||||||PI|||G|||MASS|||SPEED_OF_LIGHT|||TEMP||||||Never use special symbols like !, @, #, $, %, etc.|||Don't start a variable name with a digit.|||""]"
4,['Python Data Types'],"['In this tutorial, you will learn about different data types you can use in Python.']",[],[],"['Data types in Python', 'Python Numbers', 'Python List', 'Python Tuple', 'Python Strings', 'Python Set', 'Python Dictionary', 'Conversion between data types']",[],[],"['Output', 'Notice that the float variable b got truncated.', 'Output', 'Output', 'Output', 'Output', 'Output', 'Output', 'Output', 'Dictionary is an unordered collection of key-value pairs.', 'Output', 'Conversion to and from string must contain compatible values.', 'We can even convert one sequence to another.', 'To convert to dictionary, each element must be a pair:']","['There are various data types in Python. Some of the important types are listed below.', 'Integers can be of any length, it is only limited by the memory available.', 'Complex numbers are written in the form, x + yj, where x is the real part and y is the imaginary part. Here are some examples.', 'Declaring a list is pretty straight forward. Items separated by commas are enclosed within brackets [ ].', 'We can use the slicing operator [ ] to extract an item or a range of items from a list. The index starts from 0 in Python.', 'Lists are mutable, meaning, the value of elements of a list can be altered.', 'Tuples are used to write-protect data and are usually faster than lists as they cannot change dynamically.', 'It is defined within parentheses () where items are separated by commas.', 'We can use the slicing operator [] to extract items but we cannot change its value.', 'Just like a list and tuple, the slicing operator [ ] can be used with strings. Strings, however, are immutable.', 'We can perform set operations like union, intersection on two sets. Sets have unique values. They eliminate duplicates.', 'Since, set are unordered collection, indexing has no meaning. Hence, the slicing operator [] does not work.', 'We use key to retrieve the respective value. But not the other way around.', 'We can convert between different data types by using different type conversion functions like int(), float(), str(), etc.', 'Conversion from float to int will truncate the value (make it closer to zero).']","['Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.', 'Integers, floating point numbers and complex numbers fall under Python numbers category. They are defined as int, float and complex classes in Python.', 'We can use the type() function to know which class a variable or a value belongs to. Similarly, the isinstance() function is used to check if an object belongs to a particular class.', 'A floating-point number is accurate up to 15 decimal places. Integer and floating points are separated by decimal points. 1 is an integer, 1.0 is a floating-point number.', 'List is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.', 'Tuple is an ordered sequence of items same as a list. The only difference is that tuples are immutable. Tuples once created cannot be modified.', 'String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, \'\'\' or """""".', 'Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces { }. Items in a set are not ordered.', 'It is generally used when we have a huge amount of data. Dictionaries are optimized for retrieving data. We must know the key to retrieve the value.', 'In Python, dictionaries are defined within braces {} with each item being a pair in the form key:value. Key and value can be of any type.']","['a = 1+2j', '>>> a = 1234567890123456789', '1234567890123456789', '>>> b = 0.1234567890123456789', '0.12345678901234568', '>>> c = 1+2j', ""a = [1, 2.2, 'python']"", 'a = [5,10,15,20,25,30,35,40]', '# a[2] = 15', 'print(""a[2] = "", a[2])', '# a[0:3] = [5, 10, 15]', 'print(""a[0:3] = "", a[0:3])', '# a[5:] = [30, 35, 40]', 'print(""a[5:] = "", a[5:])', 'a = [1, 2, 3]', 'a[2] = 4', 'print(a)', ""t = (5,'program', 1+3j)"", ""t = (5,'program', 1+3j)"", ""# t[1] = 'program'"", 'print(""t[1] = "", t[1])', 'print(""t[0:3] = "", t[0:3])', '# Generates error', '# Tuples are immutable', 't[0] = 10', 's = ""This is a string""', 'print(s)', ""s = '''A multiline"", ""string'''"", 'print(s)', ""s = 'Hello world!'"", ""# s[4] = 'o'"", 'print(""s[4] = "", s[4])', ""# s[6:11] = 'world'"", 'print(""s[6:11] = "", s[6:11])', '# Generates error', ""s[5] ='d'"", 'a = {5,2,3,1,4}', '# printing set variable', 'print(""a = "", a)', '# data type of variable a', 'print(type(a))', 'a = {1,2,2,3,3,3}', 'print(a)', '>>> a = {1,2,3}', '>>> a[1]', "">>> d = {1:'value','key':2}"", '>>> type(d)', ""<class 'dict'>"", ""d = {1:'value','key':2}"", 'print(type(d))', 'print(""d[1] = "", d[1])', 'print(""d[\'key\'] = "", d[\'key\'])', '# Generates error', 'print(""d[2] = "", d[2])', '>>> float(5)', '>>> int(10.6)', '>>> int(-10.6)', "">>> float('2.5')"", '>>> str(25)', "">>> int('1p')"", '>>> set([1,2,3])', '{1, 2, 3}', '>>> tuple({5,6,7})', '(5, 6, 7)', "">>> list('hello')"", ""['h', 'e', 'l', 'l', 'o']"", '>>> dict([[1,2],[3,4]])', '{1: 2, 3: 4}', '>>> dict([(3,26),(4,44)])', '{3: 26, 4: 44}']","['print(a, ""is complex number?"", isinstance(1+2j,complex))', ""# t[0:3] = (5, 'program', (1+3j))"", '# Strings are immutable in Python', 'Traceback (most recent call last):', '  File ""<string>"", line 301, in runcode', '  File ""<interactive input>"", line 1, in <module>', ""TypeError: 'set' object does not support indexing"", 'Traceback (most recent call last):', '  File ""<string>"", line 301, in runcode', '  File ""<interactive input>"", line 1, in <module>', ""ValueError: invalid literal for int() with base 10: '1p'""]","[""5 is of type <class 'int'>"", ""2.0 is of type <class 'float'>"", '(1+2j) is complex number? True', 'a[2] =  15', 'a[0:3] =  [5, 10, 15]', 'a[5:] =  [30, 35, 40]', '[1, 2, 4]', 't[1] =  program', ""t[0:3] =  (5, 'program', (1+3j))"", 'Traceback (most recent call last):', '  File ""test.py"", line 11, in <module>', '    t[0] = 10', ""TypeError: 'tuple' object does not support item assignment"", 'This is a string', 'A multiline', 'string', 's[4] =  o', 's[6:11] =  world', 'Traceback (most recent call last):', '  File ""<string>"", line 11, in <module>', ""TypeError: 'str' object does not support item assignment"", 'a =  {1, 2, 3, 4, 5}', ""<class 'set'>"", '{1, 2, 3}', ""<class 'dict'>"", 'd[1] =  value', ""d['key'] =  2"", 'Traceback (most recent call last):', '  File ""<string>"", line 9, in <module>', 'KeyError: 2']",[],[]
5,['Python Type Conversion and Type Casting'],"['In this article, you will learn about the Type conversion and uses of type conversion.']",[],[],"['Type Conversion', 'Implicit Type Conversion', 'Explicit Type Conversion', 'Key Points to Remember']","['Example 1: Converting integer to float', 'Example 2: Addition of string(higher) data type and integer(lower) datatype', 'Example 3: Addition of string and integer using explicit conversion']",[],"['When we run the above program, the output will be:', 'In the above program,', 'When we run the above program, the output will be:', 'In the above program,', 'Syntax :', 'When we run the above program, the output will be:', 'In the above program,']","['Before learning\xa0Type Conversion in Python,\xa0you should have knowledge\xa0about\xa0Python Data Types.', ""Now, let's try adding a string and an integer, and see how Python deals with it."", 'This type of conversion is also called typecasting because the user casts (changes) the data type of the objects.', 'Typecasting can be done by assigning the required data type function to the expression.']","['The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion. Python has two types of type conversion.', ""In Implicit type conversion, Python automatically converts one data type to another data type. This process doesn't need any user involvement."", ""Let's see an example where Python promotes the conversion of the lower data type (integer) to the higher data type (float) to avoid data loss."", 'In Explicit Type Conversion, users convert the data type of an object to required data type. We use the predefined functions like int(), float(), str(), etc to perform explicit type conversion.']","['num_int = 123', 'num_flo = 1.23', 'num_new = num_int + num_flo', 'num_int = 123', 'num_str = ""456""', 'print(num_int+num_str)', 'num_int = 123', 'num_str = ""456""', 'num_str = int(num_str)', 'num_sum = num_int + num_str']","['print(""datatype of num_int:"",type(num_int))', 'print(""datatype of num_flo:"",type(num_flo))', 'print(""Value of num_new:"",num_new)', 'print(""datatype of num_new:"",type(num_new))', 'print(""Data type of num_int:"",type(num_int))', 'print(""Data type of num_str:"",type(num_str))', 'print(""Data type of num_int:"",type(num_int))', 'print(""Data type of num_str before Type Casting:"",type(num_str))', 'print(""Data type of num_str after Type Casting:"",type(num_str))', 'print(""Sum of num_int and num_str:"",num_sum)', 'print(""Data type of the sum:"",type(num_sum))']","[""datatype of num_int: <class 'int'>"", ""datatype of num_flo: <class 'float'>"", 'Value of num_new: 124.23', ""datatype of num_new: <class 'float'>"", ""Data type of num_int: <class 'int'> "", ""Data type of num_str: <class 'str'> "", 'Traceback (most recent call last): ', '  File ""python"", line 7, in <module> ', ""TypeError: unsupported operand type(s) for +: 'int' and 'str'"", '<required_datatype>(expression)', ""Data type of num_int: <class 'int'>"", ""Data type of num_str before Type Casting: <class 'str'>"", ""Data type of num_str after Type Casting: <class 'int'>"", 'Sum of num_int and num_str: 579', ""Data type of the sum: <class 'int'>""]",[],"['We add two variables num_int and num_flo, storing the value in num_new.|||We will look at the data type of all three objects respectively.|||In the output, we can see the data type of num_int is an integer while the data type of num_flo is a float.|||Also, we can see the num_new has a float data type because Python always converts smaller data types to larger data types to avoid the loss of data.|||We add two variables num_int and num_str.|||As we can see from the output, we got TypeError. Python is not able to use Implicit Conversion in such conditions.|||However, Python has a solution for these types of situations which is known as Explicit Conversion.|||We add num_str and num_int variable.|||We converted num_str from string(higher) to integer(lower) type using int() function to perform the addition.|||After converting num_str to an integer value, Python is able to add these two variables.|||We got the num_sum value and data type to be an integer.|||&&&Implicit Type Conversion|||Explicit Type Conversion|||Type Conversion is the conversion of object from one data type to another data type.|||Implicit Type Conversion is automatically performed by the Python interpreter.|||Python avoids the loss of data in Implicit Type Conversion.|||Explicit Type Conversion is also called Type Casting, the data types of objects are converted using predefined functions by the user.|||In Type Casting, loss of data may occur as we enforce the object to a specific data type.|||']"
6,"['Python Input, Output and Import']","['This tutorial focuses on two built-in functions print() and input() to perform I/O task in Python. Also, you will learn to import modules and use them in your program.']",['Video: Python Take User Input'],['https://www.youtube.com/embed/DRBybZ6hsY0?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Python Output Using print() function', 'Output formatting', 'Python Input', 'Python Import']",[],[],"['An example of its use is given below.', 'Output', 'Another example is given below:', 'Output', 'The actual syntax of the print() function is:', 'Here, objects is the value(s) to be printed.', 'Output', 'Output', 'We can even use keyword arguments to format the string.', 'We can use the module in the following ways:', 'Output', 'We can also add our own location to this list.']","['Python provides numerous built-in functions that are readily available to us at the Python prompt.', 'The sep separator is used between the values. It defaults into a space character.', 'After all values are printed, end is printed. It defaults into a new line.', 'Up until now, our programs were static. The value of variables was defined or hard coded into the source code.', 'where prompt is the string we wish to display on the screen. It is optional.', 'When our program grows bigger, it is a good idea to break it into different modules.', 'For example, we can import the math module by typing the following line:', 'While importing a module, Python looks at several places defined in sys.path. It is a list of directory locations.']","['Some of the functions like input() and print() are widely used for standard input and output operations respectively. Let us see the output section first.', 'We use the print() function to output data to the standard output device (screen). We can also output data to a file, but this will be discussed later.', 'In the second print() statement, we can notice that space was added between the string and the value of variable a. This is by default, but we can change it.', 'The file is the object where the values are printed and its default value is sys.stdout (screen). Here is an example to illustrate this.', 'Sometimes we would like to format our output to make it look attractive. This can be done by using the str.format() method. This method is visible to any string object.', 'Here, the curly braces {} are used as placeholders. We can specify the order in which they are printed by using numbers (tuple index).', 'We can also format strings like the old sprintf() style used in C programming language. We use the % operator to accomplish this.', 'To allow flexibility, we might want to take the input from the user. In Python, we have the input() function to allow this. The syntax for input() is:', 'Here, we can see that the entered value 10 is a string, not a number. To convert this into a number we can use int() or float() functions.', 'This same operation can be performed using the eval() function. But eval takes it further. It can evaluate even expressions, provided the input is a string', 'Definitions inside a module can be imported to another module or the interactive interpreter in Python. We use the import keyword to do this.', 'Now all the definitions inside math module are available in our scope. We can also import some specific attributes and functions only, using the from keyword. For example:']","[""print('The value of a is', a)"", 'print(1, 2, 3, 4)', ""print(1, 2, 3, 4, sep='*')"", '>>> x = 5; y = 10', 'Hello John, Goodmorning', '>>> x = 12.3456789', 'The value of x is 12.35', 'The value of x is 12.3457', 'Enter a number: 10', "">>> int('10')"", "">>> float('10')"", "">>> int('2+3')"", "">>> eval('2+3')"", 'import math', 'import math', 'print(math.pi)', '>>> from math import pi', '3.141592653589793', '>>> import sys', '>>> sys.path', "" 'C:\\\\Python33\\\\DLLs', "", "" 'C:\\\\Python33\\\\lib', "", "" 'C:\\\\Python33', ""]","[""print('This sentence is output to the screen')"", ""print(1, 2, 3, 4, sep='#', end='&')"", "">>> print('The value of x is {} and y is {}'.format(x,y))"", ""print('I love {0} and {1}'.format('bread','butter'))"", ""print('I love {1} and {0}'.format('bread','butter'))"", "">>> print('Hello {name}, {greeting}'.format(greeting = 'Goodmorning', name = 'John'))"", "">>> print('The value of x is %3.2f' %x)"", "">>> print('The value of x is %3.4f' %x)"", "">>> num = input('Enter a number: ')"", 'Traceback (most recent call last):', '  File ""<string>"", line 301, in runcode', '  File ""<interactive input>"", line 1, in <module>', ""ValueError: invalid literal for int() with base 10: '2+3'"", "" 'C:\\\\Windows\\\\system32\\\\python33.zip', "", "" 'C:\\\\Python33\\\\lib\\\\site-packages']""]","['This sentence is output to the screen', 'The value of a is 5', ""print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)"", '1 2 3 4', '1*2*3*4', '1#2#3#4&', 'I love bread and butter', 'I love butter and bread', 'input([prompt])', '3.141592653589793']",[],[]
7,['Python Operators'],"[""In this tutorial, you'll learn everything about different types of operators in Python, their syntax and how to use them with examples.""]",['Video: Operators in Python'],['https://www.youtube.com/embed/xTmEqNRr9T4?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['What are operators in python?', 'Arithmetic operators', 'Comparison operators', 'Logical operators', 'Bitwise operators', 'Assignment operators', 'Special operators']","['Example 1: Arithmetic operators in Python', 'Example 2: Comparison operators in Python', 'Example 3: Logical Operators in Python', 'Identity operators', 'Example 4: Identity operators in Python', 'Membership operators', 'Example #5: Membership operators in Python']",[],"['For example:', 'Output', 'Output', 'Logical operators are the and, or, not operators.', 'Output', 'Here is the truth table for these operators.', 'For example, 2 is 10 in binary and 7 is 111.', 'Output', 'Output']","['Here, + is the operator that performs addition. 2 and 3 are the operands and 5 is the output of the operation.', 'Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication, etc.', 'Comparison operators are used to compare values. It returns either True or False according to the condition.', 'Bitwise operators act on operands as if they were strings of binary digits. They operate bit by bit, hence the name.', 'In the table below: Let x = 10 (0000 1010 in binary) and y = 4 (0000 0100 in binary)', 'Assignment operators are used in Python to assign values to variables.', 'a = 5 is a simple assignment operator that assigns the value 5 on the right to the variable a on the left.', 'In a dictionary we can only test for presence of key, not the value.']","['Operators are special symbols in Python that carry out arithmetic or logical computation. The value that the operator operates on is called the operand.', 'There are various compound operators in Python like a += 5 that adds to the variable and later assigns the same. It is equivalent to a = a + 5.', 'Python language offers some special types of operators like the identity operator or the membership operator. They are described below with examples.', 'is and is not are the identity operators in Python. They are used to check if two values (or variables) are located on the same part of the memory. Two variables that are equal does not imply that they are identical.', 'Here, we see that x1 and y1 are integers of the same values, so they are equal as well as identical. Same is the case with x2 and y2 (strings).', 'But x3 and y3 are lists. They are equal but not identical. It is because the interpreter locates them separately in memory although they are equal.', 'in and not in are the membership operators in Python. They are used to test whether a value or variable is found in a sequence (string, list, tuple, set and dictionary).', ""Here, 'H' is in x but 'hello' is not present in x (remember, Python is case sensitive). Similarly, 1 is key and 'a' is the value in dictionary y. Hence, 'a' in y returns False.""]","['# Output: x + y = 19', ""print('x + y =',x+y)"", '# Output: x - y = 11', ""print('x - y =',x-y)"", '# Output: x * y = 60', ""print('x * y =',x*y)"", '# Output: x / y = 3.75', ""print('x / y =',x/y)"", '# Output: x // y = 3', ""print('x // y =',x//y)"", '# Output: x ** y = 50625', ""print('x ** y =',x**y)"", '# Output: x > y is False', ""print('x > y is',x>y)"", '# Output: x < y is True', ""print('x < y is',x<y)"", '# Output: x == y is False', ""print('x == y is',x==y)"", '# Output: x != y is True', ""print('x != y is',x!=y)"", '# Output: x >= y is False', ""print('x >= y is',x>=y)"", '# Output: x <= y is True', ""print('x <= y is',x<=y)"", 'x = True', 'y = False', ""print('x and y is',x and y)"", ""print('x or y is',x or y)"", ""print('not x is',not x)"", ""x2 = 'Hello'"", ""y2 = 'Hello'"", 'x3 = [1,2,3]', 'y3 = [1,2,3]', '# Output: False', 'print(x1 is not y1)', '# Output: True', 'print(x2 is y2)', '# Output: False', 'print(x3 is y3)', ""x = 'Hello world'"", ""y = {1:'a',2:'b'}"", '# Output: True', ""print('H' in x)"", '# Output: True', ""print('hello' not in x)"", '# Output: True', 'print(1 in y)', '# Output: False', ""print('a' in y)""]",[],"['x + y = 19', 'x - y = 11', 'x * y = 60', 'x / y = 3.75', 'x // y = 3', 'x ** y = 50625', 'x > y is False', 'x < y is True', 'x == y is False', 'x != y is True', 'x >= y is False', 'x <= y is True', 'x and y is False', 'x or y is True', 'not x is False', 'False', 'True', 'False', 'True', 'True', 'True', 'False']","['perator|||Meaning|||Example&&&|||Add two operands or unary plus|||x + y+ 2&&&|||Subtract right operand from the left or unary minus|||x - y- 2&&&|||Multiply two operands|||x * y&&&|||Divide left operand by the right one (always results into float)|||x / y&&&|||Modulus - remainder of the division of left operand by the right|||x % y (remainder of x/y)&&&/|||Floor division - division that results into whole number adjusted to the left in the number line|||x // y&&&*|||Exponent - left operand raised to the power of right|||x**y (x to the power y)', 'perator|||Meaning|||Example&&&|||Greater than - True if left operand is greater than the right|||x > y&&&|||Less than - True if left operand is less than the right|||x < y&&&=|||Equal to - True if both operands are equal|||x == y&&&=|||Not equal to - True if operands are not equal|||x != y&&&=|||Greater than or equal to - True if left operand is greater than or equal to the right|||x >= y&&&=|||Less than or equal to - True if left operand is less than or equal to the right|||x <= y', 'perator|||Meaning|||Example&&&nd|||True if both the operands are true|||x and y&&&r|||True if either of the operands is true|||x or y&&&ot|||True if operand is false (complements the operand)|||not x', 'perator|||Meaning|||Example&&&|||Bitwise AND|||x & y = 0 (0000 0000)&&&|||Bitwise OR|||x | y = 14 (0000 1110)&&&|||Bitwise NOT|||~x = -11 (1111 0101)&&&|||Bitwise XOR|||x ^ y = 14 (0000 1110)&&&>|||Bitwise right shift|||x >> 2 = 2 (0000 0010)&&&<|||Bitwise left shift|||x << 2 = 40 (0010 1000)', 'perator|||Example|||Equivalent to&&&|||x = 5|||x = 5&&&=|||x += 5|||x = x + 5&&&=|||x -= 5|||x = x - 5&&&=|||x *= 5|||x = x * 5&&&=|||x /= 5|||x = x / 5&&&=|||x %= 5|||x = x % 5&&&/=|||x //= 5|||x = x // 5&&&*=|||x **= 5|||x = x ** 5&&&=|||x &= 5|||x = x & 5&&&=|||x |= 5|||x = x | 5&&&=|||x ^= 5|||x = x ^ 5&&&>=|||x >>= 5|||x = x >> 5&&&<=|||x <<= 5|||x = x << 5', 'perator|||Meaning|||Example&&&s|||True if the operands are identical (refer to the same object)|||x is True&&&s not|||True if the operands are not identical (do not refer to the same object)|||x is not True', 'perator|||Meaning|||Example&&&n|||True if value/variable is found in the sequence|||5 in x&&&ot in|||True if value/variable is not found in the sequence|||5 not in x']",[]
8,['Python Namespace and Scope'],"['In this tutorial, you will learn about namespace, mapping from names to objects, and scope of a variable. ']",[],[],"['What is Name in Python?', 'What is a Namespace in Python?', 'Python Variable Scope', 'Example of Scope and Namespace in Python']",[],"['//cdn.programiz.com/sites/tutorial2program/files/aEquals2.jpg', '//cdn.programiz.com/sites/tutorial2program/files/nested-namespaces-python.jpg']","['Output', 'Output', 'Note that id(a) and id(3) have the same values.', 'Output', 'To simply put it, a namespace is a collection of names.', 'At any given moment, there are at least three nested scopes.', 'As you can see, the output of this program is', 'The output of the program is.']","[""Here, both refer to the same object 2, so they have the same id(). Let's make things a little more interesting."", ""What is happening in the above sequence of steps? Let's use a diagram to explain this:"", 'Furthermore, when b = 2 is executed, the new name b gets associated with the previous object 2.', 'The same name a can refer to a function and we can call the function using this name.', 'Now that we understand what names are, we can move on to the concept of namespaces.', 'In Python, you can imagine a namespace as a mapping of every name you have defined to corresponding objects.', 'Different namespaces can co-exist at a given time but are completely isolated.', 'These different namespaces are isolated. Hence, the same name that may exist in different modules does not collide.', 'A scope is the portion of a program from where a namespace can be accessed directly without any prefix.', 'If there is a function inside another function, a new scope is nested inside the local scope.', 'Here, all references and assignments are to the global a due to the use of keyword global.']","[""If you have ever read 'The Zen of Python' (type import this in the Python interpreter), the last line states, Namespaces are one honking great idea -- let's do more of those! So what are these mysterious namespaces? Let us first look at what name is."", 'Name (also called identifier) is simply a name given to objects. Everything in Python is an object. Name is a way to access the underlying object.', ""For example, when we do the assignment a = 2, 2 is an object stored in memory and a is the name we associate it with. We can get the address (in RAM) of some object through the built-in function id(). Let's look at how to use it."", 'Initially, an object 2 is created and the name a is associated with it, when we do a = a+1, a new object 3 is created and now a is associated with this object.', 'This is efficient as Python does not have to create a new duplicate object. This dynamic nature of name binding makes Python powerful; a name could refer to any type of object.', 'All these are valid and a will refer to three different types of objects in different instances. Functions are objects too, so a name can refer to them as well.', 'A namespace containing all the built-in names is created when we start the Python interpreter and exists as long as the interpreter runs.', 'This is the reason that built-in functions like id(), print() etc. are always available to us from any part of the program. Each module creates its own global namespace.', 'Modules can have various functions and classes. A local namespace is created when a function is called, which has all the names defined in it. Similar is the case with class. The following diagram may help to clarify this concept.', 'Although there are various unique namespaces defined, we may not be able to access all of them from every part of the program. The concept of scope comes into play.', 'When a reference is made inside a function, the name is searched in the local namespace, then in the global namespace and finally in the built-in namespace.', 'Here, the variable a is in the global namespace. Variable b is in the local namespace of outer_function() and c is in the nested local namespace of inner_function().', 'When we are in inner_function(), c is local to us, b is nonlocal and a is global. We can read as well as assign new values to c but can only read b and a\xa0from inner_function().', 'If we try to assign as a value to b, a new variable b is created in the local namespace which is different than the nonlocal b. The same thing happens when we assign a value to a.', 'However, if we declare a as global, all the reference and assignment go to the global a. Similarly, if we want to rebind the variable b, it must be declared as nonlocal. The following example will further clarify this.', 'In this program, three different variables a are defined in separate namespaces and accessed accordingly. While in the following program,']","[""print('id(2) =', id(2))"", ""print('id(a) =', id(a))"", ""print('id(a) =', id(a))"", ""print('id(a) =', id(a))"", ""print('id(3) =', id(3))"", ""print('id(b) =', id(b))"", ""print('id(2) =', id(2))"", '>>> a = 5', "">>> a = 'Hello World!'"", '>>> a = [1,2,3]', 'def printHello():', '    print(""Hello"")', 'a = printHello', 'def outer_function():', '    b = 20', '    def inner_func():', '        c = 30', 'def outer_function():', '    a = 20', '    def inner_function():', '        a = 30', ""        print('a =', a)"", '    inner_function()', ""    print('a =', a)"", 'outer_function()', ""print('a =', a)"", 'def outer_function():', '    global a', '    a = 20', '    def inner_function():', '        global a', '        a = 30', ""        print('a =', a)"", '    inner_function()', ""    print('a =', a)"", 'outer_function()', ""print('a =', a)""]","['# Note: You may get different values for the id', '# Note: You may get different values for the id']","['id(2) = 9302208', 'id(a) = 9302208', 'id(a) = 9302208', 'id(a) = 9302240', 'id(3) = 9302240', 'id(b) = 9302208', 'id(2) = 9302208', 'Hello', 'a = 30', 'a = 20', 'a = 10', 'a = 30', 'a = 30', 'a = 30 ']",[],['Scope of the current function which has local names|||Scope of the module which has global names|||Outermost scope which has built-in names|||']
9,['Python if...else Statement'],"['In this article, you will learn to create decisions in a Python program using different forms of if..else statement.']",['Video: Python if...else Statement'],['https://www.youtube.com/embed/497MClrekMY?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['What is if...else statement in Python?', 'Python if...else Statement', 'Python if...elif...else Statement', 'Python Nested if statements']","['Python if Statement Syntax', 'Python if Statement Flowchart', 'Example: Python if Statement', 'Syntax of if...else', 'Python if..else Flowchart', 'Example of if...else', 'Syntax of if...elif...else', 'Flowchart of if...elif...else', 'Example of if...elif...else', 'Python Nested if Example']","['//cdn.programiz.com/sites/tutorial2program/files/Python_if_statement.jpg', '//cdn.programiz.com/sites/tutorial2program/files/Python_if_else_statement.jpg', '//cdn.programiz.com/sites/tutorial2program/files/Python_if_elif_else_statement.jpg']","['The if…elif…else statement is used in Python for decision making.', 'When you run the program, the output will be:', 'In the above example, num > 0 is the test expression.', 'The body of if is executed only if this evaluates to True.', 'Output', 'If all the conditions are False, the body of else is executed.', 'When variable num is positive, Positive number is printed.', 'If num is equal to 0, Zero is printed.', 'If num is negative, Negative number is printed.', 'Output 1', 'Output 2', 'Output 3']","['Decision making is required when we want to execute a code only if a certain condition is satisfied.', 'Here, the program evaluates the test expression and will execute statement(s) only if the test expression is True.', 'If the test expression is False, the statement(s) is not executed.', 'Python interprets non-zero values as True. None and 0 are interpreted as False.', 'When the variable num is equal to 3, test expression is true and statements inside the body of if are executed.', 'If the variable num is equal to -1, test expression is false and statements inside the body of if are skipped.', 'The print() statement falls outside of the if block (unindented). Hence, it is executed regardless of the test expression.', 'The if..else statement evaluates test expression and will execute the body of if only when the test condition is True.', 'If the condition is False, the body of else is executed. Indentation is used to separate the blocks.', 'If num is equal to -5, the test expression is false and the body of else is executed and the body of if is skipped.', 'If num is equal to 0, the test expression is true and body of if is executed and body of else is skipped.', 'The elif is short for else if. It allows us to check for multiple expressions.', 'If the condition for if is False, it checks the condition of the next elif block and so on.', 'Only one block among the several if...elif...else blocks is executed according to the condition.', 'The if block can have only one else block. But it can have multiple elif blocks.']","['In Python, the body of the if statement is indicated by the indentation. The body starts with an indentation and the first unindented line marks the end.', 'In the above example, when num is equal to 3, the test expression is true and the body of if is executed and the body of else is skipped.', 'We can have a if...elif...else statement inside another if...elif...else statement. This is called nesting in computer programming.', 'Any number of these statements can be nested inside one another. Indentation is the only way to figure out the level of nesting. They can get confusing, so they must be avoided unless necessary.']","['if num > 0:', 'num = -1', 'if num > 0:', '# num = -5', '# num = 0', 'if num >= 0:', '    print(""Positive or Zero"")', '    print(""Negative number"")', ""'''In this program, "", 'negative or zero and ', 'num = 3.4', '# num = 0', '# num = -4.5', 'if num > 0:', '    print(""Positive number"")', 'elif num == 0:', '    print(""Zero"")', '    print(""Negative number"")', 'negative or zero and display', 'an appropriate message', 'if num >= 0:', '    if num == 0:', '        print(""Zero"")', '    else:', '    print(""Negative number"")']","['# If the number is positive, we print an appropriate message', '    print(num, ""is a positive number."")', 'print(""This is always printed."")', '    print(num, ""is a positive number."")', 'print(""This is also always printed."")', '# Program checks if the number is positive or negative', '# And displays an appropriate message', '# Try these two variations as well. ', 'we check if the number is positive or', ""display an appropriate message'''"", '# Try these two variations as well:', ""'''In this program, we input a number"", 'check if the number is positive or', ""This time we use nested if statement'''"", 'num = float(input(""Enter a number: ""))', '        print(""Positive number"")']","['if test expression:', '    statement(s)', '3 is a positive number', 'This is always printed', 'This is also always printed.', 'if test expression:', '    Body of if', 'else:', '    Body of else', 'Positive or Zero', 'if test expression:', '    Body of if', 'elif test expression:', '    Body of elif', 'else: ', '    Body of else', 'Enter a number: 5', 'Positive number', 'Enter a number: -1', 'Negative number', 'Enter a number: 0', 'Zero']",[],[]
10,['Python for Loop'],"[""In this article, you'll learn to iterate over a sequence of elements using the different variations of for loop.""]",['Video: Python for Loop'],['https://www.youtube.com/embed/yaqMSBr_NCU?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['What is for loop in Python?', 'The range() function', 'for loop with else']","['Syntax of for Loop', 'Flowchart of for Loop', 'Example: Python for Loop']",['//cdn.programiz.com/sites/tutorial2program/files/forLoop.jpg'],"['When you run the program, the output will be:', 'The following example will clarify this.', 'Output', 'Output', ""Hence, a for loop's else part runs if no break occurs."", 'Here is an example to illustrate this.', 'When you run the program, the output will be:', 'Output']","['Here, val is the variable that takes the value of the item inside the sequence on each iteration.', 'We can generate a sequence of numbers using range() function. range(10) will generate numbers from 0 to 9 (10 numbers).', 'We can also define the start, stop and step size as range(start, stop,step_size). step_size defaults to 1 if not provided.', 'To force this function to output all the items, we can use the function list().', 'The break keyword can be used to stop a for loop. In such cases, the else part is ignored.']","['The for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. Iterating over a sequence is called traversal.', 'Loop continues until we reach the last item in the sequence. The body of for loop is separated from the rest of the code using indentation.', 'The range object is ""lazy"" in a sense because it doesn\'t generate every number that it ""contains"" when we create it. However, it is not an iterator since it supports in, len and __getitem__ operations.', 'This function does not store all the values in memory; it would be inefficient. So it remembers the start, stop, step size and generates the next number on the go.', 'We can use the range() function in for loops to iterate through a sequence of numbers. It can be combined with the len() function to iterate through a sequence using indexing. Here is an example.', 'A for loop can have an optional else block as well. The else part is executed if the items in the sequence used in for loop exhausts.', 'Here, the for loop prints items of the list until the loop exhausts. When the for loop exhausts, it executes the block of code in the else and prints No items left.', ""This for...else statement can be used with the break keyword to run the else block only when the break keyword was not executed. Let's take an example:""]","['for val in sequence:', '    loop body', '# List of numbers', '# variable to store the sum', '# iterate over the list', 'for val in numbers:', '    sum = sum+val', 'print(""The sum is"", sum)', 'print(range(10))', 'print(list(range(10)))', 'print(list(range(2, 8)))', 'print(list(range(2, 20, 3)))', 'for i in range(len(genre)):', '    print(""I like"", genre[i])', 'digits = [0, 1, 5]', 'for i in digits:', '    print(i)', '    print(""No items left."")', ""student_name = 'Soyuj'"", 'for student in marks:', '        print(marks[student])', '        break']","['# Program to find the sum of all numbers stored in a list', 'numbers = [6, 5, 3, 8, 4, 2, 5, 4, 11]', '# Program to iterate through a list using indexing', '# iterate over the list using index', ""# program to display student's marks from record"", ""marks = {'James': 90, 'Jules': 55, 'Arthur': 77}"", ""    print('No entry with that name found.')""]","['The sum is 48', 'range(0, 10)', '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]', '[2, 3, 4, 5, 6, 7]', '[2, 5, 8, 11, 14, 17]', 'I like pop', 'I like rock', '\u200bI like jazz', '0', '1', '5', 'No items left.', 'No entry with that name found.']",[],[]
11,['Python while Loop'],"['Loops are used in programming to repeat a specific block of code. In this article, you will learn to create a while loop in Python.']",['Video: Python while Loop'],['https://www.youtube.com/embed/5AOfDuV6X30?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['What is while loop in Python?', 'While loop with else']","['Syntax of while Loop in Python', 'Flowchart of while Loop', 'Example: Python while Loop']",['//cdn.programiz.com/sites/tutorial2program/files/whileLoopFlowchart.jpg'],"['When you run the program, the output will be:', 'Finally, the result is displayed.', 'Here is an example to illustrate this.', 'Output']","['The while loop in Python is used to iterate over a block of code as long as the test expression (condition) is true.', ""We generally use this loop when we don't know the number of times to iterate beforehand."", 'In Python, the body of the while loop is determined through indentation.', 'The body starts with indentation and the first unindented line marks the end.', 'Python interprets any non-zero value as True. None and 0 are interpreted as False.', 'Same as with for loops, while loops can also have an optional else block.', 'The else part is executed if the condition in the while loop evaluates to False.', 'Here, we use a counter variable to print the string Inside loop three times.', 'On the fourth iteration, the condition in while becomes False. Hence, the else part is executed.']","['In the while loop, test expression is checked first. The body of the loop is entered only if the test_expression evaluates to True. After one iteration, the test expression is checked again. This process continues until the test_expression evaluates to False.', 'In the above program, the test expression will be True as long as our counter variable i is less than or equal to n (10 in our program).', 'We need to increase the value of the counter variable in the body of the loop. This is very important (and mostly forgotten). Failing to do so will result in an infinite loop (never-ending loop).', ""The while loop can be terminated with a break statement. In such cases, the else part is ignored. Hence, a while loop's else part runs if no break occurs and the condition is false.""]","['# Program to add natural', '# numbers up to ', '# sum = 1+2+3+...+n', '# To take input from the user,', '# n = int(input(""Enter n: ""))', '# initialize sum and counter', 'while i <= n:', '    sum = sum + i', '# print the sum', 'print(""The sum is"", sum)', ""'''Example to illustrate"", 'the use of else statement', ""with the while loop'''"", 'counter = 0', 'while counter < 3:', '    print(""Inside loop"")', '    counter = counter + 1', '    print(""Inside else"")']",[],"['while test_expression:', '    Body of while', 'Enter n: 10', 'The sum is 55', 'Inside loop', 'Inside loop', 'Inside loop', 'Inside else']",[],[]
12,['Python break and continue'],"['In this article, you will learn to use break and continue statements to alter the flow of a loop.']",['Video: Python break and continue Statement'],['https://www.youtube.com/embed/Mho_1WO-ht4?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['What is the use of break and continue in Python?', 'Python break statement', 'Python continue statement']","['Syntax of break', 'Flowchart of break', 'Example: Python break', 'Syntax of Continue', 'Flowchart of continue\xa0', 'Example: Python continue']","['//cdn.programiz.com/sites/tutorial2program/files/flowchart-break-statement.jpg', '//cdn.programiz.com/sites/tutorial2program/files/how-break-statement-works.jpg', '//cdn.programiz.com/sites/tutorial2program/files/continue-statement-flowchart.jpg', '//cdn.programiz.com/sites/tutorial2program/files/how-continue-statment-works.jpg']","['The\xa0break and continue statements are used in these cases.', 'Output', 'Output']","['In Python, break and continue statements can alter the flow of a normal loop.', 'The working of break statement in for loop and while loop is shown below.', 'The working of the continue statement in for and while loop is shown below.', 'This program is same as the above example except the break statement has been replaced with continue.']","['Loops iterate over a block of code until the test expression is false, but sometimes we wish to terminate the current iteration or even the whole loop without checking test expression.', 'The break statement terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop.', 'If the break statement is inside a nested loop (loop inside another loop), the break statement will terminate the innermost loop.', 'In this program, we iterate through the ""string"" sequence. We check if the letter is i, upon which we break from the loop. Hence, we see in our output that all the letters up till i gets printed. After that, the loop terminates.', 'The continue statement is used to skip the rest of the code inside a loop for the current iteration only. Loop does not terminate but continues on with the next iteration.', 'We continue with the loop, if the string is i, not executing the rest of the block. Hence, we see in our output that all the letters except i gets printed.']","['for val in ""string"":', '    if val == ""i"":', '        break', '    print(val)', 'print(""The end"")', 'for val in ""string"":', '    if val == ""i"":', '        continue', '    print(val)', 'print(""The end"")']","['# Use of break statement inside the loop', '# Program to show the use of continue statement inside loops']","['break', 's', 't', 'r', 'The end', 'continue', 's', 't', 'r', 'n', 'g', 'The end']",[],[]
13,['Python pass statement'],"[""In this article, you'll learn about pass statement. It is used as a placeholder for future implementation of functions, loops, etc.""]",['Video: Python pass Statement'],['https://www.youtube.com/embed/n4B3zYfk_Pg?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],['What is pass statement in Python?'],"['Syntax of pass', 'Example: pass Statement']",[],"['We generally use it as a placeholder.', 'We can do the same thing in an empty function or class as well.']","['However, nothing happens when the pass is executed. It results in no operation (NOP).']","['In Python programming, the pass statement is a null statement. The difference between a comment and a pass statement in Python is that while the interpreter ignores a comment entirely, pass is not ignored.', 'Suppose we have a loop or a function that is not implemented yet, but we want to implement it in the future. They cannot have an empty body. The interpreter would give an error. So, we use the pass statement to construct a body that does nothing.']","['for val in sequence:', '    pass', 'def function(args):', '    pass', 'class Example:', '    pass']","[""'''pass is just a placeholder for"", ""functionality to be added later.'''""]",['pass'],[],[]
14,['Python Functions'],"[""In this article, you'll learn about functions, what a function is, the syntax, components, and types of functions. Also, you'll learn to create a function in Python.""]",['Video: Introduction to Python Functions'],['https://www.youtube.com/embed/-Bkupx9gX0o?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['What is a function in Python?', 'Docstrings', 'The return statement', 'How Function works in Python?', 'Scope and Lifetime of variables', 'Types of Functions']","['Syntax of Function', 'Example of a function', 'How to call a function in python?', 'Syntax of return', 'Example of return']",['//cdn.programiz.com/sites/tutorial2program/files/python-how-function-works_1.jpg'],"['Furthermore, it avoids repetition and makes the code reusable.', 'For example:', 'For example:', 'Output', 'Output', 'Basically, we can divide functions into the following two types:']","['In Python, a function is a group of related statements that performs a specific task.', 'Above shown is a function definition that consists of the following components.', 'Try running the above code in the Python program with the function definition to see the output.', 'Try running the following into the Python shell to see the output.', 'To learn more about docstrings in Python, visit Python Docstrings.', 'The return statement is used to exit a function and go back to the place from where it was called.', 'Here, None is the returned value since greet() directly prints the name and no return statement is used.', 'Here is an example to illustrate the scope of a variable inside a function.', 'On the other hand, variables outside of the function are visible from inside. They have a global scope.']","['Functions help break our program into smaller and modular chunks. As our program grows larger and larger, functions make it more organized and manageable.', 'Once we have defined a function, we can call it from another function, program, or even the Python prompt. To call a function we simply type the function name with appropriate parameters.', 'Note: In python, the function definition should always be present before the function call. Otherwise, we will get an error. For example,', 'The first string after the function header is called the docstring and is short for documentation string. It is briefly used to explain what a function does.', 'Although optional, documentation is a good programming practice. Unless you can remember what you had for dinner last week, always document your code.', 'In the above example, we have a docstring immediately below the function header. We generally use triple quotes so that docstring can extend up to multiple lines. This string is available to us as the __doc__ attribute of the function.', 'This statement can contain an expression that gets evaluated and the value is returned. If there is no expression in the statement or the return statement itself is not present inside a function, then the function will return the None object.', 'Scope of a variable is the portion of a program where the variable is recognized. Parameters and variables defined inside a function are not visible from outside the function. Hence, they have a local scope.', 'The lifetime of a variable is the period throughout which the variable exists in the memory. The lifetime of variables inside a function is as long as the function executes.', 'They are destroyed once we return from the function. Hence, a function does not remember the value of a variable from its previous calls.', 'Here, we can see that the value of x is 20 initially. Even though the function my_func() changed the value of x to 10, it did not affect the value outside the function.', 'This is because the variable x inside the function is different (local to the function) from the one outside. Although they have the same names, they are two different variables with different scopes.', 'We can read these values from inside the function but cannot change (write) them. In order to modify the value of variables outside the function, they must be declared as global variables using the keyword global.']","['def greet(name):', '    This function greets to', '    the person passed in as', '    a parameter', "">>> greet('Paul')"", 'Hello, Paul. Good morning!', 'def greet(name):', '    This function greets to', '    the person passed in as', '    a parameter', ""greet('Paul')"", '# function call', ""greet('Paul')"", '# function definition', 'def greet(name):', '    This function greets to', '    the person passed in as', '    a parameter', '>>> print(greet.__doc__)', '    This function greets to', '    the person passed in as', '    a parameter', '>>> print(greet(""May""))', 'Hello, May. Good morning!', 'def absolute_value(num):', '    if num >= 0:', '        return num', '    else:', '        return -num', 'print(absolute_value(2))', 'print(absolute_value(-4))', 'def my_func():', 'my_func()']","['    print(""Hello, "" + name + "". Good morning!"")', '    print(""Hello, "" + name + "". Good morning!"")', '    print(""Hello, "" + name + "". Good morning!"")', ""# Erro: name 'greet' is not defined"", '    """"""This function returns the absolute', '    value of the entered number""""""', '\tprint(""Value inside function:"",x)', 'print(""Value outside function:"",x)']","['def function_name(parameters):', '\t""""""docstring""""""', '\tstatement(s)', 'return [expression_list]', '2', '4', 'Value inside function: 10', 'Value outside function: 20']",[],['Keyword def that marks the start of the function header.|||A function name to uniquely identify the function. Function naming follows the same rules of writing identifiers in Python.|||Parameters (arguments) through which we pass values to a function. They are optional.|||A colon (:) to mark the end of the function header.|||Optional documentation string (docstring) to describe what the function does.|||One or more valid python statements that make up the function body. Statements must have the same indentation level (usually 4 spaces).|||An optional return statement to return a value from the function.|||Built-in functions - Functions that are built into Python.|||User-defined functions - Functions defined by the users themselves.|||']
15,['Python Function Arguments'],"['In Python, you can define a function that takes variable number of arguments. In this article, you will learn to define such functions using default, keyword and arbitrary arguments.']","['Video: Python Function Arguments: Positional, Keywords and Default']",['https://www.youtube.com/embed/Gf-Ws2cXEuA?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Arguments', 'Variable Function Arguments']","['Python Default Arguments', 'Python Keyword Arguments', 'Python Arbitrary Arguments']",[],"['Output', 'Here, the function greet() has two parameters.', 'Three different forms of this type are described below.', 'Function arguments can have default values in Python.', 'Output', 'We would get an error as:', 'Will result in an error:', 'Output']","['Since we have called this function with two arguments, it runs smoothly and we do not get any error.', 'We can provide a default value to an argument by using the assignment operator (=). Here is an example.', 'In this function, the parameter name does not have a default value and is required (mandatory) during a call.', 'When we call a function with some values, these values get assigned to the arguments according to their position.', 'Having a positional argument after keyword arguments will result in errors. For example, the function call as follows:']","['In the user-defined function topic, we learned about defining a function and calling it. Otherwise, the function call will result in an error. Here is an example.', 'If we call it with a different number of arguments, the interpreter will show an error message. Below is a call to this function with one and no arguments along with their respective error messages.', 'Up until now, functions had a fixed number of arguments. In Python, there are other ways to define a function that can take variable number of arguments.', 'On the other hand, the parameter msg has a default value of ""Good morning!"". So, it is optional during a call. If a value is provided, it will overwrite the default value.', 'Any number of arguments in a function can have a default value. But once we have a default argument, all the arguments to its right must also have default values.', 'This means to say, non-default arguments cannot follow default arguments. For example, if we had defined the function header above as:', 'For example, in the above function greet(), when we called it as greet(""Bruce"", ""How do you do?""), the value ""Bruce"" gets assigned to the argument name and similarly ""How do you do?"" to msg.', 'Python allows functions to be called using keyword arguments. When we call functions in this way, the order (position) of the arguments can be changed. Following calls to the above function are all valid and produce the same result.', 'As we can see, we can mix positional arguments with keyword arguments during a function call. But we must keep in mind that keyword arguments must follow positional arguments.', 'Sometimes, we do not know in advance the number of arguments that will be passed into a function. Python allows us to handle this kind of situation through function calls with an arbitrary number of arguments.', 'In the function definition, we use an asterisk (*) before the parameter name to denote this kind of argument. Here is an example.', 'Here, we have called the function with multiple arguments. These arguments get wrapped up into a tuple before being passed into the function. Inside the function, we use a for loop to retrieve all the arguments back.']","['def greet(name, msg):', '    """"""This function greets to', '    This function greets to', '    the person with the', '    provided message.', '    it defaults to ""Good', '    morning!""', 'greet(""Kate"")', '# 2 keyword arguments', 'def greet(*names):', '    for name in names:', '        print(""Hello"", name)']","['    the person with the provided message""""""', '    print(""Hello"", name + \', \' + msg)', 'greet(""Monica"", ""Good morning!"")', 'def greet(name, msg=""Good morning!""):', '    If the message is not provided,', '    print(""Hello"", name + \', \' + msg)', 'greet(""Bruce"", ""How do you do?"")', 'greet(name = ""Bruce"",msg = ""How do you do?"")', '# 2 keyword arguments (out of order)', 'greet(msg = ""How do you do?"",name = ""Bruce"") ', '1 positional, 1 keyword argument', 'greet(""Bruce"", msg = ""How do you do?"")           ', 'greet(name=""Bruce"",""How do you do?"")', '    the person in the names tuple.""""""', '    # names is a tuple with arguments', 'greet(""Monica"", ""Luke"", ""Steve"", ""John"")']","['Hello Monica, Good morning!', '>>> greet(""Monica"")    # only one argument', ""TypeError: greet() missing 1 required positional argument: 'msg'"", '>>> greet()    # no arguments', ""TypeError: greet() missing 2 required positional arguments: 'name' and 'msg'"", 'Hello Kate, Good morning!', 'Hello Bruce, How do you do?', 'def greet(msg = ""Good morning!"", name):', 'SyntaxError: non-default argument follows default argument', 'SyntaxError: non-keyword arg after keyword arg', 'Hello Monica', 'Hello Luke', 'Hello Steve', 'Hello John']",[],[]
16,['Python Recursion'],"[' In this tutorial, you will learn to create a recursive function (a function that calls itself).']",[],[],"['What is recursion?', 'Python Recursive Function', 'Advantages of Recursion', 'Disadvantages of Recursion']",['Example of a recursive function'],"['//cdn.programiz.com/cdn/farfuture/6i17bRQT6hWIqw9JE5rMMyW527g7It_68T7kSzpIplo/mtime:1591262415/sites/tutorial2program/files/python-recursion-function.png', '//cdn.programiz.com/sites/tutorial2program/files/python-factorial-function.png']","['Output', 'Output']","['Recursion is the process of defining something in terms of itself.', 'The following image shows the working of a recursive function called recurse.', 'Following is an example of a recursive function to find the factorial of an integer.', 'In the above example, factorial() is a recursive function as it calls itself.', 'When we call this function with a positive integer, it will recursively call itself by decreasing the number.', ""Let's look at an image that shows a step-by-step process of what is going on:"", 'Our recursion ends when the number reduces to 1. This is called the base condition.', 'Every recursive function must have a base condition that stops the recursion or else the function calls itself infinitely.', 'The Python interpreter limits the depths of recursion to help avoid infinite recursions, resulting in stack overflows.']","['A physical world example would be to place two parallel mirrors facing each other. Any object in between them would be reflected recursively.', 'In Python, we know that a function can call other functions. It is even possible for the function to call itself. These types of construct are termed as recursive functions.', 'Factorial of a number is the product of all the integers from 1 to that number. For example, the factorial of 6 (denoted as 6!) is 1*2*3*4*5*6 = 720.', 'Each function multiplies the number with the factorial of the number below it until it is equal to one. This recursive call can be explained in the following steps.', ""By default, the maximum depth of recursion is 1000. If the limit is crossed, it results in RecursionError. Let's look at one such condition.""]","['def factorial(x):', '    if x == 1:', '        return 1', '    else:', 'def recursor():', '    recursor()', 'recursor()']","['    """"""This is a recursive function', '    to find the factorial of an integer""""""', '        return (x * factorial(x-1))', 'print(""The factorial of"", num, ""is"", factorial(num))']","['The factorial of 3 is 6', 'factorial(3)          # 1st call with 3', '3 * factorial(2)      # 2nd call with 2', '3 * 2 * factorial(1)  # 3rd call with 1', '3 * 2 * 1             # return from 3rd call as number=1', '3 * 2                 # return from 2nd call', '6                     # return from 1st call', 'Traceback (most recent call last):', '  File ""<string>"", line 3, in <module>', '  File ""<string>"", line 2, in a', '  File ""<string>"", line 2, in a', '  File ""<string>"", line 2, in a', '  [Previous line repeated 996 more times]', 'RecursionError: maximum recursion depth exceeded']",[],['Recursive functions make the code look clean and elegant.|||A complex task can be broken down into simpler sub-problems using recursion.|||Sequence generation is easier with recursion than using some nested iteration.|||Sometimes the logic behind recursion is hard to follow through.|||Recursive calls are expensive (inefficient) as they take up a lot of memory and time.|||Recursive functions are hard to debug.|||']
17,"['Python Global, Local and Nonlocal variables']","['In this tutorial, you’ll learn about Python Global variables, Local variables, Nonlocal variables and where to use them.']",['Video: Python Local and Global Variables'],['https://www.youtube.com/embed/ngCDTEWVjrQ?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Global Variables', 'Local Variables', 'Global and local variables', 'Nonlocal Variables']","['Example 1: Create a Global Variable', 'Example 2: Accessing local variable outside the scope', 'Example 3: Create a Local Variable', 'Example 4: Using Global and Local variables in the same code', 'Example 5: Global variable and Local variable with same name', 'Example 6: Create a nonlocal variable']",[],"['Output', 'What if you want to change the value of x inside a function?', 'Output', 'Output', 'Output', 'Output', 'Output', 'We use nonlocal keywords to create nonlocal variables.', 'Output']","[""Let's see an example of how a global variable is created in Python."", 'The output shows an error because Python treats x as a local variable and x is also not defined inside foo().', 'To make this work, we use the global keyword. Visit Python Global Keyword to learn more.', ""A variable declared inside the function's body or in the local scope is known as a local variable."", ""Let's see an example on how a local variable is created in Python."", 'Normally, we declare a variable inside the function to create a local variable.', ""Let's take a look at the earlier problem where x was a global variable and we wanted to modify x inside foo()."", 'Here, we will show how to use global variables and local variables in the same code.', 'When we print the variable inside foo() it outputs local x: 10. This is called the local scope of the variable.', ""Let's see an example of how a nonlocal variable is used in Python."", 'Note : If we change the value of a nonlocal variable, the changes appear in the local variable.']","['In Python, a variable declared outside of the function or in global scope is known as a global variable. This means that a global variable can be accessed inside or outside of the function.', 'In the above code, we created x as a global variable and defined a foo() to print the global variable x. Finally, we call the foo() which will print the value of x.', 'The output shows an error because we are trying to access a local variable y in a global scope whereas the local variable only works inside foo() or local scope.', 'In the above code, we declare x as a global and y as a local variable in the foo(). Then, we use multiplication operator * to modify the global variable x and we print both x and y.', 'After calling the foo(), the value of x becomes global global because we used the x * 2 to print two times global. After that, we print the value of local variable y i.e local.', 'In the above code, we used the same name x for both global variable and local variable. We get a different result when we print the same variable because the variable is declared in both scopes, i.e. the local scope inside foo() and global scope outside foo().', 'Similarly, when we print the variable outside the foo(), it outputs global x: 5. This is called the global scope of the variable.', 'Nonlocal variables are used in nested functions whose local scope is not defined. This means that the variable can be neither in the local nor the global scope.', 'In the above code, there is a nested inner() function. We use nonlocal keywords to create a nonlocal variable. The inner() function is defined in the scope of another function outer().']","['x = ""global""', 'def foo():', '    print(""x inside:"", x)', 'print(""x outside:"", x)', 'x = ""global""', 'def foo():', '    x = x * 2', '    print(x)', 'def foo():', '    y = ""local""', 'print(y)', 'def foo():', '    y = ""local""', '    print(y)', 'x = ""global ""', 'def foo():', '    global x', '    y = ""local""', '    x = x * 2', '    print(x)', '    print(y)', 'def foo():', '    x = 10', '    print(""local x:"", x)', 'print(""global x:"", x)', 'def outer():', '    x = ""local""', '    def inner():', '        nonlocal x', '        x = ""nonlocal""', '        print(""inner:"", x)', '    inner()', '    print(""outer:"", x)']",[],"['x inside: global', 'x outside: global', ""UnboundLocalError: local variable 'x' referenced before assignment"", ""NameError: name 'y' is not defined"", 'local', 'global global ', 'local', 'local x: 10', 'global x: 5', 'inner: nonlocal', 'outer: nonlocal']",[],[]
18,"['Python Numbers, Type Conversion and Mathematics']","[""In this article, you'll learn about the different numbers used in Python, how to convert from one data type to the other, and the mathematical operations supported in Python.""]",[],[],"['Number Data Type in Python', 'Type Conversion', 'Python Decimal', 'Python Fractions', 'Python Mathematics']",['When to use Decimal instead of float?'],[],"[""Let's look at an example:"", 'When we run the above program, we get the following output:', 'Here are some examples', 'When you run the program, the output will be:', 'What is going on?', ""Let's see the difference:"", 'Output', 'Output', 'Notice the trailing zeroes in the above example.', 'We generally use Decimal in the following cases.', 'Output', 'Output', 'Output', 'Output']","['Complex numbers are written in the form, x + yj, where x is the real part and y is the imaginary part.', 'We can convert one type of number into another. This is also known as coercion.', 'Operations like addition, subtraction coerce integer to float implicitly (automatically), if one of the operands is float.', 'We can see above that 1 (integer) is coerced into 1.0 (float) for addition and the result is also a floating point number.', 'When converting from float to integer, the number gets truncated (decimal parts are removed).', 'This module is used when we want to carry out decimal calculations as we learned in school.', 'Python provides operations involving fractional numbers through its fractions module.', ""We can create Fraction objects in various ways. Let's have a look at them."", 'Fortunately, Fraction allows us to instantiate with string as well. This is the preferred option when using decimal numbers.', 'This data type supports all basic operations. Here are a few examples.', 'Here is the full list of functions and attributes available in the Python math module.', 'When we run the above program we get the output as follows.(Values may be different due to the random behavior)', 'Here is the full list of functions and attributes available in the Python random module.']","['Python supports integers, floating-point numbers and complex numbers. They are defined as int, float, and complex classes in Python.', 'Integers and floating points are separated by the presence or absence of a decimal point. For instance, 5 is an integer whereas 5.0 is a floating-point number.', 'We can use the type() function to know which class a variable or a value belongs to and isinstance() function to check if it belongs to a particular class.', 'While integers can be of any length, a floating-point number is accurate only up to 15 decimal places (the 16th place is inaccurate).', 'The numbers we deal with every day are of the decimal (base 10) number system. But computer programmers (generally embedded programmers) need to work with binary (base 2), hexadecimal (base 16) and octal (base 8) number systems.', 'In Python, we can represent these numbers by appropriately placing a prefix before that number. The following table lists these prefixes.', 'We can also use built-in functions like int(), float() and complex() to convert between types explicitly. These functions can even convert from strings.', 'Python built-in class float performs some calculations that might amaze us. We all know that the sum of 1.1 and 2.2 is 3.3, but Python seems to disagree.', 'It turns out that floating-point numbers are implemented in computer hardware as binary fractions as the computer only understands binary (0 and 1). Due to this reason, most of the decimal fractions we know, cannot be accurately stored in our computer.', ""Let's take an example. We cannot represent the fraction 1/3 as a decimal number. This will give 0.33333333... which is infinitely long, and we can only approximate it."", 'It turns out that the decimal fraction 0.1 will result in an infinitely long binary fraction of 0.000110011001100110011... and our computer only stores a finite number of it.', 'This will only approximate 0.1 but never be equal. Hence, it is the limitation of our computer hardware and not an error in Python.', 'To overcome this issue, we can use the decimal module that comes with Python. While floating-point numbers have precision up to 15 decimal places, the decimal module has user-settable precision.', 'It also preserves significance. We know 25.50 kg is more accurate than 25.5 kg as it has two significant decimal places compared to one.', 'We might ask, why not implement Decimal every time, instead of float? The main reason is efficiency. Floating point operations are carried out must faster than Decimal operations.', 'A fraction has a numerator and a denominator, both of which are integers. This module has support for rational number arithmetic.', 'While creating Fraction from float, we might get some unusual results. This is due to the imperfect binary floating point number representation as discussed in the previous section.', 'Python offers modules like math and random to carry out different mathematics like trigonometry, logarithms, probability and statistics, etc.']","['print(type(a))', 'print(type(5.0))', 'c = 5 + 3j', 'print(c + 3)', 'print(isinstance(c, complex))', '# Output: 107', 'print(0b1101011)', '# Output: 253 (251 + 2)', 'print(0xFB + 0b10)', '# Output: 13', 'print(0o15)', '>>> 1 + 2.0', '>>> int(2.3)', '>>> int(-2.8)', '>>> float(5)', "">>> complex('3+5j')"", '>>> (1.1 + 2.2) == 3.3', '>>> 1.1 + 2.2', '3.3000000000000003', 'import decimal', 'print(0.1)', 'print(decimal.Decimal(0.1))', ""print(D('1.1') + D('2.2'))"", ""print(D('1.2') * D('2.50'))"", 'import fractions', 'print(fractions.Fraction(1.5))', 'print(fractions.Fraction(5))', 'print(fractions.Fraction(1,3))', 'import fractions', '# As float', 'print(fractions.Fraction(1.1))', '# As string', '# Output: 11/10', 'print(F(1, 3) + F(1, 3))', 'print(1 / F(5, 6))', 'print(F(-3, 10) > 0)', 'print(F(-3, 10) < 0)', 'import math', 'print(math.pi)', 'print(math.cos(math.pi))', 'print(math.exp(10))', 'print(math.log10(1000))', 'print(math.sinh(1))', 'print(math.factorial(6))', 'import random', ""x = ['a', 'b', 'c', 'd', 'e']"", '# Get random choice', 'print(random.choice(x))', '# Shuffle x', 'random.shuffle(x)', '# Print the shuffled x', 'print(x)', '# Print random element', 'print(random.random())']","['from decimal import Decimal as D', '# Output: 2476979795053773/2251799813685248', ""print(fractions.Fraction('1.1'))"", 'from fractions import Fraction as F']","[""<class 'int'>"", ""<class 'float'>"", '(8+3j)', 'True', '107', '253', '13', '0.1', '0.1000000000000000055511151231257827021181583404541015625', '3.3', '3.000', '3/2', '5', '1/3', '2476979795053773/2251799813685248', '11/10', '2/3', '6/5', 'False', 'True', '3.141592653589793', '-1.0', '22026.465794806718', '3.0', '1.1752011936438014', '720', '18', 'e', ""['c', 'e', 'd', 'b', 'a']"", '0.5682821194654443']","[""umber System|||Prefix&&&inary|||'0b' or '0B'&&&ctal|||'0o' or '0O'&&&exadecimal|||'0x' or '0X'""]",['When we are making financial applications that need exact decimal representation.|||When we want to control the level of precision required.|||When we want to implement the notion of significant decimal places.|||']
19,['Python List'],"[""In this tutorial, we'll learn everything about Python lists: creating lists, changing list elements, removing elements, and other list operations with the help of examples.""]",['Video: Python Lists and Tuples'],['https://www.youtube.com/embed/hANUgg72TDc?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Create Python Lists', 'Access List Elements', 'List Slicing in Python', 'Add/Change List Elements', 'Delete List Elements', 'Python List Methods', 'List Comprehension: Elegant way to create Lists', 'Other List Operations in Python']","['List Index', 'Negative indexing', 'List Membership Test', 'Iterating Through a List']",['//cdn.programiz.com/sites/tutorial2program/files/python-list-index.png'],"['Nested lists are accessed using nested indexing.', 'Output', 'Output', 'Output', 'Output', 'Output', 'The * operator repeats a list for the given number of times.', 'Output', 'Output', 'Output', 'Output', 'Output', 'This code is equivalent to:', 'Visit Python list comprehension to learn more.', 'Output', 'Using a for loop we can iterate through each item in a list.', 'Output']","['Python lists are one of the most versatile data types that allow us to work with multiple elements at once. For example,', 'In Python, a list is created by placing  elements inside square brackets [], separated by commas.', 'A list can have any number of items and they may be of different types (integer, float, string, etc.).', 'A list can also have another list as an item. This is called a nested list.', 'There are various ways in which we can access the elements of a list.', 'We can access a range of items in a list by using the slicing operator :.', 'Lists are mutable, meaning their elements can be changed unlike string or tuple.', 'We can use the assignment operator = to change an item or a range of items.', 'We can add one item to a list using the append() method or add several items using the extend() method.', 'We can also use + operator to combine two lists. This is also called concatenation.', 'We can delete one or more items from a list using the Python del statement. It can even delete the list entirely.', 'We can use  remove() to remove the given item or pop() to remove an item at the given index.', 'And, if we have to empty the whole list, we can use the clear() method.', 'Finally, we can also delete items in a list by assigning an empty list to a slice of elements.', 'List comprehension is an elegant and concise way to create a new list from an existing list in Python.', 'A list comprehension consists of an expression followed by for statement inside square brackets.', 'Here is an example to make a list with each item being increasing power of 2.', 'We can test if an item exists in a list or not, using the keyword in.']","['We can use the index operator [] to access an item in a list. In Python, indices start at 0. So, a list having 5 elements will have an index from 0 to 4.', ""Trying to access indexes other than these will raise an IndexError. The index must be an integer. We can't use float or other types, this will result in TypeError."", 'Python allows negative indexing for its sequences. The index of -1 refers to the last item, -2 to the second last item and so on.', 'Note: When we slice lists, the start index is inclusive but the end index is exclusive. For example, my_list[2: 5] returns a list with elements at index 2, 3 and 4, but not 5.', 'Furthermore, we can insert one item at a desired location by using the method insert() or insert multiple items by squeezing it into an empty slice of a list.', 'The pop() method removes and returns the last item if the index is not provided. This helps us implement lists as stacks (first in, last out data structure).', 'Python has many useful list methods that makes it really easy to work with lists. Here are some of the commonly used list methods.', 'A list comprehension can optionally contain more for or if statements. An optional if statement can filter out items for the new list. Here are some examples.']","['# list of integers', 'my_list = [1, 2, 3]', '# empty list', 'my_list = []', '# list with mixed data types', 'my_list = [1, ""Hello"", 3.4]', '# nested list', '# first item', 'print(my_list[0])  # p', '# third item', 'print(my_list[2])  # o', '# fifth item', 'print(my_list[4])  # e', '# Nested List', '# Nested indexing', 'print(n_list[0][1])', 'print(n_list[1][3])', 'print(my_list[4.0])', '# Negative indexing in lists', '# last item', 'print(my_list[-1])', '# fifth last item', 'print(my_list[-5])', '# List slicing in Python', 'print(my_list[2:5])', '# elements from index 5 to end', 'print(my_list[5:])', '# elements beginning to end', 'print(my_list[:])', 'odd = [2, 4, 6, 8]', '# change the 1st item    ', 'odd[0] = 1            ', 'print(odd)', '# change 2nd to 4th items', 'odd[1:4] = [3, 5, 7]  ', 'print(odd)                   ', 'odd = [1, 3, 5]', 'odd.append(7)', 'print(odd)', 'odd.extend([9, 11, 13])', 'print(odd)', 'odd = [1, 3, 5]', 'print(odd + [9, 7, 5])', 'print([""re""] * 3)', 'odd = [1, 9]', 'odd.insert(1,3)', 'print(odd)', 'odd[2:2] = [5, 7]', 'print(odd)', '# Deleting list items', '# delete one item', 'del my_list[2]', 'print(my_list)', '# delete multiple items', 'del my_list[1:5]', 'print(my_list)', '# delete the entire list', 'del my_list', '# Error: List not defined', 'print(my_list)', ""my_list.remove('p')"", 'print(my_list)', ""# Output: 'o'"", 'print(my_list.pop(1))', 'print(my_list)', ""# Output: 'm'"", 'print(my_list.pop())', ""# Output: ['r', 'b', 'l', 'e']"", 'print(my_list)', 'my_list.clear()', '# Output: []', 'print(my_list)', '>>> my_list[2:3] = []', '>>> my_list', ""['p', 'r', 'b', 'l', 'e', 'm']"", '>>> my_list[2:5] = []', '>>> my_list', ""['p', 'r', 'm']"", ""# Add 'a' to the end"", ""my_list.append('a')"", 'print(my_list)', '# Count of 8 in the list', 'print(pow2)', 'pow2 = []', 'for x in range(10):', '   pow2.append(2 ** x)', '>>> pow2', '[64, 128, 256, 512]', '# Output: True', ""print('p' in my_list)"", '# Output: False', ""print('a' in my_list)"", '# Output: True', ""print('c' not in my_list)"", '    print(""I like"",fruit)']","['# a list of programming languages', 'my_list = [""mouse"", [8, 4, 6], [\'a\']]', ""my_list = ['p', 'r', 'o', 'b', 'e']"", 'n_list = [""Happy"", [2, 0, 1, 5]]', '# Error! Only integer can be used for indexing', ""my_list = ['p','r','o','g','r','a','m','i','z']"", '# elements from index 2 to index 4', '# Correcting mistake values in a list', '# Appending and Extending lists in Python', '# Concatenating and repeating lists', '# Demonstration of list insert() method', ""my_list = ['p', 'r', 'o', 'b', 'l', 'e', 'm']"", ""my_list = ['p','r','o','b','l','e','m']"", ""# Output: ['r', 'o', 'b', 'l', 'e', 'm']"", ""# Output: ['r', 'b', 'l', 'e', 'm']"", "">>> my_list = ['p','r','o','b','l','e','m']"", '# Example on Python list methods', ""# Output: [3, 8, 1, 6, 0, 8, 4, 'a']"", '# Index of first occurrence of 8', 'print(my_list.index(8))   # Output: 1', 'print(my_list.count(8))  # Output: 3 ', 'pow2 = [2 ** x for x in range(10)]', '>>> pow2 = [2 ** x for x in range(10) if x > 5]', '>>> odd = [x for x in range(20) if x % 2 == 1]', '[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]', "">>> [x+y for x in ['Python ','C '] for y in ['Language','Programming']]"", ""['Python Language', 'Python Programming', 'C Language', 'C Programming']"", ""my_list = ['p', 'r', 'o', 'b', 'l', 'e', 'm']"", ""for fruit in ['apple','banana','mango']:""]","['p', 'o', 'e', 'a', '5', 'Traceback (most recent call last):', '  File ""<string>"", line 21, in <module>', 'TypeError: list indices must be integers or slices, not float', 'e', 'p', ""['o', 'g', 'r']"", ""['a', 'm', 'i', 'z']"", ""['p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z']"", '[1, 4, 6, 8]', '[1, 3, 5, 7]', '[1, 3, 5, 7]', '[1, 3, 5, 7, 9, 11, 13]', '[1, 3, 5, 9, 7, 5]', ""['re', 're', 're']"", '[1, 3, 9]', '[1, 3, 5, 7, 9]', ""['p', 'r', 'b', 'l', 'e', 'm']"", ""['p', 'm']"", 'Traceback (most recent call last):', '  File ""<string>"", line 18, in <module>', ""NameError: name 'my_list' is not defined"", ""['r', 'o', 'b', 'l', 'e', 'm']"", 'o', ""['r', 'b', 'l', 'e', 'm']"", 'm', ""['r', 'b', 'l', 'e']"", '[]', '[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]', 'True', 'False', 'True', 'I like apple', 'I like banana', 'I like mango']",['ethods|||Descriptions&&&ppend()|||adds an element to the end of the list&&&xtend()|||adds all elements of a list to another list&&&nsert()|||inserts an item at the defined index&&&emove()|||removes an item from the list&&&op()|||returns and removes an element at the given index&&&lear()|||removes all items from the list&&&ndex()|||returns the index of the first matched item&&&ount()|||returns the count of the number of items passed as an argument&&&ort()|||sort items in a list in ascending order&&&everse()|||reverse the order of items in the list&&&opy() |||returns a shallow copy of the list'],[]
20,['Python Tuple'],"[""In this article, you'll learn everything about Python tuples. More specifically, what are tuples, how to create them, when to use them and various methods you should be familiar with.""]",['Video: Python Lists and Tuples'],['https://www.youtube.com/embed/hANUgg72TDc?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Creating a Tuple', 'Access Tuple Elements', 'Changing a Tuple', 'Deleting a Tuple', 'Tuple Methods', 'Other Tuple Operations']","['1. Indexing', '2. Negative Indexing', '3. Slicing', '1. Tuple Membership Test', '2. Iterating Through a Tuple', 'Advantages of Tuple over List']",['//cdn.programiz.com/sites/tutorial2program/files/element-slicling.jpg'],"['Output', 'Output', 'Creating a tuple with one element is a bit tricky.', 'Output', 'Output', 'Python allows negative indexing for its sequences.', 'Output', 'Output', 'Unlike lists, tuples are immutable.', 'We can also assign a tuple to different values (reassignment).', 'Output', 'Both + and * operations result in a new tuple.', 'Output', 'Output', 'Some examples of Python tuple methods:', 'Output', 'Output', 'We can use a for loop to iterate through each item in a tuple.', 'Output']","['A tuple can have any number of items and they may be of different types (integer, float, list, string, etc.).', 'A tuple can also be created without using parentheses. This is known as tuple packing.', 'Having one element within parentheses is not enough. We will need a trailing comma to indicate that it is, in fact, a tuple.', 'There are various ways in which we can access the elements of a tuple.', 'We can use the index operator [] to access an item in a tuple, where the index starts from 0.', 'The index must be an integer, so we cannot use float or other types. This will result in TypeError.', 'Likewise, nested tuples are accessed using nested indexing, as shown in the example below.', 'The index of -1 refers to the last item, -2 to the second last item and so on.', 'We can access a range of items in a tuple by using the slicing operator colon :.', 'We can use + operator to combine two tuples. This is called concatenation.', 'We can also repeat the elements in a tuple for a given number of times using the * operator.', 'As discussed above, we cannot change the elements in a tuple. It means that we cannot delete or remove items from a tuple.', 'Deleting a tuple entirely, however, is possible using the keyword del.', 'Methods that add items or remove items are not available with tuple. Only the following two methods are available.', 'We can test if an item exists in a tuple or not, using the keyword in.']","['A tuple in Python is similar to a list. The difference between the two is that we cannot change the elements of a tuple once it is assigned whereas we can change the elements of a list.', 'A tuple is created by placing all the items (elements) inside parentheses (), separated by commas. The parentheses are optional, however, it is a good practice to use them.', 'So, a tuple having 6 elements will have indices from 0 to 5. Trying to access an index outside of the tuple index range(6,7,... in this example) will raise an IndexError.', 'Slicing can be best visualized by considering the index to be between the elements as shown below. So if we want to access a range, we need the index that will slice the portion from the tuple.', 'This means that elements of a tuple cannot be changed once they have been assigned. But, if the element is itself a mutable data type like a list, its nested items can be changed.', 'Since tuples are quite similar to lists, both of them are used in similar situations. However, there are certain advantages of implementing a tuple over a list. Below listed are some of the main advantages:']","['# Different types of tuples', '# Empty tuple', 'my_tuple = ()', 'print(my_tuple)', '# Tuple having integers', 'my_tuple = (1, 2, 3)', 'print(my_tuple)', '# tuple with mixed datatypes', 'my_tuple = (1, ""Hello"", 3.4)', 'print(my_tuple)', '# nested tuple', 'print(my_tuple)', 'my_tuple = 3, 4.6, ""dog""', 'print(my_tuple)', 'a, b, c = my_tuple', 'print(a)      # 3', 'print(b)      # 4.6', 'print(c)      # dog', 'my_tuple = (""hello"")', 'my_tuple = (""hello"",)', '# Parentheses is optional', 'my_tuple = ""hello"",', ""print(my_tuple[0])   # 'p' "", ""print(my_tuple[5])   # 't'"", '# print(my_tuple[6])', '# Index must be an integer', '# my_tuple[2.0]', '# nested tuple', '# nested index', 'print(n_tuple[1][1])       # 4', ""# Output: 't'"", 'print(my_tuple[-1])', ""# Output: 'p'"", 'print(my_tuple[-6])', '# elements 2nd to 4th', ""# Output: ('r', 'o', 'g')"", 'print(my_tuple[1:4])', '# elements beginning to 2nd', ""# Output: ('p', 'r')"", 'print(my_tuple[:-7])', '# elements 8th to end', ""# Output: ('i', 'z')"", 'print(my_tuple[7:])', '# elements beginning to end', 'print(my_tuple[:])', '# Changing tuple values', 'my_tuple = (4, 2, 3, [6, 5])', '# my_tuple[1] = 9', 'print(my_tuple)', '# Tuples can be reassigned', 'print(my_tuple)', '# Concatenation', '# Output: (1, 2, 3, 4, 5, 6)', 'print((1, 2, 3) + (4, 5, 6))', '# Repeat', 'print((""Repeat"",) * 3)', '# Deleting tuples', ""# can't delete items"", '# del my_tuple[3]', '# Can delete an entire tuple', 'del my_tuple', 'print(my_tuple)', '# Membership test in tuple', '# In operation', ""print('a' in my_tuple)"", ""print('b' in my_tuple)"", '# Not in operation', ""print('g' not in my_tuple)"", ""for name in ('John', 'Kate'):"", '    print(""Hello"", name)']","['my_tuple = (""mouse"", [8, 4, 6], (1, 2, 3))', '# tuple unpacking is also possible', ""print(type(my_tuple))  # <class 'str'>"", '# Creating a tuple having one element', ""print(type(my_tuple))  # <class 'tuple'>"", ""print(type(my_tuple))  # <class 'tuple'>"", '# Accessing tuple elements using indexing', ""my_tuple = ('p','e','r','m','i','t')"", '# IndexError: list index out of range', '# TypeError: list indices must be integers, not float', 'n_tuple = (""mouse"", [8, 4, 6], (1, 2, 3))', ""print(n_tuple[0][3])       # 's'"", '# Negative indexing for accessing tuple elements', ""my_tuple = ('p', 'e', 'r', 'm', 'i', 't')"", '# Accessing tuple elements using slicing', ""my_tuple = ('p','r','o','g','r','a','m','i','z')"", ""# Output: ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z')"", ""# TypeError: 'tuple' object does not support item assignment"", '# However, item of mutable element can be changed', 'my_tuple[3][0] = 9    # Output: (4, 2, 3, [9, 5])', ""my_tuple = ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z')"", ""# Output: ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z')"", ""# Output: ('Repeat', 'Repeat', 'Repeat')"", ""my_tuple = ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z')"", ""# TypeError: 'tuple' object doesn't support item deletion"", ""# NameError: name 'my_tuple' is not defined"", ""my_tuple = ('a', 'p', 'p', 'l', 'e',)"", ""print(my_tuple.count('p'))  # Output: 2"", ""print(my_tuple.index('l'))  # Output: 3"", ""my_tuple = ('a', 'p', 'p', 'l', 'e',)"", '# Using a for loop to iterate through a tuple']","['()', '(1, 2, 3)', ""(1, 'Hello', 3.4)"", ""('mouse', [8, 4, 6], (1, 2, 3))"", ""(3, 4.6, 'dog')"", '3', '4.6', 'dog', ""<class 'str'>"", ""<class 'tuple'>"", ""<class 'tuple'>"", 'p', 't', 's', '4', 't', 'p', ""('r', 'o', 'g')"", ""('p', 'r')"", ""('i', 'z')"", ""('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z')"", '(4, 2, 3, [9, 5])', ""('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z')"", '(1, 2, 3, 4, 5, 6)', ""('Repeat', 'Repeat', 'Repeat')"", 'Traceback (most recent call last):', '  File ""<string>"", line 12, in <module>', ""NameError: name 'my_tuple' is not defined"", '2', '3', 'True', 'False', 'True', 'Hello John', 'Hello Kate']",[],"[""We generally use tuples for heterogeneous (different) data types and lists for homogeneous (similar) data types.|||Since tuples are immutable, iterating through a tuple is faster than with list. So there is a slight performance boost.|||Tuples that contain immutable elements can be used as a key for a dictionary. With lists, this is not possible.|||If you have data that doesn't change, implementing it as tuple will guarantee that it remains write-protected.|||""]"
21,['Python Strings'],"['In this tutorial you will learn to create, format, modify and delete strings in Python. Also, you will be introduced to various string operations and functions.']",['Video: Python Strings'],['https://www.youtube.com/embed/GQywwPUrsgA?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['What is String in Python?', 'How to create a string in Python?', 'How to access characters in a string?', 'How to change or delete a string?', 'Python String Operations', 'Python String Formatting', 'Common Python String Methods']","['Concatenation of Two or More Strings', 'Iterating Through a string', 'String Membership Test', 'Built-in functions to Work with Python', 'Escape Sequence', 'Raw String to ignore escape sequence', 'The format() Method for Formatting Strings', 'Old style formatting']",['//cdn.programiz.com/sites/tutorial2program/files/element-slicling.jpg'],"['A string is a sequence of characters.', 'When you run the program, the output will be:', 'Python allows negative indexing for its sequences.', 'When we run the above program, we get the following output:', 'When we run the above program, we get the following output:', 'When we run the above program, we get the following output:', 'When we run the above program, we get the following output:', 'When we run the above program, we get the following output:', 'Here is a list of all the escape sequences supported by Python.', 'Here are some examples', 'When we run the above program, we get the following output:']","['A character is simply a symbol. For example, the English language has 26 characters.', 'If we try to access an index out of the range or use numbers other than an integer, we will get errors.', 'Slicing can be best visualized by considering the index to be between the elements as shown below.', 'If we want to access a range, we need the index that will slice the portion from the string.', 'We cannot delete or remove characters from a string. But deleting the string entirely is possible using the del keyword.', 'There are many operations that can be performed with strings which makes it one of the most used data types in Python.', 'To learn more about the data types available in Python visit: Python Data Types', 'Joining of two or more strings into a single one is called concatenation.', 'The + operator does this in Python. Simply writing two string literals together also concatenates them.', 'The * operator can be used to repeat the string for a given number of times.', 'Writing two string literals together also concatenates them like + operator.', 'If we want to concatenate strings in different lines, we can use parentheses.', ""We can iterate through a string using a for loop. Here is an example to count the number of 'l's in a string."", 'We can test if a substring exists within a string or not, using the keyword in.', 'Various built-in functions that work with sequence work with strings as well.', 'Similarly, len() returns the length (number of characters) of the string.', 'One way to get around this problem is to use triple quotes. Alternatively, we can use escape sequences.', 'We can use positional arguments or keyword arguments to specify the order.']","['Computers do not deal with characters, they deal with numbers (binary). Even though you may see characters on your screen, internally it is stored and manipulated as a combination of 0s and 1s.', 'This conversion of character to a number is called encoding, and the reverse process is decoding. ASCII and Unicode are some of the popular encodings used.', 'In Python, a string is a sequence of Unicode characters. Unicode was introduced to include every character in all languages and bring uniformity in encoding. You can learn about Unicode from Python Unicode.', 'Strings can be created by enclosing characters inside a single quote or double-quotes. Even triple quotes can be used in Python but generally used to represent multiline strings and docstrings.', ""We can access individual characters using indexing and a range of characters using slicing. Index starts from 0. Trying to access a character out of index range will raise an IndexError. The index must be an integer. We can't use floats or other types, this will result into TypeError."", 'The index of -1 refers to the last item, -2 to the second last item and so on. We can access a range of items in a string by using the slicing operator :(colon).', 'Strings are immutable. This means that elements of a string cannot be changed once they have been assigned. We can simply reassign different strings to the same name.', 'Some of the commonly used ones are enumerate() and len(). The enumerate() function returns an enumerate object. It contains the index and value of all the items in the string as pairs. This can be useful for iteration.', 'If we want to print a text like He said, ""What\'s there?"", we can neither use single quotes nor double quotes. This will result in a SyntaxError as the text itself contains both single and double quotes.', 'An escape sequence starts with a backslash and is interpreted differently. If we use a single quote to represent a string, all the single quotes inside the string must be escaped. Similar is the case with double quotes. Here is how it can be done to represent the above text.', 'Sometimes we may wish to ignore the escape sequences inside a string. To do this we can place r or R in front of the string. This will imply that it is a raw string and any escape sequence inside it will be ignored.', 'The format() method that is available with the string object is very versatile and powerful in formatting strings. Format strings contain curly braces {} as placeholders or replacement fields which get replaced.', 'The format() method can have optional format specifications. They are separated from the field name using colon. For example, we can left-justify <, right-justify > or center ^ a string in the given space.', 'We can also format integers as binary, hexadecimal, etc. and floats can be rounded or displayed in the exponent format. There are tons of formatting you can use. Visit here for all the string formatting available with the format() method.', 'We can even format strings like the old sprintf() style used in C programming language. We use the % operator to accomplish this.', 'There are numerous methods available with the string object. The format() method that we mentioned above is one of them. Some of the commonly used methods are lower(), upper(), join(), split(), find(), replace() etc. Here is a complete list of all the built-in methods to work with strings in Python.']","['# defining strings in Python', ""my_string = 'Hello'"", 'print(my_string)', 'my_string = ""Hello""', 'print(my_string)', ""my_string = '''Hello'''"", 'print(my_string)', 'print(my_string)', ""str = 'programiz'"", ""print('str = ', str)"", '#first character', ""print('str[0] = ', str[0])"", '#last character', ""print('str[-1] = ', str[-1])"", '#slicing 2nd to 5th character', ""print('str[1:5] = ', str[1:5])"", '# index must be in range', '>>> my_string[15]  ', '# index must be an integer', '>>> my_string[1.5] ', "">>> my_string = 'programiz'"", "">>> my_string[5] = 'a'"", "">>> my_string = 'Python'"", '>>> my_string', ""'Python'"", '>>> del my_string[1]', '>>> del my_string', '>>> my_string', '# Python String Operations', ""str1 = 'Hello'"", ""str2 ='World!'"", '# using +', '# using *', ""print('str1 * 3 =', str1 * 3)"", "">>> 'Hello ''World!'"", ""'Hello World!'"", '>>> # using parentheses', "">>> s = ('Hello '"", ""...      'World')"", ""'Hello World'"", '# Iterating through a string', 'count = 0', ""for letter in 'Hello World':"", ""    if(letter == 'l'):"", '        count += 1', ""print(count,'letters found')"", "">>> 'a' in 'program'"", "">>> 'at' not in 'battle'"", ""str = 'cold'"", '# enumerate()', '#character count', ""print('len(str) = ', len(str))"", 'SyntaxError: invalid syntax', 'SyntaxError: invalid syntax', '# using triple quotes', '# escaping single quotes', '# escaping double quotes', '>>> print(""C:\\\\Python32\\\\Lib"")', 'C:\\Python32\\Lib', 'This is printed', 'in two lines', 'This is HEX representation', 'This is a', 'good example', 'This is \\x61 \\ngood example', '# default(implicit) order', 'print(default_order)', 'print(positional_order)', '# order using keyword argument', 'print(keyword_order)', '>>> # formatting integers', '>>> # formatting floats', '>>> # round off', ""'One third is: 0.333'"", '>>> # string alignment', '>>> x = 12.3456789', 'The value of x is 12.35', 'The value of x is 12.3457', '>>> ""PrOgRaMiZ"".lower()', ""'programiz'"", '>>> ""PrOgRaMiZ"".upper()', ""'PROGRAMIZ'"", ""'Brilliant New Year'""]","['# all of the following are equivalent', '# triple quotes string can extend multiple lines', 'my_string = """"""Hello, welcome to', '           the world of Python""""""', '#Accessing string characters in Python', '#slicing 6th to 2nd last character', ""print('str[5:-2] = ', str[5:-2])"", 'IndexError: string index out of range', 'TypeError: string indices must be integers', ""TypeError: 'str' object does not support item assignment"", ""TypeError: 'str' object doesn't support item deletion"", ""NameError: name 'my_string' is not defined"", ""print('str1 + str2 = ', str1 + str2)"", '>>> # two string literals together', 'list_enumerate = list(enumerate(str))', ""print('list(enumerate(str) = ', list_enumerate)"", '>>> print(""He said, ""What\'s there?"""")', '>>> print(\'He said, ""What\'s there?""\')', 'print(\'\'\'He said, ""What\'s there?""\'\'\')', 'print(\'He said, ""What\\\'s there?""\')', 'print(""He said, \\""What\'s there?\\"""")', '>>> print(""This is printed\\nin two lines"")', '>>> print(""This is \\x48\\x45\\x58 representation"")', '>>> print(""This is \\x61 \\ngood example"")', '>>> print(r""This is \\x61 \\ngood example"")', 'default_order = ""{}, {} and {}"".format(\'John\',\'Bill\',\'Sean\')', ""print('\\n--- Default Order ---')"", '# order using positional argument', 'positional_order = ""{1}, {0} and {2}"".format(\'John\',\'Bill\',\'Sean\')', ""print('\\n--- Positional Order ---')"", 'keyword_order = ""{s}, {b} and {j}"".format(j=\'John\',b=\'Bill\',s=\'Sean\')', ""print('\\n--- Keyword Order ---')"", '>>> ""Binary representation of {0} is {0:b}"".format(12)', ""'Binary representation of 12 is 1100'"", '>>> ""Exponent representation: {0:e}"".format(1566.345)', ""'Exponent representation: 1.566345e+03'"", '>>> ""One third is: {0:.3f}"".format(1/3)', '>>> ""|{:<10}|{:^10}|{:>10}|"".format(\'butter\',\'bread\',\'ham\')', ""'|butter    |  bread   |       ham|'"", "">>> print('The value of x is %3.2f' %x)"", "">>> print('The value of x is %3.4f' %x)"", '>>> ""This will split all words into a list"".split()', ""['This', 'will', 'split', 'all', 'words', 'into', 'a', 'list']"", "">>> ' '.join(['This', 'will', 'join', 'all', 'words', 'into', 'a', 'string'])"", ""'This will join all words into a string'"", "">>> 'Happy New Year'.replace('Happy','Brilliant')""]","['Hello', 'Hello', 'Hello', 'Hello, welcome to', '           the world of Python', 'str =  programiz', 'str[0] =  p', 'str[-1] =  z', 'str[1:5] =  rogr', 'str[5:-2] =  am', 'str1 + str2 =  HelloWorld!', 'str1 * 3 = HelloHelloHello', '3 letters found', ""list(enumerate(str) =  [(0, 'c'), (1, 'o'), (2, 'l'), (3, 'd')]"", 'len(str) =  4', 'He said, ""What\'s there?""', 'He said, ""What\'s there?""', 'He said, ""What\'s there?""', '--- Default Order ---', 'John, Bill and Sean', '--- Positional Order ---', 'Bill, John and Sean', '--- Keyword Order ---', 'Sean, Bill and John']","['scape Sequence|||Description&&&newline|||Backslash and newline ignored&&&\\|||Backslash&&&\'|||Single quote&&&""|||Double quote&&&a|||ASCII Bell&&&b|||ASCII Backspace&&&f|||ASCII Formfeed&&&n|||ASCII Linefeed&&&r|||ASCII Carriage Return&&&t|||ASCII Horizontal Tab&&&v|||ASCII Vertical Tab&&&ooo|||Character with octal value ooo&&&xHH|||Character with hexadecimal value HH']",[]
22,['Python Sets'],"[""In this tutorial, you'll learn everything about Python sets; how they are created, adding or removing elements from them, and all operations performed on sets in Python.""]",['Video: Sets in Python'],['https://www.youtube.com/embed/-vfzvT0Fh0A?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Creating Python Sets', 'Modifying a set in Python', 'Removing elements from a set', 'Python Set Operations', 'Other Python Set Methods', 'Other Set Operations', 'Python Frozenset']","['Set Union', 'Set Intersection', 'Set Difference', 'Set Symmetric Difference', 'Set Membership Test', 'Iterating Through a Set', 'Built-in Functions with Set']","['//cdn.programiz.com/sites/tutorial2program/files/set-union.jpg', '//cdn.programiz.com/sites/tutorial2program/files/set-intersection.jpg', '//cdn.programiz.com/sites/tutorial2program/files/set-difference.jpg', '//cdn.programiz.com/sites/tutorial2program/files/set-symmetric-difference.jpg']","['Output', 'Try the following examples as well.', 'Output', 'Creating an empty set is a bit tricky.', 'Output', 'Output', 'The following example will illustrate this.', 'Output', 'Output', 'Union of A and B is a set of all elements from both sets.', 'Output', 'Try the following examples on Python shell.', 'Output', 'Try the following examples on Python shell.', 'Output', 'Try the following examples on Python shell.', 'Output', 'Try the following examples on Python shell.', 'Output', 'We can iterate through each item in a set using a for loop.', 'Frozensets can be created using the frozenset() function.', 'Try these examples on Python shell.']","['However, a set itself is mutable. We can add or remove items from it.', 'Sets can also be used to perform mathematical set operations like union, intersection, symmetric difference, etc.', 'Sets are mutable. However, since they are unordered, indexing has no meaning.', 'We cannot access or change an element of a set using indexing or slicing. Set data type does not support it.', 'A particular item can be removed from a set using the methods discard() and remove().', 'Similarly, we can remove and return an item using the pop() method.', 'Since set is an unordered data type, there is no way of determining which item will be popped. It is completely arbitrary.', 'We can also remove all the items from a set using the clear() method.', 'Let us consider the following two sets for the following operations.', 'Union is performed using | operator. Same can be accomplished using the union() method.', 'Intersection of A and B is a set of elements that are common in both the sets.', 'Intersection is performed using & operator. Same can be accomplished using the intersection() method.', 'Difference is performed using - operator. Same can be accomplished using the difference() method.', 'Symmetric Difference of A and B is a set of elements in A and B but not in both (excluding the intersection).', 'Symmetric difference is performed using ^ operator. Same can be accomplished using the method symmetric_difference().', 'We can test if an item exists in a set or not, using the in keyword.']","['A set is an unordered collection of items. Every set element is unique (no duplicates) and must be immutable (cannot be changed).', 'A set is created by placing all the items (elements) inside curly braces {}, separated by comma, or by using the built-in set() function.', 'It can have any number of items and they may be of different types (integer, float, tuple, string etc.). But a set cannot have mutable elements like lists, sets or dictionaries as its elements.', 'Empty curly braces {} will make an empty dictionary in Python. To make a set without any elements, we use the set() function without any argument.', 'We can add a single element using the add() method, and multiple elements using the update() method. The update() method can take tuples, lists, strings or other sets as its argument. In all cases, duplicates are avoided.', 'The only difference between the two is that the discard() function leaves a set unchanged if the element is not present in the set. On the other hand, the remove() function will raise an error in such a condition (if element is not present in the set).', 'Sets can be used to carry out mathematical set operations like union, intersection, difference and symmetric difference. We can do this with operators or methods.', 'Difference of the set B from set A(A - B) is a set of elements that are only in A but not in B. Similarly, B - A is a set of elements in B but not in A.', 'There are many set methods, some of which we have already used above. Here is a list of all the methods that are available with the set objects:', 'Built-in functions like all(), any(), enumerate(), len(), max(), min(), sorted(), sum() etc. are commonly used with sets to perform different tasks.', 'Frozenset is a new class that has the characteristics of a set, but its elements cannot be changed once assigned. While tuples are immutable lists, frozensets are immutable sets.', ""Sets being mutable are unhashable, so they can't be used as dictionary keys. On the other hand, frozensets are hashable and can be used as keys to a dictionary."", 'This data type supports methods like copy(), difference(), intersection(), isdisjoint(), issubset(), issuperset(), symmetric_difference() and union(). Being immutable, it does not have methods that add or remove elements.']","['# set of integers', 'my_set = {1, 2, 3}', 'print(my_set)', '# set of mixed datatypes', 'print(my_set)', '# set cannot have duplicates', '# Output: {1, 2, 3, 4}', 'my_set = {1, 2, 3, 4, 3, 2}', 'print(my_set)', '# we can make set from a list', '# Output: {1, 2, 3}', 'my_set = set([1, 2, 3, 2])', 'print(my_set)', '# this will cause an error.', 'my_set = {1, 2, [3, 4]}', '# initialize a with {}', '# check data type of a', 'print(type(a))', '# initialize a with set()', 'a = set()', '# check data type of a', 'print(type(a))', '# initialize my_set', 'my_set = {1, 3}', 'print(my_set)', '# my_set[0]', '# you will get an error', '# add an element', '# Output: {1, 2, 3}', 'my_set.add(2)', 'print(my_set)', '# add multiple elements', '# Output: {1, 2, 3, 4}', 'my_set.update([2, 3, 4])', 'print(my_set)', '# add list and set', 'print(my_set)', '# initialize my_set', 'my_set = {1, 3, 4, 5, 6}', 'print(my_set)', '# discard an element', '# Output: {1, 3, 5, 6}', 'my_set.discard(4)', 'print(my_set)', '# remove an element', '# Output: {1, 3, 5}', 'my_set.remove(6)', 'print(my_set)', '# discard an element', '# not present in my_set', '# Output: {1, 3, 5}', 'my_set.discard(2)', 'print(my_set)', '# remove an element', '# not present in my_set', '# you will get an error.', '# Output: KeyError', 'my_set.remove(2)', '# initialize my_set', 'my_set = set(""HelloWorld"")', 'print(my_set)', '# pop an element', '# Output: random element', 'print(my_set.pop())', '# pop another element', 'my_set.pop()', 'print(my_set)', '# clear my_set', '# Output: set()', 'my_set.clear()', 'print(my_set)', 'print(my_set)', '>>> A = {1, 2, 3, 4, 5}', '>>> B = {4, 5, 6, 7, 8}', '# Set union method', '# initialize A and B', 'A = {1, 2, 3, 4, 5}', 'B = {4, 5, 6, 7, 8}', '# use | operator', 'print(A | B)', '# use union function', '>>> A.union(B)', '{1, 2, 3, 4, 5, 6, 7, 8}', '# use union function on B', '>>> B.union(A)', '{1, 2, 3, 4, 5, 6, 7, 8}', '# Intersection of sets', '# initialize A and B', 'A = {1, 2, 3, 4, 5}', 'B = {4, 5, 6, 7, 8}', '# use & operator', '# Output: {4, 5}', 'print(A & B)', '>>> A.intersection(B)', '>>> B.intersection(A)', '# Difference of two sets', '# initialize A and B', 'A = {1, 2, 3, 4, 5}', 'B = {4, 5, 6, 7, 8}', '# use - operator on A', '# Output: {1, 2, 3}', 'print(A - B)', '# use difference function on A', '>>> A.difference(B)', '{1, 2, 3}', '# use - operator on B', '>>> B - A', '{8, 6, 7}', '# use difference function on B', '>>> B.difference(A)', '{8, 6, 7}', '# initialize A and B', 'A = {1, 2, 3, 4, 5}', 'B = {4, 5, 6, 7, 8}', '# use ^ operator', '# Output: {1, 2, 3, 6, 7, 8}', 'print(A ^ B)', '>>> A.symmetric_difference(B)', '{1, 2, 3, 6, 7, 8}', '>>> B.symmetric_difference(A)', '{1, 2, 3, 6, 7, 8}', '# in keyword in a set', '# initialize my_set', 'my_set = set(""apple"")', ""# check if 'a' is present"", '# Output: True', ""print('a' in my_set)"", ""# check if 'p' is present"", '# Output: False', ""print('p' not in my_set)"", '...     print(letter)', '# Frozensets', '# initialize A and B', 'A = frozenset([1, 2, 3, 4])', 'B = frozenset([3, 4, 5, 6])', '>>> A.isdisjoint(B)', '>>> A.difference(B)', 'frozenset({1, 2})', '>>> A | B', 'frozenset({1, 2, 3, 4, 5, 6})', '>>> A.add(3)']","['# Different types of sets in Python', 'my_set = {1.0, ""Hello"", (1, 2, 3)}', '# Distinguish set and dictionary while creating empty set', '# if you uncomment the above line', ""# TypeError: 'set' object does not support indexing"", 'my_set.update([4, 5], {1, 6, 8})', '# Difference between discard() and remove()', '# Output: set of unique elements', '# Output: {1, 2, 3, 4, 5, 6, 7, 8}', '# use intersection function on A', '# use intersection function on B', '# Symmetric difference of two sets', '# use symmetric_difference function on A', '# use symmetric_difference function on B', ""AttributeError: 'frozenset' object has no attribute 'add'""]","['{1, 2, 3}', ""{1.0, (1, 2, 3), 'Hello'}"", '{1, 2, 3, 4}', '{1, 2, 3}', 'Traceback (most recent call last):', '  File ""<string>"", line 15, in <module>', '    my_set = {1, 2, [3, 4]}', ""TypeError: unhashable type: 'list'"", ""<class 'dict'>"", ""<class 'set'>"", '{1, 3}', '{1, 2, 3}', '{1, 2, 3, 4}', '{1, 2, 3, 4, 5, 6, 8}', '{1, 3, 4, 5, 6}', '{1, 3, 5, 6}', '{1, 3, 5}', '{1, 3, 5}', 'Traceback (most recent call last):', '  File ""<string>"", line 28, in <module>', 'KeyError: 2', ""{'H', 'l', 'r', 'W', 'o', 'd', 'e'}"", 'H', ""{'r', 'W', 'o', 'd', 'e'}"", 'set()', '{1, 2, 3, 4, 5, 6, 7, 8}', '{4, 5}', '{1, 2, 3}', '{1, 2, 3, 6, 7, 8}', 'True', 'False']","['ethod|||Description&&&dd()|||Adds an element to the set&&&lear()|||Removes all elements from the set&&&opy()|||Returns a copy of the set&&&ifference()|||Returns the difference of two or more sets as a new set&&&ifference_update()|||Removes all elements of another set from this set&&&iscard()|||Removes an element from the set if it is a member. (Do nothing if the element is not in set)&&&ntersection()|||Returns the intersection of two sets as a new set&&&ntersection_update()|||Updates the set with the intersection of itself and another&&&sdisjoint()|||Returns True if two sets have a null intersection&&&ssubset()|||Returns True if another set contains this set&&&ssuperset()|||Returns True if this set contains another set&&&op()|||Removes and returns an arbitrary set element. Raises KeyError if the set is empty&&&emove()|||Removes an element from the set. If the element is not a member, raises a KeyError&&&ymmetric_difference()|||Returns the symmetric difference of two sets as a new set&&&ymmetric_difference_update()|||Updates a set with the symmetric difference of itself and another&&&nion()|||Returns the union of sets in a new set&&&pdate()|||Updates the set with the union of itself and others', 'unction|||Description&&&ll()|||Returns True if all elements of the set are true (or if the set is empty).&&&ny()|||Returns True if any element of the set is true. If the set is empty, returns False.&&&numerate()|||Returns an enumerate object. It contains the index and value for all the items of the set as a pair.&&&en()|||Returns the length (the number of items) in the set.&&&ax()|||Returns the largest item in the set.&&&in()|||Returns the smallest item in the set.&&&orted()|||Returns a new sorted list from elements in the set(does not sort the set itself).&&&um()|||Returns the sum of all elements in the set.']",[]
23,['Python Dictionary '],"[""In this tutorial, you'll learn everything about Python dictionaries; how they are created, accessing, adding, removing elements from them and various built-in methods.""]",['Video: Python Dictionaries to Store key/value Pairs'],['https://www.youtube.com/embed/_4wOvc-vt4k?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Creating Python Dictionary', 'Accessing Elements from Dictionary', 'Changing and Adding Dictionary elements', 'Removing elements from Dictionary', 'Python Dictionary Methods', 'Python Dictionary Comprehension', 'Other Dictionary Operations']","['Dictionary Membership Test', 'Iterating Through a Dictionary', 'Dictionary Built-in Functions']",[],"['Output', 'Output', 'Output', 'Here are a few example use cases of these methods.', 'Output', 'Output', 'This code is equivalent to', 'Output', 'Here are some examples to make a dictionary with only odd items.', 'Output', 'Output', 'We can iterate through each key in a dictionary using a for loop.', 'Output', 'Output']","['Python dictionary is an unordered collection of items. Each item of a dictionary has a key/value pair.', 'Dictionaries are optimized to retrieve values when the key is known.', 'Creating a dictionary is as simple as placing items inside curly braces {} separated by commas.', 'An item has a key and a corresponding value that is expressed as a pair (key: value).', 'As you can see from above, we can also create a dictionary using the built-in dict() function.', 'Dictionaries are mutable. We can add new items or change the value of existing items using an assignment operator.', 'We can also use the del keyword to remove individual items or the entire dictionary itself.', 'Methods that are available with a dictionary are tabulated below. Some of them have already been used in the above examples.', 'Dictionary comprehension is an elegant and concise way to create a new dictionary from an iterable in Python.', 'Dictionary comprehension consists of an expression pair (key: value) followed by a for statement inside curly braces {}.', 'Here is an example to make a dictionary with each item being a pair of a number and its square.', 'A dictionary comprehension can optionally contain more for or if statements.', 'An optional if statement can filter out items to form the new dictionary.', 'To learn more dictionary comprehensions, visit Python Dictionary Comprehension.', 'Here are some examples that use built-in functions to work with a dictionary.']","['While the values can be of any data type and can repeat, keys must be of immutable type (string, number or tuple with immutable elements) and must be unique.', 'While indexing is used with other data types to access values, a dictionary uses keys. Keys can be used either inside square brackets [] or with the get() method.', 'If we use the square brackets [], KeyError is raised in case a key is not found in the dictionary. On the other hand, the get() method returns None if the key is not found.', 'If the key is already present, then the existing value gets updated. In case the key is not present, a new (key: value) pair is added to the dictionary.', 'We can remove a particular item in a dictionary by using the pop() method. This method removes an item with the provided key and returns the value.', 'The popitem() method can be used to remove and return an arbitrary (key, value) item pair from the dictionary. All the items can be removed at once, using the clear() method.', 'We can test if a key is in a dictionary or not using the keyword in. Notice that the membership test is only for the keys and not for the values.', 'Built-in functions like all(), any(), len(), cmp(), sorted(), etc. are commonly used with dictionaries to perform different tasks.']","['# empty dictionary', 'my_dict = {}', '# dictionary with integer keys', '# dictionary with mixed keys', '# using dict()', '# Output: Jack', ""print(my_dict['name'])"", '# Output: 26', ""print(my_dict.get('age'))"", '# Output None', ""print(my_dict.get('address'))"", '# KeyError', ""print(my_dict['address'])"", '# update value', ""my_dict['age'] = 27"", 'print(my_dict)', '# add item', 'print(my_dict)', '# create a dictionary', '# Output: 16', 'print(squares.pop(4))', 'print(squares)', '# Output: (5, 25)', 'print(squares.popitem())', '# Output: {1: 1, 2: 4, 3: 9}', 'print(squares)', '# remove all items', 'squares.clear()', '# Output: {}', 'print(squares)', '# delete the dictionary itself', 'del squares', '# Throws Error', 'print(squares)', '# Dictionary Methods', 'print(marks)', 'for item in marks.items():', '    print(item)', '# Dictionary Comprehension', 'print(squares)', 'squares = {}', 'for x in range(6):', '    squares[x] = x*x', 'print(squares)', 'print(odd_squares)', '# Output: True', 'print(1 in squares)', '# Output: True', 'print(2 not in squares)', '# Output: False', 'print(49 in squares)', 'for i in squares:', '    print(squares[i])', '# Output: False', 'print(all(squares))', '# Output: True', 'print(any(squares))', '# Output: 6', 'print(len(squares))', '# Output: [0, 1, 3, 5, 7, 9]', 'print(sorted(squares))']","[""my_dict = {1: 'apple', 2: 'ball'}"", ""my_dict = {'name': 'John', 1: [2, 4, 3]}"", ""my_dict = dict({1:'apple', 2:'ball'})"", '# from sequence having each item as a pair', ""my_dict = dict([(1,'apple'), (2,'ball')])"", '# get vs [] for retrieving elements', ""my_dict = {'name': 'Jack', 'age': 26}"", ""# Trying to access keys which doesn't exist throws error"", '# Changing and adding Dictionary Elements', ""my_dict = {'name': 'Jack', 'age': 26}"", ""#Output: {'age': 27, 'name': 'Jack'}"", ""# Output: {'address': 'Downtown', 'age': 27, 'name': 'Jack'}"", '# Removing elements from a dictionary', 'squares = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}', '# remove a particular item, returns its value', '# Output: {1: 1, 2: 4, 3: 9, 5: 25}', '# remove an arbitrary item, return (key,value)', ""marks = {}.fromkeys(['Math', 'English', 'Science'], 0)"", ""# Output: {'English': 0, 'Math': 0, 'Science': 0}"", ""# Output: ['English', 'Math', 'Science']"", 'print(list(sorted(marks.keys())))', 'squares = {x: x*x for x in range(6)}', '# Dictionary Comprehension with if conditional', 'odd_squares = {x: x*x for x in range(11) if x % 2 == 1}', '# Membership Test for Dictionary Keys', 'squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}', '# membership tests for key only not value', '# Iterating through a Dictionary', 'squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}', 'squares = {0: 0, 1: 1, 3: 9, 5: 25, 7: 49, 9: 81}']","['Jack', '26', 'None', 'Traceback (most recent call last):', '  File ""<string>"", line 15, in <module>', ""    print(my_dict['address'])"", ""KeyError: 'address'"", ""{'name': 'Jack', 'age': 27}"", ""{'name': 'Jack', 'age': 27, 'address': 'Downtown'}"", '16', '{1: 1, 2: 4, 3: 9, 5: 25}', '(5, 25)', '{1: 1, 2: 4, 3: 9}', '{}', 'Traceback (most recent call last):', '  File ""<string>"", line 30, in <module>', '    print(squares)', ""NameError: name 'squares' is not defined"", ""{'Math': 0, 'English': 0, 'Science': 0}"", ""('Math', 0)"", ""('English', 0)"", ""('Science', 0)"", ""['English', 'Math', 'Science']"", '{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}', '{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}', '{1: 1, 3: 9, 5: 25, 7: 49, 9: 81}', 'True', 'True', 'False', '1', '9', '25', '49', '81', 'False', 'True', '6', '[0, 1, 3, 5, 7, 9]']","[""ethod|||Description&&&lear()|||Removes all items from the dictionary.&&&opy()|||Returns a shallow copy of the dictionary.&&&romkeys(seq[, v])|||Returns a new dictionary with keys from seq and value equal to v (defaults to None).&&&et(key[,d])|||Returns the value of the key. If the key does not exist, returns d (defaults to None).&&&tems()|||Return a new object of the dictionary's items in (key, value) format.&&&eys()|||Returns a new object of the dictionary's keys.&&&op(key[,d])|||Removes the item with the key and returns its value or d if key is not found. If d is not provided and the key is not found, it raises KeyError.&&&opitem()|||Removes and returns an arbitrary item (key, value). Raises KeyError if the dictionary is empty.&&&etdefault(key[,d])|||Returns the corresponding value if the key is in the dictionary. If not, inserts the key with a value of d and returns d (defaults to None).&&&pdate([other])|||Updates the dictionary with the key/value pairs from other, overwriting existing keys.&&&alues()|||Returns a new object of the dictionary's values"", 'unction|||Description&&&ll()|||Return True if all keys of the dictionary are True (or if the dictionary is empty).&&&ny()|||Return True if any key of the dictionary is true. If the dictionary is empty, return False.&&&en()|||Return the length (the number of items) in the dictionary.&&&mp()|||Compares items of two dictionaries. (Not available in Python 3)&&&orted()|||Return a new sorted list of keys in the dictionary.']",[]
24,['Python File I/O'],"[""In this tutorial, you'll learn about Python file operations. More specifically, opening a file, reading from it, writing into it, closing it, and various file methods that you should be aware of.""]",['Video: Reading and Writing Files in Python'],['https://www.youtube.com/embed/crluPcyuchU?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Files', 'Opening Files in Python', 'Closing Files in Python', 'Writing to Files in Python', 'Reading Files in Python', 'Python File Methods']",[],[],['A safer way is to use a try...finally block.'],"['Hence, in Python, a file operation takes place in the following order:', 'The default is reading in text mode. In this mode, we get strings when reading from the file.', 'Moreover, the default encoding is platform dependent. In windows, it is cp1252 but utf-8 in Linux.', 'So, we must not also rely on the default encoding or else our code will behave differently in different platforms.', 'Hence, when working with files in text mode, it is highly recommended to specify the encoding type.', 'When we are done with performing operations on the file, we need to properly close the file.', 'Python has a garbage collector to clean up unreferenced objects but we must not rely on it to close the file.', ""We don't need to explicitly call the close() method. It is done internally."", 'In order to write into a file in Python, we need to open it in write w, append a or exclusive creation x mode.', 'We must include the newline characters ourselves to distinguish the different lines.', 'To read a file in Python, we must open the file in reading r mode.', 'We can read the text.txt file we wrote in the above section in the following way:', 'We can read a file line-by-line using a for loop. This is both efficient and fast.', 'There are various methods available with the file object. Some of them have been used in the above examples.', 'Here is the complete list of methods in text mode with a brief description:']","['Files are named locations on disk to store related information. They are used to permanently store data in a non-volatile memory (e.g. hard disk).', 'Since Random Access Memory (RAM) is volatile (which loses its data when the computer is turned off), we use files for future use of the data by permanently storing them.', 'When we want to read from or write to a file, we need to open it first. When we are done, it needs to be closed so that the resources that are tied with the file are freed.', 'Python has a built-in open() function to open a file. This function returns a file object, also called a handle, as it is used to read or modify the file accordingly.', 'We can specify the mode while opening a file. In mode, we specify whether we want to read r, write w or append a to the file. We can also specify if we want to open the file in text mode or binary mode.', 'On the other hand, binary mode returns bytes and this is the mode to be used when dealing with non-text files like images or executable files.', 'Unlike other languages, the character a does not imply the number 97 until it is encoded using ASCII (or other equivalent encodings).', 'Closing a file will free up the resources that were tied with the file. It is done using the close() method available in Python.', 'This method is not entirely safe. If an exception occurs when we are performing some operation with the file, the code exits without closing the file.', 'The best way to close a file is by using the with statement. This ensures that the file is closed when the block inside the with statement is exited.', 'We need to be careful with the w mode, as it will overwrite into the file if it already exists. Due to this, all the previous data are erased.', 'Writing a string or sequence of bytes (for binary files) is done using the write() method. This method returns the number of characters written to the file.', 'This program will create a new file named test.txt in the current directory if it does not exist. If it does exist, it is overwritten.', 'There are various methods available for this purpose. We can use the read(size) method to read in the size number of data. If the size parameter is not specified, it reads and returns up to the end of the file.', ""We can see that the read() method returns a newline as '\\n'. Once the end of the file is reached, we get an empty string on further reading."", 'We can change our current file cursor (position) using the seek() method. Similarly, the tell() method returns our current position (in number of bytes).', 'In this program, the lines in the file itself include a newline character \\n. So, we use the end parameter of the print() function to avoid two newlines when printing.', 'Alternatively, we can use the readline() method to read individual lines of a file. This method reads a file till the newline, including the newline character.', 'Lastly, the readlines() method returns a list of remaining lines of the entire file. All these reading methods return empty values when the end of file (EOF) is reached.']","['# perform file operations', 'f.close()', '   # perform file operations', 'finally:', '   f.close()', '   # perform file operations', '   f.write(""my first file\\n"")', '   f.write(""This file\\n\\n"")', 'This is my first file', 'This file', 'contains three lines', '>>> for line in f:', ""...     print(line, end = '')"", 'This is my first file', 'This file', 'contains three lines', '>>> f.readline()', ""'This is my first file\\n'"", '>>> f.readline()', ""'This file\\n'"", '>>> f.readline()', ""'contains three lines\\n'"", '>>> f.readline()', '>>> f.readlines()']","['>>> f = open(""test.txt"")    # open file in current directory', '>>> f = open(""C:/Python38/README.txt"")  # specifying full path', 'f = open(""test.txt"")      # equivalent to \'r\' or \'rt\'', 'f = open(""test.txt"",\'w\')  # write in text mode', 'f = open(""img.bmp"",\'r+b\') # read and write in binary mode', 'f = open(""test.txt"", mode=\'r\', encoding=\'utf-8\')', 'f = open(""test.txt"", encoding = \'utf-8\')', '   f = open(""test.txt"", encoding = \'utf-8\')', 'with open(""test.txt"", encoding = \'utf-8\') as f:', 'with open(""test.txt"",\'w\',encoding = \'utf-8\') as f:', '   f.write(""contains three lines\\n"")', '>>> f = open(""test.txt"",\'r\',encoding = \'utf-8\')', '>>> f.read(4)    # read the first 4 data', '>>> f.read(4)    # read the next 4 data', '>>> f.read()     # read in the rest till end of file', ""'my first file\\nThis file\\ncontains three lines\\n'"", '>>> f.read()  # further reading returns empty sting', '>>> f.tell()    # get the current file position', '>>> f.seek(0)   # bring file cursor to initial position', '>>> print(f.read())  # read the entire file', ""['This is my first file\\n', 'This file\\n', 'contains three lines\\n']""]",[],"['ode|||Description&&&|||Opens a file for reading. (default)&&&|||Opens a file for writing. Creates a new file if it does not exist or truncates the file if it exists.&&&|||Opens a file for exclusive creation. If the file already exists, the operation fails.&&&|||Opens a file for appending at the end of the file without truncating it. Creates a new file if it does not exist.&&&|||Opens in text mode. (default)&&&|||Opens in binary mode.&&&|||Opens a file for updating (reading and writing)', 'ethod|||Description&&&lose()|||Closes an opened file. It has no effect if the file is already closed.&&&etach()|||Separates the underlying binary buffer from the TextIOBase and returns it.&&&ileno()|||Returns an integer number (file descriptor) of the file.&&&lush()|||Flushes the write buffer of the file stream.&&&satty()|||Returns True if the file stream is interactive.&&&ead(n)|||Reads at most n characters from the file. Reads till end of file if it is negative or None.&&&eadable()|||Returns True if the file stream can be read from.&&&eadline(n=-1)|||Reads and returns one line from the file. Reads in at most n bytes if specified.&&&eadlines(n=-1)|||Reads and returns a list of lines from the file. Reads in at most n bytes/characters if specified.&&&eek(offset,from=SEEK_SET)|||Changes the file position to offset bytes, in reference to from (start, current, end).&&&eekable()|||Returns True if the file stream supports random access.&&&ell()|||Returns the current file location.&&&runcate(size=None)|||Resizes the file stream to size bytes. If size is not specified, resizes to current location.&&&ritable()|||Returns True if the file stream can be written to.&&&rite(s)|||Writes the string s to the file and returns the number of characters written.&&&ritelines(lines)|||Writes a list of lines to the file.']",['Open a file|||Read or write (perform operation)|||Close the file|||']
25,['Python Errors and Built-in Exceptions'],"['In this tutorial, you will learn about different types of errors and exceptions that are built-in to Python. They are raised whenever the Python interpreter encounters errors.']",['Video: Python Exception Handling'],['https://www.youtube.com/embed/brICUKrzVR0?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Python Syntax Errors', 'Python Logical Errors (Exceptions)', 'Python Built-in Exceptions']",[],[],"[""Let's look at one example:"", 'We can notice here that a colon : is missing in the if statement.', ""Let's look at how Python treats these errors:""]","['Error caused by not following the proper structure (syntax) of the language is called syntax error or parsing error.', 'As shown in the example, an arrow indicates where the parser ran into the syntax error.', 'Errors that occur at runtime (after passing the syntax test) are called exceptions or logical errors.', 'Some of the common built-in exceptions in Python programming along with the error that cause them are listed below:', 'If required, we can also define our own exceptions in Python. To learn more about them, visit Python User-defined Exceptions.']","['We can make certain mistakes while writing a program that lead to errors when we try to run it. A python program terminates as soon as it encounters an unhandled error. These errors can be broadly classified into two classes:', 'For instance, they occur when we try to open a file(for reading) that does not exist (FileNotFoundError), try to divide a number by zero (ZeroDivisionError), or try to import a module that does not exist (ImportError).', 'Whenever these types of runtime errors occur, Python creates an exception object. If not handled properly, it prints a traceback to that error along with some details about why that error occurred.', 'Illegal operations can raise exceptions. There are plenty of built-in exceptions in Python that are raised when corresponding errors occur. We can view all the built-in exceptions using the built-in local() function as follows:', ""locals()['__builtins__'] will return a module of built-in exceptions, functions, and attributes. dir allows us to list these attributes as strings."", 'We can handle these built-in and user-defined exceptions in Python using try, except and finally statements. To learn more about them, visit Python try, except and finally statements.']","['>>> if a < 3', '    if a < 3', '           ^', 'SyntaxError: invalid syntax', '>>> 1 / 0', '>>> open(""imaginary.txt"")']","['  File ""<interactive input>"", line 1', 'Traceback (most recent call last):', ' File ""<string>"", line 301, in runcode', ' File ""<interactive input>"", line 1, in <module>', 'ZeroDivisionError: division by zero', 'Traceback (most recent call last):', ' File ""<string>"", line 301, in runcode', ' File ""<interactive input>"", line 1, in <module>', ""FileNotFoundError: [Errno 2] No such file or directory: 'imaginary.txt'"", ""print(dir(locals()['__builtins__']))""]",[],"[""xception|||Cause of Error&&&ssertionError|||Raised when an assert statement fails.&&&ttributeError|||Raised when attribute assignment or reference fails.&&&OFError|||Raised when the input() function hits end-of-file condition.&&&loatingPointError|||Raised when a floating point operation fails.&&&eneratorExit|||Raise when a generator's close() method is called.&&&mportError|||Raised when the imported module is not found.&&&ndexError|||Raised when the index of a sequence is out of range.&&&eyError|||Raised when a key is not found in a dictionary.&&&eyboardInterrupt|||Raised when the user hits the interrupt key (Ctrl+C or Delete).&&&emoryError|||Raised when an operation runs out of memory.&&&ameError|||Raised when a variable is not found in local or global scope.&&&otImplementedError|||Raised by abstract methods.&&&SError|||Raised when system operation causes system related error.&&&verflowError|||Raised when the result of an arithmetic operation is too large to be represented.&&&eferenceError|||Raised when a weak reference proxy is used to access a garbage collected referent.&&&untimeError|||Raised when an error does not fall under any other category.&&&topIteration|||Raised by next() function to indicate that there is no further item to be returned by iterator.&&&yntaxError|||Raised by parser when syntax error is encountered.&&&ndentationError|||Raised when there is incorrect indentation.&&&abError|||Raised when indentation consists of inconsistent tabs and spaces.&&&ystemError|||Raised when interpreter detects internal error.&&&ystemExit|||Raised by sys.exit() function.&&&ypeError|||Raised when a function or operation is applied to an object of incorrect type.&&&nboundLocalError|||Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.&&&nicodeError|||Raised when a Unicode-related encoding or decoding error occurs.&&&nicodeEncodeError|||Raised when a Unicode-related error occurs during encoding.&&&nicodeDecodeError|||Raised when a Unicode-related error occurs during decoding.&&&nicodeTranslateError|||Raised when a Unicode-related error occurs during translating.&&&alueError|||Raised when a function gets an argument of correct type but improper value.&&&eroDivisionError|||Raised when the second operand of division or modulo operation is zero.""]",['Syntax errors|||Logical errors (Exceptions)|||']
26,"['Python Exception Handling Using try, except and finally statement']","[""In this tutorial, you'll learn how to handle exceptions in your Python program using try, except and finally statements with the help of examples.""]",['Video: Python Exception Handling (try..except..finally)'],['https://www.youtube.com/embed/brICUKrzVR0?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Exceptions in Python', 'Catching Exceptions in Python', 'Catching Specific Exceptions in Python', 'Raising Exceptions in Python', 'Python try with else clause', 'Python try...finally']",[],[],"['In Python, exceptions can be handled using a try statement.', 'Output', 'This program has the same output as the above program.', ""Let's look at an example:"", 'Output', 'If we pass an odd number:', 'Here is an example of file operations to illustrate this.']","['If never handled, an error message is displayed and our program comes to a sudden unexpected halt.', 'We can thus choose what operations to perform once we have caught the exception. Here is a simple example.', 'In the above example, we did not mention any specific exception in the except clause.', 'We can use a tuple of values to specify multiple exceptions in an except clause. Here is an example pseudo code.', 'We can optionally pass values to the exception to clarify why that exception was raised.', 'Note: Exceptions in the else clause are not handled by the preceding except clauses.', 'If we pass an even number, the reciprocal is computed and displayed.', 'However, if we pass 0, we get ZeroDivisionError as the code block inside else is not handled by preceding except.', 'This type of construct makes sure that the file is closed even if an exception occurs during the program execution.']","['Python has many built-in exceptions that are raised when your program encounters an error (something in the program goes wrong).', 'When these exceptions occur, the Python interpreter stops the current process and passes it to the calling process until it is handled. If not handled, the program will crash.', 'For example, let us consider a program where we have a function A that calls function B, which in turn calls function C. If an exception occurs in function C but is not handled in C, the exception passes to B and then to A.', 'The critical operation which can raise an exception is placed inside the try clause. The code that handles the exceptions is written in the except clause.', 'In this program, we loop through the values of the randomList list. As previously mentioned, the portion that can cause an exception is placed inside the try block.', 'If no exception occurs, the except block is skipped and normal flow continues(for last value). But if any exception occurs, it is caught by the except block (first and second values).', 'Here, we print the name of the exception using the exc_info() function inside sys module. We can see that a causes ValueError and 0 causes ZeroDivisionError.', 'Since every exception in Python inherits from the base Exception class, we can also perform the above task in the following way:', 'This is not a good programming practice as it will catch all exceptions and handle every case in the same way. We can specify which exceptions an except clause should catch.', 'A try clause can have any number of except clauses to handle different exceptions, however, only one will be executed in case an exception occurs.', 'In Python programming, exceptions are raised when errors occur at runtime. We can also manually raise exceptions using the raise keyword.', 'In some situations, you might want to run a certain block of code if the code block inside try ran without any errors. For these cases, you can use the optional else keyword with the try statement.', 'The try statement in Python can have an optional finally clause. This clause is executed no matter what, and is generally used to release external resources.', 'For example, we may be connected to a remote data center through the network or working with a file or a Graphical User Interface (GUI).', 'In all these circumstances, we must clean up the resource before the program comes to a halt whether it successfully ran or not. These actions (closing a file, GUI or disconnecting from network) are performed in the finally clause to guarantee the execution.']","['import sys', ""randomList = ['a', 0, 2]"", 'for entry in randomList:', '    try:', '        r = 1/int(entry)', '        break', '    except:', '        print(""Next entry."")', '        print()', 'import sys', ""randomList = ['a', 0, 2]"", 'for entry in randomList:', '    try:', '        r = 1/int(entry)', '        break', '    except Exception as e:', '        print(""Next entry."")', '        print()', '   # do something', 'except ValueError:', '>>> raise KeyboardInterrupt', 'KeyboardInterrupt', '>>> try:', '...     if a <= 0:', '... except ValueError as ve:', '...     print(ve)', 'Enter a positive integer: -2', 'That is not a positive number!', '    assert num % 2 == 0', '    reciprocal = 1/num', '    print(reciprocal)', '   # perform file operations', 'finally:', '   f.close()']","['# import module sys to get the type of exception', '        print(""The entry is"", entry)', '        print(""Oops!"", sys.exc_info()[0], ""occurred."")', 'print(""The reciprocal of"", entry, ""is"", r)', '# import module sys to get the type of exception', '        print(""The entry is"", entry)', '        print(""Oops!"", e.__class__, ""occurred."")', 'print(""The reciprocal of"", entry, ""is"", r)', '   # handle ValueError exception', 'except (TypeError, ZeroDivisionError):', '   # TypeError and ZeroDivisionError', '   # handle all other exceptions', 'Traceback (most recent call last):', '>>> raise MemoryError(""This is an argument"")', 'Traceback (most recent call last):', 'MemoryError: This is an argument', '...     a = int(input(""Enter a positive integer: ""))', '...         raise ValueError(""That is not a positive number!"")', '# program to print the reciprocal of even numbers', '    num = int(input(""Enter a number: ""))', '    print(""Not an even number!"")', '   f = open(""test.txt"",encoding = \'utf-8\')']","['The entry is a', ""Oops! <class 'ValueError'> occurred."", 'Next entry.', 'The entry is 0', ""Oops! <class 'ZeroDivisionError'> occured."", 'Next entry.', 'The entry is 2', 'The reciprocal of 2 is 0.5', 'Enter a number: 1', 'Not an even number!', 'Enter a number: 4', '0.25', 'Enter a number: 0', 'Traceback (most recent call last):', '  File ""<string>"", line 7, in <module>', '    reciprocal = 1/num', 'ZeroDivisionError: division by zero']",[],[]
27,['Python Custom Exceptions'],"['In this tutorial, you will learn how to define custom exceptions depending upon your requirements with the help of examples.']",[],[],"['Creating Custom Exceptions', 'Example: User-Defined Exception in Python', 'Customizing Exception Classes']",[],[],"['Here is a sample run of this program.', 'We have defined a base class called Error.', ""Let's look at one example:"", 'Output', 'The custom self.salary attribute is defined to be used later.', 'We can also customize the __str__ method itself by overriding it.', 'Output']","['Python has numerous built-in exceptions that force your program to output an error when something in the program goes wrong.', 'However, sometimes you may need to create your own custom exceptions that serve your purpose.', 'In this example, we will illustrate how user-defined exceptions can be used in a program to raise and catch errors.', 'We can further customize this class to accept other arguments as per our needs.', 'To learn about customizing the Exception classes, you need to have the basic knowledge of Object-Oriented programming.', 'Visit Python Object Oriented Programming to start learning about Object-Oriented programming in Python.', 'To learn more about how you can handle exceptions in Python, visit Python Exception Handling.']","['In Python, users can define custom exceptions by creating a new class. This exception class has to be derived, either directly or indirectly, from the built-in Exception class. Most of the built-in exceptions are also derived from this class.', 'Here, we have created a user-defined exception called CustomError which inherits from the Exception class. This new exception, like other exceptions, can be raised using the raise statement with an optional error message.', 'When we are developing a large Python program, it is a good practice to place all the user-defined exceptions that our program raises in a separate file. Many standard modules do this. They define their exceptions separately as exceptions.py or errors.py (generally but not always).', 'User-defined exception class can implement everything a normal class can do, but we generally make them simple and concise. Most implementations declare a custom base class and derive others exception classes from this base class. This concept is made clearer in the following example.', 'This program will ask the user to enter a number until they guess a stored number correctly. To help them figure it out, a hint is provided whether their guess is greater than or less than the stored number.', 'The other two exceptions (ValueTooSmallError and ValueTooLargeError) that are actually raised by our program are derived from this class. This is the standard way to define user-defined exceptions in Python programming, but you are not limited to this way only.', 'Here, we have overridden the constructor of the Exception class to accept our own custom arguments salary and message. Then, the constructor of the parent Exception class is called manually with the self.message argument using super().', 'The inherited __str__ method of the Exception class is then used to display the corresponding message when SalaryNotInRangeError is raised.']","['...     pass', '>>> raise CustomError', '__main__.CustomError', 'class Error(Exception):', '    pass', '    pass', '    pass', 'number = 10', 'while True:', '    try:', '        if i_num < number:', '        elif i_num > number:', '        break', '    except ValueTooSmallError:', '        print()', '    except ValueTooLargeError:', '        print()', '    Attributes:', '        self.salary = salary', '        self.message = message', 'if not 5000 < salary < 15000:', '    Attributes:', '        self.salary = salary', '        self.message = message', '    def __str__(self):', 'if not 5000 < salary < 15000:']","['>>> class CustomError(Exception):', 'Traceback (most recent call last):', '>>> raise CustomError(""An error occurred"")', 'Traceback (most recent call last):', '__main__.CustomError: An error occurred', '# define Python user-defined exceptions', '    """"""Base class for other exceptions""""""', 'class ValueTooSmallError(Error):', '    """"""Raised when the input value is too small""""""', 'class ValueTooLargeError(Error):', '    """"""Raised when the input value is too large""""""', '# user guesses a number until he/she gets it right', '        i_num = int(input(""Enter a number: ""))', '            raise ValueTooSmallError', '            raise ValueTooLargeError', '        print(""This value is too small, try again!"")', '        print(""This value is too large, try again!"")', 'print(""Congratulations! You guessed it correctly."")', 'class SalaryNotInRangeError(Exception):', '    """"""Exception raised for errors in the input salary.', '        salary -- input salary which caused the error', '        message -- explanation of the error', '    def __init__(self, salary, message=""Salary is not in (5000, 15000) range""):', '        super().__init__(self.message)', 'salary = int(input(""Enter salary amount: ""))', '    raise SalaryNotInRangeError(salary)', 'class SalaryNotInRangeError(Exception):', '    """"""Exception raised for errors in the input salary.', '        salary -- input salary which caused the error', '        message -- explanation of the error', '    def __init__(self, salary, message=""Salary is not in (5000, 15000) range""):', '        super().__init__(self.message)', ""        return f'{self.salary} -> {self.message}'"", 'salary = int(input(""Enter salary amount: ""))', '    raise SalaryNotInRangeError(salary)']","['Enter a number: 12', 'This value is too large, try again!', 'Enter a number: 0', 'This value is too small, try again!', 'Enter a number: 8', 'This value is too small, try again!', 'Enter a number: 10', 'Congratulations! You guessed it correctly.', 'Enter salary amount: 2000', 'Traceback (most recent call last):', '  File ""<string>"", line 17, in <module>', '    raise SalaryNotInRangeError(salary)', '__main__.SalaryNotInRangeError: Salary is not in (5000, 15000) range', 'Enter salary amount: 2000', 'Traceback (most recent call last):', '  File ""/home/bsoyuj/Desktop/Untitled-1.py"", line 20, in <module>', '    raise SalaryNotInRangeError(salary)', '__main__.SalaryNotInRangeError: 2000 -> Salary is not in (5000, 15000) range']",[],[]
28,['Python Object Oriented Programming'],"['In this tutorial, you’ll learn about Object-Oriented Programming (OOP) in Python and its fundamental concept with the help of examples.']",['Video: Object-oriented Programming in Python'],['https://www.youtube.com/embed/pnWINBJ3-yA?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Object Oriented Programming', 'Class', 'Object', 'Methods', 'Inheritance', 'Encapsulation', 'Polymorphism', 'Key Points to Remember:']","['Example 1: Creating Class and Object in Python', 'Example 2 : Creating Methods in Python', 'Example 3: Use of Inheritance in Python', 'Example 4: Data Encapsulation in Python', 'Example 5: Using Polymorphism in Python']",[],"['An object has two characteristics:', ""Let's take an example:"", 'A parrot is an object, as it has the following properties:', 'In Python, the concept of OOP follows some basic principles:', 'A class is a blueprint for the object.', 'The example for class of parrot can be :', 'The example for object of parrot class can be:', 'Here, obj is an object of class Parrot.', 'Output', 'Output', 'Output', 'Output', 'In the above program, we defined a Computer class.', 'Output']","['Python is a multi-paradigm programming language. It supports different programming approaches.', ""The concept of OOP in Python focuses on creating reusable code. This concept is also known as DRY (Don't Repeat Yourself)."", 'Suppose we have details of parrots. Now, we are going to show how to build the class and objects of parrots.', 'Then, we create instances of the Parrot class. Here, blu and woo are references (value) to our new objects.', 'To learn more about classes and objects, go to Python Classes and Objects', 'Methods are functions defined inside the body of a class. They are used to define the behaviors of an object.', 'We used __init__() method to store the maximum selling price of Computer. Here, notice the code', 'As shown, to change the value, we have to use a setter function i.e setMaxPrice() which takes price as a parameter.', 'Polymorphism is an ability (in OOP) to use a common interface for multiple forms (data types).']","['One of the popular approaches to solve a programming problem is by creating objects. This is known as Object-Oriented Programming (OOP).', 'We can think of class as a sketch of a parrot with labels. It contains all the details about the name, colors, size etc. Based on these descriptions, we can study about the parrot. Here, a parrot is an object.', 'Here, we use the class keyword to define an empty class Parrot. From class, we construct instances. An instance is a specific object created from a particular class.', 'An object (instance) is an instantiation of a class. When class is defined, only the description for the object is defined. Therefore, no memory or storage is allocated.', 'In the above program, we created a class with the name Parrot. Then, we define attributes. The attributes are a characteristic of an object.', 'These attributes are defined inside the __init__ method of the class. It is the initializer method that is first run as soon as the object is created.', 'We can access the class attribute using __class__.species. Class attributes are the same for all instances of a class. Similarly, we access the instance attributes using blu.name and blu.age. However, instance attributes are different for every instance of a class.', 'In the above program, we define two methods i.e sing() and dance(). These are called instance methods because they are called on an instance object i.e blu.', 'Inheritance is a way of creating a new class for using details of an existing class without modifying it. The newly formed class is a derived class (or child class). Similarly, the existing class is a base class (or parent class).', 'In the above program, we created two classes i.e. Bird (parent class) and Penguin (child class). The child class inherits the functions of parent class. We can see this from the swim() method.', 'Again, the child class modified the behavior of the parent class. We can see this from the whoisThis() method. Furthermore, we extend the functions of the parent class, by creating a new run() method.', 'Additionally, we use the super() function inside the __init__() method. This allows us to run the __init__() method of the parent class inside the child class.', 'Using OOP in Python, we can restrict access to methods and variables. This prevents data from direct modification which is called encapsulation. In Python, we denote private attributes using underscore as the prefix i.e single _ or double __.', 'Here, we have tried to modify the value of __maxprice outside of the class. However, since __maxprice is a private variable, this modification is not seen on the output.', 'Suppose, we need to color a shape, there are multiple shape options (rectangle, square, circle). However we could use the same method to color any shape. This concept is called Polymorphism.', 'In the above program, we defined two classes Parrot and Penguin. Each of them have a common fly() method. However, their functions are different.', ""To use polymorphism, we created a common interface i.e flying_test() function that takes any object and calls the object's fly() method. Thus, when we passed the blu and peggy objects in the flying_test() function, it ran effectively.""]","['class Parrot:', '    # class attribute', '    species = ""bird""', '    # instance attribute', '        self.name = name', '        self.age = age', '# instantiate the Parrot class', 'blu = Parrot(""Blu"", 10)', 'woo = Parrot(""Woo"", 15)', '# access the class attributes', 'class Parrot:', '    # instance attributes', '        self.name = name', '        self.age = age', '    # instance method', '    def sing(self, song):', '    def dance(self):', '# instantiate the object', 'blu = Parrot(""Blu"", 10)', '# call our instance methods', 'print(blu.sing(""\'Happy\'""))', 'print(blu.dance())', '# parent class', 'class Bird:', '    def __init__(self):', '        print(""Bird is ready"")', '    def whoisThis(self):', '        print(""Bird"")', '    def swim(self):', '        print(""Swim faster"")', '# child class', 'class Penguin(Bird):', '    def __init__(self):', '        super().__init__()', '    def whoisThis(self):', '        print(""Penguin"")', '    def run(self):', '        print(""Run faster"")', 'peggy = Penguin()', 'peggy.whoisThis()', 'peggy.swim()', 'peggy.run()', 'class Computer:', '    def __init__(self):', '        self.__maxprice = 900', '    def sell(self):', 'c = Computer()', 'c.sell()', '# change the price', 'c.__maxprice = 1000', 'c.sell()', '# using setter function', 'c.setMaxPrice(1000)', 'c.sell()', 'c.__maxprice = 1000', 'class Parrot:', '    def fly(self):', '    def swim(self):', 'class Penguin:', '    def fly(self):', '    def swim(self):', '# common interface', 'def flying_test(bird):', '    bird.fly()', '#instantiate objects', 'blu = Parrot()', 'peggy = Penguin()', '# passing the object', 'flying_test(blu)', 'flying_test(peggy)']","['    def __init__(self, name, age):', 'print(""Blu is a {}"".format(blu.__class__.species))', 'print(""Woo is also a {}"".format(woo.__class__.species))', '# access the instance attributes', 'print(""{} is {} years old"".format( blu.name, blu.age))', 'print(""{} is {} years old"".format( woo.name, woo.age))', '    def __init__(self, name, age):', '        return ""{} sings {}"".format(self.name, song)', '        return ""{} is now dancing"".format(self.name)', '        print(""Penguin is ready"")', '        print(""Selling Price: {}"".format(self.__maxprice))', '    def setMaxPrice(self, price):', '        print(""Parrot can\'t swim"")', '        print(""Penguin can\'t fly"")', '        print(""Penguin can swim"")']","['class Parrot:', '    pass', 'obj = Parrot()', 'Blu is a bird', 'Woo is also a bird', 'Blu is 10 years old', 'Woo is 15 years old', ""Blu sings 'Happy'"", 'Blu is now dancing', 'Bird is ready', 'Penguin is ready', 'Penguin', 'Swim faster', 'Run faster', 'Selling Price: 900', 'Selling Price: 900', 'Selling Price: 1000', 'Parrot can fly', ""Penguin can't fly""]",[],"['attributes|||behavior|||name, age, color as attributes|||singing, dancing as behavior|||Object-Oriented Programming makes the program easy to understand as well as efficient.|||Since the class is sharable, the code can be reused.|||Data is safe and secure with data abstraction.|||Polymorphism allows the same interface for different objects, so programmers can write efficient code.|||']"
29,['Python Objects and Classes'],"[""In this tutorial, you will learn about the core functionality of Python objects and classes. You'll learn what a class is, how to create it and use it in your program.""]",['Video: Python Classes and Objects'],['https://www.youtube.com/embed/pnWINBJ3-yA?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Python Objects and Classes', 'Defining a Class in Python', 'Creating an Object in Python', 'Constructors in Python', 'Deleting Attributes and Objects']",[],['//cdn.programiz.com/sites/tutorial2program/files/objectReference.jpg'],"['Here is a simple class definition.', 'Output', 'Output', 'Output', 'We can even delete the object itself, using the del statement.']","['Like function definitions begin with the def keyword in Python, class definitions begin with a class keyword.', 'A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions.', 'We saw that the class object could be used to access different attributes.', 'This will create a new object instance named harry. We can access the attributes of objects using the object name prefix.', 'Attributes may be data or method. Methods of an object are corresponding functions of that class.', 'This means to say, since Person.greet is a function object (attribute of class), Person.greet will be a method object.', 'Now you must be familiar with class object, instance object, function object, method object and their differences.', 'Class functions that begin with double underscore __ are called special functions as they have special meaning.', 'This automatic destruction of unreferenced objects in Python is also called garbage collection.']","['Python is an object-oriented programming language. Unlike procedure-oriented programming, where the main emphasis is on functions, object-oriented programming stresses on objects.', 'An object is simply a collection of data (variables) and methods (functions) that act on those data. Similarly, a class is a blueprint for that object.', 'We can think of a class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object.', ""As many houses can be made from a house's blueprint, we can create many objects from a class. An object is also called an instance of a class and the process of creating this object is called instantiation."", 'The first string inside the class is called docstring and has a brief description of the class. Although not mandatory, this is highly recommended.', 'There are also special attributes in it that begins with double underscores __. For example, __doc__ gives us the docstring of that class.', 'As soon as we define a class, a new class object is created with the same name. This class object allows us to access the different attributes as well as to instantiate new objects of that class.', 'It can also be used to create new object instances (instantiation) of that class. The procedure to create an object is similar to a function call.', 'You may have noticed the self parameter in function definition inside the class but we called the method simply as harry.greet() without any arguments. It still worked.', 'This is because, whenever an object calls its method, the object itself is passed as the first argument. So, harry.greet() translates into Person.greet(harry).', ""In general, calling a method with a list of n arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method's object before the first argument."", 'For these reasons, the first argument of the function in class must be the object itself. This is conventionally called self. It can be named otherwise but we highly recommend to follow the convention.', 'Of one particular interest is the __init__() function. This special function gets called whenever a new object of that class is instantiated.', 'This type of function is also called constructors in Object Oriented Programming (OOP). We normally use it to initialize all the variables.', 'In the above example, we defined a new class to represent complex numbers. It has two functions, __init__() to initialize the variables (defaults to zero) and get_data() to display the number properly.', 'An interesting thing to note in the above step is that attributes of an object can be created on the fly. We created a new attribute attr for object num2 and read it as well. But this does not create that attribute for object num1.', 'Any attribute of an object can be deleted anytime, using the del statement. Try the following on the Python shell to see the output.', 'Actually, it is more complicated than that. When we do c1 = ComplexNumber(1,3), a new instance object is created in memory and the name c1 binds with it.', 'On the command del c1, this binding is removed and the name c1 is deleted from the corresponding namespace. The object however continues to exist in memory and if no other name is bound to it, it is later automatically destroyed.']","['class MyNewClass:', '    pass', 'class Person:', '    ""This is a person class""', '    age = 10', '    def greet(self):', ""        print('Hello')"", '# Output: 10', 'print(Person.age)', 'print(Person.greet)', 'print(Person.__doc__)', '>>> harry = Person()', 'class Person:', '    ""This is a person class""', '    age = 10', '    def greet(self):', ""        print('Hello')"", 'harry = Person()', 'print(Person.greet)', 'print(harry.greet)', '# Output: Hello', 'harry.greet()', 'class ComplexNumber:', '        self.real = r', '        self.imag = i', '    def get_data(self):', 'num1 = ComplexNumber(2, 3)', '# Call get_data() method', '# Output: 2+3j', 'num1.get_data()', 'num2 = ComplexNumber(5)', 'num2.attr = 10', '# Output: (5, 0, 10)', 'print(num1.attr)', '>>> num1 = ComplexNumber(2,3)', '>>> del num1.imag', '>>> num1.get_data()', '>>> del ComplexNumber.get_data', '>>> num1.get_data()', '>>> c1 = ComplexNumber(1,3)', '>>> del c1']","[""    '''This is a docstring. I have created a new class'''"", '# Output: <function Person.greet>', '# Output: ""This is a person class""', '# create a new object of Person class', '# Output: <function Person.greet>', '# Output: <bound method Person.greet of <__main__.Person object>>', ""# Calling object's greet() method"", '    def __init__(self, r=0, i=0):', ""        print(f'{self.real}+{self.imag}j')"", '# Create a new ComplexNumber object', '# Create another ComplexNumber object', ""# and create a new attribute 'attr'"", 'print((num2.real, num2.imag, num2.attr))', ""# but c1 object doesn't have attribute 'attr'"", ""# AttributeError: 'ComplexNumber' object has no attribute 'attr'"", 'Traceback (most recent call last):', ""AttributeError: 'ComplexNumber' object has no attribute 'imag'"", 'Traceback (most recent call last):', ""AttributeError: 'ComplexNumber' object has no attribute 'get_data'"", 'Traceback (most recent call last):', ""NameError: name 'c1' is not defined""]","['10', '<function Person.greet at 0x7fc78c6e8160>', 'This is a person class', '<function Person.greet at 0x7fd288e4e160>', '<bound method Person.greet of <__main__.Person object at 0x7fd288e9fa30>>', 'Hello', '2+3j', '(5, 0, 10)', 'Traceback (most recent call last):', '  File ""<string>"", line 27, in <module>', '    print(num1.attr)', ""AttributeError: 'ComplexNumber' object has no attribute 'attr'""]",[],[]
30,['Python Inheritance'],"['Inheritance enables us to define a class that takes all the functionality from a parent class and allows us to add more. In this tutorial, you will learn to use inheritance in Python.']",['Video: Python Inheritance'],['https://www.youtube.com/embed/C8qE3mKiBrQ?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Inheritance in Python', 'Method Overriding in Python']","['Python Inheritance Syntax', 'Example of Inheritance in Python']",[],"['Inheritance is a powerful feature in object oriented programming.', 'To demonstrate the use of inheritance, let us take an example.', 'Similarly, issubclass() is used to check for class inheritance.']","['A polygon is a closed figure with 3 or more sides. Say, we have a class called Polygon defined as follows.', 'This class has data attributes to store the number of sides n and magnitude of each side as a list called sides.', 'The inputSides() method takes in the magnitude of each side and dispSides() displays these side lengths.', ""We don't need to define them again (code reusability). Triangle can be defined as follows."", 'However, class Triangle has a new method findArea() to find and print the area of the triangle. Here is a sample run.', 'Two built-in functions isinstance() and issubclass() are used to check inheritances.']","['It refers to defining a new class with little or no modification to an existing class. The new class is called derived (or child) class and the one from which it inherits is called the base (or parent) class.', 'Derived class inherits features from the base class where new features can be added to it. This results in re-usability of code.', 'A triangle is a polygon with 3 sides. So, we can create a class called Triangle which inherits from Polygon. This makes all the attributes of Polygon class available to the Triangle class.', 'We can see that even though we did not define methods like inputSides() or dispSides() for class Triangle separately, we were able to use them.', 'If an attribute is not found in the class itself, the search continues to the base class. This repeats recursively, if the base class is itself derived from other classes.', 'In the above example, notice that __init__() method was defined in both classes, Triangle as well Polygon. When this happens, the method in the derived class overrides that in the base class. This is to say, __init__() in Triangle gets preference over the __init__ in Polygon.', 'Generally when overriding a base method, we tend to extend the definition rather than simply replace it. The same is being done by calling the method in base class from the one in derived class (calling Polygon.__init__() from __init__() in Triangle).', 'A better option would be to use the built-in function super(). So, super().__init__(3) is equivalent to Polygon.__init__(self,3) and is preferred. To learn more about the super() function in Python, visit Python super() function.', 'The function isinstance() returns True if the object is an instance of the class or other classes derived from it. Each and every class in Python inherits from the base class object.']","['class Polygon:', '        self.n = no_of_sides', '    def inputSides(self):', '    def dispSides(self):', 'class Triangle(Polygon):', '    def __init__(self):', '    def findArea(self):', '        a, b, c = self.sides', '        s = (a + b + c) / 2', '>>> t = Triangle()', '>>> t.inputSides()', 'Enter side 1 : 3', 'Enter side 2 : 5', 'Enter side 3 : 4', '>>> t.dispSides()', 'Side 1 is 3.0', 'Side 2 is 5.0', 'Side 3 is 4.0', '>>> t.findArea()', '>>> isinstance(t,Triangle)', '>>> isinstance(t,Polygon)', '>>> isinstance(t,int)', '>>> isinstance(t,object)', '>>> issubclass(bool,int)']","['    def __init__(self, no_of_sides):', '        self.sides = [0 for i in range(no_of_sides)]', '        self.sides = [float(input(""Enter side ""+str(i+1)+"" : "")) for i in range(self.n)]', '            print(""Side"",i+1,""is"",self.sides[i])', '        Polygon.__init__(self,3)', '        # calculate the semi-perimeter', '        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5', ""        print('The area of the triangle is %0.2f' %area)"", 'The area of the triangle is 6.00', '>>> issubclass(Polygon,Triangle)', '>>> issubclass(Triangle,Polygon)']","['class BaseClass:', '  Body of base class', 'class DerivedClass(BaseClass):', '  Body of derived class']",[],[]
31,['Python Multiple Inheritance'],"[""In this tutorial, you'll learn about multiple inheritance in Python and how to use it in your program. You'll also learn about multi-level inheritance and the method resolution order.""]",[],[],"['Python Multiple Inheritance', 'Python Multilevel Inheritance', 'Method Resolution Order in Python']",['Example'],"['//cdn.programiz.com/sites/tutorial2program/files/MultipleInheritance.jpg', '//cdn.programiz.com/sites/tutorial2program/files/MultilevelInheritance.jpg', '//cdn.programiz.com/sites/tutorial2program/files/MRO.jpg']","['An example with corresponding visualization is given below.', 'Output']","['A class can be derived from more than one base class in Python, similar to C++. This is called multiple inheritance.', 'Here, the MultiDerived class is derived from Base1 and Base2 classes.', 'The MultiDerived class inherits from both Base1 and Base2 classes.', 'We can also inherit from a derived class. This is called multilevel inheritance. It can be of any depth in Python.', 'In multilevel inheritance, features of the base class and the derived class are inherited into the new derived class.', 'Here, the Derived1 class is derived from the Base class, and the Derived2 class is derived from the Derived1 class.', 'Every class in Python is derived from the object class. It is the most base type in Python.', 'Here is a little more complex multiple inheritance example and its visualization along with the MRO.', 'To know the actual algorithm on how MRO is calculated, visit Discussion on MRO.']","['In multiple inheritance, the features of all the base classes are inherited into the derived class. The syntax for multiple inheritance is similar to single inheritance.', 'So technically, all other classes, either built-in or user-defined, are derived classes and all objects are instances of the object class.', 'In the multiple inheritance scenario, any specified attribute is searched first in the current class. If not found, the search continues into parent classes in depth-first, left-right fashion without searching the same class twice.', 'So, in the above example of MultiDerived class the search order is [MultiDerived, Base1, Base2, object]. This order is also called linearization of MultiDerived class and the set of rules used to find this order is called Method Resolution Order (MRO).', 'MRO must prevent local precedence ordering and also provide monotonicity. It ensures that a class always appears before its parents. In case of multiple parents, the order is the same as tuples of base classes.', 'MRO of a class can be viewed as the __mro__ attribute or the mro() method. The former returns a tuple while the latter returns a list.']","['class Base1:', '    pass', 'class Base2:', '    pass', '    pass', 'class Base:', '    pass', 'class Derived1(Base):', '    pass', 'class Derived2(Derived1):', '    pass', '# Output: True', 'print(issubclass(list,object))', '# Output: True', 'print(isinstance(5.5,object))', '# Output: True', '>>> MultiDerived.__mro__', "" <class '__main__.Base1'>,"", "" <class '__main__.Base2'>,"", "" <class 'object'>)"", '>>> MultiDerived.mro()', "" <class '__main__.Base1'>,"", "" <class '__main__.Base2'>,"", "" <class 'object'>]"", '# Demonstration of MRO', 'class X:', '    pass', 'class Y:', '    pass', 'class Z:', '    pass', 'class A(X, Y):', '    pass', 'class B(Y, Z):', '    pass', 'class M(B, A, Z):', '    pass', '# Output:', ""#  <class 'object'>]"", 'print(M.mro())']","['class MultiDerived(Base1, Base2):', 'print(isinstance(""Hello"",object))', ""(<class '__main__.MultiDerived'>,"", ""[<class '__main__.MultiDerived'>,"", ""# [<class '__main__.M'>, <class '__main__.B'>,"", ""#  <class '__main__.A'>, <class '__main__.X'>,"", ""#  <class '__main__.Y'>, <class '__main__.Z'>,""]","[""[<class '__main__.M'>, <class '__main__.B'>, <class '__main__.A'>, <class '__main__.X'>, <class '__main__.Y'>, <class '__main__.Z'>, <class 'object'>]""]",[],[]
32,['Python Operator Overloading'],"['You can change the meaning of an operator in Python depending upon the operands used. In this tutorial, you will learn how to use operator overloading in Python Object Oriented Programming.']",[],[],"['Python Operator Overloading', 'Python Special Functions', 'Overloading the + Operator', 'Overloading Comparison Operators']",[],[],"['Output', ""Now let's try the print() function again."", 'Output', ""Now let's go back to operator overloading."", ""Now let's try the addition operation again:"", 'Output', 'Output']","[""Here, we can see that a TypeError was raised, since Python didn't know how to add two Point objects together."", 'Class functions that begin with double underscore __ are called special functions in Python.', 'There are numerous other special functions in Python. Visit Python Special Functions to learn more about them.', 'Using special functions, we can make our class compatible with built-in functions.', ""That's better. Turns out, that this same method is invoked when we use the built-in function str() or format()."", 'So, when you use str(p1) or format(p1), Python internally calls the p1.__str__() method. Hence the name, special functions.', 'Similarly, we can overload other operators as well. The special function that we need to implement is tabulated below.', 'Python does not limit operator overloading to arithmetic operators only. We can overload comparison operators as well.', 'Suppose we wanted to implement the less than symbol < symbol in our Point class.', 'Similarly, the special functions that we need to implement, to overload other comparison operators are tabulated below.']","['Python operators work for built-in classes. But the same operator behaves differently with different types. For example, the + operator will perform arithmetic addition on two numbers, merge two lists, or concatenate two strings.', 'This feature in Python that allows the same operator to have different meaning according to the context is called operator overloading.', 'So what happens when we use them with objects of a user-defined class? Let us consider the following class, which tries to simulate a point in 2-D coordinate system.', ""However, we can achieve this task in Python through operator overloading. But first, let's get a notion about special functions."", 'These functions are not the typical functions that we define for a class. The __init__() function we defined above is one of them. It gets called every time we create a new object of that class.', ""Suppose we want the print() function to print the coordinates of the Point object instead of what we got. We can define a __str__() method in our class that controls how the object gets printed. Let's look at how we can achieve this:"", 'To overload the + operator, we will need to implement __add__() function in the class. With great power comes great responsibility. We can do whatever we like, inside this function. But it is more sensible to return a Point object of the coordinate sum.', 'What actually happens is that, when you use p1 + p2, Python calls p1.__add__(p2) which in turn is Point.__add__(p1,p2). After this, the addition operation is carried out the way we specified.', 'Let us compare the magnitude of these points from the origin and return the result for this purpose. It can be implemented as follows.']","['class Point:', '        self.x = x', '        self.y = y', 'p1 = Point(1, 2)', 'p2 = Point(2, 3)', 'print(p1+p2)', '>>> p1 = Point(2,3)', '>>> print(p1)', 'class Point:', '        self.x = x', '        self.y = y', '    def __str__(self):', 'class Point:', '        self.x = x', '        self.y = y', '    def __str__(self):', 'p1 = Point(2, 3)', 'print(p1)', '>>> str(p1)', '>>> format(p1)', 'class Point:', '        self.x = x', '        self.y = y', '    def __str__(self):', '    def __add__(self, other):', '        x = self.x + other.x', '        y = self.y + other.y', '        return Point(x, y)', 'class Point:', '        self.x = x', '        self.y = y', '    def __str__(self):', '    def __add__(self, other):', '        x = self.x + other.x', '        y = self.y + other.y', '        return Point(x, y)', 'p1 = Point(1, 2)', 'p2 = Point(2, 3)', 'print(p1+p2)', 'class Point:', '        self.x = x', '        self.y = y', '    def __str__(self):', '    def __lt__(self, other):', 'p1 = Point(1,1)', 'p2 = Point(-2,-3)', 'p3 = Point(1,-1)', '# use less than', 'print(p1<p2)', 'print(p2<p3)', 'print(p1<p3)']","['    def __init__(self, x=0, y=0):', '<__main__.Point object at 0x00000000031F8CC0>', '    def __init__(self, x = 0, y = 0):', '        return ""({0},{1})"".format(self.x,self.y)', '    def __init__(self, x=0, y=0):', '        return ""({0}, {1})"".format(self.x, self.y)', '    def __init__(self, x=0, y=0):', '        return ""({0},{1})"".format(self.x, self.y)', '    def __init__(self, x=0, y=0):', '        return ""({0},{1})"".format(self.x, self.y)', '# overloading the less than operator', '    def __init__(self, x=0, y=0):', '        return ""({0},{1})"".format(self.x, self.y)', '        self_mag = (self.x ** 2) + (self.y ** 2)', '        other_mag = (other.x ** 2) + (other.y ** 2)', '        return self_mag < other_mag']","['Traceback (most recent call last):', '  File ""<string>"", line 9, in <module>', '    print(p1+p2)', ""TypeError: unsupported operand type(s) for +: 'Point' and 'Point'"", '(2, 3)', '(3,5)', 'True', 'False', 'False']","['perator|||Expression|||Internally&&&ddition|||p1 + p2|||p1.__add__(p2)&&&ubtraction|||p1 - p2|||p1.__sub__(p2)&&&ultiplication|||p1 * p2|||p1.__mul__(p2)&&&ower|||p1 ** p2|||p1.__pow__(p2)&&&ivision|||p1 / p2|||p1.__truediv__(p2)&&&loor Division|||p1 // p2|||p1.__floordiv__(p2)&&&emainder (modulo)|||p1 % p2|||p1.__mod__(p2)&&&itwise Left Shift|||p1 << p2|||p1.__lshift__(p2)&&&itwise Right Shift|||p1 >> p2|||p1.__rshift__(p2)&&&itwise AND|||p1 & p2|||p1.__and__(p2)&&&itwise OR|||p1 | p2|||p1.__or__(p2)&&&itwise XOR|||p1 ^ p2|||p1.__xor__(p2)&&&itwise NOT|||~p1|||p1.__invert__()', 'perator|||Expression|||Internally&&&ess than|||p1 < p2|||p1.__lt__(p2)&&&ess than or equal to|||p1 <= p2|||p1.__le__(p2)&&&qual to|||p1 == p2|||p1.__eq__(p2)&&&ot equal to|||p1 != p2|||p1.__ne__(p2)&&&reater than|||p1 > p2|||p1.__gt__(p2)&&&reater than or equal to|||p1 >= p2|||p1.__ge__(p2)']",[]
33,['Python Iterators'],"['Iterators are objects that can be iterated upon. In this tutorial, you will learn how iterator works and how you can build your own iterator using __iter__ and __next__ methods.']",['Video: Python Iterators'],['https://www.youtube.com/embed/C_rhipZonok?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Iterators in Python', 'Iterating Through an Iterator', 'Working of for loop for Iterators', 'Building Custom Iterators', 'Python Infinite Iterators']",[],[],"['Output', 'Is actually implemented as.', 'Ironically, this for loop is actually an infinite while loop.', 'Output', 'We can also use a for loop to iterate over our iterator class.', 'Here is a simple example to demonstrate infinite iterators.', 'A sample run would be as follows.', 'And so on...']","['Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.', 'The iter() function (which in turn calls the __iter__() method) returns an iterator from them.', 'As we see in the above example, the for loop was able to iterate automatically through the list.', 'So internally, the for loop creates an iterator object, iter_obj by calling iter() on the iterable.', 'Building an iterator from scratch is easy in Python. We just have to implement the __iter__() and the __next__() methods.', 'The __iter__() method returns the iterator object itself. If required, some initialization can be performed.', 'If you do not have any idea about object-oriented programming, visit\xa0Python Object-Oriented Programming.', 'We can also build our own infinite iterators. The following iterator will, theoretically, return all the odd numbers.', 'Be careful to include a terminating condition, when iterating over these types of infinite iterators.', ""There's an easier way to create iterators in Python. To learn more visit: Python generators using yield.""]","['Iterators are everywhere in Python. They are elegantly implemented within for loops, comprehensions, generators etc. but are hidden in plain sight.', 'Technically speaking, a Python iterator object must implement two special methods, __iter__() and __next__(), collectively called the iterator protocol.', 'An object is called iterable if we can get an iterator from it. Most built-in containers in Python like: list, tuple, string etc. are iterables.', 'We use the next() function to manually iterate through all the items of an iterator. When we reach the end and there is no more data to be returned, it will raise the StopIteration Exception. Following is an example.', 'A more elegant way of automatically iterating is by using the for loop. Using this, we can iterate over any object that can return an iterator, for example list, string, file etc.', ""In fact the for loop can iterate over any iterable. Let's take a closer look at how the for loop is actually implemented in Python."", 'Inside the loop, it calls next() to get the next element and executes the body of the for loop with this value. After all the items exhaust, StopIteration is raised which is internally caught and the loop ends. Note that any other kind of exception will pass through.', 'The __next__() method must return the next item in the sequence. On reaching the end, and in subsequent calls, it must raise StopIteration.', 'Here, we show an example that will give us the next power of 2 in each iteration. Power exponent starts from zero up to a user set number.', 'It is not necessary that the item in an iterator object has to be exhausted. There can be infinite iterators (which never ends). We must be careful when handling such iterators.', 'The built-in function iter() can be called with two arguments where the first argument must be a callable object (function) and second is the sentinel. The iterator calls this function until the returned value is equal to the sentinel.', 'We can see that the int() function always returns 0. So passing it as iter(int,1) will return an iterator that calls int() until the returned value equals 1. This never happens and we get an infinite iterator.', 'The advantage of using iterators is that they save resources. Like shown above, we could get all the odd numbers without storing the entire number system in memory. We can have infinite items (theoretically) in finite memory.']","['# define a list', 'my_list = [4, 7, 0, 3]', '# get an iterator using iter()', 'my_iter = iter(my_list)', '# Output: 4', 'print(next(my_iter))', '# Output: 7', 'print(next(my_iter))', '# Output: 0', 'print(my_iter.__next__())', '# Output: 3', 'print(my_iter.__next__())', 'next(my_iter)', '>>> for element in my_list:', '...     print(element)', '...     ', 'for element in iterable:', 'iter_obj = iter(iterable)', '# infinite loop', 'while True:', '    try:', '        # get the next item', '    except StopIteration:', '        break', 'class PowTwo:', '    of powers of two""""""', '    def __init__(self, max=0):', '        self.max = max', '    def __iter__(self):', '        self.n = 0', '        return self', '    def __next__(self):', '        if self.n <= self.max:', '            self.n += 1', '            return result', '        else:', '# create an object', 'numbers = PowTwo(3)', 'i = iter(numbers)', 'print(next(i))', 'print(next(i))', 'print(next(i))', 'print(next(i))', 'print(next(i))', '>>> for i in PowTwo(5):', '...     print(i)', '...     ', '>>> int()', '>>> inf = iter(int,1)', '>>> next(inf)', '>>> next(inf)', 'class InfIter:', '        odd numbers""""""', '    def __iter__(self):', '        self.num = 1', '        return self', '    def __next__(self):', '        num = self.num', '        self.num += 2', '        return num', '>>> a = iter(InfIter())', '>>> next(a)', '>>> next(a)', '>>> next(a)', '>>> next(a)']","['# iterate through it using next()', '# next(obj) is same as obj.__next__()', '# This will raise error, no items left', '# create an iterator object from that iterable', '        element = next(iter_obj)', '        # do something with element', '        # if StopIteration is raised, break from loop', '    """"""Class to implement an iterator', '            result = 2 ** self.n', '# create an iterable from the object', '# Using next to get to the next iterator element', '    """"""Infinite iterator to return all']","['4', '7', '0', '3', 'Traceback (most recent call last):', '  File ""<string>"", line 24, in <module>', '    next(my_iter)', 'StopIteration', '1', '2', '4', '8', 'Traceback (most recent call last):', '  File ""/home/bsoyuj/Desktop/Untitled-1.py"", line 32, in <module>', '    print(next(i))', '  File ""<string>"", line 18, in __next__', '    raise StopIteration', 'StopIteration']",[],[]
34,['Python Generators'],"[""In this tutorial, you'll learn how to create iterations easily using Python generators, how it is different from iterators and normal functions, and why you should use it.""]",['Video: Python Generators'],['https://www.youtube.com/embed/ebj4qZ8SyMU?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Generators in Python', 'Create Generators in Python', 'Differences between Generator function and Normal function', 'Python Generators with a Loop', 'Python Generator Expression', 'Use of Python Generators']","['1. Easy to Implement', '2. Memory Efficient', '3. Represent Infinite Stream', '4. Pipelining Generators']",[],"['Here is how a generator function differs from a normal function.', 'When you run the program, the output will be:', ""Let's take an example of a generator that reverses a string."", 'Output', 'Output', 'Here is how we can start getting items from the generator:', 'When we run the above program, we get the following output:', 'Output']","['This is both lengthy and counterintuitive. Generator comes to the rescue in such situations.', 'Simply speaking, a generator is a function that returns an object (iterator) which we can iterate over (one value at a time).', 'An interactive run in the interpreter is given below. Run these in the Python shell to see the output.', 'One interesting thing to note in the above example is that the value of variable n is remembered between each call.', 'To restart the process we need to create another generator object using something like a = my_gen().', 'One final thing to note is that we can use generators with for loops directly.', 'The above example is of less use and we studied it just to get an idea of what was happening in the background.', 'Normally, generator functions are implemented with a loop having a suitable terminating condition.', 'In this example, we have used the range() function to get the index in reverse order using the for loop.', 'Note: This generator function not only works with strings, but also with other kinds of iterables like list, tuple, etc.', 'Simple generators can be easily created on the fly using generator expressions. It makes building generators easy.', 'Similar to the lambda functions which create anonymous functions, generator expressions create anonymous generator functions.', 'Generator expressions can be used as function arguments. When used in such a way, the round parentheses can be dropped.', 'There are several reasons that make generators a powerful implementation.', ""The above program was lengthy and confusing. Now, let's do the same using a generator function."", 'Since generators keep track of details automatically, the implementation was concise and much cleaner.', 'Generator implementation of such sequences is memory friendly and is preferred since it only produces one item at a time.', 'The following generator function can generate all the even numbers (at least in theory).', 'Multiple generators can be used to pipeline a series of operations. This is best illustrated using an example.', 'This pipelining is efficient and easy to read (and yes, a lot cooler!).']","['There is a lot of work in building an iterator in Python. We have to implement a class with __iter__() and __next__() method, keep track of internal states, and raise StopIteration when there are no values to be returned.', 'Python generators are a simple way of creating iterators. All the work we mentioned above are automatically handled by generators in Python.', 'It is fairly simple to create a generator in Python. It is as easy as defining a normal function, but with a yield statement instead of a return statement.', 'If a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator function. Both yield and return will return some value from a function.', 'The difference is that while a return statement terminates a function entirely, yield statement pauses the function saving all its states and later continues from there on successive calls.', 'Here is an example to illustrate all of the points stated above. We have a generator function named my_gen() with several yield statements.', 'Unlike normal functions, the local variables are not destroyed when the function yields. Furthermore, the generator object can be iterated only once.', 'This is because a for loop takes an iterator and iterates over it using next() function. It automatically ends when StopIteration is raised. Check here to know how a for loop is actually implemented in Python.', 'The syntax for generator expression is similar to that of a list comprehension in Python. But the square brackets are replaced with round parentheses.', 'The major difference between a list comprehension and a generator expression is that a list comprehension produces the entire list while the generator expression produces one item at a time.', 'They have lazy execution ( producing items only when asked for ). For this reason, a generator expression is much more memory efficient than an equivalent list comprehension.', 'We can see above that the generator expression did not produce the required result immediately. Instead, it returned a generator object, which produces items only on demand.', 'Generators can be implemented in a clear and concise way as compared to their iterator class counterpart. Following is an example to implement a sequence of power of 2 using an iterator class.', 'A normal function to return a sequence will create the entire sequence in memory before returning the result. This is an overkill, if the number of items in the sequence is very large.', 'Generators are excellent mediums to represent an infinite stream of data. Infinite streams cannot be stored in memory, and since generators produce only one item at a time, they can represent an infinite stream of data.', 'Suppose we have a generator that produces the numbers in the Fibonacci series. And we have another generator for squaring numbers.', 'If we want to find out the sum of squares of numbers in the Fibonacci series, we can do it in the following way by pipelining the output of generator functions together.']","['# A simple generator function', 'def my_gen():', '    n = 1', '    yield n', '    n += 1', '    yield n', '    n += 1', '    yield n', '>>> a = my_gen()', '>>> next(a)', 'This is printed first', '>>> next(a)', 'This is printed second', '>>> next(a)', 'This is printed at last', '>>> next(a)', 'StopIteration', '>>> next(a)', 'StopIteration', '# A simple generator function', 'def my_gen():', '    n = 1', '    yield n', '    n += 1', '    yield n', '    n += 1', '    yield n', '# Using for loop', 'for item in my_gen():', '    print(item)', 'def rev_str(my_str):', '    length = len(my_str)', '        yield my_str[i]', 'for char in rev_str(""hello""):', '    print(char)', '# Initialize the list', 'my_list = [1, 3, 6, 10]', 'print(list_)', 'print(generator)', '# Initialize the list', 'my_list = [1, 3, 6, 10]', 'a = (x**2 for x in my_list)', 'print(next(a))', 'print(next(a))', 'print(next(a))', 'print(next(a))', '>>> sum(x**2 for x in my_list)', '>>> max(x**2 for x in my_list)', 'class PowTwo:', '    def __init__(self, max=0):', '        self.n = 0', '        self.max = max', '    def __iter__(self):', '        return self', '    def __next__(self):', '        if self.n > self.max:', '        result = 2 ** self.n', '        self.n += 1', '        return result', 'def PowTwoGen(max=0):', '    n = 0', '    while n < max:', '        yield 2 ** n', '        n += 1', 'def all_even():', '    n = 0', '    while True:', '        yield n', '        n += 2', 'def fibonacci_numbers(nums):', '    x, y = 0, 1', '    for _ in range(nums):', '        x, y = y, x+y', '        yield x', 'def square(nums):', '    for num in nums:', '        yield num**2']","[""    print('This is printed first')"", '    # Generator function contains yield statements', ""    print('This is printed second')"", ""    print('This is printed at last')"", '>>> # It returns an object but does not start execution immediately.', '>>> # We can iterate through the items using next().', '>>> # Once the function yields, the function is paused and the control is transferred to the caller.', '>>> # Local variables and theirs states are remembered between successive calls.', '>>> # Finally, when the function terminates, StopIteration is raised automatically on further calls.', 'Traceback (most recent call last):', 'Traceback (most recent call last):', ""    print('This is printed first')"", '    # Generator function contains yield statements', ""    print('This is printed second')"", ""    print('This is printed at last')"", '    for i in range(length - 1, -1, -1):', '# For loop to reverse the string', '# square each term using list comprehension', '# same thing can be done using a generator expression', '# generator expressions are surrounded by parenthesis ()', 'generator = (x**2 for x in my_list)', 'print(sum(square(fibonacci_numbers(10))))']","['This is printed first', '1', 'This is printed second', '2', 'This is printed at last', '3', 'o', 'l', 'l', 'e', 'h', '[1, 9, 36, 100]', '<generator object <genexpr> at 0x7f5d4eb4bf50>', '1', '9', '36', '100', 'Traceback (most recent call last):', '  File ""<string>"", line 15, in <module>', 'StopIteration', '4895']",[],"['Generator function contains one or more yield statements.|||When called, it returns an object (iterator) but does not start execution immediately.|||Methods like __iter__() and __next__() are implemented automatically. So we can iterate through the items using next().|||Once the function yields, the function is paused and the control is transferred to the caller.|||Local variables and their states are remembered between successive calls.|||Finally, when the function terminates, StopIteration is raised automatically on further calls.|||']"
35,['Python Closures'],"[""In this tutorial, you'll learn about Python closure, how to define a closure, and the reasons you should use it.""]",[],[],"['Nonlocal variable in a nested function', 'Defining a Closure Function', 'When do we have closures?', 'When to use closures?']",[],[],"['Output', 'Output', ""That's unusual."", 'Try running the following in the Python shell to see the output.', 'So what are closures good for?', 'Output', 'Python Decorators make an extensive use of closures as well.']","['Before getting into what a closure is, we have to first understand what a nested function and nonlocal variable is.', 'Following is an example of a nested function accessing a non-local variable.', 'We can see that the nested printer() function was able to access the non-local msg variable of the enclosing function.', 'This technique by which some data (""Hello in this case) gets attached to the code is called closure in Python.', 'Here, the returned function still works even when the original function was deleted.', 'As seen from the above example, we have a closure in Python when a nested function references a value in its enclosing scope.', 'The criteria that must be met to create closure in Python are summarized in the following points.', 'On a concluding note, it is good to point out that the values that get enclosed in the closure function can be found out.', 'The cell object has the attribute cell_contents which stores the closed value.']","['A function defined inside another function is called a nested function. Nested functions can access variables of the enclosing scope.', 'In Python, these non-local variables are read-only by default and we must declare them explicitly as non-local (using nonlocal keyword) in order to modify them.', 'In the example above, what would happen if the last line of the function print_msg() returned the printer() function instead of calling it? This means the function was defined as follows:', 'The print_msg() function was called with the string ""Hello"" and the returned function was bound to the name another. On calling another(), the message was still remembered although we had already finished executing the print_msg() function.', 'This value in the enclosing scope is remembered even when the variable goes out of scope or the function itself is removed from the current namespace.', 'Closures can avoid the use of global values and provides some form of data hiding. It can also provide an object oriented solution to the problem.', ""When there are few methods (one method in most cases) to be implemented in a class, closures can provide an alternate and more elegant solution. But when the number of attributes and methods get larger, it's better to implement a class."", 'Here is a simple example where a closure might be more preferable than defining a class and making objects. But the preference is all yours.', 'All function objects have a __closure__ attribute that returns a tuple of cell objects if it is a closure function. Referring to the example above, we know times3 and times5 are closure functions.']","['def print_msg(msg):', '    def printer():', '        print(msg)', '    printer()', '# We execute the function', '# Output: Hello', 'print_msg(""Hello"")', 'def print_msg(msg):', '    def printer():', '        print(msg)', '# Output: Hello', 'another = print_msg(""Hello"")', 'another()', '>>> del print_msg', '>>> another()', '>>> print_msg(""Hello"")', 'def make_multiplier_of(n):', '    def multiplier(x):', '        return x * n', '    return multiplier', '# Multiplier of 3', 'times3 = make_multiplier_of(3)', '# Multiplier of 5', 'times5 = make_multiplier_of(5)', '# Output: 27', 'print(times3(9))', '# Output: 15', 'print(times5(3))', '# Output: 30', 'print(times5(times3(2)))', '>>> times3.__closure__']","['    # This is the outer enclosing function', '        # This is the nested function', '    # This is the outer enclosing function', '        # This is the nested function', '    return printer  # returns the nested function', ""# Now let's try calling this function."", 'Traceback (most recent call last):', ""NameError: name 'print_msg' is not defined"", '>>> make_multiplier_of.__closure__', '(<cell at 0x0000000002D155B8: int object at 0x000000001E39B6E0>,)', '>>> times3.__closure__[0].cell_contents', '>>> times5.__closure__[0].cell_contents']","['Hello', 'Hello', '27', '15', '30']",[],['We must have a nested function (function inside a function).|||The nested function must refer to a value defined in the enclosing function.|||The enclosing function must return the nested function.|||']
36,['Python Decorators'],"['A decorator takes in a function, adds some functionality and returns it. In this tutorial, you will learn how you can create a decorator and why you should use it.']",['Video: @Decorators in Python'],['https://www.youtube.com/embed/8hWIWyBfdQE?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Decorators in Python', 'Prerequisites for learning decorators', 'Getting back to Decorators', 'Decorating Functions with Parameters', 'Chaining Decorators in Python']",[],[],"['Here is an example.', 'Output', 'Now things start getting weirder.', 'Functions can be passed as arguments to another function.', 'We invoke the function as follows.', 'Furthermore, a function can return another function.', 'Output', 'Finally, we must know about Closures in Python.', 'Functions and methods are called callable as they can be called.', 'When you run the following codes in shell,', 'Generally, we decorate a function and reassign it as,', 'is equivalent to', 'This is just a syntactic sugar to implement decorators.', 'In this manner, we can decorate functions that take parameters.', 'Multiple decorators can be chained in Python.', 'Output', 'The above syntax of,', 'is equivalent to', 'The output would be:']","['Python has an interesting feature called decorators to add functionality to an existing code.', 'This is also called metaprogramming because a part of the program tries to modify another part of the program at compile time.', 'In order to understand about decorators, we must first know a few basic things in Python.', 'If you have used functions like map, filter and reduce in Python, then you already know about this.', 'Here, is_returned() is a nested function which is defined and returned each time we call is_called().', 'Basically, a decorator takes in a function, adds some functionality and returns it.', 'In the example shown above, make_pretty() is a decorator. In the assignment step:', 'The function ordinary() got decorated and the returned function was given the name pretty.', 'This is a common construct and for this reason, Python has a syntax to simplify this.', 'This function has two parameters, a and b. We know it will give an error if we pass in b as 0.', ""Now let's make a decorator to check for this case that will cause the error."", 'This new implementation will return None if the error condition arises.', 'The order in which we chain decorators matter. If we had reversed the order as,']","['We must be comfortable with the fact that everything in Python (Yes! Even classes), are objects. Names that we define are simply identifiers bound to these objects. Functions are no exceptions, they are objects too (with attributes). Various different names can be bound to the same function object.', 'When you run the code, both functions first and second give the same output. Here, the names first and second refer to the same function object.', 'Such functions that take other functions as arguments are also called higher order functions. Here is an example of such a function.', 'In fact, any object which implements the special __call__() method is termed callable. So, in the most basic sense, a decorator is a callable that returns a callable.', 'We can see that the decorator function added some new functionality to the original function. This is similar to packing a gift. The decorator acts as a wrapper. The nature of the object that got decorated (actual gift inside) does not alter. But now, it looks pretty (since it got decorated).', 'We can use the @ symbol along with the name of the decorator function and place it above the definition of the function to be decorated. For example,', 'The above decorator was simple and it only worked with functions that did not have any parameters. What if we had functions that took in parameters like:', 'A keen observer will notice that parameters of the nested inner() function inside the decorator is the same as the parameters of functions it decorates. Taking this into account, now we can make general decorators that work with any number of parameters.', 'In Python, this magic is done as function(*args, **kwargs). In this way, args will be the tuple of positional arguments and kwargs will be the dictionary of keyword arguments. An example of such a decorator will be:', 'This is to say, a function can be decorated multiple times with different (or same) decorators. We simply place the decorators above the desired function.']","['def first(msg):', '    print(msg)', 'first(""Hello"")', 'second = first', 'second(""Hello"")', 'def inc(x):', '    return x + 1', 'def dec(x):', '    return x - 1', 'def operate(func, x):', '    result = func(x)', '    return result', '>>> operate(inc,3)', '>>> operate(dec,3)', 'def is_called():', '    def is_returned():', '        print(""Hello"")', '    return is_returned', 'new = is_called()', '# Outputs ""Hello""', 'def make_pretty(func):', '    def inner():', '        func()', '    return inner', 'def ordinary():', '    print(""I am ordinary"")', '>>> ordinary()', 'I am ordinary', '>>> pretty()', 'I got decorated', 'I am ordinary', 'pretty = make_pretty(ordinary)', '@make_pretty', 'def ordinary():', '    print(""I am ordinary"")', 'def ordinary():', '    print(""I am ordinary"")', 'def divide(a, b):', '    return a/b', '>>> divide(2,5)', '>>> divide(2,0)', 'def smart_divide(func):', '    def inner(a, b):', '        if b == 0:', '            return', '        return func(a, b)', '    return inner', '@smart_divide', 'def divide(a, b):', '    print(a/b)', '>>> divide(2,5)', 'I am going to divide 2 and 5', '>>> divide(2,0)', 'I am going to divide 2 and 0', 'Whoops! cannot divide', 'def works_for_all(func):', '    return inner', 'def star(func):', '        print(""*"" * 30)', '        func(*args, **kwargs)', '        print(""*"" * 30)', '    return inner', 'def percent(func):', '        print(""%"" * 30)', '        func(*args, **kwargs)', '        print(""%"" * 30)', '    return inner', '@percent', 'def printer(msg):', '    print(msg)', 'printer(""Hello"")', '@percent', 'def printer(msg):', '    print(msg)', 'def printer(msg):', '    print(msg)', '@percent', 'def printer(msg):', '    print(msg)']","['        print(""I got decorated"")', "">>> # let's decorate this ordinary function"", '>>> pretty = make_pretty(ordinary)', 'ordinary = make_pretty(ordinary).', 'ordinary = make_pretty(ordinary)', 'Traceback (most recent call last):', 'ZeroDivisionError: division by zero', '        print(""I am going to divide"", a, ""and"", b)', '            print(""Whoops! cannot divide"")', '        print(""I can decorate any function"")', '        return func(*args, **kwargs)', 'printer = star(percent(printer))']","['Hello', 'Hello', 'Hello', '******************************', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', 'Hello', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '******************************', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '******************************', 'Hello', '******************************', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%']",[],[]
37,['Python @property decorator'],"['In this tutorial, you will learn about Python @property decorator; a pythonic way to use getters and setters in object-oriented programming.']",[],[],"['Class Without Getters and Setters', 'Using Getters and Setters', 'The property Class', 'The @property Decorator']",[],[],"['Output', ""Let's update our code to implement this value constraint."", ""Now, let's use this implementation:"", 'Output', ""Let's use this update code:"", 'Output', 'Can you guess why?', 'where,', 'can be broken down as:', 'These two pieces of codes are equivalent.', 'Output']","['We can make objects out of this class and manipulate the temperature attribute as we wish:', ""Therefore, man.temperature internally becomes man.__dict__['temperature']."", 'As we can see, the above method introduces two new get_temperature() and set_temperature() methods.', 'This refactoring can cause problems while dealing with hundreds of thousands of lines of codes.', 'All in all, our new update was not backwards compatible. This is where @property comes to rescue.', 'A pythonic way to deal with the above problem is to use the property class. Here is how we can update our code:', 'We added a print() function inside get_temperature() and set_temperature() to clearly observe that they are being executed.', 'We can even see above that set_temperature() was called even when we created an object.', 'In Python, property() is a built-in function that creates and returns a property object. The syntax of this function is:', 'Programmers familiar with Python Decorators can recognize that the above construct can be implemented as decorators.', 'We can even not define the names get_temperature and set_temperature as they are unnecessary and pollute the class namespace.', 'The above implementation is simple and efficient. It is the recommended way to use property.']","['Python programming provides us with a built-in @property decorator which makes usage of getter and setters much easier in Object-Oriented Programming.', 'Before going into details on what @property decorator is, let us first build an intuition on why it would be needed in the first place.', 'Let us assume that we decide to make a class that stores the temperature in degrees Celsius. It would also implement a method to convert the temperature into degrees Fahrenheit. One way of doing this is as follows:', 'The extra decimal places when converting into Fahrenheit is due to the floating point arithmetic error. To learn more, visit Python Floating Point Arithmetic Error.', ""Whenever we assign or retrieve any object attribute like temperature as shown above, Python searches it in the object's built-in __dict__ dictionary attribute."", 'Suppose we want to extend the usability of the Celsius class defined above. We know that the temperature of any object cannot reach below -273.15 degrees Celsius (Absolute Zero in Thermodynamics)', 'An obvious solution to the above restriction will be to hide the attribute temperature (make it private) and define new getter and setter methods to manipulate it. This can be done as follows:', 'Furthermore, temperature was replaced with _temperature. An underscore _ at the beginning is used to denote private variables in Python.', 'This update successfully implemented the new restriction. We are no longer allowed to set the temperature below -273.15 degrees Celsius.', ""Note: The private variables don't actually exist in Python. There are simply norms to be followed. The language itself doesn't apply any restrictions."", 'However, the bigger problem with the above update is that all the programs that implemented our previous class have to modify their code from obj.temperature to obj.get_temperature() and all expressions like obj.temperature = val to obj.set_temperature(val).', 'The last line of the code makes a property object temperature. Simply put, property attaches some code (get_temperature and set_temperature) to the member attribute accesses (temperature).', 'As we can see, any code that retrieves the value of temperature will automatically call get_temperature() instead of a dictionary (__dict__) look-up. Similarly, any code that assigns a value to temperature will automatically call set_temperature().', 'The reason is that when an object is created, the __init__() method gets called. This method has the line self.temperature = temperature. This expression automatically calls set_temperature().', 'Similarly, any access like c.temperature automatically calls get_temperature(). This is what property does. Here are a few more examples.', 'By using property, we can see that no modification is required in the implementation of the value constraint. Thus, our implementation is backward compatible.', 'Note: The actual temperature value is stored in the private _temperature variable. The temperature attribute is a property object which provides an interface to this private variable.', 'A property object has three methods, getter(), setter(), and deleter() to specify fget, fset and fdel at a later point. This means, the line:', ""For this, we reuse the temperature name while defining our getter and setter functions. Let's look at how to implement this as a decorator:""]","['class Celsius:', '    def to_fahrenheit(self):', 'class Celsius:', '    def to_fahrenheit(self):', '# Create a new object', 'human = Celsius()', '# Set the temperature', 'human.temperature = 37', 'print(human.temperature)', '# Get the to_fahrenheit method', 'print(human.to_fahrenheit())', '>>> human.__dict__', ""{'temperature': 37}"", 'class Celsius:', '    def to_fahrenheit(self):', '    # getter method', '    def get_temperature(self):', '    # setter method', '        if value < -273.15:', 'class Celsius:', '    def to_fahrenheit(self):', '    # getter method', '    def get_temperature(self):', '    # setter method', '        if value < -273.15:', 'human = Celsius(37)', 'print(human.get_temperature())', 'print(human.to_fahrenheit())', 'human.set_temperature(-300)', '# Get the to_fahreheit method', 'print(human.to_fahrenheit())', '>>> human._temperature = -300', '>>> human.get_temperature()', '# using property class', 'class Celsius:', '    def to_fahrenheit(self):', '    # getter', '    def get_temperature(self):', '    # setter', '        if value < -273.15:', '# using property class', 'class Celsius:', '    def to_fahrenheit(self):', '    # getter', '    def get_temperature(self):', '    # setter', '        if value < -273.15:', 'human = Celsius(37)', 'print(human.temperature)', 'print(human.to_fahrenheit())', 'human.temperature = -300', '>>> human = Celsius(37)', 'Setting value...', '>>> human.temperature', 'Getting value', '>>> human.temperature = 37', 'Setting value', '>>> c.to_fahrenheit()', 'Getting value', '98.60000000000001', '>>> property()', '# make empty property', 'temperature = property()', '# assign fget', '# assign fset', '# Using @property decorator', 'class Celsius:', '    def to_fahrenheit(self):', '    @property', '    def temperature(self):', '    @temperature.setter', '        if value < -273.15:', '# create an object', 'human = Celsius(37)', 'print(human.temperature)', 'print(human.to_fahrenheit())', 'coldest_thing = Celsius(-300)']","['    def __init__(self, temperature = 0):', '        self.temperature = temperature', '        return (self.temperature * 1.8) + 32', '# Basic method of setting and getting attributes in Python', '    def __init__(self, temperature=0):', '        self.temperature = temperature', '        return (self.temperature * 1.8) + 32', '# Making Getters and Setter methods', '    def __init__(self, temperature=0):', '        self.set_temperature(temperature)', '        return (self.get_temperature() * 1.8) + 32', '        return self._temperature', '    def set_temperature(self, value):', '            raise ValueError(""Temperature below -273.15 is not possible."")', '        self._temperature = value', '# Making Getters and Setter methods', '    def __init__(self, temperature=0):', '        self.set_temperature(temperature)', '        return (self.get_temperature() * 1.8) + 32', '        return self._temperature', '    def set_temperature(self, value):', '            raise ValueError(""Temperature below -273.15 is not possible."")', '        self._temperature = value', '# Create a new object, set_temperature() internally called by __init__', '# Get the temperature attribute via a getter', '# Get the to_fahrenheit method, get_temperature() called by the method itself', '    def __init__(self, temperature=0):', '        self.temperature = temperature', '        return (self.temperature * 1.8) + 32', '        print(""Getting value..."")', '        return self._temperature', '    def set_temperature(self, value):', '        print(""Setting value..."")', '            raise ValueError(""Temperature below -273.15 is not possible"")', '        self._temperature = value', '    # creating a property object', '    temperature = property(get_temperature, set_temperature)', '    def __init__(self, temperature=0):', '        self.temperature = temperature', '        return (self.temperature * 1.8) + 32', '        print(""Getting value..."")', '        return self._temperature', '    def set_temperature(self, value):', '        print(""Setting value..."")', '            raise ValueError(""Temperature below -273.15 is not possible"")', '        self._temperature = value', '    # creating a property object', '    temperature = property(get_temperature, set_temperature)', 'property(fget=None, fset=None, fdel=None, doc=None)', '<property object at 0x0000000003239B38>', 'temperature = property(get_temperature,set_temperature)', 'temperature = temperature.getter(get_temperature)', 'temperature = temperature.setter(set_temperature)', '    def __init__(self, temperature=0):', '        self.temperature = temperature', '        return (self.temperature * 1.8) + 32', '        print(""Getting value..."")', '        return self._temperature', '    def temperature(self, value):', '        print(""Setting value..."")', '            raise ValueError(""Temperature below -273 is not possible"")', '        self._temperature = value']","['37', '98.60000000000001', '37', '98.60000000000001', 'Traceback (most recent call last):', '  File ""<string>"", line 30, in <module>', '  File ""<string>"", line 16, in set_temperature', 'ValueError: Temperature below -273.15 is not possible.', 'Setting value...', 'Getting value...', '37', 'Getting value...', '98.60000000000001', 'Setting value...', 'Traceback (most recent call last):', '  File ""<string>"", line 31, in <module>', '  File ""<string>"", line 18, in set_temperature', 'ValueError: Temperature below -273 is not possible', 'Setting value...', 'Getting value...', '37', 'Getting value...', '98.60000000000001', 'Setting value...', 'Traceback (most recent call last):', '  File """", line 29, in ', '  File """", line 4, in __init__', '  File """", line 18, in temperature', 'ValueError: Temperature below -273 is not possible']",[],['fget is function to get value of the attribute|||fset is function to set value of the attribute|||fdel is function to delete the attribute|||doc is a string (like a comment)|||']
38,['Python RegEx'],"[""In this tutorial, you will learn about regular expressions (RegEx), and use Python's re module to work with RegEx (with the help of examples).""]",[],[],"['Specify Pattern Using RegEx', 'Python RegEx', 're.findall()', 're.split()', 're.sub()', 're.subn()', 're.search()', 'Match object']","['MetaCharacters', 'Example 1: re.findall()', 'Example 2: re.split()', 'Example 3: re.sub()', 'Example 4: re.subn()', 'Example 5: re.search()', 'match.group()', 'Example 6: Match object', 'match.start(), match.end() and match.span()', 'match.re and match.string', 'Using r prefix before RegEx', 'Example 7: Raw string using r prefix']",[],"['If you already know the basics of RegEx, jump to Python RegEx.', '[] . ^ $ * + ? {} () \\ |', '[] - Square brackets', 'Square brackets specifies a set of characters you wish to match.', '. - Period', ""A period matches any single character (except newline '\\n')."", '^ - Caret', '$ - Dollar', '* - Star', '+ - Plus', '? - Question Mark', '{} - Braces', '| - Alternation', 'Vertical bar | is used for alternation (or operator).', 'Here, a|b match any string that contains either a or b', '() - Group', '\\ - Backslash', 'Special Sequences', '\\d - Matches any decimal digit. Equivalent to [0-9]', '\\D - Matches any non-decimal digit. Equivalent to [^0-9]', 'If the pattern is not found, re.findall() returns an empty list.', 'The syntax of re.sub() is:', 'Here, match contains a match object.', 'Here, match variable contains a match object.']","['A Regular Expression (RegEx) is a sequence of characters that defines a search pattern. For example,', 'The above code defines a RegEx pattern. The pattern is: any five letter string starting with a and ending with s.', 'A pattern defined using RegEx can be used to match against a string.', ""Python has a module named re to work with RegEx. Here's an example:"", 'To specify regular expressions, metacharacters are used. In the above example, ^ and $ are metacharacters.', ""Metacharacters are characters that are interpreted in a special way by a RegEx engine. Here's a list of metacharacters:"", 'Here, [abc] will match if the string you are trying to match contains any of the a, b or c.', 'You can also specify a range of characters using - inside square brackets.', 'You can complement (invert) the character set by using caret ^ symbol at the start of a square-bracket.', 'The caret symbol ^ is used to check if a string starts with a certain character.', 'The dollar symbol $ is used to check if a string ends with a certain character.', 'The star symbol * matches zero or more occurrences of the pattern left to it.', 'The plus symbol + matches one or more occurrences of the pattern left to it.', 'The question mark symbol ? matches zero or one occurrence of the pattern left to it.', 'Consider this code: {n,m}. This means at least n, and at most m repetitions of the pattern left to it.', ""Let's try one more example. This RegEx [0-9]{2, 4} matches at least 2 digits but not more than 4 digits"", 'Backlash \\ is used to escape various characters including all metacharacters. For example,', '\\$a match if a string contains $ followed by a. Here, $ is not interpreted by a RegEx engine in a special way.', ""Special sequences make commonly used patterns easier to write. Here's a list of special sequences:"", '\\A - Matches if the specified characters are at the start of a string.', '\\b - Matches if the specified characters are at the beginning or end of a word.', '\\B - Opposite of \\b. Matches if the specified characters are not at the beginning or end of a word.', '\\s - Matches where a string contains any whitespace character. Equivalent to [ \\t\\n\\r\\f\\v].', '\\S - Matches where a string contains any non-whitespace character. Equivalent to [^ \\t\\n\\r\\f\\v].', '\\W - Matches any non-alphanumeric character. Equivalent to [^a-zA-Z0-9_]', '\\Z - Matches if the specified characters are at the end of a string.', ""Now you understand the basics of RegEx, let's discuss how to use RegEx in your Python code."", 'Python has a module named re to work with regular expressions. To use it, we need to import the module.', 'The module defines several functions and constants to work with RegEx.', 'The re.findall() method returns a list of strings containing all matches.', 'The re.split method splits the string where there is a match and returns a list of strings where the splits have occurred.', 'If the pattern is not found, re.split() returns a list containing the original string.', ""You can pass maxsplit argument to the re.split() method. It's the maximum number of splits that will occur."", 'By the way, the default value of maxsplit is 0; meaning all possible splits.', 'The method returns a string where matched occurrences are replaced with the content of replace variable.', 'If the pattern is not found, re.sub() returns the original string.', 'If the search is successful, re.search() returns a match object; if not, it returns None.', 'You can get methods and attributes of a match object using dir() function.', 'Some of the commonly used methods and attributes of match objects are:', 'The group() method returns the part of the string where there is a match.', 'The span() function returns a tuple containing start and end index of the matched part.', 'We have covered all commonly used methods defined in the re module. If you want to learn more, visit Python 3 re module.']","['Here, we used re.match() function to search pattern within the test_string. The method returns a match object if the search is successful. If not, it returns None.', ""There are other several functions defined in the re module to work with RegEx. Before we explore that, let's learn about regular expressions themselves."", 'Parentheses () is used to group sub-patterns. For example, (a|b|c)xz match any string that matches either a or b or c followed by xz', 'If you are unsure if a character has special meaning or not, you can put \\ in front of it. This makes sure the character is not treated in a special way.', '\\w - Matches any alphanumeric character (digits and alphabets). Equivalent to [a-zA-Z0-9_]. By the way, underscore _ is also considered an alphanumeric character.', 'Tip: To build and test regular expressions, you can use RegEx tester tools such as regex101. This tool not only helps you in creating regular expressions, but it also helps you learn it.', 'The re.subn() is similar to re.sub() except it returns a tuple of 2 items containing the new string and the number of substitutions made.', 'The re.search() method takes two arguments: a pattern and a string. The method looks for the first location where the RegEx pattern produces a match with the string.', ""Our pattern (\\d{3}) (\\d{2}) has two subgroups (\\d{3}) and (\\d{2}). You can get the part of the string of these parenthesized subgroups. Here's how:"", 'The start() function returns the index of the start of the matched substring. Similarly, end() returns the end index of the matched substring.', 'The re attribute of a matched object returns a regular expression object. Similarly, string attribute returns the passed string.', ""When r or R prefix is used before a regular expression, it means raw string. For example, '\\n' is a new line whereas r'\\n' means two characters: a backslash \\ followed by n."", 'Backlash \\ is used to escape various characters including all metacharacters. However, using r prefix makes \\ treat as a normal character.']","['import re', ""pattern = '^a...s$'"", ""test_string = 'abyss'"", 'if result:', '  print(""Search successful."")', 'import re', 'import re', ""pattern = '\\d+'"", 'print(result)', ""# Output: ['12', '89', '34']"", 'import re', ""pattern = '\\d+'"", 'print(result)', 'import re', ""pattern = '\\d+'"", '# maxsplit = 1', 'print(result)', 'import re', '# multiline string', ""string = 'abc 12\\"", ""de 23 \\n f45 6'"", ""pattern = '\\s+'"", '# empty string', ""replace = ''"", 'print(new_string)', '# Output: abc12de23f456', 'import re', '# multiline string', ""string = 'abc 12\\"", ""de 23 \\n f45 6'"", ""pattern = '\\s+'"", ""replace = ''"", 'print(new_string)', '# Output:', '# abc12de 23', 'import re', '# multiline string', ""string = 'abc 12\\"", ""de 23 \\n f45 6'"", ""pattern = '\\s+'"", '# empty string', ""replace = ''"", 'print(new_string)', ""# Output: ('abc12de23f456', 4)"", 'import re', 'string = ""Python is fun""', 'if match:', '  print(""pattern not found"")  ', 'import re', ""pattern = '(\\d{3}) (\\d{2})'"", 'if match:', '  print(match.group())', '  print(""pattern not found"")', '# Output: 801 35', '>>> match.group(1)', '>>> match.group(2)', '>>> match.group(1, 2)', ""('801', '35')"", '>>> match.groups()', ""('801', '35')"", '>>> match.start()', '>>> match.end()', '>>> match.span()', '>>> match.re', '>>> match.string', ""'39801 356, 2102 1111'"", 'import re', 'print(result)', ""# Output: ['\\n', '\\r']""]","['result = re.match(pattern, test_string)', '  print(""Search unsuccessful."")\t', '# Program to extract numbers from a string', ""string = 'hello 12 hi 89. Howdy 34'"", 'result = re.findall(pattern, string) ', ""string = 'Twelve:12 Eighty nine:89.'"", 'result = re.split(pattern, string) ', ""# Output: ['Twelve:', ' Eighty nine:', '.']"", ""string = 'Twelve:12 Eighty nine:89 Nine:9.'"", '# split only at the first occurrence', 'result = re.split(pattern, string, 1) ', ""# Output: ['Twelve:', ' Eighty nine:89 Nine:9.']"", 're.sub(pattern, replace, string)', '# Program to remove all whitespaces', '# matches all whitespace characters', 'new_string = re.sub(pattern, replace, string) ', '# matches all whitespace characters', ""new_string = re.sub(r'\\s+', replace, string, 1) "", '# Program to remove all whitespaces', '# matches all whitespace characters', 'new_string = re.subn(pattern, replace, string) ', ""# check if 'Python' is at the beginning"", ""match = re.search('\\APython', string)"", '  print(""pattern found inside the string"")', '# Output: pattern found inside the string', '# Three digit number followed by space followed by two digit number', '# match variable contains a Match object.', 'match = re.search(pattern, string) ', ""string = '\\n and \\r are escape sequences.'"", ""result = re.findall(r'[\\n\\r]', string) ""]",[],"['xpression|||String|||Matched?&&&a...s$|||abs|||No match&&&lias|||Match&&&byss|||Match&&&lias|||No match&&&n abacus|||No match', 'xpression|||String|||Matched?&&&abc]|||a|||1 match&&&c|||2 matches&&&ey Jude|||No match&&&bc de ca|||5 matches', 'xpression|||String|||Matched?&&&.|||a|||No match&&&c|||1 match&&&cd|||1 match&&&cde|||2 matches (contains 4 characters)', 'xpression|||String|||Matched?&&&a|||a|||1 match&&&bc|||1 match&&&ac|||No match&&&ab|||abc|||1 match&&&cb|||No match (starts with a but not followed by b)', 'xpression|||String|||Matched?&&&$|||a|||1 match&&&ormula|||1 match&&&ab|||No match', 'xpression|||String|||Matched?&&&a*n|||mn|||1 match&&&an|||1 match&&&aaan|||1 match&&&ain|||No match (a is not followed by n)&&&oman|||1 match', 'xpression|||String|||Matched?&&&a+n|||mn|||No match (no a character)&&&an|||1 match&&&aaan|||1 match&&&ain|||No match (a is not followed by n)&&&oman|||1 match', 'xpression|||String|||Matched?&&&a?n|||mn|||1 match&&&an|||1 match&&&aaan|||No match (more than one a character)&&&ain|||No match (a is not followed by n)&&&oman|||1 match', 'xpression|||String|||Matched?&&&{2,3}|||abc dat|||No match&&&bc daat|||1 match (at daat)&&&abc daaat|||2 matches (at aabc and daaat)&&&abc daaaat|||2 matches (at aabc and daaaat)', 'xpression|||String|||Matched?&&&0-9]{2,4}|||ab123csde|||1 match (match at ab123csde)&&&2 and 345673|||3 matches (12, 3456, 73)&&& and 2|||No match', 'xpression|||String|||Matched?&&&|b|||cde|||No match&&&de|||1 match (match at ade)&&&cdbea|||3 matches (at acdbea)', 'xpression|||String|||Matched?&&&a|b|c)xz|||ab xz|||No match&&&bxz|||1 match (match at abxz)&&&xz cabxz|||2 matches (at axzbc cabxz)', 'xpression|||String|||Matched?&&&Athe|||the sun|||Match&&&n the sun|||No match', 'xpression|||String|||Matched?&&&bfoo|||football|||Match&&& football|||Match&&&football|||No match&&&oo\\b|||the foo|||Match&&&he afoo test|||Match&&&he afootest|||No match', 'xpression|||String|||Matched?&&&Bfoo|||football|||No match&&& football|||No match&&&football|||Match&&&oo\\B|||the foo|||No match&&&he afoo test|||No match&&&he afootest|||Match', 'xpression|||String|||Matched?&&&d|||12abc3|||3 matches (at 12abc3)&&&ython|||No match', 'xpression|||String|||Matched?&&&D|||1ab34""50|||3 matches (at 1ab34""50)&&&345|||No match', 'xpression|||String|||Matched?&&&s|||Python RegEx|||1 match&&&ythonRegEx|||No match', 'xpression|||String|||Matched?&&&S|||a b|||2 matches (at  a b)&&&\xa0\xa0|||No match', 'xpression|||String|||Matched?&&&w|||12&"": ;c |||3 matches (at 12&"": ;c)&&&""> !|||No match', 'xpression|||String|||Matched?&&&W|||1a2%c|||1 match (at 1a2%c)&&&ython|||No match', 'xpression|||String|||Matched?&&&ython\\Z|||I like Python|||1 match&&& like Python Programming|||No match&&&ython is fun.|||No match']",['[a-e] is the same as [abcde].|||[1-4] is the same as [1234].|||[0-39] is the same as [01239].|||[^abc] means any character except a or b or c.|||[^0-9] means any non-digit character.|||']
39,['Python datetime'],"['In this article, you will learn to manipulate date and time in Python with the help of examples. ']",['Video: Python datetime - Work with Dates and Times'],['https://www.youtube.com/embed/r1Iv4d6CO2Q?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['datetime.date Class', 'datetime.time', 'datetime.datetime', 'datetime.timedelta', 'Python format datetime', 'Handling timezone in Python']","['Example 1: Get Current Date and Time', 'Example 2: Get Current Date', 'Example 3: Date object to represent a date', 'Example 4: Get current date', 'Example 5: Get date from a timestamp', ""Example 6: Print today's year, month and day"", 'Example 7: Time object to represent time', 'Example 8: Print hour, minute, second and microsecond', 'Example 9: Python datetime object', 'Example 10: Print year, month, hour, minute and timestamp', 'Example 11: Difference between two dates and times', 'Example 12: Difference between two timedelta objects', 'Example 13: Printing negative timedelta object', 'Example 14: Time duration in seconds', 'Python strftime() - datetime object to string', 'Example 15: Format date using strftime()', 'Python strptime() - string to datetime', 'Example 16: strptime()']",[],"['When you run the program, the output will be something like:', 'When you run the program, the output will be something like:', ""What's inside datetime?"", 'When you run the program, the output will be:', 'Commonly used classes in the datetime module are:', 'When you run the program, the output will be:', 'The variable a is a date object.', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the example, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', ""Notice, both t3 and t6 are of <class 'datetime.timedelta'> type."", 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:', 'Python has strftime() and strptime() methods to handle this.', 'When you run the program, the output will be something like:', 'In the above program, t, s1 and s2 are strings.', 'When you run the program, the output will be:', 'The strptime() method takes two arguments:', 'Visit Python strptime() to learn more.', 'When you run the program, the output will be something like:']","['Here, we have imported datetime module using import datetime statement.', 'In this program, we have used today() method defined in the date class to get a date object containing the current local date.', 'We can use dir() function to get a list containing all attributes of a module.', 'You can instantiate date objects from the date class. A date object represents a date (year, month and day).', ""We can only import date class from the datetime module. Here's how:"", ""You can create a date object containing the\xa0current date by using a classmethod named today(). Here's how:"", ""We can get year, month, day, day of the week etc. from the date object easily. Here's how:"", 'A time object instantiated from the time class represents the local time.', 'Once you create a time object, you can easily print its attributes such as hour, minute etc.', ""Notice that we haven't passed microsecond argument. Hence, its default value 0 is printed."", 'The datetime module has a class named dateclass that can contain information from both date and time objects.', 'The first three arguments year, month and day in the datetime() constructor are mandatory.', 'A timedelta object represents the difference between two dates or times.', 'Here, we have created two timedelta objects t1 and t2, and their difference is printed on the screen.', 'You can get the total number of seconds in a timedelta object using total_seconds() method.', 'To learn more about strftime() and format codes, visit: Python strftime().', 'The strptime() method creates a datetime object from a given string (representing date and time).', 'By the way, %d, %B and %Y format codes are used for day, month(full name) and year respectively.', 'Here, datetime_NY and datetime_London are datetime objects containing the\xa0current date and time of their respective timezone.']","[""Python has a module named datetime to work with dates and times. Let's create a few simple programs related to date and time before we dig deeper."", 'One of the classes defined in the datetime module is datetime class. We then used now() method to create a datetime object containing the current local date and time.', 'If you are wondering, date() in the above example is a constructor of the date class. The constructor takes three arguments: year, month and day.', 'We can also create date objects from a timestamp. A Unix timestamp is the number of seconds between a particular date and January 1, 1970 at UTC. You can convert a timestamp to date using fromtimestamp() method.', 'You can also find sum of two dates and times using + operator. Also, you can multiply and divide a timedelta object by integers and floats.', ""The way date and time is represented may be different in different places, organizations etc. It's more common to use mm/dd/yyyy in the US, whereas dd/mm/yyyy is more common in the UK."", 'The strftime() method is defined under classes date, datetime and time. The method creates a formatted string from a given date, datetime or time object.', 'Here, %Y, %m, %d, %H etc. are format codes. The strftime() method takes one or more format codes and returns a formatted string based on it.', 'Suppose, you are working on a project and need to display date and time based on their timezone. Rather than trying to handle timezone yourself, we suggest you to use a third-party pytZ module.']","['import datetime', 'print(datetime_object)', 'import datetime', 'print(date_object)', 'import datetime', 'print(dir(datetime))', 'import datetime', 'd = datetime.date(2019, 4, 13)', 'print(d)', 'from datetime import date', 'a = date(2019, 4, 13)', 'print(a)', 'from datetime import date', 'today = date.today()', 'print(""Current date ="", today)', 'from datetime import date', 'print(""Date ="", timestamp)', 'from datetime import date', ""# date object of today's date"", 'today = date.today() ', 'from datetime import time', 'a = time()', 'print(""a ="", a)', 'b = time(11, 34, 56)', 'print(""b ="", b)', 'print(""c ="", c)', 'd = time(11, 34, 56, 234566)', 'print(""d ="", d)', 'from datetime import time', 'a = time(11, 34, 56)', 'print(""hour ="", a.hour)', 'print(""minute ="", a.minute)', 'print(""second ="", a.second)', 'from datetime import datetime', '#datetime(year, month, day)', 'a = datetime(2018, 11, 28)', 'print(a)', 'print(b)', 'from datetime import datetime', 'print(""year ="", a.year)', 'print(""month ="", a.month)', 'print(""hour ="", a.hour)', 'print(""minute ="", a.minute)', 't3 = t1 - t2', 'print(""t3 ="", t3)', 't6 = t4 - t5', 'print(""t6 ="", t6)', 'from datetime import timedelta', 't3 = t1 - t2', 'print(""t3 ="", t3)', 'from datetime import timedelta', 't1 = timedelta(seconds = 33)', 't2 = timedelta(seconds = 54)', 't3 = t1 - t2', 'print(""t3 ="", t3)', 'print(""t3 ="", abs(t3))', 'from datetime import timedelta', 'from datetime import datetime', '# current date and time', 'now = datetime.now()', 't = now.strftime(""%H:%M:%S"")', 'print(""time:"", t)', '# mm/dd/YY H:M:S format', 'print(""s1:"", s1)', '# dd/mm/YY H:M:S format', 'print(""s2:"", s2)', 'from datetime import datetime', 'date_string = ""21 June, 2018""', 'from datetime import datetime', 'import pytz', 'local = datetime.now()']","['datetime_object = datetime.datetime.now()', 'date_object = datetime.date.today()', 'timestamp = date.fromtimestamp(1326244364)', 'print(""Current year:"", today.year)', 'print(""Current month:"", today.month)', 'print(""Current day:"", today.day)', '# time(hour = 0, minute = 0, second = 0)', 'c = time(hour = 11, minute = 34, second = 56)', '# time(hour, minute, second, microsecond)', 'print(""microsecond ="", a.microsecond)', '# datetime(year, month, day, hour, minute, second, microsecond)', 'b = datetime(2017, 11, 28, 23, 55, 59, 342380)', 'a = datetime(2017, 11, 28, 23, 55, 59, 342380)', 'print(""timestamp ="", a.timestamp())', 'from datetime import datetime, date', 't1 = date(year = 2018, month = 7, day = 12)', 't2 = date(year = 2017, month = 12, day = 23)', 't4 = datetime(year = 2018, month = 7, day = 12, hour = 7, minute = 9, second = 33)', 't5 = datetime(year = 2019, month = 6, day = 10, hour = 5, minute = 55, second = 13)', 'print(""type of t3 ="", type(t3)) ', 'print(""type of t6 ="", type(t6))  ', 't1 = timedelta(weeks = 2, days = 5, hours = 1, seconds = 33)', 't2 = timedelta(days = 4, hours = 11, minutes = 4, seconds = 54)', 't = timedelta(days = 5, hours = 1, seconds = 33, microseconds = 233423)', 'print(""total seconds ="", t.total_seconds())', 's1 = now.strftime(""%m/%d/%Y, %H:%M:%S"")', 's2 = now.strftime(""%d/%m/%Y, %H:%M:%S"")', 'print(""date_string ="", date_string)', 'date_object = datetime.strptime(date_string, ""%d %B, %Y"")', 'print(""date_object ="", date_object)', 'print(""Local:"", local.strftime(""%m/%d/%Y, %H:%M:%S""))', ""tz_NY = pytz.timezone('America/New_York') "", 'datetime_NY = datetime.now(tz_NY)', 'print(""NY:"", datetime_NY.strftime(""%m/%d/%Y, %H:%M:%S""))', ""tz_London = pytz.timezone('Europe/London')"", 'datetime_London = datetime.now(tz_London)', 'print(""London:"", datetime_London.strftime(""%m/%d/%Y, %H:%M:%S""))']","['2018-12-19 09:26:03.478039', '2018-12-19', ""['MAXYEAR', 'MINYEAR', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_divide_and_round', 'date', 'datetime', 'datetime_CAPI', 'time', 'timedelta', 'timezone', 'tzinfo']"", '2019-04-13', 'Date = 2012-01-11', 'a = 00:00:00', 'b = 11:34:56', 'c = 11:34:56', 'd = 11:34:56.234566', 'hour = 11', 'minute = 34', 'second = 56', 'microsecond = 0', '2018-11-28 00:00:00', '2017-11-28 23:55:59.342380', 'year = 2017', 'month = 11', 'day = 28', 'hour = 23', 'minute = 55', 'timestamp = 1511913359.34238', 't3 = 201 days, 0:00:00', 't6 = -333 days, 1:14:20', ""type of t3 = <class 'datetime.timedelta'>"", ""type of t6 = <class 'datetime.timedelta'>"", 't3 = 14 days, 13:55:39', 't3 = -1 day, 23:59:39', 't3 = 0:00:21', 'total seconds = 435633.233423', 'time: 04:34:52', 's1: 12/26/2018, 04:34:52', 's2: 26/12/2018, 04:34:52', 'date_string = 21 June, 2018', 'date_object = 2018-06-21 00:00:00', 'Local time: 2018-12-20 13:10:44.260462', 'America/New_York time: 2018-12-20 13:10:44.260462', 'Europe/London time: 2018-12-20 13:10:44.260462\t']",[],"['date Class|||time Class|||datetime Class|||timedelta Class|||%Y - year [0001,..., 2018, 2019,..., 9999]|||%m - month [01, 02, ..., 11, 12]|||%d - day [01, 02, ..., 30, 31]|||%H - hour [00, 01, ..., 22, 23|||%M - minute [00, 01, ..., 58, 59]|||%S - second [00, 01, ..., 58, 59]|||&&&a string representing date and time|||format code equivalent to the first argument|||']"
40,['Python strftime()'],"['In this article, you will learn to convert date, time and datetime objects to its equivalent string (with the help of examples)']",['Video: Dates and Times in Python'],['https://www.youtube.com/embed/r1Iv4d6CO2Q?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Example 1: datetime to string using strftime()', 'How strftime() works?', 'Example 2: Creating string from a timestamp', 'Format Code List', ""Example 3: Locale's appropriate date and time""]",[],"['//cdn.programiz.com/sites/tutorial2program/files/import-datetime.jpg', '//cdn.programiz.com/sites/tutorial2program/files/current-date-time.jpg', '//cdn.programiz.com/sites/tutorial2program/files/python-strftime-format-1.jpg', '//cdn.programiz.com/sites/tutorial2program/files/python-strftime-format-2.jpg']","['When you run the program, the output will something like be:', 'When you run the program, the output will be:', 'When you run the program, the output will be:']","['The strftime() method returns a string representing date and time using date, time or datetime object.', 'The program below converts a\xa0datetime object containing current date and time to different string formats.', 'Here, year, day, time and date_time are strings, whereas now is a datetime object.', 'The table below shows all the codes that you can pass to the strftime() method.', ""Format codes %c, %x and %X are used for locale's appropriate date and time representation."", 'We also recommend\xa0you to check Python strptime(). The strptime() method creates a datetime object from a string.']","['In the above program, %Y, %m, %d etc. are format codes. The strftime() method takes one or more format codes as an argument and returns a formatted string based on it.']","['from datetime import datetime', 'year = now.strftime(""%Y"")', 'print(""year:"", year)', 'month = now.strftime(""%m"")', 'print(""month:"", month)', 'day = now.strftime(""%d"")', 'print(""day:"", day)', 'print(""time:"", time)', 'from datetime import datetime', 'timestamp = 1528797322', 'print(""Output 2:"", d)\t', 'print(""Output 3:"", d)', 'print(""Output 4:"", d)', 'd = date_time.strftime(""%I%p"")', 'print(""Output 5:"", d)', 'from datetime import datetime', 'timestamp = 1528797322', 'd = date_time.strftime(""%c"")', 'print(""Output 1:"", d)\t', 'd = date_time.strftime(""%x"")', 'print(""Output 2:"", d)', 'd = date_time.strftime(""%X"")', 'print(""Output 3:"", d)']","['now = datetime.now() # current date and time', 'date_time = now.strftime(""%m/%d/%Y, %H:%M:%S"")', 'print(""date and time:"",date_time)\t', 'date_time = datetime.fromtimestamp(timestamp)', 'print(""Date time object:"", date_time)', 'd = date_time.strftime(""%m/%d/%Y, %H:%M:%S"")', 'd = date_time.strftime(""%d %b, %Y"")', 'd = date_time.strftime(""%d %B, %Y"")', 'date_time = datetime.fromtimestamp(timestamp)']","['year: 2018', 'month: 12', 'day: 24', 'time: 04:59:31', 'date and time: 12/24/2018, 04:59:31', 'Date time object: 2018-06-12 09:55:22', 'Output 2: 06/12/2018, 09:55:22', 'Output 3: 12 Jun, 2018', 'Output 4: 12 June, 2018', 'Output 5: 09AM', 'Output 1: Tue Jun 12 09:55:22 2018', 'Output 2: 06/12/18', 'Output 3: 09:55:22']","[""irective|||Meaning|||Example&&&a|||Abbreviated weekday name.|||Sun, Mon, ...&&&A|||Full weekday name.|||Sunday, Monday, ...&&&w|||Weekday as a decimal number.|||0, 1, ..., 6&&&d|||Day of the month as a zero-padded decimal.|||01, 02, ..., 31&&&-d|||Day of the month as a decimal number.|||1, 2, ..., 30&&&b|||Abbreviated month name.|||Jan, Feb, ..., Dec&&&B|||Full month name.|||January, February, ...&&&m|||Month as a zero-padded decimal number.|||01, 02, ..., 12&&&-m|||Month as a decimal number.|||1, 2, ..., 12&&&y|||Year without century as a zero-padded decimal number.|||00, 01, ..., 99&&&-y|||Year without century as a decimal number.|||0, 1, ..., 99&&&Y|||Year with century as a decimal number.|||2013, 2019 etc.&&&H|||Hour (24-hour clock) as a zero-padded decimal number.|||00, 01, ..., 23&&&-H|||Hour (24-hour clock) as a decimal number.|||0, 1, ..., 23&&&I|||Hour (12-hour clock) as a zero-padded decimal number.|||01, 02, ..., 12&&&-I|||Hour (12-hour clock) as a decimal number.|||1, 2, ... 12&&&p|||Locale’s AM or PM.|||AM, PM&&&M|||Minute as a zero-padded decimal number.|||00, 01, ..., 59&&&-M|||Minute as a decimal number.|||0, 1, ..., 59&&&S|||Second as a zero-padded decimal number.|||00, 01, ..., 59&&&-S|||Second as a decimal number.|||0, 1, ..., 59&&&f|||Microsecond as a decimal number, zero-padded on the left.|||000000 - 999999&&&z|||UTC offset in the form +HHMM or -HHMM.|||\xa0&&&Z|||Time zone name.|||\xa0&&&j|||Day of the year as a zero-padded decimal number.|||001, 002, ..., 366&&&-j|||Day of the year as a decimal number.|||1, 2, ..., 366&&&U|||Week number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0.|||00, 01, ..., 53&&&W|||Week number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0.|||00, 01, ..., 53&&&c|||Locale’s appropriate date and time representation.|||Mon Sep 30 07:06:05 2013&&&x|||Locale’s appropriate date representation.|||09/30/13&&&X|||Locale’s appropriate time representation.|||07:06:05&&&%|||A literal '%' character.|||%""]","[""We imported datetime class from the datetime module. It's because the object of datetime class can access strftime() method.|||The datetime object containing current date and time is stored in now variable.|||The strftime() method can be used to create formatted strings.|||The string you pass to the strftime() method may contain more than one format codes.|||""]"
41,['Python strptime()'],"['In this article, you will learn to create a datetime object from a string (with the help of examples).']",['Video: Dates and Times in Python'],['https://www.youtube.com/embed/r1Iv4d6CO2Q?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"['Example 1: string to datetime object', 'Example 2: string to datetime object', 'Format Code List']","['How strptime() works?', 'ValueError in strptime()']",['//cdn.programiz.com/sites/tutorial2program/files/python-strptime.jpg'],"['When you run the program, the output will be:', 'The strptime() class method takes two arguments:', 'In the above example:', 'Here,', 'When you run the program, the output will be:', 'The table below shows all the format codes that you can use.', 'If you run this program, you will get an error.', 'Recommended Readings: Python strftime()']","['The strptime() method creates a datetime object from the\xa0given string.', 'Note: You cannot create datetime object from every string. The string needs to be in a certain format.', 'Based on the string and format code used, the method returns its equivalent datetime object.']","[""If the string (first argument) and the format code (second argument) passed to the strptime() doesn't match, you will get ValueError. For example:""]","['from datetime import datetime', 'date_string = ""21 June, 2018""', 'from datetime import datetime', 'from datetime import datetime', 'date_string = ""12/11/2018""']","['print(""date_string ="", date_string)', 'print(""type of date_string ="", type(date_string))', 'date_object = datetime.strptime(date_string, ""%d %B, %Y"")', 'print(""date_object ="", date_object)', 'print(""type of date_object ="", type(date_object))', 'dt_string = ""12/11/2018 09:15:32""', '# Considering date is in dd/mm/yyyy format', 'dt_object1 = datetime.strptime(dt_string, ""%d/%m/%Y %H:%M:%S"")', 'print(""dt_object1 ="", dt_object1)', '# Considering date is in mm/dd/yyyy format', 'dt_object2 = datetime.strptime(dt_string, ""%m/%d/%Y %H:%M:%S"")', 'print(""dt_object2 ="", dt_object2)', 'date_object = datetime.strptime(date_string, ""%d %m %Y"")', 'print(""date_object ="", date_object)']","['date_string = 21 June, 2018', ""type of date_string = <class 'str'>"", 'date_object = 2018-06-21 00:00:00', ""type of date_object = <class 'datetime.datetime'>"", 'dt_object1 = 2018-11-12 09:15:32', 'dt_object2 = 2018-12-11 09:15:32', ""ValueError: time data '12/11/2018' does not match format '%d %m %Y'""]","[""irective|||Meaning|||Example&&&a|||Abbreviated weekday name.|||Sun, Mon, ...&&&A|||Full weekday name.|||Sunday, Monday, ...&&&w|||Weekday as a decimal number.|||0, 1, ..., 6&&&d|||Day of the month as a zero-padded decimal.|||01, 02, ..., 31&&&-d|||Day of the month as a decimal number.|||1, 2, ..., 30&&&b|||Abbreviated month name.|||Jan, Feb, ..., Dec&&&B|||Full month name.|||January, February, ...&&&m|||Month as a zero-padded decimal number.|||01, 02, ..., 12&&&-m|||Month as a decimal number.|||1, 2, ..., 12&&&y|||Year without century as a zero-padded decimal number.|||00, 01, ..., 99&&&-y|||Year without century as a decimal number.|||0, 1, ..., 99&&&Y|||Year with century as a decimal number.|||2013, 2019 etc.&&&H|||Hour (24-hour clock) as a zero-padded decimal number.|||00, 01, ..., 23&&&-H|||Hour (24-hour clock) as a decimal number.|||0, 1, ..., 23&&&I|||Hour (12-hour clock) as a zero-padded decimal number.|||01, 02, ..., 12&&&-I|||Hour (12-hour clock) as a decimal number.|||1, 2, ... 12&&&p|||Locale’s AM or PM.|||AM, PM&&&M|||Minute as a zero-padded decimal number.|||00, 01, ..., 59&&&-M|||Minute as a decimal number.|||0, 1, ..., 59&&&S|||Second as a zero-padded decimal number.|||00, 01, ..., 59&&&-S|||Second as a decimal number.|||0, 1, ..., 59&&&f|||Microsecond as a decimal number, zero-padded on the left.|||000000 - 999999&&&z|||UTC offset in the form +HHMM or -HHMM.|||\xa0&&&Z|||Time zone name.|||\xa0&&&j|||Day of the year as a zero-padded decimal number.|||001, 002, ..., 366&&&-j|||Day of the year as a decimal number.|||1, 2, ..., 366&&&U|||Week number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0.|||00, 01, ..., 53&&&W|||Week number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0.|||00, 01, ..., 53&&&c|||Locale’s appropriate date and time representation.|||Mon Sep 30 07:06:05 2013&&&x|||Locale’s appropriate date representation.|||09/30/13&&&X|||Locale’s appropriate time representation.|||07:06:05&&&%|||A literal '%' character.|||%""]","[""string (that be converted to datetime)|||format code|||%d - Represents the day of the month. Example: 01, 02, ..., 31|||%B - Month's name in full. Example: January, February etc.|||%Y - Year in four digits. Example: 2018, 2019 etc.|||""]"
42,['How to get current date and time in Python?'],"[""In this article, you will learn to get today's date and current date and time in Python. We will also format the date and time in different formats using strftime() method.""]",['Video: Dates and Times in Python'],['https://www.youtube.com/embed/r1Iv4d6CO2Q?list=PL98qAXLA6afuh50qD2MdAj3ofYjZR_Phn&origin=https://www.programiz.com'],"[""Example 1: Python get today's date"", 'Example 2: Current date in different formats', 'Example 3: Get the current date and time']",[],[],"['When you run the program, the output will be something like:', 'You will gate output like below.']","['If you need to get the current date and time, you can use datetime class of the datetime module.']","['There are a number of ways you can take to get the current date. We will use the date class of the datetime module to accomplish this task.', 'By the way, date.today() returns a date object, which is assigned to the today variable in the above program. Now, you can use the strftime() method to create a string representing date in different formats.', 'Here, we have used datetime.now() to get the current date and time. Then, we used strftime() to create a string representing date and time in another format.']","['from datetime import date', 'today = date.today()', 'print(""Today\'s date:"", today)', 'from datetime import date', 'today = date.today()', '# dd/mm/YY', 'print(""d1 ="", d1)', '# Textual month, day and year\t', 'print(""d2 ="", d2)', '# mm/dd/y', 'print(""d3 ="", d3)', 'print(""d4 ="", d4)', 'from datetime import datetime', 'now = datetime.now()', 'print(""now ="", now)', '# dd/mm/YY H:M:S']","['d2 = today.strftime(""%B %d, %Y"")', '# Month abbreviation, day and year\t', '# datetime object containing current date and time', 'dt_string = now.strftime(""%d/%m/%Y %H:%M:%S"")', 'print(""date and time ="", dt_string)\t']","['d1 = 16/09/2019', 'd2 = September 16, 2019', 'd3 = 09/16/19', 'd4 = Sep-16-2019', 'now = 2021-06-25 07:58:56.550604', 'date and time = 25/06/2021 07:58:56']",[],[]
43,['Python Get Current time'],"['In this article, you will learn to get current time of your locale as well as different time zones in Python.']",[],[],"['Example 1: Current time using datetime object', 'Example 2: Current time using time module', 'Example 3: Current time of a timezone']",[],[],"['Output', 'Output', 'You can also get the current time using time module.', 'Output', 'Output']","['There are a number of ways you can take to get current time in Python.', 'Using datetime.strftime() method, we then created a string representing current time.', 'If you need to create a time object containing current time, you can do something like this.', 'If you need to find current time of a certain timezone, you can use pytZ module.']","['In the above example, we have imported datetime class from the datetime module. Then, we used now() method to get a datetime object containing current date and time.']","['from datetime import datetime', 'now = datetime.now()', 'from datetime import datetime', 'print(""now ="", now)', 'import time', 't = time.localtime()', 'print(current_time)', 'from datetime import datetime', 'import pytz']","['current_time = now.strftime(""%H:%M:%S"")', 'print(""Current Time ="", current_time)', 'now = datetime.now().time() # time object', 'print(""type(now) ="", type(now))\t', 'current_time = time.strftime(""%H:%M:%S"", t)', ""tz_NY = pytz.timezone('America/New_York') "", 'datetime_NY = datetime.now(tz_NY)', 'print(""NY time:"", datetime_NY.strftime(""%H:%M:%S""))', ""tz_London = pytz.timezone('Europe/London')"", 'datetime_London = datetime.now(tz_London)', 'print(""London time:"", datetime_London.strftime(""%H:%M:%S""))']","['Current Time = 07:41:19', 'now = 07:43:37.457423', ""type(now) = <class 'datetime.time'>"", '07:46:58', 'NY time: 03:45:16', 'London time: 08:45:16']",[],[]
44,['Python timestamp to datetime and vice-versa'],"['In this article, you will learn to convert timestamp to datetime object and datetime object to timestamp (with the help of examples).']",[],[],"['Example 1: Python timestamp to datetime', 'Example 2: Python datetime to timestamp']",[],[],"['When you run the program, the output will be:']","['Note: You can easily create a string representing date and time from a datetime object using strftime() method.', 'You can get timestamp from a datetime object using datetime.timestamp() method.']","[""It's pretty common to store date and time as a timestamp in a database. A Unix timestamp is the number of seconds between a particular date and January 1, 1970 at UTC."", 'Here, we have imported datetime class from the datetime module. Then, we used datetime.fromtimestamp() classmethod which returns the local date and time (datetime object). This object is stored in dt_object variable.']","['from datetime import datetime', 'timestamp = 1545730073', 'from datetime import datetime', '# current date and time', 'now = datetime.now()']","['dt_object = datetime.fromtimestamp(timestamp)', 'print(""type(dt_object) ="", type(dt_object))', 'timestamp = datetime.timestamp(now)']","['dt_object = 2018-12-25 09:27:53', ""type(dt_object) = <class 'datetime.datetime'>""]",[],[]
45,['Python time Module'],"['In this article, we will explore time module in detail. We will learn to use different time-related functions defined in the time module with the help of examples.']",[],[],['time.struct_time Class'],"['Python time.time()', 'Python time.ctime()', 'Python time.sleep()', 'Python time.localtime()', 'Python time.gmtime()', 'Python time.mktime()', 'Python time.asctime()', 'Python time.strftime()', 'Python time.strptime()']",[],"['Here are commonly used time-related functions.', 'If you run the program, the output will be something like:', 'To learn more, visit: Python sleep().', ""Here's an example of time.struct_time object."", 'When you run the program, the output will be something like:', 'When you run the program, the output will be:', 'The example below shows how mktime() and localtime() are related.', 'When you run the program, the output will be something like:', 'When you run the program, the output will be:', 'When you run the program, the output will be something like:', 'Here, %Y, %m, %d, %H etc. are format codes.', 'To learn more, visit: time.strftime().', 'When you run the program, the output will be:']","['The time() function returns the number of seconds passed since epoch.', 'For Unix system, January 1, 1970, 00:00:00 at UTC is epoch (the point where time begins).', 'The time.ctime() function takes seconds passed since epoch as an argument and returns a string representing local time.', 'The sleep() function suspends (delays) execution of the current thread for the given number of seconds.', ""Before we talk about other time-related functions, let's explore time.struct_time class in brief."", 'The values (elements) of the time.struct_time object are accessible using both indices and attributes.', 'The localtime() function takes the number of seconds passed since epoch as an argument and returns struct_time in local time.', 'If no argument or None is passed to localtime(), the value returned by time() is used.', 'The gmtime() function takes the number of seconds passed since epoch as an argument and returns struct_time in UTC.', 'If no argument or None is passed to gmtime(), the value returned by time() is used.', 'The strptime() function parses a string representing time and returns struct_time.']","[""Python has a module named time to handle time-related tasks. To use functions defined in the module, we need to import the module first. Here's how:"", 'Several functions in the time module such as gmtime(), asctime() etc. either take time.struct_time object as an argument or return it.', ""The mktime() function takes struct_time (or a tuple containing 9 elements corresponding to struct_time) as an argument and returns the seconds passed since epoch in local time. Basically, it's the inverse function of localtime()."", ""The asctime() function takes struct_time (or a tuple containing 9 elements corresponding to struct_time) as an argument and returns a string representing it. Here's an example:"", 'The strftime() function takes struct_time (or tuple corresponding to it) as an argument and returns a string representing it based on the format code used. For example,']","['import time', 'import time', 'seconds = time.time()', 'import time', '# seconds passed since epoch', 'seconds = 1545925769.9618232', 'import time', 'time.sleep(2.4)', 'import time', 'print(""result:"", result)', 'import time', 'print(""result:"", result)', 'import time', 'local_time = time.mktime(t)', 'import time', 'seconds = 1545925769', '# returns struct_time', 't = time.localtime(seconds)', 'print(""t1: "", t)', 's = time.mktime(t)', 'print(""\\s:"", seconds)', 'import time', 'result = time.asctime(t)', 'print(""Result:"", result)', 'import time', 'print(time_string)', 'import time', 'time_string = ""21 June, 2018""', 'print(result)']","['print(""Seconds since epoch ="", seconds)\t', 'local_time = time.ctime(seconds)', 'print(""Local time:"", local_time)\t', 'print(""This is printed immediately."")', 'print(""This is printed after 2.4 seconds."")', 'result = time.localtime(1545925769)', 'print(""\\nyear:"", result.tm_year)', 'print(""tm_hour:"", result.tm_hour)', 'result = time.gmtime(1545925769)', 'print(""\\nyear:"", result.tm_year)', 'print(""tm_hour:"", result.tm_hour)', 't = (2018, 12, 28, 8, 44, 4, 4, 362, 0)', 'print(""Local time:"", local_time)', '# returns seconds from struct_time', 't = (2018, 12, 28, 8, 44, 4, 4, 362, 0)', 'named_tuple = time.localtime() # get struct_time', 'time_string = time.strftime(""%m/%d/%Y, %H:%M:%S"", named_tuple)', 'result = time.strptime(time_string, ""%d %B, %Y"")']","['Local time: Thu Dec 27 15:49:29 2018', 'time.struct_time(tm_year=2018, tm_mon=12, tm_mday=27, ', '                    tm_hour=6, tm_min=35, tm_sec=17, ', '                    tm_wday=3, tm_yday=361, tm_isdst=0)', 'result: time.struct_time(tm_year=2018, tm_mon=12, tm_mday=27, tm_hour=15, tm_min=49, tm_sec=29, tm_wday=3, tm_yday=361, tm_isdst=0)', 'year: 2018', 'tm_hour: 15', 'result = time.struct_time(tm_year=2018, tm_mon=12, tm_mday=28, tm_hour=8, tm_min=44, tm_sec=4, tm_wday=4, tm_yday=362, tm_isdst=0)', 'year = 2018', 'tm_hour = 8', 't1:  time.struct_time(tm_year=2018, tm_mon=12, tm_mday=27, tm_hour=15, tm_min=49, tm_sec=29, tm_wday=3, tm_yday=361, tm_isdst=0)', 's: 1545925769.0', 'Result: Fri Dec 28 08:44:04 2018', '12/28/2018, 09:47:41', 'time.struct_time(tm_year=2018, tm_mon=6, tm_mday=21, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=172, tm_isdst=-1)']","['ndex|||Attribute|||Values&&&|||tm_year|||0000, ...., 2018, ..., 9999&&&|||tm_mon|||1, 2, ..., 12&&&|||tm_mday|||1, 2, ..., 31&&&|||tm_hour|||0, 1, ..., 23&&&|||tm_min|||0, 1, ..., 59&&&|||tm_sec|||0, 1, ..., 61&&&|||tm_wday|||0, 1, ..., 6; Monday is 0&&&|||tm_yday|||1, 2, ..., 366&&&|||tm_isdst|||0, 1 or -1']","['%Y - year [0001,..., 2018, 2019,..., 9999]|||%m - month [01, 02, ..., 11, 12]|||%d - day [01, 02, ..., 30, 31]|||%H - hour [00, 01, ..., 22, 23|||%M - minutes\xa0[00, 01, ..., 58, 59]|||%S - second [00, 01, ..., 58, 61]|||']"
46,['Python sleep()'],['The sleep() function suspends (waits) execution of the current thread for a given number of seconds. '],[],[],"['Example 1: Python sleep()', 'Example 2: Python create a digital clock', 'Multithreading in Python', 'time.sleep() in multithreaded programs']","['Example 3: Python multithreading', 'Example 4: sleep() in a\xa0multithreaded program']",[],"[""Here's how this program works:"", 'When you run the program, the output will be something like:', 'Here is a slightly modified better version of the above program.', 'To learn more, visit digital clock in Python shell.', 'When you run the program, the output will be something like:', 'Visit this page to learn more about Multithreading in Python.', 'Recommended Reading: Python time.sleep() sleeps thread']","['The sleep() function suspends\xa0execution of the current thread for a given number of seconds.', 'As you can see from the above example, sleep() takes a floating-point number as an argument.', 'Before Python 3.5, the actual suspension time may be less than the argument specified to the time() function.', 'Since Python 3.5, the suspension time will be at least the seconds specified.', ""Before talking about sleep() in multithreaded programs, let's talk about processes and threads."", 'A computer program is a collection of instructions. A process is the execution of those instructions.', 'A thread is a subset of the process. A process can have one or more threads.', ""All the programs above in this article are single-threaded programs. Here's an example of a multithreaded Python program."", 'The above program has two threads t1 and t2. These threads are run using t1.start() and t2.start() statements.', 'Note that, t1 and t2 run\xa0concurrently and you might get different output.', 'The sleep() function suspends execution of the current thread for a given number of seconds.']","['Python has a module named time which provides several useful functions to handle time-related tasks. One of the popular functions among them is sleep().', 'In the above program, we computed and printed the current local time inside the infinite\xa0while loop. Then, the program waits for 1 second. Again, the current local time is computed and printed. This process goes on.', 'In case of single-threaded programs, sleep() suspends execution of the thread and process. However, the function suspends a thread rather than the whole process in multithreaded programs.', 'The above program has two threads. We have used time.sleep(0.5) and time.sleep(0.75) to suspend execution of these two threads for 0.5 seconds and 0.7 seconds respectively.']","['import time', 'print(""Printed immediately."")', 'time.sleep(2.4)', 'import time', 'while True:', '  localtime = time.localtime()', '  print(result)', '  time.sleep(1)', 'import time', 'while True:', '  localtime = time.localtime()', '  time.sleep(1)', 'import threading ', 'def print_hello_three_times():', '  for i in range(3):', '    print(""Hello"")', 'def print_hi_three_times(): ', '    for i in range(3): ', '      print(""Hi"") ', 't1.start()', 't2.start()', 'import threading ', 'import time', 'def print_hello():', '  for i in range(4):', '    time.sleep(0.5)', '    print(""Hello"")', 'def print_hi(): ', '    for i in range(4): ', '      time.sleep(0.7)', '      print(""Hi"") ', 't1.start()', 't2.start()']","['print(""Printed after 2.4 seconds."")', '  result = time.strftime(""%I:%M:%S %p"", localtime)', '  result = time.strftime(""%I:%M:%S %p"", localtime)', '  print(result, end="""", flush=True)', '  print(""\\r"", end="""", flush=True)', 't1 = threading.Thread(target=print_hello_three_times)  ', 't2 = threading.Thread(target=print_hi_three_times)  ', 't1 = threading.Thread(target=print_hello)  ', 't2 = threading.Thread(target=print_hi)  ']","['02:10:50 PM', '02:10:51 PM', '02:10:52 PM', '02:10:53 PM', '02:10:54 PM', '... .. ...', 'Hello', 'Hello', 'Hi', 'Hello', 'Hi', 'Hi']",[],"['""Printed immediately"" is printed|||Suspends (Delays) execution for 2.4 seconds.|||""Printed after 2.4 seconds"" is printed.|||']"
