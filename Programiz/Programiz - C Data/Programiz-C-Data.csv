,main_headings,main_contents,video_headings,video_urls,sub_headings_h2,sub_headings_h3,image_urls,facts,definitions,explanations,snippets,codes,outputs,table_data,list_items
0,['C Keywords and Identifiers'],"['In this tutorial, you will learn about keywords; reserved words in C programming that are part of the syntax. Also, you will learn about identifiers and how to name them.']",[],[],"['Character set', 'C Keywords', 'C Identifiers']","['Alphabets', 'Digits', 'Special Characters', 'Rules for naming identifiers']",[],"['White space Characters', 'Here, money and accountBalance are identifiers.']","['A character set is a set of alphabets, letters and some special characters that are valid in C language.', 'C accepts both lowercase and uppercase alphabets as variables and functions.', 'Blank space, newline, horizontal tab, carriage return and form feed.', 'Here, int is a keyword that indicates money\xa0is a variable of type int (integer).', 'Identifier refers to name given to entities such as variables, functions, structures etc.', 'Also remember, identifier names must be different from keywords. You cannot use int\xa0as an identifier because int\xa0is a keyword.']","['Keywords are predefined, reserved words used in programming that have special meanings to the compiler. Keywords are part of the syntax and they cannot be used as an identifier. For example:', 'All these keywords, their syntax, and application will be discussed in their respective topics. However, if you want a brief overview of these keywords without going further, visit List of all keywords in C programming.', 'Identifiers must be unique. They are created to give a unique name to an entity to identify it during the execution of the program. For example:', 'You can choose any name as an identifier if you follow the above rule, however, give meaningful names to identifiers that make sense.\xa0']","['int money;', 'int money;', 'double accountBalance;']",[],"['Uppercase: A B C ................................... X Y Z', 'Lowercase: a b c ...................................... x y z', '0 1 2 3 4 5 6 7 8 9']","['|||<|||>|||.|||_&&&|||)|||;|||$|||:&&&|||[|||]|||#|||?&&&|||&|||{|||}|||""&&&|||!|||*|||/||||&&&|||\\|||~|||+|||\xa0', 'uto|||double|||int|||struct&&&reak|||else|||long|||switch&&&ase|||enum|||register|||typedef&&&har|||extern|||return|||union&&&ontinue|||for|||signed|||void&&&o|||if|||static|||while&&&efault|||goto|||sizeof|||volatile&&&onst|||float|||short|||unsigned']","['A valid identifier can have letters (both uppercase and lowercase letters), digits and underscores.|||The first letter of an identifier should be either a letter or an underscore.|||You cannot use keywords like int, while etc. as identifiers.|||There is no rule on how long an identifier can be. However, you may run into problems in some compilers if the identifier is longer than 31 characters.|||']"
1,"['C Variables, Constants and Literals']","['In this tutorial, you will learn about variables and rules for naming a variable. You will also learn about different literals in C programming and how to create constants.']",['Video: Variables in C Programming'],['https://www.youtube.com/embed/h4VBpylsjJc?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],"['Variables', 'Literals', 'Constants']","['Rules for naming a variable', '1. Integers', '2. Floating-point Literals', '3. Characters', '4. Escape Sequences', '5. String Literals']",[],"['The value of a variable can be changed, hence the name variable.', 'For example:', 'Note: E-5 = 10-5', 'In order to use these characters, escape sequences are used.', 'Notice, we have added keyword const.', 'Here, PI is a symbolic constant; its value cannot be changed.']","['In programming, a variable is a container (storage area) to hold data.', 'Here, playerScore is a variable of int type. Here, the variable is assigned an integer value 95.', 'Note: You should always try to give meaningful names to variables. For example: firstName is a better variable name than fn.', 'C is a strongly typed language. This means that the variable type cannot be changed once it is declared. For example:', 'Visit this page to learn more about different types of data a variable can store.', ""Literals are\xa0data used for representing fixed values. They can be used directly in the code. For example: 1, 2.5, 'c' etc."", ""Here, 1, 2.5 and 'c' are literals. Why? You cannot assign different values to these terms."", 'In C programming, octal starts with a 0, and hexadecimal starts with a 0x.', 'A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example:', 'A string literal is a sequence of characters enclosed in double-quote marks. For example:', 'You can also define a constant using the #define preprocessor directive. We will learn about it in\xa0C Macros tutorial.']","['To indicate the storage area, each variable should be given a unique name (identifier). Variable names are just the symbolic representation of a memory location. For example:', 'Here, the type of number variable is int. You cannot assign a floating-point (decimal) value 5.5 to this variable. Also, you cannot redefine the data type of the variable to double. By the way, to store the decimal values in C, you need to declare its type to either double or float.', 'An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming:', ""A character literal is created by enclosing a single character inside single quotation marks. For example: 'a', 'm', 'F', '2', '}' etc."", 'Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C programming. For example: newline(enter), tab, question mark etc.', 'For example: \\n is used for a newline. The backslash \\ causes escape from the normal way the characters are handled by the compiler.', 'If you want to define a variable whose value cannot be changed, you can use the\xa0const keyword. This will create a constant. For example,']","['int playerScore = 95;', ""char ch = 'a';"", ""ch = 'l';"", 'number = 5.5;        // error', 'double number;       // error', 'const double PI = 3.14;', 'const double PI = 3.14;', 'PI = 2.9; //Error']",['int number = 5;      // integer variable'],"['Decimal: 0, -9, 22 etc', 'Octal: 021, 077, 033 etc', 'Hexadecimal: 0x7f, 0x2a, 0x521 etc', '-2.0', '0.0000234', '-0.22E-5', '""good""                  //string constant', '""""                     //null string constant', '""      ""               //string constant of six white space', '""x""                    //string constant having a single character.', '""Earth is round\\n""         //prints string with a newline']","['scape Sequences|||Character&&&b|||Backspace&&&f|||Form feed&&&n|||Newline&&&r|||Return&&&t|||Horizontal tab&&&v|||Vertical tab&&&\\|||Backslash&&&\'|||Single quotation mark&&&""|||Double quotation mark&&&?|||Question mark&&&0|||Null character']","['decimal\xa0(base 10)|||octal (base 8)|||hexadecimal (base 16)|||&&&A variable name can only have letters (both uppercase and lowercase letters), digits and underscore.|||The first letter of a variable should be either a letter or an underscore.|||There is no rule on how long a variable name (identifier) can be. However, you may run into problems in some compilers if the variable name is longer than 31 characters.|||']"
2,['C Data Types'],"['In this tutorial, you will learn about basic data types such as int, float, char etc. in C programming.']",['Video: Data Types in C Programming'],['https://www.youtube.com/embed/sARaqR0hRI4?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],"['Basic types', 'Derived Data Types']","['int', 'float and double', 'char', 'void', 'short and long', 'signed and unsigned']",[],"['We can use int for declaring an integer variable.', 'Here, id is a variable of type integer.', 'float and double are used to hold real numbers.', ""What's the difference between float and double?"", 'The size of the character variable is 1 byte.', 'Note that, you cannot create variables of void type.', 'For example,', 'We will learn about these derived data types in later tutorials.']","['Here, myVar is a variable of int (integer) type. The size of int is 4 bytes.', ""Here's a table containing commonly used types in C programming for quick access."", 'Integers are whole numbers that can have both zero, positive and negative values but no decimal values. For example, 0, -5, 10', 'You can declare multiple variables at once in C programming. For example,', 'The size of int is usually 4 bytes (32 bits). And, it can take 232 distinct states from -2147483648 to 2147483647.', 'In C, floating-point numbers can also be represented in exponential. For example,', 'Keyword char is used for declaring character type variables. For example,', 'void is an incomplete type. It means ""nothing"" or ""no type"". You can think of void as absent.', 'For example, if a function is not returning anything, its return type should be void.', ""If you need to use a large number, you can use a type specifier long. Here's how:"", 'Here variables a and b can store integer values. And, c can store a floating-point number.', 'If you are sure, only a small integer ([âˆ’32,767, +32,767] range) will be used, you can use short.', 'You can always check the size of a variable using the sizeof() operator.', 'In C, signed and unsigned are type modifiers. You can alter the data storage of a data type by using them:', 'Here, the variables x and num can hold only zero and positive values because we have used the unsigned modifier.']","['In C programming, data types are declarations for variables. This determines the type and size of data associated with variables. For example,', 'The size of float (single precision float data type) is 4 bytes. And the size of double (double precision float data type) is 8 bytes.', 'Considering the size of int is 4 bytes, variable y can hold values from -231 to 231-1, whereas variable x can hold values from 0 to 232-1.', 'Data types that are derived from fundamental data types are derived types. For example: arrays, pointers, function types, structures, etc.']","['int myVar;', 'int id, age;', 'float salary;', 'double price;', ""char test = 'h';"", 'long long b;', 'long double c;', '#include <stdio.h>      ', 'int main() {', '  short a;', '  long b;', '  long long c;', '  long double d;', '  return 0;', 'unsigned int x = 35;', 'int y = -35;  // signed int', 'int z = 36;  // signed int', 'unsigned int num = -35;']","['float normalizationFactor = 22.442e2;', '  printf(""size of short = %d bytes\\n"", sizeof(a));', '  printf(""size of long = %d bytes\\n"", sizeof(b));', '  printf(""size of long long = %d bytes\\n"", sizeof(c));', '  printf(""size of long double= %d bytes\\n"", sizeof(d));']",['short d;'],"['ype|||Size (bytes)|||Format Specifier&&&nt|||at least 2, usually 4|||%d, %i&&&har|||1|||%c&&&loat|||4|||%f&&&ouble|||8|||%lf&&&hort int|||2 usually|||%hd&&&nsigned int|||at least 2, usually 4|||%u&&&ong int|||at least 4, usually 8|||%ld, %li&&&ong long int|||at least 8|||%lld, %lli&&&nsigned long int|||at least 4|||%lu&&&nsigned long long int|||at least 8|||%llu&&&igned char|||1|||%c&&&nsigned char|||1|||%c&&&ong double|||at least 10, usually 12 or 16|||%Lf']",['signed - allows for storage of both positive and negative numbers|||unsigned - allows for storage of only positive numbers|||bool type|||Enumerated type|||Complex types|||']
3,['C Input Output (I/O)'],"['In this tutorial, you will learn to use scanf() function to take input from the user, and printf() function to display output to the user.']",['Video: Get User Input in C Programming'],['https://www.youtube.com/embed/17gp5DJEyiw?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],"['C Output', 'C Input', 'I/O Multiple Values', 'Format Specifiers for I/O']","['Example 1: C Output', 'Example 2: Integer Output', 'Example 3: float and double Output', 'Example 4: Print Characters', 'Example 5: Integer Input/Output', 'Example 6: Float and Double Input/Output', 'Example 7: C Character I/O', 'Example 8: ASCII Value']",[],"['Output', 'How does this program work?', 'Output', 'Output', 'Output', 'To print char, we use %c format specifier.', 'Output', 'Output', 'Output', 'Output', 'Output', 'As you can see from the above examples, we use']","['In C programming, printf() is one of the main output function. The function sends formatted output to the screen. For example,', 'To print float, we use %f format specifier. Similarly, we use %lf to print double values.', 'We use %f and %lf format specifier for float and double respectively.', ""Here's how you can take multiple inputs from the user and display them."", ""Here's a list of commonly used C data types and their format specifiers.""]","['In C programming, scanf() is one of the commonly used function to take input from the user. The scanf() function reads formatted input from the standard input such as keyboards.', 'Here, we have used %d format specifier inside the scanf() function to take int input from the user. When the user enters an integer, it is stored in the testInteger variable.', 'Notice, that we have used &testInteger inside scanf(). It is because &testInteger gets the address of testInteger, and the value entered by the user is stored in that address.', 'When a character is entered by the user in the above program, the character itself is not stored. Instead, an integer value (ASCII value) is stored.', ""And when we display that value using %c text format, the entered character is displayed. If we use %d to display the character, it's ASCII value is printed.""]","['#include <stdio.h>    ', 'int main()', '    printf(""C Programming"");', '    return 0;', '#include <stdio.h>', 'int main()', '    int testInteger = 5;', '    return 0;', '#include <stdio.h>', 'int main()', '    float number1 = 13.5;', '    double number2 = 12.4;', '    return 0;', '#include <stdio.h>', 'int main()', ""    char chr = 'a';    "", '    return 0;', '#include <stdio.h>', 'int main()', '    int testInteger;', '    return 0;', '#include <stdio.h>', 'int main()', '    float num1;', '    double num2;', '    scanf(""%f"", &num1);', '    scanf(""%lf"", &num2);', '    return 0;', '#include <stdio.h>', 'int main()', '    char chr;', '    scanf(""%c"",&chr);     ', '    return 0;', '#include <stdio.h>', 'int main()', '    char chr;', '    scanf(""%c"", &chr);     ', '    return 0;', '#include <stdio.h>', 'int main()', '    int a;', '    float b;', '    scanf(""%d%f"", &a, &b);', '    return 0;']","['    printf(""Number = %d"", testInteger);', '    printf(""number1 = %f\\n"", number1);', '    printf(""number2 = %lf"", number2);', '    printf(""character = %c"", chr);  ', '    printf(""Enter an integer: "");', '    scanf(""%d"", &testInteger);  ', '    printf(""Number = %d"",testInteger);', '    printf(""Enter another number: "");', '    printf(""num1 = %f\\n"", num1);', '    printf(""Enter a character: "");', '    printf(""You entered %c."", chr);  ', '    printf(""Enter a character: "");', '    printf(""You entered %c.\\n"",chr);  ', '    printf(""ASCII value is %d."", chr);  ', '    printf(""Enter integer and then a float: "");', '    printf(""You entered %d and %f"", a, b);  ']","['C Programming', 'Number = 5', 'number1 = 13.500000', 'number2 = 12.400000', 'character = a', 'Enter an integer: 4', 'Number = 4', 'Enter a number: 12.523', 'Enter another number: 10.2', 'num1 = 12.523000', 'num2 = 10.200000', 'Enter a character: g', 'You entered g', 'Enter a character: g', 'You entered g.', 'ASCII value is 103.', 'Enter integer and then a float: -3', '3.4', 'You entered -3 and 3.400000']",['ata Type|||Format Specifier&&&nt|||%d&&&har|||%c&&&loat|||%f&&&ouble|||%lf&&&hort int|||%hd&&&nsigned int|||%u&&&ong int|||%li&&&ong long int|||%lli&&&nsigned long int|||%lu&&&nsigned long long int|||%llu&&&igned char|||%c&&&nsigned char|||%c&&&ong double|||%Lf'],"['All valid C programs must contain the main() function. The code execution begins from the start of the main() function.|||The printf() is a library function to send formatted output to the screen. The function prints the string inside quotations.|||To use printf() in our program, we need to include stdio.h header file using the\xa0#include <stdio.h> statement.|||The return 0; statement inside the main() function is the ""Exit status"" of the program. It\'s optional.|||%d for int|||%f for float|||%lf for double|||%c for char|||']"
4,['C Programming Operators'],"['In this tutorial, you will learn about different operators in C programming with the help of examples.']",['Video: Arithmetic Operators in C'],['https://www.youtube.com/embed/_57FcSBtJNU?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],"['C Arithmetic Operators', 'C Increment and Decrement Operators', 'C Assignment Operators', 'Other Operators']","['Example 1: Arithmetic Operators', 'Example 2: Increment and Decrement Operators', 'Example 3: Assignment Operators', 'C Relational Operators', 'Example 4: Relational Operators', 'C Logical Operators', 'Example 5: Logical Operators', 'C Bitwise Operators', 'Comma Operator', 'The sizeof operator', 'Example 6: sizeof Operator']",[],"['C has a wide range of operators to perform various operations.', 'Output', 'Suppose a = 5.0, b = 2.0, c = 5 and d = 2. Then in C programming,', 'Output', 'Output', 'Relational operators are used in decision making and loops.', 'Output', 'Output', 'Explanation of logical operator program', 'Visit bitwise operator in C to learn more.', 'Output']","['An operator is a symbol that operates on a value or a variable. For example: + is an operator to perform addition.', 'The operators +, - and * computes addition, subtraction, and multiplication respectively as you might have expected.', 'In normal calculation, 9/4 = 2.25. However, the output is 2 in the program.', 'C programming has two operators increment ++ and decrement -- to change the value of an operand (constant or variable) by 1.', 'An assignment operator is used for assigning a value to a variable. The most common assignment operator is =', 'Bitwise operators are used in C programming to perform bit-level operations.', 'Comma operators are used to link related expressions together. For example:', 'The sizeof is a unary operator that returns the size of data (constants, variables, array, structure, etc).']","['An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables).', 'It is because both the variables a and b are integers. Hence, the output is also an integer. The compiler neglects the term after the decimal point and shows answer 2 instead of 2.25.', 'The modulo operator % computes the remainder. When a=9 is divided by b=4, the remainder is 1. The % operator can only be used with integers.', 'Increment ++ increases the value by 1 whereas decrement -- decreases the value by 1. These two operators are unary operators, meaning they only operate on a single operand.', 'Here, the operators ++ and -- are used as prefixes. These two operators can also be used as postfixes like a++ and a--. Visit this page to learn more about how increment and decrement operators work when used as postfix.', 'A relational operator checks the relationship between two operands. If the relation is true, it returns 1; if the relation is false, it returns value 0.', 'An expression containing logical operator returns either 0 or 1 depending upon whether expression results true or false. Logical operators are commonly used in decision making in C programming.', 'During computation, mathematical operations like: addition, subtraction, multiplication, division, etc are converted to bit-level which makes processing faster and saves power.', 'Other operators such as ternary operator ?:, reference operator &, dereference operator * and member selection operator\xa0->\xa0will be discussed in later tutorials.']","['#include <stdio.h>', 'int main()', '    int a = 9,b = 4, c;', '    c = a+b;', '    printf(""a+b = %d \\n"",c);', '    c = a-b;', '    printf(""a-b = %d \\n"",c);', '    c = a*b;', '    printf(""a*b = %d \\n"",c);', '    c = a/b;', '    printf(""a/b = %d \\n"",c);', '    c = a%b;', '    return 0;', '#include <stdio.h>', 'int main()', '    int a = 10, b = 100;', '    float c = 10.5, d = 100.5;', '    return 0;', '#include <stdio.h>', 'int main()', '    int a = 5, c;', '    c = a;      // c is 5', '    printf(""c = %d\\n"", c);', '    c += a;     // c is 10 ', '    printf(""c = %d\\n"", c);', '    c -= a;     // c is 5', '    printf(""c = %d\\n"", c);', '    c *= a;     // c is 25', '    printf(""c = %d\\n"", c);', '    c /= a;     // c is 5', '    printf(""c = %d\\n"", c);', '    c %= a;     // c = 0', '    printf(""c = %d\\n"", c);', '    return 0;', '#include <stdio.h>', 'int main()', '    int a = 5, b = 5, c = 10;', '    return 0;', '#include <stdio.h>', 'int main()', '    result = !(a != b);', '    result = !(a == b);', '    return 0;', 'int a, c = 5, d;', '#include <stdio.h>', 'int main()', '    int a;', '    float b;', '    double c;', '    char d;', '    return 0;']","['    printf(""Remainder when a divided by b = %d \\n"",c);', '    printf(""%d == %d is %d \\n"", a, b, a == b);', '    printf(""%d == %d is %d \\n"", a, c, a == c);', '    printf(""%d > %d is %d \\n"", a, b, a > b);', '    printf(""%d > %d is %d \\n"", a, c, a > c);', '    printf(""%d < %d is %d \\n"", a, b, a < b);', '    printf(""%d < %d is %d \\n"", a, c, a < c);', '    printf(""%d != %d is %d \\n"", a, b, a != b);', '    printf(""%d != %d is %d \\n"", a, c, a != c);', '    printf(""%d >= %d is %d \\n"", a, b, a >= b);', '    printf(""%d >= %d is %d \\n"", a, c, a >= c);', '    printf(""%d <= %d is %d \\n"", a, b, a <= b);', '    printf(""%d <= %d is %d \\n"", a, c, a <= c);', '    int a = 5, b = 5, c = 10, result;', '    result = (a == b) && (c > b);', '    printf(""(a == b) && (c > b) is %d \\n"", result);', '    result = (a == b) && (c < b);', '    printf(""(a == b) && (c < b) is %d \\n"", result);', '    result = (a == b) || (c < b);', '    printf(""(a == b) || (c < b) is %d \\n"", result);', '    result = (a != b) || (c < b);', '    printf(""(a != b) || (c < b) is %d \\n"", result);', '    printf(""!(a != b) is %d \\n"", result);', '    printf(""!(a == b) is %d \\n"", result);', '    printf(""Size of int=%lu bytes\\n"",sizeof(a));', '    printf(""Size of float=%lu bytes\\n"",sizeof(b));', '    printf(""Size of double=%lu bytes\\n"",sizeof(c));', '    printf(""Size of char=%lu byte\\n"",sizeof(d));']","['a+b = 13', 'a-b = 5', 'a*b = 36', 'a/b = 2', 'Remainder when a divided by b=1', 'a/b = 2.5  ', 'a/d = 2.5  ', 'c/b = 2.5  ', 'c/d = 2', '++a = 11', '--b = 99', '++c = 11.500000', '--d = 99.500000', 'c = 5 ', 'c = 10 ', 'c = 5 ', 'c = 25 ', 'c = 5 ', 'c = 0', '5 == 5 is 1', '5 == 10 is 0', '5 > 5 is 0', '5 > 10 is 0', '5 < 5 is 0', '5 < 10 is 1', '5 != 5 is 0', '5 != 10 is 1', '5 >= 5 is 1', '5 >= 10 is 0', '5 <= 5 is 1', '5 <= 10 is 1 ', '(a == b) && (c > b) is 1 ', '(a == b) && (c < b) is 0 ', '(a == b) || (c < b) is 1 ', '(a != b) || (c < b) is 0 ', '!(a != b) is 1 ', '!(a == b) is 0 ', 'Size of int = 4 bytes', 'Size of float = 4 bytes', 'Size of double = 8 bytes', 'Size of char = 1 byte']","['perator|||Meaning of Operator&&&|||addition or unary plus&&&|||subtraction or unary minus&&&|||multiplication&&&|||division&&&|||remainder after division (modulo division)', 'perator|||Example|||Same as&&&|||a = b|||a = b&&&=|||a += b|||a = a+b&&&=|||a -= b|||a = a-b&&&=|||a *= b|||a = a*b&&&=|||a /= b|||a = a/b&&&=|||a %= b|||a = a%b', 'perator|||Meaning of Operator|||Example&&&=|||Equal to|||5 == 3 is evaluated to 0&&&|||Greater than|||5 > 3 is evaluated to 1&&&|||Less than|||5 < 3 is evaluated to 0&&&=|||Not equal to|||5 != 3 is evaluated to 1&&&=|||Greater than or equal to|||5 >= 3 is evaluated to 1&&&=|||Less than or equal to|||5 <= 3 is evaluated to 0', 'perator|||Meaning|||Example&&&&|||Logical AND. True only if all operands are true|||If c = 5 and d = 2 then, expression ((c==5) && (d>5)) equals to 0.&&&||||Logical OR. True only if either one operand is true|||If c = 5 and d = 2 then, expression ((c==5) || (d>5)) equals to 1.&&&|||Logical NOT. True only if the operand is 0|||If c = 5 then, expression !(c==5) equals to 0.', 'perators|||Meaning of operators&&&|||Bitwise AND&&&|||Bitwise OR&&&|||Bitwise exclusive OR&&&|||Bitwise complement&&&<|||Shift left&&&>|||Shift right']","['(a == b) && (c > 5) evaluates to 1 because both operands (a == b) and (c > b) is 1 (true).|||(a == b) && (c < b) evaluates to 0 because operand (c < b) is 0 (false).|||(a == b) || (c < b) evaluates to 1 because (a = b) is 1 (true).|||(a != b) || (c < b) evaluates to 0 because both operand (a != b) and (c < b) are 0 (false).|||!(a != b) evaluates to 1 because operand (a != b) is 0 (false). Hence, !(a != b) is 1 (true).|||!(a == b) evaluates to 0 because (a == b) is 1 (true). Hence, !(a == b) is 0 (false).|||']"
5,['C Introduction Examples'],"['In this article, you will find a list of simple C programs such as: displaying a line, adding two numbers, find ASCII value of a character, etc.']",[],[],['Examples'],[],[],"['We have learned about the following topics so far:', 'To understand these topics better, we have created some examples.']","['Before you go through these examples, we suggest you to try creating these programs\xa0on our own.']","['We understand that programming can by start If you are just a programming newbie. In that case, go through each example below and see if you can understand them. Once you do that, try writing these programs on your own.']",[],[],[],"[' program to print a sentence&&& program to print an integer entered by the user&&& program to add two integers entered by the User&&& program to multiply two floating-point numbers&&& program to find ASCII value of a character entered by the user&&& program to find quotient and remainder of Two Integers&&& program to find the size of int, float, double and char&&& program to demonstrate the working of keyword long&&& program to swap two numbers']",['Variables and Constants|||Data Types|||Input and Output in C programming|||Operators|||']
6,['C if...else Statement'],"['In this tutorial, you will learn about the if statement (including if...else and nested if..else) in C programming with the help of examples.']",['Video: C if else Statement'],['https://www.youtube.com/embed/K8mntKyBJGc?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],"['C if Statement', 'C if...else Statement', 'C if...else Ladder', 'Nested if...else']","['How if statement works?', 'Example 1: if statement', 'How if...else statement works?', 'Example 2: if...else statement', 'Syntax of if...else Ladder', 'Example 3: C if...else Ladder', 'Example 4: Nested if...else']","['//cdn.programiz.com/sites/tutorial2program/files/working-c-if-statement.jpg', '//cdn.programiz.com/sites/tutorial2program/files/how-if-else-works-c-programming.jpg']","['The syntax of the if statement in C programming is:', 'Output 1', 'Output 2', 'If the test expression is evaluated to true,', 'If the test expression is evaluated to false,', 'Output', 'Output', 'For example, this code', 'is equivalent to']","['The if statement evaluates the test expression inside the parenthesis ().', 'When the user enters -2, the test expression number<0 is evaluated to true. Hence, You entered -2 is displayed on the screen.', 'The if statement may have an optional else block. The syntax of the if..else statement is:', 'The if...else ladder allows you to check between multiple test expressions and execute different statements.', 'It is possible to include an if...else statement inside the body of another if...else statement.', 'If the body of an if...else statement has only one statement, you do not need to use brackets {}.']","['To learn more about when test expression is evaluated to true (non-zero value) and false (0), check relational and logical operators.', 'When the user enters 5, the test expression number<0 is evaluated to false and the statement inside the body of if is not executed', 'When the user enters 7, the test expression number%2==0 is evaluated to false. Hence, the statement inside the body of else is executed.', 'The if...else statement executes two different codes depending upon whether the test expression is true or false. Sometimes, a choice has to be made from more than 2 possibilities.', ""This program given below relates two integers using either <, > and = similar to the if...else ladder's example. However, we will use a nested if...else statement to solve this problem.""]","['if (test expression) ', '#include <stdio.h>', 'int main() {', '    int number;', '    scanf(""%d"", &number);', '    if (number < 0) {', '    return 0;', 'if (test expression) {', '#include <stdio.h>', 'int main() {', '    int number;', '    scanf(""%d"", &number);', '    if  (number%2 == 0) {', '    else {', '    return 0;', 'if (test expression1) {', 'else if(test expression2) {', 'else if (test expression3) {', '#include <stdio.h>', 'int main() {', '    int number1, number2;', '    if(number1 == number2) {', '    else {', '    return 0;', '#include <stdio.h>', 'int main() {', '    int number1, number2;', '    if (number1 >= number2) {', '      else {', '    else {', '    return 0;', 'if (a > b) {', '    printf(""Hello"");', 'printf(""Hi"");', 'if (a > b)', '    printf(""Hello"");', 'printf(""Hi"");']","['    printf(""Enter an integer: "");', '        printf(""You entered %d.\\n"", number);', '    printf(""The if statement is easy."");', '    printf(""Enter an integer: "");', '        printf(""%d is an even integer."",number);', '        printf(""%d is an odd integer."",number);', '    printf(""Enter two integers: "");', '    scanf(""%d %d"", &number1, &number2);', '        printf(""Result: %d = %d"",number1,number2);', '    else if (number1 > number2) {', '        printf(""Result: %d > %d"", number1, number2);', '        printf(""Result: %d < %d"",number1, number2);', '    printf(""Enter two integers: "");', '    scanf(""%d %d"", &number1, &number2);', '        printf(""Result: %d = %d"",number1,number2);', '        printf(""Result: %d > %d"", number1, number2);', '        printf(""Result: %d < %d"",number1, number2);']","['Enter an integer: -2', 'You entered -2.', 'The if statement is easy.', 'Enter an integer: 5', 'The if statement is easy.', 'Enter an integer: 7', '7 is an odd integer.', 'Enter two integers: 12', '23', 'Result: 12 < 23']",[],"['If the test expression is evaluated to true, statements inside the body of if are executed.|||If the test expression is evaluated to false, statements inside the body of if are not executed.|||statements inside the body of if are executed.|||statements inside the body of else are skipped from execution.|||statements inside the body of else are executed|||statements inside the body of if are skipped from execution.|||']"
7,['C for Loop'],"['In this tutorial, you will learn to create for loop in C programming with the help of examples.']",['Video: C while Loop'],['https://www.youtube.com/embed/Xtl1oGtcX-8?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],['for Loop'],"['How for loop works?', 'for loop Flowchart', 'Example 1: for loop', 'Example 2: for loop']",['//cdn.programiz.com/sites/tutorial2program/files/c-for-loop.jpg'],"['C programming has three types of loops:', 'The syntax of the for loop is:', 'Output', 'Output', 'Then, the value of sum is printed on the screen.']","['In programming, a loop is used to repeat a block of code until the specified condition is met.', 'We will learn about for loop in this tutorial. In the next tutorial, we will learn about while and do...while loop.', 'This process goes on until the test expression is false. When the test expression is false, the loop terminates.', 'The value entered by the user is stored in the variable num. Suppose, the user entered 10.', 'This process goes on and the sum is calculated until the count reaches 11.', 'When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates.', 'We will learn about while loop and do...while loop in the next tutorial.']","['To learn more about test expression (when the test expression is evaluated to true and false), check out relational and logical operators.', 'The count is initialized to 1 and the test expression is evaluated. Since the test expression count<=num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum will equal to 1.', 'Then, the update statement ++count is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the for loop is executed. Now, sum will equal 3.']","['#include <stdio.h>', 'int main() {', '  int i;', '  for (i = 1; i < 11; ++i)', '    printf(""%d "", i);', '  return 0;', '#include <stdio.h>', 'int main()', '    int num, count, sum = 0;', '    scanf(""%d"", &num);', '        sum += count;', '    printf(""Sum = %d"", sum);', '    return 0;']","['for (initializationStatement; testExpression; updateStatement)', '    printf(""Enter a positive integer: "");', '    for(count = 1; count <= num; ++count)']","['1 2 3 4 5 6 7 8 9 10', 'Enter a positive integer: 10', 'Sum = 55']",[],"['The initialization statement is executed only once.|||Then, the test expression is evaluated. If the test expression is evaluated to false, the for loop is terminated.|||However, if the test expression is evaluated to true, statements inside the body of the for loop are executed, and the update expression is updated.|||Again the test expression is evaluated.|||&&&for loop|||while loop|||do...while loop|||i is initialized to 1.|||The test expression i < 11 is evaluated. Since 1 less than 11 is true, the body of for loop is executed. This will print the 1 (value of i) on the screen.|||The update statement ++i is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print 2 (value of i) on the screen.|||Again, the update statement ++i is executed and the test expression i < 11 is evaluated. This process goes on until i becomes 11.|||When i becomes 11, i < 11 will be false, and the for loop terminates.|||']"
8,['C while and do...while Loop'],"['In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples.']",['Video: C while Loop'],['https://www.youtube.com/embed/WgS_SF1VrEk?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],"['while loop', 'do...while loop']","['How while loop works?', 'Flowchart of while loop', 'Example 1: while loop', 'How do...while loop works?', 'Flowchart of do...while Loop', 'Example 2: do...while loop']","['//cdn.programiz.com/sites/tutorial2program/files/c-while-loop_0.jpg', '//cdn.programiz.com/sites/tutorial2program/files/c-do-while-loop_0.jpg']","['C programming has three types of loops.', 'The syntax of the while loop is:', 'Output', 'Here, we have initialized i to 1.', 'The syntax of the do...while loop is:', 'Output', 'Outside the loop, we print the value of sum.']","['In programming, loops are used to repeat a block of code until a specified condition is met.', 'In the previous tutorial, we learned about for loop. In this tutorial, we will learn about while and do..while loop.', 'But if the first input is\xa00, there will be no second iteration of the loop and\xa0sum\xa0becomes 0.0.']","['To learn more about test expressions (when\xa0testExpression is evaluated to true and false), check out relational and logical operators.', 'The do..while loop is similar to the while loop with one important difference. The body of do...while loop is executed at least once. Only then, the test expression is evaluated.', 'The\xa0do...while loop\xa0executes at least once i.e. the first iteration runs without checking the condition.\xa0The condition is checked only after the first iteration has been executed.', 'So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters\xa00.']","['while (testExpression) {', '#include <stdio.h>', 'int main() {', '  int i = 1;', '  while (i <= 5) {', '    printf(""%d\\n"", i);', '    ++i;', '  return 0;', 'while (testExpression);', '#include <stdio.h>', 'int main() {', '  double number, sum = 0;', '    scanf(""%lf"", &number);', '    sum += number;', '  while(number != 0.0);', '  printf(""Sum = %.2lf"",sum);', '  return 0;', '  printf(""Enter a number: "");', '  scanf(""%lf"", &number);', '  sum += number;', 'while(number != 0.0);']",[],"['1', '2', '3', '4', '5', 'Enter a number: 1.5', 'Enter a number: 2.4', 'Enter a number: -3.4', 'Enter a number: 4.2', 'Enter a number: 0', 'Sum = 4.70']",[],"['The while loop evaluates the testExpression inside the parentheses ().|||If\xa0testExpression is true, statements inside the body of while loop are executed. Then, testExpression is evaluated again.|||The process goes on until testExpression is evaluated to false.|||If\xa0testExpression is false, the loop terminates (ends).|||The body of do...while loop is executed once. Only then, the testExpression is evaluated.|||If testExpression is true, the body of the loop is executed again\xa0and testExpression is\xa0evaluated once more.|||This process goes on until testExpression becomes false.|||If testExpression is false, the loop ends.|||&&&for loop|||while loop|||do...while loop|||When i\xa0= 1, the test expression i <= 5 is true. Hence, the body of the while loop is executed. This prints 1 on the screen and the value of i is increased to 2.|||Now, i\xa0= 2, the test expression i <= 5 is again true. The body of the while loop is executed again. This prints 2 on the screen and the value of i is increased to 3.|||This process goes on until i becomes 6. Then, the test expression i <= 5 will be false and the loop terminates.|||']"
9,['C break and continue'],"['We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples.']",['Video: C break and continue'],['https://www.youtube.com/embed/DpPf9XskST8?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],"['C break', 'C continue']","['How break statement works?', 'Example 1: break statement', 'How continue statement works?', 'Example 2: continue statement']","['//cdn.programiz.com/sites/tutorial2program/files/c-break-statement-works.jpg', '//cdn.programiz.com/sites/tutorial2program/files/c-continue-statement-works.jpg']","['Output', 'Output']","['The break statement ends the loop immediately when it is encountered. Its syntax is:', 'The break statement is almost always used with if...else statement inside the loop.', 'In C, break is also used with the switch statement. This will be discussed in the next tutorial.', 'The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is:', 'The continue statement is almost always used with the if...else statement.', 'In this program, when the user enters a positive number, the sum is calculated using sum += number; statement.']","[""This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the break statement is executed. This will end the for loop, and the sum is displayed."", 'When the user enters a negative number, the continue statement is executed and it skips the negative number from the calculation.']","['#include <stdio.h>', 'int main() {', '   int i;', '   double number, sum = 0.0;', '   for (i = 1; i <= 10; ++i) {', '      scanf(""%lf"", &number);', '      if (number < 0.0) {', '         break;', '   printf(""Sum = %.2lf"", sum);', '   return 0;', 'continue;', '#include <stdio.h>', 'int main() {', '   int i;', '   double number, sum = 0.0;', '   for (i = 1; i <= 10; ++i) {', '      scanf(""%lf"", &number);', '      if (number < 0.0) {', '         continue;', '   printf(""Sum = %.2lf"", sum);', '   return 0;']","['      sum += number; // sum = sum + number;', '      printf(""Enter a n%d: "", i);', '      sum += number; // sum = sum + number;']","['Enter n1: 2.4', 'Enter n2: 4.5', 'Enter n3: 3.4', 'Enter n4: -3', 'Sum = 10.30', 'Enter n1: 1.1', 'Enter n2: 2.2', 'Enter n3: 5.5', 'Enter n4: 4.4', 'Enter n5: -3.4', 'Enter n6: -45.5', 'Enter n7: 34.5', 'Enter n8: -4.2', 'Enter n9: -1000', 'Enter n10: 12', 'Sum = 59.70']",[],[]
10,['C switch Statement'],"['In this tutorial, you will learn to create the switch statement in C programming with the help of an example.']",['Video: C if switch case'],['https://www.youtube.com/embed/u6mb8NNwojA?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],['Syntax of switch...case'],"['switch Statement Flowchart', 'Example: Simple Calculator']",['//cdn.programiz.com/sites/tutorial2program/files/flowchart-switch-statement.jpg'],"['How does the switch statement work?', 'Notes:', 'Output', 'Since the operation\xa0is -, the control of the program jumps to', 'Finally, the break statement terminates the switch statement.']","['The switch statement allows us to execute one code block among many alternatives.', 'The expression is evaluated once and compared with the values of each case label.']","['You can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is much easier to read and write.', 'The - operator entered by the user is stored in the operation\xa0variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively.']","['switch (expression)', '    case constant1:', '      break;', '    case constant2:', '      break;', '    default:', '#include <stdio.h>', 'int main() {', '    char operation;', '    double n1, n2;', '    scanf(""%c"", &operation);', '    scanf(""%lf %lf"",&n1, &n2);', '    switch(operation)', ""        case '+':"", '            break;', ""        case '-':"", '            break;', ""        case '*':"", '            break;', ""        case '/':"", '            break;', '        default:', '    return 0;']","['    printf(""Enter an operator (+, -, *, /): "");', '    printf(""Enter two operands: "");', '            printf(""%.1lf + %.1lf = %.1lf"",n1, n2, n1+n2);', '            printf(""%.1lf - %.1lf = %.1lf"",n1, n2, n1-n2);', '            printf(""%.1lf * %.1lf = %.1lf"",n1, n2, n1*n2);', '            printf(""%.1lf / %.1lf = %.1lf"",n1, n2, n1/n2);', '            printf(""Error! operator is not correct"");']","['Enter an operator (+, -, *, /): -', 'Enter two operands: 32.5', '12.4', '32.5 - 12.4 = 20.1', 'printf(""%.1lf - %.1lf = %.1lf"", n1, n2, n1-n2);']",[],"['If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered.|||If there is no match, the default statements are executed.|||If we do not use the break statement, all statements after the matching label are also executed.|||The default clause inside the switch statement is optional.|||']"
11,['C goto Statement'],"['In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it.']",[],[],[],"['Syntax of goto Statement', 'Example: goto Statement', 'Reasons to avoid goto', 'Should you use goto?']",['//cdn.programiz.com/sites/tutorial2program/files/c-goto-statement.jpg'],['Output'],"['The goto statement allows us to transfer control of the program to the specified label.', 'The use of goto statement may lead to code that is buggy and hard to follow. For example,', 'Also, the goto statement allows you to do bad stuff such as jump out of the scope.', 'That being said, goto can be useful sometimes. For example: to break from nested loops.', 'Here\'s a quote from Bjarne Stroustrup, creator of C++, ""The fact that \'goto\' can do anything is exactly why we don\'t use it.""']","['The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code.', 'If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program\xa0without using goto altogether.']","['goto label;', '... .. ...', '... .. ...', 'statement;', '#include <stdio.h>', 'int main() {', '   const int maxInput = 100;', '   int i;', '      scanf(""%lf"", &number);', '      if (number < 0.0) {', '         goto jump;', '      sum += number;', '   average = sum / (i - 1);', '   return 0;', 'for (i = 0; i < number; ++i)', '    test += i;', '    goto two;', 'if (test > 5) {', '  goto three;', '... .. ...']","['   double number, average, sum = 0.0;', '   for (i = 1; i <= maxInput; ++i) {', '      printf(""%d. Enter a number: "", i);', '   printf(""Average = %.2f"", average);']","['1. Enter a number: 3', '2. Enter a number: 4.3', '3. Enter a number: 9.3', '4. Enter a number: -2.9', 'Sum = 16.60', 'Average = 5.53']",[],[]
12,['C Control Flow Examples'],"['In this article, you will find a list of C programs to sharpen your knowledge of decision-making statements and loops.']",[],[],['C Control Flow Examples'],[],[],[],"['To understand all the examples on this page, you should know about the following topics:']",[],[],[],[],['heck whether a number is even or odd&&&heck whether a character is a vowel or consonant&&&ind the largest number among three numbers&&&ind all roots of a quadratic equation&&&heck Whether the Entered Year is Leap Year or not&&&heck Whether a Number is Positive or Negative or Zero.&&&hecker whether a character is an alphabet or not&&&ind the sum of natural numbers&&&ind factorial of a number&&&enerate multiplication table&&&isplay Fibonacci series&&&ind HCF of two numbers&&&ind LCM of two numbers&&&ount number of digits of an integer&&&everse a number &&&alculate the power of a number&&&heck whether a number is a palindrome or not&&&heck whether an integer is prime or Not&&&isplay prime numbers between two intervals&&&heck Armstrong number&&&isplay Armstrong numbers between two intervals&&&isplay factors of a number&&&rint pyramids and triangles&&&reate a simple calculator'],['if...else Statement|||for Loop |||while Loop|||break and continue|||switch...case|||']
13,['C Functions'],"['In this tutorial, you will be introduced to functions (both user-defined and standard library functions) in C programming. Also, you will learn why functions are used in programming.']",['Video: C functions'],['https://www.youtube.com/embed/Npo1u37lcg8?list=PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e&origin=https://www.programiz.com'],"['Types of function', 'How user-defined function works?']","['Standard library functions', 'User-defined function', 'Advantages of user-defined function']",['//cdn.programiz.com/sites/tutorial2program/files/function-c-programming.jpg'],"['A function is a block of code that performs a specific task.', 'There are two types of function in C programming:', 'These functions are defined in header files.\xa0For example,', 'Visit\xa0standard library functions in C programming\xa0to learn more.', 'The execution of a C program begins from the main() function.', 'Note, function names are identifiers and should be unique.']","['Suppose, you need to create a program to create a circle and color it. You can create two functions to solve this problem:', 'Dividing a complex problem into smaller chunks makes our program easy to understand and reuse.', 'The standard library functions are built-in functions in C programming.', 'You can also create functions as per your need. Such functions created by the user are known as user-defined functions.', 'When the compiler encounters functionName();, control of the program jumps to', 'And, the compiler starts executing the codes inside functionName().', 'The control of the program jumps back to the main() function\xa0once code\xa0inside the function definition is executed.', 'This is just an overview of user-defined functions. Visit these pages to learn more on:']",[],[],[],"['#include <stdio.h>', 'void functionName()', '{', '    ... .. ...', '    ... .. ...', '}', 'int main()', '{', '    ... .. ...', '    ... .. ...', '    functionName();', '    ', '    ... .. ...', '    ... .. ...', '}', ' void functionName()']",[],"['create a circle function|||create a color function|||Standard library functions|||User-defined functions|||The printf() is a standard library function to send formatted output to the screen (display output on the screen). This function is defined in the\xa0stdio.h\xa0header file.|||Hence, to use the printf() function, we need to include the stdio.h header file using #include <stdio.h>.|||The sqrt() function calculates the square root of a number. The function is defined in the math.h header file.\xa0\xa0|||User-defined Function in C programming|||Types of user-defined Functions|||&&&The program will be easier to understand, maintain and debug.|||Reusable codes that can be used in other programs|||A large program can be divided into smaller modules. Hence, a large project can be divided among many programmers.|||']"
14,['C User-defined functions'],"['In this tutorial, you will learn to create user-defined functions in C programming with the help of an example.']",[],[],"['Example: User-defined function', 'Function prototype', 'Calling a function', 'Function definition', 'Passing arguments to a function', 'Return Statement']","['Syntax of function prototype', 'Syntax of function call', 'Syntax of return statement']","['//cdn.programiz.com/sites/tutorial2program/files/pass-arguments-c-programming.jpg', '//cdn.programiz.com/sites/tutorial2program/files/c-return-statement.jpg']","['A function is a block of code that performs a specific task.', 'A function can also be called without passing an argument.', 'For example,']","['C allows you to define functions according to your need. These functions are known as user-defined functions. For example:', 'Here is an example to add two integers. To perform this task, we have created an user-defined addNumbers().', 'A function prototype gives information to the compiler that the function may later be used in the program.', 'The function prototype is not needed if the user-defined function is defined before the main() function.', 'Control of the program is transferred to the user-defined function by calling it.', 'In the above example, the function call is made using addNumbers(n1, n2); statement inside the main() function.', 'The type of arguments passed to a function and the formal parameters must match, otherwise, the compiler will throw an error.', 'If n1 is of char type, a also should be of char type. If n2 is of float type, variable b also should be of float type.', 'Visit this page to learn more on passing arguments and returning value from a function.']","['Suppose, you need to create a circle and color it depending upon the radius and color. You can create two functions to solve this problem:', ""A function prototype is simply the declaration of a function that specifies function's name, parameters and return type. It doesn't contain function body."", 'In the above example, int addNumbers(int a, int b); is the function prototype which provides the following information to the compiler:', 'When a function is called, the control of the program is transferred to the function definition. And, the compiler starts executing the codes inside the body of a function.', 'In programming, argument refers to the variable passed to the function. In the above example, two variables n1 and n2 are passed during the function call.', 'The parameters a and b accepts the passed arguments in the function definition. These arguments are called formal parameters of the function.', 'The return statement terminates the execution of a function and returns a value to the calling function. The program control is transferred to the calling function after the return statement.', 'In the above example, the value of the result variable is returned to the main function. The sum variable in the main() function is assigned this value.', 'The type of value returned from the function and the return type specified in the function prototype and function definition must match.']","['#include <stdio.h>', 'int main()', '    int n1,n2,sum;', '    scanf(""%d %d"",&n1,&n2);', '    printf(""sum = %d"",sum);', '    return 0;', '    int result;', '    result = a+b;']","['int addNumbers(int a, int b);         // function prototype', '    printf(""Enters two numbers: "");', '    sum = addNumbers(n1, n2);        // function call', 'int addNumbers(int a, int b)         // function definition   ', '    return result;                  // return statement']","['returnType functionName(type1 argument1, type2 argument2, ...);', 'functionName(argument1, argument2, ...);', 'returnType functionName(type1 argument1, type2 argument2, ...)', '{', '}', 'return (expression);     ', 'return a;', 'return (a+b);']",[],['createCircle() function|||color() function|||&&&name of the function is addNumbers()|||return type of the function is int|||two arguments of type int are passed to the function|||']
15,['Types of User-defined Functions in C Programming'],"['In this tutorial, you will learn about different approaches you can take to solve the same problem using functions.']",[],[],"['Example 1: No arguments passed and no return value', 'Example 2: No arguments passed but a return value', 'Example 3: Argument passed but no return value', 'Example 4: Argument passed and a return value', 'Which approach is better?']",[],[],[],"['These 4 programs below check whether the integer entered by the user is a prime number or not.', 'The return type of the function is void. Hence, no value is returned from the function.', 'The integer value entered by the user is passed to the checkPrimeAndDisplay() function.', 'The input from the user is passed to the checkPrimeNumber() function.', 'The checkPrimeNumber() function checks whether the passed argument is prime or not.', 'Depending on whether flag is 0 or 1, an appropriate message is printed from the main() function.']","['The output of all these programs below is the same, and we have created a user-defined function in each example. However, the approach we have taken in each example is different.', 'The checkPrimeNumber() function takes input from the user, checks whether it is a prime number or not and displays it on the screen.', 'The empty parentheses in checkPrimeNumber(); statement inside the main() function indicates that no argument is passed to the function.', 'The empty parentheses in the n = getInteger(); statement indicates that no argument is passed to the function. And, the value returned from the function is assigned to n.', 'Here, the getInteger() function takes input from the user and returns it. The code to check whether a number is prime or not is inside the main() function.', 'Here, the checkPrimeAndDisplay() function checks whether the argument passed is a prime number or not and displays the appropriate message.', 'If the passed argument is a prime number, the function returns 0. If the passed argument is a non-prime number, the function returns 1. The return value is assigned to the flag variable.', 'Well, it depends on the problem you are trying to solve. In this case, passing argument and returning a value from the function (example 4) is better.', ""A function should perform a specific task. The checkPrimeNumber() function doesn't take input from the user nor it displays the appropriate message. It only checks whether a number is prime or not.""]","['#include <stdio.h>', 'void checkPrimeNumber();', 'int main()', '    return 0;', 'void checkPrimeNumber()', '    int n, i, flag = 0;', '    scanf(""%d"",&n);', '    for(i=2; i <= n/2; ++i)', '        if(n%i == 0)', '        {', '            flag = 1;', '        }', '    if (flag == 1)', '    else', '#include <stdio.h>', 'int getInteger();', 'int main()', '    int n, i, flag = 0;', '    n = getInteger();    ', '    for(i=2; i<=n/2; ++i)', '        if(n%i==0){', '            flag = 1;', '            break;', '        }', '    if (flag == 1)', '    else', '    return 0;', 'int getInteger()       ', '    int n;', '    scanf(""%d"",&n);', '    return n;', '#include <stdio.h>', 'int main()', '    int n;', '    scanf(""%d"",&n);', '    checkPrimeAndDisplay(n);', '    return 0;', '    int i, flag = 0;', '    for(i=2; i <= n/2; ++i)', '        if(n%i == 0){', '            flag = 1;', '            break;', '        }', '    if(flag == 1)', '    else', '#include <stdio.h>', 'int checkPrimeNumber(int n);', 'int main()', '    int n, flag;', '    scanf(""%d"",&n);', '    if(flag == 1)', '    else', '    return 0;', 'int checkPrimeNumber(int n)', '    int i;', '    for(i=2; i <= n/2; ++i)', '        if(n%i == 0)', '            return 1;', '    return 0;']","['    checkPrimeNumber();    // argument is not passed', '    printf(""Enter a positive integer: "");', '        printf(""%d is not a prime number."", n);', '        printf(""%d is a prime number."", n);', '        printf(""%d is not a prime number."", n);', '        printf(""%d is a prime number."", n);', '    printf(""Enter a positive integer: "");', 'void checkPrimeAndDisplay(int n);', '    printf(""Enter a positive integer: "");', 'void checkPrimeAndDisplay(int n) ', '        printf(""%d is not a prime number."",n);', '        printf(""%d is a prime number."", n);', '    printf(""Enter a positive integer: "");', '        printf(""%d is not a prime number"",n);', '        printf(""%d is a prime number"",n);']",[],[],[]
16,['C Recursion '],"['In this tutorial, you will learn to write recursive functions in C programming with the help of an example.']",[],[],[],"['How recursion works?', 'Example: Sum of Natural Numbers Using Recursion', 'Advantages and Disadvantages of Recursion']","['//cdn.programiz.com/sites/tutorial2program/files/how-recursion-works-c_0.jpg', '//cdn.programiz.com/sites/tutorial2program/files/recursion-natural-numbers.png']",['Output'],"['A function that calls itself is known as a recursive function. And, this technique is known as recursion.', 'The recursion continues until some condition is met to prevent it.', 'Initially, the sum() is called from the main() function with number passed as an argument.', 'Recursion makes program elegant. However, if performance is vital, use loops instead as recursion is usually much slower.']","[""To prevent infinite recursion, if...else statement (or similar approach) can be used where one branch makes the recursive call, and other doesn't."", 'Suppose, the value of n inside sum() is 3 initially. During the next function call, 2 is passed to the sum() function. This process continues until n is equal to 0.', 'When n is equal to 0, the if condition fails and the else part is executed returning the sum of integers ultimately to the main() function.', 'That being said, recursion is an important concept. It is frequently used in data structure and algorithms. For example, it is common to use recursion in problems such as tree traversal.']","['#include <stdio.h>', 'int sum(int n);', 'int main() {', '    int number, result;', '    scanf(""%d"", &number);', '    result = sum(number);', '    return 0;', 'int sum(int n) {', '    if (n != 0)', '        return n + sum(n-1); ', '    else', '        return n;']","['    printf(""Enter a positive integer: "");']","['void recurse()', '{', '    ... .. ...', '    recurse();', '    ... .. ...', '}', 'int main()', '{', '    ... .. ...', '    recurse();', '    ... .. ...', '}', 'Enter a positive integer:3', 'sum = 6']",[],[]
17,['C Storage Class'],"['In this tutorial, you will learn about scope and lifetime of local and global variables. Also, you will learn about static and register variables.']",[],[],"['Local Variable', 'Global Variable', 'Register Variable', 'Static Variable']","['Example 1: Global Variable', 'Example 2: Static Variable']",[],"['There are 4 types of storage class:', ""Let's take an example."", ""Let's take another example."", 'Output', 'Output']","['Every variable in C programming has two properties: type and storage class.', 'Type refers to the data type of a variable. And, storage class determines the scope, visibility and lifetime of a variable.', 'In the above example, n1 is local to main() and n2 is local to func().', 'A static variable is declared by using the static keyword. For example;', 'The value of a static variable persists until the end of the program.']","['The variables declared inside a block are automatic or local variables. The local variables exist only inside the block in which it is declared.', ""When you run the above program, you will get an error undeclared identifier i. It's because i is declared inside the for loop block. Outside of the block, it's undeclared."", 'This means you cannot access the\xa0n1 variable inside\xa0func() as it only exists inside main(). Similarly, you cannot access the\xa0n2\xa0variable inside main() as it only exists inside func().', 'Variables that are declared outside of all functions are known as external or global variables. They are accessible from any function inside the program.', 'Suppose, a global variable is declared in file1. If you try to use that variable in a different file file2, the compiler will complain. To solve this problem, keyword extern is used in file2 to indicate that the external variable is declared in another file.', 'However, modern compilers are very good at code optimization, and there is a rare chance that using register variables will make your program faster.', 'Unless you are working on embedded systems where you know how to optimize code for the given application, there is no use of register variables.', 'During the first function call, the value of c is initialized to 1. Its value is increased by 5. Now, the value of c is 6, which is printed on the screen.', ""During the second function call, c is not initialized to 1 again. It's because c is a static variable. The value c is increased by 5. Now, its value will be 11, which is printed on the screen.""]","['#include <stdio.h>', 'int main(void) {', '     printf(""C programming"");', '  printf(""%d"", i);  ', '  return 0;', 'int main() {', 'void func() {', '#include <stdio.h>', 'void display();', 'int n = 5;  // global variable', 'int main()', '    ++n;     ', '    display();', '    return 0;', 'void display()', '    ++n;   ', '    printf(""n = %d"", n);', '#include <stdio.h>', 'void display();', 'int main()', '    display();', '    display();', 'void display()', '    static int c = 1;', '    c += 5;', '    printf(""%d  "",c);']","['    int n1; // n1 is a local variable to main()', '   int n2;  // n2 is a local variable to func()']","['n = 7', 'static int i;', '6 11']",[],['automatic|||external|||static|||register|||']
18,['C Function Examples'],"['In this article, you will find a list of C programs to sharpen your knowledge of functions and recursion.']",[],[],['C Function Examples'],[],[],['A function is a block of code that performs a specific task.'],[],"['You will find examples related to functions in this article. To understand examples in this page, you should have the knowledge of the following topics:']",[],[],[],['isplay all prime numbers between two Intervals&&&heck prime and Armstrong number by making functions&&&heck whether a number can be expressed as the sum of two prime numbers&&&ind the sum of natural numbers using recursion&&&alculate the factorial of a number using recursion&&&ind G.C.D using recursion&&&everse a sentence using recursion&&&alculate the power of a number using recursion&&&onvert a binary number to decimal and vice-versa&&&onvert an octal Number to decimal and vice-versa&&&onvert a binary number to octal and vice-versa'],['User-Defined Function|||Types of User-defined functions|||Scope of a local variable|||Recursion|||']
19,['C Arrays'],"['In this tutorial, you will learn to work with arrays. You will learn to declare, initialize and access elements of an array with the help of examples.']",[],[],"['How to declare an array?', 'Access Array Elements', 'How to initialize an array?', 'Change Value of Array elements', 'Input and Output Array Elements', 'Example 1: Array Input/Output', 'Example 2: Calculate Average', 'Multidimensional arrays']",['Access elements out of its bound!'],"['//cdn.programiz.com/sites/tutorial2program/files/c-arrays.jpg', '//cdn.programiz.com/sites/tutorial2program/files/c-array-declaration.jpg', '//cdn.programiz.com/sites/tutorial2program/files/c-array-initialization.jpg']","['For example,', 'You can access elements of an array by indices.', 'You can also initialize an array like this.', 'Here,', ""Here's how you can print an individual element of an array."", 'Output', 'Output', ""Suppose you declared an array of 10 elements. Let's say,""]","['Here, we declared an array, mark, of floating-point type. And its size is 5. Meaning, it can hold 5 floating-point values.', ""It's important to note that\xa0the size and type of an array cannot be changed once it is declared."", 'Suppose you declared an array mark as above. The first element is mark[0], the second element is mark[1] and so on.', 'It is possible to initialize an array during declaration. For example,', ""Here, we haven't specified the size. However, the compiler knows its size is 5 as we are initializing it with 5 elements."", ""Here's how you can take input from the user and store it in an array element."", 'Here, we have computed the average of n numbers entered by the user.', 'You can access the array elements from testArray[0] to testArray[9].', 'Hence, you should never access elements of an array outside of its bound.', 'In this tutorial, you learned about arrays. These arrays are called one-dimensional arrays.', 'In the next tutorial, you will learn about multidimensional arrays (array of an array).']","['An array is a variable that can store multiple values. For example, if you want to store 100 integers, you can create an array for it.', 'Here, we have used a\xa0for loop to take 5 inputs from the user and store them in an array. Then, using another\xa0for loop, these elements are displayed on the screen.', ""Now let's say if you try to access testArray[12]. The element is not available. This may cause unexpected output (undefined behavior). Sometimes you might get an error and some other time your program may run correctly.""]","['int data[100];', 'mark[2] = -1;', 'mark[4] = 0;', '\u200bscanf(""%d"", &mark[2]);', 'scanf(""%d"", &mark[i-1]);', 'printf(""%d"", mark[0]);', 'printf(""%d"", mark[2]);', 'printf(""%d"", mark[i-1]);', '#include <stdio.h>', 'int main() {', '  int values[5];', '  for(int i = 0; i < 5; ++i) {', '     scanf(""%d"", &values[i]);', '  for(int i = 0; i < 5; ++i) {', '  return 0;', '#include <stdio.h>', 'int main() {', '  scanf(""%d"", &n);', '  for(i=0; i < n; ++i) {', '    scanf(""%d"", &marks[i]);', '          ', '    sum += marks[i];', '  average = sum / n;', '  return 0;']","['int mark[5] = {19, 10, 8, 17, 9};', 'int mark[] = {19, 10, 8, 17, 9};', 'int mark[5] = {19, 10, 8, 17, 9}', '  printf(""Displaying integers: "");', '  int marks[10], i, n, sum = 0, average;', '  printf(""Enter number of elements: "");', '    printf(""Enter number%d: "",i+1);', '  printf(""Average = %d"", average);']","['dataType arrayName[arraySize];', 'float mark[5];', 'mark[0] is equal to 19', 'mark[1] is equal to 10', 'mark[2] is equal to 8', 'mark[3] is equal to 17', 'mark[4] is equal to 9', 'Enter 5 integers: 1', '-3', '34', '0', '3', 'Displaying integers: 1', '-3', '34', '0', '3', 'Enter n: 5', 'Enter number1: 45', 'Enter number2: 35', 'Enter number3: 38', 'Enter number4: 31', 'Enter number5: 49', 'Average = 39', 'int testArray[10];']",[],"['Arrays have 0 as the first index, not 1. In this example, mark[0] is the first element.|||If the size of an array is n, to access the last element, the n-1 index is used. In this example, mark[4]|||Suppose the starting address of mark[0] is 2120d. Then, the address of the mark[1] will be 2124d. Similarly, the address of mark[2] will be 2128d and so on.|||This is because the size of a float is 4 bytes.|||']"
20,['C Multidimensional Arrays'],"['In this tutorial, you will learn to work with multidimensional arrays (two-dimensional and three-dimensional arrays) with the help of examples.']",[],[],['Initializing a multidimensional array'],"['Initialization of a 2d array', 'Initialization of a 3d array', 'Example 1: Two-dimensional array to store and print values', 'Example 2: Sum of two matrices', 'Example 3: Three-dimensional array']",['//cdn.programiz.com/sites/tutorial2program/files/two-dimensional-array_0.jpg'],"['Here, the array y can hold 24 elements.', 'Output', 'Output', 'Output']","['In C programming, you can create an array of arrays. These arrays are known as multidimensional arrays. For example,', 'Similarly, you can declare a three-dimensional (3d) array. For example,', 'Here is how you can initialize two-dimensional and three-dimensional arrays:', ""You can initialize a three-dimensional array in a similar way like a two-dimensional array. Here's an example,""]","['Here, x is a two-dimensional (2d) array. The array can hold 12 elements. You can think the array as a table with 3 rows and each row has 4 columns.']","['float x[3][4];', 'float y[2][4][3];', '         ', '                ', 'int test[2][3][4] = {', '#include <stdio.h>', 'const int CITY = 2;', 'const int WEEK = 7;', 'int main()', '  int temperature[CITY][WEEK];', '  return 0;', '#include <stdio.h>', 'int main()', '  for (int i = 0; i < 2; ++i)', '      scanf(""%f"", &a[i][j]);', '  for (int i = 0; i < 2; ++i)', '      scanf(""%f"", &b[i][j]);', '  for (int i = 0; i < 2; ++i)', '  printf(""\\nSum Of Matrix:"");', '  for (int i = 0; i < 2; ++i)', '      if (j == 1)', '        printf(""\\n"");', '  return 0;', '#include <stdio.h>', 'int main()', '  int test[2][3][2];', '  for (int i = 0; i < 2; ++i)', '  for (int i = 0; i < 2; ++i)', '  return 0;']","['int c[2][3] = {{1, 3, 0}, {-1, 5, 9}};', 'int c[][3] = {{1, 3, 0}, {-1, 5, 9}};', 'int c[2][3] = {1, 3, 0, -1, 5, 9};', '    {{3, 4, 2, 3}, {0, -3, 9, 11}, {23, 12, 23, 2}},', '    {{13, 4, 56, 3}, {5, 9, 3, 5}, {3, 1, 4, 9}}};', '  for (int i = 0; i < CITY; ++i)', '    for (int j = 0; j < WEEK; ++j)', '      printf(""City %d, Day %d: "", i + 1, j + 1);', '      scanf(""%d"", &temperature[i][j]);', '  printf(""\\nDisplaying values: \\n\\n"");', '  for (int i = 0; i < CITY; ++i)', '    for (int j = 0; j < WEEK; ++j)', '      printf(""City %d, Day %d = %d\\n"", i + 1, j + 1, temperature[i][j]);', '  float a[2][2], b[2][2], result[2][2];', '  printf(""Enter elements of 1st matrix\\n"");', '      printf(""Enter a%d%d: "", i + 1, j + 1);', '  printf(""Enter elements of 2nd matrix\\n"");', '      printf(""Enter b%d%d: "", i + 1, j + 1);', '      result[i][j] = a[i][j] + b[i][j];', '      printf(""%.1f\\t"", result[i][j]);', '  printf(""Enter 12 values: \\n"");', '      for (int k = 0; k < 2; ++k)', '        scanf(""%d"", &test[i][j][k]);', '  printf(""\\nDisplaying values:\\n"");', '      for (int k = 0; k < 2; ++k)', '        printf(""test[%d][%d][%d] = %d\\n"", i, j, k, test[i][j][k]);']","['City 1, Day 1: 33', 'City 1, Day 2: 34', 'City 1, Day 3: 35', 'City 1, Day 4: 33', 'City 1, Day 5: 32', 'City 1, Day 6: 31', 'City 1, Day 7: 30', 'City 2, Day 1: 23', 'City 2, Day 2: 22', 'City 2, Day 3: 21', 'City 2, Day 4: 24', 'City 2, Day 5: 22', 'City 2, Day 6: 25', 'City 2, Day 7: 26', 'Displaying values: ', 'City 1, Day 1 = 33', 'City 1, Day 2 = 34', 'City 1, Day 3 = 35', 'City 1, Day 4 = 33', 'City 1, Day 5 = 32', 'City 1, Day 6 = 31', 'City 1, Day 7 = 30', 'City 2, Day 1 = 23', 'City 2, Day 2 = 22', 'City 2, Day 3 = 21', 'City 2, Day 4 = 24', 'City 2, Day 5 = 22', 'City 2, Day 6 = 25', 'City 2, Day 7 = 26', 'Enter elements of 1st matrix', 'Enter a11: 2;', 'Enter a12: 0.5;', 'Enter a21: -1.1;', 'Enter a22: 2;', 'Enter elements of 2nd matrix', 'Enter b11: 0.2;', 'Enter b12: 0;', 'Enter b21: 0.23;', 'Enter b22: 23;', 'Sum Of Matrix:', '2.2     0.5', '-0.9    25.0', 'Enter 12 values: ', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', 'Displaying Values:', 'test[0][0][0] = 1', 'test[0][0][1] = 2', 'test[0][1][0] = 3', 'test[0][1][1] = 4', 'test[0][2][0] = 5', 'test[0][2][1] = 6', 'test[1][0][0] = 7', 'test[1][0][1] = 8', 'test[1][1][0] = 9', 'test[1][1][1] = 10', 'test[1][2][0] = 11', 'test[1][2][1] = 12']",[],[]
21,['Pass arrays to a function in C'],"[""In this tutorial, you'll learn to pass arrays (both one-dimensional and multidimensional arrays) to a function in C programming with the help of examples.""]",[],[],"['Pass\xa0Individual Array Elements', 'Example 2: Pass\xa0Arrays to Functions', 'Pass\xa0Multidimensional Arrays to a Function']","['Example 1: Pass\xa0Individual\xa0Array Elements', 'Example 3: Pass\xa0two-dimensional arrays']",[],"['Output', 'Output', 'However, notice the use of [] in the function definition.', 'Output', 'For example,']","['Passing array elements to a function is similar to passing variables to a function.', 'Here, we have passed array parameters to the display() function in the same way we pass variables to a function.', 'We can see this in the function definition, where the function parameters are individual variables:', 'To pass an entire array to a function, only the name of the array is passed as an argument.', 'This informs the compiler that you are passing a one-dimensional array to the function.', 'Notice the parameter int num[2][2] in the function prototype and function definition:', 'Note: In C programming, you can pass arrays to functions, however, you cannot return arrays from functions.']","[""In C programming, you can pass an entire array to functions. Before we learn that, let's see how you can pass individual elements of an array to functions."", 'To pass multidimensional arrays to a function, only the name of the array is passed to the function (similar to one-dimensional arrays).', 'This signifies that the function takes a two-dimensional array as an argument. We can also pass arrays with more than 2 dimensions as a function argument.', 'When passing two-dimensional arrays, it is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified.']","['#include <stdio.h>', '  printf(""%d\\n"", age1);', '  printf(""%d\\n"", age2);', 'int main() {', '  return 0;', '#include <stdio.h>', 'int main() {', '  result = calculateSum(num); ', '  return 0;', '  float sum = 0.0;', '    sum += num[i];', '  return sum;', 'result = calculateSum(num);', '#include <stdio.h>', 'int main() {', '  int num[2][2];', '      scanf(""%d"", &num[i][j]);', '  displayNumbers(num);', '  return 0;', '  printf(""Displaying:\\n"");']","['void display(int age1, int age2) {', '  int ageArray[] = {2, 8, 4, 12};', '  display(ageArray[1], ageArray[2]); ', 'display(ageArray[1], ageArray[2]);', 'void display(int age1, int age2) {', 'float calculateSum(float num[]);', '  float result, num[] = {23.4, 55, 22.6, 3, 40.5, 18};', '  printf(""Result = %.2f"", result);', 'float calculateSum(float num[]) {', 'float calculateSum(float num[]) {', 'void displayNumbers(int num[2][2]);', '    for (int j = 0; j < 2; ++j) {', 'void displayNumbers(int num[2][2]) {', '    for (int j = 0; j < 2; ++j) {', '      printf(""%d\\n"", num[i][j]);', 'void displayNumbers(int num[2][2]);', 'void displayNumbers(int num[][2]) {']","['8', '4', 'Result = 162.50', 'Enter 4 numbers:', '2', '3', '4', '5', 'Displaying:', '2', '3', '4', '5']",[],[]
22,['C Pointers'],"[""In this tutorial, you'll learn about pointers; what pointers are, how do you use them and the common mistakes you might face when working with them with the help of examples.""]",[],[],"['Address in C', 'C Pointers']","['Pointer Syntax', 'Assigning addresses to Pointers', 'Get Value of Thing Pointed by Pointers', 'Changing Value Pointed by Pointers', 'Example: Working of Pointers', 'Common mistakes when working with pointers']","['//cdn.programiz.com/sites/tutorial2program/files/pointer-1.jpg', '//cdn.programiz.com/sites/tutorial2program/files/pointer-2.jpg', '//cdn.programiz.com/sites/tutorial2program/files/pointer-3.jpg', '//cdn.programiz.com/sites/tutorial2program/files/pointer-4.jpg', '//cdn.programiz.com/sites/tutorial2program/files/pointer-5.jpg']","['Output', 'Here is how we can declare pointers.', 'Here, we have declared a pointer p of int type.', 'You can also declare pointers in these ways.', ""Let's take another example of declaring pointers."", 'Here, we have declared a pointer p1 and a normal variable p2.', ""Let's take an example."", ""Let's take an example."", 'We have assigned the address of c to the pc pointer.', ""Let's take another example."", 'We have assigned the address of c to the pc pointer.', ""Let's take one more example."", ""Let's take a working example."", 'Output', 'Explanation of the program', 'Suppose, you want pointer pc to point to the address of c. Then,', ""Why didn't we get an error when using int\xa0*p = &c;?"", ""It's because"", 'is equivalent to', 'To avoid this confusion, we can use the statement like this:']","['If you have a variable var in your program, &var will give you its address in the memory.', 'We have used address numerous times while using the scanf() function.', ""Here, the value entered by the user is stored in the address of var variable. Let's take a working example."", 'Note: You will probably get a different address when you run the above code.', 'Pointers (pointer variables) are special variables that are used to store addresses rather than values.', 'Here, 5 is assigned to the c variable. And, the address of c is assigned to the pc pointer.', 'To get the value of the thing pointed by the pointers, we use the * operator. For example:', 'Here, the address of c is assigned to the pc pointer. To get the value stored in that address, we used *pc.', 'Note: In the above example, pc is a pointer, not *pc. You cannot and should not do something like *pc = &c;', 'Then, we changed the value of c to 1. Since pc and the address of c is the same, *pc gives us 1.', 'Then, we changed *pc to 1 using *pc = 1;. Since pc and the address of c is the same, c will be equal to 1.', 'Initially, the address of c is assigned to the pc pointer using pc = &c;. Since c is 5, *pc gives us 5.', 'Then, the address of d is assigned to the pc pointer using pc = &d;. Since d is -15, *pc gives us -15.', ""Here's an example of pointer syntax beginners often find confusing."", 'In both cases, we are creating a pointer p (not *p) and assigning &c to it.', 'Now you know what pointers are, you will learn how pointers are related to arrays in the next tutorial.']","[""Pointers are powerful features of C and C++ programming. Before we learn pointers, let's learn about addresses in C programming."", 'By the way, * is called the dereference operator (when working with pointers). It operates on a pointer and gives the value stored in that pointer.']","['scanf(""%d"", &var);', '#include <stdio.h>', 'int main()', '  int var = 5;', '  printf(""var: %d\\n"", var);', '  return 0;', 'int *p1;', 'int * p2;', 'int* p1, p2;', 'int* pc, c;', 'pc = &c;', 'int* pc, c;', 'pc = &c;', 'int* pc, c;', 'pc = &c;', 'int* pc, c;', 'pc = &c;', '*pc = 1;', 'int* pc, c, d;', 'd = -15;', '#include <stdio.h>', 'int main()', '   int* pc, c;', '   c = 22;', '   pc = &c;', '   c = 11;', '   *pc = 2;', '   return 0;', 'int c, *pc;', 'pc = c;  // Error', '*pc = &c;  // Error', 'pc = &c;  // Not an error', '*pc = c;  // Not an error', '#include <stdio.h>', 'int main() {', '   int c = 5;', '   int *p = &c;', '   printf(""%d"", *p);  // 5', '\xa0  return 0; ', 'int *p = &c;', 'int* p = &c;']","['  printf(""address of var: %p"", &var);  ', 'printf(""%d"", *pc);   // Output: 5', 'printf(""%d"", c);    // Output: 1', 'printf(""%d"", *pc);  // Ouptut: 1', 'printf(""%d"", *pc);  // Ouptut: 1', 'printf(""%d"", c);    // Output: 1', 'pc = &c; printf(""%d"", *pc); // Output: 5', 'pc = &d; printf(""%d"", *pc); // Ouptut: -15', '   printf(""Address of c: %p\\n"", &c);', '   printf(""Value of c: %d\\n\\n"", c);  // 22', '   printf(""Address of pointer pc: %p\\n"", pc);', '   printf(""Content of pointer pc: %d\\n\\n"", *pc); // 22', '   printf(""Address of pointer pc: %p\\n"", pc);', '   printf(""Content of pointer pc: %d\\n\\n"", *pc); // 11', '   printf(""Address of c: %p\\n"", &c);', '   printf(""Value of c: %d\\n\\n"", c); // 2']","['var: 5 ', 'address of var: 2686778', 'Address of c: 2686784', 'Value of c: 22', 'Address of pointer pc: 2686784', 'Content of pointer pc: 22', 'Address of pointer pc: 2686784', 'Content of pointer pc: 11', 'Address of c: 2686784', 'Value of c: 2']",[],"['int* pc, c;|||Here, a pointer pc and a normal variable c, both of type int, is created.|||Since pc and c are not initialized at initially, pointer pc points to either no address or a random address. And, variable c has an address but contains random garbage value.|||\xa0|||c = 22;|||This assigns 22 to the variable c. That is, 22 is stored in the memory location of variable c.|||\xa0|||pc = &c;|||This assigns the address of variable c to the pointer pc.|||\xa0|||c = 11;|||This assigns 11 to variable c.|||\xa0|||*pc = 2;|||This change the value at the memory location pointed by the pointer pc to 2.|||']"
23,['Relationship Between Arrays and Pointers'],"[""In this tutorial, you'll learn about the relationship between arrays and pointers in C programming. You will also learn to access array elements using pointers.""]",[],[],['Relationship Between Arrays and Pointers'],"['Example 1: Pointers and Arrays', 'Example 2: Arrays and Pointers']",['//cdn.programiz.com/sites/tutorial2program/files/array-pointers.jpg'],"['Output', 'Similarly,', 'When you run the program, the output will be:', 'When you run the program, the output will be:']","['Before you learn about the relationship between arrays and pointers, be sure to check these two topics:', ""An array is a block of sequential data. Let's write a program to print addresses of array elements."", 'From the above example, it is clear that &x[0] is equivalent to x. And, x[0] is equivalent to *x.', 'Here, we have declared an array x of 6 elements. To access elements of the array, we have used pointers.', 'And, printing *(ptr+1) gives us the fourth element. Similarly, printing *(ptr-1) gives us the second element.']","['There is a difference of 4 bytes between two consecutive elements of array x. It is because the size of int is 4 bytes (on our compiler).', ""In most contexts, array names decay to pointers. In simple words, array names are converted to pointers. That's the reason why you can use pointers to access elements of arrays. However, you should remember that pointers and arrays are not the same."", ""There are a few cases where array names don't decay to pointers. To learn more, visit: When does array name doesn't decay into a pointer?"", 'In this example, &x[2], the address of the third element, is assigned to the ptr pointer. Hence, 3 was displayed when we printed *ptr.']","['#include <stdio.h>', 'int main() {', '   int x[4];', '   int i;', '   for(i = 0; i < 4; ++i) {', '   return 0;', '#include <stdio.h>', 'int main() {', '  int i, x[6], sum = 0;', '  printf(""Enter 6 numbers: "");', '  for(i = 0; i < 6; ++i) {', '      scanf(""%d"", x+i);', '      sum += *(x+i);', '  printf(""Sum = %d"", sum);', '  return 0;', '#include <stdio.h>', 'int main() {', '  int x[5] = {1, 2, 3, 4, 5};', '  int* ptr;', '  ptr = &x[2]; ', '  return 0;']","['      printf(""&x[%d] = %p\\n"", i, &x[i]);', '   printf(""Address of array x: %p"", x);', '  printf(""*ptr = %d \\n"", *ptr);   // 3', '  printf(""*(ptr+1) = %d \\n"", *(ptr+1)); // 4', '  printf(""*(ptr-1) = %d"", *(ptr-1));  // 2']","['&x[0] = 1450734448', '&x[1] = 1450734452', '&x[2] = 1450734456', '&x[3] = 1450734460', 'Address of array x: 1450734448', 'Enter 6 numbers: 2', '3', '4', '4', '12', '4', 'Sum = 29 ', '*ptr = 3 ', '*(ptr+1) = 4 ', '*(ptr-1) = 2']",[],"['C Arrays|||C Pointers|||&x[1] is equivalent to x+1 and x[1] is equivalent to *(x+1).|||&x[2] is equivalent to x+2 and x[2] is equivalent to *(x+2).|||...|||Basically, &x[i] is equivalent to x+i and x[i] is equivalent to *(x+i).|||']"
24,['C Pass Addresses and Pointers'],"[""In this tutorial, you'll learn to pass addresses and pointers as arguments to functions with the help of examples.""]",[],[],"['Example: Pass Addresses to Functions', 'Example 2: Passing Pointers to Functions']",[],[],"['When you run the program, the output will be:', 'Here, the value stored at p, *p, is 10 initially.']","['In C programming, it is also possible to pass addresses as arguments to functions.', 'The address of num1 and num2 are passed to the swap() function using swap(&num1, &num2);.', 'Pointers n1 and n2 accept these arguments in the function definition.', 'When *n1 and *n2 are changed inside the swap() function, num1 and num2 inside the main() function are also changed.', 'Inside the swap() function, *n1 and *n2 swapped. Hence, num1 and num2 are also swapped.', 'Notice that swap() is not returning anything; its return type is void.', 'We then passed the pointer p to the addOne() function. The ptr pointer gets this address in the addOne() function.']","[""To accept these addresses in the function definition, we can use pointers. It's because pointers are used to store addresses. Let's take an example:"", 'Inside the function, we increased the value stored at ptr by 1 using (*ptr)++;. Since ptr and p pointers both have the same address, *p inside main() is also 11.']","['#include <stdio.h>', 'void swap(int *n1, int *n2);', 'int main()', '    int num1 = 5, num2 = 10;', '    swap( &num1, &num2);', '    printf(""num2 = %d"", num2);', '    return 0;', 'void swap(int* n1, int* n2)', '    int temp;', '    temp = *n1;', '    *n1 = *n2;', '    *n2 = temp;', 'void swap(int* n1, int* n2) {', '    ... ..', '#include <stdio.h>', 'void addOne(int* ptr) {', 'int main()', '  int* p, i = 10;', '  p = &i;', '  addOne(p);', '  printf(""%d"", *p); // 11', '  return 0;']","['    printf(""num1 = %d\\n"", num1);']","['num1 = 10', 'num2 = 5']",[],[]
25,['C Dynamic Memory Allocation'],"[""In this tutorial, you'll learn to dynamically allocate memory in your C program using standard library functions: malloc(), calloc(), free() and realloc().""]",[],[],"['C malloc()', 'C calloc()', 'C free()', 'C realloc()']","['Syntax of malloc()', 'Syntax of calloc()', 'Syntax of free()', 'Example 1: malloc() and free()', 'Example 2: calloc() and free()', 'Syntax of realloc()', 'Example 3: realloc()']",[],"['The name ""malloc"" stands for memory allocation.', 'Example', 'The name ""calloc"" stands for contiguous allocation.', 'Example:', 'Output', 'Output', 'Here, ptr is reallocated with a new size x.', 'Output']","['The expression results in a NULL pointer if the memory cannot be allocated.', 'The above statement allocates contiguous space in memory for 25 elements of type float.', 'This statement frees the space allocated in the memory pointed by ptr.', 'Here, we have dynamically allocated the memory for n number of int.']","['Sometimes the size of the array you declared may be insufficient. To solve this issue, you can allocate memory manually during run-time. This is known as dynamic memory allocation in C programming.', 'To allocate memory dynamically, library functions are malloc(), calloc(), realloc() and free() are used. These functions are defined in the <stdlib.h> header file.', 'The malloc() function reserves a block of memory of the specified number of bytes. And, it returns a pointer of void which can be casted into pointers of any form.', ""The above statement allocates 400 bytes of memory. It's because the size of float is 4 bytes. And, the pointer ptr holds the address of the first byte in the allocated memory."", 'The malloc() function allocates memory and leaves the memory uninitialized, whereas the calloc() function allocates memory and initializes all bits to zero.', ""Dynamically allocated memory created with either calloc() or malloc() doesn't get freed on their own. You must explicitly use free() to release the space."", 'If the dynamically allocated memory is insufficient or more than required, you can change the size of previously allocated memory using the realloc() function.']","['free(ptr);', '#include <stdio.h>', '#include <stdlib.h>', 'int main() {', '  int n, i, *ptr, sum = 0;', '  scanf(""%d"", &n);', '  if(ptr == NULL) {', '    exit(0);', '  printf(""Enter elements: "");', '  for(i = 0; i < n; ++i) {', '    scanf(""%d"", ptr + i);', '    sum += *(ptr + i);', '  printf(""Sum = %d"", sum);', '  free(ptr);', '  return 0;', 'Enter number of elements: 3', 'Enter elements: 100', 'Sum = 156', '#include <stdio.h>', '#include <stdlib.h>', 'int main() {', '  int n, i, *ptr, sum = 0;', '  scanf(""%d"", &n);', '  if(ptr == NULL) {', '    exit(0);', '  printf(""Enter elements: "");', '  for(i = 0; i < n; ++i) {', '    scanf(""%d"", ptr + i);', '    sum += *(ptr + i);', '  printf(""Sum = %d"", sum);', '  free(ptr);', '  return 0;', 'Enter number of elements: 3', 'Enter elements: 100', 'Sum = 156', 'ptr = realloc(ptr, x);', '#include <stdio.h>', '#include <stdlib.h>', 'int main() {', '  int *ptr, i , n1, n2;', '  printf(""Enter size: "");', '  scanf(""%d"", &n1);', '  for(i = 0; i < n1; ++i)', '    printf(""%pc\\n"",ptr + i);', '  scanf(""%d"", &n2);', '  for(i = 0; i < n2; ++i)', '    printf(""%pc\\n"", ptr + i);', '  free(ptr);', '  return 0;']","['ptr = (float*) malloc(100 * sizeof(float));', 'ptr = (castType*)calloc(n, size);', 'ptr = (float*) calloc(25, sizeof(float));', '  printf(""Enter number of elements: "");', '  ptr = (int*) malloc(n * sizeof(int));', '    printf(""Error! memory not allocated."");', '  printf(""Enter number of elements: "");', '  ptr = (int*) calloc(n, sizeof(int));', '    printf(""Error! memory not allocated."");', '  ptr = (int*) malloc(n1 * sizeof(int));', '  printf(""Addresses of previously allocated memory:\\n"");', '  printf(""\\nEnter the new size: "");', '  ptr = realloc(ptr, n2 * sizeof(int));', '  printf(""Addresses of newly allocated memory:\\n"");']","['Enter size: 2', 'Addresses of previously allocated memory:', '26855472', '26855476', 'Enter the new size: 4', 'Addresses of newly allocated memory:', '26855472', '26855476', '26855480', '26855484']",[],[]
26,['C Array and Pointer Examples'],"[""In this article, you'll find a list of C programs related to arrays and pointers.""]",[],[],['Array and Pointer Examples'],[],[],[],"['To understand all programs in this article, you should have the knowledge of the following topics:']",[],[],[],[],['alculate the average of array elements&&&ind the largest element of an array&&&alculate standard deviation&&&dd two matrices&&&ultiply two matrices&&&ind transpose of a matrix&&&ultiply two matrices&&&ccess elements of an array using pointers&&&wap numbers in the cyclic order using call by reference&&&ind the largest number (Dynamic memory allocation is used)'],['Arrays|||Multi-dimensional Arrays|||Pointers|||Array and Pointer Relation|||Call by Reference|||Dynamic Memory Allocation|||']
27,['C Programming Strings'],"[""In this tutorial, you'll learn about strings in C programming. You'll learn to declare them, initialize them and use them for various I/O operations with the help of examples.""]",[],[],"['How to declare a string?', 'How to initialize strings?', 'Assigning Values to Strings', 'Read String from the user', 'Passing Strings to Functions', 'Strings and Pointers']","['Example 1: scanf() to read a string', 'How to read a line of text?', 'Example 2: fgets() and puts()', 'Example 3: Passing string to a Function', 'Example 4: Strings and Pointers', 'Commonly Used String Functions']","['//cdn.programiz.com/sites/tutorial2program/files/c-string.jpg', '//cdn.programiz.com/sites/tutorial2program/files/c-string-declaration_0.jpg', '//cdn.programiz.com/sites/tutorial2program/files/c-string-initialization.jpg']","[""Here's how you can declare strings:"", 'Here, we have declared a string of 5 characters.', 'You can initialize strings in a number of ways.', ""Let's take another example:"", 'Note: Use the strcpy() function to copy the string instead.', 'You can use the scanf() function to read a string.', 'Output', 'Output', 'fgets(name, sizeof(name), stdlin); // read string', 'To print the string, we have used puts(name);.']","['In C programming, a string is a sequence of characters terminated with a null character \\0. For example:', 'The scanf() function reads the sequence of characters until it encounters whitespace (space, newline, tab, etc.).', 'Also notice that we have used the code name instead of &name with scanf().', 'This is because name is a char array, and we know that array names decay to pointers in C.', 'You can use the fgets() function to read a line of string. And, you can use puts() to display the string.', 'Here, we have used fgets() function to read a string from the user.', 'The sizeof(name) results to 30. Hence, we can take a maximum of 30 characters as input which is the size of the\xa0name string.', 'Strings can be passed to a function in a similar way as arrays. Learn more about passing arrays to a function.']","['When the compiler encounters a sequence of characters enclosed in the double quotation marks, it appends a null character \\0 at the end by default.', ""Here, we are trying to assign 6 characters (the last character is '\\0') to a char array having 5 characters. This is bad and you should never do this."", 'Arrays and strings are second-class citizens in C; they do not support the assignment operator once it is declared. For example,', 'Even though Dennis Ritchie was entered in the above program, only ""Dennis"" was stored in the name string. It\'s because there was a space after Dennis.', ""Thus, the\xa0name\xa0in\xa0scanf() already points to the address of the first element in the string, which is why we don't need to use &."", ""Note: The gets() function can also be to take input from the user. However, it is removed from the C standard.\n\tIt's because gets() allows you to input any length of characters. Hence, there might be a buffer overflow."", 'Similar like arrays, string names are ""decayed"" to pointers. Hence, you can use pointers to manipulate elements of the string. We recommended you to check C Arrays and Pointers before you check this example.']","['char c[] = ""c string"";', 'char s[5];', 'char c[] = ""abcd"";', 'char c[50] = ""abcd"";', 'char c[5] = ""abcde"";', 'char c[100];', '#include <stdio.h>', 'int main()', '    char name[20];', '    printf(""Enter name: "");', '    scanf(""%s"", name);', '    return 0;', 'scanf(""%s"", name);', '#include <stdio.h>', 'int main()', '    char name[30];', '    printf(""Enter name: "");', '    printf(""Name: "");', '    return 0;', '#include <stdio.h>', 'int main()', '    char str[50];', '    printf(""Enter string: "");', '    return 0;', 'void displayString(char str[])', '    printf(""String Output: "");', '    puts(str);', '#include <stdio.h>', 'int main(void) {', '  char *namePtr;', '  namePtr = name;']","[""char c[] = {'a', 'b', 'c', 'd', '\\0'};"", ""char c[5] = {'a', 'b', 'c', 'd', '\\0'};"", 'c = ""C programming"";  // Error! array type is not assignable.', '    printf(""Your name is %s."", name);', '    fgets(name, sizeof(name), stdin);  // read string', '    puts(name);    // display string', '    fgets(str, sizeof(str), stdin);             ', '    displayString(str);     // Passing string to a function.    ', '  printf(""%c"", *name);     // Output: H', '  printf(""%c"", *(name+1));   // Output: a', '  printf(""%c"", *(name+7));   // Output: o', '  printf(""%c"", *namePtr);     // Output: H', '  printf(""%c"", *(namePtr+1));   // Output: a', '  printf(""%c"", *(namePtr+7));   // Output: o']","['Enter name: Dennis Ritchie', 'Your name is Dennis.', 'Enter name: Tom Hanks', 'Name: Tom Hanks']",[],['strlen() - calculates the length of a string|||strcpy() - copies a string to another|||strcmp() - compares two strings|||strcat() - concatenates two strings|||']
28,['String Manipulations In C Programming Using Library Functions'],"[""In this article, you'll learn to manipulate strings in C using library functions such as gets(), puts, strlen() and more. You'll learn to get string from the user and perform operations on the string.""]",[],[],[],['gets() and puts()'],[],['Few commonly used string handling functions are discussed below:'],"['To solve this, C supports a large number of string handling functions in the standard library ""string.h"".', 'Strings handling functions are defined under ""string.h"" header file.', 'Note: You have to include the code below to run string handling functions.', 'Note: Though, gets() and puts() function handle strings, both these functions are defined in ""stdio.h"" header file.']","['You need to often manipulate strings according to the need of a problem. Most, if not all, of the time string manipulation can be done manually but, this makes programming complex and large.', 'Functions gets() and puts() are two string functions to take string input from the user and display it respectively as mentioned in the\xa0previous chapter.']","['#include<stdio.h>', 'int main()', '    char name[30];', '    printf(""Enter name: "");', '    printf(""Name: "");', '    return 0;']","['    gets(name);     //Function to read string from user.', '    puts(name);    //Function to display string.']",['#include <string.h>'],"[""unction|||Work of Function&&&trlen()|||computes string's length&&&trcpy()|||copies a string to another&&&trcat()|||concatenates(joins) two strings&&&trcmp()|||compares two strings&&&trlwr()|||converts string to lowercase&&&trupr()|||converts string to uppercase""]",[]
29,['String Examples in C Programming'],"['In this article, you will find several examples that uses strings in C programming.']",[],[],['String Examples'],[],[],[],['A string is an array of characters that ends with a null character \\0.'],"['All examples mentioned in the page are related to strings in C programming. To understand all examples on this page, you should have the knowledge of:']",[],[],[],"['ind the frequency of a character in a string&&&ind the number of vowels, consonants, digits and white spaces&&&everse a string using recursion&&&ind the length of a string&&&oncatenate two strings&&& Program to Copy a String&&&emove all characters in a string except alphabets&&&ort elements in the lexicographical order (dictionary order)']",['Strings in C|||How to Pass String to a function|||Commonly used library functions to work with strings|||']
30,['C struct'],"[""In this tutorial, you'll learn about struct types in C Programming with the help of examples.""]",[],[],"['Define Structures', 'Create struct Variables', 'Access Members of a Structure', 'Example 1: C++ structs', 'Keyword typedef', 'Nested Structures', 'Why structs in C?', 'More on struct']","['Syntax of struct', 'Example 2: C++ typedef', 'Example 3: C++ Nested Structures']",[],"['For example,', ""Here's how we create structure variables:"", 'Another way of creating a struct variable is:', 'In both cases,', 'Output', 'Finally, we printed the data of person1.', 'For example, let us look at the following code:', 'Output', 'Output']","['In C programming, a struct (or structure) is a collection of variables (can be of different types) under a single name.', 'Before you can create structure variables, you need to define its data type. To define a struct, the struct keyword is used.', 'Here, a derived type struct Person is defined. Now, you can create variables of this type.', 'There are two types of operators used for accessing members of a structure.', ""Suppose, you want to access the salary of person2. Here's how you can do it."", 'In this program, we have created a struct named Person. We have also created a variable of Person named person1.', 'In main(), we have assigned values to the variables defined in Person for the person1 object.', 'Notice that we have used strcpy() function to assign the value to person1.name.', 'We can use typedef to write an equivalent code with a simplified syntax:', 'Here, we have used typedef with the Person structure to create an alias person.', 'Now, we can simply declare a Person variable using the person alias:', 'You can create structures within a structure in C programming. For example,', ""Suppose, you want to set imag of num2 variable to 11. Here's how you can do it:""]","['When a struct type is declared, no storage or memory is allocated. To allocate memory of a given structure type and work with it, we need to create variables.', 'This is because name is a char array (C-string) and we cannot use the assignment operator = with it after we have declared the string.', 'We use the typedef keyword to create an alias name for data types. It is commonly used with structures to simplify the syntax of declaring variables.', 'Suppose, you want to store information about a person: his/her name, citizenship number, and salary. You can create different variables name, citNo and salary to store this information.', 'What if you need to store information of more than one person? Now, you need to create different variables for each information per person: name1, citNo1, salary1, name2, citNo2, salary2, etc.', 'A better approach would be to have a collection of all related information under a single name Person structure and use it for every person.']","['struct structureName {', '  dataType member1;', '  dataType member2;', 'struct Person {', '  char name[50];', '  int citNo;', '  float salary;', 'struct Person {', 'int main() {', '  return 0;', 'struct Person {', '} person1, person2, p[20];', 'person2.salary', '#include <stdio.h>', '#include <string.h>', 'struct Person {', '  char name[50];', '  int citNo;', '  float salary;', '} person1;', 'int main() {', '  person1.citNo = 1984;', '  person1. salary = 2500;', '  return 0;', 'person1.citNo = 1984;', 'person1. salary = 2500;', 'struct Distance{', '  int feet;', '  float inch;', 'int main() {', '  struct Distance d1, d2;', 'typedef struct Distance {', '  int feet;', '  float inch;', '} distances;', 'int main() {', '  distances d1, d2;', '#include <stdio.h>', '#include <string.h>', 'typedef struct Person {', '  char name[50];', '  int citNo;', '  float salary;', '} person;', 'int main() {', '  person p1;', '  p1.citNo = 1984;', '  p1. salary = 2500;', '  return 0;', 'typedef struct Person {', '} person;', 'person p1;', 'struct complex {', '  int imag;', '  float real;', 'struct number {', '  struct complex comp;', '  int integers;', '} num1, num2;', 'num2.comp.imag = 11;', '#include <stdio.h>', 'struct complex {', '  int imag;', '  float real;', 'struct number {', '  struct complex comp;', '  int integer;', 'int main() {', '  num1.comp.imag = 11;', '  num1.comp.real = 5.25;', '  num1.integer = 6;', '  return 0;']","['  struct Person person1, person2, p[20];', '  strcpy(person1.name, ""George Orwell"");', '  printf(""Name: %s\\n"", person1.name);', '  printf(""Citizenship No.: %d\\n"", person1.citNo);', '  printf(""Salary: %.2f"", person1.salary);', 'strcpy(person1.name, ""George Orwell"");', '  strcpy(p1.name, ""George Orwell"");', '  printf(""Name: %s\\n"", p1.name);', '  printf(""Citizenship No.: %d\\n"", p1.citNo);', '  printf(""Salary: %.2f"", p1.salary);', '  printf(""Imaginary Part: %d\\n"", num1.comp.imag);', '  printf(""Real Part: %.2f\\n"", num1.comp.real);', '  printf(""Integer: %d"", num1.integer);']","['Name: George Orwell', 'Citizenship No.: 1984', 'Salary: 2500.00', 'Name: George Orwell', 'Citizenship No.: 1984', 'Salary: 2500.00', 'Imaginary Part: 11', 'Real Part: 5.25', 'Integer: 6']",[],['person1 and person2 are struct Person variables|||p[] is a struct Person array of size 20.|||Structures and pointers|||Passing structures to a function|||&&&. - Member operator|||-> - Structure pointer operator (will be discussed in the next tutorial)|||']
31,['C structs and Pointers'],"[""In this tutorial, you'll learn to use pointers to access members of structs in C programming. You will also learn to dynamically allocate memory of struct types.""]",[],[],"['C Pointers to struct', 'Example: Access members using Pointer', 'Dynamic memory allocation of structs']",['Example: Dynamic memory allocation of structs'],[],"[""Here's how you can create pointers to structs."", 'Here, ptr is a pointer to struct.', 'By the way,', 'When you run the program, the output will be:', 'To allocate the memory for n number of struct person, we used,', 'Then, we used the ptr pointer to access elements of person.']","['Before you learn about how pointers can be used with structs, be sure to check these tutorials:', 'To access members of a structure using pointers, we use the -> operator.', 'In this example, the address of person1 is stored in the personPtr pointer using personPtr = &person1;.', 'Now, you can access the members of person1 using the personPtr pointer.', 'Before you proceed this section, we recommend you to check C dynamic memory allocation.', 'In the above example, n number of struct variables are created where n is entered by the user.']","[""Sometimes, the number of struct variables you declared may be insufficient. You may need to allocate memory during run-time. Here's how you can achieve this in C programming.""]","['struct name {', '    member1;', '    member2;', 'int main()', '    struct name *ptr, Harry;', '#include <stdio.h>', 'struct person', '   int age;', '   float weight;', 'int main()', '    personPtr = &person1;   ', '    printf(""Enter age: "");', '    printf(""Enter weight: "");', '    printf(""Displaying:\\n"");', '    return 0;', '#include <stdio.h>', '#include <stdlib.h>', 'struct person {', '   int age;', '   float weight;', '   char name[30];', 'int main()', '   struct person *ptr;', '   int i, n;', '   scanf(""%d"", &n);', '   for(i = 0; i < n; ++i)', '   for(i = 0; i < n; ++i)', '   return 0;']","['    struct person *personPtr, person1;', '    scanf(""%d"", &personPtr->age);', '    scanf(""%f"", &personPtr->weight);', '    printf(""Age: %d\\n"", personPtr->age);', '    printf(""weight: %f"", personPtr->weight);', '   printf(""Enter the number of persons: "");', '   ptr = (struct person*) malloc(n * sizeof(struct person));', '       printf(""Enter first name and age respectively: "");', '       scanf(""%s %d"", (ptr+i)->name, &(ptr+i)->age);', '   printf(""Displaying Information:\\n"");', '       printf(""Name: %s\\tAge: %d\\n"", (ptr+i)->name, (ptr+i)->age);', 'ptr = (struct person*) malloc(n * sizeof(struct person));']","['Enter the number of persons:  2', 'Enter first name and age respectively:  Harry 24', 'Enter first name and age respectively:  Gary 32', 'Displaying Information:', 'Name: Harry\tAge: 24', 'Name: Gary\tAge: 32']",[],['C Pointers|||C struct|||personPtr->age is equivalent to (*personPtr).age|||personPtr->weight is equivalent to (*personPtr).weight|||']
32,['C Structure and Function'],"[""In this tutorial, you'll learn to pass struct variables as arguments to a function. You will learn to return struct from a function with the help of examples.""]",[],[],"['Passing structs to functions', 'Return struct from a function', 'Passing struct by reference']",[],[],"[""Here's how you can pass structures to a function"", 'Output', ""Here's how you can return structure from a function:"", 'Output']","['Similar to variables of built-in types, you can also pass structure variables to a function.', 'We recommended you to learn these tutorials before you learn how to pass structs to functions.', 'Notice that, the return type of getInformation() is also struct student.', 'During pass by reference, the memory addresses of struct variables are\xa0passed to the function.']","['Here, a struct variable s1 of type struct student is created. The variable is passed to the display() function using display(s1); statement.', 'Here, the getInformation() function is called using s = getInformation(); statement. The function returns a structure of type struct student. The returned structure is displayed from the main() function.', 'You can also pass structs by reference (in a similar way like you pass variables of built-in type by reference). We suggest you to read pass by reference tutorial before you proceed.', 'In the above program, three structure variables c1, c2 and the address of result is passed to the addNumbers() function. Here, result is passed by reference.', 'When the result variable inside the addNumbers() is altered, the\xa0result variable inside the main() function is also altered accordingly.']","['#include <stdio.h>', 'struct student {', '   char name[50];', '   int age;', 'int main() {', '   struct student s1;', '   printf(""Enter name: "");', '   printf(""Enter age: "");', '   scanf(""%d"", &s1.age);', '   return 0;', '   printf(""Name: %s"", s.name);', '   printf(""\\nAge: %d"", s.age);', '#include <stdio.h>', 'struct student', '    char name[50];', '    int age;', 'int main()', '    struct student s;', '    s = getInformation();', '    return 0;', '  struct student s1;', '  printf(""Enter name: "");', '  printf(""Enter age: "");', '  scanf(""%d"", &s1.age);', '  return s1;', '#include <stdio.h>', 'typedef struct Complex', '    float real;', '    float imag;', '} complex;', 'int main()', '    complex c1, c2, result;', '    scanf(""%f"", &c1.real);', '    scanf(""%f"", &c1.imag);', '    scanf(""%f"", &c2.real);', '    scanf(""%f"", &c2.imag);', '    return 0;']","['   display(s1); // passing struct as an argument', 'void display(struct student s) {', '   printf(""\\nDisplaying information\\n"");', 'struct student getInformation();', '    printf(""\\nDisplaying information\\n"");', '    printf(""\\nRoll: %d"", s.age);', 'struct student getInformation() ', 'void addNumbers(complex c1, complex c2, complex *result); ', '    printf(""For first number,\\n"");', '    printf(""Enter real part: "");', '    printf(""Enter imaginary part: "");', '    printf(""For second number, \\n"");', '    printf(""Enter real part: "");', '    printf(""Enter imaginary part: "");', '    addNumbers(c1, c2, &result); ', '    printf(""\\nresult.real = %.1f\\n"", result.real);', '    printf(""result.imag = %.1f"", result.imag);', 'void addNumbers(complex c1, complex c2, complex *result) ', '     result->real = c1.real + c2.real;', '     result->imag = c1.imag + c2.imag; ']","['Enter name: Bond', 'Enter age: 13', 'Displaying information', 'Name: Bond', 'Age: 13  ', 'For first number,', 'Enter real part:  1.1', 'Enter imaginary part:  -2.4', 'For second number, ', 'Enter real part:  3.4', 'Enter imaginary part:  -3.2', 'result.real = 4.5', 'result.imag = -5.6  ']",[],['C structures|||C functions|||User-defined Function|||']
33,['C Unions'],"[""In this tutorial, you'll learn about unions in C programming. More specifically, how to create unions, access its members and learn the differences between unions and structures.""]",[],[],"['How to define a union?', 'Create union variables', 'Difference between unions and structures']","['Access members of a union', 'Example: Accessing Union Members']",[],"[""We use the union keyword to define unions. Here's an example:"", 'The above code defines a derived type union car.', ""Here's how we create union variables."", 'Another way of creating union variables is:', 'In the above example,', 'Output', 'Why this difference in the size of union and structure variables?', 'Here, the size of sJob is 40 bytes because', 'With a union, all members share the same memory.', 'Output', 'To learn where unions are used, visit Why do we need C Unions?']","['A union is a user-defined type similar to structs in C except for one key difference.', 'Structures allocate enough space to store all their members, whereas unions can only hold one member value at a time.', 'In both cases, union variables car1, car2, and a union pointer car3 of union car type are created.', 'We use the . operator to access members of a union. And to access pointer variables, we use the -> operator.', ""Let's take an example to demonstrate the difference between unions and structures:""]","['When a union is defined, it creates a user-defined type. However, no memory is allocated. To allocate memory for a given union type and work with it, we need to create variables.', ""However, the size of uJob is 32 bytes. It's because the size of a union variable will always be the size of its largest element. In the above example, the size of its largest element, (name[32]), is 32 bytes.""]","['union car', '  char name[50];', '  int price;', 'union car', '  char name[50];', '  int price;', 'int main()', '  union car car1, car2, *car3;', '  return 0;', 'union car', '  char name[50];', '  int price;', '} car1, car2, *car3;', '#include <stdio.h>', 'union unionJob', '   char name[32];', '   float salary;', '   int workerNo;', 'struct structJob', '   char name[32];', '   float salary;', '   int workerNo;', 'int main()', '   return 0;', '#include <stdio.h>', 'union Job {', '   float salary;', '   int workerNo;', 'int main() {', '   j.salary = 12.3;', '   j.workerNo = 100;', '   return 0;']","['   printf(""size of union = %d bytes"", sizeof(uJob));', '   printf(""\\nsize of structure = %d bytes"", sizeof(sJob));', '   printf(""Salary = %.1f\\n"", j.salary);', '   printf(""Number of workers = %d"", j.workerNo);']","['size of union = 32', 'size of structure = 40', 'Salary = 0.0', 'Number of workers = 100']",[],"['To access price for car1, car1.price is used.|||To access price using car3, either (*car3).price or car3->price can be used.|||the size of name[32] is 32 bytes|||the size of salary is 4 bytes|||the size of workerNo is 4 bytes|||']"
34,['C Struct Examples'],"[""In this article, you'll find a list of examples related to structs in C programming.""]",[],[],['C struct Examples'],[],[],['A structure is a collection of variables of different data types.'],[],"['You will find examples related to structures in this article. To understand examples in this page, you should have the knowledge of the following topics.']",[],[],[],['tore information of a student using structure&&&dd two distances (in inch-feet)&&&dd two complex numbers by passing structures to a function&&&alculate the difference between two time periods&&&tore information of 10 students using structures&&&tore information of n students using structures'],['C struct|||C structs and pointers|||C structs and functions|||']
35,['C File Handling'],"['In this tutorial, you will learn about file handling in C. You will learn to handle standard I/O in C using fprintf(), fscanf(), fread(), fwrite(), fseek() etc. with the help of examples.']",[],[],"['Why files are needed?', 'Types of Files', 'File Operations', 'Working with files', 'Opening a file - for creation and edit', 'Closing a File', 'Reading and writing to a text file', 'Reading and writing to a binary file', 'Getting data using fseek()']","['1. Text files', '2. Binary files', 'Example 1: Write to a text file', 'Example 2: Read from a text file', 'Writing to a binary file', 'Example 3: Write to a binary file using fwrite()', 'Reading from a binary file', 'Example 4: Read from a binary file using fread()', 'Syntax of fseek()', 'Example 5: fseek()']",[],"['Binary files are mostly the .bin files in your computer.', 'The syntax for opening a file in standard I/O is:', 'For example,', 'Closing a file is performed using the fclose() function.', 'In this program, we create a new file program.bin in the C drive.', 'Finally, we close the file.', ""You'll get the same records you inserted in Example 3.""]","['A file is a container in computer storage devices used for storing data.', 'When dealing with files, there are two types of files you should know about:', 'Text files are the normal .txt files. You can easily create text files using any simple text editors such as Notepad.', 'They take minimum effort to maintain, are easily readable, and provide the least security and takes bigger storage space.', ""Instead of storing data in plain text, they store it in the binary form (0's and 1's)."", 'They can hold a higher amount of data, are not readable easily, and provides better security than text files.', 'In C, you can perform four major operations on files, either text or binary:', 'Opening a file is performed using the fopen() function defined in the stdio.h header file.', 'The file (both text and binary) should be closed after reading/writing.', 'Here, fptr is a file pointer associated with the file to be closed.', 'For reading and writing to a text file, we use the functions fprintf() and fscanf().', 'This program takes a number from the user and stores in the file program.txt.', 'This program reads the integer present in the program.txt file and prints it onto the screen.', 'If you successfully created the file from Example 1, running this program will get you the integer you entered.', 'Other functions like fgetchar(), fputc() etc. can be used in a similar way.', 'To write into a binary file, you need to use the fwrite() function. The functions take four arguments:', 'We declare a structure threeNum with three numbers - n1, n2 and n3, and define it in the main function as num.', 'Now, inside the for loop, we store the value into the file using fwrite().', 'The first parameter takes the address of num and the second parameter takes the size of the structure threeNum.', 'Function fread() also take 4 arguments similar to the fwrite() function as above.', 'In this program, you read the same file program.bin and loop through the records one by one.', 'In simple terms, you read one threeNum record of threeNum size from the file pointed by *fptr into the structure num.', 'This will waste a lot of memory and operation time. An easier way to get to the required data can be achieved using fseek().', 'As the name suggests, fseek() seeks the cursor to the given record in the file.', 'This program will start reading the records from the file program.bin in the reverse order (last to first) and prints it.']","[""When you open those files, you'll see all the contents within the file as plain text. You can easily edit or delete the contents."", 'When working with files, you need to declare a pointer of type file. This declaration is needed for communication between the file and the program.', 'They are just the file versions of printf() and scanf(). The only difference is that fprintf() and fscanf() expects a pointer to the structure FILE.', 'After you compile and run this program, you can see a text file program.txt created in C drive of your computer. When you open the file, you can see the integer you entered.', 'Functions fread() and fwrite() are used for reading from and writing to a file on the disk respectively in case of binary files.', ""Since we're only inserting one instance of num, the third parameter is 1. And, the last parameter *fptr points to the file we're storing the data."", 'If you have many records inside a file and need to access a record at a specific position, you need to loop through all the records before it to get the record.', 'The first parameter stream is the pointer to the file. The second parameter is the position of the record to be found, and the third parameter specifies the location where the offset starts.']","['FILE *fptr;', 'fclose(fptr);', '#include <stdio.h>', '#include <stdlib.h>', 'int main()', '   int num;', '   FILE *fptr;', '   if(fptr == NULL)', '      printf(""Error!"");   ', '      exit(1);             ', '   printf(""Enter num: "");', '   scanf(""%d"",&num);', '   fprintf(fptr,""%d"",num);', '   fclose(fptr);', '   return 0;', '#include <stdio.h>', '#include <stdlib.h>', 'int main()', '   int num;', '   FILE *fptr;', '       exit(1);', '   fscanf(fptr,""%d"", &num);', '   fclose(fptr); ', '   return 0;', '#include <stdio.h>', '#include <stdlib.h>', 'struct threeNum', '   int n1, n2, n3;', 'int main()', '   int n;', '   struct threeNum num;', '   FILE *fptr;', '       exit(1);', '   for(n = 1; n < 5; ++n)', '      num.n1 = n;', '      num.n2 = 5*n;', '      num.n3 = 5*n + 1;', '   fclose(fptr); ', '   return 0;', '#include <stdio.h>', '#include <stdlib.h>', 'struct threeNum', '   int n1, n2, n3;', 'int main()', '   int n;', '   struct threeNum num;', '   FILE *fptr;', '       exit(1);', '   for(n = 1; n < 5; ++n)', '   fclose(fptr); ', '   return 0;', '#include <stdio.h>', '#include <stdlib.h>', 'struct threeNum', '   int n1, n2, n3;', 'int main()', '   int n;', '   struct threeNum num;', '   FILE *fptr;', '       exit(1);', '   for(n = 1; n < 5; ++n)', '   fclose(fptr); ', '   return 0;']","['fopen(""E:\\\\cprogram\\\\newprogram.txt"",""w"");', 'fopen(""E:\\\\cprogram\\\\oldprogram.bin"",""rb"");', '   fptr = fopen(""C:\\\\program.txt"",""w"");', '   if ((fptr = fopen(""C:\\\\program.txt"",""r"")) == NULL){', '       printf(""Error! opening file"");', '   printf(""Value of n=%d"", num);', 'fwrite(addressData, sizeData, numbersData, pointerToFile);', '   if ((fptr = fopen(""C:\\\\program.bin"",""wb"")) == NULL){', '       printf(""Error! opening file"");', '      fwrite(&num, sizeof(struct threeNum), 1, fptr); ', 'fread(addressData, sizeData, numbersData, pointerToFile);', '   if ((fptr = fopen(""C:\\\\program.bin"",""rb"")) == NULL){', '       printf(""Error! opening file"");', '      fread(&num, sizeof(struct threeNum), 1, fptr); ', '      printf(""n1: %d\\tn2: %d\\tn3: %d\\n"", num.n1, num.n2, num.n3);', 'fseek(FILE * stream, long int offset, int whence);', '   if ((fptr = fopen(""C:\\\\program.bin"",""rb"")) == NULL){', '       printf(""Error! opening file"");', '   fseek(fptr, -sizeof(struct threeNum), SEEK_END);', '      fread(&num, sizeof(struct threeNum), 1, fptr); ', '      printf(""n1: %d\\tn2: %d\\tn3: %d\\n"", num.n1, num.n2, num.n3);', '      fseek(fptr, -2*sizeof(struct threeNum), SEEK_CUR);']",[],"['ode|||Meaning of Mode|||During Inexistence of file&&&|||Open for reading.|||If the file does not exist, fopen() returns NULL.&&&b|||Open for reading in binary mode.|||If the file does not exist, fopen() returns NULL.&&&|||Open for writing.|||If the file exists, its contents are overwritten.|||\t\t\t\tIf the file does not exist, it will be created.&&&b|||Open for writing in binary mode.|||If the file exists, its contents are overwritten.|||\t\t\t\tIf the file does not exist, it will be created.&&&|||Open for append.|||\t\t\t\tData is added to the end of the file.|||If the file does not exist, it will be created.&&&b|||Open for append in binary mode.|||\t\t\t\tData is added to the end of the file.|||If the file does not exist, it will be created.&&&+|||Open for both reading and writing.|||If the file does not exist, fopen() returns NULL.&&&b+|||Open for both reading and writing in binary mode.|||If the file does not exist, fopen() returns NULL.&&&+|||Open for both reading and writing.|||If the file exists, its contents are overwritten.|||\t\t\t\tIf the file does not exist, it will be created.&&&b+|||Open for both reading and writing in binary mode.|||If the file exists, its contents are overwritten.|||\t\t\t\tIf the file does not exist, it will be created.&&&+|||Open for both reading and appending.|||If the file does not exist, it will be created.&&&b+|||Open for both reading and appending in binary mode.|||If the file does not exist, it will be created.', 'hence|||Meaning&&&EEK_SET|||Starts the offset from the beginning of the file.&&&EEK_END|||Starts the offset from the end of the file.&&&EEK_CUR|||Starts the offset from the current location of the cursor in the file.']","[""When a program is terminated, the entire data is lost. Storing in a file will preserve your data even if the program terminates.|||If you have to enter a large number of data, it will take a lot of time to enter them all.|||However, if you have a file containing all the data, you can easily access the contents of the file using a few commands in C.|||You can easily move your data from one computer to another without any changes.|||Let's suppose the file newprogram.txt doesn't exist in the location E:\\cprogram. The first function creates a new file named newprogram.txt and opens it for writing as per the mode 'w'.|||The writing mode allows you to create and edit (overwrite) the contents of the file.|||Now let's suppose the second binary file oldprogram.bin exists in the location E:\\cprogram. The second function opens the existing file for reading in binary mode 'rb'.|||The reading mode only allows you to read the file, you cannot write into the file.|||&&&Text files|||Binary files|||Creating a new file|||Opening an existing file|||Closing a file|||Reading from and writing information to a file|||address of data to be written in the disk|||size of data to be written in the disk|||number of such type of data|||pointer to the file where you want to write.|||""]"
36,['C Files Examples'],"[""In this article, you'll find a list of examples to handle file input/output operations in C programming.""]",[],[],['C File Examples'],[],[],[],"['To understand all programs on this page, you should have the knowledge of the following topics.', '1. C program to read name and marks of n number of students and store them in a file.']","['2. C program to read name and marks of n number of students from and store them in a file. If the file previously exits, add the information to the file.', '3. C program to write all the members of an array of structures to a file using fwrite(). Read the array from the file and display on the screen.']","['#include <stdio.h>', 'int main()', '   char name[50];', '   int marks, i, num;', '   scanf(""%d"", &num);', '   FILE *fptr;', '   if(fptr == NULL)', '       printf(""Error!"");', '       exit(1);', '   for(i = 0; i < num; ++i)', '      scanf(""%s"", name);', '      printf(""Enter marks: "");', '      scanf(""%d"", &marks);', '   fclose(fptr);', '   return 0;', '#include <stdio.h>', 'int main()', '   char name[50];', '   int marks, i, num;', '   scanf(""%d"", &num);', '   FILE *fptr;', '   if(fptr == NULL)', '       printf(""Error!"");', '       exit(1);', '   for(i = 0; i < num; ++i)', '      scanf(""%s"", name);', '      printf(""Enter marks: "");', '      scanf(""%d"", &marks);', '   fclose(fptr);', '   return 0;', '#include <stdio.h>', 'struct student', '   char name[50];', '   int height;', 'int main(){', '    FILE *fptr;', '    int i;', '    for(i = 0; i < 5; ++i)', '        fflush(stdin);', '        gets(stud1[i].name);', '    fclose(fptr);', '    for(i = 0; i < 5; ++i)', '    fclose(fptr);']","['   printf(""Enter number of students: "");', '   fptr = (fopen(""C:\\\\student.txt"", ""w""));', '      printf(""For student%d\\nEnter name: "", i+1);', '      fprintf(fptr,""\\nName: %s \\nMarks=%d \\n"", name, marks);', '   printf(""Enter number of students: "");', '   fptr = (fopen(""C:\\\\student.txt"", ""a""));', '      printf(""For student%d\\nEnter name: "", i+1);', '      fprintf(fptr,""\\nName: %s \\nMarks=%d \\n"", name, marks);', '    struct student stud1[5], stud2[5];   ', '    fptr = fopen(""file.txt"",""wb"");', '        printf(""Enter height: ""); ', '        scanf(""%d"", &stud1[i].height); ', '    fwrite(stud1, sizeof(stud1), 1, fptr);', '    fptr = fopen(""file.txt"", ""rb"");', '    fread(stud2, sizeof(stud2), 1, fptr);', '        printf(""Name: %s\\nHeight: %d"", stud2[i].name, stud2[i].height);']",[],[],['C Arrays|||C Pointers|||Array and Pointer Relation|||File I/O|||']
37,['C enums'],"['In this tutorial, you will learn about enum (enumeration) in C programming with the help of examples.']",[],[],"['Enumerated Type Declaration', 'Why enums are used?']","['Example: Enumeration Type', 'How to use enums for flags?']",[],"['Here, a variable check of the type enum boolean is created.', 'You can also declare enum variables like this.', 'Output', 'Output', 'Here, we are getting 4 because the size of int is 4 bytes.', 'This makes enum a good choice to work with flags.', 'Let us take an example,', 'Output', 'Also, you can add flags according to your requirements.']","[""When you define an enum type, the blueprint for the variable is created. Here's how you can create variables of enum types."", 'Here, the value of false is equal to 0 and the value of true is equal to 1.', 'An enum variable can take\xa0only one value. Here is an example to demonstrate it,', 'Suppose you are designing a button for Windows application. You can set flags ITALICS, BOLD and UNDERLINE to work with text.', 'There is a reason why all the integral constants are a power of 2 in the above pseudocode.', 'When the output is 5, you always know that bold and underline is used.', 'Here, we have added italics to our design. Note, only code for italics is written inside the if statement.']","['In C programming, an enumeration type (also called enum) is a data type that consists of integral constants. To define enums, the enum keyword is used.', 'By default, const1 is 0, const2 is 1 and so on. You can change default values of enum elements during declaration (if necessary).', 'Since the integral constants are a power of 2, you can combine two or more flags at once without overlapping using bitwise OR | operator. This allows you to choose two or more flags at once. For example,', 'You can accomplish almost anything in C programming without using enumerations. However, they can be pretty handy in certain situations.']","['#include <stdio.h>', 'int main()', '    enum week today;', '    today = Wednesday;', '    printf(""Day %d"",today+1);', '    return 0;', '#include <stdio.h>', 'enum suit {', '    club = 0,', '    diamonds = 10,', '    hearts = 20,', '    spades = 3', 'int main() ', '    card = club;', '\treturn 0;', 'enum designFlags {', '\tITALICS = 1,', '\tBOLD = 2,', '\tUNDERLINE = 4', '} button;', '#include <stdio.h>', 'enum designFlags {', '\tBOLD = 1,', '\tITALICS = 2,', '\tUNDERLINE = 4', 'int main() {', '\tprintf(""%d"", myDesign);', '\treturn 0;']","['enum week {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};', '\tprintf(""Size of enum variable = %d bytes"", sizeof(card));\t', '\tint myDesign = BOLD | UNDERLINE; ']","['enum flag {const1, const2, ..., constN};', 'enum suit {', '    club = 0,', '    diamonds = 10,', '    hearts = 20,', '    spades = 3,', '};', 'enum boolean {false, true};', 'enum boolean check; // declaring an enum variable', 'enum boolean {false, true} check;', 'Day 4', 'Size of enum variable = 4 bytes', 'ITALICS = 00000001', 'BOLD = 00000010', 'UNDERLINE = 00000100 ', '5', 'if (myDesign & ITALICS) {', '}']",[],[]
38,['C Preprocessor and Macros'],"['In this tutorial, you will be introduced to c preprocessors, and you will learn to use #include, #define and conditional compilation with the help of examples.']",[],[],"['Including Header Files: #include', 'Macros using #define', 'Function like Macros', 'Conditional Compilation', 'Predefined Macros']","['Example 1: #define preprocessor', 'Example 2: Using #define preprocessor', 'Uses of Conditional', 'How to use conditional?', '#ifdef Directive', '#if, #elif and #else Directive', '#defined', 'Example 3: Get current time using __TIME__', 'Recommended Readings']",['//cdn.programiz.com/sites/tutorial2program/files/c-preprocessor.jpg'],"['All preprocessing directives begin with a # symbol. For example,', 'Some of the common uses of C preprocessor are:', 'Visit this page to learn more about using header files.', ""Here's an example."", 'Suppose, we passed 5 as an argument then, it expands as below:', ""It's similar to a if statement with one major difference."", 'The optional #else directive can be used with #if directive.', 'Here are some predefined macros in C programming.', 'Output']","['The #include preprocessor is used to include header files to C programs. For example,', ""That's the reason why you need to use #include <stdio.h> before you can use functions like scanf() and printf()."", 'A macro is a fragment of code that is given a name. You can define a macro in C using the #define preprocessor directive.', 'Here, when we use c in our program, it is replaced with 299792458.', 'Every time the program encounters circleArea(argument), it is replaced by (3.1415*(argument)*(argument)).', 'Visit this page to learn more about macros and #define preprocessor.', 'To use conditional, #ifdef, #if, #defined, #else and #elif directives are used.', 'Here, the conditional codes are included in the program only if MACRO is defined.', 'Here, expression is an expression of integer type (can be integers, characters, arithmetic expression, macros and so on).', 'The conditional codes are included in the program only if the expression is evaluated to a non-zero value.', 'You can also add nested conditional to your #if...#else using #elif', ""The special operator #defined is used to test whether a certain macro is defined or not. It's often used with #if directive."", 'The following program outputs the current time using __TIME__ macro.']","['The C preprocessor is a macro preprocessor (allows you to define macros) that transforms your program before it is compiled. These transformations can be the inclusion of header file, macro expansions etc.', 'Here, stdio.h is a header file. The #include preprocessor directive replaces the above line with the contents of stdio.h header file.', 'You can also create your own header file containing function declaration and include it in your program using this preprocessor directive.', 'In C programming, you can instruct preprocessor whether to include a block of code or not. To do so, conditional directives can be used.', 'The if statement is tested during the execution time to check whether a block of code should be executed or not whereas, the conditionals are used to include (or skip) a block of code in your program before execution.']","['#define PI 3.14', '#include <stdio.h>', '#include ""my_header.h""', '#include <stdio.h>', '#define PI 3.1415', 'int main()', '    float radius, area;', '    scanf(""%f"", &radius);', '    area = PI*radius*radius;', '    printf(""Area=%.2f"",area);', '    return 0;', '#include <stdio.h>', '#define PI 3.1415', '#define circleArea(r) (PI*r*r)', 'int main() {', '    float radius, area;', '    scanf(""%f"", &radius);', '    area = circleArea(radius);', '    return 0;', '#ifdef MACRO     ', '#if expression', '#if expression', '#if expression', '#elif expression1', '#elif expression2', '#include <stdio.h>', 'int main()']","['#define c 299792458  // speed of light', '    printf(""Enter the radius: "");', '#define circleArea(r) (3.1415*(r)*(r))', 'circleArea(5) expands to (3.1415*5*5)', '    printf(""Enter the radius: "");', '    printf(""Area = %.2f"", area);', '   conditional codes if expression is non-zero', '   conditional if expression is 0', '#if defined BUFFER_SIZE && BUFFER_SIZE >= 2048', '   printf(""Current time: %s"",__TIME__);   ']",['Current time: 19:54:39'],"['acro|||Value&&&_DATE__|||A string containing the current date&&&_FILE__|||A string containing the file name&&&_LINE__|||An integer representing the current line number&&&_STDC__|||If follows ANSI standard C, then the value is a nonzero integer&&&_TIME__|||A string containing the current date.']","['use different code depending on the machine, operating system|||compile same source file in two different programs|||to exclude certain code from the program but to keep it as reference for future purpose|||Line control|||Pragmas|||Preprocessor Output|||Other directives|||']"
39,['C Standard Library Functions'],"[""In this tutorial, you'll learn about the standard library functions in C. More specifically, what are they, different library functions in C and how to use them in your program.""]",[],[],"['Advantages of Using C library functions', 'Example: Square root using sqrt() function', 'Library Functions in Different Header Files']",[],[],"['1. They work', '2. The functions are optimized for performance', '3. It saves considerable development time', '4. The functions are portable', 'Suppose, you want to find the square root of a number.', 'When you run the program, the output will be:']","['C Standard library functions or simply C Library functions are inbuilt functions in C programming.', 'If you want to use the printf() function, the header file <stdio.h> should be included.', 'If you try to use printf() without including the stdio.h header file, you will get an error.']","['The prototype and data definitions of these functions are present in their respective header files. To use these functions we need to include the header file in our program. For example,', 'One of the most important reasons you should use library functions is simply because they work. These functions have gone through multiple rigorous testing and are easy to use.', 'Since, the functions are ""standard library"" functions, a dedicated group of developers constantly make them better. In the process, they are able to create the most efficient code optimized for maximum performance.', ""Since the general functions like printing to a screen, calculating the square root, and many more are already written. You shouldn't worry about creating them once again."", 'With ever-changing real-world needs, your application is expected to work every time, everywhere. And, these library functions help you in that they do the same thing on every computer.', 'To compute the square root of a number, you can use the sqrt() library function. The function is defined in the math.h header file.']","['#include <stdio.h>', 'int main()', '#include <stdio.h>', '#include <math.h>', 'int main()', '   float num, root;', '   printf(""Enter a number: "");', '   scanf(""%f"", &num);', '   root = sqrt(num);', '   return 0;']","['   printf(""Catch me if you can.""); ', '   printf(""Square root of %.2f = %.2f"", num, root);']","['Enter a number: 12', 'Square root of 12.00 = 3.46']",[' Header Files|||Description&&&assert.h>|||Program assertion functions&&&ctype.h>|||Character type functions&&&locale.h>|||Localization functions&&&math.h>|||Mathematics functions&&&setjmp.h>|||Jump functions&&&signal.h>|||Signal handling functions&&&stdarg.h>|||Variable arguments handling functions&&&stdio.h>|||Standard Input/Output functions&&&stdlib.h>|||Standard Utility functions&&&string.h>|||String handling functions&&&time.h>|||Date time functions'],[]
