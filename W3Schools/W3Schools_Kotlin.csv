,main_headings,sub_headings_h2,sub_headings_h3,links,image_urls,facts,definitions,explanations,codes,table_data,list_items
0,['Kotlin Tutorial'],"['Learn Kotlin', 'Examples in Each Chapter', 'Kotlin Exercises', 'Test Yourself With Exercises', 'Exercise:', 'Learn by Examples', 'Download Kotlin']",['Example'],"['https://www.w3schools.com/kotlin//default.asp', 'https://www.w3schools.com/kotlin/kotlin_intro.php', 'https://www.w3schools.com/kotlin/kotlin_intro.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_helloworld', 'https://www.w3schools.com/kotlin/exercise.php?filename=exercise_syntax1', 'https://www.w3schools.com/kotlin/kotlin_examples.php', 'https://github.com/JetBrains/kotlin', 'https://www.w3schools.com/kotlin//default.asp', 'https://www.w3schools.com/kotlin/kotlin_intro.php']",[],"['Kotlin is a modern, trending programming language.', 'Kotlin is used to develop Android apps, server side apps, and much more.', 'Click on the ""Try it Yourself"" button to see how it works.', 'We recommend reading this tutorial, in the sequence listed in the left menu.', 'Insert the missing part of the code below to output ""Hello World"".', 'Start the Exercise', 'See All Kotlin Examples', 'Download Kotlin from github:https://github.com/JetBrains/kotlin']","['Kotlin is easy to learn, especially if you already know Java (it is   100% compatible with Java).', 'Our ""Try it Yourself"" editor makes it easy to learn Kotlin. You can edit the code and view the result in your browser:', 'Learn by examples! This tutorial supplements all explanations with clarifying examples.']",[],"['\n  fun main() { \xa0 println(""Hello World"") }']",[],[]
1,['Kotlin Introduction'],"['What is Kotlin?', 'Why Use Kotlin?', 'Get Started']",[],"['https://www.w3schools.com/kotlin/index.php', 'https://www.w3schools.com/kotlin/kotlin_getstarted.php', 'https://www.w3schools.com/kotlin//java/default.asp', 'https://www.w3schools.com/kotlin/kotlin_getstarted.php', 'https://www.w3schools.com/kotlin/index.php', 'https://www.w3schools.com/kotlin/kotlin_getstarted.php']",[],"['Kotlin is used for:', 'This tutorial will teach you the very basics of Kotlin.', 'It is not necessary to have any prior programming experience.']","['Kotlin is a modern, trending programming language that was released in 2016 by JetBrains.']","['It has become very popular since it is compatible with Java (one of the most popular programming languages out there), which means that Java code (and libraries) can be used in Kotlin programs.']",[],[],"['Mobile applications (specially Android apps)|||Web development|||Server side applications|||Data science|||And much, much more!|||Kotlin is fully compatible with Java|||Kotlin works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)|||Kotlin is concise and safe|||Kotlin is easy to learn, especially if you already know Java|||Kotlin is free to use|||Big community/support|||']"
2,['Kotlin Get Started'],"['Kotlin IDE', 'Kotlin Install', 'Learning Kotlin At W3Schools']",['Main.kt'],"['https://www.w3schools.com/kotlin/kotlin_intro.php', 'https://www.w3schools.com/kotlin/kotlin_syntax.php', 'https://www.jetbrains.com/idea/download/', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_helloworld', 'https://www.w3schools.com/kotlin/kotlin_intro.php', 'https://www.w3schools.com/kotlin/kotlin_syntax.php']","['https://www.w3schools.com/kotlin/intellij.png', 'https://www.w3schools.com/kotlin/intellij2.png', 'https://www.w3schools.com/kotlin/intellij3.png', 'https://www.w3schools.com/kotlin/intellij4.png', 'https://www.w3schools.com/kotlin/intellij5s.png', 'https://www.w3schools.com/kotlin/intellij6.png', 'https://www.w3schools.com/kotlin/intellij7.png', 'https://www.w3schools.com/kotlin/intellij8.png']","['The easiest way to get started with Kotlin, is to use an IDE.', 'An IDE (Integrated Development Environment) is used to edit and compile code.']","['Once IntelliJ is downloaded and installed, click on the New Project button to get started with IntelliJ:', 'Then click on ""Kotlin"" in the left side menu, and enter a name for your project:', 'Select the ""File"" option and add a name to your Kotlin file, for example ""Main"":', 'Next, IntelliJ will build your project, and run the Kotlin file. The output will look something like this:']","['In this chapter, we will use IntelliJ (developed by the same people that created Kotlin) which is free to download from https://www.jetbrains.com/idea/download/.', 'Next, we need to install something called JDK (Java Development Kit) to get our Kotlin project up and going. Click on the ""Project JDK"" menu, select ""Download JDK"" and select a version and vendor (e.g. AdoptOpenJDK 11)and click on the ""Download"" button:', 'When the JDK is downloaded and installed, choose it from the select menu and then click on the ""Next"" button and at last ""Finish"":', 'Now we can start working with our Kotlin project. Do not worry about all of the different buttons and functions in IntelliJ. For now, just open the src (source) folder, and follow the same steps as in the image below, to create a kotlin file:', ""You have now created your first Kotlin file (Main.kt). Let's add some Kotlin code to it, and run the program to see how it works. Inside the Main.kt file, add the following code:"", 'Don\'t worry if you don\'t understand the code above - we will discuss it in detail in later chapters. For now, lets focus on how to run the code. Click on the Run button at the top navigation bar, then click ""Run"", and select ""Mainkt"". ', 'As you can see, the output of the code was ""Hello World"", meaning that you have now written and executed your first Kotlin program!', 'When learning Kotlin at w3schools.com, you can use our ""Try it Yourself"" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward:']","['\n  fun main() { \xa0 println(""Hello World"") }', '\n  fun main() {\xa0 println(""Hello World"")}']",[],[]
3,['Kotlin Syntax'],"['Kotlin Syntax', 'Main Parameters']","['Example', 'Example explained', 'Example']","['https://www.w3schools.com/kotlin/kotlin_getstarted.php', 'https://www.w3schools.com/kotlin/kotlin_output.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_helloworld', 'https://www.w3schools.com/kotlin//java/default.asp', 'https://www.w3schools.com/kotlin//cpp/default.asp', 'https://www.w3schools.com/kotlin//cs/default.asp', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_helloworld2', 'https://www.w3schools.com/kotlin/kotlin_getstarted.php', 'https://www.w3schools.com/kotlin/kotlin_output.php']",[],[],[],"['In the previous chapter, we created a Kotlin file called Main.kt, and we used the following code to print ""Hello World"" to the screen:', 'The fun keyword is used to declare a function. A function is a block of code designed to perform a particular task. In the example above, it declares the main() function.', ""The main() function is something you will see in every Kotlin program. This function is used to execute code. Any code inside the main() function's curly brackets {} will be executed."", 'For example, the println() function is inside the main() function, meaning that this will be executed. The println() function is used to output/print text, and in our example it will output ""Hello World"".', 'Good To Know: In Kotlin, code statements do not have to end with a semicolon (;) (which is often required for other programming languages, such as Java, C++, C#, etc.).', 'Before Kotlin version 1.3, it was required to use the main() function with parameters, like: fun main(args : Array<String>). The example above had to be written like this to work:', 'Note: This is no longer required, and the program will run fine without it. However, it will not do any harm if you have been using it in the past, and will continue to use it.']","['\n  fun main() { \xa0 println(""Hello World"") }', '\n  fun main(args : Array<String>) { \xa0 println(""Hello World"") }']",[],[]
4,['Kotlin Output (Print Text)'],"['Kotlin Output (Print)', 'The print() function']","['Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_syntax.php', 'https://www.w3schools.com/kotlin/kotlin_comments.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_output', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_output2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_output3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_output_print', 'https://www.w3schools.com/kotlin/kotlin_syntax.php', 'https://www.w3schools.com/kotlin/kotlin_comments.php']",[],"['The println() function is used to output values/print text:', 'You can also print numbers, and perform mathematical calculations:']","['You can add as many println() functions as you want. Note that it will add a new line for each function:', 'Note that we have added a space character to create a space between the sentences.']","['There is also a print() function, which is similar to println(). The only difference is that it does not insert a new line at the end of the output:']","['\n  fun main() { \xa0 println(""Hello World"") }', '\n  fun main() { \xa0 println(""Hello World!"")\xa0 println(""I \n  am learning Kotlin."")\xa0 println(""It is awesome!"")}', '\n  fun main() { \xa0 println(3 + 3)}', '\n  fun main() { \xa0 print(""Hello World! "")\xa0 print(""I \n  am learning Kotlin. "")\xa0 print(""It is awesome!"")}']",[],[]
5,['Kotlin Comments'],"['Kotlin Comments', 'Single-line Comments', 'Multi-line Comments']","['Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_output.php', 'https://www.w3schools.com/kotlin/kotlin_variables.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_comments_single', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_comments_end', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_comments_multi', 'https://www.w3schools.com/kotlin/kotlin_output.php', 'https://www.w3schools.com/kotlin/kotlin_variables.php']",[],"['Single-line comments starts with two forward slashes (//).', 'This example uses a single-line comment before a line of code:', 'This example uses a single-line comment at the end of a line of code:', 'Multi-line comments start with /* and ends with */.', 'Any text between /* and */ will be ignored by Kotlin.', 'This example uses a multi-line comment (a comment block) to explain the code:']",['Any text between // and the end of the line is ignored by Kotlin (will not be executed).'],"['Comments can be used to explain Kotlin code, and to make it more readable. It can also be used to prevent execution when testing alternative code.']","['\n  // This is a commentprintln(""Hello World"") ', '\n  println(""Hello World"")\xa0 // This is a comment', '\n  /* The code below will print the words Hello Worldto the screen, and it is \n  amazing */println(""Hello World"")\xa0 ']",[],[]
6,['Kotlin Variables'],"['Kotlin Variables', 'Variable Type', 'Notes on val', 'Display Variables', 'Variable Names']","['Syntax', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'camelCase variables']","['https://www.w3schools.com/kotlin/kotlin_comments.php', 'https://www.w3schools.com/kotlin/kotlin_data_types.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables4', 'https://www.w3schools.com/kotlin/kotlin_data_types.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables5', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_change', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_pi', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println3', 'https://www.w3schools.com/kotlin/kotlin_comments.php', 'https://www.w3schools.com/kotlin/kotlin_data_types.php']",[],"['Variables are containers for storing data values.', 'However, it is possible to specify the type if you insist:', 'This works fine:', 'This will generate an error:', 'Note: You will learn more about Data Types in the next chapter.', 'The following example will generate an error:', 'When using var, you can change the value whenever you want:', 'To combine both text and a variable, use the + character:', 'You can also use the + character to add a variable to another variable:', 'For numeric values, the + character works as a mathematical operator:', 'From the example above, you can expect:', 'The general rule for Kotlin variables are:']","['To create a variable, use var or val, and assign a value to it with the equal sign (=):', 'Kotlin is smart enough to understand that ""John"" is a String (text), and that 1975 is an Int (number) variable.', 'When you create a variable with the val keyword, the value   cannot be changed/reassigned.', 'The val keyword is useful when you want a variable to always store the same value, like PI (3.14159...):', 'Like you have seen with the examples above, the println() method is often used to display variables.', 'A variable can have a short name (like x and y) or more descriptive names (age, sum, totalVolume).']","['The difference between var and val is that variables declared with the var keyword can be changed/modified, while val variables cannot.', 'Unlike many other programming languages, variables in Kotlin do not need to be declared with a specified type (like ""String"" for text or ""Int"" for numbers, if you are familiar with those).', 'To create a variable in Kotlin that should store text and another that should store a number, look at the following example:', 'You can also declare a variable without assigning the value, and assign the value later. However, this is only possible when you specify the type:', 'You might notice that we used firstName and lastName as variable names in the example above, instead of firstname and lastname. This is called ""camelCase"", and it is considered as good practice as it makes it easier to read when you have a variable name with different words in it, for example ""myFavoriteFood"", ""rateActionMovies"" etc.']","['\n  var variableName = value\n  val variableName = value', '\n  var name = ""John""val birthyear = 1975println(name)\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Print the value of name\n  println(birthyear)\xa0\xa0\xa0\xa0 // Print the value of birthyear', '\n  var name = ""John""\xa0\xa0\xa0\xa0\xa0 // String (text)val birthyear = 1975\xa0\xa0 // Int \n  (number)println(name)\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Print the value of name\n  println(birthyear)\xa0\xa0\xa0\xa0 // Print the value of birthyear', '\n  var name: \n  String = ""John"" // Stringval birthyear: Int = 1975 // Intprintln(name)\n  println(birthyear)', '\n  var name: Stringname = ""John""println(name)', '\n  var namename = ""John""println(name)', '\n  val \n  name = ""John""name = ""Robert""\xa0 // Error (Val \n  cannot be reassigned)println(name)', '\n  var \n  name = ""John""name = ""Robert""println(name)', '\n  val pi = 3.14159265359\n  println(pi)', '\n  val name = ""John""println(""Hello "" + name)', '\n  val firstName = ""John ""val lastName = ""Doe""val fullName = firstName + \n  lastNameprintln(fullName)', '\n  val x = 5val y = 6println(x + y) // Print the value of x + y ']",[],"['x stores the value 5|||y stores the value 6|||Then we use the println() method to display the value of x + y, ||| which is 11|||Names can contain letters, digits, underscores, and dollar signs|||Names should start with a letter|||Names can also begin with $ and _ (but we will not use it in this tutorial)|||Names are case sensitive (""myVar"" and ""myvar"" are different variables)|||Names should start with a lowercase letter and it cannot contain whitespace|||Reserved words (like Kotlin keywords, such as |||  var or |||  String) cannot be used as names|||']"
7,['Kotlin Data Types'],"['Kotlin Data Types', 'Numbers', 'Integer Types', 'Difference Between Int and Long', 'Floating Point Types', 'Booleans', 'Characters', 'Strings', 'Arrays', 'Type Conversion']","['Example', 'Example', 'Byte', 'Example', 'Short', 'Example', 'Int', 'Example', 'Long', 'Example', 'Example', 'Float', 'Example', 'Double', 'Example', 'Scientific Numbers', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_variables.php', 'https://www.w3schools.com/kotlin/kotlin_operators.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_data_types', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_data_types2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_byte', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_short', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_int', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_long', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_float', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_double', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_scientific', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_char', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_string', 'https://www.w3schools.com/kotlin/kotlin_strings.php', 'https://www.w3schools.com/kotlin/kotlin_arrays.php', 'https://www.w3schools.com/kotlin//java/default.asp', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_conv', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_conv2', 'https://www.w3schools.com/kotlin/kotlin_variables.php', 'https://www.w3schools.com/kotlin/kotlin_operators.php']",[],"['In Kotlin, the type of a variable is decided by its value:', 'You will learn more about when you need to specify the type later.', 'Data types are divided into different groups:', 'Number types are divided into two groups:', 'The Short data type can store whole numbers from -32768 to 32767:', 'The Int data type can store whole numbers from -2147483648 to 2147483647:', 'Floating point types represent numbers with a decimal, such as 9.99 or 3.14515.', 'The Double data type can store fractional numbers from 1.7e−308 to 1.7e+038:', 'Use Float or Double?', 'The Boolean data type and can only take the values true or false:', 'You will learn more about strings in the Strings chapter.', 'You will learn more about arrays in the Arrays chapter.', 'Type conversion is when you convert the value of one data type to another type.']","['However, you learned from the previous chapter that it is possible to specify the type if you want:', 'A whole number is an Int as long as it is up to 2147483647. If it goes beyond that, it is defined as Long:', 'A floating point number can also be a scientific number with an ""e"" or ""E"" to indicate the power of 10:', 'Boolean values are mostly used for conditional testing, which you will learn more about in a later chapter.', 'Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.']","['Sometimes you have to specify the type, and often you don\'t. Anyhow, it is good to know what the different types represent.You will learn more about when you need to specify the type later.Data types are divided into different groups:NumbersCharactersBooleansStringsArraysNumbersNumber types are divided into two groups:Integer types store whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are Byte, Short, Int and Long.Floating point types represent numbers with a fractional part, containing one or more decimals. There are two types: Float and Double.If you don\'t specify the type for a numeric variable, it is most often returned as Int for whole numbers and Double for floating point numbers.Integer TypesByteThe Byte data type can store whole numbers from -128 to 127. This can be used instead of Int or other integer types to save memory when you are certain that the value will be within -128 and 127:Example  val myNum: Byte = 100  println(myNum)Try it Yourself »ShortThe Short data type can store whole numbers from -32768 to 32767:Example  val myNum: Short = 5000println(myNum)Try it Yourself »IntThe Int data type can store whole numbers from -2147483648 to 2147483647:Example  val myNum: Int = 100000  println(myNum)Try it Yourself »LongThe Long data type can store whole numbers from -9223372036854775808 to 9223372036854775808. This is used when Int is not large enough to store the value. Optionally, you can end the value with an ""L"":Example  val myNum: Long = 15000000000L  println(myNum)Try it Yourself »Difference Between Int and LongA whole number is an Int as long as it is up to 2147483647. If it goes beyond that, it is defined as Long:Example  val myNum1 = 2147483647\xa0 // Intval myNum2 = 2147483648\xa0 // LongFloating Point TypesFloating point types represent numbers with a decimal, such as 9.99 or 3.14515.FloatThe Float data type can store fractional numbers from 3.4e−038 to 3.4e+038. Note that you should end the value with an ""F"":Example  val myNum: Float = 5.75Fprintln(myNum)Try it Yourself »DoubleThe Double data type can store fractional numbers from 1.7e−308 to 1.7e+038:Example  val myNum: Double = 19.99println(myNum)Try it Yourself »Use Float or Double?The precision of a floating point value indicates how many digits the value can have after the decimal point.The precision of Float is only six or seven decimal digits, while Double variables have a precision of about 15 digits. Therefore it is safer to use Double for most calculations.Scientific NumbersA floating point number can also be a scientific number with an ""e"" or ""E"" to indicate the power of 10:Example  val myNum1: Float = 35E3Fval myNum2: Double = 12E4println(myNum1)println(myNum2)Try it Yourself »BooleansThe Boolean data type and can only take the values true or false:Example  val isKotlinFun: Boolean = trueval isFishTasty: Boolean = false  println(isKotlinFun)\xa0\xa0\xa0// Outputs true  println(isFishTasty)\xa0\xa0 // Outputs false Try it Yourself »Boolean values are mostly used for conditional testing, which you will learn more about in a later chapter.CharactersThe Char data type is used to store a single character. A char value must be surrounded by single quotes, like \'A\' or \'c\':Example  val myGrade: Char = \'B\'  println(myGrade)Try it Yourself »Unlike Java, you cannot use ASCII values to display certain characters. The value 66 would output a ""B"" in Java, but will generate an error in Kotlin:Example  val myLetter: Char = 66  println(myLetter) // ErrorStringsThe String data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:Example  val myText: String = ""Hello World""println(myText)Try it Yourself »You will learn more about strings in the Strings chapter.ArraysArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.You will learn more about arrays in the Arrays chapter.Type ConversionType conversion is when you convert the value of one data type to another type.In Kotlin, numeric type conversion is different from Java. For example, it is not possible to convert an Int type to a Long type with the following code:Example  val x: Int = 5 val y: Long = x println(y) // Error: Type mismatch Try it Yourself »To convert a numeric data type to another type, you must use one of the following functions: toByte(), toShort(), toInt(), toLong(), toFloat(), toDouble() or toChar():Example  val x: Int = 5 val y: Long = x.toLong()println(y)Try it Yourself »❮ PreviousNext ❯', 'Integer types store whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are Byte, Short, Int and Long.', 'Floating point types represent numbers with a fractional part, containing one or more decimals. There are two types: Float and Double.', ""If you don't specify the type for a numeric variable, it is most often returned as Int for whole numbers and Double for floating point numbers."", 'The Byte data type can store whole numbers from -128 to 127. This can be used instead of Int or other integer types to save memory when you are certain that the value will be within -128 and 127:', 'The Long data type can store whole numbers from -9223372036854775808 to 9223372036854775808. This is used when Int is not large enough to store the value. Optionally, you can end the value with an ""L"":', 'The Float data type can store fractional numbers from 3.4e−038 to 3.4e+038. Note that you should end the value with an ""F"":', 'The precision of a floating point value indicates how many digits the value can have after the decimal point.The precision of Float is only six or seven decimal digits, while Double variables have a precision of about 15 digits. Therefore it is safer to use Double for most calculations.', ""The Char data type is used to store a single character. A char value must be surrounded by single quotes, like 'A' or 'c':"", 'Unlike Java, you cannot use ASCII values to display certain characters. The value 66 would output a ""B"" in Java, but will generate an error in Kotlin:', 'The String data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:', 'In Kotlin, numeric type conversion is different from Java. For example, it is not possible to convert an Int type to a Long type with the following code:', 'To convert a numeric data type to another type, you must use one of the following functions: toByte(), toShort(), toInt(), toLong(), toFloat(), toDouble() or toChar():']","['\n  val myNum = 5\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Intval \n  myDoubleNum = 5.99\xa0\xa0\xa0\xa0// Doubleval myLetter = \'D\' \xa0\xa0\xa0\xa0 \xa0\xa0// \n  Charval myBoolean = true\xa0\xa0\xa0\xa0\xa0 // Booleanval myText = ""Hello"" \xa0\xa0\xa0\xa0 \n  // String', '\n  val myNum: Int = 5\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 // Intval \n  myDoubleNum: \n  Double = 5.99\xa0\xa0\xa0\xa0// Doubleval myLetter: Char = \'D\' \xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0// \n  Charval myBoolean: Boolean = true\xa0 \xa0\xa0 // Booleanval myText: \n  String = ""Hello"" \xa0\xa0\xa0\xa0 \n  // String', '\n  val myNum: Byte = 100\n  println(myNum)', '\n  val myNum: Short = 5000println(myNum)', '\n  val myNum: Int = 100000\n  println(myNum)', '\n  val myNum: Long = 15000000000L\n  println(myNum)', '\n  val myNum1 = 2147483647\xa0 // Intval myNum2 = 2147483648\xa0 // Long', '\n  val myNum: Float = 5.75Fprintln(myNum)', '\n  val myNum: Double = 19.99println(myNum)', '\n  val myNum1: Float = 35E3Fval myNum2: Double = 12E4println(myNum1)println(myNum2)', '\n  val isKotlinFun: Boolean = trueval isFishTasty: Boolean = false\n  println(isKotlinFun)\xa0\xa0\xa0// Outputs true\n  println(isFishTasty)\xa0\xa0 // Outputs false ', ""\n  val myGrade: Char = 'B'\n  println(myGrade)"", '\n  val myLetter: Char = 66\n  println(myLetter) // Error', '\n  val myText: String = ""Hello World""println(myText)', '\n  val x: Int = 5 val y: Long = x println(y) // Error: Type mismatch ', '\n  val x: Int = 5 val y: Long = x.toLong()println(y)']",[],['Numbers|||Characters|||Booleans|||Strings|||Arrays|||']
8,['Kotlin Operators'],"['Kotlin Operators', 'Arithmetic Operators', 'Kotlin Assignment Operators', 'Kotlin Comparison Operators', 'Kotlin Logical Operators']","['Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_data_types.php', 'https://www.w3schools.com/kotlin/kotlin_strings.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_add', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_sub', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_mult', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_div', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_mod', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_inc', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_dec', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_assignment1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_assignment2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_ass1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_ass2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_ass3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_ass4', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_ass5', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_ass6', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare4', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare5', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare6', 'https://www.w3schools.com/kotlin/kotlin_booleans.php', 'https://www.w3schools.com/kotlin/kotlin_conditions.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_logical1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_logical2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_logical3', 'https://www.w3schools.com/kotlin/kotlin_data_types.php', 'https://www.w3schools.com/kotlin/kotlin_strings.php']",[],"['Operators are used to perform operations on variables and values.', 'Kotlin divides the operators into the following groups:', 'Arithmetic operators are used to perform common mathematical operations.', 'Assignment operators are used to assign values to variables.', 'The addition assignment operator (+=) adds a value to a variable:', 'A list of all assignment operators:', 'You will learn much more about Booleans in the Boolean chapter and Conditions.', 'Logical operators are used to determine the logic between variables or values:']","['In the example below, the numbers 100 and 50 are operands, and the+ sign is an operator:', 'In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:', 'Comparison operators are used to compare two values, and returns a Boolean value: either true or false.']","['The value is called an operand, while the operation (to be performed between the two operands) is defined by an operator:', 'Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and a variable:']","['\n  var x = 100 + 50', '\n  var sum1 = 100 + 50\xa0\xa0\xa0\xa0\xa0\xa0 // 150 (100 + 50)\n  var sum2 = sum1 + 250\xa0\xa0\xa0\xa0 // 400 (150 + 250)var sum3 = \n  sum2 + sum2\xa0\xa0\xa0 // 800 (400 + 400)', '\n  var x = 10', '\n  var x = 10x += 5']","['Operand|||Operator|||Operand&&&100|||+|||50', 'Operator|||Name|||Description|||Example|||Try it&&&+|||Addition|||Adds together two values|||x + y|||Try it »&&&-|||Subtraction|||Subtracts one value from another|||x - y|||Try it »&&&*|||Multiplication|||Multiplies two values|||x * y|||Try it »&&&/|||Division|||Divides one value from another|||x / y|||Try it »&&&%|||Modulus|||Returns the division remainder|||x % y|||Try it »&&&++|||Increment|||Increases the value by 1|||++x|||Try it »&&&--|||Decrement|||Decreases the value by 1|||--x|||Try it »', 'Operator|||Example|||Same As|||Try it&&&=|||x = 5|||x = 5|||Try it »&&&+=|||x += 3|||x = x + 3|||Try it »&&&-=|||x -= 3|||x = x - 3|||Try it »&&&*=|||x *= 3|||x = x * 3|||Try it »&&&/=|||x /= 3|||x = x / 3|||Try it »&&&%=|||x %= 3|||x = x % 3|||Try it »', 'Operator|||Name|||Example|||Try it&&&==|||Equal to|||x == y|||Try it »&&&!=|||Not equal|||x != y|||Try it »&&&>|||Greater than|||x > y|||Try it »&&&<|||Less than|||x < y|||Try it »&&&>=|||Greater than or equal to|||x >= y|||Try it »&&&<=|||Less than or equal to|||x <= y|||Try it »', 'Operator|||Name|||Description|||Example|||Try it&&&&&\xa0|||Logical and|||Returns true if both statements are true|||x < 5 &&\xa0 x < 10|||Try it »&&&||\xa0|||Logical or|||Returns true if one of the statements is true|||x < 5 || x < 4|||Try it »&&&!|||Logical not|||Reverse the result, returns false if the result is true||||||Try it »']",['Arithmetic operators|||Assignment operators|||Comparison operators|||Logical operators|||']
9,['Kotlin Strings'],"['Kotlin Strings', 'Access a String', 'String Length', 'String Functions', 'Comparing Strings', 'Finding a String in a String', 'Quotes Inside a String', 'String Concatenation', 'String Templates/Interpolation']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_operators.php', 'https://www.w3schools.com/kotlin/kotlin_booleans.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings', 'https://www.w3schools.com/kotlin//java/default.asp', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables4', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_access', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_length', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_touppercase', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_compareto', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_indexof', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_quotes', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_conc', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_conc2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_template', 'https://www.w3schools.com/kotlin/kotlin_operators.php', 'https://www.w3schools.com/kotlin/kotlin_booleans.php']",[],"['Strings are used for storing text.', 'A string contains a collection of characters surrounded by double quotes:', 'This works fine:', 'This will generate an error:', ""To use quotes inside a string, use single quotes ('):"", 'You can also use the plus() function to concatenate two strings:', 'Just refer to the variable with the $ symbol:']","['However, just like with other data types, you can specify the type if you insist:', 'To access the characters (elements) of a string, you must refer to the index number inside square brackets.', 'String indexes start with 0. In the example below, we access the first and third element in txt:', '[0] is the first element. [1] is the second element, [2] is the third element, etc.', 'There are many string functions available, for example toUpperCase() and toLowerCase():', 'The compareTo(string) function compares two strings and returns 0 if both are equal:', 'The + operator can be used between strings to add them together to make a new string. This is called concatenation:', 'Note that we have added an empty text ("" "") to create a space between firstName and lastName on print.']","['Unlike Java, you do not have to specify that the variable should be a String. Kotlin is smart enough to understand that the greeting variable in the example above is a String because of the double quotes.', 'Note: If you want to create a String without assigning the value (and assign the value later), you must specify the type while declaring the variable:', 'A String in Kotlin is an object, which contain properties and functions that can perform certain operations on strings, by writing a dot character (.) after the specific string variable. For example, the length of a string can be found with the length property:', 'The indexOf() function returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):', 'Remember that Kotlin counts positions from zero.0 is the first position in a string, 1 is the second, 2 is the third ...', 'Instead of concatenation, you can also use ""string templates"", which is an easy way to add variables and expressions inside a string.', '""String Templates"" is a popular feature of Kotlin, as it reduces the amount of code. For example, you do not have to specify a whitespace between firstName and lastName, like we did in the concatenation example.']","['\n  var greeting = ""Hello""', '\n  var greeting: String = ""Hello""', '\n  var name: Stringname = ""John""println(name)', '\n  var namename = ""John""println(name)', '\n  var txt = ""Hello World""println(txt[0]) // first element (H)\n  println(txt[2]) // third element (l)', '\n  var txt = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""println(""The length of the txt string is: "" + \n  txt.length)', '\n  var txt = ""Hello World""println(txt.toUpperCase())\xa0\xa0 \n  // Outputs ""HELLO WORLD""println(txt.toLowerCase())\xa0\xa0 \n  // Outputs ""hello world""', '\n  var txt1 = ""Hello World""var txt2 = ""Hello World""\n  println(txt1.compareTo(txt2))\xa0 // \n  Outputs 0 (they are equal)', '\n  var txt = ""Please locate where \'locate\' occurs!""\n  println(txt.indexOf(""locate""))\xa0 // Outputs 7', '\n  var txt1 = ""It\'s alright""var txt2 = ""That\'s great""', '\n  var firstName = ""John""var lastName = ""Doe""println(firstName + "" "" + \n  lastName)', '\n  var firstName = ""John ""var lastName = ""Doe""\n  println(firstName.plus(lastName))', '\n  var firstName = ""John""var lastName = ""Doe""println(""My name is \n  $firstName $lastName"")']",[],[]
10,['Kotlin Booleans'],"['Kotlin Booleans', 'Boolean Values', 'Boolean Expression']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_strings.php', 'https://www.w3schools.com/kotlin/kotlin_conditions.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans_without', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans4', 'https://www.w3schools.com/kotlin/kotlin_strings.php', 'https://www.w3schools.com/kotlin/kotlin_conditions.php']",[],"['A Boolean expression returns a Boolean value: true or false.', 'Or even easier:', 'You will learn more about conditions in the next chapter.']","['Very often, in programming, you will need a data type that can only have one of two values, like:', 'For this, Kotlin has a Boolean data type, which can take the values true or false.', 'A boolean type can be declared with the Boolean keyword and can only take the values true or false:', 'In the examples below, we use the equal to (==) operator to evaluate an expression:', 'The Boolean value of an expression is the basis for all Kotlin comparisons and conditions.']","['Just like you have learned with other data types in the previous chapters, the example above can also be written without specifying the type, as Kotlin is smart enough to understand that the variables are Booleans:', 'You can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:']","['\n  val isKotlinFun: Boolean = trueval isFishTasty: Boolean = false\n  println(isKotlinFun)\xa0\xa0\xa0// Outputs true\n  println(isFishTasty)\xa0\xa0 // Outputs false ', '\n  val isKotlinFun = trueval isFishTasty = false\n  println(isKotlinFun)\xa0\xa0\xa0// Outputs true\n  println(isFishTasty)\xa0\xa0 // Outputs false ', '\n  val x = 10val y = 9println(x > y) // Returns true, because 10 is \n  greater than 9', '\n  println(10 > 9) // Returns true, because 10 is greater than 9', '\n  val x = 10;println(x == 10); // Returns true, because the value \n  of x is equal to 10', '\n  println(10 == 15); // Returns false, because 10 is not equal to 15']",[],['YES / NO|||ON / OFF|||TRUE / FALSE|||']
11,['Kotlin If ... Else'],"['Kotlin Conditions and If..Else', 'Kotlin if', 'Kotlin else', 'Kotlin else if ', 'Kotlin If..Else Expressions']","['Syntax', 'Example', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_booleans.php', 'https://www.w3schools.com/kotlin/kotlin_when.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if_else', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if_else_if', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if_else_exp', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if_else_exp2', 'https://www.w3schools.com/kotlin/kotlin_booleans.php', 'https://www.w3schools.com/kotlin/kotlin_when.php']",[],"['Kotlin supports the usual logical conditions from mathematics:', 'Kotlin has the following conditionals:', 'Use if to specify a block of code to be executed if a condition is true.', 'We can also test variables:', 'Use else to specify a block of code to be executed if the condition is false.', 'Use else if to specify a new condition if the first condition is false.', 'However, if the time was 14, our program would print ""Good day.""', 'When using if as an expression, you must also include else (required).', 'Note: You can ommit the curly braces {} when if has only one statement:']","['You can use these conditions to perform different actions for different decisions.', 'Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.', 'In Kotlin, you can also use if..else statements as expressions (assign a value to a variable and return it):', 'Tip: This example is similar to the ""ternary operator"" (short hand if...else) in Java.']","['Note: Unlike Java, if..else can be used as a statement or as an expression (to assign a value to a variable) in Kotlin. See an example at the bottom of the page to better understand it.', 'In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:', 'In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that ""x is greater than y"".', 'In the example above, time (20) is greater than 18, so the condition is false, so we move on to the else condition and print to the screen ""Good evening"". If the time was less than 18, the program would print ""Good day"".', 'In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the  else if statement, is also false, so we move on to the elsecondition since condition1 and condition2 is both false - and print to the screen ""Good evening"".']","['\n\n  if (condition) {\xa0 // block of code to be executed if the \n  condition is true}\n', '\n  if (20 > 18) {\xa0 println(""20 is greater than 18"")}', '\n  val x = 20val y = 18if (x > y) {\xa0 println(""x is greater than \n  y"")}', '\n\n  if (condition) {\xa0 // block of code to be executed if the \n  condition is true} else { \xa0 // block of code to be executed \n  if the condition is false}\n\n', '\n  val time = 20if (time < 18) {\xa0 println(""Good day."")} else {\xa0 println(""Good evening."")}// Outputs ""Good evening.""', '\n\n  if (condition1) {\xa0 // block of code to be executed if \n  condition1 is true} else if (condition2) {\xa0 // block of \n  code to be executed if the condition1 is false and condition2 is true\n  } else {\xa0 // block of code to be executed if the condition1 is false \n  and condition2 is false}\n', '\n  val time = 22if (time < 10) {\xa0 println(""Good morning."")} else if (time < 20) {\n  \xa0 println(""Good day."")} else {\xa0 println(""Good evening."")}\n  // Outputs ""Good evening.""', '\n  val time = 20val greeting = if (time < 18) {\xa0 ""Good day.""} \n  else {\xa0 ""Good evening.""}println(greeting)', '\n  fun main() {\xa0 val time = 20\xa0 val greeting = if (time < 18) \n  ""Good day."" else ""Good evening.""\xa0 println(greeting)}']",[],"['Less than: a < b|||Less than or equal to: a <= b|||Greater than: a > b|||Greater than or equal to: a >= b|||Equal to a == b|||Not Equal to: a != b|||Use if to specify a block of code to be executed, if a specified condition is true|||Use else to specify a block of code to be executed, if the same condition is false|||Use else if to specify a new condition to test, if the first condition is false|||Use when to specify many alternative blocks of code to be executed|||']"
12,['Kotlin When'],['Kotlin when'],['Example'],"['https://www.w3schools.com/kotlin/kotlin_conditions.php', 'https://www.w3schools.com/kotlin/kotlin_while_loop.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_when', 'https://www.w3schools.com/kotlin/kotlin_conditions.php', 'https://www.w3schools.com/kotlin/kotlin_while_loop.php']",[],"['It is used to select one of many code blocks to be executed:', 'Use the weekday number to calculate the weekday name:', 'The when expression is similar to the switch statement in Java.', 'This is how it works:']","['Instead of writing many if..else expressions, you can use the when expression, which is much easier to read.']",[],"['\n  val day = 4val result = when (day) {\xa0 1 -> ""Monday""\xa0 \n  2 -> ""Tuesday""\xa0 3 -> ""Wednesday""\xa0 4 -> ""Thursday""\xa0 \n  5 -> ""Friday""\xa0 6 -> ""Saturday""\xa0 7 -> ""Sunday""\xa0 else \n  -> ""Invalid day.""}println(result)// Outputs ""Thursday"" (day 4)']",[],"['The when variable (day) is evaluated once|||The value of the day variable is compared with the values of each ""branch""|||Each branch starts with a value, followed by an arrow (->) and a result|||If there is a match, the associated block of code is executed|||else is used to specify some code to run if there is no match|||In the example above, the value of day is 4, meaning ""Thursday"" will be printed|||']"
13,['Kotlin While Loop'],"['Loops', 'Kotlin While Loop', 'The Do..While Loop']","['Syntax', 'Example', 'Syntax', 'Example']","['https://www.w3schools.com/kotlin/kotlin_when.php', 'https://www.w3schools.com/kotlin/kotlin_break.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_while_loop', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_do_while_loop', 'https://www.w3schools.com/kotlin/kotlin_when.php', 'https://www.w3schools.com/kotlin/kotlin_break.php']",[],['Loops can execute a block of code as long as a specified condition is reached.'],"['Loops are handy because they save time, reduce errors, and they make code more readable.', 'The while loop loops through a block of code as long as a specified condition is true:', 'Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end.', 'Do not forget to increase the variable used in the condition, otherwise the loop will never end!']","['In the example below, the code in the loop will run, over and over again, as long as the counter variable (i) is less than 5:', 'The do..while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.', 'The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:']","['\n  while (condition) {\n\xa0 // code block to be executed\n }\n', '\n  var i = 0while (i < 5) {\n  \xa0\xa0println(i)\n  \xa0\xa0i++}\n', '\n  do {\n\xa0 // code block to be executed\n}\nwhile (condition);\n', '\n  var i = 0do {\n  \xa0\xa0println(i)\n  \xa0\xa0i++}while (i < 5)\n']",[],[]
14,['Kotlin Break and Continue'],"['Kotlin Break', 'Kotlin Continue']","['Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_while_loop.php', 'https://www.w3schools.com/kotlin/kotlin_arrays.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_break', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_continue', 'https://www.w3schools.com/kotlin/kotlin_while_loop.php', 'https://www.w3schools.com/kotlin/kotlin_arrays.php']",[],"['The break statement is used to jump out of a loop.', 'This example jumps out of the loop when i is equal to 4:', 'This example skips the value of 4:']",[],"['The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.']","['\n  var i = 0while (i < 10) {\xa0 println(i)\xa0 i++\xa0 if \n  (i == 4) {\xa0\xa0\xa0 break\xa0 }}\n', '\n  var i = 0while (i < 10) {\xa0 if (i == 4) {\xa0\xa0\xa0 i++\xa0\xa0\xa0 \n  continue\xa0 }\xa0 println(i)\xa0 \n  i++}\n']",[],[]
15,['Kotlin Arrays'],"['Kotlin Arrays', 'Access the Elements of an Array', 'Change an Array Element', 'Array Length / Size', 'Check if an Element Exists', 'Loop Through an Array']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_break.php', 'https://www.w3schools.com/kotlin/kotlin_for_loop.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_access', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_change', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_size', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_in2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_for_loop', 'https://www.w3schools.com/kotlin/kotlin_break.php', 'https://www.w3schools.com/kotlin/kotlin_for_loop.php']",[],"['In this example, we access the value of the first element in cars:', 'To change the value of a specific element, refer to the index number:', ' To find out how many elements an array have, use the size property:', 'You can use the in operator to check if an element exists in an array:', 'Often when you work with arrays, you need to loop through all of the elements.', 'The following example outputs all elements in the cars array:']","['Arrays are used to store multiple values in a single variable, instead of creating separate variables for each value.', 'To create an array, use the arrayOf() function, and place the values in a comma-separated list inside it:', 'You can access an array element by referring to the index number, inside square brackets.', 'Note: Just like with Strings, Array indexes start with 0: [0] is the first element. [1] is the second element, etc.', 'You can loop through the array elements with the for loop, which you will learn even more about in the next chapter.']",[],"['\n  val cars = arrayOf(""Volvo"", ""BMW"", ""Ford"", ""Mazda"")\n', '\n  val cars = arrayOf(""Volvo"", ""BMW"", ""Ford"", ""Mazda"")\n  println(cars[0])// Outputs Volvo\n', '\n  cars[0] = ""Opel""\n', '\n  val cars = arrayOf(""Volvo"", ""BMW"", ""Ford"", ""Mazda"")\n  cars[0] = ""Opel""\n  println(cars[0])\n  // Now outputs Opel instead of Volvo\n', '\n  val cars = arrayOf(""Volvo"", ""BMW"", ""Ford"", ""Mazda"")\n  println(cars.size)// Outputs 4\n', '\n  val cars = arrayOf(""Volvo"", ""BMW"", ""Ford"", ""Mazda"")if (""Volvo"" in cars) {\xa0 \n  println(""It exists!"")} else {\xa0 println(""It does not exist."")}\n', '\n  val cars = arrayOf(""Volvo"", ""BMW"", ""Ford"", ""Mazda"")for (x \n  in cars) {\xa0 println(x)}\n']",[],[]
16,['Kotlin For Loop'],"['Kotlin For Loop', 'Traditional For Loop']","['Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_arrays.php', 'https://www.w3schools.com/kotlin/kotlin_ranges.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_for_loop', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_for_loop2', 'https://www.w3schools.com/kotlin/kotlin_arrays.php', 'https://www.w3schools.com/kotlin/kotlin_ranges.php']",[],"['Often when you work with arrays, you need to loop through all of the elements.', 'To loop through array elements, use the for loop together with the in operator:', 'Output all elements in the cars array:', 'In the example above, we loop through an array of integers:']","['You can loop through all kinds of arrays. In the example above, we used an array of strings. ', 'Unlike Java and other programming languages, there is no traditional for loop in Kotlin.', 'You will learn more about ranges in the next chapter - which will create a range of values.']","['In Kotlin, the for loop is used to loop through arrays, ranges, and other things that contains a countable number of values.']","['\n  val cars = arrayOf(""Volvo"", ""BMW"", ""Ford"", ""Mazda"")for (x \n  in cars) {\xa0 println(x)}\n', '\n  val nums = arrayOf(1, 5, 10, 15, 20)for (x \n  in nums) {\xa0 println(x)}\n']",[],[]
17,['Kotlin Ranges'],"['Kotlin Ranges', 'Check if a Value Exists', 'Break or Continue a Range']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_for_loop.php', 'https://www.w3schools.com/kotlin/kotlin_functions.php', 'https://www.w3schools.com/kotlin/kotlin_for_loop.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_in', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_in2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_break', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_continue', 'https://www.w3schools.com/kotlin/kotlin_for_loop.php', 'https://www.w3schools.com/kotlin/kotlin_functions.php']",[],"['With the for loop, you can also create ranges of values with "".."":', 'Print the whole alphabet:', 'You can also create ranges of numbers:', 'Note: The first and last value is included in the range.', 'You can also use the in operator to check if a value exists in a range:', 'You can also use the break and continue keywords in a range/for loop:', 'Stop the loop when nums is equal to 10:', 'Skip the value of 10 in the loop, and continue with the next iteration:']",[],[],"[""\n  for (chars \n  in 'a'..'x') {\xa0 println(chars)}\n"", '\n  for (nums \n  in 5..15) {\xa0 println(nums)}\n', '\n  val nums = arrayOf(2, 4, 6, 8)if (2 in nums) {\xa0 println(""It \n  exists!"")} else {\xa0 println(""It does not exist."")}\n', '\n  val cars = arrayOf(""Volvo"", ""BMW"", ""Ford"", ""Mazda"")if (""Volvo"" in cars) {\xa0 \n  println(""It exists!"")} else {\xa0 println(""It does not exist."")}\n', '\n    for (nums in 5..15) {\xa0 if (nums == 10) {\xa0\xa0\xa0 \n    break\xa0 }\xa0 println(nums)}\n', '\n    for (nums in 5..15) {\xa0 if (nums == 10) {\xa0\xa0\xa0 continue\xa0 }\xa0 println(nums)}\n']",[],[]
18,['Kotlin Functions'],"['Predefined Functions', 'Create Your Own Functions', 'Call a Function', 'Function Parameters', 'Multiple Parameters', 'Return Values', 'Shorter Syntax for Return Values']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_ranges.php', 'https://www.w3schools.com/kotlin/kotlin_oop.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_helloworld', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_multiple', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_param', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_param2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_return', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_return2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_assignment', 'https://www.w3schools.com/kotlin/kotlin_ranges.php', 'https://www.w3schools.com/kotlin/kotlin_oop.php']",[],"['A function is a block of code which only runs when it is called.', 'You can pass data, known as parameters, into a function.', 'Create a function named ""myFunction"" that should output some text:', 'Now that you have created a function, you can execute it by calling it.', 'A function can be called multiple times, if you want:', 'Information can be passed to functions as parameter.', 'You can have as many parameters as you like:', 'A function with one Int parameter, and Int return type:', 'Using two parameters:', 'A function with two Int parameters, and Int return type:']","['Functions are used to perform certain actions, and they are also known as methods.', 'So it turns out you already know what a function is. You have been using it the whole time through this tutorial!', 'For example, println() is a function. It is used to output/print text to the screen:', 'To create your own function, use the fun keyword, and write the name of the function, followed by parantheses ():', 'To call a function in Kotlin, write the name of the function followed by two parantheses ().', 'In the following example, myFunction() will print some text (the action), when it is called:']","['Parameters are specified after the function name, inside the parentheses.You can add as many parameters as you want, just separate them with a comma. Just note that you must specify the type of each parameter (Int, String, etc). ', 'The following example has a function that takes a String called fname as parameter.When the function is called, we pass along a first name,which is used inside the function to print the full name:', 'When a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while John, Jane and George are arguments.', 'Note: When working with multiple parameters, the function call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.', 'In the examples above, we used functions to output a value. In the following example, we will use a function to return a value and assign it to a variable.', ""To return a value, use the return keyword, and specify the return type after the function's parantheses (Int in this example):"", 'There is also a shorter syntax for returning values. You can use the = operator instead of return without specifying the return type. Kotlin is smart enough to automatically find out what it is:']","['\n  fun main() { \xa0 println(""Hello World"") }', '\n  fun myFunction() {\xa0 println(""I just got executed!"")}\n', '\n  fun main() { \xa0 myFunction() // Call myFunction}// Outputs \n  ""I just got executed!""\n', '\n  fun main() { \xa0 myFunction()\xa0 myFunction()\xa0 myFunction()}// \n  I just got executed!// I just got executed!// I just got executed!\n', '\n  fun myFunction(fname: String) {\xa0 println(fname + "" Doe"")}fun \n  main() {\xa0 myFunction(""John"")\xa0 myFunction(""Jane"")\xa0 \n  myFunction(""George"")}// John Doe// Jane Doe// George Doe\n', '\n  fun myFunction(fname: String, \n  age: Int) {\xa0 println(fname + "" is "" + age)}fun \n  main() {\xa0 myFunction(""John"", 35)\xa0 myFunction(""Jane"", \n  32)\xa0 \n  myFunction(""George"", 15)}// John is 35// Jane is 32// George is 15\n', '\n  fun myFunction(x: Int): Int {\xa0 return (x + 5)}fun main() {\xa0 \n  var result = myFunction(3)\xa0 println(result)}// 8 (3 + 5)\n', '\n  fun myFunction(x: Int, y: Int): Int {\xa0 return (x + \n  y)}fun main() {\xa0 \n  var result = myFunction(3, 5)\xa0 println(result)}// 8 (3 + 5)\n', '\n  fun myFunction(x: Int, y: Int) = x + yfun main() {\xa0 var \n  result = myFunction(3, 5)\xa0 println(result)}// 8 (3 + 5)\n']",[],[]
19,['Kotlin OOP'],"['Kotlin - What is OOP?', 'Kotlin - What are Classes and Objects?', 'class', 'objects', 'class', 'objects']",[],"['https://www.w3schools.com/kotlin/kotlin_functions.php', 'https://www.w3schools.com/kotlin/kotlin_classes.php', 'https://www.w3schools.com/kotlin/kotlin_classes.php', 'https://www.w3schools.com/kotlin/kotlin_functions.php', 'https://www.w3schools.com/kotlin/kotlin_classes.php']",[],"['OOP stands for Object-Oriented Programming.', 'Object-oriented programming has several advantages over procedural programming:', 'Classes and objects are the two main aspects of object-oriented programming.', 'Another example:', 'So, a class is a template for objects, and an object is an instance of a class.', 'You will learn much more about classes and objects in the next chapter.']","['Look at the following illustration to see the difference between class and objects:', 'When the individual objects are created, they inherit all the variables and methods from the class.']","['Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.', 'Tip: The ""Don\'t Repeat Yourself"" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.']",[],[],"['OOP is faster and easier to execute|||OOP provides a clear structure for the programs|||OOP helps to keep the Kotlin code DRY ""Don\'t Repeat Yourself"", and makes |||  the |||  code easier to maintain, modify and debug|||OOP makes it possible to create full reusable |||  applications with less code and shorter development time|||']"
20,['Kotlin Classes and Objects'],"['Kotlin Classes/Objects', 'Create a Class', 'Create an Object', 'Multiple Objects']","['Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_oop.php', 'https://www.w3schools.com/kotlin/kotlin_constructors.php', 'https://www.w3schools.com/kotlin/kotlin_variables.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes_multiple', 'https://www.w3schools.com/kotlin/kotlin_oop.php', 'https://www.w3schools.com/kotlin/kotlin_constructors.php']",[],"['A Class is like an object constructor, or a ""blueprint"" for creating objects.', 'To create a class, use the class keyword, and specify the name of the class:', 'Create a Car class along with some properties (brand, model and year)', 'A property is basically a variable that belongs to the class.', 'Now we can use the class named Car to create objects.', 'You can create multiple objects of one class:']",[],"['Everything in Kotlin is associated with classes and objects, along with its properties and functions. For example: in real life, a car is an object. The car has properties, such as brand, weight and color, and functions, such as drive and brake. ', 'Good to Know: It is considered good practice to start the   name of a class with an upper case letter, for better organization.', 'In the example below, we create an object of Car calledc1, and then we access the properties of c1 by using the dot syntax (.), just like we did to access array and string properties:']","['\n  class Car {\xa0 var brand = """"\xa0 var model = """"\xa0 \n  var year = 0}\n', '\n  // Create a c1 object of the Car classval c1 = Car()\n// Access the properties and add some values to itc1.brand = ""Ford"" c1.model = ""Mustang""c1.year = 1969\n  println(c1.brand)\xa0\xa0 // Outputs Ford\n  println(c1.model)\xa0\xa0 // Outputs Mustangprintln(c1.year)\xa0\xa0\xa0 // Outputs 1969\n ', '\n  val c1 = Car()c1.brand = ""Ford""c1.model = ""Mustang""c1.year = 1969\nval c2 = Car()c2.brand = ""BMW""c2.model = ""X5""c2.year = 1999\nprintln(c1.brand)\xa0 // Fordprintln(c2.brand)\xa0 // BMW\n']",[],[]
21,['Kotlin Constructors'],['Kotlin Constructor'],"['Example', 'Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_classes.php', 'https://www.w3schools.com/kotlin/kotlin_class_functions.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes', 'https://www.w3schools.com/kotlin/kotlin_functions.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_constructor', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_constructor2', 'https://www.w3schools.com/kotlin/kotlin_classes.php', 'https://www.w3schools.com/kotlin/kotlin_class_functions.php']",[],"[""In Kotlin, there's a faster way of doing this, by using a constructor."", ""Now it's even easier to specify multiple objects of one class:""]","['In the previous chapter, we created an object of a class, and specified the properties inside the class, like this:']","['A constructor is like a special function, and it is defined by using two parantheses () after the class name. You can specify the properties inside of the parantheses (like passing parameters into a regular function).', 'The constructor will initialize the properties when you create an object of a class. Just remember to specify the type of the property/variable:']","['\n  class Car {\xa0 var brand = """"\xa0 var model = """"\xa0 \n  var year = 0}fun main() {\xa0 val c1 = Car()\xa0 \n  c1.brand = ""Ford""\xa0 c1.model = ""Mustang""\xa0 c1.year = 1969}', '\n  class Car(var \n  brand: String, var model: String, var year: Int)fun main() {\xa0 val c1 = Car(""Ford"", \n  ""Mustang"", 1969)}', '\n  class Car(var \n  brand: String, var model: String, var year: Int)fun main() {\xa0 val c1 = Car(""Ford"", \n  ""Mustang"", 1969)\xa0 val c2 = Car(""BMW"", \n  ""X5"", 1999)\xa0 val c3 = Car(""Tesla"", \n  ""Model S"", 2020)}']",[],[]
22,['Kotlin Class Functions'],"['Kotlin Class Functions', 'Class Function Parameters']","['Example', 'Example']","['https://www.w3schools.com/kotlin/kotlin_constructors.php', 'https://www.w3schools.com/kotlin/kotlin_inheritance.php', 'https://www.w3schools.com/kotlin/kotlin_functions.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_class_function', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_class_function2', 'https://www.w3schools.com/kotlin/kotlin_constructors.php', 'https://www.w3schools.com/kotlin/kotlin_inheritance.php']",[],"['You can also use functions inside a class, to perfom certain actions:', 'Create a drive() function inside the Car class and call it:', 'Just like with regular functions, you can pass parameters to a class function:']","['Tip: When a function is declared inside a class, it is known as a class function, or member function.', 'Note: When an object of the class is created, it has access to all of the class functions.', 'Create two functions: drive() and speed(), and pass parameters to the speed() function:']",[],"['\n  class Car(var \n  brand: String, var model: String, var year: Int) {\xa0 // Class function\xa0 \n  fun drive() {\xa0\xa0\xa0 println(""Wrooom!"")\xa0 }}fun main() {\xa0 val c1 = Car(""Ford"", \n  ""Mustang"", 1969)\xa0 // Call the function\xa0 c1.drive()\xa0 }', '\n    class Car(var brand: String, var model: String, var year: Int) {\xa0 \n    // Class function\xa0 fun drive() {\xa0\xa0\xa0 \n    println(""Wrooom!"")\xa0 }\xa0 // Class function with \n    parameters\xa0 fun speed(maxSpeed: Int) {\xa0\xa0\xa0 \n    println(""Max speed is: "" + maxSpeed)\xa0 }}fun main() {\xa0 val c1 = \n    Car(""Ford"", ""Mustang"", 1969)\xa0 // Call the functions\xa0 \n    c1.drive()\xa0 c1.speed(200)}']",[],[]
23,['Kotlin Inheritance'],"['Kotlin Inheritance (Subclass and Superclass)', 'Example Explained']",['Example'],"['https://www.w3schools.com/kotlin/kotlin_class_functions.php', 'https://www.w3schools.com/kotlin/kotlin_examples.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_inheritance', 'https://www.w3schools.com/kotlin/kotlin_class_functions.php', 'https://www.w3schools.com/kotlin/kotlin_examples.php']",[],[],"['In the example below, MyChildClass (subclass) inherits the properties from the MyParentClass class (superclass):', 'To inherit from a class, specify the name of the subclass, followed by a colon :, and then the name of the superclass.', '- It is useful for code reusability: reuse properties and functions of an existing class when you create a new class.']","['In Kotlin, it is possible to inherit class properties and functions from one class to another. We group the ""inheritance concept"" into two categories:', 'Use the open keyword in front of the superclass/parent, to make this the class other classes should inherit properties and functions from.']",['\n    // Superclassopen class MyParentClass { \xa0 val x = 5} \n    // Subclass\n    class MyChildClass: MyParentClass() { \xa0 fun myFunction() { \xa0\xa0\xa0 \n    println(x) // x is now inherited from the superclass\xa0 } } // Create an object of MyChildClass and call myFunctionfun main() { \xa0 val myObj = \n    MyChildClass() \xa0 myObj.myFunction() } '],[],['subclass (child) - the class that inherits from another class|||superclass (parent) - the class being inherited from|||']
24,['Kotlin Examples'],"['Kotlin Syntax and Output', 'Kotlin Comments', 'Kotlin Variables', 'Kotlin Data Types', 'Kotlin Operators', 'Kotlin Strings', 'Kotlin Booleans', 'Kotlin If...Else', 'Kotlin When', 'Kotlin While Loop', 'Kotlin While Loop', 'Kotlin Arrays', 'Kotlin For Loops', 'Kotlin Ranges', 'Kotlin Functions', 'Kotlin Classes']",[],"['https://www.w3schools.com/kotlin/kotlin_inheritance.php', 'https://www.w3schools.com/kotlin/kotlin_exercises.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_output', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_output2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_output3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_output_print', 'https://www.w3schools.com/kotlin/kotlin_output.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_comments_single', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_comments_end', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_comments_multi', 'https://www.w3schools.com/kotlin/kotlin_comments.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables5', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println2', 'https://www.w3schools.com/kotlin/kotlin_variables.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_data_types', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_data_types2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_byte', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_short', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_int', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_long', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_float', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_double', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_char', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_string', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_type_conv2', 'https://www.w3schools.com/kotlin/kotlin_data_types.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_sub', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_mult', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_div', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_mod', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_inc', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_dec', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_assignment1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare3', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare4', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare5', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_compare6', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_logical1', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_logical2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_oper_logical3', 'https://www.w3schools.com/kotlin/kotlin_operators.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_access', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_length', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_compareto', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_indexof', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_conc', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_conc2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_quotes', 'https://www.w3schools.com/kotlin/kotlin_strings.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans_without', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans1', 'https://www.w3schools.com/kotlin/kotlin_booleans.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if_else', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if_else_if', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if_else_exp', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_if_else_exp2', 'https://www.w3schools.com/kotlin/kotlin_conditions.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_when', 'https://www.w3schools.com/kotlin/kotlin_when.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_while_loop', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_do_while_loop', 'https://www.w3schools.com/kotlin/kotlin_while_loop.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_break', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_continue', 'https://www.w3schools.com/kotlin/kotlin_break.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_access', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_change', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_size', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_in2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_for_loop', 'https://www.w3schools.com/kotlin/kotlin_arrays.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_for_loop', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_array_for_loop2', 'https://www.w3schools.com/kotlin/kotlin_for_loop.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_in', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_break', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_ranges_continue', 'https://www.w3schools.com/kotlin/kotlin_ranges.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_multiple', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_param', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_return', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_function_assignment', 'https://www.w3schools.com/kotlin/kotlin_functions.php', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes_multiple', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_constructor2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_class_function', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_class_function2', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_inheritance', 'https://www.w3schools.com/kotlin/kotlin_classes.php', 'https://www.w3schools.com/kotlin/kotlin_inheritance.php', 'https://www.w3schools.com/kotlin/kotlin_exercises.php']",[],[],[],[],[],[],[]
25,['Kotlin Exercises'],"['Exercises', 'Count Your Score', 'Start Kotlin Exercises']",[],"['https://www.w3schools.com/kotlin/kotlin_examples.php', 'https://www.w3schools.com/kotlin/kotlin_compiler.php', 'https://www.w3schools.com/kotlin/exercise.php?filename=exercise_syntax1', 'https://www.w3schools.com/kotlin/index.php', 'https://www.w3schools.com/kotlin/kotlin_examples.php', 'https://www.w3schools.com/kotlin/kotlin_compiler.php']",[],"[""You can test your Kotlin skills with W3Schools' Exercises."", 'Good luck!', 'Start Kotlin Exercises ❯']","['We have gathered a variety of Kotlin exercises (with answers) for each Kotlin Chapter.', ""Try to solve an exercise by editing some code, or show the answer to see what you've done wrong."", 'You will get 1 point foreach correct answer. Your score and total score will always be displayed.', ""If you don't know Kotlin, we suggest that you read our Kotlin Tutorial from scratch.""]",[],[],[],[]
26,['Kotlin Compiler'],"['Kotlin Compiler (Editor)', 'Kotlin Compiler Explained']",['Example'],"['https://www.w3schools.com/kotlin/kotlin_exercises.php', 'https://www.w3schools.com/kotlin/index.php', 'https://www.w3schools.com/kotlin/javascript:void(0);', 'https://www.w3schools.com/kotlin/javascript:void(0);', 'https://www.w3schools.com/kotlin/javascript:void(0);', 'https://www.w3schools.com/kotlin/javascript:void(0);', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_helloworld', 'https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_helloworld', 'https://www.w3schools.com/kotlin/index.php', 'https://www.w3schools.com/kotlin/kotlin_exercises.php', 'https://www.w3schools.com/kotlin/index.php']",[],"['Click on the ""Try it Yourself"" button to see how it works.', 'The icons are explained in the table below:']","['With our online Kotlin compiler, you can edit Kotlin code, and view the result in your browser.', ""If you don't know Kotlin,  we suggest that you read our Kotlin Tutorial from scratch.""]","['The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.']","['\n    fun main() {\xa0 println(""Hello World"")}\n']",['Icon|||Description&&&|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light)'],[]
