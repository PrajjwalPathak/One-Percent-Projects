,main_headings,sub_headings_h2,sub_headings_h3,links,image_urls,facts,definitions,explanations,codes,table_data,list_items
0,['XML Tutorial'],"['Why Study XML?', 'What You Will Learn', 'Important XML Standards', 'Learn by Examples', 'XML Quiz Test', 'Kickstart your career']","['XML Example 1', 'XML Example 2', 'Header']","['https://www.w3schools.com/xml//default.asp', 'https://www.w3schools.com/xml/xml_whatis.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/simplexsl.xml', 'https://www.w3schools.com/xml/ajax_intro.asp', 'https://www.w3schools.com/xml/dom_intro.asp', 'https://www.w3schools.com/xml/xpath_intro.asp', 'https://www.w3schools.com/xml/xsl_intro.asp', 'https://www.w3schools.com/xml/xquery_intro.asp', 'https://www.w3schools.com/xml/xml_dtd_intro.asp', 'https://www.w3schools.com/xml/schema_intro.asp', 'https://www.w3schools.com/xml/xml_services.asp', 'https://www.w3schools.com/xml/xml_examples.asp', 'https://www.w3schools.com/xml/ajax_examples.asp', 'https://www.w3schools.com/xml/dom_examples.asp', 'https://www.w3schools.com/xml/xpath_examples.asp', 'https://www.w3schools.com/xml/xsl_examples.asp', 'https://www.w3schools.com/xml/xml_quiz.asp', 'https://courses.w3schools.com/', 'https://www.w3schools.com/xml//default.asp', 'https://www.w3schools.com/xml/xml_whatis.asp']",[],"['XML stands for eXtensible Markup Language.', 'XML was designed to store and transport data.', 'XML was designed to be both human- and machine-readable.', 'Display the XML File »Display the XML File as a Note »', 'Display the XML File »Display with XSLT »', 'XML plays an important role in many different IT systems.', 'XML is often used for distributing data over the Internet.', 'This tutorial will give you a solid understanding of XML:', 'This tutorial will also dig deep into the following important XML standards:', 'We recommend reading this tutorial, in the sequence listed in the left menu.', 'Test your XML skills at W3Schools!', 'Get certified by completing the  course']","['It is important (for all types of software developers!) to have a good understanding of XML.', 'Examples are better than 1000 words. Examples are often easier to understand than text explanations.', 'This tutorial supplements all explanations with clarifying ""Try it Yourself"" examples.', 'If you try all the examples, you will learn a lot about XML in a very short time!']",[],"['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<note>\xa0 <to>Tove</to>\n\xa0 <from>Jani</from>\n\xa0 <heading>Reminder</heading>\n\xa0 <body>Don\'t forget me this weekend!</body>\n</note>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?><breakfast_menu>\n<food>\xa0\xa0\xa0 <name>Belgian Waffles</name>\xa0\xa0\xa0 \n<price>$5.95</price>\xa0\xa0\xa0 <description>\xa0\xa0 Two of our famous \nBelgian Waffles with plenty of real maple syrup\xa0\xa0 </description>\xa0\xa0\xa0 \n<calories>650</calories></food><food>\xa0\xa0\xa0 \n<name>Strawberry Belgian Waffles</name>\xa0\xa0\xa0 \n<price>$7.95</price>\xa0\xa0\xa0 <description>\xa0\xa0\xa0 Light Belgian \nwaffles covered with strawberries and whipped cream\xa0\xa0\xa0 </description>\xa0\xa0\xa0 \n<calories>900</calories></food><food>\xa0\xa0\xa0 \n<name>Berry-Berry Belgian Waffles</name>\xa0\xa0\xa0 \n<price>$8.95</price>\xa0\xa0\xa0 <description>\xa0\xa0\xa0 Belgian \nwaffles covered with assorted fresh berries and whipped \ncream\xa0\xa0\xa0 </description>\xa0\xa0\xa0 <calories>900</calories>\n</food><food>\xa0\xa0\xa0 <name>French Toast</name>\xa0\xa0\xa0 \n<price>$4.50</price>\xa0\xa0\xa0 <description>\xa0\xa0\xa0 Thick slices made \nfrom our homemade sourdough bread\xa0\xa0\xa0 </description>\xa0\xa0\xa0 \n<calories>600</calories></food><food>\xa0\xa0\xa0 <name>Homestyle \nBreakfast</name>\xa0\xa0\xa0 <price>$6.95</price>\xa0\xa0\xa0 \n<description>\xa0\xa0\xa0 Two eggs, bacon or sausage, toast, and our ever-popular hash \nbrowns\xa0\xa0\xa0 </description>\xa0\xa0\xa0 <calories>950</calories>\n</food></breakfast_menu>\n']",[],['What is XML?|||How does XML work?|||How can I use XML?|||What can I use XML for?|||XML AJAX|||XML DOM|||XML XPath|||XML XSLT|||XML XQuery|||XML DTD|||XML Schema|||XML Services|||XML Examples|||AJAX Examples|||DOM Examples|||XPath Examples|||XSLT Examples|||']
1,['Introduction to XML'],"['What is XML?', 'XML Does Not DO Anything', 'Note', 'The Difference Between XML and HTML', 'XML Does Not Use Predefined Tags', 'XML is Extensible', 'Note', 'Note', 'XML Simplifies Things', 'XML is a W3C Recommendation']","['Reminder', 'Old Version', 'Reminder', 'New Version']","['https://www.w3schools.com/xml/default.asp', 'https://www.w3schools.com/xml/xml_usedfor.asp', 'https://www.w3schools.com/xml/default.asp', 'https://www.w3schools.com/xml/xml_usedfor.asp']",[],"['Maybe it is a little hard to understand, but XML does not DO anything.', 'This note is a note to Tove from Jani, stored as XML:', 'The XML above is quite self-descriptive:', 'Someone must write a piece of software to send, receive, store, or display it:', 'From: Jani', ""Don't forget me this weekend!"", 'XML and HTML were designed with different goals:', 'The XML language has no predefined tags.', 'HTML works with predefined tags like <p>, <h1>, <table>, etc.', 'With XML, the author must define both the tags and the document structure.', 'The way XML is constructed, older version of the application can still work:', 'From: Jani', ""Don't forget me this weekend!"", 'From: Jani', 'Date: 2015-09-01 08:30', ""Don't forget me this weekend!"", 'XML became a W3C Recommendation as early as in February 1998.']","['XML is a software- and hardware-independent tool for storing and transporting data.', 'But still, the XML above does not DO anything. XML is just information wrapped in tags.', 'Most XML applications will work as expected even if new data is added (or removed).', 'Imagine an application designed to display the original version of note.xml (<to> <from> <heading> <body>).', 'Then imagine a newer version of note.xml with added <date> and <hour> elements, and a removed <heading>.']","['The tags in the example above (like <to> and <from>) are not defined in any XML standard. These tags are ""invented"" by the author of the XML document.', 'Many computer systems contain data in incompatible formats. Exchanging data between incompatible systems (or upgraded systems) is a time-consuming task for web developers. Large amounts of data must be converted, and incompatible data is often lost.', 'XML stores data in plain text format. This provides a software- andhardware-independent way of storing, transporting, and sharing data.', 'XML also makes it easier to expand or upgrade to new operating systems, new applications, or new browsers, without losing data.', 'With XML, data can be available to all kinds of ""readingmachines"" like people, computers, voice machines, news feeds, etc.']","[""\n<note>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don't forget me this weekend!</body>\n</note>\n"", ""\n<note>\n\xa0\n <date>2015-09-01</date>\xa0 <hour>08:30</hour>\xa0 <to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<body>Don't forget me this weekend!</body>\n</note>\n""]",[],['XML stands for eXtensible Markup Language|||XML is a markup language much like HTML|||XML was designed to store and transport data|||XML was designed to be self-descriptive|||XML is a W3C Recommendation|||It has sender information.|||It has receiver information|||It has a heading|||It has a message body.|||XML was designed to carry data - with focus on what data is|||HTML was designed to display data - with focus on how data looks|||XML tags are not predefined like HTML tags are|||It simplifies data sharing|||It simplifies data transport|||It simplifies platform changes|||It simplifies data availability|||']
2,['How Can XML be Used?'],"['XML Separates Data from Presentation', 'XML is Often a Complement to HTML', 'XML Separates Data from HTML', 'Transaction Data', 'Example: XML News', 'Example: XML Weather Service']",['Books.xml'],"['https://www.w3schools.com/xml/xml_whatis.asp', 'https://www.w3schools.com/xml/xml_tree.asp', 'https://www.w3schools.com/xml/xml_whatis.asp', 'https://www.w3schools.com/xml/xml_tree.asp']",[],"['XML is used in many aspects of web development.', 'XML is often used to separate data from presentation.', 'XML does not carry any information about how to be displayed.', 'The same XML data can be used in many different presentation scenarios.', 'With XML, the data can be stored in separate XML files.', 'XMLNews is a specification for exchanging news and other information.', 'An example XMLNews document:']","['Because of this, with XML, there is a full separation between data and presentation.', 'When displaying data in HTML, you should not have to edit the HTML file when the data changes.', 'With a few lines of JavaScript code, you can read an XML file and update the data content of any HTML page. ', 'You will learn a lot more about using XML and JavaScript in the DOM section of this tutorial.', 'Thousands of XML formats exist, in many different industries, to describe day-to-day data transactions:', 'An XML national weather service from NOAA (National Oceanic and Atmospheric Administration):']","['In many HTML applications, XML is used to store or transport data, while HTML is used to format and display the same data.', 'Using a standard makes it easier for both news producers and news consumers to produce, receive, and archive any kind of news information across different hardware, software, and programming languages.']","['\n <?xml version=""1.0"" encoding=""UTF-8""?><bookstore>\xa0 <book \n category=""cooking"">\xa0\xa0\xa0 <title lang=""en"">Everyday \n Italian</title>\xa0\xa0\xa0 <author>Giada De Laurentiis</author>\xa0\xa0\xa0 \n <year>2005</year>\xa0\xa0\xa0 <price>30.00</price>\xa0 </book>\n\xa0 <book category=""children"">\xa0\xa0\xa0 <title lang=""en"">Harry \n Potter</title>\xa0\xa0\xa0 <author>J K. Rowling</author>\xa0\xa0\xa0 \n <year>2005</year>\xa0\xa0\xa0 <price>29.99</price>\xa0 </book>\n\xa0 <book category=""web"">\xa0\xa0\xa0 <title lang=""en"">XQuery \n Kick Start</title>\xa0\xa0\xa0 <author>James McGovern</author>\xa0\xa0\xa0 \n <author>Per Bothner</author>\xa0\xa0\xa0 <author>Kurt Cagle</author>\xa0\xa0\xa0 \n <author>James Linn</author>\xa0\xa0\xa0 <author>Vaidyanathan \n Nagarajan</author>\xa0\xa0\xa0 <year>2003</year>\xa0\xa0\xa0 \n <price>49.99</price>\xa0 </book>\xa0 <book category=""web"" \n cover=""paperback"">\xa0\xa0\xa0 <title lang=""en"">Learning XML</title>\xa0\xa0\xa0 \n <author>Erik T. Ray</author>\xa0\xa0\xa0 <year>2003</year>\xa0\xa0\xa0 \n <price>39.95</price>\xa0 </book></bookstore>', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<nitf>\n\xa0\n<head>\n\xa0\xa0\xa0\n<title>Colombia Earthquake</title>\n\xa0\n</head>\n\xa0\n<body>\n\xa0\xa0\xa0\n<headline>\n  \xa0\xa0\xa0\xa0\xa0\n  <hl1>143 Dead in Colombia Earthquake</hl1>\n\xa0\xa0\xa0\n</headline>\n\xa0\xa0\xa0\n<byline>\n  \xa0\xa0\xa0\xa0\xa0\n  <bytag>By Jared Kotler, Associated Press Writer</bytag>\n\xa0\xa0\xa0\n</byline>\n\xa0\xa0\xa0\n<dateline>\n  \xa0\xa0\xa0\xa0\xa0\n  <location>Bogota, Colombia</location>\n  \xa0\xa0\xa0\xa0\xa0\n  <date>Monday January 25 1999 7:28 ET</date>\n\xa0\xa0\xa0\n</dateline>\n\xa0\n</body>\n</nitf>', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<current_observation>\n<credit>NOAA\'s National Weather Service</credit>\n<credit_URL>http://weather.gov/</credit_URL>\n<image>\n\xa0\n<url>http://weather.gov/images/xml_logo.gif</url>\n\xa0\n<title>NOAA\'s National Weather Service</title>\n\xa0\n<link>http://weather.gov</link>\n</image>\n<location>New York/John F. Kennedy Intl Airport, NY</location>\n<station_id>KJFK</station_id>\n<latitude>40.66</latitude>\n<longitude>-73.78</longitude>\n<observation_time_rfc822>Mon, 11 Feb 2008 06:51:00 -0500 EST\n</observation_time_rfc822>\n<weather>A Few Clouds</weather>\n<temp_f>11</temp_f>\n<temp_c>-12</temp_c>\n<relative_humidity>36</relative_humidity>\n<wind_dir>West</wind_dir>\n<wind_degrees>280</wind_degrees> \n<wind_mph>18.4</wind_mph>\n<wind_gust_mph>29</wind_gust_mph> \n<pressure_mb>1023.6</pressure_mb>\n<pressure_in>30.23</pressure_in>\n<dewpoint_f>-11</dewpoint_f>\n<dewpoint_c>-24</dewpoint_c>\n<windchill_f>-7</windchill_f>\n<windchill_c>-22</windchill_c>\n<visibility_mi>10.00</visibility_mi>\n<icon_url_base>http://weather.gov/weather/images/fcicons/</icon_url_base>\n<icon_url_name>nfew.jpg</icon_url_name>\n<disclaimer_url>http://weather.gov/disclaimer.html</disclaimer_url>\n<copyright_url>http://weather.gov/disclaimer.html</copyright_url>\n</current_observation>']",[''],['Stocks and Shares|||Financial transactions|||Medical data|||Mathematical data|||Scientific measurements|||News information|||Weather services|||']
3,['XML Tree'],"['An Example XML Document', 'XML Tree Structure', 'Self-Describing Syntax']",['XML Tree Structure'],"['https://www.w3schools.com/xml/xml_usedfor.asp', 'https://www.w3schools.com/xml/xml_syntax.asp', 'https://www.w3schools.com/xml/xml_usedfor.asp', 'https://www.w3schools.com/xml/xml_syntax.asp']",['https://www.w3schools.com/xml/nodetree.gif'],"['The image above represents books in this XML:', 'XML documents are formed as element trees.', 'All elements can have sub elements (child elements):', 'XML uses a much self-describing syntax.', 'A prolog defines the XML version and the character encoding:', 'The next line is the root element of the document:', 'The next line starts a <book> element:', 'The <book> elements have 4 child elements: <title>, <author>, <year>, <price>.', 'The next line ends the book element:']","['XML documents form a tree structure that starts at ""the root"" and branches to ""the leaves"".', 'An XML tree starts at a root element and branches from the root to child elements.', 'The terms parent, child, and sibling are used to describe the relationships between elements.', 'Parents have children. Children have parents. Siblings are children on the same level (brothers and sisters).', 'All elements can have text content (Harry Potter) and attributes (category=""cooking"").', 'You can assume, from this example, that the XML document contains information about books in a bookstore.']",[],"['\n<?xml version=""1.0"" encoding=""UTF-8""?><bookstore>\n\xa0\n<book category=""cooking"">\n  \xa0\xa0\xa0\n  <title lang=""en"">Everyday Italian</title>\n  \xa0\xa0\xa0\n  <author>Giada De Laurentiis</author>\n  \xa0\xa0\xa0\n  <year>2005</year>\n  \xa0\xa0\xa0\n  <price>30.00</price>\n\xa0\n</book>\n\xa0\n<book category=""children"">\n  \xa0\xa0\xa0\n  <title lang=""en"">Harry Potter</title>\n  \xa0\xa0\xa0\n  <author>J K. Rowling</author>\n  \xa0\xa0\xa0\n  <year>2005</year>\n  \xa0\xa0\xa0\n  <price>29.99</price>\n\xa0\n</book>\n\xa0\n<book category=""web"">\n  \xa0\xa0\xa0\n  <title lang=""en"">Learning XML</title>\n  \xa0\xa0\xa0\n  <author>Erik T. Ray</author>\n  \xa0\xa0\xa0\n  <year>2003</year>\n  \xa0\xa0\xa0\n  <price>39.95</price>\n\xa0\n</book>\n</bookstore>\n', '\n<root>\n  \xa0\n  <child>\n    \xa0\xa0\xa0\n    <subchild>.....</subchild>\n  \xa0\n  </child>\n</root>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n', '\n<bookstore> ', '\n<book category=""cooking""> ', '\n<title lang=""en"">Everyday Italian</title>\n<author>Giada De Laurentiis</author>\n<year>2005</year>\n<price>30.00</price>\n', '\n</book>\n']",[],[]
4,['XML Syntax Rules'],"['XML Documents Must Have a Root Element', 'The XML Prolog', 'All XML Elements Must Have a Closing Tag', 'XML Tags are Case Sensitive', 'XML Elements Must be Properly Nested', 'XML Attribute Values Must Always be Quoted', 'Entity References', 'Comments in XML', 'White-space is Preserved in XML', 'XML Stores New Line as LF', 'Well Formed XML']",[],"['https://www.w3schools.com/xml/xml_tree.asp', 'https://www.w3schools.com/xml/xml_elements.asp', 'https://www.w3schools.com/xml//charsets/default.asp', 'https://www.w3schools.com/xml/xml_tree.asp', 'https://www.w3schools.com/xml/xml_elements.asp']",[],"['In this example <note> is the root element:', 'This line is called the XML prolog:', 'The XML prolog is optional. If it exists, it must come first in the document. ', 'UTF-8 is the default character encoding for XML documents.', 'Character encoding can be studied in our Character Set Tutorial.', 'UTF-8 is also the default encoding for HTML5, CSS, JavaScript, PHP, and SQL.', 'Opening and closing tags must be written with the same case:', 'In HTML, you might see improperly nested elements:', 'In XML, all elements must be properly nested within each other:', 'XML elements can have attributes in name/value pairs just like in HTML.', 'In XML, the attribute values must always be quoted:', 'Some characters have a special meaning in XML.', 'This will generate an XML error:', 'To avoid this error, replace the ""<"" character with an entity reference:', 'There are 5 pre-defined entity references in XML:', 'The syntax for writing comments in XML is similar to that of HTML:', 'Two dashes in the middle of a comment are not allowed:', 'Unix and Mac OSX use LF.', 'Old Mac systems use CR.', 'XML stores a new line as LF.']","['The syntax rules of XML are very simple and logical. The rules are easy to learn, and easy to use.', 'XML documents must contain one root element that is the parent of all other elements:', 'XML documents can contain international characters, like Norwegian øæå or French êèé.', 'To avoid errors, you should specify the encoding used, or save your XML files as UTF-8.', 'In XML, it is illegal to omit the closing tag. All elements must have a closing tag:', 'Note: The XML prolog does not have a closing tag!This is not an error. The prolog is not a part of the XML document.', 'XML tags are case sensitive. The tag <Letter> is different from the tag <letter>.', 'Only < and & are strictly illegal in XML, but it is a good habit to replace > with &gt; as well.', 'XML does not truncate multiple white-spaces (HTML truncates multiple white-spaces to one single white-space):', 'Windows applications store a new line as: carriage return and line feed (CR+LF).', 'XML documents that conform to the syntax rules above are said to be ""Well Formed"" XML documents.']","['""Opening and closing tags"" are often referred to as ""Start and end tags"". Use whatever you prefer. It is exactly the same thing.', 'In the example above, ""Properly nested"" simply means that since the <i> element is opened inside the <b> element, it must be closed inside the <b> element.', 'If you place a character like ""<"" inside an XML element, it will generate an error because the parser interprets it as the start of a new element.']","['\n <root>\n  \xa0 <child>\n    \xa0\xa0\xa0 <subchild>.....</subchild>\n  \xa0 </child>\n </root>', '\n <?xml version=""1.0"" encoding=""UTF-8""?>\n <note>\n \xa0 <to>Tove</to>\n \xa0 <from>Jani</from>\n \xa0 <heading>Reminder</heading>\n \xa0 <body>Don\'t forget me this weekend!</body>\n </note>\n', '\n <?xml version=""1.0"" encoding=""UTF-8""?>', '\n <p>This is a paragraph.</p>\n <br />', '\n <message>This is correct</message>', '\n <b><i>This text is bold and italic</b></i>', '\n <b><i>This text is bold and italic</i></b>', '\n <note date=""12/11/2007"">\n \xa0 <to>Tove</to>\n \xa0 <from>Jani</from>\n </note>', '\n <message>salary < 1000</message>', '\n <message>salary &lt; 1000</message>', '\n <!-- This is a comment -->', '\n <!-- This is an invalid -- comment -->']","['&lt;|||<|||less than&&&&gt;|||>|||greater than&&&&amp;|||&|||ampersand\xa0&&&&apos;|||\'|||apostrophe&&&&quot;|||""|||quotation mark', '|||XML:||||||Hello\xa0\xa0\xa0\xa0\xa0\xa0 \xa0\xa0\xa0\xa0Tove|||&&&|||HTML:||||||Hello Tove']",[]
5,['XML Elements'],"['What is an XML Element?', 'Empty XML Elements', 'XML Naming Rules', 'Best Naming Practices', 'Naming Styles', 'XML Elements are Extensible']",[],"['https://www.w3schools.com/xml/xml_syntax.asp', 'https://www.w3schools.com/xml/xml_attributes.asp', 'https://www.w3schools.com/xml/xml_syntax.asp', 'https://www.w3schools.com/xml/xml_attributes.asp']",[],"['An XML document contains XML Elements.', 'An element can contain:', 'In the example above:', '<bookstore> and <book> have element contents, because they contain elements.', '<book> has an attribute (category=""children"").', 'An element with no content is said to be empty.', 'In XML, you can indicate an empty element like this:', 'You can also use a so called self-closing tag:', 'Empty elements can have attributes.', 'XML elements must follow these naming rules:', 'Any name can be used, no words are reserved (except xml).', 'Create descriptive names, like this: <person>, <firstname>, <lastname>.', 'Avoid "":"". Colons are reserved for  namespaces (more later).', 'If you choose a naming style, it is good to be consistent!', 'Camel case is a common naming rule in JavaScripts.', 'XML elements can be extended to carry more information.', 'Look at the following XML example:', 'To: ToveFrom: Jani', ""Don't forget me this weekend!"", 'Imagine that the author of the XML document added some extra information to it:', 'Should the application break or crash?']","[""An XML element is everything from (including) the element's start tag to (including) the element's end tag."", '<title>, <author>, <year>, and <price> have text content because they contain text (like 29.99).', 'The two forms produce identical results in XML software (Readers, Parsers, Browsers).', 'Create short and simple names, like this: <book_title> not like this: <the_title_of_the_book>.', 'Avoid ""-"". If you name something ""first-name"", some software may think you want to subtract ""name"" from ""first"".', 'Avoid ""."". If you name something ""first.name"", some software may think that ""name"" is a property of the object ""first"".', 'There are no naming styles defined for XML elements. But here are some commonly used:', 'This is one of the beauties of XML. It can be extended without breaking applications.']","[""Non-English letters like éòá are perfectly legal in XML, but watch out for problems if your software doesn't support them."", 'XML documents often have a corresponding database. A common practice is to use the naming rules of the database for the XML elements.', ""Let's imagine that we created an application that extracted the <to>, <from>, and <body> elements from the XML document to produce this output:"", 'No. The application should still be able to find the <to>, <from>, and <body> elements in the XML document and produce the same output.']","['\n<price>29.99</price>', '\n<bookstore>\n\xa0 <book category=""children"">\n\xa0\xa0\xa0 <title>Harry Potter</title> \n\xa0\xa0\xa0 <author>J K. Rowling</author>\n\xa0\xa0\xa0 <year>2005</year>\n\xa0\xa0\xa0 <price>29.99</price>\n\xa0 </book>\n\xa0 <book category=""web"">\n\xa0\xa0\xa0 <title>Learning XML</title>\n\xa0\xa0\xa0 <author>Erik T. Ray</author>\n\xa0\xa0\xa0 <year>2003</year>\n\xa0\xa0\xa0 <price>39.95</price>\n\xa0 </book>\n</bookstore>', '\n<element></element>', '\n<element />', ""\n<note>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<body>Don't forget me this weekend!</body>\n</note>"", ""\n<note>\n\xa0\n<date>2008-01-10</date>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don't forget me this weekend!</body>\n</note>""]","['Style|||Example|||Description&&&Lower case|||<firstname>|||All letters lower case&&&Upper case|||<FIRSTNAME>|||All letters upper case&&&Underscore|||<first_name>|||Underscore separates words&&&Pascal case|||<FirstName>|||Uppercase first letter in each wor&&&Camel case|||<firstName>|||Uppercase first letter in each word except the first', ""|||MESSAGE|||To: Tove|||From: Jani|||Don't forget me this weekend!|||""]","['text|||attributes|||other elements|||or a mix of the above|||Element names are case-sensitive|||Element names must start with a letter or underscore|||Element names cannot start with the letters xml (or XML, or Xml, etc)|||Element names can contain letters, digits, hyphens, underscores, and periods|||Element names cannot contain spaces|||']"
6,['XML Attributes'],"['XML Attributes Must be Quoted', 'XML Elements vs. Attributes', 'My Favorite Way', 'Avoid XML Attributes?', 'XML Attributes for Metadata']",[],"['https://www.w3schools.com/xml/xml_elements.asp', 'https://www.w3schools.com/xml/xml_namespaces.asp', 'https://www.w3schools.com/xml/xml_elements.asp', 'https://www.w3schools.com/xml/xml_namespaces.asp']",[],"['XML elements can have attributes, just like HTML.', 'Attributes are designed to contain data related to a specific element.', ""For a person's gender, the <person> element can be written like this:"", 'or like this:', 'or you can use character entities:', 'Take a look at these two examples:', 'There are no rules about when to use attributes or when to use elements in XML.', 'The following three XML documents contain exactly the same information:', 'A date attribute is used in the first example:', 'A <date> element is used in the second example:', 'An expanded <date> element is used in the third example: (THIS IS MY FAVORITE):', 'Some things to consider when using attributes are:', ""Don't end up like this:""]","['Attribute values must always be quoted. Either single or double quotes can be used.', 'If the attribute value itself contains double quotes you can use single quotes, like in this example:', 'The id attributes above are for identifying the different notes. It is not a part of the note itself.']","['In the first example, gender is an attribute. In the last example, gender is an element.Both examples provide the same information.', 'Sometimes ID references are assigned to elements. These IDs can be used to identify XML elements in much the same way as the id attribute in HTML. This example demonstrates this:', ""What I'm trying to say here is that metadata (data about data) should be stored as attributes, and the data itself should be stored as elements.""]","['\n<person gender=""female"">', ""\n<person gender='female'>"", '\n<gangster name=\'George ""Shotgun"" Ziegler\'>', '\n<gangster name=""George &quot;Shotgun&quot; Ziegler"">', '\n<person gender=""female"">\n  \xa0\n  <firstname>Anna</firstname>\n  \xa0\n  <lastname>Smith</lastname>\n</person>', '\n<person>\n  \xa0\n  <gender>female</gender>\n  \xa0\n  <firstname>Anna</firstname>\n  \xa0\n  <lastname>Smith</lastname>\n</person>', '\n<note date=""2008-01-10"">\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n</note>', '\n<note>\n\xa0\n<date>2008-01-10</date>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n</note>', '\n<note>\n\xa0\n<date>\n  \xa0\xa0\xa0\n  <year>2008</year>\n  \xa0\xa0\xa0\n  <month>01</month>\n  \xa0\xa0\xa0\n  <day>10</day>\n\xa0\n</date>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n</note>', '\n<note day=""10"" month=""01"" year=""2008""\nto=""Tove"" from=""Jani"" heading=""Reminder""\nbody=""Don\'t forget me this weekend!"">\n</note>', '\n<messages>\n  \xa0\n  <note id=""501"">\n    \xa0\xa0\xa0\n    <to>Tove</to>\n    \xa0\xa0\xa0\n    <from>Jani</from>\n    \xa0\xa0\xa0\n    <heading>Reminder</heading>\n    \xa0\xa0\xa0\n    <body>Don\'t forget me this weekend!</body>\n  \xa0\n  </note>\n  \xa0\n  <note id=""502"">\n    \xa0\xa0\xa0\n    <to>Jani</to>\n    \xa0\xa0\xa0\n    <from>Tove</from>\n    \xa0\xa0\xa0\n    <heading>Re: Reminder</heading>\n    \xa0\xa0\xa0\n    <body>I will not</body>\n  \xa0\n  </note>\n</messages>']",[],['attributes cannot contain multiple values (elements can)|||attributes cannot contain tree structures (elements can)|||attributes are not easily expandable (for future changes)|||']
7,['XML Namespaces'],"['Name Conflicts', 'Solving the Name Conflict Using a Prefix', 'XML Namespaces - The xmlns Attribute', 'Uniform Resource Identifier (URI)', 'Default Namespaces', 'Namespaces in Real Use']",[],"['https://www.w3schools.com/xml/xml_attributes.asp', 'https://www.w3schools.com/xml/xml_display.asp', 'https://www.w3schools.com/xml//xml/xsl_intro.asp', 'https://www.w3schools.com/xml/xml_attributes.asp', 'https://www.w3schools.com/xml/xml_display.asp']",[],"['XML Namespaces provide a method to avoid element name conflicts.', 'This XML carries HTML table information:', 'This XML carries information about a table (a piece of furniture):', 'A user or an XML application will not know how to handle these differences.', 'Name conflicts in XML can easily be avoided using a name prefix.', 'This XML carries information about an HTML table, and a piece of furniture:', 'When using prefixes in XML, a namespace for the prefix must be defined.', 'The namespace declaration has the following syntax. xmlns:prefix=""URI"".', 'In the example above:', 'Namespaces can also be declared in the XML root element:', 'Note: The namespace URI is not used by the parser to look up information.', 'The purpose of using an URI is to give the namespace a unique name.', 'This XML carries HTML table information:', 'This XML carries information about a piece of furniture:', 'The XML document below, is a document used to transform XML into HTML.', 'If you want to learn more about XSLT, please read ourXSLT Tutorial.']","['In the example above, there will be no conflict because the two <table> elements have different names.', 'The namespace can be defined by an xmlns attribute in the start tag of an element.', 'The xmlns attribute in the first <table> element gives the h: prefix a qualified namespace.', 'The xmlns attribute in the second <table> element gives the f: prefix a qualified namespace.', 'However, companies often use the namespace as a pointer to aweb page containing namespace information.', 'A Uniform Resource Identifier (URI) is a string of characters which identifies an Internet Resource.', 'XSLT is a language that can be used to transform XML documents into other formats.', 'The namespace ""http://www.w3.org/1999/XSL/Transform"" identifies XSLT elements inside an HTML document:']","['In XML, element names are defined by the developer. This often results in a conflict when trying to mix XML documents from different XML applications.', 'If these XML fragments were added together, there would be a name conflict. Both contain a <table> element, but the elements have different content and meaning.', 'When a namespace is defined for an element, all child elements with the same prefix are associated with the same namespace.', 'The most common URI is the Uniform Resource Locator (URL) which identifies an Internet domain address. Another, not so common type of URI is the Uniform Resource Name (URN).', 'Defining a default namespace for an element saves us from using prefixes in all the child elements. It has the following syntax:']","['\n<table>\n   \xa0\n   <tr>\n   \xa0\xa0\xa0\n   <td>Apples</td>\n   \xa0\xa0\xa0\n   <td>Bananas</td>\n   \xa0\n   </tr>\n</table>', '\n<table>\n   \xa0\n   <name>African Coffee Table</name>\n   \xa0\n   <width>80</width>\n   \xa0\n   <length>120</length>\n</table>', '\n<h:table>\n   \xa0\n   <h:tr>\n   \xa0\xa0\xa0\n   <h:td>Apples</h:td>\n   \xa0\xa0\xa0\n   <h:td>Bananas</h:td>\n   \xa0\n   </h:tr>\n</h:table>\n<f:table>\n\xa0 <f:name>African Coffee Table</f:name>\n\xa0\xa0<f:width>80</f:width>\n\xa0\xa0<f:length>120</f:length>\n</f:table>\n', '\n<root>\n<h:table xmlns:h=""http://www.w3.org/TR/html4/"">\n\xa0\xa0<h:tr>\n\xa0\xa0\xa0 <h:td>Apples</h:td>\n\xa0\xa0\xa0 <h:td>Bananas</h:td>\n\xa0\xa0</h:tr>\n</h:table>\n<f:table xmlns:f=""https://www.w3schools.com/furniture"">\n\xa0\xa0<f:name>African Coffee Table</f:name>\n\xa0\xa0<f:width>80</f:width>\n\xa0\xa0<f:length>120</f:length>\n</f:table>\n</root>\n', '\n<root xmlns:h=""http://www.w3.org/TR/html4/""\nxmlns:f=""https://www.w3schools.com/furniture"">\n<h:table>\n\xa0\xa0<h:tr>\n\xa0\xa0\xa0 <h:td>Apples</h:td>\n\xa0\xa0\xa0 <h:td>Bananas</h:td>\n\xa0\xa0</h:tr>\n</h:table>\n<f:table>\n\xa0\xa0<f:name>African Coffee Table</f:name>\n\xa0\xa0<f:width>80</f:width>\n\xa0\xa0<f:length>120</f:length>\n</f:table>\n</root>\n', '\nxmlns=""namespaceURI""\n', '\n<table xmlns=""http://www.w3.org/TR/html4/"">\n\xa0\n<tr>\n\xa0\xa0\xa0\n<td>Apples</td>\n\xa0\xa0\xa0\n<td>Bananas</td>\n\xa0\n</tr>\n</table>\n', '\n<table xmlns=""https://www.w3schools.com/furniture"">\n\xa0\n<name>African Coffee Table</name>\n\xa0\n<width>80</width>\n\xa0\n<length>120</length>\n</table>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n<html>\n<body>\n\xa0 <h2>My CD Collection</h2>\n\xa0 <table border=""1"">\n\xa0\xa0\xa0 <tr>\n\xa0\xa0\xa0\xa0\xa0 <th style=""text-align:left"">Title</th>\n\xa0\xa0\xa0\xa0\xa0 <th style=""text-align:left"">Artist</th>\n\xa0\xa0\xa0 </tr>\n\xa0\xa0\xa0 <xsl:for-each select=""catalog/cd"">\n\xa0\xa0\xa0 <tr>\n\xa0\xa0\xa0\xa0\xa0 <td><xsl:value-of select=""title""/></td>\n\xa0\xa0\xa0\xa0\xa0 <td><xsl:value-of select=""artist""/></td>\n\xa0\xa0\xa0 </tr>\n\xa0\xa0\xa0 </xsl:for-each>\n\xa0 </table>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>\n']",[],[]
8,['Displaying XML'],"['Viewing XML Files', 'Viewing an Invalid XML File', 'Other XML Examples', 'Why Does XML Display Like This?']",['Header'],"['https://www.w3schools.com/xml/xml_namespaces.asp', 'https://www.w3schools.com/xml/xml_http.asp', 'https://www.w3schools.com/xml/note.xml', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/xsl_intro.asp', 'https://www.w3schools.com/xml/xml_namespaces.asp', 'https://www.w3schools.com/xml/xml_http.asp']",[],"['Raw XML files can be viewed in all major browsers.', ""Don't expect XML files to be displayed as HTML pages."", 'Look at the XML file above in your browser: note.xml', 'Most browsers will display an XML document with color-coded elements.', 'Try to open the following XML file:note_error.xml ', 'Viewing some XML documents will help you get the XML feeling:', 'An XML CD catalogThis is a CD collection, stored as XML.', 'An XML plant catalogThis is a plant catalog from a plant shop, stored as XML.', 'XML documents do not carry information about how to display the data.', 'Tip: If you want to style an XML document, useXSLT.']","['To view raw XML source, try to select ""View Page Source"" or ""View Source"" from the browser menu.', 'An XML breakfast menuThis is a breakfast food menu from a restaurant, stored as XML.', 'Without any information about how to display the data, the browsers can just display the XML document as it is.']","['Often a plus (+) or minus sign (-) to the leftof the elements can be clicked to expand or collapse the element structure.', 'Note: In Safari 5 (and earlier), only the element text will be displayed. To view the raw XML, you must right click the page and select ""View Source"".', 'If an erroneous XML file is opened, some browsers will report the error, and some will display it, or display it incorrectly.', 'Since XML tags are ""invented"" by the author of the XML document, browsers do not know if a tag like <table> describes an HTML table or a dining table.']",[],[],[]
9,['XML HttpRequest'],"['The XMLHttpRequest Object', 'XMLHttpRequest Example', 'Sending an XMLHttpRequest', 'Example Explained', 'Old Versions of Internet Explorer (IE5 and IE6)']","['Example', 'Example', 'Example']","['https://www.w3schools.com/xml/xml_display.asp', 'https://www.w3schools.com/xml/xml_parser.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_httprequest', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_httprequest_ie', 'https://www.w3schools.com/xml/xml_display.asp', 'https://www.w3schools.com/xml/xml_parser.asp']",[],"['The XMLHttpRequest object can be used to request data from a web server.', 'The XMLHttpRequest object is a developers dream, because you can:', 'Start typing a name in the input field below:', ' Name: \xa0\xa0Suggestions: ', 'The example above is explained in the AJAX chapters of this tutorial.', 'The first line in the example above creates an XMLHttpRequest object:', 'The responseText property returns the server response as a text string.', 'The text string can be used to update a web page:']","['All modern browsers have a built-in XMLHttpRequest object to request data from a server. ', 'A common JavaScript syntax for using the XMLHttpRequest object looks much like this:', 'When readyState property is 4 and the status property is 200, the response is ready:', 'You will learn a lot more about the XMLHttpRequest object in the AJAX chapters of this tutorial.', 'Old versions of Internet Explorer (IE5 and IE6) do not support the XMLHttpRequest object.', 'To handle IE5 and IE6,  check if the browser supports the XMLHttpRequest object, or else create an ActiveXObject:']","['When you type a character in the input field below, an XMLHttpRequest is sent to the server,and some name suggestions are returned (from the server):', 'The onreadystatechange property specifies a function to be executed every time the status of the XMLHttpRequest object changes:']","['\nvar xhttp = new XMLHttpRequest();xhttp.onreadystatechange = function() {\n\xa0\xa0\xa0 if (this.readyState == 4 && this.status == 200) {\n \xa0\xa0\xa0\xa0\xa0\xa0 // Typical action to be performed when the document is ready:\xa0\xa0\xa0\xa0\xa0\xa0 \n document.getElementById(""demo"").innerHTML = xhttp.responseText;\n\xa0\xa0\xa0 }};\nxhttp.open(""GET"", ""filename"", true);\nxhttp.send();\n', '\n var xhttp = new XMLHttpRequest();\n', '\n xhttp.onreadystatechange = function()\n', '\nif (this.readyState == 4 && this.status == 200)\n', '\n document.getElementById(""demo"").innerHTML = xhttp.responseText;', '\nif (window.XMLHttpRequest) {\xa0\xa0\xa0 // code for modern browsers\n\xa0\xa0\xa0 xmlhttp = new XMLHttpRequest();\n\xa0}\nelse {\xa0\xa0\xa0 // code for old IE browsers\n\xa0\xa0\xa0 xmlhttp = new ActiveXObject(""Microsoft.XMLHTTP"");\n }']",[],['Update a web page without reloading the page|||Request data from a server - after the page has loaded |||Receive data from a server\xa0 - after the page has loaded|||Send data to a server - in the background|||']
10,['XML Parser'],"['XML Parser', 'Parsing a Text String', 'Example Explained', 'Old Versions of Internet Explorer', 'The XMLHttpRequest Object']","['Example', 'Example', 'Example']","['https://www.w3schools.com/xml/xml_http.asp', 'https://www.w3schools.com/xml/xml_dom.asp', 'https://www.w3schools.com/xml/dom_intro.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmltext', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmltext_ie', 'https://www.w3schools.com/xml/xml_http.asp', 'https://www.w3schools.com/xml/cd_catalog.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_responsexml', 'https://www.w3schools.com/xml/xml_http.asp', 'https://www.w3schools.com/xml/xml_dom.asp']",[],"['All major browsers have a built-in XML parser to access and manipulate XML.', 'A text string is defined:', 'An XML DOM parser is created:', 'The parser creates a new XML DOM object using the text string:', 'The XMLHttpRequest Object has a built in XML Parser.', 'The responseText property returns the response as a string.', 'The responseXML property returns the response as an XML DOM object.', 'Request the file cd_catalog.xml and use the response as an XML DOM object:']","['The XML DOM (Document Object Model) defines the properties and methods for accessing and editing XML.', 'However, before an XML document can be accessed, it must be loaded into an XML DOM object.', 'All modern browsers have a built-in XML parser that can convert text into an XML DOM object.', 'This example parses a text string into an XML DOM object, and  extracts the info from it with JavaScript:', 'Old versions of Internet Explorer (IE5, IE6, IE7, IE8) do not support the DOMParser object.', 'If you want to use the response as an XML DOM object, you can use the responseXML property.']","['To handle older versions of Internet Explorer,  check if the browser supports the DOMParser object, or else create an ActiveXObject:']","['\n<html>\n<body>\n<p id=""demo""></p>\n<script>\nvar text, parser, xmlDoc;\ntext = ""<bookstore><book>"" +\n""<title>Everyday Italian</title>"" +\n""<author>Giada De Laurentiis</author>"" +\n""<year>2005</year>"" +\n""</book></bookstore>"";\nparser = new DOMParser();\nxmlDoc = parser.parseFromString(text,""text/xml"");\ndocument.getElementById(""demo"").innerHTML =\nxmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue;\n</script></body></html>\n', '\ntext = ""<bookstore><book>"" +\n""<title>Everyday Italian</title>"" +\n""<author>Giada De Laurentiis</author>"" +\n""<year>2005</year>"" +\n""</book></bookstore>"";\n', '\nparser = new DOMParser();\n', '\nxmlDoc = parser.parseFromString(text,""text/xml"");\n', '\nif (window.DOMParser) {\xa0 // code for modern browsers\n\xa0 parser = new DOMParser();\n\xa0 xmlDoc = parser.parseFromString(text,""text/xml"");\n}\nelse {\n\xa0 // code for old IE browsersxmlDoc = new ActiveXObject(""Microsoft.XMLDOM"");\n\xa0 xmlDoc.async = false;\n\xa0 xmlDoc.loadXML(text); \n}\xa0\n', '\nxmlDoc = xmlhttp.responseXML;\n txt = """";\nx = xmlDoc.getElementsByTagName(""ARTIST"");\nfor (i = 0; i < x.length; i++) {\n\xa0\xa0\xa0 txt += x[i].childNodes[0].nodeValue + ""<br>"";\n }\ndocument.getElementById(""demo"").innerHTML = txt;']",[],[]
11,['XML DOM'],"['What is the DOM?', 'The HTML DOM', 'The XML DOM']","['XML DOM', 'Example', 'Books.xml', 'Example', 'Example']","['https://www.w3schools.com/xml/xml_parser.asp', 'https://www.w3schools.com/xml/xml_xpath.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_change_html', 'https://www.w3schools.com/xml//js/js_htmldom.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmltext', 'https://www.w3schools.com/xml/dom_intro.asp', 'https://www.w3schools.com/xml/xml_parser.asp', 'https://www.w3schools.com/xml/xml_xpath.asp']",['https://www.w3schools.com/xml/nodetree.gif'],"['The DOM defines a standard for accessing and manipulating documents:', 'Understanding the DOM is a must for anyone working with HTML or XML.', 'All HTML elements can be accessed through the HTML DOM.', 'This example changes the value of an HTML element with id=""demo"":', 'You can learn a lot more about the HTML DOM in our JavaScript tutorial.', 'All XML elements can be accessed through the XML DOM.', 'The XML DOM is a standard for how to get, change, add, and delete XML elements.', 'You will learn a lot more about the XML DOM in our XML DOM Tutorial.']","['This code retrieves the text value of the first <title> element in an XML document:', 'This example loads a text string into an XML DOM object, and  extracts the info from it with JavaScript:']","['""The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.""', 'The HTML DOM defines a standard way for accessing and manipulating HTML documents. It presents an HTML document as a tree-structure.', 'The XML DOM defines a standard way for accessing and manipulating XML documents. It presents an XML document as a tree-structure.']","['\n<h1 id=""demo"">This is a Heading</h1>\n <button type=""button""onclick=""document.getElementById(\'demo\').innerHTML = \n \'Hello World!\'"">Click Me!</button>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\n\xa0 <book category=""cooking"">\n\xa0\xa0\xa0 <title lang=""en"">Everyday \nItalian</title>\xa0\xa0\xa0 <author>Giada De Laurentiis</author>\xa0\xa0\xa0 \n<year>2005</year>\xa0\xa0\xa0 <price>30.00</price>\xa0 </book>\n\xa0 <book category=""children"">\xa0\xa0\xa0 <title lang=""en"">Harry \nPotter</title>\xa0\xa0\xa0 <author>J K. Rowling</author>\xa0\xa0\xa0 \n<year>2005</year>\xa0\xa0\xa0 <price>29.99</price>\xa0 </book></bookstore>\n', '\ntxt = xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue;\n', '\n <html><body><p id=""demo""></p><script>var text, parser, \n xmlDoc;text = ""<bookstore><book>"" +""<title>Everyday \n Italian</title>"" +""<author>Giada De Laurentiis</author>"" +\n ""<year>2005</year>"" +""</book></bookstore>"";parser = new DOMParser();\n xmlDoc = parser.parseFromString(text,""text/xml"");\n document.getElementById(""demo"").innerHTML =xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue;\n </script></body></html>\n']",[],[]
12,['XML and XPath'],"['What is XPath?', 'XPath Path Expressions', 'XPath is Used in XSLT', 'XPath Example', 'XPath Tutorial']",[],"['https://www.w3schools.com/xml/xml_dom.asp', 'https://www.w3schools.com/xml/xml_xslt.asp', 'https://www.w3schools.com/xml/xpath_intro.asp', 'https://www.w3schools.com/xml/xml_dom.asp', 'https://www.w3schools.com/xml/xml_xslt.asp']",['https://www.w3schools.com/xml/pic_xpath.gif'],"['XPath is a major element in the XSLT standard.', 'XPath is a major element in the XSLT standard.', 'With XPath knowledge you will be able to take great advantage of XSL.', 'We will use the following XML document:', 'You will learn a lot more about XPath in our XPath Tutorial.']","['XPath can be used to navigate through elements and attributes in an XML document.', 'XPath expressions can be used in JavaScript, Java, XML Schema, PHP, Python, C and C++, and lots of other languages.', 'In the table below we have listed some XPath expressions and the result of the expressions:']",['XPath uses path expressions to select nodes or node-sets in an XML document. These path expressions look very much like the expressions you see when you work with a traditional computer file system.'],"['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\n<book category=""cooking"">\n\xa0\n<title lang=""en"">Everyday Italian</title>\n\xa0\n<author>Giada De Laurentiis</author>\n\xa0\n<year>2005</year>\n\xa0\n<price>30.00</price>\n</book>\n<book category=""children"">\n\xa0\n<title lang=""en"">Harry Potter</title>\n\xa0\n<author>J K. Rowling</author>\n\xa0\n<year>2005</year>\n\xa0\n<price>29.99</price>\n</book>\n<book category=""web"">\n\xa0\n<title lang=""en"">XQuery Kick Start</title>\n\xa0\n<author>James McGovern</author>\n\xa0\n<author>Per Bothner</author>\n\xa0\n<author>Kurt Cagle</author>\n\xa0\n<author>James Linn</author>\n\xa0\n<author>Vaidyanathan Nagarajan</author>\n\xa0\n<year>2003</year>\n\xa0\n<price>49.99</price>\n</book>\n<book category=""web"">\n\xa0\n<title lang=""en"">Learning XML</title>\n\xa0\n<author>Erik T. Ray</author>\n\xa0\n<year>2003</year>\n\xa0\n<price>39.95</price>\n</book>\n</bookstore>']","['||||||||||||XPath is a syntax for defining parts of an XML document|||XPath uses path expressions to navigate in XML documents|||XPath contains a library of standard functions|||XPath is a major element in XSLT and in XQuery|||XPath is a W3C recommendation||||||', 'XPath Expression|||Result&&&/bookstore/book[1] |||Selects the first book element that is the child of the bookstore element&&&/bookstore/book[last()]|||Selects the last book element that is the child of the bookstore element&&&/bookstore/book[last()-1]|||Selects the last but one book element that is the child of the bookstore element&&&/bookstore/book[position()<3]|||Selects the first two book elements that are children of the bookstore element&&&//title[@lang]|||Selects all the title elements that have an attribute named lang&&&//title[@lang=\'en\']|||Selects all the title elements that have a ""lang"" attribute with a value of ""en""&&&/bookstore/book[price>35.00]|||Selects all the book elements of the bookstore element that have a price element with a value greater than 35.00&&&/bookstore/book[price>35.00]/title|||Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00']",['XPath is a syntax for defining parts of an XML document|||XPath uses path expressions to navigate in XML documents|||XPath contains a library of standard functions|||XPath is a major element in XSLT and in XQuery|||XPath is a W3C recommendation|||']
13,['XML and XSLT'],"['Displaying XML with XSLT', 'XSLT Example', 'XSLT Tutorial']",['Example XSLT Stylesheet:'],"['https://www.w3schools.com/xml/xml_xpath.asp', 'https://www.w3schools.com/xml/xml_xquery.asp', 'https://www.w3schools.com/xml/simplexsl.xml', 'https://www.w3schools.com/xml/xsl_intro.asp', 'https://www.w3schools.com/xml/xml_xpath.asp', 'https://www.w3schools.com/xml/xml_xquery.asp']",[],"['With XSLT you can transform an XML document into HTML.', 'XSLT uses XPath to find information in an XML document.', 'We will use the following XML document:', 'Use XSLT to transform XML into HTML, before it is displayed in a browser:', 'If you want to learn more about XSLT, go to our XSLT Tutorial.']",['XSLT (eXtensible Stylesheet Language Transformations) is the recommended style sheet language for XML.'],"['XSLT is far more sophisticated than CSS. With XSLT you can add/remove elements and attributes to or from the output file. You can also rearrange and sort elements, perform tests and make decisions about which elements to hide and display, and a lot more.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?><breakfast_menu><food>\n<name>Belgian Waffles</name><price>$5.95</price><description>Two of \nour famous Belgian Waffles with plenty of real maple syrup</description>\n<calories>650</calories></food><food><name>Strawberry \nBelgian Waffles</name><price>$7.95</price><description>Light Belgian \nwaffles covered with strawberries and whipped cream</description>\n<calories>900</calories></food><food><name>Berry-Berry \nBelgian Waffles</name><price>$8.95</price><description>Light Belgian \nwaffles covered with an assortment of fresh berries and whipped \ncream</description><calories>900</calories></food><food>\n<name>French Toast</name><price>$4.50</price><description>Thick \nslices made from our homemade sourdough bread</description>\n<calories>600</calories></food><food><name>Homestyle \nBreakfast</name><price>$6.95</price><description>Two eggs, bacon or \nsausage, toast, and our ever-popular hash browns</description>\n<calories>950</calories></food></breakfast_menu>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?><html xsl:version=""1.0"" \nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform""><body \nstyle=""font-family:Arial;font-size:12pt;background-color:#EEEEEE""><xsl:for-each \nselect=""breakfast_menu/food"">\xa0 <div \nstyle=""background-color:teal;color:white;padding:4px"">\xa0\xa0\xa0 \n<span style=""font-weight:bold""><xsl:value-of select=""name""/> - </span>\xa0\xa0\xa0 \n<xsl:value-of select=""price""/>\xa0\xa0\xa0 </div>\xa0 <div \nstyle=""margin-left:20px;margin-bottom:1em;font-size:10pt"">\xa0\xa0\xa0 \n<p>\xa0\xa0\xa0 <xsl:value-of select=""description""/>\xa0\xa0\xa0 \n<span style=""font-style:italic""> (<xsl:value-of select=""calories""/> calories \nper serving)</span>\xa0\xa0\xa0 </p>\xa0 </div></xsl:for-each>\n</body></html>']",[],[]
14,['XML and XQuery'],"['What is XQuery?', 'What is XQuery?', 'XQuery is About Querying XML', 'XQuery and XPath', 'XQuery - Examples of Use', 'XQuery is a W3C Recommendation', 'XQuery Tutorial']",['XQuery Example'],"['https://www.w3schools.com/xml/xml_xslt.asp', 'https://www.w3schools.com/xml/xml_xlink.asp', 'https://www.w3schools.com/xml/xquery_intro.asp', 'https://www.w3schools.com/xml/xml_xslt.asp', 'https://www.w3schools.com/xml/xml_xlink.asp']",['https://www.w3schools.com/xml/pic_xpath.gif'],"['XQuery is to XML what SQL is to databases.', 'XQuery was designed to query XML data.', 'Here is an example of what XQuery could solve:', 'XQuery can be used to:', 'XQuery 1.0 became a W3C Recommendation in 2007.', 'You will learn a lot more about XQuery in our XQuery Tutorial.']","['XQuery is a language for finding and extracting elements and attributes from XML documents.', '""Select all CD records with a price less than $10 from the CD collection stored in cd_catalog.xml""', 'XQuery is compatible with several W3C standards, such as XML, Namespaces, XSLT, XPath, and XML Schema.']",['XQuery 1.0 and XPath 2.0 share the same data model and support the same functions and operators. If you have already studied XPath you will have no problems with understanding XQuery.'],"['\nfor $x in doc(""books.xml"")/bookstore/book\nwhere $x/price>30\norder by $x/title\nreturn $x/title']",['||||||||||||XQuery is the language for querying XML data|||XQuery for XML is like SQL for databases|||XQuery is built on XPath expressions|||XQuery is supported by all major databases|||XQuery is a W3C Recommendation||||||'],['XQuery is the language for querying XML data|||XQuery for XML is like SQL for databases|||XQuery is built on XPath expressions|||XQuery is supported by all major databases|||XQuery is a W3C Recommendation|||Extract information to use in a Web Service|||Generate summary reports|||Transform XML data to XHTML|||Search Web documents for relevant information|||']
15,"['XML, XLink and XPointer']","['XLink Browser Support', 'XLink Syntax', 'XLink Example', 'XLink - Going Further', 'XLink Attribute Reference', 'XPointer', 'XPointer Browser Support', 'XPointer Example']",[],"['https://www.w3schools.com/xml/xml_xquery.asp', 'https://www.w3schools.com/xml/xml_validator.asp', 'https://www.w3schools.com/xml//graphics/svg_text.asp', 'https://www.w3schools.com/xml/xml_xquery.asp', 'https://www.w3schools.com/xml/xml_validator.asp']","['https://www.w3schools.com/xml/pic_xpath.gif', 'https://www.w3schools.com/xml/pic_xpath.gif']","['XLink is used to create hyperlinks in XML documents.', 'There is no browser support for XLink in XML documents.', 'However, all major browsers support XLinks in SVG.', 'The xlink:href attribute specifies the URL to link to.', 'The following XML document contains XLink features:', 'Example explained:', 'Note that the XML document above uses id attributes on each element!']","['Below is a simple example of how to use XLink to create links in an XML document:', 'The xlink:type and the xlink:href attributes in the <homepage> elements come from the XLink namespace.', 'The xlink:type=""simple"" creates a simple ""HTML-like"" link (means ""click here to go there"").', 'You can also specify WHEN the resource should appear, with the xlink:actuate attribute.', 'There is no browser support for XPointer. But XPointer is used in other XML languages.', 'In this example, we will use XPointer in conjunction with XLink to point to a specific part of another document.', 'We will start by looking at the target XML document (the document we are linking to):', 'The following XML document contains links to more information of the dog breed for each of my dogs:']","['In HTML, the <a> element defines a hyperlink. However, this is not how it works in XML. In XML documents, you can use whatever element names you want - therefore it is impossible for browsers to predict what link elements will be called in XML documents.', 'To get access to the XLink features we must declare the XLink namespace. The XLink namespace is: ""http://www.w3.org/1999/xlink"".', 'In the example above we have demonstrated simple XLinks. XLink is getting more interesting when accessing remote locations as resources, instead of standalone pages.', 'If we set the value of the xlink:show attribute to ""embed"", the linked resource should be processed inline within the page. When you consider that this could be another XML document you could, for example, build a hierarchy of XML documents.', 'So, instead of linking to the entire document (as with XLink), XPointer allows you to link to specific parts of the document. To link to a specific part of a page, add a number sign (#) and an XPointer expression after the URL in the xlink:href attribute, like this: xlink:href=""https://dog.com/dogbreeds.xml#xpointer(id(\'Rottweiler\'))"". The expression refers to the element in the target document, with the id value of ""Rottweiler"".', 'XPointer also allows a shorthand method for linking to an element with an id. You can use the value of the id directly, like this: xlink:href=""https://dog.com/dogbreeds.xml#Rottweiler"".']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<homepages xmlns:xlink=""http://www.w3.org/1999/xlink"">\xa0\n  <homepage xlink:type=""simple""\n  xlink:href=""https://www.w3schools.com"">Visit W3Schools</homepage>\xa0\n  <homepage xlink:type=""simple""\n  xlink:href=""http://www.w3.org"">Visit W3C</homepage></homepages>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore xmlns:xlink=""http://www.w3.org/1999/xlink"">\n<book title=""Harry Potter"">\n  \xa0\n  <description\n  \xa0\n  xlink:type=""simple""\n  \xa0\n  xlink:href=""/images/HPotter.gif""\n  \xa0\n  xlink:show=""new"">\n  \xa0\n  As his fifth year at Hogwarts School of Witchcraft and\n  \xa0\n  Wizardry approaches, 15-year-old Harry Potter is.......\n  \xa0\n  </description>\n</book>\n<book title=""XQuery Kick Start"">\n  \xa0\n  <description\n  \xa0\n  xlink:type=""simple""\n  \xa0\n  xlink:href=""/images/XQuery.gif""\n  \xa0\n  xlink:show=""new"">\n  \xa0\n  XQuery Kick Start delivers a concise introduction\n  \xa0\n  to the XQuery standard.......\n  \xa0\n  </description>\n</book>\n</bookstore>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<dogbreeds>\n<dog breed=""Rottweiler"" id=""Rottweiler"">\n  \xa0\n  <picture url=""https://dog.com/rottweiler.gif"" />\n  \xa0\n  <history>The Rottweiler\'s ancestors were probably Roman\n  \xa0\n  drover dogs.....</history>\n  \xa0\n  <temperament>Confident, bold, alert and imposing, the Rottweiler\n  \xa0\n  is a popular choice for its ability to protect....</temperament>\n</dog>\n<dog breed=""FCRetriever"" id=""FCRetriever"">\n  \xa0\n  <picture url=""https://dog.com/fcretriever.gif"" />\n  \xa0\n  <history>One of the earliest uses of retrieving dogs was to\n  \xa0\n  help fishermen retrieve fish from the water....</history>\n  \xa0\n  <temperament>The flat-coated retriever is a sweet, exuberant,\n  \xa0\n  lively dog that loves to play and retrieve....</temperament>\n</dog>\n</dogbreeds>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<mydogs xmlns:xlink=""http://www.w3.org/1999/xlink"">\n<mydog>\n  \xa0\n  <description>\n  \xa0\n  Anton is my favorite dog. He has won a lot of.....\n  \xa0\n  </description>\xa0\n<fact xlink:type=""simple"" xlink:href=""https://dog.com/dogbreeds.xml#Rottweiler"">\xa0 Fact about Rottweiler \xa0 </fact>\n</mydog>\n<mydog>\n  \xa0\n  <description>\n  \xa0\n  Pluto is the sweetest dog on earth......\n  \xa0\n  </description>\n\xa0\n<fact xlink:type=""simple"" xlink:href=""https://dog.com/dogbreeds.xml#FCRetriever"">\xa0 Fact about flat-coated Retriever \xa0 </fact>\n</mydog>\n</mydogs>\n']","['|||||||||||||||XLink is used to create hyperlinks within XML documents|||Any element in an XML document can behave as a link|||With XLink, the links can be defined outside the linked files|||XLink is a W3C Recommendation||||||', 'Attribute|||Value|||Description&&&xlink:actuate|||onLoad|||    onRequest|||    other|||    none|||Defines when the linked resource is read and shown:||| |||onLoad - the resource should be loaded and shown when the document loads|||onRequest - the resource is not read or shown before the link is clicked||||||&&&xlink:href|||URL|||Specifies the URL to link to&&&xlink:show|||embed|||    new|||    replace|||    other|||    none|||Specifies where to open the link. Default is ""replace""&&&xlink:type|||simple|||    extended|||    locator|||    arc|||    resource|||    title|||    none|||Specifies the type of link', '||||||||||||XPointer allows links to point to specific parts of an XML document|||XPointer uses XPath expressions to navigate in the XML document|||XPointer is a W3C Recommendation||||||']","['XLink is used to create hyperlinks within XML documents|||Any element in an XML document can behave as a link|||With XLink, the links can be defined outside the linked files|||XLink is a W3C Recommendation|||The XLink namespace is declared at the top of the  |||document (xmlns:xlink=""http://www.w3.org/1999/xlink"")|||The xlink:type=""simple"" creates a simple ""HTML-like"" link|||The xlink:href attribute specifies the URL to link to (in this case - an image)|||The xlink:show=""new"" specifies that the link should open in a new window|||onLoad - the resource should be loaded and shown when the document loads|||onRequest - the resource is not read or shown before the link is clicked|||XPointer allows links to point to specific parts of an XML document|||XPointer uses XPath expressions to navigate in the XML document|||XPointer is a W3C Recommendation|||']"
16,['XML Validator'],"['Well Formed XML Documents', 'XML Errors Will Stop You', 'Syntax-Check Your XML', 'Valid XML Documents']",[],"['https://www.w3schools.com/xml/xml_xlink.asp', 'https://www.w3schools.com/xml/xml_dtd.asp', 'https://www.w3schools.com/xml/xml_xlink.asp', 'https://www.w3schools.com/xml/xml_dtd.asp']",[],"['Use our XML validator to syntax-check your XML.', 'An XML document with correct syntax is called ""Well Formed"".', 'The syntax rules were described in the previous chapters:', 'Errors in XML documents will stop your XML applications.', 'With XML, errors are not allowed.', 'To help you syntax-check your XML, we have created an XML validator.', 'Try to syntax-check correct XML : ', 'Try to syntax-check incorrect XML : ', 'Try to syntax-check your own XML : ', 'A ""well formed"" XML document is not the same as a ""valid"" XML document.', 'There are two different document type definitions that can be used with XML:']","['HTML browsers are allowed to display HTML documents with errors (like missing end tags). ', 'A ""valid"" XML document must be well formed. In addition, it must conform to a  document type definition.', 'A document type definition defines the rules and the legal elements and attributes for an XML document.']","['The W3C XML specification states that a program should stop processing an XML document if it finds an error.The reason is that XML software should be small, fast, and compatible.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don\'t forget me this weekend!</body>\n</note>']",[],['XML documents must have a root element|||XML elements must have a closing tag|||XML tags are case sensitive|||XML elements must be properly nested|||XML attribute values must be quoted|||DTD - The original Document Type Definition|||XML Schema - An XML-based alternative to DTD|||']
17,['XML DTD'],"['What is a DTD?', 'Valid XML Documents', 'XML DTD', 'Using DTD for Entity Declaration', 'When to Use a DTD?', 'When NOT to Use a DTD?']","['Note.dtd:', 'Example']","['https://www.w3schools.com/xml/xml_validator.asp', 'https://www.w3schools.com/xml/xml_schema.asp', 'https://www.w3schools.com/xml/note_entities.xml', 'https://www.w3schools.com/xml/xml_dtd_intro.asp', 'https://www.w3schools.com/xml/xml_validator.asp', 'https://www.w3schools.com/xml/xml_schema.asp']",[],"['An XML document with correct syntax is called ""Well Formed"".', 'An XML document validated against a DTD is both ""Well Formed"" and ""Valid"".', 'DTD stands for Document Type Definition.', 'The DTD above is interpreted like this:', 'Tip: #PCDATA means parseable character data.', 'You can also use a DTD to verify your own data.', 'If you want to study DTD, please read our DTD Tutorial.', 'XML does not require a DTD.']","['A DTD defines the structure and the legal elements and attributes of an XML document.', 'A ""Valid"" XML document is ""Well Formed"", as well as it conforms to the rules of a DTD:', 'The purpose of a DTD is to define the structure and the legal elements and attributes of an XML document:', 'A DOCTYPE declaration can also be used to define special characters or strings, used in the document:', 'With a DTD, independent groups of people can agree to use a standard DTD for interchanging data.', 'With a DTD, you can verify that the data you receive from the outside world is valid.']","['The DOCTYPE declaration above contains a reference to a DTD file. The content of the DTD file is shown and explained below.', 'Tip: An entity has three parts: it starts with an ampersand (&), then comes the entity name, and it ends with a semicolon (;).', 'When you are experimenting with XML, or when you are working with small XML files, creating DTDs may be a waste of time.', 'If you develop applications, wait until the specification is stable before you add a DTD. Otherwise, your software might stop working because of validation errors.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<!DOCTYPE note SYSTEM ""Note.dtd"">\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don\'t forget me this weekend!</body>\n</note>', '\n<!DOCTYPE note\n[\n  <!ELEMENT note (to,from,heading,body)>\n  <!ELEMENT to      (#PCDATA)>\n  <!ELEMENT from    (#PCDATA)>\n  <!ELEMENT heading (#PCDATA)>\n  <!ELEMENT body    (#PCDATA)>\n]>', '\n<?xml version=""1.0"" encoding=""UTF-8""?><!DOCTYPE note [<!ENTITY nbsp \n""&#xA0;""> <!ENTITY writer ""Writer: Donald Duck."">\n<!ENTITY copyright ""Copyright: W3Schools."">]>\n<note><to>Tove</to><from>Jani</from>\n<heading>Reminder</heading><body>Don\'t forget me this weekend!</body>\n<footer>&writer;&nbsp;&copyright;</footer>\n</note>\n']",[],"['!DOCTYPE note -\xa0 Defines that the root element of the document is note|||!ELEMENT note  - Defines that the note element must contain the elements: ""to, from, heading, body""|||!ELEMENT to  - Defines the to element to be of type ""#PCDATA""|||!ELEMENT from  - Defines the from element to be of type ""#PCDATA""|||!ELEMENT heading\xa0 - Defines the heading element to be of type ""#PCDATA""|||!ELEMENT body - Defines the body element to be of type ""#PCDATA""|||']"
18,['XML Schema'],"['XML Schema', 'XML Schemas are More Powerful than DTD', 'Why Use an XML Schema?', 'XML Schemas Support Data Types', 'XML Schemas use XML Syntax']",[],"['https://www.w3schools.com/xml/xml_dtd.asp', 'https://www.w3schools.com/xml/xml_server.asp', 'https://www.w3schools.com/xml/schema_intro.asp', 'https://www.w3schools.com/xml/xml_dtd.asp', 'https://www.w3schools.com/xml/xml_server.asp']",[],"['An XML Schema describes the structure of an XML document, just like a DTD.', 'An XML document with correct syntax is called ""Well Formed"".', 'XML Schema is an XML-based alternative to DTD:', 'The Schema above is interpreted like this:', 'With XML Schema, your XML files can carry a description of its own format.', 'With XML Schema, you can verify data.', 'One of the greatest strengths of XML Schemas is the support for data types:', 'Another great strength about XML Schemas is that they are written in XML:', 'If you want to study XML Schema, please read ourXML Schema Tutorial.']","['An XML document validated against an XML Schema is both ""Well Formed"" and ""Valid"".', 'With XML Schema, independent groups of people can agree on a standard for interchanging data.']",[],"['\n<xs:element name=""note"">\n<xs:complexType>\n\xa0 <xs:sequence>\n\xa0\xa0\xa0 <xs:element name=""to""\xa0type=""xs:string""/>\n\xa0\xa0\xa0 <xs:element name=""from""\xa0type=""xs:string""/>\n\xa0\xa0\xa0 <xs:element name=""heading"" type=""xs:string""/>\n\xa0\xa0\xa0 <xs:element name=""body""\xa0type=""xs:string""/>\n\xa0 </xs:sequence>\n</xs:complexType>\n</xs:element>']",[],"['<xs:element name=""note""> defines the element called ""note""|||<xs:complexType> the ""note"" element is a complex type|||<xs:sequence> the complex type is a sequence of elements|||<xs:element name=""to""\xa0type=""xs:string""> the element ""to"" is of type string (text)|||<xs:element name=""from""\xa0type=""xs:string""> the element ""from"" is of type string|||<xs:element name=""heading""\xa0type=""xs:string""> the element ""heading"" is of type string|||<xs:element name=""body""\xa0type=""xs:string""> the element ""body"" is of type string|||XML Schemas are written in XML|||XML Schemas are extensible to additions|||XML Schemas support data types|||XML Schemas support namespaces|||It is easier to describe document content|||It is easier to define restrictions on data|||It is easier to validate the correctness of data|||It is easier to convert data between different data types|||You don\'t have to learn a new language|||You can use your XML editor to edit your Schema files|||You can use your XML parser to parse your Schema files|||You can manipulate your Schemas with the XML DOM|||You can transform your Schemas with XSLT|||']"
19,['XML on the Server'],"['Storing XML Files on the Server', 'Generating XML with PHP', 'Generating XML with ASP', 'Generating XML From a Database', 'Transforming XML with XSLT on the Server']",[],"['https://www.w3schools.com/xml/xml_schema.asp', 'https://www.w3schools.com/xml/xml_examples.asp', 'https://www.w3schools.com/xml/note.php', 'https://www.w3schools.com/xml//default.asp', 'https://www.w3schools.com/xml/note.asp', 'https://www.w3schools.com/xml//default.asp', 'https://www.w3schools.com/xml/guestbook.asp', 'https://www.w3schools.com/xml//default.asp', 'https://www.w3schools.com/xml/simple.asp', 'https://www.w3schools.com/xml/xml_schema.asp', 'https://www.w3schools.com/xml/xml_examples.asp']",[],"['XML files are plain text files just like HTML files. ', 'XML can easily be stored and generated by a standard web server.', 'Start Windows Notepad and write the following lines:', 'Save the file on your web server with a proper name like ""note.xml"".', 'XML can be generated on a server without any installed XML software.', 'To generate an XML response from the server using PHP, use following code:', 'Note that the content type of the response header must be set to ""text/xml"".', 'See how the PHP file will be returned from the server.', 'If you want to study PHP, you will find our PHP tutorial on our homepage.', 'Note that the content type of the response must be set to ""text/xml"".', 'See how the ASP file will be returned from the server.', 'If you want to study ASP, you will find our ASP tutorial on our homepage.', 'XML can be generated from a database without any installed XML software.', 'See the real life database output from the ASP file above.', 'The example above uses ASP with ADO.', 'If you want to study ASP and ADO, you will find the tutorials on our homepage.', 'This ASP transforms an XML file to XHTML on the server:', 'Example explained', 'See how it works.']",['XML files can be stored on an Internet server exactly the same way as HTML files.'],"['To generate an XML response from the server - simply write the following code and save it as an ASP file on the web server:', 'To generate an XML database response from the server, simply write the following code and save it as an ASP file on the web server:']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<note>\n  \xa0\n  <from>Jani</from>\n  \xa0\n  <to>Tove</to>\n  \xa0\n  <message>Remember me this weekend</message>\n</note>\n', '\n<?php\nheader(""Content-type: text/xml"");\necho ""<?xml version=\'1.0\' encoding=\'UTF-8\'?>"";\necho ""<note>"";\necho ""<from>Jani</from>"";\necho ""<to>Tove</to>"";\necho ""<message>Remember me this weekend</message>"";\necho ""</note>"";\n?>\n', '\n<%\nresponse.ContentType=""text/xml""\nresponse.Write(""<?xml version=\'1.0\' encoding=\'UTF-8\'?>"")\nresponse.Write(""<note>"")\nresponse.Write(""<from>Jani</from>"")\nresponse.Write(""<to>Tove</to>"")\nresponse.Write(""<message>Remember me this weekend</message>"")\nresponse.Write(""</note>"")\n%>\n', '\n<%\nresponse.ContentType = ""text/xml""\nset conn=Server.CreateObject(""ADODB.Connection"")\nconn.provider=""Microsoft.Jet.OLEDB.4.0;""\nconn.open server.mappath(""/datafolder/database.mdb"")\nsql=""select fname,lname from tblGuestBook""\nset rs=Conn.Execute(sql)\nresponse.write(""<?xml version=\'1.0\' encoding=\'UTF-8\'?>"")\nresponse.write(""<guestbook>"")\nwhile (not rs.EOF)\n  response.write(""<guest>"")\n  response.write(""<fname>"" & rs(""fname"") & ""</fname>"")\n  response.write(""<lname>"" & rs(""lname"") & ""</lname>"")\n  response.write(""</guest>"")\n  rs.MoveNext()\nwend\nrs.close()\nconn.close()\nresponse.write(""</guestbook>"")\n%>\n', '\n<%\n\'Load XML\nset xml = Server.CreateObject(""Microsoft.XMLDOM"")\nxml.async = false\nxml.load(Server.MapPath(""simple.xml""))\n\'Load XSL\nset xsl = Server.CreateObject(""Microsoft.XMLDOM"")\nxsl.async = false\nxsl.load(Server.MapPath(""simple.xsl""))\n\'Transform file\nResponse.Write(xml.transformNode(xsl))\n%>\n']",[],"['The first block of code creates an instance of the Microsoft XML parser (XMLDOM), and loads the XML file into memory.|||The second block of code creates another instance of the parser and loads the XSL file into memory.|||The last line of code transforms the XML document using the XSL document, and sends the result as XHTML to your browser. Nice!|||']"
20,['XML Examples'],['Try it Yourself - Examples'],"['Viewing XML Files', 'XML and CSS', 'XML and XSLT', 'Parsing XML and the XML DOM', 'XML Output From a Server']","['https://www.w3schools.com/xml/xml_server.asp', 'https://www.w3schools.com/xml/xml_quiz.asp', 'https://www.w3schools.com/xml/note.xml', 'https://www.w3schools.com/xml/note_error.xml', 'https://www.w3schools.com/xml/cd_catalog.xml', 'https://www.w3schools.com/xml/plant_catalog.xml', 'https://www.w3schools.com/xml/simple.xml', 'https://www.w3schools.com/xml/xml_display.asp', 'https://www.w3schools.com/xml/cd_catalog.xml', 'https://www.w3schools.com/xml/cd_catalog.txt', 'https://www.w3schools.com/xml/cd_catalog_with_css.xml', 'https://www.w3schools.com/xml/xml_display.asp', 'https://www.w3schools.com/xml/simple.xml', 'https://www.w3schools.com/xml/simplexsl.xml', 'https://www.w3schools.com/xml/xml_xslt.asp', 'https://www.w3schools.com/xml/note.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_parsertest2', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_parsertest', 'https://www.w3schools.com/xml/xml_parser.asp', 'https://www.w3schools.com/xml/note.asp', 'https://www.w3schools.com/xml/note.php', 'https://www.w3schools.com/xml/guestbook.asp', 'https://www.w3schools.com/xml/xml_server.asp', 'https://www.w3schools.com/xml/xml_server.asp', 'https://www.w3schools.com/xml/xml_quiz.asp']",[],"['Examples explained', 'Examples explained', 'View an XML food menuDisplay the food menu styled with an XSLT style sheet', 'Examples explained', 'View a simple XML file (note.xml)Parse an XML stringParse the XML file', 'Examples explained', 'Examples explained']","['View an XML CD catalogView the corresponding CSS fileDisplay the CD catalog formatted with the CSS file', 'See how ASP can return XMLSee how PHP can return XMLView XML output from a database']",['View a simple XML file (note.xml)View the same XML file with an errorView an XML CD catalogView an XML plant catalogView an XML food menu'],[],[],[]
21,['XML Quiz'],"['The Test', 'Count Your Score', 'Start the Quiz', 'Kickstart your career']",[],"['https://www.w3schools.com/xml/xml_examples.asp', 'https://www.w3schools.com/xml/xml_exam.asp', 'https://www.w3schools.com/xml//quiztest/quiztest.asp?qtest=XML', 'https://courses.w3schools.com/', 'https://www.w3schools.com/xml/xml_examples.asp', 'https://www.w3schools.com/xml/xml_exam.asp']",[],"[""You can test your XML skills with W3Schools' Quiz."", 'The test contains 25 questions and there is no time limit.', 'Good luck!', 'Start the XML Quiz ❯', 'Get certified by completing the  course']","[""The test is not official, it's just a nice way to see how much you know, or don't know, about XML.""]","['You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.']",[],[],[]
22,['W3Schools XML Certificate'],"['Document Your Skills', 'Get a Certificate', 'How Does It Work?']",[],"['https://www.w3schools.com/xml/xml_quiz.asp', 'https://www.w3schools.com/xml/ajax_intro.asp', 'https://courses.w3schools.com/browse/certifications', 'https://www.w3schools.com/xml/xml_quiz.asp', 'https://www.w3schools.com/xml/ajax_intro.asp']",['https://www.w3schools.com/xml//cert/pic_html_cert_small.gif'],"['W3Schools offers an Online Certification Program.', 'More than 30 000 certificates already issued!', 'W3Schools offers an Online Certification Program.', 'More than 30 000 certificates already issued!', 'Get Your Certificate »']","['The perfect solution for busy professionals who need to balance work, family, and career building.', 'The perfect solution for busy professionals who need to balance work, family, and career building.']","['Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.', 'Getting a certificate proves your commitment to upgrade your skills,gives you the credibility needed for more responsibilities, larger projects, and a higher salary.']",[],"['w3schools CERTIFIED  .  2021||||||\xa0\xa0||||||W3Schools offers an Online Certification Program.|||The perfect solution for busy professionals who need to balance work, family, and career building.|||More than 30 000 certificates already issued!|||', '|||Document Your Skills|||Knowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.|||Get a Certificate|||Getting a certificate proves your commitment to upgrade your skills,|||gives you the credibility needed for more responsibilities, larger projects, and a higher salary.||||||Get Your Certificate »|||||||||||||||']","['Study for free at W3Schools.com|||Study at your own speed|||Test your skills with W3Schools online quizzes|||Apply for your certificate by paying an exam fee|||Take your exam online, at any time, and from any location|||']"
23,['AJAX Introduction'],"['Try it Yourself Examples in Every Chapter', 'Let AJAX change this text', 'AJAX Example Explained', 'What is AJAX?', 'How AJAX Works']","['AJAX Example', 'HTML Page', 'Function loadDoc()']","['https://www.w3schools.com/xml/xml_exam.asp', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_create.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_first', 'https://www.w3schools.com/xml/xml_exam.asp', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_create.asp']",['https://www.w3schools.com/xml/ajax.gif'],"[""AJAX is a developer's dream, because you can:"", 'Try it Yourself »', 'The HTML page contains a <div> section and a <button>.', 'The <div> section is used to display information from a server.', 'The <button> calls a function (if it is clicked).', 'The function requests data from a web server and displays it:', 'AJAX = Asynchronous JavaScript AndXML.', 'AJAX is not a programming language.', 'AJAX just uses a combination of:']","['In every chapter, you can edit the examples online, and click on a button to view the result. ', 'The ""ajax_info.txt"" file used in the example above, is a simple text file and looks like this:']","['AJAX is a misleading name. AJAX applications might use XML to transport data,but it is equally common to transport data as plain text or JSON text.', 'AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes.This means that it is possible to update parts of a web page, without reloading the whole page.']","['\n<!DOCTYPE html><html>\n<body>\n<div id=""demo"">\xa0 <h2>Let AJAX change this text</h2>\xa0\n<button type=""button"" onclick=""loadDoc()"">Change Content</button>\n </div>\n</body>\n</html>\n', '\nfunction loadDoc() {\n\xa0 var xhttp = new   XMLHttpRequest();\n\xa0 xhttp.onreadystatechange = function() {\xa0\xa0\xa0 \nif (this.readyState == 4 && this.status == 200) {\xa0\xa0\xa0\xa0 \ndocument.getElementById(""demo"").innerHTML = this.responseText;\xa0\xa0\xa0 \n}\xa0 };\xa0 xhttp.open(""GET"", ""ajax_info.txt"", true);\xa0 \nxhttp.send();\n}\n', '\n  <h1>AJAX</h1><p>AJAX is not a programming language.</p><p>AJAX is a \n  technique for accessing web servers from a web page.</p><p>AJAX stands for \n  Asynchronous JavaScript And XML.</p>\n']",[],"['Update a web page without reloading the page|||Request data from a server - after the page has loaded|||Receive data from a server - after the page has loaded|||Send data to a server - in the background|||A browser built-in XMLHttpRequest object (to request data from a web server)|||JavaScript and HTML DOM (to display or use the data)|||1. An event occurs in a web page (the page is loaded, a button is clicked)|||2. An XMLHttpRequest object is created by JavaScript|||3. The XMLHttpRequest object sends a request to a web server|||4. The server processes the request|||5. The server sends a response back to the web page|||6. The response is read by JavaScript|||7. Proper action (like page update) is performed by JavaScript|||']"
24,['AJAX - The XMLHttpRequest Object'],"['The XMLHttpRequest Object', 'Create an XMLHttpRequest Object', 'Access Across Domains', 'XMLHttpRequest Object Methods', 'XMLHttpRequest Object Properties']",['Example'],"['https://www.w3schools.com/xml/ajax_intro.asp', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_send.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_xmlhttp', 'https://www.w3schools.com/xml//tags/ref_httpmessages.asp', 'https://www.w3schools.com/xml/ajax_intro.asp', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_send.asp']",[],"['The keystone of AJAX is the XMLHttpRequest object.', 'All modern browsers support the XMLHttpRequest object.', 'Syntax for creating an XMLHttpRequest object:', 'For security reasons, modern browsers do not allow access across domains.', 'The examples on W3Schools all open XML files located on the W3Schools domain.']","['All modern browsers (Chrome, Firefox, Edge (and IE7+), Safari, Opera) have a built-in XMLHttpRequest object.', 'The ""ajax_info.txt"" file used in the example above, is a simple text file and looks like this:', 'This means that both the web page and the XML file it tries to load, must be located on the same server.']","['The XMLHttpRequest object can be used to exchange data with a server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.', 'If you want to use the example above on one of your own web pages,the XML files you load must be located on your own server.']","['\nvariable = new XMLHttpRequest();', '\nvar xhttp = new XMLHttpRequest();', '\n  <h1>AJAX</h1><p>AJAX is not a programming language.</p><p>AJAX is a \n  technique for accessing web servers from a web page.</p><p>AJAX stands for \n  Asynchronous JavaScript And XML.</p>\n']","['Method|||Description&&&new XMLHttpRequest()|||Creates a new XMLHttpRequest object&&&abort()|||Cancels the current request&&&getAllResponseHeaders()|||Returns header information&&&getResponseHeader()|||Returns specific header information&&&open(method,url,async,user,psw)|||Specifies the requestmethod: the request type GET or POST|||url: the file location|||async: true (asynchronous) or false (synchronous)user: optional user namepsw: optional password&&&send()|||Sends the request to the serverUsed for GET requests&&&send(string)|||Sends the request to the server.Used for POST requests&&&setRequestHeader()|||Adds a label/value pair to the header to be sent', 'Property|||Description&&&onreadystatechange|||Defines a function to be called when the readyState property changes&&&readyState|||Holds the status of the XMLHttpRequest.|||    0: request not initialized |||    1: server connection established|||    2: request received |||    3: processing request |||    4: request finished and response is ready &&&responseText|||Returns the response data as a string&&&responseXML|||Returns the response data as XML data&&&status|||Returns the status-number of a request200: ""OK""403: ""Forbidden""404: ""Not Found""|||    For a complete list go to the Http |||    Messages Reference&&&statusText|||Returns the status-text (e.g. ""OK"" or ""Not Found"")']",[]
25,['AJAX - Send a Request To a Server'],"['Send a Request To a Server', 'GET or POST?', 'GET Requests', 'POST Requests', 'The url - A File On a Server', 'Asynchronous - True or False?', 'The onreadystatechange Property', 'Synchronous Request']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/ajax_xmlhttprequest_create.asp', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_get', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_get_unique', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_get2', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_post', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_post2', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_first', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_asyncfalse', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_create.asp', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp']",[],"['The XMLHttpRequest object is used to exchange data with a server.', 'GET is simpler and faster than POST, and can be used in most cases.', 'However, always use POST requests when:', 'A simple GET request:', 'A simple POST request:', 'The url parameter of the open() method, is an address to a file on a server:', 'Server requests should be sent asynchronously.', 'The async parameter of the open() method should be set to true:', 'You will learn more about onreadystatechange in a later chapter.']","['To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:', 'In the example above, you may get a cached result. To avoid this, add a unique ID to the URL:', 'If you want to send information with the GET method, add the information to the URL:', 'By sending asynchronously, the JavaScript does not have to wait for the server response, but can instead:', 'With the XMLHttpRequest object you can define a function to be executed when the request receives an answer.', 'The function is defined in the onreadystatechange property of the XMLHttpResponse object:', 'The ""ajax_info.txt"" file used in the example above, is a simple text file and looks like this:', 'To execute a synchronous request, change the third parameter in the open() method to false:', 'Sometimes async = false are used for quick testing. You will also find synchronous requests in older JavaScript code.', 'Since the code will wait for server completion, there is no need for an onreadystatechange function:']","['To POST data like an HTML form, add an HTTP header with setRequestHeader(). Specify the data you want to send in the send() method:', 'The file can be any kind of file, like .txt and .xml, or server scripting files like .asp and .php (which can perform  actions on the server before sending the response back).', 'Synchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will stop executing until the server response is ready. If the server is busy or slow, the application will hang or stop.', 'Synchronous XMLHttpRequest is in the process of being removed from the web standard, but this process can take many years.', 'Modern developer tools are encouraged to warn about using synchronous requests and may throw an InvalidAccessError exception when it occurs.']","['\n xhttp.open(""GET"", ""ajax_info.txt"", true);\n xhttp.send();', '\n xhttp.open(""GET"", ""demo_get.asp"", true);\n xhttp.send();', '\n xhttp.open(""GET"", ""demo_get.asp?t="" + Math.random(), true);\n xhttp.send();', '\n xhttp.open(""GET"", ""demo_get2.asp?fname=Henry&lname=Ford"", true);\n xhttp.send();', '\n xhttp.open(""POST"", ""demo_post.asp"", true);\n xhttp.send();', '\n xhttp.open(""POST"", ""demo_post2.asp"", true);\n xhttp.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");\n xhttp.send(""fname=Henry&lname=Ford"");', '\n xhttp.open(""GET"", ""ajax_test.asp"", true);', '\n\n xhttp.open(""GET"", ""ajax_test.asp"", true);', '\n xhttp.onreadystatechange = function() {\n\xa0 if (this.readyState == 4 && this.status == 200) {\n\xa0\xa0\xa0 document.getElementById(""demo"").innerHTML = this.responseText;\n\xa0\xa0}\n };\n xhttp.open(""GET"", ""ajax_info.txt"", true);\n xhttp.send();', '\n  <h1>AJAX</h1><p>AJAX is not a programming language.</p><p>AJAX is a \n  technique for accessing web servers from a web page.</p><p>AJAX stands for \n  Asynchronous JavaScript And XML.</p>\n', '\nxhttp.open(""GET"", ""ajax_info.txt"", false);\n', '\nxhttp.open(""GET"", ""ajax_info.txt"", false);\nxhttp.send();\ndocument.getElementById(""demo"").innerHTML = xhttp.responseText;']","['Method|||Description&&&open(method, url, async)|||Specifies the type of request|||method: the type of request: GET or POST|||url: the server (file) location|||async: true (asynchronous) or false (synchronous)&&&send()|||Sends the request to the server (used for GET)&&&send(string)|||Sends the request to the server (used for POST)', 'Method|||Description&&&setRequestHeader(header, value)|||Adds HTTP headers to the request|||header: specifies the header name|||value: specifies the header value']","['A cached file is not an option (update a file or database on the server).|||Sending a large amount of data to the server (POST has no size limitations).|||Sending user input (which can contain unknown characters), POST is more robust and secure than GET.|||execute other scripts while waiting for server response|||deal with the response after the response is ready|||']"
26,['AJAX - Server Response'],"['The onreadystatechange Property', 'Using a Callback Function', 'Server Response Properties', 'Server Response Methods', 'The responseText Property', 'The responseXML Property', 'The getAllResponseHeaders() Method', 'The getResponseHeader() Method']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/ajax_xmlhttprequest_send.asp', 'https://www.w3schools.com/xml/ajax_xmlfile.asp', 'https://www.w3schools.com/xml//tags/ref_httpmessages.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_first', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_callback', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_first', 'https://www.w3schools.com/xml/cd_catalog.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_responsexml', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_header', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_lastmodified', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_send.asp', 'https://www.w3schools.com/xml/ajax_xmlfile.asp']",[],"['The readyState property holds the status of the XMLHttpRequest.', 'The onreadystatechange function is called every time the readyState changes. ', 'When readyState is 4 and status is 200, the response is ready:', 'A callback function is a function passed as a parameter to another function.', 'The XML HttpRequest object has an in-built XML parser.', 'The responseXML property returns the server response as an XML DOM object.', 'Using this property you can parse the response as an XML DOM object:', 'Request the file cd_catalog.xml and parse the response:', 'You will learn a lot more about XML DOM in the DOM chapters of this tutorial.']","['The onreadystatechange property defines a function to be executed when the readyState changes.', 'The status property and the statusText property holds the status of the XMLHttpRequest object.', 'The ""ajax_info.txt"" file used in the example above, is a simple text file and looks like this:', 'The onreadystatechange event is triggered four times (1-4), one time for each change in the readyState.', 'The function call should contain the URL and what function to call when the response is ready.', 'The responseText property returns the server response as a JavaScript string, and you can use it accordingly:', 'The getAllResponseHeaders() method returns all header information from the server response.', 'The getResponseHeader() method returns specific header information from the server response.']","['If you have more than one AJAX task in a website, you should create one function for executing the XMLHttpRequest object, and one callback function for each AJAX task.']","['\nfunction loadDoc() {\n\xa0\xa0\xa0 var xhttp = new XMLHttpRequest();\n\xa0\xa0\xa0 xhttp.onreadystatechange = function() {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (this.readyState == 4 && this.status == 200) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 document.getElementById(""demo"").innerHTML =\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 this.responseText;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0 };\n\xa0\xa0\xa0 xhttp.open(""GET"", ""ajax_info.txt"", true);\n\xa0\xa0\xa0 xhttp.send();\n}\n', '\n  <h1>AJAX</h1><p>AJAX is not a programming language.</p><p>AJAX is a \n  technique for accessing web servers from a web page.</p><p>AJAX stands for \n  Asynchronous JavaScript And XML.</p>\n', '\nloadDoc(""url-1"", myFunction1);\n\nloadDoc(""url-2"", myFunction2);\nfunction loadDoc(url, cFunction) {\n\xa0 var xhttp;\n\xa0 xhttp=new XMLHttpRequest();\n\xa0 xhttp.onreadystatechange = function() {\n\xa0\xa0\xa0 if (this.readyState == 4 && this.status == 200) {\xa0\xa0\xa0\xa0\xa0 cFunction(this);\xa0\xa0\xa0 }\n\xa0};\n\xa0\xa0xhttp.open(""GET"", url, true);\n\xa0\xa0xhttp.send();\n}\nfunction myFunction1(xhttp) {\n\xa0 // action goes here\n}\n\nfunction myFunction2(xhttp) {\n\xa0 // action goes here\n}\n', '\ndocument.getElementById(""demo"").innerHTML = xhttp.responseText;', '\nxmlDoc = xhttp.responseXML;\ntxt = """";\nx = xmlDoc.getElementsByTagName(""ARTIST"");\nfor (i = 0; i < x.length; i++) {\n\xa0 txt += x[i].childNodes[0].nodeValue + ""<br>"";\n\xa0 }\ndocument.getElementById(""demo"").innerHTML = txt;xhttp.open(""GET"", \n ""cd_catalog.xml"", true);xhttp.send();', '\nvar xhttp = new XMLHttpRequest();xhttp.onreadystatechange = function() {\n\xa0 if (this.readyState == 4 && this.status == 200) {\n\xa0\xa0\xa0 document.getElementById(""demo"").innerHTML =\xa0\xa0\xa0 this.getAllResponseHeaders();\n\xa0 }\n};', '\nvar xhttp = new XMLHttpRequest();xhttp.onreadystatechange = function() {\n\xa0 if (this.readyState == 4 && this.status == 200) {\n\xa0\xa0\xa0 document.getElementById(""demo"").innerHTML =\xa0\xa0\xa0 this.getResponseHeader(""Last-Modified"");\n\xa0 }\n};\nxhttp.open(""GET"", ""ajax_info.txt"", true);\nxhttp.send();\n']","['Property|||Description&&&onreadystatechange|||Defines a function to be called when the readyState property changes&&&readyState|||Holds the status of the XMLHttpRequest. |||    0: request not initialized |||    1: server connection established|||    2: request received |||    3: processing request |||    4: request finished and response is ready&&&status|||200: ""OK""403: ""Forbidden""|||    404: ""Page not found""For a complete list go to the|||    Http Messages Reference&&&statusText|||Returns the status-text (e.g. ""OK"" or ""Not Found"")', 'Property|||Description&&&responseText|||get the response data as a string&&&responseXML|||get the response data as XML data', 'Method|||Description&&&getResponseHeader()|||Returns specific header information from the server resource&&&getAllResponseHeaders()|||Returns all the header information from the server resource']",[]
27,['AJAX XML Example'],"['AJAX XML Example', 'Example Explained', 'The XML File']","['Example', 'LoadXMLDoc()']","['https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp', 'https://www.w3schools.com/xml/ajax_php.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_xml2', 'https://www.w3schools.com/xml/cd_catalog.xml', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp', 'https://www.w3schools.com/xml/ajax_php.asp']",[],"['AJAX can be used for interactive communication with an XML file.', 'Try it Yourself »', 'The XML file used in the example above looks like this: ""cd_catalog.xml"".']","['The following example will demonstrate how a web page can fetch information from an XML file with AJAX:', 'When a user clicks on the ""Get CD info"" button above, the loadDoc() function is executed.']","['The loadDoc() function creates an XMLHttpRequest object, adds the function to be executed when the server response is ready, and sends the request off to the server.', 'When the server response is ready, an HTML table is built, nodes (elements) are extracted from the XML file, and it finally updates the element ""demo"" with the HTML table filled with XML data:']","['\n function loadDoc() {\xa0 var xhttp = new XMLHttpRequest();\xa0 \n xhttp.onreadystatechange = function() {\xa0\xa0\xa0 if (this.readyState \n == 4 && this.status == 200) {\xa0\xa0\xa0 myFunction(this);\xa0\xa0\xa0 \n }\xa0 };\xa0 xhttp.open(""GET"", ""cd_catalog.xml"", true);\xa0 \n xhttp.send();}function myFunction(xml) {\xa0 \n var i;\xa0 var xmlDoc = xml.responseXML;\xa0 var table=""<tr><th>Title</th><th>Artist</th></tr>"";\xa0 \n var x = xmlDoc.getElementsByTagName(""CD"");\xa0 for (i = 0; i <x.length; \n i++) { \xa0\xa0\xa0 table += ""<tr><td>"" +\xa0\xa0\xa0 x[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue \n +\xa0\xa0\xa0 ""</td><td>"" +\xa0\xa0\xa0 x[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue \n +\xa0\xa0\xa0 ""</td></tr>"";\xa0 }\xa0 \n document.getElementById(""demo"").innerHTML = table;}\n']",[],[]
28,['AJAX PHP Example'],"['AJAX PHP Example', 'Example Explained', 'The PHP File - ""gethint.php""']","['Example', 'Example']","['https://www.w3schools.com/xml/ajax_xmlfile.asp', 'https://www.w3schools.com/xml/ajax_asp.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_suggest_php', 'https://www.w3schools.com/xml/ajax_xmlfile.asp', 'https://www.w3schools.com/xml/ajax_asp.asp']",[],"['AJAX is used to create more interactive applications.', 'Start typing a name in the input field below:', 'The function is triggered by the onkeyup event.', 'Here is the HTML code:', 'Code explanation:', 'However, if the input field is not empty, do the following:']","['In the example above, when a user types a character in the input field, a function called ""showHint()"" is executed.', 'The PHP file checks an array of names, and returns the corresponding name(s) to the browser:']","['The following example demonstrates how a web page can communicate with a web server while a user types characters in an input field:', 'First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.']","['\n<html><head><script>function showHint(str) {\xa0\xa0\xa0 \nif (str.length == 0) { \xa0\xa0\xa0\xa0\xa0\xa0\xa0 \ndocument.getElementById(""txtHint"").innerHTML = """";\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \nreturn;\xa0\xa0\xa0 } else {\xa0\xa0\xa0 \xa0\xa0\xa0 var xmlhttp = new \nXMLHttpRequest();\xa0\xa0\xa0 \xa0\xa0\xa0 xmlhttp.onreadystatechange = function() \n{\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (this.readyState == 4 && \nthis.status == 200) {\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 document.getElementById(""txtHint"").innerHTML = \nthis.responseText;\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n}\xa0\xa0\xa0\xa0\xa0\xa0\xa0 };\xa0\xa0\xa0 \xa0\xa0\xa0 xmlhttp.open(""GET"", ""gethint.php?q="" + str, true);\xa0\xa0\xa0\xa0\xa0\xa0\xa0 xmlhttp.send();\xa0\xa0\xa0 \n}}</script></head><body><p><b>Start typing a name in the \ninput field below:</b></p><form> First name: <input type=""text"" \nonkeyup=""showHint(this.value)""></form><p>Suggestions: <span id=""txtHint""></span></p>\n</body></html>', '\n<?php\n// Array with names\n$a[] = ""Anna"";\n$a[] = ""Brittany"";\n$a[] = ""Cinderella"";\n$a[] = ""Diana"";\n$a[] = ""Eva"";\n$a[] = ""Fiona"";\n$a[] = ""Gunda"";\n$a[] = ""Hege"";\n$a[] = ""Inga"";\n$a[] = ""Johanna"";\n$a[] = ""Kitty"";\n$a[] = ""Linda"";\n$a[] = ""Nina"";\n$a[] = ""Ophelia"";\n$a[] = ""Petunia"";\n$a[] = ""Amanda"";\n$a[] = ""Raquel"";\n$a[] = ""Cindy"";\n$a[] = ""Doris"";\n$a[] = ""Eve"";\n$a[] = ""Evita"";\n$a[] = ""Sunniva"";\n$a[] = ""Tove"";\n$a[] = ""Unni"";\n$a[] = ""Violet"";\n$a[] = ""Liza"";\n$a[] = ""Elizabeth"";\n$a[] = ""Ellen"";\n$a[] = ""Wenche"";\n$a[] = ""Vicky"";\n// get the q parameter from URL$q = $_REQUEST[""q""];$hint = """";// \nlookup all hints from array if $q is different from """" if ($q !== """") \n{\xa0\xa0\xa0 $q = strtolower($q);\xa0\xa0\xa0 $len=strlen($q);\xa0\xa0\xa0 foreach($a as \n$name) {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (stristr($q, substr($name, 0, $len))) \n{\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if ($hint === """") {\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 $hint = $name;\xa0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } else \n{\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 $hint .= "", $name"";\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\xa0\xa0\xa0 }}// Output ""no suggestion"" if no hint was found \nor output correct values \necho $hint === """" ? ""no suggestion"" : $hint;?>\n']",[],"['Create an XMLHttpRequest object|||Create the function to be executed when the server response is ready|||Send the request off to a PHP file (gethint.php) on the server|||Notice that q parameter is added gethint.php?q=""+str|||The str variable holds the content of the input field|||']"
29,['AJAX ASP Example'],"['AJAX ASP Example', 'Example Explained', 'The ASP File - ""gethint.asp""']","['Example', 'Example']","['https://www.w3schools.com/xml/ajax_php.asp', 'https://www.w3schools.com/xml/ajax_database.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_suggest_asp', 'https://www.w3schools.com/xml/ajax_php.asp', 'https://www.w3schools.com/xml/ajax_database.asp']",[],"['AJAX is used to create more interactive applications.', 'Start typing a name in the input field below:', 'First name: \xa0\xa0Suggestions: ', 'The function is triggered by the onkeyup event.', 'Here is the HTML code:', 'Code explanation:', 'However, if the input field is not empty, do the following:']","['In the example above, when a user types a character in the input field, a function called ""showHint()"" is executed.', 'The ASP file checks an array of names, and returns the corresponding name(s) to the browser:']","['The following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:', 'First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.']","['\n<html><head><script>function showHint(str) {\xa0\xa0\xa0 \nif (str.length == 0) { \xa0\xa0\xa0\xa0\xa0\xa0\xa0 \ndocument.getElementById(""txtHint"").innerHTML = """";\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \nreturn;\xa0\xa0\xa0 } else {\xa0\xa0\xa0 \xa0\xa0\xa0 var xmlhttp = new \nXMLHttpRequest();\xa0\xa0\xa0 \xa0\xa0\xa0 xmlhttp.onreadystatechange = function() \n{\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (this.readyState == 4 && \nthis.status == 200) {\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 document.getElementById(""txtHint"").innerHTML = \nthis.responseText;\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n}\xa0\xa0\xa0\xa0\xa0\xa0\xa0 };\xa0\xa0\xa0 \xa0\xa0\xa0 xmlhttp.open(""GET"", ""gethint.asp?q="" + str, true);\xa0\xa0\xa0\xa0\xa0\xa0\xa0 xmlhttp.send();\xa0\xa0\xa0 \n}}</script></head><body><p><b>Start typing a name in the \ninput field below:</b></p><form> First name: <input type=""text"" \nonkeyup=""showHint(this.value)""></form><p>Suggestions: <span id=""txtHint""></span></p>\n</body></html>', '\n<%\nresponse.expires=-1\ndim a(30)\n\'Fill up array with names\na(1)=""Anna""\na(2)=""Brittany""\na(3)=""Cinderella""\na(4)=""Diana""\na(5)=""Eva""\na(6)=""Fiona""\na(7)=""Gunda""\na(8)=""Hege""\na(9)=""Inga""\na(10)=""Johanna""\na(11)=""Kitty""\na(12)=""Linda""\na(13)=""Nina""\na(14)=""Ophelia""\na(15)=""Petunia""\na(16)=""Amanda""\na(17)=""Raquel""\na(18)=""Cindy""\na(19)=""Doris""\na(20)=""Eve""\na(21)=""Evita""\na(22)=""Sunniva""\na(23)=""Tove""\na(24)=""Unni""\na(25)=""Violet""\na(26)=""Liza""\na(27)=""Elizabeth""\na(28)=""Ellen""\na(29)=""Wenche""\na(30)=""Vicky""\n\'get the q parameter from URL\nq=ucase(request.querystring(""q""))\n\'lookup all hints from array if length of q>0\nif len(q)>0 then\n  \xa0\n  hint=""""\n  \xa0\n  for i=1 to 30\n    \xa0\xa0\xa0\n    if q=ucase(mid(a(i),1,len(q))) then\n      \xa0\xa0\xa0\xa0\xa0\n      if hint="""" then\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        hint=a(i)\n      \xa0\xa0\xa0\xa0\xa0\n      else\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        hint=hint & "" , "" & a(i)\n      \xa0\xa0\xa0\xa0\xa0\n      end if\n    \xa0\xa0\xa0\n    end if\n  \xa0\n  next\nend if\n\'Output ""no suggestion"" if no hint were found\n\'or output the correct values\nif hint="""" then\n  \xa0\n  response.write(""no suggestion"")\nelse\n  \xa0\n  response.write(hint)\nend if\n%>']",[],"['Create an XMLHttpRequest object|||Create the function to be executed when the server response is ready|||Send the request off to an ASP file (gethint.asp) on the server|||Notice that q parameter is added gethint.asp?q=""+str|||The str variable holds the content of the input field|||']"
30,['AJAX Database Example'],"['AJAX Database Example', 'Example Explained - The showCustomer() Function', 'The AJAX Server Page']","['Example', 'showCustomer']","['https://www.w3schools.com/xml/ajax_asp.asp', 'https://www.w3schools.com/xml/ajax_applications.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_database', 'https://www.w3schools.com/xml/ajax_asp.asp', 'https://www.w3schools.com/xml/ajax_applications.asp']",[],"['AJAX can be used for interactive communication with a database.', 'Try it Yourself »', 'The showCustomer() function does the following:']","['The following example will demonstrate how a web page can fetch information from a database with AJAX:', 'The page on the server called by the JavaScript above is an PHP file called ""getcustomer.php"".', 'The source code in ""getcustomer.php"" runs a query against a database, and returns the result in an HTML table:']","['When a user selects a customer in the dropdown list above, a function called ""showCustomer()"" is executed. The function is triggered by the ""onchange"" event:']","['\n function showCustomer(str) {\xa0 var xhttp; \xa0 if (str == """") {\xa0\xa0\xa0 \n document.getElementById(""txtHint"").innerHTML = """";\xa0\xa0\xa0 \n return;\xa0 }\xa0 xhttp = new XMLHttpRequest();\xa0 \n xhttp.onreadystatechange = function() {\xa0\xa0\xa0 if (this.readyState \n == 4 && this.status == 200) {\xa0\xa0\xa0 document.getElementById(""txtHint"").innerHTML \n = this.responseText;\xa0\xa0\xa0 }\xa0 };\xa0 xhttp.open(""GET"", \n ""getcustomer.php?q=""+str, true);\xa0 xhttp.send();}\n', '\n  <?php$mysqli = new mysqli(""servername"", ""username"", \n  ""password"", ""dbname"");if($mysqli->connect_error) {\xa0 \n  exit(\'Could not connect\');}$sql = ""SELECT customerid, companyname, \n  contactname, address, city, postalcode, countryFROM customers WHERE \n  customerid = ?"";$stmt = $mysqli->prepare($sql);\n  $stmt->bind_param(""s"", $_GET[\'q\']);\n  $stmt->execute();$stmt->store_result();$stmt->bind_result($cid, \n  $cname, $name, $adr, $city, $pcode, $country);$stmt->fetch();$stmt->close();\necho ""<table>"";echo ""<tr>"";echo ""<th>CustomerID</th>"";echo \n  ""<td>"" . $cid . ""</td>"";echo ""<th>CompanyName</th>"";echo ""<td>"" . $cname \n  . ""</td>"";echo ""<th>ContactName</th>"";echo ""<td>"" . $name . ""</td>"";\n  echo ""<th>Address</th>"";echo ""<td>"" . \n  $adr . ""</td>"";echo ""<th>City</th>"";\n  echo ""<td>"" . $city . ""</td>"";echo ""<th>PostalCode</th>"";echo ""<td>"" . \n  $pcode . ""</td>"";echo ""<th>Country</th>"";echo ""<td>"" . $country . \n  ""</td>"";echo ""</tr>"";echo ""</table>"";?>\n']",[],['Check if a customer is selected|||Create an XMLHttpRequest object|||Create the function to be executed when the server response is ready|||Send the request off to a file on the server|||Notice that a parameter (q) is added to the URL (with the content of the dropdown list)|||']
31,['XML Applications'],"['The XML Document Used', 'Display XML Data in an HTML Table', 'Display the First CD in an HTML div Element', 'Navigate Between the CDs', 'Show Album Information When Clicking On a CD']","['Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/ajax_database.asp', 'https://www.w3schools.com/xml/ajax_examples.asp', 'https://www.w3schools.com/xml/cd_catalog.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_display_table', 'https://www.w3schools.com/xml/dom_intro.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_app_first', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_app_navigate', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_app', 'https://www.w3schools.com/xml/ajax_database.asp', 'https://www.w3schools.com/xml/ajax_examples.asp']",[],"['In this chapter we will use the XML file called ""cd_catalog.xml"".', 'For more information about using JavaScript and the XML DOM, go toDOM Intro.']","['This chapter demonstrates some HTML applications using XML, HTTP, DOM, and JavaScript.', 'This example uses a function to display the first CD element in an HTML element with id=""showCD"":', 'To navigate between the CDs, in the example above, add a next() and previous() function:', 'The last example shows how you can display album information when the user clicks on a CD:']","['This example loops through each <CD> element, and displays the values of the <ARTIST> and the <TITLE> elements in an HTML table:']","['\n<html><head><style>table, th, td {\n\xa0 border: 1px solid black;\xa0\xa0border-collapse:collapse;\n}th, td {\xa0\xa0padding: 5px;}</style>\n</head><body>\n<button type=""button"" onclick=""loadXMLDoc()"">Get my CD collection</button>\n  <br><br><table id=""demo""></table><script>function loadXMLDoc() {\xa0 \nvar xmlhttp = new XMLHttpRequest();\xa0 xmlhttp.onreadystatechange = \nfunction() {\xa0\xa0\xa0 if (this.readyState == 4 && this.status == 200) {\xa0\xa0\xa0\xa0\xa0 myFunction(this);\xa0\xa0\xa0 \n}\xa0 };\xa0 xmlhttp.open(""GET"", ""cd_catalog.xml"", true);\xa0 \nxmlhttp.send();}function myFunction(xml) {\xa0 var i;\xa0 \nvar xmlDoc = xml.responseXML;\xa0 var table=""<tr><th>Artist</th><th>Title</th></tr>"";\xa0 \nvar x = xmlDoc.getElementsByTagName(""CD"");\xa0 for (i = 0; i <x.length; \ni++) { \xa0\xa0\xa0 table += ""<tr><td>"" +\xa0\xa0\xa0 x[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue \n+\xa0\xa0\xa0 ""</td><td>"" +\xa0\xa0\xa0 x[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue \n+\xa0\xa0\xa0 ""</td></tr>"";\xa0 }\xa0 \ndocument.getElementById(""demo"").innerHTML = table;}</script>\n\n</body>\n</html>', '\n displayCD(0);function displayCD(i) {\xa0\xa0\xa0 var xmlhttp \n = new XMLHttpRequest();\xa0\xa0\xa0 xmlhttp.onreadystatechange = \n function() {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (this.readyState \n == 4 && this.status == 200) {\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n myFunction(this, i);\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\xa0\xa0\xa0 \n };\xa0\xa0\xa0 xmlhttp.open(""GET"", ""cd_catalog.xml"", true);\xa0\xa0\xa0 \n xmlhttp.send();}function myFunction(xml, i) {\xa0\xa0\xa0 \n var xmlDoc = xml.responseXML; \xa0\xa0\xa0 x = \n xmlDoc.getElementsByTagName(""CD"");\xa0\xa0\xa0 \n document.getElementById(""showCD"").innerHTML =\xa0\xa0\xa0 ""Artist: "" \n +\xa0\xa0\xa0 x[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue \n +\xa0\xa0\xa0 ""<br>Title: "" +\xa0\xa0\xa0 x[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue \n +\xa0\xa0\xa0 ""<br>Year: "" + \xa0\xa0\xa0 x[i].getElementsByTagName(""YEAR"")[0].childNodes[0].nodeValue;\n }', '\nfunction next()\n{\xa0 // display the next CD, unless you are on the last CD\n\xa0\nif (i < x.length-1) {\n\xa0\xa0\xa0 i++;\n\xa0\xa0\xa0 displayCD(i);\n\xa0 }\n}\n\nfunction previous()\n{\xa0 // display the previous CD, unless you are on the first CD \n\xa0\nif (i > 0) {\n\xa0\xa0i--;\n\xa0\xa0displayCD(i);\n\xa0\xa0}\n}\n', '\n\tfunction displayCD(i) {\xa0\xa0\xa0 document.getElementById(""showCD"").innerHTML \n\t=\xa0\xa0\xa0 ""Artist: "" +\xa0\xa0\xa0 x[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue \n\t+\xa0\xa0\xa0 ""<br>Title: "" +\xa0\xa0\xa0 x[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue \n\t+\xa0\xa0\xa0 ""<br>Year: "" + \xa0\xa0\xa0 x[i].getElementsByTagName(""YEAR"")[0].childNodes[0].nodeValue;\n\t}\n']",[],[]
32,['AJAX Examples'],['Try it Yourself - Examples'],"['Simple Examples', 'Request Header Information', 'Request XML Files', 'Retrieve Server Data with PHP and ASP', 'Retrieve Database Information', 'AJAX Applications']","['https://www.w3schools.com/xml/ajax_applications.asp', 'https://www.w3schools.com/xml/dom_intro.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_first', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_callback', 'https://www.w3schools.com/xml/ajax_intro.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_header', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_lastmodified', 'https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_xml', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_xml2', 'https://www.w3schools.com/xml/ajax_xmlfile.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_suggest_php', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_suggest_asp', 'https://www.w3schools.com/xml/ajax_php.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryajax_database', 'https://www.w3schools.com/xml/ajax_database.asp', 'https://www.w3schools.com/xml/cd_catalog.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_display_table', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_app_first', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_app_navigate', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_app', 'https://www.w3schools.com/xml/ajax_applications.asp', 'https://www.w3schools.com/xml/ajax_applications.asp', 'https://www.w3schools.com/xml/dom_intro.asp']",[],"['Examples explained', 'Retrieve all header information of a resource (file)', 'Retrieve specific header information of a resource (file)', 'Examples explained', 'Examples explained', 'Examples explained', 'Examples explained', 'Examples explained']","['A simple AJAX exampleCreate a simple XMLHttpRequest, and retrieve data from a TXT file.', 'Load an XML file with AJAXCreate an XMLHttpRequest to retrieve data from an XML file.', 'Retrieve content from a databaseHow a web page can fetch information from a database with AJAX.']","['An AJAX example with a callback functionCreate a XMLHttpRequest with a callback function, and retrieve data from a TXT file.', 'Retrieve the content of an XML fileCreate an XMLHttpRequest to retrieve data from an XML file and display the data in an HTML table.', 'Retrieve the content of a PHP fileHow a web page can communicate with a web server while a user type characters in an input field.', 'Retrieve the content of an ASP fileHow a web page can communicate with a web server while a user type characters in an input field.', 'View an XML CD catalogDisplay XML data in an HTML tableShow XML data inside an HTML div elementNavigate through XML nodesA simple CD catalog application']",[],[],[]
33,['XML DOM Tutorial'],"['What is the DOM?', 'The HTML DOM', 'The XML DOM', 'Get the Value of an XML Element', 'Loading an XML File', '\nExample Explained', 'Loading an XML String', 'Programming Interface', 'XML DOM Properties', 'XML DOM Methods']","['Header', 'XML DOM', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/ajax_examples.asp', 'https://www.w3schools.com/xml/dom_nodes.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_change_html_element2', 'https://www.w3schools.com/xml/tryit.asp?filename=tryxml_change_html_element', 'https://www.w3schools.com/xml//js/default.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmldoc', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmltext', 'https://www.w3schools.com/xml/ajax_examples.asp', 'https://www.w3schools.com/xml/dom_nodes.asp']",['https://www.w3schools.com/xml/nodetree.gif'],"['The DOM defines a standard for accessing and manipulating documents:', 'Understanding the DOM is a must for anyone working with HTML or XML.', 'All HTML elements can be accessed through the HTML DOM.', 'This example changes the value of an HTML element with id=""demo"":', 'This example changes the value of the first <h1> element in an HTML document:', 'You can learn a lot more about the HTML DOM in our JavaScript tutorial.', 'All XML elements can be accessed through the XML DOM.', 'The XML DOM is:', 'The XML file used in the examples below is books.xml.', 'Methods are often referred to as something that is done (i.e. delete ""book"").', 'These are some typical DOM properties:', 'Note: In the list above, x is a node object.', 'Note: In the list above, x is a node object.']","['In other words: The XML DOM is a standard for how to get, change, add, or delete XML elements.', 'This code retrieves the text value of the first <title> element in an XML document:', 'This example reads ""books.xml"" into xmlDoc and retrieves the text value of the first <title> element in books.xml:', 'This example loads a text string into an XML DOM object, and  extracts the info from it with JavaScript:', 'The programming interface to the DOM is defined by a set standard properties and methods.', 'Properties are often referred to as something that is (i.e. nodename is ""book"").']","['""The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.""', 'The HTML DOM defines a standard way for accessing and manipulating HTML documents. It presents an HTML document as a tree-structure.', 'The XML DOM defines a standard way for accessing and manipulating XML documents. It presents an XML document as a tree-structure.', 'Note: Even if the HTML document contains only ONE <h1> element you still have to specify the array index [0], because the getElementsByTagName() method always returns an array. ', 'The DOM models XML as a set of node objects. The nodes can be accessed with JavaScript or other programming languages. In this tutorial we use JavaScript.']","['\n<h1 id=""demo"">This is a Heading</h1><script>\ndocument.getElementById(""demo"").innerHTML = ""Hello World!"";</script>', '\n    <h1>This is a Heading</h1><h1>This is a Heading</h1><script>\n document.getElementsByTagName(""h1"")[0].innerHTML = ""Hello World!"";\n </script>', '\ntxt = xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue;\n', '\n<!DOCTYPE html>\n<html>\n<body>\n<p id=""demo""></p>\n<script>\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n\xa0\xa0\xa0 \nif (this.readyState == 4 && this.status == 200) {\n\xa0\xa0\xa0 \nmyFunction(this);\n\xa0\xa0\xa0 }\n};\nxhttp.open(""GET"", ""books.xml"", true);\nxhttp.send();\nfunction myFunction(xml) {\xa0\xa0\xa0 var xmlDoc = xml.responseXML;\n\xa0\xa0\xa0 document.getElementById(""demo"").innerHTML =\n\xa0\xa0\xa0 xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue;\n}\n</script>\n</body>\n</html>\n', '\n <html><body><p id=""demo""></p><script>var text, parser, \n xmlDoc;text = ""<bookstore><book>"" +""<title>Everyday \n Italian</title>"" +""<author>Giada De Laurentiis</author>"" +\n ""<year>2005</year>"" +""</book></bookstore>"";parser = new DOMParser();\n xmlDoc = parser.parseFromString(text,""text/xml"");\n document.getElementById(""demo"").innerHTML =xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue;\n </script></body></html>\n']",[],"['A standard object model for XML|||A standard programming interface for XML|||Platform- and language-independent|||A W3C standard|||xmlDoc - the XML DOM object created by the parser.|||getElementsByTagName(""title"")[0] - get the first <title> element|||childNodes[0] - the first child of the <title> element (the text node)|||nodeValue - the value of the node (the text itself)|||x.nodeName - the name of x|||x.nodeValue - the value of x|||x.parentNode - the parent node of x|||x.childNodes - the child nodes of x|||x.attributes - the attributes nodes of x|||x.getElementsByTagName(name) - get all elements with a specified tag name|||x.appendChild(node) - insert a child node to x|||x.removeChild(node) - remove a child node from x|||']"
34,['XML DOM Nodes'],"['DOM Example', 'Text is Always Stored in Text Nodes', 'The XML DOM Node Tree', 'Node Parents, Children, and Siblings', 'First Child - Last Child']",['Header'],"['https://www.w3schools.com/xml/dom_intro.asp', 'https://www.w3schools.com/xml/dom_nodes_access.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/dom_intro.asp', 'https://www.w3schools.com/xml/dom_nodes_access.asp']","['https://www.w3schools.com/xml/nodetree.gif', 'https://www.w3schools.com/xml/navigate.gif']","['According to the XML DOM, everything in an XML document is a node:', 'Look at the following XML file (books.xml):', 'The root node in the XML above is named <bookstore>.', 'All other nodes in the document are contained within <bookstore>.', 'The root node <bookstore> holds 4 <book> nodes.', 'A common error in DOM processing is to expect an element node to contain text. ', 'However, the text of an element node is stored in a text node.', '""2005"" is not the value of the <year> element!', 'The image above represents the XML file books.xml.', 'The nodes in the node tree have a hierarchical relationship to each other.', 'Look at the following XML fragment:']","['The first <book> node holds the child nodes: <title>, <author>, <year>, and <price>.', 'The child nodes contain one text node each, ""Everyday Italian"", ""Giada De Laurentiis"", ""2005"", and ""30.00"".', 'In this example: <year>2005</year>, the element node <year> holds a text node with the value ""2005"". ', 'The XML DOM views an XML document as a tree-structure. The tree structure is called a node-tree.', 'All nodes can be accessed through the tree. Their contents can be modified or deleted, and new elements can be created.', 'The following image illustrates a part of the node tree and the relationship between the nodes:', 'You will learn more about traversing the node tree in a later chapter of this tutorial.', 'Furthermore, the <book> element is the parent node of the <title>, <author>, <year>, and <price> elements.']","['The node tree shows the set of nodes, and the connections between them. The tree starts at the root node and branches out to the text nodes at the lowest level of the tree:', 'The terms parent, child, and sibling are used to describe the relationships. Parent nodes have children. Children on the same level are called siblings (brothers or sisters).', 'Because the XML data is structured in a tree form, it can be traversed without  knowing the exact structure of the tree and without knowing the type of data contained within. ', 'In the XML above, the <title> element is the first child of the <book> element, and the <price> element is the last child of the <book> element.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\n\xa0\n<book category=""cooking"">\n  \xa0\xa0\xa0\n  <title lang=""en"">Everyday Italian</title>\n  \xa0\xa0\xa0\n  <author>Giada De Laurentiis</author>\n  \xa0\xa0\xa0\n  <year>2005</year>\n  \xa0\xa0\xa0\n  <price>30.00</price>\n\xa0\n</book>\n\xa0\n<book category=""children"">\n  \xa0\xa0\xa0\n  <title lang=""en"">Harry Potter</title>\n  \xa0\xa0\xa0\n  <author>J K. Rowling</author>\n  \xa0\xa0\xa0\n  <year>2005</year>\n  \xa0\xa0\xa0\n  <price>29.99</price>\n\xa0\n</book>\n\xa0\n<book category=""web"">\n  \xa0\xa0\xa0\n  <title lang=""en"">XQuery Kick Start</title>\n  \xa0\xa0\xa0\n  <author>James McGovern</author>\n  \xa0\xa0\xa0\n  <author>Per Bothner</author>\n  \xa0\xa0\xa0\n  <author>Kurt Cagle</author>\n  \xa0\xa0\xa0\n  <author>James Linn</author>\n  \xa0\xa0\xa0\n  <author>Vaidyanathan Nagarajan</author>\n  \xa0\xa0\xa0\n  <year>2003</year>\n  \xa0\xa0\xa0\n  <price>49.99</price>\n\xa0\n</book>\n\xa0\n<book category=""web"" cover=""paperback"">\n  \xa0\xa0\xa0\n  <title lang=""en"">Learning XML</title>\n  \xa0\xa0\xa0\n  <author>Erik T. Ray</author>\n  \xa0\xa0\xa0\n  <year>2003</year>\n  \xa0\xa0\xa0\n  <price>39.95</price>\n\xa0\n</book>\n</bookstore>\n', '\n<bookstore>\n  \xa0\n  <book category=""cooking"">\n    \xa0\xa0\xa0\n    <title lang=""en"">Everyday Italian</title>\n    \xa0\xa0\xa0\n    <author>Giada De Laurentiis</author>\n    \xa0\xa0\xa0\n    <year>2005</year>\n    \xa0\xa0\xa0\n    <price>30.00</price>\n  \xa0\n  </book>\n</bookstore>\n']",[],"['The entire document is a document node|||Every XML element is an element node|||The text in the XML elements are text nodes|||Every attribute is an attribute node|||Comments are comment nodes|||In a node tree, the top node is called the root|||Every node, except the root, has exactly one parent node|||A node can have any number of children|||A leaf is a node with no children|||Siblings are nodes with the same parent|||']"
35,['XML DOM - Accessing Nodes'],"['Try it Yourself - Examples', 'Accessing Nodes', 'The getElementsByTagName() Method', 'DOM Node List', 'DOM Node List Length', 'Node Types', 'Traversing Nodes', 'Navigating Node Relationships']","['Header', 'Syntax', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes.asp', 'https://www.w3schools.com/xml/dom_nodes_info.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_index', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_list_loop', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_root', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loop', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_navigate', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_list_loop', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_root', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loop', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_navigate', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/dom_nodes.asp', 'https://www.w3schools.com/xml/dom_nodes_info.asp']",[],"['With the DOM, you can access every node in an XML document.', 'The examples below use the XML file books.xml.', 'You can access a node in three ways:', '1. By using the getElementsByTagName() method', '2. By looping through (traversing) the nodes tree.', '3. By navigating the node tree, using the node relationships.', 'getElementsByTagName() returns all elements with a specified tag name.', 'The following example returns all <title> elements under the x element:', 'where xmlDoc is the document itself (document node).', 'Note: The index starts at 0.', 'You will learn more about node lists in a later chapter of this tutorial.', 'The length property defines the length of a node list (the number of nodes).', 'You can loop through a node list by using the length property:', 'The documentElement property of the XML document is the root node.', 'The nodeName property of a node is the name of the node.', 'The nodeType property of a node is the type of the node.', 'Try it Yourself', 'Example explained:', 'The following code navigates the node tree using the node relationships:', 'Example explained:']","['Loop through nodes using the length propertyUse the length property to loop through all <title> elements in ""books.xml""', 'See the node type of an elementUse the nodeType property to get node type of the root element in ""books.xml"".', 'Loop through element nodesUse the nodeType property to only process element nodes in ""books.xml"".', 'The getElementsByTagName() method returns a node list. A node list is an array of nodes.', 'The <title> elements in x can be accessed by index number. To access the third <title> you can write::', 'You will learn more about the node properties in the next chapter of this tutorial.', 'The following code loops through the child nodes, that are also element nodes, of the root node:']","['Access a node using its index number in a node listUse the getElementsByTagName() method to get the third <title> element in ""books.xml""', 'Loop through element nodes using node relationshipsUse the nodeType property and the nextSibling property to process element nodes in ""books.xml"".', 'Note that the example above only returns <title> elements under the x node. To return all <title> elements in the XML document use: ']","['\nnode.getElementsByTagName(""tagname"");\n', '\nx.getElementsByTagName(""title"");\n', '\nxmlDoc.getElementsByTagName(""title"");\n', '\nx = xmlDoc.getElementsByTagName(""title"");\n', '\ny = x[2];\n', '\n var\nx = xmlDoc.getElementsByTagName(""title"");\n\nfor (i = 0; i <x.length; i++) {\n\xa0\xa0// \n    do something for each node\n\xa0\xa0}\n', '\n txt = """";x = xmlDoc.documentElement.childNodes;\n\nfor (i = 0; i <x.length; i++)\n{\n\xa0 // Process only element nodes (type 1)\n\xa0\xa0if (x[i].nodeType == 1) {\xa0\xa0\xa0 \n    txt += x[i].nodeName + ""<br>"";\n\xa0\xa0}\n    }\n', '\nx = xmlDoc.getElementsByTagName(""book"")[0];\nxlen = x.childNodes.length;\ny = x.firstChild;\ntxt = """";for (i = 0; i <xlen; i++)\n{\xa0 // Process only element nodes (type 1)\n\xa0\nif (y.nodeType == 1) {\xa0\xa0\xa0 txt += y.nodeName + ""<br>"";\n\xa0 }\n\xa0\ny = y.nextSibling;\n} ']",[],"['Suppose you have loaded ""books.xml"" into xmlDoc|||Get the child nodes of the root element (xmlDoc)|||For each child node, check the node type. If the node type is ""1"" it is an element node|||Output the name of the node if it is an element node|||Suppose you have loaded ""books.xml""into xmlDoc|||Get the child nodes of the first book element|||Set the ""y"" variable to be the first child node of the first book element|||For each child node (starting with the first child node ""y""):|||Check the node type. If the node type is ""1"" it is an element node|||Output the name of the node if it is an element node|||Set the ""y"" variable to be the next sibling node, and run through the loop again|||']"
36,['XML DOM Node Information'],"['Try it Yourself - Examples', 'Node Properties', 'The nodeName Property', 'The nodeValue Property', 'Get the Value of an Element', 'Change the Value of an Element', 'The nodeType Property']","['Header', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_access.asp', 'https://www.w3schools.com/xml/dom_nodes_nodelist.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodename3', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getelement', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_changeelement', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_root', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodename3', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getelement', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_changeelement', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_root', 'https://www.w3schools.com/xml/dom_nodes_access.asp', 'https://www.w3schools.com/xml/dom_nodes_nodelist.asp']",[],"['The examples below use the XML filebooks.xml. ', 'In the XML DOM, each node is an object.', 'Three important node properties are:', 'The nodeName property specifies the name of a node.', 'Try it Yourself.', 'The nodeValue property specifies the value of a node.', 'The following code retrieves the text node value of the first <title> element:', 'Result:\xa0 txt = ""Everyday Italian""', 'Example explained:', 'The following code changes the text node value of the first <title> element:', 'Example explained:', 'The nodeType property specifies the type of node.', 'nodeType is read only.', 'The most important node types are:', 'Try it Yourself.']","['The nodeName, nodeValue, and nodeType properties contain information about nodes.', 'Objects have methods and properties, that can be accessed and manipulated by JavaScript. ']","['Get the node name of an element nodeThis example uses the nodeName property to get the node name of the root element in ""books.xml"".', 'Get the text from a text nodeThis example uses the nodeValue property to get the text of the first <title> element in ""books.xml"".', 'Change the text in a text nodeThis example uses the nodeValue property to change the text of the first <title> element in ""books.xml"".', 'Get the node name and type of an element nodeThis example uses the nodeName and nodeType property to get node name and type of the root element in ""books.xml"".']","['\nvar x = xmlDoc.getElementsByTagName(""title"")[0].childNodes[0];\nvar txt = x.nodeValue;\n', '\n var\nx = xmlDoc.getElementsByTagName(""title"")[0].childNodes[0];\nx.nodeValue = ""Easy Cooking"";\n']",['Node type|||NodeType&&&Element|||1&&&Attribute|||2&&&Text|||3&&&Comment|||8&&&Document|||9'],"['nodeName|||nodeValue|||nodeType|||nodeName is read-only|||nodeName of an element node is the same as the tag name|||nodeName of an attribute |||node is the attribute name|||nodeName of a text node is always #text|||nodeName of the document node is always #document|||nodeValue for element nodes is undefined|||nodeValue for text nodes is the text itself|||nodeValue for attribute nodes is the attribute value |||&&&Suppose you have loaded ""books.xml"" into xmlDoc  |||Get text node of the first <title> element node|||Set the txt variable to be the value of the text node|||Suppose you have loaded ""books.xml"" into xmlDoc  |||Get text node of the first <title> element node|||Change the value of the text node to ""Easy Cooking""|||']"
37,['XML DOM Node List'],"['Try it Yourself - Examples', 'DOM Node List', 'Node List Length', 'DOM Attribute List (Named Node Map)']","['Header', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_info.asp', 'https://www.w3schools.com/xml/dom_nodes_traverse.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodelist', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodelist_length', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_attributes', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodelist', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodelist_length', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_attributes', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/dom_nodes_info.asp', 'https://www.w3schools.com/xml/dom_nodes_traverse.asp']",['https://www.w3schools.com/xml/nodelist.gif'],"['The examples below use the XML filebooks.xml. ', 'A node list object represents a list of nodes, in the same order as in the XML.', 'Nodes in the node list are accessed with index numbers starting from 0.', 'Suppose ""books.xml"" is loaded into the variable xmlDoc.', 'This code fragment returns a node list of title elements in ""books.xml"":', 'After the execution of the statement above, x is a node list object.', 'After the execution of the statement above, txt = ""Everyday Italian"".', 'The length property of a node list is the number of nodes in the list.', 'This code fragment returns the number of <title> elements in ""books.xml"":', 'After the execution of the statement above, the value of x will be 4.', 'Example explained:', 'The attributes property of an element node returns a list of attribute nodes.', 'Example explained:']","['A list of nodes is returned by the getElementsByTagName() method and the childNodes property.', 'When using properties or methods like childNodes or getElementsByTagName(), a node list object is returned.', 'The following image represents a node list of the <title> elements in ""books.xml"":', 'The following code fragment returns the text from the first <title> element in the node list (x):', 'A node list object keeps itself up-to-date. If an element is deleted or added, the list is automatically updated.', 'The length of the node list can be used to loop through all the elements in the list.', 'This code fragment uses the length property to loop through the list of <title> elements:', 'This is called a named node map, and is similar to a node list, except for some differences in methods and properties.', 'An attribute list keeps itself up-to-date. If an attribute is deleted or added, the list is automatically updated.', 'This code fragment returns a list of attribute nodes from the first <book> element in ""books.xml"":', 'This code fragment gets the value of the ""category"" attribute, and the number of attributes, of a book:']","['Get the text from the first <title> elementThis example uses the getElementsByTagName() method to get the text from the first <title> element in ""books.xml"".', 'Loop through nodes using the length propertyThis example uses node list and the length property to loop through all <title> elements in ""books.xml""', 'Get the attribute of an elementThis example uses a attribute list to get attribute from the first <book> element in ""books.xml"".', 'After the execution of the code above, x.length = is the number of attributes and x.getNamedItem() can be used to return an attribute node.']","['\nx = xmlDoc.getElementsByTagName(""title"");\n', '\nvar txt = x[0].childNodes[0].nodeValue;\n', ""\nx = xmlDoc.getElementsByTagName('title').length;\n"", '\nx = xmlDoc.getElementsByTagName(\'title\');\nxLen = x.length;\n\nfor (i = 0; i <xLen; i++) {\n\xa0\xa0\xa0 txt += x[i].childNodes[0].nodeValue) + "" "";\n}\n', '\nEveryday Italian\nHarry Potter\nXQuery Kick Start\nLearning XML\n', ""\n x = xmlDoc.getElementsByTagName('book')[0].attributes;\n"", '\n x = xmlDoc.getElementsByTagName(""book"")[0].attributes;\n\n    txt = x.getNamedItem(""category"").nodeValue + "" "" + x.length;\n', '\ncooking\n1\n']",[],"['Suppose ""books.xml"" is loaded into xmlDoc  |||Set the x variable to hold a node list of all title elements|||Collect the text node values from <title> elements|||Suppose ""books.xml"" is loaded into xmlDoc  |||Set the x variable to hold a list of all attributes of the first <book> element|||Get the value of the ""category"" attribute and the length of the attribute list|||']"
38,['XML DOM Traverse Node Tree'],"['Traversing the Node Tree', 'Browser Differences in DOM Parsing', 'DOM - White Spaces and New Lines', 'PCDATA - Parsed Character Data', 'CDATA - (Unparsed) Character Data']","['Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_nodelist.asp', 'https://www.w3schools.com/xml/dom_nodes_navigate.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_parsertest3', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodetype_ievsmozilla', 'https://www.w3schools.com/xml/dom_nodes_nodelist.asp', 'https://www.w3schools.com/xml/dom_nodes_navigate.asp']",[],"['Traversing means looping through or traveling across the node tree.', 'This is called ""Traversing the node tree""', 'Example explained:', 'All modern browsers support the W3C DOM specification.', 'XML parsers normally parse all the text in an XML document.', 'When an XML element is parsed, the text between the XML tags is also parsed:', 'and the parser will break it up into sub-elements like this:', 'Characters like ""<"" and ""&"" are illegal in XML elements.', 'Everything inside a CDATA section is ignored by the parser.', 'A CDATA section starts with ""<![CDATA["" and ends with ""]]>"":', 'Notes on CDATA sections:']","['Often you want to loop an XML document, for example: when you want to extract the value of each element.', 'The example below loops through all child nodes of <book>, and displays their names and values:', 'However, there are some differences between browsers. One important difference is:', 'Internet Explorer 9 and earlier do NOT treat empty white-spaces, or new lines as text nodes, while other browsers do.', 'Parsed Character Data (PCDATA) is a term used about text data that will be parsed by the XML parser. ', 'The term CDATA is used about text data that should not be parsed by the XML parser. ', '""<"" will generate an error because the parser interprets it as the start of a new element.', '""&"" will generate an error because the parser interprets it as the start of an character entity.', 'In the example above, everything inside the CDATA section is ignored by the parser.', 'A CDATA section cannot contain the string ""]]>"". Nested CDATA sections are not allowed.', 'The ""]]>"" that marks the end of the CDATA section cannot contain spaces or line breaks. ']","['XML often contains new line, or white space characters, between nodes. This is often the case when the document is edited by a simple editor like Notepad. ', 'The following example (edited by Notepad) contains CR/LF (new line) between each line and two spaces in front of each child node: ', 'The following example will output the number of child nodes the root element (of books.xml) has. IE9 and earlier will output 4 child nodes, while IE10 and later versions, and other browsers will output 9 child nodes:', 'The parser does this because XML elements can contain other elements, as in this example,where the <name> element contains two other elements (first and last):', 'Some text, like JavaScript code, contains a lot of ""<"" or ""&"" characters.To avoid errors script code can be defined as CDATA.']","['\n <!DOCTYPE html><html><body><p id=""demo""></p><script>\n var x, i ,xmlDoc;var txt = """";var text = ""<book>"" + \n ""<title>Everyday Italian</title>"" +""<author>Giada De Laurentiis</author>"" +\n ""<year>2005</year>"" +""</book>"";parser = new DOMParser();xmlDoc \n = parser.parseFromString(text,""text/xml"");// documentElement always \n represents the root nodex = xmlDoc.documentElement.childNodes;for (i = \n 0; i < x.length ;i++) {\xa0\xa0\xa0 txt += x[i].nodeName + "": "" + \n x[i].childNodes[0].nodeValue + ""<br>"";}\n document.getElementById(""demo"").innerHTML = txt;</script></body>\n </html>\n', '\ntitle: Everyday Italian\nauthor: Giada De Laurentiis\nyear: 2005\n', '\n<book>\n  \xa0\n  <title>Everyday Italian</title>\n  \xa0\n  <author>Giada De Laurentiis</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>30.00</price>\n</book>\n', '\n function myFunction(xml) {    var xmlDoc = xml.responseXML;\xa0\xa0\xa0 x = \n    xmlDoc.documentElement.childNodes;\xa0\xa0\xa0 \n    document.getElementById(""demo"").innerHTML = \xa0\xa0\xa0 ""Number \n    of child nodes: "" + x.length;}\n', '\n<message>This text is also parsed</message>', '\n<name><first>Bill</first><last>Gates</last></name>', '\n<name>\n   \xa0\n   <first>Bill</first>\n   \xa0\n   <last>Gates</last>\n</name>', '\n<script>\n<![CDATA[\nfunction matchwo(a,b)\n{\n\xa0\xa0\xa0\nif (a < b && a < 0) \n   {\n   \xa0\xa0\xa0\xa0\xa0\xa0\xa0 return 1;\n   \xa0\xa0\xa0 } else\n   {\n   \xa0\xa0\xa0\xa0\xa0\xa0\xa0 return 0;\n   \xa0\xa0\xa0 }\n}\n]]>\n</script>']",[],"['The way they handle white-spaces and new lines|||&&&Load the XML string into xmlDoc|||Get the child nodes of the root element|||For each child node, output the node name and the node value of the text node|||']"
39,['XML DOM - Navigating Nodes'],"['Navigating DOM Nodes', 'DOM - Parent Node', 'Avoid Empty Text Nodes', 'Get the First Child Element', 'More Examples']","['Header', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_traverse.asp', 'https://www.w3schools.com/xml/dom_nodes_get.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_parentnode', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_firstchild', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_lastchild', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_nextsibling', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_prevsibling', 'https://www.w3schools.com/xml/dom_nodes_traverse.asp', 'https://www.w3schools.com/xml/dom_nodes_get.asp']",['https://www.w3schools.com/xml/navigate.gif'],"['Nodes can be navigated using node relationships.', 'In the XML DOM, node relationships are defined as properties to the nodes:', 'Example explained:', 'Code explained:', 'The following code displays the first element node of the first <book>:', 'Example explained:']","['Accessing nodes in the node tree via the relationship between nodes, is often called ""navigating nodes"". ', 'The following image illustrates a part of the node tree and the relationship between nodes in books.xml:', 'All nodes have exactly one parent node. The following code navigates to the parent node of <book>: ', 'Firefox, and some other browsers, will treat empty white-spaces or new lines as text nodes, Internet Explorer will not.', 'This causes a problem when using the properties: firstChild, lastChild, nextSibling, previousSibling. ', 'The function above allows you to use get_nextSibling(node) instead of the property node.nextSibling.', 'lastChild()This example uses the lastChild() method and a custom function to get the last child node of a node', 'nextSibling()This example uses the nextSibling() method and a custom function to get the next sibling node of a node']","['To avoid navigating to empty text nodes (spaces and new-line characters between element nodes), we use a function that checks the node type:', 'Element nodes are type 1. If the sibling node is not an element node, it moves to the next nodes until an element node is found. This way, the result will be the same in both Internet Explorer and Firefox.', 'previousSibling()This example uses the previousSibling() method and a custom function to get the previous sibling node of a node']","['\n function myFunction(xml) {    var xmlDoc = xml.responseXML;\xa0\xa0\xa0 var x = xmlDoc.getElementsByTagName(""book"")[0];\xa0\xa0\xa0 \n    document.getElementById(""demo"").innerHTML = x.parentNode.nodeName;}\n', '\nfunction get_nextSibling(n)\n{\n\xa0\xa0\xa0\n var y = n.nextSibling;\n\xa0\xa0\xa0\nwhile (y.nodeType! = 1)\n  {\n  \xa0\xa0\xa0\xa0\xa0\n  \xa0\n  y = y.nextSibling;\n  \xa0\xa0\xa0 }\n\xa0\xa0\xa0\nreturn y;\n}\n', '\n <!DOCTYPE html><html><body><p id=""demo""></p><script>\n var xhttp = new XMLHttpRequest();xhttp.onreadystatechange = function() {\xa0\xa0\xa0 if (this.readyState == 4 && this.status == 200) {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 myFunction(this);\xa0\xa0\xa0 }};xhttp.open(""GET"", \n ""books.xml"", true);xhttp.send();function myFunction(xml) {\xa0\xa0\xa0 \n var xmlDoc = xml.responseXML;\xa0\xa0\xa0 \n var x = get_firstChild(xmlDoc.getElementsByTagName(""book"")[0]);\xa0\xa0\xa0 \n document.getElementById(""demo"").innerHTML = x.nodeName;}//check if \n the first node is an element nodefunction get_firstChild(n) {\xa0\xa0\xa0 \n var y = n.firstChild;\xa0\xa0\xa0 while (y.nodeType != 1) {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n y = y.nextSibling;\xa0\xa0\xa0 }\xa0\xa0\xa0 return y;}\n </script></body></html>\n', '\ntitle\n']",[],"['parentNode|||childNodes|||firstChild|||lastChild|||nextSibling|||previousSibling|||&&&Load ""books.xml"" into xmlDoc  |||Get the first <book> element|||Output the node name of the parent node of ""x""|||Load ""books.xml"" into xmlDoc  |||Use the get_firstChild function on the first <book> element node to get the first child node that is an element node|||Output the node name of first child node that is an element node|||']"
40,['XML DOM Get Node Values'],"['Get the Value of an Element', 'The getElementsByTagName Method', 'The ChildNodes Property', 'The nodeValue Property', 'Complete Example', 'Get the Value of an Attribute', 'Get an Attribute Value - getAttribute()', 'Get an Attribute Value - getAttributeNode()']","['Header', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_navigate.asp', 'https://www.w3schools.com/xml/dom_nodes_set.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getelementsbytagname', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getelementsbytagname1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getattribute', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getattribute1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getattributenode', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getattributenode2', 'https://www.w3schools.com/xml/dom_nodes_navigate.asp', 'https://www.w3schools.com/xml/dom_nodes_set.asp']",[],"['The nodeValue property is used to get the text value of a node.', 'The getAttribute() method returns the value of an attribute.', 'In the DOM, everything is a node. Element nodes do not have a text value.', 'Suppose ""books.xml"" has been loaded into xmlDoc.', 'This code retrieves the first <title> element:', ""The childNodes property returns a list of an element's child nodes."", 'The following code retrieves the text node of the first <title> element:', 'The nodeValue property returns the text value of a text node.', 'Result in z: ""Everyday Italian""', 'Loop through all <title> elements:Try it Yourself', 'The way to get the value of an attribute, is to get its text value.', ""The getAttribute() method returns an attribute's value."", 'Result in txt: ""en""', 'The getAttributeNode() method returns an attribute node.', 'Result in txt = ""en""']","['The text value of an element node is stored in a child node. This node is called a text node.', ""To retrieve the text value of an element, you must retrieve the value of the elements' text node."", 'The following code retrieves the text value of the text node of the first <title> element:', 'In the DOM, attributes are nodes. Unlike element nodes, attribute nodes have text values.', 'This can be done using the getAttribute() method or using the nodeValue property of the attribute node.', 'The following code retrieves the text value of the ""lang"" attribute of the first <title> element:', 'Loop through all <book> elements and get their ""category"" attributes:Try it yourself', 'The following code retrieves the text value of the ""lang"" attribute of the first <title> element:', 'Loop through all <book> elements and get their ""category"" attributes:Try it Yourself']","['The getElementsByTagName() method returns a node list of all elements, with the specified tag name, in the same order as they appear in the source document.']","['\n  var x = xmlDoc.getElementsByTagName(""title"")[0];\n', '\nx = xmlDoc.getElementsByTagName(""title"")[0];\ny = x.childNodes[0];\n', '\nx = xmlDoc.getElementsByTagName(""title"")[0];\ny = x.childNodes[0];\nz = y.nodeValue;\n', '\n<!DOCTYPE html>\n<html>\n<body>\n<p id=""demo""></p>\n<script>\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n\xa0\xa0\xa0\nif (this.readyState == 4 && this.status == 200) {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 myFunction(this);\xa0\xa0\xa0 \n }};xhttp.open(""GET"", \n ""books.xml"", true);xhttp.send();function myFunction(xml) {\xa0\xa0\xa0 \n var xmlDoc = xml.responseXML;\xa0\xa0\xa0 \n var x = xmlDoc.getElementsByTagName(\'title\')[0];\xa0\xa0\xa0 var y = \n x.childNodes[0];\xa0\xa0\xa0 \n document.getElementById(""demo"").innerHTML = y.nodeValue; }</script>\n</body></html>\n', '\n  x = xmlDoc.getElementsByTagName(""title"")[0];txt = x.getAttribute(""lang"");\n', '\nx = xmlDoc.getElementsByTagName(""title"")[0];y = x.getAttributeNode(""lang"");\ntxt = y.nodeValue;\n']",[],[]
41,['XML DOM Change Node Values'],"['Try it Yourself - Examples', 'Change the Value of an Element', 'Change the Value of a Text Node', 'Change the Value of an Attribute', 'Change an Attribute Using setAttribute()', 'Change an Attribute Using nodeValue']","['Header', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_get.asp', 'https://www.w3schools.com/xml/dom_nodes_remove.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_change_nodevalue', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_setattribute1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_att_nodevalue', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_change_nodevalue', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_change_nodevalue2', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_setattribute1', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_setattribute2', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_att_nodevalue', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/dom_nodes_get.asp', 'https://www.w3schools.com/xml/dom_nodes_remove.asp']",[],"['The nodeValue property is used to change a node value.', 'The setAttribute() method is used to change an attribute value.', 'The examples below use the XML file books.xml. ', 'In the DOM, everything is a node. Element nodes do not have a text value.', 'The nodeValue property can be used to change the value of a text node. ', 'Suppose ""books.xml"" has been loaded into xmlDoc.', 'This code changes the text node value of the first <title> element:', 'Example explained:', 'Loop through and change the text node of all <title> elements:Try it yourself', 'The way to change the value of an attribute, is to change its text value.', 'The setAttribute() method changes the value of an attribute.', 'If the attribute does not exist, a new attribute is created.', 'This code changes the category attribute of the <book> element:', 'Example explained:', 'Loop through all <title> elements and add a new attribute:Try it yourself', 'The nodeValue property is the value of a attribute node.', 'Changing the value property changes the value of the attribute.', 'Example explained:']","['The text value of an element node is stored in a child node. This node is called a text node.', ""To change the text value of an element, you must change the value of the elements's text node."", 'In the DOM, attributes are nodes. Unlike element nodes, attribute nodes have text values.', 'This can be done using the setAttribute() method or setting the nodeValue property of the attribute node.', 'Note: If the attribute does not exist, a new attribute is created (with the name and value specified).']","['Change an element\'s text nodeThis example uses the nodeValue property to change the text node of the first <title> element in ""books.xml"".', 'Change an attribute\'s value using setAttributeThis example uses the setAttribute() method to change the value of the ""category"" attribute of the first <book>.', 'Change an attribute\'s value using nodeValueThis example use the nodeValue property to change the value of the ""category"" attribute of the first <book>.']","['\n xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue = ""new \n content""\n', '\n  xmlDoc.getElementsByTagName(""book"")[0].setAttribute(""category"",""food"");\n', '\n  xmlDoc.getElementsByTagName(""book"")[0].getAttributeNode(""category"").nodeValue = ""food"";\n']",[],"['Suppose ""books.xml"" is loaded into xmlDoc  |||Get the first child node of the <title> element|||Change the node value to ""new content""|||Suppose ""books.xml"" is loaded into xmlDoc  |||Get the first <book> element|||Change the ""category"" attribute value to ""food""|||Suppose ""books.xml"" is loaded into xmlDoc  |||Get the ""category"" attribute of the first <book> element|||Change the attribute node value to ""food""|||']"
42,['XML DOM Remove Nodes'],"['Try it Yourself - Examples', 'Remove an Element Node', 'Remove Myself - Remove the Current Node', 'Remove a Text Node', 'Clear a Text Node', 'Remove an Attribute Node by Name', 'Remove Attribute Nodes by Object']","['Header', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_set.asp', 'https://www.w3schools.com/xml/dom_nodes_replace.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removechild', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removecurrent', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removetextnode', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_remove_nodevalue', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removeattribute', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removeattributenode', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removechild', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removecurrent', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removetextnode', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_remove_nodevalue', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removeattribute', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removeattribute2', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removeattributenode', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/dom_nodes_set.asp', 'https://www.w3schools.com/xml/dom_nodes_replace.asp']",[],"['The removeChild() method removes a specified node.', 'The removeAttribute() method removes a specified attribute.', 'The examples use the XML file books.xml. ', 'The removeChild() method removes a specified node.', 'When a node is removed, all its child nodes are also removed.', 'This code will remove the first <book> element from the loaded xml:', 'Example explained:', 'The removeChild() method is the only way to remove a specified node.', 'Example explained:', 'The removeChild() method can also be used to remove a text node:', 'Example explained:', 'The nodeValue property can be used to change the value of a text node:', 'Example explained:', 'The removeAttribute() method removes an attribute node by its name.', ""Example: removeAttribute('category')"", 'This code removes the ""category"" attribute in the first <book> element:', 'Example explained:', 'Example: removeAttributeNode(x)', 'This code removes all the attributes of all <book> elements:', 'Example explained:']","['Remove an element nodeThis example uses removeChild() to remove the first <book> element.', 'Remove the current element nodeThis example uses parentNode and removeChild() to remove the current <book> element.', 'Remove a text nodeThis example uses removeChild() to remove the text node from the first <title> element.', 'Remove attributes by objectThis example uses removeAttributeNode() to remove all attributes from all <book> elements.', 'Loop through and remove the ""category"" attribute of all <book> elements:Try it yourself', 'The removeAttributeNode() method removes an attribute node, using the node object as parameter.']","['Clear the text of a text nodeThis example uses the nodeValue() property to clear the text node of the first <title> element.', 'Remove an attribute by nameThis example uses removeAttribute() to remove the ""category"" attribute from the first <book> element.', 'When you have navigated to the node you want to remove, it is possible to remove that node using the parentNode property and the removeChild() method:', 'It is not very common to use removeChild() just to remove the text from a node. The nodeValue property can be used instead. See next paragraph.']","['\ny = xmlDoc.getElementsByTagName(""book"")[0];\n\nxmlDoc.documentElement.removeChild(y);\n', '\nx = xmlDoc.getElementsByTagName(""book"")[0];\n\nx.parentNode.removeChild(x);\n', '\nx = xmlDoc.getElementsByTagName(""title"")[0];\ny = x.childNodes[0];\nx.removeChild(y);\n', '\n xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue = """";\n', '\nx = xmlDoc.getElementsByTagName(""book"");\nx[0].removeAttribute(""category"");\n', '\nx = xmlDoc.getElementsByTagName(""book"");\n\nfor (i = 0; i < x.length; i++)\n{\n\xa0\xa0\xa0\nwhile (x[i].attributes.length > 0) {\n\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0attnode = x[i].attributes[0];\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 old_att = x[i].removeAttributeNode(attnode);\n\xa0\xa0\xa0 }\n}\n']",[],"['Suppose ""books.xml"" is loaded |||  into xmlDoc  |||Set the variable y to be the element node to remove|||Remove the element node by using the removeChild() method from the parent node|||Suppose ""books.xml"" is loaded into xmlDoc  |||Set the variable y to be the element node to remove|||Remove the element node by using the parentNode property and the removeChild() method|||Suppose ""books.xml"" is loaded into xmlDoc  |||Set the variable x to be the first title element node|||Set the variable y to be the text node to remove|||Remove the element node by using the removeChild() method from the parent node|||Suppose ""books.xml"" is loaded into xmlDoc  |||Get the first title element\'s first child node.|||Use the nodeValue property to clear the text from the text node|||Suppose ""books.xml"" is loaded into xmlDoc  |||Use getElementsByTagName() to get book nodes|||Remove the ""category"" attribute form the first book element node|||Suppose ""books.xml"" is loaded into xmlDoc  |||Use getElementsByTagName() to get all book nodes|||For each book element check if there are any attributes|||While there are attributes in a book element, remove the attribute|||']"
43,['XML DOM Replace Nodes'],"['Try it Yourself - Examples', 'Replace an Element Node', 'Replace Data In a Text Node', 'Use the nodeValue Property Instead']","['Header', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_remove.asp', 'https://www.w3schools.com/xml/dom_nodes_create.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_replacechild', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_replacedata2', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_replacechild', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_replacedata', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_replacedata2', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/dom_nodes_set.asp', 'https://www.w3schools.com/xml/dom_nodes_remove.asp', 'https://www.w3schools.com/xml/dom_nodes_create.asp']",[],"['The replaceChild() method replaces a specified node.', 'The nodeValue property replaces text in a text node.', 'The examples below use the XML file books.xml. ', 'The replaceChild() method is used to replace a node.', 'The following code fragment replaces the first <book> element:', 'Example explained:', 'The replaceData() method is used to replace data in a text node.', 'The replaceData() method has three parameters:', 'Example explained:', 'It is easier to replace the data in a text node using the nodeValue property.', 'Example explained:', 'You can read more about changing node values in the Change Node chapter.']","['Replace an element nodeThis example uses replaceChild() to replace the first <book> node.', 'Replace data in a text nodeThis example uses the nodeValue property to replace data in a text node.', 'The following code fragment will replace the text node value in the first <title> element with ""Easy Italian"":']",[],"['\nxmlDoc=loadXMLDoc(""books.xml"");\n\nx=xmlDoc.documentElement;\n\n//create a book element, title element and a text node\nnewNode=xmlDoc.createElement(""book"");\nnewTitle=xmlDoc.createElement(""title"");\nnewText=xmlDoc.createTextNode(""A Notebook"");\n\n//add the text node to the title node,\nnewTitle.appendChild(newText);\n//add the title node to the book node\nnewNode.appendChild(newTitle);\n\ny=xmlDoc.getElementsByTagName(""book"")[0]\n//replace the first book node with the new node\nx.replaceChild(newNode,y);\n', '\nxmlDoc=loadXMLDoc(""books.xml"");\n\nx=xmlDoc.getElementsByTagName(""title"")[0].childNodes[0];\n\nx.replaceData(0,8,""Easy"");\n', '\nxmlDoc=loadXMLDoc(""books.xml"");\n\nx=xmlDoc.getElementsByTagName(""title"")[0].childNodes[0];\n\nx.nodeValue=""Easy Italian"";\n']",[],"['offset - Where to begin replacing characters. Offset value starts at zero|||length - How many characters to replace|||string - The string to insert|||&&&Load ""books.xml"" into xmlDoc  |||Create a new element node <book>|||Create a new element node <title>|||Create a new text node with the text ""A Notebook""|||Append the new text node to the new element node <title>|||Append the new element node <title> to the new element node <book>|||Replace the first <book> element node with the new <book> element node|||Load ""books.xml"" into xmlDoc  |||Get the text node of the first <title> element nodeUse the replaceData method to replace the eight first characters from the text node with ""Easy""|||Load ""books.xml"" into xmlDoc |||Get the text node of the first <title> element nodeUse the nodeValue property to change the text of the text node|||']"
44,['XML DOM Create Nodes'],"['Try it Yourself - Examples', 'Create a New Element Node', 'Create a New Attribute Node', 'Create an Attribute Using setAttribute()', 'Create a Text Node', 'Create a CDATA Section Node', 'Create a Comment Node']","['Header', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_replace.asp', 'https://www.w3schools.com/xml/dom_nodes_add.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute3', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcdatasection1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcomment1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement2', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute2', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute3', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute4', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement1', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcdatasection1', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcdatasection', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcomment1', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcomment', 'https://www.w3schools.com/xml/dom_nodes_replace.asp', 'https://www.w3schools.com/xml/dom_nodes_add.asp']",[],"['The examples below use the XML file books.xml. ', 'The createElement() method creates a new element node:', 'Example explained:', 'Loop through and add an element to all <book> elements:Try it yourself', 'The createAttribute() is used to create a new attribute node:', 'Example explained:', 'Loop through all <title> elements and add a new attribute node:Try it yourself', 'If the attribute already exists, it is replaced by the new one.', 'Example explained:', 'Loop through all <title> elements and add a new attribute:Try it yourself', 'The createTextNode() method creates a new text node:', 'Example explained:', 'Add an element node, with a text node, to all <book> elements:Try it yourself', 'The createCDATASection() method creates a new CDATA section node.', 'Example explained:', 'Loop through, and add a CDATA section, to all <book> elements:Try it yourself', 'The createComment() method creates a new comment node.', 'Example explained:', 'Loop through, and add a comment node, to all <book> elements:Try it yourself']",['Create an attribute node using setAttribute This example uses setAttribute() to create a new attribute for an element.'],"['Create an element nodeThis example uses createElement() to create a new element node, and appendChild() to add it to a node.', 'Create an attribute node using createAttribute This example uses createAttribute() to create a new attribute node, and setAttributeNode() to insert it to an element.', 'Create a text nodeThis example uses createTextNode() to create a new text node, and appendChild() to add it to an element.', 'Create a CDATA section nodeThis example uses createCDATAsection() to create a CDATA section node, and appendChild() to add it to an element.', 'Create a comment nodeThis example uses createComment() to create a comment node, and appendChild() to add it to an element.', 'Since the setAttribute() method creates a new attribute if the attribute does not exist, it can be used to create a new attribute.']","['\nnewElement = xmlDoc.createElement(""edition"");\n\n xmlDoc.getElementsByTagName(""book"")[0].appendChild(newElement);\n', '\nnewAtt = xmlDoc.createAttribute(""edition"");\nnewAtt.nodeValue = ""first"";\n\n xmlDoc.getElementsByTagName(""title"")[0].setAttributeNode(newAtt);\n', '\n  xmlDoc.getElementsByTagName(\'book\')[0].setAttribute(""edition"",""first"");\n', '\nnewEle = xmlDoc.createElement(""edition"");\nnewText = xmlDoc.createTextNode(""first"");\nnewEle.appendChild(newText);\n\n xmlDoc.getElementsByTagName(""book"")[0].appendChild(newEle);\n', '\nnewCDATA = xmlDoc.createCDATASection(""Special Offer & Book Sale"");\n\n xmlDoc.getElementsByTagName(""book"")[0].appendChild(newCDATA);\n', '\nnewComment = xmlDoc.createComment(""Revised March 2015"");\n\n xmlDoc.getElementsByTagName(""book"")[0].appendChild(newComment);\n']",[],"['Suppose ""books.xml"" is loaded into xmlDoc |||Create a new element node <edition>|||Append the element node to the first <book> element|||Suppose ""books.xml"" is loaded into xmlDoc|||Create a new attribute node ""edition""|||Set the value of the attribute node to ""first""|||Add the new attribute node to the first <title> element|||Suppose ""books.xml"" is loaded into xmlDoc |||Set the attribute ""edition"" value to ""first"" for the first <book> element|||Suppose ""books.xml"" is loaded into xmlDoc |||Create a new element node <edition>|||Create a new text node with the text ""first""|||Append the new text node to the element node|||Append the new element node to the first <book> element|||Suppose ""books.xml"" is loaded into xmlDoc |||Create a new CDATA section node|||Append the new CDATA node to the first <book> element|||Suppose ""books.xml"" is loaded into xmlDoc using |||Create a new comment node|||Append the new comment node to the first <book> element|||']"
45,['XML DOM Add Nodes'],"['Try it Yourself - Examples', 'Add a Node - appendChild()', 'Insert a Node - insertBefore()', 'Add a New Attribute', 'Add Text to a Text Node - insertData()']","['Header', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/dom_nodes_create.asp', 'https://www.w3schools.com/xml/dom_nodes_clone.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement2', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_insertbefore', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute3', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_insertdata', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement2', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_insertbefore', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute3', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_insertdata', 'https://www.w3schools.com/xml/dom_nodes_create.asp', 'https://www.w3schools.com/xml/dom_nodes_clone.asp']",[],"['The examples below use the XML file books.xml. ', 'The appendChild() method adds a child node to an existing node. ', 'The new node is added (appended) after any existing child nodes.', 'Note: Use insertBefore() if the position of the node is important.', 'Example explained:', 'Example explained:', 'The insertBefore() method inserts a node before a specified child node.', 'This method is useful when the position of the added node is important:', 'Example explained:', 'The setAttribute() method sets the value of an attribute.', 'Example explained:', 'The insertData() method inserts data into an existing text node.', 'The insertData() method has two parameters:']","['Add a node after the last child nodeThis example uses appendChild() to add a child node to an existing node.', 'Add a new attributeThis example uses the setAttribute() method to add a new attribute.', 'Add data to a text nodeThis example uses insertData() to insert data into an existing text node.', 'This code fragment creates an element (<edition>), and adds it after the last child of the first <book> element:', 'This code fragment does the same as above, but the new element is added with a value:', 'If the second parameter of insertBefore() is null, the new node will be added after the last existing child node.', 'x.insertBefore(newNode,null) and x.appendChild(newNode) will both append a new child node to x.', 'Note: If the attribute already exists, the setAttribute() method will overwrite the existing value.', 'The following code fragment will add ""Easy"" to the text node of the first <title> element of the loaded XML:']","['Add a node before a specified child nodeThis example uses insertBefore() to insert a node before a specified child node.', 'There is no method called add Attribute()The setAttribute() will create a new attribute if the attribute does not exist.']","['\nnewEle = xmlDoc.createElement(""edition"");\n\n xmlDoc.getElementsByTagName(""book"")[0].appendChild(newEle);\n', '\nnewEle = xmlDoc.createElement(""edition"");\n newText=xmlDoc.createTextNode(""first"");newEle.appendChild(newText);\n\n xmlDoc.getElementsByTagName(""book"")[0].appendChild(newEle);\n', '\nnewNode = xmlDoc.createElement(""book"");\n\nx = xmlDoc.documentElement;\ny = xmlDoc.getElementsByTagName(""book"")[3];\n\nx.insertBefore(newNode,y);\n', '\n  xmlDoc.getElementsByTagName(\'book\')[0].setAttribute(""edition"",""first"");\n', '\n xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].insertData(0,""Easy "");\n']",[],"['offset - Where to begin inserting characters (starts at zero)|||string - The string to insert|||&&&Suppose ""books.xml"" is loaded into xmlDoc |||Create a new node <edition>|||Append the node to the first <book> element|||Suppose ""books.xml"" is loaded into xmlDoc |||Create a new node <edition>|||Create a new text node ""first""|||Append the text node to the <edition> node|||Append the <addition> node to the <book> element|||Suppose ""books.xml"" is loaded into xmlDoc|||Create a new element node <book>|||Insert the new node in front of the last <book> element node|||Suppose ""books.xml"" has been loaded into xmlDoc|||Set the value of the attribute ""edition"" to ""first"" for the first <book> element|||']"
46,['XML DOM Clone Nodes'],"['Try it Yourself - Examples', 'Copy a Node']","['Header', 'Example']","['https://www.w3schools.com/xml/dom_nodes_add.asp', 'https://www.w3schools.com/xml/dom_examples.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_clonenode', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_clonenode', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/dom_nodes_add.asp', 'https://www.w3schools.com/xml/dom_examples.asp']",[],"['The examples below use the XML file books.xml. ', 'The cloneNode() method creates a copy of a specified node.', 'Example explained:']",['The following code fragment copies the first <book> node and appends it to the root node of the document:'],"['Copy a node and append it to an existing nodeThis example uses cloneNode() to copy a node and append it to the root node of the XML document', 'The cloneNode() method has a parameter (true or false). This parameter indicates if the cloned node should include all attributes and child nodes of the original node.']","[""\noldNode = xmlDoc.getElementsByTagName('book')[0];\nnewNode = oldNode.cloneNode(true);\nxmlDoc.documentElement.appendChild(newNode);\n"", '\nEveryday Italian\nHarry Potter\nXQuery Kick Start\nLearning XML\nEveryday Italian\n']",[],"['Suppose ""books.xml"" is loaded into xmlDoc |||Get the node to copy (oldNode)|||Clone the node into ""newNode""|||Append the new node to the root node of the XML document|||']"
47,['XML DOM Examples'],['Try it Yourself - Examples'],['Header'],"['https://www.w3schools.com/xml/dom_nodes_clone.asp', 'https://www.w3schools.com/xml/xpath_intro.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_first', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_header', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_lastmodified', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_suggest', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_database', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_xml', 'https://www.w3schools.com/xml/dom_httprequest.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmldoc', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmldoc2', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmltext', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loadxmltext2', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_index', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_list_loop', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_root', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_loop', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_navigate', 'https://www.w3schools.com/xml/dom_nodes_access.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodename3', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getelement', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_changeelement', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_root', 'https://www.w3schools.com/xml/dom_nodes_info.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodelist', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodelist_length', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_attributes', 'https://www.w3schools.com/xml/dom_nodes_nodelist.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_parsertest3', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodetype_ievsmozilla', 'https://www.w3schools.com/xml/dom_nodes_traverse.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_parentnode', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_firstchild', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_lastchild', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_nextsibling', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nav_prevsibling', 'https://www.w3schools.com/xml/dom_nodes_navigate.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getelementsbytagname', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_getattribute', 'https://www.w3schools.com/xml/dom_nodes_get.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_change_nodevalue', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_setattribute1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_att_nodevalue', 'https://www.w3schools.com/xml/dom_nodes_set.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removechild', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removecurrent', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removetextnode', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_remove_nodevalue', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removeattribute', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_removeattributenode', 'https://www.w3schools.com/xml/dom_nodes_remove.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_replacechild', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_replacedata2', 'https://www.w3schools.com/xml/dom_nodes_replace.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute3', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcdatasection1', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcomment1', 'https://www.w3schools.com/xml/dom_nodes_create.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createelement2', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_insertbefore', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createattribute3', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_insertdata', 'https://www.w3schools.com/xml/dom_nodes_add.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_clonenode', 'https://www.w3schools.com/xml/dom_nodes_clone.asp', 'https://www.w3schools.com/xml/dom_nodes_clone.asp', 'https://www.w3schools.com/xml/xpath_intro.asp']",[],"['XML DOM The XMLHttpRequest Object', 'Examples explained', ' XML DOM Loading XML', ' XML DOM Accessing Nodes', 'Examples explained', ' XML DOM Node Information', 'Examples explained', ' XML DOM Node List and Attribute List', 'Examples explained', ' XML DOM Traversing Node Tree', 'Traverse a node treeDisplay the length of a node list', 'Examples explained', ' XML DOM Navigating Nodes', 'Examples explained', 'XML DOM Get Node Values', ""Get an element's text valueGet an attribute's text value"", 'Examples explained', 'XML DOM Change Node Values', 'Examples explained', 'XML DOM Remove Nodes', 'Examples explained', 'XML DOM Replace Nodes', 'Replace an element nodeReplace data in a text node', 'Examples explained', 'XML DOM Create Nodes', 'Examples explained', 'XML DOM Add Nodes', 'Examples explained', 'XML DOM Clone Nodes', 'Copy a node and append it to an existing node', 'Examples explained']","['A simple XMLHttpRequest exampleCreate a simple XMLHttpRequest, and retrieve data from a TXT file.', 'Retrieve header information with getAllResponseHeaders()Retrieve header information of a resource (file).', 'Retrieve specific header information with getResponseHeader()Retrieve specific header information of a resource (file).', 'Retrieve content from a databaseHow a web page can fetch information from a database with the XMLHttpRequest object.', 'Load and parse an XML fileLoad and parse an XML file (II)Load and XML stringLoad and parse an XML string (II)', 'Get the text from the first <title> elementLoop through nodes using the length propertyGet the attribute of an element', 'Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValue', 'Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text node']","['Retrieve the content of an ASP fileHow a web page can communicate with a web server while a user type characters in an input field.', 'Retrieve the content of an XML fileCreate an XMLHttpRequest to retrieve data from an XML file and display the data in an HTML table.', ""The examples below use the XML file books.xml.Load and parse an XML fileLoad and parse an XML file (II)Load and XML stringLoad and parse an XML string (II) XML DOM Accessing NodesThe examples below use the XML file books.xml.Access a node using its index number in a node listLoop through nodes using the length propertySee the node type of an elementLoop through element nodesLoop through element nodes using node relationshipsExamples explained XML DOM Node InformationThe examples below use the XML file books.xml.Get the node name of an element nodeGet the text from a text nodeChange the text in a text nodeGet the node name and type of an element nodeExamples explained XML DOM Node List and Attribute ListThe examples below use the XML file books.xml.Get the text from the first <title> elementLoop through nodes using the length propertyGet the attribute of an elementExamples explained XML DOM Traversing Node TreeThe examples below use the XML file books.xml.Traverse a node treeDisplay the length of a node listExamples explained XML DOM Navigating NodesThe examples below use the XML file books.xml.Get the parent of a nodeGet the first child element of a nodeGet the last child element of a nodeGet the next sibling element of a nodeGet the previous sibling element of a nodeExamples explainedXML DOM Get Node ValuesThe examples below use the XML file books.xml.Get an element's text valueGet an attribute's text valueExamples explainedXML DOM Change Node ValuesThe examples below use the XML file books.xml.Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValueExamples explainedXML DOM Remove NodesThe examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯"", ""The examples below use the XML file books.xml.Access a node using its index number in a node listLoop through nodes using the length propertySee the node type of an elementLoop through element nodesLoop through element nodes using node relationshipsExamples explained XML DOM Node InformationThe examples below use the XML file books.xml.Get the node name of an element nodeGet the text from a text nodeChange the text in a text nodeGet the node name and type of an element nodeExamples explained XML DOM Node List and Attribute ListThe examples below use the XML file books.xml.Get the text from the first <title> elementLoop through nodes using the length propertyGet the attribute of an elementExamples explained XML DOM Traversing Node TreeThe examples below use the XML file books.xml.Traverse a node treeDisplay the length of a node listExamples explained XML DOM Navigating NodesThe examples below use the XML file books.xml.Get the parent of a nodeGet the first child element of a nodeGet the last child element of a nodeGet the next sibling element of a nodeGet the previous sibling element of a nodeExamples explainedXML DOM Get Node ValuesThe examples below use the XML file books.xml.Get an element's text valueGet an attribute's text valueExamples explainedXML DOM Change Node ValuesThe examples below use the XML file books.xml.Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValueExamples explainedXML DOM Remove NodesThe examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯"", 'Access a node using its index number in a node listLoop through nodes using the length propertySee the node type of an elementLoop through element nodesLoop through element nodes using node relationships', ""The examples below use the XML file books.xml.Get the node name of an element nodeGet the text from a text nodeChange the text in a text nodeGet the node name and type of an element nodeExamples explained XML DOM Node List and Attribute ListThe examples below use the XML file books.xml.Get the text from the first <title> elementLoop through nodes using the length propertyGet the attribute of an elementExamples explained XML DOM Traversing Node TreeThe examples below use the XML file books.xml.Traverse a node treeDisplay the length of a node listExamples explained XML DOM Navigating NodesThe examples below use the XML file books.xml.Get the parent of a nodeGet the first child element of a nodeGet the last child element of a nodeGet the next sibling element of a nodeGet the previous sibling element of a nodeExamples explainedXML DOM Get Node ValuesThe examples below use the XML file books.xml.Get an element's text valueGet an attribute's text valueExamples explainedXML DOM Change Node ValuesThe examples below use the XML file books.xml.Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValueExamples explainedXML DOM Remove NodesThe examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯"", 'Get the node name of an element nodeGet the text from a text nodeChange the text in a text nodeGet the node name and type of an element node', ""The examples below use the XML file books.xml.Get the text from the first <title> elementLoop through nodes using the length propertyGet the attribute of an elementExamples explained XML DOM Traversing Node TreeThe examples below use the XML file books.xml.Traverse a node treeDisplay the length of a node listExamples explained XML DOM Navigating NodesThe examples below use the XML file books.xml.Get the parent of a nodeGet the first child element of a nodeGet the last child element of a nodeGet the next sibling element of a nodeGet the previous sibling element of a nodeExamples explainedXML DOM Get Node ValuesThe examples below use the XML file books.xml.Get an element's text valueGet an attribute's text valueExamples explainedXML DOM Change Node ValuesThe examples below use the XML file books.xml.Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValueExamples explainedXML DOM Remove NodesThe examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯"", ""The examples below use the XML file books.xml.Traverse a node treeDisplay the length of a node listExamples explained XML DOM Navigating NodesThe examples below use the XML file books.xml.Get the parent of a nodeGet the first child element of a nodeGet the last child element of a nodeGet the next sibling element of a nodeGet the previous sibling element of a nodeExamples explainedXML DOM Get Node ValuesThe examples below use the XML file books.xml.Get an element's text valueGet an attribute's text valueExamples explainedXML DOM Change Node ValuesThe examples below use the XML file books.xml.Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValueExamples explainedXML DOM Remove NodesThe examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯"", ""The examples below use the XML file books.xml.Get the parent of a nodeGet the first child element of a nodeGet the last child element of a nodeGet the next sibling element of a nodeGet the previous sibling element of a nodeExamples explainedXML DOM Get Node ValuesThe examples below use the XML file books.xml.Get an element's text valueGet an attribute's text valueExamples explainedXML DOM Change Node ValuesThe examples below use the XML file books.xml.Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValueExamples explainedXML DOM Remove NodesThe examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯"", 'Get the parent of a nodeGet the first child element of a nodeGet the last child element of a nodeGet the next sibling element of a nodeGet the previous sibling element of a node', ""The examples below use the XML file books.xml.Get an element's text valueGet an attribute's text valueExamples explainedXML DOM Change Node ValuesThe examples below use the XML file books.xml.Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValueExamples explainedXML DOM Remove NodesThe examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯"", 'The examples below use the XML file books.xml.Change an elements text nodeChange an attributes value using setAttributeChange an attributes value using nodeValueExamples explainedXML DOM Remove NodesThe examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯', 'The examples below use the XML file books.xml.Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by objectExamples explainedXML DOM Replace NodesThe examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯', 'Remove an element nodeRemove the current element nodeRemove a text nodeClear the text of a text nodeRemove an attribute by nameRemove attributes by object', 'The examples below use the XML file books.xml.Replace an element nodeReplace data in a text nodeExamples explainedXML DOM Create NodesThe examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯', 'The examples below use the XML file books.xml.Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment nodeExamples explainedXML DOM Add NodesThe examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯', 'Create an element nodeCreate an attribute node using createAttributeCreate an attribute node using setAttribute Create a text nodeCreate a CDATA section nodeCreate a comment node', 'The examples below use the XML file books.xml.Add a node after the last child nodeAdd a node before a specified child nodeAdd a new attributeAdd data to a text nodeExamples explainedXML DOM Clone NodesThe examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯', 'The examples below use the XML file books.xml.Copy a node and append it to an existing nodeExamples explained❮ PreviousNext ❯']",[],[],[]
48,['XPath Tutorial'],"['What is XPath?', 'XPath Path Expressions', 'XPath Standard Functions', 'XPath is Used in XSLT', 'XPath is a W3C Recommendation']",[],"['https://www.w3schools.com/xml/dom_examples.asp', 'https://www.w3schools.com/xml/xpath_nodes.asp', 'https://www.w3schools.com/xml/dom_examples.asp', 'https://www.w3schools.com/xml/xpath_nodes.asp']","['https://www.w3schools.com/xml/pic_xpath.gif', 'https://www.w3schools.com/xml/img_xpath_folders.jpg']","['XPath is a major element in the XSLT standard.', 'XPath uses path expressions to select nodes or node-sets in an XML document.', 'XPath includes over 200 built-in functions.', 'XPath is a major element in the XSLT standard.', 'XPath 1.0 became a W3C Recommendation on November 16, 1999.', 'XPath 2.0 became a W3C Recommendation on January 23, 2007.', 'XPath 3.0 became a W3C Recommendation on April 8, 2014.']","['XPath can be used to navigate through elements and attributes in an XML document.', 'These path expressions look very much like the path expressions you use with  traditional computer file systems:', 'With XPath knowledge you will be able to take great advantage of your XSLT knowledge.']","['There are functions for string values, numeric values, booleans, date and time comparison, node manipulation, sequence manipulation, and much more.', 'Today XPath expressions can also be used in JavaScript, Java, XML Schema, PHP, Python, C and C++, and lots of other languages.']",[],"['|||||||||||||||XPath stands for XML Path Language|||XPath uses ""path like"" syntax to identify and navigate nodes in an XML document|||XPath contains over 200 built-in functions|||XPath is a major element in the XSLT standard|||XPath is a W3C recommendation||||||']","['XPath stands for XML Path Language|||XPath uses ""path like"" syntax to identify and navigate nodes in an XML document|||XPath contains over 200 built-in functions|||XPath is a major element in the XSLT standard|||XPath is a W3C recommendation|||']"
49,['XPath Nodes'],"['XPath Terminology', 'Relationship of Nodes']","['Nodes', 'Atomic values', 'Items', 'Parent', 'Children', 'Siblings', 'Ancestors', 'Descendants']","['https://www.w3schools.com/xml/xpath_intro.asp', 'https://www.w3schools.com/xml/xpath_syntax.asp', 'https://www.w3schools.com/xml/xpath_intro.asp', 'https://www.w3schools.com/xml/xpath_syntax.asp']",[],"['Look at the following XML document:', 'Example of nodes in the XML document above:', 'Atomic values are nodes with no children or parent.', 'Example of atomic values:', 'Items are atomic values or nodes.', 'Each element and attribute has one parent.', 'Element nodes may have zero, one or more children.', 'Nodes that have the same parent.', ""A node's parent, parent's parent, etc."", ""A node's children, children's children, etc.""]","['XML documents are treated as trees of nodes. The topmost element of the tree is called the root element.', 'In the following example; the book element is the parent of the title, author, year, and price:', 'In the following example; the title, author, year, and price elements are all children of the book element:', 'In the following example; the title, author, year, and price elements are all siblings:', 'In the following example; the ancestors of the title element are the book element and the bookstore element:', 'In the following example; descendants of the bookstore element are the book, title, author, year, and price elements:']","['In XPath, there are seven kinds of nodes: element, attribute, text, namespace, processing-instruction, comment, and document nodes.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\xa0\n<book>\n\xa0\xa0\xa0 <title lang=""en"">Harry Potter</title>\n\xa0\xa0\xa0 <author>J K. Rowling</author>\n\xa0\n\xa0\n<year>2005</year>\n\xa0\xa0\xa0 <price>29.99</price>\n\xa0\n</book></bookstore>\n', '\n<bookstore>  (root element node)\n<author>J K. Rowling</author>  (element node)\nlang=""en"" (attribute node)\n', '\nJ K. Rowling\n""en""\n', '\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n', '\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n', '\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n', '\n<bookstore>\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n</bookstore>\n', '\n<bookstore>\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n</bookstore>\n']",[],[]
50,['XPath Syntax'],"['The XML Example Document', 'Selecting Nodes', 'Predicates', 'Selecting Unknown Nodes', 'Selecting Several Paths']",[],"['https://www.w3schools.com/xml/xpath_nodes.asp', 'https://www.w3schools.com/xml/xpath_axes.asp', 'https://www.w3schools.com/xml/xpath_nodes.asp', 'https://www.w3schools.com/xml/xpath_axes.asp']",[],"['We will use the following XML document in the examples below.', 'Predicates are always embedded in square brackets.', 'XPath wildcards can be used to select unknown XML nodes.', 'By using the | operator in an XPath expression you can select several paths.']","['In the table below we have listed some path expressions and the result of the expressions:', 'Note: If the path starts with a slash ( / ) it always represents an absolute path to an element!', 'Predicates are used to find a specific node or a node that contains a specific value.', 'In the table below we have listed some path expressions with predicates and the result of the expressions:', 'In the table below we have listed some path expressions and the result of the expressions:', 'In the table below we have listed some path expressions and the result of the expressions:']","['XPath uses path expressions to select nodes or node-sets in an XML document. The node is selected by following a path or steps.', 'XPath uses path expressions to select nodes in an XML document. The node is selected by following a path or steps. The most useful path expressions are listed below:', 'Note: In IE 5,6,7,8,9 first node is[0], but according to W3C, it is [1]. To solve this problem in IE, set the SelectionLanguage to XPath:']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\n<book>\n\xa0\n<title lang=""en"">Harry Potter</title>\n\xa0\n<price>29.99</price>\n</book>\n<book>\n\xa0\n<title lang=""en"">Learning XML</title>\n\xa0\n<price>39.95</price>\n</book>\n</bookstore>\n']","['Expression|||Description&&&nodename|||Selects all nodes with the name ""nodename""&&&/|||Selects from the root node&&&//|||Selects nodes in the document from the current node that match the selection no matter where they are &&&.|||Selects the current node&&&..|||Selects the parent of the current node&&&@|||Selects attributes', 'Path Expression|||Result&&&bookstore|||Selects all nodes with the name ""bookstore""&&&/bookstore|||Selects the root element bookstoreNote: If the path starts with a slash ( / ) it always represents an absolute |||path to an element!&&&bookstore/book|||Selects all book elements that are children of bookstore&&&//book|||Selects all book elements no matter where they are in the document&&&bookstore//book|||Selects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element&&&//@lang|||Selects all attributes that are named lang', 'Path Expression|||Result&&&/bookstore/book[1] |||Selects the first book element that is the child of the bookstore element.||| Note: In IE 5,6,7,8,9 first node is[0], but according to W3C, it is [1]. To solve this problem in IE, set the SelectionLanguage to XPath:|||In JavaScript: xml.setProperty(""SelectionLanguage"",""XPath"");&&&/bookstore/book[last()]|||Selects the last book element that is the child of the bookstore element&&&/bookstore/book[last()-1]|||Selects the last but one book element that is the child of the bookstore element&&&/bookstore/book[position()<3]|||Selects the first two book elements that are children of the bookstore element&&&//title[@lang]|||Selects all the title elements that have an attribute named lang&&&//title[@lang=\'en\']|||Selects all the title elements that have a ""lang"" attribute  with a value of ""en""&&&/bookstore/book[price>35.00]|||Selects all the book elements of the bookstore element that have a price element with a value greater than 35.00&&&/bookstore/book[price>35.00]/title|||Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00', 'Wildcard|||Description&&&*|||Matches any element node&&&@*|||Matches any attribute node&&&node()|||Matches any node of any kind', 'Path Expression|||Result&&&/bookstore/*|||Selects all the child element nodes of the bookstore element&&&//*|||Selects all elements in the document&&&//title[@*]|||Selects all title elements which have at least one attribute of any kind', 'Path Expression|||Result&&&//book/title | //book/price|||Selects all the title AND price elements of all book elements&&&//title | //price|||Selects all the title AND price elements in the document&&&/bookstore/book/title | //price|||Selects all the title elements of the book element of the bookstore element AND all the price elements in the document']",[]
51,['XPath Axes'],"['The XML Example Document', 'XPath Axes', 'Location Path Expression']",['Examples'],"['https://www.w3schools.com/xml/xpath_syntax.asp', 'https://www.w3schools.com/xml/xpath_operators.asp', 'https://www.w3schools.com/xml/xpath_syntax.asp', 'https://www.w3schools.com/xml/xpath_operators.asp']",[],"['We will use the following XML document in the examples below.', 'A location path can be absolute or relative.', 'Each step is evaluated against the nodes in the current node-set.', 'A step consists of:', 'The syntax for a location step is:']",[],"['An axis represents a relationship to the context (current) node, and is used to locate nodes relative to that node on the tree.', 'An absolute location path starts with a slash ( / ) and a relative location path does not. In both cases the location path consists of one or more steps, each separated by a slash:']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\n<book>\n  \xa0\n  <title lang=""en"">Harry Potter</title>\n  \xa0\n  <price>29.99</price>\n</book>\n<book>\n  \xa0\n  <title lang=""en"">Learning XML</title>\n  \xa0\n  <price>39.95</price>\n</book>\n</bookstore>\n', '\nAn absolute location path:\n/step/step/...\nA relative location path:\nstep/step/...\n\n', '\naxisname::nodetest[predicate]\n']","['AxisName|||Result&&&ancestor|||Selects all ancestors (parent, grandparent, etc.) of the current node&&&ancestor-or-self|||Selects all ancestors (parent, grandparent, etc.) of the current node and the current node itself&&&attribute|||Selects all attributes of the current node&&&child|||Selects all children of the current node&&&descendant|||Selects all descendants (children, grandchildren, etc.) of the current node&&&descendant-or-self|||Selects all descendants (children, grandchildren, etc.) of the current node and the current node itself&&&following|||Selects everything in the document after the closing tag of the current node&&&following-sibling|||Selects all siblings after the current node&&&namespace|||Selects all namespace nodes of the current node&&&parent|||Selects the parent of the current node&&&preceding|||Selects all nodes that appear before the current node in the document, except ancestors, attribute nodes and namespace nodes&&&preceding-sibling|||Selects all siblings before the current node&&&self|||Selects the current node', 'Example|||Result&&&child::book|||Selects all book nodes that are children of the current node&&&attribute::lang|||Selects the lang attribute of the current node&&&child::*|||Selects all element children of the current node&&&attribute::*|||Selects all attributes of the current node&&&child::text()|||Selects all text node children of the current node&&&child::node()|||Selects all children of the current node&&&descendant::book|||Selects all book descendants of the current node&&&ancestor::book|||Selects all book ancestors of the current node&&&ancestor-or-self::book|||Selects all book ancestors of the current node - and the current as well if it is a book node&&&child::*/child::price|||Selects all price grandchildren of the current node']",['an axis (defines the tree-relationship between the selected nodes and the current node)|||a node-test (identifies a node within an axis)|||zero or more predicates (to further refine the selected node-set)|||']
52,['XPath Operators'],['XPath Operators'],[],"['https://www.w3schools.com/xml/xpath_axes.asp', 'https://www.w3schools.com/xml/xpath_examples.asp', 'https://www.w3schools.com/xml/xpath_axes.asp', 'https://www.w3schools.com/xml/xpath_examples.asp']",[],['Below is a list of the operators that can be used in XPath expressions:'],"['An XPath expression returns either a node-set, a string, a Boolean, or a number.']",[],[],['Operator|||Description|||Example&&&||||Computes two node-sets|||//book | //cd&&&+|||Addition|||6 + 4&&&-|||Subtraction|||6 - 4&&&*|||Multiplication|||6 * 4&&&div|||Division|||8 div 4&&&=|||Equal|||price=9.80&&&!=|||Not equal|||price!=9.80&&&<|||Less than|||price<9.80&&&<=|||Less than or equal to|||price<=9.80&&&>|||Greater than|||price>9.80&&&>=|||Greater than or equal to|||price>=9.80&&&or|||or|||price=9.80 or price=9.70&&&and|||and |||price>9.00 and price<9.90&&&mod|||Modulus (division remainder)|||5 mod 2'],[]
53,['XPath Examples'],"['The XML Example Document', 'Loading the XML Document', 'Selecting Nodes', 'Select all the titles', 'Select the title of the first book', 'Select all the  prices', 'Select price nodes with price>35', 'Select title nodes with price>35']","['Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/xpath_operators.asp', 'https://www.w3schools.com/xml/xsl_intro.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=try_xpath_select_cdnodes', 'https://www.w3schools.com/xml/tryit.asp?filename=try_xpath_select_cdnodes_first', 'https://www.w3schools.com/xml/tryit.asp?filename=try_xpath_select_pricenodes_text', 'https://www.w3schools.com/xml/tryit.asp?filename=try_xpath_select_pricenodes_35', 'https://www.w3schools.com/xml/tryit.asp?filename=try_xpath_select_pricenodes_high', 'https://www.w3schools.com/xml/xpath_operators.asp', 'https://www.w3schools.com/xml/xsl_intro.asp']",[],"[""Let's try to learn some basic XPath syntax by looking at some examples."", 'We will use the following XML document in the examples below.', '""books.xml"":', 'View the ""books.xml"" file in your browser.', 'Code for older browsers (IE5 and IE6) can be found in the AJAX tutorial.', 'Internet Explorer uses the selectNodes() method to select node:', 'The following example selects all the title nodes:', 'The following example selects the text from all the price nodes:', 'The following example selects all the price nodes with a price higher than 35:', 'The following example selects all the title nodes\xa0with a price higher than 35:']","['Using an XMLHttpRequest object to load XML documents is supported in all modern browsers.', 'Unfortunately, there are different ways of dealing with XPath in different browsers.', 'Chrome, Firefox, Edge, Opera, and Safari use the evaluate() method to select nodes:', 'In our examples we have included code that should work with most major browsers.', 'The following example selects the title of the first book node under the bookstore element:']",[],"['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\n<book category=""cooking"">\n\xa0\n<title lang=""en"">Everyday Italian</title>\n\xa0\n<author>Giada De Laurentiis</author>\n\xa0\n<year>2005</year>\n\xa0\n<price>30.00</price>\n</book>\n<book category=""children"">\n\xa0\n<title lang=""en"">Harry Potter</title>\n\xa0\n<author>J K. Rowling</author>\n\xa0\n<year>2005</year>\n\xa0\n<price>29.99</price>\n</book>\n<book category=""web"">\n\xa0\n<title lang=""en"">XQuery Kick Start</title>\n\xa0\n<author>James McGovern</author>\n\xa0\n<author>Per Bothner</author>\n\xa0\n<author>Kurt Cagle</author>\n\xa0\n<author>James Linn</author>\n\xa0\n<author>Vaidyanathan Nagarajan</author>\n\xa0\n<year>2003</year>\n\xa0\n<price>49.99</price>\n</book>\n<book category=""web"">\n\xa0\n<title lang=""en"">Learning XML</title>\n\xa0\n<author>Erik T. Ray</author>\n\xa0\n<year>2003</year>\n\xa0\n<price>39.95</price>\n</book>\n</bookstore>\n', '\nvar xmlhttp = new XMLHttpRequest();\n', '\nxmlDoc.evaluate(xpath, xmlDoc, null, XPathResult.ANY_TYPE,null);\n', '\nxmlDoc.selectNodes(xpath);\n', '\n/bookstore/book/title\n', '\n/bookstore/book[1]/title\n', '\n/bookstore/book/price[text()]\n', '\n/bookstore/book[price>35]/price\n', '\n/bookstore/book[price>35]/title\n']",[],[]
54,['XSLT Introduction'],"['Online XSLT Editor', 'What You Should Already Know', 'XSLT References']",['XSLT Example'],"['https://www.w3schools.com/xml/xpath_examples.asp', 'https://www.w3schools.com/xml/xsl_languages.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog', 'https://www.w3schools.com/xml//default.asp', 'https://www.w3schools.com/xml/xsl_elementref.asp', 'https://www.w3schools.com/xml/xsl_functions.asp', 'https://www.w3schools.com/xml/xpath_examples.asp', 'https://www.w3schools.com/xml/xsl_languages.asp']",[],"['XSL (eXtensible Stylesheet Language) is a styling language for XML.', 'XSLT stands for XSL Transformations.', 'Click on the ""Try it Yourself"" button to see how it works.', 'Before you continue you should have a basic understanding of the following:', 'If you want to study these subjects first, find the tutorials on ourHome page.', 'XSLT Elements', 'XSLT, XPath, and XQuery Functions']","['With our online editor, you can edit XML and XSLT code, and click on a button to view the result.', 'Description of all the XSLT elements from the W3C Recommendation, and information about browser support.']","['This tutorial will teach you how to use XSLT to transform XML documents into other formats (like transforming XML into HTML).', 'XSLT 2.0, XPath 2.0, and XQuery 1.0, share the same functions library. There are over 100 built-in functions.There are functions for string values, numeric values, date and time comparison, node and QName manipulation, sequence manipulation, and more.']","['\n<?xml version=""1.0""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n\xa0\n<html>\n\xa0\n<body>\n\xa0\xa0\xa0\n<h2>My CD Collection</h2>\n\xa0\xa0\xa0\n<table border=""1"">\n\xa0\xa0\xa0\xa0\xa0\n<tr bgcolor=""#9acd32"">\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n<th>Title</th>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n<th>Artist</th>\n\xa0\xa0\xa0\xa0\xa0\n</tr>\n\xa0\xa0\xa0\xa0\xa0\n<xsl:for-each select=""catalog/cd"">\n\xa0\n\xa0\xa0\xa0\xa0\xa0\n<tr>\n\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\n<td><xsl:value-of select=""title""/></td>\n\xa0\xa0\xa0\xa0\xa0 \xa0\xa0\xa0\n<td><xsl:value-of select=""artist""/></td>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </tr>\n\xa0\xa0\xa0\xa0\xa0\n</xsl:for-each>\n\xa0\xa0\xa0\n</table>\n\xa0\n</body>\n\xa0\n</html>\n</xsl:template>\n</xsl:stylesheet>\n']",[],['HTML|||XML|||']
55,['XSL(T) Languages'],"['It Started with XSL', 'CSS = Style Sheets for HTML', 'XSL = Style Sheets for XML', 'XSL - More Than a Style Sheet Language', 'What is XSLT?', 'XSLT = XSL Transformations', 'XSLT Uses XPath', 'How Does it Work?', 'XSLT Browser Support', 'XSLT is a W3C Recommendation']",[],"['https://www.w3schools.com/xml/xsl_intro.asp', 'https://www.w3schools.com/xml/xsl_transformation.asp', 'https://www.w3schools.com/xml/xpath_intro.asp', 'https://www.w3.org/TR/xslt/all/', 'https://www.w3schools.com/xml/xsl_intro.asp', 'https://www.w3schools.com/xml/xsl_transformation.asp']",[],"['XSLT is a language for transforming XML documents.', 'XPath is a language for navigating in XML documents.', 'XQuery is a language for querying XML documents.', 'XSL stands for EXtensible Stylesheet Language.', 'CSS is used to add styles to HTML elements.\xa0', 'So, XSL describes how the XML elements should be displayed.', 'XSL consists of four parts:', 'XSLT is the most important part of XSL.', 'If you want to study XPath first, please read our XPath Tutorial.', 'All major browsers support XSLT and XPath.', 'XSLT became a W3C Recommendation 16. November 1999.']","['HTML uses predefined tags. The meaning of, and how to display each tag is wellunderstood.', 'XML does not use predefined tags, and therefore the meaning of each tag is not well understood.']","['The World Wide Web Consortium (W3C) started to develop XSL because there was a need for an XML-based Stylesheet Language. ', 'A<table> element could indicate an HTML table, a piece of furniture, or something else - and browsers do not know how todisplay it!', 'With the CSS3 Paged Media Module, W3C has delivered a new standard for document formatting. So, since 2013, CSS3 is proposed as an XSL-FO replacement.', 'XSLT is used to transform an XML document into another XML document, or anothertype of document that is recognized by a browser, like HTML andXHTML. Normally XSLT does this by transforming each XML element into an (X)HTMLelement.', 'With XSLT you can add/remove elements and attributes to or from the output file. You can also rearrange and sort elements, perform tests and make decisionsabout which elements to hide and display, and a lot more.', 'A common way to describe the transformation process is to say that XSLT transforms an XML source-tree into an XML result-tree.', 'XSLT uses XPath to find information in an XML document. XPath is used to navigate through elements and attributes in XML documents.', 'In the transformation process, XSLT uses XPath to define parts of the sourcedocument that should match one or more predefined templates. When a match is found,XSLT will transform the matching part of the source document into the resultdocument.']",[],[],['XSLT - a language for transforming XML documents|||XPath - a language for navigating in XML documents|||XSL-FO - a language for formatting XML documents (discontinued in 2013)|||XQuery - a language for querying XML documents |||XSLT stands for XSL Transformations|||XSLT is the most important part of XSL|||XSLT transforms an XML document into another XML document|||XSLT uses XPath to navigate in XML documents|||XSLT is a W3C Recommendation|||']
56,['XSLT - Transformation'],"['Correct Style Sheet Declaration', 'Start with a Raw XML Document', 'Create an XSL Style Sheet', 'Link the XSL Style Sheet to the XML Document']",[],"['https://www.w3schools.com/xml/xsl_languages.asp', 'https://www.w3schools.com/xml/xsl_templates.asp', 'https://www.w3schools.com/xml/cdcatalog.xml', 'https://www.w3schools.com/xml/cdcatalog.xsl', 'https://www.w3schools.com/xml/cdcatalog_with_xsl.xml', 'https://www.w3schools.com/xml/xsl_languages.asp', 'https://www.w3schools.com/xml/xsl_templates.asp']",[],"['Example study: How to transform XML into XHTML using XSLT?', 'The details of this example will be explained in the next chapter.', 'We want to transform the following XML document (""cdcatalog.xml"") into XHTML:', 'View ""cdcatalog.xml""', 'View ""cdcatalog.xsl""', 'Add the XSL style sheet reference to your XML document (""cdcatalog.xml""):', ' View the result', 'The details of the example above will be explained in the next chapters.']","['The root element that declares the document to be an XSL style sheet is <xsl:stylesheet> or <xsl:transform>.', 'Note: <xsl:stylesheet> and <xsl:transform> are completely synonymous and either can be used!', 'The correct way to declare an XSL style sheet according to the W3C XSLT Recommendation is:', 'Then you create an XSL Style Sheet (""cdcatalog.xsl"") with a transformation template: ', 'If you have an XSLT compliant browser it will nicely transform your XML into XHTML.']","['To get access to the XSLT elements, attributes and features we must declare the XSLT namespace at the top of the document.', 'The xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" points to the official W3C XSLT namespace. If you use this namespace, you must also include the attribute version=""1.0"".', 'Viewing XML Files in IE, Chrome, Firefox, Safari, and Opera: Open the XML file (click on the link below) - The XML document will be displayed with color-coded root and child elements (except in Safari). Often, there is a plus (+) or minus sign (-) to the left of the elements that can be clicked to expand or collapse the element structure. Tip: To view the raw XML source, right-click in XML file and select ""View Source""!']","['\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n', '\n<xsl:transform version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<catalog>\n  \xa0\n  <cd>\n    \xa0\xa0\xa0\n    <title>Empire Burlesque</title>\n    \xa0\xa0\xa0\n    <artist>Bob Dylan</artist>\n    \xa0\xa0\xa0\n    <country>USA</country>\n    \xa0\xa0\xa0\n    <company>Columbia</company>\n    \xa0\xa0\xa0\n    <price>10.90</price>\n    \xa0\xa0\xa0\n    <year>1985</year>\n  \xa0\n  </cd>\n.\n.\n</catalog>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n  \xa0\n  <html>\n  \xa0\n  <body>\n    \xa0\n    <h2>My CD Collection</h2>\n    \xa0\n    <table border=""1"">\n    \xa0\xa0\xa0\n    <tr bgcolor=""#9acd32"">\n      \xa0\xa0\xa0\xa0\xa0\n      <th>Title</th>\n      \xa0\xa0\xa0\xa0\xa0\n      <th>Artist</th>\n    \xa0\xa0\xa0\n    </tr>\n    \xa0\xa0\xa0\n    <xsl:for-each select=""catalog/cd"">\n    \xa0\xa0\xa0\n    <tr>\n      \xa0\xa0\xa0\xa0\xa0\n      <td><xsl:value-of select=""title""/></td>\n      \xa0\xa0\xa0\xa0\xa0\n      <td><xsl:value-of select=""artist""/></td>\n    \xa0\xa0\xa0\n    </tr>\n    \xa0\xa0\xa0\n    </xsl:for-each>\n    \xa0\n    </table>\n  \xa0\n  </body>\n  \xa0\n  </html>\n</xsl:template>\n</xsl:stylesheet>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<?xml-stylesheet type=""text/xsl"" href=""cdcatalog.xsl""?>\n<catalog>\n  \xa0\n  <cd>\n    \xa0\xa0\xa0\n    <title>Empire Burlesque</title>\n    \xa0\xa0\xa0\n    <artist>Bob Dylan</artist>\n    \xa0\xa0\xa0\n    <country>USA</country>\n    \xa0\xa0\xa0\n    <company>Columbia</company>\n    \xa0\xa0\xa0\n    <price>10.90</price>\n    \xa0\xa0\xa0\n    <year>1985</year>\n  \xa0\n  </cd>\n.\n.\n</catalog>\n']",[],[]
57,['XSLT <xsl:template> Element'],"['The <xsl:template> Element', 'Example Explained']",['Example'],"['https://www.w3schools.com/xml/xsl_transformation.asp', 'https://www.w3schools.com/xml/xsl_value_of.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_ex1', 'https://www.w3schools.com/xml/xsl_transformation.asp', 'https://www.w3schools.com/xml/xsl_value_of.asp']",[],"['A template contains rules to apply when a specified node is matched.', 'The <xsl:template> element is used to build templates.']","['An XSL style sheet consists of one or more set of rules that are called templates.', ""Ok, let's look at a simplified version of the XSL file from the previous chapter:"", 'The content inside the <xsl:template> element defines some HTML to write to the output.', 'The last two lines define the end of the template and the end of the style sheet.']","['The match attribute is used to associate a template with an XMLelement. The match attribute can also be used to define a template for the entire XML document. The value of the match attribute is an XPath expression (i.e. match=""/"" defines the whole document).', 'Since an XSL style sheet is an XML document, it always begins with the XMLdeclaration: <?xml version=""1.0"" encoding=""UTF-8""?>.', 'The next element, <xsl:stylesheet>, defines that this document is an XSLT style sheet document (along with the version number and XSLT namespace attributes).', 'The <xsl:template> element defines a template.The match=""/"" attribute associates the template with the root of the XML source document.', 'The result from this example was a little disappointing, because no data was copied from the XML document to the output. In the next chapter you will learn how to use the <xsl:value-of>element to select values from the XML elements.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n \xa0\n <html>\n \xa0\n <body>\n   \xa0\n   <h2>My CD Collection</h2>\n   \xa0\n   <table border=""1"">\n     \xa0\xa0\xa0\n     <tr bgcolor=""#9acd32"">\n       \xa0\xa0\xa0\xa0\xa0\n       <th>Title</th>\n       \xa0\xa0\xa0\xa0\xa0\n       <th>Artist</th>\n     \xa0\xa0\xa0\n     </tr>\n     \xa0\xa0\xa0\n     <tr>\n       \xa0\xa0\xa0\xa0\xa0\n       <td>.</td>\n       \xa0\xa0\xa0\xa0\xa0\n       <td>.</td>\n     \xa0\xa0\xa0\n     </tr>\n   \xa0\n   </table>\n \xa0\n </body>\n \xa0\n </html>\n</xsl:template>\n</xsl:stylesheet>\n']",[],[]
58,['XSLT <xsl:value-of> Element'],"['The <xsl:value-of> Element', 'Example Explained']",['Example'],"['https://www.w3schools.com/xml/xsl_templates.asp', 'https://www.w3schools.com/xml/xsl_for_each.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_ex2', 'https://www.w3schools.com/xml/xsl_templates.asp', 'https://www.w3schools.com/xml/xsl_for_each.asp']",[],['The <xsl:value-of> element is used to extract the value of a selected node.'],[],"['The <xsl:value-of> element can be used to extract the value of an XML element and add it to the output stream of the transformation:', 'Note: The select attribute, in the example above, contains an XPath expression.An XPath expression works like navigating a file system; a forward slash (/) selects subdirectories.', 'The result from the example above was a little disappointing; only one line of data was copied from the XML document to the output. In the next chapter you will learn how to use the <xsl:for-each>element to loop through the XML elements, and display all of the records.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n \xa0\n <html>\n \xa0\n <body>\n   \xa0\n   <h2>My CD Collection</h2>\n   \xa0\n   <table border=""1"">\n     \xa0\xa0\xa0\n     <tr bgcolor=""#9acd32"">\n       \xa0\xa0\xa0\xa0\xa0\n       <th>Title</th>\n       \xa0\xa0\xa0\xa0\xa0\n       <th>Artist</th>\n     \xa0\xa0\xa0\n     </tr>\n     \xa0\xa0\xa0\n     <tr>\n      \xa0\xa0\xa0\xa0\xa0\n      <td><xsl:value-of select=""catalog/cd/title""/></td>\n      \xa0\xa0\xa0\xa0\xa0\n      <td><xsl:value-of select=""catalog/cd/artist""/></td>\n     \xa0\xa0\xa0\n     </tr>\n   \xa0\n   </table>\n \xa0\n </body>\n \xa0\n </html>\n</xsl:template>\n</xsl:stylesheet>\n']",[],[]
59,['XSLT <xsl:for-each> Element'],"['The <xsl:for-each> Element', 'Filtering the Output']","['Example', 'Example']","['https://www.w3schools.com/xml/xsl_value_of.asp', 'https://www.w3schools.com/xml/xsl_sort.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_ex3', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_filter', 'https://www.w3schools.com/xml/xsl_value_of.asp', 'https://www.w3schools.com/xml/xsl_sort.asp']",[],"['The <xsl:for-each> element allows you to do looping in XSLT.', '<xsl:for-each select=""catalog/cd[artist=\'Bob Dylan\']"">', 'Legal filter operators are:', 'Take a look at the adjusted XSL style sheet:']",['The XSL <xsl:for-each> element can be used to select every XML element of a specified node-set:'],"['Note: The value of the select attribute is an XPath expression.An XPath expression works like navigating a file system; where a forward slash (/) selects subdirectories.', 'We can also filter the output from the XML file by adding a criterion to the select attribute in the <xsl:for-each> element.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n  \xa0\n  <html>\n  \xa0\n  <body>\n    \xa0\n    <h2>My CD Collection</h2>\n    \xa0\n    <table border=""1"">\n      \xa0\xa0\xa0\n      <tr bgcolor=""#9acd32"">\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Title</th>\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Artist</th>\n      \xa0\xa0\xa0\n      </tr>\n\xa0\xa0\xa0 <xsl:for-each select=""catalog/cd"">\n      \xa0\xa0\xa0\n      <tr>\n        \xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""title""/></td>\n        \xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""artist""/></td>\n      \xa0\xa0\xa0\n      </tr>\n\xa0\xa0\xa0 </xsl:for-each>\n    \xa0\n    </table>\n  \xa0\n  </body>\n  \xa0\n  </html>\n</xsl:template>\n</xsl:stylesheet>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n \xa0\n <html>\n  \xa0\n  <body>\n  \xa0\n  <h2>My CD Collection</h2>\n  \xa0\n  <table border=""1"">\n   \xa0\xa0\xa0\n   <tr bgcolor=""#9acd32"">\n      \xa0\xa0\xa0\xa0\xa0\n      <th>Title</th>\n      \xa0\xa0\xa0\xa0\xa0\n      <th>Artist</th>\n   \xa0\xa0\xa0\n   </tr>\n\xa0\xa0\xa0 <xsl:for-each select=""catalog/cd[artist=\'Bob Dylan\']"">\n   \xa0\xa0\xa0\n   <tr>\n      \xa0\xa0\xa0\xa0\xa0\n      <td><xsl:value-of select=""title""/></td>\n      \xa0\xa0\xa0\xa0\xa0\n      <td><xsl:value-of select=""artist""/></td>\n   \xa0\xa0\xa0\n   </tr>\n\xa0\xa0\xa0 </xsl:for-each>\n  \xa0\n  </table>\n \xa0\n </body>\n \xa0\n </html>\n</xsl:template>\n</xsl:stylesheet>\n']",[],['=\xa0 (equal)|||!= (not equal)|||&lt; less than|||&gt; greater than|||']
60,['XSLT <xsl:sort> Element'],['Where to put the Sort Information'],['Example'],"['https://www.w3schools.com/xml/xsl_for_each.asp', 'https://www.w3schools.com/xml/xsl_if.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_sort', 'https://www.w3schools.com/xml/xsl_for_each.asp', 'https://www.w3schools.com/xml/xsl_if.asp']",[],"['The <xsl:sort> element is used to sort the output.', 'Note: The select attribute indicates what XML element to sort on.']","['To sort the output, simply add an <xsl:sort> element inside the <xsl:for-each> element in the XSL file:']",[],"['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n  \xa0\n  <html>\n  \xa0\n  <body>\n    \xa0\n    <h2>My CD Collection</h2>\n    \xa0\n    <table border=""1"">\n      \xa0\xa0\xa0\n      <tr bgcolor=""#9acd32"">\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Title</th>\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Artist</th>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      <xsl:for-each select=""catalog/cd"">\n\xa0\xa0\xa0\xa0\xa0 <xsl:sort select=""artist""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <tr>\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""title""/></td>\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""artist""/></td>\n      \xa0\xa0\xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      </xsl:for-each>\n    \xa0\n    </table>\n  \xa0\n  </body>\n  \xa0\n  </html>\n</xsl:template>\n</xsl:stylesheet>\n']",[],[]
61,['XSLT <xsl:if> Element'],"['The <xsl:if> Element', 'Where to Put the <xsl:if> Element']","['Syntax', 'Example']","['https://www.w3schools.com/xml/xsl_sort.asp', 'https://www.w3schools.com/xml/xsl_choose.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_if', 'https://www.w3schools.com/xml/xsl_sort.asp', 'https://www.w3schools.com/xml/xsl_choose.asp']",[],[],"['The <xsl:if> element is used to put a conditional test against the content of the XML file.', 'To put a conditional if test against the content of the XML file, add an <xsl:if> element to the XSL document.', 'To add a conditional test, add the <xsl:if> element inside the <xsl:for-each> element in the XSL file:', 'Note: The value of the required test attribute contains the expression to be evaluated.', 'The code above will only output the title and artist elements of the CDs that has a price that is higher than 10.']",[],"['\n<xsl:if test=""expression"">\n  \xa0\n  ...some output if the expression is true...\n</xsl:if>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n  \xa0\n  <html>\n  \xa0\n  <body>\n    \xa0\n    <h2>My CD Collection</h2>\n    \xa0\n    <table border=""1"">\n      \xa0\xa0\xa0\n      <tr bgcolor=""#9acd32"">\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Title</th>\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Artist</th>\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Price</th>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      <xsl:for-each select=""catalog/cd"">\n\xa0\xa0\xa0\xa0\xa0 <xsl:if test=""price &gt; 10"">\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <tr>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <td><xsl:value-of select=""title""/></td>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <td><xsl:value-of select=""artist""/></td>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <td><xsl:value-of select=""price""/></td>\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        </tr>\n\xa0\xa0\xa0\xa0\xa0 </xsl:if>\n      \xa0\xa0\xa0\n      </xsl:for-each>\n    \xa0\n    </table>\n  \xa0\n  </body>\n  \xa0\n  </html>\n</xsl:template>\n</xsl:stylesheet>\n']",[],[]
62,['XSLT <xsl:choose> Element'],"['The <xsl:choose> Element', 'Where to put the Choose Condition', 'Another Example']","['Syntax', 'Example', 'Example']","['https://www.w3schools.com/xml/xsl_if.asp', 'https://www.w3schools.com/xml/xsl_apply_templates.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_choose', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_choose2', 'https://www.w3schools.com/xml/xsl_if.asp', 'https://www.w3schools.com/xml/xsl_apply_templates.asp']",[],['Here is another example that contains two <xsl:when> elements:'],"['The code above will add a pink background-color to the ""Artist"" column WHEN the price of the CD is higher than 10.']","['The <xsl:choose> element is used in conjunction with <xsl:when> and <xsl:otherwise> to express multiple conditional tests.', 'To insert a multiple conditional test against the XML file, add the <xsl:choose>, <xsl:when>, and <xsl:otherwise> elements to the XSL file:', 'The code above will add a pink background color to the ""Artist"" column WHEN the price of the CD is higher than 10, and a grey background-color WHEN the price of the CD is higher than 9 and lower or equal to 10.']","['\n<xsl:choose>\n  \xa0\n  <xsl:when test=""expression"">\n    \xa0\xa0\xa0\n    ... some output ...\n  \xa0\n  </xsl:when>\n  \xa0\n  <xsl:otherwise>\n    \xa0\xa0\xa0\n    ... some output ....\n  \xa0\n  </xsl:otherwise>\n</xsl:choose>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n  \xa0\n  <html>\n  \xa0\n  <body>\n    \xa0\n    <h2>My CD Collection</h2>\n    \xa0\n    <table border=""1"">\n      \xa0\xa0\xa0\n      <tr bgcolor=""#9acd32"">\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Title</th>\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Artist</th>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      <xsl:for-each select=""catalog/cd"">\n      \xa0\xa0\xa0\n      <tr>\n        \xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""title""/></td>\n\xa0\xa0\xa0\xa0\xa0 <xsl:choose>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <xsl:when test=""price &gt; 10"">\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <td bgcolor=""#ff00ff"">\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <xsl:value-of select=""artist""/></td>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </xsl:when>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <xsl:otherwise>\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <td><xsl:value-of select=""artist""/></td>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </xsl:otherwise>\n        \xa0\xa0\xa0\xa0\xa0\n        </xsl:choose>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      </xsl:for-each>\n    \xa0\n    </table>\n  \xa0\n  </body>\n  \xa0\n  </html>\n</xsl:template>\n</xsl:stylesheet>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n  \xa0\n  <html>\n  \xa0\n  <body>\n    \xa0\n    <h2>My CD Collection</h2>\n    \xa0\n    <table border=""1"">\n      \xa0\xa0\xa0\n      <tr bgcolor=""#9acd32"">\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Title</th>\n        \xa0\xa0\xa0\xa0\xa0\n        <th>Artist</th>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      <xsl:for-each select=""catalog/cd"">\n      \xa0\xa0\xa0\n      <tr>\n        \xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""title""/></td>\n\xa0\xa0\xa0\xa0\xa0 <xsl:choose>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <xsl:when test=""price &gt; 10"">\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <td bgcolor=""#ff00ff"">\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <xsl:value-of select=""artist""/></td>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </xsl:when>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <xsl:when test=""price &gt; 9"">\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <td bgcolor=""#cccccc"">\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <xsl:value-of select=""artist""/></td>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </xsl:when>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <xsl:otherwise>\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <td><xsl:value-of select=""artist""/></td>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </xsl:otherwise>\n        \xa0\xa0\xa0\xa0\xa0\n        </xsl:choose>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      </xsl:for-each>\n    \xa0\n    </table>\n  \xa0\n  </body>\n  \xa0\n  </html>\n</xsl:template>\n</xsl:stylesheet>\n']",[],[]
63,['XSLT <xsl:apply-templates> Element'],['The <xsl:apply-templates> Element'],['Example'],"['https://www.w3schools.com/xml/xsl_choose.asp', 'https://www.w3schools.com/xml/xsl_client.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_apply', 'https://www.w3schools.com/xml/xsl_choose.asp', 'https://www.w3schools.com/xml/xsl_client.asp']",[],['Look at the following XSL style sheet:'],"[""The <xsl:apply-templates> element applies a template to the current element or to the current element's child nodes.""]","[""The <xsl:apply-templates> element applies a template rule to the current element or to the current element's child nodes."", 'If we add a ""select"" attribute to the <xsl:apply-templates> element, it will process only the child elements that matches the value of the attribute. We can use the ""select"" attribute to specify in which order the child nodes are to be processed.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n\xa0\n<html>\n\xa0\n<body>\n\xa0\n<h2>My CD Collection</h2>\n\xa0\n<xsl:apply-templates/>\n\xa0\n</body>\n\xa0\n</html>\n</xsl:template>\n<xsl:template match=""cd"">\n\xa0\n<p>\n\xa0\n<xsl:apply-templates select=""title""/>\n\xa0\n<xsl:apply-templates select=""artist""/>\n\xa0\n</p>\n</xsl:template>\n<xsl:template match=""title"">\n\xa0\nTitle: <span style=""color:#ff0000"">\n\xa0\n<xsl:value-of select="".""/></span>\n\xa0\n<br />\n</xsl:template>\n<xsl:template match=""artist"">\n\xa0\nArtist: <span style=""color:#00ff00"">\n\xa0\n<xsl:value-of select="".""/></span>\n\xa0\n<br />\n</xsl:template>\n</xsl:stylesheet>\n']",[],[]
64,['XSLT - On the Client'],"['A JavaScript Solution', 'The XML File and the XSL File', 'Transforming XML to XHTML in the Browser', 'Example Explained:']",['Example'],"['https://www.w3schools.com/xml/xsl_apply_templates.asp', 'https://www.w3schools.com/xml/xsl_server.asp', 'https://www.w3schools.com/xml/cdcatalog.xml', 'https://www.w3schools.com/xml/cdcatalog_client.xsl', 'https://www.w3schools.com/xml/tryit.asp?filename=try_cdcatalog', 'https://www.w3schools.com/xml//js/default.asp', 'https://www.w3schools.com/xml/xsl_apply_templates.asp', 'https://www.w3schools.com/xml/xsl_server.asp']",[],"['XSLT can be used to transform the document to XHTML in your browser.', 'By using a JavaScript, we can:', 'Look at the XML document that you have seen in the previous chapters:', 'View the XML file.', 'And the accompanying XSL style sheet:', 'View the XSL file.', 'Notice that the XML file does not have a reference to the XSL file.', 'The loadXMLDoc() function does the following:']","['A more versatile solution would be to use a JavaScript to do the transformation.', 'IMPORTANT: The above sentence indicates that an XML file could be transformed using many different XSL style sheets.', 'Here is the source code needed to transform the XML file to XHTML on the client:', ""Tip: If you don't know how to write JavaScript, please study our JavaScript tutorial."", 'The displayResult() function is used to display the XML file styled by the XSL file:']","['Even if this works fine, it is not always desirable to include a style sheet reference in an XML file (e.g. it will not work in a non XSLT aware browser.)', 'That is the beauty of XSLT! One of the design goals for XSLT was to make it possible to transform data from one format to another, supporting different browsers and different user needs.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<catalog>\n  \xa0\n  <cd>\n    \xa0\xa0\xa0\n    <title>Empire Burlesque</title>\n    \xa0\xa0\xa0\n    <artist>Bob Dylan</artist>\n    \xa0\xa0\xa0\n    <country>USA</country>\n    \xa0\xa0\xa0\n    <company>Columbia</company>\n    \xa0\xa0\xa0\n    <price>10.90</price>\n    \xa0\xa0\xa0\n    <year>1985</year>\n  \xa0\n  </cd>\n.\n.\n</catalog>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n    \xa0\n    <h2>My CD Collection</h2>\n    \xa0\n    <table border=""1"">\n      \xa0\xa0\xa0\n      <tr bgcolor=""#9acd32"">\n        \xa0\xa0\xa0\xa0\xa0\n        <th style=""text-align:left"">Title</th>\n        \xa0\xa0\xa0\xa0\xa0\n        <th style=""text-align:left"">Artist</th>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      <xsl:for-each select=""catalog/cd"">\n      \xa0\xa0\xa0\n      <tr>\n        \xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""title"" /></td>\n        \xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""artist"" /></td>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      </xsl:for-each>\n  \xa0\n  </table>\n</xsl:template>\n</xsl:stylesheet>\n', '\n<!DOCTYPE html><html><head><script>function loadXMLDoc(filename){if (window.ActiveXObject)\xa0 \n{\xa0 xhttp = new ActiveXObject(""Msxml2.XMLHTTP"");\xa0 }else\n\xa0 {\xa0 xhttp = new XMLHttpRequest();\xa0 }\nxhttp.open(""GET"", filename, false);try {xhttp.responseType = ""msxml-document""} \ncatch(err) {} // Helping IE11xhttp.send("""");return xhttp.responseXML;\n}function displayResult(){xml = loadXMLDoc(""cdcatalog.xml"");\nxsl = loadXMLDoc(""cdcatalog.xsl"");// code for IEif (window.ActiveXObject \n|| xhttp.responseType == ""msxml-document"")\xa0 {\xa0 ex = \nxml.transformNode(xsl);\xa0 document.getElementById(""example"").innerHTML \n= ex;\xa0 }// code for Chrome, Firefox, Opera, etc.else if (document.implementation \n&& document.implementation.createDocument)\xa0 {\xa0 \nxsltProcessor = new XSLTProcessor();\xa0 \nxsltProcessor.importStylesheet(xsl);\xa0 resultDocument = \nxsltProcessor.transformToFragment(xml, document);\xa0 \ndocument.getElementById(""example"").appendChild(resultDocument);\xa0 }\n}</script></head><body onload=""displayResult()""><div \nid=""example"" /></body></html>']",[],"['do browser-specific testing|||use different style sheets according to browser and user|||    needs|||Create an XMLHttpRequest object|||Use the open() and send() methods of the XMLHttpRequest object to send a request to a server|||Get the response data as XML data|||Load XML and XSL files|||Test what kind of browser the user has|||If Internet Explorer:|||Use the transformNode() method to apply the XSL style sheet to the  xml document|||Set the body of the current document (id=""example"") to contain the  styled xml document|||||||||If other browsers:|||Create a new XSLTProcessor object and import the XSL file to it|||Use the transformToFragment() method to apply the XSL style sheet to  the xml document|||Set the body of the current document (id=""example"") to contain the  styled xml document|||||||||Use the transformNode() method to apply the XSL style sheet to the  xml document|||Set the body of the current document (id=""example"") to contain the  styled xml document|||Create a new XSLTProcessor object and import the XSL file to it|||Use the transformToFragment() method to apply the XSL style sheet to  the xml document|||Set the body of the current document (id=""example"") to contain the  styled xml document|||']"
65,['XSLT - On the Server'],"['A Cross Browser Solution', 'The XML File and the XSLT File', 'PHP Code: Transform XML to XHTML on the Server', 'ASP Code: Transform XML to XHTML on the Server']",[],"['https://www.w3schools.com/xml/xsl_client.asp', 'https://www.w3schools.com/xml/xsl_editxml.asp', 'https://www.w3schools.com/xml/cdcatalog.xml', 'https://www.w3schools.com/xml/cdcatalog.xsl', 'https://www.w3schools.com/xml//php/default.asp', 'https://www.w3schools.com/xml/cdcatalog.php', 'https://www.w3schools.com/xml/cdcatalog.asp', 'https://www.w3schools.com/xml/xsl_client.asp', 'https://www.w3schools.com/xml/xsl_editxml.asp']",[],"['Look at the XML document that you have seen in the previous chapters:', 'View the XML file.', 'And the accompanying XSL style sheet:', 'View the XSL file.', 'Notice that the XML file does not have a reference to the XSL file.', ""Tip: If you don't know how to write PHP, please study ourPHP tutorial."", 'See how it works with PHP.', 'See how it works with ASP.']","['IMPORTANT: The above sentence indicates that an XML file could be transformed using many different XSL style sheets.', 'Here is the PHP source code needed to transform the XML file to XHTML on the server:', 'Here is the ASP source code needed to transform the XML file to XHTML on the server:']","['To make XML data available to all kind of browsers, we can transform the XML document on theSERVER and send it\xa0 back to the browser as XHTML.', 'To make XML data available to all kind of browsers, we can transform the XML document on theserver and send back to the browser as XHTML.', ""That's another beauty of XSLT. One of the design goals for XSLT was to make it possible totransform data from one formatto another on a server, returning readable data to all kinds of browsers.""]","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<catalog>\n  \xa0\n  <cd>\n    \xa0\xa0\xa0\n    <title>Empire Burlesque</title>\n    \xa0\xa0\xa0\n    <artist>Bob Dylan</artist>\n    \xa0\xa0\xa0\n    <country>USA</country>\n    \xa0\xa0\xa0\n    <company>Columbia</company>\n    \xa0\xa0\xa0\n    <price>10.90</price>\n    \xa0\xa0\xa0\n    <year>1985</year>\n  \xa0\n  </cd>\n.\n.\n</catalog>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n    \xa0\n    <h2>My CD Collection</h2>\n    \xa0\n    <table border=""1"">\n      \xa0\xa0\xa0\n      <tr bgcolor=""#9acd32"">\n        \xa0\xa0\xa0\xa0\xa0\n        <th style=""text-align:left"">Title</th>\n        \xa0\xa0\xa0\xa0\xa0\n        <th style=""text-align:left"">Artist</th>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      <xsl:for-each select=""catalog/cd"">\n      \xa0\xa0\xa0\n      <tr>\n        \xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""title"" /></td>\n        \xa0\xa0\xa0\xa0\xa0\n        <td><xsl:value-of select=""artist"" /></td>\n      \xa0\xa0\xa0\n      </tr>\n      \xa0\xa0\xa0\n      </xsl:for-each>\n  \xa0\n  </table>\n</xsl:template>\n</xsl:stylesheet>\n', ""\n<?php// Load XML file$xml = new DOMDocument;$xml->load('cdcatalog.xml');\n// Load XSL file$xsl = new DOMDocument;$xsl->load('cdcatalog.xsl');// \nConfigure the transformer$proc = new XSLTProcessor;// Attach the xsl \nrules$proc->importStyleSheet($xsl);\necho $proc->transformToXML($xml);?>\n"", '\n<%\n\'Load XML file\nset xml = Server.CreateObject(""Microsoft.XMLDOM"")\nxml.async = false\nxml.load(Server.MapPath(""cdcatalog.xml""))\n\'Load XSL file\nset xsl = Server.CreateObject(""Microsoft.XMLDOM"")\nxsl.async = false\nxsl.load(Server.MapPath(""cdcatalog.xsl""))\n\'Transform file\nResponse.Write(xml.transformNode(xsl))\n%>\n']",[],[]
66,['XSLT - Editing XML'],"['Open, Edit and Save XML', 'The XML File and the XSL File', 'The PHP File', 'The ASP File']",[],"['https://www.w3schools.com/xml/xsl_server.asp', 'https://www.w3schools.com/xml/xsl_examples.asp', 'https://www.w3schools.com/xml/tool.xml', 'https://www.w3schools.com/xml/tool.xsl', 'https://www.w3schools.com/xml/tool_updated.xsl', 'https://www.w3schools.com/xml//php/default.asp', 'https://www.w3schools.com/xml/xsl_server.asp', 'https://www.w3schools.com/xml/xsl_examples.asp']",[],"['Data stored in XML files can be edited from an Internet browser.', 'First, take a look at the XML document (""tool.xml""):', 'View the XML file.', 'Then, take a look at the following style sheet (""tool.xsl""):', 'View the XSL file.', 'View the XSL file.', ""Tip: If you don't know how to write PHP, please study ourPHP tutorial.""]","['Now, we will show how to open, edit, and save an XML file that is stored on the server.', 'In the ""tool.xsl"" file above, change the HTML form\'s action attribute to ""edittool.php"".', 'The HTML form in the ""tool.xsl"" file above has an action attribute with a value of ""edittool.asp"".']","['We will use XSL to transform the XML document into an HTML form. The values of the XML elements will be written to HTML input fields in an HTML form. The HTML form is editable. After editing the data, the data is going to be submitted back to the server and the XML file will be updated (we will show code for both PHP and ASP). ', 'The XSL file above loops through the elements in the XML file and creates one input field for each XML ""field"" element. The value of the XML ""field"" element\'s ""id"" attribute is added to both the ""id"" and ""name"" attributes of each HTML input field. The value of each XML ""value"" element is added to the ""value"" attribute of each HTML input field. The result is an editable HTML form that contains the values from the XML file.', 'Then, we have a second style sheet: ""tool_updated.xsl"". This is the XSL file that will be used to display the updated XML data. This style sheet will not result in an editable HTML form, but a static HTML table:', 'The ""edittool.php"" page contains two functions: The loadFile() function loads and transforms the XML file for display and the updateFile() function applies the changes to the XML file:', 'Note: We are doing the transformation and applying the changes to the XML file on the server. This is a cross-browser solution. The client will only get HTML back from the server - which will work in any browser.', 'The ""edittool.asp"" page contains two functions: The loadFile() function loads and transforms the XML file for display and the updateFile() function applies the changes to the XML file:']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<tool>\n  \xa0\n  <field id=""prodName"">\n    \xa0\xa0\xa0\n    <value>HAMMER HG2606</value>\n  \xa0\n  </field>\n  \xa0\n  <field id=""prodNo"">\n    \xa0\xa0\xa0\n    <value>32456240</value>\n  \xa0\n  </field>\n  \xa0\n  <field id=""price"">\n    \xa0\xa0\xa0\n    <value>$30.00</value>\n  \xa0\n  </field>\n</tool>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n\xa0\n<html>\n\xa0\n<body>\n\xa0\n<form method=""post"" action=""edittool.asp"">\n\xa0\n<h2>Tool Information (edit):</h2>\n\xa0\n<table border=""0"">\n\xa0\xa0\xa0\n<xsl:for-each select=""tool/field"">\n\xa0\xa0\xa0\n<tr>\n\xa0\xa0\xa0\xa0\xa0\n<td><xsl:value-of select=""@id""/></td>\n\xa0\xa0\xa0\xa0\xa0\n<td>\n\xa0\xa0\xa0\xa0\xa0\n<input type=""text"">\n\xa0\xa0\xa0\xa0\xa0\n<xsl:attribute name=""id"">\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <xsl:value-of select=""@id"" />\n\xa0\xa0\xa0\xa0\xa0 </xsl:attribute>\n\xa0\xa0\xa0\xa0\xa0\n<xsl:attribute name=""name"">\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <xsl:value-of select=""@id"" />\n\xa0\xa0\xa0\xa0\xa0 </xsl:attribute>\n\xa0\xa0\xa0\xa0\xa0\n<xsl:attribute name=""value"">\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <xsl:value-of select=""value"" />\n\xa0\xa0\xa0\xa0\xa0 </xsl:attribute>\n\xa0\xa0\xa0\xa0\xa0\n</input>\n\xa0\xa0\xa0\xa0\xa0\n</td>\n\xa0\xa0\xa0\n</tr>\n\xa0\xa0\xa0\n</xsl:for-each>\n\xa0\n</table>\n\xa0\n<br />\n\xa0\n<input type=""submit"" id=""btn_sub"" name=""btn_sub"" value=""Submit"" />\n\xa0\n<input type=""reset"" id=""btn_res"" name=""btn_res"" value=""Reset"" />\n\xa0\n</form>\n\xa0\n</body>\n\xa0\n</html>\n</xsl:template>\n</xsl:stylesheet>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xsl:stylesheet version=""1.0""\nxmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">\n<xsl:template match=""/"">\n\xa0\n<html>\n\xa0\n<body>\n\xa0\n<h2>Updated Tool Information:</h2>\n\xa0\n<table border=""1"">\n\xa0\xa0\xa0\n<xsl:for-each select=""tool/field"">\n\xa0\xa0\xa0\n<tr>\n\xa0\xa0\xa0\xa0\xa0\n<td><xsl:value-of select=""@id"" /></td>\n\xa0\xa0\xa0\xa0\xa0\n<td><xsl:value-of select=""value"" /></td>\n\xa0\xa0\xa0\n</tr>\n\xa0\xa0\xa0\n</xsl:for-each>\n\xa0\n</table>\n\xa0\n</body>\n\xa0\n</html>\n</xsl:template>\n</xsl:stylesheet>\n', '\n<?phpfunction loadFile($xml, $xsl){$xmlDoc = new DOMDocument();\n$xmlDoc->load($xml);$xslDoc = new DOMDocument();$xslDoc->load($xsl);\n$proc = new XSLTProcessor();$proc->importStyleSheet($xslDoc);\necho $proc->transformToXML($xmlDoc);}function updateFile($xml)\n{$xmlLoad = simplexml_load_file($xml);$postKeys = array_keys($_POST);\nforeach($xmlLoad->children() as $x){ \xa0 foreach($_POST as \n$key=>$value)\xa0 { \xa0\xa0\xa0 if($key == \n$x->attributes())\xa0\xa0\xa0 { \xa0\xa0\xa0\xa0\xa0 \n$x->value = $value;\xa0\xa0\xa0 }\xa0 }} $xmlLoad->asXML($xml);\nloadFile($xml,""tool_updated.xsl"");}if($_POST[""btn_sub""] == """")\n{\xa0 loadFile(""tool.xml"", ""tool.xsl"");}else{\xa0 \nupdateFile(""tool.xml"");}?>', '\n<%\nfunction loadFile(xmlfile,xslfile)\nDim xmlDoc,xslDoc\'Load XML and XSL file\nset xmlDoc = Server.CreateObject(""Microsoft.XMLDOM"")\nxmlDoc.async = false\nxmlDoc.load(xmlfile)set xslDoc = Server.CreateObject(""Microsoft.XMLDOM"")\nxslDoc.async = false\nxslDoc.load(xslfile)\'Transform file\nResponse.Write(xmlDoc.transformNode(xslDoc))\nend function\nfunction updateFile(xmlfile)\nDim xmlDoc,rootEl,f\nDim i\'Load XML file\nset xmlDoc = Server.CreateObject(""Microsoft.XMLDOM"")\nxmlDoc.async = false\nxmlDoc.load(xmlfile)\n\'Set the rootEl variable equal to the root element\nSet rootEl = xmlDoc.documentElement\n\'Loop through the form collection\nfor i = 1 To Request.Form.Count\n\xa0\n\'Eliminate button elements in the form\n\xa0\nif instr(1,Request.Form.Key(i),""btn_"")=0 then\n\xa0\xa0\xa0\n\'The selectSingleNode method queries the XML file for a single node\n\xa0\xa0\xa0\n\'that matches a query. This query requests the value element that is\n\xa0\xa0\xa0\n\'the child of a field element that has an id attribute which matches\n\xa0\xa0\xa0\n\'the current key value in the Form Collection. When there is a match -\n\xa0\xa0\xa0\n\'set the text property equal to the value of the current field in the\n\xa0\xa0\xa0\n\'Form Collection.\n\xa0\xa0\xa0\nset f = rootEl.selectSingleNode(""field[@id=\'"" & _\n\xa0\xa0\xa0\nRequest.Form.Key(i) & ""\']/value"")\n\xa0\xa0\xa0\nf.Text = Request.Form(i)\n\xa0\nend if\nnext\n\'Save the modified XML file\nxmlDoc.save xmlfile\n\'Release all object references\nset xmlDoc=nothing\nset rootEl=nothing\nset f=nothing\n\'Load the modified XML file with a style sheet that\n\'allows the client to see the edited information\nloadFile xmlfile,server.MapPath(""tool_updated.xsl"")\nend function\n\'If form is submitted, update the XML file and display result\n \' - if not, transform the XML file for editing\nif Request.Form(""btn_sub"")="""" then\n\xa0\nloadFile server.MapPath(""tool.xml""),server.MapPath(""tool.xsl"")\nelse\n\xa0\nupdateFile server.MapPath(""tool.xml"")\nend if\n%>\n']",[],[]
67,['XSLT Examples'],"['Try it Yourself - Examples', 'The <xsl:template> Element', 'The <xsl:value-of> Element', 'The <xsl:for-each> Element', 'The <xsl:sort> Element', 'The <xsl:if> Element', 'The <xsl:choose> Element', 'The <xsl:apply-templates> Element']",[],"['https://www.w3schools.com/xml/xsl_editxml.asp', 'https://www.w3schools.com/xml/xquery_intro.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_ex1', 'https://www.w3schools.com/xml/xsl_templates.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_ex2', 'https://www.w3schools.com/xml/xsl_value_of.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_ex3', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_filter', 'https://www.w3schools.com/xml/xsl_for_each.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_sort', 'https://www.w3schools.com/xml/xsl_sort.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_if', 'https://www.w3schools.com/xml/xsl_if.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_choose', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_choose2', 'https://www.w3schools.com/xml/xsl_choose.asp', 'https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_apply', 'https://www.w3schools.com/xml/xsl_apply_templates.asp', 'https://www.w3schools.com/xml/xsl_editxml.asp', 'https://www.w3schools.com/xml/xquery_intro.asp']",[],"['A template contains rules to apply when a specified node is matched', 'Example explained', 'Extract the value of a selected node', 'Example explained', 'Filter the output in a node-set', 'Examples explained', 'Sort the output in a node-set', 'Example explained', 'Put a conditional test against the content of an XML file', 'Example explained', 'Examples explained', 'Apply templates to elements', 'Examples explained']",['Select every XML element of a specified node-set with the <xsl:for-each> element'],"['Example 1This example will add a pink background-color to the ""Artist"" column WHEN the price of the CD is higher than 10:', 'Example 2This example will add a pink background color to the ""Artist"" column WHEN the price of the CD is higher than 10, and a grey background-color WHEN the price of the CD is higher than 9 and lower or equal to 10.']",[],[],[]
68,['XQuery Tutorial'],"['What is XQuery?', 'What is XQuery?', 'XQuery is About Querying XML', 'XQuery and XPath', 'XQuery - Examples of Use', 'XQuery is a W3C Recommendation']",['XQuery Example'],"['https://www.w3schools.com/xml/xsl_examples.asp', 'https://www.w3schools.com/xml/xquery_example.asp', 'https://www.w3schools.com/xml/xsl_examples.asp', 'https://www.w3schools.com/xml/xquery_example.asp']",['https://www.w3schools.com/xml/pic_xpath.gif'],"['XQuery is to XML what SQL is to databases.', 'XQuery is designed to query XML data.', 'Here is an example of what XQuery could solve:', 'XQuery can be used to:', 'XQuery 1.0 became a W3C Recommendation in 2007.']","['XQuery is a language for finding and extracting elements and attributes from XML documents.', '""Select all CD records with a price less than $10 from the CD collection stored in cd_catalog.xml""', 'XQuery is compatible with several W3C standards, such as XML, Namespaces, XSLT, XPath, and XML Schema.']",['XQuery 1.0 and XPath 2.0 share the same data model and support the same functions and operators. If you have already studied XPath you will have no problems with understanding XQuery.'],"['\nfor $x in doc(""books.xml"")/bookstore/book\nwhere $x/price>30\norder by $x/title\nreturn $x/title']",['||||||||||||XQuery is the language for querying XML data|||XQuery for XML is like SQL for databases|||XQuery is built on XPath expressions|||XQuery is supported by all major databases|||XQuery is a W3C Recommendation||||||'],['XQuery is the language for querying XML data|||XQuery for XML is like SQL for databases|||XQuery is built on XPath expressions|||XQuery is supported by all major databases|||XQuery is a W3C Recommendation|||Extract information to use in a Web Service|||Generate summary reports|||Transform XML data to XHTML|||Search Web documents for relevant information|||']
69,['XQuery Example'],"['The XML Example Document', 'How to Select Nodes From ""books.xml""?']","['Functions', 'Path Expressions', 'Predicates']","['https://www.w3schools.com/xml/xquery_intro.asp', 'https://www.w3schools.com/xml/xquery_flwor.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/xquery_intro.asp', 'https://www.w3schools.com/xml/xquery_flwor.asp']",[],"[""Let's learn some basic XQuery by looking at an example."", 'We will use the following XML document in the examples below.', '""books.xml"":', 'View the ""books.xml"" file in your browser.', 'XQuery uses functions to extract data from XML documents.', 'The doc() function is used to open the ""books.xml"" file:', 'XQuery uses path expressions to navigate through elements in an XML document.', 'The XQuery above will extract the following:', 'XQuery uses predicates to limit the extracted data from XML documents.', 'The XQuery above will extract the following:']","['The following path expression is used to select all the title elements in the ""books.xml"" file:']","['(/bookstore selects the bookstore element, /book selects all the book elements under the bookstore element, and /title selects all the title elements under each book element)', 'The following predicate is used to select all the book elements under the bookstore element that have a price element with a value that is less than 30:']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\n<book category=""COOKING"">\n  \xa0\n  <title lang=""en"">Everyday Italian</title>\n  \xa0\n  <author>Giada De Laurentiis</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>30.00</price>\n</book>\n<book category=""CHILDREN"">\n  \xa0\n  <title lang=""en"">Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n<book category=""WEB"">\n  \xa0\n  <title lang=""en"">XQuery Kick Start</title>\n  \xa0\n  <author>James McGovern</author>\n  \xa0\n  <author>Per Bothner</author>\n  \xa0\n  <author>Kurt Cagle</author>\n  \xa0\n  <author>James Linn</author>\n  \xa0\n  <author>Vaidyanathan Nagarajan</author>\n  \xa0\n  <year>2003</year>\n  \xa0\n  <price>49.99</price>\n</book>\n<book category=""WEB"">\n  \xa0\n  <title lang=""en"">Learning XML</title>\n  \xa0\n  <author>Erik T. Ray</author>\n  \xa0\n  <year>2003</year>\n  \xa0\n  <price>39.95</price>\n</book>\n</bookstore>\n', '\ndoc(""books.xml"")\n', '\ndoc(""books.xml"")/bookstore/book/title\n', '\n<title lang=""en"">Everyday Italian</title>\n<title lang=""en"">Harry Potter</title>\n<title lang=""en"">XQuery Kick Start</title>\n<title lang=""en"">Learning XML</title>\n', '\ndoc(""books.xml"")/bookstore/book[price<30]\n', '\n<book category=""CHILDREN"">\n  \xa0\n  <title lang=""en"">Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n']",[],[]
70,['XQuery FLWOR Expressions'],"['What is FLWOR?', 'The XML Example Document', 'How to Select Nodes From ""books.xml"" With FLWOR']",[],"['https://www.w3schools.com/xml/xquery_example.asp', 'https://www.w3schools.com/xml/xquery_flwor_html.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/xquery_example.asp', 'https://www.w3schools.com/xml/xquery_flwor_html.asp']",[],"['View the ""books.xml"" file in your browser.', 'Look at the following path expression:', 'The result will be:', 'With FLWOR you can sort the result:', 'The order by clause defines the sort-order. Will be sort by the title element.', 'The result of the XQuery expression above will be:']","['FLWOR (pronounced ""flower"") is an acronym for ""For, Let, Where, Order by, Return"".', 'We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapter).', 'The following FLWOR expression will select exactly the same as the path expression above:', 'The for clause selects all book elements under the bookstore element into a variable called $x.', 'The where clause selects only book elements with a price element with a value greater than 30.', 'The return clause specifies what should be returned. Here it returns the title elements.']",['The expression above will select all the title elements under the book elements that are under the bookstore element that have a price element with a value that is higher than 30.'],"['\ndoc(""books.xml"")/bookstore/book[price>30]/title\n', '\nfor $x in doc(""books.xml"")/bookstore/book\nwhere $x/price>30\nreturn $x/title\n', '\n<title lang=""en"">XQuery Kick Start</title>\n<title lang=""en"">Learning XML</title>\n', '\nfor $x in doc(""books.xml"")/bookstore/book\nwhere $x/price>30\norder by $x/title\nreturn $x/title\n', '\n<title lang=""en"">Learning XML</title>\n<title lang=""en"">XQuery Kick Start</title>\n']",[],['For - selects a sequence of nodes|||Let - binds a sequence to a variable|||Where - filters the nodes|||Order by - sorts the nodes|||Return - what to return (gets evaluated once for every node)|||']
71,['XQuery FLWOR + HTML'],"['The XML Example Document', 'Present the Result In an HTML List']",[],"['https://www.w3schools.com/xml/xquery_flwor.asp', 'https://www.w3schools.com/xml/xquery_terms.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/xquery_flwor.asp', 'https://www.w3schools.com/xml/xquery_terms.asp']",[],"['View the ""books.xml"" file in your browser.', 'Look at the following XQuery FLWOR expression:', 'The result of the above will be:', 'The result will be (an HTML list):']","['We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapters).', 'Now we want to eliminate the title element, and show only the data inside the title element:']","['The expression above will select all the title elements under the book elements that are under the bookstore element, and return the title elements in alphabetical order.', 'Now we want to list all the book-titles in our bookstore in an HTML list. We add <ul> and <li> tags to the FLWOR expression: ']","['\nfor $x in doc(""books.xml"")/bookstore/book/title\norder by $x\nreturn $x\n', '\n<ul>\n{\nfor $x in doc(""books.xml"")/bookstore/book/title\norder by $x\nreturn <li>{$x}</li>\n}\n</ul>\n', '\n<ul>\n<li><title lang=""en"">Everyday Italian</title></li>\n<li><title lang=""en"">Harry Potter</title></li>\n<li><title lang=""en"">Learning XML</title></li>\n<li><title lang=""en"">XQuery Kick Start</title></li>\n</ul>\n', '\n<ul>\n{\nfor $x in doc(""books.xml"")/bookstore/book/title\norder by $x\nreturn <li>{data($x)}</li>\n}\n</ul>\n', '\n<ul>\n<li>Everyday Italian</li>\n<li>Harry Potter</li>\n<li>Learning XML</li>\n<li>XQuery Kick Start</li>\n</ul>\n']",[],[]
72,['XQuery Terms'],"['XQuery Terminology', 'Relationship of Nodes']","['Nodes', 'Atomic values', 'Items', 'Parent', 'Children', 'Siblings', 'Ancestors', 'Descendants']","['https://www.w3schools.com/xml/xquery_flwor_html.asp', 'https://www.w3schools.com/xml/xquery_syntax.asp', 'https://www.w3schools.com/xml/xquery_flwor_html.asp', 'https://www.w3schools.com/xml/xquery_syntax.asp']",[],"['Look at the following XML document:', 'Example of nodes in the XML document above:', 'Atomic values are nodes with no children or parent.', 'Example of atomic values:', 'Items are atomic values or nodes.', 'Each element and attribute has one parent.', 'Element nodes may have zero, one or more children.', 'Nodes that have the same parent.', ""A node's parent, parent's parent, etc."", ""A node's children, children's children, etc.""]","['XML documents are treated as trees of nodes. The root of the tree is called the document node (or root node).', 'In the following example; the book element is the parent of the title, author, year, and price:', 'In the following example; the title, author, year, and price elements are all children of the book element:', 'In the following example; the title, author, year, and price elements are all siblings:', 'In the following example; the ancestors of the title element are the book element and the bookstore element:', 'In the following example; descendants of the bookstore element are the book, title, author, year, and price elements:']","['In XQuery, there are seven kinds of nodes: element, attribute, text, namespace, processing-instruction, comment, and document (root) nodes.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<bookstore>\n<book>\n  \xa0\n  <title lang=""en"">Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n</bookstore>\n', '\n<bookstore> (root node)\n<author>J K. Rowling</author> (element node)\nlang=""en"" (attribute node)\n', '\nJ K. Rowling\n""en""\n', '\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n', '\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n', '\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n', '\n<bookstore>\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n</bookstore>\n', '\n<bookstore>\n<book>\n  \xa0\n  <title>Harry Potter</title>\n  \xa0\n  <author>J K. Rowling</author>\n  \xa0\n  <year>2005</year>\n  \xa0\n  <price>29.99</price>\n</book>\n</bookstore>\n']",[],[]
73,['XQuery Syntax'],"['XQuery Basic Syntax Rules', 'The XML Example Document', 'XQuery Conditional Expressions', 'XQuery Comparisons']",[],"['https://www.w3schools.com/xml/xquery_terms.asp', 'https://www.w3schools.com/xml/xquery_add.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/xquery_terms.asp', 'https://www.w3schools.com/xml/xquery_add.asp']",[],"['Some basic syntax rules:', 'View the ""books.xml"" file in your browser.', '""If-Then-Else"" expressions are allowed in XQuery.', 'Look at the following example:', 'The result of the example above will be:', 'In XQuery there are two ways of comparing values.', '1. General comparisons: =, !=, <, <=, >, >=', '2. Value comparisons: eq, ne, lt, le, gt, ge', 'The difference between the two comparison methods are shown below.']","['XQuery is case-sensitive and XQuery elements, attributes, and variables must be valid XML names.', 'We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapters).', 'The following expression returns true if any q attributes have a value greater than 10:']","['Notes on the ""if-then-else"" syntax: parentheses around the if expression are required. else is required, but it can be just else ().', 'The following expression returns true if there is only one q attribute returned by the expression, and its value is greater than 10. If more than one q is returned, an error occurs:']","['\nfor $x in doc(""books.xml"")/bookstore/book\nreturn if ($x/@category=""children"")\nthen <child>{data($x/title)}</child>\nelse <adult>{data($x/title)}</adult>\n', '\n<adult>Everyday Italian</adult>\n<child>Harry Potter</child>\n<adult>XQuery Kick Start</adult><adult>Learning XML</adult>\n', '\n$bookstore//book/@q > 10\n', '\n$bookstore//book/@q gt 10\n']",[],"['XQuery is case-sensitive|||XQuery elements, attributes, and variables must be valid XML names|||An XQuery string value can be in single or double quotes|||An XQuery variable is defined with a $ followed by a name, e.g. $bookstore|||XQuery comments are delimited by (: and :), e.g. (: XQuery Comment :)|||']"
74,['XQuery Adding Elements and Attributes'],"['The XML Example Document', 'Adding Elements and Attributes to the Result']","['Add HTML Elements and Text', 'Add Attributes to HTML Elements']","['https://www.w3schools.com/xml/xquery_syntax.asp', 'https://www.w3schools.com/xml/xquery_select.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/xquery_syntax.asp', 'https://www.w3schools.com/xml/xquery_select.asp']",[],"['View the ""books.xml"" file in your browser.', 'We now want to add our own elements and attributes to the result!', 'The XQuery expression above will generate the following result:', 'The XQuery expression above will generate the following result:']","['We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapters).', 'The XQuery expression above will include both the title element and the lang attribute in the result, like this:', 'The XQuery expression above returns the title elements the exact same way as they are described in the input document.', 'Now, we want to add some HTML elements to the result. We will put the result in an HTML list - together with some text:', 'Next, we want to use the category attribute as a class attribute in the HTML list:']","['As we have seen in a previous chapter, we may include elements and attributes from the input document (""books.xml) in the result:']","['\nfor $x in doc(""books.xml"")/bookstore/book/title\norder by $x\nreturn $x\n', '\n<title lang=""en"">Everyday Italian</title>\n<title lang=""en"">Harry Potter</title>\n<title lang=""en"">Learning XML</title>\n<title lang=""en"">XQuery Kick Start</title>\n', '\n<html>\n<body>\n<h1>Bookstore</h1>\n<ul>\n{\nfor $x in doc(""books.xml"")/bookstore/book\norder by $x/title\nreturn <li>{data($x/title)}. Category: {data($x/@category)}</li>\n}\n</ul>\n</body>\n</html>\n', '\n<html>\n<body>\n<h1>Bookstore</h1>\n<ul>\n<li>Everyday Italian. Category: COOKING</li>\n<li>Harry Potter. Category: CHILDREN</li>\n<li>Learning XML. Category: WEB</li>\n<li>XQuery Kick Start. Category: WEB</li>\n</ul>\n</body>\n</html>\n', '\n<html>\n<body>\n<h1>Bookstore</h1>\n<ul>\n{\nfor $x in doc(""books.xml"")/bookstore/book\norder by $x/title\nreturn <li class=""{data($x/@category)}"">{data($x/title)}</li>\n}\n</ul>\n</body>\n</html>\n', '\n<html>\n<body>\n<h1>Bookstore</h1>\n<ul>\n<li class=""COOKING"">Everyday Italian</li>\n<li class=""CHILDREN"">Harry Potter</li>\n<li class=""WEB"">Learning XML</li>\n<li class=""WEB"">XQuery Kick Start</li>\n</ul>\n</body>\n</html>\n']",[],[]
75,['XQuery Selecting and Filtering'],"['The XML Example Document', 'Selecting and Filtering Elements', 'The for Clause', 'The let Clause', 'The where Clause', 'The order by Clause', 'The return Clause']",[],"['https://www.w3schools.com/xml/xquery_add.asp', 'https://www.w3schools.com/xml/xquery_functions.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/xquery_add.asp', 'https://www.w3schools.com/xml/xquery_functions.asp']",[],"['View the ""books.xml"" file in your browser.', 'Look at the following FLWOR expression:', 'To loop a specific number of times in a for clause, you may use the to keyword:', 'The at keyword can be used to count the iteration:', 'The where clause is used to specify one or more criteria for the result:', 'The return clause specifies what is to be returned.']","['We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapters).', 'It is also allowed with more than one in expression in the for clause. Use comma to separate each in expression:']","['As we have seen in the previous chapters, we are selecting and filtering elements with either a Path expression or with a FLWOR expression.', 'The for clause binds a variable to each item returned by the in expression. The for clause results in iteration. There can be multiple for clauses in the same FLWOR expression.', 'The let clause allows variable assignments and it avoids repeating the same expression many times. The let clause does not result in iteration.', 'The order by clause is used to specify the sort order of the result. Here we want to order the result by category and title:']","['\nfor $x in doc(""books.xml"")/bookstore/book\nwhere $x/price>30\norder by $x/title\nreturn $x/title\n', '\nfor $x in (1 to 5)\nreturn <test>{$x}</test>\n', '\n<test>1</test>\n<test>2</test>\n<test>3</test>\n<test>4</test>\n<test>5</test>\n', '\nfor $x at $i in doc(""books.xml"")/bookstore/book/title\nreturn <book>{$i}. {data($x)}</book>\n', '\n<book>1. Everyday Italian</book>\n<book>2. Harry Potter</book>\n<book>3. XQuery Kick Start</book>\n<book>4. Learning XML</book>\n', '\nfor $x in (10,20), $y in (100,200)\nreturn <test>x={$x} and y={$y}</test>\n', '\n<test>x=10 and y=100</test>\n<test>x=10 and y=200</test>\n<test>x=20 and y=100</test>\n<test>x=20 and y=200</test>\n', '\nlet $x := (1 to 5)\nreturn <test>{$x}</test>\n', '\n<test>1 2 3 4 5</test>\n', '\nwhere $x/price>30 and $x/price<100\n', '\nfor $x in doc(""books.xml"")/bookstore/book\norder by $x/@category, $x/title\nreturn $x/title\n', '\n<title lang=""en"">Harry Potter</title>\n<title lang=""en"">Everyday Italian</title>\n<title lang=""en"">Learning XML</title>\n<title lang=""en"">XQuery Kick Start</title>\n', '\nfor $x in doc(""books.xml"")/bookstore/book\nreturn $x/title\n', '\n<title lang=""en"">Everyday Italian</title>\n<title lang=""en"">Harry Potter</title>\n<title lang=""en"">XQuery Kick Start</title>\n<title lang=""en"">Learning XML</title>\n']",[],['for - (optional) binds a variable to each item returned by the in expression|||let - (optional) |||where - (optional) specifies a criteria|||order by - (optional) specifies the sort-order of the result|||return - specifies what to return in the result|||']
76,['XQuery Functions'],"['XQuery Functions', 'XQuery Data Types', 'Examples of Function Calls', 'XQuery User-Defined Functions']","['Syntax', 'Example of a User-defined Function Declared in the Query']","['https://www.w3schools.com/xml/xquery_select.asp', 'https://www.w3schools.com/xml/xml_dtd_intro.asp', 'https://www.w3schools.com/xml/xpath_operators.asp', 'https://www.w3schools.com/xml/xsl_functions.asp', 'https://www.w3schools.com/xml//xml/schema_dtypes_string.asp', 'https://www.w3schools.com/xml//xml/schema_dtypes_date.asp', 'https://www.w3schools.com/xml//xml/schema_dtypes_numeric.asp', 'https://www.w3schools.com/xml//xml/schema_dtypes_misc.asp', 'https://www.w3schools.com/xml/xquery_select.asp', 'https://www.w3schools.com/xml/xml_dtd_intro.asp']",[],"['XQuery 1.0, XPath 2.0, and XSLT 2.0 share the same functions library.', 'XPath Operators', 'XPath Functions', 'You can also define your own functions in XQuery.', 'XQuery shares the same data types as XML Schema 1.0 (XSD).', 'XSD String', 'XSD Numeric', 'Example 1: In an element', 'Example 2: In the predicate of a path expression', 'Example 3: In a let clause', 'If you cannot find the XQuery function you need, you can write your own.', 'User-defined functions can be defined in the query or in a separate library.', 'Notes on user-defined functions: ']",['A call to a function can appear where an expression may appear. Look at the examples below:'],['XQuery is built on XPath expressions. XQuery 1.0 and XPath 2.0 share the same data model and support the same functions and operators. '],"['\n<name>{upper-case($booktitle)}</name>\n', '\ndoc(""books.xml"")/bookstore/book[substring(title,1,5)=\'Harry\']\n', '\nlet $name := (substring($booktitle,1,4))\n', '\ndeclare function prefix:function_name($parameter as datatype)\nas returnDatatype\n{\n\xa0...function code here...\n};', '\ndeclare function local:minPrice($p as xs:decimal?,$d as xs:decimal?)\n    as xs:decimal?\n{\nlet $disc := ($p * $d) div 100\nreturn ($p - $disc)\n};\nBelow is an example of how to call the function above:\n<minPrice>{local:minPrice($book/price,$book/discount)}</minPrice>\n']",[],['Use the declare function keyword|||The name of the function must be prefixed|||The data type of the parameters are mostly the same as the data types defined in XML Schema|||The body of the function must be surrounded by curly braces|||']
77,['DTD Tutorial'],"['What is a DTD?', 'Why Use a DTD?', 'An Internal DTD Declaration', 'An External DTD Declaration']","['XML document with an internal DTD', 'XML document with a reference to an external DTD']","['https://www.w3schools.com/xml/xquery_functions.asp', 'https://www.w3schools.com/xml/xml_dtd_building.asp', 'https://www.w3schools.com/xml/note_in_dtd.xml', 'https://www.w3schools.com/xml/note_ex_dtd.xml', 'https://www.w3schools.com/xml/xquery_functions.asp', 'https://www.w3schools.com/xml/xml_dtd_building.asp']",[],"['A DTD is a Document Type Definition.', 'An application can use a DTD to verify that XML data is valid.', 'In the XML file, select ""view source"" to view the DTD.', 'The DTD above is interpreted like this:', 'And here is the file ""note.dtd"", which contains the DTD:']","['A DTD defines the structure and the legal elements and attributes of an XML document.', 'With a DTD, independent groups of people can agree on a standard DTD for interchanging data.', 'If the DTD is declared inside the XML file, it must be wrapped inside the <!DOCTYPE> definition:', 'If the DTD is declared in an external file, the <!DOCTYPE> definition must contain a reference to the DTD file:']",[],"['\n<?xml version=""1.0""?>\n<!DOCTYPE note [\n  <!ELEMENT note (to,from,heading,body)>\n  <!ELEMENT to      (#PCDATA)>\n  <!ELEMENT from    (#PCDATA)>\n  <!ELEMENT heading (#PCDATA)>\n  <!ELEMENT body    (#PCDATA)>\n]>\n<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don\'t forget me this weekend</body>\n</note>\n', '\n<?xml version=""1.0""?>\n<!DOCTYPE note SYSTEM ""note.dtd"">\n<note>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don\'t forget me this weekend!</body>\n</note>\n', '\n<!ELEMENT note (to,from,heading,body)>\n<!ELEMENT to (#PCDATA)>\n<!ELEMENT from (#PCDATA)>\n<!ELEMENT heading (#PCDATA)>\n<!ELEMENT body (#PCDATA)>\n']",[],"['!DOCTYPE note  defines that the root element of this document is note|||!ELEMENT note  defines that the note element must contain four elements: ""to,from,heading,body""|||!ELEMENT to  defines the to element\xa0to be of type ""#PCDATA""|||!ELEMENT from  defines the from element to be of type ""#PCDATA""|||!ELEMENT heading defines the heading element to be of type ""#PCDATA""|||!ELEMENT body defines the body element to be of type ""#PCDATA""|||']"
78,['DTD - XML Building Blocks'],"['The Building Blocks of XML Documents', 'Elements', 'Attributes', 'Entities', 'PCDATA', 'CDATA']",[],"['https://www.w3schools.com/xml/xml_dtd_intro.asp', 'https://www.w3schools.com/xml/xml_dtd_elements.asp', 'https://www.w3schools.com/xml/xml_dtd_intro.asp', 'https://www.w3schools.com/xml/xml_dtd_elements.asp']",[],"['The main building blocks of both XML and HTML documents are elements.', 'Elements are the main building blocks of both XML and HTML documents.', 'Attributes provide  extra information about elements.', 'The following entities are predefined in XML:', 'PCDATA means parsed character data.', 'Tags inside the text will be treated as markup and entities will be expanded.', 'CDATA means character data.']","['Seen from a DTD point of view, all XML documents are made up by the following building blocks:', 'Some characters have a special meaning in XML, like the less than sign (<) that defines the start of an XML tag.', 'Think of character data as the text found between the start tag and the end tag of an XML element.', 'PCDATA is text that WILL be parsed by a parser. The text will be examined by the parser for entities and markup.']","['Examples of HTML elements are ""body"" and ""table"". Examples of XML elements could be""note"" and ""message"". Elements can contain text, other elements, or be empty. Examples of empty HTML elements are ""hr"", ""br"" and""img"".', 'Attributes are always placed inside the opening tag of an element. Attributesalways come in name/value pairs. The following ""img"" element has additional information about a source file:', 'The name of the element is ""img"". The name of the attribute is""src"". The value of the attribute is ""computer.gif"".Since the element itself is empty it is closed by a "" /"".', 'Most of you know the HTML entity: ""&nbsp;"". This ""no-breaking-space"" entity is used in HTML to insert an extra space in a document.Entities are expanded when a document is parsed by an XML parser.', 'However, parsed character data should not contain any &, <, or > characters; these need to be represented by the &amp; &lt; and &gt; entities, respectively.', 'CDATA is text that will NOT be parsed by a parser.Tags inside the text will NOT be treated as markup and entities will not be expanded.']","['\n<body>some text</body>\n<message>some text</message>\n', '\n<img src=""computer.gif"" />\n']","['Entity References|||Character&&&&lt;|||<&&&&gt;|||>&&&&amp;|||&&&&&quot;|||""&&&&apos;|||\'']",['Elements|||Attributes|||Entities|||PCDATA|||CDATA|||']
79,['DTD - Elements'],"['Declaring Elements', 'Empty Elements', 'Elements with Parsed Character Data', 'Elements with any Contents', 'Elements with Children (sequences)', 'Declaring Only One Occurrence of an Element', 'Declaring Minimum One Occurrence of an Element', 'Declaring Zero or More Occurrences of an Element', 'Declaring Zero or One Occurrences of an Element\xa0', 'Declaring either/or Content', 'Declaring Mixed Content']",[],"['https://www.w3schools.com/xml/xml_dtd_building.asp', 'https://www.w3schools.com/xml/xml_dtd_attributes.asp', 'https://www.w3schools.com/xml/xml_dtd_building.asp', 'https://www.w3schools.com/xml/xml_dtd_attributes.asp']",[],"['In a DTD, elements are declared with an ELEMENT declaration.', 'In a DTD, XML elements are declared with the following syntax:', 'Empty elements are declared with the category keyword EMPTY:']","['Elements with only parsed character data are declared with #PCDATA inside parentheses:', 'Elements declared with the category keyword ANY, can contain any combination of parsable data:', 'Elements with one or more children are declared with the name of the children elements inside parentheses:', 'The example above declares that the child element ""message"" must occur once, and only once inside the ""note"" element.']","['When children are declared in a sequence separated by commas, the children must appear in the same sequence in the document.In a full declaration, the children must also be declared, and the children can also have children.The full declaration of the ""note"" element is:', 'The + sign in the example above declares that the child element ""message"" must occurone or more times inside the ""note"" element.', 'The * sign in the example above declares that the child element ""message"" can occur zero or more times inside the ""note"" element.', 'The ? sign in the example above declares that the child element ""message"" can occur zero or one time inside the ""note"" element.', 'The example above declares that the ""note"" element must contain a ""to"" element, a ""from""element, a ""header"" element, and either a ""message"" or a ""body"" element.', 'The example above declares that the ""note"" element can contain zero or more occurrences of parsed character data, ""to"", ""from"", ""header"", or ""message"" elements.']","['\n<!ELEMENT element-name category>or<!ELEMENT element-name (element-content)>\n', '\n<!ELEMENT element-name EMPTY>\nExample:\n<!ELEMENT br EMPTY>\nXML example:\n<br />\n', '\n<!ELEMENT element-name (#PCDATA)>\nExample:\n<!ELEMENT from (#PCDATA)>\n', '\n<!ELEMENT element-name ANY>\nExample:\n<!ELEMENT note ANY>\n', '\n<!ELEMENT element-name (child1)>\nor\n<!ELEMENT element-name (child1,child2,...)>\nExample:\n<!ELEMENT note (to,from,heading,body)>\n', '\n<!ELEMENT note (to,from,heading,body)>\n<!ELEMENT to      (#PCDATA)>\n<!ELEMENT from    (#PCDATA)>\n<!ELEMENT heading (#PCDATA)>\n<!ELEMENT body    (#PCDATA)>\n', '\n<!ELEMENT element-name (child-name)>\nExample:\n<!ELEMENT note (message)>\n', '\n<!ELEMENT element-name (child-name+)>\nExample:\n<!ELEMENT note (message+)>\n', '\n<!ELEMENT element-name (child-name*)>\nExample:\n<!ELEMENT note (message*)>\n', '\n<!ELEMENT element-name (child-name?)>\nExample:\n<!ELEMENT note (message?)>\n', '\n<!ELEMENT note (to,from,header,(message|body))>\n', '\n<!ELEMENT note (#PCDATA|to|from|header|message)*>\n']",[],[]
80,['DTD - Attributes'],"['Declaring Attributes', 'A Default Attribute Value', '#REQUIRED', '#IMPLIED', '#FIXED', 'Enumerated Attribute Values']","['Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example']","['https://www.w3schools.com/xml/xml_dtd_elements.asp', 'https://www.w3schools.com/xml/xml_dtd_el_vs_attr.asp', 'https://www.w3schools.com/xml/xml_dtd_elements.asp', 'https://www.w3schools.com/xml/xml_dtd_el_vs_attr.asp']",[],"['In a DTD, attributes are declared with an ATTLIST declaration.', 'An attribute declaration has the following syntax:', 'The attribute-type can be one of the following:', 'The attribute-value can be one of the following:']",['Use enumerated attribute values when you want the attribute value to be one of a fixed set of legal values.'],"['In the example above, the ""square"" element is defined to be an empty element witha ""width"" attribute of\xa0 type CDATA. If no width is specified, it has a defaultvalue of 0.', ""Use the #REQUIRED keyword if you don't have an option for a default value, but still want to force the attribute to be present."", ""Use the #IMPLIED keyword if you don't want to force the author to include an attribute, and you don't have an option for a default value."", 'Use the #FIXED keyword when you want an attribute to have a fixed valuewithout allowing the author to change it. If an author includes another value,the XML parser will return an error.']","['\n<!ATTLIST element-name attribute-name attribute-type attribute-value>\nDTD example:\n<!ATTLIST payment type CDATA ""check"">\nXML example:\n<payment type=""check"" />\n\n', '\nDTD:\n<!ELEMENT square EMPTY>\n<!ATTLIST square width CDATA ""0"">\nValid XML:\n<square width=""100"" />\n', '\n<!ATTLIST element-name attribute-name attribute-type #REQUIRED>\n', '\nDTD:\n<!ATTLIST person number CDATA #REQUIRED>\nValid XML:\n<person number=""5677"" />\nInvalid XML:\n<person />\n', '\n<!ATTLIST element-name attribute-name attribute-type #IMPLIED>\n', '\nDTD:\n<!ATTLIST contact fax CDATA #IMPLIED>\nValid XML:\n<contact fax=""555-667788"" />\nValid XML:\n<contact />\n', '\n<!ATTLIST element-name attribute-name attribute-type #FIXED ""value"">\n', '\nDTD:\n<!ATTLIST sender company CDATA #FIXED ""Microsoft"">\nValid XML:\n<sender company=""Microsoft"" />\nInvalid XML:\n<sender company=""W3Schools"" />\n', '\n<!ATTLIST element-name attribute-name (en1|en2|..) default-value>\n', '\nDTD:\n<!ATTLIST payment type (check|cash) ""cash"">\nXML example:\n<payment type=""check"" />\nor\n<payment type=""cash"" />\n']","['Type|||Description&&&CDATA|||The value is character data&&&(en1|en2|..)|||The value must be one from an enumerated list&&&ID|||The value is a unique id &&&IDREF|||The value is the id of another element&&&IDREFS|||The value is a list of other ids&&&NMTOKEN|||The value is a valid XML name&&&NMTOKENS|||The value is a list of valid XML names&&&ENTITY|||The value is an entity &&&ENTITIES|||The value is a list of entities&&&NOTATION|||The value is a name of a notation&&&xml:|||The value is a predefined xml value', 'Value|||Explanation&&&value|||The default value of the attribute&&&#REQUIRED|||The attribute is required&&&#IMPLIED|||The attribute is optional&&&#FIXED value|||The attribute value is fixed']",[]
81,['XML Elements vs. Attributes'],"['Use of Elements vs. Attributes', 'My Favorite Way', 'Avoid using attributes?', 'An Exception to my Attribute Rule']",[],"['https://www.w3schools.com/xml/xml_dtd_attributes.asp', 'https://www.w3schools.com/xml/xml_dtd_entities.asp', 'https://www.w3schools.com/xml/xml_dtd_attributes.asp', 'https://www.w3schools.com/xml/xml_dtd_entities.asp']",[],"['Data can be stored in child elements or in attributes.', 'Take a look at these examples:', 'I like to store data in child elements.', 'The following three XML documents contain exactly the same information:', 'A date attribute is used in the first example:', 'A date element is used in the second example:', 'An expanded date element is used in the third: (THIS IS MY FAVORITE):', 'Should you avoid using attributes?', 'Some of the problems with attributes are:', ""Don't end up like this (this is not how XML should be used):"", 'Rules always have exceptions.', 'My rule about attributes has one exception:']","['In XML, there are no rules about when to use attributes, and when to use child elements.']","['In the first example sex is an attribute. In the last, sex is a child element. Both examples provide the same information.', 'There are no rules about when to use attributes, and when to use child elements. My experience is that attributes are handy in HTML, but in XML you should try to avoid them. Use child elements if the information feels like data.', 'If you use attributes as containers for data, you end up with documents that are difficult to read and maintain. Try to use  elements todescribe data. Use attributes only to provide information that is not relevant to the data.', 'Sometimes I assign ID references to elements. These ID references can be used to access XML elements in much the same way as the NAME orID attributes in HTML. This example demonstrates this:', 'The ID in these examples is just a counter, or a unique identifier, to identify the different notes in the XML file, and not a part of the note data.', 'What I am trying to say here is that metadata (data about data) should be stored as attributes, and that data itself should be stored as elements.']","['\n<person sex=""female"">\n\xa0\n<firstname>Anna</firstname>\n\xa0\n<lastname>Smith</lastname>\n</person>\n', '<person>\n\xa0\n<sex>female</sex>\n\xa0\n<firstname>Anna</firstname>\n\xa0\n<lastname>Smith</lastname>\n</person>\n', '\n<note date=""12/11/2002"">\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don\'t forget me this weekend!</body>\n</note>\n', ""\n<note>\n\xa0\n<date>12/11/2002</date>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don't forget me this weekend!</body>\n</note>\n"", ""\n<note>\n\xa0\n<date>\n  \xa0\xa0\xa0\n  <day>12</day>\n  \xa0\xa0\xa0\n  <month>11</month>\n  \xa0\xa0\xa0\n  <year>2002</year>\n\xa0\n</date>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don't forget me this weekend!</body>\n</note>\n"", '\n<note day=""12"" month=""11"" year=""2002""\nto=""Tove"" from=""Jani"" heading=""Reminder""\nbody=""Don\'t forget me this weekend!"">\n</note>\n', '\n<messages>\n  <note id=""p501"">\n    \xa0\n    <to>Tove</to>\n    \xa0\n    <from>Jani</from>\n    \xa0\n    <heading>Reminder</heading>\n    \xa0\n    <body>Don\'t forget me this weekend!</body>\n  </note>\n  <note id=""p502"">\n    \xa0\n    <to>Jani</to>\n    \xa0\n    <from>Tove</from>\n    \xa0\n    <heading>Re: Reminder</heading>\n    \xa0\n    <body>I will not!</body>\n  </note>\n</messages>\n']",[],['attributes cannot contain multiple values (child elements can)|||attributes are not easily expandable (for future changes)|||attributes cannot describe structures (child elements can)|||attributes are more difficult to manipulate by program code|||attribute values are not easy to test against a DTD|||']
82,['DTD - Entities'],"['An Internal Entity Declaration', 'An External Entity Declaration']","['Syntax', 'Example', 'Syntax', 'Example']","['https://www.w3schools.com/xml/xml_dtd_el_vs_attr.asp', 'https://www.w3schools.com/xml/xml_dtd_examples.asp', 'https://www.w3schools.com/xml/xml_dtd_el_vs_attr.asp', 'https://www.w3schools.com/xml/xml_dtd_examples.asp']",[],"['Entities are used to define shortcuts to special characters.', 'Entities can be declared internal or external.']","['Note: An entity has three parts: an ampersand (&), an entity name, and a semicolon (;).']",[],"['\n<!ENTITY entity-name ""entity-value"">\n', '\nDTD Example:\n<!ENTITY writer ""Donald Duck."">\n<!ENTITY copyright ""Copyright W3Schools."">\nXML example:\n<author>&writer;&copyright;</author>\n', '\n<!ENTITY entity-name SYSTEM ""URI/URL"">\n', '\nDTD Example:\n<!ENTITY writer SYSTEM ""https://www.w3schools.com/entities.dtd"">\n<!ENTITY copyright SYSTEM ""https://www.w3schools.com/entities.dtd"">\nXML example:\n<author>&writer;&copyright;</author>\n\n']",[],[]
83,['DTD Examples'],"['TV Schedule DTD', 'Newspaper Article DTD', 'Product Catalog DTD']",[],"['https://www.w3schools.com/xml/xml_dtd_entities.asp', 'https://www.w3schools.com/xml/schema_intro.asp', 'https://www.w3schools.com/xml/xml_dtd_entities.asp', 'https://www.w3schools.com/xml/schema_intro.asp']",[],[],[],[],"['   \n<!DOCTYPE TVSCHEDULE [\n<!ELEMENT TVSCHEDULE (CHANNEL+)>\n<!ELEMENT CHANNEL (BANNER,DAY+)>\n<!ELEMENT BANNER (#PCDATA)>\n<!ELEMENT DAY (DATE,(HOLIDAY|PROGRAMSLOT+)+)>\n<!ELEMENT HOLIDAY (#PCDATA)>\n<!ELEMENT DATE (#PCDATA)>\n<!ELEMENT PROGRAMSLOT (TIME,TITLE,DESCRIPTION?)>\n<!ELEMENT TIME (#PCDATA)>\n<!ELEMENT TITLE (#PCDATA)>\xa0\n<!ELEMENT DESCRIPTION (#PCDATA)>\n<!ATTLIST TVSCHEDULE NAME CDATA #REQUIRED>\n<!ATTLIST CHANNEL CHAN CDATA #REQUIRED>\n<!ATTLIST PROGRAMSLOT VTR CDATA #IMPLIED>\n<!ATTLIST TITLE RATING CDATA #IMPLIED>\n<!ATTLIST TITLE LANGUAGE CDATA #IMPLIED>\n]>\n  \n', '\n<!DOCTYPE NEWSPAPER [\n<!ELEMENT NEWSPAPER (ARTICLE+)>\n<!ELEMENT ARTICLE (HEADLINE,BYLINE,LEAD,BODY,NOTES)>\n<!ELEMENT HEADLINE (#PCDATA)>\n<!ELEMENT BYLINE (#PCDATA)>\n<!ELEMENT LEAD (#PCDATA)>\n<!ELEMENT BODY (#PCDATA)>\n<!ELEMENT NOTES (#PCDATA)>\n<!ATTLIST ARTICLE AUTHOR CDATA #REQUIRED>\n<!ATTLIST ARTICLE EDITOR CDATA #IMPLIED>\n<!ATTLIST ARTICLE DATE CDATA #IMPLIED>\n<!ATTLIST ARTICLE EDITION CDATA #IMPLIED>\n<!ENTITY NEWSPAPER ""Vervet Logic Times"">\n<!ENTITY PUBLISHER ""Vervet Logic Press"">\n<!ENTITY COPYRIGHT ""Copyright 1998 Vervet Logic Press"">\n]>\n', ' \n<!DOCTYPE CATALOG [\n<!ENTITY AUTHOR ""John Doe"">\n<!ENTITY COMPANY ""JD Power Tools, Inc."">\n<!ENTITY EMAIL ""jd@jd-tools.com"">\n<!ELEMENT CATALOG (PRODUCT+)>\n<!ELEMENT PRODUCT\n(SPECIFICATIONS+,OPTIONS?,PRICE+,NOTES?)>\n<!ATTLIST PRODUCT\nNAME CDATA #IMPLIED\nCATEGORY (HandTool|Table|Shop-Professional) ""HandTool""\nPARTNUM CDATA #IMPLIED\nPLANT (Pittsburgh|Milwaukee|Chicago) ""Chicago""\nINVENTORY (InStock|Backordered|Discontinued) ""InStock"">\n<!ELEMENT SPECIFICATIONS (#PCDATA)>\n<!ATTLIST SPECIFICATIONS\nWEIGHT CDATA #IMPLIED\nPOWER CDATA #IMPLIED>\n<!ELEMENT OPTIONS (#PCDATA)>\n<!ATTLIST OPTIONS\nFINISH (Metal|Polished|Matte) ""Matte""\nADAPTER (Included|Optional|NotApplicable) ""Included""\nCASE (HardShell|Soft|NotApplicable) ""HardShell"">\n<!ELEMENT PRICE (#PCDATA)>\n<!ATTLIST PRICE\nMSRP CDATA #IMPLIED\nWHOLESALE CDATA #IMPLIED\nSTREET CDATA #IMPLIED\nSHIPPING CDATA #IMPLIED>\n<!ELEMENT NOTES (#PCDATA)>\n]>\n']",[],[]
84,['XML Schema Tutorial'],"['What is an XML Schema?', 'Why Learn XML Schema?', 'XML Schemas Support Data Types', 'XML Schemas use XML Syntax', 'XML Schemas Secure Data Communication', 'Well-Formed is Not Enough']",['XSD Example'],"['https://www.w3schools.com/xml/xml_dtd_examples.asp', 'https://www.w3schools.com/xml/schema_howto.asp', 'https://www.w3schools.com/xml/xml_dtd_examples.asp', 'https://www.w3schools.com/xml/schema_howto.asp']",[],"['An XML Schema describes the structure of an XML document.', 'The XML Schema language is also referred to as XML Schema Definition (XSD).', 'In the XML world, hundreds of standardized XML formats are in daily use. ', 'Many of these XML standards are defined by XML Schemas.', 'XML Schema is an XML-based (and more powerful) alternative to DTD.', 'One of the greatest strength of XML Schemas is the support for data types.', 'Another great strength about XML Schemas is that they are written in XML.', 'XML Schemas are extensible, because they are written in XML.', 'With an extensible Schema definition you can:', 'However, an XML element with a data typelike this:', '<date type=""date"">2004-03-11</date>']","['The purpose of an XML Schema is to define the legal building blocks of an XMLdocument:', 'With XML Schemas, the sender can describe the data in a way that the receiverwill understand.', 'A date like: ""03-11-2004"" will, in some countries, be interpreted as 3.Novemberand in other countries as 11.March.', 'ensures a mutual understanding of the content, because the XML data type ""date""requires the format ""YYYY-MM-DD"".', 'A well-formed XML document is a document that conforms to the XML syntaxrules, like:', 'Even if documents are well-formed they can still contain errors, and those errors can have serious consequences.']","['When sending data from a sender to a receiver, it is essential that both partshave the same ""expectations"" about the content.', 'Think of the following situation: you order 5 gross of laser printers, instead of 5 laserprinters. With XML Schemas, most of these errors can be caught by yourvalidating software.']","['\n<?xml version=""1.0""?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">\n<xs:element name=""note"">\n\xa0\n<xs:complexType>\n\xa0\xa0\xa0\n<xs:sequence>\n\xa0\xa0\xa0\xa0\xa0\n<xs:element name=""to"" type=""xs:string""/>\n\xa0\xa0\xa0\xa0\xa0\n<xs:element name=""from"" type=""xs:string""/>\n\xa0\xa0\xa0\xa0\xa0\n<xs:element name=""heading"" type=""xs:string""/>\n\xa0\xa0\xa0\xa0\xa0\n<xs:element name=""body"" type=""xs:string""/>\n\xa0\xa0\xa0\n</xs:sequence>\n\xa0\n</xs:complexType>\n</xs:element>\n</xs:schema>']",[],"[""the elements and attributes that can appear in a document|||the number of (and order of) child elements|||data types for elements and attributes|||default and fixed values for elements and attributes|||It is easier to describe allowable document content|||It is easier to validate the correctness of data|||It is easier to define data facets (restrictions on data)|||It is easier to define data patterns (data formats)|||It is easier to convert data between different data types|||You don't have to learn a new language|||You can use your XML editor to edit your Schema files|||You can use your XML parser to parse your Schema files|||You can manipulate your Schema with the XML DOM|||You can transform your Schema with XSLT|||Reuse your Schema in other Schemas|||Create your own data types derived from the standard types|||Reference multiple schemas in the same document|||it must begin with the XML declaration|||it must have one unique root element|||start-tags must have matching end-tags|||elements are case sensitive|||all elements must be closed|||all elements must be properly nested|||all attribute values must be quoted|||entities must be used for special characters|||""]"
85,['XSD How To?'],"['A Simple XML Document', 'A DTD File', 'An XML Schema', 'A Reference to a DTD', 'A Reference to an XML Schema']",[],"['https://www.w3schools.com/xml/schema_intro.asp', 'https://www.w3schools.com/xml/schema_schema.asp', 'https://www.w3schools.com/xml/schema_intro.asp', 'https://www.w3schools.com/xml/schema_schema.asp']",[],"['XML documents can have a reference to a DTD or to an XML Schema.', 'Look at this simple XML document called ""note.xml"":', 'This XML document has a reference to a DTD:', 'This XML document has a reference to an XML Schema:']","['The following example is a DTD file called ""note.dtd"" thatdefines the elements of the XML document above (""note.xml""):', 'The first line defines the note element to have four child elements: ""to, from, heading, body"".', 'Line 2-5 defines the to, from, heading, body  elements  to be of type ""#PCDATA"".']","['The following example is an XML Schema file called ""note.xsd"" that defines the elements of the XML document above (""note.xml""):', 'The note element is a  complex type because it contains other elements. The other elements (to, from, heading, body) are simple types because they donot contain other elements. You will learn more about simple and complex types in the following chapters.']","['\n<?xml version=""1.0""?>\n<note>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don\'t forget me this weekend!</body>\n</note>', '\n<!ELEMENT note (to, from, heading, body)>\n<!ELEMENT to (#PCDATA)>\n<!ELEMENT from (#PCDATA)>\n<!ELEMENT heading (#PCDATA)>\n<!ELEMENT body (#PCDATA)>\n', '\n<?xml version=""1.0""?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""\ntargetNamespace=""https://www.w3schools.com""\nxmlns=""https://www.w3schools.com""\nelementFormDefault=""qualified"">\n<xs:element name=""note"">\n\xa0\n<xs:complexType>\n\xa0\xa0\xa0\n<xs:sequence>\n\xa0\xa0\xa0\xa0\xa0\n<xs:element name=""to"" type=""xs:string""/>\n\xa0\xa0\xa0\xa0\xa0\n<xs:element name=""from"" type=""xs:string""/>\n\xa0\xa0\xa0\xa0\xa0\n<xs:element name=""heading"" type=""xs:string""/>\n\xa0\xa0\xa0\xa0\xa0\n<xs:element name=""body"" type=""xs:string""/>\n\xa0\xa0\xa0\n</xs:sequence>\n\xa0\n</xs:complexType>\n</xs:element>\n</xs:schema>\n', '\n<?xml version=""1.0""?>\n<!DOCTYPE note SYSTEM\n""https://www.w3schools.com/xml/note.dtd"">\n<note>\n\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don\'t forget me this weekend!</body>\n</note>\n', '\n<?xml version=""1.0""?>\n<note\nxmlns=""https://www.w3schools.com""\nxmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\nxsi:schemaLocation=""https://www.w3schools.com/xml note.xsd"">\xa0\n<to>Tove</to>\n\xa0\n<from>Jani</from>\n\xa0\n<heading>Reminder</heading>\n\xa0\n<body>Don\'t forget me this weekend!</body>\n</note>\n']",[],[]
86,['XSD - The <schema> Element'],"['The <schema> Element', 'Referencing a Schema in an XML Document']",[],"['https://www.w3schools.com/xml/schema_howto.asp', 'https://www.w3schools.com/xml/schema_simple.asp', 'https://www.w3schools.com/xml/schema_howto.asp', 'https://www.w3schools.com/xml/schema_simple.asp']",[],"['The <schema> element is the root element of every XML Schema.', 'The <schema> element is the root element of every XML Schema:', 'The following fragment:', 'This fragment:', 'This fragment:', 'indicates that the default namespace is ""https://www.w3schools.com"".', 'This fragment:', 'This XML document has a reference to an XML Schema:', 'The following fragment:', 'Once you have the XML Schema Instance namespace available:']",['The <schema> element may contain some attributes. A schema declaration often looks something like this:'],"['indicates that the elements and data types used in the schema come from the ""http://www.w3.org/2001/XMLSchema"" namespace. It also specifies that the elements and data types that come from the ""http://www.w3.org/2001/XMLSchema"" namespace should be prefixed with xs:', 'indicates that the elements defined by this schema (note, to, from, heading, body.) come from the ""https://www.w3schools.com"" namespace.', 'indicates that any elements used by the XML instance document which were declared in this schema must be namespace qualified.', 'specifies the default namespace declaration. This declaration tells the schema-validator that all the elements used in this XML document are declared in the ""https://www.w3schools.com"" namespace.', 'you can use the schemaLocation attribute. This attribute has two values, separated by a space. The first value is the namespace to use. The second value is the location of the XML schema to use for that namespace:']","['\n<?xml version=""1.0""?>\n<xs:schema>...\n...\n</xs:schema>\n', '\n<?xml version=""1.0""?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""\ntargetNamespace=""https://www.w3schools.com""\nxmlns=""https://www.w3schools.com""\nelementFormDefault=""qualified"">...\n...</xs:schema>\n', '\nxmlns:xs=""http://www.w3.org/2001/XMLSchema""\n', '\ntargetNamespace=""https://www.w3schools.com""\n', '\nxmlns=""https://www.w3schools.com""', '\nelementFormDefault=""qualified""', '\n<?xml version=""1.0""?>\n<note xmlns=""https://www.w3schools.com""\nxmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\nxsi:schemaLocation=""https://www.w3schools.com note.xsd"">\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don\'t forget me this weekend!</body>\n</note>\n', '\nxmlns=""https://www.w3schools.com""', '\nxmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\n', '\nxsi:schemaLocation=""https://www.w3schools.com note.xsd""']",[],[]
87,['XSD Simple Elements'],"['What is a Simple Element?', 'Defining a Simple Element', 'Default and Fixed Values for Simple Elements']",['Example'],"['https://www.w3schools.com/xml/schema_schema.asp', 'https://www.w3schools.com/xml/schema_simple_attributes.asp', 'https://www.w3schools.com/xml/schema_schema.asp', 'https://www.w3schools.com/xml/schema_simple_attributes.asp']",[],"['XML Schemas define the elements of your XML files.', 'The syntax for defining a simple element is: ', 'XML Schema has a lot of built-in data types. The mostcommon types are:', 'Here are some XML elements:', 'And here are the corresponding simple element definitions:', 'Simple elements may have a default value OR a fixed value specified.', 'In the following example the default value is ""red"":', 'In the following example the fixed value is ""red"":']","['A simple element is an XML element that contains only text. It cannot contain any other elements or attributes.', 'A simple element is an XML element that can contain only text. It cannot contain any other elements or attributes.', 'A default value is automatically assigned to the element when no other value is specified.', 'A fixed value is also automatically assigned to the element, and you cannot specify another value.']","['However, the ""only text"" restriction is quite misleading. The text can be of many different types. It can be one of the types included inthe XML Schema definition (boolean, string, date, etc.), or it can be a custom type that you can define yourself.', 'You can also add restrictions (facets) to a data type in order to limit its content, or you can require the data to match a specific pattern.', 'where xxx is the name of the element and yyy is the data type of the element.XML Schema has a lot of built-in data types. The mostcommon types are:xs:stringxs:decimalxs:integerxs:booleanxs:datexs:timeExampleHere are some XML elements:<lastname>Refsnes</lastname><age>36</age><dateborn>1970-03-27</dateborn>And here are the corresponding simple element definitions:<xs:element name=""lastname"" type=""xs:string""/><xs:element name=""age"" type=""xs:integer""/><xs:element name=""dateborn"" type=""xs:date""/>Default and Fixed Values for Simple ElementsSimple elements may have a default value OR a fixed value specified.A default value is automatically assigned to the element when no other value is specified.In the following example the default value is ""red"":<xs:element name=""color"" type=""xs:string"" default=""red""/>A fixed value is also automatically assigned to the element, and you cannot specify another value.In the following example the fixed value is ""red"":<xs:element name=""color"" type=""xs:string"" fixed=""red""/>❮ PreviousNext ❯']","['\n<xs:element name=""xxx"" type=""yyy""/>\n', '\n<lastname>Refsnes</lastname>\n<age>36</age>\n<dateborn>1970-03-27</dateborn>\n', '\n<xs:element name=""lastname"" type=""xs:string""/>\n<xs:element name=""age"" type=""xs:integer""/>\n<xs:element name=""dateborn"" type=""xs:date""/>\n', '\n<xs:element name=""color"" type=""xs:string"" default=""red""/>\n', '\n<xs:element name=""color"" type=""xs:string"" fixed=""red""/>\n']",[],['xs:string|||xs:decimal|||xs:integer|||xs:boolean|||xs:date|||xs:time|||']
88,['XSD Attributes'],"['What is an Attribute?', 'How to Define an Attribute?', 'Default and Fixed Values for Attributes', 'Optional and Required Attributes', 'Restrictions on Content']",['Example'],"['https://www.w3schools.com/xml/schema_simple.asp', 'https://www.w3schools.com/xml/schema_facets.asp', 'https://www.w3schools.com/xml/schema_simple.asp', 'https://www.w3schools.com/xml/schema_facets.asp']",[],"['All attributes are declared as simple types.', 'The syntax for defining an attribute is:', 'XML Schema has a lot of built-in data types. The most common types are:', 'Here is an XML element with an attribute:', 'And here is the corresponding attribute definition:', 'Attributes may have a default value OR a fixed value specified.', 'In the following example the default value is ""EN"":', 'In the following example the fixed value is ""EN"":']","['where xxx is the name of the attribute and yyy specifies the data type of the attribute.', 'A default value is automatically assigned to the attribute when no other value is specified.', 'A fixed value is also automatically assigned to the attribute, and you cannot specify another value.', 'Attributes are optional by default. To specify that the attribute is required, use the ""use"" attribute:', ""When an XML element or attribute has a data type defined, it puts restrictions on theelement's or attribute's content."", 'If an XML element is of type ""xs:date"" and contains a string like ""HelloWorld"", the element will not validate.']","['Simple elements cannot have attributes. If an element has attributes, it is considered to be of a complex type. But the attribute itself is always declared as a simple type.', 'With XML Schemas, you can also add your own restrictions to your XMLelements and attributes. These restrictions are called facets.\xa0You can read more aboutfacets in the next chapter.']","['\n<xs:attribute name=""xxx"" type=""yyy""/>\n', '\n<lastname lang=""EN"">Smith</lastname>\n', '\n<xs:attribute name=""lang"" type=""xs:string""/>\n', '\n<xs:attribute name=""lang"" type=""xs:string"" default=""EN""/>\n', '\n<xs:attribute name=""lang"" type=""xs:string"" fixed=""EN""/>\n', '\n<xs:attribute name=""lang"" type=""xs:string"" use=""required""/>\n']",[],['xs:string|||xs:decimal|||xs:integer|||xs:boolean|||xs:date|||xs:time|||']
89,['XSD Restrictions/Facets'],"['Restrictions on Values', 'Restrictions on a Set of Values', 'Restrictions on a Series of Values', 'Other Restrictions on a Series of Values', 'Restrictions on Whitespace Characters', 'Restrictions on Length', 'Restrictions for Datatypes']",[],"['https://www.w3schools.com/xml/schema_simple_attributes.asp', 'https://www.w3schools.com/xml/schema_complex.asp', 'https://www.w3schools.com/xml/schema_simple_attributes.asp', 'https://www.w3schools.com/xml/schema_complex.asp']",[],['The example above could also have been written like this:'],"['To limit the content of an XML element to a set of acceptable values, we would use the enumeration constraint.', 'The example below defines an element called ""car"" with a restriction. The only acceptable values are: Audi, Golf, BMW:', 'Note: In this case the type ""carType"" can be used by other elements because it is not a part of the ""car"" element.', 'The next example defines an element called ""gender"" with a restriction. The only acceptable value is male OR female:', 'To specify how whitespace characters should be handled, we would use the whiteSpace constraint.', 'To limit the length of a value in an element, we would use the length, maxLength, and minLength constraints.', 'This example defines an element called ""password"" with a restriction. The value must be exactly eight characters:']","['Restrictions are used to define acceptable values for XML elements or attributes. Restrictions on XML elements are called facets.', 'The following example defines an element called ""age"" with a restriction. The value of age cannot be lower than 0 or greater than 120:', 'To limit the content of an XML element to define a series of numbers or letters that can be used, we would use the pattern constraint.', 'The example below defines an element called ""letter"" with a restriction. The only acceptable value is ONE of the LOWERCASE letters from a to z:', 'The next example defines an element called ""initials"" with a restriction. The only acceptable value is THREE of the UPPERCASE letters from a to z:', 'The next example also defines an element called ""initials"" with a restriction. The only acceptable value is THREE of the LOWERCASE OR UPPERCASE letters from a to z:', 'The next example defines an element called ""choice"" with a restriction. The only acceptable value is ONE of the following letters: x, y, OR z:', 'The next example defines an element called ""prodid"" with a restriction. The only acceptable value is FIVE digits in a sequence, and each digit must be in a range from 0 to 9:', 'The example below defines an element called ""letter"" with a restriction. The acceptable value is zero or more occurrences of lowercase letters from a to z:', 'The next example also defines an element called ""letter"" with a restriction. The acceptable value is one or more pairs of letters, each pair consisting of a lower case letter followed by an upper case letter. For example, ""sToP"" will be validated by this pattern, but not ""Stop"" or ""STOP"" or ""stop"":', 'The next example defines an element called ""password"" with a restriction. There must be exactly eight characters in a row and those characters must be lowercase or uppercase letters from a to z, or a number from 0 to 9:', 'This example defines an element called ""address"" with a restriction. The whiteSpace constraint is set to ""preserve"", which means that the XML processor WILL NOT remove any white space characters:', 'This example also defines an element called ""address"" with a restriction. The whiteSpace constraint is set to ""replace"", which means that the XML processor WILL REPLACE all white space characters (line feeds, tabs, spaces, and carriage returns) with spaces:', 'This example also defines an element called ""address"" with a restriction. The whiteSpace constraint is set to ""collapse"", which means that the XML processor WILL REMOVE all white space characters (line feeds, tabs, spaces, carriage returns are replaced with spaces, leading and trailing spaces are removed, and multiple spaces are reduced to a single space):', 'This example defines another element called ""password"" with a restriction. The value must be minimum five characters and maximum eight characters:']","['\n<xs:element name=""age"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:integer"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:minInclusive value=""0""/>\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:maxInclusive value=""120""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType>\n</xs:element>\n', '\n<xs:element name=""car"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:enumeration value=""Audi""/>\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:enumeration value=""Golf""/>\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:enumeration value=""BMW""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType>\n</xs:element>\n', '\n<xs:element name=""car"" type=""carType""/>\n<xs:simpleType name=""carType"">\n  \xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\n    <xs:enumeration value=""Audi""/>\n    \xa0\xa0\xa0\n    <xs:enumeration value=""Golf""/>\n    \xa0\xa0\xa0\n    <xs:enumeration value=""BMW""/>\n  \xa0\n  </xs:restriction>\n</xs:simpleType>\n', '\n<xs:element name=""letter"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""[a-z]""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""initials"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""[A-Z][A-Z][A-Z]""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""initials"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""[a-zA-Z][a-zA-Z][a-zA-Z]""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""choice"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""[xyz]""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""prodid"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:integer"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""[0-9][0-9][0-9][0-9][0-9]""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""letter"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""([a-z])*""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""letter"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""([a-z][A-Z])+""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""gender"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""male|female""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""password"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:pattern value=""[a-zA-Z0-9]{8}""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""address"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:whiteSpace value=""preserve""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""address"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:whiteSpace value=""replace""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""address"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:whiteSpace value=""collapse""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""password"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:length value=""8""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n', '\n<xs:element name=""password"">\xa0\n<xs:simpleType>\n  \xa0\xa0\xa0\n  <xs:restriction base=""xs:string"">\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:minLength value=""5""/>\n    \xa0\xa0\xa0\xa0\xa0\n    <xs:maxLength value=""8""/>\n  \xa0\xa0\xa0\n  </xs:restriction>\n\xa0\n</xs:simpleType></xs:element>\n']","['Constraint|||Description&&&enumeration|||Defines a list of acceptable values&&&fractionDigits|||Specifies the maximum number of decimal places allowed. |||    Must be equal to or greater than zero&&&length|||Specifies the exact number of characters or list items |||    allowed. Must be equal to or greater than zero&&&maxExclusive|||Specifies the upper bounds for numeric values (the value |||    must be less than this value)&&&maxInclusive|||Specifies the upper bounds for numeric values (the value |||    must be less than or equal to this value)&&&maxLength|||Specifies the maximum number of characters or list items |||    allowed. Must be equal to or greater than zero&&&minExclusive|||Specifies the lower bounds for numeric values (the value |||    must be greater than this value)&&&minInclusive|||Specifies the lower bounds for numeric values (the value |||    must be greater than or equal to this value)&&&minLength|||Specifies the minimum number of characters or list items |||    allowed. Must be equal to or greater than zero&&&pattern|||Defines the exact sequence of characters that are |||    acceptable &&&totalDigits|||Specifies the exact number of digits allowed. Must be |||    greater than zero&&&whiteSpace|||Specifies how white space (line feeds, tabs, spaces, and |||    carriage returns) is handled']",[]
90,['XSD Complex Elements'],"['What is a Complex Element?', 'Examples of Complex Elements', 'How to Define a Complex Element']",[],"['https://www.w3schools.com/xml/schema_facets.asp', 'https://www.w3schools.com/xml/schema_complex_empty.asp', 'https://www.w3schools.com/xml/schema_facets.asp', 'https://www.w3schools.com/xml/schema_complex_empty.asp']",[],"['A complex element contains other elements and/or attributes.', 'There are four kinds of complex elements:', 'Note: Each of these elements may contain attributes as well!', 'A complex XML element, ""product"", which is empty:', 'A complex XML element, ""employee"", which contains only other elements:', 'A complex XML element, ""food"", which contains only text:', 'A complex XML element, ""description"", which contains both elements and text:', 'We can define a complex element in an XML Schema two different ways:']","['A complex element is an XML element that contains other elements and/or attributes.', 'Look at this complex XML element, ""employee"", which contains only other elements:', '1. The ""employee"" element can be declared directly by naming the element, like this:', '2. The ""employee"" element can have a type attribute that refers to the name of the complex type to use:', 'If you use the method described above, several elements can refer to the same complex type, like this:', 'You can also base a complex type on an existing complex type and add some elements, like this:']","['If you use the method described above, only the ""employee"" element can use the specified complex type. Note that the child elements, ""firstname"" and ""lastname"", are surrounded by the <sequence> indicator. This means that the child elements must appear in the same order as they are declared. You will learn more about indicators in the XSD Indicators chapter.']","['\n<product pid=""1345""/>\n', '\n<employee>\n\xa0\n<firstname>John</firstname>\n\xa0\n<lastname>Smith</lastname>\n</employee>\n', '\n<food type=""dessert"">Ice cream</food>\n', '\n<description>\nIt happened on <date lang=""norwegian"">03.03.99</date> ....\n</description>\n', '\n<employee>\n\xa0\n<firstname>John</firstname>\n\xa0\n<lastname>Smith</lastname>\n</employee>\n', '\n<xs:element name=""employee"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""firstname"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""lastname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""employee"" type=""personinfo""/>\n<xs:complexType name=""personinfo"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element name=""firstname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""lastname"" type=""xs:string""/>\n  \xa0\n  </xs:sequence>\n</xs:complexType>\n', '\n<xs:element name=""employee"" type=""personinfo""/>\n<xs:element name=""student"" type=""personinfo""/>\n<xs:element name=""member"" type=""personinfo""/>\n<xs:complexType name=""personinfo"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element name=""firstname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""lastname"" type=""xs:string""/>\n  \xa0\n  </xs:sequence>\n</xs:complexType>\n', '\n<xs:element name=""employee"" type=""fullpersoninfo""/>\n<xs:complexType name=""personinfo"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element name=""firstname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""lastname"" type=""xs:string""/>\n  \xa0\n  </xs:sequence>\n</xs:complexType>\n<xs:complexType name=""fullpersoninfo"">\n  \xa0\n  <xs:complexContent>\n    \xa0\xa0\xa0\n    <xs:extension base=""personinfo"">\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:sequence>\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <xs:element name=""address"" type=""xs:string""/>\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <xs:element name=""city"" type=""xs:string""/>\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <xs:element name=""country"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      </xs:sequence>\n    \xa0\xa0\xa0\n    </xs:extension>\n  \xa0\n  </xs:complexContent>\n</xs:complexType>\n']",[],['empty elements|||elements that contain only other elements|||elements that contain only text|||elements that contain both other elements and text|||']
91,['XSD Empty Elements'],['Complex Empty Elements'],[],"['https://www.w3schools.com/xml/schema_complex.asp', 'https://www.w3schools.com/xml/schema_complex_elements.asp', 'https://www.w3schools.com/xml/schema_complex.asp', 'https://www.w3schools.com/xml/schema_complex_elements.asp']",[],"['An empty complex element cannot have contents, only attributes.', 'An empty XML element:']","['However, it is possible to declare the ""product"" element more compactly, like this:']","['The ""product"" element above has no content at all. To define a type with no content, we must define a type that allows elements in its content, but we do not actually declare any elements, like this:', 'In the example above, we define a complex type with a complex content. The complexContent element signals that we intend to restrict or extend the content model of a complex type, and the restriction of integer declares one attribute but does not introduce any element content.', 'Or you can give the complexType element a name, and let the ""product"" element have a type attribute that refers to the name of the complexType (if you use this method, several elements can refer to the same complex type):']","['\n<product prodid=""1345"" />\n', '\n<xs:element name=""product"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:complexContent>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:restriction base=""xs:integer"">\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <xs:attribute name=""prodid"" type=""xs:positiveInteger""/>\n      \xa0\xa0\xa0\xa0\xa0\n      </xs:restriction>\n    \xa0\xa0\xa0\n    </xs:complexContent>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""product"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:attribute name=""prodid"" type=""xs:positiveInteger""/>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""product"" type=""prodtype""/>\n<xs:complexType name=""prodtype"">\n  \xa0\n  <xs:attribute name=""prodid"" type=""xs:positiveInteger""/>\n</xs:complexType>\n']",[],[]
92,['XSD Elements Only'],['Complex Types Containing Elements Only'],[],"['https://www.w3schools.com/xml/schema_complex_empty.asp', 'https://www.w3schools.com/xml/schema_complex_text.asp', 'https://www.w3schools.com/xml/schema_complex_empty.asp', 'https://www.w3schools.com/xml/schema_complex_text.asp']",[],"['An XML element, ""person"", that contains only other elements:', 'You can define the ""person"" element in a schema, like this:']","['An ""elements-only"" complex type contains an element that contains only other elements.']","['Notice the <xs:sequence> tag. It means that the elements defined (""firstname"" and ""lastname"") must appear in that order inside a ""person"" element.', 'Or you can give the complexType element a name, and let the ""person"" element have a type attribute that refers to the name of the complexType (if you use this method, several elements can refer to the same complex type):']","['\n<person>\n\xa0\n<firstname>John</firstname>\n\xa0\n<lastname>Smith</lastname>\n</person>\n', '\n<xs:element name=""person"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""firstname"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""lastname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""person"" type=""persontype""/>\n<xs:complexType name=""persontype"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element name=""firstname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""lastname"" type=""xs:string""/>\n  \xa0\n  </xs:sequence>\n</xs:complexType>\n']",[],[]
93,['XSD Text-Only Elements'],['Complex Text-Only Elements'],[],"['https://www.w3schools.com/xml/schema_complex_elements.asp', 'https://www.w3schools.com/xml/schema_complex_mixed.asp', 'https://www.w3schools.com/xml/schema_complex_elements.asp', 'https://www.w3schools.com/xml/schema_complex_mixed.asp']",[],"['A complex text-only element can contain text and attributes.', 'Here is an example of an XML element, ""shoesize"", that contains text-only:']",['Tip: Use the extension/restriction element to expand or to limit the base simple type for the element.'],"['This type contains only simple content (text and attributes), therefore we add a simpleContent element around the content. When using simple content, you must define an extension OR a restriction within the simpleContent element, like this:', 'The following example declares a complexType, ""shoesize"". The content is defined as an integer value, and the ""shoesize"" element also contains an attribute named ""country"":', 'We could also give the complexType element a name, and let the ""shoesize"" element have a type attribute that refers to the name of the complexType (if you use this method, several elements can refer to the same complex type):']","['\n<xs:element name=""somename"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:simpleContent>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:extension base=""basetype"">\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        ....\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        ....\n      \xa0\xa0\xa0\xa0\xa0\n      </xs:extension>\n    \xa0\xa0\xa0\n    </xs:simpleContent>\n  \xa0\n  </xs:complexType>\n</xs:element>\nOR\n<xs:element name=""somename"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:simpleContent>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:restriction base=""basetype"">\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        ....\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        ....\n      \xa0\xa0\xa0\xa0\xa0\n      </xs:restriction>\n    \xa0\xa0\xa0\n    </xs:simpleContent>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<shoesize country=""france"">35</shoesize>\n', '\n<xs:element name=""shoesize"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:simpleContent>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:extension base=""xs:integer"">\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <xs:attribute name=""country"" type=""xs:string"" />\n      \xa0\xa0\xa0\xa0\xa0\n      </xs:extension>\n    \xa0\xa0\xa0\n    </xs:simpleContent>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""shoesize"" type=""shoetype""/>\n<xs:complexType name=""shoetype"">\n  \xa0\n  <xs:simpleContent>\n    \xa0\xa0\xa0\n    <xs:extension base=""xs:integer"">\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:attribute name=""country"" type=""xs:string"" />\n    \xa0\xa0\xa0\n    </xs:extension>\n  \xa0\n  </xs:simpleContent>\n</xs:complexType>\n']",[],[]
94,['XSD Mixed Content'],['Complex Types with Mixed Content'],[],"['https://www.w3schools.com/xml/schema_complex_text.asp', 'https://www.w3schools.com/xml/schema_complex_indicators.asp', 'https://www.w3schools.com/xml/schema_complex_text.asp', 'https://www.w3schools.com/xml/schema_complex_indicators.asp']",[],"['A mixed complex type element can contain attributes, elements, and text.', 'An XML element, ""letter"", that contains both text and other elements:', 'The following schema declares the ""letter"" element:']",[],"['Note: To enable character data to appear between the child-elements of ""letter"", the mixed attribute must be set to ""true"". The <xs:sequence> tag means that the elements defined (name, orderid and shipdate) must appear in that order inside a ""letter"" element.', 'We could also give the complexType element a name, and let the ""letter"" element have a type attribute that refers to the name of the complexType (if you use this method, several elements can refer to the same complex type):']","['\n<letter>\n\xa0\nDear Mr. <name>John Smith</name>.\n\xa0\nYour order <orderid>1032</orderid>\n\xa0\nwill be shipped on <shipdate>2001-07-13</shipdate>.\n</letter>\n', '\n<xs:element name=""letter"">\n  \xa0\n  <xs:complexType mixed=""true"">\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""name"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""orderid"" type=""xs:positiveInteger""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""shipdate"" type=""xs:date""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""letter"" type=""lettertype""/>\n<xs:complexType name=""lettertype"" mixed=""true"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element name=""name"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""orderid"" type=""xs:positiveInteger""/>\n    \xa0\xa0\xa0\n    <xs:element name=""shipdate"" type=""xs:date""/>\n  \xa0\n  </xs:sequence>\n</xs:complexType>\n']",[],[]
95,['XSD Indicators'],"['Indicators', 'Order Indicators', 'Occurrence Indicators', 'Group Indicators']","['All Indicator', 'Choice Indicator', 'Sequence Indicator', 'maxOccurs Indicator', 'minOccurs Indicator', 'Element Groups', 'Attribute Groups']","['https://www.w3schools.com/xml/schema_complex_mixed.asp', 'https://www.w3schools.com/xml/schema_complex_any.asp', 'https://www.w3schools.com/xml/schema_complex_mixed.asp', 'https://www.w3schools.com/xml/schema_complex_any.asp']",[],"['We can control HOW elements are to be used in documents with indicators.', 'There are seven indicators:', 'Order indicators:', 'Occurrence indicators:', 'Group indicators:', 'Order indicators are used to define the order of the elements.', 'Occurrence indicators are used to define how often an element can occur.', 'A working example:', 'An XML file called ""Myfamily.xml"":', 'Here is the schema file ""family.xsd"":', 'Group indicators are used to define related sets of elements.', 'Element groups are defined with the group declaration, like this:', 'Attribute groups are defined with the attributeGroup declaration, like this:', 'The following example defines an attribute group named ""personattrgroup"":']","['The <choice> indicator specifies that either one child element or another can occur:', 'The <sequence> indicator specifies that the child elements must appear in a specific order:', 'The <maxOccurs> indicator specifies the maximum number of times an element can occur:', 'The <minOccurs> indicator specifies the minimum number of times an element can occur:', 'Tip: To allow an element to appear an unlimited number of times, use the maxOccurs=""unbounded"" statement:', 'After you have defined a group, you can reference it in another definition, like this:', 'After you have defined an attribute group, you can reference it in another definition, like this:']","['The <all> indicator specifies that the child elements can appear in any order, and that each child element must occur only once: ', 'Note: When using the <all> indicator you can set the <minOccurs> indicator to 0 or 1 and the <maxOccurs> indicator can only be set to 1 (the <minOccurs> and <maxOccurs> are described later). ', 'Note: For all ""Order"" and ""Group"" indicators (any, all, choice, sequence, group name, and group reference) the default value for maxOccurs and minOccurs is 1.', 'The example above indicates that the ""child_name"" element can occur a minimum of one time (the default value for minOccurs is 1) and a maximum of ten times in the ""person"" element.', 'The example above indicates that the ""child_name"" element can occur a minimum of zero times and a maximum of ten times in the ""person"" element.', 'The XML file above contains a root element named ""persons"". Inside this root element we have defined three ""person"" elements. Each ""person"" element must contain a ""full_name"" element and it can contain up to five ""child_name"" elements.', 'You must define an all, choice, or sequence element inside the group declaration. The following example defines a group named ""persongroup"", that defines a group of elements that must occur in an exact sequence:']","['\n<xs:element name=""person"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:all>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""firstname"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""lastname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    </xs:all>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""person"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:choice>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""employee"" type=""employee""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""member"" type=""member""/>\n    \xa0\xa0\xa0\n    </xs:choice>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""person"">\n  \xa0\xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""firstname"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""lastname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""person"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""full_name"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""child_name"" type=""xs:string"" maxOccurs=""10""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""person"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""full_name"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""child_name"" type=""xs:string""\n      \xa0\xa0\xa0\xa0\xa0\n      maxOccurs=""10"" minOccurs=""0""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<persons xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\nxsi:noNamespaceSchemaLocation=""family.xsd"">\n<person>\n\xa0\n<full_name>Hege Refsnes</full_name>\n\xa0\n<child_name>Cecilie</child_name>\n</person>\n<person>\n\xa0\n<full_name>Tove Refsnes</full_name>\n\xa0\n<child_name>Hege</child_name>\n\xa0\n<child_name>Stale</child_name>\n\xa0\n<child_name>Jim</child_name>\n\xa0\n<child_name>Borge</child_name>\n</person>\n<person>\n\xa0\n<full_name>Stale Refsnes</full_name>\n</person>\n</persons>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""\nelementFormDefault=""qualified"">\n<xs:element name=""persons"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""person"" maxOccurs=""unbounded"">\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        <xs:complexType>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          <xs:sequence>\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <xs:element name=""full_name"" type=""xs:string""/>\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            <xs:element name=""child_name"" type=""xs:string""\n            \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n            minOccurs=""0"" maxOccurs=""5""/>\n          \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n          </xs:sequence>\n        \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n        </xs:complexType>\n      \xa0\xa0\xa0\xa0\xa0\n      </xs:element>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n</xs:schema>\n', '\n<xs:group name=""groupname"">\n  ...\n</xs:group>\n', '\n<xs:group name=""persongroup"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element name=""firstname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""lastname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""birthday"" type=""xs:date""/>\n  \xa0\n  </xs:sequence>\n</xs:group>\n', '\n<xs:group name=""persongroup"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element name=""firstname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""lastname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    <xs:element name=""birthday"" type=""xs:date""/>\n  \xa0\n  </xs:sequence>\n</xs:group>\n<xs:element name=""person"" type=""personinfo""/>\n<xs:complexType name=""personinfo"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:group ref=""persongroup""/>\n    \xa0\xa0\xa0\n    <xs:element name=""country"" type=""xs:string""/>\n  \xa0\n  </xs:sequence>\n</xs:complexType>\n', '\n<xs:attributeGroup name=""groupname"">\n  ...\n</xs:attributeGroup>\n', '\n<xs:attributeGroup name=""personattrgroup"">\n  \xa0\n  <xs:attribute name=""firstname"" type=""xs:string""/>\n  \xa0\n  <xs:attribute name=""lastname"" type=""xs:string""/>\n  \xa0\n  <xs:attribute name=""birthday"" type=""xs:date""/>\n</xs:attributeGroup>\n', '\n<xs:attributeGroup name=""personattrgroup"">\n  \xa0\n  <xs:attribute name=""firstname"" type=""xs:string""/>\n  \xa0\n  <xs:attribute name=""lastname"" type=""xs:string""/>\n  \xa0\n  <xs:attribute name=""birthday"" type=""xs:date""/>\n</xs:attributeGroup>\n<xs:element name=""person"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:attributeGroup ref=""personattrgroup""/>\n  \xa0\n  </xs:complexType>\n</xs:element>\n']",[],['All|||Choice|||Sequence|||maxOccurs|||minOccurs|||Group name|||attributeGroup name|||']
96,['XSD The <any> Element'],['The <any> Element'],[],"['https://www.w3schools.com/xml/schema_complex_indicators.asp', 'https://www.w3schools.com/xml/schema_complex_anyattribute.asp', 'https://www.w3schools.com/xml/schema_complex_indicators.asp', 'https://www.w3schools.com/xml/schema_complex_anyattribute.asp']",[],"['Look at this schema file, called ""children.xsd"":']","['The <any> element enables us to extend the XML document with elements not specified by the schema!', 'The <any> element enables us to extend the XML document with elements not specified by the schema.']","['The following example is a fragment from an XML schema called ""family.xsd"". It shows a declaration for the ""person"" element. By using the <any> element we can extend (after <lastname>) the content of ""person"" with any element:', 'Now we want to extend the ""person"" element with a ""children"" element. In this case we can do so, even if the author of the schema above never declared any ""children"" element.', 'The XML file below (called ""Myfamily.xml""), uses components from two different schemas; ""family.xsd"" and ""children.xsd"":', 'The XML file above is valid because the schema ""family.xsd"" allows us to extend the ""person"" element with an optional element after the ""lastname"" element.', 'The <any> and <anyAttribute> elements are used to make EXTENSIBLE documents! They allow documents to contain additional elements that are not declared in the main XML schema.']","['\n<xs:element name=""person"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""firstname"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""lastname"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:any minOccurs=""0""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""\ntargetNamespace=""https://www.w3schools.com""\nxmlns=""https://www.w3schools.com""\nelementFormDefault=""qualified"">\n<xs:element name=""children"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""childname"" type=""xs:string""\n      \xa0\xa0\xa0\xa0\xa0\n      maxOccurs=""unbounded""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n  \xa0\n  </xs:complexType>\n</xs:element>\n</xs:schema>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<persons xmlns=""http://www.microsoft.com""\nxmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\nxsi:schemaLocation=""http://www.microsoft.com family.xsd\nhttps://www.w3schools.com children.xsd"">\n<person>\n\xa0\n<firstname>Hege</firstname>\n\xa0\n<lastname>Refsnes</lastname>\n\xa0\n<children>\n  \xa0\xa0\xa0\n  <childname>Cecilie</childname>\n\xa0\n</children>\n</person>\n<person>\n\xa0\n<firstname>Stale</firstname>\n\xa0\n<lastname>Refsnes</lastname>\n</person>\n</persons>\n']",[],[]
97,['XSD The <anyAttribute> Element'],['The <anyAttribute> Element'],[],"['https://www.w3schools.com/xml/schema_complex_any.asp', 'https://www.w3schools.com/xml/schema_complex_subst.asp', 'https://www.w3schools.com/xml/schema_complex_any.asp', 'https://www.w3schools.com/xml/schema_complex_subst.asp']",[],"['Look at this schema file, called ""attribute.xsd"":']","['The <anyAttribute> element enables us to extend the XML document with attributes not specified by the schema!', 'The <anyAttribute> element enables us to extend the XML document with attributes not specified by the schema.', 'The XML file above is valid because the schema ""family.xsd"" allows us to add an attribute to the ""person"" element.']","['The following example is a fragment from an XML schema called ""family.xsd"". It shows a declaration for the ""person"" element. By using the <anyAttribute> element we can add any number of attributes to the ""person"" element:', 'Now we want to extend the ""person"" element with a ""eyecolor"" attribute. In this case we can do so, even if the author of the schema above never declared any ""eyecolor"" attribute.', 'The XML file below (called ""Myfamily.xml""), uses components from two different schemas; ""family.xsd"" and ""attribute.xsd"":', 'The <any> and <anyAttribute> elements are used to make EXTENSIBLE documents! They allow documents to contain additional elements that are not declared in the main XML schema.']","['\n<xs:element name=""person"">\n  \xa0\n  <xs:complexType>\n    \xa0\xa0\xa0\n    <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""firstname"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""lastname"" type=""xs:string""/>\n    \xa0\xa0\xa0\n    </xs:sequence>\n    \xa0\xa0\xa0\n    <xs:anyAttribute/>\n  \xa0\n  </xs:complexType>\n</xs:element>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""\ntargetNamespace=""https://www.w3schools.com""\nxmlns=""https://www.w3schools.com""\nelementFormDefault=""qualified"">\n<xs:attribute name=""eyecolor"">\n  \xa0\n  <xs:simpleType>\n    \xa0\xa0\xa0\n    <xs:restriction base=""xs:string"">\n      \xa0\xa0\xa0\xa0\xa0\n      <xs:pattern value=""blue|brown|green|grey""/>\n    \xa0\xa0\xa0\n    </xs:restriction>\n  \xa0\n  </xs:simpleType>\n</xs:attribute>\n</xs:schema>\n', '\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<persons xmlns=""http://www.microsoft.com""\nxmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\nxsi:SchemaLocation=""http://www.microsoft.com family.xsd\nhttps://www.w3schools.com attribute.xsd"">\n<person eyecolor=""green"">\n\xa0\n<firstname>Hege</firstname>\n\xa0\n<lastname>Refsnes</lastname>\n</person>\n<person eyecolor=""blue"">\n\xa0\n<firstname>Stale</firstname>\n\xa0\n<lastname>Refsnes</lastname>\n</person>\n</persons>\n']",[],[]
98,['XSD Element Substitution'],"['Element Substitution', 'Blocking Element Substitution', 'Using substitutionGroup', 'What are Global Elements?']",[],"['https://www.w3schools.com/xml/schema_complex_anyattribute.asp', 'https://www.w3schools.com/xml/schema_example.asp', 'https://www.w3schools.com/xml/schema_complex_anyattribute.asp', 'https://www.w3schools.com/xml/schema_example.asp']",[],"['With XML Schemas, one element can substitute another element.', 'Look at this fragment of an XML schema:', 'A valid XML document (according to the schema above) could look like this:', 'or like this:', 'Look at this fragment of an XML schema:', 'A valid XML document (according to the schema above) looks like this:', 'BUT THIS IS NO LONGER VALID:']","['In the example above, the ""name"" element is the head element and the ""navn"" element is substitutable for ""name"".', 'To prevent other elements from substituting with a specified element, use the block attribute:']","[""Let's say that we have users from two different countries: England and Norway. We would like the ability to let the user choose whether he or she would like to use the Norwegian element names or the English element names in the XML document."", 'To solve this problem, we could define a substitutionGroup in the XML schema. First, we declare a head element and then we declare the other elements which state that they are substitutable for the head element.', 'The type of the substitutable elements must be the same as, or derived from, the type of the head element. If the type of the substitutable element is the same as the type of the head element you will not have to specify the type of the substitutable element.', 'Note that all elements in the substitutionGroup (the head element and the substitutable elements) must be declared as global elements, otherwise it will not work! ', 'Global elements are elements that are immediate children of the ""schema"" element! Local elements are elements nested within other elements.']","['\n<xs:element name=""name"" type=""xs:string""/>\n<xs:element name=""navn"" substitutionGroup=""name""/>\n', '\n<xs:element name=""name"" type=""xs:string""/>\n<xs:element name=""navn"" substitutionGroup=""name""/>\n<xs:complexType name=""custinfo"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element ref=""name""/>\n  \xa0\n  </xs:sequence>\n</xs:complexType>\n<xs:element name=""customer"" type=""custinfo""/>\n<xs:element name=""kunde"" substitutionGroup=""customer""/>\n', '\n<customer>\n  \xa0\n  <name>John Smith</name>\n</customer>\n', '\n<kunde>\n  \xa0\n  <navn>John Smith</navn>\n</kunde>\n', '\n<xs:element name=""name"" type=""xs:string"" block=""substitution""/>\n', '\n<xs:element name=""name"" type=""xs:string"" block=""substitution""/>\n<xs:element name=""navn"" substitutionGroup=""name""/>\n<xs:complexType name=""custinfo"">\n  \xa0\n  <xs:sequence>\n    \xa0\xa0\xa0\n    <xs:element ref=""name""/>\n  \xa0\n  </xs:sequence>\n</xs:complexType>\n<xs:element name=""customer"" type=""custinfo"" block=""substitution""/>\n<xs:element name=""kunde"" substitutionGroup=""customer""/>\n', '\n<customer>\n  \xa0\n  <name>John Smith</name>\n</customer>\n', '\n<kunde>\n  \xa0\n  <navn>John Smith</navn>\n</kunde>\n']",[],[]
99,['An XSD Example'],"['An XML Document', 'Create an XML Schema', 'Divide the Schema', 'Using Named Types']",[],"['https://www.w3schools.com/xml/schema_complex_subst.asp', 'https://www.w3schools.com/xml/schema_dtypes_string.asp', 'https://www.w3schools.com/xml/schema_complex_subst.asp', 'https://www.w3schools.com/xml/schema_dtypes_string.asp']",[],"['Let\'s have a look at this XML document called ""shiporder.xml"":', 'Now we want to create a schema for the XML document above.', 'Note: The attribute declarations must always come last:', 'Here is the complete listing of the schema file called ""shiporder.xsd"":', 'Here is the new design of the schema file (""shiporder.xsd""):', 'Here is the third design of the schema file (""shiporder.xsd""):']","['The previous design method is very simple, but can be difficult to read and maintain when documents are complex.']","['This chapter will demonstrate how to write an XML Schema. You will also learn that a schema can be written in different ways.', 'The XML document above consists of a root element, ""shiporder"", that contains a required attribute called ""orderid"". The ""shiporder"" element contains three different child elements: ""orderperson"", ""shipto"" and ""item"". The ""item"" elementappears twice, and it contains a ""title"", an optional ""note"" element, a ""quantity"", and a ""price"" element.', 'The line above: xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" tells the XML parser that this document should be validated against a schema. The line: xsi:noNamespaceSchemaLocation=""shiporder.xsd"" specifies WHERE the schema resides (here it is in the same folder as ""shiporder.xml"").', 'We start by opening a new file that we will call ""shiporder.xsd"". To create the schema we could simply follow the structure in the XML document and define each element as we find it. We will start with the standard XML declaration followed by the xs:schema element that defines a schema:', 'In the schema above we use the standard namespace (xs), and the URI associated with this namespace is the Schema language definition, which has the standard value of http://www.w3.org/2001/XMLSchema. ', 'Next, we have to define the ""shiporder"" element. This element has an attribute and it contains other elements, therefore we consider it as a complex type. The child elements of the ""shiporder"" element is surrounded by a xs:sequence element that defines an ordered sequence of sub elements:', 'Then we have to define the ""orderperson"" element as a simple type (because it does not contain any attributes or other elements). The type (xs:string) is prefixed with the namespace prefix associated with XML Schema that indicates a predefined schema data type:', 'Next, we have to define two elements that are of the complex type: ""shipto"" and ""item"". We start by defining the ""shipto"" element:', 'With schemas we can define the number of possible occurrences for an element with the maxOccurs and minOccurs attributes. maxOccurs specifies the maximum number of occurrences for an element and minOccurs specifies the minimum number of occurrences for an element. The default value for both maxOccurs and minOccurs is 1!', 'Now we can define the ""item"" element. This element can appear multiple times inside a ""shiporder"" element. This is specified by setting the maxOccurs attribute of the ""item"" element to ""unbounded"" which means that there can be as many occurrences of the ""item"" element as the author wishes. Notice that the ""note"" element is optional. We have specified this by setting the minOccurs attribute to zero:', 'We can now declare the attribute of the ""shiporder"" element. Since this is a required attribute we specify use=""required"".', 'The next design method is based on defining all elements and attributes first, and then referring to them using the ref attribute.', 'The third design method defines classes or types, that enables us to reuse element definitions. This is done by naming the simpleTypes and complexTypes elements, and then point to them through the type attribute of the element.', 'The restriction element indicates that the datatype is derived from a W3C XML Schema namespace datatype. So, the following fragment means that the value of the element or attribute must be a string value:', 'The restriction element is more often used to apply restrictions to elements. Look at the following lines from the schema above:', 'This indicates that the value of the element or attribute must be a string, it must be exactly six characters in a row, and those characters must be a number from 0 to 9.']","['\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<shiporder orderid=""889923""\nxmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\nxsi:noNamespaceSchemaLocation=""shiporder.xsd"">\n \xa0\n <orderperson>John Smith</orderperson>\n \xa0\n <shipto>\n  \xa0\xa0\xa0\n  <name>Ola Nordmann</name>\n  \xa0\xa0\xa0\n  <address>Langgt 23</address>\n  \xa0\xa0\xa0\n  <city>4000 Stavanger</city>\n  \xa0\xa0\xa0\n  <country>Norway</country>\n \xa0\n </shipto>\n \xa0\n <item>\n  \xa0\xa0\xa0\n  <title>Empire Burlesque</title>\n  \xa0\xa0\xa0\n  <note>Special Edition</note>\n  \xa0\xa0\xa0\n  <quantity>1</quantity>\n  \xa0\xa0\xa0\n  <price>10.90</price>\n \xa0\n </item>\n \xa0\n <item>\n  \xa0\xa0\xa0\n  <title>Hide your heart</title>\n  \xa0\xa0\xa0\n  <quantity>1</quantity>\n  \xa0\xa0\xa0\n  <price>9.90</price>\n \xa0\n </item>\n</shiporder>\n', '\n<?xml version=""1.0"" encoding=""UTF-8"" ?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">...\n</xs:schema>\n', '\n<xs:element name=""shiporder"">\n \xa0\n <xs:complexType>\n  \xa0\xa0\xa0\n  <xs:sequence>\n  \xa0\xa0\xa0\xa0\xa0\n  ...\n  \xa0\xa0\xa0\n  </xs:sequence>\n  \xa0\n </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""orderperson"" type=""xs:string""/>\n', '\n<xs:element name=""shipto"">\n \xa0\n <xs:complexType>\n  \xa0\xa0\xa0\n  <xs:sequence>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""name"" type=""xs:string""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""address"" type=""xs:string""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""city"" type=""xs:string""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""country"" type=""xs:string""/>\n  \xa0\xa0\xa0\n  </xs:sequence>\n \xa0\n </xs:complexType>\n</xs:element>\n', '\n<xs:element name=""item"" maxOccurs=""unbounded"">\n \xa0\n <xs:complexType>\n  \xa0\xa0\xa0\n  <xs:sequence>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""title"" type=""xs:string""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""note"" type=""xs:string"" minOccurs=""0""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""quantity"" type=""xs:positiveInteger""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""price"" type=""xs:decimal""/>\n  \xa0\xa0\xa0\n  </xs:sequence>\n \xa0\n </xs:complexType>\n</xs:element>\n', '\n<xs:attribute name=""orderid"" type=""xs:string"" use=""required""/>\n', '\n<?xml version=""1.0"" encoding=""UTF-8"" ?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">\n<xs:element name=""shiporder"">\n \xa0\n <xs:complexType>\n  \xa0\xa0\xa0\n  <xs:sequence>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""orderperson"" type=""xs:string""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""shipto"">\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n    <xs:complexType>\n     \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n     <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""name"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""address"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""city"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""country"" type=""xs:string""/>\n     \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n     </xs:sequence>\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n    </xs:complexType>\n   \xa0\xa0\xa0\xa0\xa0\n   </xs:element>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element name=""item"" maxOccurs=""unbounded"">\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n    <xs:complexType>\n     \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n     <xs:sequence>\n      \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""title"" type=""xs:string""/>\n      \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""note"" type=""xs:string"" minOccurs=""0""/>\n      \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""quantity"" type=""xs:positiveInteger""/>\n      \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n      <xs:element name=""price"" type=""xs:decimal""/>\n     \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n     </xs:sequence>\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\n    </xs:complexType>\n   \xa0\xa0\xa0\xa0\xa0\n   </xs:element>\n  \xa0\xa0\xa0\n  </xs:sequence>\n  \xa0\xa0\xa0\n  <xs:attribute name=""orderid"" type=""xs:string"" use=""required""/>\n \xa0\n </xs:complexType>\n</xs:element>\n</xs:schema>\n', '\n<?xml version=""1.0"" encoding=""UTF-8"" ?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">\n<!-- definition of simple elements -->\n<xs:element name=""orderperson"" type=""xs:string""/>\n<xs:element name=""name"" type=""xs:string""/>\n<xs:element name=""address"" type=""xs:string""/>\n<xs:element name=""city"" type=""xs:string""/>\n<xs:element name=""country"" type=""xs:string""/>\n<xs:element name=""title"" type=""xs:string""/>\n<xs:element name=""note"" type=""xs:string""/>\n<xs:element name=""quantity"" type=""xs:positiveInteger""/>\n<xs:element name=""price"" type=""xs:decimal""/>\n<!-- definition of attributes -->\n<xs:attribute name=""orderid"" type=""xs:string""/>\n<!-- definition of complex elements -->\n<xs:element name=""shipto"">\n \xa0\n <xs:complexType>\n  \xa0\xa0\xa0\n  <xs:sequence>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""name""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""address""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""city""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""country""/>\n  \xa0\xa0\xa0\n  </xs:sequence>\n \xa0\n </xs:complexType>\n</xs:element>\n<xs:element name=""item"">\n \xa0\n <xs:complexType>\n  \xa0\xa0\xa0\n  <xs:sequence>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""title""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""note"" minOccurs=""0""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""quantity""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""price""/>\n  \xa0\xa0\xa0\n  </xs:sequence>\n \xa0\n </xs:complexType>\n</xs:element>\n<xs:element name=""shiporder"">\n \xa0\n <xs:complexType>\n  \xa0\xa0\xa0\n  <xs:sequence>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""orderperson""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""shipto""/>\n   \xa0\xa0\xa0\xa0\xa0\n   <xs:element ref=""item"" maxOccurs=""unbounded""/>\n  \xa0\xa0\xa0\n  </xs:sequence>\n  \xa0\xa0\xa0\n  <xs:attribute ref=""orderid"" use=""required""/>\n \xa0\n </xs:complexType>\n</xs:element>\n</xs:schema>\n', '\n<?xml version=""1.0"" encoding=""UTF-8"" ?>\n<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">\n<xs:simpleType name=""stringtype"">\n\xa0\n<xs:restriction base=""xs:string""/>\n</xs:simpleType>\n<xs:simpleType name=""inttype"">\n\xa0\n<xs:restriction base=""xs:positiveInteger""/>\n</xs:simpleType>\n<xs:simpleType name=""dectype"">\n\xa0\n<xs:restriction base=""xs:decimal""/>\n</xs:simpleType>\n<xs:simpleType name=""orderidtype"">\n\xa0\n<xs:restriction base=""xs:string"">\n  \xa0\xa0\xa0\n  <xs:pattern value=""[0-9]{6}""/>\n \xa0\n </xs:restriction>\n</xs:simpleType>\n<xs:complexType name=""shiptotype"">\n \xa0\n <xs:sequence>\n  \xa0\xa0\xa0\n  <xs:element name=""name"" type=""stringtype""/>\n  \xa0\xa0\xa0\n  <xs:element name=""address"" type=""stringtype""/>\n  \xa0\xa0\xa0\n  <xs:element name=""city"" type=""stringtype""/>\n  \xa0\xa0\xa0\n  <xs:element name=""country"" type=""stringtype""/>\n \xa0\n </xs:sequence>\n</xs:complexType>\n<xs:complexType name=""itemtype"">\n \xa0\n <xs:sequence>\n  \xa0\xa0\xa0\n  <xs:element name=""title"" type=""stringtype""/>\n  \xa0\xa0\xa0\n  <xs:element name=""note"" type=""stringtype"" minOccurs=""0""/>\n  \xa0\xa0\xa0\n  <xs:element name=""quantity"" type=""inttype""/>\n  \xa0\xa0\xa0\n  <xs:element name=""price"" type=""dectype""/>\n \xa0\n </xs:sequence>\n</xs:complexType>\n<xs:complexType name=""shipordertype"">\n \xa0\n <xs:sequence>\n  \xa0\xa0\xa0\n  <xs:element name=""orderperson"" type=""stringtype""/>\n  \xa0\xa0\xa0\n  <xs:element name=""shipto"" type=""shiptotype""/>\n  \xa0\xa0\xa0\n  <xs:element name=""item"" maxOccurs=""unbounded"" type=""itemtype""/>\n \xa0\n </xs:sequence>\n \xa0\n <xs:attribute name=""orderid"" type=""orderidtype"" use=""required""/>\n</xs:complexType>\n<xs:element name=""shiporder"" type=""shipordertype""/>\n</xs:schema>\n', '\n<xs:restriction base=""xs:string"">\n', '\n<xs:simpleType name=""orderidtype"">\n \xa0\n <xs:restriction base=""xs:string"">\n  \xa0\xa0\xa0\n  <xs:pattern value=""[0-9]{6}""/>\n \xa0\n </xs:restriction>\n</xs:simpleType>\n']",[],[]
100,['XSD String Data Types'],"['String Data Type', 'NormalizedString Data Type', 'Token Data Type', 'String Data Types', 'Restrictions on String Data Types']",[],"['https://www.w3schools.com/xml/schema_example.asp', 'https://www.w3schools.com/xml/schema_dtypes_date.asp', 'https://www.w3schools.com/xml/schema_example.asp', 'https://www.w3schools.com/xml/schema_dtypes_date.asp']",[],"['String data types are used for values that contains character strings.', 'The following is an example of a string declaration in a schema:', 'An element in your document might look like this:', 'Or it might look like this:', 'The normalizedString data type is derived from the String data type.', 'The following is an example of a normalizedString declaration in a schema:', 'An element in your document might look like this:', 'Or it might look like this:', 'Note: In the example above the XML processor will replace the tabs with spaces.', 'The token data type is also derived from the String data type.', 'The following is an example of a token declaration in a schema:', 'An element in your document might look like this:', 'Or it might look like this:', 'Note: In the example above the XML processor will remove the tabs.', 'Restrictions that can be used with String data types:']","['The string data type can contain characters, line feeds, carriage returns, and tab characters.', 'Note: The XML processor will not modify the value if you use the string data type.', 'Note that all of the data types below derive from the String data type (except for string itself)!']","['The normalizedString data type also contains characters, but the XML processor will remove line feeds, carriage returns, and tab characters.', 'The token data type also contains characters, but the XML processor will remove line feeds, carriage returns, tabs, leading and trailing spaces, and multiple spaces.']","['\n<xs:element name=""customer"" type=""xs:string""/>\n', '\n<customer>John Smith</customer>\n', '\n<customer>\xa0\xa0\xa0\xa0\xa0\xa0 John Smith\xa0\xa0\xa0\xa0 </customer>\n', '\n<xs:element name=""customer"" type=""xs:normalizedString""/>\n', '\n<customer>John Smith</customer>\n', '\n<customer>\xa0\xa0\xa0\xa0 John Smith\xa0\xa0\xa0\xa0 </customer>\n', '\n<xs:element name=""customer"" type=""xs:token""/>\n', '\n<customer>John Smith</customer>\n', '\n<customer>\xa0\xa0\xa0\xa0 John Smith\xa0\xa0\xa0\xa0 </customer>\n']","['Name|||Description&&&ENTITIES|||\xa0&&&ENTITY|||\xa0&&&ID|||A string that represents the ID attribute in XML (only used |||    with schema attributes)&&&IDREF|||A string that represents the IDREF attribute in XML (only |||    used with schema attributes)&&&IDREFS|||\xa0&&&language|||A string that contains a valid language id&&&Name|||A string that contains a valid XML name&&&NCName|||\xa0&&&NMTOKEN|||A string that represents the NMTOKEN attribute in XML (only |||    used with schema attributes)&&&NMTOKENS|||\xa0&&&normalizedString|||A string that does not contain line feeds, carriage |||    returns, or tabs&&&QName|||\xa0&&&string|||A string&&&token|||A string that does not contain line feeds, carriage |||    returns, tabs, leading or trailing spaces, or multiple spaces']","['enumeration|||length|||maxLength|||minLength|||pattern (NMTOKENS, IDREFS, and ENTITIES cannot use this constraint)|||whiteSpace|||']"
101,['XSD Date and Time Data Types'],"['Date Data Type', 'Time Data Type', 'DateTime Data Type', 'Duration Data Type', 'Date and Time Data Types', 'Restrictions on Date Data Types']","['Time Zones', 'Time Zones', 'Time Zones', 'Negative Duration']","['https://www.w3schools.com/xml/schema_dtypes_string.asp', 'https://www.w3schools.com/xml/schema_dtypes_numeric.asp', 'https://www.w3schools.com/xml/schema_dtypes_string.asp', 'https://www.w3schools.com/xml/schema_dtypes_numeric.asp']",[],"['Date and time data types are used for values that contain date and time.', 'The date data type is used to specify a date.', 'The date is specified in the following form ""YYYY-MM-DD"" where:', 'Note: All components are required!', 'The following is an example of a date declaration in a schema:', 'An element in your document might look like this:', 'The time data type is used to specify a time.', 'The time is specified in the following form ""hh:mm:ss"" where:', 'Note: All components are required!', 'The following is an example of a time declaration in a schema:', 'An element in your document might look like this:', 'Or it might look like this:', 'The dateTime data type is used to specify a date and a time.', 'The dateTime is specified in the following form ""YYYY-MM-DDThh:mm:ss"" where:', 'Note: All components are required!', 'The following is an example of a dateTime declaration in a schema:', 'An element in your document might look like this:', 'Or it might look like this:', 'The duration data type is used to specify a time interval.', 'The time interval is specified in the following form ""PnYnMnDTnHnMnS"" where:', 'The following is an example of a duration declaration in a schema:', 'An element in your document might look like this:', 'The example above indicates a period of five years.', 'Or it might look like this:', 'The example above indicates a period of five years, two months, and 10 days.', 'Or it might look like this:', 'Or it might look like this:', 'The example above indicates a period of 15 hours.', 'To specify a negative duration, enter a minus sign before the P:', 'The example above indicates a period of minus 10 days.', 'Restrictions that can be used with Date data types:']","['To specify a time zone, you can either enter a date in UTC time by adding a ""Z"" behind the date - like this:', 'or you can specify an offset from the UTC time by adding a positive or negative time behind the date - like this:', 'To specify a time zone, you can either enter a time in UTC time by adding a ""Z"" behind the time - like this:', 'or you can specify an offset from the UTC time by adding a positive or negative time behind the time - like this:', 'To specify a time zone, you can either enter a dateTime in UTC time by adding a ""Z"" behind the time - like this:', 'or you can specify an offset from the UTC time by adding a positive or negative time behind the time - like this:', 'The example above indicates a period of five years, two months, 10 days, and 15 hours.']",[],"['\n<xs:element name=""start"" type=""xs:date""/>\n', '\n<start>2002-09-24</start>\n', '\n<start>2002-09-24Z</start>\n', '\n<start>2002-09-24-06:00</start>\nor\n<start>2002-09-24+06:00</start>\n', '\n<xs:element name=""start"" type=""xs:time""/>\n', '\n<start>09:00:00</start>\n', '\n<start>09:30:10.5</start>\n', '\n<start>09:30:10Z</start>\n', '\n<start>09:30:10-06:00</start>\nor\n<start>09:30:10+06:00</start>\n', '\n<xs:element name=""startdate"" type=""xs:dateTime""/>\n', '\n<startdate>2002-05-30T09:00:00</startdate>\n', '\n<startdate>2002-05-30T09:30:10.5</startdate>\n', '\n<startdate>2002-05-30T09:30:10Z</startdate>\n', '\n<startdate>2002-05-30T09:30:10-06:00</startdate>\nor\n<startdate>2002-05-30T09:30:10+06:00</startdate>\n', '\n<xs:element name=""period"" type=""xs:duration""/>\n', '\n<period>P5Y</period>\n', '\n<period>P5Y2M10D</period>\n', '\n<period>P5Y2M10DT15H</period>\n', '\n<period>PT15H</period>\n', '\n<period>-P10D</period>\n']",['Name|||Description&&&date|||Defines a date value&&&dateTime|||Defines a date and time value&&&duration|||Defines a time interval&&&gDay|||Defines a part of a date - the day (DD)&&&gMonth|||Defines a part of a date - the month (MM)&&&gMonthDay|||Defines a part of a date - the month and day (MM-DD)&&&gYear|||Defines a part of a date - the year (YYYY)&&&gYearMonth|||Defines a part of a date - the year and month (YYYY-MM)&&&time|||Defines a time value'],"['YYYY indicates the year|||MM indicates the month|||DD indicates the day|||hh indicates the hour|||mm indicates the minute|||ss indicates the second|||YYYY indicates the year|||MM indicates the month|||DD indicates the day|||T indicates the start of the required time section|||hh indicates the hour|||mm indicates the minute|||ss indicates the second|||P indicates the period (required)|||nY indicates the number of years|||nM indicates the number of months|||nD indicates the number of days|||T indicates the start of a time section (required if you are going to |||  specify hours, minutes, or seconds)|||nH indicates the number of hours|||nM indicates the number of minutes|||nS indicates the number of seconds|||enumeration|||maxExclusive|||maxInclusive|||minExclusive|||minInclusive|||pattern|||whiteSpace|||']"
102,['XSD Numeric Data Types'],"['Decimal Data Type', 'Integer Data Type', 'Numeric Data Types', 'Restrictions on Numeric Data Types']",[],"['https://www.w3schools.com/xml/schema_dtypes_date.asp', 'https://www.w3schools.com/xml/schema_dtypes_misc.asp', 'https://www.w3schools.com/xml/schema_dtypes_date.asp', 'https://www.w3schools.com/xml/schema_dtypes_misc.asp']",[],"['Decimal data types are used for numeric values.', 'The decimal data type is used to specify a numeric value.', 'The following is an example of a decimal declaration in a schema:', 'An element in your document might look like this:', 'Or it might look like this:', 'Or it might look like this:', 'Or it might look like this:', 'Or it might look like this:', 'The following is an example of an integer declaration in a schema:', 'An element in your document might look like this:', 'Or it might look like this:', 'Or it might look like this:', 'Or it might look like this:', 'Restrictions that can be used with Numeric data types:']","['The integer data type is used to specify a numeric value without a fractional component.', 'Note that all of the data types below derive from the Decimal data type (except for decimal itself)!']",[],"['\n<xs:element name=""price"" type=""xs:decimal""/>\n', '\n<price>999.50</price>\n', '\n<price>+999.5450</price>\n', '\n<price>-999.5230</price>\n', '\n<price>0</price>\n', '\n<price>14</price>\n', '\n<xs:element name=""price"" type=""xs:integer""/>\n', '\n<price>999</price>', '\n<price>+999</price>\n', '\n<price>-999</price>\n', '\n<price>0</price>\n']","['Name|||Description&&&byte|||A signed 8-bit integer&&&decimal|||A decimal value&&&int|||A signed 32-bit integer&&&integer|||An integer value&&&long|||A signed 64-bit integer&&&negativeInteger|||An integer containing only negative values (..,-2,-1)&&&nonNegativeInteger|||An integer containing only non-negative values (0,1,2,..)&&&nonPositiveInteger|||An integer containing only non-positive values (..,-2,-1,0)&&&positiveInteger|||An integer containing only positive values (1,2,..)&&&short|||A signed 16-bit integer&&&unsignedLong|||An unsigned 64-bit integer&&&unsignedInt|||An unsigned 32-bit integer&&&unsignedShort|||An unsigned 16-bit integer&&&unsignedByte|||An unsigned 8-bit integer']",['enumeration|||fractionDigits|||maxExclusive|||maxInclusive|||minExclusive|||minInclusive|||pattern|||totalDigits|||whiteSpace|||']
103,['XSD Miscellaneous Data Types'],"['Boolean Data Type', 'Binary Data Types', 'AnyURI Data Type', 'Miscellaneous Data Types', 'Restrictions on Miscellaneous Data Types']",[],"['https://www.w3schools.com/xml/schema_dtypes_numeric.asp', 'https://www.w3schools.com/xml/schema_elements_ref.asp', 'https://www.w3schools.com/xml/schema_dtypes_numeric.asp', 'https://www.w3schools.com/xml/schema_elements_ref.asp']",[],"['The boolean data type is used to specify a true or false value.', 'The following is an example of a boolean declaration in a schema:', 'An element in your document might look like this:', 'Binary data types are used to express binary-formatted data.', 'We have two binary data types:', 'The following is an example of a hexBinary declaration in a schema:', 'The anyURI data type is used to specify a URI.', 'The following is an example of an anyURI declaration in a schema:', 'An element in your document might look like this:', 'Note: If a URI has spaces, replace them with %20.', 'Restrictions that can be used with the other data types:']","['Other miscellaneous data types are boolean, base64Binary, hexBinary, float, double, anyURI, QName, and NOTATION.', 'Note: Legal values for boolean are true, false, 1 (which indicates true), and 0 (which indicates false).']",[],"['\n<xs:attribute name=""disabled"" type=""xs:boolean""/>\n', '\n<price disabled=""true"">999</price>\n', '\n<xs:element name=""blobsrc"" type=""xs:hexBinary""/>\n', '\n<xs:attribute name=""src"" type=""xs:anyURI""/>\n', '\n<pic src=""https://www.w3schools.com/images/smiley.gif"" />\n']",['Name|||Description&&&anyURI|||\xa0&&&base64Binary|||\xa0&&&boolean|||\xa0&&&double|||\xa0&&&float|||\xa0&&&hexBinary|||\xa0&&&NOTATION|||\xa0&&&QName|||\xa0'],['base64Binary (Base64-encoded binary data)|||hexBinary (hexadecimal-encoded binary data)|||enumeration (a Boolean data type cannot use this constraint)|||length (a Boolean data type cannot use this constraint)|||maxLength (a Boolean data type cannot use this constraint)|||minLength (a Boolean data type cannot use this constraint)|||pattern|||whiteSpace|||']
104,"['XML Schema Reference', 'XSD Elements', 'XSD Restrictions/Facets for Datatypes']",[],[],"['https://www.w3schools.com/xml/schema_dtypes_misc.asp', 'https://www.w3schools.com/xml/xml_services.asp', 'https://www.w3schools.com/xml/el_all.asp', 'https://www.w3schools.com/xml/el_annotation.asp', 'https://www.w3schools.com/xml/el_any.asp', 'https://www.w3schools.com/xml/el_anyattribute.asp', 'https://www.w3schools.com/xml/el_appinfo.asp', 'https://www.w3schools.com/xml/el_attribute.asp', 'https://www.w3schools.com/xml/el_attributegroup.asp', 'https://www.w3schools.com/xml/el_choice.asp', 'https://www.w3schools.com/xml/el_complexcontent.asp', 'https://www.w3schools.com/xml/el_complextype.asp', 'https://www.w3schools.com/xml/el_documentation.asp', 'https://www.w3schools.com/xml/el_element.asp', 'https://www.w3schools.com/xml/el_extension.asp', 'https://www.w3schools.com/xml/el_field.asp', 'https://www.w3schools.com/xml/el_group.asp', 'https://www.w3schools.com/xml/el_import.asp', 'https://www.w3schools.com/xml/el_include.asp', 'https://www.w3schools.com/xml/el_key.asp', 'https://www.w3schools.com/xml/el_keyref.asp', 'https://www.w3schools.com/xml/el_list.asp', 'https://www.w3schools.com/xml/el_notation.asp', 'https://www.w3schools.com/xml/el_redefine.asp', 'https://www.w3schools.com/xml/el_restriction.asp', 'https://www.w3schools.com/xml/el_schema.asp', 'https://www.w3schools.com/xml/el_selector.asp', 'https://www.w3schools.com/xml/el_sequence.asp', 'https://www.w3schools.com/xml/el_simpleContent.asp', 'https://www.w3schools.com/xml/el_simpletype.asp', 'https://www.w3schools.com/xml/el_union.asp', 'https://www.w3schools.com/xml/el_unique.asp', 'https://www.w3schools.com/xml/schema_facets.asp', 'https://www.w3schools.com/xml/schema_dtypes_misc.asp', 'https://www.w3schools.com/xml/xml_services.asp']",[],['Look at XSD Restrictions!'],['Enables the author to extend the XML document with attributes not specified by the schema'],[],[],"['Element|||Explanation&&&all|||Specifies that the child elements can appear in any order. Each child |||    element can occur 0 or 1 time&&&annotation|||Specifies the top-level element for schema comments&&&any|||Enables the author to extend the XML document with elements |||    not specified by the schema&&&anyAttribute||||||Enables the author to extend the XML document with attributes not specified |||by the schema|||&&&appinfo|||Specifies information to be used by the application (must |||    go inside annotation)&&&attribute|||Defines an attribute&&&attributeGroup|||Defines an attribute group to be used in complex type |||    definitions&&&choice|||Allows only one of the elements contained in the <choice> |||    declaration to be present within the containing element&&&complexContent|||Defines extensions or restrictions on a complex type that |||    contains mixed content or elements only&&&complexType|||Defines a complex type element&&&documentation|||Defines text comments in a schema (must go inside |||    annotation)&&&element|||Defines an element&&&extension|||Extends an existing simpleType or complexType element&&&field|||Specifies an XPath expression that specifies the value used |||    to define an identity constraint&&&group|||Defines a group of elements to be used in complex type |||    definitions&&&import|||Adds multiple schemas with different target |||    namespace to a document&&&include|||Adds multiple schemas with the same target |||    namespace to a document&&&key|||Specifies an attribute or element value as a |||    key (unique, non-nullable, and always present) within the containing element |||    in an instance document&&&keyref|||Specifies that an attribute or element value correspond to |||    those of the specified key or unique element&&&list|||Defines a simple type element as a list of values&&&notation|||Describes the format of non-XML data within an XML document&&&redefine|||Redefines simple and complex types, groups, and attribute |||    groups from an external schema&&&restriction|||Defines restrictions on a simpleType, simpleContent, or a |||    complexContent&&&schema|||Defines the root element of a schema&&&selector|||Specifies an XPath expression that selects a set of |||    elements for an identity constraint&&&sequence|||Specifies that the child elements must appear in a sequence. Each child |||    element can occur from 0 to any number of times&&&simpleContent|||Contains extensions or restrictions on a text-only complex type or on a simple type as content and contains no elements&&&simpleType|||Defines a simple type and specifies the constraints and |||    information about the values of attributes or text-only elements&&&union|||Defines a simple type as a collection (union) of values |||    from specified simple data types&&&unique|||Defines that an element or an attribute value must be |||    unique within the scope', 'Constraint|||Description&&&enumeration|||Defines a list of acceptable values&&&fractionDigits|||Specifies the maximum number of decimal places allowed. |||    Must be equal to or greater than zero&&&length|||Specifies the exact number of characters or list items |||    allowed. Must be equal to or greater than zero&&&maxExclusive|||Specifies the upper bounds for numeric values (the value |||    must be less than this value)&&&maxInclusive|||Specifies the upper bounds for numeric values (the value |||    must be less than or equal to this value)&&&maxLength|||Specifies the maximum number of characters or list items |||    allowed. Must be equal to or greater than zero&&&minExclusive|||Specifies the lower bounds for numeric values (the value |||    must be greater than this value)&&&minInclusive|||Specifies the lower bounds for numeric values (the value |||    must be greater than or equal to this value)&&&minLength|||Specifies the minimum number of characters or list items |||    allowed. Must be equal to or greater than zero&&&pattern|||Defines the exact sequence of characters that are |||    acceptable &&&totalDigits|||Specifies the maximum number of digits allowed. Must be |||    greater than zero&&&whiteSpace|||Specifies how white space (line feeds, tabs, spaces, and |||    carriage returns) is handled']",[]
105,['XML Web Services'],"['WSDL', 'SOAP', 'RDF', 'RSS', 'What You Should Already Know', 'Web Services', 'Interoperability has Highest Priority', 'Web Services take Web-applications to the Next Level', 'Web Services have Two Types of Uses', 'A Web Service Example', 'Example Explained', 'Put the Web Service on Your Web Site', 'How To Do It']",[],"['https://www.w3schools.com/xml/schema_elements_ref.asp', 'https://www.w3schools.com/xml/xml_wsdl.asp', 'https://www.w3schools.com/xml//xml/default.asp', 'https://www.w3schools.com/xml/schema_elements_ref.asp', 'https://www.w3schools.com/xml/xml_wsdl.asp']",[],"['Web services are web application components.', 'Web services can be published, found, and used on the Web.', 'This tutorial introduces WSDL, SOAP, RDF, and RSS.', 'If you want to study these subjects first, please read our XML Tutorial.', 'Reusable application-components.', 'Connect existing software.', 'Any application can have a Web Service component.', 'Web Services can be created regardless of programming language.', 'Note: To run this example, you will need a .NET server.', 'The next line defines that the ""TempConvert"" class is a WebService class type:', 'Then, end the class:', 'Here is the code to add the Web Service to a web page:', 'Substitute the ""tempconvert.asmx"" with the address of your web service like:', 'http://www.example.com/xml/tempconvert.asmx']","['Before you study web services you should have a basic understanding of XML and XML Namespaces.', 'By using Web services, your application can publish its function or message to the rest of the world.', 'Web services use XML to code and to decode data, and SOAP to transport it (using open protocols).', 'There are things applications need very often. So why make these over and over again? ', 'Web services can help to solve the interoperability problem by giving different applications a way to link their data. ', 'With Web services you can exchange data between different applications and different platforms.', 'This document is saved as an .asmx file. This is the ASP.NET file extension for XML Web Services.', 'The next lines import the namespace ""System.Web.Services"" from the .NET framework:', 'The only difference from a normal application is that this function is defined as a ""WebMethod()"".  ', 'Use ""WebMethod()"" to convert the functions in your application into web services:', 'Publish the .asmx file on a server with .NET support, and you will have your first working Web Service.', 'Using a form and the HTTP POST method, you can put the web service on your site, like this:']","[""When all major platforms could access the Web using Web browsers, different platforms couldn't interact. For these platforms to work together, Web-applications were developed. "", 'Web-applications are simply applications that run on the web. These are built around the Web browser standards and can be used by any browser on any platform.', ""With Web services, your accounting department's Win 2k server's billing system can connect with your IT supplier's UNIX server."", 'Web services can offer application-components like: currency conversion, weather reports, or even language translation as services. ', 'In the following example we will use ASP.NET to create a simple Web Service that converts the temperature from Fahrenheit to Celsius, and vice versa:', 'The first line in the example states that this is a Web Service, written in VBScript, and has the class name ""TempConvert"":', 'The next steps are basic VB programming. This application has two functions. One to convert from Fahrenheit to Celsius, and one to convert from Celsius to Fahrenheit.']","['\n<%@ WebService Language=""VBScript"" Class=""TempConvert"" %>\nImports System\nImports System.Web.Services\nPublic Class TempConvert :Inherits WebService\n<WebMethod()> Public Function FahrenheitToCelsius(ByVal Fahrenheit As String) As String\n  \xa0\n  dim fahr\n  \xa0\n  fahr=trim(replace(Fahrenheit,"","","".""))\n  \xa0\n  if fahr="""" or IsNumeric(fahr)=false then return ""Error""\n  \xa0\n  return ((((fahr) - 32) / 9) * 5)\nend function\n<WebMethod()> Public Function CelsiusToFahrenheit(ByVal Celsius As String) As String\n  \xa0\n  dim cel\n  \xa0\n  cel=trim(replace(Celsius,"","","".""))\n  \xa0\n  if cel="""" or IsNumeric(cel)=false then return ""Error""\n  \xa0\n  return ((((cel) * 9) / 5) + 32)\nend function\nend class', '\n<%@ WebService Language=""VBScript"" Class=""TempConvert"" %>', '\nImports System\nImports System.Web.Services', '\nPublic Class TempConvert :Inherits WebService', '\n<WebMethod()> Public Function FahrenheitToCelsius(ByVal Fahrenheit As String) As String\n  \xa0\n  dim fahr\n  \xa0\n  fahr=trim(replace(Fahrenheit,"","","".""))\n  \xa0\n  if fahr="""" or IsNumeric(fahr)=false then return ""Error""\n  \xa0\n  return ((((fahr) - 32) / 9) * 5)\nend function\n<WebMethod()> Public Function CelsiusToFahrenheit(ByVal Celsius As String) As String\n  \xa0\n  dim cel\n  \xa0\n  cel=trim(replace(Celsius,"","","".""))\n  \xa0\n  if cel="""" or IsNumeric(cel)=false then return ""Error""\n  \xa0\n  return ((((cel) * 9) / 5) + 32)\nend function', '\nend class', '\n<form\naction=\'tempconvert.asmx/FahrenheitToCelsius\'\nmethod=""post"" target=""_blank"">\n<table>\n  \xa0\n  <tr>\n    \xa0\xa0\xa0\n    <td>Fahrenheit to Celsius:</td>\n    \xa0\xa0\xa0\n    <td>\n\xa0\xa0\xa0 <input class=""frmInput"" type=""text""\n    size=""30"" name=""Fahrenheit"">\n\xa0\xa0\xa0 </td>\n  \xa0\n  </tr>\n  \xa0\n  <tr>\n    \xa0\xa0\xa0\n    <td></td>\n    \xa0\xa0\xa0\n    <td align=""right"">\n\xa0\xa0\xa0\xa0 <input type=""submit""\n    value=""Submit"" class=""button"">\n\xa0\xa0\xa0\xa0 </td>\n  \xa0\n  </tr>\n</table>\n</form>\n<form\naction=\'tempconvert.asmx/CelsiusToFahrenheit\'\nmethod=""post"" target=""_blank"">\n<table>\n  \xa0\n  <tr>\n    \xa0\xa0\xa0\n    <td>Celsius to Fahrenheit:</td>\n    \xa0\xa0\xa0\n    <td>\n\xa0\xa0\xa0 <input class=""frmInput"" type=""text""\n    size=""30"" name=""Celsius"">\n\xa0\xa0\xa0 </td>\n  \xa0\n  </tr>\n  \xa0\n  <tr>\n    \xa0\xa0\xa0\n    <td></td>\n    \xa0\xa0\xa0\n    <td align=""right"">\n\xa0\xa0\xa0 <input type=""submit""\n    value=""Submit"" class=""button"">\n\xa0\xa0\xa0 </td>\n  \xa0\n  </tr>\n</table>\n</form>']","['Fahrenheit to Celsius:||||||', 'Celsius to Fahrenheit:||||||']",['WSDL stands for Web Services Description Language|||WSDL is an XML-based language for describing Web services.|||WSDL is a W3C recommendation|||SOAP stands for Simple Object Access Protocol|||SOAP is an XML based protocol for accessing Web Services.|||SOAP is based on XML|||SOAP is a W3C recommendation|||RDF stands for Resource Description Framework|||RDF is a framework for describing resources on the web|||RDF is written in XML|||RDF is a W3C Recommendation|||RSS stands for Really Simple Syndication|||RSS allows you to syndicate your site content|||RSS defines an easy way to share and view headlines and content|||RSS files can be automatically updated|||RSS allows personalized views for different sites|||RSS is written in XML|||Web services are application components|||Web services communicate using open protocols|||Web services are self-contained and self-describing|||Web services can be discovered using UDDI|||Web services can be used by other applications|||HTTP and XML is the basis for Web services|||']
106,['XML WSDL'],"['WSDL Documents', 'WSDL Example', 'The <portType> Element', 'WSDL One-Way Operation', 'WSDL Request-Response Operation', 'WSDL Binding to SOAP']",[],"['https://www.w3schools.com/xml/xml_services.asp', 'https://www.w3schools.com/xml/xml_soap.asp', 'https://www.w3schools.com/xml/xml_services.asp', 'https://www.w3schools.com/xml/xml_soap.asp']",[],"['The main structure of a WSDL document looks like this:', 'This is a simplified fraction of a WSDL document:', 'A one-way operation example:', 'A request-response operation example:', 'A request-response operation example:', 'The binding element has two attributes - name and type.', 'The soap:binding element has two attributes - style and transport.', 'The operation element defines each operation that the portType exposes.']","['The ""getTerm"" operation has an input message called ""getTermRequest"" and an output message called ""getTermResponse"".', 'The <message> elements define the parts of each message and the associated data types.', 'The <portType> element defines a web service, the operations that can be performed, and the messages that are involved.', 'The request-response type is the most common operation type, but WSDL defines four types:', 'In the example above, the portType ""glossaryTerms"" defines a one-way operation called ""setTerm"". ', 'In the example above, the portType ""glossaryTerms"" defines a request-response operation called ""getTerm"".', 'WSDL bindings defines the message format and protocol details for a web service.']","['An WSDL document describes a web service. It specifies the location of the service, and  the methods of the service, using these major elements:', 'In this example the <portType> element defines ""glossaryTerms"" as the name of a port, and ""getTerm"" as the name of an operation.', 'The ""setTerm"" operation allows input of new glossary terms messages using a ""newTermValues"" message with the input parameters ""term"" and ""value"". However, no output is  defined for the operation. ', 'The ""getTerm"" operation requires an input message called ""getTermRequest"" with a parameter called ""term"", and will return an output message called ""getTermResponse"" with a parameter called ""value"".', 'The name attribute (you can use any name you want) defines the name of the binding, and the type attribute points to the port for the binding, in this case the ""glossaryTerms"" port.', 'The style attribute can be ""rpc"" or ""document"". In this case we use document. The transport attribute defines the SOAP protocol to use.In this case we use HTTP.', 'For each operation the corresponding SOAP action has to be defined. You must also specify how the input and output are encoded. In this case we use ""literal"".']","['\n<definitions>\n<types>\n  \xa0\n  data type definitions........\n</types>\n<message>\n  \xa0\n  definition of the data being communicated....\n</message>\n<portType>\n  \xa0\n  set of operations......\n</portType>\n<binding>\n  \xa0\n  protocol and data format specification....\n</binding>\n</definitions>\n', '\n<message name=""getTermRequest"">\n   \xa0\n   <part name=""term"" type=""xs:string""/>\n</message>\n<message name=""getTermResponse"">\n   \xa0\n   <part name=""value"" type=""xs:string""/>\n</message>\n<portType name=""glossaryTerms"">\n  \xa0\n  <operation name=""getTerm"">\n    \xa0\xa0\xa0\n    <input message=""getTermRequest""/>\n    \xa0\xa0\xa0\n    <output message=""getTermResponse""/>\n  \xa0\n  </operation>\n</portType>\n', '\n<message name=""newTermValues"">\n   \xa0\n   <part name=""term"" type=""xs:string""/>\n   \xa0\n   <part name=""value"" type=""xs:string""/>\n</message>\n<portType name=""glossaryTerms"">\n   \xa0\n   <operation name=""setTerm"">\n      \xa0\xa0\xa0\n      <input name=""newTerm"" message=""newTermValues""/>\n   \xa0\n   </operation>\n</portType >\n', '\n<message name=""getTermRequest"">\n   \xa0\n   <part name=""term"" type=""xs:string""/>\n</message>\n<message name=""getTermResponse"">\n   \xa0\n   <part name=""value"" type=""xs:string""/>\n</message>\n<portType name=""glossaryTerms"">\n  \xa0\n  <operation name=""getTerm"">\n  \xa0\xa0\xa0\n  <input message=""getTermRequest""/>\n  \xa0\xa0\xa0\n  <output message=""getTermResponse""/>\n  \xa0\n  </operation>\n</portType>\n', '\n<message name=""getTermRequest"">\n   \xa0\n   <part name=""term"" type=""xs:string""/>\n</message>\n<message name=""getTermResponse"">\n   \xa0\n   <part name=""value"" type=""xs:string""/>\n</message>\n<portType name=""glossaryTerms"">\n  \xa0\n  <operation name=""getTerm"">\n        \xa0\xa0\xa0\n        <input message=""getTermRequest""/>\n              \xa0\xa0\xa0\n              <output message=""getTermResponse""/>\n                \xa0\n                </operation>\n                </portType>\n<binding type=""glossaryTerms"" name=""b1"">\n\xa0\xa0 <soap:binding style=""document""\n\xa0\xa0 transport=""http://schemas.xmlsoap.org/soap/http"" />\n  \xa0\xa0 <operation>\n    \xa0\xa0\xa0\xa0 <soap:operation\n     soapAction=""http://example.com/getTerm""/>\n    \xa0\xa0\xa0\xa0 <input><soap:body use=""literal""/></input>\n    \xa0\xa0\xa0\xa0 <output><soap:body use=""literal""/></output>\n  \xa0\n  </operation>\n</binding>\n']","['Element|||Description&&&<types>|||Defines the (XML Schema) data types used by the web service&&&<message>|||Defines the data elements for each operation&&&<portType>||||||    Describes |||    the operations that can be performed and the messages involved.|||    &&&<binding>|||Defines the protocol and data format for each port type', 'Type|||Definition&&&One-way|||The operation can receive a message but will not return a |||    response&&&Request-response|||The operation can receive a request and will return a |||    response&&&Solicit-response|||The operation can send a request and will wait for a |||    response&&&Notification|||The operation can send a message but will not wait for a |||    response']",['WSDL stands for Web Services Description Language|||WSDL is used to describe web services|||WSDL is written in XML|||WSDL is a W3C recommendation from 26. June 2007|||']
107,['XML Soap'],"['Why SOAP?', 'SOAP Building Blocks', 'Syntax Rules', 'Skeleton SOAP Message', 'The SOAP Envelope Element', 'The xmlns:soap Namespace', 'The encodingStyle Attribute', 'The SOAP Header Element', 'The mustUnderstand Attribute', 'The actor Attribute', 'The encodingStyle Attribute', 'The SOAP Body Element', 'The SOAP Fault Element', 'The HTTP Protocol', 'SOAP Binding', 'Content-Type', 'Content-Length', 'A SOAP Example']","['Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'SOAP Fault Codes', 'A SOAP request:', 'The SOAP response:']","['https://www.w3schools.com/xml/xml_wsdl.asp', 'https://www.w3schools.com/xml/xml_rdf.asp', 'http://www.w3.org/2003/05/soap-envelope/', 'http://www.w3.org/2003/05/soap-encoding', 'https://www.w3schools.com/xml/xml_wsdl.asp', 'https://www.w3schools.com/xml/xml_rdf.asp']",[],"['A SOAP message is an ordinary XML document containing the following elements:', 'http://www.w3.org/2003/05/soap-envelope/', 'and the default namespace for SOAP encoding and data types is:', 'http://www.w3.org/2003/05/soap-encoding', 'Here are some important syntax rules:', 'The namespace defines the Envelope as a SOAP Envelope.', 'A SOAP message has no default encoding.', 'A SOAP message has no default encoding.', 'Immediate child elements of the SOAP Body element may be namespace-qualified.', 'A SOAP response could look something like this:', 'The optional SOAP Fault element is used to indicate error messages.', 'The  SOAP Fault element holds errors and status information for a SOAP message.', 'The SOAP Fault element has the following sub elements:', 'Holds application specific error information related to the Body element', 'SMTP is asynchronous and is used in last resort or particular cases.']","['It is important for web applications to be able to communicate over the Internet.', 'All the elements above are declared in the default namespace for the SOAP envelope:', 'If a different namespace is used, the application generates an error and discards the message.', 'If the Header element is present, it must be the first child element of the Envelope element.', 'Note: All immediate child elements of the Header element must be namespace-qualified.', 'SOAP defines three attributes in the default namespace. These attributes are: mustUnderstand, actor, and encodingStyle.', 'The attributes defined in the SOAP Header defines how a recipient should process the SOAP message.', 'The SOAP actor attribute is used to address the Header element to a specific endpoint.', 'The required SOAP Body element contains the actual SOAP message intended for the ultimate endpoint of the message. ', 'The faultcode values defined below must be used in the faultcode element when describing faults:', 'In the example above, the server returned a status code of 200. This is the standard success code for HTTP.', 'If the server could not decode the request, it could have returned something like this:', 'Most SOAP implementations provide bindings for common transport protocols, such as HTTP or SMTP.', 'Java implementations of SOAP usually provide a specific binding for the JMS (Java Messaging System) protocol.']","['The best way to communicate between applications is over HTTP,because HTTP is supported by all Internet browsers andservers. SOAP was created to accomplish this.', 'SOAP provides a way to communicate between applications running on differentoperating systems, with different technologies and programminglanguages.', 'The required SOAP Envelope element is the root element of a SOAP message. This element defines the XML document as a SOAP message.', 'Notice the xmlns:soap namespace in the example above. It should always have the value of: ""http://www.w3.org/2003/05/soap-envelope/"".', ""The encodingStyle attribute is used to define the data types used in the document. This attribute may appear on any SOAP element, and applies to the element's contents and all child elements."", 'The optional  SOAP Header element contains application-specific information (like authentication, payment, etc) about the SOAP message.', 'The example above contains a header with a ""Trans"" element, a ""mustUnderstand"" attribute with a value of 1, and a value of 234.', 'The SOAP mustUnderstand attribute can be used to indicate whether a header entry is mandatory or optional for the recipient to process.', 'If you add mustUnderstand=""1"" to a child element of the Header element it indicates that the receiver processing the Header must recognize the element. If the receiver does not recognize the element it will fail when processing the Header.', 'A SOAP message may travel from a sender to a receiver by passing different endpoints along the message path. However, not all parts of a SOAP message may be intended for the ultimate endpoint, instead, it may be intended for one or more of the endpoints on the message path.', ""The encodingStyle attribute is used to define the data types used in the document. This attribute may appear on any SOAP element, and it will apply to that element's contents and all child elements."", 'The example above requests the price of apples. Note that the m:GetPrice and the Item elements above are application-specific elements. They are not a part of the SOAP namespace. ', 'If a Fault element is present, it must appear as a child elementof the Body element. A Fault element can only appear once in a SOAP message.', 'HTTP communicates over TCP/IP. An HTTP client connects to an HTTP server using TCP. After establishing a connection, the client can send an HTTP request message to the server:', 'The server then processes the request and sends an HTTP response back to the client. The response contains a status code that indicates the status of the request:', 'The SOAP specification defines the structure of the SOAP messages, not how they are exchanged. This gap is filled by what is called ""SOAP Bindings"". SOAP bindings are mechanisms which allow SOAP messages to be effectively exchanged using a transport protocol.', 'HTTP is synchronous and widely used. A SOAP HTTP request specifies at least two HTTP headers: Content-Type and Content-Length.', 'The Content-Type header for a SOAP request and response defines the MIME type for the message and the character encoding (optional) used for the XML body of the request or response.', 'The Content-Length header for a SOAP request and response specifies the number of bytes in the body of the request or response.', 'In the example below, a GetStockPrice request is sent to a server. The request has a StockName parameter,and a Price parameter that will be returned in the response. The namespace for the function is defined in ""http://www.example.org/stock"".']","['\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n<soap:Header>\n  ...\n</soap:Header>\n<soap:Body>\n  ...\n  \xa0\n  <soap:Fault>\n    \xa0\n    ...\n  \xa0\n  </soap:Fault>\n</soap:Body>\n</soap:Envelope>\n', '\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n  \xa0\n  ...\n  \xa0\n  Message information goes here\n  \xa0\n  ...\n</soap:Envelope>\n', '\nsoap:encodingStyle=""URI""', '\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n  \xa0\n  ...\n  \xa0\n  Message information goes here\n  \xa0\n  ...\n</soap:Envelope>\n', '\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n<soap:Header>\n\xa0\n<m:Trans xmlns:m=""https://www.w3schools.com/transaction/""\n\xa0\nsoap:mustUnderstand=""1"">234\n\xa0\n</m:Trans>\n</soap:Header>...\n...\n</soap:Envelope>\n', '\nsoap:mustUnderstand=""0|1""', '\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n<soap:Header>\n\xa0\n<m:Trans xmlns:m=""https://www.w3schools.com/transaction/""\n\xa0\nsoap:mustUnderstand=""1"">234\n\xa0\n</m:Trans>\n</soap:Header>\n...\n...\n</soap:Envelope>\n', '\nsoap:actor=""URI""\n', '\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n<soap:Header>\n\xa0\n<m:Trans xmlns:m=""https://www.w3schools.com/transaction/""\n\xa0\nsoap:actor=""https://www.w3schools.com/code/"">234\n\xa0\n</m:Trans>\n</soap:Header>...\n...</soap:Envelope>\n', '\nsoap:encodingStyle=""URI""\n', '\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n<soap:Body>\n   \xa0\n   <m:GetPrice xmlns:m=""https://www.w3schools.com/prices"">\n      \xa0\xa0\xa0\n      <m:Item>Apples</m:Item>\n   \xa0\n   </m:GetPrice>\n</soap:Body>\n</soap:Envelope>\n', '\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n<soap:Body>\n   \xa0\n   <m:GetPriceResponse xmlns:m=""https://www.w3schools.com/prices"">\n      \xa0\xa0\xa0\n      <m:Price>1.90</m:Price>\n   \xa0\n   </m:GetPriceResponse>\n</soap:Body>\n</soap:Envelope>\n', '\nPOST /item HTTP/1.1\nHost: 189.123.255.239\nContent-Type: text/plain\nContent-Length: 200\n', '\n200 OK\nContent-Type: text/plain\nContent-Length: 200\n', '\n400 Bad Request\nContent-Length: 0\n', '\nContent-Type: MIMEType; charset=character-encoding\n', '\nPOST /item HTTP/1.1\nContent-Type: application/soap+xml; charset=utf-8\n', '\nContent-Length: bytes', '\nPOST /item HTTP/1.1\nContent-Type: application/soap+xml; charset=utf-8\nContent-Length: 250\n', '\nPOST /InStock HTTP/1.1\nHost: www.example.org\nContent-Type: application/soap+xml; charset=utf-8\nContent-Length: nnn\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n  <soap:Body xmlns:m=""http://www.example.org/stock"">\n\xa0  <m:GetStockPrice>\n      \xa0\xa0\xa0\n      <m:StockName>IBM</m:StockName>\n\xa0 </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\n', '\nHTTP/1.1 200 OK\nContent-Type: application/soap+xml; charset=utf-8\nContent-Length: nnn\n<?xml version=""1.0""?>\n<soap:Envelope\nxmlns:soap=""http://www.w3.org/2003/05/soap-envelope/""\nsoap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">\n  <soap:Body xmlns:m=""http://www.example.org/stock"">\n    \xa0\n    <m:GetStockPriceResponse>\n      \xa0\xa0\xa0\n      <m:Price>34.5</m:Price>\n    \xa0\n    </m:GetStockPriceResponse>\n  </soap:Body>\n</soap:Envelope>\n']","['Sub Element|||Description&&&<faultcode>|||A code for identifying the fault&&&<faultstring>|||A human readable explanation of the fault&&&<faultactor>|||Information about who caused the fault to happen&&&<detail>||||||Holds application specific error information related to the |||Body element|||', 'Error|||Description&&&VersionMismatch|||Found an invalid namespace for the SOAP Envelope element&&&MustUnderstand|||An immediate child element of the Header element, with the mustUnderstand attribute set to ""1"", was|||  not understood&&&Client|||The message was incorrectly formed or contained incorrect information&&&Server|||There was a problem with the server so the message could not proceed']",['SOAP stands for Simple Object Access |||  Protocol|||SOAP is an application communication protocol|||SOAP is a format for sending and receiving messages|||SOAP is platform independent|||SOAP is based on XML|||SOAP is a W3C recommendation|||An Envelope element that identifies the XML document as a SOAP message|||A Header element that contains header information|||A Body element that contains call and response information|||A Fault element containing errors and status information|||A SOAP message MUST be encoded using XML|||A SOAP message MUST use the SOAP Envelope namespace|||A SOAP message must NOT contain a DTD reference|||A SOAP message must NOT contain XML Processing Instructions|||']
108,['XML RDF'],"['What is RDF?', 'RDF - Examples of Use', 'RDF is Designed to be Read by Computers', 'RDF is Written in XML', 'RDF and ""The Semantic Web""', 'RDF Resource, Property, and Property Value', 'RDF Statements', 'RDF Example', 'RDF Online Validator', 'RDF Elements', 'The <rdf:RDF> Element', 'The <rdf:Description> Element', 'Properties as Attributes', 'Properties as Resources', 'RDF Containers', 'The <rdf:Bag> Element', 'The <rdf:Seq> Element', 'The <rdf:Alt> Element', 'RDF Terms', 'RDF Collections', 'The rdf:parseType=""Collection"" Attribute', 'RDF Schema and Application Classes', 'RDF Schema (RDFS)', 'RDFS Example', 'Example Abbreviated', 'The Dublin Core', 'RDF Example', 'RDF Reference', 'RDFS / RDF Classes', 'RDFS / RDF Properties', 'RDF Attributes']","['RDF Document Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/xml/xml_soap.asp', 'https://www.w3schools.com/xml/xml_rss.asp', 'http://www.w3.org/RDF/Validator/', 'https://www.w3schools.com/xml/RDFvalidationresult.htm', 'http://dublincore.org/', 'https://www.w3schools.com/xml/rdf-syntax-ns.xml', 'https://www.w3schools.com/xml/rdf-schema.xml', 'https://www.w3schools.com/xml/xml_soap.asp', 'https://www.w3schools.com/xml/xml_rss.asp']",[],"['RDF descriptions are not designed to be displayed on the web.', 'RDF uses Web identifiers (URIs) to identify resources.', 'RDF describes resources with properties and property values.', 'Explanation of Resource, Property, and Property value:', 'The example above is simplified. Namespaces are omitted.', ""Let's look at some example statements to get a better understanding:"", 'Statement: ""The author of https://www.w3schools.com/rdf is Jan Egil Refsnes"".', 'Here are two records from a CD-list:', 'Below is a few lines from an RDF document:', ""Copy and paste the example below into W3C's RDF validator:"", 'When you parse the example above, the result will look something like this.', 'The <rdf:Description> element identifies a resource with the about attribute.', 'The <rdf:Description> element contains elements that describe the resource:', 'The property elements can also be defined as attributes (instead of elements):', 'The property elements can also be defined as resources:', 'RDF containers are used to describe group of things.', 'The <rdf:Bag> element may contain duplicate values.', 'The <rdf:Seq> element may contain duplicate values.', 'So, we have the following:', 'RDF collections describe groups that can ONLY contain the specified members.', 'A collection is described by the attribute rdf:parseType=""Collection"".', 'RDF Schema (RDFS) is an extension to RDF.', 'RDF describes resources with classes, properties, and values.', 'One such extension is RDF Schema.', 'RDF Schema does not provide actual application-specific classes and properties.', 'The following example demonstrates some of the RDFS facilities:', 'In the example above, the resource ""horse"" is a subclass of the class ""animal"".', ""That's it!"", 'The Dublin Core is a set of predefined properties for describing documents.', 'The RDF namespace  (xmlns:rdf) is:http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'The RDFS namespace  (xmlns:rdfs ) is:http://www.w3.org/2000/01/rdf-schema#', 'The MIME type should be ""application/rdf+xml"".']","['RDF documents are written in XML. The XML language used by RDF is called RDF/XML. ', 'The RDF language is a part of the W3C\'s Semantic Web Activity. W3C\'s ""Semantic Web Vision"" is a future where:', 'RDF identifies things using Web identifiers (URIs), and describes resources with properties and property values.', 'The following RDF document could describe the resource ""https://www.w3schools.com/rdf"":', 'Statement: ""The homepage of https://www.w3schools.com/rdf is https://www.w3schools.com"".', 'The <rdf:Description> element contains the description of the resource identified by the rdf:about attribute.', 'The elements: <cd:artist>, <cd:country>, <cd:company>, etc. are properties of the resource.', ""W3C's RDF Validation Service is useful when learning RDF. Here you can experiment with RDF files."", 'The main elements of RDF are the root element, <RDF>, and the <Description> element, which identifies a resource.', 'The following RDF elements are used to describe groups: <Bag>, <Seq>, and <Alt>.', 'The <rdf:Bag> element is used to describe a list of values that do not have to be in a specific order.', 'The <rdf:Seq> element is used to describe an ordered list of values (For example, in alphabetical order).', 'The <rdf:Alt> element is used to describe a list of alternative values (the user can select only one of the values).', 'RDF collections are used to describe groups that can ONLY contain the specified members.', 'Instead RDF Schema provides the framework to describe application-specific classes and properties.', 'The Dublin Core Metadata Initiative (DCMI) has created some predefined properties for describing documents.', 'RDF is metadata (data about data). RDF is used to describe information resources.', 'A quick look at the table above indicates that RDF is ideal for representing Dublin Core information.', 'The following example demonstrates the use of some of the Dublin Core properties in an RDF document:']","['RDF was designed to provide a common way to describe information so it can be read and understood by computer applications.', 'By using XML, RDF information can easily be exchanged between different types of computers using different types of operating systems and application languages.', 'The combination of a Resource, a Property, and a Property value forms a Statement (known as the subject, predicate and object of a Statement).', 'The first line of the RDF document is the XML declaration. The XML declaration is followed by the root element of RDF documents: <rdf:RDF>.', 'The xmlns:rdf namespace, specifies that elements with the rdf prefix are from the namespace ""http://www.w3.org/1999/02/22-rdf-syntax-ns#"".', 'The xmlns:cd namespace, specifies that elements with the cd prefix are from the namespace ""http://www.recshop.fake/cd#"".', 'The online RDF Validator parses your RDF document, checks your syntax, and generates tabular and graphical views of your RDF document.', '<rdf:RDF> is the root element of an RDF document. It defines the XML document to be an RDF document. It also contains a reference to the RDF namespace:', 'The elements, artist, country, company, price, and year, are defined in the http://www.recshop.fake/cd# namespace. This namespace is outside RDF (and not a part of RDF). RDF defines only the framework. The elements, artist, country, company, price, and year, must be defined by someone else (company, organization, person, etc).', 'In the example above, the property artist does not have a value, but a reference to a resource containing information about the artist.', 'In the examples above we have talked about ""list of values"" when describing the container elements. In RDF these ""list of values"" are called members.', 'As seen in the previous chapter, a container says that the containing resources are members - it does not say that other members are not allowed.', 'In addition, RDF also needs a way to define application-specific classes and properties. Application-specific classes and properties must be defined using extensions to RDF.', 'Classes in RDF Schema are much like classes in object oriented programming languages. This allows resources to be defined as instances of classes, and subclasses of classes.', 'Since an RDFS class is an RDF resource we can abbreviate the example above by using rdfs:Class instead of rdf:Description, and drop the rdf:type information:', 'The first Dublin Core properties were defined at the Metadata Workshop in Dublin, Ohio in 1995 and is currently maintained by theDublin Core Metadata Initiative.', 'The recommended file extension for RDF files is .rdf. However, the extension .xml is often used to provide compatibility with old xml parsers.']","['\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:si=""https://www.w3schools.com/rdf/"">\n  <rdf:Description rdf:about=""https://www.w3schools.com"">\n    \xa0\n    <si:title>W3Schools</si:title>\n\xa0\n    <si:author>Jan Egil Refsnes</si:author>\n  </rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<RDF>\n  \xa0\n  <Description about=""https://www.w3schools.com/rdf"">\n    \xa0\xa0\xa0\n    <author>Jan Egil Refsnes</author>\n    \xa0\xa0\xa0\n    <homepage>https://www.w3schools.com</homepage>\n  \xa0\n  </Description>\n</RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:cd=""http://www.recshop.fake/cd#"">\n<rdf:Description\n rdf:about=""http://www.recshop.fake/cd/Empire Burlesque"">\n  \xa0\n  <cd:artist>Bob Dylan</cd:artist>\n  \xa0\n  <cd:country>USA</cd:country>\n  \xa0\n  <cd:company>Columbia</cd:company>\n  \xa0\n  <cd:price>10.90</cd:price>\n  \xa0\n  <cd:year>1985</cd:year>\n</rdf:Description>\n<rdf:Description\n rdf:about=""http://www.recshop.fake/cd/Hide your heart"">\n  \xa0\n  <cd:artist>Bonnie Tyler</cd:artist>\n  \xa0\n  <cd:country>UK</cd:country>\n  \xa0\n  <cd:company>CBS Records</cd:company>\n  \xa0\n  <cd:price>9.90</cd:price>\n  \xa0\n  <cd:year>1988</cd:year>\n</rdf:Description>\n.\n.\n.\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:si=""https://www.w3schools.com/rdf/"">\n  <rdf:Description rdf:about=""https://www.w3schools.com"">\n    \xa0\n    <si:title>W3Schools.com</si:title>\n\xa0\n    <si:author>Jan Egil Refsnes</si:author>\n  </rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"">\n\xa0\n...Description goes here...\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:cd=""http://www.recshop.fake/cd#"">\n<rdf:Description\n rdf:about=""http://www.recshop.fake/cd/Empire Burlesque"">\n  \xa0\n  <cd:artist>Bob Dylan</cd:artist>\n  \xa0\n  <cd:country>USA</cd:country>\n  \xa0\n  <cd:company>Columbia</cd:company>\n  \xa0\n  <cd:price>10.90</cd:price>\n  \xa0\n  <cd:year>1985</cd:year>\n</rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:cd=""http://www.recshop.fake/cd#"">\n<rdf:Description\n rdf:about=""http://www.recshop.fake/cd/Empire Burlesque""\n  cd:artist=""Bob Dylan""  cd:country=""USA""\n  cd:company=""Columbia""  cd:price=""10.90""\n  cd:year=""1985"" />\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:cd=""http://www.recshop.fake/cd#"">\n<rdf:Description\n rdf:about=""http://www.recshop.fake/cd/Empire Burlesque"">\n  \xa0\n  <cd:artist rdf:resource=""http://www.recshop.fake/cd/dylan"" />\n  \xa0\n  ...\n  \xa0\n  ...\n</rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:cd=""http://www.recshop.fake/cd#"">\n<rdf:Description\n rdf:about=""http://www.recshop.fake/cd/Beatles"">\n \xa0\n <cd:artist>\n   \xa0\xa0\xa0\n   <rdf:Bag>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>John</rdf:li>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>Paul</rdf:li>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>George</rdf:li>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>Ringo</rdf:li>\n   \xa0\xa0\xa0\n   </rdf:Bag>\n  \xa0\n  </cd:artist>\n</rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:cd=""http://www.recshop.fake/cd#"">\n<rdf:Description\n rdf:about=""http://www.recshop.fake/cd/Beatles"">\n \xa0\n <cd:artist>\n   \xa0\xa0\xa0\n   <rdf:Seq>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>George</rdf:li>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>John</rdf:li>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>Paul</rdf:li>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>Ringo</rdf:li>\n   \xa0\xa0\xa0\n   </rdf:Seq>\n  \xa0\n  </cd:artist>\n</rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:cd=""http://www.recshop.fake/cd#"">\n<rdf:Description\n rdf:about=""http://www.recshop.fake/cd/Beatles"">\n \xa0\n <cd:format>\n   \xa0\xa0\xa0\n   <rdf:Alt>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>CD</rdf:li>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>Record</rdf:li>\n     \xa0\xa0\xa0\xa0\xa0\n     <rdf:li>Tape</rdf:li>\n   \xa0\xa0\xa0\n   </rdf:Alt>\n  \xa0\n  </cd:format>\n</rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:cd=""http://recshop.fake/cd#"">\n<rdf:Description\nrdf:about=""http://recshop.fake/cd/Beatles"">\n\xa0\n<cd:artist rdf:parseType=""Collection"">\n\xa0\xa0\xa0\n<rdf:Description rdf:about=""http://recshop.fake/cd/Beatles/George""/>\n\xa0\xa0\xa0\n<rdf:Description rdf:about=""http://recshop.fake/cd/Beatles/John""/>\n\xa0\xa0\xa0\n<rdf:Description rdf:about=""http://recshop.fake/cd/Beatles/Paul""/>\n\xa0\xa0\xa0\n<rdf:Description rdf:about=""http://recshop.fake/cd/Beatles/Ringo""/>\n\xa0\n</cd:artist>\n</rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:rdfs=""http://www.w3.org/2000/01/rdf-schema#""\nxml:base=""http://www.animals.fake/animals#"">\n<rdf:Description rdf:ID=""animal"">\n  \xa0\n  <rdf:type\n   rdf:resource=""http://www.w3.org/2000/01/rdf-schema#Class""/>\n</rdf:Description>\n<rdf:Description rdf:ID=""horse"">\n  \xa0\n  <rdf:type\n   rdf:resource=""http://www.w3.org/2000/01/rdf-schema#Class""/>\n  \xa0\n  <rdfs:subClassOf rdf:resource=""#animal""/>\n</rdf:Description>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:rdfs=""http://www.w3.org/2000/01/rdf-schema#""\nxml:base=""http://www.animals.fake/animals#"">\n<rdfs:Class rdf:ID=""animal"" />\n<rdfs:Class rdf:ID=""horse"">\n  \xa0\n  <rdfs:subClassOf rdf:resource=""#animal""/>\n</rdfs:Class>\n</rdf:RDF>\n', '\n<?xml version=""1.0""?>\n<rdf:RDF\nxmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""\nxmlns:dc= ""http://purl.org/dc/elements/1.1/"">\n<rdf:Description rdf:about=""https://www.w3schools.com"">\n  \xa0\n  <dc:description>W3Schools - Free tutorials</dc:description>\n  \xa0\n  <dc:publisher>Refsnes Data as</dc:publisher>\n  \xa0\n  <dc:date>2008-09-01</dc:date>\n  \xa0\n  <dc:type>Web Development</dc:type>\n  \xa0\n  <dc:format>text/html</dc:format>\n  \xa0\n  <dc:language>en</dc:language>\n</rdf:Description>\n</rdf:RDF>\n']","['Title|||Artist|||Country|||Company|||Price|||Year&&&Empire Burlesque|||Bob Dylan|||USA|||Columbia|||10.90|||1985&&&Hide your heart|||Bonnie Tyler|||UK|||CBS Records|||9.90|||1988', 'Property|||Definition&&&Contributor|||An entity responsible for making contributions to the content of the |||    resource&&&Coverage|||The extent or scope of the content of the resource&&&Creator|||An entity primarily responsible for making the content of the resource&&&Format|||The physical or digital manifestation of the resource&&&Date|||A date of an event in the lifecycle of the resource&&&Description|||An account of the content of the resource&&&Identifier|||An unambiguous reference to the resource within a given context&&&Language|||A language of the intellectual content of the resource&&&Publisher|||An entity responsible for making the resource available&&&Relation|||A reference to a related resource&&&Rights|||Information about rights held in and over the resource&&&Source|||A Reference to a resource from which the present resource is derived&&&Subject|||A topic of the content of the resource&&&Title|||A name given to the resource&&&Type|||The nature or genre of the content of the resource', 'Element|||Class of|||Subclass of&&&rdfs:Class|||All classes|||\xa0&&&rdfs:Datatype|||Data types|||Class&&&rdfs:Resource|||All resources|||Class&&&rdfs:Container|||Containers|||Resource&&&rdfs:Literal|||Literal values (text and numbers)|||Resource&&&rdf:List|||Lists|||Resource&&&rdf:Property|||Properties|||Resource&&&rdf:Statement|||Statements|||Resource&&&rdf:Alt|||Containers of alternatives|||Container&&&rdf:Bag|||Unordered containers|||Container&&&rdf:Seq|||Ordered containers|||Container&&&rdfs:ContainerMembershipProperty|||Container membership properties|||Property&&&rdf:XMLLiteral|||XML literal values|||Literal', 'Element|||Domain|||Range|||Description&&&rdfs:domain|||Property|||Class|||The domain of the resource&&&rdfs:range|||Property|||Class|||The range of the resource&&&rdfs:subPropertyOf|||Property|||Property|||The property is a sub property of a property&&&rdfs:subClassOf|||Class|||Class|||The resource is a subclass of a class&&&rdfs:comment|||Resource|||Literal|||The human readable description of the resource&&&rdfs:label|||Resource|||Literal|||The human readable label (name)\xa0 of the resource&&&rdfs:isDefinedBy|||Resource|||Resource|||The definition of the resource&&&rdfs:seeAlso|||Resource|||Resource|||The additional information about the resource&&&rdfs:member|||Resource|||Resource|||The member of the resource&&&rdf:first|||List|||Resource|||\xa0&&&rdf:rest|||List|||List|||\xa0&&&rdf:subject|||Statement|||Resource|||The subject of the resource in an RDF Statement&&&rdf:predicate|||Statement|||Resource|||The predicate of the resource in an RDF Statement&&&rdf:object|||Statement |||Resource|||The object of the resource in an RDF Statement&&&rdf:value|||Resource|||Resource|||The property used for values&&&rdf:type|||Resource|||Class|||The resource is an instance of a class', 'Attribute|||Description&&&rdf:about|||Defines the resource being described&&&rdf:Description|||Container for the description of a resource&&&rdf:resource|||Defines a resource to identify a property&&&rdf:datatype|||Defines the data type of an element&&&rdf:ID|||Defines the ID of an element&&&rdf:li|||Defines a list&&&rdf:_n|||Defines a node&&&rdf:nodeID|||Defines the ID of an element node&&&rdf:parseType|||Defines how an element should be parsed&&&rdf:RDF|||The root of an RDF document&&&xml:base|||Defines the XML base&&&xml:lang|||Defines the language of the element content']","['RDF stands for Resource Description Framework|||RDF is a framework for describing resources on the web|||RDF is designed to be read and understood by computers|||RDF is not designed for being displayed to people|||RDF is written in XML|||RDF is a part of the W3C\'s Semantic Web Activity|||RDF is a W3C Recommendation from 10. February 2004|||Describing properties for shopping items, such as price and availability|||Describing time schedules for web events|||Describing information about web pages (content, author, created and modified date)|||Describing content and rating for web pictures|||Describing content for search engines|||Describing electronic libraries|||Web information has exact meaning |||Web information can be understood and processed by computers |||Computers can integrate information from the web |||A Resource is anything that can have a URI, such as ""https://www.w3schools.com/rdf""|||A Property is a Resource that has a name, such as ""author"" or ""homepage""|||A Property value is the value of a Property, such as ""Jan Egil Refsnes"" or ""https://www.w3schools.com"" (note that a property value can be another resource)|||The subject of the statement above is: https://www.w3schools.com/rdf|||The predicate is: author|||The object is: Jan Egil Refsnes|||The subject of the statement above is: https://www.w3schools.com/rdf|||The predicate is: homepage|||The object is: https://www.w3schools.com|||A container is a resource that contains things|||The contained things are called members (not list of values)|||']"
109,['XML RSS'],"['What is RSS?', 'Why use RSS?', 'Who Should use RSS?', 'Benefits of RSS', 'The History of RSS', 'What RSS Version Should I Use?', 'Is RSS a Web Standard?', 'How RSS Works', 'RSS Example', 'Comments in RSS', 'RSS is Written in XML', 'The RSS <channel> Element', 'The <category> Element', 'The <copyright> Element', 'The <image> Element', 'The <language> Element', 'The <item> Element', 'The <author> Element', 'The <comments> Element', 'The <enclosure> Element', 'Get Your RSS Feed Up On The Web', 'Can I Manage my RSS Feed Myself?', 'Automated RSS', 'RSS Readers', 'I have an RSS Reader. Now what?', 'RSS Examples', 'RSS Reference', 'RSS <channel> Element', 'RSS <item> Element']",['RSS Document Example'],"['https://www.w3schools.com/xml/xml_rdf.asp', 'https://www.w3schools.com/xml/dom_nodetype.asp', 'http://www.feedvalidator.org', 'http://www.newsisfree.com/', 'http://www.newsisfree.com/user/new/', 'http://www.google.com/ig', 'http://www.google.com/submityourcontent/website-owner', 'http://www.bing.com/toolbox/submit-site-url', 'http://wordpress.org/', 'http://www.blogger.com/', 'http://radio.userland.com/', 'http://quiterss.org/en', 'http://feedreader.com/', 'http://www.rssreader.com/', 'http://sourceforge.net/projects/blogbotrss/', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_title_link_description', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_category', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_generator', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_image', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_language', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_textinput', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_skipdays', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_title_link_description_item', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_comments', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_enclosure', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_guid', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_pubdate_item', 'https://www.w3schools.com/xml/tryrss.asp?filename=rss_ex_source', 'https://www.w3schools.com/xml/rss_tag_category_channel.asp', 'https://www.w3schools.com/xml/rss_tag_cloud.asp', 'https://www.w3schools.com/xml/rss_tag_copyright.asp', 'https://www.w3schools.com/xml/rss_tag_title_link_description_channel.asp', 'https://www.w3schools.com/xml/rss_tag_docs.asp', 'https://www.w3schools.com/xml/rss_tag_generator.asp', 'https://www.w3schools.com/xml/rss_tag_image.asp', 'https://www.w3schools.com/xml/rss_tag_language.asp', 'https://www.w3schools.com/xml/rss_tag_lastbuilddate.asp', 'https://www.w3schools.com/xml/rss_tag_title_link_description_channel.asp', 'https://www.w3schools.com/xml/rss_tag_managingeditor.asp', 'https://www.w3schools.com/xml/rss_tag_pubdate.asp', 'https://www.w3schools.com/xml/rss_tag_skipDays.asp', 'https://www.w3schools.com/xml/rss_tag_skipHours.asp', 'https://www.w3schools.com/xml/rss_tag_textinput.asp', 'https://www.w3schools.com/xml/rss_tag_title_link_description_channel.asp', 'https://www.w3schools.com/xml/rss_tag_ttl.asp', 'https://www.w3schools.com/xml/rss_tag_webmaster.asp', 'https://www.w3schools.com/xml/rss_tag_author.asp', 'https://www.w3schools.com/xml/rss_tag_category_item.asp', 'https://www.w3schools.com/xml/rss_tag_comments.asp', 'https://www.w3schools.com/xml/rss_tag_title_link_description_item.asp', 'https://www.w3schools.com/xml/rss_tag_enclosure.asp', 'https://www.w3schools.com/xml/rss_tag_guid.asp', 'https://www.w3schools.com/xml/rss_tag_title_link_description_item.asp', 'https://www.w3schools.com/xml/rss_tag_pubdate_item.asp', 'https://www.w3schools.com/xml/rss_tag_source.asp', 'https://www.w3schools.com/xml/rss_tag_title_link_description_item.asp', 'https://www.w3schools.com/xml/xml_rdf.asp', 'https://www.w3schools.com/xml/dom_nodetype.asp']","['https://www.w3schools.com/xml/pic_rss.gif', 'https://www.w3schools.com/xml/pic_xml.gif', 'https://www.w3schools.com/xml/firefox_rss.gif', 'https://www.w3schools.com/xml/pic_rss.gif', 'https://www.w3schools.com/xml/pic_xml.gif']","['RSS allows fast browsing for news and updates.', 'RSS was designed to show selected data.', 'Webmasters who seldom update their web sites do not need RSS!', 'RSS is useful for web sites that are updated frequently, like:', 'Here are some benefits of using RSS:', 'The syntax rules of RSS 2.0 are very simple and very strict.', 'There is no official standard for RSS.', 'RSS is used to share content between websites.', 'With RSS, you register your content with companies called aggregators.', 'Tip: Read our RSS Publishing chapter to view free RSS aggregation services.', 'RSS documents use a self-describing and simple syntax.', 'Here is a simple RSS document:', 'The <channel> element has three required child elements:', 'Each <channel> element can have one or more <item> elements.', 'Each <item> element defines an article or ""story"" in the RSS feed.', 'The <item> element has three required child elements:', 'Finally, the two last lines close the <channel> and <rss> elements.', 'The syntax for writing comments in RSS is similar to that of HTML:', 'Because RSS is XML, keep in mind that:', 'The RSS <channel> element describes the RSS feed.', 'Look at the following RSS document:', 'The <category> child element is used to specify a category for your feed.', 'The category for the RSS document above could be:', 'The <copyright> child element notifies about copyrighted material.', 'The copyright for the RSS document above could be:', 'The <image> element has three required child elements:', 'The image for the RSS document above could be:', 'The language for the RSS document above could be:', 'Each <item> element defines an article or ""story"" in an RSS feed.', 'Look at the following RSS document:', 'The <item> element has three required child elements:', 'The author of the item in the RSS document above could be:', 'A comment of the item in the RSS document above could be:', 'The <enclosure> child element allows a media-file to be included with an item.', 'The <enclosure> element has three required attributes:', 'A media-file included in the item in the RSS document above could be:', 'Having an RSS document is not useful if other people cannot reach it. ', ""Now it's time to get your RSS file up on the web. Here are the steps:"", '1. Name your RSS file. Notice that the file must have an .xml extension.', '3. Upload the RSS file to your web directory on your web server.', '4. Copy the little orange  or button to your web directory.', '7. Register your feed with the major search engines:', 'An alternative is to use a third-party automated RSS.', 'An RSS Reader is used to read RSS Feeds!', 'RSS readers are available for many different devices and OS.', 'These examples demonstrate RSS using our RSS reader to view the results.', 'RSS <channel> Element', 'RSS <item> element']","[""Since RSS data is small and fast-loading, it can easily be used with services like cell phones or PDA's. "", 'Web-rings with similar information can easily share data on their web sites to make them better and more useful.', 'Remove unwanted informationWith RSS you can (finally) separate wanted information from unwanted information (spam)!', 'Increase your site trafficWith RSS you can create your own news channel, and publish it to the Internet!', 'RSS 1.0 is the only version that was developed using the W3C RDF (Resource Description Framework) standard.', 'RSS 0.91 and RSS 2.0 are easier to understand than RSS 1.0. Our tutorial is based on RSS 2.0.', 'The next line is the RSS declaration which identifies that this is an RSS document (in this case, RSS version 2.0).', 'The next line contains the <channel> element. This element is used to describe the RSS feed.', 'As mentioned before, the <channel> element describes the RSS feed, and has three required child elements:', 'Furthermore, there are several optional child elements of <channel>. We will explain the most important ones below.', 'The <category> element makes it possible for RSS aggregators to group sites based on category.', 'The <image> child element allows an image to be displayed when aggregators present a feed.', 'The <language> child element is used to specify the language used to write your document.', 'The <language> element makes it possible for RSS aggregators to group sites based on language.', 'As mentioned before, each <item> element defines an article or ""story"" in the RSS feed.', 'Furthermore, there are several optional child elements of <item>. We will explain the most important ones below.', 'The <author> child element is used to specify the e-mail address of the author of an item.', 'Note: To prevent spam e-mails, some developers do not include the <author> element.', 'The <comments> child element allows an item to link to comments about that item.', '2. Validate your RSS file (a good validator can be found athttp://www.feedvalidator.org).', 'The best way to ensure your RSS feed works the way you want, is to manage it yourself.', 'However, this can be very time consuming, especially for pages with lot of updates.', 'The links in the ""Element"" column point to more information about each specific element.']","['With RSS it is possible to distribute up-to-date web content from one web site to thousands of other web sites around the world.', 'Without RSS, users will have to check your site daily for new updates. This may be too time-consuming for many users. With an RSS feed (RSS is often called a News feed or RSS feed) they can check your site faster using an RSS aggregator (a site or program that gathers and sorts out RSS feeds).', 'Choose your newsWith RSS you can choose to view the news you want, the news that interest you and are relevant to your work.', 'The idea behind RDF was to help create a Semantic Web. However, this does not matter too much for ordinary users,but by using web standards it will be easier for persons and applications to exchange data.', 'So, to be a part of it: First, create an RSS document and save it with an .xml extension. Then, upload the file to your website. Next, register with an RSS aggregator. Each day the aggregator searches the registered websites for RSS documents, verifies the link, and displays information about the feed so clients can link to documents that interests them.', 'The first line in the document - the XML declaration - definesthe XML version and the character encoding used in the document. In this case the document conforms to the 1.0 specificationof XML and uses the UTF-8 character set.', 'The <channel> element usually contains one or more <item> elements. Each <item> element defines an article or ""story"" in the RSS feed.', '5. Put the little orange ""RSS"" or ""XML"" button on the page where you will offer RSS to the world (e.g. on your home page). Then add a link to the button that links to the RSS file. The code will look something like this:<a href=""https://www.w3schools.com/xml/myfirstrss.xml""><img src=""https://www.w3schools.com/xml/pic_rss.gif"" width=""36"" height=""14""></a>.', '6. Submit your RSS feed to the RSS Feed Directories (you can Google or Yahoo for ""RSS Feed Directories""). Note! The URL to your feed is not your home page, it is the URL to your feed, like ""https://www.w3schools.com/xml/myfirstrss.xml"". Here is a free RSS aggregation service:', '8. Update your feed - After registering your RSS feed, you must make sure that you update your content frequently and that your RSS feed is constantly available.', 'For users who only need an RSS feed for their personal website, some of the most popular blog (Web Log) managers that offer built-in RSS services are:', 'There are a lot of different RSS readers. Some work as web services, and some are limited to windows (or Mac, PDA or UNIX):', 'Tip: Most browsers have a built-in RSS Reader. If you go to a web site that offers RSS feeds, you will see an RSS icon in the address bar, or toolbar. Click on the icon to view a list of the different feeds. Choose the feed you want to read.', 'Click on the little  or  button next to the RSS feed you want to read. Copy The URL you get in the browser window and paste it in your RSS reader.', 'Setting the required channel elements (<title>, <link>, and <description>)Specify a category for the RSSSpecify the program used to generate the RSSAdd an image to the RSSSpecify the language of the RSSAdd an text input field to the RSSSpecify days that the RSS should not be updated', 'Setting the required item elements (<title>, <link>, and <description>)Add a link to comments about the RSS itemAdd a media file to the RSS itemSpecify a unique identifier for the itemSpecify the publication date for the RSS itemSpecify a third-party source for the RSS item']","['\n<?xml version=""1.0"" encoding=""UTF-8"" ?>\n<rss version=""2.0"">\n<channel>\n  \xa0\n  <title>W3Schools Home Page</title>\n  \xa0\n  <link>https://www.w3schools.com</link>\n  \xa0\n  <description>Free web building tutorials</description>\n  \xa0\n  <item>\n    \xa0\xa0\xa0\n    <title>RSS Tutorial</title>\n    \xa0\xa0\xa0\n    <link>https://www.w3schools.com/xml/xml_rss.asp</link>\n    \xa0\xa0\xa0\n    <description>New RSS tutorial on W3Schools</description>\n  \xa0\n  </item>\n  \xa0\n  <item>\n    \xa0\xa0\xa0\n    <title>XML Tutorial</title>\n    \xa0\xa0\xa0\n    <link>https://www.w3schools.com/xml</link>\n    \xa0\xa0\xa0\n    <description>New XML tutorial on W3Schools</description>\n  \xa0\n  </item>\n</channel>\n</rss>\n', '\n<?xml version=""1.0"" encoding=""UTF-8"" ?>\n<rss version=""2.0"">\n<channel>\n  \xa0\n  <title>W3Schools Home Page</title>\n  \xa0\n  <link>https://www.w3schools.com</link>\n  \xa0\n  <description>Free web building tutorials</description>\n  \xa0\n  <item>\n    \xa0\xa0\xa0\n    <title>RSS Tutorial</title>\n    \xa0\xa0\xa0\n    <link>https://www.w3schools.com/xml/xml_rss.asp</link>\n    \xa0\xa0\xa0\n    <description>New RSS tutorial on W3Schools</description>\n  \xa0\n  </item>\n  \xa0\n  <item>\n    \xa0\xa0\xa0\n    <title>XML Tutorial</title>\n    \xa0\xa0\xa0\n    <link>https://www.w3schools.com/xml</link>\n    \xa0\xa0\xa0\n    <description>New XML tutorial on W3Schools</description>\n  \xa0\n  </item>\n</channel>\n</rss>', '\n<!-- This is an RSS comment -->', '\n<?xml version=""1.0"" encoding=""UTF-8"" ?>\n<rss version=""2.0"">\n<channel>\n  \xa0\n  <title>W3Schools Home Page</title>\n  \xa0\n  <link>https://www.w3schools.com</link>\n  \xa0\n  <description>Free web building tutorials</description>\n  \xa0\n  <item>\n    \xa0\xa0\xa0\n    <title>RSS Tutorial</title>\n    \xa0\xa0\xa0\n    <link>https://www.w3schools.com/xml/xml_rss.asp</link>\n    \xa0\xa0\xa0\n    <description>New RSS tutorial on W3Schools</description>\n  \xa0\n  </item>\n</channel>\n</rss>', '\n<category>Web development</category>', '\n<copyright>2006 Refsnes Data as. All rights reserved.</copyright>', '\n<image>\n  \xa0\n  <url>https://www.w3schools.com/images/logo.gif</url>\n  \xa0\n  <title>W3Schools.com</title>\n  \xa0\n  <link>https://www.w3schools.com</link>\n</image>', '\n<language>en-us</language>', '\n<?xml version=""1.0"" encoding=""UTF-8"" ?>\n<rss version=""2.0"">\n<channel>\n  \xa0\n  <title>W3Schools Home Page</title>\n  \xa0\n  <link>https://www.w3schools.com</link>\n  \xa0\n  <description>Free web building tutorials</description>\n  \xa0\n  <item>\n    \xa0\xa0\xa0\n    <title>RSS Tutorial</title>\n    \xa0\xa0\xa0\n    <link>https://www.w3schools.com/xml/xml_rss.asp</link>\n    \xa0\xa0\xa0\n    <description>New RSS tutorial on W3Schools</description>\n  \xa0\n  </item>\n</channel>\n</rss>', '\n<author>hege@refsnesdata.no</author>', '\n<comments>https://www.w3schools.com/comments</comments>', '\n<enclosure url=""https://www.w3schools.com/xml/rss.mp3""\nlength=""5000"" type=""audio/mpeg"" />']","['Element|||Description&&&<category>|||Optional. Defines one or more categories for the feed&&&<cloud>|||Optional. Register processes to be notified immediately of |||updates of the feed&&&<copyright>|||Optional. Notifies about copyrighted material&&&|||<description>|||Required. Describes the channel&&&<docs>|||Optional. Specifies a URL to the documentation of the format |||used in the feed&&&<generator>|||Optional. Specifies the program used to generate the feed&&&<image>|||Optional. Allows an image to be displayed when aggregators |||present a feed&&&<language>|||Optional. Specifies the language the feed is written in&&&<lastBuildDate>|||Optional. Defines the last-modified date of the content of the feed&&&<link>|||Required. Defines the hyperlink to the channel&&&<managingEditor>|||Optional. Defines the e-mail address to the editor of the |||content of the feed&&&<pubDate>|||Optional. Defines the last publication date for the content of the |||feed&&&<rating>|||Optional. The PICS rating of the feed&&&<skipDays>|||Optional. Specifies the days where aggregators should skip updating the feed&&&<skipHours>|||Optional. Specifies the hours where aggregators should skip updating the feed&&&<textInput>|||Optional. Specifies a text input field that should be displayed |||with the feed&&&<title>|||Required. Defines the title of the channel&&&<ttl>|||Optional. Specifies the number of minutes the feed can stay cached |||before refreshing it from the source&&&<webMaster>|||Optional. Defines the e-mail address to the webmaster of the |||feed', 'Element|||Description&&&<author>|||Optional. Specifies the e-mail address to the author of the |||item&&&<category>|||Optional. Defines one or more categories the item belongs to&&&<comments>|||Optional. Allows an item to link to comments about that item&&&<description>|||Required. Describes the item&&&<enclosure>|||Optional. Allows a media file to be included with the item&&&<guid>|||Optional. Defines a unique identifier for the item&&&<link>|||Required. Defines the hyperlink to the item&&&<pubDate>|||Optional. Defines the last-publication date for the item&&&<source>|||Optional. Specifies a third-party source for the item&&&<title>|||Required. Defines the title of the item']","[""RSS stands for Really Simple Syndication|||RSS allows you to syndicate your site content|||RSS defines an easy way to share and view headlines and content|||RSS files can be automatically updated|||RSS allows personalized views for different sites|||RSS is written in XML|||News sites - Lists news with title, date and descriptions|||Companies - Lists news and new products|||Calendars - Lists upcoming events and important days|||Site changes - Lists changed pages or new pages|||1997 - Dave Winer at UserLand develops scriptingNews. RSS was born|||1999 - Netscape develops RSS 0.90 (which supported scriptingNews)|||1999 - Dave Winer develops scriptingNews 2.0b1 (which included RSS 0.90 features)|||1999 - Netscape develops RSS 0.91 (which included most features from scriptingNews 2.0b1)|||1999 - UserLand gets rid of scriptingNews and uses only RSS 0.91|||1999 - Netscape stops their RSS development|||2000 - UserLand releases the official RSS 0.91 specification|||2000 - O'Reilly develops RSS 1.0. This format uses RDF and namespaces.|||2000 - Dave Winer at UserLand develops RSS 0.92|||2002 - Dave Winer develops RSS 2.0 after leaving UserLand|||2003 - The official RSS 2.0 specification is released|||About 50 % of all RSS feeds use RSS 0.91|||About 25 % use RSS 1.0|||The last 25 % is split between RSS 0.9x versions and RSS 2.0|||<title> - Defines the title of the channel (e.g. W3Schools Home Page)|||<link> - Defines the hyperlink to the channel (e.g. https://www.w3schools.com)|||<description> - Describes the channel (e.g. Free web building tutorials)|||<title> - Defines the title of the item (e.g. RSS Tutorial)|||<link> - Defines the hyperlink to the item (e.g. https://www.w3schools.com/xml/xml_rss.asp)|||<description> - Describes the item (e.g. New RSS tutorial on W3Schools)|||All elements must have a closing tag|||Elements are case sensitive|||Elements must be properly nested|||Attribute values must always be quoted|||<title> - Defines the title of the channel (e.g. W3Schools Home Page)|||<link> - Defines the hyperlink to the channel (e.g. https://www.w3schools.com)|||<description> - Describes the channel (e.g. Free web building tutorials)|||<url> - Defines the URL to the image|||<title> - Defines the text to display if the image could not be shown|||<link> - Defines the hyperlink to the website that offers the channel|||<title> - Defines the title of the item (e.g. RSS Tutorial)|||<link> - Defines the hyperlink to the item (e.g. https://www.w3schools.com/xml/xml_rss.asp)|||<description> - Describes the item (e.g. New RSS tutorial on W3Schools)|||url - Defines the URL to the media file|||length - Defines the length (in bytes) of the media file|||type - Defines the type of media file|||Newsisfree: Register here|||Google -||||||||| http://www.google.com/submityourcontent/website-owner|||Bing - ||| http://www.bing.com/toolbox/submit-site-url|||Wordpress|||Blogger|||Radio|||QuiteRSS - FREE! |||  QuiteRSS is an open-source, cross-platform RSS/Atom news reader. It is |||  versatile, and has a full set of options. QuietRSS has a rich set of social |||  sharing options (Email/Twitter/Facebook/.../Pocket/Etc). QuietRSS is fast |||  starting, and navigation is quick|||FeedReader - FREE! Simple, straightforward feed reader that easily handles large number of feeds. Has the essential options (not a lot of confusing ones). Does not require Java. Import or export OPML files. Option to open links in an external browser|||RssReader - FREE! Windows-based RSS reader. Supports RSS versions 0.9x, 1.0 and 2.0 and Atom 0.1, 0.2 and 0.3||||||  blogbotrss - FREE! An RSS reader plug-in for Internet Explorer and |||  Microsoft Outlook|||""]"
110,['XML DOM Node Types'],"['Try it Yourself - Examples', 'Node Types', 'Node Types - Return Values', 'NodeTypes - Named Constants']",['Header'],"['https://www.w3schools.com/xml/xml_rss.asp', 'https://www.w3schools.com/xml/dom_node.asp', 'https://www.w3schools.com/xml/javascript:void(0)', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodetype', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_nodevalue', 'https://www.w3schools.com/xml/xml_rss.asp', 'https://www.w3schools.com/xml/dom_node.asp']",[],"['The DOM presents a document as a hierarchy of node objects.', 'The examples below use the XML file books.xml. ', 'Display nodeName and nodeType of all elements', 'Display nodeName and nodeValue of all elements']","['The following table lists the different W3C node types, and which node types they may have as children:', 'The following table lists what the nodeName and the nodeValue properties will return for each node type:']",[],[],"['Node Type|||Description|||Children&&&Document|||Represents the entire document (the root-node of the DOM tree)|||Element (max. one), ProcessingInstruction, Comment, DocumentType&&&DocumentFragment|||Represents a ""lightweight"" Document object, which can hold a portion of a document|||Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference&&&DocumentType|||Provides an interface to the entities defined for the document|||None&&&ProcessingInstruction|||Represents a processing instruction|||None&&&EntityReference|||Represents an entity reference|||Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference&&&Element|||Represents an element|||Element, Text, Comment, ProcessingInstruction, CDATASection, EntityReference&&&Attr|||Represents an attribute|||Text, EntityReference&&&Text|||Represents textual content in an element or attribute|||None&&&CDATASection|||Represents a CDATA section in a document (text that will NOT be parsed by a parser)|||None&&&Comment|||Represents a comment|||None&&&Entity|||Represents an entity|||Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference&&&Notation|||Represents a notation declared in the DTD|||None', 'Node Type|||nodeName returns|||nodeValue returns&&&Document|||#document|||null&&&DocumentFragment|||#document fragment|||null&&&DocumentType|||doctype name|||null&&&EntityReference|||entity reference name|||null&&&Element|||element name|||null&&&Attr|||attribute name|||attribute value&&&ProcessingInstruction|||target|||content of node&&&Comment|||#comment|||comment text&&&Text|||#text|||content of node&&&CDATASection|||#cdata-section|||content of node&&&Entity|||entity name|||null&&&Notation|||notation name|||null', 'NodeType|||Named Constant&&&1|||ELEMENT_NODE&&&2|||ATTRIBUTE_NODE&&&3|||TEXT_NODE&&&4|||CDATA_SECTION_NODE&&&5|||ENTITY_REFERENCE_NODE&&&6|||ENTITY_NODE&&&7|||PROCESSING_INSTRUCTION_NODE&&&8|||COMMENT_NODE&&&9|||DOCUMENT_NODE&&&10|||DOCUMENT_TYPE_NODE&&&11|||DOCUMENT_FRAGMENT_NODE&&&12|||NOTATION_NODE']",[]
111,['XML DOM - The Node Object'],"['The Node Object', 'Node Object Properties', 'Node Object Methods']",[],"['https://www.w3schools.com/xml/dom_nodetype.asp', 'https://www.w3schools.com/xml/dom_nodelist.asp', 'https://www.w3schools.com/xml/dom_nodetype.asp', 'https://www.w3schools.com/xml/prop_node_baseuri.asp', 'https://www.w3schools.com/xml/prop_node_childnodes.asp', 'https://www.w3schools.com/xml/prop_node_firstchild.asp', 'https://www.w3schools.com/xml/prop_node_lastchild.asp', 'https://www.w3schools.com/xml/prop_node_nextsibling.asp', 'https://www.w3schools.com/xml/prop_node_nodename.asp', 'https://www.w3schools.com/xml/prop_node_nodetype.asp', 'https://www.w3schools.com/xml/prop_node_nodevalue.asp', 'https://www.w3schools.com/xml/prop_node_ownerdocument.asp', 'https://www.w3schools.com/xml/prop_node_parentnode.asp', 'https://www.w3schools.com/xml/prop_node_prefix.asp', 'https://www.w3schools.com/xml/prop_node_previoussibling.asp', 'https://www.w3schools.com/xml/prop_node_textcontent.asp', 'https://www.w3schools.com/xml/met_node_appendchild.asp', 'https://www.w3schools.com/xml/met_node_clonenode.asp', 'https://www.w3schools.com/xml/met_node_comparedocumentposition.asp', 'https://www.w3schools.com/xml/met_node_hasattributes.asp', 'https://www.w3schools.com/xml/met_node_haschildnodes.asp', 'https://www.w3schools.com/xml/met_node_insertbefore.asp', 'https://www.w3schools.com/xml/met_node_isequalnode.asp', 'https://www.w3schools.com/xml/met_node_issamenode.asp', 'https://www.w3schools.com/xml/met_node_lookupnamespaceuri.asp', 'https://www.w3schools.com/xml/met_node_lookupprefix.asp', 'https://www.w3schools.com/xml/met_node_normalize.asp', 'https://www.w3schools.com/xml/met_node_removechild.asp', 'https://www.w3schools.com/xml/met_node_replacechild.asp', 'https://www.w3schools.com/xml/dom_nodetype.asp', 'https://www.w3schools.com/xml/dom_nodelist.asp']",[],['The Node object represents a single node in the document tree.'],[],"['A node can be an element node, an attribute node, a text node, or any other of the node types explained in the Node Types chapter.', 'Notice that while all objects inherits the Node properties / methods for dealing with parents and children, not all objects can have parents or children. For example, Text nodes may not have children, and adding children to such nodes results in a DOM error.']",[],"['Property|||Description&&&attributes|||A NamedNodeMap containing the attributes of this node (if it is an Element)&&&baseURI|||Returns the absolute base URI of a node&&&childNodes|||Returns a NodeList of child nodes for a node&&&firstChild|||Returns the first child of a node&&&lastChild|||Returns the last child of a node&&&nextSibling|||Returns the node immediately following a node&&&nodeName|||Returns the name of a node, depending on its type&&&nodeType|||Returns the type of a node&&&nodeValue|||Sets or returns the value of a node, depending on its type&&&ownerDocument|||Returns the root element (document object) for a node&&&parentNode|||Returns the parent node of a node&&&prefix|||Sets or returns the namespace prefix of a node&&&previousSibling|||Returns the node immediately before a node&&&textContent|||Sets or returns the textual content of a node and its descendants', 'Method|||Description&&&appendChild()|||Appends a new child node to the end of the list of children of a node&&&cloneNode()|||Clones a node&&&compareDocumentPosition()|||Compares the placement of two nodes in the DOM hierarchy (document)&&&getFeature(feature,version)|||Returns a DOM object which implements the specialized APIs of the specified feature and version&&&getUserData(key)|||Returns the object associated to a key on a this node. The object must first have been set to||| this node by calling setUserData with the same key&&&hasAttributes()|||Returns true if the specified node has any attributes, otherwise false&&&hasChildNodes()|||Returns true if the specified node has any child nodes, otherwise false&&&insertBefore()|||Inserts a new child node before an existing child node&&&isDefaultNamespace(URI)|||Returns whether the specified namespaceURI is the default&&&isEqualNode()|||Tests whether two nodes are equal&&&isSameNode()|||Tests whether the two nodes are the same node&&&lookupNamespaceURI()|||Returns the namespace URI associated with a given prefix&&&lookupPrefix()|||Returns the prefix associated with a given namespace URI&&&normalize()|||Puts all Text nodes underneath a node (including attribute nodes) into a ""normal"" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes&&&removeChild()|||Removes a specified child node from the current node &&&replaceChild()|||Replaces a child node with a new node&&&setUserData(key,data,handler)|||Associates an object to a key on a node']",[]
112,['XML DOM - The NodeList Object'],"['The NodeList object', 'NodeList Object Properties', 'NodeList Object Methods']",[],"['https://www.w3schools.com/xml/dom_node.asp', 'https://www.w3schools.com/xml/dom_namednodemap.asp', 'https://www.w3schools.com/xml/prop_nodelist_length.asp', 'https://www.w3schools.com/xml/met_nodelist_item.asp', 'https://www.w3schools.com/xml/dom_node.asp', 'https://www.w3schools.com/xml/dom_namednodemap.asp']",[],['The NodeList object represents an ordered list of nodes. '],"['The nodes in the node list can be accessed through their index number (starting from 0).', 'Note: In a node list, the nodes are returned in the order in which they are specified in the XML document.']","['The node list keeps itself up-to-date. If an element is deleted or added, in the node list or the XML document,the list is automatically updated.']",[],"['Property|||Description&&&length|||Returns the number of nodes in a node list', 'Method|||Description&&&item()|||Returns the node at the specified index in a node list']",[]
113,['XML DOM - The NamedNodeMap Object'],"['The NamedNodeMap object', 'NamedNodeMap Object Properties', 'NamedNodeMap Object Methods']",[],"['https://www.w3schools.com/xml/dom_nodelist.asp', 'https://www.w3schools.com/xml/dom_document.asp', 'https://www.w3schools.com/xml/prop_nodemap_length.asp', 'https://www.w3schools.com/xml/met_nodemap_getnameditem.asp', 'https://www.w3schools.com/xml/met_nodemap_item.asp', 'https://www.w3schools.com/xml/met_nodemap_removenameditem.asp', 'https://www.w3schools.com/xml/dom_nodelist.asp', 'https://www.w3schools.com/xml/dom_document.asp']",[],"['The NamedNodeMap object represents an unordered list of nodes. ', 'The nodes in the NamedNodeMap can be accessed through their name.', 'Note: In a named node map, the nodes are not returned in any particular order.']",[],"['The NamedNodeMap keeps itself up-to-date. If an element is deleted or added,in the node list or the XML document, the list is automatically updated.']",[],"['Property|||Description&&&length|||Returns the number of nodes in the list', 'Method|||Description&&&getNamedItem()|||Returns the node with the specific name&&&getNamedItemNS()|||Returns the node with the specific name and namespace&&&item()|||Returns the node at the specified index&&&removeNamedItem()|||Removes the node with the specific name&&&removeNamedItemNS()|||Removes the node with the specific name and namespace&&&setNamedItem()|||Sets the specified node (by name)&&&setNamedItemNS()|||Sets the specified node (by name and namespace)']",[]
114,['XML DOM - The Document Object'],"['The XML Document Object', 'Document Object Properties', 'Document Object Methods', 'DocumentType Object Properties', 'DocumentImplementation Object Methods', 'ProcessingInstruction Object Properties']",[],"['https://www.w3schools.com/xml/dom_namednodemap.asp', 'https://www.w3schools.com/xml/dom_element.asp', 'https://www.w3schools.com/xml/prop_document_childnodes.asp', 'https://www.w3schools.com/xml/prop_document_doctype.asp', 'https://www.w3schools.com/xml/prop_document_documentelement.asp', 'https://www.w3schools.com/xml/prop_document_documenturi.asp', 'https://www.w3schools.com/xml/prop_document_firstchild.asp', 'https://www.w3schools.com/xml/prop_document_implementation.asp', 'https://www.w3schools.com/xml/prop_document_inputencoding.asp', 'https://www.w3schools.com/xml/prop_document_lastchild.asp', 'https://www.w3schools.com/xml/prop_document_nodename.asp', 'https://www.w3schools.com/xml/prop_document_nodetype.asp', 'https://www.w3schools.com/xml/prop_document_nodevalue.asp', 'https://www.w3schools.com/xml/prop_document_xmlencoding.asp', 'https://www.w3schools.com/xml/prop_document_xmlstandalone.asp', 'https://www.w3schools.com/xml/prop_document_xmlversion.asp', 'https://www.w3schools.com/xml/met_document_createcdatasection.asp', 'https://www.w3schools.com/xml/met_document_createcomment.asp', 'https://www.w3schools.com/xml/met_document_createelement.asp', 'https://www.w3schools.com/xml/met_document_createelementns.asp', 'https://www.w3schools.com/xml/met_document_createtextnode.asp', 'https://www.w3schools.com/xml/met_document_getelementsbytagname.asp', 'https://www.w3schools.com/xml/met_document_getelementsbytagnamens.asp', 'https://www.w3schools.com/xml/met_document_renamenode.asp', 'https://www.w3schools.com/xml/prop_documenttype_name.asp', 'https://www.w3schools.com/xml/prop_documenttype_systemid.asp', 'https://www.w3schools.com/xml/dom_namednodemap.asp', 'https://www.w3schools.com/xml/dom_element.asp']",[],"['The Document object represents the entire XML document.', 'The ProcessingInstruction object represents a processing instruction.']","[""The Document object is the root of an XML document tree, and gives us the primary access to the document's data."", 'Each document has a DOCTYPE attribute that whose value is either null or a DocumentType object.', 'The DocumentType object provides an interface to the entities defined for an XML document.', 'A processing instruction is used as a way to keep processor-specific information in the text of the XML document.']","['Since element nodes, text nodes, comments, processing instructions, etc. cannot exist outside the document, the Document object also contains methods to create these objects. The Node objects have a ownerDocument property which associates them with the Document where they were created.', 'The DOMImplementation object performs operations that are independent of any particular instance of the document object model.']",[],"['Property|||Description&&&childNodes|||Returns a NodeList of child nodes for the document&&&doctype|||Returns the Document Type Declaration associated with the document&&&documentElement|||Returns the root node of the document&&&documentURI|||Sets or returns the location of the document&&&domConfig|||Returns the configuration used when normalizeDocument() is invoked&&&firstChild|||Returns the first child node of the document&&&implementation|||Returns the DOMImplementation object that handles this document&&&inputEncoding|||Returns the encoding used for the document (when parsing)&&&lastChild|||Returns the last child node of the document&&&nodeName|||Returns the name of a node (depending on its type)&&&nodeType|||Returns the node type of a node&&&nodeValue|||Sets or returns the value of a node (depending on its type)&&&xmlEncoding|||Returns the XML encoding of the document&&&xmlStandalone|||Sets or returns whether the document is standalone&&&xmlVersion|||Sets or returns the XML version of the document', 'Method|||Description&&&adoptNode(sourcenode)|||Adopts a node from another document to this document, and returns the adopted node&&&createAttribute(name)|||Creates an attribute node with the specified name, and returns the new Attr object&&&createAttributeNS(uri,name)|||Creates an attribute node with the specified name and namespace, and returns the new Attr object&&&createCDATASection()|||Creates a CDATA section node&&&createComment()|||Creates a comment node&&&createDocumentFragment()|||Creates an empty DocumentFragment object, and returns it&&&createElement()|||Creates an element node&&&createElementNS()|||Creates an element node with a specified namespace&&&createEntityReference(name)|||Creates an EntityReference object, and returns it&&&createProcessingInstruction(target,data)|||Creates a ProcessingInstruction object, and returns it&&&createTextNode()|||Creates a text node&&&getElementById(id)|||Returns the element that has an ID attribute with the given value. If no such element exists, it returns null&&&getElementsByTagName()|||Returns a NodeList of all elements with a specified name&&&getElementsByTagNameNS()|||Returns a NodeList of all elements with a specified name and namespace&&&importNode(nodetoimport,deep)|||Imports a node from another document to this document. This method creates a new copy of the source node. If the deep parameter is set to true, it imports all children of the specified node. If set to false, it imports only the node itself. This method returns the imported node&&&normalizeDocument()|||\xa0&&&renameNode()|||Renames an element or attribute node', 'Property|||Description&&&name|||Returns the name of the DTD&&&publicId|||Returns the public identifier of the DTD&&&systemId|||Returns the system identifier of the external DTD', 'Method|||Description&&&createDocument(nsURI, name, doctype)|||Creates a new DOM Document object of the specified doctype &&&createDocumentType(name, pubId, systemId)|||Creates an empty DocumentType node&&&getFeature(feature, version)|||Returns an object which implements the APIs of the specified feature and version, if the is any&&&hasFeature(feature, version)|||Checks whether the DOM implementation implements a specific feature and version', 'Property|||Description&&&data|||Sets or returns the content of this processing instruction&&&target|||Returns the target of this processing instruction']",[]
115,['XML DOM - The Element Object'],"['The Element object', 'Element Object Properties', 'Element Object Methods']",[],"['https://www.w3schools.com/xml/dom_document.asp', 'https://www.w3schools.com/xml/dom_attribute.asp', 'https://www.w3schools.com/xml/prop_element_attributes.asp', 'https://www.w3schools.com/xml/prop_element_baseuri.asp', 'https://www.w3schools.com/xml/prop_element_childnodes.asp', 'https://www.w3schools.com/xml/prop_element_firstchild.asp', 'https://www.w3schools.com/xml/prop_element_lastchild.asp', 'https://www.w3schools.com/xml/prop_element_localname.asp', 'https://www.w3schools.com/xml/prop_element_namespaceuri.asp', 'https://www.w3schools.com/xml/prop_element_nextsibling.asp', 'https://www.w3schools.com/xml/prop_element_nodename.asp', 'https://www.w3schools.com/xml/prop_element_nodetype.asp', 'https://www.w3schools.com/xml/prop_element_ownerdocument.asp', 'https://www.w3schools.com/xml/prop_element_parentnode.asp', 'https://www.w3schools.com/xml/prop_element_prefix.asp', 'https://www.w3schools.com/xml/prop_element_previoussibling.asp', 'https://www.w3schools.com/xml/prop_element_tagname.asp', 'https://www.w3schools.com/xml/prop_element_textcontent.asp', 'https://www.w3schools.com/xml/met_element_appendchild.asp', 'https://www.w3schools.com/xml/met_element_clonenode.asp', 'https://www.w3schools.com/xml/met_element_comparedocumentposition.asp', 'https://www.w3schools.com/xml/met_element_getattribute.asp', 'https://www.w3schools.com/xml/met_element_getattributens.asp', 'https://www.w3schools.com/xml/met_element_getattributenode.asp', 'https://www.w3schools.com/xml/met_element_getattributenodens.asp', 'https://www.w3schools.com/xml/met_element_getelementsbytagname.asp', 'https://www.w3schools.com/xml/met_element_getelementsbytagnamens.asp', 'https://www.w3schools.com/xml/met_element_hasattribute.asp', 'https://www.w3schools.com/xml/met_element_hasattributens.asp', 'https://www.w3schools.com/xml/met_element_hasattributes.asp', 'https://www.w3schools.com/xml/met_element_haschildnodes.asp', 'https://www.w3schools.com/xml/met_element_insertbefore.asp', 'https://www.w3schools.com/xml/met_element_isequalnode.asp', 'https://www.w3schools.com/xml/met_element_lookupnamespaceuri.asp', 'https://www.w3schools.com/xml/met_element_lookupprefix.asp', 'https://www.w3schools.com/xml/met_element_removeattribute.asp', 'https://www.w3schools.com/xml/met_element_removeattributens.asp', 'https://www.w3schools.com/xml/met_element_removeattributenode.asp', 'https://www.w3schools.com/xml/met_element_removechild.asp', 'https://www.w3schools.com/xml/met_element_replacechild.asp', 'https://www.w3schools.com/xml/met_element_setattribute.asp', 'https://www.w3schools.com/xml/met_element_setattributens.asp', 'https://www.w3schools.com/xml/met_element_setattributenode.asp', 'https://www.w3schools.com/xml/dom_document.asp', 'https://www.w3schools.com/xml/dom_attribute.asp']",[],[],"[""Because the Element object is also a Node, it inherits the Node object's properties and methods. ""]","['The Element object represents an element in an XML document. Elements may contain attributes,other elements, or text. If an element contains text, the text is represented in a text-node.', 'IMPORTANT! Text is always stored in text nodes. A common error in DOM processing is to navigate to an element node and expect it to contain the text. However, even the simplest element node has a text node under it. For example, in <year>2005</year>, there is an element node (year), and a text node under it, which contains the text (2005).']",[],"['Property|||Description&&&attributes|||Returns a NamedNodeMap of attributes for the element&&&baseURI|||Returns the absolute base URI of the element&&&childNodes|||Returns a NodeList of child nodes for the element&&&firstChild|||Returns the first child of the element&&&lastChild|||Returns the last child of the element&&&localName|||Returns the local part of the name of the element&&&namespaceURI|||Returns the namespace URI of the element&&&nextSibling|||Returns the node immediately following the element&&&nodeName|||Returns the name of the node, depending on its type&&&nodeType|||Returns the type of the node&&&ownerDocument|||Returns the root element (document object) for an element&&&parentNode|||Returns the parent node of the element&&&prefix|||Sets or returns the namespace prefix of the element&&&previousSibling|||Returns the node immediately before the element&&&schemaTypeInfo|||Returns the type information associated with the element&&&tagName|||Returns the name of the element&&&textContent|||Sets or returns the text content of the element and its descendants', 'Method|||Description&&&appendChild()|||Adds a new child node to the end of the list of children of the node&&&cloneNode()|||Clones a node&&&compareDocumentPosition()|||Compares the document position of two nodes&&&getAttribute()|||Returns the value of an attribute&&&getAttributeNS()|||Returns the value of an attribute (with a namespace)&&&getAttributeNode()|||Returns an attribute node as an Attribute object&&&getAttributeNodeNS()|||Returns an attribute node (with a namespace) as an Attribute object&&&getElementsByTagName()|||Returns a NodeList of matching element nodes, and their children&&&getElementsByTagNameNS()|||Returns a NodeList of matching element nodes (with a namespace), and their children&&&getFeature(feature,version)|||Returns a DOM object which implements the specialized APIs of the specified feature and version&&&getUserData(key)|||Returns the object associated to a key on a this node. The object must first have been set to this node by calling setUserData with the same key&&&hasAttribute()|||Returns whether an element has any attributes matching a specified name&&&hasAttributeNS()|||Returns whether an element has any attributes matching a specified name and namespace&&&hasAttributes()|||Returns whether the element has any attributes&&&hasChildNodes()|||Returns whether the element has any child nodes&&&insertBefore()|||Inserts a new child node before an existing child node&&&isDefaultNamespace(URI)|||Returns whether the specified namespaceURI is the default&&&isEqualNode()|||Checks if two nodes are equal&&&lookupNamespaceURI()|||Returns the namespace URI matching a specified prefix&&&lookupPrefix()|||Returns the prefix matching a specified namespace URI&&&normalize()|||Puts all text nodes underneath this element (including attributes) into a ""normal""||| form where only structure (e.g., elements, comments, processing instructions, CDATA sections,||| and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes&&&removeAttribute()|||Removes a specified attribute&&&removeAttributeNS()|||Removes a specified attribute (with a namespace)&&&removeAttributeNode()|||Removes a specified attribute node&&&removeChild()|||Removes a child node&&&replaceChild()|||Replaces a child node&&&setUserData(key,data,handler)|||Associates an object to a key on the element&&&setAttribute()|||Adds a new attribute&&&setAttributeNS()|||Adds a new attribute (with a namespace)&&&setAttributeNode()|||Adds a new attribute node&&&setAttributeNodeNS(attrnode)|||Adds a new attribute node (with a namespace)&&&setIdAttribute(name,isId)|||If the isId property of the Attribute object is true, this method declares the specified attribute to be a user-determined ID attribute&&&setIdAttributeNS(uri,name,isId)|||If the isId property of the Attribute object is true, this method declares the specified attribute (with a namespace) to be a user-determined ID attribute&&&setIdAttributeNode(idAttr,isId)|||If the isId property of the Attribute object is true, this method declares the specified attribute to be a user-determined ID attribute']",[]
116,['XML DOM - The Attr Object'],"['The Attr object', 'Attr Object Properties']",[],"['https://www.w3schools.com/xml/dom_element.asp', 'https://www.w3schools.com/xml/dom_text.asp', 'https://www.w3schools.com/xml/prop_attr_baseuri.asp', 'https://www.w3schools.com/xml/prop_attr_isid.asp', 'https://www.w3schools.com/xml/prop_attr_localname.asp', 'https://www.w3schools.com/xml/prop_attr_name.asp', 'https://www.w3schools.com/xml/prop_attr_namespaceuri.asp', 'https://www.w3schools.com/xml/prop_attr_nodename.asp', 'https://www.w3schools.com/xml/prop_attr_nodetype.asp', 'https://www.w3schools.com/xml/prop_attr_nodevalue.asp', 'https://www.w3schools.com/xml/prop_attr_ownerdocument.asp', 'https://www.w3schools.com/xml/prop_attr_ownerelement.asp', 'https://www.w3schools.com/xml/prop_attr_prefix.asp', 'https://www.w3schools.com/xml/prop_attr_specified.asp', 'https://www.w3schools.com/xml/prop_attr_textcontent.asp', 'https://www.w3schools.com/xml/prop_attr_value.asp', 'https://www.w3schools.com/xml/dom_element.asp', 'https://www.w3schools.com/xml/dom_text.asp']",[],[],[],"['The Attr object represents an attribute of an Element object. The allowable values for attributes are usually defined in a DTD. ', ""Because the Attr object is also a Node, it inherits the Node object's properties and methods. However, an attribute does not have a parent node and is not considered to be a child node of an element, and will return null for many of the Node properties.""]",[],"[""Property|||Description&&&baseURI|||Returns the absolute base URI of the attribute&&&isId|||Returns true if the attribute is known to be of type ID, otherwise it returns false&&&localName|||Returns the local part of the name of the attribute&&&name|||Returns the name of the attribute&&&namespaceURI|||Returns the namespace URI of the attribute&&&nodeName|||Returns the name of the node, depending on its type&&&nodeType|||Returns the type of the node&&&nodeValue|||Sets or returns the value of the node, depending on its type&&&ownerDocument|||Returns the root element (document object) for an attribute&&&ownerElement|||Returns the element node the attribute is attached to&&&prefix|||Sets or returns the namespace prefix of the attribute&&&schemaTypeInfo|||Returns the type information associated with this attribute&&&specified|||Returns true if the attribute value is set in the document, and false if it's a default value in a DTD/Schema.&&&textContent|||Sets or returns the textual content of an attribute&&&value|||Sets or returns the value of the attribute""]",[]
117,['XML DOM - The Text Object'],"['The Text object', 'Text Object Properties', 'Text Object Methods']",[],"['https://www.w3schools.com/xml/dom_attribute.asp', 'https://www.w3schools.com/xml/dom_cdatasection.asp', 'https://www.w3schools.com/xml/prop_text_data.asp', 'https://www.w3schools.com/xml/prop_text_length.asp', 'https://www.w3schools.com/xml/met_text_appenddata.asp', 'https://www.w3schools.com/xml/met_text_deletedata.asp', 'https://www.w3schools.com/xml/met_text_insertdata.asp', 'https://www.w3schools.com/xml/met_text_replacedata.asp', 'https://www.w3schools.com/xml/met_text_splittext.asp', 'https://www.w3schools.com/xml/met_text_substringdata.asp', 'https://www.w3schools.com/xml/dom_attribute.asp', 'https://www.w3schools.com/xml/dom_cdatasection.asp']",[],['The Text object represents the textual content of an element or attribute.'],[],[],[],"['Property|||Description&&&data|||Sets or returns the text of the element or attribute&&&isElementContentWhitespace|||Returns true if the text node contains content whitespace, otherwise it returns false&&&length|||Returns the length of the text of the element or attribute&&&wholeText|||Returns all text of text nodes adjacent to this node, concatenated in document order', 'Method|||Description&&&appendData()|||Appends data to the node&&&deleteData()|||Deletes data from the node&&&insertData()|||Inserts data into the node&&&replaceData()|||Replaces data in the node&&&replaceWholeText(text)|||Replaces the text of this node and all adjacent text nodes with the specified text&&&splitText()|||Splits this node into two nodes at the specified offset, and returns the new node that contains the text after the offset&&&substringData()|||Extracts data from the node']",[]
118,['XML DOM - The CDATASection Object'],"['Try it Yourself - Examples', 'The CDATASection object', 'CDATASection Object Properties', 'CDATASection Object Methods']",[],"['https://www.w3schools.com/xml/dom_text.asp', 'https://www.w3schools.com/xml/dom_comment.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcdatasection', 'https://www.w3schools.com/xml/prop_cdata_data.asp', 'https://www.w3schools.com/xml/prop_cdata_length.asp', 'https://www.w3schools.com/xml/met_cdata_appenddata.asp', 'https://www.w3schools.com/xml/met_cdata_deletedata.asp', 'https://www.w3schools.com/xml/met_cdata_insertdata.asp', 'https://www.w3schools.com/xml/met_cdata_replacedata.asp', 'https://www.w3schools.com/xml/met_cdata_splittext.asp', 'https://www.w3schools.com/xml/met_cdata_substringdata.asp', 'https://www.w3schools.com/xml/dom_text.asp', 'https://www.w3schools.com/xml/dom_comment.asp']",[],"['createCDATASection() - Create a CDATA section node', 'The CDATASection object represents a CDATA section in a document.']",[],"['The examples below use the XML file books.xml. createCDATASection() - Create a CDATA section nodeThe CDATASection objectThe CDATASection object represents a CDATA section in a document.A CDATA section contains text that will NOT be parsed by a parser. Tags inside a CDATA section will NOT be treated as markup and entities will not be expanded. The primary purpose is for including material such as XML fragments, without needing to escape all the delimiters.The only delimiter that is recognized in a CDATA section is ""]]>"" - which indicates the end of the CDATA section. CDATA sections cannot be nested.CDATASection Object PropertiesPropertyDescriptiondataSets or returns the text of this nodelengthReturns the length of the CDATA sectionCDATASection Object MethodsPropertyDescriptionappendData()Appends data to the nodedeleteData()Deletes data from the nodeinsertData()Inserts data into the nodereplaceData()Replaces data in the nodesplitText()Splits the CDATA node into two nodessubstringData()Extracts data from the node❮ PreviousNext ❯', 'A CDATA section contains text that will NOT be parsed by a parser. Tags inside a CDATA section will NOT be treated as markup and entities will not be expanded. The primary purpose is for including material such as XML fragments, without needing to escape all the delimiters.', 'The only delimiter that is recognized in a CDATA section is ""]]>"" - which indicates the end of the CDATA section. CDATA sections cannot be nested.']",[],"['Property|||Description&&&data|||Sets or returns the text of this node&&&length|||Returns the length of the CDATA section', 'Property|||Description&&&appendData()|||Appends data to the node&&&deleteData()|||Deletes data from the node&&&insertData()|||Inserts data into the node&&&replaceData()|||Replaces data in the node&&&splitText()|||Splits the CDATA node into two nodes&&&substringData()|||Extracts data from the node']",[]
119,['XML DOM - The Comment Object'],"['Try it Yourself - Examples', 'The Comment object', 'Comment Object Properties', 'Comment Object Methods']",[],"['https://www.w3schools.com/xml/dom_cdatasection.asp', 'https://www.w3schools.com/xml/dom_http.asp', 'https://www.w3schools.com/xml/books.xml', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_createcomment', 'https://www.w3schools.com/xml/prop_comment_data.asp', 'https://www.w3schools.com/xml/prop_comment_length.asp', 'https://www.w3schools.com/xml/met_comment_appenddata.asp', 'https://www.w3schools.com/xml/met_comment_deletedata.asp', 'https://www.w3schools.com/xml/met_comment_insertdata.asp', 'https://www.w3schools.com/xml/met_comment_replacedata.asp', 'https://www.w3schools.com/xml/met_comment_substringdata.asp', 'https://www.w3schools.com/xml/dom_cdatasection.asp', 'https://www.w3schools.com/xml/dom_http.asp']",[],"['createComment() - Create a comment node', 'The Comment object represents the content of comment nodes in a document.']",[],['The examples below use the XML file books.xml. createComment() - Create a comment nodeThe Comment objectThe Comment object represents the content of comment nodes in a document.Comment Object PropertiesPropertyDescriptiondataSets or returns the text of this nodelengthReturns the length of the text of this nodeComment Object MethodsPropertyDescriptionappendData()Appends data to the nodedeleteData()Deletes data from the nodeinsertData()Inserts data into the nodereplaceData()Replaces data in the nodesubstringData()Extracts data from the node❮ PreviousNext ❯'],[],"['Property|||Description&&&data|||Sets or returns the text of this node&&&length|||Returns the length of the text of this node', 'Property|||Description&&&appendData()|||Appends data to the node&&&deleteData()|||Deletes data from the node&&&insertData()|||Inserts data into the node&&&replaceData()|||Replaces data in the node&&&substringData()|||Extracts data from the node']",[]
120,['The XMLHttpRequest Object'],"['Try it Yourself - Examples', 'The XMLHttpRequest Object', 'XMLHttpRequest Object Methods', 'XMLHttpRequest Object Properties']",[],"['https://www.w3schools.com/xml/dom_comment.asp', 'https://www.w3schools.com/xml/dom_parser.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_first', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_header', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_lastmodified', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_suggest', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_database', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_xmlhttprequest_xml', 'https://www.w3schools.com/xml/dom_comment.asp', 'https://www.w3schools.com/xml/dom_parser.asp']",[],"['The XMLHttpRequest object is the developers dream, because you can:']","['With the XMLHttpRequest object you can update parts of a web page, without reloading the whole page.', 'A simple XMLHttpRequest exampleCreate a simple XMLHttpRequest, and retrieve data from a TXT file.', 'Retrieve header information with getAllResponseHeaders()Retrieve header information of a resource (file).', 'Retrieve specific header information with getResponseHeader()Retrieve specific header information of a resource (file).', 'Retrieve content from a databaseHow a web page can fetch information from a database with the XMLHttpRequest object.', 'The XMLHttpRequest object is used to exchange data with a server behind the scenes.']","['Retrieve the content of an ASP fileHow a web page can communicate with a web server while a user type characters in an input field.', 'Retrieve the content of an XML fileCreate an XMLHttpRequest to retrieve data from an XML file and display the data in an HTML table.']",[],"['Method|||Description&&&abort()|||Cancels the current request&&&getAllResponseHeaders()|||Returns header information&&&getResponseHeader()|||Returns specific header information&&&open(method,url,async,uname,pswd)|||Specifies the type of request, the URL, if the request should be handled asynchronously or not, and other optional attributes of a request||| method: the type of request: GET or POST|||    url: the location of the file on the server|||    async: true (asynchronous) or false (synchronous)&&&send(string)|||send(string) Sends the request off to the server.|||    string: Only used for POST requests&&&setRequestHeader()|||Adds a label/value pair to the header to be sent', 'Property|||Description&&&onreadystatechange|||Stores a function (or the name of a function) to be called automatically each time the readyState property changes&&&readyState|||Holds the status of the XMLHttpRequest. Changes from 0 to 4: |||    0: request not initialized |||    1: server connection established|||    2: request received |||    3: processing request |||    4: request finished and response is ready &&&responseText|||Returns the response data as a string&&&responseXML|||Returns the response data as XML data&&&status|||Returns the status-number (e.g. ""404"" for ""Not Found"" or ""200"" for ""OK"")&&&statusText|||Returns the status-text (e.g. ""Not Found"" or  ""OK"")']",['Update a web page without reloading the page|||Request data from a server after the page has loaded |||Receive data from a server after the page has loaded|||Send data to a server in the background|||']
121,['XML DOM Parser Errors'],['XML Parser Error'],['Example'],"['https://www.w3schools.com/xml/dom_http.asp', 'https://www.w3schools.com/xml/xsl_elementref.asp', 'https://www.w3schools.com/xml/xml_syntax.asp', 'https://www.w3schools.com/xml/tryit.asp?filename=try_dom_parser_error', 'https://www.w3schools.com/xml/note_error.xml', 'https://www.w3schools.com/xml/dom_http.asp', 'https://www.w3schools.com/xml/xsl_elementref.asp']",[],"['When trying to open an XML document, a parser-error may occur.', 'The code example below tries to load an XML document that is not well-formed.', 'You can read more about well-formed XML in XML Syntax.', 'Look at the XML file: note_error.xml']","['If the parser encounters an error, it may load an XML document containing the error description.']",[],"['\n <html><body><p id=""demo""></p><script>var xhttp = new \n    XMLHttpRequest();xhttp.onreadystatechange = function() {\xa0 if (xhttp.this \n    == 4 && this.status == 200) {\xa0\xa0\xa0 myFunction(this);\xa0 \n    }};xhttp.open(""GET"", ""note_error.xml"", true);xhttp.send();\nfunction myFunction(xml) {\xa0 var parser, xmlDoc;\xa0 \n    parser = new DOMParser();\xa0 xmlDoc = parser.parseFromString(xml.responseText,""text/xml"");\xa0 \n    document.getElementById(""demo"").innerHTML =\xa0 myLoop(xmlDoc.documentElement);\n    }function myLoop(x) {\xa0 var i, y, xLen, txt;\xa0 txt = \n    """";\xa0 x = x.childNodes;\xa0 xLen = x.length;\xa0 for (i \n    = 0; i < xLen ;i++) {\xa0\xa0\xa0 y = x[i];\xa0\xa0\xa0 \n    if (y.nodeType != 3) {\xa0\xa0\xa0\xa0\xa0 if (y.childNodes[0] \n    != undefined) {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 txt += myLoop(y);\xa0\xa0\xa0\xa0\xa0 \n    }\xa0\xa0\xa0 } else {\xa0\xa0\xa0 txt += y.nodeValue + \n    ""<br>"";\xa0\xa0\xa0 }\xa0 }\xa0 return txt;}</script></body></html>\n']",[],[]
122,['XSLT Elements Reference'],['XSLT Elements'],[],"['https://www.w3schools.com/xml/dom_parser.asp', 'https://www.w3schools.com/xml/xsl_functions.asp', 'https://www.w3schools.com/xml/ref_xsl_el_apply-imports.asp', 'https://www.w3schools.com/xml/ref_xsl_el_apply-templates.asp', 'https://www.w3schools.com/xml/ref_xsl_el_attribute.asp', 'https://www.w3schools.com/xml/ref_xsl_el_attributeset.asp', 'https://www.w3schools.com/xml/ref_xsl_el_call-template.asp', 'https://www.w3schools.com/xml/ref_xsl_el_choose.asp', 'https://www.w3schools.com/xml/ref_xsl_el_comment.asp', 'https://www.w3schools.com/xml/ref_xsl_el_copy.asp', 'https://www.w3schools.com/xml/ref_xsl_el_copy-of.asp', 'https://www.w3schools.com/xml/ref_xsl_el_decimal-format.asp', 'https://www.w3schools.com/xml/ref_xsl_el_element.asp', 'https://www.w3schools.com/xml/ref_xsl_el_fallback.asp', 'https://www.w3schools.com/xml/ref_xsl_el_for-each.asp', 'https://www.w3schools.com/xml/ref_xsl_el_if.asp', 'https://www.w3schools.com/xml/ref_xsl_el_import.asp', 'https://www.w3schools.com/xml/ref_xsl_el_include.asp', 'https://www.w3schools.com/xml/ref_xsl_el_key.asp', 'https://www.w3schools.com/xml/ref_xsl_el_message.asp', 'https://www.w3schools.com/xml/ref_xsl_el_namespace-alias.asp', 'https://www.w3schools.com/xml/ref_xsl_el_number.asp', 'https://www.w3schools.com/xml/ref_xsl_el_otherwise.asp', 'https://www.w3schools.com/xml/ref_xsl_el_output.asp', 'https://www.w3schools.com/xml/ref_xsl_el_param.asp', 'https://www.w3schools.com/xml/ref_xsl_el_preserve-space.asp', 'https://www.w3schools.com/xml/ref_xsl_el_processing-instruction.asp', 'https://www.w3schools.com/xml/ref_xsl_el_sort.asp', 'https://www.w3schools.com/xml/ref_xsl_el_strip-space.asp', 'https://www.w3schools.com/xml/ref_xsl_el_stylesheet.asp', 'https://www.w3schools.com/xml/ref_xsl_el_template.asp', 'https://www.w3schools.com/xml/ref_xsl_el_text.asp', 'https://www.w3schools.com/xml/ref_xsl_el_transform.asp', 'https://www.w3schools.com/xml/ref_xsl_el_value-of.asp', 'https://www.w3schools.com/xml/ref_xsl_el_variable.asp', 'https://www.w3schools.com/xml/ref_xsl_el_when.asp', 'https://www.w3schools.com/xml/ref_xsl_el_with-param.asp', 'https://www.w3schools.com/xml/dom_parser.asp', 'https://www.w3schools.com/xml/xsl_functions.asp']",[],['The XSLT elements from the W3C Recommendation (XSLT Version 1.0).'],"['The links in the ""Element"" column point to attributes and moreuseful information about each specific element.']",[],[],"[""Element|||Description&&&apply-imports|||Applies a template rule from an imported style sheet&&&apply-templates|||Applies a template rule to the current element or to the current element's child nodes&&&attribute|||Adds an attribute&&&attribute-set|||Defines a named set of attributes&&&call-template|||Calls a named template&&&choose|||Used in conjunction with <when> and <otherwise> to express multiple conditional tests&&&comment|||Creates a comment node in the result tree&&&copy|||Creates a copy of the current node (without child nodes and attributes)&&&copy-of|||Creates a copy of the current node (with child nodes and attributes)&&&decimal-format|||Defines the characters and symbols to be used when |||    converting numbers into strings, with the format-number() function&&&element|||Creates an element node in the output document&&&fallback|||Specifies an alternate code to run if the processor does not support an XSLT element&&&for-each|||Loops through each node in a specified node set&&&if|||Contains a template that will be applied only if a specified condition is true&&&import|||Imports the contents of one style sheet into another.|||    Note: An imported style sheet has lower precedence than the importing style sheet&&&include|||Includes the contents of one style sheet into another. Note:|||    An included style sheet has the same precedence as the including style sheet&&&key|||Declares a named key that can be used in the style sheet with the key() function&&&message|||Writes a message to the output (used to report errors)&&&namespace-alias|||Replaces a namespace in the style sheet to a different namespace in the output&&&number|||Determines the integer position of the current node and formats a number&&&otherwise|||Specifies a default action for the <choose> element&&&output|||Defines the format of the output document&&&param|||Declares a local or global parameter&&&preserve-space|||Defines the elements for which white space should be preserved&&&processing-instruction|||Writes a processing instruction to the output&&&sort|||Sorts the output&&&strip-space|||Defines the elements for which white space should be removed&&&stylesheet|||Defines the root element of a style sheet&&&template|||Rules to apply when a specified node is matched&&&text|||Writes literal text to the output&&&transform|||Defines the root element of a style sheet&&&value-of|||Extracts the value of a selected node&&&variable|||Declares a local or global variable&&&when|||Specifies an action for the <choose> element&&&with-param|||Defines the value of a parameter to be passed into a template""]",[]
123,"['XSLT, XPath, and XQuery Functions', 'Functions Reference']",['XSLT Functions'],"['Accessor Functions', 'Error and Trace Functions', 'Functions on Numeric Values', 'Functions on Strings', 'Functions for anyURI', 'Functions on Boolean Values', 'Functions on Durations, Dates and Times', 'Functions Related to QNames', 'Functions on Nodes', 'Functions on Sequences', 'Context Functions']","['https://www.w3schools.com/xml/xsl_elementref.asp', 'https://www.w3schools.com/xml/default.asp', 'https://www.w3schools.com/xml/#accessor', 'https://www.w3schools.com/xml/#error', 'https://www.w3schools.com/xml/#numeric', 'https://www.w3schools.com/xml/#string', 'https://www.w3schools.com/xml/#anyuri', 'https://www.w3schools.com/xml/#boolean', 'https://www.w3schools.com/xml/#datetime', 'https://www.w3schools.com/xml/#qname', 'https://www.w3schools.com/xml/#node', 'https://www.w3schools.com/xml/#sequence', 'https://www.w3schools.com/xml/#context', None, None, None, None, None, None, None, None, None, None, None, 'https://www.w3schools.com/xml/func_current.asp', 'https://www.w3schools.com/xml/func_document.asp', 'https://www.w3schools.com/xml/func_elementavailable.asp', 'https://www.w3schools.com/xml/func_formatnumber.asp', 'https://www.w3schools.com/xml/func_functionavailable.asp', 'https://www.w3schools.com/xml/func_generateid.asp', 'https://www.w3schools.com/xml/func_key.asp', 'https://www.w3schools.com/xml/func_systemproperty.asp', 'https://www.w3schools.com/xml/func_unparsedentityuri.asp', 'https://www.w3schools.com/xml/xsl_elementref.asp', 'https://www.w3schools.com/xml/default.asp']",[],"['XSLT 2.0, XPath 2.0, and XQuery 1.0, share the same functions library.', ""Example: number('100')Result: 100"", 'Example: abs(3.14)      Result: 3.14', 'Example: abs(-3.14)      Result: 3.14', 'Example: ceiling(3.14)      Result: 4', 'Example: floor(3.14)    Result: 3', 'Example: round(3.14)      Result: 3', 'Example: round-half-to-even(1.5)    Result: 2', 'Example: round-half-to-even(2.5)    Result: 2', 'Example: string(314)      Result: ""314""', ""Example: compare('ghi', 'ghi')    Result: 0"", ""Example: concat('XPath ','is ','FUN!')      Result: 'XPath is FUN!'"", ""Example:string-join((), 'sep')    Result: ''"", ""Example: substring('Beatles',1,4)      Result: 'Beat'"", ""Example: substring('Beatles',2)      Result: 'eatles'"", ""Example: string-length('Beatles')    Result: 7"", ""Example: normalize-space(' The\xa0\xa0 XML ')      Result: 'The XML'"", ""Example: upper-case('The XML')      Result: 'THE XML'"", ""Example: lower-case('The XML')      Result: 'the xml'"", ""Example: translate('12:30','30','45')    Result: '12:45'"", ""Example: translate('12:30','03','54')    Result: '12:45'"", ""Example: translate('12:30','0123','abcd')    Result: 'bc:da'"", ""Example: contains('XML','XM')     Result: true"", ""Example: starts-with('XML','X')      Result: true"", "" Example: ends-with('XML','X')      Result: false"", ""Example: substring-before('12/10','/')      Result: '12'"", ""Example: substring-after('12/10','/')      Result: '10'"", 'Example: matches(""Merano"", ""ran"")    Result: true', 'Example: replace(""Bella Italia"", ""l"", ""*"")    Result: \'Be**a Ita*ia\'', 'Example: replace(""Bella Italia"", ""l"", """")    Result: \'Bea Itaia\'', 'Example: not(true())    Result: false', 'Example: true()    Result: true', 'Example: false()    Result: false', 'Component Extraction Functions on Durations, Dates and Times ', 'Example: day-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))    Result: 10', 'Example: year-from-date(xs:date(""2005-04-23""))    Result: 2005', 'Example: month-from-date(xs:date(""2005-04-23""))    Result: 4', 'Example: day-from-date(xs:date(""2005-04-23""))    Result: 23', 'Example: hours-from-time(xs:time(""10:22:00""))    Result: 10', 'Example: minutes-from-time(xs:time(""10:22:00""))    Result: 22', 'Example: seconds-from-time(xs:time(""10:22:00""))    Result: 0', 'Example: Lang(""en"") is true for    <p xml:lang=""en"">...</p>', 'Example: Lang(""de"") is false for    <p xml:lang=""en"">...</p>', 'General Functions on Sequences', 'Example: index-of ((15, 40, 25, 40, 10), 40)    Result: (2, 4)', 'Example: index-of ((""a"", ""dog"", ""and"", ""a"", ""duck""), ""a"")    Result (1, 4)', 'Example: index-of ((15, 40, 25, 40, 10), 18)    Result: ()', 'Example: remove((""ab"", ""cd"", ""ef""), 0)    Result: (""ab"", ""cd"", ""ef"")', 'Example: remove((""ab"", ""cd"", ""ef""), 1)    Result: (""cd"", ""ef"")', 'Example: remove((""ab"", ""cd"", ""ef""), 4)    Result: (""ab"", ""cd"", ""ef"")', 'Example: empty(remove((""ab"", ""cd""), 1))    Result: false', 'Example: exists(remove((""ab""), 1))    Result: false', 'Example: distinct-values((1, 2, 3, 1, 2))    Result: (1, 2, 3)', 'Example: insert-before((""ab"", ""cd""), 0, ""gh"")    Result: (""gh"", ""ab"", ""cd"")', 'Example: insert-before((""ab"", ""cd""), 1, ""gh"")    Result: (""gh"", ""ab"", ""cd"")', 'Example: insert-before((""ab"", ""cd""), 2, ""gh"")    Result: (""ab"", ""gh"", ""cd"")', 'Example: insert-before((""ab"", ""cd""), 5, ""gh"")    Result: (""ab"", ""cd"", ""gh"")', 'Example: reverse((""ab"", ""cd"", ""ef""))    Result: (""ef"", ""cd"", ""ab"")', 'Example: reverse((""ab""))    Result: (""ab"")', 'Example: subsequence(($item1, $item2, $item3,...), 3)    Result: ($item3, ...)', 'Functions That Test the Cardinality of Sequences ', 'Equals, Union, Intersection and Except ', 'Aggregate Functions', 'Example: avg((1,2,3))    Result: 2', 'Example: max((1,2,3))    Result: 3', ""Example: max(('a', 'k'))    Result: 'k'"", 'Example: min((1,2,3))    Result: 1', ""Example: min(('a', 'k'))    Result: 'a'"", 'Functions that Generate Sequences', 'Example: //book[position()<=3]    Result: Selects the first three book elements', 'Example: //book[last()]    Result: Selects the last book element', 'In addition, there are the following built-in XSLT functions:']","[""Example: codepoints-to-string((84, 104, 233, 114, 232, 115, 101))    Result: 'Thérèse'"", 'Example: string-to-codepoints(""Thérèse"")    Result: (84, 104, 233, 114, 232, 115, 101)', ""Example: string-join(('We', 'are', 'having', 'fun!'), ' ')    Result: ' We are having fun! '"", ""Example: string-join(('We', 'are', 'having', 'fun!'))    Result: 'Wearehavingfun!'"", 'Example: escape-uri(""http://example.com/test#car"", false())    Result: ""http://example.com/test#car""', 'Example: escape-uri (""http://example.com/~bébé"", false())    Result: ""http://example.com/~b%C3%A9b%C3%A9""', 'Example: year-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))    Result: 2005', 'Example: month-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))    Result: 01', 'Example: hours-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))    Result: 12', 'Example: minutes-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))    Result: 30', 'Example: seconds-from-dateTime(xs:dateTime(""2005-01-10T12:30:00-04:10""))    Result: 0', 'Example: subsequence(($item1, $item2, $item3, ...), 2, 2)    Result: ($item2, $item3)']","['The default prefix for the function namespace is fn:The URI of the function namespace is: http://www.w3.org/2005/xpath-functions', 'Tip: Functions are often called with the fn: prefix, such as fn:string(). However, since fn: is the default prefix of the namespace, the function names do not need to be prefixed when called.', 'Result: Returns http://example.com/test#toohigh and the string ""Error: Price is too high"" to the external processing environment']",[],"['||||||Accessor|||Error and Trace|||Numeric|||String|||||||||||||||AnyURI|||Boolean|||Duration/Date/Time|||QName|||||||||||||||Node|||Sequence|||Context||||||', 'Name|||Description&&&fn:node-name(node)|||Returns the node-name of the argument node&&&fn:nilled(node)|||Returns a Boolean value indicating whether the argument node is nilled&&&fn:data(item.item,...)|||Takes a sequence of items and returns a sequence of atomic values&&&fn:base-uri()|||    fn:base-uri(node)|||Returns the value of the base-uri property of the current or specified node &&&fn:document-uri(node)|||Returns the value of the document-uri property for the specified node', 'Name|||Description&&&fn:error()|||    fn:error(error)|||    fn:error(error,description)|||    fn:error(error,description,error-object)|||Example: error(fn:QName(\'http://example.com/test\', \'err:toohigh\'), \'Error: Price is too high\')||| Result: Returns http://example.com/test#toohigh and the string ""Error: Price is too high"" to the external processing environment&&&fn:trace(value,label)|||Used to debug queries', ""Name|||Description&&&fn:number(arg)|||Returns the numeric value of the argument. The argument could be a boolean, string, or node-set|||    Example: number('100')Result: 100&&&fn:abs(num)|||Returns the absolute value of the argument|||    Example: abs(3.14)|||      Result: 3.14|||Example: abs(-3.14)|||      Result: 3.14|||&&&fn:ceiling(num)|||Returns the smallest integer that is greater than the number argument|||    Example: ceiling(3.14)|||      Result: 4&&&fn:floor(num)|||Returns the largest integer that is not greater than the number argument|||    Example: floor(3.14)|||    Result: 3&&&fn:round(num)|||Rounds the number argument to the nearest integer|||    Example: round(3.14)|||      Result: 3&&&fn:round-half-to-even()|||Example: round-half-to-even(0.5)|||    Result: 0||| Example: round-half-to-even(1.5)|||    Result: 2|||Example: round-half-to-even(2.5)|||    Result: 2"", 'Name|||Description&&&fn:string(arg)|||Returns the string value of the argument. The argument could be a number, boolean, or node-set||| Example: string(314)|||      Result: ""314""&&&fn:codepoints-to-string((int,int,...))|||Creates a string from a sequence of the Unicode Standard code points|||    Example: codepoints-to-string((84, 104, 233, 114, 232, 115, 101))|||    Result: \'Thérèse\'&&&fn:string-to-codepoints(string)|||Returns the sequence of the Unicode standard code points from a string|||    Example: string-to-codepoints(""Thérèse"")|||    Result: (84, 104, 233, 114, 232, 115, 101)&&&fn:codepoint-equal(comp1,comp2)|||Returns true if the value of comp1 is equal to the value of comp2, according to the Unicode code point collation (http://www.w3.org/2005/02/xpath-functions/collation/codepoint), otherwise it returns false&&&fn:compare(comp1,comp2)|||    fn:compare(comp1,comp2,collation)|||Returns -1 if comp1 is less than comp2, 0 if comp1 is equal to comp2, or 1 if comp1 is greater than comp2 (according to the rules of the collation that is used)||| Example: compare(\'ghi\', \'ghi\')|||    Result: 0&&&fn:concat(string,string,...)|||Returns the concatenation of the strings|||    Example: concat(\'XPath \',\'is \',\'FUN!\')|||      Result: \'XPath is FUN!\'&&&fn:string-join((string,string,...),sep)|||Returns a string created by concatenating the string arguments and using the sep argument as the separator||| Example: string-join((\'We\', \'are\', \'having\', \'fun!\'), \' \')|||    Result: \' We are having fun! \'|||Example: string-join((\'We\', \'are\', \'having\', \'fun!\'))|||    Result: \'Wearehavingfun!\'|||Example:string-join((), \'sep\')|||    Result: \'\'&&&fn:substring(string,start,len)|||    fn:substring(string,start)|||Returns the substring from the start position to the specified length. Index of the first character is 1. If length is omitted it returns the substring from the start position to the end||| Example: substring(\'Beatles\',1,4)|||      Result: \'Beat\'|||Example: substring(\'Beatles\',2)|||      Result: \'eatles\'&&&fn:string-length(string)|||    fn:string-length()|||Returns the length of the specified string. If there is no string argument it returns the length of the string value of the current node||| Example: string-length(\'Beatles\')|||    Result: 7&&&fn:normalize-space(string)|||    fn:normalize-space()|||Removes leading and trailing spaces from the specified string, and |||    replaces all internal sequences of white space with one and returns the result. If there is no string argument it does the same on the current node||| Example: normalize-space(\' The\xa0\xa0 XML \')|||      Result: \'The XML\'&&&fn:normalize-unicode()|||\xa0&&&fn:upper-case(string)|||Converts the string argument to upper-case|||    Example: upper-case(\'The XML\')|||      Result: \'THE XML\'&&&fn:lower-case(string)|||Converts the string argument to lower-case|||    Example: lower-case(\'The XML\')|||      Result: \'the xml\'&&&fn:translate(string1,string2,string3)|||Converts string1 by replacing the characters in string2 with the characters in string3||| Example: translate(\'12:30\',\'30\',\'45\')|||    Result: \'12:45\'|||Example: translate(\'12:30\',\'03\',\'54\')|||    Result: \'12:45\'|||Example: translate(\'12:30\',\'0123\',\'abcd\')|||    Result: \'bc:da\'&&&fn:escape-uri(stringURI,esc-res)|||Example: escape-uri(""http://example.com/test#car"", true())|||    Result: ""http%3A%2F%2Fexample.com%2Ftest#car""||| Example: escape-uri(""http://example.com/test#car"", false())|||    Result: ""http://example.com/test#car""|||Example: escape-uri (""http://example.com/~bébé"", false())|||    Result: ""http://example.com/~b%C3%A9b%C3%A9""&&&fn:contains(string1,string2)|||Returns true if string1 contains string2, otherwise it returns false|||    Example: contains(\'XML\',\'XM\')|||     Result: true&&&fn:starts-with(string1,string2)|||Returns true if string1 starts with string2, otherwise it returns false|||    Example: starts-with(\'XML\',\'X\')|||      Result: true&&&fn:ends-with(string1,string2)|||Returns true if string1 ends with string2, otherwise it returns false|||     Example: ends-with(\'XML\',\'X\')|||      Result: false&&&fn:substring-before(string1,string2)|||Returns the start of string1 before string2 occurs in it|||    Example: substring-before(\'12/10\',\'/\')|||      Result: \'12\'&&&fn:substring-after(string1,string2)|||Returns the remainder of string1 after string2 occurs in it|||    Example: substring-after(\'12/10\',\'/\')|||      Result: \'10\'&&&fn:matches(string,pattern)|||Returns true if the string argument matches the pattern, otherwise, it returns false||| Example: matches(""Merano"", ""ran"")|||    Result: true&&&fn:replace(string,pattern,replace)|||Returns a string that is created by replacing the given pattern with the replace argument||| Example: replace(""Bella Italia"", ""l"", ""*"")|||    Result: \'Be**a Ita*ia\'|||Example: replace(""Bella Italia"", ""l"", """")|||    Result: \'Bea Itaia\'&&&fn:tokenize(string,pattern)|||Example: tokenize(""XPath is fun"", ""\\s+"")|||    Result: (""XPath"", ""is"", ""fun"")', 'Name|||Description&&&fn:resolve-uri(relative,base)|||\xa0', 'Name|||Description&&&fn:boolean(arg)|||Returns a boolean value for a number, string, or node-set&&&fn:not(arg)|||The argument is first reduced to a boolean value by applying the boolean() function.|||    Returns true if the boolean value is false, and false if the boolean value is true|||    Example: not(true())|||    Result: false&&&fn:true()|||Returns the boolean value true|||    Example: true()|||    Result: true&&&fn:false()|||Returns the boolean value false|||    Example: false()|||    Result: false', 'Name|||Description&&&fn:dateTime(date,time)|||Converts the arguments to a date and a time&&&fn:years-from-duration(datetimedur)|||Returns an integer that represents the years component in the canonical lexical representation of the value of the argument&&&fn:months-from-duration(datetimedur)|||Returns an integer that represents the months component in the canonical lexical representation of the value of the argument&&&fn:days-from-duration(datetimedur)|||Returns an integer that represents the days component in the canonical lexical representation of the value of the argument&&&fn:hours-from-duration(datetimedur)|||Returns an integer that represents the hours component in the canonical lexical representation of the value of the argument&&&fn:minutes-from-duration(datetimedur)|||Returns an integer that represents the minutes component in the canonical lexical representation of the value of the argument&&&fn:seconds-from-duration(datetimedur)|||Returns a decimal that represents the seconds component in the canonical lexical representation of the value of the argument&&&fn:year-from-dateTime(datetime)|||Returns an integer that represents the year component in the localized value of the argument||| Example: year-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))|||    Result: 2005&&&fn:month-from-dateTime(datetime)|||Returns an integer that represents the month component in the localized value of the argument|||    Example: month-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))|||    Result: 01&&&fn:day-from-dateTime(datetime)|||Returns an integer that represents the day component in the localized value of the argument|||    Example: day-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))|||    Result: 10&&&fn:hours-from-dateTime(datetime)|||Returns an integer that represents the hours component in the localized value of the argument|||    Example: hours-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))|||    Result: 12&&&fn:minutes-from-dateTime(datetime)|||Returns an integer that represents the minutes component in the localized value of the argument|||    Example: minutes-from-dateTime(xs:dateTime(""2005-01-10T12:30-04:10""))|||    Result: 30&&&fn:seconds-from-dateTime(datetime)|||Returns a decimal that represents the seconds component in the localized value of the argument|||    Example: seconds-from-dateTime(xs:dateTime(""2005-01-10T12:30:00-04:10""))|||    Result: 0&&&fn:timezone-from-dateTime(datetime)|||Returns the time zone component of the argument if any&&&fn:year-from-date(date)|||Returns an integer that represents the year in the localized value of the argument|||    Example: year-from-date(xs:date(""2005-04-23""))|||    Result: 2005&&&fn:month-from-date(date)|||Returns an integer that represents the month in the localized value of the argument|||    Example: month-from-date(xs:date(""2005-04-23""))|||    Result: 4&&&fn:day-from-date(date)|||Returns an integer that represents the day in the localized value of the argument|||    Example: day-from-date(xs:date(""2005-04-23""))|||    Result: 23&&&fn:timezone-from-date(date)|||Returns the time zone component of the argument if any&&&fn:hours-from-time(time)|||Returns an integer that represents the hours component in the localized value of the argument|||    Example: hours-from-time(xs:time(""10:22:00""))|||    Result: 10&&&fn:minutes-from-time(time)|||Returns an integer that represents the minutes component in the localized value of the argument|||    Example: minutes-from-time(xs:time(""10:22:00""))|||    Result: 22&&&fn:seconds-from-time(time)|||Returns an integer that represents the seconds component in the localized value of the argument|||    Example: seconds-from-time(xs:time(""10:22:00""))|||    Result: 0&&&fn:timezone-from-time(time)|||Returns the time zone component of the argument if any&&&fn:adjust-dateTime-to-timezone(datetime,timezone)|||If the timezone argument is empty, it returns a dateTime without a timezone. Otherwise, it returns a dateTime with a timezone&&&fn:adjust-date-to-timezone(date,timezone)|||If the timezone argument is empty, it returns a date without a timezone. Otherwise, it returns a date with a timezone&&&fn:adjust-time-to-timezone(time,timezone)|||If the timezone argument is empty, it returns a time without a timezone. Otherwise, it returns a time with a timezone', 'Name|||Description&&&fn:QName()|||\xa0&&&fn:local-name-from-QName()|||\xa0&&&fn:namespace-uri-from-QName()|||\xa0&&&fn:namespace-uri-for-prefix()|||\xa0&&&fn:in-scope-prefixes()|||\xa0&&&fn:resolve-QName()|||\xa0', 'Name|||Description&&&fn:name()|||    fn:name(nodeset)|||Returns the name of the current node or the first node in the specified node set&&&fn:local-name()|||    fn:local-name(nodeset)|||Returns the name of the current node or the first node in the specified node set - without the namespace prefix&&&fn:namespace-uri()|||    fn:namespace-uri(nodeset)|||Returns the namespace URI of the current node or the first node in the specified node set&&&fn:lang(lang)|||Returns true if the language of the current node matches the language of the specified language|||    Example: Lang(""en"") is true for|||    <p xml:lang=""en"">...</p>|||Example: Lang(""de"") is false for|||    <p xml:lang=""en"">...</p>&&&fn:root()|||    fn:root(node)|||Returns the root of the tree to which the current node or the specified belongs. This will usually be a document node', 'Name|||Description&&&fn:index-of((item,item,...),searchitem)|||Returns the positions within the sequence of items that are equal to the searchitem argument|||    Example: index-of ((15, 40, 25, 40, 10), 40)|||    Result: (2, 4)|||Example: index-of ((""a"", ""dog"", ""and"", ""a"", ""duck""), ""a"")|||    Result (1, 4)|||Example: index-of ((15, 40, 25, 40, 10), 18)|||    Result: ()&&&fn:remove((item,item,...),position)|||Returns a new sequence constructed from the value of the item arguments - with the item specified by the position argument removed||| Example: remove((""ab"", ""cd"", ""ef""), 0)|||    Result: (""ab"", ""cd"", ""ef"")|||Example: remove((""ab"", ""cd"", ""ef""), 1)|||    Result: (""cd"", ""ef"")|||Example: remove((""ab"", ""cd"", ""ef""), 4)|||    Result: (""ab"", ""cd"", ""ef"")&&&fn:empty(item,item,...)|||Returns true if the value of the arguments IS an empty sequence, otherwise it returns false|||    Example: empty(remove((""ab"", ""cd""), 1))|||    Result: false&&&fn:exists(item,item,...)|||Returns true if the value of the arguments IS NOT an empty sequence, otherwise it returns false|||    Example: exists(remove((""ab""), 1))|||    Result: false&&&fn:distinct-values((item,item,...),collation)|||Returns only distinct (different) values|||    Example: distinct-values((1, 2, 3, 1, 2))|||    Result: (1, 2, 3)&&&fn:insert-before((item,item,...),pos,inserts)|||Returns a new sequence constructed from the value of the item arguments - with the value of the inserts argument inserted in the position specified by the pos argument||| Example: insert-before((""ab"", ""cd""), 0, ""gh"")|||    Result: (""gh"", ""ab"", ""cd"")|||Example: insert-before((""ab"", ""cd""), 1, ""gh"")|||    Result: (""gh"", ""ab"", ""cd"")|||Example: insert-before((""ab"", ""cd""), 2, ""gh"")|||    Result: (""ab"", ""gh"", ""cd"")|||Example: insert-before((""ab"", ""cd""), 5, ""gh"")|||    Result: (""ab"", ""cd"", ""gh"")&&&fn:reverse((item,item,...))|||Returns the reversed order of the items specified|||    Example: reverse((""ab"", ""cd"", ""ef""))|||    Result: (""ef"", ""cd"", ""ab"")|||Example: reverse((""ab""))|||    Result: (""ab"")&&&fn:subsequence((item,item,...),start,len)|||Returns a sequence of items from the position specified by the start argument and continuing for the number of items specified by the len argument. The first item is located at position 1||| Example: subsequence(($item1, $item2, $item3,...), 3)|||    Result: ($item3, ...)|||Example: subsequence(($item1, $item2, $item3, ...), 2, 2)|||    Result: ($item2, $item3)&&&fn:unordered((item,item,...))|||Returns the items in an implementation dependent order', 'Name|||Description&&&fn:zero-or-one(item,item,...)|||Returns the argument if it contains zero or one items, otherwise it raises an error&&&fn:one-or-more(item,item,...)|||Returns the argument if it contains one or more items, otherwise it raises an error&&&fn:exactly-one(item,item,...)|||Returns the argument if it contains exactly one item, otherwise it raises an error', 'Name|||Description&&&fn:deep-equal(param1,param2,collation)|||Returns true if param1 and param2 are deep-equal to each other, otherwise it returns false', ""Name|||Description&&&fn:count((item,item,...))|||Returns the count of nodes&&&fn:avg((arg,arg,...))|||Returns the average of the argument values|||    Example: avg((1,2,3))|||    Result: 2&&&fn:max((arg,arg,...))|||Returns the argument that is greater than the others|||    Example: max((1,2,3))|||    Result: 3|||Example: max(('a', 'k'))|||    Result: 'k'&&&fn:min((arg,arg,...))|||Returns the argument that is less than the others|||    Example: min((1,2,3))|||    Result: 1|||Example: min(('a', 'k'))|||    Result: 'a'&&&fn:sum(arg,arg,...)|||Returns the sum of the numeric value of each node in the specified node-set"", 'Name|||Description&&&fn:id((string,string,...),node)|||Returns a sequence of element nodes that have an ID value equal to the value of one or more of the values specified in the string argument&&&fn:idref((string,string,...),node)|||Returns a sequence of element or attribute nodes that have an IDREF value equal to the value of one or more of the values specified in the string argument&&&fn:doc(URI)|||\xa0&&&fn:doc-available(URI)|||Returns true if the doc() function returns a document node, otherwise it returns false&&&fn:collection()|||    fn:collection(string)|||\xa0', 'Name|||Description&&&fn:position()|||Returns the index position of the node that is currently being processed|||    Example: //book[position()<=3]|||    Result: Selects the first three book elements&&&fn:last()|||Returns the number of items in the processed node list|||    Example: //book[last()]|||    Result: Selects the last book element&&&fn:current-dateTime()|||Returns the current dateTime (with timezone)&&&fn:current-date()|||Returns the current date (with timezone)&&&fn:current-time()|||Returns the current time (with timezone)&&&fn:implicit-timezone()|||Returns the value of the implicit timezone&&&fn:default-collation()|||Returns the value of the default collation&&&fn:static-base-uri()|||Returns the value of the base-uri', 'Name|||Description&&&current()|||Returns the current node&&&document()|||Used to access the nodes in an external XML document&&&element-available()|||Tests whether the element specified is supported by the XSLT processor&&&format-number()|||Converts a number into a string&&&function-available()|||Tests whether the function specified is supported by the XSLT processor&&&generate-id()|||Returns a string value that uniquely identifies a specified node&&&key()|||Returns a node-set using the index specified by an <xsl:key> element&&&system-property()|||Returns the value of the system properties&&&unparsed-entity-uri()|||Returns the URI of an unparsed entity']",['Accessor|||Error and Trace|||Numeric|||String|||AnyURI|||Boolean|||Duration/Date/Time|||QName|||Node|||Sequence|||Context|||']
