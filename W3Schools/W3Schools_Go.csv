,main_headings,sub_headings_h2,sub_headings_h3,links,image_urls,facts,definitions,explanations,codes,table_data,list_items
0,['Go Tutorial'],"['Examples in Each Chapter', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']",['Example'],"['https://www.w3schools.com/go//default.asp', 'https://www.w3schools.com/go/go_introduction.php', 'https://www.w3schools.com/go/go_introduction.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld', 'https://www.w3schools.com/go/exercise.php?filename=exercise_syntax1', 'https://www.w3schools.com/go//default.asp', 'https://www.w3schools.com/go/go_introduction.php']",[],"['Go is a popular programming language.', 'Go is used to create computer programs.', 'Click on the ""Try it Yourself"" button to see how it works.', 'We recommend reading this tutorial, in the sequence listed in the left menu.', 'Insert the missing part of the code below to output ""Hello World"".', 'Start the Exercise']","['Our ""Try it Yourself"" editor makes it easy to learn Go. You can edit Go code and view the result in your browser.']",[],"['\n    package main\n    import (""fmt"")\n\n    func main() {\n    \xa0 fmt.Println(""Hello World!"")\n    }\n']",[],[]
1,['Go Introduction'],"['What is Go?', 'What is Go Used For?', 'Why Use Go?', 'Go Compared to Python and C++', 'Get Started']",[],"['https://www.w3schools.com/go/index.php', 'https://www.w3schools.com/go/go_getting_started.php', 'https://www.w3schools.com/go//python/default.asp', 'https://www.w3schools.com/go//cpp/default.asp', 'https://www.w3schools.com/go/go_getting_started.php', 'https://www.w3schools.com/go/index.php', 'https://www.w3schools.com/go/go_getting_started.php']",[],"['This tutorial will teach you the basics of Go.', 'It is not necessary to have any prior programming experience.']",[],"['Notes:Compilation time refers to translating the code into an executable           programConcurrency is performing multiple things out-of-order, or at the           same time, without affecting the final outcomeStatically typed means that the variable types are known at           compile time']",[],['Go|||Python|||C++&&&Statically typed|||Dynamically typed|||Statically typed&&&Fast run time|||Slow run time|||Fast run time&&&Compiled|||Interpreted|||Compiled&&&Fast compile time|||Interpreted|||Slow compile time&&&Supports concurrency through goroutines and channel|||No built-in concurrency mechanism|||Supports concurrency through threads&&&Has automatic garbage collection|||Has automatic garbage collection|||Does not have automatic garbage collection&&&Does not support classes and objects|||Has classes and objects|||Has classes and objects&&&Does not support inheritance|||Supports inheritance|||Supports inheritance'],"[""Go is a cross-platform, open source programming languageGo can be used |||  to create high-performance applications|||Go is a fast, statically typed, compiled language that feels like a |||  dynamically typed, interpreted language|||Go was developed at Google by Robert Griesemer, Rob Pike, and Ken Thompson in 2007|||Go's syntax is similar to C++|||Web development (server-side)|||Developing network-based programs|||Developing cross-platform enterprise applications|||Cloud-native development|||Go is fun and easy to learn|||Go has fast run time and compilation time|||Go supports concurrency|||Go has memory management|||Go works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)|||Compilation time refers to translating the code into an executable |||          program|||Concurrency is performing multiple things out-of-order, or at the |||          same time, without affecting the final outcome|||Statically typed means that the variable types are known at |||          compile time|||""]"
2,['Go Getting Started'],"['Go Get Started', 'Go Install', 'Go Install IDE', 'Go Quickstart', 'Learning Go At W3Schools']",['helloworld.go'],"['https://www.w3schools.com/go/go_introduction.php', 'https://www.w3schools.com/go/go_syntax.php', 'https://golang.org/dl/', 'https://code.visualstudio.com/', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld', 'https://www.w3schools.com/go/go_introduction.php', 'https://www.w3schools.com/go/go_syntax.php']",[],"['To start using Go, you need two things:', 'You can find the relevant installation files at https://golang.org/dl/.', 'Which should show the version of your Go installation.', ""Note: Web-based IDE's can work as well, but functionality is limited."", 'We will use VS Code in our tutorial, which we believe is a good place to start.', 'You can find the latest version of VS Code at https://code.visualstudio.com/.', ""Let's create our first Go program."", 'VS Code is now configured to use Go.', 'Open up a terminal window and type:', 'Now, run the code: Open a terminal in VS Code and type:', 'Congratulations! You have now written and executed your first Go program.', 'If you want to save the program as an executable, type and run:']","['There are many text editors and compilers to choose from. In this tutorial, we will use an IDE (see below).', 'An IDE (Integrated Development Environment) is used to edit AND compile the code.']","['Follow the instructions related to your operating system. To check if Go was installed successfully, you can run the following command in a terminal window:', ""Popular IDE's include Visual Studio Code (VS Code), Vim, Eclipse, and Notepad. These are all free, and they can be used to both edit and debug Go code."", 'Do not worry if you do not understand why we type the above command. Just think of it as something that you always do, and that you will learn more about in a later chapter.', 'Create a new file (File > New File). Copy and paste the following code and save the file as helloworld.go (File > Save As):', 'When learning Go at W3Schools.com, you can use our ""Try it Yourself"" tool. It shows both the code and the result. This will make it easier for you to understand every part as we move forward:']","['\ngo version\n', '\n  go mod init example.com/hello', '\n      package main\n      import (""fmt"")\n\n      func main() { \n        \xa0 fmt.Println(""Hello World!"") \n      } \n', '\n  go run .\\helloworld.go\n', '\n  go build .\\helloworld.go\n', '\n      package main\n      \n      import (""fmt"")\n      \n\n      func main() {\n      \n      \xa0fmt.Println(""Hello World!"")\n      \n      }\n    ']",[],"['A text editor, like VS Code, to write Go code|||A compiler, like GCC, to translate the Go code into a language that the computer will understand|||Launch the VS Code editor|||Open the extension manager or alternatively, press Ctrl + Shift + x|||In the search box, type ""go"" and hit enter|||Find the Go extension by the GO team at Google and install the extension|||After the installation is complete, open the command palette by pressing Ctrl + Shift + p|||Run the Go: Install/Update Tools command|||Select all the provided tools and click OK|||']"
3,['Go Syntax'],"['Go Syntax', 'Go Statements', 'Go Compact Code', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Example', 'Example explained', 'Example', 'Example']","['https://www.w3schools.com/go/go_getting_started.php', 'https://www.w3schools.com/go/go_comments.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld2', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld3', 'https://www.w3schools.com/go/exercise.php?filename=exercise_syntax1', 'https://www.w3schools.com/go/go_getting_started.php', 'https://www.w3schools.com/go/go_comments.php']",[],"['A Go file consists of the following parts:', 'Look at the following code, to understand it better:', 'Line 2: import (""fmt"") lets us import files included in the fmt package.', 'Note: In Go, any executable code belongs to the   main   package.', 'fmt.Println(""Hello World!"") is a statement.', 'The left curly bracket { cannot come at the start of a line.', 'Run the following code and see what happens:', 'Insert the missing part of the code below to output ""Hello World"".', 'Start the Exercise']","['Line 3: A blank line. Go ignores white space. Having white spaces in code makes it more readable.', 'Line 4: func main() {} is a function. Any code inside its curly brackets {} will be executed.', 'Hitting the Enter key adds "";"" to the end of the line implicitly (does not show up in the source code). ']","['Line 1: In Go, every program is part of a package. We define this using the package keyword. In this example, the program belongs to the main package.', 'Line 5: fmt.Println() is a function made available from the fmt package. It is used to output/print text. In our example it will output ""Hello World!"". ', 'In Go, statements are separated by ending a line (hitting the Enter key) or by a semicolon "";"". Hitting the Enter key adds "";"" to the end of the line implicitly (does not show up in the source code). The left curly bracket { cannot come at the start of a line.Run the following code and see what happens:Example      package main      import (""fmt"")      func main() {       \xa0\xa0fmt.Println(""Hello World!"")       } Try it Yourself »Go Compact CodeYou can write more compact code, like shown below (this is not recommended because it makes the code more difficult to read):Example      package main; import (""fmt""); func main() { fmt.Println(""Hello World!"");}Try it Yourself »Go ExercisesTest Yourself With ExercisesExercise:Insert the missing part of the code below to output ""Hello World"".package main   import (""fmt"")func main() {    (""Hello World!"")}Submit Answer »Start the Exercise❮ PreviousNext ❯', 'You can write more compact code, like shown below (this is not recommended because it makes the code more difficult to read):']","['\n      package main\n      import (""fmt"")\n\n      func main() { \n      \xa0\xa0fmt.Println(""Hello World!"") \n      }\n', '\n      package main\n      import (""fmt"")\n\n      func main() { \n      \xa0\xa0fmt.Println(""Hello World!"") \n      } \n', '\n      package main; import (""fmt""); func main() { fmt.Println(""Hello World!"");}\n']",[],['Package declaration|||Import packages|||Functions|||Statements and expressions|||']
4,['Go Comments'],"['Go Comments', 'Go Single-line Comments', 'Go Multi-line Comments', 'Comment to Prevent Code Execution', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_syntax.php', 'https://www.w3schools.com/go/go_variables.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld4', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld5', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld6', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld7', 'https://www.w3schools.com/go/exercise.php?filename=exercise_comments1', 'https://www.w3schools.com/go/go_syntax.php', 'https://www.w3schools.com/go/go_variables.php']",[],"['A comment is a text that is ignored upon execution.', 'Comments can be used to explain the code, and to make it more readable.', 'Go supports single-line or multi-line comments.', 'Single-line comments start with two forward slashes (//).', 'The following example uses a single-line comment at the end of a code line:', 'Multi-line comments start with /* and ends with */.', 'Any text between /* and */ will be ignored by the compiler:', 'You can also use comments to prevent the code from being executed. ', 'The commented code can be saved for later reference and troubleshooting.', 'Comments in Go are written with a special character, which one?', 'Start the Exercise']","['Comments can also be used to prevent code execution when testing an alternative code.', 'Any text between // and the end of the line is ignored by the compiler (will not be executed).', 'Tip: It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer comments.']",[],"['\n// This is a comment\n      package main\n      import (""fmt"")\n\n      func main() {\n        \xa0\xa0// This is a comment\n        \xa0\xa0fmt.Println(""Hello World!"")\n      }\n', '\n      package main\n      import (""fmt"")\n\n      func main() {\n        \xa0\xa0fmt.Println(""Hello World!"") // This is a comment\n      }\n', '\n      package main\n      import (""fmt"")\n\n      func main() {\n        \xa0\xa0/* The code below will print Hello World\n        \xa0\xa0to the screen, and it is amazing */\n        \xa0\xa0fmt.Println(""Hello World!"")\n      }\n', '\n      package main\n      import (""fmt"")\n\n      func main() {\n        \xa0\xa0fmt.Println(""Hello World!"")\n        \xa0\xa0// fmt.Println(""This line does not execute"")\n      }\n']",[],[]
5,['Go Variables'],"['Go Variable Types', 'Declaring (Creating) Variables', 'Variable Declaration With Initial Value', 'Variable Declaration Without Initial Value', 'Value Assignment After Declaration', 'Difference Between var and :=', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Syntax', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_comments.php', 'https://www.w3schools.com/go/go_variable_multi.php', 'https://www.w3schools.com/go/go_data_types.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration1', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration2', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration3', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration4', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration5', 'https://www.w3schools.com/go/exercise.php?filename=exercise_variables1', 'https://www.w3schools.com/go/go_comments.php', 'https://www.w3schools.com/go/go_variable_multi.php']",[],"['Variables are containers for storing data values.', 'In Go, there are different types of variables, for example:', 'In Go, there are two ways to declare a variable:', 'Use the var keyword, followed by variable name and type:', 'Note: You always have to specify either type or value (or both).', 'Use the := sign, followed by the variable value:', 'Note: The variable types of student2 and x is inferred from their values.', 'In this example there are 3 variables:', 'These variables are declared but they have not been assigned initial values.', 'There are some small differences between the var var :=:', 'Create a variable named myNum and assign the value 50 to it.', 'Start the Exercise']","['More about different variable types, will be explained in the Go Data Types chapter.', 'Note: It is not possible to declare a variable using  :=, without assigning a value to it.', 'If the value of a variable is known from the start, you can declare the variable and assign a value to it on one line:', 'By running the code, we can see that they already have the default values of their respective types:', 'Note: It is not possible to declare a variable using "":="" without assigning a value to it.', 'This example shows declaring variables outside of a function, with the var   keyword:', 'Since := is used outside of a function, running the program results in an error. ']","['Note:  In this case, the type of the variable is inferred from the value (means that the compiler decides the type of the variable, based on the value).', 'In Go, all variables are initialized. So, if you declare a variable without an initial value, its value will be set to the default value of its type: ', 'It is possible to assign a value to a variable after it is declared. This is helpful for cases the value is not initially known.']","['\n        var variablename type = value\n', '\nvariablename  := value\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var student1 string = ""John"" //type is \n    string \n    \xa0\xa0var student2 = ""Jane"" //type is inferred\n    \xa0\xa0x := 2 //type is inferred\n\xa0\xa0fmt.Println(student1)\n    \xa0\xa0fmt.Println(student2)\n    \xa0\xa0fmt.Println(x)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a string\n    \xa0\xa0var b int\n    \xa0\xa0var c bool\n\n    \xa0\xa0fmt.Println(a)\n    \xa0\xa0fmt.Println(b)\n    \xa0\xa0fmt.Println(c)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var student1 string\n    \xa0\xa0student1 = ""John""\n    \xa0\xa0fmt.Println(student1)\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    var a int\n    var b int = 2\n    var c = 3\n\n    func main() {\n    \xa0\xa0a = 1\n    \xa0\xa0fmt.Println(a)\n    \xa0\xa0fmt.Println(b)\n    \xa0\xa0fmt.Println(c)\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    a :=  1\n\n    func main() {\n    \xa0\xa0fmt.Println(a)   \n  }\n  ']",['var|||:=&&&Can be used inside  and outside of functions|||Can only be used inside functions&&&Variable declaration and value assignment can be done separately|||Variable declaration and value assignment cannot be done separately |||    (must be done in the same line)'],"['int- stores integers (whole numbers), such as 123 or -123|||float32- stores floating point numbers, with decimals, such as 19.99 or -19.99|||string - stores text, such as ""Hello World"". String values are surrounded by double quotes|||bool- stores values with two states: true or false|||a|||b|||c|||a is """"|||b is 0|||c is false|||']"
6,['Go Variables'],"['Go Variable Types', 'Declaring (Creating) Variables', 'Variable Declaration With Initial Value', 'Variable Declaration Without Initial Value', 'Value Assignment After Declaration', 'Difference Between var and :=', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Syntax', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_comments.php', 'https://www.w3schools.com/go/go_variable_multi.php', 'https://www.w3schools.com/go/go_data_types.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration1', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration2', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration3', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration4', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration5', 'https://www.w3schools.com/go/exercise.php?filename=exercise_variables1', 'https://www.w3schools.com/go/go_comments.php', 'https://www.w3schools.com/go/go_variable_multi.php']",[],"['Variables are containers for storing data values.', 'In Go, there are different types of variables, for example:', 'In Go, there are two ways to declare a variable:', 'Use the var keyword, followed by variable name and type:', 'Note: You always have to specify either type or value (or both).', 'Use the := sign, followed by the variable value:', 'Note: The variable types of student2 and x is inferred from their values.', 'In this example there are 3 variables:', 'These variables are declared but they have not been assigned initial values.', 'There are some small differences between the var var :=:', 'Create a variable named myNum and assign the value 50 to it.', 'Start the Exercise']","['More about different variable types, will be explained in the Go Data Types chapter.', 'Note: It is not possible to declare a variable using  :=, without assigning a value to it.', 'If the value of a variable is known from the start, you can declare the variable and assign a value to it on one line:', 'By running the code, we can see that they already have the default values of their respective types:', 'Note: It is not possible to declare a variable using "":="" without assigning a value to it.', 'This example shows declaring variables outside of a function, with the var   keyword:', 'Since := is used outside of a function, running the program results in an error. ']","['Note:  In this case, the type of the variable is inferred from the value (means that the compiler decides the type of the variable, based on the value).', 'In Go, all variables are initialized. So, if you declare a variable without an initial value, its value will be set to the default value of its type: ', 'It is possible to assign a value to a variable after it is declared. This is helpful for cases the value is not initially known.']","['\n        var variablename type = value\n', '\nvariablename  := value\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var student1 string = ""John"" //type is \n    string \n    \xa0\xa0var student2 = ""Jane"" //type is inferred\n    \xa0\xa0x := 2 //type is inferred\n\xa0\xa0fmt.Println(student1)\n    \xa0\xa0fmt.Println(student2)\n    \xa0\xa0fmt.Println(x)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a string\n    \xa0\xa0var b int\n    \xa0\xa0var c bool\n\n    \xa0\xa0fmt.Println(a)\n    \xa0\xa0fmt.Println(b)\n    \xa0\xa0fmt.Println(c)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var student1 string\n    \xa0\xa0student1 = ""John""\n    \xa0\xa0fmt.Println(student1)\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    var a int\n    var b int = 2\n    var c = 3\n\n    func main() {\n    \xa0\xa0a = 1\n    \xa0\xa0fmt.Println(a)\n    \xa0\xa0fmt.Println(b)\n    \xa0\xa0fmt.Println(c)\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    a :=  1\n\n    func main() {\n    \xa0\xa0fmt.Println(a)   \n  }\n  ']",['var|||:=&&&Can be used inside  and outside of functions|||Can only be used inside functions&&&Variable declaration and value assignment can be done separately|||Variable declaration and value assignment cannot be done separately |||    (must be done in the same line)'],"['int- stores integers (whole numbers), such as 123 or -123|||float32- stores floating point numbers, with decimals, such as 19.99 or -19.99|||string - stores text, such as ""Hello World"". String values are surrounded by double quotes|||bool- stores values with two states: true or false|||a|||b|||c|||a is """"|||b is 0|||c is false|||']"
7,['Go Multiple Variable Declaration'],"['Go Multiple Variable Declaration', 'Go Variable Declaration in a Block']","['Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_variables.php', 'https://www.w3schools.com/go/go_variable_naming_rules.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration6', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration7', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_declaration8', 'https://www.w3schools.com/go/go_variables.php', 'https://www.w3schools.com/go/go_variable_naming_rules.php']",[],"['In Go, it is possible to declare multiple variables in the same line.', 'This example shows how to declare multiple variables in the same line:']","['Note: If you use the type keyword, it is only possible to declare one type of variable per line.', 'If the type keyword is not specified, you can declare different types of variables in the same line:', 'Multiple variable declarations can also be grouped together into a block for greater readability:']",[],"['\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a, b, c, d int = 1, 3, 5, 7\n  \n    \xa0\xa0fmt.Println(a)\n    \xa0\xa0fmt.Println(b)\n    \xa0\xa0fmt.Println(c)\n    \xa0\xa0fmt.Println(d)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a, b = 6, ""Hello""\n    \xa0\xa0c, d := 7, ""World!""\n  \n    \xa0\xa0fmt.Println(a)\n    \xa0\xa0fmt.Println(b)\n    \xa0\xa0fmt.Println(c)\n    \xa0\xa0fmt.Println(d)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0 var (\n    \xa0\xa0\xa0\xa0 a int\n    \xa0\xa0\xa0\xa0 b int = 1 \n    \xa0\xa0\xa0\xa0 c string = ""hello""\n    \xa0\xa0 )\n  \n    \xa0\xa0fmt.Println(a)\n    \xa0\xa0fmt.Println(b)\n    \xa0\xa0fmt.Println(c)\n    }\n  ']",[],[]
8,['Go Variable Naming Rules'],"['Go Variable Naming Rules ', 'Multi-Word Variable Names', 'Camel Case', 'Pascal Case', 'Snake Case']",[],"['https://www.w3schools.com/go/go_variable_multi.php', 'https://www.w3schools.com/go/go_constants.php', 'https://www.w3schools.com/go/go_variable_multi.php', 'https://www.w3schools.com/go/go_constants.php']",[],"['Go variable naming rules:', 'Variable names with more than one word can be difficult to read.', 'There are several techniques you can use to make them more readable:', 'Each word, except the first, starts with a capital letter:', 'Each word starts with a capital letter:', 'Each word is separated by an underscore character:']","['A variable can have a short name (like x and y) or a more descriptive name (age, price, carname, etc.).']",[],"['\nmyVariableName = ""John""\n', '\nMyVariableName = ""John""\n', '\nmy_variable_name = ""John"" \n']",[],"['A variable name must start with a letter or an underscore character (_)|||A variable name cannot start with a digit|||A variable name can only contain alpha-numeric characters and underscores (a-z, A-Z, 0-9, and _ )|||Variable names are case-sensitive (age, Age and AGE are three different variables)|||There is no limit on the length of the variable name|||A variable name cannot contain spaces|||The variable name cannot be any Go keywords|||']"
9,['Go Constants'],"['Go Constants', 'Declaring a Constant', 'Constant Rules', 'Constant Types', 'Typed Constants', 'Untyped Constants', 'Constants: Unchangeable and Read-only', 'Multiple Constants Declaration']","['Syntax', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_variable_naming_rules.php', 'https://www.w3schools.com/go/go_output.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_constants', 'https://www.w3schools.com/go/go_variable_naming_rules.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_constants1', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_constants2', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_constants3', 'https://www.w3schools.com/go/trygo.php?filename=demo_variable_constants4', 'https://www.w3schools.com/go/go_variable_naming_rules.php', 'https://www.w3schools.com/go/go_output.php']",[],"['Note: The value of a constant must be assigned when you declare it. ', 'Here is an example of declaring a constant in Go:', 'There are two types of constants:', 'Typed constants are declared with a defined type:', 'Untyped constants are declared without a type:', 'When a constant is declared, it is not possible to change the value later:', 'Multiple constants can be grouped together into a block for readability:']","['If a variable should have a fixed value that cannot be changed, you can use the const keyword.', 'The const keyword declares the variable as ""constant"", which means that it is unchangeable and read-only.']","['Note: In this case, the type of the constant is inferred from the value (means the compiler decides the type of the constant, based on the value).']","['\nconst CONSTNAME type = value\n', '\n    package main\n    import (""fmt"")\n    const PI = 3.14\n    func main() {\n    \xa0\xa0fmt.Println(PI)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    const A int = 1\n    func main() {\n    \xa0\xa0fmt.Println(A)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    const A = 1\n    func main() {\n    \xa0\xa0fmt.Println(A)\n    }\n  ', '\n    package main   \n    import (""fmt"") \n    func main() {  \n    \xa0\xa0const A = 1\n    \xa0\xa0A = 2\n    \xa0\xa0fmt.Println(A)\n    }\n  ', '\npackage main   \nimport (""fmt"") \nconst (  \n\xa0\xa0A int = 1\n\xa0\xa0B = 3.14\n\xa0\xa0C = ""Hi!""\n)\nfunc main() {  \n\xa0\xa0fmt.Println(A) \n\xa0\xa0fmt.Println(B) \n\xa0\xa0fmt.Println(C) \n}\n']",[],['Constant names follow the same naming rules as variables|||Constant names are usually written in uppercase letters (for easy identification and differentiation from variables)|||Constants can be declared both inside and outside of a function|||Typed constants|||Untyped constants|||']
10,['Go Output Functions'],"['The Print() Function', 'The Println() Function', 'The Printf() Function']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_constants.php', 'https://www.w3schools.com/go/go_formatting_verbs.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_output1', 'https://www.w3schools.com/go/trygo.php?filename=demo_output2', 'https://www.w3schools.com/go/trygo.php?filename=demo_output3', 'https://www.w3schools.com/go/trygo.php?filename=demo_output4', 'https://www.w3schools.com/go/trygo.php?filename=demo_output7', 'https://www.w3schools.com/go/trygo.php?filename=demo_output5', 'https://www.w3schools.com/go/trygo.php?filename=demo_output6', 'https://www.w3schools.com/go/go_formatting_verbs.php', 'https://www.w3schools.com/go/go_constants.php', 'https://www.w3schools.com/go/go_formatting_verbs.php']",[],"['Go has three functions to output text:', 'The Print() function prints its arguments with their default format.', 'Print the values of i and j:', 'If we want to print the arguments in new lines, we need to use \\n. ', 'Tip: \\n creates new lines.', 'It is also possible to only use one Print() for printing multiple variables. ', 'If we want to add a space between string arguments, we need to use "" "": ', ' Print() inserts a space between the arguments if neither   are strings:', 'Here we will use two formatting verbs:', 'Tip: Look at all the formatting verbs in theGo Formatting Verbs chapter. ']",['The Printf() function first formats its argument based on the given formatting verb and then prints them.'],"['The Println() function is similar to Print() with the difference that a whitespace is added between the arguments, and a newline is added at the end:']","['\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Print(i)\n      \xa0\xa0fmt.Print(j)\n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Print(i, ""\\n"")\n      \xa0\xa0fmt.Print(j, ""\\n"") \n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Print(i, ""\\n"",j)\n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Print(i, "" "", j)\n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j = 10,20\n\n      \xa0\xa0fmt.Print(i,j)\n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Println(i,j)\n      }\n    ', '\n    package main \n    import (""fmt"")\n    func main() {\xa0 var i string = ""Hello""\xa0 var j int = 15\n\xa0 fmt.Printf(""i has value: %v and type: %T\\n"", i, i)\xa0 \n    fmt.Printf(""j has value: %v and type: %T"", j, j) }\n  ']",[],['Print()|||Println()|||Printf()|||%v is used to print the value |||  of the arguments|||%T is used to print the type |||  of the arguments|||']
11,['Go Output Functions'],"['The Print() Function', 'The Println() Function', 'The Printf() Function']","['Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_constants.php', 'https://www.w3schools.com/go/go_formatting_verbs.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_output1', 'https://www.w3schools.com/go/trygo.php?filename=demo_output2', 'https://www.w3schools.com/go/trygo.php?filename=demo_output3', 'https://www.w3schools.com/go/trygo.php?filename=demo_output4', 'https://www.w3schools.com/go/trygo.php?filename=demo_output7', 'https://www.w3schools.com/go/trygo.php?filename=demo_output5', 'https://www.w3schools.com/go/trygo.php?filename=demo_output6', 'https://www.w3schools.com/go/go_formatting_verbs.php', 'https://www.w3schools.com/go/go_constants.php', 'https://www.w3schools.com/go/go_formatting_verbs.php']",[],"['Go has three functions to output text:', 'The Print() function prints its arguments with their default format.', 'Print the values of i and j:', 'If we want to print the arguments in new lines, we need to use \\n. ', 'Tip: \\n creates new lines.', 'It is also possible to only use one Print() for printing multiple variables. ', 'If we want to add a space between string arguments, we need to use "" "": ', ' Print() inserts a space between the arguments if neither   are strings:', 'Here we will use two formatting verbs:', 'Tip: Look at all the formatting verbs in theGo Formatting Verbs chapter. ']",['The Printf() function first formats its argument based on the given formatting verb and then prints them.'],"['The Println() function is similar to Print() with the difference that a whitespace is added between the arguments, and a newline is added at the end:']","['\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Print(i)\n      \xa0\xa0fmt.Print(j)\n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Print(i, ""\\n"")\n      \xa0\xa0fmt.Print(j, ""\\n"") \n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Print(i, ""\\n"",j)\n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Print(i, "" "", j)\n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j = 10,20\n\n      \xa0\xa0fmt.Print(i,j)\n      }\n    ', '\n      package main\n      import (""fmt"")\n\n      func main() {\n      \xa0\xa0var i,j string = ""Hello"",""World""\n\n      \xa0\xa0fmt.Println(i,j)\n      }\n    ', '\n    package main \n    import (""fmt"")\n    func main() {\xa0 var i string = ""Hello""\xa0 var j int = 15\n\xa0 fmt.Printf(""i has value: %v and type: %T\\n"", i, i)\xa0 \n    fmt.Printf(""j has value: %v and type: %T"", j, j) }\n  ']",[],['Print()|||Println()|||Printf()|||%v is used to print the value |||  of the arguments|||%T is used to print the type |||  of the arguments|||']
12,['Go Formatting Verbs'],"['Formatting Verbs for Printf()', 'General Formatting Verbs ', 'Integer Formatting Verbs', 'String Formatting Verbs', 'Boolean Formatting Verbs ', 'Float Formatting Verbs']","['Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_output.php', 'https://www.w3schools.com/go/go_data_types.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_formatting1', 'https://www.w3schools.com/go/trygo.php?filename=demo_formatting3', 'https://www.w3schools.com/go/trygo.php?filename=demo_formatting5', 'https://www.w3schools.com/go/trygo.php?filename=demo_formatting2', 'https://www.w3schools.com/go/trygo.php?filename=demo_formatting4', 'https://www.w3schools.com/go/go_output.php', 'https://www.w3schools.com/go/go_data_types.php']",[],"['The following verbs can be used with all data types:', 'The following verbs can be used with the integer data type:', 'The following verbs can be used with the string data type:', 'The following verb can be used with the boolean data type:', 'The following verbs can be used with the float data type:']",['Go offers several formatting verbs that can be used with the  Printf() function.'],[],"['\n    package mainimport (""fmt"")func main() {\xa0 var i = 15.5\xa0 \n    var txt = ""Hello World!""\xa0 fmt.Printf(""%v\\n"", i)\xa0 \n    fmt.Printf(""%#v\\n"", i)\xa0 fmt.Printf(""%v%%\\n"", i) \xa0 \n    fmt.Printf(""%T\\n"", i)\xa0 fmt.Printf(""%v\\n"", txt)\xa0 \n    fmt.Printf(""%#v\\n"", txt)\xa0 fmt.Printf(""%T\\n"", txt) }\n  ', '\n    package main\n    import (""fmt"")\nfunc main() {\n    \xa0 var i = 15\n    \xa0 \xa0 fmt.Printf(""%b\\n"", i)\xa0 fmt.Printf(""%d\\n"", i)\n    \xa0 fmt.Printf(""%+d\\n"", i)\xa0 fmt.Printf(""%o\\n"", i)\n    \xa0 fmt.Printf(""%O\\n"", i)\xa0 fmt.Printf(""%x\\n"", i)\n    \xa0 fmt.Printf(""%X\\n"", i)\xa0 fmt.Printf(""%#x\\n"", i)\xa0 fmt.Printf(""%4d\\n"", i)\xa0 fmt.Printf(""%-4d\\n"", i)\xa0 fmt.Printf(""%04d\\n"", i)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 var txt = ""Hello""\n    \xa0 \xa0 fmt.Printf(""%s\\n"", txt)\n    \xa0 fmt.Printf(""%q\\n"", txt)\xa0 fmt.Printf(""%8s\\n"", txt)\n    \xa0 fmt.Printf(""%-8s\\n"", txt)\n    \xa0 fmt.Printf(""%x\\n"", txt)\n    \xa0 fmt.Printf(""% x\\n"", txt)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 var i = true\xa0 var j = false\n    \xa0 fmt.Printf(""%t\\n"", i)\xa0 fmt.Printf(""%t\\n"", j)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 var i = 3.141\n\xa0 fmt.Printf(""%e\\n"", i)\n    \xa0 fmt.Printf(""%f\\n"", i)\n    \xa0 fmt.Printf(""%.2f\\n"", i)\n    \xa0 fmt.Printf(""%6.2f\\n"", i)\n    \xa0 fmt.Printf(""%g\\n"", i)\n    }\n  ']","['Verb|||Description&&&%v|||Prints the value in the default format&&&%#v|||Prints the value in Go-syntax format&&&%T|||Prints the type of the value&&&%%|||Prints the % sign', 'Verb|||Description&&&%b|||Base 2&&&%d|||Base 10&&&%+d|||Base 10 and always show sign&&&%o|||Base 8&&&%O|||Base 8, with leading 0o&&&%x|||Base 16, lowercase&&&%X|||Base 16, uppercase&&&%#x|||Base 16, with leading 0x&&&%4d|||Pad with spaces (width 4, right justified)&&&%-4d|||Pad with spaces (width 4, left justified)&&&%04d|||Pad with zeroes (width 4', 'Verb|||Description&&&%s|||Prints the value as plain string&&&%q|||Prints the value as a double-quoted string&&&%8s|||Prints the value as plain string (width 8, right justified)&&&%-8s|||Prints the value as plain string (width 8, left justified)&&&%x|||Prints the value as hex dump of byte values&&&% x|||Prints the value as hex dump with spaces', 'Verb|||Description&&&%t|||Value of the boolean operator in true or false format (same as using %v)', ""Verb|||Description&&&%e|||Scientific notation with 'e' as exponent&&&%f|||Decimal point, no exponent&&&%.2f|||Default width, precision 2&&&%6.2f|||Width 6, precision 2&&&%g|||Exponent as needed, only necessary digits""]",[]
13,['Go Data Types'],"['Go Data Types', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']",['Example'],"['https://www.w3schools.com/go/go_formatting_verbs.php', 'https://www.w3schools.com/go/go_boolean_data_type.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types1', 'https://www.w3schools.com/go/exercise.php?filename=exercise_data_types1', 'https://www.w3schools.com/go/go_formatting_verbs.php', 'https://www.w3schools.com/go/go_boolean_data_type.php']",[],"['Go has three basic data types:', 'This example shows some of the different data types in Go:', 'Add the correct data type for the following variables:', 'Start the Exercise']","['Data type is an important concept in programming. Data type specifies the size and type of variable values.', 'Go is statically typed, meaning that once a variable type is defined, it can only store data of that type.']",[],"['\n    package main\n    import (""fmt"")\n\n    func main() { \xa0\xa0var a bool = true \xa0\xa0\xa0\xa0// Boolean\n    \xa0\xa0var b int = 5 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Integer\n    \xa0\xa0var c float32 = 3.14 \xa0// Floating point number\n    \xa0\xa0var d string = ""Hi!""\xa0\xa0// String \n\n\n    \xa0\xa0fmt.Println(""Boolean: "", a)\n    \xa0\xa0fmt.Println(""Integer: "", b)\n    \xa0\xa0fmt.Println(""Float:   \xa0\xa0"", c)\n    \xa0\xa0fmt.Println(""String: \xa0"", d)\n    }\n']",[],"['bool: represents a boolean value and is either true or false|||Numeric: represents integer types, floating point values, |||  and complex types|||string: represents a string value|||']"
14,['Go Data Types'],"['Go Data Types', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']",['Example'],"['https://www.w3schools.com/go/go_formatting_verbs.php', 'https://www.w3schools.com/go/go_boolean_data_type.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types1', 'https://www.w3schools.com/go/exercise.php?filename=exercise_data_types1', 'https://www.w3schools.com/go/go_formatting_verbs.php', 'https://www.w3schools.com/go/go_boolean_data_type.php']",[],"['Go has three basic data types:', 'This example shows some of the different data types in Go:', 'Add the correct data type for the following variables:', 'Start the Exercise']","['Data type is an important concept in programming. Data type specifies the size and type of variable values.', 'Go is statically typed, meaning that once a variable type is defined, it can only store data of that type.']",[],"['\n    package main\n    import (""fmt"")\n\n    func main() { \xa0\xa0var a bool = true \xa0\xa0\xa0\xa0// Boolean\n    \xa0\xa0var b int = 5 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Integer\n    \xa0\xa0var c float32 = 3.14 \xa0// Floating point number\n    \xa0\xa0var d string = ""Hi!""\xa0\xa0// String \n\n\n    \xa0\xa0fmt.Println(""Boolean: "", a)\n    \xa0\xa0fmt.Println(""Integer: "", b)\n    \xa0\xa0fmt.Println(""Float:   \xa0\xa0"", c)\n    \xa0\xa0fmt.Println(""String: \xa0"", d)\n    }\n']",[],"['bool: represents a boolean value and is either true or false|||Numeric: represents integer types, floating point values, |||  and complex types|||string: represents a string value|||']"
15,['Go Boolean Data Type'],['Boolean Data Type'],['Example'],"['https://www.w3schools.com/go/go_data_types.php', 'https://www.w3schools.com/go/go_integer_data_type.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types_boolean1', 'https://www.w3schools.com/go/go_conditions.php', 'https://www.w3schools.com/go/go_data_types.php', 'https://www.w3schools.com/go/go_integer_data_type.php']",[],"['The default value of a boolean data type is false.', 'This example shows some different ways to declare Boolean variables:']",['A boolean data type is declared with the bool keyword and can only take the values true or false.'],['Note: Boolean values are mostly used for conditional testing which you will learn   more about in the Go Conditions chapter.'],"['\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var b1 bool = true // typed declaration with initial value\n    \xa0\xa0var b2 = true // untyped declaration with initial value\n    \xa0\xa0var b3 bool // typed declaration without initial value \n    \xa0\xa0b4 := true // untyped declaration with initial value\n  \n    \xa0\xa0fmt.Println(b1) // Returns true \n    \xa0\xa0fmt.Println(b2) // Returns true\n    \xa0\xa0fmt.Println(b3) // Returns false\n    \xa0\xa0fmt.Println(b4) // Returns true\n    }\n  ']",[],[]
16,['Go Integer Data Types'],"['Go Integer Data Types', 'Signed Integers', 'Unsigned Integers', 'Which Integer Type to Use?']","['Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_boolean_data_type.php', 'https://www.w3schools.com/go/go_float_data_type.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types_integer2', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types_integer1', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types_integer3', 'https://www.w3schools.com/go/go_boolean_data_type.php', 'https://www.w3schools.com/go/go_float_data_type.php']",[],"['The integer data type has two categories:', 'Go has five keywords/types of signed integers:', 'Go has five keywords/types of unsigned integers:', 'The type of integer to choose, depends on the value the variable has to store.']","['Integer data types are used to store a whole number without decimals, like 35, -50, or 1345000.', 'Tip: The default type for integer is int. If you do not specify a type, the type will be int.', 'Signed integers, declared with one of the int keywords, can store both positive and negative values:', 'Unsigned integers, declared with one of the uint keywords, can only store non-negative values:', 'This example will result in an error because 1000 is out of range for     int8 (which is from -128 to 127):']",[],"['\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var x int = 500\xa0 var y int = -4500\n    \xa0\xa0fmt.Printf(""Type: %T, value: %v"", x, x)\xa0\xa0fmt.Printf(""Type: %T, value: %v"", \n    y, y)\n    }\n  ', '\n        package main\n        import (""fmt"")\n    func main() {\n    \xa0\xa0var x uint = 500\xa0 var y uint = 4500\n    \xa0\xa0fmt.Printf(""Type: %T, value: %v"", x, x)\xa0\xa0fmt.Printf(""Type: %T, value: %v"", \n        y, y)\n    }\n        \n', '\n      package main\n      import (""fmt"")\nfunc main() {\n      \xa0 var x int8 = 1000\n      \xa0 fmt.Printf(""Type: %T, value: %v"", x, x)\n      }\n    ']","['Type|||Size|||Range&&& int|||Depends on platform:32 bits in 32 bit systems and64 bit in |||        64 bit systems|||-2147483648 to 2147483647 in 32 bit systems and|||        -9223372036854775808 to 9223372036854775807 in 64 bit systems&&& int8|||8 bits/1 byte|||-128 to 127&&& int16|||16 bits/2 byte|||-32768 to 32767&&& int32|||32 bits/4 byte|||-2147483648 to 2147483647&&& int64|||64 bits/8 byte|||-9223372036854775808 to 9223372036854775807', 'Type|||Size|||Range&&& uint|||Depends on platform:32 bits in 32 bit |||        systems and64 bit in 64 bit systems|||0 to 4294967295 in 32 bit systems and0 to 18446744073709551615 |||        in 64 bit systems&&& uint8|||8 bits/1 byte|||0 to 255&&& uint16|||16 bits/2 byte|||0 to 65535&&& uint32|||32 bits/4 byte|||0 to 4294967295&&& uint64|||64 bits/8 byte|||0 to 18446744073709551615']",['Signed integers - can store both positive and negative values|||Unsigned integers - can only store non-negative values|||']
17,['Go Float Data Types'],"['Go Float Data Types', 'The float32 Keyword', 'The float64 Keyword', 'Which Float Type to Use?']","['Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_integer_data_type.php', 'https://www.w3schools.com/go/go_string_data_type.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types_float1', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types_float2', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types_float3', 'https://www.w3schools.com/go/go_integer_data_type.php', 'https://www.w3schools.com/go/go_string_data_type.php']",[],"['The float data type has two keywords:', 'This example shows how to declare some variables of type  float32:', 'The float64 data type can store a larger set of numbers than float32.', 'This example shows how to declare a variable of type float64:', 'The type of float to choose, depends on the value the variable has to store.']","['Tip: The default type for float is float64. If you do not specify a type, the type will be float64.', 'This example will result in an error because 3.4e+39 is out of range for float32:']","['The float data types are used to store positive and negative numbers with a decimal point, like 35.3, -2.34, or 3597.34987.']","['\n    package main\n    import (""fmt"")\nfunc main() {\n    \xa0\xa0var x float32 = 123.78\xa0\xa0var \n    y float32 = 3.4e+38\xa0 fmt.Printf(""Type: %T, value: %v\\n"", x, x)\xa0 fmt.Printf(""Type: %T, value: %v"", \n    y, y)\n     }\n  ', '\n    package main\n    import (""fmt"")\nfunc main() {\n    \xa0\xa0var x float64 = 1.7e+308\n    \xa0\xa0fmt.Printf(""Type: %T, value: %v"", x, x)\n    }\n  ', '\n    package main\n    import (""fmt"")\nfunc main() {\n    \xa0\xa0var x float32= 3.4e+39\n    \xa0\xa0fmt.Println(x)\n    }\n  ']",['Type|||Size|||Range&&&float32|||32 bits|||-3.4e+38 to 3.4e+38.&&&float64|||64 bits|||-1.7e+308 to +1.7e+308.'],[]
18,['Go String Data Type'],['String Data Type'],['Example'],"['https://www.w3schools.com/go/go_float_data_type.php', 'https://www.w3schools.com/go/go_arrays.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_data_types_string1', 'https://www.w3schools.com/go/go_float_data_type.php', 'https://www.w3schools.com/go/go_arrays.php']",[],[],[],['The string data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:'],"['\n    package main\n    import (""fmt"")\nfunc main() {\n    \xa0\xa0var txt1 string = ""Hello!""\n    \xa0\xa0var txt2 string\n    \xa0\xa0txt3 := ""World 1""\n\n    \xa0\xa0fmt.Printf(""Type: %T, value: %\\n"", txt1, txt1)\n    \xa0\xa0fmt.Printf(""Type: %T, value: %v\\n"", txt2, txt2)\n    \xa0\xa0fmt.Printf(""Type: %T, value: %v\\n"", txt3, txt3)\n    }\n  ']",[],[]
19,['Go Arrays'],"['Go Arrays', 'Declare an Array', 'Array Examples', 'Access Elements of an Array', 'Change Elements of an Array', 'Array Initialization', 'Initialize Only Specific Elements', 'Find the Length of an Array', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Syntax', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_string_data_type.php', 'https://www.w3schools.com/go/go_slices.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_arrays1', 'https://www.w3schools.com/go/trygo.php?filename=demo_arrays2', 'https://www.w3schools.com/go/trygo.php?filename=demo_arrays_string', 'https://www.w3schools.com/go/trygo.php?filename=demo_arrays3', 'https://www.w3schools.com/go/trygo.php?filename=demo_arrays4', 'https://www.w3schools.com/go/trygo.php?filename=demo_arrays5', 'https://www.w3schools.com/go/trygo.php?filename=demo_arrays6', 'https://www.w3schools.com/go/trygo.php?filename=demo_arrays7', 'https://www.w3schools.com/go/exercise.php?filename=exercise_arrays1', 'https://www.w3schools.com/go/go_string_data_type.php', 'https://www.w3schools.com/go/go_slices.php']",[],"['In Go, there are two ways to declare an array:', 'This example declares two arrays (arr1 and arr2) with defined lengths:', 'This example declares two arrays (arr1 and arr2) with inferred lengths:', 'This example declares an array of strings:', 'You can access a specific array element by referring to the index number.', ' Tip: The default value for int is 0, and the default value for string is """".', 'It is possible to initialize only specific elements in an array.', 'This example initializes only the second and third elements of the array:\xa0', '\xa0The array above has 5 elements.', 'The len() function is used to find the length of an array:', 'Create an array, named cars, of type string:', 'Start the Exercise']","['In Go, array indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.', 'This example shows how to access the first and third elements in the   prices array:', 'You can also change the value of a specific array element by referring to the index number.', 'This example shows how to change the value of the third element in the   prices array:\xa0', ' If an array or one of its elements has not been initialized in the code, it is assigned the default value of its type.']","['Arrays are used to store multiple values of the same type in a single variable, instead of declaring separate variables for each value.', 'Note: The length specifies the number of elements   to store in the array. In Go, arrays have a fixed length. The length of the   array is either defined by a number or is inferred (means that the compiler decides the length of the array, based on the number of  values).']","['\n      var array_name =  [length]datatype{values} // here length is defined\nor\n      var array_name = [...]datatype{values} // here length is inferred', '\narray_name := [length]datatype{values}\xa0// here length \n        is definedor array_name := [...]datatype{values} // \n        here length is inferred', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var arr1 =  [3]int{1,2,3}\n    \xa0\xa0arr2 := [5]int{4,5,6,7,8}\n\n    \xa0\xa0fmt.Println(arr1)\n    \xa0\xa0fmt.Println(arr2)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var arr1 = [...]int{1,2,3}\n    \xa0\xa0arr2 := [...]int{4,5,6,7,8}\n\n    \xa0\xa0fmt.Println(arr1)\n    \xa0\xa0fmt.Println(arr2)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 var cars = [4]string{""Volvo"", ""BMW"", ""Ford"", ""Mazda""}\xa0 \n    fmt.Print(cars)}\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0prices := [3]int{10,20,30}\n\n    \xa0\xa0fmt.Println(prices[0])\n    \xa0\xa0fmt.Println(prices[2])\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0prices := [3]int{10,20,30}\n\n    \xa0\xa0prices[2] = 50\n    \xa0\xa0fmt.Println(prices)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0arr1 := [5]int{} //not initialized\n    \xa0\xa0arr2 := [5]int{1,2} //partially initialized\n    \xa0\xa0arr3 := [5]int{1,2,3,4,5} //fully initialized\n\n    \xa0\xa0fmt.Println(arr1)\n    \xa0\xa0fmt.Println(arr2)\n    \xa0\xa0fmt.Println(arr3)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0arr1 := [5]int{1:10,2:40}\n\n    \xa0\xa0fmt.Println(arr1)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0arr1 := [4]string{""Volvo"", ""BMW"", ""Ford"", ""Mazda""}\n    \xa0\xa0arr2 := [...]int{1,2,3,4,5,6}\n\n    \xa0\xa0fmt.Println(len(arr1))\n    \xa0\xa0fmt.Println(len(arr2))\n    }\n  ']",[],['1:10 means: assign |||10 to array index 1 (second element).|||2:40 means: assign 40 to |||array index |||2 (third element).|||']
20,['Go Slices'],"['Go Slices', 'Create a Slice With []datatype{values}', 'Create a Slice From an Array', 'Create a Slice With The make() Function']","['Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example']","['https://www.w3schools.com/go/go_arrays.php', 'https://www.w3schools.com/go/go_slices_modify.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices1', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices2', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices3', 'https://www.w3schools.com/go/go_arrays.php', 'https://www.w3schools.com/go/go_slices_modify.php']",[],"['Slices are similar to arrays, but are more powerful and flexible.', 'In Go, there are several ways to create a slice:', 'A common way of declaring a slice is like this:', 'The code above declares an empty slice of 0 length and 0 capacity.', 'To initialize the slice during declaration, use this:', 'This example shows how to create slices using the []datatype{values} format:', 'You can create a slice by slicing an array:', 'This example shows how to create a slice from an array:', 'If myslice started from element 0, the slice capacity would be 6.', 'The make() function can also be used to create a slice.', 'Note: If the capacity parameter is not defined, it will be equal to   length.', 'This example shows how to create slices using the make()   function:']","['Like arrays, slices are also used to store multiple values of the same type in a single variable.', 'However, unlike arrays, the length of a slice can grow and shrink as you see fit.', 'The code above declares a slice of integers of length 3 and also the capacity of 3.', 'In Go, there are two functions that can be used to return the length and capacity of a slice:', 'In the example above myslice is a slice with length 2. It is made from arr1 which is an array with length 6.']","['In the example above, we see that in the first slice (myslice1), the actual elements are not specified, so both the length and capacity of the slice will be zero. In the second slice (myslice2), the elements are specified, and both length and capacity is equal to the number of actual elements specified.', 'The slice starts from the second element of the array which has value 12. The slice can grow to the end of the array. This means that the capacity of the slice is 4.If myslice started from element 0, the slice capacity would be 6.Create a Slice With The make() FunctionThe make() function can also be used to create a slice.Syntaxslice_name := make([]type, length, capacity)Note: If the capacity parameter is not defined, it will be equal to   length.ExampleThis example shows how to create slices using the make()   function:    package main    import (""fmt"")    func main() {    \xa0 myslice1 := make([]int, 5, 10)\xa0 fmt.Printf(""myslice1 = %v\\n"", myslice1)\xa0 fmt.Printf(""length =     %d\\n"", len(myslice1))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice1))\xa0 // with omitted capacity \xa0 myslice2 := make([]int, 5)\xa0 fmt.Printf(""myslice2 = %v\\n"", myslice2)\xa0 fmt.Printf(""length =     %d\\n"", len(myslice2))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice2))}  Result:    myslice1 = [0 0 0 0 0]length = 5capacity = 10myslice2 = [0 0 0 0     0]length = 5capacity = 5Try it Yourself »❮ PreviousNext ❯']","['\nslice_name := []datatype{values}', '\nmyslice := []int\n', '\nmyslice := []int{1,2,3}', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 myslice1 := []int{}\xa0 fmt.Println(len(myslice1))\xa0 \n    fmt.Println(cap(myslice1))\xa0 fmt.Println(myslice1)\xa0 \n    myslice2 := []string{""Go"", ""Slices"", ""Are"", ""Powerful""}\xa0 \n    fmt.Println(len(myslice2))\xa0 fmt.Println(cap(myslice2))\xa0 \n    fmt.Println(myslice2)\n\n    }\n  ', '\n        var myarray = [length]datatype{values} // An array\n        myslice := myarray[start:end] // A slice made from the array\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0arr1 := [6]int{10, 11, 12, 13, 14,15}\n    \xa0\xa0myslice := arr1[2:4]\n\n    \xa0 fmt.Printf(""myslice = %v\\n"", myslice)\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice))\n    }\n  ', '\nslice_name := make([]type, length, capacity)\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 myslice1 := make([]int, 5, 10)\xa0 fmt.Printf(""myslice1 = %v\\n"", myslice1)\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice1))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice1))\n\xa0 // with omitted capacity \xa0 myslice2 := make([]int, 5)\xa0 fmt.Printf(""myslice2 = %v\\n"", myslice2)\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice2))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice2))}\n  ']",[],['Using the []datatype{values} format|||Create a slice from an array|||Using the make() function|||len() function - returns the length |||  of the slice (the number of elements in the slice)|||cap() function - returns the capacity of |||  the slice (the number of elements the slice can grow |||  or shrink to)|||']
21,['Go Slices'],"['Go Slices', 'Create a Slice With []datatype{values}', 'Create a Slice From an Array', 'Create a Slice With The make() Function']","['Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example']","['https://www.w3schools.com/go/go_arrays.php', 'https://www.w3schools.com/go/go_slices_modify.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices1', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices2', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices3', 'https://www.w3schools.com/go/go_arrays.php', 'https://www.w3schools.com/go/go_slices_modify.php']",[],"['Slices are similar to arrays, but are more powerful and flexible.', 'In Go, there are several ways to create a slice:', 'A common way of declaring a slice is like this:', 'The code above declares an empty slice of 0 length and 0 capacity.', 'To initialize the slice during declaration, use this:', 'This example shows how to create slices using the []datatype{values} format:', 'You can create a slice by slicing an array:', 'This example shows how to create a slice from an array:', 'If myslice started from element 0, the slice capacity would be 6.', 'The make() function can also be used to create a slice.', 'Note: If the capacity parameter is not defined, it will be equal to   length.', 'This example shows how to create slices using the make()   function:']","['Like arrays, slices are also used to store multiple values of the same type in a single variable.', 'However, unlike arrays, the length of a slice can grow and shrink as you see fit.', 'The code above declares a slice of integers of length 3 and also the capacity of 3.', 'In Go, there are two functions that can be used to return the length and capacity of a slice:', 'In the example above myslice is a slice with length 2. It is made from arr1 which is an array with length 6.']","['In the example above, we see that in the first slice (myslice1), the actual elements are not specified, so both the length and capacity of the slice will be zero. In the second slice (myslice2), the elements are specified, and both length and capacity is equal to the number of actual elements specified.', 'The slice starts from the second element of the array which has value 12. The slice can grow to the end of the array. This means that the capacity of the slice is 4.If myslice started from element 0, the slice capacity would be 6.Create a Slice With The make() FunctionThe make() function can also be used to create a slice.Syntaxslice_name := make([]type, length, capacity)Note: If the capacity parameter is not defined, it will be equal to   length.ExampleThis example shows how to create slices using the make()   function:    package main    import (""fmt"")    func main() {    \xa0 myslice1 := make([]int, 5, 10)\xa0 fmt.Printf(""myslice1 = %v\\n"", myslice1)\xa0 fmt.Printf(""length =     %d\\n"", len(myslice1))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice1))\xa0 // with omitted capacity \xa0 myslice2 := make([]int, 5)\xa0 fmt.Printf(""myslice2 = %v\\n"", myslice2)\xa0 fmt.Printf(""length =     %d\\n"", len(myslice2))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice2))}  Result:    myslice1 = [0 0 0 0 0]length = 5capacity = 10myslice2 = [0 0 0 0     0]length = 5capacity = 5Try it Yourself »❮ PreviousNext ❯']","['\nslice_name := []datatype{values}', '\nmyslice := []int\n', '\nmyslice := []int{1,2,3}', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 myslice1 := []int{}\xa0 fmt.Println(len(myslice1))\xa0 \n    fmt.Println(cap(myslice1))\xa0 fmt.Println(myslice1)\xa0 \n    myslice2 := []string{""Go"", ""Slices"", ""Are"", ""Powerful""}\xa0 \n    fmt.Println(len(myslice2))\xa0 fmt.Println(cap(myslice2))\xa0 \n    fmt.Println(myslice2)\n\n    }\n  ', '\n        var myarray = [length]datatype{values} // An array\n        myslice := myarray[start:end] // A slice made from the array\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0arr1 := [6]int{10, 11, 12, 13, 14,15}\n    \xa0\xa0myslice := arr1[2:4]\n\n    \xa0 fmt.Printf(""myslice = %v\\n"", myslice)\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice))\n    }\n  ', '\nslice_name := make([]type, length, capacity)\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 myslice1 := make([]int, 5, 10)\xa0 fmt.Printf(""myslice1 = %v\\n"", myslice1)\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice1))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice1))\n\xa0 // with omitted capacity \xa0 myslice2 := make([]int, 5)\xa0 fmt.Printf(""myslice2 = %v\\n"", myslice2)\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice2))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice2))}\n  ']",[],['Using the []datatype{values} format|||Create a slice from an array|||Using the make() function|||len() function - returns the length |||  of the slice (the number of elements in the slice)|||cap() function - returns the capacity of |||  the slice (the number of elements the slice can grow |||  or shrink to)|||']
22,"['Go Access, Change, Append and Copy Slices']","['Access Elements of a Slice', 'Change Elements of a Slice', 'Append Elements To a Slice', 'Append One Slice To Another Slice', 'Change The Length of a Slice', 'Memory Efficiency']","['Example', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Example', 'Syntax', 'Example']","['https://www.w3schools.com/go/go_slices.php', 'https://www.w3schools.com/go/go_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices4', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices4_2', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices5', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices6', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices7', 'https://www.w3schools.com/go/trygo.php?filename=demo_slices8', 'https://www.w3schools.com/go/go_slices.php', 'https://www.w3schools.com/go/go_operators.php']",[],"['You can access a specific slice element by referring to the index number.', 'You can also change a specific slice element by referring to the index number.', 'This example shows how to change the third element in the prices slice:', 'You can append elements to the end of a slice using the append()function:', 'This example shows how to append elements to the end of a slice:', 'This example shows how to append one slice to another slice:', 'Unlike arrays, it is possible to change the length of a slice.', 'This example shows how to change the length of a slice:', '\xa0When using slices, Go loads all the underlying elements into the memory.', 'This example shows how to use the copy() function:']","['In Go, indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.', 'This example shows how to access the first and third elements in the prices slice:', 'To append all the elements of one slice to another slice, use the append()function:', ""Note: The '...' after slice2 is necessary   when appending the elements of one slice to another."", 'If the array is large and you need only a few elements, it is better to copy those elements using the copy() function.']","['The copy() function creates a new underlying array with only the required elements for the slice. This will reduce the memory used for the program.\xa0', 'The copy() function takes in two slices dest and src, and copies data from src to dest. It returns the number of elements copied.', 'The capacity of the new slice is now less than the capacity of the original slice because the new underlying array is smaller.']","['\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0prices := []int{10,20,30}\n\n    \xa0\xa0fmt.Println(prices[0])\n    \xa0\xa0fmt.Println(prices[2])\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0prices := []int{10,20,30}\n    \xa0 prices[2] = 50\n    \xa0\xa0fmt.Println(prices[0])\n    \xa0\xa0fmt.Println(prices[2])\n    }\n  ', '\nslice_name = append(slice_name, element1, element2, ...)\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 myslice1 := []int{1, 2, 3, 4, 5, 6}\xa0 fmt.Printf(""myslice1 = \n    %v\\n"", myslice1)\xa0 fmt.Printf(""length = %d\\n"", len(myslice1))\xa0 \n    fmt.Printf(""capacity = %d\\n"", cap(myslice1))\xa0 myslice1 = \n    append(myslice1, 20, 21)\xa0 fmt.Printf(""myslice1 = %v\\n"", myslice1)\xa0 \n    fmt.Printf(""length = %d\\n"", len(myslice1))\xa0 fmt.Printf(""capacity = \n    %d\\n"", cap(myslice1))}\n  ', '\nslice3 = append(slice1, slice2...)\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0myslice1 := []int{1,2,3}\n    \xa0\xa0myslice2 := []int{4,5,6}\n    \xa0 myslice3 := append(myslice1, myslice2...)\xa0 fmt.Printf(""myslice3=%v\\n"", \n    myslice3)\xa0 fmt.Printf(""length=%d\\n"", len(myslice3))\xa0 \n    fmt.Printf(""capacity=%d\\n"", cap(myslice3))\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 arr1 := [6]int{9, 10, 11, 12, 13, 14} // An array\xa0 myslice1 \n    := arr1[1:5] // Slice array\xa0 fmt.Printf(""myslice1 = %v\\n"", \n    myslice1)\xa0 fmt.Printf(""length = %d\\n"", len(myslice1))\xa0 \n    fmt.Printf(""capacity = %d\\n"", cap(myslice1))\xa0 myslice1 = \n    arr1[1:3] // Change length by re-slicing the array\xa0 fmt.Printf(""myslice1 \n    = %v\\n"", myslice1)\xa0 fmt.Printf(""length = %d\\n"", len(myslice1))\xa0 \n    fmt.Printf(""capacity = %d\\n"", cap(myslice1))\xa0 myslice1 = \n    append(myslice1, 20, 21, 22, 23) // Change length by appending items\xa0 \n    fmt.Printf(""myslice1 = %v\\n"", myslice1)\xa0 fmt.Printf(""length = \n    %d\\n"", len(myslice1))\xa0 fmt.Printf(""capacity = %d\\n"", cap(myslice1))\n    }\n  ', '\n        copy(dest, src)', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0 numbers := []int{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\xa0 \n    // Original slice\xa0 fmt.Printf(""numbers = %v\\n"", numbers)\xa0 \n    fmt.Printf(""length = %d\\n"", len(numbers))\xa0 fmt.Printf(""capacity = \n    %d\\n"", cap(numbers))\xa0 // Create copy with only needed numbers\xa0 \n    neededNumbers := numbers[:len(numbers)-10]\xa0 numbersCopy := make([]int, \n    len(neededNumbers))\xa0 copy(numbersCopy, neededNumbers) \xa0 \n    fmt.Printf(""numbersCopy = %v\\n"", numbersCopy)\xa0 fmt.Printf(""length = \n    %d\\n"", len(numbersCopy))\xa0 fmt.Printf(""capacity = %d\\n"", cap(numbersCopy))}\n  ']",[],[]
23,['Go Operators'],['Go Operators'],"['Example', 'Example']","['https://www.w3schools.com/go/go_slices_modify.php', 'https://www.w3schools.com/go/go_arithmetic_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper2', 'https://www.w3schools.com/go/go_arithmetic_operators.php', 'https://www.w3schools.com/go/go_assignment_operators.php', 'https://www.w3schools.com/go/go_comparison_operators.php', 'https://www.w3schools.com/go/go_logical_operators.php', 'https://www.w3schools.com/go/go_bitwise_operators.php', 'https://www.w3schools.com/go/go_slices_modify.php', 'https://www.w3schools.com/go/go_arithmetic_operators.php']",[],"['Operators are used to perform operations on variables and values.', 'The + operator adds together two values, like in the example below:', 'Go divides the operators into the following groups:']",[],"['Although the + operator is often used to add together two values, it can also be used to add together a variable and a value, or a variable and another variable:']","['\n    package main\n    import (""fmt"")\nfunc main() {\n      \xa0\xa0var a = 15 + 25\n      \xa0\xa0fmt.Println(a)\n    }\n  ', '\n    package main\n    import (""fmt"")\nfunc main() {\n      \xa0\xa0var (\n      \xa0\xa0\xa0\xa0sum1 = 100 + 50    // 150 (100 + 50)\n      \xa0\xa0\xa0\xa0sum2 = sum1 + 250  // 400 (150 + 250)\n      \xa0\xa0\xa0\xa0sum3 = sum2 + sum2 // 800 (400 + 400)\n      \xa0\xa0)\n      \xa0\xa0fmt.Println(sum3)\n    }\n  ']",[],['Arithmetic operators|||Assignment operators|||Comparison operators|||Logical operators|||Bitwise operators|||']
24,['Go Operators'],['Go Operators'],"['Example', 'Example']","['https://www.w3schools.com/go/go_slices_modify.php', 'https://www.w3schools.com/go/go_arithmetic_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper2', 'https://www.w3schools.com/go/go_arithmetic_operators.php', 'https://www.w3schools.com/go/go_assignment_operators.php', 'https://www.w3schools.com/go/go_comparison_operators.php', 'https://www.w3schools.com/go/go_logical_operators.php', 'https://www.w3schools.com/go/go_bitwise_operators.php', 'https://www.w3schools.com/go/go_slices_modify.php', 'https://www.w3schools.com/go/go_arithmetic_operators.php']",[],"['Operators are used to perform operations on variables and values.', 'The + operator adds together two values, like in the example below:', 'Go divides the operators into the following groups:']",[],"['Although the + operator is often used to add together two values, it can also be used to add together a variable and a value, or a variable and another variable:']","['\n    package main\n    import (""fmt"")\nfunc main() {\n      \xa0\xa0var a = 15 + 25\n      \xa0\xa0fmt.Println(a)\n    }\n  ', '\n    package main\n    import (""fmt"")\nfunc main() {\n      \xa0\xa0var (\n      \xa0\xa0\xa0\xa0sum1 = 100 + 50    // 150 (100 + 50)\n      \xa0\xa0\xa0\xa0sum2 = sum1 + 250  // 400 (150 + 250)\n      \xa0\xa0\xa0\xa0sum3 = sum2 + sum2 // 800 (400 + 400)\n      \xa0\xa0)\n      \xa0\xa0fmt.Println(sum3)\n    }\n  ']",[],['Arithmetic operators|||Assignment operators|||Comparison operators|||Logical operators|||Bitwise operators|||']
25,['Go Arithmetic Operators'],"['Arithmetic Operators', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']",[],"['https://www.w3schools.com/go/go_operators.php', 'https://www.w3schools.com/go/go_assignment_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_add', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_sub', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_mult', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_div', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_mod', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_inc', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_dec', 'https://www.w3schools.com/go/exercise.php?filename=exercise_operators1', 'https://www.w3schools.com/go/go_operators.php', 'https://www.w3schools.com/go/go_assignment_operators.php']",[],"['Arithmetic operators are used to perform common mathematical operations.', 'Multiply 10 with 5, and print the result.', 'Start the Exercise']",[],[],[],['Operator|||Name|||Description|||Example|||Try it&&&+|||Addition|||Adds together two values|||x + y|||Try it »&&&-|||Subtraction|||Subtracts one value from another|||x - y|||Try it »&&&*|||Multiplication|||Multiplies two values|||x * y|||Try it »&&&/|||Division|||Divides one value by another|||x / y|||Try it »&&&%|||Modulus|||Returns the division remainder|||x % y|||Try it »&&&++|||Increment|||Increases the value of a variable by 1|||x++|||Try it »&&&--|||Decrement|||Decreases the value of a variable by 1|||x--|||Try it »'],[]
26,['Go Assignment Operators'],['Assignment Operators'],"['Example', 'Example']","['https://www.w3schools.com/go/go_arithmetic_operators.php', 'https://www.w3schools.com/go/go_comparison_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_assignment1', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_assignment2', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass1', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass2', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass3', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass4', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass5', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass6', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass7', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass8', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass9', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass10', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_ass11', 'https://www.w3schools.com/go/go_arithmetic_operators.php', 'https://www.w3schools.com/go/go_comparison_operators.php']",[],"['Assignment operators are used to assign values to variables.', 'The addition assignment operator (+=) adds a value to a variable:', 'A list of all assignment operators:']","['In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:']",[],"['\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var x = 10\n    \xa0\xa0fmt.Println(x)\n   }\n  ', '\n    package main\n    import (""fmt"")\nfunc main() {\n    \xa0\xa0var x = 10\n    \xa0\xa0x +=5\n    \xa0\xa0fmt.Println(x)\n   }\n  ']",['Operator|||Example|||Same As|||Try it&&&=|||x = 5|||x = 5|||Try it »&&&+=|||x += 3|||x = x + 3|||Try it »&&&-=|||x -= 3|||x = x - 3|||Try it »&&&*=|||x *= 3|||x = x * 3|||Try it »&&&/=|||x /= 3|||x = x / 3|||Try it »&&&%=|||x %= 3|||x = x % 3|||Try it »&&&&=|||x &= 3|||x = x & 3|||Try it »&&&|=|||x |= 3|||x = x | 3|||Try it »&&&^=|||x ^= 3|||x = x ^ 3|||Try it »&&&>>=|||x >>= 3|||x = x >> 3|||Try it »&&&<<=|||x <<= 3|||x = x << 3|||Try it »'],[]
27,['Go Comparison Operators'],['Comparison Operators'],['Example'],"['https://www.w3schools.com/go/go_assignment_operators.php', 'https://www.w3schools.com/go/go_logical_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_assignment3', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_compare1', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_compare2', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_compare3', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_compare4', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_compare5', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_compare6', 'https://www.w3schools.com/go/go_conditions.php', 'https://www.w3schools.com/go/go_assignment_operators.php', 'https://www.w3schools.com/go/go_logical_operators.php']",[],"['Comparison operators are used to compare two values.', 'Note: The return value of a comparison is either true (1) or false (0).', 'A list of all comparison operators:']","['In the following example, we use the greater than operator (>) to find out if 5 is greater than 3:', 'You will learn more about comparison operators and how to use them in the Go Conditions chapter.']",[],"['\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var x = 5\n    \xa0\xa0var y = 3\n    \xa0\xa0fmt.Println(x>y) // returns 1 (true) because 5 is greater than 3\n   }\n  ']",['Operator|||Name|||Example|||Try it&&&==|||Equal to|||x == y|||Try it »&&&!=|||Not equal|||x != y|||Try it »&&&>|||Greater than|||x > y|||Try it »&&&<|||Less than|||x < y|||Try it »&&&>=|||Greater than or equal to|||x >= y|||Try it »&&&<=|||Less than or equal to|||x <= y|||Try it »'],[]
28,['Go Logical Operators'],['Logical Operators'],[],"['https://www.w3schools.com/go/go_comparison_operators.php', 'https://www.w3schools.com/go/go_bitwise_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_logical1', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_logical2', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_logical3', 'https://www.w3schools.com/go/go_comparison_operators.php', 'https://www.w3schools.com/go/go_bitwise_operators.php']",[],['Logical operators are used to determine the logic between variables or values:'],[],[],[],"['Operator|||Name|||Description|||Example|||Try it&&&&&\xa0|||Logical and|||Returns true if both statements are true|||x < 5 &&\xa0 x < 10|||Try it »&&&||\xa0|||Logical or|||Returns true if one of the statements is true|||x < 5 || x < 4|||Try it »&&&!|||Logical not|||Reverse the result, returns false if the result is true|||!(x < 5 && x < 10)|||Try it »']",[]
29,['Go Bitwise Operators'],['Bitwise Operators'],[],"['https://www.w3schools.com/go/go_logical_operators.php', 'https://www.w3schools.com/go/go_conditions.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_bitwise1', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_bitwise2', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_bitwise3', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_bitwise4', 'https://www.w3schools.com/go/trygo.php?filename=demo_oper_bitwise5', 'https://www.w3schools.com/go/go_logical_operators.php', 'https://www.w3schools.com/go/go_conditions.php']",[],['Bitwise operators are used on (binary) numbers:'],[],[],[],"['Operator|||Name|||Description|||Example|||Try it&&&&\xa0|||AND|||Sets each bit to 1 if both bits are 1||| x & y|||Try it »&&&||||OR|||Sets each bit to 1 if one of two bits is 1||| x | y |||Try it »&&&\xa0^|||XOR|||Sets each bit to 1 if only one of two bits is 1|||x ^ b|||Try it »&&&<<|||Zero fill left shift|||Shift left by pushing zeros in from the right|||x << 2|||Try it »&&&>>|||Signed right shift|||Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off|||x >> 2|||Try it »']",[]
30,['Go Conditions'],['Go Conditions'],[],"['https://www.w3schools.com/go/go_bitwise_operators.php', 'https://www.w3schools.com/go/go_if_statement.php', 'https://www.w3schools.com/go/go_comparison_operators.php', 'https://www.w3schools.com/go/go_logical_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_conditions1', 'https://www.w3schools.com/go/trygo.php?filename=demo_conditions2', 'https://www.w3schools.com/go/trygo.php?filename=demo_conditions3', 'https://www.w3schools.com/go/trygo.php?filename=demo_conditions4', 'https://www.w3schools.com/go/go_bitwise_operators.php', 'https://www.w3schools.com/go/go_if_statement.php']",[],"['A condition can be either true or false.', 'Go supports the usual comparison operators from mathematics:', 'Additionally, Go supports the usual logical operators:', 'Go has the following conditional statements:']","['Conditional statements are used to perform different actions based on different conditions.', 'You can use these operators or their combinations to create conditions for different decisions.']",[],[],['Example|||Try it&&&x > y|||Try it »&&&x != y|||Try it »&&& (x > y) && (y > z) |||Try it »&&&(x == y) || z |||Try it »'],"['Less than <|||Less than or equal <=|||Greater than >|||Greater than or equal >=|||Equal to ==|||Not equal to !=|||Logical AND &&|||Logical OR |||||Logical NOT !|||Use if to specify a block of code to be executed, if a specified condition is true|||Use else to specify a block of code to be executed, if the same condition is false|||Use else if to specify a new condition to test, if the first condition is false|||Use switch to specify many alternative blocks of code to be executed|||']"
31,['Go Conditions'],['Go Conditions'],[],"['https://www.w3schools.com/go/go_bitwise_operators.php', 'https://www.w3schools.com/go/go_if_statement.php', 'https://www.w3schools.com/go/go_comparison_operators.php', 'https://www.w3schools.com/go/go_logical_operators.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_conditions1', 'https://www.w3schools.com/go/trygo.php?filename=demo_conditions2', 'https://www.w3schools.com/go/trygo.php?filename=demo_conditions3', 'https://www.w3schools.com/go/trygo.php?filename=demo_conditions4', 'https://www.w3schools.com/go/go_bitwise_operators.php', 'https://www.w3schools.com/go/go_if_statement.php']",[],"['A condition can be either true or false.', 'Go supports the usual comparison operators from mathematics:', 'Additionally, Go supports the usual logical operators:', 'Go has the following conditional statements:']","['Conditional statements are used to perform different actions based on different conditions.', 'You can use these operators or their combinations to create conditions for different decisions.']",[],[],['Example|||Try it&&&x > y|||Try it »&&&x != y|||Try it »&&& (x > y) && (y > z) |||Try it »&&&(x == y) || z |||Try it »'],"['Less than <|||Less than or equal <=|||Greater than >|||Greater than or equal >=|||Equal to ==|||Not equal to !=|||Logical AND &&|||Logical OR |||||Logical NOT !|||Use if to specify a block of code to be executed, if a specified condition is true|||Use else to specify a block of code to be executed, if the same condition is false|||Use else if to specify a new condition to test, if the first condition is false|||Use switch to specify many alternative blocks of code to be executed|||']"
32,['Go if statement'],"['The if Statement', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Example', 'Example']","['https://www.w3schools.com/go/go_conditions.php', 'https://www.w3schools.com/go/go_else_statement.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_if1', 'https://www.w3schools.com/go/trygo.php?filename=demo_if2', 'https://www.w3schools.com/go/exercise.php?filename=exercise_conditions1', 'https://www.w3schools.com/go/go_conditions.php', 'https://www.w3schools.com/go/go_else_statement.php']",[],"['We can also test variables:', 'Print ""Hello World"" if x is greater than y.', 'Start the Exercise']","['Use the if statement to specify a block of Go code to be executed if a condition is true.', '    Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.  ']","['In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:', 'In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that ""x is greater than y"".']","['\n        if  condition { \n        \xa0\xa0// code to be executed if condition is true \n        }\n      ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0if 20 > 18 {\n      \xa0\xa0\xa0\xa0fmt.Println(""20 is greater than 18"")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0x:= 20\n      \xa0\xa0y:= 18\n      \xa0\xa0if x > y {\n      \xa0\xa0\xa0\xa0fmt.Println(""x is greater than y"")\n      \xa0\xa0}\n    }\n  ']",[],[]
33,['Go if else Statement'],"['The else Statement', 'Using The if else Statement']","['Syntax', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_if_statement.php', 'https://www.w3schools.com/go/go_elseif_statement.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_if_else1', 'https://www.w3schools.com/go/trygo.php?filename=demo_if_else2', 'https://www.w3schools.com/go/trygo.php?filename=demo_if_else3', 'https://www.w3schools.com/go/go_if_statement.php', 'https://www.w3schools.com/go/go_elseif_statement.php']",[],"[' The brackets in the else statement should be like } else {:', 'Having the else brackets in a different line will raise an error:']",['Use the else statement to specify a block of code to be executed if the condition is false.'],"['In this example, time (20) is greater than 18, so the   if condition is false. Because of this, we move on to the else   condition and print to the screen ""Good evening"". If the time was less than   18, the program would print ""Good day"":', 'In this example, the temperature is 14 so the condition for if is false so the   code line inside the else statement is executed:']","['\n        if  condition { \n        \xa0\xa0// code to be executed if condition is true \n        } else { \n        \xa0\xa0// code to be executed if condition is false \n        }    \n      ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0time := 20 \n      \xa0\xa0if (time < 18) {\n      \xa0\xa0\xa0\xa0fmt.Println(""Good day."")\n      \xa0\xa0} else {\n      \xa0\xa0\xa0\xa0fmt.Println(""Good evening."")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0temperature := 14 \n      \xa0\xa0if (temperature > 15) {\n      \xa0\xa0\xa0\xa0fmt.Println(""It is warm out there"")\n      \xa0\xa0} else {\n      \xa0\xa0\xa0\xa0fmt.Println(""It is cold out there"")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0temperature := 14 \n      \xa0\xa0if (temperature > 15) {\n      \xa0\xa0\xa0\xa0fmt.Println(""It is warm out there."")\n      \xa0\xa0} // this raises an error  \n      \xa0\xa0else {\n      \xa0\xa0\xa0\xa0fmt.Println(""It is cold out there."")\n      \xa0\xa0}\n    }\n  ']",[],[]
34,['Go else if Statement'],"['The else if Statement', 'Using The else if Statement']","['Syntax', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_else_statement.php', 'https://www.w3schools.com/go/go_nested_if.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_elseif1', 'https://www.w3schools.com/go/trygo.php?filename=demo_elseif2', 'https://www.w3schools.com/go/trygo.php?filename=demo_elseif3', 'https://www.w3schools.com/go/go_else_statement.php', 'https://www.w3schools.com/go/go_nested_if.php']",[],"['This example shows how to use an else if statement.', 'However, if the time was 14, our program would print ""Good day.""', 'Another example for the use of else if.']","['Use the else if statement to specify a new condition if the first condition is false.', 'If conditions1 and condition2 are both correct, only the code for   condition1 are executed:']","['In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to else condition since condition1 and condition2 are both false - and print to the screen ""Good evening"".']","['\n        if  condition1 { \n        \xa0\xa0 // code to be executed if condition1 is true \n        } else if condition2 { \n        \xa0\xa0  // code to be executed if condition1 is false and condition2 is true \n        } else { \n        \xa0\xa0  // code to be executed if condition1 and condition2 \n        are both false   \n        }    \n      ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0time := 22 \n      \xa0\xa0if time < 10 {\n      \xa0\xa0\xa0\xa0fmt.Println(""Good morning."")\n      \xa0\xa0} else if time < 20 {\n      \xa0\xa0\xa0\xa0fmt.Println(""Good day."")\n      \xa0\xa0} else {\n      \xa0\xa0\xa0\xa0fmt.Println(""Good evening."")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0a := 14 \n      \xa0\xa0b := 14 \n      \xa0\xa0if a < b {\n      \xa0\xa0\xa0\xa0fmt.Println(""a is less than b."")\n      \xa0\xa0} else if a > b {\n      \xa0\xa0\xa0\xa0fmt.Println(""a is more than b."")\n      \xa0\xa0} else {\n      \xa0\xa0\xa0\xa0fmt.Println(""a and b are equal."")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0x := 30 \n      \xa0\xa0if x >= 10 {\n      \xa0\xa0\xa0\xa0fmt.Println(""x is larger than or equal to 10."")\n      \xa0\xa0} else if x > 20\n      \xa0\xa0\xa0\xa0fmt.Println(""x is larger than 20."")\n      \xa0\xa0} else {\n      \xa0\xa0\xa0\xa0fmt.Println(""x is less than 10."")\n      \xa0\xa0}\n    }\n  ']",[],[]
35,['Go Nested if Statement'],['The Nested if Statement'],"['Syntax', 'Example']","['https://www.w3schools.com/go/go_elseif_statement.php', 'https://www.w3schools.com/go/go_switch.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_nestedif1', 'https://www.w3schools.com/go/go_elseif_statement.php', 'https://www.w3schools.com/go/go_switch.php']",[],"['You can have if statements inside if statements, this is called a nested if.', 'This example shows how to use nested if statements:']",[],[],"['\n        if  condition1 { \n        \xa0\xa0 // code to be executed if condition1 is true \n        \xa0\xa0if condition2 { \n        \xa0\xa0\xa0\xa0  // code to be executed if both condition1 and condition2 \n        are true\n        \xa0\n        }}    \n      ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0num  := 20 \n      \xa0\xa0if num >= 10 {\n      \xa0\xa0\xa0\xa0fmt.Println(""Num is more than 10."")\n      \xa0\xa0\xa0\xa0if num > 15 {\n      \xa0\xa0\xa0\xa0\xa0\xa0fmt.Println(""Num is also more than 15."")\n      \xa0\xa0\xa0\xa0\xa0}\n      \xa0\xa0} else {\n      \xa0\xa0\xa0\xa0fmt.Println(""Num is less than 10."")\n      \xa0\xa0}\n    }\n  ']",[],[]
36,['Go switch Statement'],"['The switch Statement', 'Single-Case switch Syntax', 'Single-Case switch Example', 'The default Keyword', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_nested_if.php', 'https://www.w3schools.com/go/go_switch_multi.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_switch1', 'https://www.w3schools.com/go/trygo.php?filename=demo_switch2', 'https://www.w3schools.com/go/trygo.php?filename=demo_switch5', 'https://www.w3schools.com/go/exercise.php?filename=exercise_switch1', 'https://www.w3schools.com/go/go_nested_if.php', 'https://www.w3schools.com/go/go_switch_multi.php']",[],"['Use the switch statement to select one of many code blocks to be executed.', 'This is how it works:', 'The example below uses a weekday number to calculate the weekday name:', 'The default keyword specifies some code to run if there is no case match:', 'Insert the missing parts to complete the following switch statement.', 'Start the Exercise']","['All the case values should have the same type as the switch expression. Otherwise, the compiler will raise an error:']","['The switch statement in Go is similar to the ones in C, C++, Java, JavaScript, and PHP. The difference is that it only runs the matched case so it does not need a break statement.']","['\n        switch expression { \n        case x:  \n        \xa0\xa0 // code block  \n        case y:  \n        \xa0\xa0 // code block  \n        case z: \n        ... \n        default: \n        \xa0\xa0 // code block   \n        }    \n      ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0day := 4 \n      \xa0\xa0switch day {\n      \xa0\xa0case 1:\n      \xa0\xa0\xa0\xa0fmt.Println(""Monday"")\n      \xa0\xa0case 2:\n      \xa0\xa0\xa0\xa0fmt.Println(""Tuesday"")\n      \xa0\xa0case 3:\n      \xa0\xa0\xa0\xa0fmt.Println(""Wednesday"")\n      \xa0\xa0case 4:\n      \xa0\xa0\xa0\xa0fmt.Println(""Thursday"")\n      \xa0\xa0case 5:\n      \xa0\xa0\xa0\xa0fmt.Println(""Friday"")\n      \xa0\xa0case 6:\n      \xa0\xa0\xa0\xa0fmt.Println(""Saturday"")\n      \xa0\xa0case 7:\n      \xa0\xa0\xa0\xa0fmt.Println(""Sunday"")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0day := 8 \n      \xa0\xa0switch day {\n      \xa0\xa0case 1:\n      \xa0\xa0\xa0\xa0fmt.Println(""Monday"")\n      \xa0\xa0case 2:\n      \xa0\xa0\xa0\xa0fmt.Println(""Tuesday"")\n      \xa0\xa0case 3:\n      \xa0\xa0\xa0\xa0fmt.Println(""Wednesday"")\n      \xa0\xa0case 4:\n      \xa0\xa0\xa0\xa0fmt.Println(""Thursday"")\n      \xa0\xa0case 5:\n      \xa0\xa0\xa0\xa0fmt.Println(""Friday"")\n      \xa0\xa0case 6:\n      \xa0\xa0\xa0\xa0fmt.Println(""Saturday"")\n      \xa0\xa0case 7:\n      \xa0\xa0\xa0\xa0fmt.Println(""Sunday"")\n      \xa0\xa0default:\n      \xa0\xa0\xa0\xa0fmt.Println(""Not a weekday"")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0a := 3 \n      \xa0\xa0switch a {\n      \xa0\xa0case 1:\n      \xa0\xa0\xa0\xa0fmt.Println(""a is one"")\n      \xa0\xa0case ""b"":\n      \xa0\xa0\xa0\xa0fmt.Println(""a is b"")\n      \xa0\xa0}\n    }\n  ']",[],"['The expression is evaluated once|||The value of the switch expression is compared with the values of each case|||If there is a match, the associated block of code is executed|||The default  keyword is optional. It |||specifies some code to run if there is no case |||match|||']"
37,['Go switch Statement'],"['The switch Statement', 'Single-Case switch Syntax', 'Single-Case switch Example', 'The default Keyword', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_nested_if.php', 'https://www.w3schools.com/go/go_switch_multi.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_switch1', 'https://www.w3schools.com/go/trygo.php?filename=demo_switch2', 'https://www.w3schools.com/go/trygo.php?filename=demo_switch5', 'https://www.w3schools.com/go/exercise.php?filename=exercise_switch1', 'https://www.w3schools.com/go/go_nested_if.php', 'https://www.w3schools.com/go/go_switch_multi.php']",[],"['Use the switch statement to select one of many code blocks to be executed.', 'This is how it works:', 'The example below uses a weekday number to calculate the weekday name:', 'The default keyword specifies some code to run if there is no case match:', 'Insert the missing parts to complete the following switch statement.', 'Start the Exercise']","['All the case values should have the same type as the switch expression. Otherwise, the compiler will raise an error:']","['The switch statement in Go is similar to the ones in C, C++, Java, JavaScript, and PHP. The difference is that it only runs the matched case so it does not need a break statement.']","['\n        switch expression { \n        case x:  \n        \xa0\xa0 // code block  \n        case y:  \n        \xa0\xa0 // code block  \n        case z: \n        ... \n        default: \n        \xa0\xa0 // code block   \n        }    \n      ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0day := 4 \n      \xa0\xa0switch day {\n      \xa0\xa0case 1:\n      \xa0\xa0\xa0\xa0fmt.Println(""Monday"")\n      \xa0\xa0case 2:\n      \xa0\xa0\xa0\xa0fmt.Println(""Tuesday"")\n      \xa0\xa0case 3:\n      \xa0\xa0\xa0\xa0fmt.Println(""Wednesday"")\n      \xa0\xa0case 4:\n      \xa0\xa0\xa0\xa0fmt.Println(""Thursday"")\n      \xa0\xa0case 5:\n      \xa0\xa0\xa0\xa0fmt.Println(""Friday"")\n      \xa0\xa0case 6:\n      \xa0\xa0\xa0\xa0fmt.Println(""Saturday"")\n      \xa0\xa0case 7:\n      \xa0\xa0\xa0\xa0fmt.Println(""Sunday"")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0day := 8 \n      \xa0\xa0switch day {\n      \xa0\xa0case 1:\n      \xa0\xa0\xa0\xa0fmt.Println(""Monday"")\n      \xa0\xa0case 2:\n      \xa0\xa0\xa0\xa0fmt.Println(""Tuesday"")\n      \xa0\xa0case 3:\n      \xa0\xa0\xa0\xa0fmt.Println(""Wednesday"")\n      \xa0\xa0case 4:\n      \xa0\xa0\xa0\xa0fmt.Println(""Thursday"")\n      \xa0\xa0case 5:\n      \xa0\xa0\xa0\xa0fmt.Println(""Friday"")\n      \xa0\xa0case 6:\n      \xa0\xa0\xa0\xa0fmt.Println(""Saturday"")\n      \xa0\xa0case 7:\n      \xa0\xa0\xa0\xa0fmt.Println(""Sunday"")\n      \xa0\xa0default:\n      \xa0\xa0\xa0\xa0fmt.Println(""Not a weekday"")\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0a := 3 \n      \xa0\xa0switch a {\n      \xa0\xa0case 1:\n      \xa0\xa0\xa0\xa0fmt.Println(""a is one"")\n      \xa0\xa0case ""b"":\n      \xa0\xa0\xa0\xa0fmt.Println(""a is b"")\n      \xa0\xa0}\n    }\n  ']",[],"['The expression is evaluated once|||The value of the switch expression is compared with the values of each case|||If there is a match, the associated block of code is executed|||The default  keyword is optional. It |||specifies some code to run if there is no case |||match|||']"
38,['Go Multi-case switch Statement'],"['The Multi-case switch Statement', 'Multi-case switch Example']","['Syntax', 'Example']","['https://www.w3schools.com/go/go_switch.php', 'https://www.w3schools.com/go/go_loops.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_switch6', 'https://www.w3schools.com/go/go_switch.php', 'https://www.w3schools.com/go/go_loops.php']",[],"['It is possible to have multiple values for each case in the switch statement:', 'The example below uses the weekday number to return different text:']",[],[],"['\n        switch expression { \n        case x,y:  \n        \xa0\xa0 // code block if expression is evaluated to x or y  \n        case v,w:  \n        \xa0\xa0 // code block if expression is evaluated to v or w  \n        case z: \n        ... \n        default: \n        \xa0\xa0 // code block if expression is not found in any cases   \n        }    \n      ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0 day := 5 \n      \xa0\xa0 switch day {\n      \xa0\xa0 case 1,3,5:\n      \xa0\xa0\xa0\xa0fmt.Println(""Odd weekday"")\n      \xa0\xa0 case 2,4:\n      \xa0\xa0\xa0\xa0 fmt.Println(""Even weekday"")\n      \xa0\xa0 case 6,7:\n      \xa0\xa0\xa0\xa0fmt.Println(""Weekend"")\n      \xa0\xa0default:\n      \xa0\xa0\xa0\xa0fmt.Println(""Invalid day of day number"")\n      \xa0 }\n    }\n  ']",[],[]
39,['Go For Loops'],"['Go for Loop', 'for Loop Examples', 'The continue Statement', 'The break Statement', 'Nested Loops', 'The Range Keyword', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Example 1', 'Example 2', 'Example', 'Example', 'Example', 'Syntax', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_switch_multi.php', 'https://www.w3schools.com/go/go_functions.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_for1', 'https://www.w3schools.com/go/trygo.php?filename=demo_for5', 'https://www.w3schools.com/go/trygo.php?filename=demo_for2', 'https://www.w3schools.com/go/trygo.php?filename=demo_for3', 'https://www.w3schools.com/go/trygo.php?filename=demo_for4', 'https://www.w3schools.com/go/trygo.php?filename=demo_for6', 'https://www.w3schools.com/go/trygo.php?filename=demo_for7', 'https://www.w3schools.com/go/trygo.php?filename=demo_for8', 'https://www.w3schools.com/go/exercise.php?filename=exercise_loops1', 'https://www.w3schools.com/go/go_switch_multi.php', 'https://www.w3schools.com/go/go_functions.php']",[],"['The for loop loops through a block of code a specified number of times.', 'The for loop is the only loop available in Go.', 'Each execution of a loop is called an iteration.', 'The for loop can take up to three statements:', 'statement1 Initializes the loop counter value.', 'statement3 Increases the loop counter value.', 'This example will print the numbers from 0 to 4:\xa0\xa0', 'This example counts to 100 by tens:\xa0', 'This example skips the value of 3:', 'The break statement is used to break/terminate the loop execution.', 'This example breaks out of the loop when i is equal to 3:', 'Note: continue and break are usually used with conditions.', 'It is possible to place a loop inside another loop.', 'The range keyword is used like this:', 'Print i as long as i is less than 6.', 'Start the Exercise']","['Loops are handy if you want to run the same code over and over again, each time with a different value.', 'Here, the ""inner loop"" will be executed one time for each iteration of the ""outer loop"":', 'The range keyword is used to more easily iterate over an array, slice or map. It returns both the index and the value.', 'Tip: To only show the value or the index, you can omit the other output using an underscore (_).', 'Here, we want to omit the indexes (idx   stores the index, val stores the value):', 'Here, we want to omit the values (idx   stores the index, val stores the value):']","['statement2 Evaluated for each loop iteration. If it evaluates to TRUE, the loop continues. If it evaluates to FALSE, the loop ends.', ""Note: These statements don't need to be present as loops arguments. However, they need to be present in the code in some form."", 'The continue statement is used to skip one or more iterations in the loop. It then continues with the next iteration in the loop.', 'This example uses range to iterate over an   array and print both the indexes and the values at each (idx   stores the index, val stores the value):']","['\n        for  statement1; statement2; statement3 { \n        \xa0\xa0 // code to be executed for each iteration  \n        }\n      ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0for i:=0; i < 5; i++ {\n      \xa0\xa0\xa0\xa0fmt.Println(i)\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0for i:=0; i <= 100; i+=10 {\n      \xa0\xa0\xa0\xa0fmt.Println(i)\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0 for i:=0; i < 5; i++ {\n      \xa0\xa0\xa0\xa0if i == 3 {\n      \xa0\xa0\xa0\xa0\xa0\xa0continue  \n      \xa0\xa0\xa0\xa0}\n      \xa0\xa0\xa0fmt.Println(i)\n      \xa0\xa0}\n    }\n', '\n    package main\n    import (""fmt"")\n\n    func main() { \n      \xa0\xa0for i:=0; i < 5; i++ {\n      \xa0\xa0\xa0\xa0if i == 3 {\n      \xa0\xa0\xa0\xa0\xa0\xa0break  \n      \xa0\xa0\xa0\xa0}\n      \xa0\xa0\xa0fmt.Println(i)\n      \xa0\xa0}\n    }\n', '\n    package main\n    import (""fmt"")\n\n    func main() {\n      \xa0\xa0adj := [2]string{""big"", ""tasty""}\n      \xa0\xa0fruits := [3]string{""apple"", ""orange"", ""banana""}\n      \xa0\xa0for i:=0; i < len(adj); i++ {\n      \xa0\xa0\xa0\xa0for j:=0; j < len(fruits); j++ {\n      \xa0\xa0\xa0\xa0\xa0\xa0fmt.Println(adj[i],fruits[j])\n      \xa0\xa0\xa0\xa0}\n      \xa0\xa0}\n    }\n  ', '\n        for  index, value := array|slice|map  {\n        \xa0\xa0 // code to be executed for each iteration  \n        }\n      ', '\n    package main\n    import (""fmt"")\n\n    func main() {\n      \xa0\xa0fruits := [3]string{""apple"", ""orange"", ""banana""}\xa0\xa0for \n    idx, val := range fruits {\n      \xa0\xa0\xa0\xa0\xa0fmt.Printf(""%v\\t%v\\n"", idx, val)\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() {\n      \xa0\xa0fruits := [3]string{""apple"", ""orange"", ""banana""}\xa0\xa0for _, \n    val := range fruits {\n      \xa0\xa0\xa0\xa0\xa0fmt.Printf(""%v\\n"", val)\n      \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n\n    func main() {\n      \xa0\xa0fruits := [3]string{""apple"", ""orange"", ""banana""}\n      \xa0\xa0for idx, _ := range fruits {\n      \xa0\xa0\xa0\xa0\xa0fmt.Printf(""%v\\n"", idx)\n      \xa0\xa0}\n    }\n  ']",[],"['i:=0; - Initialize the loop counter (i), and set the start value to 0|||i < 5; - Continue the loop as long as i is less than 5|||i++ - Increase the loop counter value by 1 for each iteration|||i:=0; - Initialize the loop counter (i), and set the start value to 0|||i <= 100; - Continue the loop as long as i is less than or equal to 100|||i+=10 - Increase the loop counter value by 10 for each iteration|||']"
40,['Go Functions'],"['Create a Function', 'Call a Function', 'Naming Rules for Go Functions', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Example', 'Example']","['https://www.w3schools.com/go/go_loops.php', 'https://www.w3schools.com/go/go_function_parameters.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_func1', 'https://www.w3schools.com/go/trygo.php?filename=demo_func11', 'https://www.w3schools.com/go/go_multi_variable_declaration.php', 'https://www.w3schools.com/go/exercise.php?filename=exercise_functions1', 'https://www.w3schools.com/go/go_loops.php', 'https://www.w3schools.com/go/go_function_parameters.php']",[],"['A function is a block of statements that can be used repeatedly in a program.', 'A function will not execute automatically when a page loads.', 'A function will be executed by a call to the function.', 'To create (often referred to as declare) a function, do the following:', 'A function can be called multiple times.', 'Tip: Give the function a name that reflects what the function does!', 'Create a function named myFunction and call it inside main().', 'Start the Exercise']","['Functions are not executed immediately. They are ""saved for later use"", and will be executed when they are called.']","['In the example below, we create a function named ""myMessage()"". The opening curly brace ( { ) indicates the beginning of the function code, and the closing curly brace ( } ) indicates the end of the function. The function outputs ""I just got executed!"". To call the function, just write its name followed by two parentheses ():']","['\n        func FunctionName() {\n        \xa0\xa0// code to be executed \n        } \n', '\n      package main\n      import (""fmt"")\nfunc myMessage() { \n      \xa0\xa0fmt.Println(""I just got executed!"")\n      } \n      \n      func main() {\n      \xa0\xa0myMessage() // call the function\n      }\n  ', '\n      package main\n      import (""fmt"")\nfunc FunctionName() { \n      \xa0\xa0fmt.Println(""I just got executed!"")\n      } \n      \n      func main() {\n      \xa0\xa0myMessage()\n      \xa0\xa0myMessage()\n      \xa0\xa0myMessage()\n      }\n  ']",[],"['Use the func keyword.|||Specify a name for the function, followed by parentheses ().|||Finally, add code that defines what the function should do, inside curly |||braces {}.|||A function name must start with a letter|||A function name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ |||  )|||Function names are case-sensitive|||A function name cannot contain spaces|||If the function name consists of multiple words, techniques introduced for multi-word variable naming |||  can be used|||']"
41,['Go Functions'],"['Create a Function', 'Call a Function', 'Naming Rules for Go Functions', 'Go Exercises', 'Test Yourself With Exercises', 'Exercise:']","['Syntax', 'Example', 'Example']","['https://www.w3schools.com/go/go_loops.php', 'https://www.w3schools.com/go/go_function_parameters.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_func1', 'https://www.w3schools.com/go/trygo.php?filename=demo_func11', 'https://www.w3schools.com/go/go_multi_variable_declaration.php', 'https://www.w3schools.com/go/exercise.php?filename=exercise_functions1', 'https://www.w3schools.com/go/go_loops.php', 'https://www.w3schools.com/go/go_function_parameters.php']",[],"['A function is a block of statements that can be used repeatedly in a program.', 'A function will not execute automatically when a page loads.', 'A function will be executed by a call to the function.', 'To create (often referred to as declare) a function, do the following:', 'A function can be called multiple times.', 'Tip: Give the function a name that reflects what the function does!', 'Create a function named myFunction and call it inside main().', 'Start the Exercise']","['Functions are not executed immediately. They are ""saved for later use"", and will be executed when they are called.']","['In the example below, we create a function named ""myMessage()"". The opening curly brace ( { ) indicates the beginning of the function code, and the closing curly brace ( } ) indicates the end of the function. The function outputs ""I just got executed!"". To call the function, just write its name followed by two parentheses ():']","['\n        func FunctionName() {\n        \xa0\xa0// code to be executed \n        } \n', '\n      package main\n      import (""fmt"")\nfunc myMessage() { \n      \xa0\xa0fmt.Println(""I just got executed!"")\n      } \n      \n      func main() {\n      \xa0\xa0myMessage() // call the function\n      }\n  ', '\n      package main\n      import (""fmt"")\nfunc FunctionName() { \n      \xa0\xa0fmt.Println(""I just got executed!"")\n      } \n      \n      func main() {\n      \xa0\xa0myMessage()\n      \xa0\xa0myMessage()\n      \xa0\xa0myMessage()\n      }\n  ']",[],"['Use the func keyword.|||Specify a name for the function, followed by parentheses ().|||Finally, add code that defines what the function should do, inside curly |||braces {}.|||A function name must start with a letter|||A function name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ |||  )|||Function names are case-sensitive|||A function name cannot contain spaces|||If the function name consists of multiple words, techniques introduced for multi-word variable naming |||  can be used|||']"
42,['Go Function Parameters and Arguments'],"['Parameters and Arguments', 'Function With Parameter Example', 'Multiple Parameters']","['Syntax', 'Example', 'Example']","['https://www.w3schools.com/go/go_functions.php', 'https://www.w3schools.com/go/go_function_returns.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_func2', 'https://www.w3schools.com/go/trygo.php?filename=demo_func3', 'https://www.w3schools.com/go/go_functions.php', 'https://www.w3schools.com/go/go_function_returns.php']",[],"['Inside the function, you can add as many parameters as you want:']",['Information can be passed to functions as a parameter. Parameters act as variables inside the function.'],"['Parameters and their types are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma:', 'The following example has a function with one parameter (fname) of type string. When the familyName() function is called, we also pass along a name (e.g. Liam), and the name is used inside the function, which outputs several different first names, but an equal last name:', 'Note: When a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments.', 'Note: When you are working with multiple parameters, the function call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.']","['\n        func FunctionName(param1 type, param2\ntype, param3 type) {\n        \xa0\xa0// code to be executed \n        } \n', '\n      package main\n      import (""fmt"")\n\n      func familyName(fname string) { \n      \xa0\xa0fmt.Println(""Hello"", fname, ""Refsnes"")\n      } \n      \n      func main() {\n      \xa0\xa0familyName(""Liam"")\n      \xa0\xa0familyName(""Jenny"")\n      \xa0\xa0familyName(""Anja"")\n      }\n  ', '\n      package main\n      import (""fmt"")\nfunc familyName(fname string, age int) { \n      \xa0\xa0fmt.Println(""Hello"", age, ""year old"", fname, ""Refsnes"")\n      } \n      \n      func main() {\n      \xa0\xa0familyName(""Liam"", 3)\n      \xa0\xa0familyName(""Jenny"", 14)\n      \xa0\xa0familyName(""Anja"", 30)\n      }\n  ']",[],[]
43,['Go Function Returns'],"['Return Values', 'Function Return Example', 'Named Return Values', 'Store the Return Value in a Variable', 'Multiple Return Values']","['Syntax', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_function_parameters.php', 'https://www.w3schools.com/go/go_function_recursion.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_func4', 'https://www.w3schools.com/go/trygo.php?filename=demo_func5', 'https://www.w3schools.com/go/trygo.php?filename=demo_func6', 'https://www.w3schools.com/go/trygo.php?filename=demo_func7', 'https://www.w3schools.com/go/trygo.php?filename=demo_func8', 'https://www.w3schools.com/go/trygo.php?filename=demo_func9', 'https://www.w3schools.com/go/trygo.php?filename=demo_func13', 'https://www.w3schools.com/go/go_function_parameters.php', 'https://www.w3schools.com/go/go_function_recursion.php']",[],"['In Go, you can name the return values of a function.', 'You can also store the return value in a variable, like this:', 'Here, we store the return value in a variable called   total:', 'Go functions can also return multiple values.', 'Here, myFunction()  returns one integer (result) and one string (txt1):', 'Here, we store the two return values into two variables (a and b):']","['Here, myFunction() receives two integers (x and y) and returns their addition (x + y) as integer   (int):', 'The example above can also be written like this. Here, the return statement specifies the variable name:', 'Here, we want to omit the first returned value (result - which is stored in variable a):', 'Here, we want to omit the second returned value (txt1 - which is stored in variable b):']","['If you want the function to return a value, you need to define the data type of the return value (such as int, string, etc), and also use the return keyword inside the function:', 'Here, we name the return value as result (of type int), and return the value with a naked return (means that we use the return statement without specifying   the variable name):', 'If we (for some reason) do not want to use some of the returned values, we can add an underscore (_), to omit this value.']","['\n        func FunctionName(param1 type, param2\ntype) type {\n        \xa0\xa0// code to be executed \n          \xa0 return output  \n        } \n', '\n      package main\n      import (""fmt"")\n\n      func myFunction(x int, y int) int { \n      \xa0\xa0return x + y\n      } \n      \n      func main() {\n      \xa0\xa0fmt.Println(myFunction(1, 2))\n      }\n  ', '\n      package main\n      import (""fmt"")\nfunc myFunction(x int, y int) (result int) { \n      \xa0\xa0result =  x + y\n      \xa0\xa0return\n      } \n      \n      func main() {\n      \xa0\xa0fmt.Println(myFunction(1, 2))\n      }\n  ', '\n      package main\n      import (""fmt"")\n\n      func myFunction(x int, y int) (result int) { \n      \xa0\xa0result =  x + y\n      \xa0\xa0return result\n      } \n      \n      func main() {\n      \xa0\xa0fmt.Println(myFunction(1, 2))\n      }\n  ', '\n      package main\n      import (""fmt"")\nfunc myFunction(x int, y int) (result int) { \n      \xa0\xa0result =  x + y\n      \xa0\xa0return\n      } \n      \n      func main() {\n      \xa0\xa0total := \n      myFunction(1, 2)\n      \xa0\xa0fmt.Println(total)\n      }\n  ', '\n      package main\n      import (""fmt"")\nfunc myFunction(x int, y string) (result int, txt1 string) { \n      \xa0\xa0result =  x + x\n      \xa0\xa0txt1 =  y + "" World!""\n      \xa0\xa0return\n      } \n      \n      func main() {\n      \xa0\xa0fmt.Println(myFunction(5, ""Hello""))\n      }\n  ', '\n      package main\n      import (""fmt"")\n\n      func myFunction(x int, y string) (result int, txt1 string) {\n      \xa0\xa0result = x + x\n      \xa0\xa0txt1 = y + "" World!""\n      \n      \xa0\xa0return\n      } \n      \n      func main() {\n      \xa0\xa0a, b := myFunction(5, ""Hello"") \n      \xa0\xa0fmt.Println(a, b) \n      }\n  ', '\n      package main\n      import (""fmt"")\nfunc myFunction(x int, y string) (result int, txt1 string) { \n      \xa0\xa0result = x + x\n      \xa0\xa0txt1 = y + "" World!""\n      \n      \xa0\xa0return\n      } \n      \n      func main() {\n      \xa0\xa0 _, b := myFunction(5, ""Hello"")\n      \xa0\xa0fmt.Println(b) \n      }\n  ', '\n      package main\n      import (""fmt"")\nfunc myFunction(x int, y string) (result int, txt1 string) { \n      \xa0\xa0result = x + x\n      \xa0\xa0txt1 = y + "" World!""\n      \n      \xa0\xa0return\n      } \n      \n      func main() {\n      \xa0\xa0 a, _ := myFunction(5, ""Hello"")\n      \xa0\xa0fmt.Println(a) \n      }\n  ']",[],[]
44,['Go Recursion Functions'],['Recursion Functions'],"['Example', 'Example']","['https://www.w3schools.com/go/go_function_returns.php', 'https://www.w3schools.com/go/go_struct.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_func10_1', 'https://www.w3schools.com/go/trygo.php?filename=demo_func10', 'https://www.w3schools.com/go/go_function_returns.php', 'https://www.w3schools.com/go/go_struct.php']",[],[],['Go accepts recursion functions. A function is recursive if it calls itself and reaches a stop condition.'],"['In the following example, testcount() is a function that calls itself. We use the x variable as the data, which increments with 1 (x + 1) every time we recurse. The recursion ends when the x variable equals to 11 (x == 11).\xa0', 'Recursion is a common mathematical and programming concept. This has the benefit of meaning that you can loop through data to reach a result.', 'The developer should be careful with recursion functions as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.', 'In the following example, factorial_recursion() is a function that calls itself. We use the x variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).', 'To a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.']","['\n      package main\n      import (""fmt"")\nfunc testcount(x int) int {\xa0 if x == 11 {\xa0\xa0\xa0 \n      return 0\xa0 }\xa0 fmt.Println(x)\xa0 return testcount(x \n      + 1)}func main(){\xa0 testcount(1)}   ', '\n      package main\n      import (""fmt"")\n\n      func factorial_recursion(x float64) (y float64) { \n      \xa0\xa0if x > 0 {\n      \xa0\xa0\xa0\xa0 y = x * factorial_recursion(x-1)\n      \xa0\xa0} else {\n      \xa0\xa0\xa0\xa0 y = 1 \n      \xa0\xa0} \n      \xa0\xa0return\n      } \n      \n      func main() {\n      \xa0\xa0fmt.Println(factorial_recursion(4))\n      }\n  ']",[],[]
45,['Go Struct'],"['Go Structures', 'Declare a Struct', 'Access Struct Members', 'Pass Struct as Function Arguments']","['Syntax', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_function_recursion.php', 'https://www.w3schools.com/go/go_maps.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_struct1', 'https://www.w3schools.com/go/trygo.php?filename=demo_struct3', 'https://www.w3schools.com/go/go_function_recursion.php', 'https://www.w3schools.com/go/go_maps.php']",[],"['A struct can be useful for grouping data together to create records.', 'To declare a structure in Go, use the type and struct keywords:', 'You can also pass a structure as a function argument, like this:']","['Here we declare a struct type Person   with the following members: name,   age, job and salary:']","['A struct (short for structure) is used to create a collection of members of different data types, into a single variable.', 'While arrays are used to store multiple values of the same data type into a single variable, structs are used to store multiple values of different data types into a single variable.', 'Tip: Notice that the struct members above have different data types. name and job is of type string, while age and salary is of type int.', 'To access any member of a structure, use the dot operator (.) between the structure variable name and the structure member:']","['\n        type struct_name struct {\xa0 member1 \n        datatype;\n        \xa0 member2 datatype;\xa0 member3 \n        datatype;\xa0 ...}', '\n    type Person struct {\xa0 name string\xa0 \n    age int\xa0 job string\xa0 salary int}\n  ', '\n    package main\n    import (""fmt"")type Person struct {\xa0 name string\xa0 \n    age int\xa0 job string\xa0 salary int}\n    func main() {\n    \xa0 var pers1 Person\xa0 var pers2 Person\xa0 // Pers1 \n    specification\xa0 pers1.name = ""Hege""\xa0 \n    pers1.age = 45\xa0 pers1.job = ""Teacher""\xa0 pers1.salary = \n    6000\xa0 // Pers2 specification\xa0 pers2.name = ""Cecilie""\xa0 \n    pers2.age = 24\xa0 pers2.job = ""Marketing""\xa0 pers2.salary = \n    4500\xa0 // Access and print Pers1 info \xa0 \n    fmt.Println(""Name: "", pers1.name)\xa0 fmt.Println(""Age: "", pers1.age)\n    \xa0 fmt.Println(""Job: "", pers1.job)\n    \xa0 fmt.Println(""Salary: "", pers1.salary)\xa0 // \n    Access and print Pers2 info \xa0 \n    fmt.Println(""Name: "", pers2.name)\xa0 fmt.Println(""Age: "", pers2.age)\n    \xa0 fmt.Println(""Job: "", pers2.job)\n    \xa0 fmt.Println(""Salary: "", pers2.salary)}\n  ', '\n    package main\n    import (""fmt"")type Person struct {\xa0 name string\xa0 \n    age int\xa0 job string\xa0 salary int}\n    func main() {\n    \xa0 var pers1 Person\xa0 var pers2 Person\xa0 // Pers1 \n    specification\xa0 pers1.name = ""Hege""\xa0 \n    pers1.age = 45\xa0 pers1.job = ""Teacher""\xa0 pers1.salary = \n    6000\xa0 // Pers2 specification\xa0 pers2.name = ""Cecilie""\xa0 \n    pers2.age = 24\xa0 pers2.job = ""Marketing""\xa0 pers2.salary = \n    4500\xa0 // Print Pers1 info by calling a function\xa0 printPerson(pers1)\n\xa0 // Print Pers2 info by calling a function\xa0 printPerson(pers2)}func printPerson(pers Person) {\n    \xa0 \n    fmt.Println(""Name: "", pers.name)\xa0 fmt.Println(""Age: "", pers.age)\n    \xa0 fmt.Println(""Job: "", pers.job)\n    \xa0 fmt.Println(""Salary: "", pers.salary)}\n  ']",[],[]
46,['Go Maps'],"['Go Maps', 'Creating Maps Using var and :=', 'Creating Maps Using Using make()Function:', 'Creating an Empty Map', 'Allowed Key Types', 'Allowed Value Types', 'Accessing Map Elements', 'Updating and Adding Map Elements ', 'Remove Element from Map', 'Check For Specific Elements in a Map', 'Maps Are References', 'Iterating Over Maps', 'Iterate Over Maps in a Specific Order']","['Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Syntax', 'Example', 'Example', 'Example', 'Example']","['https://www.w3schools.com/go/go_struct.php', 'https://www.w3schools.com/go/go_exercises.php', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps1', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps2', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps3', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps4', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps5', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps6', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps7', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps8', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps10', 'https://www.w3schools.com/go/trygo.php?filename=demo_maps10', 'https://www.w3schools.com/go/go_struct.php', 'https://www.w3schools.com/go/go_exercises.php']",[],"['Maps are used to store data values in key:value pairs.', 'Each element in a map is a key:value pair.', 'A map is an unordered and changeable collection that does not allow duplicates.', 'The default value of a map is nil.', 'Maps hold references to an underlying hash table.', 'Go has multiple ways for creating maps.', 'This example shows how to create maps in Go using the make()function.', 'Invalid key types are:', 'The map values can be any type.', 'You can access map elements by:', 'Updating or adding an elements are done by:', 'This example shows how to update and add elements to a map.', 'Removing elements is done using the delete() function.', 'You can check if a certain key exists in a map using:', 'In this example, we checked for existence of different keys in the map.', 'Maps are references to hash tables.', 'You can use range to iterate over maps.']","['The length of a map is the number of its elements. You can find it using the len() function.', 'This example shows how to create maps in Go. Notice the order in the code and in the output', 'This example shows the difference between declaring an empty map using with the make()function and without it.', 'The map key can be of any data type for which the equality operator (==) is defined. These include:', 'These types are invalid because the equality operator (==) is not defined for them.', 'If you only want to check the existence of a certain key, you can use the blank identifier (_) in place of val.', 'The key ""color"" does not exist in the map. So the value is an empty string (\'\').', 'This example shows how to iterate over the elements in a map. Note the order of the elements in the output.']","['Note: The order of the map elements defined in the code is different from the way that they are stored. The data are stored in a way to have efficient data retrieval from the map.', 'There are two ways to create an empty map. One is by using the make()function and the other is by using the following syntax.', 'Note: The make()function is the right way to create an empty map. If you make an empty map in a different way and write to it, it will causes a runtime panic.', 'The ok2 variable is used to find out if the key exist or not. Because we would have got the same value if the value of the ""color"" key was empty. This is the case for val3.', 'If two map variables refer to the same hash table, changing the content of one variable affect the content of the other.', 'Maps are unordered data structures. If you need to iterate over a map in a specific order, you must have a separate data structure that specifies that order. ']","['\n        var a = map[KeyType]ValueType{key1:value1, key2:value2,...}\nb := map[KeyType]ValueType{key1:value1, key2:value2,...}\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a = map[string]string{""brand"": ""Ford"", ""model"": ""Mustang"", ""year"": ""1964""}\n    \xa0\xa0b := map[string]int{""Oslo"": 1, ""Bergen"": 2, ""Trondheim"": 3, ""Stavanger"": 4}\n\n    \xa0\xa0fmt.Printf(""a\\t%v\\n"", a)\n    \xa0\xa0fmt.Printf(""b\\t%v\\n"", b)\n    }\n  ', '\n    var a = make(map[KeyType]ValueType)\nb := make(map[KeyType]ValueType)\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a = make(map[string]string) // The map is empty now\n    \xa0\xa0a[""brand""] = ""Ford""\n\t  \xa0\xa0a[""model""] = ""Mustang""\n\t  \xa0\xa0a[""year""] = ""1964""\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// a is no longer empty\n    \xa0\xa0b := make(map[string]int)\n    \xa0\xa0b[""Oslo""] = 1\n    \xa0\xa0b[""Bergen""] = 2\n    \xa0\xa0b[""Trondheim""] = 3\n    \xa0\xa0b[""Stavanger""] = 4\n\n    \xa0\xa0fmt.Printf(""a\\t%v\\n"", a)\n    \xa0\xa0fmt.Printf(""b\\t%v\\n"", b)\n    }\n  ', '\n    var a map[KeyType]ValueType\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a = make(map[string]string)\n    \xa0\xa0var b map[string]string \n\n\t  \xa0\xa0fmt.Println(a == nil)\n    \xa0\xa0fmt.Println(b == nil)\n    }\n  ', '\nvalue = map_name[key]\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a = make(map[string]string)\n    \xa0\xa0a[""brand""] = ""Ford""\n\t  \xa0\xa0a[""model""] = ""Mustang""\n\t  \xa0\xa0a[""year""] = ""1964""\n\n    \xa0\xa0fmt.Printf(a[""brand""])\n    }\n  ', '\nmap_name[key] = value\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a = make(map[string]string)\n    \xa0\xa0a[""brand""] = ""Ford""\n\t  \xa0\xa0a[""model""] = ""Mustang""\n\t  \xa0\xa0a[""year""] = ""1964""\n\n    \xa0\xa0fmt.Println(a)\n\n    \xa0\xa0a[""year""] = ""1970"" // Updating an element\n\t  \xa0\xa0a[""color""] = ""red"" // Adding an element\n\n    \xa0\xa0fmt.Println(a)\n    }\n  ', '\n        delete(map_name, key)\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a = make(map[string]string)\n    \xa0\xa0a[""brand""] = ""Ford""\n\t  \xa0\xa0a[""model""] = ""Mustang""\n\t  \xa0\xa0a[""year""] = ""1964""\n\n    \xa0\xa0fmt.Println(a)\n\n    \xa0\xa0delete(a,""year"")\n\n    \xa0\xa0fmt.Println(a)\n    }\n  ', '\nval, ok :=map_name[key]\n', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a = map[string]string{""brand"": ""Ford"", ""model"": ""Mustang"", ""year"": ""1964"", ""day"":""""}\n\n    \xa0\xa0val1, ok1 := a[""brand""]\xa0// Checking for existing key and its value\n    \xa0\xa0val2, ok2 := a[""color""]\xa0// Checking for non-existing key and its value\n    \xa0\xa0val3, ok3 := a[""day""]\xa0\xa0\xa0// Checking for existing key and its value\n    \xa0\xa0_, ok4 := a[""model""]\xa0\xa0\xa0\xa0// Only checking for existing key and not its value\n\n    \xa0\xa0fmt.Println(val1, ok1)\n    \xa0\xa0fmt.Println(val2, ok2)\n    \xa0\xa0fmt.Println(val3, ok3)\n    \xa0\xa0fmt.Println(ok4)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0var a = map[string]string{""brand"": ""Ford"", ""model"": ""Mustang"", ""year"": ""1964""}\n    \xa0\xa0b := a \n\n    \xa0\xa0fmt.Println(a)\n\t  \xa0\xa0fmt.Println(b)\n\n    \xa0\xa0b[""year""] = ""1970""\n    \xa0\xa0fmt.Println(""After change to b:"")\n\n    \xa0\xa0fmt.Println(a)\n    \xa0\xa0fmt.Println(b)\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0a := map[string]int{""one"": 1, ""two"": 2, ""three"": 3, ""four"": 4}\n    \xa0\xa0for k, v := range a {\n    \xa0\xa0\xa0\xa0fmt.Printf(""%v : %v, "", k, v)\n    \xa0\xa0}\n    }\n  ', '\n    package main\n    import (""fmt"")\n    func main() {\n    \xa0\xa0a := map[string]int{""one"": 1, ""two"": 2, ""three"": 3, ""four"": 4}\n    \xa0\xa0var b = []string\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// defining the order\n    \xa0\xa0b = append(b, ""one"", ""two"", ""three"", ""four"")\n\n    \xa0\xa0for k, v := range a {\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// loop with no order\n    \xa0\xa0\xa0\xa0fmt.Printf(""%v : %v, "", k, v)\n    \xa0\xa0}\n\n    \xa0\xa0fmt.Println()\n\n    \xa0\xa0for _, element := range b {\xa0\xa0// loop with the defined order\n    \xa0\xa0\xa0\xa0fmt.Printf(""%v : %v, "", element, a[element])\n    \xa0\xa0}\n    }\n  ']",[],['Booleans|||Numbers|||Strings|||Arrays|||Pointers|||Structs|||Interfaces (as long as the dynamic type supports equality)|||Slices|||Maps|||Functions|||']
47,['Go Exercises'],"['Exercises', 'Count Your Score', 'Start Go Exercises']",[],"['https://www.w3schools.com/go/go_maps.php', 'https://www.w3schools.com/go/go_compiler.php', 'https://www.w3schools.com/go/exercise.php?filename=exercise_syntax1', 'https://www.w3schools.com/go/index.php', 'https://www.w3schools.com/go/go_maps.php', 'https://www.w3schools.com/go/go_compiler.php']",[],"[""You can test your Go skills with W3Schools' Exercises."", 'We have gathered a variety of Go exercises (with answers) for each Go Chapter.', 'Good luck!', 'Start Go Exercises ❯', ""If you don't know Go, we suggest that you read our Go   Tutorial from scratch.""]","[""Try to solve an exercise by editing some code, or show the answer to see what you've done wrong."", 'You will get 1 point foreach correct answer. Your score and total score will always be displayed.']",[],[],[],[]
48,['Go Compiler'],"['Go Compiler (Editor)', 'Go Compiler Explained']",['Example'],"['https://www.w3schools.com/go/go_exercises.php', 'https://www.w3schools.com/go/index.php', 'https://www.w3schools.com/go/javascript:void(0);', 'https://www.w3schools.com/go/javascript:void(0);', 'https://www.w3schools.com/go/javascript:void(0);', 'https://www.w3schools.com/go/javascript:void(0);', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld', 'https://www.w3schools.com/go/trygo.php?filename=demo_helloworld', 'https://www.w3schools.com/go/index.php', 'https://www.w3schools.com/go/go_exercises.php', 'https://www.w3schools.com/go/index.php']",[],"['Click on the ""Try it Yourself"" button to see how it works.', 'The icons are explained in the table below:', ""If you don't know Go,  we suggest that you read our Go Tutorial from scratch.""]","['With our online Go compiler, you can edit Go code, and view the result in your browser.']","['The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.']","['\n    package mainimport (""fmt"")func main() {\xa0 \n    fmt.Println(""Hello World!"")}\n']",['Icon|||Description&&&|||Go to www.w3schools.com&&&|||Menu button for more options&&&|||Change orientation (horizontally or vertically)&&&|||Change color theme (dark or light)'],[]
