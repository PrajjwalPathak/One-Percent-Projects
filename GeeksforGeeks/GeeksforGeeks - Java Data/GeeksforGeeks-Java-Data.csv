,main_headings,sub_headings_h2,sub_headings_h3,image_urls,video_urls,links,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['Introduction to Java'],['Java'],"['History', 'Java programming language is named JAVA. Why?', 'Java Terminology', 'Primary/Main Features of Java']",[],[],"['https://www.geeksforgeeks.org/basic/', 'https://www.geeksforgeeks.org/java/', 'https://www.geeksforgeeks.org/jvm-works-jvm-architecture/#:~:text=JVM(Java%20Virtual%20Machine)%20acts,(Write%20Once%20Run%20Anywhere).', 'https://www.geeksforgeeks.org/javap-tool-in-java-with-examples/', 'https://www.geeksforgeeks.org/garbage-collection-java/', 'https://www.geeksforgeeks.org/classpath-in-java/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Before learning Java, one must be familiar with these common terms of Java.', 'The four main concepts of Object-Oriented programming are:', 'Explanation:', 'Single line Comments:Syntax:', 'Multi-line comments:Syntax:', 'Everything in java , is represented in Class as an object including the main function.']","['JAVA was developed by James Gosling at Sun Microsystems Inc in the year 1991,\xa0later acquired by Oracle Corporation. It is a simple programming language. Java makes writing, compiling, and debugging programming easy.\xa0It helps to create reusable code and modular programs.', 'In 1997, Sun Microsystems approached the ISO standards body and later formalized Java, but it soon withdrew from the process. At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System.', 'On November 13, 2006, Sun released much of its Java virtual machine as free, open-source software. On May 8, 2007, Sun finished the process, making all of its JVM’s core code available under open-source distribution terms.', 'The principles for creating java were simple, robust, secured, high performance, portable, multi-threaded, interpreted, dynamic, etc. James Gosling in 1995 developed Java, who is known as the Father of Java. Currently, Java is used in mobile devices, internet programming, games, e-business, etc.', 'After the name OAK, the team decided to give a new name to it and the suggested words were Silk, Jolt, revolutionary, DNA, dynamic, etc. These all names were easy to spell and fun to say, but they all wanted the name to reflect the essence of technology. In accordance with James Gosling, Java the among the top names along with Silk, and since java was a unique name so most of them preferred it.', 'Java is the name of an island in Indonesia where the first coffee(named java coffee) was produced. And this name was chosen by James Gosling while having coffee near his office. Note that Java is just a name, not an acronym.', '1. \xa0Java Virtual Machine(JVM):\xa0 This is generally referred to as JVM. There are three execution phases of a program. They are written, compile and run the program.', 'Now, we understood that the function of Java Virtual Machine is to execute the bytecode produced by the compiler. Every Operating System has a different JVM but the output they produce after the execution of bytecode is the same across all the operating systems. This is why Java is known as a platform-independent language.', '2. Bytecode in the Development process: \xa0As discussed, the Javac compiler of JDK compiles the java source code into bytecode so that it can be executed by JVM. It is saved as .class file by the compiler. To view the bytecode, a disassembler like javap can be used.', '4. Java Runtime Environment (JRE): JDK includes JRE. JRE installation on our computers allows the java program to run, however, we cannot compile it. JRE includes a browser, JVM, applet supports, and plugins. For running the java program, a computer needs JRE.', '6. ClassPath: The classpath is the file path where the java runtime and Java compiler look for .class files to load. By default, JDK provides many libraries. If you want to include external libraries they should be added to the classpath.', '2. Object-Oriented Programming Language: \xa0Organizing the program in the terms of collection of objects is a way of object-oriented programming, each of which represents an instance of the class.', '3. Simple: \xa0Java is one of the simple languages as it does not have complex features like pointers, operator overloading, multiple inheritances, Explicit memory allocation.\xa0', '4. Robust: \xa0Java language is robust that means reliable. It is developed in such a way that it puts a lot of effort into checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language. The main features of java that make it robust are garbage collection, Exception Handling, and memory allocation.', '5. Secure:\xa0 In java, we don’t have pointers, and so we cannot access out-of-bound arrays i.e it shows ArrayIndexOutOfBound Exception if we try to do so. That’s why several security flaws like stack corruption or buffer overflow is impossible to exploit in Java. \xa0 \xa0 \xa0', '6. Distributed: \xa0We can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected to each other through an internet connection.', '7. Multithreading: \xa0Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU.', '8. Portable: \xa0As we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable.', '9. High Performance: Java architecture is defined in such a way that it reduces overhead during the runtime and at some time java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications to execute faster.', '10. Dynamic flexibility: Java being completely object-oriented gives us the flexibility to add classes, \xa0new methods to existing classes and even creating new classes through sub-classes. Java even supports functions written in other languages such as C, C++ which are referred to as native methods.', '11. Sandbox Execution: Java programs run in a separate space that allows user to execute their applications without affecting the underlying system with help of a bytecode verifier. Bytecode verifier also provides additional security as it’s role is to check the code for any violation access.', '12. Write Once Run Anywhere: As discussed above java application generates ‘.class’ file which corresponds to our applications(program) but contains code in binary format. It provides ease t architecture-neutral ease as bytecode is not dependent on any machine architecture. It is the primary reason java is used in the enterprising IT industry globally worldwide.', '13. Power of compilation and interpretation: Most languages are designed with purpose either they are compiled language or they are interpreted language. But java integrates arising enormous power as Java compiler compiles the source code to bytecode and JVM \xa0executes this bytecode to machine OS-dependent executable code.', '1. \xa0Comments: Comments are used for explaining code and are used in a similar manner in Java or C or C++. Compilers ignore the comment entries and do not execute them. Comments can be of a single line or multiple lines.', '2. \xa0import java.io.*: This means all the classes of io package can be imported. Java io package provides a set of input and output streams for reading and writing data to files or other input or output sources.', '3. \xa0class: The class contains the data and methods to be used in the program. Methods define the behavior of the class. Class GFG has only one method Main in JAVA.', '4. \xa0static void Main(): static keyword tells us that this method is accessible without instantiating the class.\xa0', '5. \xa0void: keywords tell that this method will not return anything. The main() method is the entry point of our application.', '6. \xa0System.in: This is the standard input stream that is used to read characters from the keyboard or any other standard input device.', '7. \xa0System.out: This is the standard output stream that is used to produce the result of a program on an output device like the computer screen.', '8. \xa0println(): This method in Java is also used to display text on the console. It prints the text on the console and the cursor moves to the start of the next line at the console. The next printing takes place from the next line.']","['Java is a class-based, object-oriented programming language and is designed to have as few implementation dependencies as possible. A general-purpose programming language made for developers to write once run anywhere that is compiled Java code can run on all platforms that support Java. Java applications are compiled to byte code that can run on any Java Virtual Machine. The syntax of Java is similar to c/c++.', 'Java’s history is very interesting. It is a programming language created in 1991. James Gosling, Mike Sheridan, and Patrick Naughton, a team of Sun engineers known as the Green team initiated the Java language in 1991. Sun Microsystems released its first public implementation in 1996 as Java 1.0. It provides no-cost -run-times on popular platforms. Java1.0 compiler was re-written in Java by Arthur Van Hoff to strictly comply with its specifications. With the arrival of Java 2, new versions had multiple configurations built for different types of platforms.', '3. Java Development Kit(JDK): While we were using the term JDK, when we learn about bytecode and JVM . So, as the name suggests, it is a complete Java development kit that includes everything including compiler, Java Runtime Environment (JRE), java debuggers, java docs, etc. For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program.', '5. Garbage Collector: In Java, programmers can’t delete the objects. To delete or recollect that memory JVM has a program called Garbage Collector. Garbage Collectors can recollect the of objects that are not referenced. So Java makes the life of a programmer easy by handling memory management. However, programmers should be careful about their code whether they are using objects that have been used for a long time. Because Garbage cannot recover the memory of objects being referenced.', '1. Platform Independent: \xa0Compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. This bytecode can run on any platform be it Windows, Linux, macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of bytecode. That is why we call java a platform-independent language.']","['// Demo Java program // Importing classes from packagesimport java.io.*; // Main classpublic class GFG {     // Main driver method    public static void main(String[] args)    {         // Print statement        System.out.println(""Welcone to GeeksforGeeks"");    }}']","['Welcone to GeeksforGeeks', '// Single line comment', '/* Multi line comments*/']",[],"['Writing a program is done by a java programmer like you and me.|||The compilation is done by the JAVAC compiler which is a primary Java compiler included in the Java development kit (JDK). It takes Java program as input and generates bytecode as output.|||In the Running phase of a program, JVM executes the bytecode generated by the compiler.&&&Abstraction|||Encapsulation|||Inheritance|||Polymorphism']"
1,['Setting up the environment in Java'],[],"['A. Windows operating systems', 'B. Linux Operating System', 'C. MacOS Operating System']","['https://media.geeksforgeeks.org/wp-content/uploads/20210218150010/JDK.png', 'https://media.geeksforgeeks.org/wp-content/uploads/Capture9.png', 'https://media.geeksforgeeks.org/wp-content/uploads/Capture10.png', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/Capture-1.png', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/Capture-2.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210916092210/Screenshot20210916at91714AM.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210916094848/Screenshot20210916at94827AM.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210916095602/Screenshot20210916at95528AM.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210916100150/Screenshot20210916at100134AM.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210916101632/Screenshot20210916at101617AM.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210916102219/Screenshot20210916at102149AM.png']",[],"['https://www.geeksforgeeks.org/basic/', 'https://www.geeksforgeeks.org/difference-between-byte-code-and-machine-code/', 'http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html', 'https://www.eclipse.org/downloads/', 'https://brew.sh/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Steps: Here we will be proposing steps for three different operating systems as listed:', 'Steps for setting the environment in Windows operation system are as follows:\xa0', 'Step 1: Go to Application -> Accessories -> Terminal.', 'Step 2: Type command as below as follows:', 'Note: We are done setting up the environment in Java for Linux OS.', 'If it is showing blank then the java home variable is not set up as perceived from the above image.', 'Step 4: Installing bash_profile\xa0', 'Make sure to go to the root folder in the terminal and write the command ‘touch ./bash_profile ‘', 'Save this file and relaunch the terminal by closing it.\xa0', '\xa0Step 5: Verifying whether it is installed by entering the following two commands\xa0']","['Now let us discuss the steps for setting up a Java environment with visual aids. Let be operating system be windows to illustrate visual aids.', 'Step 1: Java8 JDK is available at Download Java 8.\xa0Click the second last link for Windows(32 bit) and the last link for Windows(64 bit) as highlighted below.\xa0\xa0', 'Step 2: After download, run the .exe file and follow the instructions to install Java on your machine. Once you installed Java on your machine, you have to set up the environment variable.', 'Step 3: Go to Control Panel -> System and Security -> System.\xa0Under the Advanced System Setting option click on Environment Variables as highlighted below.\xa0\xa0', 'Step 4: Now, you have to alter the “Path” variable under System variables so that it also contains the path to the Java environment. Select the “Path” variable and click on the Edit button as highlighted below.\xa0\xa0', 'Step 5: You will see a list of different paths, click on the New button, and then add the path where java is installed. By default, java is installed in “C:\\Program Files\\Java\\jdk\\bin” folder OR “C:\\Program Files(x86)\\Java\\jdk\\bin”. In case, you have installed java at any other location, then add that path.\xa0', 'Step 6: Click on OK, Save the settings, and you are done !! Now to check whether the installation is done correctly, open the command prompt and type javac -version. You will see that java is running on your machine.', 'Note: To make sure whether the compiler is set up, type javac in the command prompt. You will see a list related to javac.', 'In Linux, there are several ways to install java. But we will refer to the simplest and easy way to install java using a terminal. For Linux, we will install OpenJDK. OpenJDK is a free and open-source implementation of the Java programming language. Steps for setting the environment in the Linux operation system are as follows:\xa0', 'Step 3: For the “JAVA_HOME” (Environment Variable) type command as shown below, in “Terminal” using your installation path…(Note: the default path is as shown, but if you have to install OpenJDK at another location then set that path.)\xa0', 'Step 4: For “PATH” (Environment Value) type command as shown below, in “Terminal” using your installation path…Note: the default path is as shown, but if you have to install OpenJDK at another location then set that path.)\xa0', 'Note: Now to check whether the installation is done correctly, type java -version in the Terminal. You will see that java is running on your machine.', 'Step 1: Open the terminal from the application folder or simply press “command” and “shilft” key together and write initials of terminal as press enter. \xa0', 'It will be goof to have package manager such as hombrew installed in your machine as we can operate to install any software from here itself simply by using terminal commands.', 'Step 2: Now in order to configure first write the command ‘java –version ‘ where the message below it will pop that there is no \xa0\xa0', 'Note: If it was set up then you would have been getting the version displayed on the screen as it is shown below where in that machine it was already set up. So remember to cross-check in your machine once you have successfully set up in yours.', 'Step 2: Once we are done with installing JDK now let us move on setting up the java home environment variable for that you will have to look into something called s ‘bash_profie’ using the below command', 'You will notice that in your terminal there will be no bash_profile set but it is shown below so here in this machine it is already set up. In order to setup if not there we have to create it for which lets us prior seek into java home variables whether it is set up or not.\xa0', 'Step 3: Setting up the home java variable. Using the below command to check or setup if not installed as follows on the terminal:', 'Now you will see that bash-profile s created which is as shown in step2 in your machine which hone can verify by writing command as follows:', 'Step 5: Edit the .bash_profile created and for java, you just have to write the command marked in below media and provided below as follows:', 'Now from the above media, we can see the java variable is all set to go as earlier there was a blank therein the above media.']","['Java is a general-purpose computer programming language that is concurrent, class-based, object-oriented, etc.\xa0Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of computer architecture. The latest version is Java 17.\xa0Below are the environment settings for both Linux and Windows.\xa0JVM, JRE, and JDK three are all platform-dependent because the configuration of each Operating System is different. But, Java is platform-independent.\xa0 Few things must be clear before setting up the environment\xa0which can better be perceived from the below image provided as follows:']",[],"['sudo apt-get install openjdk-8-jdk', 'export JAVA_HOME = /usr/lib/jvm/java-8-openjdk', 'export PATH = $PATH:/usr/lib/jvm/java-8-openjdk/bin', 'java --version\njavac --version', 'ls -al', 'echo $JAVA_HOME', 'ls -al', 'export JAVA_HOME=$(/usr/libexec/java_home)\n// No need to remember this command', 'source .bash_profile\necho $JAVA_HOME']",[],"['JDK(Java Development Kit): JDK is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger.|||JRE(Java Runtime Environment): JRE contains the parts of the Java libraries required to run Java programs and is intended for end-users. JRE can be view as a subset of JDK.|||JVM: JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides a runtime environment in which java bytecode can be executed. JVMs are available for many hardware and software platforms.&&&Notepad/gedit : They are simple text-editor for writing java programs. Notepad is available on Windows and gedit is available on Linux.|||Eclipse IDE : It is the most widely used IDE(Integrated Development Environment) for developing software in java. You can download Eclipse.&&&&&&Windows operating system|||Linux operating system|||macOS operating system&&&']"
2,['Java Basic Syntax'],['Java'],[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/classes-objects-java/', 'https://www.geeksforgeeks.org/methods-in-java/', 'https://www.geeksforgeeks.org/variables-in-java/', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Basic terminologies in Java', '1. Object: The object is an instance of a class, have Behavior and state.', '2. Class: The class is a blueprint(plan) of class objects and status.', '3. Method: The behavior of an object is the method.', 'Example: Steps to compile and run a java program in a console', 'Note: When the class is public, the name of the file should be the class name.', 'The Basic Syntax:', '1. Comments in Java', 'There are three types of comments in Java.\xa0', '\xa0i. Single line Comment', 'ii. Multi-line Comment', 'iii. Documentation Comment. Also called a doc comment.', '2. Program File Name', '3. Case Sensitivity', '4. Class Names', 'i. The first letter of the class should be in Uppercase', '5. public static void main(String [] args)', 'Java program processing starts with the method main().', '6. Method Names', 'i. All the method names should start with a Lower Case letter.', '7. Identifiers in java', 'i. All identifiers can begin with a letter (A to Z or a to z) or an underscore _.', 'ii. The first character of identifiers can have any combination of characters.', 'iii. Most importantly identifiers are case-sensitive.', '8. White-spaces in Java', '9. Access Modifiers: These modifiers control the scope of class and methods.', '10. Java Keywords']","['A Java program is a collection of objects, and these objects communicate through method calls to each other to work together. Here is a brief discussion on the Classes and Objects, Method, Instance variables, syntax, and semantics of Java.', '4. Instance variables: Every object has its own unique set of instance variables. The state of an object is generally created by the values that are assigned to these instance variables.', 'The name of a program file should exactly match the class name with an extension of .java. The name of the file can be other names if the program does not have any public class. Assume you have a public class GFG.', 'Java is a case-sensitive language, which means that the identifiers AB, Ab, aB, and ab are different in Java.', 'ii. If several words are used to form a name of the class, each inner word’s first letter should be in Upper Case, Underscore are allowed.', 'ii. If several words are used to form the name of the method, then each first letter of the inner word should be in Upper Case, Underscore are allowed. (This is allowed in java and please correct the below example as well both are correct syntax as per Java but as standard people follow lowercase first char in function name)', 'iv. A keyword cannot be used as an identifier since it is a reserved word and has some special meaning.', 'A line containing only white-spaces, possibly with the comment, is known as a blank line, and the Java compiler totally ignores it.', 'Keywords or Reserved words are the words in a language that are used for some internal process or represent some predefined actions. These words are therefore not allowed to use as variable names or objects.\xa0', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']",[],"['public class GFG {   public static void main (String[] args) {        System.out.println(""GFG!"");    }}']","['javac GFG.java\njava GFG', 'GFG!', '// System.out.println(""GFG!"");', '/*\n    System.out.println(""GFG!"");\n    System.out.println(""Alice!"");\n*/', '/** documentation */', 'GFG.java // valid syntax\ngfg.java // invalid syntax', 'System.out.println(""Alice""); // valid syntax\nsystem.out.println(""Alice""); // invalid syntax', 'class MyJavaProgram    // valid syntax\nclass myJavaProgram    // invalid syntax', 'public void employeeRecords() // valid syntax\npublic void EmployeeRecords() // valid syntax', 'Legal identifiers: MinNumber, total, ak74, hello_world, $amount, _under_value\nIllegal identifiers: 74ak, -amount']",['abstract|||assert|||boolean|||break&&&byte|||case|||catch|||char&&&class|||const|||continue|||default&&&do|||double|||else|||enum&&&extends|||final|||finally|||float&&&for|||goto|||if|||implements&&&import|||instanceof|||int|||interface&&&long|||native|||new|||package&&&private|||protected|||public|||return&&&short|||static|||strictfp|||super&&&switch|||synchronized|||this|||throw&&&throws|||transient|||try|||void&&&volatile|||while|||\xa0|||\xa0'],"['Example: A car is an object whose states are: brand, colour, number-plate.|||Behavior: Running on the road.&&&Example: Blueprint of the house is class.&&&Example: The fuel indicator indicates the amount of fuel left in the car.&&&Access Modifiers: default, public, protected, private|||Non-access Modifiers: final, abstract, strictfp']"
3,['Java Hello World Program'],['Java'],"['Comments', 'Important Points\xa0', 'Compiling the program\xa0', 'In Windows', 'In Linux']","['https://media.geeksforgeeks.org/wp-content/uploads/Capture15.png', 'https://media.geeksforgeeks.org/wp-content/uploads/VirtualBox_Hadoop_ubuntu_SN_07_02_2017_03_37_06.png']",['https://www.youtube.com/embed/lcJzw0JGfeE?feature=oembed'],"['https://www.geeksforgeeks.org/basic/', 'https://www.geeksforgeeks.org/jvm-works-jvm-architecture/', 'https://www.geeksforgeeks.org/setting-environment-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['The process of Java programming can be simplified in three steps:\xa0', 'This line uses the keyword class to declare that a new class is being defined.\xa0', 'In the Java programming language, every application must contain a main method whose signature is:\xa0', 'The next line of code is shown here. Notice that it occurs inside the main() method.\xa0', 'They can either be multiline or single-line comments.\xa0']","['Java is one of the most popular and widely used programming languages and platforms. Java is fast, reliable, and secure. Java is used in every nook and corner from desktop to web applications, scientific supercomputers to gaming consoles, cell phones to the Internet.', 'Java is easy to learn, and its syntax is simple and easy to understand. It is based on C++ (so easier for programmers who know C++).', 'The below-given program is the most simple program of Java printing “Hello World” to the screen. Let us try to understand every bit of code step by step.', 'The “Hello World!”\xa0program consists of three primary components: the HelloWorld class definition, the main method, and source code comments. The following explanation will provide you with a basic understanding of the code:\xa0', 'It is an identifier that is the name of the class. The entire class definition, including all of its members, will be between the opening curly brace { and the closing curly brace }.', 'Like in C/C++, the main method is the entry point for your application and will subsequently invoke all the other methods required by your program.', 'This line outputs the string “Hello, World” followed by a new line on the screen. Output is accomplished by the built-in println( ) method. The System is a predefined class that provides access to the system, and out is the variable of type output stream connected to the console.', 'This is a single-line comment. This type of comment must begin with // as in C/C++. For multiline comments, they must begin from /* and end with */.\xa0']","['This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// This is a simple Java program.// FileName : ""HelloWorld.java"".  class HelloWorld{    // Your program begins with a call to main().    // Prints ""Hello, World"" to the terminal window.    public static void main(String args[])    {        System.out.println(""Hello, World"");    }}']","['Hello, World', 'class HelloWorld', 'public static void main(String[] args)', 'System.out.println(""Hello, World"");', '// This is a simple Java program. \n// Call this file ""HelloWorld.java"".', 'javac HelloWorld.java', 'java HelloWorld']",[],"['Create the program by typing it into a text editor and saving it to a file – HelloWorld.java.|||Compile it by typing “javac HelloWorld.java” in the terminal window.|||Execute (or run) it by typing “java HelloWorld” in the terminal window.&&&public: So that JVM can execute the method from anywhere.|||static: The main method is to be called without an object. The modifiers public and static can be written in either order.|||void: The main method doesn’t return anything.|||main(): Name configured in the JVM.|||String[]: The main method accepts a single argument, i.e., an array of elements of type String.&&&The name of the class defined by the program is HelloWorld, which is the same as the name of the file(HelloWorld.java). This is not a coincidence. In Java, all codes must reside inside a class, and there is at most one public class which contains the main() method.|||By convention, the name of the main class(a class that contains the main method) should match the name of the file that holds the program.&&&After successfully setting up the environment, we can open a terminal in both Windows/Unix and go to the directory where thefile – HelloWorld.java is present.|||Now, to compile the HelloWorld program, execute the compiler–javac, to specify the name of the source file on the command line, as shown:&&&The compiler creates a HelloWorld.class (in the current working directory) that contains the bytecode version of the program. Now, to execute our program, JVM(Java Virtual Machine) needs to be called using java, specifying the name of the class file on the command line, as shown:&&&This will print “Hello World” to the terminal screen.']"
4,['Command Line arguments in Java'],['java'],[],['https://media.geeksforgeeks.org/wp-content/cdn-uploads/output-1.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']",['Output :\xa0\xa0'],[],"['If we run a Java Program by writing the command “java Hello Geeks At GeeksForGeeks” where the name of the class is “Hello”, then it will run upto Hello. It is a command upto “Hello” and after that i.e “Geeks At GeeksForGeeks”, these are command-line arguments.When command-line arguments are supplied to JVM, JVM wraps these and supplies them to args[]. It can be confirmed that they are actually wrapped up in an args array by checking the length of args using args.length\xa0', 'This article is contributed by Twinkle Tyagi. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Program to check for command line argumentsclass Hello{    public static void main(String[] args)    {        // check if length of args array is        // greater than 0        if (args.length > 0)        {            System.out.println(""The command line""+                               "" arguments are:"");             // iterating the args array and printing            // the command line arguments            for (String val:args)                System.out.println(val);        }        else            System.out.println(""No command line ""+                               ""arguments found."");    }}']",[],[],[]
5,['How JVM Works – JVM Architecture?'],"['Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/jvm-3.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/jvmclassloader.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/jvm-memory-2.jpg']",['https://www.youtube.com/embed/H7UlMH_SdGc?feature=oembed'],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.geeksforgeeks.org/garbage-collection-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['\xa0Class Loader Subsystem', 'It is mainly responsible for three activities.\xa0', 'Note: For every loaded “.class” file, only one object of the class is created.\xa0\xa0', 'Linking: Performs verification, preparation, and (optionally) resolution.\xa0\xa0', 'JVM Memory\xa0', 'Execution Engine\xa0', 'Java Native Interface (JNI) :\xa0', 'Native Method Libraries :\xa0', 'It is a collection of the Native Libraries(C, C++) which are required by the Execution Engine.']","['JVM(Java Virtual Machine) acts as a run-time engine to run Java applications. JVM is the one that actually calls the main method present in a java code. JVM is a part of JRE(Java Runtime Environment).', 'Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code on one system and can expect it to run on any other Java-enabled system without any adjustment. This is all possible because of JVM.', 'When we compile a .java file, .class files(contains byte-code) with the same class names present in .java file are generated by the Java compiler. This .class file goes into various steps when we run it. These steps together describe the whole JVM.\xa0', 'Loading: The Class loader reads the “.class” file, generate the corresponding binary data and save it in the method area. For each “.class” file, JVM stores the following information in the method area.\xa0\xa0', 'Initialization: In this phase, all static variables are assigned with their values defined in the code and static block(if any). This is executed from top to bottom in a class and from parent to child in the class hierarchy.\xa0In general, there are three class loaders :\xa0\xa0', 'Execution engine executes the “.class” (bytecode). It reads the byte-code line by line, uses data and information present in various memory area and executes instructions. It can be classified into three parts:', 'It is an interface that interacts with the Native Method Libraries and provides the native libraries(C, C++) required for the execution. It enables JVM to call C/C++ libraries and to be called by C/C++ libraries which may be specific to hardware.']","['After loading the “.class” file, JVM creates an object of type Class to represent this file in the heap memory. Please note that this object is of type Class predefined in java.lang package. These Class object can be used by the programmer for getting class level information like the name of the class, parent name, methods and variable information etc. To get this object reference we can use getClass() method of Object class.', 'Note: JVM follows the Delegation-Hierarchy principle to load classes. System class loader delegate load request to extension class loader and extension class loader delegate request to the bootstrap class loader. If a class found in the boot-strap path, the class is loaded otherwise request again transfers to the extension class loader and then to the system class loader. At last, if the system class loader fails to load class, then we get run-time exception java.lang.ClassNotFoundException.\xa0', '\xa0This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// A Java program to demonstrate working// of a Class type object created by JVM// to represent .class file in memory.import java.lang.reflect.Field;import java.lang.reflect.Method;  // Java code to demonstrate use// of Class object created by JVMpublic class Test {    public static void main(String[] args)    {        Student s1 = new Student();          // Getting hold of Class        // object created by JVM.        Class c1 = s1.getClass();          // Printing type of object using c1.        System.out.println(c1.getName());          // getting all methods in an array        Method m[] = c1.getDeclaredMethods();        for (Method method : m)            System.out.println(method.getName());          // getting all fields in an array        Field f[] = c1.getDeclaredFields();        for (Field field : f)            System.out.println(field.getName());    }}  // A sample class whose information// is fetched above using its Class object.class Student {    private String name;    private int roll_No;      public String getName() { return name; }    public void setName(String name) { this.name = name; }    public int getRoll_no() { return roll_No; }    public void setRoll_no(int roll_no)    {        this.roll_No = roll_no;    }}', '// Java code to demonstrate Class Loader subsystempublic class Test {    public static void main(String[] args)    {        // String class is loaded by bootstrap loader, and        // bootstrap loader is not Java object, hence null        System.out.println(String.class.getClassLoader());          // Test class is loaded by Application loader        System.out.println(Test.class.getClassLoader());    }}']","['Student\ngetName\nsetName\ngetRoll_no\nsetRoll_no\nname\nroll_No', 'Student s2 = new Student();\n// c2 will point to same object where \n// c1 is pointing\nClass c2 = s2.getClass();\nSystem.out.println(c1==c2); // true', 'null\njdk.internal.loader.ClassLoaders$AppClassLoader@8bcc55f']",[],"['Loading|||Linking|||Initialization&&&The fully qualified name of the loaded class and its immediate parent class.|||Whether the “.class” file is related to Class or Interface or Enum.|||Modifier, Variables and Method information etc.&&&Verification: It ensures the correctness of the .class file i.e. it checks whether this file is properly formatted and generated by a valid compiler or not. If verification fails, we get run-time exception java.lang.VerifyError. This activity is done by the component ByteCodeVerifier. Once this activity is completed then the class file is ready for compilation.|||Preparation: JVM allocates memory for class variables and initializing the memory to default values.|||Resolution: It is the process of replacing symbolic references from the type with direct references. It is done by searching into the method area to locate the referenced entity.&&&Bootstrap class loader: Every JVM implementation must have a bootstrap class loader, capable of loading trusted classes. It loads core java API classes present in the “JAVA_HOME/jre/lib” directory. This path is popularly known as the bootstrap path. It is implemented in native languages like C, C++.|||Extension class loader: It is a child of the bootstrap class loader. It loads the classes present in the extensions directories “JAVA_HOME/jre/lib/ext”(Extension path) or any other directory specified by the java.ext.dirs system property. It is implemented in java by the sun.misc.Launcher$ExtClassLoader class.|||System/Application class loader: It is a child of the extension class loader. It is responsible to load classes from the application classpath. It internally uses Environment Variable which mapped to java.class.path. It is also implemented in Java by the sun.misc.Launcher$AppClassLoader class.&&&Interpreter: It interprets the bytecode line by line and then executes. The disadvantage here is that when one method is called multiple times, every time interpretation is required.|||Just-In-Time Compiler(JIT) : It is used to increase the efficiency of an interpreter. It compiles the entire bytecode and changes it to native code so whenever the interpreter sees repeated method calls, JIT provides direct native code for that part so re-interpretation is not required, thus efficiency is improved.|||Garbage Collector: It destroys un-referenced objects. For more on Garbage Collector, refer Garbage Collector.&&&&&&Method area: In the method area, all class level information like class name, immediate parent class name, methods and variables information etc. are stored, including static variables. There is only one method area per JVM, and it is a shared resource.|||Heap area: Information of all objects is stored in the heap area. There is also one Heap Area per JVM. It is also a shared resource.|||Stack area: For every thread, JVM creates one run-time stack which is stored here. Every block of this stack is called activation record/stack frame which stores methods calls. All local variables of that method are stored in their corresponding frame. After a thread terminates, its run-time stack will be destroyed by JVM. It is not a shared resource.|||PC Registers: Store address of current execution instruction of a thread. Obviously, each thread has separate PC Registers.|||Native method stacks: For every thread, a separate native stack is created. It stores native method information.&&&']"
6,"['Differences between JDK, JRE and JVM']",[],[],"['https://media.geeksforgeeks.org/wp-content/uploads/20210218150010/JDK.png', 'https://media.geeksforgeeks.org/wp-content/uploads/JRE_JDK_JVM.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/jvm-3.jpg']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/jvm-works-jvm-architecture/', 'https://www.geeksforgeeks.org/compiler-vs-interpreter-2/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Now let us discuss JVM, which stands out for java virtual machine. It is as follows:', 'Don’t get confused as we are going to discuss all of them one by one.', 'The components of JRE is as follows:', 'Illustration:', 'Note: From above, media operation computing during the compile time can be interpreted.', 'The following actions occur at runtime as listed below:', 'Now let us discuss in brief how JVM do works out. It is as follows:', 'It is mainly responsible for three activities.\xa0', 'Similarly, now let us discuss the working of JRE which is as follows:']","['Java Development Kit (JDK) is a software development environment used for developing Java applications and applets. It includes the Java Runtime Environment (JRE), an interpreter/loader (Java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), and other tools needed in Java development.\xa0', 'Now we need an environment to make a run of our program. Henceforth, JRE stands for “Java Runtime Environment” and may also be written as “Java RTE.” The Java Runtime Environment provides the minimum requirements for executing a Java application; it consists of the Java Virtual Machine (JVM), core classes, and supporting files.\xa0', 'Before proceeding to the differences between JDK, JRE, and JVM, let us discuss them in brief first and interrelate with the image below being proposed.', '1. JDK (Java Development Kit) is a Kit that provides the environment to develop and execute(run) the Java program. JDK is a kit(or package) that includes two things', '2. JRE (Java Runtime Environment) is an installation package that provides an environment to only run(not develop) the java program(or application)onto your machine. JRE is only used by those who only want to run Java programs that are end-users of your system.\xa0', '3. JVM (Java Virtual Machine) is a very important part of both JDK and JRE because it is contained or inbuilt in both. Whatever Java program you run using JRE or JDK goes into JVM and JVM is responsible for executing the java program line by line, hence it is also known as an interpreter.', 'Now let us discuss components of JRE in order to understand the importance of it and to perceive how it actually works. For this let us discuss components.', 'After having an adequate understanding of the components, now let us discuss the working of JRE. In order to understand how JRE works, let us consider an illustration below as follows:', 'Consider a java source file saved as ‘Example.java’. The file is compiled into a set of Byte Code that is stored in a “.class” file. Here it will be “Example.class“.\xa0', 'JVM becomes an instance of JRE at the runtime of a Java program. It is widely known as a runtime interpreter.JVM largely helps in the abstraction of inner implementation from the programmers who make use of libraries for their programs from JDK.\xa0', 'This article is contributed by Krishna Bhatia. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\xa0', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],[],[],[],"['A specification where the working of Java Virtual Machine is specified. But implementation provider is independent to choose the algorithm. Its implementation has been provided by Sun and other companies.|||An implementation is a computer program that meets the requirements of the JVM specification.|||Runtime Instance Whenever you write a java command on the command prompt to run the java class, an instance of JVM is created.&&&Development Tools(to provide an environment to develop your java programs)|||JRE (to execute your java program).&&&Class Loader|||Byte Code Verifier|||IntrepreterExecute the Byte CodeMake appropriate calls to the underlying hardware|||Execute the Byte Code|||Make appropriate calls to the underlying hardware&&&Execute the Byte Code|||Make appropriate calls to the underlying hardware&&&Loading|||Linking|||Initialization&&&JVM(Java Virtual Machine) acts as a run-time engine to run Java applications. JVM is the one that actually calls the main method present in a java code. JVM is a part of JRE(Java Runtime Environment).|||Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code on one system and can expect it to run on any other Java-enabled system without any adjustments. This is all possible because of JVM.|||When we compile a .java file, .class files(contains byte-code) with the same class names present in .java file are generated by the Java compiler. This .class file goes into various steps when we run it. These steps together describe the whole JVM.&&&&&&Deployment technologies, including deployment, Java Web Start, and Java Plug-in.|||User interface toolkits, including Abstract Window Toolkit (AWT), Swing, Java 2D, Accessibility, Image I/O, Print Service, Sound, drag, and drop (DnD), and input methods.|||Integration libraries, including Interface Definition Language (IDL), Java Database Connectivity (JDBC), Java Naming and Directory Interface (JNDI), Remote Method Invocation (RMI), Remote Method Invocation Over Internet Inter-Orb Protocol (RMI-IIOP), and scripting.|||Other base libraries, including international support, input/output (I/O), extension mechanism, Beans, Java Management Extensions (JMX), Java Native Interface (JNI), Math, Networking, Override Mechanism, Security, Serialization, and Java for XML Processing (XML JAXP).|||Lang and util base libraries, including lang and util, management, versioning, zip, instrument, reflection, Collections, Concurrency Utilities, Java Archive (JAR), Logging, Preferences API, Ref Objects, and Regular Expressions.|||Java Virtual Machine (JVM), including Java HotSpot Client and Server Virtual Machines.&&&']"
7,['Java Identifiers'],[],[],[],['https://www.youtube.com/embed/_mOz0GOG3uk?list=PLqM7alHXFySENpNgw27MzGxLzNJuC_Kdj'],"['https://www.geeksforgeeks.org/basic/', 'https://www.geeksforgeeks.org/strictfp-keyword-java/', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['In the above java code, we have 5 identifiers namely :', 'Rules for defining Java Identifiers', 'Examples of valid identifiers :', 'Examples of invalid identifiers :', 'Reserved Words']","['In programming languages, identifiers are used for identification purposes. In Java, an identifier\xa0can be a class name, method name, variable name,\xa0or label. For example :', 'There are certain rules for defining a valid java identifier. These rules must be followed, otherwise we get compile-time error. These rules are also valid for other languages like C,C++.', 'Note: The keywords const and goto are reserved, even though they are not currently used. In place of const, the final keyword is used. Some keywords like strictfp are included in later\xa0versions of Java.', 'This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['Any programming language reserves some words to represent functionalities defined by that language. These words are called reserved words.They can be briefly categorised into two parts : keywords(50) and literals(3). Keywords define functionalities and literals define a value. Identifiers are used by symbol tables in various analyzing phases(like lexical, syntax, semantic) of a compiler architecture.']",[],"['public class Test\n{\n    public static void main(String[] args)\n    {\n        int a = 20;\n    }\n}', 'MyVariable\nMYVARIABLE\nmyvariable\nx\ni\nx1\ni1\n_myvariable\n$myvariable\nsum_of_array\ngeeks123', 'My Variable  // contains a space\n123geeks   // Begins with a digit\na+c // plus sign is not an alphanumeric character\nvariable-2 // hyphen is not an alphanumeric character\nsum_&_difference // ampersand is not an alphanumeric character']",[],"['Test: class name.|||main: method name.|||String: predefined class name.|||args: variable name.|||a: variable name.&&&The only allowed characters for identifiers are all alphanumeric characters([A-Z],[a-z],[0-9]), ‘$‘(dollar sign) and ‘_‘ (underscore).For example “geek@” is not a valid java identifier as it contain ‘@’ special character.|||Identifiers should not start with digits([0-9]). For example “123geeks” is a not a valid java identifier.|||Java identifiers are case-sensitive.|||There is no limit on the length of the identifier but it is advisable to use an optimum length of 4 – 15 letters only.|||Reserved Words can’t be used as an identifier. For example “int while = 20;” is an invalid statement as while is a reserved word. There are 53 reserved words in Java.']"
8,['Data types in Java'],"['Java', 'Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191105111644/Data-types-in-Java.jpg', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191105122725/Primitive-Data-Types-in-Java-4.jpg']",['https://www.youtube.com/embed/dY2LQcE-Qvc?list=PLqM7alHXFySENpNgw27MzGxLzNJuC_Kdj'],"['https://www.geeksforgeeks.org/easy/', 'https://en.wikipedia.org/wiki/IEEE_floating_point', 'http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html', 'https://www.geeksforgeeks.org/rounding-off-errors-java/', 'https://www.geeksforgeeks.org/strings-in-java/', 'https://www.geeksforgeeks.org/classes-objects-java/', 'https://www.geeksforgeeks.org/arrays-in-java/', 'https://www.geeksforgeeks.org/strings-in-java/', 'https://www.geeksforgeeks.org/classes-objects-java/', 'https://www.geeksforgeeks.org/access-specifiers-for-classes-or-interfaces-in-java/', 'https://www.geeksforgeeks.org/classes-objects-java/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/comparator-interface-java/', 'https://www.geeksforgeeks.org/arrays-in-java/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.geeksforgeeks.org/marker-interface-java/', 'https://www.geeksforgeeks.org/serialization-in-java/', 'https://www.geeksforgeeks.org/java-gq/data-types-2-gq/', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['There are majorly two types of languages.\xa0\xa0', 'Java has two categories of data:\xa0\xa0', 'Primitive Data Type', 'Primitive data are only single values and have no special capabilities.\xa0\xa0', 'There are 8 primitive data types:\xa0\xa0', '4. int: It is a 32-bit signed two’s complement integer.\xa0', '5. long: The long data type is a 64-bit two’s complement integer.\xa0\xa0', '8. char: The char data type is a single 16-bit Unicode character.\xa0', 'Non-Primitive Data Type or Reference Data Types']","['Java is statically typed and also a strongly typed language because, in Java, each type of data (such as integer, character, hexadecimal, packed decimal, and so forth) is predefined as part of the programming language and all constants or variables defined for a given program must be described with one of the data types.Data Types in Java\xa0', '1. boolean: boolean data type represents only one bit of information either true or false, but the size of the boolean data type is virtual machine-dependent. Values of type boolean are not converted implicitly or explicitly (with casts) to any other type. But the programmer can easily write conversion code.\xa0', '2. byte: The byte data type is an 8-bit signed two’s complement integer. The byte data type is useful for saving memory in large arrays.\xa0', '3. short: The short data type is a 16-bit signed two’s complement integer. Similar to byte, use a short to save memory in large arrays, in situations where the memory savings actually matters.\xa0', '6. float: The float data type is a single-precision 32-bit IEEE 754 floating-point. Use a float (instead of double) if you need to save memory in large arrays of floating-point numbers.\xa0', '7. double: The double data type is a double-precision 64-bit IEEE 754 floating-point. For decimal values, this data type is generally the default choice.\xa0', 'The Reference Data Types will contain a memory address of variable value because the reference types won’t store the variable value directly in memory. They are strings, objects, arrays, etc.\xa0\xa0']","['Why is the size of char is 2 byte in java..?\xa0In other languages like C/C++ uses only ASCII characters and to represent all ASCII characters 8-bits is enough,\xa0But java uses the Unicode system not the ASCII code system and to represent Unicode system 8 bit is not enough to represent all characters so java uses 2 bytes for characters.Unicode defines a fully international character set that can represent most of the world’s written languages. It is a unification of dozens of character sets, such as Latin, Greeks, Cyrillic, Katakana, Arabic, and many more.\xa0', 'Quiz on Data Type in JavaThis article is contributed by Shubham Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program to demonstrate boolean data type  class GeeksforGeeks {    public static void main(String args[])    {        boolean b = true;        if (b == true)            System.out.println(""Hi Geek"");    }}', '// Java program to demonstrate byte data type in Java  class GeeksforGeeks {    public static void main(String args[])    {        byte a = 126;          // byte is 8 bit value        System.out.println(a);          a++;        System.out.println(a);          // It overflows here because        // byte can hold values from -128 to 127        a++;        System.out.println(a);          // Looping back within the range        a++;        System.out.println(a);    }}', '// Java program to demonstrate// primitive data types in Java  class GeeksforGeeks {    public static void main(String args[])    {        // declaring character        char a = \'G\';          // Integer data type is generally        // used for numeric values        int i = 89;          // use byte and short        // if memory is a constraint        byte b = 4;          // this will give error as number is        // larger than byte range        // byte b1 = 7888888955;          short s = 56;          // this will give error as number is        // larger than short range        // short s1 = 87878787878;          // by default fraction value        // is double in java        double d = 4.355453532;          // for float use \'f\' as suffix        float f = 4.7333434f;          System.out.println(""char: "" + a);        System.out.println(""integer: "" + i);        System.out.println(""byte: "" + b);        System.out.println(""short: "" + s);        System.out.println(""float: "" + f);        System.out.println(""double: "" + d);    }}']","['boolean booleanVar;', 'virtual machine dependent', 'true, false', 'false', 'Hi Geek', 'byte byteVar;', '1 byte ( 8 bits )', '-128 to 127', '0', '126\n127\n-128\n-127', 'short shortVar;', '2 byte ( 16 bits )', '-32, 768 to 32, 767 (inclusive)', '0', 'int intVar;', '4 byte ( 32 bits )', '-2, 147, 483, 648 to 2, 147, 483, 647 (inclusive)', '0', 'long longVar;', '8 byte ( 64 bits )', '-9, 223, 372, 036, 854, 775, 808 \n          to \n9, 223, 372, 036, 854, 775, 807\n      (inclusive)', '0', 'float floatVar;', '4 byte ( 32 bits )', 'upto 7 decimal digits', '0.0', 'double doubleVar;', '8 byte ( 64 bits )', 'upto 16 decimal digits', '0.0', 'char charVar;', '2 byte ( 16 bits )', ""'\\u0000' (0) to '\\uffff' (65535)"", ""'\\u0000'"", 'char: G\ninteger: 89\nbyte: 4\nshort: 56\nfloat: 4.7333436\ndouble: 4.355453532', '<String_Type> <string_variable> = “<sequence_of_string>”;', '// Declare String without using new operator \nString s = ""GeeksforGeeks""; \n\n// Declare String using new operator \nString s1 = new String(""GeeksforGeeks"");']",[],"['First, one is Statically typed language where each variable and expression type is already known at compile time. Once a variable is declared to be of a certain data type, it cannot hold values of other data types.Example: C, C++, Java.|||The other is Dynamically typed languages. These languages can receive different data types over time.Example: Ruby, Python&&&Primitive Data Type: such as boolean, char, int, short, byte, long, float, and double|||Non-Primitive Data Type or Object Data type: such as String, Array, etc.&&&Syntax:&&&Size:&&&Values:&&&Default Value:&&&Syntax:&&&Size:&&&Values:&&&Default Value:&&&Syntax:&&&Size:&&&Values:&&&Default Value:&&&Syntax:&&&Size:&&&Values:&&&Default Value:&&&Note: In Java SE 8 and later, we can use the int data type to represent an unsigned 32-bit integer, which has value in the range [0, 232-1]. Use the Integer class to use int data type as an unsigned integer.&&&Syntax:&&&Size:&&&Values:&&&Default Value:&&&Note: In Java SE 8 and later, you can use the long data type to represent an unsigned 64-bit long, which has a minimum value of 0 and a maximum value of 264-1. The Long class also contains methods like comparing Unsigned, divide Unsigned, etc to support arithmetic operations for unsigned long.&&&Syntax:&&&Size:&&&Values:&&&Default Value:&&&Syntax:&&&Size:&&&Values:&&&Default Value:&&&Note: Both float and double data types were designed especially for scientific calculations, where approximation errors are acceptable. If accuracy is the most prior concern then, it is recommended not to use these data types and use BigDecimal class instead.Please see this for details: Rounding off errors in Java&&&Syntax:&&&Size:&&&Values:&&&Default Value:&&&String: Strings are defined as an array of characters. The difference between a character array and a string in Java is, the string is designed to hold a sequence of characters in a single variable whereas, a character array is a collection of separate char type entities.|||Unlike C/C++, Java strings are not terminated with a null character.Below is the basic syntax for declaring a string in Java programming language.Syntax:&&&Example:&&&Class: A class is a user-defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order:Modifiers: A class can be public or has default access (Refer this for details).Class name:The name should begin with a initial letter (capitalized by convention).Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.Body: The class bodysurrounded by braces, { }.|||Modifiers: A class can be public or has default access (Refer this for details).|||Class name:The name should begin with a initial letter (capitalized by convention).|||Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.|||Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.|||Body: The class bodysurrounded by braces, { }.|||Object: It is a basic unit of Object-Oriented Programmingand represents the real-life entities. A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of :State: It is represented by attributes of an object. It also reflects the properties of an object.Behavior: It is represented by methods of an object. It also reflects the response of an object with other objects.Identity: It gives a unique name to an object and enables one object to interact with other objects.|||State: It is represented by attributes of an object. It also reflects the properties of an object.|||Behavior: It is represented by methods of an object. It also reflects the response of an object with other objects.|||Identity: It gives a unique name to an object and enables one object to interact with other objects.|||Interface: Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, nobody). Interfaces specify what a class must do and not how. It is the blueprint of the class.An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move(). So it specifies a set of methods that the class has to implement.If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstract.A Java library example is, Comparator Interface. If a class implements this interface, then it can be used to sort a collection.|||Interfaces specify what a class must do and not how. It is the blueprint of the class.|||An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move(). So it specifies a set of methods that the class has to implement.|||If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstract.|||A Java library example is, Comparator Interface. If a class implements this interface, then it can be used to sort a collection.|||Array: An array is a group of like-typed variables that are referred to by a common name. Arrays in Java work differently than they do in C/C++. The following are some important points about Java arrays.In Java, all arrays are dynamically allocated. (discussed below)Since arrays are objects in Java, we can find their length using member length. This is different from C/C++ where we find length using size.A Java array variable can also be declared like other variables with [] after the data type.The variables in the array are ordered and each has an index beginning from 0.Java array can be also be used as a static field, a local variable or a method parameter.The size of an array must be specified by an int value and not long or short.The direct superclass of an array type is Object.Every array type implements the interfaces Cloneable and java.io.Serializable.|||In Java, all arrays are dynamically allocated. (discussed below)|||Since arrays are objects in Java, we can find their length using member length. This is different from C/C++ where we find length using size.|||A Java array variable can also be declared like other variables with [] after the data type.|||The variables in the array are ordered and each has an index beginning from 0.|||Java array can be also be used as a static field, a local variable or a method parameter.|||The size of an array must be specified by an int value and not long or short.|||The direct superclass of an array type is Object.|||Every array type implements the interfaces Cloneable and java.io.Serializable.&&&Interfaces specify what a class must do and not how. It is the blueprint of the class.|||An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move(). So it specifies a set of methods that the class has to implement.|||If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstract.|||A Java library example is, Comparator Interface. If a class implements this interface, then it can be used to sort a collection.&&&In Java, all arrays are dynamically allocated. (discussed below)|||Since arrays are objects in Java, we can find their length using member length. This is different from C/C++ where we find length using size.|||A Java array variable can also be declared like other variables with [] after the data type.|||The variables in the array are ordered and each has an index beginning from 0.|||Java array can be also be used as a static field, a local variable or a method parameter.|||The size of an array must be specified by an int value and not long or short.|||The direct superclass of an array type is Object.|||Every array type implements the interfaces Cloneable and java.io.Serializable.&&&&&&&&&Modifiers: A class can be public or has default access (Refer this for details).|||Class name:The name should begin with a initial letter (capitalized by convention).|||Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.|||Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.|||Body: The class bodysurrounded by braces, { }.&&&State: It is represented by attributes of an object. It also reflects the properties of an object.|||Behavior: It is represented by methods of an object. It also reflects the response of an object with other objects.|||Identity: It gives a unique name to an object and enables one object to interact with other objects.&&&']"
9,['Variables in Java'],[],"['How to declare variables?', 'How to initialize variables?', 'Types of Variables in Java', 'Differences between the Instance variable Vs. the Static variables']","['https://media.geeksforgeeks.org/wp-content/uploads/20191110223008/java-declare.jpeg', 'http://media.geeksforgeeks.org/wp-content/uploads/Variables-in-Java.png']",['https://www.youtube.com/embed/snIUtdg0K30?feature=oembed'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/variable-scope-in-java/', 'https://www.geeksforgeeks.org/static-keyword-in-java/', 'https://www.geeksforgeeks.org/g-fact-47/', 'https://www.geeksforgeeks.org/g-fact-46-instance-variable-hiding-in-java/', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['A variable is a name given to a memory location. It is the basic unit of storage in a program.', 'We can declare variables in java as pictorially depicted below as a visual aid.', '1. Datatype: Type of data that can be stored in this variable.\xa0', '2. Dataname: Name was given to the variable.\xa0', 'In this way, a name can only be given to a memory location. It can be assigned values in two ways:\xa0', 'It can be perceived with the help of 3 components that are as follows:', 'Illustrations:\xa0', 'Now let us discuss different types of variables which are listed as follows:\xa0', 'Let us discuss the traits of every variable been up here in detail.', '1. Local Variables\xa0', 'A variable defined within a block or method or constructor is called a local variable.\xa0', '2. Instance Variables', '3. Static Variables', 'Static variables are also known as Class variables.\xa0', 'Now let us do discuss the differences between the Instance variable Vs. the Static variables', 'Syntax: Static and instance variables', 'Must Read:\xa0']","['Variable in Java is a data container that saves the data values during Java program execution. Every variable is assigned a data type that designates the type and quantity of value it can hold. Variable is a memory location name of the data.', 'From the image, it can be easily perceived that while declaring a variable, we need to take care of two things that are:', 'Instance variables are non-static variables and are declared in a class outside any method, constructor, or block.\xa0']","['This article is contributed by Harsh Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['float simpleInterest; \n// Declaring float variable', 'int time = 10, speed = 20; \n// Declaring and Initializing integer variable', ""char var = 'h'; \n// Declaring and Initializing character variable"", 'class GFG\n{\n    // Static variable\n    static int a; \n    \n    // Instance variable\n    int b;        \n}']",[],"['The value stored in a variable can be changed during program execution.|||A variable is only a name given to a memory location, all the operations done on the variable effects that memory location.|||In Java, all the variables must be declared before use.&&&Variable Initialization|||Assigning value by taking input&&&datatype: Type of data that can be stored in this variable.|||variable_name: Name given to the variable.|||value: It is the initial value stored in the variable.&&&These variables are created when the block is entered, or the function is called and destroyed after exiting from the block or when the call returns from the function.|||The scope of these variables exists only within the block in which the variable is declared. i.e., we can access these variables only within that block.|||Initialization of the local variable is mandatory before using it in the defined scope.&&&As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.|||Unlike local variables, we may use access specifier for instance variables. If we do not specify any access specifier, then the default access specifier will be used.|||Initialization of Instance Variable is not Mandatory. Its default value is 0|||Instance Variable can be accessed only by creating objects.&&&These variables are declared similarly as instance variables. The difference is that static variables are declared using the static keyword within a class outside any method constructor or block.|||Unlike instance variables, we can only have one copy of a static variable per class irrespective of how many objects we create.|||Static variables are created at the start of program execution and destroyed automatically when execution ends.|||Initialization of Static Variable is not Mandatory. Its default value is 0|||If we access the static variable like the Instance variable (through an object), the compiler will show the warning message, which won’t halt the program. The compiler will replace the object name with the class name automatically.|||If we access the static variable without the class name, the compiler will automatically append the class name.&&&Each object will have its copy of the instance variable, whereas We can only have one copy of a static variable per class irrespective of how many objects we create.|||Changes made in an instance variable using one object will not be reflected in other objects as each object has its own copy of the instance variable. In the case of static, changes will be reflected in other objects as static variables are common to all objects of a class.|||We can access instance variables through object references, and Static Variables can be accessed directly using the class name.&&&Scope of Variables in Java|||Comparison of static keyword in C++ and Java|||Are static local variables allowed in Java?|||Instance Variable Hiding in Java&&&&&&Local Variables|||Instance Variables|||Static Variables&&&']"
10,['Comments in Java'],"['Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/basic/', 'http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html', 'https://www.facebook.com/Pratik.Agarwal01', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Single-line Comments', 'Example:\xa0\xa0', 'Multi-line Comments', 'Example:\xa0\xa0', 'We can also accomplish single line comments by using the above syntax as shown below:\xa0\xa0', 'Documentation Comments', 'Available tags to use:\xa0\xa0']","['In a program, comments take part in making the program become more human readable by placing the detail of code involved and proper use of comments makes maintenance easier and finding bugs easily. Comments are ignored by the compiler while compiling a code.In Java there are three types of comments:\xa0\xa0', 'A beginner level programmer uses mostly single-line comments for describing the code functionality. Its the most easiest typed comments.\xa0Syntax:\xa0\xa0', 'To describe a full method in a code or a complex snippet single line comments can be tedious to write, since we have to give ‘//’ at every line. So to overcome this multi line comments can be used.\xa0Syntax:\xa0\xa0', 'For the above code documentation can be generated by using a tool ‘javadoc’ :\xa0Javadoc can be used by running the following command in terminal.\xa0\xa0', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['This type of comments are used generally when writing code for a project/software package, since it helps to generate a documentation page for reference, which can be used for getting information about methods present, its parameters, etc.\xa0For example http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html is an auto generated documentation page which is generated by using documentation comments and a javadoc tool for processing the comments.Syntax:\xa0\xa0', 'This article is contributed by Pratik Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['//Java program to show single line commentsclass Scomment{    public static void main(String args[])    {         // Single line comment here         System.out.println(""Single line comment above"");    }}', '//Java program to show multi line commentsclass Scomment{    public static void main(String args[])    {        System.out.println(""Multi line comments below"");        /*Comment line 1          Comment line 2          Comment line 3*/    }}', '//Java program to illustrate frequently used// Comment tags /*** <h1>Find average of three numbers!</h1>* The FindAvg program implements an application that* simply calculates average of three integers and Prints* the output on the screen.** @author  Pratik Agarwal* @version 1.0* @since   2017-02-18*/public class FindAvg{    /**    * This method is used to find average of three integers.    * @param numA This is the first parameter to findAvg method    * @param numB  This is the second parameter to findAvg method    * @param numC  This is the second parameter to findAvg method    * @return int This returns average of numA, numB and numC.    */    public int findAvg(int numA, int numB, int numC)    {        return (numA + numB + numC)/3;    }     /**    * This is the main method which makes use of findAvg method.    * @param args Unused.    * @return Nothing.    */     public static void main(String args[])    {        FindAvg obj = new FindAvg();        int avg = obj.findAvg(10, 20, 30);         System.out.println(""Average of 10, 20 and 30 is :"" + avg);    }}']","['//Comments here( Text in this line only is considered as comment )', '/*Comment starts\ncontinues\ncontinues\n.\n.\n.\nComment ends*/', '/*Comment line 1*/', '/**Comment start\n*\n*tags are used in order to specify a parameter\n*or method or heading\n*HTML tags can also be used \n*such as <h1>\n*\n*comment ends*/', 'Average of 10, 20 and 30 is :20', 'javadoc FindAvg.java']",[],['Single – line comments.|||Multi – line comments.|||Documentation comments.']
11,['Operators in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/uploads/operators.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-arithmetic-operators-with-examples/', 'https://www.geeksforgeeks.org/java-unary-operator-with-examples/', 'https://www.geeksforgeeks.org/java-assignment-operator-with-examples/', 'https://www.geeksforgeeks.org/java-relational-operators-with-examples/', 'https://www.geeksforgeeks.org/java-logical-operators-with-examples/', 'https://www.geeksforgeeks.org/java-ternary-operator-with-examples/', 'https://www.geeksforgeeks.org/', 'https://www.geeksforgeeks.org/', 'https://www.geeksforgeeks.org/java-instanceof-and-its-applications/', 'https://www.geeksforgeeks.org/', 'https://www.geeksforgeeks.org/', 'https://www.geeksforgeeks.org/java-instanceof-and-its-applications/', 'https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op1.html', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Lets take a look at them in detail.\xa0\xa0', 'Precedence and Associativity of Operators', 'Interesting Questions on Operators']","['Java provides many types of operators which can be used according to the need. They are classified based on the functionality they provide. Some of the types are-\xa0\xa0', 'The above statement means that if the condition evaluates to true, then execute the statements after the ‘?’ else execute the statements after the ‘:’.\xa0\xa0']","['Precedence and associative rules are used when dealing with hybrid equations involving more than one type of operator. In such cases, these rules determine which part of the equation to consider first as there can be many different valuations for the same equation. The below table depicts the precedence of operators in decreasing order as magnitude with the top representing the highest precedence and bottom shows the lowest precedence.\xa0', 'References: Official Java DocumentationThis article is contributed by Rishabh Mahrsee. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program to illustrate// max of three numbers using// ternary operator.public class operators {    public static void main(String[] args)    {        int a = 20, b = 10, c = 30, result;          // result holds max of three        // numbers        result = ((a > b)                      ? (a > c)                            ? a                            : c                      : (b > c)                            ? b                            : c);        System.out.println(""Max of three numbers = ""                           + result);    }}', '// Java program to illustrate// instance of operatorclass operators {    public static void main(String[] args)    {          Person obj1 = new Person();        Person obj2 = new Boy();          // As obj is of type person, it is not an        // instance of Boy or interface        System.out.println(""obj1 instanceof Person: ""                           + (obj1 instanceof Person));        System.out.println(""obj1 instanceof Boy: ""                           + (obj1 instanceof Boy));        System.out.println(""obj1 instanceof MyInterface: ""                           + (obj1 instanceof MyInterface));          // Since obj2 is of type boy,        // whose parent class is person        // and it implements the interface Myinterface        // it is instance of all of these classes        System.out.println(""obj2 instanceof Person: ""                           + (obj2 instanceof Person));        System.out.println(""obj2 instanceof Boy: ""                           + (obj2 instanceof Boy));        System.out.println(""obj2 instanceof MyInterface: ""                           + (obj2 instanceof MyInterface));    }}  class Person {}  class Boy extends Person implements MyInterface {}  interface MyInterface {}', 'public class operators {    public static void main(String[] args)    {        int a = 20, b = 10, c = 0, d = 20, e = 40, f = 30;          // precedence rules for arithmetic operators.        // (* = / = %) > (+ = -)        // prints a+(b/d)        System.out.println(""a+b/d = "" + (a + b / d));          // if same precendence then associative        // rules are followed.        // e/f -> b*d -> a+(b*d) -> a+(b*d)-(e/f)        System.out.println(""a+b*d-e/f = ""                           + (a + b * d - e / f));    }}', 'public class operators {    public static void main(String[] args)    {        int a = 20, b = 10, c = 0;          // a=b+++c is compiled as        // b++ +c        // a=b+c then b=b+1        a = b++ + c;        System.out.println(""Value of a(b+c), ""                           + "" b(b+1), c = ""                           + a + "", "" + b                           + "", "" + c);          // a=b+++++c is compiled as        // b++ ++ +c        // which gives error.        // a=b+++++c;        // System.out.println(b+++++c);    }}', 'public class operators {    public static void main(String[] args)    {          int x = 5, y = 8;          // concatenates x and y as        // first x is added to ""concatenation (x+y) = ""        // producing ""concatenation (x+y) = 5""        // and then 8 is further concatenated.        System.out.println(""Concatenation (x+y)= ""                           + x + y);          // addition of x and y        System.out.println(""Addition (x+y) = ""                           + (x + y));    }}']","['variable = value;', 'variable relation_operator value', 'condition ? if true : if false', 'Max of three numbers = 30', 'number shift_op number_of_places_to_shift;', 'object instance of class/subclass/interface', 'obj1 instanceof Person: true\nobj1 instanceof Boy: false\nobj1 instanceof MyInterface: false\nobj2 instanceof Person: true\nobj2 instanceof Boy: true\nobj2 instanceof MyInterface: true', 'a+b/d = 20\na+b*d-e/f = 219', 'Value of a(b+c), b(b+1), c = 10, 11, 0', 'Concatenation (x+y)= 58\nAddition (x+y) = 13']",[],"['Arithmetic Operators: They are used to perform simple arithmetic operations on primitive data types.* : Multiplication/ : Division% : Modulo+ : Addition– : Subtraction|||* : Multiplication|||/ : Division|||% : Modulo|||+ : Addition|||– : Subtraction|||Unary Operators: Unary operators need only one operand. They are used to increment, decrement or negate a value.– :Unary minus, used for negating the values.+ :Unary plus, indicates positive value (numbers are positive without this, however). It performs an automatic conversion to int when the type of its operand is byte, char, or short. This is called unary numeric promotion.++ :Increment operator, used for incrementing the value by 1. There are two varieties of increment operator.Post-Increment: Value is first used for computing the result and then incremented.Pre-Increment: Value is incremented first and then result is computed.— : Decrement operator, used for decrementing the value by 1. There are two varieties of decrement operator.Post-decrement : Value is first used for computing the result and then decremented.Pre-Decrement : Value is decremented first and then result is computed.! : Logical not operator, used for inverting a boolean value.|||– :Unary minus, used for negating the values.|||+ :Unary plus, indicates positive value (numbers are positive without this, however). It performs an automatic conversion to int when the type of its operand is byte, char, or short. This is called unary numeric promotion.|||++ :Increment operator, used for incrementing the value by 1. There are two varieties of increment operator.Post-Increment: Value is first used for computing the result and then incremented.Pre-Increment: Value is incremented first and then result is computed.|||Post-Increment: Value is first used for computing the result and then incremented.|||Pre-Increment: Value is incremented first and then result is computed.|||— : Decrement operator, used for decrementing the value by 1. There are two varieties of decrement operator.Post-decrement : Value is first used for computing the result and then decremented.Pre-Decrement : Value is decremented first and then result is computed.|||Post-decrement : Value is first used for computing the result and then decremented.|||Pre-Decrement : Value is decremented first and then result is computed.|||! : Logical not operator, used for inverting a boolean value.|||Assignment Operator : ‘=’ Assignment operator is used to assign a value to any variable. It has a right to left associativity, i.e value given on right hand side of operator is assigned to the variable on the left and therefore right hand side value must be declared before using it or should be a constant.General format of assignment operator is,&&&* : Multiplication|||/ : Division|||% : Modulo|||+ : Addition|||– : Subtraction&&&– :Unary minus, used for negating the values.|||+ :Unary plus, indicates positive value (numbers are positive without this, however). It performs an automatic conversion to int when the type of its operand is byte, char, or short. This is called unary numeric promotion.|||++ :Increment operator, used for incrementing the value by 1. There are two varieties of increment operator.Post-Increment: Value is first used for computing the result and then incremented.Pre-Increment: Value is incremented first and then result is computed.|||Post-Increment: Value is first used for computing the result and then incremented.|||Pre-Increment: Value is incremented first and then result is computed.|||— : Decrement operator, used for decrementing the value by 1. There are two varieties of decrement operator.Post-decrement : Value is first used for computing the result and then decremented.Pre-Decrement : Value is decremented first and then result is computed.|||Post-decrement : Value is first used for computing the result and then decremented.|||Pre-Decrement : Value is decremented first and then result is computed.|||! : Logical not operator, used for inverting a boolean value.&&&Post-Increment: Value is first used for computing the result and then incremented.|||Pre-Increment: Value is incremented first and then result is computed.&&&Post-decrement : Value is first used for computing the result and then decremented.|||Pre-Decrement : Value is decremented first and then result is computed.&&&In many cases assignment operator can be combined with other operators to build a shorter version of statement called Compound Statement. For example, instead of a = a+5, we can write a += 5.+=, for adding left operand with right operand and then assigning it to variable on the left.-=, for subtracting left operand with right operand and then assigning it to variable on the left.*=, for multiplying left operand with right operand and then assigning it to variable on the left./=, for dividing left operand with right operand and then assigning it to variable on the left.%=, for assigning modulo of left operand with right operand and then assigning it to variable on the left.|||+=, for adding left operand with right operand and then assigning it to variable on the left.|||-=, for subtracting left operand with right operand and then assigning it to variable on the left.|||*=, for multiplying left operand with right operand and then assigning it to variable on the left.|||/=, for dividing left operand with right operand and then assigning it to variable on the left.|||%=, for assigning modulo of left operand with right operand and then assigning it to variable on the left.|||Relational Operators : These operators are used to check for relations like equality, greater than, less than. They return boolean result after the comparison and are extensively used in looping statements as well as conditional if else statements. General format is,&&&+=, for adding left operand with right operand and then assigning it to variable on the left.|||-=, for subtracting left operand with right operand and then assigning it to variable on the left.|||*=, for multiplying left operand with right operand and then assigning it to variable on the left.|||/=, for dividing left operand with right operand and then assigning it to variable on the left.|||%=, for assigning modulo of left operand with right operand and then assigning it to variable on the left.&&&Some of the relational operators are-==, Equal to : returns true if left hand side is equal to right hand side.!=, Not Equal to : returns true if left hand side is not equal to right hand side.<, less than : returns true if left hand side is less than right hand side.<=, less than or equal to : returns true if left hand side is less than or equal to right hand side.>, Greater than : returns true if left hand side is greater than right hand side.>=, Greater than or equal to: returns true if left hand side is greater than or equal to right hand side.|||==, Equal to : returns true if left hand side is equal to right hand side.|||!=, Not Equal to : returns true if left hand side is not equal to right hand side.|||<, less than : returns true if left hand side is less than right hand side.|||<=, less than or equal to : returns true if left hand side is less than or equal to right hand side.|||>, Greater than : returns true if left hand side is greater than right hand side.|||>=, Greater than or equal to: returns true if left hand side is greater than or equal to right hand side.|||Logical Operators : These operators are used to perform “logical AND” and “logical OR” operation, i.e. the function similar to AND gate and OR gate in digital electronics. One thing to keep in mind is the second condition is not evaluated if the first one is false, i.e. it has a short-circuiting effect. Used extensively to test for several conditions for making a decision.Conditional operators are-&&, Logical AND : returns true when both conditions are true.||, Logical OR : returns true if at least one condition is true.|||&&, Logical AND : returns true when both conditions are true.|||||, Logical OR : returns true if at least one condition is true.|||Ternary operator : Ternary operator is a shorthand version of if-else statement. It has three operands and hence the name ternary. General format is-&&&==, Equal to : returns true if left hand side is equal to right hand side.|||!=, Not Equal to : returns true if left hand side is not equal to right hand side.|||<, less than : returns true if left hand side is less than right hand side.|||<=, less than or equal to : returns true if left hand side is less than or equal to right hand side.|||>, Greater than : returns true if left hand side is greater than right hand side.|||>=, Greater than or equal to: returns true if left hand side is greater than or equal to right hand side.&&&&&, Logical AND : returns true when both conditions are true.|||||, Logical OR : returns true if at least one condition is true.&&&Bitwise Operators : These operators are used to perform manipulation of individual bits of a number. They can be used with any of the integer types. They are used when performing update and query operations of Binary indexed tree.&, Bitwise AND operator: returns bit by bit AND of input values.|, Bitwise OR operator: returns bit by bit OR of input values.^, Bitwise XOR operator: returns bit by bit XOR of input values.~, Bitwise Complement Operator: This is a unary operator which returns the one’s complement representation of the input value, i.e. with all bits inversed.|||&, Bitwise AND operator: returns bit by bit AND of input values.||||, Bitwise OR operator: returns bit by bit OR of input values.|||^, Bitwise XOR operator: returns bit by bit XOR of input values.|||~, Bitwise Complement Operator: This is a unary operator which returns the one’s complement representation of the input value, i.e. with all bits inversed.|||Shift Operators : These operators are used to shift the bits of a number left or right thereby multiplying or dividing the number by two respectively. They can be used when we have to multiply or divide a number by two. General format-&&&&, Bitwise AND operator: returns bit by bit AND of input values.||||, Bitwise OR operator: returns bit by bit OR of input values.|||^, Bitwise XOR operator: returns bit by bit XOR of input values.|||~, Bitwise Complement Operator: This is a unary operator which returns the one’s complement representation of the input value, i.e. with all bits inversed.&&&<<, Left shift operator: shifts the bits of the number to the left and fills 0 on voids left as a result. Similar effect as of multiplying the number with some power of two.>>, Signed Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit depends on the sign of initial number. Similar effect as of dividing the number with some power of two.>>>, Unsigned Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit is set to 0.|||<<, Left shift operator: shifts the bits of the number to the left and fills 0 on voids left as a result. Similar effect as of multiplying the number with some power of two.|||>>, Signed Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit depends on the sign of initial number. Similar effect as of dividing the number with some power of two.|||>>>, Unsigned Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit is set to 0.|||instance of operator : Instance of operator is used for type checking. It can be used to test if an object is an instance of a class, a subclass or an interface. General format-&&&<<, Left shift operator: shifts the bits of the number to the left and fills 0 on voids left as a result. Similar effect as of multiplying the number with some power of two.|||>>, Signed Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit depends on the sign of initial number. Similar effect as of dividing the number with some power of two.|||>>>, Unsigned Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit is set to 0.&&&Precedence and Associativity: There is often a confusion when it comes to hybrid equations that is equations having multiple operators. The problem is which part to solve first. There is a golden rule to follow in these situations. If the operators have different precedence, solve the higher precedence first. If they have same precedence, solve according to associativity, that is either from right to left or from left to right. Explanation of below program is well written in comments withing the program itself.&&&Be a Compiler: Compiler in our systems uses lex tool to match the greatest match when generating tokens. This creates a bit of a problem if overlooked. For example, consider the statement a=b+++c;, to many of the readers this might seem to create compiler error. But this statement is absolutely correct as the token created by lex are a, =, b, ++, +, c. Therefore this statement has a similar effect of first assigning b+c to a and then incrementing b. Similarly, a=b+++++c; would generate error as tokens generated are a, =, b, ++, ++, +, c. which is actually an error as there is no operand after second unary operand.&&&Using + over (): When using + operator inside system.out.println() make sure to do addition using parenthesis. If we write something before doing addition, then string addition takes place, that is associativity of addition is left to right and hence integers are added to a string first producing a string, and string objects concatenate when using +, therefore it can create unwanted results.&&&&&&Arithmetic Operators|||Unary Operators|||Assignment Operator|||Relational Operators|||Logical Operators|||Ternary Operator|||Bitwise Operators|||Shift Operators|||instance of operator|||Precedence and Associativity|||Interesting Questions&&&']"
12,['Ways to read input from console in Java'],"['Java', 'Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/difference-between-scanner-and-bufferreader-class-in-java/', 'https://www.geeksforgeeks.org/command-line-arguments-in-java/', 'https://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['1.Using Buffered Reader Class', 'Implementation:', '2. Using Scanner Class', 'To see more differences, please see this article.', '3. Using Console Class', 'Advantages:', '4. Using Command line argument', 'Command Line Arguments:\xa0', 'Please refer this for more faster ways of reading input.']","['In Java, there are four different ways for reading input from the user in the command line environment(console).\xa0', 'This is the Java classical method to take input, Introduced in JDK1.0. This method is used by wrapping the System.in (standard input stream) in an InputStreamReader which is wrapped in a BufferedReader, we can read input from the user in the command line.\xa0', 'To read other types, we use functions like Integer.parseInt(), Double.parseDouble(). To read multiple values, we use split().', 'This is probably the most preferred method to take input. The main purpose of the Scanner class is to parse primitive types and strings using regular expressions, however, it is also can be used to read input from the user in the command line.\xa0', 'It has been becoming a preferred way for reading user’s input from the command line. In addition, it can be used for reading password-like input without echoing the characters entered by the user; the format string syntax can also be used (like System.out.printf()).\xa0']","['Most used user input for competitive coding. The command-line arguments are stored in the String format. The parseInt method of the Integer class converts string argument into Integer. Similarly, for float and others during execution. The usage of args[] comes into existence in this input form. The passing of information takes place during the program run. The command line is given to args[]. These programs have to be run on cmd.', 'This article is contributed by D Raj Ranu. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java program to demonstrate BufferedReaderimport java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;public class Test {    public static void main(String[] args)        throws IOException    {        // Enter data using BufferReader        BufferedReader reader = new BufferedReader(            new InputStreamReader(System.in));         // Reading data using readLine        String name = reader.readLine();         // Printing the read line        System.out.println(name);    }}', '// Java program to demonstrate working of Scanner in Javaimport java.util.Scanner; class GetInputFromUser {    public static void main(String args[])    {        // Using Scanner for Getting Input from User        Scanner in = new Scanner(System.in);         String s = in.nextLine();        System.out.println(""You entered string "" + s);         int a = in.nextInt();        System.out.println(""You entered integer "" + a);         float b = in.nextFloat();        System.out.println(""You entered float "" + b);                 // closing scanner          in.close();    }}', '// Java program to demonstrate working of System.console()// Note that this program does not work on IDEs as// System.console() may require consolepublic class Sample {    public static void main(String[] args)    {        // Using Console to input data from user        String name = System.console().readLine();         System.out.println(""You entered string "" + name);    }}', '// Program to check for command line argumentsclass Hello {    public static void main(String[] args)    {        // check if length of args array is        // greater than 0        if (args.length > 0) {            System.out.println(                ""The command line arguments are:"");             // iterating the args array and printing            // the command line arguments            for (String val : args)                System.out.println(val);        }        else            System.out.println(""No command line ""                               + ""arguments found."");    }}']","['Geek', 'Geek', 'GeeksforGeeks\n12\n3.4', 'You entered string GeeksforGeeks\nYou entered integer 12\nYou entered float 3.4', 'GeeksforGeeks', 'You entered string GeeksforGeeks', 'javac GFG1.java\njava Main Hello World', 'The command line arguments are:\nHello\nWorld']",[],"['The input is buffered for efficient reading.|||The wrapping code is hard to remember.&&&Convenient methods for parsing primitives (nextInt(), nextFloat(), …) from the tokenized input.|||Regular expressions can be used to find tokens.|||The reading methods are not synchronized&&&Reading password without echoing the entered characters.|||Reading methods are synchronized.|||Format string syntax can be used.|||Does not work in non-interactive environment (such as in an IDE).']"
13,"['Decision Making in Java (if, if-else, switch, break, continue, jump)']",[],[],"['https://media.geeksforgeeks.org/wp-content/uploads/if.png', 'https://media.geeksforgeeks.org/wp-content/uploads/if-else.png', 'https://media.geeksforgeeks.org/wp-content/uploads/nested-if-modified-1.png', 'https://media.geeksforgeeks.org/wp-content/uploads/if-elseif.png', 'https://media.geeksforgeeks.org/wp-content/uploads/switch-case.png', 'https://media.geeksforgeeks.org/wp-content/uploads/exit.png', 'https://media.geeksforgeeks.org/wp-content/uploads/continue-1.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/#if', 'https://www.geeksforgeeks.org/#if-else', 'https://www.geeksforgeeks.org/#nested-if', 'https://www.geeksforgeeks.org/#if-else-if', 'https://www.geeksforgeeks.org/#switch-case', 'https://www.geeksforgeeks.org/#jump', None, 'https://www.geeksforgeeks.org/java-if-statement-with-examples/', None, 'https://www.geeksforgeeks.org/java-if-else-statement-with-examples/', None, None, 'https://www.geeksforgeeks.org/java-if-else-if-ladder-with-examples/', None, 'https://www.geeksforgeeks.org/switch-statement-in-java/', None, 'https://www.geeksforgeeks.org/break-statement-in-java/', 'https://www.geeksforgeeks.org/return-keyword-java/', 'https://www.facebook.com/anuj0503', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Flow chart:Example:', 'Using break to exit a Loop', 'Using break as a Form of Goto']","['These statements allow you to control the flow of your program’s execution based upon conditions known only during run time.', 'Here, condition after evaluation will be either true or false. if statement accepts boolean values – if the value is true then it will execute the block of statements under it.If we do not provide the curly braces ‘{‘ and ‘}’ after if( condition ) then by default if statement will consider the immediate one statement to be inside its block. For example,', 'Using break, we can force immediate termination of a loop, bypassing the conditional expression and any remaining code in the body of the loop.Note: Break, when used inside a set of nested loops, will only break out of the innermost loop.Example:', 'Java does not have a goto statement because it provides a way to branch in an arbitrary and unstructured manner. Java uses label. A Label is use to identifies a block of code.Syntax:', 'Now, break statement can be use to jump out of target block.Note: You cannot break to any label which is not defined for an enclosing block.Syntax:', 'This article is contributed by Anuj Chauhan and Harsh Aggarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",['Decision Making in programming is similar to decision making in real life. In programming also we face some situations where we want a certain block of code to be executed when some condition is fulfilled.A programming language uses control statements to control the flow of execution of program based on certain conditions. These \xa0are used to cause the flow of execution to advance and branch based on changes to the state of a program.Java’s Selection statements:'],"['// Java program to illustrate If statementclass IfDemo{    public static void main(String args[])    {        int i = 10;          if (i > 15)            System.out.println(""10 is less than 15"");          // This statement will be executed        // as if considers one statement by default        System.out.println(""I am Not in if"");    }}', '// Java program to illustrate if-else statementclass IfElseDemo{    public static void main(String args[])    {        int i = 10;          if (i < 15)            System.out.println(""i is smaller than 15"");        else            System.out.println(""i is greater than 15"");    }}', '// Java program to illustrate nested-if statementclass NestedIfDemo{    public static void main(String args[])    {        int i = 10;          if (i == 10)        {            // First if statement            if (i < 15)                System.out.println(""i is smaller than 15"");              // Nested - if statement            // Will only be executed if statement above            // it is true            if (i < 12)                System.out.println(""i is smaller than 12 too"");            else                System.out.println(""i is greater than 15"");        }    }}', '// Java program to illustrate if-else-if ladderclass ifelseifDemo{    public static void main(String args[])    {        int i = 20;          if (i == 10)            System.out.println(""i is 10"");        else if (i == 15)            System.out.println(""i is 15"");        else if (i == 20)            System.out.println(""i is 20"");        else            System.out.println(""i is not present"");    }}', '// Java program to illustrate switch-caseclass SwitchCaseDemo{    public static void main(String args[])    {        int i = 9;        switch (i)        {        case 0:            System.out.println(""i is zero."");            break;        case 1:            System.out.println(""i is one."");            break;        case 2:            System.out.println(""i is two."");            break;        default:            System.out.println(""i is greater than 2."");        }    }}', '// Java program to illustrate using// break to exit a loopclass BreakLoopDemo{    public static void main(String args[])    {        // Initially loop is set to run from 0-9        for (int i = 0; i < 10; i++)        {            // terminate loop when i is 5.            if (i == 5)                break;              System.out.println(""i: "" + i);        }        System.out.println(""Loop complete."");    }}', '// Java program to illustrate using break with gotoclass BreakLabelDemo{    public static void main(String args[])    {        boolean t = true;          // label first        first:        {            // Illegal statement here as label second is not            // introduced yet break second;            second:            {                third:                {                    // Before break                    System.out.println(""Before the break statement"");                      // break will take the control out of                    // second label                    if (t)                        break second;                    System.out.println(""This won\'t execute."");                }                System.out.println(""This won\'t execute."");            }              // First block            System.out.println(""This is after second block."");        }    }}', '// Java program to illustrate using// continue in an if statementclass ContinueDemo{    public static void main(String args[])    {        for (int i = 0; i < 10; i++)        {            // If the number is even            // skip and continue            if (i%2 == 0)                continue;              // If number is odd, print it            System.out.print(i + "" "");        }    }}', '// Java program to illustrate using returnclass Return{    public static void main(String args[])    {        boolean t = true;        System.out.println(""Before the return."");              if (t)            return;          // Compiler will bypass every statement         // after return        System.out.println(""This won\'t execute."");    }}']","['if(condition) \n{\n   // Statements to execute if\n   // condition is true\n}', 'if(condition)\n   statement1;\n   statement2;\n\n// Here if the condition is true, if block \n// will consider only statement1 to be inside \n// its block.', 'I am Not in if', 'if (condition)\n{\n    // Executes this block if\n    // condition is true\n}\nelse\n{\n    // Executes this block if\n    // condition is false\n}', 'i is smaller than 15', 'if (condition1) \n{\n   // Executes when condition1 is true\n   if (condition2) \n   {\n      // Executes when condition2 is true\n   }\n}', 'i is smaller than 15\ni is smaller than 12 too', 'if (condition)\n    statement;\nelse if (condition)\n    statement;\n.\n.\nelse\n    statement;', 'i is 20', 'switch (expression)\n{\n  case value1:\n    statement1;\n    break;\n  case value2:\n    statement2;\n    break;\n  .\n  .\n  case valueN:\n    statementN;\n    break;\n  default:\n    statementDefault;\n}', 'i is greater than 2.', 'i: 0\ni: 1\ni: 2\ni: 3\ni: 4\nLoop complete.', 'label:\n{\n  statement1;\n  statement2;\n  statement3;\n  .\n  .\n}', 'break label;', 'Before the break.\nThis is after second block.', '1 3 5 7 9', 'Before the return.']",[],"['if|||if-else|||nested-if|||if-else-if|||switch-case|||jump – break, continue, returnThese statements allow you to control the flow of your program’s execution based upon conditions known only during run time.&&&if: if statement is the most simple decision making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.Syntax:if(condition) \n{\n   // Statements to execute if\n   // condition is true\n}\nHere, condition after evaluation will be either true or false. if statement accepts boolean values – if the value is true then it will execute the block of statements under it.If we do not provide the curly braces ‘{‘ and ‘}’ after if( condition ) then by default if statement will consider the immediate one statement to be inside its block. For example,if(condition)\n   statement1;\n   statement2;\n\n// Here if the condition is true, if block \n// will consider only statement1 to be inside \n// its block.Flow chart:Example:// Java program to illustrate If statementclass IfDemo{public static void main(String args[]){int i = 10;if (i > 15)System.out.println(""10 is less than 15"");// This statement will be executed// as if considers one statement by defaultSystem.out.println(""I am Not in if"");}}Output:I am Not in if\n|||if-else: The if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won’t. But what if we want to do something else if the condition is false. Here comes the else statement. We can use the else statement with if statement to execute a block of code when the condition is false.Syntax:if (condition)\n{\n    // Executes this block if\n    // condition is true\n}\nelse\n{\n    // Executes this block if\n    // condition is false\n}\nExample:// Java program to illustrate if-else statementclass IfElseDemo{public static void main(String args[]){int i = 10;if (i < 15)System.out.println(""i is smaller than 15"");elseSystem.out.println(""i is greater than 15"");}}Output:i is smaller than 15|||nested-if: A nested if is an if statement that is the target of another if or else. Nested if statements means an if statement inside an if statement. Yes, java allows us to nest if statements within if statements. i.e, we can place an if statement inside another if statement.Syntax:if (condition1) \n{\n   // Executes when condition1 is true\n   if (condition2) \n   {\n      // Executes when condition2 is true\n   }\n}\nExample:// Java program to illustrate nested-if statementclass NestedIfDemo{public static void main(String args[]){int i = 10;if (i == 10){// First if statementif (i < 15)System.out.println(""i is smaller than 15"");// Nested - if statement// Will only be executed if statement above// it is trueif (i < 12)System.out.println(""i is smaller than 12 too"");elseSystem.out.println(""i is greater than 15"");}}}Output:i is smaller than 15\ni is smaller than 12 too\n|||if-else-if ladder: Here, a user can decide among multiple options.The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final else statement will be executed.if (condition)\n    statement;\nelse if (condition)\n    statement;\n.\n.\nelse\n    statement;\nExample:// Java program to illustrate if-else-if ladderclass ifelseifDemo{public static void main(String args[]){int i = 20;if (i == 10)System.out.println(""i is 10"");else if (i == 15)System.out.println(""i is 15"");else if (i == 20)System.out.println(""i is 20"");elseSystem.out.println(""i is not present"");}}Output:i is 20\n|||switch-case The switch statement is a multiway branch statement. It provides an easy way to dispatch execution to different parts of code based on the value of the expression.Syntax:switch (expression)\n{\n  case value1:\n    statement1;\n    break;\n  case value2:\n    statement2;\n    break;\n  .\n  .\n  case valueN:\n    statementN;\n    break;\n  default:\n    statementDefault;\n}Expression can be of type byte, short, int char or an enumeration. Beginning with JDK7, expression can also be of type String.Dulplicate case values are not allowed.The default statement is optional.The break statement is used inside the switch to terminate a statement sequence.The break statement is optional. If omitted, execution will continue on into the next case.Example:// Java program to illustrate switch-caseclass SwitchCaseDemo{public static void main(String args[]){int i = 9;switch (i){case 0:System.out.println(""i is zero."");break;case 1:System.out.println(""i is one."");break;case 2:System.out.println(""i is two."");break;default:System.out.println(""i is greater than 2."");}}}Output:i is greater than 2.\n|||Expression can be of type byte, short, int char or an enumeration. Beginning with JDK7, expression can also be of type String.|||Dulplicate case values are not allowed.|||The default statement is optional.|||The break statement is used inside the switch to terminate a statement sequence.|||The break statement is optional. If omitted, execution will continue on into the next case.|||jump: Java supports three jump statement: break, continue and return. These three statements transfer control to other part of the program.Break: In Java, break is majorly used for:Terminate a sequence in a switch statement (discussed above).To exit a loop.Used as a “civilized” form of goto.Using break to exit a LoopUsing break, we can force immediate termination of a loop, bypassing the conditional expression and any remaining code in the body of the loop.Note: Break, when used inside a set of nested loops, will only break out of the innermost loop.Example:// Java program to illustrate using// break to exit a loopclass BreakLoopDemo{public static void main(String args[]){// Initially loop is set to run from 0-9for (int i = 0; i < 10; i++){// terminate loop when i is 5.if (i == 5)break;System.out.println(""i: "" + i);}System.out.println(""Loop complete."");}}Output:i: 0\ni: 1\ni: 2\ni: 3\ni: 4\nLoop complete.\nUsing break as a Form of GotoJava does not have a goto statement because it provides a way to branch in an arbitrary and unstructured manner. Java uses label. A Label is use to identifies a block of code.Syntax:label:\n{\n  statement1;\n  statement2;\n  statement3;\n  .\n  .\n}Now, break statement can be use to jump out of target block.Note: You cannot break to any label which is not defined for an enclosing block.Syntax:break label;Example:// Java program to illustrate using break with gotoclass BreakLabelDemo{public static void main(String args[]){boolean t = true;// label firstfirst:{// Illegal statement here as label second is not// introduced yet break second;second:{third:{// Before breakSystem.out.println(""Before the break statement"");// break will take the control out of// second labelif (t)break second;System.out.println(""This won\'t execute."");}System.out.println(""This won\'t execute."");}// First blockSystem.out.println(""This is after second block."");}}}Output:Before the break.\nThis is after second block.\nContinue: Sometimes it is useful to force an early iteration of a loop. That is, you might want to continue running the loop but stop processing the remainder of the code in its body for this particular iteration. This is, in effect, a goto just past the body of the loop, to the loop’s end. The continue statement performs such an action.Example:// Java program to illustrate using// continue in an if statementclass ContinueDemo{public static void main(String args[]){for (int i = 0; i < 10; i++){// If the number is even// skip and continueif (i%2 == 0)continue;// If number is odd, print itSystem.out.print(i + "" "");}}}Output:1 3 5 7 9 \nReturn:The return statement is used to explicitly return from a method. That is, it causes a program control to transfer back to the caller of the method.Example:// Java program to illustrate using returnclass Return{public static void main(String args[]){boolean t = true;System.out.println(""Before the return."");if (t)return;// Compiler will bypass every statement// after returnSystem.out.println(""This won\'t execute."");}}Output:Before the return.\n|||Break: In Java, break is majorly used for:Terminate a sequence in a switch statement (discussed above).To exit a loop.Used as a “civilized” form of goto.Using break to exit a LoopUsing break, we can force immediate termination of a loop, bypassing the conditional expression and any remaining code in the body of the loop.Note: Break, when used inside a set of nested loops, will only break out of the innermost loop.Example:// Java program to illustrate using// break to exit a loopclass BreakLoopDemo{public static void main(String args[]){// Initially loop is set to run from 0-9for (int i = 0; i < 10; i++){// terminate loop when i is 5.if (i == 5)break;System.out.println(""i: "" + i);}System.out.println(""Loop complete."");}}Output:i: 0\ni: 1\ni: 2\ni: 3\ni: 4\nLoop complete.\nUsing break as a Form of GotoJava does not have a goto statement because it provides a way to branch in an arbitrary and unstructured manner. Java uses label. A Label is use to identifies a block of code.Syntax:label:\n{\n  statement1;\n  statement2;\n  statement3;\n  .\n  .\n}Now, break statement can be use to jump out of target block.Note: You cannot break to any label which is not defined for an enclosing block.Syntax:break label;Example:// Java program to illustrate using break with gotoclass BreakLabelDemo{public static void main(String args[]){boolean t = true;// label firstfirst:{// Illegal statement here as label second is not// introduced yet break second;second:{third:{// Before breakSystem.out.println(""Before the break statement"");// break will take the control out of// second labelif (t)break second;System.out.println(""This won\'t execute."");}System.out.println(""This won\'t execute."");}// First blockSystem.out.println(""This is after second block."");}}}Output:Before the break.\nThis is after second block.\n|||Terminate a sequence in a switch statement (discussed above).|||To exit a loop.|||Used as a “civilized” form of goto.|||Continue: Sometimes it is useful to force an early iteration of a loop. That is, you might want to continue running the loop but stop processing the remainder of the code in its body for this particular iteration. This is, in effect, a goto just past the body of the loop, to the loop’s end. The continue statement performs such an action.Example:// Java program to illustrate using// continue in an if statementclass ContinueDemo{public static void main(String args[]){for (int i = 0; i < 10; i++){// If the number is even// skip and continueif (i%2 == 0)continue;// If number is odd, print itSystem.out.print(i + "" "");}}}Output:1 3 5 7 9 \n|||Return:The return statement is used to explicitly return from a method. That is, it causes a program control to transfer back to the caller of the method.Example:// Java program to illustrate using returnclass Return{public static void main(String args[]){boolean t = true;System.out.println(""Before the return."");if (t)return;// Compiler will bypass every statement// after returnSystem.out.println(""This won\'t execute."");}}Output:Before the return.\n&&&Expression can be of type byte, short, int char or an enumeration. Beginning with JDK7, expression can also be of type String.|||Dulplicate case values are not allowed.|||The default statement is optional.|||The break statement is used inside the switch to terminate a statement sequence.|||The break statement is optional. If omitted, execution will continue on into the next case.&&&Terminate a sequence in a switch statement (discussed above).|||To exit a loop.|||Used as a “civilized” form of goto.&&&&&&Break: In Java, break is majorly used for:Terminate a sequence in a switch statement (discussed above).To exit a loop.Used as a “civilized” form of goto.Using break to exit a LoopUsing break, we can force immediate termination of a loop, bypassing the conditional expression and any remaining code in the body of the loop.Note: Break, when used inside a set of nested loops, will only break out of the innermost loop.Example:// Java program to illustrate using// break to exit a loopclass BreakLoopDemo{public static void main(String args[]){// Initially loop is set to run from 0-9for (int i = 0; i < 10; i++){// terminate loop when i is 5.if (i == 5)break;System.out.println(""i: "" + i);}System.out.println(""Loop complete."");}}Output:i: 0\ni: 1\ni: 2\ni: 3\ni: 4\nLoop complete.\nUsing break as a Form of GotoJava does not have a goto statement because it provides a way to branch in an arbitrary and unstructured manner. Java uses label. A Label is use to identifies a block of code.Syntax:label:\n{\n  statement1;\n  statement2;\n  statement3;\n  .\n  .\n}Now, break statement can be use to jump out of target block.Note: You cannot break to any label which is not defined for an enclosing block.Syntax:break label;Example:// Java program to illustrate using break with gotoclass BreakLabelDemo{public static void main(String args[]){boolean t = true;// label firstfirst:{// Illegal statement here as label second is not// introduced yet break second;second:{third:{// Before breakSystem.out.println(""Before the break statement"");// break will take the control out of// second labelif (t)break second;System.out.println(""This won\'t execute."");}System.out.println(""This won\'t execute."");}// First blockSystem.out.println(""This is after second block."");}}}Output:Before the break.\nThis is after second block.\n|||Terminate a sequence in a switch statement (discussed above).|||To exit a loop.|||Used as a “civilized” form of goto.|||Continue: Sometimes it is useful to force an early iteration of a loop. That is, you might want to continue running the loop but stop processing the remainder of the code in its body for this particular iteration. This is, in effect, a goto just past the body of the loop, to the loop’s end. The continue statement performs such an action.Example:// Java program to illustrate using// continue in an if statementclass ContinueDemo{public static void main(String args[]){for (int i = 0; i < 10; i++){// If the number is even// skip and continueif (i%2 == 0)continue;// If number is odd, print itSystem.out.print(i + "" "");}}}Output:1 3 5 7 9 \n|||Return:The return statement is used to explicitly return from a method. That is, it causes a program control to transfer back to the caller of the method.Example:// Java program to illustrate using returnclass Return{public static void main(String args[]){boolean t = true;System.out.println(""Before the return."");if (t)return;// Compiler will bypass every statement// after returnSystem.out.println(""This won\'t execute."");}}Output:Before the return.\n&&&']"
14,['Loops in Java'],[],[],"['https://media.geeksforgeeks.org/wp-content/uploads/Loop1.png', 'https://media.geeksforgeeks.org/wp-content/uploads/loop2.png', 'https://media.geeksforgeeks.org/wp-content/uploads/loop3.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-while-loop-with-examples/', 'https://media.geeksforgeeks.org/wp-content/uploads/Loop1.png', 'https://www.geeksforgeeks.org/java-for-loop-with-examples/', 'https://www.geeksforgeeks.org/java-do-while-loop-with-examples/', 'https://media.geeksforgeeks.org/wp-content/uploads/loop3.png', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Flowchart:', 'Flowchart:', 'Enhanced For loop', 'Flowchart:', 'Pitfalls of Loops']","['Looping in programming languages is a feature which facilitates the execution of a set of instructions/functions repeatedly while some condition evaluates to true.Java provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.', 'Lets take an example to demonstrate how enhanced for loop can be used to simplify the work. Suppose there is an array of names and we want to print all the names in that array. Let’s see the difference between these two examplesEnhanced for loop simplifies the work as follows-', 'This article is contributed by Rishabh Mahrsee. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['Java also includes another version of for loop introduced in Java 5. Enhanced for loop provides a simpler way to iterate through the elements of a collection or array. It is inflexible and should be used only when there is a need to iterate through the elements in a sequential manner without knowing the index of the currently processed element.Also note that the object/variable is immutable when enhanced for loop is used i.e it ensures that the values in the array can not be modified, so it can be said as read-only loop where you can’t update the values as opposite to other loops where values can be modified.We recommend using this form of the for statement instead of the general form whenever possible.(as per JAVA doc.)Syntax:']","['// Java program to illustrate while loopclass whileLoopDemo{    public static void main(String args[])    {        int x = 1;          // Exit when x becomes greater than 4        while (x <= 4)        {            System.out.println(""Value of x:"" + x);              // Increment the value of x for            // next iteration            x++;        }    }}', '// Java program to illustrate for loop.class forLoopDemo{    public static void main(String args[])    {        // for loop begins when x=2        // and runs till x <=4        for (int x = 2; x <= 4; x++)            System.out.println(""Value of x:"" + x);    }}', '// Java program to illustrate enhanced for looppublic class enhancedforloop{    public static void main(String args[])    {        String array[] = {""Ron"", ""Harry"", ""Hermoine""};          //enhanced for loop        for (String x:array)        {            System.out.println(x);        }          /* for loop for same function        for (int i = 0; i < array.length; i++)        {            System.out.println(array[i]);        }        */    }}', '// Java program to illustrate do-while loopclass dowhileloopDemo{    public static void main(String args[])    {        int x = 21;        do        {            // The line will be printed even            // if the condition is false            System.out.println(""Value of x:"" + x);            x++;        }        while (x < 20);    }}', '//Java program to illustrate various pitfalls.public class LooppitfallsDemo{    public static void main(String[] args)    {          // infinite loop because condition is not apt        // condition should have been i>0.        for (int i = 5; i != 0; i -= 2)        {            System.out.println(i);        }        int x = 5;          // infinite loop because update statement        // is not provided.        while (x == 5)        {            System.out.println(""In the loop"");        }    }}', '//Java program for out of memory exception.import java.util.ArrayList;public class Integer1{    public static void main(String[] args)    {        ArrayList<Integer> ar = new ArrayList<>();        for (int i = 0; i < Integer.MAX_VALUE; i++)        {            ar.add(i);        }    }}']","['while (boolean condition)\n{\n   loop statements...\n}', 'Value of x:1\nValue of x:2\nValue of x:3\nValue of x:4', 'for (initialization condition; testing condition; \n                              increment/decrement)\n{\n    statement(s)\n}', 'Value of x:2\nValue of x:3\nValue of x:4', 'for (T element:Collection obj/array)\n{\n    statement(s)\n}', 'Ron\nHarry\nHermoine', 'do\n{\n    statements..\n}\nwhile (condition);', 'Value of x: 21', 'Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space\nat java.util.Arrays.copyOf(Unknown Source)\nat java.util.Arrays.copyOf(Unknown Source)\nat java.util.ArrayList.grow(Unknown Source)\nat java.util.ArrayList.ensureCapacityInternal(Unknown Source)\nat java.util.ArrayList.add(Unknown Source)\nat article.Integer1.main(Integer1.java:9)']",[],"['While loop starts with the checking of condition. If it evaluated to true, then the loop body statements are executed otherwise first statement following the loop is executed. For this reason it is also called Entry control loop|||Once the condition is evaluated to true, the statements in the loop body are executed. Normally the statements contain an update value for the variable being processed for the next iteration.|||When the condition becomes false, the loop terminates which marks the end of its life cycle.&&&&&&while loop: A while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement.Syntax :while (boolean condition)\n{\n   loop statements...\n}\nFlowchart:While loop starts with the checking of condition. If it evaluated to true, then the loop body statements are executed otherwise first statement following the loop is executed. For this reason it is also called Entry control loopOnce the condition is evaluated to true, the statements in the loop body are executed. Normally the statements contain an update value for the variable being processed for the next iteration.When the condition becomes false, the loop terminates which marks the end of its life cycle.// Java program to illustrate while loopclass whileLoopDemo{public static void main(String args[]){int x = 1;// Exit when x becomes greater than 4while (x <= 4){System.out.println(""Value of x:"" + x);// Increment the value of x for// next iterationx++;}}}Output:Value of x:1\nValue of x:2\nValue of x:3\nValue of x:4\n|||While loop starts with the checking of condition. If it evaluated to true, then the loop body statements are executed otherwise first statement following the loop is executed. For this reason it is also called Entry control loop|||Once the condition is evaluated to true, the statements in the loop body are executed. Normally the statements contain an update value for the variable being processed for the next iteration.|||When the condition becomes false, the loop terminates which marks the end of its life cycle.|||for loop: for loop provides a concise way of writing the loop structure. Unlike a while loop, a for statement consumes the initialization, condition and increment/decrement in one line thereby providing a shorter, easy to debug structure of looping.Syntax:for (initialization condition; testing condition; \n                              increment/decrement)\n{\n    statement(s)\n}\nFlowchart:Initialization condition: Here, we initialize the variable in use. It marks the start of a for loop. An already declared variable can be used or a variable can be declared, local to loop only.Testing Condition: It is used for testing the exit condition for a loop. It must return a boolean value. It is also an Entry Control Loop as the condition is checked prior to the execution of the loop statements.Statement execution: Once the condition is evaluated to true, the statements in the loop body are executed.Increment/ Decrement: It is used for updating the variable for next iteration.Loop termination:When the condition becomes false, the loop terminates marking the end of its life cycle.// Java program to illustrate for loop.class forLoopDemo{public static void main(String args[]){// for loop begins when x=2// and runs till x <=4for (int x = 2; x <= 4; x++)System.out.println(""Value of x:"" + x);}}Output:Value of x:2\nValue of x:3\nValue of x:4\nEnhanced For loopJava also includes another version of for loop introduced in Java 5. Enhanced for loop provides a simpler way to iterate through the elements of a collection or array. It is inflexible and should be used only when there is a need to iterate through the elements in a sequential manner without knowing the index of the currently processed element.Also note that the object/variable is immutable when enhanced for loop is used i.e it ensures that the values in the array can not be modified, so it can be said as read-only loop where you can’t update the values as opposite to other loops where values can be modified.We recommend using this form of the for statement instead of the general form whenever possible.(as per JAVA doc.)Syntax:for (T element:Collection obj/array)\n{\n    statement(s)\n}\nLets take an example to demonstrate how enhanced for loop can be used to simplify the work. Suppose there is an array of names and we want to print all the names in that array. Let’s see the difference between these two examplesEnhanced for loop simplifies the work as follows-// Java program to illustrate enhanced for looppublic class enhancedforloop{public static void main(String args[]){String array[] = {""Ron"", ""Harry"", ""Hermoine""};//enhanced for loopfor (String x:array){System.out.println(x);}/* for loop for same functionfor (int i = 0; i < array.length; i++){System.out.println(array[i]);}*/}}Output:Ron\nHarry\nHermoine\n|||Initialization condition: Here, we initialize the variable in use. It marks the start of a for loop. An already declared variable can be used or a variable can be declared, local to loop only.|||Testing Condition: It is used for testing the exit condition for a loop. It must return a boolean value. It is also an Entry Control Loop as the condition is checked prior to the execution of the loop statements.|||Statement execution: Once the condition is evaluated to true, the statements in the loop body are executed.|||Increment/ Decrement: It is used for updating the variable for next iteration.|||Loop termination:When the condition becomes false, the loop terminates marking the end of its life cycle.|||do while: do while loop is similar to while loop with only difference that it checks for condition after executing the statements, and therefore is an example of Exit Control Loop.Syntax:do\n{\n    statements..\n}\nwhile (condition);\nFlowchart:do while loop starts with the execution of the statement(s). There is no checking of any condition for the first time.After the execution of the statements, and update of the variable value, the condition is checked for true or false value. If it is evaluated to true, next iteration of loop starts.When the condition becomes false, the loop terminates which marks the end of its life cycle.It is important to note that the do-while loop will execute its statements atleast once before any condition is checked, and therefore is an example of exit control loop.// Java program to illustrate do-while loopclass dowhileloopDemo{public static void main(String args[]){int x = 21;do{// The line will be printed even// if the condition is falseSystem.out.println(""Value of x:"" + x);x++;}while (x < 20);}}Output:Value of x: 21\n|||do while loop starts with the execution of the statement(s). There is no checking of any condition for the first time.|||After the execution of the statements, and update of the variable value, the condition is checked for true or false value. If it is evaluated to true, next iteration of loop starts.|||When the condition becomes false, the loop terminates which marks the end of its life cycle.|||It is important to note that the do-while loop will execute its statements atleast once before any condition is checked, and therefore is an example of exit control loop.&&&Initialization condition: Here, we initialize the variable in use. It marks the start of a for loop. An already declared variable can be used or a variable can be declared, local to loop only.|||Testing Condition: It is used for testing the exit condition for a loop. It must return a boolean value. It is also an Entry Control Loop as the condition is checked prior to the execution of the loop statements.|||Statement execution: Once the condition is evaluated to true, the statements in the loop body are executed.|||Increment/ Decrement: It is used for updating the variable for next iteration.|||Loop termination:When the condition becomes false, the loop terminates marking the end of its life cycle.&&&do while loop starts with the execution of the statement(s). There is no checking of any condition for the first time.|||After the execution of the statements, and update of the variable value, the condition is checked for true or false value. If it is evaluated to true, next iteration of loop starts.|||When the condition becomes false, the loop terminates which marks the end of its life cycle.|||It is important to note that the do-while loop will execute its statements atleast once before any condition is checked, and therefore is an example of exit control loop.&&&Infinite loop: One of the most common mistakes while implementing any sort of looping is that that it may not ever exit, that is the loop runs for infinite time. This happens when the condition fails for some reason.Examples://Java program to illustrate various pitfalls.public class LooppitfallsDemo{public static void main(String[] args){// infinite loop because condition is not apt// condition should have been i>0.for (int i = 5; i != 0; i -= 2){System.out.println(i);}int x = 5;// infinite loop because update statement// is not provided.while (x == 5){System.out.println(""In the loop"");}}}|||Another pitfall is that you might be adding something into you collection object through loop and you can run out of memory. If you try and execute the below program, after some time, out of memory exception will be thrown.//Java program for out of memory exception.import java.util.ArrayList;public class Integer1{public static void main(String[] args){ArrayList<Integer> ar = new ArrayList<>();for (int i = 0; i < Integer.MAX_VALUE; i++){ar.add(i);}}}Output:Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space\nat java.util.Arrays.copyOf(Unknown Source)\nat java.util.Arrays.copyOf(Unknown Source)\nat java.util.ArrayList.grow(Unknown Source)\nat java.util.ArrayList.ensureCapacityInternal(Unknown Source)\nat java.util.ArrayList.add(Unknown Source)\nat article.Integer1.main(Integer1.java:9)\n&&&']"
15,['Java For loop with Examples'],"['Java', 'Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/20191108131134/For-Loop.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/20191108124925/java-for-loop.png']",['https://www.youtube.com/embed/JkSQ8KtOA14?feature=oembed'],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/loops-in-java/', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/loops-in-java/', 'https://www.geeksforgeeks.org/loop-java-important-points/', 'https://www.geeksforgeeks.org/understanding-for-loops-in-java/', 'https://www.geeksforgeeks.org/java-while-loop-with-examples/', 'https://www.geeksforgeeks.org/java-do-while-loop-with-examples/', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/difference-between-for-and-while-loop-in-c-c-java/', 'https://www.geeksforgeeks.org/difference-between-for-and-do-while-loop-in-c-c-java/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['The various parts of the For loop are:\xa0\xa0', 'How does a For loop execute?\xa0\xa0', 'Flow chart for loop (For Control Flow):\xa0\xa0', 'Example 1: This program will try to print “Hello World” 5 times.\xa0\xa0', 'Dry-Running Example 1: The program will execute in the following manner.\xa0\xa0', 'Example 2: The following program prints the sum of x ranging from 1 to 20.\xa0\xa0', 'Enhanced For Loop or Java For-Each loop']","['Loops in Java come into use when we need to repeatedly execute a block of statements.\xa0Java for loop provides a concise way of writing the loop structure. The for statement consumes the initialization, condition and increment/decrement in one line thereby providing a shorter, easy to debug structure of looping.\xa0', '1. Initialization Expression: In this expression, we have to initialize the loop counter to some value.\xa0Example:\xa0\xa0', '2. Test Expression: In this expression, we have to test the condition. If the condition evaluates to true then, we will execute the body of the loop and go to update expression. Otherwise, we will exit from the for loop.\xa0Example:\xa0\xa0', '3. Update Expression: After executing the loop body, this expression increments/decrements the loop variable by some value.\xa0Example:\xa0\xa0', 'Let’s take an example to demonstrate how enhanced for loop can be used to simplify the work. Suppose there is an array of names and we want to print all the names in that array. Let’s see the difference between these two examples by this simple implementation:\xa0\xa0', 'Recommendation: Use this form of statement instead of the general form whenever possible. (as per JAVA doc.)\xa0\xa0']","['Java also includes another version of for loop introduced in Java 5. Enhanced for loop provides a simpler way to iterate through the elements of a collection or array. It is inflexible and should be used only when there is a need to iterate through the elements in a sequential manner without knowing the index of the currently processed element.Note: The object/variable is immutable when enhanced for loop is used i.e it ensures that the values in the array can not be modified, so it can be said as a read-only loop where you can’t update the values as opposed to other loops where values can be modified.\xa0Syntax:\xa0']","['// Java program to illustrate for loopclass forLoopDemo {    public static void main(String args[])    {        // Writing a for loop        // to print Hello World 5 times        for (int i = 1; i <= 5; i++)            System.out.println(""Hello World"");    }}', '// Java program to illustrate for loop.class forLoopDemo {    public static void main(String args[])    {        int sum = 0;          // for loop begins        // and runs till x <= 20        for (int x = 1; x <= 20; x++) {            sum = sum + x;        }        System.out.println(""Sum: "" + sum);    }}', '// Java program to illustrate enhanced for loop  public class enhancedforloop {      public static void main(String args[])    {        String array[] = { ""Ron"", ""Harry"", ""Hermoine"" };          // enhanced for loop        for (String x : array) {            System.out.println(x);        }          /* for loop for same function         for (int i = 0; i < array.length; i++)         {             System.out.println(array[i]);         }         */    }}']","['for (initialization expr; test expr; update exp)\n{\n     // body of the loop\n     // statements we want to execute\n}', 'int i=1;', 'i <= 10', 'i++;', 'Output:\n\nHello World\nHello World\nHello World\nHello World\nHello World', '1. Program starts.\n2. i is initialized with value 1.\n3. Condition is checked. 1 <= 5 yields true.\n  3.a) ""Hello World"" gets printed 1st time.\n  3.b) Updation is done. Now i = 2.\n4. Condition is checked. 2 <= 5 yields true.\n  4.a) ""Hello World"" gets printed 2nd time.\n  4.b) Updation is done. Now i = 3.\n5. Condition is checked. 3 <= 5 yields true.\n  5.a) ""Hello World"" gets printed 3rd time\n  5.b) Updation is done. Now i = 4.\n6. Condition is checked. 4 <= 5 yields true.\n  6.a) ""Hello World"" gets printed 4th time\n  6.b) Updation is done. Now i = 5.\n7. Condition is checked. 5 <= 5 yields true.\n  7.a) ""Hello World"" gets printed 5th time\n  7.b) Updation is done. Now i = 6.\n8. Condition is checked. 6 <= 5 yields false.\n9. Flow goes outside the loop. Program terminates.', 'Sum: 210', 'for (T element:Collection obj/array)\n{\n    // loop body\n    // statement(s)\n}', 'Ron\nHarry\nHermoine']",[],"['Control falls into the for loop. Initialization is done|||The flow jumps to Condition|||Condition is tested.If Condition yields true, the flow goes into the BodyIf Condition yields false, the flow goes outside the loop|||If Condition yields true, the flow goes into the Body|||If Condition yields false, the flow goes outside the loop|||The statements inside the body of the loop get executed.|||The flow goes to the Updation|||Updation takes place and the flow goes to Step 3 again|||The for loop has ended and the flow has gone outside.&&&If Condition yields true, the flow goes into the Body|||If Condition yields false, the flow goes outside the loop&&&Loops in Java|||For Loop in Java | Important points|||Understanding for loops in Java|||Java while loop with Examples|||Java do-while loop with Examples|||For-each loop in Java|||Difference between for and while loop in C, C++, Java|||Difference between for and do-while loop in C, C++, Java']"
16,['For-each loop in Java'],"['Java', 'Java']",[],[],['https://www.youtube.com/embed/DUVqtwVJ3DI?feature=oembed'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/', 'https://www.geeksforgeeks.org/g-fact-40-foreach-in-c-and-java/', 'https://www.geeksforgeeks.org/iterator-vs-foreach-in-java/', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['is equivalent to:\xa0\xa0', 'Limitations of for-each loop\xa0\xa0 \xa0 \xa0 \xa0decision-making', '\xa0 \xa0 \xa0 \xa0 3. \xa0For-each only iterates forward over the array in single steps\xa0\xa0', '\xa0 \xa0 \xa0 \xa0 4. For-each cannot process two decision making statements at once\xa0\xa0', '\xa0 \xa0 \xa0 \xa0 5. For-each also has some performance overhead over simple iteration:\xa0']","['Prerequisite: Decision making in JavaFor-each is another array traversing technique like for loop, while loop, do-while loop introduced in Java5.\xa0\xa0', '\xa0 \xa0 \xa0 \xa02. For-each loops do not keep track of index. So we can not obtain array index using For-Each loop\xa0\xa0', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['?list=PLqM7alHXFySF5ErEHA1BXgibGg7uqmA4_\xa0Related Articles:\xa0For-each in C++ vs Java\xa0Iterator vs For-each in JavaThis article is contributed by Abhishek Verma. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program to illustrate// for-each loopclass For_Each    {    public static void main(String[] arg)    {        {            int[] marks = { 125, 132, 95, 116, 110 };                         int highest_marks = maximum(marks);            System.out.println(""The highest score is "" + highest_marks);        }    }    public static int maximum(int[] numbers)    {        int maxSoFar = numbers[0];                 // for each loop        for (int num : numbers)        {            if (num > maxSoFar)            {                maxSoFar = num;            }        }    return maxSoFar;    }}', '/*package whatever //do not write package name here */ import java.io.*;import java.util.*; class GFG {    public static void main (String[] args) {        List<Integer> list = new ArrayList<>();        long startTime;        long endTime;        for (int i = 0; i < 1000000; i++) {            list.add(i);        }        // Type 1        startTime = Calendar.getInstance().getTimeInMillis();        for (int i : list) {            int a = i;        }        endTime = Calendar.getInstance().getTimeInMillis();        System.out.println(""For each loop :: "" + (endTime - startTime) + "" ms"");                 // Type 2        startTime = Calendar.getInstance().getTimeInMillis();        for (int j = 0; j < list.size(); j++) {            int a = list.get(j);        }        endTime = Calendar.getInstance().getTimeInMillis();        System.out.println(""Using collection.size() :: "" + (endTime - startTime) + "" ms"");                 // Type 3        startTime = Calendar.getInstance().getTimeInMillis();        int size = list.size();        for (int j = 0; j < size; j++) {            int a = list.get(j);        }        endTime = Calendar.getInstance().getTimeInMillis();        System.out.println(""By calculating collection.size() first :: "" + (endTime - startTime) + "" ms"");             // Type 4        startTime = Calendar.getInstance().getTimeInMillis();        for(int j = list.size()-1; j >= 0; j--) {            int a = list.get(j);        }        endTime = Calendar.getInstance().getTimeInMillis();        System.out.println(""Using [int j = list.size(); j > size ; j--] :: "" + (endTime - startTime) + "" ms"");    }} // This code is contributed by Ayush Choudhary @gfg(code_ayush)']","['for (type var : array) \n{ \n    statements using var;\n}', 'for (int i=0; i<arr.length; i++) \n{ \n    type var = arr[i];\n    statements using var;\n}', 'The highest score is 132', 'for (int num : marks) \n{\n    // only changes num, not the array element\n    num = num*2; \n}', 'for (int num : numbers) \n{ \n    if (num == target) \n    {\n        return ???;   // do not know the index of num\n    }\n}', '// cannot be converted to a for-each loop\nfor (int i=numbers.length-1; i>0; i--) \n{\n      System.out.println(numbers[i]);\n}', '// cannot be easily converted to a for-each loop \nfor (int i=0; i<numbers.length; i++) \n{\n    if (numbers[i] == arr[i]) \n    { ...\n    } \n}']",[],"['It starts with the keyword for like a normal for-loop.|||Instead of declaring and initializing a loop counter variable, you declare a variable that is the same type as the base type of the array, followed by a colon, which is then followed by the array name.|||In the loop body, you can use the loop variable you created rather than using an indexed array element.|||It’s commonly used to iterate over an array or a Collections class (eg, ArrayList)&&&&&&For-each loops are not appropriate when you want to modify the array:&&&']"
17,['Java while loop with Examples'],[],[],"['https://media.geeksforgeeks.org/wp-content/uploads/20191118164726/While-Loop-GeeksforGeeks.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/20191108120545/Java-while-loop.png']",['https://www.youtube.com/embed/xBJ44A1FCTE?list=PLqM7alHXFySF5ErEHA1BXgibGg7uqmA4_'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/loops-in-java/', 'https://media.geeksforgeeks.org/wp-content/uploads/20191118164726/While-Loop-GeeksforGeeks.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/20191108120545/Java-while-loop.png', 'https://www.geeksforgeeks.org/loops-in-java/', 'https://www.geeksforgeeks.org/java-for-loop-with-examples/', 'https://www.geeksforgeeks.org/java-do-while-loop-with-examples/', 'https://www.geeksforgeeks.org/difference-between-for-and-while-loop-in-c-c-java/', 'https://www.geeksforgeeks.org/difference-between-while-and-do-while-loop-in-c-c-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Loops in Java come into use when we need to repeatedly execute a block of statements.', 'The various parts of the While loop are:', 'How does a While loop executes?', 'Flow chart while loop (for Control Flow):', 'Example 1: This program will try to print “Hello World” 5 times.', 'Dry-Running Example 1: The program will execute in the following manner.', 'Example 2: This program will find the summation of numbers from 1 to 10.', 'Related Articles:']",['Java while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement.'],[],"['// Java program to illustrate while loop.  class whileLoopDemo {    public static void main(String args[])    {        // initialization expression        int i = 1;          // test expression        while (i < 6) {            System.out.println(""Hello World"");              // update expression            i++;        }    }}', '// Java program to illustrate while loop  class whileLoopDemo {    public static void main(String args[])    {        int x = 1, sum = 0;          // Exit when x becomes greater than 4        while (x <= 10) {            // summing up x            sum = sum + x;              // Increment the value of x for            // next iteration            x++;        }        System.out.println(""Summation: "" + sum);    }}']","['while (test_expression)\n{\n   // statements\n \n  update_expression;\n}', 'i <= 10', 'i++;', 'Hello World\nHello World\nHello World\nHello World\nHello World', '1. Program starts.\n2. i is initialized with value 1.\n3. Condition is checked. 1 < 6 yields true.\n  3.a) ""Hello World"" gets printed 1st time.\n  3.b) Updation is done. Now i = 2.\n4. Condition is checked. 2 < 6 yields true.\n  4.a) ""Hello World"" gets printed 2nd time.\n  4.b) Updation is done. Now i = 3.\n5. Condition is checked. 3 < 6 yields true.\n  5.a) ""Hello World"" gets printed 3rd time\n  5.b) Updation is done. Now i = 4.\n6. Condition is checked. 4 < 6 yields true.\n  6.a) ""Hello World"" gets printed 4th time\n  6.b) Updation is done. Now i = 5.\n7. Condition is checked. 5 < 6 yields true.\n  7.a) ""Hello World"" gets printed 5th time\n  7.b) Updation is done. Now i = 6.\n8. Condition is checked. 6 < 6 yields false.\n9. Flow goes outside the loop. Program terminates.', 'Summation: 55']",[],"['Test Expression: In this expression we have to test the condition. If the condition evaluates to true then we will execute the body of the loop and go to update expression. Otherwise, we will exit from the while loop.Example:i <= 10|||Update Expression: After executing the loop body, this expression increments/decrements the loop variable by some value.Example:i++;&&&Control falls into the while loop.|||The flow jumps to Condition|||Condition is tested.If Condition yields true, the flow goes into the Body.If Condition yields false, the flow goes outside the loop|||If Condition yields true, the flow goes into the Body.|||If Condition yields false, the flow goes outside the loop|||The statements inside the body of the loop get executed.|||Updation takes place.|||Control flows back to Step 2.|||The do-while loop has ended and the flow has gone outside.&&&If Condition yields true, the flow goes into the Body.|||If Condition yields false, the flow goes outside the loop&&&Loops in Java|||Java For loop with Examples|||Java do-while loop with Examples|||Difference between for and while loop in C, C++, Java|||Difference between while and do-while loop in C, C++, Java']"
18,['Switch Statement in Java'],"['Java', 'Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/uploads/switch-statement-flowchart.png'],['https://www.youtube.com/embed/Ptlafta8zTI?list=PLqM7alHXFySF5ErEHA1BXgibGg7uqmA4_'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/enum-in-java/', 'https://www.geeksforgeeks.org/string-class-in-java/', 'https://www.geeksforgeeks.org/primitive-wrapper-classes-are-immutable-in-java/', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Flow Diagram of Switch-case :\xa0\xa0', 'Some Important rules for switch statements :\xa0\xa0', 'Omitting the break statement', 'Nested Switch Case statements']","['The switch statement is a multi-way branch statement. It provides an easy way to dispatch execution to different parts of code based on the value of the expression. Basically, the expression can be byte, short, char, and int primitive data types. Beginning with JDK7, it also works with enumerated types ( Enums in java), the String class and Wrapper classes.Syntax of Switch-case :\xa0\xa0', 'Examples:Consider the following java program, it declares an int named day whose value represents a day(1-7). The code displays the name of the day, based on the value of the day, using the switch statement.\xa0', 'As break statement is optional. If we omit the break, execution will continue on into the next case. It is sometimes desirable to have multiple cases without break statements between them. For example, consider the updated version of the above program, it also displays whether a day is a weekday or a weekend day.\xa0', 'We can use a switch as part of the statement sequence of an outer switch. This is called a nested switch. Since a switch statement defines its own block, no conflicts arise between the case constants in the inner switch and those in the outer switch. For example:\xa0\xa0']","['This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program to demonstrate switch case// with primitive(int) data typepublic class Test {    public static void main(String[] args)    {        int day = 5;        String dayString;          // switch statement with int data type        switch (day) {        case 1:            dayString = ""Monday"";            break;        case 2:            dayString = ""Tuesday"";            break;        case 3:            dayString = ""Wednesday"";            break;        case 4:            dayString = ""Thursday"";            break;        case 5:            dayString = ""Friday"";            break;        case 6:            dayString = ""Saturday"";            break;        case 7:            dayString = ""Sunday"";            break;        default:            dayString = ""Invalid day"";        }        System.out.println(dayString);    }}', '// Java program to demonstrate switch case// with multiple cases without break statementspublic class Test {    public static void main(String[] args)    {        int day = 2;        String dayType;        String dayString;          switch (day) {        case 1:            dayString = ""Monday"";            break;        case 2:            dayString = ""Tuesday"";            break;        case 3:            dayString = ""Wednesday"";            break;        case 4:            dayString = ""Thursday"";            break;        case 5:            dayString = ""Friday"";            break;        case 6:            dayString = ""Saturday"";            break;        case 7:            dayString = ""Sunday"";            break;        default:            dayString = ""Invalid day"";        }          switch (day) {        // multiple cases without break statements          case 1:        case 2:        case 3:        case 4:        case 5:            dayType = ""Weekday"";            break;        case 6:        case 7:            dayType = ""Weekend"";            break;          default:            dayType = ""Invalid daytype"";        }          System.out.println(dayString + "" is a "" + dayType);    }}', '// Java program to demonstrate// nested switch case statementpublic class Test {    public static void main(String[] args)    {        String Branch = ""CSE"";        int year = 2;          switch (year) {        case 1:            System.out.println(""elective courses : Advance english, Algebra"");            break;        case 2:            switch (Branch) // nested switch            {            case ""CSE"":            case ""CCE"":                System.out.println(""elective courses : Machine Learning, Big Data"");                break;              case ""ECE"":                System.out.println(""elective courses : Antenna Engineering"");                break;              default:                System.out.println(""Elective courses : Optimization"");            }        }    }}']","['// switch statement \nswitch(expression)\n{\n   // case statements\n   // values must be of same type of expression\n   case value1 :\n      // Statements\n      break; // break is optional\n   \n   case value2 :\n      // Statements\n      break; // break is optional\n   \n   // We can have any number of case statements\n   // below is default statement, used when none of the cases is true. \n   // No break is needed in the default case.\n   default : \n      // Statements\n}', 'Friday', 'Tuesday is a Weekday', 'elective courses : Machine Learning, Big Data']",[],"['Duplicate case values are not allowed.|||The value for a case must be of the same data type as the variable in the switch.|||The value for a case must be a constant or a literal. Variables are not allowed.|||The break statement is used inside the switch to terminate a statement sequence.|||The break statement is optional. If omitted, execution will continue on into the next case.|||The default statement is optional and can appear anywhere inside the switch block. In case, if it is not at the end, then a break statement must be kept after the default statement to omit the execution of the next case statement.']"
19,['Continue Statement in Java'],"['Java', 'Java', 'Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/20201102141150/GFGContinue.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20201021223902/j1-660x615.png']",[],"['https://www.geeksforgeeks.org/basic/', 'https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/', 'https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/', 'https://www.geeksforgeeks.org/an-introduction-to-flowcharts/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Real-Life Example:', 'Syntax: continue keyword along with a semicolon', 'Flow Chart of Continue Statement', 'Case 1: Continue statement inside for loop', 'Case 2: Continue statement inside while loop', 'Case 3: Continue statement inside do while loop', 'Case 4: Continue statement inside Inner loop(Nested Loop)']","['Suppose a person wants code to execute for the values as per the code is designed to be executed but forcefully the same user wants to skip out the execution for which code should have been executed as designed above but will not as per the demand of the user. In simpler words, it is a decision-making problem as per the demand of the user.', 'Consider a man is climbing up to go to his house in between there are 11 stairs. Being in hurry to climb up he directly stepped onto 3 staircases and then 4, 5, 6, 7, 8, 9 and jumps to last one. During this he missed out staircase 1st, 2nd and 10th and he completed the goal to reach his house. He continued his journey skipping staircase of. his choices.\xa0', 'In computers, it interprets staircases which is/are supposed to be skipped as ‘continue’. The action to miss out execution which are supposed to be executed, is interpreted as continue statement be it any programming language.', 'The above flowchart is most important for the understanding of this keyword. Always remember the condition is always placed inside diamond boxes and statements in rectangular boxes. Now jumping onto the implementation part', 'In this program, illustration for how to use the continue statement within For loop. When the value of ‘i’ becomes 10 or 12, the continue statement plays its role and skip their execution but for other values of’ ‘i’ the loop will run smoothly.', 'In the above program, we give example, how to use the continue statement within the While loop. When the value of count becomes 7 or 15, the continue statement plays its role and skip their execution but for other values of the count, the loop will run smoothly.', 'In the above program, we give example, how to use the continue statement within the do-While loop. When the value of i becomes 4 or 18, the continue statement plays its role and skip their execution but for other values of i, the loop will run smoothly.', 'In the above program, we give example, how to use the continue statement within Nested loops. When the value of i becomes 3 and j become 2, the continue statement plays its role and skip their execution but for other values of i and j, the loop will run smoothly.']","['Continue statement is often used inside in programming languages inside loops control structures. Inside the loop, when a continue statement is encountered the control directly jumps to the beginning of the loop for the next iteration instead of executing the statements of the current iteration. The continue statement is used when we want to skip a particular condition and continue the rest execution. Java continue statement is used for all type od loops but it is generally used in for, while, and do-while loops.']","['// Java Program to illustrate the use of continue statement // Importing Classes/Filesimport java.util.*;public class GFG {     // Main driver method    public static void main(String args[])    {        // For loop for iteration        for (int i = 0; i <= 15; i++) {             // Check condition for continue            if (i == 10 || i == 12) {                 // Using continue statement to skip the                // execution of loop when i==10 or i==12                continue;            }            // Printing elements to show continue statement            System.out.print(i + "" "");        }    }}', '// Java Program to illustrate the use of continue statement// inside the While looppublic class GFG {     // Main driver method    public static void main(String args[])    {        // Initializing a variable say it count  to a value        // greater than the value greater among the loop        // values        int count = 20;         // While loop for iteration        while (count >= 0) {            if (count == 7 || count == 15) {                count--;                // Decrementing variable initialized above                 // Showing continue execution inside loop                // skipping when count==7 or count==15                continue;            }             // Printing values after continue statement            System.out.print(count + "" "");             // Decrementing the count variable            count--;        }    }}', '// Java Program to illustrate the use of continue statement// inside the Do-While loop // Importing generic Classes/Filesimport java.util.*; public class GFG {     // Main driver method    public static void main(String[] args)    {        // Creating and Initializing a variable        int i = 0;         // Do-While loop for iteration        do {            if (i == 4 || i == 18) {                 // Incrementing loop variable by 2                i += 2;                 // Illustrating continue statement skipping                // the execution  when i==7 or i==15                continue;            }             // Printing to showcase continue affect            System.out.println(i);             // Incrementing variable by 2            i += 2;             // Condition check        } while (i <= 35);    }}', '// Java Program to illustrate the use of continue statement// inside an inner loop or simply nested loops // Importing generic Classes/Filesimport java.util.*; public class GFG {     // Main drive method    public static void main(String[] args)    {        // Outer loop for iteration        for (int i = 1; i <= 4; i++) {             // Inner loop for iteration            for (int j = 1; j <= 3; j++) {                if (i == 3 && j == 2) {                     // Continue statement in inner loop to                    // skip the execution when i==3 and j==2                     continue;                }                 // Print elements to showcase keyword affect                System.out.println(i + "" * "" + j);            }        }    }}']","['continue;', '0 1 2 3 4 5 6 7 8 9 11 13 14 15', '20 19 18 17 16 14 13 12 11 10 9 8 6 5 4 3 2 1 0', '0\n2\n6\n8\n10\n12\n14\n16\n20\n22\n24\n26\n28\n30\n32\n34', '1 * 1\n1 * 2\n1 * 3\n2 * 1\n2 * 2\n2 * 3\n3 * 1\n3 * 3\n4 * 1\n4 * 2\n4 * 3']",[],"['In the case of for loop, the continue keyword force control to jump immediately to the update statement.|||Whereas in the case of a while loop or do-while loop, control immediately jumps to the Boolean expression.']"
20,['Break statement in Java'],"['Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/break.png', 'https://media.geeksforgeeks.org/wp-content/uploads/exit.png']",['https://www.youtube.com/embed/4uqb7-QpOAc?list=PLqM7alHXFySF5ErEHA1BXgibGg7uqmA4_'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/', 'https://www.geeksforgeeks.org/break-statement-cc/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Break: In Java, the break is majorly used for:\xa0', 'Using break to exit a Loop', 'Using break as a Form of Goto', 'Related Articles:\xa0']","['Break Statement is a loop control statement that is used to terminate the loop. As soon as the break statement is encountered from within a loop, the loop iterations stop there, and control returns from the loop immediately to the first statement after the loop.\xa0Syntax:\xa0', 'Basically, break statements are used in situations when we are not sure about the actual number of iterations for the loop or we want to terminate the loop based on some condition.\xa0\xa0', 'Using break, we can force immediate termination of a loop, bypassing the conditional expression and any remaining code in the body of the loop.\xa0Note: Break, when used inside a set of nested loops, will only break out of the innermost loop.\xa0\xa0', 'Java does not have a goto statement because it provides a way to branch in an arbitrary and unstructured manner. Java uses the label. A Label is used to identifies a block of code.\xa0Syntax:\xa0', 'Now, break statement can be use to jump out of target block.\xa0Note: You cannot break to any label which is not defined for an enclosing block.\xa0Syntax:\xa0\xa0']",[],"['// Java program to illustrate using// break to exit a loopclass BreakLoopDemo {    public static void main(String args[])    {        // Initially loop is set to run from 0-9        for (int i = 0; i < 10; i++) {            // terminate loop when i is 5.            if (i == 5)                break;              System.out.println(""i: "" + i);        }        System.out.println(""Loop complete."");    }}', '// Java program to illustrate // using break with gotoclass BreakLabelDemo {    public static void main(String args[])    {        boolean t = true;      // label first    first : {            // Illegal statement here     // as label second is not    // introduced yet break second;    second : {    third : {        // Before break        System.out.println(""Before the break statement"");          // break will take the control out of        // second label        if (t)            break second;        System.out.println(""This won\'t execute."");    }        System.out.println(""This won\'t execute."");    }          // First block        System.out.println(""This is after second block."");    }    }}']","['break;', 'i: 0\ni: 1\ni: 2\ni: 3\ni: 4\nLoop complete.', 'label:\n{\n  statement1;\n  statement2;\n  statement3;\n  .\n  .\n}', 'break label;', 'Before the break statement.\nThis is after the second block.']",[],['Terminate a sequence in a switch statement (discussed above).|||To exit a loop.|||Used as a “civilized” form of goto.&&&Decision making in Java|||Break statement in C++']
21,['Strings in Java'],"['Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/finnnal.png', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/StringTokenizer.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210711152428/JVMMemoryArea2.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/tag/java-charbuffer/', 'https://www.geeksforgeeks.org/string-class-in-java/', 'https://www.geeksforgeeks.org/stringbuffer-class-in-java/', 'https://www.geeksforgeeks.org/stringbuilder-class-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringtokenizer-class-java-example-set-1-constructors/', 'https://www.geeksforgeeks.org/java-util-stringjoiner-java8/', 'https://www.geeksforgeeks.org/tag/java-util-package/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Example:\xa0\xa0', 'Memory allotment of String', 'For example:\xa0', 'For example:\xa0', 'If you want to store this string in the constant pool then you will need to “intern” it.', 'For example:', 'It is preferred to use String literals as it allows JVM to optimize memory allocation.', 'An example that shows how to declare String\xa0', 'Interfaces and Classes in Strings in Java', 'Creating a String', 'public StringJoiner(CharSequence delimiter)', 'Above we saw we can create string by \xa0String Literal.\xa0', 'For ex-\xa0// String s=”Welcome”;\xa0', 'Why did the String pool move from PermGen to the normal heap area?\xa0', 'String a=new String(“Bhubaneswar”)']","['Strings in Java are Objects that are backed internally by a char array. Since arrays are immutable(cannot grow), Strings are immutable as well. Whenever a change to a String is made, an entirely new String is created.\xa0', 'Whenever a String Object is created as a literal, the object will be created in String constant pool. This allows JVM to optimize the initialization of String literal.', 'The string can also be declared using new operator i.e. dynamically allocated. In case of String are dynamically allocated they are assigned a new memory location in heap. This string will not be added to String constant pool.', 'Let’s have a look at the concept with a java program and visualize the actual JVM memory structure:\xa0', 'Note:\xa0All objects in Java are stored in a heap. The reference variable is to the object stored in the stack area or they can be contained in other objects which puts them in the heap area also.']","['Here the JVM checks the String Constant Pool. If the string does not exist, then a new string instance is created and placed in a pool. If the string exists, then it will not create a new object. Rather, it will return the reference to the same instance.\xa0The cache which stores these string instances is known as the String Constant pool or String Pool. In earlier versions of Java up to JDK 6 String pool was located inside PermGen(Permanent Generation) space. But in JDK 7 it is moved to the main heap area.\xa0', 'PermGen space is limited, the default size is just 64 MB. it was a problem with creating and storing too many string objects in PermGen space. That’s why the String pool was moved to a larger heap area.\xa0To make Java more memory efficient, the concept of string literal is used. By the use of the ‘new’ keyword, The JVM will create a new string object in the normal heap area even if the same string object is present in the string pool.\xa0']","['// Java code to illustrate Stringimport java.io.*;import java.lang.*; class Test {    public static void main(String[] args)    {        // Declare String without using new operator        String s = ""GeeksforGeeks"";         // Prints the String.        System.out.println(""String s = "" + s);         // Declare String using new operator        String s1 = new String(""GeeksforGeeks"");         // Prints the String.        System.out.println(""String s1 = "" + s1);    }}', 'class StringStorage {    public static void main(String args[])    {        String s1 = ""TAT"";        String s2 = ""TAT"";        String s3 = new String(""TAT"");        String s4 = new String(""TAT"");        System.out.println(s1);        System.out.println(s2);        System.out.println(s3);        System.out.println(s4);    }}']","['<String_Type> <string_variable> = ""<sequence_of_string>"";', 'String str = ""Geeks"";', 'String str = ""Geeks"";', 'String str = new String(""Geeks"");', 'String internedString = str.intern(); \n// this will add the string to string constant pool.', 'String s = GeeksforGeeks\nString s1 = GeeksforGeeks', 'String s = “GeeksforGeeks”;', 'String s = new String (“GeeksforGeeks”);', 'StringBuffer s = new StringBuffer(""GeeksforGeeks"");', 'StringBuilder str = new StringBuilder();\nstr.append(""GFG"");', 'TAT\nTAT\nTAT\nTAT']",[],"['CharBuffer: This class implements the CharSequence interface. This class is used to allow character buffers to be used in place of CharSequences. An example of such usage is the regular-expression package java.util.regex.|||String: String is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created.&&&There are two ways to create a string in Java:String literal|||String literal&&&String literal&&&Using new keyword&&&StringBuffer:StringBuffer is a peer class of String that provides much of the functionality of strings. The string represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences.Syntax:&&&StringBuilder:The StringBuilder in Java represents a mutable sequence of characters. Since the String Class in Java creates an immutable sequence of characters, the StringBuilder class provides an alternate to String Class, as it creates a mutable sequence of characters.Syntax:&&&StringTokenizer:StringTokenizer class in Java is used to break a string into tokens.Example:&&&A StringTokenizer object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed.A token is returned by taking a substring of the string that was used to create the StringTokenizer object.|||StringJoiner:StringJoiner is a class in java.util package which is used to construct a sequence of characters(strings) separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix. Though this can also be with the help of StringBuilder class to append delimiter after each string, StringJoiner provides an easy way to do that without much code to write.Syntax:']"
22,['String class in Java | Set 1'],[],[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-string-charat-method-example/', 'https://www.geeksforgeeks.org/substring-in-java/', 'https://www.geeksforgeeks.org/substring-in-java/', 'https://www.geeksforgeeks.org/java-string-concat-examples/', 'https://www.geeksforgeeks.org/java-string-indexof/', 'https://www.geeksforgeeks.org/java-string-indexof/', 'https://www.geeksforgeeks.org/java-lang-string-lastindexof-method/', 'https://www.geeksforgeeks.org/equalsignorecase-in-java/', 'https://www.geeksforgeeks.org/java-lang-string-compareto/', 'https://www.geeksforgeeks.org/java-string-tolowercase-examples/', 'https://www.geeksforgeeks.org/java-touppercase-examples/', 'https://www.geeksforgeeks.org/java-string-trim-method-example/', 'https://www.geeksforgeeks.org/java-lang-string-replace-method-java/', 'https://www.geeksforgeeks.org/java-lang-string-class-java-set-2/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Creating a String', 'There are two ways to create string in Java:', 'Constructors', 'String Methods', 'Note:- s1 is still feeksforfeeks and s2 is geeksgorgeeks', 'Program to illustrate all string \xa0methods:', 'For Set – 2 you can refer: Java.lang.String class in Java | Set 2']","['String is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created.', 'Note- In this case, it will not consider case of a letter (it will ignore whether it is uppercase or lowercase).', '\xa0This article is contributed by Rahul Agrawal.\xa0Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']",[],"['// Java code to illustrate different constructors and methods // String class.  import java.io.*;import java.util.*;class Test{    public static void main (String[] args)    {        String s= ""GeeksforGeeks"";        // or String s= new String (""GeeksforGeeks"");          // Returns the number of characters in the String.        System.out.println(""String length = "" + s.length());          // Returns the character at ith index.        System.out.println(""Character at 3rd position = ""                           + s.charAt(3));          // Return the substring from the ith  index character        // to end of string        System.out.println(""Substring "" + s.substring(3));          // Returns the substring from i to j-1 index.        System.out.println(""Substring  = "" + s.substring(2,5));          // Concatenates string2 to the end of string1.        String s1 = ""Geeks"";        String s2 = ""forGeeks"";        System.out.println(""Concatenated string  = "" +                            s1.concat(s2));          // Returns the index within the string        // of the first occurrence of the specified string.        String s4 = ""Learn Share Learn"";        System.out.println(""Index of Share "" +                            s4.indexOf(""Share""));          // Returns the index within the string of the        // first occurrence of the specified string,        // starting at the specified index.        System.out.println(""Index of a  = "" +                            s4.indexOf(\'a\',3));          // Checking equality of Strings        Boolean out = ""Geeks"".equals(""geeks"");        System.out.println(""Checking Equality  "" + out);        out = ""Geeks"".equals(""Geeks"");        System.out.println(""Checking Equality  "" + out);          out = ""Geeks"".equalsIgnoreCase(""gEeks "");        System.out.println(""Checking Equality "" + out);                  //If ASCII difference is zero then the two strings are similar        int out1 = s1.compareTo(s2);        System.out.println(""the difference between ASCII value is=""+out1);        // Converting cases        String word1 = ""GeeKyMe"";        System.out.println(""Changing to lower Case "" +                            word1.toLowerCase());          // Converting cases        String word2 = ""GeekyME"";        System.out.println(""Changing to UPPER Case "" +                             word2.toUpperCase());          // Trimming the word        String word4 = "" Learn Share Learn "";        System.out.println(""Trim the word "" + word4.trim());          // Replacing characters        String str1 = ""feeksforfeeks"";        System.out.println(""Original String "" + str1);        String str2 = ""feeksforfeeks"".replace(\'f\' ,\'g\') ;        System.out.println(""Replaced f with g -> "" + str2);    } }']","['String s = “GeeksforGeeks”;', 'String s = new String (“GeeksforGeeks”);', 'byte[] b_arr = {71, 101, 101, 107, 115};\nString s_byte =new String(b_arr); //Geeks', 'byte[] b_arr = {71, 101, 101, 107, 115};\nCharset cs = Charset.defaultCharset();\nString s_byte_char = new String(b_arr, cs); //Geeks', 'byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, ""US-ASCII""); //Geeks', 'byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, 1, 3); // eek', 'byte[] b_arr = {71, 101, 101, 107, 115};\nCharset cs = Charset.defaultCharset();\nString s = new String(b_arr, 1, 3, cs); // eek', 'byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, 1, 4, ""US-ASCII""); // eeks', ""char char_arr[] = {'G', 'e', 'e', 'k', 's'};\nString s = new String(char_arr); //Geeks"", ""char char_arr[] = {'G', 'e', 'e', 'k', 's'};\nString s = new String(char_arr , 1, 3); //eek"", 'int[] uni_code = {71, 101, 101, 107, 115};\nString s = new String(uni_code, 1, 3); //eek', 'StringBuffer s_buffer = new StringBuffer(""Geeks"");\nString s = new String(s_buffer); //Geeks', 'StringBuilder s_builder = new StringBuilder(""Geeks"");\nString s = new String(s_builder); //Geeks', '""GeeksforGeeks"".length();\xa0 // returns 13', '""GeeksforGeeks"".charAt(3); // returns\xa0 ‘k’', '""GeeksforGeeks"".substring(3); // returns “ksforGeeks”', '""GeeksforGeeks"".substring(2, 5); // returns “eks”', 'String s1 = ”Geeks”;\n String s2 = ”forGeeks”;\n String output = s1.concat(s2); // returns “GeeksforGeeks”', 'String s = ”Learn Share Learn”;\n int output = s.indexOf(“Share”); // returns 6', 'String s = ”Learn Share Learn”;\n int output = s.indexOf(""ea"",3);// returns 13', 'String s = ”Learn Share Learn”;\n int output = s.lastIndexOf(""a""); // returns 14', 'Boolean out = “Geeks”.equals(“Geeks”); // returns true\n Boolean out = “Geeks”.equals(“geeks”); // returns false', 'Boolean out= “Geeks”.equalsIgnoreCase(“Geeks”); // returns true\n Boolean out = “Geeks”.equalsIgnoreCase(“geeks”); // returns true', 'int out = s1.compareTo(s2);\xa0 // where s1 ans s2 are\n                             // strings to be compared\n\n This returns difference s1-s2. If :\n out < 0  // s1 comes before s2\n out = 0  // s1 and s2 are equal.\n out > 0   // s1 comes after s2.', 'int out = s1.compareToIgnoreCase(s2);\xa0 \n// where s1 ans s2 are \n// strings to be compared\n\n This returns difference s1-s2. If :\n out < 0  // s1 comes before s2\n out = 0   // s1 and s2 are equal.\n out > 0   // s1 comes after s2.', 'String word1 = “HeLLo”;\nString word3 = word1.toLowerCase(); // returns “hello""', 'String word1 = “HeLLo”;\nString word2 = word1.toUpperCase(); // returns “HELLO”', 'String word1 = “ Learn Share Learn “;\nString word2 = word1.trim(); // returns “Learn Share Learn”', 'String s1 = “feeksforfeeks“;\nString s2 = “feeksforfeeks”.replace(‘f’ ,’g’); // returns “geeksgorgeeks”', 'String length = 13\nCharacter at 3rd position = k\nSubstring ksforGeeks\nSubstring = eks\nConcatenated string = GeeksforGeeks\nIndex of Share 6\nIndex of a = 8\nChecking Equality false\nChecking Equality true\nChecking Equality false\nthe difference between ASCII value is=-31\nChanging to lower Case geekyme\nChanging to UPPER Case GEEKYME\nTrim the word Learn Share Learn\nOriginal String feeksforfeeks\nReplaced f with g -> geeksgorgeeks']",[],"['String literalString s = “GeeksforGeeks”;|||Using new keywordString s = new String (“GeeksforGeeks”);&&&&&&String(byte[] byte_arr) – Construct a new String by decoding the byte array. It uses the platform’s default character set for decoding.Example:byte[] b_arr = {71, 101, 101, 107, 115};\nString s_byte =new String(b_arr); //Geeks\n|||String(byte[] byte_arr, Charset char_set) – Construct a new String by decoding the byte array. It uses the char_set for decoding.Example:byte[] b_arr = {71, 101, 101, 107, 115};\nCharset cs = Charset.defaultCharset();\nString s_byte_char = new String(b_arr, cs); //Geeks\n|||String(byte[] byte_arr, String char_set_name) – Construct a new String by decoding the byte array. It uses the char_set_name for decoding.It looks similar to the above constructs and they appear before similar functions but it takes the String(which contains char_set_name) as parameter while the above constructor takes CharSet.Example:byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, ""US-ASCII""); //Geeks\n|||String(byte[] byte_arr, int start_index, int length) – Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location).Example:byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, 1, 3); // eek\n|||String(byte[] byte_arr, int start_index, int length, Charset char_set) – Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location).Uses char_set for decoding.Example:byte[] b_arr = {71, 101, 101, 107, 115};\nCharset cs = Charset.defaultCharset();\nString s = new String(b_arr, 1, 3, cs); // eek\n|||String(byte[] byte_arr, int start_index, int length, String char_set_name) – Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location).Uses char_set_name for decoding.Example:byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, 1, 4, ""US-ASCII""); // eeks\n|||String(char[] char_arr) – Allocates a new String from the given Character arrayExample:char char_arr[] = {\'G\', \'e\', \'e\', \'k\', \'s\'};\nString s = new String(char_arr); //Geeks\n|||String(char[] char_array, int start_index, int count) – Allocates a String from a given character array but choose count characters from the start_index.Example:char char_arr[] = {\'G\', \'e\', \'e\', \'k\', \'s\'};\nString s = new String(char_arr , 1, 3); //eek\n|||String(int[] uni_code_points, int offset, int count) – Allocates a String from a uni_code_array but choose count characters from the start_index.Example:int[] uni_code = {71, 101, 101, 107, 115};\nString s = new String(uni_code, 1, 3); //eek\n|||String(StringBuffer s_buffer) – Allocates a new string from the string in s_bufferExample:StringBuffer s_buffer = new StringBuffer(""Geeks"");\nString s = new String(s_buffer); //Geeks\n|||String(StringBuilder s_builder) – Allocates a new string from the string in s_builderExample:StringBuilder s_builder = new StringBuilder(""Geeks"");\nString s = new String(s_builder); //Geeks\n&&&int length():Returns the number of characters in the String.""GeeksforGeeks"".length(); // returns 13|||Char charAt(int i):Returns the character at ith index.""GeeksforGeeks"".charAt(3); // returns ‘k’|||String substring (int i):Return the substring from the ith index character to end.""GeeksforGeeks"".substring(3); // returns “ksforGeeks”|||String substring (int i, int j):Returns the substring from i to j-1 index. ""GeeksforGeeks"".substring(2, 5); // returns “eks”|||String concat( String str):Concatenates specified string to the end of this string. String s1 = ”Geeks”;\n String s2 = ”forGeeks”;\n String output = s1.concat(s2); // returns “GeeksforGeeks”\n|||int indexOf (String s):Returns the index within the string of the first occurrence of the specified string. String s = ”Learn Share Learn”;\n int output = s.indexOf(“Share”); // returns 6\n|||int indexOf (String s, int i):Returns the index within the string of the first occurrence of the specified string, starting at the specified index. String s = ”Learn Share Learn”;\n int output = s.indexOf(""ea"",3);// returns 13\n|||Int lastIndexOf( String s):Returns the index within the string of the last occurrence of the specified string. String s = ”Learn Share Learn”;\n int output = s.lastIndexOf(""a""); // returns 14\n|||boolean equals( Object otherObj):Compares this string to the specified object. Boolean out = “Geeks”.equals(“Geeks”); // returns true\n Boolean out = “Geeks”.equals(“geeks”); // returns false\n|||boolean equalsIgnoreCase (String anotherString):Compares string to another string, ignoring case considerations. Boolean out= “Geeks”.equalsIgnoreCase(“Geeks”); // returns true\n Boolean out = “Geeks”.equalsIgnoreCase(“geeks”); // returns true|||int compareTo( String anotherString):Compares two string lexicographically. int out = s1.compareTo(s2); // where s1 ans s2 are\n                             // strings to be compared\n\n This returns difference s1-s2. If :\n out < 0  // s1 comes before s2\n out = 0  // s1 and s2 are equal.\n out > 0   // s1 comes after s2.\n|||int compareToIgnoreCase( String anotherString):Compares two string lexicographically, ignoring case considerations. int out = s1.compareToIgnoreCase(s2); \n// where s1 ans s2 are \n// strings to be compared\n\n This returns difference s1-s2. If :\n out < 0  // s1 comes before s2\n out = 0   // s1 and s2 are equal.\n out > 0   // s1 comes after s2.\nNote- In this case, it will not consider case of a letter (it will ignore whether it is uppercase or lowercase).|||String toLowerCase():Converts all the characters in the String to lower case.String word1 = “HeLLo”;\nString word3 = word1.toLowerCase(); // returns “hello""\n|||String toUpperCase():Converts all the characters in the String to upper case.String word1 = “HeLLo”;\nString word2 = word1.toUpperCase(); // returns “HELLO”\n|||String trim():Returns the copy of the String, by removing whitespaces at both ends. It does not affect whitespaces in the middle.String word1 = “ Learn Share Learn “;\nString word2 = word1.trim(); // returns “Learn Share Learn”\n|||String replace (char oldChar, char newChar):Returns new string by replacing all occurrences of oldChar with newChar.String s1 = “feeksforfeeks“;\nString s2 = “feeksforfeeks”.replace(‘f’ ,’g’); // returns “geeksgorgeeks”\nNote:- s1 is still feeksforfeeks and s2 is geeksgorgeeksProgram to illustrate all string methods:// Java code to illustrate different constructors and methods// String class.import java.io.*;import java.util.*;class Test{public static void main (String[] args){String s= ""GeeksforGeeks"";// or String s= new String (""GeeksforGeeks"");// Returns the number of characters in the String.System.out.println(""String length = "" + s.length());// Returns the character at ith index.System.out.println(""Character at 3rd position = ""+ s.charAt(3));// Return the substring from the ith index character// to end of stringSystem.out.println(""Substring "" + s.substring(3));// Returns the substring from i to j-1 index.System.out.println(""Substring = "" + s.substring(2,5));// Concatenates string2 to the end of string1.String s1 = ""Geeks"";String s2 = ""forGeeks"";System.out.println(""Concatenated string = "" +s1.concat(s2));// Returns the index within the string// of the first occurrence of the specified string.String s4 = ""Learn Share Learn"";System.out.println(""Index of Share "" +s4.indexOf(""Share""));// Returns the index within the string of the// first occurrence of the specified string,// starting at the specified index.System.out.println(""Index of a = "" +s4.indexOf(\'a\',3));// Checking equality of StringsBoolean out = ""Geeks"".equals(""geeks"");System.out.println(""Checking Equality "" + out);out = ""Geeks"".equals(""Geeks"");System.out.println(""Checking Equality "" + out);out = ""Geeks"".equalsIgnoreCase(""gEeks "");System.out.println(""Checking Equality "" + out);//If ASCII difference is zero then the two strings are similarint out1 = s1.compareTo(s2);System.out.println(""the difference between ASCII value is=""+out1);// Converting casesString word1 = ""GeeKyMe"";System.out.println(""Changing to lower Case "" +word1.toLowerCase());// Converting casesString word2 = ""GeekyME"";System.out.println(""Changing to UPPER Case "" +word2.toUpperCase());// Trimming the wordString word4 = "" Learn Share Learn "";System.out.println(""Trim the word "" + word4.trim());// Replacing charactersString str1 = ""feeksforfeeks"";System.out.println(""Original String "" + str1);String str2 = ""feeksforfeeks"".replace(\'f\' ,\'g\') ;System.out.println(""Replaced f with g -> "" + str2);}}Output :String length = 13\nCharacter at 3rd position = k\nSubstring ksforGeeks\nSubstring = eks\nConcatenated string = GeeksforGeeks\nIndex of Share 6\nIndex of a = 8\nChecking Equality false\nChecking Equality true\nChecking Equality false\nthe difference between ASCII value is=-31\nChanging to lower Case geekyme\nChanging to UPPER Case GEEKYME\nTrim the word Learn Share Learn\nOriginal String feeksforfeeks\nReplaced f with g -> geeksgorgeeks\nFor Set – 2 you can refer: Java.lang.String class in Java | Set 2This article is contributed by Rahul Agrawal.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave&&&']"
23,['StringBuffer class in Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.geeksforgeeks.org/stringbuffer-ensurecapacity-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-appendcodepoint-method-in-java/', 'https://www.geeksforgeeks.org/stringbuffer-codepointat-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-codepointbefore-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-codepointcount-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-getchars-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-indexof-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-lastindexof-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-offsetbycodepoints-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-setcharat-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-setlength-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-subsequence-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-substring-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-tostring-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-trimtosize-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-append-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-insert-java/', 'https://www.geeksforgeeks.org/stringbuffer-reverse-method-in-java/', 'https://www.geeksforgeeks.org/stringbuffer-delete-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuffer-deletecharat-method-in-java/', 'https://www.geeksforgeeks.org/stringbuffer-replace-method-in-java-with-examples/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Some Interesting Facts about the StringBuffer class\xa0', 'Do keep in the back of mi while applying so which are as follows:\xa0\xa0', 'Constructors\xa0of StringBuffer class\xa0', '1. StringBuffer(): It reserves room for 16 characters without reallocation', 'Methods of StringBuffer class\xa0', 'This method returns the char value in this sequence at the specified index.', 'Implementation:\xa0', 'Example 1: length() and capacity() Methods', 'Example 2: append()\xa0', 'It is used to add text at the end of the existing text.\xa0', 'Here are a few of its forms:\xa0', 'Example 3: insert()', 'It is used to insert text at the specified index position.\xa0', 'Syntax: These are a few of its as follows:', 'Example 4: reverse( )', 'Example 5: delete( ) and deleteCharAt()', 'Example 6: replace()']","['2. StringBuffer( int\xa0size): It accepts an integer argument that explicitly sets the size of the buffer.\xa0', '3. StringBuffer(String str):\xa0It accepts a string argument that sets the initial contents of the StringBuffer object and reserves room for 16 more characters without reallocation.', 'Note: Besides that, all the methods that are used in the String class can also be used. Tese auxiliary methods are as follows:', 'It is used to increase the capacity of a StringBuffer object. The new capacity will be set to either the value we specify or twice the current capacity plus two (i.e. capacity+2), whichever is larger.\xa0Here, capacity specifies the size of the buffer.', 'Above we only have discussed the most widely used methods and do keep a tight bound around them as they are widel used in programming geeks.', 'Here, the index specifies the index at which point the string will be inserted into the invoking StringBuffer object.', 'It can reverse the characters within a StringBuffer object using reverse( ). This method returns the reversed object on which it was called.\xa0', 'It can replace one set of characters with another set inside a StringBuffer object by calling\xa0replace( ). The substring being replaced is specified by the indexes start Index\xa0and endIndex. Thus, the substring at start Index\xa0through endIndex–1 is replaced. The replacement string is passed in str. The resulting StringBuffer object is returned.', 'This article is contributed by Lokesh Todwal.\xa0Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['StringBuffer is a peer class of String that provides much of the functionality of strings. The string represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences. StringBuffer may have characters and substrings inserted in the middle or appended to the end. It\xa0will automatically grow to make room for such additions and often has more characters preallocated than are actually needed, to allow room for growth.', 'Remember: StringBuilder, J2SE 5 adds a new string class to Java’s already powerful string handling capabilities. This new class is called StringBuilder. It is identical to StringBuffer except for one important\xa0difference: it is not synchronized, which means that it is not thread-safe. The advantage of\xa0StringBuilder\xa0is faster performance. However, in cases in which you are using multithreading, \xa0you must use StringBuffer rather than StringBuilder.', 'It can delete characters within a StringBuffer by using the methods delete( ) and deleteCharAt( ).The delete( ) method deletes a sequence of characters from the invoking object. Here, the start Index\xa0specifies the index of the first character to remove, and the end Index\xa0specifies an index one past the last character to remove. Thus, the substring deleted runs from start Index\xa0to endIndex–1. The resulting StringBuffer object is returned. The \xa0\xa0deleteCharAt( ) method deletes the character at the index specified by loc. It returns the resulting StringBuffer object.']","['// Java Program to Illustrate StringBuffer class// via length() and capacity() methods // Importing I/O classesimport java.io.*; // Main classclass GFG {     // main driver method    public static void main(String[] args)    {         // Creating adn storing string by creating object of        // StringBuffer        StringBuffer s = new StringBuffer(""GeeksforGeeks"");         // Getting the length of the string        int p = s.length();         // Getting the capacity of the string        int q = s.capacity();         // Printing the length and capacity of        // above generated input string on console        System.out.println(""Length of string GeeksforGeeks=""                           + p);        System.out.println(            ""Capacity of string GeeksforGeeks="" + q);    }}', '// Java Program to Illustrate StringBuffer class// via append() method // Importing required classesimport java.io.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating an object of StringBuffer class and        // passing random string        StringBuffer s = new StringBuffer(""Geeksfor"");         // Usage of append() method        s.append(""Geeks"");         // Returns GeeksforGeeks        System.out.println(s);         s.append(1);        // Returns GeeksforGeeks1        System.out.println(s);    }}', '// Java Program to Illustrate StringBuffer class// via insert() method // Importing required I/O classesimport java.io.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating an object of StringBuffer class        StringBuffer s = new StringBuffer(""GeeksGeeks"");         // Inserting element and position as an arguments        s.insert(5, ""for"");        // Returns GeeksforGeeks        System.out.println(s);         s.insert(0, 5);        // Returns 5GeeksforGeeks        System.out.println(s);         s.insert(3, true);        // Returns 5GetrueeksforGeeks        System.out.println(s);         s.insert(5, 41.35d);        // Returns 5Getr41.35ueeksforGeeks        System.out.println(s);         s.insert(8, 41.35f);        // Returns 5Getr41.41.3535ueeksforGeeks        System.out.println(s);         // Declaring and initializing character array        char geeks_arr[] = { \'p\', \'a\', \'w\', \'a\', \'n\' };         // Inserting character array at offset 9        s.insert(2, geeks_arr);        // Returns 5Gpawanetr41.41.3535ueeksforGeeks        System.out.println(s);    }}', '// Java Program to Illustrate StringBuffer class// via reverse() method // Importing I/O classesimport java.io.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating a string via creating        // object of StringBuffer class        StringBuffer s = new StringBuffer(""GeeksGeeks"");         // Invoking reverse() method        s.reverse();         // Returns ""skeeGrofskeeG""        System.out.println(s);    }}', '// Java Program to Illustrate StringBuffer class// via delete() and deleteCharAt() Methods // Importing I/O classesimport java.io.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        StringBuffer s = new StringBuffer(""GeeksforGeeks"");         s.delete(0, 5);        // Returns forGeeks        System.out.println(s);         s.deleteCharAt(7);        // Returns forGeek        System.out.println(s);    }}', '// Java Program to Illustrate StringBuffer class// via replace() method // Importing I/O classesimport java.io.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        StringBuffer s = new StringBuffer(""GeeksforGeeks"");        s.replace(5, 8, ""are"");         // Returns GeeksareGeeks        System.out.println(s);    }}']","['StringBuffer s = new StringBuffer();', 'StringBuffer s = new StringBuffer(20);', 'StringBuffer s = new StringBuffer(""GeeksforGeeks"");', 'void ensureCapacity(int\xa0capacity)', 'public StringBuffer appendCodePoint(int codePoint)', 'public char charAt(int index)', 'public IntStream chars()', 'public int codePointAt(int index)', 'public int codePointBefore(int index)', 'public int codePointCount(int beginIndex, int endIndex)', 'public IntStream codePoints()', 'public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)', 'public int indexOf(String str)\npublic int indexOf(String str, int fromIndex)', 'public int lastIndexOf(String str)\npublic int lastIndexOf(String str, int fromIndex)', 'public int offsetByCodePoints(int index, int codePointOffset)', 'public void setCharAt(int index, char ch)', 'public void setLength(int newLength)', 'public CharSequence subSequence(int start, int end)', 'public String substring(int start)\npublic String substring(int start,int end)', 'public String toString()', 'public void trimToSize()', 'Length of string GeeksforGeeks=13\nCapacity of string GeeksforGeeks=29', 'StringBuffer append(String str)\nStringBuffer append(int\xa0num)', 'GeeksforGeeks\nGeeksforGeeks1', 'StringBuffer insert(int\xa0index, String str)\nStringBuffer insert(int\xa0index, char ch)', 'GeeksforGeeks\n5GeeksforGeeks\n5GetrueeksforGeeks\n5Getr41.35ueeksforGeeks\n5Getr41.41.3535ueeksforGeeks\n5Gpawanetr41.41.3535ueeksforGeeks', 'skeeGskeeG', 'StringBuffer delete(int\xa0startIndex, int\xa0endIndex)\nStringBuffer deleteCharAt(int loc)', 'forGeeks\nforGeek', 'StringBuffer replace(int startIndex, int endIndex, String str)', 'GeeksareGeeks']",['append()|||Used to add text at the end of the existing text.&&&length()|||The length of a StringBuffer can be found by the length( ) method&&&capacity()|||the total\xa0allocated capacity can be found by the capacity( ) method&&&charAt()|||\xa0&&&delete()|||Deletes a sequence of characters from the invoking object&&&deleteCharAt()|||Deletes the character at the index specified by loc&&&ensureCapacity()|||Ensures capacity is at least equals to the given minimum.&&&insert()|||Inserts text at the specified index position&&&length()|||Returns length of the string \xa0&&&reverse()|||Reverse the characters within a StringBuffer object&&&replace()|||Replace one set of characters with another set inside a StringBuffer object'],"['java.lang.StringBuffer extends (or inherits from) Object class.|||All Implemented Interfaces of StringBuffer class: Serializable, Appendable, CharSequence.|||public final class StringBufferextends Objectimplements Serializable, CharSequence, Appendable.|||String buffers are safe for use by multiple threads. The methods can be synchronized wherever necessary so that all the operations on any particular instance behave as if they occur in some serial order.|||Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence) this class synchronizes only on the string buffer performing the operation, not on the source.|||It inherits some of the methods from the Object class which such as clone(), equals(), finalize(), getClass(), hashCode(), notifies(), notifyAll().&&&ensureCapacity()&&&appendCodePoint(int codePoint): This method appends the string representation of the codePoint argument to this sequence.&&&charAt(int index)&&&IntStream chars(): This method returns a stream of int zero-extending the char values from this sequence.&&&int codePointAt(int index): This method returns the character (Unicode code point) at the specified index.&&&int codePointBefore(int index): This method returns the character (Unicode code point) before the specified index.&&&int codePointCount(int beginIndex, int endIndex): This method returns the number of Unicode code points in the specified text range of this sequence.&&&IntStream codePoints(): This method returns a stream of code point values from this sequence.&&&void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin): In this method, the characters are copied from this sequence into the destination character array dst.&&&int indexOf(String str): This method returns the index within this string of the first occurrence of the specified substring.&&&int lastIndexOf(String str): This method returns the index within this string of the last occurrence of the specified substring.&&&int offsetByCodePoints(int index, int codePointOffset): This method returns the index within this sequence that is offset from the given index by codePointOffset code points.&&&void setCharAt(int index, char ch): In this method, the character at the specified index is set to ch.&&&void setLength(int newLength): This method sets the length of the character sequence.&&&CharSequence subSequence(int start, int end): This method returns a new character sequence that is a subsequence of this sequence.&&&String substring(int start): This method returns a new String that contains a subsequence of characters currently contained in this character sequence.&&&String toString(): This method returns a string representing the data in this sequence.&&&void trimToSize(): This method attempts to reduce storage used for the character sequence.']"
24,['StringBuilder Class in Java with Examples'],"['Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/stringbuilder-append-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-appendcodepoint-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-capacity-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-charat-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-codepointat-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-codepointbefore-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-codepointcount-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-delete-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-ensurecapacity-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-getchars-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-indexof-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-lastindexof-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-length-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-replace-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-reverse-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-setcharat-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-setlength-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-subsequence-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-substring-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-tostring-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-trimtosize-method-in-java-with-examples/', 'https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuilder.html', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Constructors in Java StringBuilder:\xa0\xa0', 'Below is a sample program to illustrate StringBuilder in Java:\xa0', 'Methods in Java StringBuilder:\xa0', 'Example:\xa0\xa0', 'Reference: https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuilder.html\xa0']",[],"['The StringBuilder in Java represents a mutable sequence of characters. Since the String Class in Java creates an immutable sequence of characters, the StringBuilder class provides an alternative to String Class, as it creates a mutable sequence of characters. The function of StringBuilder is very much similar to the StringBuffer class, as both of them provide an alternative to String Class by making a mutable sequence of characters. However the StringBuilder class differs from the StringBuffer class on the basis of synchronization. The StringBuilder class provides no guarantee of synchronization whereas the StringBuffer class does. Therefore this class is designed for use as a drop-in replacement for StringBuffer in places where the StringBuffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to StringBuffer as it will be faster under most implementations. Instances of StringBuilder are not safe for use by multiple threads. If such synchronization is required then it is recommended that StringBuffer be used.Class Hierarchy:\xa0\xa0']","['// Java code to illustrate StringBuilder import java.util.*;import java.util.concurrent.LinkedBlockingQueue; public class GFG1 {    public static void main(String[] argv)        throws Exception    {         // create a StringBuilder object        // using StringBuilder() constructor        StringBuilder str            = new StringBuilder();         str.append(""GFG"");         // print string        System.out.println(""String = ""                           + str.toString());         // create a StringBuilder object        // using StringBuilder(CharSequence) constructor        StringBuilder str1            = new StringBuilder(""AAAABBBCCCC"");         // print string        System.out.println(""String1 = ""                           + str1.toString());         // create a StringBuilder object        // using StringBuilder(capacity) constructor        StringBuilder str2            = new StringBuilder(10);         // print string        System.out.println(""String2 capacity = ""                           + str2.capacity());         // create a StringBuilder object        // using StringBuilder(String) constructor        StringBuilder str3            = new StringBuilder(str1.toString());         // print string        System.out.println(""String3 = ""                           + str3.toString());    }}', '// Java code to illustrate// methods of StringBuilder import java.util.*;import java.util.concurrent.LinkedBlockingQueue; public class GFG1 {    public static void main(String[] argv)        throws Exception    {         // create a StringBuilder object        // with a String pass as parameter        StringBuilder str            = new StringBuilder(""AAAABBBCCCC"");         // print string        System.out.println(""String = ""                           + str.toString());         // reverse the string        StringBuilder reverseStr = str.reverse();         // print string        System.out.println(""Reverse String = ""                           + reverseStr.toString());         // Append \', \'(44) to the String        str.appendCodePoint(44);         // Print the modified String        System.out.println(""Modified StringBuilder = ""                           + str);         // get capacity        int capacity = str.capacity();         // print the result        System.out.println(""StringBuilder = "" + str);        System.out.println(""Capacity of StringBuilder = ""                           + capacity);    }}']","['java.lang.Object\n ↳ java.lang\n    ↳ Class StringBuilder', 'public final class StringBuilder\n    extends Object\n    implements Serializable, CharSequence', 'String = GFG\nString1 = AAAABBBCCCC\nString2 capacity = 10\nString3 = AAAABBBCCCC', 'String = AAAABBBCCCC\nReverse String = CCCCBBBAAAA\nModified StringBuilder = CCCCBBBAAAA,\nStringBuilder = CCCCBBBAAAA,\nCapacity of StringBuilder = 27']",[],"['StringBuilder(): Constructs a string builder with no characters in it and an initial capacity of 16 characters.|||StringBuilder(int capacity): Constructs a string builder with no characters in it and an initial capacity specified by the capacity argument.|||StringBuilder(CharSequence seq): Constructs a string builder that contains the same characters as the specified CharSequence.|||StringBuilder(String str): Constructs a string builder initialized to the contents of the specified string.&&&&&&StringBuilder append(X x): This method appends the string representation of the X type argument to the sequence.|||StringBuilder appendCodePoint(int codePoint): This method appends the string representation of the codePoint argument to this sequence.|||int capacity(): This method returns the current capacity.|||char charAt(int index): This method returns the char value in this sequence at the specified index.|||IntStream chars(): This method returns a stream of int zero-extending the char values from this sequence.|||int codePointAt(int index): This method returns the character (Unicode code point) at the specified index.|||int codePointBefore(int index): This method returns the character (Unicode code point) before the specified index.|||int codePointCount(int beginIndex, int endIndex): This method returns the number of Unicode code points in the specified text range of this sequence.|||IntStream codePoints(): This method returns a stream of code point values from this sequence.|||StringBuilder delete(int start, int end): This method removes the characters in a substring of this sequence.|||StringBuilder deleteCharAt(int index): This method removes the char at the specified position in this sequence.|||void ensureCapacity(int minimumCapacity): This method ensures that the capacity is at least equal to the specified minimum.|||void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin): This method characters are copied from this sequence into the destination character array dst.|||int indexOf(): This method returns the index within this string of the first occurrence of the specified substring.|||StringBuilder insert(int offset, boolean b): This method inserts the string representation of the booalternatelean argument into this sequence.|||StringBuilder insert(): This method inserts the string representation of the char argument into this sequence.|||int lastIndexOf(): This method returns the index within this string of the last occurrence of the specified substring.|||int length(): This method returns the length (character count).|||int offsetByCodePoints(int index, int codePointOffset): This method returns the index within this sequence that is offset from the given index by codePointOffset code points.|||StringBuilder replace(int start, int end, String str): This method replaces the characters in a substring of this sequence with characters in the specified String.|||StringBuilder reverse(): This method causes this character sequence to be replaced by the reverse of the sequence.|||void setCharAt(int index, char ch): In this method, the character at the specified index is set to ch.|||void setLength(int newLength): This method sets the length of the character sequence.|||CharSequence subSequence(int start, int end): This method returns a new character sequence that is a subsequence of this sequence.|||String substring(): This method returns a new String that contains a subsequence of characters currently contained in this character sequence.|||String toString(): This method returns a string representing the data in this sequence.|||void trimToSize(): This method attempts to reduce storage used for the character sequence.&&&']"
25,['Arrays in Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']","['Creating, Initializing, and Accessing an Array', 'Instantiating an Array in Java', 'Array Literal', 'Accessing Java Array Elements using for Loop', 'Arrays of Objects', 'What happens if we try to access elements outside the array size?', 'Multidimensional Arrays', 'Passing Arrays to Methods', 'Returning Arrays from Methods', 'Class Objects for Arrays', 'Array Members', 'Arrays Types and Their Allowed Element Types', 'Cloning of arrays']","['https://media.geeksforgeeks.org/wp-content/uploads/Arrays1.png', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/Blank-Diagram-Page-1-10.jpeg', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/Blank-Diagram-Page-1-13.jpeg', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/Blank-Diagram-Page-1-11.jpeg', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/Blank-Diagram-Page-1-12.jpeg']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.geeksforgeeks.org/marker-interface-java/', 'https://www.geeksforgeeks.org/serialization-in-java/', 'https://www.geeksforgeeks.org/g-fact-46/', 'https://www.geeksforgeeks.org/default-array-values-in-java/', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/jagged-array-in-java/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.geeksforgeeks.org/clone-method-in-java-2/', 'https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/', 'https://www.geeksforgeeks.org/jagged-array-in-java/', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/array-class-in-java/', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['One-Dimensional Arrays:\xa0', 'The general form of a one-dimensional array declaration is\xa0', 'Implementation:', 'You can also access java arrays using foreach loops.\xa0\xa0', 'An array of objects is created like an array of primitive type data items in the following way.\xa0', 'Runtime error\xa0', 'Explanation:\xa0', 'Related Articles:\xa0']","['An array in Java is a group of like-typed variables referred to by a common name. Arrays in Java work differently than they do in C/C++. Following are some important points about Java arrays.\xa0', 'An array can contain primitives (int, char, etc.) and object (or non-primitive) references of a class depending on the definition of the array. In the case of primitive data types, the actual values are stored in contiguous memory locations. In the case of class objects, the actual objects are stored in a heap segment.\xa0\xa0', 'Although the first declaration establishes that intArray is an array variable, no actual array exists. It merely tells the compiler that this variable (intArray) will hold an array of the integer type. To link intArray with an actual, physical array of integers, you must allocate one using new and assign it to intArray.\xa0', 'When an array is declared, only a reference of an array is created. To create or give memory to the array, you create an array like this: The general form of new as it applies to one-dimensional arrays appears as follows:\xa0', 'Here, type specifies the type of data being allocated, size determines the number of elements in the array, and var-name is the name of the array variable that is linked to the array. To use new to allocate an array, you must specify the type and number of elements to allocate.', 'In a situation where the size of the array and variables of the array are already known, array literals can be used.\xa0', 'Each element in the array is accessed via its index. The index begins with 0 and ends at (total array size)-1. All the elements of array can be accessed using Java for Loop.', 'The studentArray contains seven memory spaces each of the size of student class in which the address of seven Student objects can be stored. The Student objects have to be instantiated using the constructor of the Student class, and their references should be assigned to the array elements in the following way.\xa0', 'JVM throws ArrayIndexOutOfBoundsException to indicate that the array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of an array.', 'Multidimensional arrays are arrays of arrays with each element of the array holding the reference of other arrays. These are also known as Jagged Arrays. A multidimensional array is created by appending one set of square brackets ([]) per dimension. Examples:\xa0', 'Like variables, we can also pass arrays to methods. For example, the below program passes the array to method sum to calculate the sum of the array’s values.', 'As usual, a method can also return an array. For example, the below program returns an array from method m1.\xa0', 'Every array has an associated Class object, shared with all other arrays with the same component type.\xa0', 'Now, as you know that arrays are objects of a class, and a direct superclass of arrays is a class Object. The members of an array type are all of the following:\xa0', 'When you clone a single-dimensional array, such as Object[], a “deep copy” is performed with the new array containing copies of the original array’s elements as opposed to references.', 'A clone of a multi-dimensional array (like Object[][]) is a “shallow copy,” however, which is to say that it creates only a single new array with each element array a reference to an original element array, but subarrays are shared.\xa0']","['An array declaration has two components: the type and the name. type declares the element type of the array. The element type determines the data type of each element that comprises the array. Like an array of integers, we can also create an array of other primitive data types like char, float, double, etc., or user-defined data types (objects of a class). Thus, the element type for the array determines what type of data the array will hold.\xa0', 'This article is contributed by Nitsdheerendra and Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java program to illustrate creating an array// of integers,  puts some values in the array,// and prints each value to standard output. class GFG{    public static void main (String[] args)    {              // declares an Array of integers.      int[] arr;               // allocating memory for 5 integers.      arr = new int[5];               // initialize the first elements of the array      arr[0] = 10;               // initialize the second elements of the array      arr[1] = 20;               //so on...      arr[2] = 30;      arr[3] = 40;      arr[4] = 50;               // accessing the elements of the specified array      for (int i = 0; i < arr.length; i++)         System.out.println(""Element at index "" + i +                                      "" : ""+ arr[i]);             }}', '// Java program to illustrate creating//  an array of objects class Student{    public int roll_no;    public String name;    Student(int roll_no, String name)    {        this.roll_no = roll_no;        this.name = name;    }} // Elements of the array are objects of a class Student.public class GFG{    public static void main (String[] args)    {        // declares an Array of integers.        Student[] arr;         // allocating memory for 5 objects of type Student.        arr = new Student[5];         // initialize the first elements of the array        arr[0] = new Student(1,""aman"");         // initialize the second elements of the array        arr[1] = new Student(2,""vaibhav"");         // so on...        arr[2] = new Student(3,""shikar"");        arr[3] = new Student(4,""dharmesh"");        arr[4] = new Student(5,""mohit"");         // accessing the elements of the specified array        for (int i = 0; i < arr.length; i++)            System.out.println(""Element at "" + i + "" : "" +                        arr[i].roll_no +"" ""+ arr[i].name);    }}', 'public class GFG{    public static void main (String[] args)    {        int[] arr = new int[2];        arr[0] = 10;        arr[1] = 20;         for (int i = 0; i <= arr.length; i++)            System.out.println(arr[i]);    }}', 'public class multiDimensional{    public static void main(String args[])    {        // declaring and initializing 2D array        int arr[][] = { {2,7,9},{3,6,1},{7,4,2} };         // printing 2D array        for (int i=0; i< 3 ; i++)        {            for (int j=0; j < 3 ; j++)                System.out.print(arr[i][j] + "" "");             System.out.println();        }    }}', '// Java program to demonstrate// passing of array to method public class Test{       // Driver method    public static void main(String args[])    {        int arr[] = {3, 1, 2, 5, 4};                 // passing array to method m1        sum(arr);         }     public static void sum(int[] arr)    {        // getting sum of array values        int sum = 0;                 for (int i = 0; i < arr.length; i++)            sum+=arr[i];                 System.out.println(""sum of array values : "" + sum);    }}', '// Java program to demonstrate// return of array from method class Test{       // Driver method    public static void main(String args[])    {        int arr[] = m1();                 for (int i = 0; i < arr.length; i++)            System.out.print(arr[i]+"" "");         }     public static int[] m1()    {        // returning  array        return new int[]{1,2,3};    }}', '// Java program to demonstrate// Class Objects for Arrays class Test{    public static void main(String args[])    {        int intArray[] = new int[3];        byte byteArray[] = new byte[3];        short shortsArray[] = new short[3];                 // array of Strings        String[] strArray = new String[3];                 System.out.println(intArray.getClass());        System.out.println(intArray.getClass().getSuperclass());        System.out.println(byteArray.getClass());        System.out.println(shortsArray.getClass());        System.out.println(strArray.getClass());    }}', '// Java program to demonstrate// cloning of one-dimensional arrays class Test{       public static void main(String args[])    {        int intArray[] = {1,2,3};                 int cloneArray[] = intArray.clone();                 // will print false as deep copy is created        // for one-dimensional array        System.out.println(intArray == cloneArray);                 for (int i = 0; i < cloneArray.length; i++) {            System.out.print(cloneArray[i]+"" "");        }    }}', '// Java program to demonstrate// cloning of multi-dimensional arrays class Test{       public static void main(String args[])    {        int intArray[][] = {{1,2,3},{4,5}};                 int cloneArray[][] = intArray.clone();                 // will print false        System.out.println(intArray == cloneArray);                 // will print true as shallow copy is created        // i.e. sub-arrays are shared        System.out.println(intArray[0] == cloneArray[0]);        System.out.println(intArray[1] == cloneArray[1]);             }}']","['type var-name[];\nOR\ntype[] var-name;', '// both are valid declarations\nint intArray[]; \nor int[] intArray; \n\nbyte byteArray[];\nshort shortsArray[];\nboolean booleanArray[];\nlong longArray[];\nfloat floatArray[];\ndouble doubleArray[];\nchar charArray[];\n\n// an array of references to objects of\n// the class MyClass (a class created by\n// user)\nMyClass myClassArray[]; \n\nObject[]  ao,        // array of Object\nCollection[] ca;  // array of Collection\n                     // of unknown type', 'var-name = new type [size];', 'int intArray[];    //declaring array\nintArray = new int[20];  // allocating memory to array', 'int[] intArray = new int[20]; // combining both statements in one', 'int[] intArray = new int[]{ 1,2,3,4,5,6,7,8,9,10 }; \n // Declaring array literal', '// accessing the elements of the specified array\nfor (int i = 0; i < arr.length; i++)\n  System.out.println(""Element at index "" + i + \n                                "" : ""+ arr[i]);', 'Element at index 0 : 10\nElement at index 1 : 20\nElement at index 2 : 30\nElement at index 3 : 40\nElement at index 4 : 50', 'Student[] arr = new Student[7]; //student is a user-defined class', 'Student[] arr = new Student[5];', 'Element at 0 : 1 aman\nElement at 1 : 2 vaibhav\nElement at 2 : 3 shikar\nElement at 3 : 4 dharmesh\nElement at 4 : 5 mohit', 'Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 2\n    at GFG.main(File.java:12)', '10\n20', 'int[][] intArray = new int[10][20]; //a 2D array or matrix\nint[][][] intArray = new int[10][20][10]; //a 3D array', '2 7 9 \n3 6 1 \n7 4 2', 'sum of array values : 15', '1 2 3', 'class [I\nclass java.lang.Object\nclass [B\nclass [S\nclass [Ljava.lang.String;', 'false\n1 2 3', 'false\ntrue\ntrue']",['Primitive Type Arrays|||Any type which can be implicitly promoted to declared type.&&&Object Type Arrays|||Either declared type objects or it’s child class objects.&&&Abstract Class Type Arrays|||Its child-class objects are allowed.&&&Interface Type Arrays|||Its implementation class objects are allowed.'],"['In Java, all arrays are dynamically allocated. (discussed below)|||Since arrays are objects in Java, we can find their length using the object property length. This is different from C/C++, where we find length using sizeof.|||A Java array variable can also be declared like other variables with [] after the data type.|||The variables in the array are ordered, and each has an index beginning from 0.|||Java array can be also be used as a static field, a local variable, or a method parameter.|||The size of an array must be specified by int or short value and not long.|||The direct superclass of an array type is Object.|||Every array type implements the interfaces Cloneable and java.io.Serializable.&&&The length of this array determines the length of the created array.|||There is no need to write the new int[] part in the latest versions of Java.&&&The public final field length, which contains the number of components of the array. Length may be positive or zero.|||All the members inherited from class Object; the only method of Object that is not inherited is its clone method.|||The public method clone(), which overrides the clone method in class Object and throws no checked exceptions.&&&Jagged Array in Java|||For-each loop in Java|||Arrays class in Java&&&&&&The elements in the array allocated by new will automatically be initialized to zero (for numeric types), false (for boolean), or null (for reference types). Refer Default array values in Java|||Obtaining an array is a two-step process. First, you must declare a variable of the desired array type. Second, you must allocate the memory to hold the array, using new, and assign it to the array variable. Thus, in Java, all arrays are dynamically allocated.&&&The string “[I” is the run-time type signature for the class object “array with component type int.”|||The only direct superclass of an array type is java.lang.Object.|||The string “[B” is the run-time type signature for the class object “array with component type byte.”|||The string “[S” is the run-time type signature for the class object “array with component type short.”|||The string “[L” is the run-time type signature for the class object “array with component type of a Class.” The Class name is then followed.&&&']"
26,['Multidimensional Arrays in Java'],"['Two – dimensional Array (2D-Array)', 'Three – dimensional Array (3D-Array)']","['Accessing Elements of Two-Dimensional Arrays', 'Accessing Elements of Three-Dimensional Arrays']","['https://media.geeksforgeeks.org/wp-content/uploads/two-d.png', 'https://media.geeksforgeeks.org/wp-content/uploads/3D-array.jpg']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/arrays-in-java/', 'https://media.geeksforgeeks.org/wp-content/uploads/two-d.png', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Indirect Method of Declaration:', 'Direct Method of Declaration:', 'For example:', 'The above example represents the element present in first row and first column.', 'Print 2D array in tabular format:', 'Indirect Method of Declaration:', 'Direct Method of Declaration:', 'For example:', 'Print 3D array in tabular format:', 'Implementation:']","['Array-Basics in JavaMultidimensional Arrays can be defined in simple words as array of arrays. Data in multidimensional arrays are stored in tabular form (in row major order).', 'data_type[1st dimension][2nd dimension][]..[Nth dimension] array_name = new data_type[size1][size2]….[sizeN];', 'Size of multidimensional arrays: The total number of elements that can be stored in a multidimensional array can be calculated by multiplying the size of all the dimensions.', 'For example:The array int[][] x = new int[10][20] can store a total of (10*20) = 200 elements.Similarly, array int[][][] x = new int[5][10][20] can store a total of (5*10*20) = 1000 elements.', 'Two – dimensional array is the simplest form of a multidimensional array. A two – dimensional array can be seen as an array of one – dimensional array for easier understanding.', 'Elements in two-dimensional arrays are commonly referred by x[i][j] where ‘i’ is the row number and ‘j’ is the column number.', 'Note: In arrays if size of array is N. Its index will be from 0 to N-1. Therefore, for row_index 2, actual row number is 2+1 = 3.', 'Representation of 2D array in Tabular Format: A two – dimensional array can be seen as a table with ‘x’ rows and ‘y’ columns where the row number ranges from 0 to (x-1) and column number ranges from 0 to (y-1). A two – dimensional array ‘x’ with 3 rows and 3 columns is shown below:', 'To output all the elements of a Two-Dimensional array, use nested for loops. For this two for loops are required, One to traverse the rows and another to traverse columns.', 'Three – dimensional array is a complex form of a multidimensional array. A three – dimensional array can be seen as an array of two – dimensional array for easier understanding.', 'Elements in three-dimensional arrays are commonly referred by x[i][j][k] where ‘i’ is the array number, ‘j’ is the row number and ‘k’ is the column number.', 'The above example represents the element present in the first row and first column of the first array in the declared 3D array.', 'Note: In arrays if size of array is N. Its index will be from 0 to N-1. Therefore, for row_index 2, actual row number is 2+1 = 3.', 'Representation of 3D array in Tabular Format: A three – dimensional array can be seen as a tables of arrays with ‘x’ rows and ‘y’ columns where the row number ranges from 0 to (x-1) and column number ranges from 0 to (y-1). A three – dimensional array with 3 array containing 3 rows and 3 columns is shown below:', 'To output all the elements of a Three-Dimensional array, use nested for loops. For this three for loops are required, One to traverse the arrays, second to traverse the rows and another to traverse columns.', 'As an example, let’s find the total number of even and odd numbers in an input array. Here, we will use the concept of a 2-dimensional array. Here are a few points that explain the use of the various elements in the upcoming code:']","['Inserting a Multi-dimensional Array during Runtime:This topic is forced n taking user-defined input into a multidimensional array during runtime. It is focused on the user first giving all the input to the program during runtime and after all entered input, the program will give output with respect to each input accordingly. It is useful when the user wishes to make input for multiple Test-Cases with multiple different values first and after all those things done, program will start providing output.']","['class GFG {    public static void main(String[] args)    {          int[][] arr = new int[10][20];        arr[0][0] = 1;          System.out.println(""arr[0][0] = "" + arr[0][0]);    }}', 'class GFG {    public static void main(String[] args)    {          int[][] arr = { { 1, 2 }, { 3, 4 } };          for (int i = 0; i < 2; i++)            for (int j = 0; j < 2; j++)                System.out.println(""arr["" + i + ""]["" + j + ""] = ""                                   + arr[i][j]);    }}', 'class GFG {    public static void main(String[] args)    {          int[][] arr = { { 1, 2 }, { 3, 4 } };          System.out.println(""arr[0][0] = "" + arr[0][0]);    }}', 'class GFG {    public static void main(String[] args)    {          int[][] arr = { { 1, 2 }, { 3, 4 } };          for (int i = 0; i < 2; i++) {            for (int j = 0; j < 2; j++) {                System.out.print(arr[i][j] + "" "");            }              System.out.println();        }    }}', 'class GFG {    public static void main(String[] args)    {          int[][][] arr = new int[10][20][30];        arr[0][0][0] = 1;          System.out.println(""arr[0][0][0] = "" + arr[0][0][0]);    }}', 'class GFG {    public static void main(String[] args)    {          int[][][] arr = { { { 1, 2 }, { 3, 4 } }, { { 5, 6 }, { 7, 8 } } };          for (int i = 0; i < 2; i++)            for (int j = 0; j < 2; j++)                for (int z = 0; z < 2; z++)                    System.out.println(""arr["" + i                                       + ""][""                                       + j + ""][""                                       + z + ""] = ""                                       + arr[i][j][z]);    }}', 'class GFG {    public static void main(String[] args)    {          int[][][] arr = { { { 1, 2 }, { 3, 4 } }, { { 5, 6 }, { 7, 8 } } };          System.out.println(""arr[0][0][0] = "" + arr[0][0][0]);    }}', 'class GFG {    public static void main(String[] args)    {          int[][][] arr = { { { 1, 2 }, { 3, 4 } },                          { { 5, 6 }, { 7, 8 } } };          for (int i = 0; i < 2; i++) {              for (int j = 0; j < 2; j++) {                  for (int k = 0; k < 2; k++) {                      System.out.print(arr[i][j][k] + "" "");                }                  System.out.println();            }            System.out.println();        }    }}', 'import java.util.Scanner;  public class GFGTestCase {    public static void main(        String[] args)    {        // Scanner class to take        // values from console        Scanner scanner = new Scanner(System.in);          // totalTestCases = total        // number of TestCases        // eachTestCaseValues =        // values in each TestCase as        // an Array values        int totalTestCases, eachTestCaseValues;          // takes total number of        // TestCases as integer number        totalTestCases = scanner.nextInt();          // An array is formed as row        // values for total testCases        int[][] arrayMain = new int[totalTestCases][];          // for loop to take input of        // values in each TestCase        for (int i = 0; i < arrayMain.length; i++) {            eachTestCaseValues = scanner.nextInt();            arrayMain[i] = new int[eachTestCaseValues];            for (int j = 0; j < arrayMain[i].length; j++) {                arrayMain[i][j] = scanner.nextInt();            }        } // All input entry is done.          // Start executing output        // according to condition provided        for (int i = 0; i < arrayMain.length; i++) {              // Initialize total number of            // even & odd numbers to zero            int nEvenNumbers = 0, nOddNumbers = 0;              // prints TestCase number with            // total number of its arguments            System.out.println(                ""TestCase "" + i + "" with ""                + arrayMain[i].length + "" values:"");            for (int j = 0; j < arrayMain[i].length; j++) {                System.out.print(arrayMain[i][j] + "" "");                  // even & odd counter updated as                // eligible number is found                if (arrayMain[i][j] % 2 == 0) {                    nEvenNumbers++;                }                else {                    nOddNumbers++;                }            }            System.out.println();              // Prints total numbers of            // even & odd            System.out.println(                ""Total Even numbers: "" + nEvenNumbers                + "", Total Odd numbers: "" + nOddNumbers);        }    }}// This code is contributed by Udayan Kamble.']","['Two dimensional array:\nint[][] twoD_arr = new int[10][20];\n\nThree dimensional array:\nint[][][] threeD_arr = new int[10][20][30];', 'data_type[][] array_name = new data_type[x][y];\n        For example: int[][] arr = new int[10][20];', 'array_name[row_index][column_index] = value;\n        For example: arr[0][0] = 1;', 'arr[0][0] = 1', 'data_type[][] array_name = {\n                             {valueR1C1, valueR1C2, ....}, \n                             {valueR2C1, valueR2C2, ....}\n                           };\n\nFor example: int[][] arr = {{1, 2}, {3, 4}};', 'arr[0][0] = 1\narr[0][1] = 2\narr[1][0] = 3\narr[1][1] = 4', 'x[row_index][column_index]', 'int[][] arr = new int[10][20];\narr[0][0] = 1;', 'arr[0][0] = 1', '1 2 \n3 4', 'data_type[][][] array_name = new data_type[x][y][z];\n        For example: int[][][] arr = new int[10][20][30];', 'array_name[array_index][row_index][column_index] = value;\n        For example: arr[0][0][0] = 1;', 'arr[0][0][0] = 1', 'data_type[][][] array_name = {\n                              {\n                               {valueA1R1C1, valueA1R1C2, ....}, \n                               {valueA1R2C1, valueA1R2C2, ....}\n                              },\n                              {\n                               {valueA2R1C1, valueA2R1C2, ....}, \n                               {valueA2R2C1, valueA2R2C2, ....}\n                              }\n                             };\n\nFor example: int[][][] arr = { {{1, 2}, {3, 4}}, {{5, 6}, {7, 8}} };', 'arr[0][0][0] = 1\narr[0][0][1] = 2\narr[0][1][0] = 3\narr[0][1][1] = 4\narr[1][0][0] = 5\narr[1][0][1] = 6\narr[1][1][0] = 7\narr[1][1][1] = 8', 'x[array_index][row_index][column_index]', 'int[][][] arr = new int[10][20][30];\narr[0][0][0] = 1;', 'arr[0][0][0] = 1', '1 2 \n3 4 \n\n5 6 \n7 8', 'Input:\n2\n2\n1 2\n3\n1 2 3\n\nOutput:\nTestCase 0 with 2 values:\n1 2 \nTotal Even numbers: 1, Total Odd numbers: 1\nTestCase 1 with 3 values:\n1 2 3 \nTotal Even numbers: 1, Total Odd numbers: 2\n\nInput:\n3\n8\n1 2 3 4 5 11 55 66\n5\n100 101 55 35 108\n6\n3 80 11 2 1 5\n\nOutput:\nTestCase 0 with 8 values:\n1 2 3 4 5 11 55 66 \nTotal Even numbers: 3, Total Odd numbers: 5\nTestCase 1 with 5 values:\n100 101 55 35 108 \nTotal Even numbers: 2, Total Odd numbers: 3\nTestCase 2 with 6 values:\n3 80 11 2 1 5 \nTotal Even numbers: 2, Total Odd numbers: 4']",[],"['data_type: Type of data to be stored in the array. For example: int, char, etc.|||dimension: The dimension of the array created.For example: 1D, 2D, etc.|||array_name: Name of the array|||size1, size2, …, sizeN: Sizes of the dimensions respectively.&&&Declaration – Syntax:data_type[][] array_name = new data_type[x][y];\n        For example: int[][] arr = new int[10][20];\n        |||Initialization – Syntax:array_name[row_index][column_index] = value;\n        For example: arr[0][0] = 1;\n        &&&Declaration – Syntax:data_type[][][] array_name = new data_type[x][y][z];\n        For example: int[][][] arr = new int[10][20][30];\n        |||Initialization – Syntax:array_name[array_index][row_index][column_index] = value;\n        For example: arr[0][0][0] = 1;\n        &&&Row integer number is considered as the number of Test-Cases and Column values are considered as values in each Test-Case.|||One for() loop is used for updating Test-Case number and another for() loop is used for taking respective array values.|||As all input entry is done, again two for() loops are used in the same manner to execute the program according to the condition specified.|||The first line of input is the total number of TestCases.|||The second line shows the total number of first array values.|||The third line gives array values and so on.']"
27,['Jagged Array in Java'],"['Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/arrays-in-java/', 'https://en.wikipedia.org/wiki/Jagged_array', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Prerequisite: Arrays in Java', 'Pictorial representation of Jagged array in Memory:', 'Jagged_array', 'Declaration and Initialization of Jagged array :', 'Alternative, ways to Initialize a Jagged array :', 'Following are Java programs to demonstrate the above concept.\xa0']","['A jagged array is an array of arrays such that member arrays can be of different sizes, i.e., we can create a 2-D array but with a variable number of columns in each row. These types of arrays are also known as Jagged arrays.\xa0', 'Following is another example where i’th row has i columns, i.e., the first row has 1 element, the second row has two elements and so on.', 'This article is contributed by Rahul Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\xa0Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\xa0', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']",[],"['// Program to demonstrate 2-D jagged array in Javaclass Main {    public static void main(String[] args)    {        // Declaring 2-D array with 2 rows        int arr[][] = new int[2][];         // Making the above array Jagged         // First row has 3 columns        arr[0] = new int[3];         // Second row has 2 columns        arr[1] = new int[2];         // Initializing array        int count = 0;        for (int i = 0; i < arr.length; i++)            for (int j = 0; j < arr[i].length; j++)                arr[i][j] = count++;         // Displaying the values of 2D Jagged array        System.out.println(""Contents of 2D Jagged Array"");        for (int i = 0; i < arr.length; i++) {            for (int j = 0; j < arr[i].length; j++)                System.out.print(arr[i][j] + "" "");            System.out.println();        }    }}', '// Another Java program to demonstrate 2-D jagged// array such that first row has 1 element, second// row has two elements and so on.class Main {    public static void main(String[] args)    {        int r = 5;         // Declaring 2-D array with 5 rows        int arr[][] = new int[r][];         // Creating a 2D array such that first row        // has 1 element, second row has two        // elements and so on.        for (int i = 0; i < arr.length; i++)            arr[i] = new int[i + 1];         // Initializing array        int count = 0;        for (int i = 0; i < arr.length; i++)            for (int j = 0; j < arr[i].length; j++)                arr[i][j] = count++;         // Displaying the values of 2D Jagged array        System.out.println(""Contents of 2D Jagged Array"");        for (int i = 0; i < arr.length; i++) {            for (int j = 0; j < arr[i].length; j++)                System.out.print(arr[i][j] + "" "");            System.out.println();        }    }}']","['Syntax: data_type array_name[][] = new data_type[n][];  //n: no. of rows\n             array_name[] = new data_type[n1] //n1= no. of columns in row-1\n             array_name[] = new data_type[n2] //n2= no. of columns in row-2\n             array_name[] = new data_type[n3] //n3= no. of columns in row-3\n                                   .\n                                   .\n                                   .\n             array_name[] = new data_type[nk]  //nk=no. of columns in row-n', 'int arr_name[][] = new int[][]  {\n                                  new int[] {10, 20, 30 ,40},\n                                  new int[] {50, 60, 70, 80, 90, 100},\n                                  new int[] {110, 120}\n                                      };\n                                      \n                              OR                                     \n                                                         \n                    int[][] arr_name = {\n                          new int[] {10, 20, 30 ,40},\n                          new int[] {50, 60, 70, 80, 90, 100},\n                          new int[] {110, 120}\n                              };\n                              \n                              OR                                     \n                                                         \n                    int[][] arr_name = {\n                           {10, 20, 30 ,40},\n                           {50, 60, 70, 80, 90, 100},\n                           {110, 120}\n                              };', 'Contents of 2D Jagged Array\n0 1 2 \n3 4', 'Contents of 2D Jagged Array\n0 \n1 2 \n3 4 5 \n6 7 8 9 \n10 11 12 13 14']",[],[]
28,['Array Copy in Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/uploads/20211011085925/Screenshot20211011at85707AM.png'],[],"['https://www.geeksforgeeks.org/easy/', 'http://geeksquiz.com/cloning-in-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Method 2: Using Clone() method\xa0', 'Method 3: Using arraycopy() method', 'Parameters:', 'Method 4: Using copyOf() method of Arrays class\xa0', 'Parameters:', 'Method 5: Using copyOfRange() method of Arrays class', 'This method copies the specified range of the specified array into a new array.', 'Parameters:', 'Lastly, let us do discuss the overview of the above methods:\xa0']","['Given an array, we need to copy its elements in a different array, to a naive user below way comes into mind which is however incorrect as depicted below as follows:', 'Output Explanation: When we do “b = a”, we are actually assigning a reference to the array. Hence, if we make any change to one array, it would be reflected in other arrays as well because both a and b refer to the same location. We can also verify it with code as shown below as follows:', 'We have seen internal working while copying elements and edge cases to be taken into consideration after getting through errors as generated above, so now we can propose out correct ways to copy array as listed below as follows:', 'Method 1: Iterating each element of the given original array and copy one element at a time. With the usage of this method, it guarantees that any modifications to b, will not alter the original array a, as shown in below example as follows:', 'In the previous method we had to iterate over the entire array to make a copy, can we do better? Yes, we can use the clone method in Java.\xa0', 'We can also use System.arraycopy() Method. The system is present in java.lang package. Its signature is as :\xa0', 'If we want to copy the first few elements of an array or a full copy of the array, you can use this method.', 'This article is contributed by Ashutosh Kumar. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['// A Java program to demonstrate that simply// assigning one array reference is incorrectpublic class Test {    public static void main(String[] args)    {        int a[] = { 1, 8, 3 };         // Create an array b[] of same size as a[]        int b[] = new int[a.length];         // Doesn\'t copy elements of a[] to b[],        // only makes b refer to same location        b = a;         // Change to b[] will also reflect in a[]        // as \'a\' and \'b\' refer to same location.        b[0]++;         System.out.println(""Contents of a[] "");        for (int i = 0; i < a.length; i++)            System.out.print(a[i] + "" "");         System.out.println(""\\n\\nContents of b[] "");        for (int i = 0; i < b.length; i++)            System.out.print(b[i] + "" "");    }}', '// Java program to demonstrate copying by// one by one assigning elements between arrays // Main classpublic class GFG {     // Main driver method    public static void main(String[] args)    {        // Input array a[]        int a[] = { 1, 8, 3 };         // Create an array b[] of same size as a[]        int b[] = new int[a.length];         // Copying elements of a[] to b[]        for (int i = 0; i < a.length; i++)            b[i] = a[i];         // Changing b[] to verify that        // b[] is different from a[]        b[0]++;         // Display message only        System.out.println(""Contents of a[] "");         for (int i = 0; i < a.length; i++)            System.out.print(a[i] + "" "");         // Display message only        System.out.println(""\\n\\nContents of b[] "");         for (int i = 0; i < b.length; i++)            System.out.print(b[i] + "" "");    }}', '// Java program to demonstrate Copying of Array// using clone() method // Main classpublic class GFG {     // Main driver method    public static void main(String[] args)    {        // Input array a[]        int a[] = { 1, 8, 3 };         // Copying elements of a[] to b[]        int b[] = a.clone();         // Changing b[] to verify that        // b[] is different from a[]        b[0]++;         // Display message for better readability        System.out.println(""Contents of a[] "");         for (int i = 0; i < a.length; i++)            System.out.print(a[i] + "" "");         // Display message for better readability        System.out.println(""\\n\\nContents of b[] "");         for (int i = 0; i < b.length; i++)            System.out.print(b[i] + "" "");    }}', '// Java program to demonstrate array// copy using System.arraycopy() // Main classpublic class GFG {     // Main driver method    public static void main(String[] args)    {        // Custom input array        int a[] = { 1, 8, 3 };         // Creating an array b[] of same size as a[]        int b[] = new int[a.length];         // Copying elements of a[] to b[]        System.arraycopy(a, 0, b, 0, 3);         // Changing b[] to verify that        // b[] is different from a[]        b[0]++;         // Display message only        System.out.println(""Contents of a[] "");         for (int i = 0; i < a.length; i++)            System.out.print(a[i] + "" "");         // Display message only        System.out.println(""\\n\\nContents of b[] "");         for (int i = 0; i < b.length; i++)            System.out.print(b[i] + "" "");    }}', '// Java program to demonstrate array// copy using Arrays.copyOf() // Importing Arrays class from utility classimport java.util.Arrays; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Custom input array        int a[] = { 1, 8, 3 };         // Create an array b[] of same size as a[]        // Copy elements of a[] to b[]        int b[] = Arrays.copyOf(a, 3);         // Change b[] to verify that        // b[] is different from a[]        b[0]++;         System.out.println(""Contents of a[] "");         // Iterating over array. a[]        for (int i = 0; i < a.length; i++)            System.out.print(a[i] + "" "");         System.out.println(""\\n\\nContents of b[] "");         // Iterating over array b[]        for (int i = 0; i < b.length; i++)            System.out.print(b[i] + "" "");    }}', '// Java program to demonstrate array// copy using Arrays.copyOfRange() // Importing Arrays class from utility packageimport java.util.Arrays; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Custom input array        int a[] = { 1, 8, 3, 5, 9, 10 };         // Creating an array b[] and        // copying elements of a[] to b[]        int b[] = Arrays.copyOfRange(a, 2, 6);         // Changing b[] to verify that        // b[] is different from a[]         // Iterating over array a[]        System.out.println(""Contents of a[] "");        for (int i = 0; i < a.length; i++)            System.out.print(a[i] + "" "");         // Iterating over array b[]        System.out.println(""\\n\\nContents of b[] "");        for (int i = 0; i < b.length; i++)            System.out.print(b[i] + "" "");    }}']","[""// Java Program to Illustrate Wrong Way Of Copying an Array\n\n// Input array\nint a[] = { 1, 8, 3 };\n\n// Creating an array b[] of same size as a[]\nint b[] = new int[a.length];\n\n// Doesn't copy elements of a[] to b[], only makes\n// b refer to same location\nb = a;"", 'Contents of a[] \n2 8 3 \n\nContents of b[] \n2 8 3', 'Contents of a[] \n1 8 3 \n\nContents of b[] \n2 8 3', 'Contents of a[] \n1 8 3 \n\nContents of b[] \n2 8 3', 'public static void arraycopy(Object src, int srcPos, Object dest, \n                             int destPos, int length)', 'Contents of a[] \n1 8 3 \n\nContents of b[] \n2 8 3', 'public static int[] copyOf\u200b(int[] original, int newLength)', 'Contents of a[] \n1 8 3 \n\nContents of b[] \n2 8 3', 'public static int[] copyOfRange\u200b(int[] original, int from, int to)', 'Contents of a[] \n1 8 3 5 9 10 \n\nContents of b[] \n3 5 9 10']",[],"['src denotes the source array.|||srcPos is the index from which copying starts.|||dest denotes the destination array|||destPos is the index from which the copied elements are placed in the destination array.|||length is the length of the subarray to be copied.&&&Original array|||Length of the array to get copied.&&&Original array from which a range is to be copied|||Initial index of the range to be copied|||Final index of the range to be copied, exclusive&&&Simply assigning references is wrong|||The array can be copied by iterating over an array, and one by one assigning elements.|||We can avoid iteration over elements using clone() or System.arraycopy()|||clone() creates a new array of the same size, but System.arraycopy() can be used to copy from a source range to a destination range.|||System.arraycopy() is faster than clone() as it uses Java Native Interface|||If you want to copy the first few elements of an array or a full copy of an array, you can use Arrays.copyOf() method.|||Arrays.copyOfRange() is used to copy a specified range of an array. If the starting index is not 0, you can use this method to copy a partial array.&&&&&&Iterating each element of the given original array and copy one element at a time|||Using clone() method|||Using arraycopy() method|||Using copyOf() method of Arrays class|||Using copyOfRange() method of Arrays class&&&']"
29,['How to convert an Array to String in Java?'],[],[],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/arrays-tostring-in-java-with-examples/', 'https://www.geeksforgeeks.org/stringbuilder-append-method-in-java-with-examples/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']",['Below are the various methods to convert an Array to String in Java:'],[],[],"['// Java program to demonstrate// working of Arrays.toString()  import java.io.*;import java.util.*;  class GFG {    public static void main(String[] args)    {          // Let us create different types of arrays and        // print their contents using Arrays.toString()        boolean[] boolArr            = new boolean[] { true, true, false, true };        char[] charArr            = new char[] { \'g\', \'e\', \'e\', \'k\', \'s\' };        double[] dblArr            = new double[] { 1, 2, 3, 4 };        int[] intArr            = new int[] { 1, 2, 3, 4 };        Object[] objArr            = new Object[] { 1, 2, 3, 4 };          System.out.println(            ""Boolean Array: ""            + Arrays.toString(boolArr));        System.out.println(            ""Character Array: ""            + Arrays.toString(charArr));        System.out.println(            ""Double Array: ""            + Arrays.toString(dblArr));        System.out.println(            ""Integer Array: ""            + Arrays.toString(intArr));        System.out.println(            ""Object Array: ""            + Arrays.toString(objArr));    }}', '// Java program to illustrate the// StringBuilder.append(char[]) method  import java.lang.*;  public class Geeks {      public static void main(String[] args)    {          StringBuilder sbf            = new StringBuilder(""We are geeks "");        System.out.println(sbf);          // Char array        char[] astr            = new char[] { \'G\', \'E\', \'E\', \'k\', \'S\' };          // Appends string representation of char        // array to this String Builder        sbf.append(astr);        System.out.println(""Result after""                           + "" appending = ""                           + sbf);          sbf = new StringBuilder(""We are -"");        System.out.println(sbf);          // Char array        astr = new char[] { \'a\', \'b\', \'c\', \'d\' };          /* Appends string representation of char                 array to this StringBuilder */        sbf.append(astr);        System.out.println(""Result after appending = "" + sbf);    }}']","['Boolean Array: [true, true, false, true]\nCharacter Array: [g, e, e, k, s]\nDouble Array: [1.0, 2.0, 3.0, 4.0]\nInteger Array: [1, 2, 3, 4]\nObject Array: [1, 2, 3, 4]', 'We are geeks \nResult after appending = We are geeks GEEkS\nWe are -\nResult after appending = We are -abcd']",[],"['Arrays.toString() method: Arrays.toString() method is used to return a string representation of the contents of the specified array. The string representation consists of a list of the array’s elements, enclosed in square brackets (“[]”). Adjacent elements are separated by the characters “, ” (a comma followed by a space). It returns “null” if the array is null.// Java program to demonstrate// working of Arrays.toString()import java.io.*;import java.util.*;class GFG {public static void main(String[] args){// Let us create different types of arrays and// print their contents using Arrays.toString()boolean[] boolArr= new boolean[] { true, true, false, true };char[] charArr= new char[] { \'g\', \'e\', \'e\', \'k\', \'s\' };double[] dblArr= new double[] { 1, 2, 3, 4 };int[] intArr= new int[] { 1, 2, 3, 4 };Object[] objArr= new Object[] { 1, 2, 3, 4 };System.out.println(""Boolean Array: ""+ Arrays.toString(boolArr));System.out.println(""Character Array: ""+ Arrays.toString(charArr));System.out.println(""Double Array: ""+ Arrays.toString(dblArr));System.out.println(""Integer Array: ""+ Arrays.toString(intArr));System.out.println(""Object Array: ""+ Arrays.toString(objArr));}}Output:Boolean Array: [true, true, false, true]\nCharacter Array: [g, e, e, k, s]\nDouble Array: [1.0, 2.0, 3.0, 4.0]\nInteger Array: [1, 2, 3, 4]\nObject Array: [1, 2, 3, 4]\n|||StringBuilder append(char[]): The java.lang.StringBuilder.append(char[]) is the inbuilt method which appends the string representation of the char array argument to this StringBuilder sequence.// Java program to illustrate the// StringBuilder.append(char[]) methodimport java.lang.*;public class Geeks {public static void main(String[] args){StringBuilder sbf= new StringBuilder(""We are geeks "");System.out.println(sbf);// Char arraychar[] astr= new char[] { \'G\', \'E\', \'E\', \'k\', \'S\' };// Appends string representation of char// array to this String Buildersbf.append(astr);System.out.println(""Result after""+ "" appending = ""+ sbf);sbf = new StringBuilder(""We are -"");System.out.println(sbf);// Char arrayastr = new char[] { \'a\', \'b\', \'c\', \'d\' };/* Appends string representation of chararray to this StringBuilder */sbf.append(astr);System.out.println(""Result after appending = "" + sbf);}}Output:We are geeks \nResult after appending = We are geeks GEEkS\nWe are -\nResult after appending = We are -abcd\n']"
30,['How to compare two arrays in Java?'],[],[],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/g-fact-65/', 'https://www.geeksforgeeks.org/final-arrays-in-java/', 'https://code.google.com/p/deep-equals/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Predict the output of following Java program.', 'Exercise: Predict the output of following program']","['In Java, arrays are first class objects. In the above program, arr1 and arr2 are two references to two different objects. So when we compare arr1 and arr2, two reference variables are compared, therefore we get the output as “Not Same” (See this for more examples).', 'How to compare array contents?A simple way is to run a loop and compare elements one by one. Java provides a direct method Arrays.equals() to compare two arrays. Actually, there is a list of equals() methods in Arrays class for different primitive types (int, char, ..etc) and one for Object type (which is base of all classes in Java).', 'How to Deep compare array contents?As seen above, the Arrays.equals() works fine and compares arrays contents. Now the questions, what if the arrays contain arrays inside them or some other references which refer to different object but have same values. For example, see the following program.', 'So Arrays.equals() is not able to do deep comparison. Java provides another method for this Arrays.deepEquals() which does deep comparison.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']","['How does Arrays.deepEquals() work?It compares two objects using any custom equals() methods they may have (if they have an equals() method implemented other than Object.equals()). If not, this method will then proceed to compare the objects field by field, recursively. As each field is encountered, it will attempt to use the derived equals() if it exists, otherwise it will continue to recurse further.This method works on a cyclic Object graph like this: A->B->C->A. It has cycle detection so ANY two objects can be compared, and it will never enter into an endless loop (Source: https://code.google.com/p/deep-equals/).']","['class Test{    public static void main (String[] args)     {        int arr1[] = {1, 2, 3};        int arr2[] = {1, 2, 3};        if (arr1 == arr2) // Same as arr1.equals(arr2)            System.out.println(""Same"");        else            System.out.println(""Not same"");    }}', '// we need to import java.util.Arrays to use Arrays.equals().import java.util.Arrays;class Test{    public static void main (String[] args)     {        int arr1[] = {1, 2, 3};        int arr2[] = {1, 2, 3};        if (Arrays.equals(arr1, arr2))            System.out.println(""Same"");        else            System.out.println(""Not same"");    }}', 'import java.util.Arrays;class Test{    public static void main (String[] args)     {        // inarr1 and inarr2 have same values        int inarr1[] = {1, 2, 3};        int inarr2[] = {1, 2, 3};           Object[] arr1 = {inarr1};  // arr1 contains only one element        Object[] arr2 = {inarr2};  // arr2 also contains only one element        if (Arrays.equals(arr1, arr2))            System.out.println(""Same"");        else            System.out.println(""Not same"");    }}', 'import java.util.Arrays;class Test{    public static void main (String[] args)     {        int inarr1[] = {1, 2, 3};        int inarr2[] = {1, 2, 3};         Object[] arr1 = {inarr1};  // arr1 contains only one element        Object[] arr2 = {inarr2};  // arr2 also contains only one element        if (Arrays.deepEquals(arr1, arr2))            System.out.println(""Same"");        else            System.out.println(""Not same"");    }}', 'import java.util.Arrays;class Test{   public static void main (String[] args)    {      int inarr1[] = {1, 2, 3};      int inarr2[] = {1, 2, 3};       Object[] arr1 = {inarr1};  // arr1 contains only one element      Object[] arr2 = {inarr2};  // arr2 also contains only one element      Object[] outarr1 = {arr1}; // outarr1 contains only one element      Object[] outarr2 = {arr2}; // outarr2 also contains only one element              if (Arrays.deepEquals(outarr1, outarr2))          System.out.println(""Same"");      else          System.out.println(""Not same"");    }}']","['Not Same', 'Same', 'Not Same', 'Same']",[],[]
31,['Methods in Java'],"['Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/methods-in-java.png', 'https://media.geeksforgeeks.org/wp-content/uploads/methods-in-java2.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/access-modifiers-java/', 'https://www.geeksforgeeks.org/non-access-modifiers-in-java/', 'https://www.geeksforgeeks.org/overloading-in-java/', 'https://www.geeksforgeeks.org/g-fact-31-java-is-strictly-pass-by-value/', 'https://www.geeksforgeeks.org/g-fact-31-java-is-strictly-pass-by-value/', 'https://www.geeksforgeeks.org/method-overloading-null-error-java/', 'https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/', 'https://www.geeksforgeeks.org/quiz-corner-gq/', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Note: Methods are time savers and help us to reuse the code without retyping the code.\xa0', 'Modifiers are divided into two groups:', 'There are four types of Java access modifiers:', 'There are some Java Non-Access Modifiers:', 'Method Declaration', 'In general, method declarations has six components :\xa0\xa0', 'Method Signature of above function:\xa0\xa0', 'Method Calling', 'The control flow of the above program is as follows:', 'Memory allocation for methods calls', 'Related articles:\xa0\xa0']","['A method is a collection of statements that perform some specific task and return the result to the caller. A method can perform some specific task without returning anything. Methods allow us to reuse the code without retyping the code. In Java, every method must be part of some class that is different from languages like C, C++, and Python.\xa0', 'Method signature: It consists of the method name and a parameter list (number of parameters, type of the parameters and order of the parameters). The return type and exceptions are not considered as part of it.\xa0', 'How to name a Method?: A method name is typically a single word that should be a verb in lowercase or multi-word, that begins with a verb in lowercase followed by an adjective, noun….. After the first word, the first letter of each word should be capitalized. For example, findSum,\xa0computeMax, setX and getX', 'Generally, A method has a unique name within the class in which it is defined but sometimes a method might have the same name as other method names within the same class as method overloading is allowed in Java.', 'The method needs to be called for using its functionality. There can be three situations when a method is called:\xa0A method returns to the code that invoked it when:\xa0\xa0']","['Methods calls are implemented through a stack. Whenever a method is called a stack frame is created within the stack area and after that, the arguments passed to and the local variables and value to be returned by this called method are stored in this stack frame and when execution of the called method is finished, the allocated stack frame would be deleted. There is a stack pointer register that tracks the top of the stack\xa0which is adjusted accordingly.', 'This article is contributed by Nitsdheerendra. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java Program to Illustrate Methods // Importing required classesimport java.io.*; // Class 1// Helper classclass Addition {     // Initially taking sum as 0    // as we have not started com[utation    int sum = 0;     // Method    // To add two numbers    public int addTwoInt(int a, int b)    {         // Adding two integer value        sum = a + b;         // Returning summation of two values        return sum;    }} // Class 2// Helper classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating object of class 1 inside main() method        Addition add = new Addition();         // Calling method of above class        // to add two integer        // using instance created        int s = add.addTwoInt(1, 2);         // Printing the sum of two numbers        System.out.println(""Sum of two integer values :""                           + s);    }}', '// Java Program to Illustrate Method Calling// Via Different Ways of Calling a Method // Importing required classesimport java.io.*; // Class 1// Helper classclass Test {     public static int i = 0;     // Constructor of class    Test()    {         // Counts the number of the objects of the class        i++;    }     // Method 1    // To access static members of the class and    // and for getting total no of objects    // of the same class created so far    public static int get()    {         // statements to be executed....        return i;    }     // Method 2    // Instance method calling object directly    // that is created inside another class \'GFG\'.     // Can also be called by object directly created in the    // same class and from another method defined in the    // same class and return integer value as return type is    // int.    public int m1()    {         // Display message only        System.out.println(            ""Inside the method m1 by object of GFG class"");         // Calling m2() method within the same class.        this.m2();         // Statements to be executed if any        return 1;    }     // Method 3    // Returns nothing    public void m2()    {         // Print statement        System.out.println(            ""In method m2 came from method m1"");    }} // Class 2// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating object of above class inside thi class        Test obj = new Test();         // Calling method 2 inside main() method        int i = obj.m1();         // Display message only        System.out.println(            ""Control returned after method m1 :"" + i);         // Call m2() method        // obj.m2();        int no_of_objects = Test.get();         // Print statement        System.out.print(            ""No of instances created till now : "");               System.out.println(no_of_objects);    }}']","['max(int x, int y)', 'Sum of two integer values :3', 'Inside the method m1 by object of GFG class\nIn method m2 came from method m1\nControl returned after method m1 :1\nNo of instances created till now : 1']",[],"['Modifier-: Defines access type of the method i.e. from where it can be accessed in your application. In Java, there 4 types of access specifiers.public: accessible in all classes in your application.protected: accessible within the class in which it is defined and in its subclass/esprivate: accessible only within the class in which it is defined.default (declared/defined without using any modifier): accessible within the same class and package within which its class is defined.|||public: accessible in all classes in your application.|||protected: accessible within the class in which it is defined and in its subclass/es|||private: accessible only within the class in which it is defined.|||default (declared/defined without using any modifier): accessible within the same class and package within which its class is defined.|||The return type: The data type of the value returned by the method or void if does not return a value.|||Method Name: the rules for field names apply to method names as well, but the convention is a little different.|||Parameter list: Comma-separated list of the input parameters is defined, preceded with their data type, within the enclosed parenthesis. If there are no parameters, you must use empty parentheses ().|||Exception list: The exceptions you expect by the method can throw, you can specify these exception(s).|||Method body: it is enclosed between braces. The code you need to be executed to perform your intended operations.&&&public: accessible in all classes in your application.|||protected: accessible within the class in which it is defined and in its subclass/es|||private: accessible only within the class in which it is defined.|||default (declared/defined without using any modifier): accessible within the same class and package within which its class is defined.&&&It completes all the statements in the method|||It reaches a return statement|||Throws an exception&&&Java is strictly passed by value|||Method overloading and Null error in Java|||Can we overload or override static methods in Java?|||Java Quizzes&&&&&&Access Modifiers controls the access level|||Non-Access Modifiers do not control access level but provide other functionality&&&Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.|||Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.|||Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.|||Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package, and outside the package.&&&static: The member belongs to the class, not to objects of that class.|||final: Variable values can’t be changed once assigned, methods can’t be overridden, classes can’t be inherited.|||abstract: If applied to a method – has to be implemented in a subclass, if applied to a class – contains abstract methods|||synchronized: Controls thread access to a block/method.|||volatile: The variable value is always read from the main memory, not from a specific thread’s memory.|||transient: The member is skipped when serializing an object.&&&']"
32,['Parameter Passing Techniques in Java with Examples'],"['Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/cdn-uploads/Call-By-Value.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20190220113437/CallByReferenceJava.png']",[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/methods-in-java/', 'https://www.geeksforgeeks.org/g-fact-31-java-is-strictly-pass-by-value/', 'https://www.geeksforgeeks.org/g-fact-31-java-is-strictly-pass-by-value/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Types of parameters:', 'Important methods of Parameter Passing', 'Example:\xa0\xa0', 'Shortcomings:\xa0']","['There are different ways in which parameter data can be passed into and out of methods and functions. Let us assume that a function B() is called from another function A(). In this case A is called the “caller function” and B is called the “called function or callee function”. Also, the arguments which A sends to B are called actual arguments and the parameters of B are called formal arguments.\xa0', '1. Pass By Value: Changes made to formal parameter do not get transmitted back to the caller. Any modifications to the formal parameter variable inside the called function or method affect only the separate storage location and will not be reflected in the actual parameter in the calling environment. This method is also called as call by value.Java in fact is strictly call by value.\xa0', 'Please note that when we pass a reference, a new reference variable to the same object is created. So we can only change members of the object whose reference is passed. We cannot change the reference to refer to some other object as the received reference is a copy of the original reference. Please see example 2 in Java is Strictly Pass by Value!\xa0\xa0']",['2. Call by reference(aliasing): Changes made to formal parameter do get transmitted back to the caller through parameter passing. Any changes to the formal parameter are reflected in the actual parameter in the calling environment as formal parameter receives a reference (or pointer) to the actual data. This method is also called as call by reference. This method is efficient in both time and space.\xa0'],"['// Java program to illustrate// Call by Value // Calleeclass CallByValue {     // Function to change the value    // of the parameters    public static void Example(int x, int y)    {        x++;        y++;    }} // Callerpublic class Main {    public static void main(String[] args)    {         int a = 10;        int b = 20;         // Instance of class is created        CallByValue object = new CallByValue();         System.out.println(""Value of a: "" + a                           + "" & b: "" + b);         // Passing variables in the class function        object.Example(a, b);         // Displaying values after        // calling the function        System.out.println(""Value of a: ""                           + a + "" & b: "" + b);    }}', '// Java program to illustrate// Call by Reference // Calleeclass CallByReference {     int a, b;     // Function to assign the value    // to the class variables    CallByReference(int x, int y)    {        a = x;        b = y;    }     // Changing the values of class variables    void ChangeValue(CallByReference obj)    {        obj.a += 10;        obj.b += 20;    }} // Callerpublic class Main {     public static void main(String[] args)    {         // Instance of class is created        // and value is assigned using constructor        CallByReference object            = new CallByReference(10, 20);         System.out.println(""Value of a: ""                           + object.a                           + "" & b: ""                           + object.b);         // Changing values in class function        object.ChangeValue(object);         // Displaying values        // after calling the function        System.out.println(""Value of a: ""                           + object.a                           + "" & b: ""                           + object.b);    }}']","['function_name(datatype variable_name)', 'func_name(variable name(s));', 'Value of a: 10 & b: 20\nValue of a: 10 & b: 20', 'Value of a: 10 & b: 20\nValue of a: 20 & b: 40']",[],"['Formal Parameter : A variable and its type as they appear in the prototype of the function or method.Syntax:&&&Actual Parameter : The variable or expression corresponding to a formal parameter that appears in the function or method call in the calling environment.Syntax:&&&Inefficiency in storage allocation|||For objects and arrays, the copy semantics are costly']"
33,['Returning Multiple values in Java'],[],[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/pair-class-in-java/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Java doesn’t support multi-value returns. We can use following solutions to return multiple values.', 'If all returned elements are of same type', 'We can return an array in Java. Below is a Java program to demonstrate the same.', 'If returned elements are of different types', 'Using Pair (If there are only two returned values)We can use Pair in Java to return two values.', 'Let us have a look at the following code.', 'Returning list of Object Class']","['If there are more than two returned valuesWe can encapsulate all returned types into a class and then return an object of that class.', 'This article is contributed by Twinkle Tyagi. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']",[],"['// A Java program to demonstrate that a method// can return multiple values of same type by// returning an arrayclass Test {    // Returns an array such that first element    // of array is a+b, and second element is a-b    static int[] getSumAndSub(int a, int b)    {        int[] ans = new int[2];        ans[0] = a + b;        ans[1] = a - b;          // returning array of elements        return ans;    }      // Driver method    public static void main(String[] args)    {        int[] ans = getSumAndSub(100, 50);        System.out.println(""Sum = "" + ans[0]);        System.out.println(""Sub = "" + ans[1]);    }}', '// Returning a pair of values from a functionimport javafx.util.Pair;  class GfG {    public static Pair<Integer, String> getTwo()    {        return new Pair<Integer, String>(10, ""GeeksforGeeks"");    }      // Return multiple values from a method in Java 8    public static void main(String[] args)    {        Pair<Integer, String> p = getTwo();        System.out.println(p.getKey() + "" "" + p.getValue());    }}', '// A Java program to demonstrate that we can return// multiple values of different types by making a class// and returning an object of class.  // A class that is used to store and return// three members of different typesclass MultiDivAdd {    int mul; // To store multiplication    double div; // To store division    int add; // To store addition    MultiDivAdd(int m, double d, int a)    {        mul = m;        div = d;        add = a;    }}  class Test {    static MultiDivAdd getMultDivAdd(int a, int b)    {        // Returning multiple values of different        // types by returning an object        return new MultiDivAdd(a * b, (double)a / b, (a + b));    }      // Driver code    public static void main(String[] args)    {        MultiDivAdd ans = getMultDivAdd(10, 20);        System.out.println(""Multiplication = "" + ans.mul);        System.out.println(""Division = "" + ans.div);        System.out.println(""Addition = "" + ans.add);    }}', '// Java program to demonstrate return of// multiple values from a function using// list Object class.import java.util.*;  class GfG {    public static List<Object> getDetails()    {        String name = ""Geek"";        int age = 35;        char gender = \'M\';          return Arrays.asList(name, age, gender);    }      // Driver code    public static void main(String[] args)    {        List<Object> person = getDetails();        System.out.println(person);    }}']","['Sum = 150\nSub = 50', 'Multiplication = 200\nDivision = 0.5\nAddition = 30', '[Geek, 35, M]']",[],[]
34,['Different ways of Method Overloading in Java'],"['Java', 'Java', 'Java', 'Java']",['Ways of Overloading Methods'],[],[],"['https://www.geeksforgeeks.org/basic/', 'https://www.geeksforgeeks.org/overloading-in-java/', 'https://www.geeksforgeeks.org/method-overloading-null-error-java/', 'https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Geeks, now you would be up to why do we need method overloading?', 'Method overloading can be done by changing:\xa0', 'Method 1: By changing the number of parameters.\xa0', 'Method 2: By changing the Data types of the parameters\xa0', 'Method 3: By changing the Order of the parameters\xa0', 'Example 4\xa0', 'Related Articles:']","['Java can distinguish the methods with different method signatures. i.e. the methods can have the same name but with different parameters list (i.e. the number of the parameters, the order of the parameters, and data types of the parameters) within the same class.\xa0', 'If we need to do some kind of operation in different ways i.e. for different inputs. In the example described below, we are doing the addition operation for different inputs. It is hard to find many meaningful names for a single action.\xa0', 'Let us propose examples in order to illustrate each way while overloading methods. They are as follows: \xa0\xa0', 'Note: Now geeks you must be wondering what will happen when the method signature is the same and the return type is different?', 'Here the compiler will give an error as the return value alone is not sufficient for the compiler to figure out which function it has to call. Only if both methods have different parameter types (so, they have a different signature), then Method overloading is possible. \xa0', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['Method overloading in java is based on the number and type of the parameters passed as an argument to the methods. We can not define more than one method with the same name, Order, and type of the arguments. It would be a compiler error. The compiler does not consider the return type while differentiating the overloaded method. But you cannot declare two methods with the same signature and different return types. It will throw a compile-time error.\xa0If both methods have the same parameter types, but different return types, then it is not possible.', 'This article is contributed by Nitsdheerendra. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java Program to Illustrate Method Overloading// By Changing the Number of Parameters // Importing required classesimport java.io.*; // Class 1// Helper classclass Addition {     // Method 1    // Adding two integer values    public int add(int a, int b)    {         int sum = a + b;        return sum;    }     // Method 2    // Adding three integer values    public int add(int a, int b, int c)    {         int sum = a + b + c;        return sum;    }} // Class 2// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating object of above class inside main()        // method        Addition ob = new Addition();         // Calling method to add 3 numbers        int sum1 = ob.add(1, 2);         // Printing sum of 2 numbers        System.out.println(""sum of the two integer value :""                           + sum1);         // Calling method to add 3 numbers        int sum2 = ob.add(1, 2, 3);         // Printing sum of 3 numbers        System.out.println(            ""sum of the three integer value :"" + sum2);    }}', '// Java Program to Illustrate Method Overloading// By Changing Data Types of the Parameters // Importing required classesimport java.io.*; // Class 1// Helper classclass Addition {     // Adding three integer values    public int add(int a, int b, int c)    {                 int sum = a + b + c;        return sum;    }     // adding three double values.    public double add(double a, double b, double c)    {         double sum = a + b + c;        return sum;    }} class GFG {    public static void main(String[] args)    {         Addition ob = new Addition();         int sum2 = ob.add(1, 2, 3);        System.out.println(            ""sum of the three integer value :"" + sum2);        double sum3 = ob.add(1.0, 2.0, 3.0);        System.out.println(""sum of the three double value :""                           + sum3);    }}', '// Java Program to Illustrate Method Overloading// By changing the Order of the Parameters // Importing required classesimport java.io.*; // Class 1// Helper classclass Geek {     // Method 1    public void geekIdentity(String name, int id)    {         // Printing name and id o person        System.out.println(""geekName :"" + name + "" ""                           + ""Id :"" + id);    }     // Method 2    public void geekIdentity(int id, String name)    {         // Again printing name and id o person        System.out.println(""Id :"" + id + "" ""                           + ""geekName :"" + name);    }} // Class 2// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating object of above class        Geek geek = new Geek();         // Passing name and id        // Note: Reverssing order        geek.geekIdentity(""Mohit"", 1);        geek.geekIdentity(2, ""shubham"");    }}', '// Java Program to Illustrate Error Thrown in// Method Overloading When Method Signature is Same and// ReturnType is Different // Importing required classesimport java.io.*; // Class 1// Helper classclass Addition {     // Method 1    // Adding two integer value    public int add(int a, int b)    {        // Summing up        int sum = a + b;         // Returning the sum        return sum;    }     // Method 2    // Adding three integer value    public double add(int a, int b)    {        double sum = a + b + 0.0;        return sum;    }} // Class 2// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Try block to check for exceptions        try {             // Creating an object of above class            Addition ob = new Addition();             // Calling method 1 to sum 2 numbers            int sum1 = ob.add(1, 2);             // Printing suum of two numbers            System.out.println(                ""sum of the two integer value :"" + sum1);             // Calling method 2 to sum 3 numbers            int sum2 = ob.add(1, 2);             // Printing suum of three numbers            System.out.println(                ""sum of the three integer value :"" + sum2);        }         // Catch block to handle exceptions        catch (Exception e) {             // Display the exceptions on console            System.out.println(e);        }    }}']","['sum of the two integer value :3\nsum of the three integer value :6', 'sum of the three integer value :6\nsum of the three double value :6.0', 'geekName :Mohit Id :1\ngeekName :shubham Id :2']",[],['Method Overloading and Null error in Java|||Can we Overload or Override static methods in java?&&&&&&The number of parameters in two methods.|||The data types of the parameters of methods.|||The Order of the parameters of methods.&&&']
35,['Scope of Variables In Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/this-reference-in-java/', 'https://ide.geeksforgeeks.org/hWKCdM', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Member Variables (Class Level Scope)', 'Local Variables (Method Level Scope)', 'Note : Local variables don’t exist after method’s execution is over.\xa0', 'The above code uses this keyword to differentiate between the local and class variables.', 'As an exercise, predict the output of following Java program.\xa0\xa0', 'As another example, consider following program with a for loop.\xa0', 'The right way of doing above is,\xa0', 'As an exercise, predict the output of the following Java program.\xa0', 'Q. From the above knowledge, tell whether the below code will run or not.', 'Some Important Points about Variable scope in Java:\xa0\xa0']","['These variables must be declared inside class (outside any function). They can be directly accessed anywhere in class. Let’s take a look at an example:\xa0', 'Variables declared inside a method have method level scope and can’t be accessed outside the method.\xa0', 'Here’s another example of method scope, except this time the variable got passed in as a parameter to the method:\xa0', 'Loop Variables (Block Scope)\xa0A variable declared inside pair of brackets “{” and “}” in a method has scope within the brackets only.', 'Let’s look at tricky example of loop scope. Predict the output of following program. You may be surprised if you are regular C/C++ programmer.\xa0', 'Note:- In C++, it will run. But in java it is an error because in java, the name of the variable of inner and outer loop must be different.A similar program in C++ works. See this.', 'Yes, it will run!\xa0See the program carefully, inner loop will terminate before the outer loop variable is declared.So the inner loop variable is destroyed first and then the new variable of same name has been created.', '\xa0This article is contributed by Rishabh Mahrsee. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']","['Scope of a variable is the part of the program where the variable is accessible. Like C/C++, in Java, all identifiers are lexically (or statically) scoped, i.e.scope of a variable can determined at compile time and independent of function call stack.\xa0Java programs are organized in the form of classes. Every class is part of some package. Java scope rules can be covered under following categories.\xa0']","['public class Test{    static int x = 11;    private int y = 33;    public void method1(int x)    {        Test t = new Test();        this.x = 22;        y = 44;         System.out.println(""Test.x: "" + Test.x);        System.out.println(""t.x: "" + t.x);        System.out.println(""t.y: "" + t.y);        System.out.println(""y: "" + y);    }     public static void main(String args[])    {        Test t = new Test();        t.method1(5);    }}', 'public class Test{    public static void main(String args[])    {        {            // The variable x has scope within            // brackets            int x = 10;            System.out.println(x);        }                 // Uncommenting below line would produce        // error since variable x is out of scope.         // System.out.println(x);    }}', 'class Test{    public static void main(String args[])    {        for (int x = 0; x < 4; x++)        {            System.out.println(x);        }         // Will produce error        System.out.println(x);    }}', '// Above program after correcting the errorclass Test{    public static void main(String args[])    {        int x;        for (x = 0; x < 4; x++)        {            System.out.println(x);        }        System.out.println(x);    }}', 'class Test{    public static void main(String args[])    {        int a = 5;        for (int a = 0; a < 5; a++)        {            System.out.println(a);        }    }}', 'class Test{    public static void main(String args[])    {        {            int x = 5;            {                int x = 10;                System.out.println(x);            }        }    }}', 'class Test {    public static void main(String args[])    {        for (int i = 1; i <= 10; i++) {            System.out.println(i);        }        int i = 20;        System.out.println(i);    }}']","['public class Test\n{\n    // All variables defined directly inside a class \n    // are member variables\n    int a;\n    private String b;\n    void method1() {....}\n    int method2() {....}\n    char c;\n}', 'Modifier      Package  Subclass  World\n\npublic          Yes      Yes     Yes\n\nprotected       Yes      Yes     No\n\nDefault (no\nmodifier)       Yes       No     No\n\nprivate         No        No     No', 'public class Test\n{\n    void method1() \n    {\n       // Local variable (Method level scope)\n       int x;\n    }\n}', 'class Test\n{\n    private int x;\n    public void setX(int x)\n    {\n        this.x = x;\n    }\n}', 'Test.x: 22\nt.x: 22\nt.y: 33\ny: 44', '10', '11: error: cannot find symbol\n        System.out.println(x);', '0\n1\n2\n3\n4', '6: error: variable a is already defined in method go(int)\n       for (int a = 0; a < 5; a++)       \n                ^\n1 error', '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n20']",[],"['We can declare class variables anywhere in class, but outside methods.|||Access specified of member variables doesn’t affect scope of them within a class.|||Member variables can be accessed outside a class with following rules&&&In general, a set of curly brackets { } defines a scope.|||In Java we can usually access a variable as long as it was defined within the same set of brackets as the code we are writing or within any curly brackets inside of the curly brackets where the variable was defined.|||Any variable defined in a class outside of any method can be used by all member methods.|||When a method has the same local variable as a member, “this” keyword can be used to reference the current class variable.|||For a variable to be read after the termination of a loop, It must be declared before the body of the loop.']"
36,['Constructors in Java'],"['Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/methods-in-java/', 'https://www.geeksforgeeks.org/constructor-chaining-java-examples/', 'https://www.geeksforgeeks.org/copy-constructor-in-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Illustration:\xa0', 'How constructors are different from methods in Java?\xa0', 'Remember: There are certain rules for writing constructor as follows:', 'Need of Constructor?', 'When is a Constructor called?\xa0', 'Type 1: No-argument constructor', 'Type 2: Parameterized Constructor', 'Remember: Does constructor return any value?']","['Now here gorilla is an object and cant be set to 0 or null just unlikely int, char, float, etc so basically we need to initialize these objects as per requirements. This gives birth that there can be multiple types of constructors.\xa0', 'Now let us come up with the syntax for the constructor been invoked at the time of object or instance creation.', 'So by far, we have learned constructors are used to initializing the object’s state. Like methods, a constructor also contains a collection of statements(i.e. instructions) that are executed at the time of Object creation.', 'Each time an object is created using a new() keyword, at least one constructor (it could be the default constructor) is invoked to assign initial values to the data members of the same class. Now is the correct time to discuss types of the constructor, so primarily there are two types of constructors in java:\xa0', 'No-argument constructor: A constructor that has no parameter is known as the default constructor. If we don’t define a constructor in a class, then the compiler creates default constructor(with no arguments) for the class. And if we write a constructor with arguments or no-arguments then the compiler does not create a default constructor.\xa0', 'Default constructor provides the default values to the object like 0, null, etc. depending on the type.', 'A constructor that has parameters is known as parameterized constructor. If we want to initialize fields of the class with our own values, then use a parameterized constructor.', 'There are no “return value” statements in the constructor, but the constructor returns the current class instance. We can write ‘return’ inside a constructor.', 'Now the most important topic that comes into play is the strong incorporation of OOPS with constructors known as constructor overloading. JustLike methods, we can overload constructors for creating objects in different ways. Compiler differentiates constructors on the basis of numbers of parameters, types of the parameters, and order of the parameters.\xa0', 'In order to know to deep down into constructors there are two concepts been widely used as listed below:\xa0']","['As the name suggests it is a terminology been used to construct something in our programs. So basically if we think deeper we always were declaring variables and later initializing them. Java being object-oriented language our goal is to bring code closer to real-world where we create objects now somebody is needed to look over the construction of these objects to get to how they are internally working.', 'Some of the geeks now must be wondering that they are unaware of the concept still they were successfully able to run programs. The answer is simple as there exists a default constructor having an empty body which is always called automatically if no constructor is written which was the reason for the successful initialization of objects at the backend. Now you must be wondering if this constructor is calling itself automatically then why there arises the need for multiple constructors. Refer to the above illustration for same where we can imagine many attributes are associated with it and it can not be initialized with 0 or null as it will make no sense hence we get to know why default constructor body is empty and still there arises the need for something to initialize attributes of objects in the java.', 'Now geek moving ahead you must be wondering about this keyword and with help of it we can achieve the goal but when the scalability of code increases it becomes so tedious to initialize attributes for objects at every place required arising duplicates lines in our code. So just likely we have learned to make a function when some repetitive work is being re-used in programs, same way here we have constructors which initialize and can call over objects just by writing inside some box which we will be seeing as a syntax where this block now is responsible for initialization of objects no matter how many and at what place in the code as the corresponding constructor will be automatically called just immediately after the object is initialized. Now let us technically deep dive into the concept.', 'Think of a Box. If we talk about a box class then it will have some class variables (say length, breadth, and height). But when it comes to creating its object(i.e Box will now exist in the computer’s memory), then can a box be there with no value defined for its dimensions. The answer is no.\xa0So constructors are used to assigning values to the class variables at the time of object creation, either explicitly done by the programmer or by Java itself (default constructor).', 'This article is contributed by Nitsdheerendra. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java Program to illustrate calling a// no-argument constructorimport java.io.*; class Geek{    int num;    String name;     // this would be invoked while an object    // of that class is created.    Geek()    {        System.out.println(""Constructor called"");    }} class GFG{    public static void main (String[] args)    {        // this would invoke default constructor.        Geek geek1 = new Geek();         // Default constructor provides the default        // values to the object like 0, null        System.out.println(geek1.name);        System.out.println(geek1.num);    }}', '// Java Program to Illustrate Working of// Parameterized Constructor // Importing required inputoutput classimport java.io.*; // Class 1class Geek {    // data members of the class.    String name;    int id;     // Constructor would initialize data members    // With the values of passed arguments while    // Object of that class created    Geek(String name, int id)    {        this.name = name;        this.id = id;    }} // Class 2class GFG {    // main driver method    public static void main(String[] args)    {        // This would invoke the parameterized constructor.        Geek geek1 = new Geek(""adam"", 1);        System.out.println(""GeekName :"" + geek1.name                           + "" and GeekId :"" + geek1.id);    }}', '// Java Program to illustrate constructor overloading// using same task (addition operation ) for different// types of arguments.import java.io.*; class Geek{    // constructor with one argument    Geek(String name)    {        System.out.println(""Constructor with one "" +                      ""argument - String : "" + name);    }     // constructor with two arguments    Geek(String name, int age)    {         System.out.println(""Constructor with two arguments : "" +                "" String and Integer : "" + name + "" ""+ age);     }     // Constructor with one argument but with different    // type than previous..    Geek(long id)    {        System.out.println(""Constructor with one argument : "" +                                            ""Long : "" + id);    }} class GFG{    public static void main(String[] args)    {        // Creating the objects of the class named \'Geek\'        // by passing different arguments         // Invoke the constructor with one argument of        // type \'String\'.        Geek geek2 = new Geek(""Shikhar"");         // Invoke the constructor with two arguments        Geek geek3 = new Geek(""Dharmesh"", 26);         // Invoke the constructor with one argument of        // type \'Long\'.        Geek geek4 = new Geek(325614567);    }}']","['Animal gorilla  = new Animal() ;', 'class Geek\n{   \n  .......\n\n  // A Constructor\n  new Geek() {}\n\n  .......\n}\n\n// We can create an object of the above class\n// using the below statement. This statement\n// calls above constructor.\nGeek obj = new Geek();', 'Constructor called\nnull\n0', 'GeekName :adam and GeekId :1', 'Constructor with one argument - String : Shikhar\nConstructor with two arguments :  String and Integer : Dharmesh 26\nConstructor with one argument : Long : 325614567']",[],"['Constructors must have the same name as the class within which it is defined while it is not necessary for the method in java.|||Constructors do not return any type while method(s) have the return type or void if does not return any value.|||Constructors are called only once at the time of Object creation while method(s) can be called any number of time.&&&Constructor(s) of a class must have the same name as the class name in which it resides.|||A constructor in Java can not be abstract, final, static and Synchronized.|||Access modifiers can be used in constructor declaration to control its access i.e which other class can call the constructor.&&&No-argument constructor|||Parameterized Constructor&&&Constructor Chaining|||Copy constructor']"
37,['Copy Constructor in Java'],"['Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/constructor-in-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Following is an example Java program that shows a simple use of copy constructor.\xa0', 'Now try the following Java program:\xa0']","['Prerequisite – Constructors in Java\xa0Like C++, Java also supports copy constructor. But, unlike C++, Java doesn’t create a default copy constructor if you don’t write your own.\xa0', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']",[],"['// filename: Main.java class Complex {     private double re, im;         // A normal parameterized constructor    public Complex(double re, double im) {        this.re = re;        this.im = im;    }         // copy constructor    Complex(Complex c) {        System.out.println(""Copy constructor called"");        re = c.re;        im = c.im;    }          // Overriding the toString of Object class    @Override    public String toString() {        return ""("" + re + "" + "" + im + ""i)"";    }} public class Main {     public static void main(String[] args) {        Complex c1 = new Complex(10, 15);                 // Following involves a copy constructor call        Complex c2 = new Complex(c1);           // Note that following doesn\'t involve a copy constructor call as        // non-primitive variables are just references.        Complex c3 = c2;           System.out.println(c2); // toString() of c2 is called here    }}', '// filename: Main.java class Complex {     private double re, im;     public Complex(double re, double im) {        this.re = re;        this.im = im;    }} public class Main {         public static void main(String[] args) {        Complex c1 = new Complex(10, 15);         Complex c2 = new Complex(c1);  // compiler error here    }}']",['Copy constructor called\n(10.0 + 15.0i)'],[],[]
38,['Constructor Overloading in Java'],[],[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/constructors-in-java/', 'https://www.geeksforgeeks.org/overloading-in-java/', 'https://www.geeksforgeeks.org/new-operator-vs-newinstance-method-java/', 'https://www.geeksforgeeks.org/this-reference-in-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Prerequisite – Constructor, Overloading in java', 'When do we need Constructor Overloading?', 'Using this() in constructor overloading', 'Important points to be taken care while doing Constructor Overloading :', 'Constructors overloading vs Method overloading']","['In addition to overloading methods, we can also overload constructors in java. Overloaded constructor is called based upon the parameters specified when new is executed.', 'Let us take an example to understand need of constructor overloading. Consider the following implementation of a class Box with only one constructor taking three arguments.', 'As we can see that the Box() constructor requires three parameters. This means that all declarations of Box objects must pass three arguments to the Box() constructor. For example, the following statement is currently invalid:', 'Since Box() requires three arguments, it’s an error to call it without them. Suppose we simply wanted a box object without initial dimension, or want to initialize a cube by specifying only one value that would be used for all three dimensions. From the above implementation of Box class these options are not available to us.', 'These types of problems of different ways of initializing an object can be solved by constructor overloading. Below is the improved version of class Box with constructor overloading.', 'this() reference can be used during constructor overloading to call default constructor implicitly from parameterized constructor. Please note, this() should be the first statement inside a constructor.', 'As we can see in the above program that we called Box(int num) constructor during object creation using only box number. By using this() statement inside it, the default constructor(Box()) is implicitly called from it which will initialize dimension of Box with 0.', 'Note : The constructor calling should be first statement in the constructor body. For example, following fragment is invalid and throws compile time error.', 'Strictly speaking, constructor overloading is somewhat similar to method overloading. If we want to have different ways of initializing an object using different number of parameters, then we must do constructor overloading as we do method overloading when we want different definitions of a method based on different parameters.', 'This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['Sometimes there is a need of initializing an object in different ways. This can be done using constructor overloading. For example, Thread class has 8 types of constructors. If we do not want to specify anything about a thread then we can simply use default constructor of Thread class, however if we need to specify thread name, then we may call the parameterized constructor of Thread class with a String args like this:']","['// Java program to illustrate// Constructor Overloadingclass Box{    double width, height, depth;      // constructor used when all dimensions    // specified    Box(double w, double h, double d)    {        width = w;        height = h;        depth = d;    }      // constructor used when no dimensions    // specified    Box()    {        width = height = depth = 0;    }      // constructor used when cube is created    Box(double len)    {        width = height = depth = len;    }      // compute and return volume    double volume()    {        return width * height * depth;    }}  // Driver codepublic class Test{    public static void main(String args[])    {        // create boxes using the various        // constructors        Box mybox1 = new Box(10, 20, 15);        Box mybox2 = new Box();        Box mycube = new Box(7);          double vol;          // get volume of first box        vol = mybox1.volume();        System.out.println("" Volume of mybox1 is "" + vol);          // get volume of second box        vol = mybox2.volume();        System.out.println("" Volume of mybox2 is "" + vol);          // get volume of cube        vol = mycube.volume();        System.out.println("" Volume of mycube is "" + vol);    }}', '// Java program to illustrate role of this() in// Constructor Overloadingclass Box{    double width, height, depth;    int boxNo;      // constructor used when all dimensions and    // boxNo specified    Box(double w, double h, double d, int num)    {        width = w;        height = h;        depth = d;        boxNo = num;    }      // constructor used when no dimensions specified    Box()    {        // an empty box        width = height = depth = 0;    }      // constructor used when only boxNo specified    Box(int num)    {        // this() is used for calling the default        // constructor from parameterized constructor        this();          boxNo = num;    }      public static void main(String[] args)    {        // create box using only boxNo        Box box1 = new Box(1);          // getting initial width of box1        System.out.println(box1.width);    }}']","['Thread t= new Thread ("" MyThread "");', '// An example class to understand need of\n// constructor overloading.\nclass Box\n{\n    double width, height,depth;\n\n    // constructor used when all dimensions\n    // specified\n    Box(double w, double h, double d)\n    {\n        width = w;\n        height = h;\n        depth = d;\n    }\n\n    // compute and return volume\n    double volume()\n    {\n        return width * height * depth;\n    }\n}', 'Box ob = new Box();', 'Volume of mybox1 is 3000.0\nVolume of mybox2 is 0.0\nVolume of mycube is 343.0', '0.0', 'Box(int num)\n{\n    boxNo = num;\n\n    /* Constructor call must be the first\n       statement in a constructor */\n    this();  /*ERROR*/\n}']",[],"['Constructor calling must be the first statement of constructor in Java.|||If we have defined any parameterized constructor, then compiler will not create default constructor. and vice versa if we don’t define any constructor, the compiler creates the default constructor(also known as no-arg constructor) by default during compilation|||Recursive constructor calling is invalid in java.']"
39,['Constructor Chaining In Java with Examples'],"['Java', 'Java', 'Java', 'Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/uploads/Constructor-Chaining-In-Java1.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/constructor-in-java/', 'https://www.geeksforgeeks.org/g-fact-26-the-initializer-block-in-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Constructor Chaining within same class using this() keyword :', 'Rules of constructor chaining :\xa0', 'Constructor Chaining to other class using super() keyword :', 'Output :\xa0\xa0']","['Prerequisite – Constructors in Java\xa0Constructor chaining is the process of calling one constructor from another constructor with respect to current object.\xa0Constructor chaining can be done in two ways:\xa0\xa0', 'What happens if we change the order of constructors?Nothing, Constructor chaining can be achieved in any order', 'NOTE: In example 1, default constructor is invoked at the end, but in example 2 default constructor is invoked at first. Hence, order in constructor chaining is not important.\xa0\xa0', 'NOTE: If there are more than one blocks, they are executed in the order in which they are defined within the same class. See the ex.\xa0Example :\xa0']","['Constructor chaining occurs through inheritance. A sub class constructor’s task is to call super class’s constructor first. This ensures that creation of sub class’s object starts with the initialization of the data members of the super class. There could be any numbers of classes in inheritance chain. Every constructor calls up the chain till class at the top is reached.Why do we need constructor chaining ?\xa0This process is used when we want to perform multiple tasks in a single constructor rather than creating a code for each task in a single constructor we create a separate constructor for each task and make their chain which makes the program more readable.\xa0\xa0', 'Note : Similar to constructor chaining in same class, super() should be the first line of the constructor as super class’s constructor are invoked before the sub class’s constructor.Alternative method : using Init block :\xa0When we want certain common resources to be executed with every constructor we can put the code in the init block. Init block is always executed before any constructor, whenever a constructor is used for creating a new object.Example 1:', 'This article is contributed by Apoorva singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java program to illustrate Constructor Chaining// within same class Using this() keywordclass Temp{    // default constructor 1    // default constructor will call another constructor    // using this keyword from same class    Temp()    {        // calls constructor 2        this(5);        System.out.println(""The Default constructor"");    }     // parameterized constructor 2    Temp(int x)    {        // calls constructor 3        this(5, 15);        System.out.println(x);    }     // parameterized constructor 3    Temp(int x, int y)    {        System.out.println(x * y);    }     public static void main(String args[])    {        // invokes default constructor first        new Temp();    }}', '// Java program to illustrate Constructor Chaining// within same class Using this() keyword// and changing order of constructorsclass Temp{    // default constructor 1    Temp()    {        System.out.println(""default"");    }     // parameterized constructor 2    Temp(int x)    {        // invokes default constructor        this();        System.out.println(x);    }     // parameterized constructor 3    Temp(int x, int y)    {        // invokes parameterized constructor 2        this(5);        System.out.println(x * y);    }     public static void main(String args[])    {        // invokes parameterized constructor 3        new Temp(8, 10);    }}', '// Java program to illustrate Constructor Chaining to// other class using super() keywordclass Base{    String name;     // constructor 1    Base()    {        this("""");        System.out.println(""No-argument constructor of"" +                                           "" base class"");    }     // constructor 2    Base(String name)    {        this.name = name;        System.out.println(""Calling parameterized constructor""                                              + "" of base"");    }} class Derived extends Base{    // constructor 3    Derived()    {        System.out.println(""No-argument constructor "" +                           ""of derived"");    }     // parameterized constructor 4    Derived(String name)    {        // invokes base class constructor 2        super(name);        System.out.println(""Calling parameterized "" +                           ""constructor of derived"");    }     public static void main(String args[])    {        // calls parameterized constructor 4        Derived obj = new Derived(""test"");         // Calls No-argument constructor        // Derived obj = new Derived();    }}', 'class Temp{    // block to be executed before any constructor.    {        System.out.println(""init block"");    }     // no-arg constructor    Temp()    {        System.out.println(""default"");    }     // constructor with one argument.    Temp(int x)    {        System.out.println(x);    }     public static void main(String[] args)    {        // Object creation by calling no-argument        // constructor.        new Temp();         // Object creation by calling parameterized        // constructor with one parameter.        new Temp(10);    }}', 'class Temp{    // block to be executed first    {        System.out.println(""init"");    }    Temp()    {        System.out.println(""default"");    }    Temp(int x)    {        System.out.println(x);    }     // block to be executed after the first block    // which has been defined above.    {        System.out.println(""second"");    }    public static void main(String args[])    {        new Temp();        new Temp(10);    }}']","['75\n5\nThe Default constructor', 'default\n5\n80', 'Calling parameterized constructor of base\nCalling parameterized constructor of derived', 'init block\ndefault\ninit block\n10', 'init\nsecond\ndefault\ninit\nsecond\n10']",[],['Within same class: It can be done using this() keyword for constructors in same class|||From base class: by using super() keyword to call constructor from the base class.&&&&&&The this() expression should always be the first line of the constructor.|||There should be at-least be one constructor without the this() keyword (constructor 3 in above example).|||Constructor chaining can be achieved in any order.&&&']
40,['Private Constructors and Singleton Classes in Java'],[],[],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Let’s first analyze the following question:', 'Can we have private constructors ?', 'Do we need such ‘private constructors ‘ ?', 'There are various scenarios where we can use private constructors. The major ones are', 'What is a Singleton class?', 'We can’t have more than a single object for such classes.', 'Singleton classes are employed extensively in concepts like Networking and Database Connectivity.', 'Design Pattern of Singleton classes:', 'Below is an example in java illustrating the same:']","['As you can easily guess, like any method we can provide access specifier to the constructor. If it’s made private, then it can only be accessed inside the class.', 'As the name implies, a class is said to be singleton if it limits the number of objects of that class to one.', 'The constructor of singleton class would be private so there must be another way to get the instance of that class. This problem is resolved using a class member instance and a factory method to return the class member.', 'We changed value of a.x, value of b.x also got updated because both ‘a’ and ‘b’ refer to same object, i.e., they are objects of a singleton class.', 'This article is contributed by Ashutosh Kumar Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']",[],"['// Java program to demonstrate implementation of Singleton // pattern using private constructors.import java.io.*;  class MySingleton{    static MySingleton instance = null;    public int x = 10;        // private constructor can\'t be accessed outside the class    private MySingleton() {  }       // Factory method to provide the users with instances    static public MySingleton getInstance()    {        if (instance == null)                     instance = new MySingleton();           return instance;    } }  // Driver Classclass Main{   public static void main(String args[])       {       MySingleton a = MySingleton.getInstance();       MySingleton b = MySingleton.getInstance();       a.x = a.x + 10;       System.out.println(""Value of a.x = "" + a.x);       System.out.println(""Value of b.x = "" + b.x);   }    }']",['Value of a.x = 20\nValue of b.x = 20'],[],['Internal Constructor chaining|||Singleton class design pattern']
41,['Classes and Objects in Java'],['Java'],"['Class', 'Object', 'Declaring Objects (Also called instantiating a class)', 'Initializing an object', 'Ways to create object of a class', 'Creating multiple objects by one type only (A good practice)\xa0', 'Anonymous objects']","['https://media.geeksforgeeks.org/wp-content/uploads/Blank-Diagram-Page-1-5.png', 'https://media.geeksforgeeks.org/wp-content/uploads/Blank-Diagram-Page-1-3.png', 'https://media.geeksforgeeks.org/wp-content/uploads/Untitled5.png']",[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/access-specifiers-for-classes-or-interfaces-in-java/', 'https://www.geeksforgeeks.org/inner-class-java/', 'https://www.geeksforgeeks.org/anonymous-inner-class-java/', 'https://www.geeksforgeeks.org/lambda-expressions-java-8/', 'https://www.geeksforgeeks.org/serialization-in-java/', 'https://www.geeksforgeeks.org/garbage-collection-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']",['Example of an object: dog'],"['Classes and Objects are basic concepts of Object Oriented Programming which revolve around the real life entities.', 'A class is a user defined blueprint or prototype from which objects are created. \xa0It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order:\xa0', 'Constructors are used for initializing new objects. Fields are variables that provides the state of the class and its objects, and methods are used to implement the behavior of the class and its objects.There are various types of classes that are used in real time applications such as\xa0nested classes, anonymous classes, lambda expressions.\xa0', 'It is a basic unit of Object-Oriented Programming\xa0and represents the real life entities. \xa0A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of :\xa0', 'Objects correspond to things found in the real world. For example, a graphics program may have objects such as “circle”, “square”, “menu”. An online shopping system might have objects such as “shopping cart”, “customer”, and “product”.\xa0\xa0', 'When an object of a class is created, the class is said to be instantiated. All the instances share the attributes and the behavior of the class. But the values of those attributes, i.e. the state are unique for each object. A single class may have any number of instances.', 'As we declare variables like (type name;). This notifies the compiler that we will use name to refer to data whose type is type. With a primitive variable, this declaration also reserves the proper amount of memory for the variable. So for reference variable,\xa0type must be strictly a concrete class name. In general, we can’t create objects of an abstract class or an interface.\xa0\xa0', 'If we declare reference variable(tuffy) like this, its value will be undetermined(null) until an object is actually created and assigned to it. Simply declaring a reference variable does not create an object.\xa0', 'The new operator instantiates a class by allocating memory for a new object and returning a reference to that memory. The new operator also invokes the class\xa0constructor.\xa0', 'There are four ways to create objects in java.Strictly speaking there is only one way(by using new keyword),and the rest internally use new keyword.\xa0', 'Anonymous objects are the objects that are instantiated but are not stored in a reference variable.\xa0\xa0']","['Note : All classes have at least one constructor. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument constructor, also called the default constructor. This default constructor calls the class parent’s no-argument constructor (as it contain only one statement i.e super();), or the Object class constructor if the class has no other parent (as Object class is parent of all classes either directly or indirectly).\xa0', 'This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Class Declaration public class Dog{    // Instance Variables    String name;    String breed;    int age;    String color;     // Constructor Declaration of Class    public Dog(String name, String breed,                   int age, String color)    {        this.name = name;        this.breed = breed;        this.age = age;        this.color = color;    }     // method 1    public String getName()    {        return name;    }     // method 2    public String getBreed()    {        return breed;    }     // method 3    public int getAge()    {        return age;    }     // method 4    public String getColor()    {        return color;    }     @Override    public String toString()    {        return(""Hi my name is ""+ this.getName()+               "".\\nMy breed,age and color are "" +               this.getBreed()+"","" + this.getAge()+               "",""+ this.getColor());    }     public static void main(String[] args)    {        Dog tuffy = new Dog(""tuffy"",""papillon"", 5, ""white"");        System.out.println(tuffy.toString());    }}']","['Dog tuffy;', 'Hi my name is tuffy.\nMy breed,age and color are papillon,5,white', 'Dog tuffy = new Dog(""tuffy"",""papillon"",5, ""white"");', '// creating object of class Test\nTest t = new Test();', '// creating object of public class Test\n// consider class Test present in com.p1 package\nTest obj = (Test)Class.forName(""com.p1.Test"").newInstance();', '// creating object of class Test\nTest t1 = new Test();\n\n// creating clone of above object\nTest t2 = (Test)t1.clone();', 'FileInputStream file = new FileInputStream(filename);\nObjectInputStream in = new ObjectInputStream(file);\nObject obj = in.readObject();', 'Test test = new Test();\ntest = new Test();', 'class Animal {}\n\nclass Dog extends Animal {}\nclass Cat extends Animal {}\n\npublic class Test\n{\n    // using Dog object\n    Animal obj = new Dog();\n\n    // using Cat object\n    obj = new Cat();\n}', 'btn.setOnAction(new EventHandler()\n{\n    public void handle(ActionEvent event)\n    {\n        System.out.println(""Hello World!"");\n    }\n});']",[],"['This class contains a single constructor. We can recognize a constructor because its declaration uses the same name as the class and it has no return type. The Java compiler differentiates the constructors based on the number and the type of the arguments. The constructor in the Dog class takes four arguments. The following statement provides “tuffy”,”papillon”,5,”white” as values for those arguments:&&&The result of executing this statement can be illustrated as :&&&Using new keyword: It is the most common and general way to create object in java.Example:&&&Using Class.forName(String className) method: There is a pre-defined class in java.lang package with name Class. The forName(String className) method returns the Class object associated with the class with the given string name.We have to give the fully qualified name for a class. On calling new Instance() method on this Class object returns new instance of the class with the given string name.&&&Using clone() method: clone() method is present in Object class. It creates and returns a copy of the object.&&&Deserialization: De-serialization is technique of reading an object from the saved state in a file. Refer Serialization/De-Serialization in java&&&In real-time, we need different objects of a class in different methods. Creating a number of references for storing them is not a good practiceand therefore we declare a static reference variable and use it whenever required. In this case, wastage of memory is less. The objects that are not referenced anymore will be destroyed by Garbage Collector of java.Example:&&&In inheritance system, we use parent class reference variable to store a sub-class object. In this case, we can switch into different subclass objects using same referenced variable. Example:&&&They are used for immediate method calling.|||They will be destroyed after method calling.|||They are widely used in different libraries. For example,in AWT libraries, they are used to perform some action on capturing an event(eg a key press).|||In the example below, when a key is button(referred by the btn) is pressed, we are simply creating anonymous object of EventHandler class for just calling handle method.&&&&&&Modifiers: A class can be public or has default access (Refer this for details).|||class keyword: class keyword is used to create a class.|||Class name:The name should begin with an initial letter (capitalized by convention).|||Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.|||Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.|||Body: The class bodysurrounded by braces, { }.&&&State: It is represented by attributes of an object. It also reflects the properties of an object.|||Behavior: It is represented by methods of an object. It also reflects the response of an object with other objects.|||Identity: It gives a unique name to an object and enables one object to interact with other objects.&&&']"
42,['Inheritance in Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/inheritence1.png', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritance1.png', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritance3.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210311224500/Untitled-300x269.png', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritance2-1.png', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritance-1.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/gfact-52-java-object-creation-of-inherited-classes/', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritence1.png', 'https://www.geeksforgeeks.org/overriding-in-java/', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritance1.png', 'https://www.geeksforgeeks.org/g-fact-91/', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritance3.png', 'https://www.geeksforgeeks.org/java-and-multiple-inheritance/', 'https://www.geeksforgeeks.org/java-and-multiple-inheritance/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritance2-1.png', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://media.geeksforgeeks.org/wp-content/uploads/inheritance-1.png', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.geeksforgeeks.org/java-and-multiple-inheritance/', 'https://www.geeksforgeeks.org/overriding-in-java/', 'https://www.geeksforgeeks.org/g-fact-63/', 'https://www.geeksforgeeks.org/super-keyword/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Important terminology:\xa0', 'How to use inheritance in Java', 'The keyword used for inheritance is extends.\xa0', 'Illustrative image of the program:\xa0\xa0', 'Types of Inheritance in Java', 'Below are the different types of inheritance which are supported by Java.\xa0', 'Hierarchical Inheritance', 'Important facts about inheritance in Java\xa0', 'Java IS-A type of Relationship.', 'Now, based on the above example, in Object-Oriented terms, the following are true:-', 'What all can be done in a Subclass?']","['Inheritance is an important pillar of OOP(Object-Oriented Programming). It is the mechanism in java by which one class is allowed to inherit the features(fields and methods) of another class.\xa0', 'Example: In the below example of inheritance, class Bicycle is a base class, class MountainBike is a derived class that extends Bicycle class and class Test is a driver class to run program.\xa0', 'In the above program, when an object of MountainBike class is created, a copy of all methods and fields of the superclass acquire memory in this object. That is why by using the object of the subclass we can also access the members of a superclass.\xa0', 'Please note that during inheritance only the object of the subclass is created, not the superclass. For more, refer Java Object Creation of Inherited Class.\xa0', 'In practice, inheritance and polymorphism are used together in java to achieve fast performance and readability of code.', '1. Single Inheritance: In single inheritance, subclasses inherit the features of one superclass. In the image below, class A serves as a base class for the derived class B.', '2. Multilevel Inheritance: In Multilevel Inheritance, a derived class will be inheriting a base class and as well as the derived class also act as the base class to other class. In the below image, class A serves as a base class for the derived class B, which in turn serves as a base class for the derived class C. In Java, a class cannot directly access the grandparent’s members.', '3. Hierarchical Inheritance: In Hierarchical Inheritance, one class serves as a superclass (base class) for more than one subclass. In the below image, class A serves as a base class for the derived class B, C and D.', '4. Multiple Inheritance (Through Interfaces): In Multiple inheritances, one class can have more than one superclass and inherit features from all parent classes. Please note that Java does not support multiple inheritances with classes. In java, we can achieve multiple inheritances only through Interfaces. In the image below, Class C is derived from interface A and B.', '5. Hybrid Inheritance(Through Interfaces): It is a mix of two or more of the above types of inheritance. Since java doesn’t support multiple inheritances with classes, hybrid inheritance is also not possible with classes. In java, we can achieve hybrid inheritance only through Interfaces.\xa0', 'IS-A is a way of saying: This object is a type of that object. Let us see how the extends keyword is used to achieve inheritance.', 'In sub-classes we can inherit members as is, replace them, hide them, or supplement them with new members:\xa0']",[],"['// Java program to illustrate the// concept of inheritance // base classclass Bicycle {    // the Bicycle class has two fields    public int gear;    public int speed;     // the Bicycle class has one constructor    public Bicycle(int gear, int speed)    {        this.gear = gear;        this.speed = speed;    }     // the Bicycle class has three methods    public void applyBrake(int decrement)    {        speed -= decrement;    }     public void speedUp(int increment)    {        speed += increment;    }     // toString() method to print info of Bicycle    public String toString()    {        return (""No of gears are "" + gear + ""\\n""                + ""speed of bicycle is "" + speed);    }} // derived classclass MountainBike extends Bicycle {     // the MountainBike subclass adds one more field    public int seatHeight;     // the MountainBike subclass has one constructor    public MountainBike(int gear, int speed,                        int startHeight)    {        // invoking base-class(Bicycle) constructor        super(gear, speed);        seatHeight = startHeight;    }     // the MountainBike subclass adds one more method    public void setHeight(int newValue)    {        seatHeight = newValue;    }     // overriding toString() method    // of Bicycle to print more info    @Override public String toString()    {        return (super.toString() + ""\\nseat height is ""                + seatHeight);    }} // driver classpublic class Test {    public static void main(String args[])    {         MountainBike mb = new MountainBike(3, 100, 25);        System.out.println(mb.toString());    }}', '// Java program to illustrate the// concept of single inheritanceimport java.io.*;import java.lang.*;import java.util.*; class one {    public void print_geek()    {        System.out.println(""Geeks"");    }} class two extends one {    public void print_for() { System.out.println(""for""); }}// Driver classpublic class Main {    public static void main(String[] args)    {        two g = new two();        g.print_geek();        g.print_for();        g.print_geek();    }}', '// Java program to illustrate the// concept of Multilevel inheritanceimport java.io.*;import java.lang.*;import java.util.*; class one {    public void print_geek()    {        System.out.println(""Geeks"");    }} class two extends one {    public void print_for() { System.out.println(""for""); }} class three extends two {    public void print_geek()    {        System.out.println(""Geeks"");    }} // Drived classpublic class Main {    public static void main(String[] args)    {        three g = new three();        g.print_geek();        g.print_for();        g.print_geek();    }}', '// Java program to illustrate the// concept of Hierarchical  inheritance class A {    public void print_A() { System.out.println(""Class A""); }} class B extends A {    public void print_B() { System.out.println(""Class B""); }} class C extends A {    public void print_C() { System.out.println(""Class C""); }} class D extends A {    public void print_D() { System.out.println(""Class D""); }} // Driver Classpublic class Test {    public static void main(String[] args)    {        B obj_B = new B();        obj_B.print_A();        obj_B.print_B();         C obj_C = new C();        obj_C.print_A();        obj_C.print_C();         D obj_D = new D();        obj_D.print_A();        obj_D.print_D();    }}', '// Java program to illustrate the// concept of Multiple inheritanceimport java.io.*;import java.lang.*;import java.util.*; interface one {    public void print_geek();} interface two {    public void print_for();} interface three extends one, two {    public void print_geek();}class child implements three {    @Override public void print_geek()    {        System.out.println(""Geeks"");    }     public void print_for() { System.out.println(""for""); }} // Drived classpublic class Main {    public static void main(String[] args)    {        child c = new child();        c.print_geek();        c.print_for();        c.print_geek();    }}', 'public class SolarSystem {}public class Earth extends SolarSystem {}public class Mars extends SolarSystem {}public class Moon extends Earth {}', 'class SolarSystem {}class Earth extends SolarSystem {}class Mars extends SolarSystem {}public class Moon extends Earth {    public static void main(String args[])    {        SolarSystem s = new SolarSystem();        Earth e = new Earth();        Mars m = new Mars();         System.out.println(s instanceof SolarSystem);        System.out.println(e instanceof Earth);        System.out.println(m instanceof SolarSystem);    }}']","['class derived-class extends base-class  \n{  \n   //methods and fields  \n}', 'No of gears are 3\nspeed of bicycle is 100\nseat height is 25', 'Geeks\nfor\nGeeks', 'Geeks\nfor\nGeeks', 'Class A\nClass B\nClass A\nClass C\nClass A\nClass D', 'Geeks\nfor\nGeeks', 'true\ntrue\ntrue']",[],"['Super Class: The class whose features are inherited is known as superclass(or a base class or a parent class).|||Sub Class: The class that inherits the other class is known as a subclass(or a derived class, extended class, or child class). The subclass can add its own fields and methods in addition to the superclass fields and methods.|||Reusability: Inheritance supports the concept of “reusability”, i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. By doing this, we are reusing the fields and methods of the existing class.&&&Default superclass: Except Object class, which has no superclass, every class has one and only one direct superclass (single inheritance). In the absence of any other explicit superclass, every class is implicitly a subclass of the Object class.|||Superclass can only be one: A superclass can have any number of subclasses. But a subclass can have only one superclass. This is because Java does not support multiple inheritances with classes. Although with interfaces, multiple inheritances are supported by java.|||Inheriting Constructors: A subclass inherits all the members (fields, methods, and nested classes) from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.|||Private member inheritance: A subclass does not inherit the private members of its parent class. However, if the superclass has public or protected methods(like getters and setters) for accessing its private fields, these can also be used by the subclass.&&&The inherited fields can be used directly, just like any other fields.|||We can declare new fields in the subclass that are not in the superclass.|||The inherited methods can be used directly as they are.|||We can write a new instance method in the subclass that has the same signature as the one in the superclass, thus overriding it (as in the example above, toString() method is overridden).|||We can write a new static method in the subclass that has the same signature as the one in the superclass, thus hiding it.|||We can declare new methods in the subclass that are not in the superclass.|||We can write a subclass constructor that invokes the constructor of the superclass, either implicitly or by using the keyword super.&&&&&&SolarSystem the superclass of Earth class.|||SolarSystem the superclass of Mars class.|||Earth and Mars are subclasses of SolarSystem class.|||Moon is the subclass of both Earth and SolarSystem classes.&&&']"
43,['Encapsulation in Java'],['Java'],[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.facebook.com/harsh.agarwal.16752', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['The program to access variables of the class EncapsulateDemo is shown below:\xa0\xa0', 'Advantages of Encapsulation:\xa0\xa0']","['Encapsulation is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code and the data it manipulates. Another way to think about encapsulation is, it is a protective shield that prevents the data from being accessed by the code outside this shield.\xa0\xa0', 'In the above program, the class Encapsulate is encapsulated as the variables are declared as private. The get methods like getAge() , getName() , getRoll() are set as public, these methods are used to access these variables. The setter methods like setName(), setAge(), setRoll() are also declared as public and are used to set the values of the variables.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['This article is contributed by Harsh Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program to demonstrate encapsulationclass Encapsulate {    // private variables declared    // these can only be accessed by    // public methods of class    private String geekName;    private int geekRoll;    private int geekAge;     // get method for age to access    // private variable geekAge    public int getAge() { return geekAge; }     // get method for name to access    // private variable geekName    public String getName() { return geekName; }     // get method for roll to access    // private variable geekRoll    public int getRoll() { return geekRoll; }     // set method for age to access    // private variable geekage    public void setAge(int newAge) { geekAge = newAge; }     // set method for name to access    // private variable geekName    public void setName(String newName)    {        geekName = newName;    }     // set method for roll to access    // private variable geekRoll    public void setRoll(int newRoll) { geekRoll = newRoll; }} public class TestEncapsulation {    public static void main(String[] args)    {        Encapsulate obj = new Encapsulate();         // setting values of the variables        obj.setName(""Harsh"");        obj.setAge(19);        obj.setRoll(51);         // Displaying values of the variables        System.out.println(""Geek\'s name: "" + obj.getName());        System.out.println(""Geek\'s age: "" + obj.getAge());        System.out.println(""Geek\'s roll: "" + obj.getRoll());         // Direct access of geekRoll is not possible        // due to encapsulation        // System.out.println(""Geek\'s roll: "" +        // obj.geekName);    }}']","[""Geek's name: Harsh\nGeek's age: 19\nGeek's roll: 51""]",[],"['Technically in encapsulation, the variables or data of a class is hidden from any other class and can be accessed only through any member function of its own class in which it is declared.|||As in encapsulation, the data in a class is hidden from other classes using the data hiding concept which is achieved by making the members or methods of a class private, and the class is exposed to the end-user or the world without providing any details behind implementation using the abstraction concept, so it is also known as a combination of data-hiding and abstraction.|||Encapsulation can be achieved by Declaring all the variables in the class as private and writing public methods in the class to set and get the values of variables&&&Data Hiding: The user will have no idea about the inner implementation of the class. It will not be visible to the user how the class is storing values in the variables. The user will only know that we are passing the values to a setter method and variables are getting initialized with that value.|||Increased Flexibility: We can make the variables of the class read-only or write-only depending on our requirement. If we wish to make the variables read-only then we have to omit the setter methods like setName(), setAge(), etc. from the above program or if we wish to make the variables as write-only then we have to omit the get methods like getName(), getAge(), etc. from the above program|||Reusability: Encapsulation also improves the re-usability and is easy to change with new requirements.|||Testing code is easy: Encapsulated code is easy to test for unit testing.']"
44,['Polymorphism in Java'],"['Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/', 'https://www.geeksforgeeks.org/overriding-in-java/', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Real-life Illustration: Polymorphism', 'Types of polymorphism', 'In Java polymorphism is mainly divided into two types:\xa0', 'Type 1: Compile-time polymorphism', 'Note: But Java doesn’t support the Operator Overloading.', 'Example 1\xa0', 'Type 2: Runtime polymorphism', 'Output explanation:\xa0']","['The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message to be displayed in more than one form.\xa0', 'It is also known as static polymorphism. This type of polymorphism is achieved by function overloading or operator overloading.\xa0', 'Method Overloading: When there are multiple functions with the same name but different parameters then these functions are said to be overloaded. Functions can be overloaded by change in the number of arguments or/and a change in the type of arguments.', 'It is also known as Dynamic Method Dispatch. It is a process in which a function call to the overridden method is resolved at Runtime. This type of polymorphism is achieved by Method Overriding.\xa0Method overriding, on the other hand, occurs when a derived class has a definition for one of the member functions of the base class. That base function is said to be overridden.', 'Here in this program, When an object of child class is created, then the method inside the child class is called. This is because The method in the parent class is overridden by the child class. Since The method is overridden, This method has more priority than the parent method inside the child class. So, the body inside the child class is executed.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['A person at the same time can have different characteristics. Like a man at the same time is a father, a husband, an employee. So the same person possesses different behavior in different situations. This is called polymorphism.\xa0Polymorphism is considered one of the important features of Object-Oriented Programming. Polymorphism allows us to perform a single action in different ways. In other words, polymorphism allows you to define one interface and have multiple implementations. The word “poly” means many and “morphs” means forms, So it means many forms.']","['// Java Program for Method overloading// By using Different Types of Arguments  // Class 1// Helper classclass Helper {     // Method with 2 integer parameters    static int Multiply(int a, int b)    {         // Returns product of integer numbers        return a * b;    }     // Method 2    // With same name but with 2 double parameters    static double Multiply(double a, double b)    {         // Returns product of double numbers        return a * b;    }} // Class 2// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Calling method by passing        // input as in arguments        System.out.println(Helper.Multiply(2, 4));        System.out.println(Helper.Multiply(5.5, 6.3));    }}', '// Java program for Method Overloading// by Using Different Numbers of Arguments // Class 1// Helper classclass Helper {     // Method 1    // Multiplication of 2 numbers    static int Multiply(int a, int b)    {         // Return product        return a * b;    }     // Method 2    // // Multiplication of 3 numbers    static int Multiply(int a, int b, int c)    {         // Return product        return a * b * c;    }} // Class 2// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Calling method by passing        // input as in arguments        System.out.println(Helper.Multiply(2, 4));        System.out.println(Helper.Multiply(2, 7, 3));    }}', '// Java Program for Method Overriding // Class 1// Helper classclass Parent {     // Method of parent class    void Print()    {         // Print statement        System.out.println(""parent class"");    }} // Class 2// Helper classclass subclass1 extends Parent {     // Method    void Print() { System.out.println(""subclass1""); }} // Class 3// Helper classclass subclass2 extends Parent {     // Method    void Print()    {         // Print statement        System.out.println(""subclass2"");    }} // Class 4// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating object of class 1        Parent a;         // Now we will be calling print methods        // inside main() method         a = new subclass1();        a.Print();         a = new subclass2();        a.Print();    }}']","['8\n34.65', '8\n42', 'subclass1\nsubclass2']",[],['Compile-time Polymorphism|||Runtime Polymorphism']
45,['Abstraction in Java'],['Java'],[],['https://media.geeksforgeeks.org/wp-content/uploads/Abstract-classes-and-methods-Page-1.png'],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/abstract-classes-in-java/', 'https://www.geeksforgeeks.org/abstract-keyword-in-java/', 'https://www.geeksforgeeks.org/overriding-in-java/', 'https://www.geeksforgeeks.org/new-operator-java/', 'https://www.geeksforgeeks.org/encapsulation-in-java/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/abstract-classes-in-java/', 'https://www.geeksforgeeks.org/difference-between-abstract-class-and-interface-in-java/', 'https://www.geeksforgeeks.org/abstract-keyword-in-java/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Abstract classes and Abstract methods :\xa0\xa0', 'When to use abstract classes and abstract methods with an example', 'Encapsulation vs Data Abstraction', 'Advantages of Abstraction', 'Related articles :\xa0\xa0']","['Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or the non-essentials units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.', 'Data Abstraction may also be defined as the process of identifying only the required characteristics of an object ignoring the irrelevant details. The properties and behaviours of an object differentiate it from other objects of similar type and also help in classifying/grouping the objects.', 'In java, abstraction is achieved by interfaces and abstract classes. We can achieve 100% abstraction using interfaces.', 'There are situations in which we will want to define a superclass that declares the structure of a given abstraction without providing a complete implementation of every method. That is, sometimes we will want to create a superclass that only defines a generalization form that will be shared by all of its subclasses, leaving it to each subclass to fill in the details.']","['Consider a real-life example of a man driving a car. The man only knows that pressing the accelerators will increase the speed of a car or applying brakes will stop the car, but he does not know about how on pressing the accelerator the speed is actually increasing, he does not know about the inner mechanism of the car or the implementation of the accelerator, brakes, etc in the car. This is what abstraction is.\xa0', 'Consider a classic “shape” example, perhaps used in a computer-aided design system or game simulation. The base type is “shape” and each shape has a color, size, and so on. From this, specific types of shapes are derived(inherited)-circle, square, triangle, and so on — each of which may have additional characteristics and behaviors. For example, certain shapes can be flipped. Some behaviors may be different, such as when you want to calculate the area of a shape. The type hierarchy embodies both the similarities and differences between the shapes.\xa0']","['// Java program to illustrate the// concept of Abstractionabstract class Shape {    String color;      // these are abstract methods    abstract double area();    public abstract String toString();      // abstract class can have the constructor    public Shape(String color)    {        System.out.println(""Shape constructor called"");        this.color = color;    }      // this is a concrete method    public String getColor() { return color; }}class Circle extends Shape {    double radius;      public Circle(String color, double radius)    {          // calling Shape constructor        super(color);        System.out.println(""Circle constructor called"");        this.radius = radius;    }      @Override double area()    {        return Math.PI * Math.pow(radius, 2);    }      @Override public String toString()    {        return ""Circle color is "" + super.getColor()            + ""and area is : "" + area();    }}class Rectangle extends Shape {      double length;    double width;      public Rectangle(String color, double length,                     double width)    {        // calling Shape constructor        super(color);        System.out.println(""Rectangle constructor called"");        this.length = length;        this.width = width;    }      @Override double area() { return length * width; }      @Override public String toString()    {        return ""Rectangle color is "" + super.getColor()            + ""and area is : "" + area();    }}public class Test {    public static void main(String[] args)    {        Shape s1 = new Circle(""Red"", 2.2);        Shape s2 = new Rectangle(""Yellow"", 2, 4);          System.out.println(s1.toString());        System.out.println(s2.toString());    }}']",['Shape constructor called\nCircle constructor called\nShape constructor called\nRectangle constructor called\nCircle color is Redand area is : 15.205308443374602\nRectangle color is Yellowand area is : 8.0'],[],"['Interfaces in java|||Abstract classes in java|||Difference between abstract class and interface|||abstract keyword in java&&&&&&An abstract class is a class that is declared with an abstract keyword.|||An abstract method is a method that is declared without implementation.|||An abstract class may or may not have all abstract methods. Some of them can be concrete methods|||A method defined abstract must always be redefined in the subclass, thus making overriding compulsory OR either make the subclass itself abstract.|||Any class that contains one or more abstract methods must also be declared with an abstract keyword.|||There can be no object of an abstract class. That is, an abstract class can not be directly instantiated with the new operator.|||An abstract class can have parameterized constructors and the default constructor is always present in an abstract class.&&&Encapsulation is data hiding(information hiding) while Abstraction is detailed hiding(implementation hiding).|||While encapsulation groups together data and methods that act upon the data, data abstraction deal with exposing the interface to the user and hiding the details of implementation.&&&It reduces the complexity of viewing the things.|||Avoids code duplication and increases reusability.|||Helps to increase the security of an application or program as only important details are provided to the user.&&&']"
46,['Overriding in Java'],[],[],"['https://media.geeksforgeeks.org/wp-content/cdn-uploads/overriding-in-java.png', 'https://media.geeksforgeeks.org/wp-content/uploads/OverridingVsOverloading.png', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/JavaOVerriding.jpg']",['https://www.youtube.com/embed/i6GzimCuFhM?list=PLqM7alHXFySF5ErEHA1BXgibGg7uqmA4_'],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/', 'https://www.geeksforgeeks.org/access-modifiers-java/', 'https://www.geeksforgeeks.org/final-keyword-java/', 'https://www.geeksforgeeks.org/using-final-with-inheritance-in-java/', 'https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/', 'https://www.geeksforgeeks.org/can-override-private-methods-java/', 'https://www.geeksforgeeks.org/can-override-private-methods-java/', 'https://www.geeksforgeeks.org/covariant-return-types-java/', 'https://www.geeksforgeeks.org/super-keyword/', 'https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/', 'https://www.geeksforgeeks.org/exceptions-in-java/', 'https://www.geeksforgeeks.org/virtual-functions-and-runtime-polymorphism-in-c-set-1-introduction/', 'https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/', 'https://www.geeksforgeeks.org/overloading-in-java/', 'https://media.geeksforgeeks.org/wp-content/uploads/OverridingVsOverloading.png', 'https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/', 'https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/', 'https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/', 'https://www.geeksforgeeks.org/inheritance-in-java/', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/JavaOVerriding.jpg', 'https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/', 'https://www.geeksforgeeks.org/overriding-equals-method-in-java/', 'https://www.geeksforgeeks.org/overriding-tostring-method-in-java/', 'https://www.geeksforgeeks.org/overloading-in-java/', 'https://www.geeksforgeeks.org/output-java-program-set-18-overriding/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Rules for method overriding:', 'Why Method Overriding ?', 'When to apply Method Overriding ?(with example)', 'Related Article:']","['The following table summarizes what happens when you define a method with the same signature as a method in a super-class.', 'Dynamic Method Dispatch is one of the most powerful mechanisms that object-oriented design brings to bear on code reuse and robustness. The ability to exist code libraries to call methods on instances of new classes without recompiling while maintaining a clean abstract interface is a profoundly powerful tool.', 'Overridden methods allow us to call methods of any of the derived classes without even knowing the type of derived class object.', 'This article is contributed by Twinkle Tyagi and Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['In any object-oriented programming language, Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class.', 'Method overriding is one of the way by which java achieve Run Time Polymorphism.The version of a method that is executed will be determined by the object that is used to invoke it. If an object of a parent class is used to invoke the method, then the version in the parent class will be executed, but if an object of the subclass is used to invoke the method, then the version in the child class will be executed. In other words, it is the type of the object being referred to (not the type of the reference variable) that determines which version of an overridden method will be executed.', 'As stated earlier, overridden methods allow Java to support run-time polymorphism. Polymorphism is essential to object-oriented programming for one reason: it allows a general class to specify methods that will be common to all of its derivatives while allowing subclasses to define the specific implementation of some or all of those methods. Overridden methods are another way that Java implements the “one interface, multiple methods” aspect of polymorphism.', 'Overriding and Inheritance : Part of the key to successfully applying polymorphism is understanding that the superclasses and subclasses form a hierarchy which moves from lesser to greater specialization. Used correctly, the superclass provides all elements that a subclass can use directly. It also defines those methods that the derived class must implement on its own. This allows the subclass the flexibility to define its methods, yet still enforces a consistent interface. Thus, by combining inheritance with overridden methods, a superclass can define the general form of the methods that will be used by all of its subclasses.', 'Let’s look at a more practical example that uses method overriding. Consider an employee management software for an organization, let the code has a simple base class Employee, the class has methods like raiseSalary(), transfer(), promote(), .. etc. Different types of employees like Manager, Engineer, ..etc may have their implementations of the methods present in base class Employee. In our complete software, we just need to pass a list of employees everywhere and call appropriate methods without even knowing the type of employee. For example, we can easily raise the salary of all employees by iterating through the list of employees. Every type of employee may have its logic in its class, we don’t need to worry because if raiseSalary() is present for a specific employee type, only that method would be called.']","['// A Simple Java program to demonstrate// method overriding in java  // Base Classclass Parent {    void show()    {        System.out.println(""Parent\'s show()"");    }}  // Inherited classclass Child extends Parent {    // This method overrides show() of Parent    @Override    void show()    {        System.out.println(""Child\'s show()"");    }}  // Driver classclass Main {    public static void main(String[] args)    {        // If a Parent type reference refers        // to a Parent object, then Parent\'s        // show is called        Parent obj1 = new Parent();        obj1.show();          // If a Parent type reference refers        // to a Child object Child\'s show()        // is called. This is called RUN TIME        // POLYMORPHISM.        Parent obj2 = new Child();        obj2.show();    }}', '// A Simple Java program to demonstrate// Overriding and Access-Modifiers  class Parent {    // private methods are not overridden    private void m1()    {        System.out.println(""From parent m1()"");    }      protected void m2()    {        System.out.println(""From parent m2()"");    }}  class Child extends Parent {    // new m1() method    // unique to Child class    private void m1()    {        System.out.println(""From child m1()"");    }      // overriding method    // with more accessibility    @Override    public void m2()    {        System.out.println(""From child m2()"");    }}  // Driver classclass Main {    public static void main(String[] args)    {        Parent obj1 = new Parent();        obj1.m2();        Parent obj2 = new Child();        obj2.m2();    }}', ""// A Java program to demonstrate that// final methods cannot be overridden  class Parent {    // Can't be overridden    final void show() {}}  class Child extends Parent {    // This would produce error    void show() {}}"", '// Java program to show that// if the static method is redefined by// a derived class, then it is not// overriding, it is hiding  class Parent {    // Static method in base class    // which will be hidden in subclass    static void m1()    {        System.out.println(""From parent ""                           + ""static m1()"");    }      // Non-static method which will    // be overridden in derived class    void m2()    {        System.out.println(""From parent ""                           + ""non-static(instance) m2()"");    }}  class Child extends Parent {    // This method hides m1() in Parent    static void m1()    {        System.out.println(""From child static m1()"");    }      // This method overrides m2() in Parent    @Override    public void m2()    {        System.out.println(""From child ""                           + ""non-static(instance) m2()"");    }}  // Driver classclass Main {    public static void main(String[] args)    {        Parent obj1 = new Child();          // As per overriding rules this        // should call to class Child static        // overridden method. Since static        // method can not be overridden, it        // calls Parent\'s m1()        obj1.m1();          // Here overriding works        // and Child\'s m2() is called        obj1.m2();    }}', '// A Java program to demonstrate that overridden// method can be called from sub-class  // Base Classclass Parent {    void show()    {        System.out.println(""Parent\'s show()"");    }}  // Inherited classclass Child extends Parent {    // This method overrides show() of Parent    @Override    void show()    {        super.show();        System.out.println(""Child\'s show()"");    }}  // Driver classclass Main {    public static void main(String[] args)    {        Parent obj = new Child();        obj.show();    }}', '/* Java program to demonstrate overriding when   superclass method does not declare an exception*/  class Parent {    void m1()    {        System.out.println(""From parent m1()"");    }      void m2()    {        System.out.println(""From parent  m2()"");    }}  class Child extends Parent {    @Override    // no issue while throwing unchecked exception    void m1() throws ArithmeticException    {        System.out.println(""From child m1()"");    }      @Override    // compile-time error    // issue while throwin checked exception    void m2() throws Exception    {        System.out.println(""From child m2"");    }}', '// Java program to demonstrate overriding when// superclass method does declare an exception  class Parent {    void m1() throws RuntimeException    {        System.out.println(""From parent m1()"");    }}  class Child1 extends Parent {    @Override    // no issue while throwing same exception    void m1() throws RuntimeException    {        System.out.println(""From child1 m1()"");    }}class Child2 extends Parent {    @Override    // no issue while throwing subclass exception    void m1() throws ArithmeticException    {        System.out.println(""From child2 m1()"");    }}class Child3 extends Parent {    @Override    // no issue while not throwing any exception    void m1()    {        System.out.println(""From child3 m1()"");    }}class Child4 extends Parent {    @Override    // compile-time error    // issue while throwing parent exception    void m1() throws Exception    {        System.out.println(""From child4 m1()"");    }}', '// A Java program to demonstrate// multi-level overriding  // Base Classclass Parent {    void show()    {        System.out.println(""Parent\'s show()"");    }}  // Inherited classclass Child extends Parent {    // This method overrides show() of Parent    void show() { System.out.println(""Child\'s show()""); }}  // Inherited classclass GrandChild extends Child {    // This method overrides show() of Parent    void show()    {        System.out.println(""GrandChild\'s show()"");    }}  // Driver classclass Main {    public static void main(String[] args)    {        Parent obj1 = new GrandChild();        obj1.show();    }}', '// A Simple Java program to demonstrate application// of overriding in Java  // Base Classclass Employee {    public static int base = 10000;    int salary()    {        return base;    }}  // Inherited classclass Manager extends Employee {    // This method overrides salary() of Parent    int salary()    {        return base + 20000;    }}  // Inherited classclass Clerk extends Employee {    // This method overrides salary() of Parent    int salary()    {        return base + 10000;    }}  // Driver classclass Main {    // This method can be used to print the salary of    // any type of employee using base class reference    static void printSalary(Employee e)    {        System.out.println(e.salary());    }      public static void main(String[] args)    {        Employee obj1 = new Manager();          // We could also get type of employee using        // one more overridden method.loke getType()        System.out.print(""Manager\'s salary : "");        printSalary(obj1);          Employee obj2 = new Clerk();        System.out.print(""Clerk\'s salary : "");        printSalary(obj2);    }}']","[""Parent's show()\nChild's show()"", 'From parent m2()\nFrom child m2()', '13: error: show() in Child cannot override show() in Parent\n    void show() {  }\n         ^\n  overridden method is final', 'From parent static m1()\nFrom child non-static(instance) m2()', ""Parent's show()\nChild's show()"", 'error: m2() in Child cannot override m2() in Parent\n    void m2() throws Exception{ System.out.println(""From child m2"");}\n         ^\n  overridden method does not throw Exception', 'error: m1() in Child4 cannot override m1() in Parent\n    void m1() throws Exception\n         ^\n  overridden method does not throw Exception', ""GrandChild's show()"", ""Manager's salary : 30000\nClerk's salary : 20000""]",[],"['Rule#1 : If the super-class overridden method does not throw an exception, subclass overriding method can only throws the unchecked exception, throwing checked exception will lead to compile-time error./* Java program to demonstrate overriding whensuperclass method does not declare an exception*/class Parent {void m1(){System.out.println(""From parent m1()"");}void m2(){System.out.println(""From parent m2()"");}}class Child extends Parent {@Override// no issue while throwing unchecked exceptionvoid m1() throws ArithmeticException{System.out.println(""From child m1()"");}@Override// compile-time error// issue while throwin checked exceptionvoid m2() throws Exception{System.out.println(""From child m2"");}}Output:error: m2() in Child cannot override m2() in Parent\n    void m2() throws Exception{ System.out.println(""From child m2"");}\n         ^\n  overridden method does not throw Exception\n|||Rule#2 : If the super-class overridden method does throws an exception, subclass overriding method can only throw same, subclass exception. Throwing parent exception in Exception hierarchy will lead to compile time error.Also there is no issue if subclass overridden method is not throwing any exception.// Java program to demonstrate overriding when// superclass method does declare an exceptionclass Parent {void m1() throws RuntimeException{System.out.println(""From parent m1()"");}}class Child1 extends Parent {@Override// no issue while throwing same exceptionvoid m1() throws RuntimeException{System.out.println(""From child1 m1()"");}}class Child2 extends Parent {@Override// no issue while throwing subclass exceptionvoid m1() throws ArithmeticException{System.out.println(""From child2 m1()"");}}class Child3 extends Parent {@Override// no issue while not throwing any exceptionvoid m1(){System.out.println(""From child3 m1()"");}}class Child4 extends Parent {@Override// compile-time error// issue while throwing parent exceptionvoid m1() throws Exception{System.out.println(""From child4 m1()"");}}Output:error: m1() in Child4 cannot override m1() in Parent\n    void m1() throws Exception\n         ^\n  overridden method does not throw Exception\n&&&In C++, we need virtual keyword to achieve overriding or Run Time Polymorphism. In Java, methods are virtual by default.|||We can have multilevel method-overriding.// A Java program to demonstrate// multi-level overriding// Base Classclass Parent {void show(){System.out.println(""Parent\'s show()"");}}// Inherited classclass Child extends Parent {// This method overrides show() of Parentvoid show() { System.out.println(""Child\'s show()""); }}// Inherited classclass GrandChild extends Child {// This method overrides show() of Parentvoid show(){System.out.println(""GrandChild\'s show()"");}}// Driver classclass Main {public static void main(String[] args){Parent obj1 = new GrandChild();obj1.show();}}Output:GrandChild\'s show()\n|||Overriding vs Overloading :Overloading is about same method have different signatures. Overriding is about same method, same signature but different classes connected through inheritance.Overloading is an example of compiler-time polymorphism and overriding is an example of run time polymorphism.|||Overloading is about same method have different signatures. Overriding is about same method, same signature but different classes connected through inheritance.|||Overloading is an example of compiler-time polymorphism and overriding is an example of run time polymorphism.&&&Overloading is about same method have different signatures. Overriding is about same method, same signature but different classes connected through inheritance.|||Overloading is an example of compiler-time polymorphism and overriding is an example of run time polymorphism.&&&Dynamic Method Dispatch or Runtime Polymorphism in Java|||Overriding equals() method of Object class|||Overriding toString() method of Object class|||Overloading in java|||Output of Java program | Set 18 (Overriding)&&&&&&Overriding and Access-Modifiers : The access modifier for an overriding method can allow more, but not less, access than the overridden method. For example, a protected instance method in the super-class can be made public, but not private, in the subclass. Doing so, will generate compile-time error.// A Simple Java program to demonstrate// Overriding and Access-Modifiersclass Parent {// private methods are not overriddenprivate void m1(){System.out.println(""From parent m1()"");}protected void m2(){System.out.println(""From parent m2()"");}}class Child extends Parent {// new m1() method// unique to Child classprivate void m1(){System.out.println(""From child m1()"");}// overriding method// with more accessibility@Overridepublic void m2(){System.out.println(""From child m2()"");}}// Driver classclass Main {public static void main(String[] args){Parent obj1 = new Parent();obj1.m2();Parent obj2 = new Child();obj2.m2();}}Output:From parent m2()\nFrom child m2()\n|||Final methods can not be overridden : If we don’t want a method to be overridden, we declare it as final. Please see Using final with Inheritance .// A Java program to demonstrate that// final methods cannot be overriddenclass Parent {// Can\'t be overriddenfinal void show() {}}class Child extends Parent {// This would produce errorvoid show() {}}Output:13: error: show() in Child cannot override show() in Parent\n    void show() {  }\n         ^\n  overridden method is final\n|||Static methods can not be overridden(Method Overriding vs Method Hiding) : When you define a static method with same signature as a static method in base class, it is known as method hiding.The following table summarizes what happens when you define a method with the same signature as a method in a super-class.Superclass Instance MethodSuperclass Static MethodSubclass Instance MethodOverridesGenerates a compile-time errorSubclass Static MethodGenerates a compile-time errorHides// Java program to show that// if the static method is redefined by// a derived class, then it is not// overriding, it is hidingclass Parent {// Static method in base class// which will be hidden in subclassstatic void m1(){System.out.println(""From parent ""+ ""static m1()"");}// Non-static method which will// be overridden in derived classvoid m2(){System.out.println(""From parent ""+ ""non-static(instance) m2()"");}}class Child extends Parent {// This method hides m1() in Parentstatic void m1(){System.out.println(""From child static m1()"");}// This method overrides m2() in Parent@Overridepublic void m2(){System.out.println(""From child ""+ ""non-static(instance) m2()"");}}// Driver classclass Main {public static void main(String[] args){Parent obj1 = new Child();// As per overriding rules this// should call to class Child static// overridden method. Since static// method can not be overridden, it// calls Parent\'s m1()obj1.m1();// Here overriding works// and Child\'s m2() is calledobj1.m2();}}Output:From parent static m1()\nFrom child non-static(instance) m2()\n|||Private methods can not be overridden : Private methods cannot be overridden as they are bonded during compile time. Therefore we can’t even override private methods in a subclass.(See this for details).|||The overriding method must have same return type (or subtype) : From Java 5.0 onwards it is possible to have different return type for a overriding method in child class, but child’s return type should be sub-type of parent’s return type. This phenomena is known as covariant return type.|||Invoking overridden method from sub-class : We can call parent class method in overriding method using super keyword.// A Java program to demonstrate that overridden// method can be called from sub-class// Base Classclass Parent {void show(){System.out.println(""Parent\'s show()"");}}// Inherited classclass Child extends Parent {// This method overrides show() of Parent@Overridevoid show(){super.show();System.out.println(""Child\'s show()"");}}// Driver classclass Main {public static void main(String[] args){Parent obj = new Child();obj.show();}}Output:Parent\'s show()\nChild\'s show()\n|||Overriding and constructor : We can not override constructor as parent and child class can never have constructor with same name(Constructor name must always be same as Class name).|||Overriding and Exception-Handling : Below are two rules to note when overriding methods related to exception-handling.Rule#1 : If the super-class overridden method does not throw an exception, subclass overriding method can only throws the unchecked exception, throwing checked exception will lead to compile-time error./* Java program to demonstrate overriding whensuperclass method does not declare an exception*/class Parent {void m1(){System.out.println(""From parent m1()"");}void m2(){System.out.println(""From parent m2()"");}}class Child extends Parent {@Override// no issue while throwing unchecked exceptionvoid m1() throws ArithmeticException{System.out.println(""From child m1()"");}@Override// compile-time error// issue while throwin checked exceptionvoid m2() throws Exception{System.out.println(""From child m2"");}}Output:error: m2() in Child cannot override m2() in Parent\n    void m2() throws Exception{ System.out.println(""From child m2"");}\n         ^\n  overridden method does not throw Exception\nRule#2 : If the super-class overridden method does throws an exception, subclass overriding method can only throw same, subclass exception. Throwing parent exception in Exception hierarchy will lead to compile time error.Also there is no issue if subclass overridden method is not throwing any exception.// Java program to demonstrate overriding when// superclass method does declare an exceptionclass Parent {void m1() throws RuntimeException{System.out.println(""From parent m1()"");}}class Child1 extends Parent {@Override// no issue while throwing same exceptionvoid m1() throws RuntimeException{System.out.println(""From child1 m1()"");}}class Child2 extends Parent {@Override// no issue while throwing subclass exceptionvoid m1() throws ArithmeticException{System.out.println(""From child2 m1()"");}}class Child3 extends Parent {@Override// no issue while not throwing any exceptionvoid m1(){System.out.println(""From child3 m1()"");}}class Child4 extends Parent {@Override// compile-time error// issue while throwing parent exceptionvoid m1() throws Exception{System.out.println(""From child4 m1()"");}}Output:error: m1() in Child4 cannot override m1() in Parent\n    void m1() throws Exception\n         ^\n  overridden method does not throw Exception\n|||Rule#1 : If the super-class overridden method does not throw an exception, subclass overriding method can only throws the unchecked exception, throwing checked exception will lead to compile-time error./* Java program to demonstrate overriding whensuperclass method does not declare an exception*/class Parent {void m1(){System.out.println(""From parent m1()"");}void m2(){System.out.println(""From parent m2()"");}}class Child extends Parent {@Override// no issue while throwing unchecked exceptionvoid m1() throws ArithmeticException{System.out.println(""From child m1()"");}@Override// compile-time error// issue while throwin checked exceptionvoid m2() throws Exception{System.out.println(""From child m2"");}}Output:error: m2() in Child cannot override m2() in Parent\n    void m2() throws Exception{ System.out.println(""From child m2"");}\n         ^\n  overridden method does not throw Exception\n|||Rule#2 : If the super-class overridden method does throws an exception, subclass overriding method can only throw same, subclass exception. Throwing parent exception in Exception hierarchy will lead to compile time error.Also there is no issue if subclass overridden method is not throwing any exception.// Java program to demonstrate overriding when// superclass method does declare an exceptionclass Parent {void m1() throws RuntimeException{System.out.println(""From parent m1()"");}}class Child1 extends Parent {@Override// no issue while throwing same exceptionvoid m1() throws RuntimeException{System.out.println(""From child1 m1()"");}}class Child2 extends Parent {@Override// no issue while throwing subclass exceptionvoid m1() throws ArithmeticException{System.out.println(""From child2 m1()"");}}class Child3 extends Parent {@Override// no issue while not throwing any exceptionvoid m1(){System.out.println(""From child3 m1()"");}}class Child4 extends Parent {@Override// compile-time error// issue while throwing parent exceptionvoid m1() throws Exception{System.out.println(""From child4 m1()"");}}Output:error: m1() in Child4 cannot override m1() in Parent\n    void m1() throws Exception\n         ^\n  overridden method does not throw Exception\n|||Overriding and abstract method: Abstract methods in an interface or abstract class are meant to be overridden in derived concrete classes otherwise a compile-time error will be thrown.|||Overriding and synchronized/strictfp method : The presence of synchronized/strictfp modifier with method have no effect on the rules of overriding, i.e. it’s possible that a synchronized/strictfp method can override a non synchronized/strictfp one and vice-versa.&&&In C++, we need virtual keyword to achieve overriding or Run Time Polymorphism. In Java, methods are virtual by default.|||We can have multilevel method-overriding.// A Java program to demonstrate// multi-level overriding// Base Classclass Parent {void show(){System.out.println(""Parent\'s show()"");}}// Inherited classclass Child extends Parent {// This method overrides show() of Parentvoid show() { System.out.println(""Child\'s show()""); }}// Inherited classclass GrandChild extends Child {// This method overrides show() of Parentvoid show(){System.out.println(""GrandChild\'s show()"");}}// Driver classclass Main {public static void main(String[] args){Parent obj1 = new GrandChild();obj1.show();}}Output:GrandChild\'s show()\n|||Overriding vs Overloading :Overloading is about same method have different signatures. Overriding is about same method, same signature but different classes connected through inheritance.Overloading is an example of compiler-time polymorphism and overriding is an example of run time polymorphism.|||Overloading is about same method have different signatures. Overriding is about same method, same signature but different classes connected through inheritance.|||Overloading is an example of compiler-time polymorphism and overriding is an example of run time polymorphism.&&&Overloading is about same method have different signatures. Overriding is about same method, same signature but different classes connected through inheritance.|||Overloading is an example of compiler-time polymorphism and overriding is an example of run time polymorphism.&&&']"
47,['Overloading in Java'],[],[],[],['https://www.youtube.com/embed/MHns-oaIHIs?list=PLqM7alHXFySF5ErEHA1BXgibGg7uqmA4_'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/', 'https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/', 'https://www.geeksforgeeks.org/gfact-48-overloading-main-in-java/', 'https://www.geeksforgeeks.org/overriding-in-java/', 'http://media.geeksforgeeks.org/wp-content/uploads/OverridingVsOverloading.png', 'https://www.geeksforgeeks.org/different-ways-method-overloading-java/', 'https://www.geeksforgeeks.org/method-overloading-null-error-java/', 'https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Let’s take an example to clear the concept:-', 'What is the difference between Overloading and Overriding?', 'Related Articles:']","['Overloading allows different methods to have the same name, but different signatures where the signature can differ by the number of input parameters or type of input parameters or both. Overloading is related to compile-time (or static) polymorphism.', 'Question Arises:Q. What if the exact prototype does not match with arguments.Ans.Priority wise, compiler take these steps:', 'What is the advantage?We don’t have to create and remember different names for functions doing the same thing. For example, in our code, if overloading was not supported by Java, we would have to create method names like sum1, sum2, … or sum2Int, sum3Int, … etc.', 'Can we overload methods on return type?We cannot overload by return type. This behavior is same in C++. Refer this for details', 'However, Overloading methods on return type are possible in cases where the data type of the function being called is explicitly specified. Look at the examples below :', 'Can we overload static methods?The answer is ‘Yes’. We can have two ore more static methods with same name, but differences in input parameters. For example, consider the following Java program. Refer this for details.', 'Can we overload methods that differ only by static keyword?We cannot overload two methods in Java if they differ only by static keyword (number of parameters and types of parameters is same). See following Java program for example. Refer this for details.', 'Can we overload main() in Java?Like other static methods, we can overload main() in Java. Refer overloading main() in Java for more details.', 'Does Java support Operator Overloading?Unlike C++, Java doesn’t allow user-defined overloaded operators. Internally Java overloads operators, for example, + is overloaded for concatenation.', 'This article is contributed by Shubham Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']",[],"['// Java program to demonstrate working of method// overloading in Java.  public class Sum {      // Overloaded sum(). This sum takes two int parameters    public int sum(int x, int y)    {        return (x + y);    }      // Overloaded sum(). This sum takes three int parameters    public int sum(int x, int y, int z)    {        return (x + y + z);    }      // Overloaded sum(). This sum takes two double parameters    public double sum(double x, double y)    {        return (x + y);    }      // Driver code    public static void main(String args[])    {        Sum s = new Sum();        System.out.println(s.sum(10, 20));        System.out.println(s.sum(10, 20, 30));        System.out.println(s.sum(10.5, 20.5));    }}', 'class Demo {    public void show(int x)    {        System.out.println(""In int"" + x);    }    public void show(String s)    {        System.out.println(""In String"" + s);    }    public void show(byte b)    {        System.out.println(""In byte"" + b);    }}class UseDemo {    public static void main(String[] args)    {        byte a = 25;        Demo obj = new Demo();        obj.show(a); // it will go to        // byte argument        obj.show(""hello""); // String        obj.show(250); // Int        obj.show(\'A\'); // Since char is        // not available, so the datatype        // higher than char in terms of        // range is int.        obj.show(""A""); // String        obj.show(7.5); // since float datatype// is not available and so it\'s higher// datatype, so at this step their// will be an error.}}', ""public class Main {    public int foo() { return 10; }      // compiler error: foo() is already defined    public char foo() { return 'a'; }      public static void main(String args[])    {    }}"", ""// Java program to demonstrate the working of method// overloading in static methodspublic class Main {      public static int foo(int a) { return 10; }    public static char foo(int a, int b) { return 'a'; }      public static void main(String args[])    {        System.out.println(foo(1));        System.out.println(foo(1, 2));    }}"", ""// Java program to demonstrate working of method// overloading in  methodsclass A {    public int foo(int a) { return 10; }      public char foo(int a, int b) { return 'a'; }}  public class Main {      public static void main(String args[])    {        A a = new A();        System.out.println(a.foo(1));        System.out.println(a.foo(1, 2));    }}"", '// A Java program with overloaded main()import java.io.*;  public class Test {      // Normal main()    public static void main(String[] args)    {        System.out.println(""Hi Geek (from main)"");        Test.main(""Geek"");    }      // Overloaded main methods    public static void main(String arg1)    {        System.out.println(""Hi, "" + arg1);        Test.main(""Dear Geek"", ""My Geek"");    }    public static void main(String arg1, String arg2)    {        System.out.println(""Hi, "" + arg1 + "", "" + arg2);    }}']","['30\n60\n31.0', '10\na', '10\na', 'Hi Geek (from main)\nHi, Geek\nHi, Dear Geek, My Geek']",[],"['Overloading is about same function have different signatures. Overriding is about same function, same signature but different classes connected through inheritance.|||Overloading is an example of compiler time polymorphism and overriding is an example of run time polymorphism.&&&Different ways of Method Overloading in Java|||Method Overloading and Null error in Java|||Can we Overload or Override static methods in java ?&&&&&&Type Conversion but to higher type(in terms of range) in same family.|||Type conversion to next higher family(suppose if there is no long data type available for an int data type, then it will search for the float data type).&&&']"
48,['Exceptions in Java'],[],[],"['https://media.geeksforgeeks.org/wp-content/uploads/Exception-in-java1.png', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/call-stack.png', 'https://media.geeksforgeeks.org/wp-content/uploads/Exception.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/jvm-works-jvm-architecture/', 'https://media.geeksforgeeks.org/wp-content/uploads/Exception-in-java1.png', 'https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/', 'https://www.geeksforgeeks.org/throw-throws-java/', 'https://www.geeksforgeeks.org/throw-throws-java/', 'https://www.geeksforgeeks.org/throw-throws-java/', 'https://www.geeksforgeeks.org/throw-throws-java/', 'https://www.geeksforgeeks.org/flow-control-in-try-catch-finally-in-java/', 'https://www.geeksforgeeks.org/types-of-exception-in-java-with-examples/', 'https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/', 'https://www.geeksforgeeks.org/throw-throws-java/', 'https://docs.oracle.com/javase/tutorial/essential/exceptions/definition.html', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['What is an Exception?', 'Error vs Exception', 'Exception Hierarchy', 'For checked vs unchecked exception, see Checked vs Unchecked Exceptions', 'How JVM handle an Exception?', 'See the below diagram to understand the flow of the call stack.', 'How Programmer handles an exception?', 'Detailed Article: Control flow in try catch finally block', 'Need of try-catch clause(Customized Exception Handling)', 'Consider the following java program.', 'How to use try-catch clause', 'Points to remember :', 'Related Articles:', 'Reference :https://docs.oracle.com/javase/tutorial/essential/exceptions/definition.html']","['An exception is an unwanted or unexpected event, which occurs during the execution of a program i.e at run time, that disrupts the normal flow of the program’s instructions.', 'Error:\xa0An Error indicates serious problem that a reasonable application should not try to catch.Exception:\xa0Exception indicates conditions that a reasonable application might try to catch.', 'Let us see an example that illustrate how run-time system searches appropriate exception handling code on the call stack :', 'This article is contributed by Nitsdheerendra and Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['All exception and errors types are sub classes of class Throwable, which is base class of hierarchy.One branch is headed by Exception. This class is used for exceptional conditions that user programs should catch. NullPointerException is an example of such an exception.Another branch,Error are used by the Java run-time system(JVM) to indicate errors having to do with the run-time environment itself(JRE). StackOverflowError is an example of such an error.', 'Default Exception Handling : Whenever inside a method, if an exception has occurred, the method creates an Object known as Exception Object and hands it off to the run-time system(JVM). The exception object contains name and description of the exception, and current state of the program where exception has occurred. Creating the Exception Object and handling it to the run-time system is called throwing an Exception.There might be the list of the methods that had been called to get to the method where exception was occurred. This ordered list of the methods is called Call Stack.Now the following procedure will happen.', 'Customized Exception Handling : Java exception handling is managed via five keywords: try, catch, throw, throws, and finally. Briefly, here is how they work. Program statements that you think can raise exceptions are contained within a try block. If an exception occurs within the try block, it is thrown. Your code can catch this exception (using catch block) and handle it in some rational manner. System-generated exceptions are automatically thrown by the Java run-time system. To manually throw an exception, use the keyword throw. Any exception that is thrown out of a method must be specified as such by a throws clause. Any code that absolutely must be executed after a try block completes is put in a finally block.', 'Explanation : In the above example an array is defined with size i.e. you can access elements only from index 0 to 3. But you trying to access the elements at index 4(by mistake) that’s why it is throwing an exception.In this case, JVM terminates the program abnormally. The statement System.out.println(“Hi, I want to execute”); will never execute. To execute it, we must handled the exception using try-catch. Hence to continue normal flow of the program, we need try-catch clause.']","['// Java program to demonstrate how exception is thrown.class ThrowsExecp{          public static void main(String args[]){                  String str = null;        System.out.println(str.length());              }}', '// Java program to demonstrate exception is thrown// how the runTime system searches th call stack// to find appropriate exception handler.class ExceptionThrown{    // It throws the Exception(ArithmeticException).    // Appropriate Exception handler is not found within this method.    static int divideByZero(int a, int b){                  // this statement will cause ArithmeticException(/ by zero)        int i = a/b;                   return i;    }          // The runTime System searches the appropriate Exception handler    // in this method also but couldn\'t have found. So looking forward    // on the call stack.    static int computeDivision(int a, int b) {                  int res =0;                  try        {          res = divideByZero(a,b);        }        // doesn\'t matches with ArithmeticException        catch(NumberFormatException ex)        {           System.out.println(""NumberFormatException is occured"");         }        return res;    }          // In this method found appropriate Exception handler.    // i.e. matching catch block.    public static void main(String args[]){                  int a = 1;        int b = 0;                  try        {            int i = computeDivision(a,b);                  }                  // matching ArithmeticException        catch(ArithmeticException ex)        {            // getMessage will print description of exception(here / by zero)            System.out.println(ex.getMessage());        }    }}', '// java program to demonstrate // need of try-catch clause  class GFG {    public static void main (String[] args) {                  // array of size 4.        int[] arr = new int[4];               // this statement causes an exception        int i = arr[4];                  // the following statement will never execute        System.out.println(""Hi, I want to execute"");    }}']","['Exception in thread ""xxx"" Name of Exception : Description\n... ...... ..  // Call Stack', 'Exception in thread ""main"" java.lang.NullPointerException\n    at ThrowsExecp.main(File.java:8)', '/ by zero.', 'Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 4\n    at GFG.main(GFG.java:9)', 'try {\n// block of code to monitor for errors\n// the code you think can raise an exception\n}\ncatch (ExceptionType1 exOb) {\n// exception handler for ExceptionType1\n}\ncatch (ExceptionType2 exOb) {\n// exception handler for ExceptionType2\n}\n// optional\nfinally {\n// block of code to be executed after try block ends\n}']",[],"['The run-time system searches the call stack to find the method that contains block of code that can handle the occurred exception. The block of the code is called Exception handler.|||The run-time system starts searching from the method in which exception occurred, proceeds through call stack in the reverse order in which methods were called.|||If it finds appropriate handler then it passes the occurred exception to it. Appropriate handler means the type of the exception object thrown matches the type of the exception object it can handle.|||If run-time system searches all the methods on call stack and couldn’t have found the appropriate handler then run-time system handover the Exception Object to default exception handler , which is part of run-time system. This handler prints the exception information in the following format and terminates program abnormally.Exception in thread ""xxx"" Name of Exception : Description\n... ...... ..  // Call Stack\n&&&In a method, there can be more than one statements that might throw exception, So put all these statements within its own try block and provide separate exception handler within own catch block for each of them.|||If an exception occurs within the try block, that exception is handled by the exception handler associated with it. To associate exception handler, we must put catch block after it. There can be more than one exception handlers. Each catch block is a exception handler that handles the exception of the type indicated by its argument. The argument, ExceptionType declares the type of the exception that it can handle and must be the name of the class that inherits from Throwable class.|||For each try block there can be zero or more catch blocks, but only one finally block.|||The finally block is optional.It always gets executed whether an exception occurred in try block or not . If exception occurs, then it will be executed after try and catch blocks.And if exception does not occur thenit will be executed after the try block.The finally block in java is used to put important codes such as clean up code e.g. closing the file or closing the connection.&&&Types of Exceptions in Java|||Checked vs Unchecked Exceptions|||Throw- Throws in Java']"
49,['Types of Exception in Java with Examples'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/cdn-uploads/Exceptions-in-Java.png'],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/built-exceptions-java-examples/', 'https://www.geeksforgeeks.org/E://file.txt', 'https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/', 'https://www.geeksforgeeks.org/g-fact-60/', 'https://www.geeksforgeeks.org/java-gq/exception-handling-2-gq/', 'https://www.facebook.com/ChippingEye2766', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Built-in Exceptions', 'Examples of Built-in Exception:\xa0', 'Following steps are followed for the creation of user-defined Exception.\xa0', 'RunTime Error\xa0', 'Related Articles:\xa0']","['Java defines several types of exceptions that relate to its various class libraries. Java also allows users to define their own exceptions.\xa0', 'Built-in exceptions are the exceptions which are available in Java libraries. These exceptions are suitable to explain certain error situations. Below is the list of important built-in exceptions in Java.\xa0', 'User-Defined ExceptionsSometimes, the built-in exceptions in Java are not able to describe a certain situation. In such cases, user can also create exceptions which are called ‘user-defined Exceptions’.\xa0']","['This article is contributed by Nishant Sharma. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program to demonstrate ArithmeticExceptionclass ArithmeticException_Demo{    public static void main(String args[])    {        try {            int a = 30, b = 0;            int c = a/b;  // cannot divide by zero            System.out.println (""Result = "" + c);        }        catch(ArithmeticException e) {            System.out.println (""Can\'t divide a number by 0"");        }    }}', '//Java program to demonstrate NullPointerExceptionclass NullPointer_Demo{    public static void main(String args[])    {        try {            String a = null; //null value            System.out.println(a.charAt(0));        } catch(NullPointerException e) {            System.out.println(""NullPointerException.."");        }    }}', '// Java program to demonstrate StringIndexOutOfBoundsExceptionclass StringIndexOutOfBound_Demo{    public static void main(String args[])    {        try {            String a = ""This is like chipping ""; // length is 22            char c = a.charAt(24); // accessing 25th element            System.out.println(c);        }        catch(StringIndexOutOfBoundsException e) {            System.out.println(""StringIndexOutOfBoundsException"");        }    }}', '//Java program to demonstrate FileNotFoundExceptionimport java.io.File;import java.io.FileNotFoundException;import java.io.FileReader; class File_notFound_Demo {     public static void main(String args[])  {        try {             // Following file does not exist            File file = new File(""E://file.txt"");             FileReader fr = new FileReader(file);        } catch (FileNotFoundException e) {           System.out.println(""File does not exist"");        }    }}', '// Java program to demonstrate NumberFormatExceptionclass  NumberFormat_Demo{    public static void main(String args[])    {        try {            // ""akki"" is not a number            int num = Integer.parseInt (""akki"") ;             System.out.println(num);        } catch(NumberFormatException e) {            System.out.println(""Number format exception"");        }    }}', '// Java program to demonstrate ArrayIndexOutOfBoundExceptionclass ArrayIndexOutOfBound_Demo{    public static void main(String args[])    {        try{            int a[] = new int[5];            a[6] = 9; // accessing 7th element in an array of                      // size 5        }        catch(ArrayIndexOutOfBoundsException e){            System.out.println (""Array Index is Out Of Bounds"");        }    }}', '// Java program to demonstrate user defined exception // This program throws an exception whenever balance// amount is below Rs 1000class MyException extends Exception{    //store account information    private static int accno[] = {1001, 1002, 1003, 1004};     private static String name[] =                 {""Nish"", ""Shubh"", ""Sush"", ""Abhi"", ""Akash""};     private static double bal[] =         {10000.00, 12000.00, 5600.0, 999.00, 1100.55};     // default constructor    MyException() {    }     // parameterized constructor    MyException(String str) { super(str); }     // write main()    public static void main(String[] args)    {        try  {            // display the heading for the table            System.out.println(""ACCNO"" + ""\\t"" + ""CUSTOMER"" +                                           ""\\t"" + ""BALANCE"");             // display the actual account information            for (int i = 0; i < 5 ; i++)            {                System.out.println(accno[i] + ""\\t"" + name[i] +                                               ""\\t"" + bal[i]);                 // display own exception if balance < 1000                if (bal[i] < 1000)                {                    MyException me =                       new MyException(""Balance is less than 1000"");                    throw me;                }            }        } //end of try         catch (MyException e) {            e.printStackTrace();        }    }}']","[""Can't divide a number by 0"", 'NullPointerException..', 'StringIndexOutOfBoundsException', 'File does not exist', 'Number format exception', 'Array Index is Out Of Bounds', 'class MyException extends Exception', 'MyException(){}', 'MyException(String str)\n{\n   super(str);\n}', 'MyException me = new MyException(“Exception details”);\nthrow me;', 'MyException: Balance is less than 1000\n    at MyException.main(fileProperty.java:36)', 'ACCNO    CUSTOMER    BALANCE\n1001    Nish    10000.0\n1002    Shubh    12000.0\n1003    Sush    5600.0\n1004    Abhi    999.0']",[],"['Arithmetic exception&&&NullPointer Exception&&&StringIndexOutOfBound Exception&&&FileNotFound Exception&&&NumberFormat Exception&&&ArrayIndexOutOfBounds Exception&&&The user should create an exception class as a subclass of Exception class. Since all the exceptions are subclasses of Exception class, the user should also make his class a subclass of it. This is done as:&&&We can write a default constructor in his own exception class.&&&We can also create a parameterized constructor with a string as a parameter.We can use this to store exception details. We can call super class(Exception) constructor from this and send the string there.&&&To raise exception of user-defined type, we need to create an object to his exception class and throw it using throw clause, as:&&&The following program illustrates how to create own exception class MyException.|||Details of account numbers, customer names, and balance amounts are taken in the form of three arrays.|||In main() method, the details are displayed using a for-loop. At this time, check is done if in any account the balance amount is less than the minimum balance amount to be apt in the account.|||If it is so, then MyException is raised and a message is displayed “Balance amount is less”.&&&Checked vs Unchecked Exceptions in Java|||Catching base and derived classes as exceptions|||Quiz on Exception Handling&&&&&&ArithmeticExceptionIt is thrown when an exceptional condition has occurred in an arithmetic operation.|||ArrayIndexOutOfBoundsExceptionIt is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.|||ClassNotFoundExceptionThis Exception is raised when we try to access a class whose definition is not found|||FileNotFoundExceptionThis Exception is raised when a file is not accessible or does not open.|||IOExceptionIt is thrown when an input-output operation failed or interrupted|||InterruptedExceptionIt is thrown when a thread is waiting, sleeping, or doing some processing, and it is interrupted.|||NoSuchFieldExceptionIt is thrown when a class does not contain the field (or variable) specified|||NoSuchMethodExceptionIt is thrown when accessing a method which is not found.|||NullPointerExceptionThis exception is raised when referring to the members of a null object. Null represents nothing|||NumberFormatExceptionThis exception is raised when a method could not convert a string into a numeric format.|||RuntimeExceptionThis represents any exception which occurs during runtime.|||StringIndexOutOfBoundsExceptionIt is thrown by String class methods to indicate that an index is either negative or greater than the size of the string&&&']"
50,['Checked vs Unchecked Exceptions in Java'],"['Checked Exceptions', 'Java', 'Java', 'Unchecked Exceptions\xa0', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/Exception-in-java1.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20211021121848/Screenshot20211021at121835PM.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/', 'https://www.geeksforgeeks.org/throw-throws-java/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']",[],"['An exception is an unwanted or unexpected event, which occurs during the execution of a program i.e at run time, that disrupts the normal flow of the program’s instructions. In Java, there are two types of exceptions:', 'These are the exceptions that are checked at compile time. If some code within a method throws a checked exception, then the method must either handle the exception or it must specify the exception using the throws keyword.\xa0', 'For example, consider the following Java program that opens the file at location “C:\\test\\a.txt” and prints the first three lines of it. The program doesn’t compile, because the function main() uses FileReader() and FileReader() throws a checked exception FileNotFoundException. It also uses readLine() and close() methods, and these methods also throw checked exception IOException', 'To fix the above program, we either need to specify a list of exceptions using throws, or we need to use a try-catch block. We have used throws in the below program. Since FileNotFoundException is a subclass of IOException, we can just specify IOException in the throws list and make the above program compiler-error-free.', 'These are the exceptions that are not checked at compile time. In C++, all exceptions are unchecked, so it is not forced by the compiler to either handle or specify the exception. It is up to the programmers to be civilized, and specify or catch the exceptions.\xa0In Java exceptions under Error and RuntimeException classes are unchecked exceptions, everything else under throwable is checked.\xa0', 'Consider the following Java program. It compiles fine, but it throws ArithmeticException when run. The compiler allows it to compile because ArithmeticException is an unchecked exception.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']",[],"['// Java Program to Illustrate Checked Exceptions// Where FileNotFoundException occured  // Importing I/O classesimport java.io.*;  // Main classclass GFG {      // Main driver method    public static void main(String[] args)    {          // Reading file from path in local directory        FileReader file = new FileReader(""C:\\\\test\\\\a.txt"");          // Creating object as one of ways of taking input        BufferedReader fileInput = new BufferedReader(file);          // Printing first 3 lines of file ""C:\\test\\a.txt""        for (int counter = 0; counter < 3; counter++)            System.out.println(fileInput.readLine());          // Closing file connections        // using close() method        fileInput.close();    }}', '// Java Program to Illustrate Checked Exceptions// Where FileNotFoundException does not occur  // Importing I/O classesimport java.io.*;  // Main classclass GFG {      // Main driver method    public static void main(String[] args)        throws IOException    {          // Creating a file and reading from local repository        FileReader file = new FileReader(""C:\\\\test\\\\a.txt"");          // Reading content inside a file        BufferedReader fileInput = new BufferedReader(file);          // Printing first 3 lines of file ""C:\\test\\a.txt""        for (int counter = 0; counter < 3; counter++)            System.out.println(fileInput.readLine());          // Closing all file connections        // using close() method        // Good practice to avoid any memory leakage        fileInput.close();    }}', '// Java Program to Illustrate Un-checked Exceptions  // Main classclass GFG {      // Main driver method    public static void main(String args[])    {        // Here we are dividing by 0        // which will not be caught at compile time        // as there is no mistake but caught at runtime        // because it is mathematically incorrect        int x = 0;        int y = 10;        int z = y / x;    }}']","['First three lines of file ""C:\\test\\a.txt""', 'Exception in thread ""main"" java.lang.ArithmeticException: / by zero\n    at Main.main(Main.java:5)\nJava Result: 1']",[],['Checked exceptions|||Unchecked exceptions']
51,['throw and throws in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/', 'https://www.geeksforgeeks.org/g-fact-32-user-defined-custom-exception-in-java/', 'https://www.geeksforgeeks.org/flow-control-in-try-catch-finally-in-java/', 'https://www.facebook.com/Pratik.Agarwal01', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Another Example:\xa0', 'Another Example:\xa0\xa0', 'Important points to remember about throws keyword:\xa0', 'Reference: Java – The complete Reference by Herbert Schildt']","['The throw keyword in Java is used to explicitly throw an exception from a method or any block of code. We can throw either checked or unchecked exception. The throw keyword is mainly used to throw custom exceptions.\xa0', 'But this exception i.e, Instance must be of type Throwable or a subclass of Throwable. For example Exception is a sub-class of Throwable and user defined exceptions typically extend Exception class. Unlike C++, data types such as int, char, floats or non-throwable classes cannot be used as exceptions.', 'throws is a keyword in Java which is used in the signature of method to indicate that this method might throw one of the listed type exceptions. The caller to these methods has to handle the exception using a try-catch block.\xa0', 'In a program, if there is a chance of raising an exception then compiler always warn us about it and compulsorily we should handle that checked exception, Otherwise we will get compile time error saying unreported exception XXX must be caught or declared to be thrown. To prevent this compile time error we can handle the exception in two ways:\xa0', 'We can use throws keyword to delegate the responsibility of exception handling to the caller (It may be a method or JVM) then caller method is responsible to handle that exception.\xa0\xa0', 'Explanation: In the above program, we are getting compile time error because there is a chance of exception if the main thread is going to sleep, other threads get the chance to execute main() method which will cause InterruptedException.\xa0', 'Explanation: In the above program, by using throws keyword we handled the InterruptedException and we will get the output as Hello Geeks']","['The flow of execution of the program stops immediately after the throw statement is executed and the nearest enclosing try block is checked to see if it has a catch statement that matches the type of exception. If it finds a match, controlled is transferred to that statement otherwise next enclosing try block is checked and so on. If no matching catch is found then the default exception handler will halt the program.\xa0', 'This article is contributed by Pratik Agarwal and Bishal Dubey. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program that demonstrates the use of throwclass ThrowExcep{    static void fun()    {        try        {            throw new NullPointerException(""demo"");        }        catch(NullPointerException e)        {            System.out.println(""Caught inside fun()."");            throw e; // rethrowing the exception        }    }     public static void main(String args[])    {        try        {            fun();        }        catch(NullPointerException e)        {            System.out.println(""Caught in main."");        }    }}', '// Java program that demonstrates the use of throwclass Test{    public static void main(String[] args)    {        System.out.println(1/0);    }}', '// Java program to illustrate error in case// of unhandled exceptionclass tst{    public static void main(String[] args)    {        Thread.sleep(10000);        System.out.println(""Hello Geeks"");    }}', '// Java program to illustrate throwsclass tst{    public static void main(String[] args)throws InterruptedException    {        Thread.sleep(10000);        System.out.println(""Hello Geeks"");    }}', '// Java program to demonstrate working of throwsclass ThrowsExecp{    static void fun() throws IllegalAccessException    {        System.out.println(""Inside fun(). "");        throw new IllegalAccessException(""demo"");    }    public static void main(String args[])    {        try        {            fun();        }        catch(IllegalAccessException e)        {            System.out.println(""caught in main."");        }    }}']","['throw Instance\nExample:\nthrow new ArithmeticException(""/ by zero"");', 'Caught inside fun().\nCaught in main.', 'Exception in thread ""main"" java.lang.ArithmeticException: / by zero', 'type method_name(parameters) throws exception_list\nexception_list is a comma separated list of all the \nexceptions which a method might throw.', 'error: unreported exception InterruptedException; must be caught or declared to be thrown', 'Hello Geeks', 'Inside fun().\ncaught in main.']",[],['throws keyword is required only for checked exception and usage of throws keyword for unchecked exception is meaningless.|||throws keyword is required only to convince compiler and usage of throws keyword does not prevent abnormal termination of program.|||By the help of throws keyword we can provide information to the caller of the method about the exception.&&&&&&By using try catch|||By using throws keyword&&&']
52,['User-defined Custom Exception in Java'],[],[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html', 'https://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']",[],"['Java provides us facility to create our own exceptions which are basically derived classes of Exception. For example MyException in below code extends the Exception class.', 'We pass the string to the constructor of the super class- Exception which is obtained using “getMessage()” function on the object created.', 'In the above code, constructor of MyException requires a string as its argument. The string is passed to parent class Exception’s constructor using super(). The constructor of Exception class can also be called without a parameter and call to super is not mandatory.', 'This article is contributed by Pranjal Mathur. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.']",[],"['// A Class that represents use-defined expceptionclass MyException extends Exception{    public MyException(String s)    {        // Call constructor of parent Exception        super(s);    }}  // A Class that uses above MyExceptionpublic class Main{    // Driver Program    public static void main(String args[])    {        try        {            // Throw an object of user defined exception            throw new MyException(""GeeksGeeks"");        }        catch (MyException ex)        {            System.out.println(""Caught"");              // Print the message from MyException object            System.out.println(ex.getMessage());        }    }}', '// A Class that represents use-defined expceptionclass MyException extends Exception{  }  // A Class that uses above MyExceptionpublic class setText{    // Driver Program    public static void main(String args[])    {        try        {            // Throw an object of user defined exception            throw new MyException();        }        catch (MyException ex)        {            System.out.println(""Caught"");            System.out.println(ex.getMessage());        }    }}']","['Caught\nGeeksGeeks', 'Caught\nnull']",[],[]
53,['Interfaces in Java'],[],[],[],['https://www.youtube.com/embed/8ZdbOOCqEII?list=PLqM7alHXFySF5ErEHA1BXgibGg7uqmA4_'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/comparator-interface-java/', 'https://www.geeksforgeeks.org/g-fact-73/', 'https://www.geeksforgeeks.org/g-fact-81/', 'https://www.geeksforgeeks.org/abstract-classes-in-java/', 'https://www.geeksforgeeks.org/comparator-interface-java/', 'https://www.geeksforgeeks.org/g-fact-47-java-interface-methods/', 'https://www.geeksforgeeks.org/interface-nested-class-another-interface/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Why do we use interface ?', 'To implement an interface we use keyword: implements', 'New features added in interfaces in JDK 8', 'Important points about interface or summary of article:', 'New features added in interfaces in JDK 9From Java 9 onwards, interfaces can contain following also', 'Related articles:']","['Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, no body). \xa0', 'To declare an interface, use interface keyword. It is used to provide total abstraction. That means all the methods in an interface are declared with an empty body and are public and all fields are public, static and final by default. A class that implements an interface must implement all the methods declared in the interface. To implement interface use implements keyword.', 'The reason is, abstract classes may contain non-final variables, whereas variables in interface are final, public and static.', 'A real-world example:Let’s consider the example of vehicles like bicycle, car, bike………, they have common functionalities. So we make an interface and put all these common functionalities. And lets Bicycle, Bike, car ….etc implement all these functionalities in their own class in their own way.', 'Suppose we need to add a new function in an existing interface. Obviously the old code will not work as the classes have not implemented those new functions. So with the help of default implementation, we will give a default body for the newly added functions. Then the old codes will still work.', 'This article is contributed by Mehak Kumar. and Nitsdheerendra. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']",[],"['// A simple interfaceinterface Player{    final int id = 10;    int move();}', '// Java program to demonstrate working of // interface.import java.io.*;  // A simple interfaceinterface In1{    // public, static and final    final int a = 10;      // public and abstract     void display();}  // A class that implements the interface.class TestClass implements In1{    // Implementing the capabilities of    // interface.    public void display()    {        System.out.println(""Geek"");    }      // Driver Code    public static void main (String[] args)    {        TestClass t = new TestClass();        t.display();        System.out.println(a);    }}', 'import java.io.*;  interface Vehicle {          // all are the abstract methods.    void changeGear(int a);    void speedUp(int a);    void applyBrakes(int a);}  class Bicycle implements Vehicle{          int speed;    int gear;           // to change gear    @Override    public void changeGear(int newGear){                  gear = newGear;    }          // to increase speed    @Override    public void speedUp(int increment){                  speed = speed + increment;    }          // to decrease speed    @Override    public void applyBrakes(int decrement){                  speed = speed - decrement;    }          public void printStates() {         System.out.println(""speed: "" + speed              + "" gear: "" + gear);    }}  class Bike implements Vehicle {          int speed;    int gear;          // to change gear    @Override    public void changeGear(int newGear){                  gear = newGear;    }          // to increase speed    @Override    public void speedUp(int increment){                  speed = speed + increment;    }          // to decrease speed    @Override    public void applyBrakes(int decrement){                  speed = speed - decrement;    }          public void printStates() {         System.out.println(""speed: "" + speed             + "" gear: "" + gear);    }      }class GFG {          public static void main (String[] args) {              // creating an inatance of Bicycle         // doing some operations         Bicycle bicycle = new Bicycle();        bicycle.changeGear(2);        bicycle.speedUp(3);        bicycle.applyBrakes(1);                  System.out.println(""Bicycle present state :"");        bicycle.printStates();                  // creating instance of the bike.        Bike bike = new Bike();        bike.changeGear(1);        bike.speedUp(4);        bike.applyBrakes(3);                  System.out.println(""Bike present state :"");        bike.printStates();    }}', '// An example to show that interfaces can// have methods from JDK 1.8 onwardsinterface In1{    final int a = 10;    default void display()    {        System.out.println(""hello"");    }}  // A class that implements the interface.class TestClass implements In1{    // Driver Code    public static void main (String[] args)    {        TestClass t = new TestClass();        t.display();    }}', '// An example to show that interfaces can// have methods from JDK 1.8 onwardsinterface In1{    final int a = 10;    static void display()    {        System.out.println(""hello"");    }}  // A class that implements the interface.class TestClass implements In1{    // Driver Code    public static void main (String[] args)    {        In1.display();    }}']","['interface <interface_name> {\n    \n    // declare constant fields\n    // declare methods that abstract \n    // by default.\n}', 'Geek\n10', 'Bicycle present state :\nspeed: 2 gear: 2\nBike present state :\nspeed: 1 gear: 1', 'hello', 'hello']",[],"['Interfaces specify what a class must do and not how. It is the blueprint of the class.|||An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move(). So it specifies a set of methods that the class has to implement.|||If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstract.|||A Java library example is, Comparator Interface. If a class implements this interface, then it can be used to sort a collection.&&&It is used to achieve total abstraction.|||Since java does not support multiple inheritance in case of class, but by using interface it can achieve multiple inheritance .|||It is also used to achieve loose coupling.|||Interfaces are used to implement abstraction. So the question arises why use interfaces when we have abstract classes?The reason is, abstract classes may contain non-final variables, whereas variables in interface are final, public and static.// A simple interfaceinterface Player{final int id = 10;int move();}&&&We can’t create instance(interface can’t be instantiated) of interface but we can make reference of it that refers to the Object of its implementing class.|||A class can implement more than one interface.|||An interface can extends another interface or interfaces (more than one interface) .|||A class that implements interface must implements all the methods in interface.|||All the methods are public and abstract. And all the fields are public, static, and final.|||It is used to achieve multiple inheritance.|||It is used to achieve loose coupling.&&&Access specifier of methods in interfaces|||Access specifiers for classes or interfaces in Java|||Abstract Classes in Java|||Comparator Interface in Java|||Java Interface methods|||Nested Interface in Java&&&&&&Prior to JDK 8, interface could not define implementation. We can now add default implementation for interface methods. This default implementation has special use and does not affect the intention behind interfaces.Suppose we need to add a new function in an existing interface. Obviously the old code will not work as the classes have not implemented those new functions. So with the help of default implementation, we will give a default body for the newly added functions. Then the old codes will still work.\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(""1b4172cd-acc7-4363-9184-3fadd3cdabcf"");\n                          });\n                        // An example to show that interfaces can// have methods from JDK 1.8 onwardsinterface In1{final int a = 10;default void display(){System.out.println(""hello"");}}// A class that implements the interface.class TestClass implements In1{// Driver Codepublic static void main (String[] args){TestClass t = new TestClass();t.display();}}Output :hello\n|||Another feature that was added in JDK 8 is that we can now define static methods in interfaces which can be called independently without an object. Note: these methods are not inherited.// An example to show that interfaces can// have methods from JDK 1.8 onwardsinterface In1{final int a = 10;static void display(){System.out.println(""hello"");}}// A class that implements the interface.class TestClass implements In1{// Driver Codepublic static void main (String[] args){In1.display();}}Output :hello&&&Static methods|||Private methods|||Private Static methods&&&']"
54,['Nested Interface in Java'],[],[],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/g-fact-81/', 'https://www.geeksforgeeks.org/g-fact-73/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']",[],"['We can declare interfaces as member of a class or another interface. Such an interface is called as member interface or nested interface.', 'The access specifier in above example is default. We can assign public, protected or private also. Below is an example of protected. In this particular example, if we change access specifier to private, we get compiler error because a derived class tries to access it.', 'Interface in another InterfaceAn interface can be declared inside another interface also. We mention the interface as i_name1.i_name2 where i_name1 is the name of the interface in which it is nested and i_name2 is the name of the interface to be implemented.', 'Note: In the above example, access specifier is public even if we have not written public. If we try to change access specifier of interface to anything other than public, we get compiler error. Remember, interface members can only be public..', 'This article is contributed by Twinkle Tyagi. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']","['Interface in a classInterfaces (or classes) can have only public and default access specifiers when declared outside any other class (Refer this for details). This interface declared in a class can either be default, public, protected not private. While implementing the interface, we mention the interface as c_name.i_name where c_name is the name of the class in which it is nested and i_name is the name of the interface itself.Let us have a look at the following code:-']","['// Java program to demonstrate working of// interface inside a class.import java.util.*;class Test{    interface Yes    {        void show();    }}  class Testing implements Test.Yes{    public void show()    {        System.out.println(""show method of interface"");    }}  class A{    public static void main(String[] args)    {        Test.Yes obj;        Testing t = new Testing();        obj=t;        obj.show();    }}', '// Java program to demonstrate protected // specifier for nested interface.import java.util.*;class Test{    protected interface Yes    {        void show();    }}  class Testing implements Test.Yes{    public void show()    {        System.out.println(""show method of interface"");    }}  class A{    public static void main(String[] args)    {        Test.Yes obj;        Testing t = new Testing();        obj=t;        obj.show();    }}', '// Java program to demonstrate working of // interface inside another interface.import java.util.*;interface Test{   interface Yes   {      void show();       }}  class Testing implements Test.Yes{   public void show()   {      System.out.println(""show method of interface"");   } }   class A{   public static void main(String[] args)   {     Test.Yes obj;     Testing t = new Testing();     obj = t;     obj.show();   } }', '// Java program to demonstrate an interface cannot// have non-public member interface.import java.util.*;interface Test{    protected interface Yes    {        void show();    }}  class Testing implements Test.Yes{    public void show()    {        System.out.println(""show method of interface"");    }}  class A{    public static void main(String[] args)    {        Test.Yes obj;        Testing t = new Testing();        obj = t;        obj.show();    }}']","['show method of interface', 'show method of interface', 'show method of interface', 'illegal combination of modifiers: public and protected\n   protected interface Yes']",[],[]
55,['Marker interface in Java'],"['Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.geeksforgeeks.org/clone-method-in-java-2/', 'https://www.geeksforgeeks.org/serialization-in-java/', 'https://www.geeksforgeeks.org/remote-method-invocation-in-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']",['Examples of Marker Interface which are used in real-time applications :\xa0\xa0'],"['It is an empty interface (no field or methods). Examples of marker interface are Serializable, Cloneable and Remote interface. All these interfaces are empty interfaces.\xa0\xa0']","['This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program to illustrate Cloneable interfaceimport java.lang.Cloneable;  // By implementing Cloneable interface// we make sure that instances of class A// can be cloned.class A implements Cloneable{    int i;    String s;      // A class constructor    public A(int i,String s)    {        this.i = i;        this.s = s;    }      // Overriding clone() method    // by simply calling Object class    // clone() method.    @Override    protected Object clone()    throws CloneNotSupportedException    {        return super.clone();    }}  public class Test{    public static void main(String[] args)        throws CloneNotSupportedException    {        A a = new A(20, ""GeeksForGeeks"");          // cloning \'a\' and holding        // new cloned object reference in b          // down-casting as clone() return type is Object        A b = (A)a.clone();          System.out.println(b.i);        System.out.println(b.s);    }}', '// Java program to illustrate Serializable interfaceimport java.io.*;  // By implementing Serializable interface// we make sure that state of instances of class A// can be saved in a file.class A implements Serializable{    int i;    String s;      // A class constructor    public A(int i,String s)    {        this.i = i;        this.s = s;    }}  public class Test{    public static void main(String[] args)      throws IOException, ClassNotFoundException    {        A a = new A(20,""GeeksForGeeks"");          // Serializing \'a\'        FileOutputStream fos = new FileOutputStream(""xyz.txt"");        ObjectOutputStream oos = new ObjectOutputStream(fos);        oos.writeObject(a);          // De-serializing \'a\'        FileInputStream fis = new FileInputStream(""xyz.txt"");        ObjectInputStream ois = new ObjectInputStream(fis);        A b = (A)ois.readObject();//down-casting object          System.out.println(b.i+"" ""+b.s);          // closing streams        oos.close();        ois.close();    }}']","['public interface Serializable \n{\n  // nothing here\n}', '20\nGeeksForGeeks', '20 GeeksForGeeks']",[],"['Cloneable interface : Cloneable interface is present in java.lang package. There is a method clone() in Object class. A class that implements the Cloneable interface indicates that it is legal for clone() method to make a field-for-field copy of instances of that class.Invoking Object’s clone method on an instance of the class that does not implement the Cloneable interface results in an exception CloneNotSupportedException being thrown. By convention, classes that implement this interface should override Object.clone() method.Refer here for more details.Java// Java program to illustrate Cloneable interfaceimport java.lang.Cloneable;// By implementing Cloneable interface// we make sure that instances of class A// can be cloned.class A implements Cloneable{int i;String s;// A class constructorpublic A(int i,String s){this.i = i;this.s = s;}// Overriding clone() method// by simply calling Object class// clone() method.@Overrideprotected Object clone()throws CloneNotSupportedException{return super.clone();}}public class Test{public static void main(String[] args)throws CloneNotSupportedException{A a = new A(20, ""GeeksForGeeks"");// cloning \'a\' and holding// new cloned object reference in b// down-casting as clone() return type is ObjectA b = (A)a.clone();System.out.println(b.i);System.out.println(b.s);}}Output:20\nGeeksForGeeks|||Serializable interface : Serializable interface is present in java.io package. It is used to make an object eligible for saving its state into a file. This is called Serialization.Classes that do not implement this interface will not have any of their state serialized or deserialized. All subtypes of a serializable class are themselves serializable.Java// Java program to illustrate Serializable interfaceimport java.io.*;// By implementing Serializable interface// we make sure that state of instances of class A// can be saved in a file.class A implements Serializable{int i;String s;// A class constructorpublic A(int i,String s){this.i = i;this.s = s;}}public class Test{public static void main(String[] args)throws IOException, ClassNotFoundException{A a = new A(20,""GeeksForGeeks"");// Serializing \'a\'FileOutputStream fos = new FileOutputStream(""xyz.txt"");ObjectOutputStream oos = new ObjectOutputStream(fos);oos.writeObject(a);// De-serializing \'a\'FileInputStream fis = new FileInputStream(""xyz.txt"");ObjectInputStream ois = new ObjectInputStream(fis);A b = (A)ois.readObject();//down-casting objectSystem.out.println(b.i+"" ""+b.s);// closing streamsoos.close();ois.close();}}Output:20 GeeksForGeeks|||Remote interface : Remote interface is present in java.rmi package. A remote object is an object which is stored at one machine and accessed from another machine. So, to make an object a remote object, we need to flag it with Remote interface. Here, Remote interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine.Any object that is a remote object must directly or indirectly implement this interface. RMI (Remote Method Invocation) provides some convenience classes that remote object implementations can extend which facilitate remote object creation.']"
56,['Abstract Classes in Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/uploads/20211006150858/Screenshot20211006at30820PM.png'],['https://www.youtube.com/embed/DWmpxZ59JW0?feature=oembed'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/pure-virtual-functions-and-abstract-classes/', 'https://www.geeksforgeeks.org/abstract-keyword-in-java/', 'https://www.geeksforgeeks.org/difference-between-abstract-class-and-interface-in-java/', 'https://www.geeksforgeeks.org/difference-between-abstract-class-and-abstract-method-in-java/', 'https://www.geeksforgeeks.org/constructor-in-java-abstract-class/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Illustration: Abstract class', 'Following are some important observations about abstract classes in Java.', 'Observation 4: Abstract classes can also have final methods (methods that cannot be overridden)', 'Must Read:']","['In C++, if a class has at least one pure virtual function, then the class becomes abstract. Unlike C++, in Java, a separate keyword abstract is used to make a class abstract.\xa0', 'Let us elaborate on these observations and do justify them with help of clean java programs as follows.', 'Observation 1: In Java, just likely in C++ an instance of an abstract class cannot be created, we can have references to abstract class type though. It is as shown below via clean java program.', 'Observation 2: Like C++, an abstract class can contain constructors in Java. And a constructor of abstract class is called when an instance of an inherited class is created. It is as shown in the program below as follows:\xa0', 'Observation 3: In Java, we can have an abstract class without any abstract method. This allows us to create classes that cannot be instantiated but can only be inherited. It is as shown below as follows with help of clean java program.', 'Observation 5: For any abstract java class we are not allowed to create an object i.e., for abstract class instantiation is not possible.\xa0', 'Observation 6: Similar to the interface we can define static methods in an abstract class that can be called independently without an object.\xa0', '\xa0Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']",[],"['// Java Program to Illustrate That an Iinstance of Abstract// Class Can not be created // Class 1// Abstract classabstract class Base {    abstract void fun();} // Class 2class Derived extends Base {    void fun()    {        System.out.println(""Derived fun() called"");    }} // Class 3// Main classclass Main {     // Main driver method    public static void main(String args[])    {         // Uncommenting the following line will cause        // compiler error as the line tries to create an        // instance of abstract class. Base b = new Base();         // We can have references of Base type.        Base b = new Derived();        b.fun();    }}', '// Java Program to Illustrate Abstract Class// Can contain Constructors // Class 1// Abstract classabstract class Base {     // Constructor of class 1    Base()    {        // Print statement        System.out.println(""Base Constructor Called"");    }     // Abstract method inside class1    abstract void fun();} // Class 2class Derived extends Base {     // Constructor of class2    Derived()    {        System.out.println(""Derived Constructor Called"");    }     // Method of class2    void fun()    {        System.out.println(""Derived fun() called"");    }} // Class 3// Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Creating object of class 2        // inside main() method        Derived d = new Derived();    }}', '// Java Program to illustrate Abstract class// Without any abstract method // Class 1// An abstract class without any abstract methodabstract class Base {     // Demo method    void fun()    {        // Print message if class 1 function is called        System.out.println(            ""Function of Base class is called"");    }} // Class 2class Derived extends Base {} // Class 3class Main {     // Main driver method    public static void main(String args[])    {        // Creating object of class 2        Derived d = new Derived();         // Calling function defined in class 1 inside main()        // with object of class 2 inside main() method        d.fun();    }}', '// Java Program to Illustrate Abstract classes// Can also have Final Methods // Class 1// Abstract classabstract class Base {     final void fun()    {        System.out.println(""Base fun() called"");    }} // Class 2class Derived extends Base {} // Class 3// Main classclass GFG {     // Main driver method    public static void main(String args[])    {         // Creating object of abstract class        Base b = new Derived();         // Calling method on object created above        // inside main()        b.fun();    }}', '// Java Program to Illustrate Abstract Class // Main class// An abstract classabstract class GFG {     // Main driver method    public static void main(String args[])    {         // Trying to create an object        GFG gfg = new GFG();    }}', '// Java Program to Illustrate Static Methods in Abstract// Class Can be called Independently // Class 1// Abstract classabstract class Helper {     // Abstract method    static void demofun()    {         // Print statement        System.out.println(""Geeks for Geeks"");    }} // Class 2// Main class extending Helper classpublic class GFG extends Helper {     // Main driver method    public static void main(String[] args)    {         // Calling method inside main()        // as defined in above class        Helper.demofun();    }}']","['abstract class Shape \n{\n    int color;\n\n    // An abstract function\n    abstract void draw();\n}', 'Derived fun() called', 'Base Constructor Called\nDerived Constructor Called', 'Function of Base class is called', 'Base fun() called', 'Geeks for Geeks']",[],['Difference between Abstract class and Interface in Java|||Difference between Abstract class and Abstract Methods|||Constructors in Java Abstract Class&&&&&&An instance of an abstract class can not be created.|||Constructors are allowed.|||We can have an abstract class without any abstract method.|||Abstract classes can not have final methods because when you make a method final you can not override it but the abstract methods are meant for overriding.|||We are not allowed to create object for any abstract class.|||We can define static methods in an abstract class&&&']
57,['Difference between Abstract Class and Interface in Java'],"['Java', 'Java']",['Abstract class vs Interface\xa0'],['https://media.geeksforgeeks.org/wp-content/uploads/Abstract-Class-vs-Interface.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/abstract-classes-in-java/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/java-gq/abstract-class-and-interface-in-java-gq/', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Example 1-A:', 'What if we don’t have any common code between rectangle and circle then go with the interface.\xa0', 'Example 1-B:', 'When to use what?', 'Consider using abstract classes if any of these statements apply to your situation:\xa0\xa0', 'Consider using interfaces if any of these statements apply to your situation:\xa0\xa0', 'You can also go for Quiz on this topic.']","['As we know that abstraction refers to hiding the internal implementation of the feature and only showing the functionality to the users. i.e. what it works (showing), how it works (hiding). Both abstract class and interface are used for abstraction, henceforth Interface and Abstract Class are required prerequisites\xa0']","['This article is contributed by Nitsdheerendra. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java Program to Illustrate Concept of// Abstract Class // Importing required classesimport java.io.*; // Class 1// Helper abstract classabstract class Shape {     // Declare fields    String objectName = "" "";     // Constructor of this class    Shape(String name) { this.objectName = name; }     // Method    // Non-abstract methods    // Having as default implementation    public void moveTo(int x, int y)    {        System.out.println(this.objectName + "" ""                           + ""has been moved to""                           + "" x = "" + x + "" and y = "" + y);    }     // Method 2    // Abstract methods which will be    // implemented by its subclass(es)    abstract public double area();    abstract public void draw();} // Class 2// Helper class extending Class 1class Rectangle extends Shape {     // Atributes of rectangle    int length, width;     // Constructor    Rectangle(int length, int width, String name)    {         // Super keyword refers to current instance itself        super(name);         // this keyword refers to current instance itself        this.length = length;        this.width = width;    }     // Method 1    // To draw rectangle    @Override public void draw()    {        System.out.println(""Rectangle has been drawn "");    }     // Method 2    // To compute rectangle area    @Override public double area()    {        // Length * Breadth        return (double)(length * width);    }} // Class 3// Helper class extending Class 1class Circle extends Shape {     // Attributes of a Circle    double pi = 3.14;    int radius;     // Constructor    Circle(int radius, String name)    {        // Super keyword refers to parent class        super(name);        // This keyword refers to current instance itself        this.radius = radius;    }     // Method 1    // To draw circle    @Override public void draw()    {        // Print statement        System.out.println(""Circle has been drawn "");    }     // Method 2    // To compute circle area    @Override public double area()    {        return (double)((pi * radius * radius));    }} // Class 4// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating the Object of Rectangle class        // and using shape class reference.        Shape rect = new Rectangle(2, 3, ""Rectangle"");         System.out.println(""Area of rectangle: ""                           + rect.area());         rect.moveTo(1, 2);         System.out.println("" "");         // Creating the Objects of circle class        Shape circle = new Circle(2, ""Circle"");         System.out.println(""Area of circle: ""                           + circle.area());         circle.moveTo(2, 4);    }}', '// Java Program to Illustrate Concept of Interface // Importing I/O classesimport java.io.*; // Interfaceinterface Shape {     // Abstract method    void draw();    double area();} // Class 1// Helper classclass Rectangle implements Shape {     int length, width;     // constructor    Rectangle(int length, int width)    {        this.length = length;        this.width = width;    }     @Override public void draw()    {        System.out.println(""Rectangle has been drawn "");    }     @Override public double area()    {        return (double)(length * width);    }} // Class 2// Helper classclass Circle implements Shape {     double pi = 3.14;    int radius;     // constructor    Circle(int radius) { this.radius = radius; }     @Override public void draw()    {        System.out.println(""Circle has been drawn "");    }     @Override public double area()    {         return (double)((pi * radius * radius));    }} // Class 3// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating the Object of Rectangle class        // and using shape interface reference.        Shape rect = new Rectangle(2, 3);         System.out.println(""Area of rectangle: ""                           + rect.area());         // Creating the Objects of circle class        Shape circle = new Circle(2);         System.out.println(""Area of circle: ""                           + circle.area());    }}']","['Area of rectangle: 6.0\nRectangle has been moved to x = 1 and y = 2\n \nArea of circle: 12.56\nCircle has been moved to x = 2 and y = 4', 'Area of rectangle: 6.0\nArea of circle: 12.56']",[],"['Type of methods: Interface can have only abstract methods. An abstract class can have abstract and non-abstract methods. From Java 8, it can have default and static methods also.|||Final Variables: Variables declared in a Java interface are by default final. An abstract class may contain non-final variables.|||Type of variables: Abstract class can have final, non-final, static and non-static variables. The interface has only static and final variables.|||Implementation: Abstract class can provide the implementation of the interface. Interface can’t provide the implementation of an abstract class.|||Inheritance vs Abstraction: A Java interface can be implemented using the keyword “implements” and an abstract class can be extended using the keyword “extends”.|||Multiple implementations: An interface can extend another Java interface only, an abstract class can extend another Java class and implement multiple Java interfaces.|||Accessibility of Data Members: Members of a Java interface are public by default. A Java abstract class can have class members like private, protected, etc.&&&In the java application, there are some related classes that need to share some lines of code then you can put these lines of code within the abstract class and this abstract class should be extended by all these related classes.|||You can define the non-static or non-final field(s) in the abstract class so that via a method you can access and modify the state of the object to which they belong.|||You can expect that the classes that extend an abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).&&&It is total abstraction, All methods declared within an interface must be implemented by the class(es) that implements this interface.|||A class can implement more than one interface. It is called multiple inheritances.|||You want to specify the behavior of a particular data type but are not concerned about who implements its behavior.']"
58,['Functional Interfaces in Java'],"['Java', 'Java', 'Java', 'Java']","['@FunctionalInterface Annotation\xa0', 'Some Built-in Java Functional Interfaces']",[],[],"['https://www.geeksforgeeks.org/hard/', 'https://www.geeksforgeeks.org/lambda-expressions-java-8/', 'https://www.geeksforgeeks.org/lambda-expressions-java-8/', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Before Java 8, we had to create anonymous inner class objects or implement these interfaces.', 'Java 8 onwards, we can assign lambda expression to its functional interface object like this:\xa0', 'Syntax / Prototype of Consumer Functional Interface –\xa0', 'Syntax of Predicate Functional Interface –\xa0', 'These versions are:', 'The prototype and syntax of Bi-Function is given below –', 'In the above code of interface, T, U are the inputs, and there is only one output that is R.\xa0', 'The prototype of the Unary Operator and Binary Operator is given below –', '1. Unary Operator', '\xa02. Binary Operator', 'Syntax / Prototype of Supplier Functional Interface is –', 'Here are some significant points regarding Functional interfaces in Java:']","['A functional interface is an interface that contains only one abstract method. They can have only one functionality to exhibit. From Java 8 onwards, lambda expressions can be used to represent the instance of a functional interface. A functional interface can have any number of default methods. Runnable, ActionListener, Comparable are some of the examples of functional interfaces.\xa0', 'Functional Interface is additionally recognized as Single Abstract Method Interfaces. In short, they are also known as SAM interfaces. Functional interfaces in Java are the new feature that provides users with the approach of fundamental programming.\xa0', 'In Functional interfaces, there is no need to use the abstract keyword as it is optional to use the abstract keyword because, by default, the method defined inside the interface is abstract only. We can also call Lambda expressions as the instance of functional interface.', '@FunctionalInterface annotation is used to ensure that the functional interface can’t have more than one abstract method. In case more than one abstract methods are present, the compiler flags an ‘Unexpected @FunctionalInterface annotation’ message. However, it is not mandatory to use this annotation.', 'Since Java SE 1.8 onwards, there are many interfaces that are converted into functional interface. All these interfaces are annotated with @FunctionalInterface. These interfaces are as follows –\xa0', 'Java SE 8 included four main kinds of functional interfaces which can be applied in multiple situations. These are:', 'Amidst the previous four interfaces, the first three interfaces,i.e., Consumer, Predicate, and Function, likewise have additions that are provided beneath –\xa0', 'The consumer interface of the functional interface is the one that accepts only one argument or a gentrified argument. The consumer interface has no return value. It returns nothing. There are also functional variants of the Consumer — DoubleConsumer, IntConsumer, and LongConsumer. These variants accept primitive values as arguments.\xa0', 'Other than these variants, there is also one more variant of the Consumer interface known as Bi-Consumer.\xa0', 'Bi-Consumer – Bi-Consumer is the most exciting variant of the Consumer interface. The consumer interface takes only one argument, but on the other side, the Bi-Consumer interface takes two arguments. Both, Consumer and Bi-Consumer have no return value. It also returns noting just like the Consumer interface. It is used in iterating through the entries of the map.\xa0', 'This implementation of the Java Consumer functional interface prints the value passed as a parameter to the print statement. This implementation uses the Lambda function of Java.', 'Just like the Consumer functional interface, Predicate functional interface also has some extensions. These are IntPredicate, DoublePredicate, and LongPredicate. These types of predicate functional interfaces accept only primitive data types or values as arguments.\xa0\xa0', 'Bi-Predicate – Bi-Predicate is also an extension of the Predicate functional interface, which, instead of one, takes two arguments, does some processing, and returns the boolean value.', 'The predicate functional interface can also be implemented using a class. The syntax for the implementation of predicate functional interface using a class is given below –\xa0', 'The Java predicate functional interface can also be implemented using Lambda expressions. The example of implementation of Predicate functional interface is given below –\xa0', 'This implementation of functional interfaces in Java using Java Lambda expressions is more manageable and effective than the one implemented using a class as both the implementations are doing the same work, i.e., returning the same output.', 'Bi-Function – The Bi-Function is substantially related to a Function. Besides, it takes two arguments, whereas Function accepts one argument.\xa0', 'Unary Operator and Binary Operator – There are also two other functional interfaces which are named as Unary Operator and Binary Operator. They both extend the Function and Bi-Function, respectively. In simple words, Unary Operator extends Function, and Binary Operator extends Bi-Function.\xa0', 'We can understand front the above example that the Unary Operator accepts only one argument and returns a single argument only. Still, in Unary Operator both the input and output values must be identical and of the same type.\xa0', 'On the other way, Binary Operator takes two values and returns one value comparable to Bi- Function but similarly like Unary Operator, the input and output value type must be identical and of the same type.', 'The different extensions of the Supplier functional interface hold many other supplier functions like BooleanSupplier, DoubleSupplier, LongSupplier, and IntSupplier. The return type of all these further specializations is their corresponding primitives only.\xa0']","['Java has forever remained an Object-Oriented Programming language. By object-oriented programming language, we can declare that everything present in the Java programming language rotates throughout the Objects, except for some of the primitive data types and primitive methods for integrity and simplicity. There are no solely functions present in a programming language called Java. Functions in the Java programming language are part of a class, and if someone wants to use them, they have to use the class or object of the class to call any function.', 'Functional interfaces are included in Java SE 8 with Lambda expressions and Method references in order to make code more readable, clean, and straightforward. Functional interfaces are interfaces that ensure that they include precisely only one abstract method. Functional interfaces are used and executed by representing the interface with an annotation called @FunctionalInterface. As described earlier, functional interfaces can contain only one abstract method. However, they can include any quantity of default and static methods.\xa0', 'In scientific logic, a function that accepts an argument and, in return, generates a boolean value as an answer is known as a predicate. Similarly, in the java programming language, a predicate functional interface of java is a type of function which accepts a single value or argument and does some sort of processing on it, and returns a boolean (True/ False) answer. The implementation of the Predicate functional interface also encapsulates the logic of filtering (a process that is used to filter stream components on the base of a provided predicate) in Java.', 'A function is a type of functional interface in Java that receives only a single argument and returns a value after the required processing. There are many versions of Function interfaces because a primitive type can’t imply a general type argument, so we need these versions of function interfaces. Many different versions of the function interfaces are instrumental and are commonly used in primitive types like double, int, long. The different sequences of these primitive types are also used in the argument.', 'The Supplier functional interface is also a type of functional interface that does not take any input or argument and yet returns a single output. This type of functional interface is generally used in the lazy generation of values. Supplier functional interfaces are also used for defining the logic for the generation of any sequence. For example – The logic behind the Fibonacci Series can be generated with the help of the Stream.generate method, which is implemented by the Supplier functional Interface.\xa0', 'This article is contributed by Akash Ojha. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java program to demonstrate functional interface  class Test {    public static void main(String args[])    {        // create anonymous inner class object        new Thread(new Runnable() {            @Override public void run()            {                System.out.println(""New thread created"");            }        }).start();    }}', '// Java program to demonstrate Implementation of// functional interface using lambda expressions  class Test {    public static void main(String args[])    {          // lambda expression to create the object        new Thread(() -> {            System.out.println(""New thread created"");        }).start();    }}', '// Java program to demonstrate lambda expressions to// implement a user defined functional interface.  @FunctionalInterface  interface Square {    int calculate(int x);}  class Test {    public static void main(String args[])    {        int a = 5;          // lambda expression to define the calculate method        Square s = (int x) -> x * x;          // parameter passed and return type must be        // same as defined in the prototype        int ans = s.calculate(a);        System.out.println(ans);    }}', '// A simple program to demonstrate the use// of predicate interface  import java.util.*;import java.util.function.Predicate;  class Test {    public static void main(String args[])    {          // create a list of strings        List<String> names = Arrays.asList(            ""Geek"", ""GeeksQuiz"", ""g1"", ""QA"", ""Geek2"");          // declare the predicate type as string and use        // lambda expression to create object        Predicate<String> p = (s) -> s.startsWith(""G"");          // Iterate through the list        for (String st : names) {            // call the test method            if (p.test(st))                System.out.println(st);        }    }}']","['New thread created', 'New thread created', '25', 'Consumer<Integer> consumer = (value) -> System.out.println(value);', 'public interface Predicate<T> {\n \n \xa0\xa0\xa0boolean test(T t);\n \n}', 'public class CheckForNull implements Predicate {\n \n \xa0\xa0\xa0@Override\n \xa0\xa0\xa0public boolean test(Object o) {\n \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0return o != null;\n \n \xa0\xa0\xa0}\n}', 'Predicate predicate = (value) -> value != null;', '@FunctionalInterface\npublic interface BiFunction<T, U, R> \n{\n \n \xa0\xa0R apply(T t, U u);\n \xa0\xa0\xa0.......\n \n}', '@FunctionalInterface\npublic interface UnaryOperator<T> extends Function<T, U> \n{\n \xa0\xa0\xa0……...\n}', '@FunctionalInterface\npublic interface BinaryOperator<T> extends BiFunction<T, U, R> \n{\n \xa0\xa0\xa0……...\n}', '@FunctionalInterface\npublic interface Supplier<T>{\n \n// gets a result\n………….\n \n// returns the specific result\n…………\n \nT.get();\n \n}', 'Geek\nGeeksQuiz\nGeek2']",[],"['Runnable –> This interface only contains the run() method.|||Comparable –> This interface only contains the compareTo() method.|||ActionListener –> This interface only contains the actionPerformed() method.|||Callable –> This interface only contains the call() method.&&&&&&Consumer|||Predicate|||Function|||Supplier&&&Consumer -> Bi-Consumer|||Predicate -> Bi-Predicate|||Function -> Bi-Function, Unary Operator, Binary Operator&&&In functional interfaces, there is only one abstract method supported. If the annotation of a functional interface, i.e., @FunctionalInterface is not implemented or written with a function interface, more than one abstract method can be declared inside it. However, in this situation with more than one functional interface, that interface will not be called a functional interface. It is called a non-functional interface.|||There is no such need for the @FunctionalInterface annotation as it is voluntary only. This is written because it helps in checking the compiler level. Besides this, it is optional.|||An infinite number of methods (whether static or default) can be added to the functional interface. In simple words, there is no limit to a functional interface containing static and default methods.|||Overriding methods from the parent class do not violate the rules of a functional interface in Java.|||The java.util.function package contains many built-in functional interfaces in Java 8.&&&']"
59,['Comparator Interface in Java with Examples'],"['Java', 'Java']","['How do the sort() method of Collections class work?\xa0', 'Sort collection by more than one field']",[],[],"['https://www.geeksforgeeks.org/medium/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['To sort a given List, ComparatorClass must implement a Comparator interface.']","['A comparator interface is used to order the objects of user-defined classes. A comparator object is capable of comparing two objects of the same class. Following function compare obj1 with obj2.', 'Suppose we have an Array/ArrayList of our own class type, containing fields like roll no, name, address, DOB, etc, and we need to sort the array based on Roll no or name?', 'Method 1: One obvious approach is to write our own sort() function using one of the standard algorithms. This solution requires rewriting the whole sorting code for different criteria like Roll No. and Name.', 'Method 2: Using comparator interface- Comparator interface is used to order the objects of a user-defined class. This interface is present in java.util package and contains 2 methods compare(Object obj1, Object obj2) and equals(Object element). Using a comparator, we can sort the elements based on data members. For instance, it may be on roll no, name, age, or anything else.', 'Method of Collections class for sorting List elements is used to sort the elements of List by the given comparator.\xa0\xa0', 'Internally the Sort method does call Compare method of the classes it is sorting. To compare two elements, it asks “Which is greater?” Compare method returns -1, 0, or 1 to say if it is less than, equal, or greater to the other. It uses this result to then determine if they should be swapped for their sort.', 'By changing the return value inside the compare method, you can sort in any order that you wish to, for example: For descending order just change the positions of ‘a’ and ‘b’ in the above compare method.', 'In the previous example, we have discussed how to sort the list of objects on the basis of a single field using Comparable and Comparator interface But, what if we have a requirement to sort ArrayList objects in accordance with more than one field like firstly, sort according to the student name and secondly, sort according to student age.', 'This article is contributed by Rishabh Mahrsee. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['// Java Program to Demonstrate Working of// Comparator Interface // Importing required classesimport java.io.*;import java.lang.*;import java.util.*; // Class 1// A class to represent a Studentclass Student {     // Attributes of a student    int rollno;    String name, address;     // Constructor    public Student(int rollno, String name, String address)    {         // This keyword refers to current instance itself        this.rollno = rollno;        this.name = name;        this.address = address;    }     // Method of Student class    // To print student details in main()    public String toString()    {         // Returning attributes of Student        return this.rollno + "" "" + this.name + "" ""            + this.address;    }} // Class 2// Helper class implementing Comparator interfaceclass Sortbyroll implements Comparator<Student> {     // Method    // Sorting in ascending order of roll number    public int compare(Student a, Student b)    {         return a.rollno - b.rollno;    }} // Class 3// Helper class implementing Comparator interfaceclass Sortbyname implements Comparator<Student> {     // Method    // Sorting in ascending order of name    public int compare(Student a, Student b)    {         return a.name.compareTo(b.name);    }} // Class 4// Main classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating an empty ArrayList of Student type        ArrayList<Student> ar = new ArrayList<Student>();         // Adding entries in above List        // using add() method        ar.add(new Student(111, ""Mayank"", ""london""));        ar.add(new Student(131, ""Anshul"", ""nyc""));        ar.add(new Student(121, ""Solanki"", ""jaipur""));        ar.add(new Student(101, ""Aggarwal"", ""Hongkong""));         // Display message on console for better readability        System.out.println(""Unsorted"");         // Iterating over entries to print them        for (int i = 0; i < ar.size(); i++)            System.out.println(ar.get(i));         // Sorting student entries by roll number        Collections.sort(ar, new Sortbyroll());         // Display message on console for better readability        System.out.println(""\\nSorted by rollno"");         // Again iterating over entries to print them        for (int i = 0; i < ar.size(); i++)            System.out.println(ar.get(i));         // Sorting student entries by name        Collections.sort(ar, new Sortbyname());         // Display message on console for better readability        System.out.println(""\\nSorted by name"");         // // Again iterating over entries to print them        for (int i = 0; i < ar.size(); i++)            System.out.println(ar.get(i));    }}', '// Java Program to Demonstrate Working of// Comparator Interface Via More than One Field // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Iterator;import java.util.List; // Class 1// Helper class representing a Studentclass Student {     // Attributes of student    String Name;    int Age;     // Parameterized constructor    public Student(String Name, Integer Age)    {         // This keyword refers to current instance itself        this.Name = Name;        this.Age = Age;    }     // Getter setter methods    public String getName() { return Name; }     public void setName(String Name) { this.Name = Name; }     public Integer getAge() { return Age; }     public void setAge(Integer Age) { this.Age = Age; }     // Method    // Overriding toString() method    @Override public String toString()    {        return ""Customer{""            + ""Name="" + Name + "", Age="" + Age + \'}\';    }     // Class 2    // Helper class implementing Comparator interface    static class CustomerSortingComparator        implements Comparator<Student> {         // Method 1        // To compare customers        @Override        public int compare(Student customer1,                           Student customer2)        {             // Comparing customers            int NameCompare = customer1.getName().compareTo(                customer2.getName());             int AgeCompare = customer1.getAge().compareTo(                customer2.getAge());             // 2nd level comparison            return (NameCompare == 0) ? AgeCompare                                      : NameCompare;        }    }     // Method 2    // Main driver method    public static void main(String[] args)    {         // Create an empty ArrayList        // to store Student        List<Student> al = new ArrayList<>();         // Create customer objects        // using constructor initialization        Student obj1 = new Student(""Ajay"", 27);        Student obj2 = new Student(""Sneha"", 23);        Student obj3 = new Student(""Simran"", 37);        Student obj4 = new Student(""Ajay"", 22);        Student obj5 = new Student(""Ajay"", 29);        Student obj6 = new Student(""Sneha"", 22);         // Adding customer objects to ArrayList        // using add() method        al.add(obj1);        al.add(obj2);        al.add(obj3);        al.add(obj4);        al.add(obj5);        al.add(obj6);         // Iterating using Iterator        // before Sorting ArrayList        Iterator<Student> custIterator = al.iterator();         // Display message        System.out.println(""Before Sorting:\\n"");         // Holds true till there is single element        // remaining in List        while (custIterator.hasNext()) {             // Iterating using next() method            System.out.println(custIterator.next());        }         // Sorting using sort method of Collections class        Collections.sort(al,                         new CustomerSortingComparator());         // Display message only        System.out.println(""\\n\\nAfter Sorting:\\n"");         // Iterating using enhanced for-loop        // after Sorting ArrayList        for (Student customer : al) {            System.out.println(customer);        }    }}']","['public int compare(Object obj1, Object obj2):', 'public void sort(List list, ComparatorClass c)', 'Unsorted\n111 Mayank london\n131 Anshul nyc\n121 Solanki jaipur\n101 Aggarwal Hongkong\n\nSorted by rollno\n101 Aggarwal Hongkong\n111 Mayank london\n121 Solanki jaipur\n131 Anshul nyc\n\nSorted by name\n101 Aggarwal Hongkong\n131 Anshul nyc\n111 Mayank london\n121 Solanki jaipur', 'Before Sorting:\n\nCustomer{Name=Ajay, Age=27}\nCustomer{Name=Sneha, Age=23}\nCustomer{Name=Simran, Age=37}\nCustomer{Name=Ajay, Age=22}\nCustomer{Name=Ajay, Age=29}\nCustomer{Name=Sneha, Age=22}\n\n\nAfter Sorting:\n\nCustomer{Name=Ajay, Age=22}\nCustomer{Name=Ajay, Age=27}\nCustomer{Name=Ajay, Age=29}\nCustomer{Name=Simran, Age=37}\nCustomer{Name=Sneha, Age=22}\nCustomer{Name=Sneha, Age=23}']",[],[]
60,['Collections in Java'],"['Java', 'Hierarchy of the Collection Framework', 'Methods of the Collection Interface', 'Interfaces that extend the Collections Interface', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']",['What You Should Learn in Java Collections?'],['https://media.geeksforgeeks.org/wp-content/cdn-uploads/20211209124013/Collections-in-Java.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/classes-objects-java/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/introduction-to-arrays/', 'https://www.geeksforgeeks.org/java-util-vector-class-java/', 'https://www.geeksforgeeks.org/hashtable-in-java/', 'https://www.geeksforgeeks.org/methods-in-java/', 'https://www.geeksforgeeks.org/constructors-in-java/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/data-structures/linked-list/', 'https://www.geeksforgeeks.org/classes-objects-java/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/collection-add-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/collections-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/collection-clear-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/collection-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/collection-isempty-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/collections-max-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/mathematic-logic-predicates-quantifiers/', 'https://www.geeksforgeeks.org/java-program-to-convert-iterator-to-spliterator/', 'https://www.geeksforgeeks.org/list-interface-java-examples/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/java-util-vector-class-java/', 'https://www.geeksforgeeks.org/stack-class-in-java/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/primitive-data-type-vs-object-data-type-in-java-with-examples/', 'https://www.geeksforgeeks.org/wrapper-classes-java/', 'https://www.geeksforgeeks.org/linked-list-in-java/', 'https://www.geeksforgeeks.org/data-structures/linked-list/', 'https://www.geeksforgeeks.org/java-util-vector-class-java/', 'https://www.geeksforgeeks.org/stack-class-in-java/', 'https://www.geeksforgeeks.org/stack-data-structure/', 'https://www.geeksforgeeks.org/arraydeque-in-java/', 'https://www.geeksforgeeks.org/queue-interface-java/', 'https://www.geeksforgeeks.org/priority-queue-class-in-java-2/', 'https://www.geeksforgeeks.org/arraydeque-in-java/', 'https://www.geeksforgeeks.org/priority-queue-class-in-java-2/', 'https://www.geeksforgeeks.org/comparator-interface-java/', 'https://www.geeksforgeeks.org/deque-interface-java-example/', 'https://www.geeksforgeeks.org/queue-data-structure/', 'https://www.geeksforgeeks.org/deque-set-1-introduction-applications/', 'https://www.geeksforgeeks.org/arraydeque-in-java/', 'https://www.geeksforgeeks.org/arraydeque-in-java/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/hashset-in-java/', 'https://www.geeksforgeeks.org/treeset-in-java-with-examples/', 'https://www.geeksforgeeks.org/linkedhashset-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashset-in-java/', 'https://www.geeksforgeeks.org/linkedhashset-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/treeset-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java/', 'https://www.geeksforgeeks.org/treemap-in-java/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-interface-java-examples/', 'https://www.geeksforgeeks.org/abstractlist-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractsequentiallist-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/java-util-vector-class-java/', 'https://www.geeksforgeeks.org/stack-class-in-java/', 'https://www.geeksforgeeks.org/linked-list-in-java/', 'https://www.geeksforgeeks.org/queue-interface-java/', 'https://www.geeksforgeeks.org/blockingqueue-interface-in-java/', 'https://www.geeksforgeeks.org/abstractqueue-in-java-with-examples/', 'https://www.geeksforgeeks.org/priority-queue-class-in-java-2/', 'https://www.geeksforgeeks.org/priorityblockingqueue-class-in-java/', 'https://www.geeksforgeeks.org/concurrentlinkedqueue-in-java-with-examples/', 'https://www.geeksforgeeks.org/arrayblockingqueue-class-in-java/', 'https://www.geeksforgeeks.org/delayqueue-class-in-java-with-example/', 'https://www.geeksforgeeks.org/linkedblockingqueue-class-in-java/', 'https://www.geeksforgeeks.org/linkedtransferqueue-in-java-with-examples/', 'https://www.geeksforgeeks.org/deque-interface-java-example/', 'https://www.geeksforgeeks.org/blockingdeque-in-java/', 'https://www.geeksforgeeks.org/concurrentlinkeddeque-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraydeque-in-java/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/abstractset-class-in-java-with-examples/', 'https://www.geeksforgeeks.org/copyonwritearrayset-in-java/', 'https://www.geeksforgeeks.org/enumset-class-java/', 'https://www.geeksforgeeks.org/concurrenthashmap-in-java/', 'https://www.geeksforgeeks.org/hashset-in-java/', 'https://www.geeksforgeeks.org/linkedhashset-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/navigableset-java-examples/', 'https://www.geeksforgeeks.org/treeset-in-java-with-examples/', 'https://www.geeksforgeeks.org/concurrentskiplistset-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/sortedmap-java-examples/', 'https://www.geeksforgeeks.org/navigablemap-interface-in-java-with-example/', 'https://www.geeksforgeeks.org/concurrentmap-interface-java/', 'https://www.geeksforgeeks.org/treemap-in-java/', 'https://www.geeksforgeeks.org/abstractmap-in-java/', 'https://www.geeksforgeeks.org/concurrenthashmap-in-java/', 'https://www.geeksforgeeks.org/enummap-class-java-example/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java-with-examples/', 'https://www.geeksforgeeks.org/identityhashmap-class-java/', 'https://www.geeksforgeeks.org/linkedhashmap-class-java-examples/', 'https://www.geeksforgeeks.org/hashtable-in-java/', 'https://www.geeksforgeeks.org/java-util-properties-class-java/', 'https://www.geeksforgeeks.org/how-to-convert-hashmap-to-arraylist-in-java/', 'https://www.geeksforgeeks.org/randomly-select-items-from-a-list-in-java/?ref=rp', 'https://www.geeksforgeeks.org/how-to-add-all-items-from-a-collection-to-an-arraylist-in-java/?ref=rp', 'https://www.geeksforgeeks.org/conversion-of-java-maps-to-list/', 'https://www.geeksforgeeks.org/array-to-arraylist-conversion-in-java/?ref=rp', 'https://www.geeksforgeeks.org/arraylist-array-conversion-java-toarray-methods/?ref=rp', 'https://www.geeksforgeeks.org/array-vs-arraylist-in-java/?ref=rp', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['What is a Framework?', 'Need for a Separate Collection Framework', 'Let’s understand this with an example of adding an element in a hashtable and a vector.\xa0', 'Description', 'Iterator iterator();\xa0', 'List <T> al = new ArrayList<> ();\xa0List <T> ll = new LinkedList<> ();\xa0List <T> v = new Vector<> ();\xa0', 'Where T is the type of the object\xa0', 'The classes which implement the List interface are as follows:', 'Queue <T> pq = new PriorityQueue<> ();\xa0Queue <T> ad = new ArrayDeque<> ();\xa0', 'Where T is the type of the object.\xa0\xa0', 'Deque<T> ad = new ArrayDeque<> ();\xa0', 'Where T is the type of the object.\xa0\xa0', 'The class which implements the deque interface is ArrayDeque.\xa0', 'Set<T> hs = new HashSet<> ();\xa0Set<T> lhs = new LinkedHashSet<> ();\xa0Set<T> ts = new TreeSet<> ();\xa0', 'Where T is the type of the object.\xa0\xa0', 'The following are the classes that implement the Set interface:', 'SortedSet<T> ts = new TreeSet<> ();\xa0', 'Where T is the type of the object.\xa0\xa0', 'Map<T> hm = new HashMap<> ();\xa0Map<T> tm = new TreeMap<> ();\xa0Where T is the type of the object.\xa0']","['Any group of individual objects which are represented as a single unit is known as the collection of the objects. In Java, a separate framework named the “Collection Framework” has been defined in JDK 1.2 which holds all the collection classes and interface in it.\xa0', 'The Collection interface (java.util.Collection) and Map interface (java.util.Map) are the two main “root” interfaces of Java collection classes.', 'A framework is a set of classes and interfaces which provide a ready-made architecture. In order to implement a new feature or a class, there is no need to define a framework. However, an optimal object-oriented design always includes a framework with a collection of classes such that all the classes perform the same kind of task.\xa0', 'Advantages of the Collection Framework: Since the lack of a collection framework gave rise to the above set of disadvantages, the following are the advantages of the collection framework.\xa0', 'Before understanding the different components in the above framework, let’s first understand a class and an interface.\xa0', 'This interface contains various methods which can be directly used by all the collections which implement this interface. They are:', 'The collection framework contains multiple interfaces where every interface is used to store a specific type of data. The following are the interfaces present in the framework.\xa0', 'B. LinkedList: LinkedList class is an implementation of the LinkedList data structure which is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses. Each element is known as a node. Let’s understand the LinkedList with the following example:', 'D. Stack: Stack class models and implements the Stack data structure. The class is based on the basic principle of last-in-first-out. In addition to the basic push and pop operations, the class provides three more functions of empty, search and peek. The class can also be referred to as the subclass of Vector. Let’s understand the stack with an example:', 'Note: Stack is a subclass of Vector and a legacy class. It is thread-safe which might be overhead in an environment where thread safety is not needed. An alternate to Stack is to use ArrayDequeue which is not thread-safe and has faster array implementation.', 'ArrayDeque: ArrayDeque class which is implemented in the collection framework provides us with a way to apply resizable-array. This is a special kind of array that grows and allows users to add or remove an element from both sides of the queue. Array deques have no capacity restrictions and they grow as necessary to support usage. Let’s understand ArrayDeque with an example:\xa0', 'A. HashSet: The HashSet class is an inherent implementation of the hash table data structure. The objects that we insert into the HashSet do not guarantee to be inserted in the same order. The objects are inserted based on their hashcode. This class also allows the insertion of NULL elements. Let’s understand HashSet with an example:', 'B. LinkedHashSet: A LinkedHashSet is very similar to a HashSet. The difference is that this uses a doubly linked list to store the data and retains the ordering of the elements. Let’s understand the LinkedHashSet with an example:\xa0']","['Before the Collection Framework(or before JDK 1.2) was introduced, the standard methods for grouping Java objects (or collections) were Arrays or Vectors, or Hashtables. All of these collections had no common interface. Therefore, though the main aim of all the collections is the same, the implementation of all these collections was defined independently and had no correlation among them. And also, it is very difficult for the users to remember all the different methods, syntax, and constructors present in every collection class.\xa0', 'As we can observe, none of these collections(Array, Vector, or Hashtable) implements a standard member access interface, it was very difficult for programmers to write algorithms that can work for all kinds of Collections. Another drawback is that most of the ‘Vector’ methods are final, meaning we cannot extend the ’Vector’ class to implement a similar kind of Collection. Therefore, Java developers decided to come up with a common interface to deal with the above-mentioned problems and introduced the Collection Framework in JDK 1.2 post which both, legacy Vectors and Hashtables were modified to conform to the Collection Framework.\xa0', 'The utility package, (java.util) contains all the classes and interfaces that are required by the collection framework. The collection framework contains an interface named an iterable interface which provides the iterator to iterate through all the collections. This interface is extended by the main collection interface which acts as a root for the collection framework. All the collections extend this collection interface thereby extending the properties of the iterator and the methods of this interface. The following figure illustrates the hierarchy of the collection framework.\xa0', '1. Iterable Interface: This is the root interface for the entire collection framework. The collection interface extends the iterable interface. Therefore, inherently, all the interfaces and classes implement this interface. The main functionality of this interface is to provide an iterator for the collections. Therefore, this interface contains only one abstract method which is the iterator. It returns the\xa0\xa0', '2. Collection Interface: This interface extends the iterable interface and is implemented by all the classes in the collection framework. This interface contains all the basic methods which every collection has like adding the data into the collection, removing the data, clearing the data, etc. All these methods are implemented in this interface because these methods are implemented by all the classes irrespective of their style of implementation. And also, having these methods in this interface ensures that the names of the methods are universal for all the collections. Therefore, in short, we can say that this interface builds a foundation on which the collection classes are implemented.', '3. List Interface: This is a child interface of the collection interface. This interface is dedicated to the data of the list type in which we can store all the ordered collection of the objects. This also allows duplicate data to be present in it. This list interface is implemented by various classes like ArrayList, Vector, Stack, etc. Since all the subclasses implement the list, we can instantiate a list object with any of these classes. For example,\xa0\xa0', 'A. ArrayList: ArrayList provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. The size of an ArrayList is increased automatically if the collection grows or shrinks if the objects are removed from the collection. Java ArrayList allows us to randomly access the list. ArrayList can not be used for primitive types, like int, char, etc. We will need a wrapper class for such cases. Let’s understand the ArrayList with the following example:', 'C. Vector: A vector provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. This is identical to ArrayList in terms of implementation. However, the primary difference between a vector and an ArrayList is that a Vector is synchronized and an ArrayList is non-synchronized. Let’s understand the Vector with an example:', '4. Queue Interface: As the name suggests, a queue interface maintains the FIFO(First In First Out) order similar to a real-world queue line. This interface is dedicated to storing all the elements where the order of the elements matter. For example, whenever we try to book a ticket, the tickets are sold on a first come first serve basis. Therefore, the person whose request arrives first into the queue gets the ticket. There are various classes like PriorityQueue, ArrayDeque, etc. Since all these subclasses implement the queue, we can instantiate a queue object with any of these classes. For example,\xa0\xa0', 'The most frequently used implementation of the queue interface is the PriorityQueue.\xa0\xa0Priority Queue: A PriorityQueue is used when the objects are supposed to be processed based on the priority. It is known that a queue follows the First-In-First-Out algorithm, but sometimes the elements of the queue are needed to be processed according to the priority and this class is used in these cases. The PriorityQueue is based on the priority heap. The elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. Let’s understand the priority queue with an example:', '5. Deque Interface: This is a very slight variation of the queue data structure. Deque, also known as a double-ended queue, is a data structure where we can add and remove the elements from both ends of the queue. This interface extends the queue interface. The class which implements this interface is ArrayDeque. Since ArrayDeque class implements the Deque interface, we can instantiate a deque object with this class. For example,\xa0\xa0', '6. Set Interface: A set is an unordered collection of objects in which duplicate values cannot be stored. This collection is used when we wish to avoid the duplication of the objects and wish to store only the unique objects. This set interface is implemented by various classes like HashSet, TreeSet, LinkedHashSet, etc. Since all the subclasses implement the set, we can instantiate a set object with any of these classes. For example,', '7. Sorted Set Interface: This interface is very similar to the set interface. The only difference is that this interface has extra methods that maintain the ordering of the elements. The sorted set interface extends the set interface and is used to handle the data which needs to be sorted. The class which implements this interface is TreeSet. Since this class implements the SortedSet, we can instantiate a SortedSet object with this class. For example,', 'The class which implements the sorted set interface is TreeSet.\xa0\xa0TreeSet: The TreeSet class uses a Tree for storage. The ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is provided. This must be consistent with equals if it is to correctly implement the Set interface. It can also be ordered by a Comparator provided at set creation time, depending on which constructor is used. Let’s understand TreeSet with an example:', '8. Map Interface: A map is a data structure that supports the key-value pair mapping for the data. This interface doesn’t support duplicate keys because the same key cannot have multiple mappings. A map is useful if there is data and we wish to perform operations on the basis of the key. This map interface is implemented by various classes like HashMap, TreeMap, etc. Since all the subclasses implement the map, we can instantiate a map object with any of these classes. For example,\xa0', 'The frequently used implementation of a Map interface is a HashMap.\xa0\xa0HashMap: HashMap provides the basic implementation of the Map interface of Java. It stores the data in (Key, Value) pairs. To access a value in a HashMap, we must know its key. HashMap uses a technique called Hashing. Hashing is a technique of converting a large String to a small String that represents the same String so that the indexing and search operations are faster. HashSet also uses HashMap internally. Let’s understand the HashMap with an example:']","['// Java program to demonstrate// why collection framework was neededimport java.io.*;import java.util.*;  class CollectionDemo {      public static void main(String[] args)    {        // Creating instances of the array,        // vector and hashtable        int arr[] = new int[] { 1, 2, 3, 4 };        Vector<Integer> v = new Vector();        Hashtable<Integer, String> h = new Hashtable();          // Adding the elements into the        // vector        v.addElement(1);        v.addElement(2);          // Adding the element into the        // hashtable        h.put(1, ""geeks"");        h.put(2, ""4geeks"");          // Array instance creation requires [],        // while Vector and hastable require ()        // Vector element insertion requires addElement(),        // but hashtable element insertion requires put()          // Accessing the first element of the        // array, vector and hashtable        System.out.println(arr[0]);        System.out.println(v.elementAt(0));        System.out.println(h.get(1));          // Array elements are accessed using [],        // vector elements using elementAt()        // and hashtable elements using get()    }}', '// Java program to demonstrate the// working of ArrayListimport java.io.*;import java.util.*;  class GFG {          // Main Method    public static void main(String[] args)    {          // Declaring the ArrayList with        // initial size n        ArrayList<Integer> al = new ArrayList<Integer>();          // Appending new elements at        // the end of the list        for (int i = 1; i <= 5; i++)            al.add(i);          // Printing elements        System.out.println(al);          // Remove element at index 3        al.remove(3);          // Displaying the ArrayList        // after deletion        System.out.println(al);          // Printing elements one by one        for (int i = 0; i < al.size(); i++)            System.out.print(al.get(i) + "" "");    }}', '// Java program to demonstrate the// working of LinkedListimport java.io.*;import java.util.*;  class GFG {          // Main Method    public static void main(String[] args)    {          // Declaring the LinkedList        LinkedList<Integer> ll = new LinkedList<Integer>();          // Appending new elements at        // the end of the list        for (int i = 1; i <= 5; i++)            ll.add(i);          // Printing elements        System.out.println(ll);          // Remove element at index 3        ll.remove(3);          // Displaying the List        // after deletion        System.out.println(ll);          // Printing elements one by one        for (int i = 0; i < ll.size(); i++)            System.out.print(ll.get(i) + "" "");    }}', '// Java program to demonstrate the// working of Vectorimport java.io.*;import java.util.*;  class GFG {          // Main Method    public static void main(String[] args)    {          // Declaring the Vector        Vector<Integer> v = new Vector<Integer>();          // Appending new elements at        // the end of the list        for (int i = 1; i <= 5; i++)            v.add(i);          // Printing elements        System.out.println(v);          // Remove element at index 3        v.remove(3);          // Displaying the Vector        // after deletion        System.out.println(v);          // Printing elements one by one        for (int i = 0; i < v.size(); i++)            System.out.print(v.get(i) + "" "");    }}', '// Java program to demonstrate the// working of a stackimport java.util.*;public class GFG {          // Main Method    public static void main(String args[])    {        Stack<String> stack = new Stack<String>();        stack.push(""Geeks"");        stack.push(""For"");        stack.push(""Geeks"");        stack.push(""Geeks"");          // Iterator for the stack        Iterator<String> itr = stack.iterator();          // Printing the stack        while (itr.hasNext()) {            System.out.print(itr.next() + "" "");        }          System.out.println();          stack.pop();          // Iterator for the stack        itr = stack.iterator();          // Printing the stack        while (itr.hasNext()) {            System.out.print(itr.next() + "" "");        }    }}', '// Java program to demonstrate the working of// priority queue in Javaimport java.util.*;  class GfG {          // Main Method    public static void main(String args[])    {        // Creating empty priority queue        PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();          // Adding items to the pQueue using add()        pQueue.add(10);        pQueue.add(20);        pQueue.add(15);          // Printing the top element of PriorityQueue        System.out.println(pQueue.peek());          // Printing the top element and removing it        // from the PriorityQueue container        System.out.println(pQueue.poll());          // Printing the top element again        System.out.println(pQueue.peek());    }}', '// Java program to demonstrate the// ArrayDeque class in Java  import java.util.*;public class ArrayDequeDemo {    public static void main(String[] args)    {        // Initializing an deque        ArrayDeque<Integer> de_que = new ArrayDeque<Integer>(10);          // add() method to insert        de_que.add(10);        de_que.add(20);        de_que.add(30);        de_que.add(40);        de_que.add(50);          System.out.println(de_que);          // clear() method        de_que.clear();          // addFirst() method to insert the        // elements at the head        de_que.addFirst(564);        de_que.addFirst(291);          // addLast() method to insert the        // elements at the tail        de_que.addLast(24);        de_que.addLast(14);          System.out.println(de_que);    }}', '// Java program to demonstrate the// working of a HashSetimport java.util.*;  public class HashSetDemo {          // Main Method    public static void main(String args[])    {        // Creating HashSet and        // adding elements        HashSet<String> hs = new HashSet<String>();          hs.add(""Geeks"");        hs.add(""For"");        hs.add(""Geeks"");        hs.add(""Is"");        hs.add(""Very helpful"");          // Traversing elements        Iterator<String> itr = hs.iterator();        while (itr.hasNext()) {            System.out.println(itr.next());        }    }}', '// Java program to demonstrate the// working of a LinkedHashSetimport java.util.*;  public class LinkedHashSetDemo {          // Main Method    public static void main(String args[])    {        // Creating LinkedHashSet and        // adding elements        LinkedHashSet<String> lhs = new LinkedHashSet<String>();          lhs.add(""Geeks"");        lhs.add(""For"");        lhs.add(""Geeks"");        lhs.add(""Is"");        lhs.add(""Very helpful"");          // Traversing elements        Iterator<String> itr = lhs.iterator();        while (itr.hasNext()) {            System.out.println(itr.next());        }    }}', '// Java program to demonstrate the// working of a TreeSetimport java.util.*;  public class TreeSetDemo {          // Main Method    public static void main(String args[])    {        // Creating TreeSet and        // adding elements        TreeSet<String> ts = new TreeSet<String>();          ts.add(""Geeks"");        ts.add(""For"");        ts.add(""Geeks"");        ts.add(""Is"");        ts.add(""Very helpful"");          // Traversing elements        Iterator<String> itr = ts.iterator();        while (itr.hasNext()) {            System.out.println(itr.next());        }    }}', '// Java program to demonstrate the// working of a HashMapimport java.util.*;  public class HashMapDemo {          // Main Method    public static void main(String args[])    {        // Creating HashMap and        // adding elements        HashMap<Integer, String> hm = new HashMap<Integer, String>();          hm.put(1, ""Geeks"");        hm.put(2, ""For"");        hm.put(3, ""Geeks"");          // Finding the value for a key        System.out.println(""Value for 1 is "" + hm.get(1));          // Traversing through the HashMap        for (Map.Entry<Integer, String> e : hm.entrySet())            System.out.println(e.getKey() + "" "" + e.getValue());    }}']","['1\n1\ngeeks', '[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5', '[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5', '[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5', 'Geeks For Geeks Geeks \nGeeks For Geeks', '10\n10\n15', '[10, 20, 30, 40, 50]\n[291, 564, 24, 14]', 'Very helpful\nGeeks\nFor\nIs', 'Geeks\nFor\nIs\nVery helpful', 'For\nGeeks\nIs\nVery helpful', 'Value for 1 is Geeks\n1 Geeks\n2 For\n3 Geeks']","['add(Object)|||This method is used to add an object to the collection.&&&addAll(Collection c)|||This method adds all the elements in the given collection to this collection.&&&clear()|||This method removes all of the elements from this collection.&&&contains(Object o)|||This method returns true if the collection contains the specified element.&&&containsAll(Collection c)|||This method returns true if the collection contains all of the elements in the given collection.&&&equals(Object o)|||This method compares the specified object with this collection for equality.&&&hashCode()|||This method is used to return the hash code value for this collection.&&&isEmpty()|||This method returns true if this collection contains no elements.&&&iterator()|||This method returns an iterator over the elements in this collection.&&&max()\xa0\xa0|||This method is used to return the maximum value present in the collection.&&&parallelStream()|||This method returns a parallel Stream with this collection as its source.&&&remove(Object o)|||This method is used to remove the given object from the collection. If there are duplicate values, then this method removes the first occurrence of the object.&&&removeAll(Collection c)|||This method is used to remove all the objects mentioned in the given collection from the collection.&&&removeIf(Predicate filter)|||This method is used to remove all the elements of this collection that satisfy the given predicate.&&&retainAll(Collection c)|||This method is used to retain only the elements in this collection that are contained in the specified collection.&&&size()|||This method is used to return the number of elements in the collection.&&&spliterator()|||This method is used to create a Spliterator over the elements in this collection.&&&stream()|||This method is used to return a sequential Stream with this collection as its source.&&&toArray()|||This method is used to return an array containing all of the elements in this collection.']","['Class: A class is a user-defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type.|||Interface: Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, no body). Interfaces specify what a class must do and not how. It is the blueprint of the class.&&&List InterfaceAbstract List ClassAbstract Sequential List ClassArray ListVector ClassStack ClassLinkedList Class|||Abstract List Class|||Abstract Sequential List Class|||Array List|||Vector Class|||Stack Class|||LinkedList Class|||Queue InterfaceBlocking Queue InterfaceAbstractQueue ClassPriorityQueue ClassPriorityBlockingQueue ClassConcurrentLinkedQueue ClassArrayBlockingQueue ClassDelayQueue ClassLinkedBlockingQueue ClassLinkedTransferQueue|||Blocking Queue Interface|||AbstractQueue Class|||PriorityQueue Class|||PriorityBlockingQueue Class|||ConcurrentLinkedQueue Class|||ArrayBlockingQueue Class|||DelayQueue Class|||LinkedBlockingQueue Class|||LinkedTransferQueue|||Deque InterfaceBlockingDeque InterfaceConcurrentLinkedDeque ClassArrayDeque Class|||BlockingDeque Interface|||ConcurrentLinkedDeque Class|||ArrayDeque Class|||Set InterfaceAbstract Set ClassCopyOnWriteArraySet ClassEnumSet ClassConcurrentHashMap ClassHashSet ClassLinkedHashSet Class|||Abstract Set Class|||CopyOnWriteArraySet Class|||EnumSet Class|||ConcurrentHashMap Class|||HashSet Class|||LinkedHashSet Class&&&Abstract List Class|||Abstract Sequential List Class|||Array List|||Vector Class|||Stack Class|||LinkedList Class&&&Blocking Queue Interface|||AbstractQueue Class|||PriorityQueue Class|||PriorityBlockingQueue Class|||ConcurrentLinkedQueue Class|||ArrayBlockingQueue Class|||DelayQueue Class|||LinkedBlockingQueue Class|||LinkedTransferQueue&&&BlockingDeque Interface|||ConcurrentLinkedDeque Class|||ArrayDeque Class&&&Abstract Set Class|||CopyOnWriteArraySet Class|||EnumSet Class|||ConcurrentHashMap Class|||HashSet Class|||LinkedHashSet Class&&&SortedSet InterfaceNavigableSet InterfaceTreeSetConcurrentSkipListSet Class|||NavigableSet Interface|||TreeSet|||ConcurrentSkipListSet Class|||Map InterfaceSortedMap InterfaceNavigableMap InterfaceConcurrentMap InterfaceTreeMap ClassAbstractMap ClassConcurrentHashMap ClassEnumMap ClassHashMap ClassIdentityHashMap ClassLinkedHashMap ClassHashTable ClassProperties Class|||SortedMap Interface|||NavigableMap Interface|||ConcurrentMap Interface|||TreeMap Class|||AbstractMap Class|||ConcurrentHashMap Class|||EnumMap Class|||HashMap Class|||IdentityHashMap Class|||LinkedHashMap Class|||HashTable Class|||Properties Class|||Other Important ConceptsHow to convert HashMap to ArrayListRandomly select items from a ListHow to add all items from a collection to an ArrayListConversion of Java Maps to ListArray to ArrayList ConversionArrayList to Array ConversionDifferences between Array and ArrayList|||How to convert HashMap to ArrayList|||Randomly select items from a List|||How to add all items from a collection to an ArrayList|||Conversion of Java Maps to List|||Array to ArrayList Conversion|||ArrayList to Array Conversion|||Differences between Array and ArrayList&&&NavigableSet Interface|||TreeSet|||ConcurrentSkipListSet Class&&&SortedMap Interface|||NavigableMap Interface|||ConcurrentMap Interface|||TreeMap Class|||AbstractMap Class|||ConcurrentHashMap Class|||EnumMap Class|||HashMap Class|||IdentityHashMap Class|||LinkedHashMap Class|||HashTable Class|||Properties Class&&&How to convert HashMap to ArrayList|||Randomly select items from a List|||How to add all items from a collection to an ArrayList|||Conversion of Java Maps to List|||Array to ArrayList Conversion|||ArrayList to Array Conversion|||Differences between Array and ArrayList&&&&&&Consistent API: The API has a basic set of interfaces like Collection, Set, List, or Map, all the classes (ArrayList, LinkedList, Vector, etc) that implement these interfaces have some common set of methods.|||Reduces programming effort: A programmer doesn’t have to worry about the design of the Collection but rather he can focus on its best use in his program. Therefore, the basic concept of Object-oriented programming (i.e.) abstraction has been successfully implemented.|||Increases program speed and quality: Increases performance by providing high-performance implementations of useful data structures and algorithms because in this case, the programmer need not think of the best implementation of a specific data structure. He can simply use the best implementation to drastically boost the performance of his algorithm/program.&&&']"
61,['Collections Class in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/static-methods-vs-instance-methods-java/', 'https://www.geeksforgeeks.org/object-class-in-java/', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-addall-method-in-java-with-examples/&sa=U&ved=2ahUKEwjKuPOa-NnsAhWF6XMBHV52Bxg4ChAWMAV6BAgGEAI&usg=AOvVaw0xyjH8UBNWNsFmLyTyUlZk', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-aslifoqueue-method-in-java-with-examples/&sa=U&ved=2ahUKEwjR2pzb-NnsAhXB63MBHfsmCzQ4HhAWMAR6BAgEEAI&usg=AOvVaw0cqoFANseci3YfUQzT91qJ', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-binarysearch-java-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjAJegQIBRAC&usg=AOvVaw3Z6NwOyP0de-c-hRasRUsf', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-binarysearch-java-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjAJegQIBRAC&usg=AOvVaw3Z6NwOyP0de-c-hRasRUsf', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-checkedcollection-method-in-java-with-examples/&sa=U&ved=2ahUKEwjR2pzb-NnsAhXB63MBHfsmCzQ4HhAWMAJ6BAgJEAI&usg=AOvVaw1gjbCCS3zLq1m9WpQf0BAH', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-copy-method-in-java-with-examples/&sa=U&ved=2ahUKEwjJkK-8-NnsAhWe7HMBHWaOAiA4FBAWMAF6BAgHEAI&usg=AOvVaw0dFOeP7RLXpc_ORg_6Wj2U', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/java-util-collections-disjoint-method-java-examples/&sa=U&ved=2ahUKEwjKuPOa-NnsAhWF6XMBHV52Bxg4ChAWMAF6BAgIEAI&usg=AOvVaw3c8uSUuGg43wQFmZCF_Bj4', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-enumeration-method-in-java-with-examples/&sa=U&ved=2ahUKEwjKuPOa-NnsAhWF6XMBHV52Bxg4ChAWMAl6BAgAEAI&usg=AOvVaw2zQdzpk5s0qYfnqwiTKmSC', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-fill-method-in-java-with-examples/&sa=U&ved=2ahUKEwi2_5_3-NnsAhWCheYKHZBvD4E4MhAWMAZ6BAgGEAI&usg=AOvVaw1xqIqDpotyXSl0SNNWLwsG', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/java-util-collections-frequency-java/&sa=U&ved=2ahUKEwjJkK-8-NnsAhWe7HMBHWaOAiA4FBAWMAR6BAgFEAI&usg=AOvVaw0Myrb9MDi7AANHD6aNLTCl', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-list-method-in-java-with-examples/&sa=U&ved=2ahUKEwjKuPOa-NnsAhWF6XMBHV52Bxg4ChAWMAB6BAgDEAI&usg=AOvVaw0y-jLp0AaKB86tfyJIDziW', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-max-method-in-java-with-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjAEegQIAxAC&usg=AOvVaw2qA6HgjzzeCI8AHdWdeBBA', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-max-method-in-java-with-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjAEegQIAxAC&usg=AOvVaw2qA6HgjzzeCI8AHdWdeBBA', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-min-method-in-java-with-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjAIegQIABAC&usg=AOvVaw1-7_OhEytkSHKGWgUrm2bv', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-min-method-in-java-with-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjAIegQIABAC&usg=AOvVaw1-7_OhEytkSHKGWgUrm2bv', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-reverse-java-examples/&sa=U&ved=2ahUKEwjJkK-8-NnsAhWe7HMBHWaOAiA4FBAWMAJ6BAgJEAI&usg=AOvVaw3rE6jlGifup0vkoP2GQX9W', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-reverseorder-java-examples/&sa=U&ved=2ahUKEwjJkK-8-NnsAhWe7HMBHWaOAiA4FBAWMAB6BAgGEAE&usg=AOvVaw3WhEucy8Tqt4XilMMbuJX-', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/java-util-collections-rotate-method-java-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjAFegQIBBAC&usg=AOvVaw0Xe95qWfyXw8Yex5VrDlmu', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-shuffle-java-examples/&sa=U&ved=2ahUKEwjJkK-8-NnsAhWe7HMBHWaOAiA4FBAWMAZ6BAgDEAI&usg=AOvVaw1nrYJRpZjAKQrorR3tjl_D', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-shuffle-java-examples/&sa=U&ved=2ahUKEwjJkK-8-NnsAhWe7HMBHWaOAiA4FBAWMAZ6BAgDEAI&usg=AOvVaw1nrYJRpZjAKQrorR3tjl_D', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-singleton-method-java/&sa=U&ved=2ahUKEwjR2pzb-NnsAhXB63MBHfsmCzQ4HhAWMAZ6BAgFEAI&usg=AOvVaw3_CPxwqk8yCljhuDtMnNRh', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-singleton-method-java/&sa=U&ved=2ahUKEwjR2pzb-NnsAhXB63MBHfsmCzQ4HhAWMAZ6BAgFEAI&usg=AOvVaw3_CPxwqk8yCljhuDtMnNRh', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-sort-java-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjADegQIBxAC&usg=AOvVaw3LK6ysEznNr0ARFYCFDvYh', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-swap-method-in-java-with-examples/&sa=U&ved=2ahUKEwi6uP_199nsAhXj73MBHZbDDPMQFjAGegQIBhAC&usg=AOvVaw0tePjZhO5Nvpl_md2ywFUR', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-synchronizedcollection-method-in-java-with-examples/&sa=U&ved=2ahUKEwjJkK-8-NnsAhWe7HMBHWaOAiA4FBAWMAh6BAgEEAI&usg=AOvVaw0Fv_A894e10Pn9caVxEgW0', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-synchronizedlist-method-in-java-with-examples/&sa=U&ved=2ahUKEwjR2pzb-NnsAhXB63MBHfsmCzQ4HhAWMAN6BAgIEAI&usg=AOvVaw0jrt_wb0z28gyEz3mYhJQe', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-unmodifiablecollection-method-in-java-with-examples/&sa=U&ved=2ahUKEwjKuPOa-NnsAhWF6XMBHV52Bxg4ChAWMAN6BAgHEAI&usg=AOvVaw0unP0-Y8nc8QwwxZOSTy-6', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-unmodifiablelist-method-in-java-with-examples/&sa=U&ved=2ahUKEwjR2pzb-NnsAhXB63MBHfsmCzQ4HhAWMAF6BAgHEAI&usg=AOvVaw0_6E0BcWaD1Io5J6s0_27V', 'https://www.google.com/url?client=internal-element-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/collections-unmodifiableset-method-in-java-with-examples/&sa=U&ved=2ahUKEwi2_5_3-NnsAhWCheYKHZBvD4E4MhAWMAl6BAgAEAI&usg=AOvVaw3MiwTquD0hZgPYmIf9vWdV', 'https://www.geeksforgeeks.org/collections-addall-method-in-java-with-examples/#:~:text=The%20addAll()%20method%20of,individually%20or%20as%20an%20array.', 'https://www.geeksforgeeks.org/collections-sort-java-examples/', 'https://www.geeksforgeeks.org/list-interface-java-examples/', 'https://www.geeksforgeeks.org/collections-reverseorder-java-examples/', 'https://www.geeksforgeeks.org/collections-binarysearch-java-examples/', 'https://www.geeksforgeeks.org/collections-copy-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/java-util-collections-disjoint-method-java-examples/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Syntax: Declaration', 'Remember: Object is the parent class of all the classes.', 'Collections class fields', 'Description', 'Operation 1: Adding elements to the Collections class object\xa0', '\xa0Operation 2: Sorting a Collection', 'Operation 3: Searching in a Collection', 'Operation 4: Copying Elements', 'Operation 5: Disjoint Collection']","['Collections class is a member of the Java Collections Framework. The java.util.Collections package is the package that contains the Collections class. Collections class is basically used with the static methods that operate on the collections or return the collection. All the methods of this class throw the NullPointerException if the collection or object passed to the methods is null. \xa0', 'The collection class basically contains 3 fields as listed below which can be used to return immutable entities.', 'Now let us do discuss methods that are present inside this class so that we can implement these inbuilt functionalities later on in our program. Below are the methods been listed below in a tabular format as shown below as follows:', 'The addAll() method of java.util.Collections class is used to add all the specified elements to the specified collection. Elements to be added may be specified individually or as an array.', 'java.util.Collections.sort() is used to sort the elements present in the specified list of Collection in ascending order. java.util.Collections.reverseOrder() is used to sort in the descending order.\xa0', 'The copy() method of java.util.Collections class is used to copy all the elements from one list into another. After the operation, the index of each copied element in the destination list will be identical to its index in the source list. The destination list must be at least as long as the source list. If it is longer, the remaining elements in the destination list are unaffected.', 'java.util.Collections.disjoint() is used to check whether two specified collections are disjoint or not. More formally, two collections are disjoint if they have no elements in common. It returns true if the two collections do not have any element in common.\xa0']","['Now, we are done with listing all the methods so by ar we have a faint hint with us in perceiving how important are these methods when thinking about a global programming perspective. The important and frequently widely used methods while writing optimized code as you will see these methods somehow in nearly every java optimized code because of havoc usage of Collections class in java. So here more likely in any class we will not just be implementing the method but will also be discussing operations that can be performed so that one can have conceptual clarity and strong command while implementing the same. The operations that we will be discussing are as follows:', 'java.util.Collections.binarySearch() method returns the position of an object in a sorted list. To use this method, the list should be sorted in ascending order, otherwise, the result returned from the method will be wrong. If the element exists in the list, the method will return the position of the element in the sorted list, otherwise, the result returned by the method would be the – (insertion point where the element should have been present if exist)-1).\xa0']","['// Java Program to Demonstrate Adding Elements// Using addAll() method // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.List; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating a list        // Declaring object of string type        List<String> items = new ArrayList<>();         // Adding elements (items) to the list        items.add(""Shoes"");        items.add(""Toys"");         // Add one or more elements        Collections.addAll(items, ""Fruits"", ""Bat"", ""Ball"");         // Printing the list contents        for (int i = 0; i < items.size(); i++) {            System.out.print(items.get(i) + "" "");        }    }}', '// Java program to demonstrate sorting// a Collections using sort() method import java.util.ArrayList;import java.util.Collections;import java.util.List; // Main Class// SortingCollectionExampleclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating a list        // Declaring object of string type        List<String> items = new ArrayList<>();         // Adding elements to the list        // using add() method        items.add(""Shoes"");        items.add(""Toys"");         // Adding one or more elements using addAll()        Collections.addAll(items, ""Fruits"", ""Bat"", ""Mouse"");         // Sorting according to default ordering        // using sort() method        Collections.sort(items);         // Printing the elements        for (int i = 0; i < items.size(); i++) {            System.out.print(items.get(i) + "" "");        }         System.out.println();         // Sorting according to reverse ordering        Collections.sort(items, Collections.reverseOrder());         // Printing the reverse order        for (int i = 0; i < items.size(); i++) {            System.out.print(items.get(i) + "" "");        }    }}', '// Java Program to Demonstrate Binary Search// Using Collections.binarySearch() // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.List; // Main class// BinarySearchOnACollectionpublic class GFG {     // Main driver method    public static void main(String[] args)    {        // Creating a List        // Declaring object of string type        List<String> items = new ArrayList<>();         // Adding elements to object        // using add() method        items.add(""Shoes"");        items.add(""Toys"");        items.add(""Horse"");        items.add(""Ball"");        items.add(""Grapes"");         // Sort the List        Collections.sort(items);         // BinarySearch on the List        System.out.println(            ""The index of Horse is ""            + Collections.binarySearch(items, ""Horse""));         // BinarySearch on the List        System.out.println(            ""The index of Dog is ""            + Collections.binarySearch(items, ""Dog""));    }}', '// Java Program to Demonstrate Copying Elements// Using copy() method // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.List; // Main class// CopyOneCollectionToAnotherclass GFG {     // Main driver method    public static void main(String[] args)    {        // Create destination list        List<String> destination_List = new ArrayList<>();         // Add elements        destination_List.add(""Shoes"");        destination_List.add(""Toys"");        destination_List.add(""Horse"");        destination_List.add(""Tiger"");         // Print the elements        System.out.println(            ""The Original Destination list is "");         for (int i = 0; i < destination_List.size(); i++) {            System.out.print(destination_List.get(i) + "" "");        }        System.out.println();         // Create source list        List<String> source_List = new ArrayList<>();         // Add elements        source_List.add(""Bat"");        source_List.add(""Frog"");        source_List.add(""Lion"");         // Copy the elements from source to destination        Collections.copy(destination_List, source_List);         // Printing the modified list        System.out.println(            ""The Destination List After copying is "");         for (int i = 0; i < destination_List.size(); i++) {            System.out.print(destination_List.get(i) + "" "");        }    }}', '// Java Program to Illustrate Working of Disjoint Function // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.List; // Main class// DisjointCollectionsExampleclass GFG {     // Main driver method    public static void main(String[] args)    {        // Create list1        List<String> list1 = new ArrayList<>();         // Add elements to list1        list1.add(""Shoes"");        list1.add(""Toys"");        list1.add(""Horse"");        list1.add(""Tiger"");         // Create list2        List<String> list2 = new ArrayList<>();         // Add elements to list2        list2.add(""Bat"");        list2.add(""Frog"");        list2.add(""Lion"");         // Check if disjoint or not        System.out.println(            Collections.disjoint(list1, list2));    }}']","['public class Collections\nextends Object', 'Shoes Toys Fruits Bat Ball', 'Bat Fruits Mouse Shoes Toys \nToys Shoes Mouse Fruits Bat', 'The index of Horse is 2\nThe index of Dog is -2', 'The Original Destination list is \nShoes Toys Horse Tiger \nThe Destination List After copying is \nBat Frog Lion Tiger', 'true']","['Methods|||Description&&&addAll(Collection<? extends E> c)|||It is used to insert the specified collection elements in the invoking collection.&&&asLifoQueue\u200b(Deque<T> deque)|||This method returns a view of a Deque as a Last-in-first-out (Lifo) Queue.&&&binarySearch(List<? extends Comparable> list, T key)|||This method searches the key using binary search in the specified list.\xa0&&&binarySearch\u200b(List<? extends T> list, T key, Comparator<? super T> c)|||This method searches the specified list for the specified object using the binary search algorithm.&&&checkedCollection\u200b(Collection<E> c, Class<E> type)|||This method returns a dynamically typesafe view of the specified collection.&&&checkedList\u200b(List<E> list, Class<E> type)|||This method returns a dynamically typesafe view of the specified list.&&&checkedMap\u200b(Map<K,\u200bV> m, Class<K> keyType, Class<V> valueType)|||This method returns a dynamically typesafe view of the specified map.&&&checkedNavigableMap\u200b(NavigableMap<K,\u200bV> m, Class<K> keyType, Class<V> valueType)|||This method returns a dynamically typesafe view of the specified navigable map.&&&checkedNavigableSet\u200b(NavigableSet<E> s, Class<E> type)|||This method returns a dynamically typesafe view of the specified navigable set.&&&checkedQueue\u200b(Queue<E> queue, Class<E> type)|||This method returns a dynamically typesafe view of the specified queue.&&&\xa0checkedSet\u200b(Set<E> s, Class<E> type)|||This method returns a dynamically typesafe view of the specified set.&&&checkedSortedMap\u200b(SortedMap<K,\u200bV> m, Class<K> keyType, Class<V> valueType)|||This method returns a dynamically typesafe view of the specified sorted map.&&&checkedSortedSet\u200b(SortedSet<E> s, Class<E> type)|||This method returns a dynamically typesafe view of the specified sorted set.&&&copy\u200b(List<? super T> dest, List<? extends T> src)|||This method copies all of the elements from one list into another.&&&disjoint\u200b(Collection<?> c1, Collection<?> c2)|||This method returns true if the two specified collections have no elements in common.&&&emptyEnumeration()|||This method returns an enumeration that has no elements.&&&emptyIterator()|||This method returns an iterator that has no elements.&&&\xa0emptyList()|||This method returns an empty list (immutable).&&&emptyListIterator()|||This method returns a list iterator that has no elements.&&&emptyMap()|||This method returns an empty map (immutable).&&&emptyNavigableMap()|||This method returns an empty navigable map (immutable).&&&emptyNavigableSet()|||This method returns an empty navigable set (immutable).&&&emptySet()|||This method returns an empty set (immutable).&&&emptySortedMap()|||This method returns an empty sorted map (immutable).&&&emptySortedSet()|||This method returns an empty sorted set (immutable).&&&enumeration\u200b(Collection<T> c)|||This method returns an enumeration over the specified collection.&&&fill\u200b(List<? super T> list, T obj)|||This method replaces all of the elements of the specified list with the specified element.&&&frequency\u200b(Collection<?> c, Object o)|||This method returns the number of elements in the specified collection equal to the specified object.&&&indexOfSubList\u200b(List<?> source, List<?> target)|||This method returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence.&&&lastIndexOfSubList\u200b(List<?> source, List<?> target)|||This method returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence.&&&list\u200b(Enumeration<T> e)|||This method returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration.&&&max\u200b(Collection<? extends T> coll)|||This method returns the maximum element of the given collection, according to the natural ordering of its elements.&&&max\u200b(Collection<? extends T> coll, Comparator<? super T> comp)|||This method returns the maximum element of the given collection, according to the order induced by the specified comparator.&&&min\u200b(Collection<? extends T> coll)|||This method returns the minimum element of the given collection, according to the natural ordering of its elements.&&&min\u200b(Collection<? extends T> coll, Comparator<? super T> comp)|||This method returns the minimum element of the given collection, according to the order induced by the specified comparator.&&&nCopies\u200b(int n, T o)|||This method returns an immutable list consisting of n copies of the specified object.&&&newSetFromMap\u200b(Map<E,\u200bBoolean> map)|||This method returns a set backed by the specified map.&&&replaceAll\u200b(List<T> list, T oldVal, T newVal)|||This method replaces all occurrences of one specified value in a list with another.&&&reverse\u200b(List<?> list)|||This method reverses the order of the elements in the specified list&&&reverseOrder()|||This method returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface.&&&\xa0reverseOrder\u200b(Comparator<T> cmp)|||This method returns a comparator that imposes the reverse ordering of the specified comparator.&&&rotate\u200b(List<?> list, int distance)|||This method rotates the elements in the specified list by the specified distance.&&&shuffle\u200b(List<?> list)|||This method randomly permutes the specified list using a default source of randomness.&&&shuffle\u200b(List<?> list, Random rnd)|||This method randomly permute the specified list using the specified source of randomness.&&&singletonMap\u200b(K key, V value)|||This method returns an immutable map, mapping only the specified key to the specified value.&&&singleton\u200b(T o)|||This method returns an immutable set containing only the specified object.&&&singletonList\u200b(T o)|||This method returns an immutable list containing only the specified object.&&&sort\u200b(List<T> list)|||This method sorts the specified list into ascending order, according to the natural ordering of its elements.&&&sort\u200b(List<T> list, Comparator<? super T> c)|||This method sorts the specified list according to the order induced by the specified comparator.&&&swap\u200b(List<?> list, int i, int j)|||This method swaps the elements at the specified positions in the specified list.&&&synchronizedCollection\u200b(Collection<T> c)|||This method returns a synchronized (thread-safe) collection backed by the specified collection.&&&synchronizedList\u200b(List<T> list)|||This method returns a synchronized (thread-safe) list backed by the specified list.&&&synchronizedMap\u200b(Map<K,\u200bV> m)|||This method returns a synchronized (thread-safe) map backed by the specified map.&&&synchronizedNavigableMap\u200b(NavigableMap<K,\u200bV> m)|||This method returns a synchronized (thread-safe) navigable map backed by the specified navigable map.&&&synchronizedNavigableSet\u200b(NavigableSet<T> s)|||This method returns a synchronized (thread-safe) navigable set backed by the specified navigable set.&&&\xa0synchronizedSet\u200b(Set<T> s)|||This method returns a synchronized (thread-safe) set backed by the specified set.&&&synchronizedSortedMap\u200b(SortedMap<K,\u200bV> m)|||This method returns a synchronized (thread-safe) sorted map backed by the specified sorted map.&&&synchronizedSortedSet\u200b(SortedSet<T> s)|||This method returns a synchronized (thread-safe) sorted set backed by the specified sorted set.&&&unmodifiableCollection\u200b(Collection<? extends T> c)|||This method returns an unmodifiable view of the specified collection.&&&unmodifiableList\u200b(List<? extends T> list)|||This method returns an unmodifiable view of the specified list.&&&unmodifiableNavigableMap\u200b(NavigableMap<K,\u200b? extends V> m)|||This method returns an unmodifiable view of the specified navigable map.&&&unmodifiableNavigableSet\u200b(NavigableSet<T> s)|||This method returns an unmodifiable view of the specified navigable set.&&&unmodifiableSet\u200b(Set<? extends T> s)|||This method returns an unmodifiable view of the specified set.&&&unmodifiableSortedMap\u200b(SortedMap<K,\u200b? extends V> m)|||This method returns an unmodifiable view of the specified sorted map.&&&unmodifiableSortedSet\u200b(SortedSet<T> s)|||This method returns an unmodifiable view of the specified sorted set.']",['EMPTY_LIST to get an immutable empty List|||EMPTY_SET to get an immutable empty Map|||EMPTY_MAP to get an immutable empty Set&&&Adding elements to the Collections|||Sorting a Collection|||Searching in a Collection|||Copying Elements|||Disjoint Collection']
62,['Collection vs Collections in Java with Example'],['Java'],[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/c-plus-plus/', 'https://www.geeksforgeeks.org/list-interface-java-examples/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/queue-interface-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Declaration:', 'Declaration:', 'Collection vs Collections: \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0']","['Collection: Collection is a interface present in java.util.package. It is used to represent a group of individual objects as a single unit. It is similar to the container in the C++ language. The collection is considered as the root interface of the collection framework. It provides several classes and interfaces to represent a group of individual objects as a single unit.\xa0', 'The List, Set, and Queue are the main sub-interfaces of the collection interface. The map interface is also part of the java collection framework, but it doesn’t inherit the collection of the interface. The add(), remove(), clear(), size(), and contains() are the important methods of the Collection interface.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['Collections: Collections is a utility class present in java.util.package. It defines several utility methods like sorting and searching which is used to operate on collection. It has all static methods. These methods provide much-needed convenience to developers, allowing them to effectively work with Collection Framework. For example, It has a method sort() to sort the collection elements according to default sorting order, and it has a method min(), and max() to find the minimum and maximum value respectively in the collection elements.']","['// Java program to demonstrate the difference  // between Collection and Collections  import java.io.*;import java.util.*;  class GFG {        public static void main (String[] args)     {              // Creating an object of List<String>      List<String> arrlist = new ArrayList<String>();               // Adding elements to arrlist      arrlist.add(""geeks"");      arrlist.add(""for"");      arrlist.add(""geeks"");              // Printing the elements of arrlist      // before operations      System.out.println(""Elements of arrlist before the operations:"");      System.out.println(arrlist);              System.out.println(""Elements of arrlist after the operations:"");              // Adding all the specified elements      // to the specified collection      Collections.addAll(arrlist, ""web"", ""site"");              // Printing the arrlist after      // performing addAll() method      System.out.println(arrlist);              // Sorting all the elements of the        // specified collection according to       // default sorting order      Collections.sort(arrlist);                // Printing the arrlist after      // performing sort() method      System.out.println(arrlist);              }}']","['public interface Collection<E> extends Iterable<E>\n\nType Parameters: E - the type of elements returned by this iterator', 'public class Collections extends Object', 'Elements of arrlist before the operations:\n[geeks, for, geeks]\nElements of arrlist after the operations:\n[geeks, for, geeks, web, site]\n[for, geeks, geeks, site, web]']",['It is an interface.|||It is a utility class.&&&It is used to represent a group of individual objects as a single unit.\xa0|||It defines several utility methods that are used to operate on collection.&&&The Collection is an interface that contains a static method since java8. The Interface can also contain abstract and default methods.|||It contains only static methods.'],[]
63,['Java | Implementing Iterator and Iterable Interface'],[],[],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/iterators-in-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Why it is needed to implement Iterable interface?', 'How to implement Iterable interface?', 'To implement an iterable data structure, we need to:', 'We can generalize the pseudo code as follows:', 'Below program illustrates the use of Iterable interface:']","['Iterators are used in Collection framework in Java to retrieve elements one by one. For more details and introduction related to this, see this link.', 'Every class that implements Iterable interface appropriately, can be used in the enhanced For loop (for-each loop). The need to implement the Iterator interface arises while designing custom data structures.Example:', 'Note: The Iterator class can also, be implemented as an inner class of the Data Structure class since it won’t be used elsewhere.', 'Given below is a Custom Linked List which makes use of Generics. The linked list consists of Node objects which contain a Generic data value and pointer to next node. The class provides some standard ‘get’ methods like getHead() and getTail(), and the necessary Iterator() function, which has to be implemented while implementing Iterable interface.', 'Then the necessary custom class ‘ListIterator’ is created, which will implement the Iterator interface, along with it the functionalities of hasNext() and next() are also to be implemented. These two functions form the core of Iterable and Iterator interface.']",[],"['class CustomDataStructure implements Iterable<> {          // code for data structure    public Iterator<> iterator() {        return new CustomIterator<>(this);    }}class CustomIterator<> implements Iterator<> {          // constructor    CustomIterator<>(CustomDataStructure obj) {        // initialize cursor    }          // Checks if the next element exists    public boolean hasNext() {    }          // moves the cursor/iterator to next element    public T next() {    }          // Used to remove an element. Implement only if needed    public void remove() {        // Default throws UnsupportedOperationException.    }}', 'import java.util.Iterator;  // Custom Linked List class using Genericsclass List<T> implements Iterable<T> {    Node<T> head, tail;          // add new Element at tail of the linked list in O(1)    public void add(T data)    {        Node<T> node = new Node<>(data, null);        if (head == null)            tail = head = node;        else {            tail.setNext(node);            tail = node;        }    }          // return Head    public Node<T> getHead()    {        return head;    }          // return Tail    public Node<T> getTail()    {        return tail;    }          // return Iterator instance    public Iterator<T> iterator()    {        return new ListIterator<T>(this);    }}  class ListIterator<T> implements Iterator<T> {    Node<T> current;          // initialize pointer to head of the list for iteration    public ListIterator(List<T> list)    {        current = list.getHead();    }          // returns false if next element does not exist    public boolean hasNext()    {        return current != null;    }          // return current data and update pointer    public T next()    {        T data = current.getData();        current = current.getNext();        return data;    }          // implement if needed    public void remove()    {        throw new UnsupportedOperationException();    }}  // Constituent Node of Linked Listclass Node<T> {    T data;    Node<T> next;    public Node(T data, Node<T> next)    {        this.data = data;        this.next = next;    }          // Setter getter methods for Data and Next Pointer    public void setData(T data)    {        this.data = data;    }          public void setNext(Node<T> next)    {        this.next = next;    }          public T getData()    {        return data;    }          public Node<T> getNext()    {        return next;    }}  // Driver classclass Main {    public static void main(String[] args)    {        // Create Linked List        List<String> myList = new List<>();                  // Add Elements        myList.add(""abc"");        myList.add(""mno"");        myList.add(""pqr"");        myList.add(""xyz"");                  // Iterate through the list using For Each Loop        for (String string : myList)            System.out.println(string);    }}']","['for(Item item: customDataStructure) {\n    // do stuff\n}', 'While(iterator.hasNext()) { //if next element exists\n    next(); // advance the pointer\n}', 'abc\nmno\npqr\nxyz']",[],"['If the Iterator class is implemented as an inner class, we can simply use “this” keyword (e.g. cursor = CustomDataStructure.this.element) to access the desired element|||If the Iterator class is implemented as a separate class, we can pass this object of the data structure to the iterator class constructor as demonstrated in the example below.&&&&&&Implement Iterable interface along with its methods in the said Data Structure|||Create an Iterator class which implements Iterator interface and corresponding methods.&&&How next() and hasNext() work?To implement an Iterator, we need a cursor or pointer to keep track of which element we currently are on. Depending on the underlying data structure, we can progress from one element to another. This is done in the next() method which returns the current element and the cursor advances to next element.Before advancing the pointer, we check whether next element exists. i.e. we can picturize the behind-the-scenes code as follows:While(iterator.hasNext()) { //if next element exists\n    next(); // advance the pointer\n}\n|||Initializing the cursorThe cursor initialization completely depends on the data structure. For example, in a linked list we would initialize cursor to the head element. In an array list, we would initialize cursor to the 0th element.From the point of view of implementation:If the Iterator class is implemented as an inner class, we can simply use “this” keyword (e.g. cursor = CustomDataStructure.this.element) to access the desired elementIf the Iterator class is implemented as a separate class, we can pass this object of the data structure to the iterator class constructor as demonstrated in the example below.|||If the Iterator class is implemented as an inner class, we can simply use “this” keyword (e.g. cursor = CustomDataStructure.this.element) to access the desired element|||If the Iterator class is implemented as a separate class, we can pass this object of the data structure to the iterator class constructor as demonstrated in the example below.&&&']"
64,['List Interface in Java with Examples'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']","['Operations in a List interface', 'Iterating over List\xa0', 'Methods of the List Interface', 'Classes Association with a List Interface']","['https://media.geeksforgeeks.org/wp-content/uploads/20200624222851/List-and-ArrayList-in-Java.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20200624224531/List-ArrayList-in-Java-In-Depth-Study.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/generics-in-java/', 'https://www.geeksforgeeks.org/java-util-list-add-method-java/?ref=rp', 'https://www.geeksforgeeks.org/abstractlist-set-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-removeobject-obj-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/loop-java-important-points/', 'https://www.geeksforgeeks.org/list-get-method-java-examples/', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/list-addint-index-e-element-method-in-java/', 'https://www.geeksforgeeks.org/list-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-size-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-clear-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-removeint-index-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-get-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-set-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-indexof-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-lastindexof-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/comparator-interface-java/', 'https://www.geeksforgeeks.org/abstractlist-in-java-with-examples/', 'https://www.geeksforgeeks.org/copyonwritearraylist-in-java/', 'https://www.geeksforgeeks.org/abstractsequentiallist-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/java-util-vector-class-java/', 'https://www.geeksforgeeks.org/stack-class-in-java/', 'https://www.geeksforgeeks.org/stack-data-structure/', 'https://www.geeksforgeeks.org/linked-list-in-java/', 'https://www.geeksforgeeks.org/data-structures/linked-list/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Declaration: The List interface is declared as:', 'Syntax: This type of safelist can be defined as:', 'Note: Obj is the type of the object to be stored in List', 'Operation 1:\xa0 Adding elements to List class using add() method', 'Parameters: \xa0It takes 2 parameters, namely:\xa0', 'Operation 2: Updating elements', 'Operation 3: Removing Elements', 'Parameters: \xa0', 'Description', 'We will proceed in this manner.\xa0', 'Class 1: ArrayList', 'Class 2: Vector', 'Class 3: Stack', 'Class 4: LinkedList']","['The List interface provides a way to store the ordered collection. It is a child interface of Collection. It is an ordered collection of objects in which duplicate values can be stored. Since List preserves the insertion order, it allows positional access and insertion of elements.\xa0', 'Now let us perform various operations using List Interface to have a better understanding of the same. We will be discussing the following operations listed below and later on implementing via clean java codes.', 'Since List is an interface, it can be used only with a class that implements this interface. Now, let’s see how to perform a few frequently used operations on the List. \xa0', 'Now let us discuss the operations individually and implement the same in the code to grasp a better grip over it.', 'In order to add an element to the list, we can use the add() method. This method is overloaded to perform multiple operations based on different parameters.', 'After adding the elements, if we wish to change the element, it can be done using the set() method. Since List is indexed, the element which we wish to change is referenced by the index of the element. Therefore, this method takes an index and the updated element which needs to be inserted at that index.\xa0', 'In order to remove an element from a List, we can use the remove() method. This method is overloaded to perform multiple operations based on different parameters. They are:', 'Till now we are having a very small input size and we are doing operations manually for every entity. Now let us discuss various ways by which we can iterate over the List to get the working for a larger sampler set. \xa0', 'Methods: There are multiple ways to iterate through the List. The most famous ways are by using the basic for loop in combination with a get() method to get the element at a specific index and the advanced for loop.\xa0', 'Since the main concept behind the different types of the lists is the same, the list interface contains the following methods:', 'Now let us discuss the classes that implement the List Interface for which first do refer to the pictorial representation below to have a better understanding of the List interface. It is as follows:\xa0', 'AbstractList, CopyOnWriteArrayList , and the AbstractSequentialList are the classes that implement the List interface. A separate functionality is implemented in each of the mentioned classes. They are as follows:', 'Let us discuss them sequentially and implement the same to figure out the working of the classes with the List interface.\xa0', 'ArrayList class which is implemented in the collection framework provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. Let’s see how to create a list object using this class.\xa0', 'Stack is a class that is implemented in the collection framework and extends the vector class models and implements the Stack data structure. The class is based on the basic principle of last-in-first-out. In addition to the basic push and pop operations, the class provides three more functions of empty, search and peek. Let’s see how to create a list object using this class.']","['Let us elaborate on creating objects or instances in a List class. Since List is an interface, objects cannot be created of the type list. We always need a class that implements this List in order to create an object. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the List. Just like several other user-defined ‘interfaces’ implemented by user-defined ‘classes‘, List is an ‘interface’, implemented by the ArrayList class, pre-defined in the java.util package.\xa0', 'Vector is a class that is implemented in the collection framework implements a growable array of objects. Vector implements a dynamic array that means it can grow or shrink as required. Like an array, it contains components that can be accessed using an integer index. Vectors basically fall in legacy classes but now it is fully compatible with collections. Let’s see how to create a list object using this class.\xa0', 'LinkedList is a class that is implemented in the collection framework which inherently implements the linked list data structure. It is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses. Each element is known as a node. Due to the dynamicity and ease of insertions and deletions, they are preferred over the arrays. Let’s see how to create a list object using this class.']","['// Java program to Demonstrate List Interface // Importing all utility classesimport java.util.*; // Main class// ListDemo classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating an object of List interface         // implemented by the ArrayList class        List<Integer> l1 = new ArrayList<Integer>();         // Adding elements to object of List interface        // Custom inputs         l1.add(0, 1);        l1.add(1, 2);         // Print the elements inside the object        System.out.println(l1);         // Now creating another object of the List        // interface implemented ArrayList class        // Declaring object of integer type        List<Integer> l2 = new ArrayList<Integer>();         // Again adding elements to object of List interface        // Custom inputs        l2.add(1);        l2.add(2);        l2.add(3);         // Will add list l2 from 1 index        l1.addAll(1, l2);         System.out.println(l1);         // Removes element from index 1        l1.remove(1);         // Printing the updated List 1        System.out.println(l1);         // Prints element at index 3 in list 1        // using get() method        System.out.println(l1.get(3));         // Replace 0th element with 5        // in List 1        l1.set(0, 5);         // Again printing the updated List 1        System.out.println(l1);    }}', '// Java Program to Add Elements to a List // Importing all utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Creating an object of List interface,        // implemented by ArrayList class        List<String> al = new ArrayList<>();         // Adding elements to object of List interface        // Custom elements        al.add(""Geeks"");        al.add(""Geeks"");        al.add(1, ""For"");         // Print all the elements inside the        // List interface object        System.out.println(al);    }}', '// Java Program to Update Elements in a List // Importing utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Creating an object of List interface        List<String> al = new ArrayList<>();         // Adding elements to object of List class        al.add(""Geeks"");        al.add(""Geeks"");        al.add(1, ""Geeks"");         // Display theinitial elements in List        System.out.println(""Initial ArrayList "" + al);         // Setting (updating) element at 1st index        // using set() method        al.set(1, ""For"");         // Print and display the updated List        System.out.println(""Updated ArrayList "" + al);    }}', '// Java Program to Remove Elements from a List // Importing List and ArrayList classes// from java.util packageimport java.util.ArrayList;import java.util.List; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {         // Creating List class object        List<String> al = new ArrayList<>();         // Adding elements to the object        // Custom inputs        al.add(""Geeks"");        al.add(""Geeks"");         // Adding For at 1st indexes        al.add(1, ""For"");         // Print the initialArrayList        System.out.println(""Initial ArrayList "" + al);         // Now remove element from the above list        // present at 1st index        al.remove(1);         // Print the List after removal of element        System.out.println(""After the Index Removal "" + al);         // Now remove the current object from the updated        // List        al.remove(""Geeks"");         // Finally print the updated List now        System.out.println(""After the Object Removal ""                           + al);    }}', '// Java program to Iterate the Elements// in an ArrayList // Importing java utility classesimport java.util.*; // Main classpublic class GFG {     // main driver method    public static void main(String args[])    {        // Creating an empty Arraylist of string type        List<String> al = new ArrayList<>();         // Adding elements to above object of ArrayList        al.add(""Geeks"");        al.add(""Geeks"");         // Adding element at specified position        // inside list object        al.add(1, ""For"");         // Using  for loop for iteration        for (int i = 0; i < al.size(); i++) {             // Using get() method to            // access particular element            System.out.print(al.get(i) + "" "");        }         // New line for better readability        System.out.println();         // Using for-each loop for iteration        for (String str : al)             // Printing all the elements            // which was inside object            System.out.print(str + "" "");    }}', '// Java program to demonstrate the// creation of list object using the// ArrayList class import java.io.*;import java.util.*; class GFG {    public static void main(String[] args)    {        // Size of ArrayList        int n = 5;         // Declaring the List with initial size n        List<Integer> arrli            = new ArrayList<Integer>(n);         // Appending the new elements        // at the end of the list        for (int i = 1; i <= n; i++)            arrli.add(i);         // Printing elements        System.out.println(arrli);         // Remove element at index 3        arrli.remove(3);         // Displaying the list after deletion        System.out.println(arrli);         // Printing elements one by one        for (int i = 0; i < arrli.size(); i++)            System.out.print(arrli.get(i) + "" "");    }}', '// Java program to demonstrate the// creation of list object using the// Vector class import java.io.*;import java.util.*; class GFG {    public static void main(String[] args)    {        // Size of the vector        int n = 5;         // Declaring the List with initial size n        List<Integer> v = new Vector<Integer>(n);         // Appending the new elements        // at the end of the list        for (int i = 1; i <= n; i++)            v.add(i);         // Printing elements        System.out.println(v);         // Remove element at index 3        v.remove(3);         // Displaying the list after deletion        System.out.println(v);         // Printing elements one by one        for (int i = 0; i < v.size(); i++)            System.out.print(v.get(i) + "" "");    }}', '// Java program to demonstrate the// creation of list object using the// Stack class import java.io.*;import java.util.*; class GFG {    public static void main(String[] args)    {        // Size of the stack        int n = 5;         // Declaring the List        List<Integer> s = new Stack<Integer>();         // Appending the new elements        // at the end of the list        for (int i = 1; i <= n; i++)            s.add(i);         // Printing elements        System.out.println(s);         // Remove element at index 3        s.remove(3);         // Displaying the list after deletion        System.out.println(s);         // Printing elements one by one        for (int i = 0; i < s.size(); i++)            System.out.print(s.get(i) + "" "");    }}', '// Java program to demonstrate the// creation of list object using the// LinkedList class import java.io.*;import java.util.*; class GFG {    public static void main(String[] args)    {        // Size of the LinkedList        int n = 5;         // Declaring the List with initial size n        List<Integer> ll = new LinkedList<Integer>();         // Appending the new elements        // at the end of the list        for (int i = 1; i <= n; i++)            ll.add(i);         // Printing elements        System.out.println(ll);         // Remove element at index 3        ll.remove(3);         // Displaying the list after deletion        System.out.println(ll);         // Printing elements one by one        for (int i = 0; i < ll.size(); i++)            System.out.print(ll.get(i) + "" "");    }}']","['public interface List<E> extends Collection<E>\xa0;', 'List<Obj> list = new ArrayList<Obj> ();', '[1, 2]\n[1, 1, 2, 3, 2]\n[1, 2, 3, 2]\n2\n[5, 2, 3, 2]', '[Geeks, For, Geeks]', 'Initial ArrayList [Geeks, Geeks, Geeks]\nUpdated ArrayList [Geeks, For, Geeks]', 'Initial ArrayList [Geeks, For, Geeks]\nAfter the Index Removal [Geeks, Geeks]\nAfter the Object Removal [Geeks]', 'Geeks For Geeks \nGeeks For Geeks', '[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5', '[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5', '[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5', '[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5']","['add(int index, element)|||This method is used to add an element at a particular index in the list. When a single parameter is passed, it simply adds the element at the end of the list.&&&addAll(int index, Collection collection)|||This method is used to add all the elements in the given collection to the list. When a single parameter is passed, it adds all the elements of the given collection at the end of the list.&&&size()|||This method is used to return the size of the list.&&&clear()|||This method is used to remove all the elements in the list. However, the reference of the list created is still stored.&&&remove(int index)|||This method removes an element from the specified index. It shifts subsequent elements(if any) to left and decreases their indexes by 1.&&&remove(element)|||This method is used to remove the first occurrence of the given element in the list.&&&get(int index)|||This method returns elements at the specified index.&&&set(int index, element)|||This method replaces elements at a given index with the new element. This function returns the element which was just replaced by a new element.&&&indexOf(element)|||This method returns the first occurrence of the given element or -1 if the element is not present in the list.&&&lastIndexOf(element)|||This method returns the last occurrence of the given element or -1 if the element is not present in the list.&&&equals(element)|||This method is used to compare the equality of the given element with the elements of the list.&&&hashCode()|||This method is used to return the hashcode value of the given list.&&&isEmpty()|||This method is used to check if the list is empty or not. It returns true if the list is empty, else false.&&&contains(element)|||This method is used to check if the list contains the given element or not. It returns true if the list contains the element.&&&containsAll(Collection collection)|||This method is used to check if the list contains all the collection of elements.&&&sort(Comparator comp)|||This method is used to sort the elements of the list on the basis of the given comparator.']","['Operation 1: Adding elements to List class using add() method|||Operation 2: Updating elements in List class using set() method|||Operation 3: Removing elements using remove() method&&&add(Object): This method is used to add an element at the end of the List.|||add(int index, Object): This method is used to add an element at a specific index in the List&&&remove(Object): This method is used to simply remove an object from the List. If there are multiple such objects, then the first occurrence of the object is removed.|||remove(int index): Since a List is indexed, this method takes an integer value which simply removes the element present at that specific index in the List. After removing the element, all the elements are moved to the left to fill the space and the indices of the objects are updated.&&&ArrayList|||Vector|||Stack|||LinkedList&&&&&&AbstractList: This class is used to implement an unmodifiable list, for which one needs to only extend this AbstractList Class and implement only the get() and the size() methods.|||CopyOnWriteArrayList: This class implements the list interface. It is an enhanced version of ArrayList in which all the modifications(add, set, remove, etc.) are implemented by making a fresh copy of the list.|||AbstractSequentialList: This class implements the Collection interface and the AbstractCollection class. This class is used to implement an unmodifiable list, for which one needs to only extend this AbstractList Class and implement only the get() and the size() methods.&&&']"
65,['ArrayList in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']","['Constructors in the ArrayList', 'Methods in Java ArrayList']","['https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200624184403/ArrayList.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20210908120146/ArrayListIntegerObjecttype-660x268.png', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200624184552/ArrayList-in-Java-In-Depth-Study.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/abstractlist-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-interface-java-examples/', 'https://www.geeksforgeeks.org/classes-objects-java/', 'https://www.geeksforgeeks.org/data-types-in-java/', 'https://www.geeksforgeeks.org/wrapper-classes-java/', 'https://www.geeksforgeeks.org/vector-in-cpp-stl/', 'https://www.geeksforgeeks.org/java-util-vector-class-java/', 'https://www.geeksforgeeks.org/abstractlist-in-java-with-examples/', 'https://www.geeksforgeeks.org/copyonwritearraylist-in-java/', 'https://www.geeksforgeeks.org/abstractsequentiallist-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/constructors-in-java/', 'https://www.geeksforgeeks.org/java-util-arraylist-add-method-java/', 'https://www.geeksforgeeks.org/java-util-arraylist-add-method-java/', 'https://www.geeksforgeeks.org/java-util-arraylist-addall-method-java/', 'https://www.geeksforgeeks.org/java-util-arraylist-addall-method-java/', 'https://www.geeksforgeeks.org/arraylist-clear-java-examples/', 'https://www.geeksforgeeks.org/clone-method-in-java-2/', 'https://www.geeksforgeeks.org/arraylist-contains-java/', 'https://www.geeksforgeeks.org/arraylist-ensurecapacity-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-foreach-method-in-java/', 'https://www.geeksforgeeks.org/arraylist-get-method-java-examples/', 'https://www.geeksforgeeks.org/java-util-arraylist-indexof-java/', 'https://www.geeksforgeeks.org/arraylist-isempty-java-example/', 'https://www.geeksforgeeks.org/arraylist-lastindexof-java-example/', 'https://www.geeksforgeeks.org/arraylist-listiterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-listiterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-linkedlist-remove-methods-java-examples/', 'https://www.geeksforgeeks.org/arraylist-linkedlist-remove-methods-java-examples/', 'https://www.geeksforgeeks.org/arraylist-removeall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-removeif-method-in-java/', 'https://www.geeksforgeeks.org/arraylist-removerange-java-examples/', 'https://www.geeksforgeeks.org/arraylist-retainall-method-in-java/', 'https://www.geeksforgeeks.org/arraylist-set-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-size-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-spliterator-method-in-java/', 'https://www.geeksforgeeks.org/arraylist-sublist-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-array-conversion-java-toarray-methods/', 'https://www.geeksforgeeks.org/arraylist-array-conversion-java-toarray-methods/', 'https://www.geeksforgeeks.org/arraylist-trimtosize-java-example/', 'https://www.geeksforgeeks.org/java-util-arraylist-add-method-java/?ref=rp', 'https://www.geeksforgeeks.org/arraylist-set-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-linkedlist-remove-methods-java-examples/', 'https://www.geeksforgeeks.org/loop-java-important-points/', 'https://www.geeksforgeeks.org/arraylist-get-method-java-examples/', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/array-vs-arraylist-in-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Illustration:\xa0', 'Example: The following implementation demonstrates how to create and use an ArrayList.', 'Important Features:', 'Let’s understand the Java ArrayList in depth. Look at the below image:', 'ArrayList arr = new ArrayList();\xa0\xa0', 'ArrayList arr = new ArrayList(c);\xa0\xa0', 'ArrayList arr = new ArrayList(N);\xa0\xa0', 'Note: You can also create a generic ArrayList:', 'Operation 1: Adding Elements', 'Operation 2: Changing Elements', 'Operation 3: Removing Elements', 'Operation 4: Iterating the ArrayList', 'Must Read: Array vs ArrayList in Java']","['ArrayList is a part of collection framework and is present in java.util package. It provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. This class is found in java.util package.\xa0', 'Since ArrayList is a dynamic array and we do not have to specify the size while creating it, the size of the array automatically increases when we dynamically add and remove items. Though the actual library implementation may be more complex, the following is a very basic idea explaining the working of the array when the array becomes full and if we try to add an item:', 'In the above illustration, AbstractList, CopyOnWriteArrayList, and the AbstractSequentialList are the classes that implement the list interface. A separate functionality is implemented in each of the mentioned classes. They are:', 'In order to create an ArrayList, we need to create an object of the ArrayList class. The ArrayList class consists of various constructors which allow the possible creation of the array list. The following are the constructors available in this class:\xa0', '1. ArrayList(): This constructor is used to build an empty array list. If we wish to create an empty ArrayList with the name arr, then, it can be created as:', '2. ArrayList(Collection c): This constructor is used to build an array list initialized with the elements from the collection c. Suppose, we wish to create an ArrayList arr which contains the elements present in the collection c, then, it can be created as:\xa0\xa0', '3. ArrayList(int capacity): This constructor is used to build an array list with initial capacity being specified. Suppose we wish to create an ArrayList with the initial size being N, then, it can be created as:', 'Let’s see how to perform some basics operations on the ArrayList as listed which we are going to discuss further alongside implementing every operation.', 'In order to add an element to an ArrayList, we can use the add() method. This method is overloaded to perform multiple operations based on different parameters. They are as follows: \xa0', 'After adding the elements, if we wish to change the element, it can be done using the set() method. Since an ArrayList is indexed, the element which we wish to change is referenced by the index of the element. Therefore, this method takes an index and the updated element which needs to be inserted at that index.\xa0', 'In order to remove an element from an ArrayList, we can use the remove() method. This method is overloaded to perform multiple operations based on different parameters. They are as follows:\xa0', 'There are multiple ways to iterate through the ArrayList. The most famous ways are by using the basic for loop in combination with a get() method to get the element at a specific index and the advanced for loop.\xa0']",[],"['// Java program to demonstrate the// working of ArrayList in Java import java.io.*;import java.util.*; class ArrayListExample {    public static void main(String[] args)    {        // Size of the        // ArrayList        int n = 5;         // Declaring the ArrayList with        // initial size n        ArrayList<Integer> arrli            = new ArrayList<Integer>(n);         // Appending new elements at        // the end of the list        for (int i = 1; i <= n; i++)            arrli.add(i);         // Printing elements        System.out.println(arrli);         // Remove element at index 3        arrli.remove(3);         // Displaying the ArrayList        // after deletion        System.out.println(arrli);         // Printing elements one by one        for (int i = 0; i < arrli.size(); i++)            System.out.print(arrli.get(i) + "" "");    }}', '// Java Program to Add elements to An ArrayList // Importing all utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Creating an Array of string type        ArrayList<String> al = new ArrayList<>();         // Adding elements to ArrayList        // Cutom inpus        al.add(""Geeks"");        al.add(""Geeks"");         // Here we are mentioning the index        // at which it is to be added        al.add(1, ""For"");         // Printing all the elements in an ArrayList        System.out.println(al);    }}', '// Java Program to Change elements in ArrayList // Importing all utility classesimport java.util.*; // main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Creating an Arratlist object of string type        ArrayList<String> al = new ArrayList<>();         // Adding elements to Arraylist        // Custom input elements        al.add(""Geeks"");        al.add(""Geeks"");         // Adding specifying the index to be added        al.add(1, ""Geeks"");         // Printing the Arraylist elements        System.out.println(""Initial ArrayList "" + al);         // Setting element at 1st index        al.set(1, ""For"");         //  Printing the updated Arraylist        System.out.println(""Updated ArrayList "" + al);    }}', '// Java program to Remove Elements in ArrayList // Importing all utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Creating an object of arraylist class        ArrayList<String> al = new ArrayList<>();         // Adding elements to ArrayList        // Custom addition        al.add(""Geeks"");        al.add(""Geeks"");        // Adding element at specific index        al.add(1, ""For"");         // Printing all elements of ArrayList        System.out.println(""Initial ArrayList "" + al);         // Removing element from above ArrayList        al.remove(1);         // Printing the updated Arraylist elements        System.out.println(""After the Index Removal "" + al);         // Removing this word element in ArrayList        al.remove(""Geeks"");         // Now printing updated ArrayList        System.out.println(""After the Object Removal ""                           + al);    }}', '// Java program to Iterate the elements// in an ArrayList // Importing all utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Creating an Arraylist of string type        ArrayList<String> al = new ArrayList<>();         // Adding elements to ArrayList        //  using standard add() method        al.add(""Geeks"");        al.add(""Geeks"");        al.add(1, ""For"");         // Using the Get method and the        // for loop        for (int i = 0; i < al.size(); i++) {             System.out.print(al.get(i) + "" "");        }         System.out.println();         // Using the for each loop        for (String str : al)            System.out.print(str + "" "");    }}']","['[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5', '// Creating generic integer ArrayList\nArrayList<Integer> arrli = new ArrayList<Integer>();', '[Geeks, For, Geeks]', 'Initial ArrayList [Geeks, Geeks, Geeks]\nUpdated ArrayList [Geeks, For, Geeks]', 'Initial ArrayList [Geeks, For, Geeks]\nAfter the Index Removal [Geeks, Geeks]\nAfter the Object Removal [Geeks]', 'Geeks For Geeks \nGeeks For Geeks']","['add(int index, Object element)|||This method is used to insert a specific element at a specific position index in a list.&&&add(Object o)|||This method is used to append a specific element to the end of a list.&&&addAll(Collection C)|||This method is used to append all the elements from a specific collection to the end of the mentioned list, in such an order that the values are returned by the specified collection’s iterator.&&&addAll(int index, Collection C)|||Used to insert all of the elements starting at the specified position from a specific collection into the mentioned list.&&&clear()|||This method is used to remove all the elements from any list.&&&clone()|||This method is used to return a shallow copy of an ArrayList.&&&contains?(Object o)|||Returns true if this list contains the specified element.&&&ensureCapacity?(int minCapacity)|||Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.&&&forEach?(Consumer<? super E> action)|||Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.&&&get?(int index)|||Returns the element at the specified position in this list.&&&indexOf(Object O)|||The index the first occurrence of a specific element is either returned, or -1 in case the element is not in the list.&&&isEmpty?()|||Returns true if this list contains no elements.&&&lastIndexOf(Object O)|||The index of the last occurrence of a specific element is either returned or -1 in case the element is not in the list.&&&listIterator?()|||Returns a list iterator over the elements in this list (in proper sequence).&&&listIterator?(int index)|||Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.&&&remove?(int index)|||Removes the element at the specified position in this list.&&&remove?(Object o)|||Removes the first occurrence of the specified element from this list, if it is present.&&&removeAll?(Collection c)|||Removes from this list all of its elements that are contained in the specified collection.&&&removeIf?(Predicate filter)|||Removes all of the elements of this collection that satisfy the given predicate.&&&removeRange?(int fromIndex, int toIndex)|||Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.&&&retainAll?(Collection<?> c)|||Retains only the elements in this list that are contained in the specified collection.&&&set?(int index, E element)|||Replaces the element at the specified position in this list with the specified element.&&&size?()|||Returns the number of elements in this list.&&&spliterator?()|||Creates a late-binding and fail-fast Spliterator over the elements in this list.&&&subList?(int fromIndex, int toIndex)|||Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.&&&toArray()|||This method is used to return an array containing all of the elements in the list in the correct order.&&&toArray(Object[] O)|||It is also used to return an array containing all of the elements in this list in the correct order same as the previous method.&&&trimToSize()|||This method is used to trim the capacity of the instance of the ArrayList to the list’s current size.']","['Creates a bigger-sized memory on heap memory (for example memory of double size).|||Copies the current memory elements to the new memory.|||New item is added now as there is bigger memory available now.|||Delete the old memory.&&&ArrayList inherits AbstractList class and implements the List interface.|||ArrayList is initialized by the size. However, the size is increased automatically if the collection grows or shrinks if the objects are removed from the collection.|||Java ArrayList allows us to randomly access the list.|||ArrayList can not be used for primitive types, like int, char, etc. We need a wrapper class for such cases.|||ArrayList in Java can be seen as a vector in C++.|||ArrayList is not Synchronized. Its equivalent synchronized class in Java is Vector.&&&Adding element to List|||Changing elements|||Removing elements|||Iterating elements &&&add(Object): This method is used to add an element at the end of the ArrayList.|||add(int index, Object): This method is used to add an element at a specific index in the ArrayList.&&&remove(Object): This method is used to simply remove an object from the ArrayList. If there are multiple such objects, then the first occurrence of the object is removed.|||remove(int index): Since an ArrayList is indexed, this method takes an integer value which simply removes the element present at that specific index in the ArrayList. After removing the element, all the elements are moved to the left to fill the space and the indices of the objects are updated.&&&&&&AbstractList: This class is used to implement an unmodifiable list, for which one needs to only extend this AbstractList Class and implement only the get() and the size() methods.|||CopyOnWriteArrayList: This class implements the list interface. It is an enhanced version of ArrayList in which all the modifications(add, set, remove, etc.) are implemented by making a fresh copy of the list.|||AbstractSequentialList: This class implements the Collection interface and the AbstractCollection class. This class is used to implement an unmodifiable list, for which one needs to only extend this AbstractList Class and implement only the get() and the size() methods.&&&']"
66,['Vector Class in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']","['Constructors', 'Methods in Vector Class', 'Performing Various Operations on Vector class in Java']","['https://media.geeksforgeeks.org/wp-content/uploads/20200817110421/vector.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20211203123850/Screenshot20211203at123815PM.png']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/list-interface-java-examples/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/abstractlist-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-interface-java-examples/', 'https://www.geeksforgeeks.org/stack-class-in-java/', 'https://www.geeksforgeeks.org/vector-add-method-in-java/', 'https://www.geeksforgeeks.org/vector-add-method-in-java/', 'https://www.geeksforgeeks.org/vector-addall-method-in-java/', 'https://www.geeksforgeeks.org/vector-addall-method-in-java/', 'https://www.geeksforgeeks.org/vector-addall-method-in-java/', 'https://www.geeksforgeeks.org/vector-addall-method-in-java/', 'https://www.geeksforgeeks.org/vector-addelement-method-in-java/', 'https://www.geeksforgeeks.org/vector-capacity-method-in-java/', 'https://www.geeksforgeeks.org/vector-clear-method-in-java/', 'https://www.geeksforgeeks.org/vector-clone-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-contains-method-in-java/', 'https://www.geeksforgeeks.org/vector-containsall-method-in-java/', 'https://www.geeksforgeeks.org/vector-copyinto-method-in-java/', 'https://www.geeksforgeeks.org/vector-elementat-method-in-java/', 'https://www.geeksforgeeks.org/vector-elements-method-in-java/', 'https://www.tutorialspoint.com/java/util/vector_ensurecapacity.htm', 'https://www.geeksforgeeks.org/vector-equals-method-in-java/', 'https://www.geeksforgeeks.org/vector-firstelement-method-in-java/', 'https://www.geeksforgeeks.org/vector-foreach-method-in-java/', 'https://www.geeksforgeeks.org/vector-foreach-method-in-java/', 'https://www.geeksforgeeks.org/vector-get-method-in-java/', 'https://www.geeksforgeeks.org/vector-hashcode-method-in-java/', 'https://www.geeksforgeeks.org/vector-indexof-method-in-java/#:~:text=indexOf(Object%20element)%20method%20is,does%20not%20contain%20the%20element.', 'https://www.geeksforgeeks.org/vector-indexof-method-in-java/#:~:text=indexOf(Object%20element)%20method%20is,does%20not%20contain%20the%20element.', 'https://www.geeksforgeeks.org/vector-insertelementat-method-in-java/', 'https://www.geeksforgeeks.org/vector-isempty-method-in-java/', 'https://www.geeksforgeeks.org/vector-iterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-lastelement-method-in-java/', 'https://www.geeksforgeeks.org/vector-lastindexof-method-in-java/', 'https://www.geeksforgeeks.org/vector-lastindexof-method-in-java/', 'https://www.geeksforgeeks.org/vector-listiterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-listiterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-remove-method-in-java/', 'https://www.geeksforgeeks.org/vector-remove-method-in-java/', 'https://www.geeksforgeeks.org/vector-removeall-method-in-java/', 'https://www.geeksforgeeks.org/vector-removeallelements-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-removeelement-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-removeelementat-method-in-java/', 'https://www.geeksforgeeks.org/vector-removeif-method-in-java/', 'https://www.geeksforgeeks.org/vector-removerange-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-removerange-method-in-java-with-example/', 'https://www.javatpoint.com/java-vector-replaceall-method', 'https://www.geeksforgeeks.org/vector-retainall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-set-method-in-java/#:~:text=set()%20method%20is%20used,Vector%20class%2C%20with%20another%20element.&text=Parameters%3A%20This%20function%20accepts%20two,above%20syntax%20and%20described%20below.', 'https://www.geeksforgeeks.org/vector-setelementat-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-setsize-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-size-method-in-java/', 'https://www.geeksforgeeks.org/collections-sort-java-examples/', 'https://www.geeksforgeeks.org/arraylist-spliterator-method-in-java/', 'https://www.geeksforgeeks.org/vector-sublist-method-in-java/', 'https://www.geeksforgeeks.org/vector-toarray-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-toarray-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-tostring-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-trimtosize-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-add-method-in-java/', 'https://www.geeksforgeeks.org/vector-set-method-in-java/', 'https://www.geeksforgeeks.org/vector-remove-method-in-java/', 'https://www.geeksforgeeks.org/vector-get-method-in-java/', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/vector-vs-arraylist-java/', 'http://www.write.geeksforgeeks.org/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Here, E is the type of element.', 'Important points regarding the Increment of vector capacity are as follows:', 'Common Errors in the declaration of Vectors are as follows:', '1. Vector(): Creates a default vector of the initial capacity is 10.', '2. Vector(int size): Creates a vector whose initial capacity is specified by size.', '4. Vector(Collection c): Creates a vector that contains the elements of collection c.', 'DESCRIPTION', 'addAll(Collection<?', 'extends E> c)', 'addAll(int index,', 'Collection<? extends E> c)', 'forEach(Consumer<?', 'super E> action)', 'Returns the index of the first occurrence of the specified element in this vector,', 'or -1 if this vector does not contain the element.', 'Returns the index of the last occurrence of the specified element in this vector,', 'or -1 if this vector does not contain the element.', 'Returns a list iterator over the elements in this list (in proper sequence),', 'starting at the specified position in the list.', 'removeRange(int fromIndex,', 'int toIndex)', 'Let us discuss various operations on Vector class that are listed as follows:', 'Operation 1: Adding Elements', 'Operation 2: Updating Elements', 'Operation 3: Removing Elements', 'Operation 4: Iterating the Vector', 'Note: Do give a read to the ArrayList vs Vector class in Java to grasp it better.']","['The Vector class implements a growable array of objects. Vectors fall in legacy classes, but now it is fully compatible with collections. It is found in java.util package and implement the List interface, so we can use all the methods of List interface as shown below as follows:', 'If the increment is specified, Vector will expand according to it in each allocation cycle. Still, if the increment is not specified, then the vector’s capacity gets doubled in each allocation cycle. Vector defines three protected data members:', '3. Vector(int size, int incr): Creates a vector whose initial capacity is specified by size and increment is specified by incr. It specifies the number of elements to allocate each time a vector is resized upward.', 'Let us first discuss and implement how to create and use a Vector prior to landing upon the methods of this class.', 'In order to add the elements to the Vector, we use the add() method. This method is overloaded to perform multiple operations based on different parameters. They are listed below as follows:', 'After adding the elements, if we wish to change the element, it can be done using the set() method. Since a Vector is indexed, the element which we wish to change is referenced by the index of the element. Therefore, this method takes an index and the updated element to be inserted at that index.', 'In order to remove an element from a Vector, we can use the remove() method. This method is overloaded to perform multiple operations based on different parameters. They are:', 'There are multiple ways to iterate through the Vector. The most famous ways are by using the basic for loop in combination with a get() method to get the element at a specific index and the advanced for a loop.', 'This article is contributed by Abhishek Verma. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\xa0', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['// Java Program to Demonstrate Working of Vector// Via Creating and Using It // Importing required classesimport java.io.*;import java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Size of the Vector        int n = 5;         // Declaring the Vector with        // initial size n        Vector<Integer> v = new Vector<Integer>(n);         // Appending new elements at        // the end of the vector        for (int i = 1; i <= n; i++)            v.add(i);         // Printing elements        System.out.println(v);         // Remove element at index 3        v.remove(3);         // Displaying the vector        // after deletion        System.out.println(v);         // iterating over vector elements        // usign for loop        for (int i = 0; i < v.size(); i++)             // Printing elements one by one            System.out.print(v.get(i) + "" "");    }}', '// Java Program to Add Elements in Vector Class // Importing required classesimport java.io.*;import java.util.*; // Main class// AddElementsToVectorclass GFG {     // Main driver method    public static void main(String[] arg)    {         // Case 1        // Creating a default vector        Vector v1 = new Vector();         // Adding custom elements        // using add() method        v1.add(1);        v1.add(2);        v1.add(""geeks"");        v1.add(""forGeeks"");        v1.add(3);         // Printing the vector elements to the console        System.out.println(""Vector v1 is "" + v1);         // Case 2        // Creating generic vector        Vector<Integer> v2 = new Vector<Integer>();         // Adding custom elements        // using add() method        v2.add(1);        v2.add(2);        v2.add(3);         // Printing the vector elements to the console        System.out.println(""Vector v2 is "" + v2);    }}', '// Java code to change the// elements in vector class import java.util.*; public class UpdatingVector {       public static void main(String args[])    {        // Creating an empty Vector        Vector<Integer> vec_tor = new Vector<Integer>();         // Use add() method to add elements in the vector        vec_tor.add(12);        vec_tor.add(23);        vec_tor.add(22);        vec_tor.add(10);        vec_tor.add(20);         // Displaying the Vector        System.out.println(""Vector: "" + vec_tor);         // Using set() method to replace 12 with 21        System.out.println(""The Object that is replaced is: ""                        + vec_tor.set(0, 21));         // Using set() method to replace 20 with 50        System.out.println(""The Object that is replaced is: ""                        + vec_tor.set(4, 50));         // Displaying the modified vector        System.out.println(""The new Vector is:"" + vec_tor);    }}', '// Java code illustrating the removal// of elements from vector import java.util.*;import java.io.*; class RemovingElementsFromVector {       public static void main(String[] arg)    {         // create default vector of capacity 10        Vector v = new Vector();           // Add elements using add() method        v.add(1);        v.add(2);        v.add(""Geeks"");        v.add(""forGeeks"");        v.add(4);         // removing first occurrence element at 1        v.remove(1);         // checking vector        System.out.println(""after removal: "" + v);    }}', '// Java program to iterate the elements// in a Vector import java.util.*; public class IteratingVector {     public static void main(String args[])    {          // create an instance of vector        Vector<String> v = new Vector<>();           // Add elements using add() method        v.add(""Geeks"");        v.add(""Geeks"");        v.add(1, ""For"");         // Using the Get method and the        // for loop        for (int i = 0; i < v.size(); i++) {             System.out.print(v.get(i) + "" "");        }         System.out.println();         // Using the for each loop        for (String str : v)            System.out.print(str + "" "");    }}']","['public class Vector<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable', 'Vector<E> v = new Vector<E>();', 'Vector<E> v = new Vector<E>(int size);', 'Vector<E> v = new Vector<E>(int size, int incr);', 'Vector<E> v = new Vector<E>(Collection c);', '[1, 2, 3, 4, 5]\n[1, 2, 3, 5]\n1 2 3 5', 'Vector v1 is [1, 2, geeks, forGeeks, 3]\nVector v2 is [1, 2, 3]', 'Vector: [12, 23, 22, 10, 20]\nThe Object that is replaced is: 12\nThe Object that is replaced is: 20\nThe new Vector is:[21, 23, 22, 10, 50]', 'after removal: [1, Geeks, forGeeks, 4]', 'Geeks For Geeks \nGeeks For Geeks']","['add(E e)|||Appends the specified element to the end of this Vector.&&&add(int index, E element)|||Inserts the specified element at the specified position in this Vector.&&&addAll(Collection<?extends E> c)|||Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection’s Iterator.&&&addAll(int index,Collection<? extends E> c)|||Insert all of the elements in the specified Collection into this Vector at the specified position.&&&addElement(E obj)|||Adds the specified component to the end of this vector, increasing its size by one.&&&capacity()|||Returns the current capacity of this vector.&&&clear()|||Removes all of the elements from this Vector.&&&clone()|||Returns a clone of this vector.&&&contains(Object o)|||Returns true if this vector contains the specified element.&&&containsAll(Collection<?> c)|||Returns true if this Vector contains all of the elements in the specified Collection.&&&copyInto(Object[] anArray)|||Copies the components of this vector into the specified array.&&&elementAt(int index)|||Returns the component at the specified index.&&&elements()|||Returns an enumeration of the components of this vector.&&&ensureCapacity(int minCapacity)|||Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.&&&equals(Object o)|||Compares the specified Object with this Vector for equality.&&&firstElement()|||Returns the first component (the item at index 0) of this vector.&&&forEach(Consumer<?super E> action)|||Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.&&&get(int index)|||Returns the element at the specified position in this Vector.&&&hashCode()|||Returns the hash code value for this Vector.&&&indexOf(Object o)|||Returns the index of the first occurrence of the specified element in this vector,or -1 if this vector does not contain the element.&&&indexOf(Object o, int index)|||Returns the index of the first occurrence of the specified element in this vector, searching forwards from the index, or returns -1 if the element is not found.&&&insertElementAt(E obj, int index)|||Inserts the specified object as a component in this vector at the specified index.&&&isEmpty()|||Tests if this vector has no components.&&&iterator()|||Returns an iterator over the elements in this list in a proper sequence.&&&lastElement()|||Returns the last component of the vector.&&&lastIndexOf(Object o)|||Returns the index of the last occurrence of the specified element in this vector,or -1 if this vector does not contain the element.&&&lastIndexOf(Object o, int index)|||Returns the index of the last occurrence of the specified element in this vector, searching backward from the index, or returns -1 if the element is not found.&&&listIterator()|||Returns a list iterator over the elements in this list (in proper sequence).&&&listIterator(int index)|||Returns a list iterator over the elements in this list (in proper sequence),starting at the specified position in the list.&&&remove(int index)|||Removes the element at the specified position in this Vector.&&&remove(Object o)|||Removes the first occurrence of the specified element in this Vector. If the Vector does not contain the element, it is unchanged.&&&removeAll(Collection<?> c)|||Removes from this Vector all of its elements contained in the specified Collection.&&&removeAllElements()|||Removes all components from this vector and sets its size to zero.&&&removeElement(Object obj)|||Removes the first (lowest-indexed) occurrence of the argument from this vector.&&&removeElementAt(int index)|||Deletes the component at the specified index.&&&removeIf(Predicate<? super E> filter)|||Removes all of the elements of this collection that satisfy the given predicate.&&&removeRange(int fromIndex,int toIndex)|||Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.&&&replaceAll(UnaryOperator<E> operator)|||Replaces each element of this list with the result of applying the operator to that element.&&&retainAll(Collection<?> c)|||Retains only the elements in this Vector contained in the specified Collection.&&&set(int index, E element)|||Replaces the element at the specified position in this Vector with the specified element.&&&setElementAt(E obj, int index)|||Sets the component at the specified index of this vector to be the specified object.&&&setSize(int newSize)|||Sets the size of this vector.&&&size()|||Returns the number of components in this vector.&&&sort(Comparator<? super E> c)|||Sorts this list according to the order induced by the specified Comparator.&&&spliterator()|||Creates a late-binding and fail-fast Spliterator over the elements in this list.&&&subList(int fromIndex, int toIndex)|||Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive.&&&toArray()|||Returns an array containing all of the elements in this Vector in the correct order.&&&toArray(T[] a)|||Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array.&&&toString()|||Returns a string representation of this Vector, containing the String representation of each element.&&&trimToSize()|||Trims the capacity of this vector to be the vector’s current size.']","['Vector implements a dynamic array that means it can grow or shrink as required. Like an array, it contains components that can be accessed using an integer index.|||They are very similar to ArrayList, but Vector is synchronized and has some legacy methods that the collection framework does not contain.|||It also maintains an insertion order like an ArrayList. Still, it is rarely used in a non-thread environment as it is synchronized, and due to this, it gives a poor performance in adding, searching, deleting, and updating its elements.|||The Iterators returned by the Vector class are fail-fast. In the case of concurrent modification, it fails and throws the ConcurrentModificationException.&&&It extends AbstractList and implements List interfaces.|||It implements Serializable, Cloneable, Iterable<E>, Collection<E>, List<E>, RandomAccess interfaces.|||The directly known subclass is Stack.&&&int capacityIncreament: Contains the increment value.|||int elementCount: Number of elements currently in vector stored in it.|||Object elementData[]: Array that holds the vector is stored in it.&&&Vector throws an IllegalArgumentException if the InitialSize of the vector defined is negative.|||If the specified collection is null, It throws NullPointerException.&&&If the vector increment is not specified then it’s capacity will be doubled in every increment cycle.|||The capacity of a vector cannot be below the size, it may equal to it.&&&add(Object): This method is used to add an element at the end of the Vector.|||add(int index, Object): This method is used to add an element at a specific index in the Vector.&&&remove(Object): This method is used to remove an object from the Vector. If there are multiple such objects, then the first occurrence of the object is removed.|||remove(int index): Since a Vector is indexed, this method takes an integer value which simply removes the element present at that specific index in the Vector. After removing the element, all the elements are moved to the left to fill the space and the indices of the objects are updated.&&&&&&Adding elements|||Updating elements|||Removing elements|||Iterating over elements&&&']"
67,['Stack Class in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']","['How to Create a Stack?', 'Performing various operations on Stack class', '\xa0Methods in Stack Class\xa0', 'Methods inherited from class java.util.Vector']",['https://media.geeksforgeeks.org/wp-content/uploads/Selection_028.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/stack-data-structure/', 'https://www.geeksforgeeks.org/list-interface-java-examples/', 'https://www.geeksforgeeks.org/stack-push-method-in-java/', 'https://www.geeksforgeeks.org/stack-peek-method-in-java/', 'https://www.geeksforgeeks.org/stack-pop-method-in-java/', 'https://www.geeksforgeeks.org/stack-empty-method-in-java/', 'https://www.geeksforgeeks.org/stack-peek-method-in-java/', 'https://www.geeksforgeeks.org/stack-pop-method-in-java/', 'https://www.geeksforgeeks.org/stack-push-method-in-java/', 'https://www.geeksforgeeks.org/stack-search-method-in-java/', 'https://www.geeksforgeeks.org/vector-add-method-in-java/', 'https://www.geeksforgeeks.org/vector-add-method-in-java/', 'https://www.geeksforgeeks.org/vector-addall-method-in-java/', 'https://www.geeksforgeeks.org/vector-addall-method-in-java/', 'https://www.geeksforgeeks.org/vector-addelement-method-in-java/#:~:text=addElement()%20method%20is%20used,()%20method%20of%20Vector%20class.', 'https://www.geeksforgeeks.org/vector-capacity-method-in-java/', 'https://www.geeksforgeeks.org/vector-clear-method-in-java/', 'https://www.geeksforgeeks.org/vector-clone-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-contains-method-in-java/', 'https://www.geeksforgeeks.org/vector-containsall-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/vector-copyinto-method-in-java/#:~:text=copyInto()%20method%20is%20used,the%20elements%20of%20the%20vector.', 'https://www.geeksforgeeks.org/vector-elementat-method-in-java/#:~:text=elementAt(int%20pos)%20method%20is,specific%20index%20from%20a%20Vector.&text=Parameters%3A%20This%20method%20accepts%20a,be%20fetched%20from%20the%20Vector.', 'https://www.geeksforgeeks.org/vector-elements-method-in-java/#:~:text=elements()%20method%20of%20Vector,values%20present%20in%20the%20Vector.&text=Parameters%3A%20The%20method%20does%20not,the%20values%20of%20the%20Vector.', 'https://www.geeksforgeeks.org/vector-ensurecapacity-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-equals-method-in-java/', 'https://www.geeksforgeeks.org/vector-firstelement-method-in-java/', 'https://www.geeksforgeeks.org/vector-get-method-in-java/', 'https://www.geeksforgeeks.org/vector-hashcode-method-in-java/#:~:text=hashCode()%20method%20in%20Java%20is%20used%20to,hashcode%20value%20of%20this%20vector.&text=Parameters%3A%20The%20method%20does%20not,which%20is%20of%20Integer%20type.', 'https://www.geeksforgeeks.org/vector-indexof-method-in-java/#:~:text=util.,does%20not%20contain%20the%20element.', 'https://www.geeksforgeeks.org/vector-indexof-method-in-java/#:~:text=util.,does%20not%20contain%20the%20element.', 'https://www.geeksforgeeks.org/vector-insertelementat-method-in-java/#:~:text=insertElementAt(element%2C%20index)%20method,is%20passed%20as%20the%20parameters.', 'https://www.geeksforgeeks.org/vector-isempty-method-in-java/', 'https://www.geeksforgeeks.org/vector-iterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-lastelement-method-in-java/', 'https://www.geeksforgeeks.org/vector-lastindexof-method-in-java/', 'https://www.geeksforgeeks.org/vector-lastindexof-method-in-java/', 'https://www.geeksforgeeks.org/vector-listiterator-method-in-java-with-examples/#:~:text=java.util.Vector.listIterator,()%20and%20previous()%20respectively.', 'https://www.geeksforgeeks.org/vector-listiterator-method-in-java-with-examples/#:~:text=java.util.Vector.listIterator,()%20and%20previous()%20respectively.', 'https://www.geeksforgeeks.org/vector-remove-method-in-java/', 'https://www.geeksforgeeks.org/vector-remove-method-in-java/', 'https://www.geeksforgeeks.org/vector-removeall-method-in-java/', 'https://www.geeksforgeeks.org/vector-removeallelements-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-removeelement-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-removeelementat-method-in-java/', 'https://www.geeksforgeeks.org/vector-removerange-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-retainall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-set-method-in-java/', 'https://www.geeksforgeeks.org/vector-setelementat-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-setsize-method-in-java-with-example/', 'https://www.geeksforgeeks.org/vector-size-method-in-java/#:~:text=size()%20method%20in%20Java%20is%20used%20to%20get%20the,elements%20present%20in%20the%20Vector.&text=Parameters%3A%20The%20method%20does%20not,elements%20present%20in%20the%20Vector.', 'https://www.geeksforgeeks.org/vector-sublist-method-in-java/', 'https://www.geeksforgeeks.org/vector-toarray-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-toarray-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/vector-tostring-method-in-java-with-example/#:~:text=The%20java.-,util.,elements%20of%20Vector%20into%20String.', 'https://www.geeksforgeeks.org/vector-trimtosize-method-in-java-with-example/', 'https://www.geeksforgeeks.org/java-util-vector-class-java/', 'https://www.geeksforgeeks.org/arraydeque-in-java/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['The class supports one default constructor Stack() which is used to create an empty stack.\xa0', 'Declaration:', 'All Implemented Interfaces:', 'Stack<E> stack = new Stack<E>();', 'Here E is the type of Object.', 'DESCRIPTION', 'It returns true if nothing is on the top of the stack. Else, returns false.', 'Returns the element on the top of the stack, but does not remove it.', 'Removes and returns the top element of the stack. An ‘EmptyStackException’\xa0', 'An exception is thrown if we call pop() when the invoking stack is empty.', 'push(Object element)', 'Pushes an element on the top of the stack.', 'search(Object element)', 'It determines whether an object exists in the stack. If the element is found,', 'It returns the position of the element from the top of the stack. Else, it returns -1.', 'DESCRIPTION', 'Appends all of the elements in the specified Collection to the end of this Vector,\xa0', 'in the order that they are returned by the specified Collection’s Iterator.', 'Increases the capacity of this vector, if necessary, to ensure that it can hold\xa0', 'at least the number of components specified by the minimum capacity argument.', 'Returns the index of the first occurrence of the specified element in this vector, or -1\xa0', 'if this vector does not contain the element.', 'Returns the index of the last occurrence of the specified element in this vector, or -1', '\xa0If this vector does not contain the element.', 'Returns the index of the last occurrence of the specified element in this vector,\xa0', 'searching backward from the index, or returns -1 if the element is not found.', 'Returns a list iterator over the elements in this list (in proper sequence),\xa0', 'starting at the specified position in the list.', 'Returns an array containing all of the elements in this Vector in the correct order; the runtime', '\xa0type of the returned array is that of the specified array.']","['In order to create a stack, we must import java.util.stack package and use the Stack() constructor of this class. The below example creates an empty Stack.', '1. Adding Elements: In order to add an element to the stack, we can use the push() method. This push() operation place the element at the top of the stack.', '2. Accessing the Element: To retrieve or fetch the first element of the Stack or the element present at the top of the Stack, we can use peek() method. The element retrieved does not get deleted or removed from the Stack.\xa0', '3. Removing Elements: To pop an element from the stack, we can use the pop() method. The element is popped from the top of the stack and is removed from the same.', 'Note: Please note that the Stack class in Java is a legacy class and inherits from Vector in Java. It is a thread-safe class and hence involves overhead when we do not need thread safety. It is recommended to use ArrayDeque for stack implementation as it is more efficient in a single-threaded environment.']","['Java Collection framework provides a Stack class that models and implements a Stack data structure. The class is based on the basic principle of last-in-first-out. In addition to the basic push and pop operations, the class provides three more functions of empty, search, and peek. The class can also be said to extend Vector and treats the class as a stack with the five mentioned functions. The class can also be referred to as the subclass of Vector.\xa0The below diagram shows the hierarchy of the Stack class:\xa0']","['// Java code for stack implementation import java.io.*;import java.util.*; class Test{      // Pushing element on the top of the stack    static void stack_push(Stack<Integer> stack)    {        for(int i = 0; i < 5; i++)        {            stack.push(i);        }    }         // Popping element from the top of the stack    static void stack_pop(Stack<Integer> stack)    {        System.out.println(""Pop Operation:"");         for(int i = 0; i < 5; i++)        {            Integer y = (Integer) stack.pop();            System.out.println(y);        }    }     // Displaying element on the top of the stack    static void stack_peek(Stack<Integer> stack)    {        Integer element = (Integer) stack.peek();        System.out.println(""Element on stack top: "" + element);    }         // Searching element in the stack    static void stack_search(Stack<Integer> stack, int element)    {        Integer pos = (Integer) stack.search(element);         if(pos == -1)            System.out.println(""Element not found"");        else            System.out.println(""Element is found at position: "" + pos);    }      public static void main (String[] args)    {        Stack<Integer> stack = new Stack<Integer>();         stack_push(stack);        stack_pop(stack);        stack_push(stack);        stack_peek(stack);        stack_search(stack, 2);        stack_search(stack, 6);    }}', '// Java program to add the// elements in the stackimport java.io.*;import java.util.*; class StackDemo {         // Main Method    public static void main(String[] args)    {         // Default initialization of Stack        Stack stack1 = new Stack();         // Initialization of Stack        // using Generics        Stack<String> stack2 = new Stack<String>();         // pushing the elements        stack1.push(4);        stack1.push(""All"");        stack1.push(""Geeks"");         stack2.push(""Geeks"");        stack2.push(""For"");        stack2.push(""Geeks"");           // Printing the Stack Elements        System.out.println(stack1);        System.out.println(stack2);    }}', '// Java program to demonstrate the accessing// of the elements from the stackimport java.util.*;import java.io.*; public class StackDemo {       // Main Method    public static void main(String args[])    {        // Creating an empty Stack        Stack<String> stack = new Stack<String>();         // Use push() to add elements into the Stack        stack.push(""Welcome"");        stack.push(""To"");        stack.push(""Geeks"");        stack.push(""For"");        stack.push(""Geeks"");         // Displaying the Stack        System.out.println(""Initial Stack: "" + stack);         // Fetching the element at the head of the Stack        System.out.println(""The element at the top of the""                           + "" stack is: "" + stack.peek());         // Displaying the Stack after the Operation        System.out.println(""Final Stack: "" + stack);    }}', '// Java program to demonstrate the removing// of the elements from the stackimport java.util.*;import java.io.*; public class StackDemo {    public static void main(String args[])    {        // Creating an empty Stack        Stack<Integer> stack = new Stack<Integer>();         // Use add() method to add elements        stack.push(10);        stack.push(15);        stack.push(30);        stack.push(20);        stack.push(5);         // Displaying the Stack        System.out.println(""Initial Stack: "" + stack);         // Removing elements using pop() method        System.out.println(""Popped element: ""                           + stack.pop());        System.out.println(""Popped element: ""                           + stack.pop());         // Displaying the Stack after pop operation        System.out.println(""Stack after pop operation ""                           + stack);    }}', ""// A Java Program to show implementation// of Stack using ArrayDeque import java.util.*; class GFG {    public static void main (String[] args) {        Deque<Character> stack = new ArrayDeque<Character>();        stack.push('A');        stack.push('B');        System.out.println(stack.peek());        System.out.println(stack.pop());    }}""]","['public class Stack<E> extends Vector<E>', 'Pop Operation:\n4\n3\n2\n1\n0\nElement on stack top: 4\nElement is found at position: 3\nElement not found', '[4, All, Geeks]\n[Geeks, For, Geeks]', 'Initial Stack: [Welcome, To, Geeks, For, Geeks]\nThe element at the top of the stack is: Geeks\nFinal Stack: [Welcome, To, Geeks, For, Geeks]', 'Initial Stack: [10, 15, 30, 20, 5]\nPopped element: 5\nPopped element: 20\nStack after pop operation [10, 15, 30]', 'B\nB']","['empty()|||It returns true if nothing is on the top of the stack. Else, returns false.&&&peek()|||Returns the element on the top of the stack, but does not remove it.\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(""1b4172cd-acc7-4363-9184-3fadd3cdabcf"");\n                          });\n                        &&&pop()|||Removes and returns the top element of the stack. An ‘EmptyStackException’\xa0An exception is thrown if we call pop() when the invoking stack is empty.&&&push(Object element)|||Pushes an element on the top of the stack.&&&search(Object element)|||It determines whether an object exists in the stack. If the element is found,It returns the position of the element from the top of the stack. Else, it returns -1.', 'add(Object obj)|||Appends the specified element to the end of this Vector.&&&add(int index, Object obj)|||Inserts the specified element at the specified position in this Vector.&&&addAll(Collection c)|||Appends all of the elements in the specified Collection to the end of this Vector,\xa0in the order that they are returned by the specified Collection’s Iterator.&&&addAll(int index, Collection c)|||Inserts all the elements in the specified Collection into this Vector at the specified position.&&&addElement(Object o)|||Adds the specified component to the end of this vector, increasing its size by one.&&&capacity()|||Returns the current capacity of this vector.&&&clear()|||Removes all the elements from this Vector.&&&clone()|||Returns a clone of this vector.&&&contains(Object o)|||Returns true if this vector contains the specified element.&&&containsAll(Collection c)|||Returns true if this Vector contains all the elements in the specified Collection.&&&copyInto(Object []array)|||Copies the components of this vector into the specified array.&&&elementAt(int index)|||Returns the component at the specified index.&&&elements()|||Returns an enumeration of the components of this vector.&&&ensureCapacity(int minCapacity)|||Increases the capacity of this vector, if necessary, to ensure that it can hold\xa0at least the number of components specified by the minimum capacity argument.&&&equals()|||Compares the specified Object with this Vector for equality.&&&firstElement()|||Returns the first component (the item at index 0) of this vector.&&&get(int index)|||Returns the element at the specified position in this Vector.&&&hashCode()|||Returns the hash code value for this Vector.&&&indexOf(Object o)|||Returns the index of the first occurrence of the specified element in this vector, or -1\xa0if this vector does not contain the element.&&&indexOf(Object o, int index)|||Returns the index of the first occurrence of the specified element in this vector, searching forwards from the index, or returns -1 if the element is not found.&&&insertElementAt(Object o, int index)|||Inserts the specified object as a component in this vector at the specified index.&&&isEmpty()|||Tests if this vector has no components.&&&iterator()|||Returns an iterator over the elements in this list in proper sequence.&&&lastElement()|||Returns the last component of the vector.&&&lastIndexOf(Object o)|||Returns the index of the last occurrence of the specified element in this vector, or -1\xa0If this vector does not contain the element.&&&lastIndexOf(Object o, int index)|||Returns the index of the last occurrence of the specified element in this vector,\xa0searching backward from the index, or returns -1 if the element is not found.&&&listIterator()|||Returns a list iterator over the elements in this list (in proper sequence).&&&listIterator(int index)|||Returns a list iterator over the elements in this list (in proper sequence),\xa0starting at the specified position in the list.&&&remove(int index)|||Removes the element at the specified position in this Vector.&&&remove(Object o)|||Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged.&&&removeAll(Collection c)|||Removes from this Vector all of its elements that are contained in the specified Collection.&&&removeAllElements()|||Removes all components from this vector and sets its size to zero.&&&removeElement(Object o)|||Removes the first (lowest-indexed) occurrence of the argument from this vector.&&&removeElementAt(int index)|||Deletes the component at the specified index.&&&removeRange(int fromIndex, int toIndex)|||Removes from this list all the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.&&&retainAll(Collection c)|||Retains only the elements in this Vector that are contained in the specified Collection.&&&set(int index, Object o)|||Replaces the element at the specified position in this Vector with the specified element.&&&setElementAt(Object o, int index)|||Sets the component at the specified index of this vector to be the specified object.&&&setSize(int newSize)|||Sets the size of this vector.&&&size()|||Returns the number of components in this vector.&&&subList(int fromIndex, int toIndex)|||Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive.&&&toArray()|||Returns an array containing all of the elements in this Vector in the correct order.&&&toArray(Object []array)|||Returns an array containing all of the elements in this Vector in the correct order; the runtime\xa0type of the returned array is that of the specified array.&&&toString()|||Returns a string representation of this Vector, containing the String representation of each element.&&&trimToSize()|||Trims the capacity of this vector to be the vector’s current size.']",['Serializable: It is a marker interface that classes must implement if they are to be serialized and deserialized.|||Cloneable: This is an interface in Java which needs to be implemented by a class to allow its objects to be cloned.|||Iterable<E>: This interface represents a collection of objects which is iterable — meaning which can be iterated.|||Collection<E>: A Collection represents a group of objects known as its elements. The Collection interface is used to pass around collections of objects where maximum generality is desired.|||List<E>: The List interface provides a way to store the ordered collection. It is a child interface of Collection.|||RandomAccess: This is a marker interface used by List implementations to indicate that they support fast (generally constant time) random access.']
68,['LinkedList in Java'],"['Constructors in the LinkedList', 'Methods for Java LinkedList', 'Java', 'Performing Various Operations on LinkedList', 'Java', 'Java', 'Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/uploads/20200624224531/List-ArrayList-in-Java-In-Depth-Study.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/data-structures/linked-list/', 'https://www.geeksforgeeks.org/doubly-linked-list/', 'https://www.geeksforgeeks.org/java-util-linkedlist-add-method-in-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-add-method-in-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-addall-method-in-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-addall-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-addfirst-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-addlast-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-clear-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-clone-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-contains-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-descendingiterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/linkedlist-element-method-in-java-with- examples/', 'https://www.geeksforgeeks.org/linkedlist-get-method-in-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-get-getfirst-getlast-java/', 'https://www.geeksforgeeks.org/linkedlist-getlast-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-indexof-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-lastindexof-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-listiterator-method-in-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-offer-offerfirst-offerlast-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-offer-offerfirst-offerlast-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-offer-offerfirst-offerlast-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-peek-peekfirst-peeklast-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-peek-peekfirst-peeklast-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-peek-peekfirst-peeklast-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-poll-pollfirst-polllast- examples-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-poll-pollfirst-polllast- examples-java/', 'https://www.geeksforgeeks.org/java-util-linkedlist-poll-pollfirst-polllast- examples-java/', 'https://www.geeksforgeeks.org/linkedlist-pop-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-push-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-remove-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-remove-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-remove-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-removefirst-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-removefirstoccurrence-method-in- java/', 'https://www.geeksforgeeks.org/linkedlist-removelast-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-removelastoccurrence-method-in-java-with-example/', 'https://www.geeksforgeeks.org/linkedlist-set-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-size-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-spliterator-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-toarray-method-in-java-with-example/', 'https://www.geeksforgeeks.org/linkedlist-toarray-method-in-java-with-example/', 'https://media.geeksforgeeks.org/wp-content/uploads/20200624224531/List-ArrayList-in-Java-In-Depth-Study.png', 'https://www.geeksforgeeks.org/abstractlist-in-java-with-examples/', 'https://www.geeksforgeeks.org/copyonwritearraylist-in-java/', 'https://www.geeksforgeeks.org/abstractsequentiallist-in-java-with-examples/', 'https://www.geeksforgeeks.org/java-util-linkedlist-add-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-set-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-remove-method-in-java/', 'https://www.geeksforgeeks.org/linkedlist-get-method-in-java/', 'https://practice.geeksforgeeks.org/courses/dsa-self-paced?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=gfg_article_dsa_content_bottom']","['How Does LinkedList work Internally?', 'Let us see how to perform some basic operations on LinkedList to understand it better as follows:', 'Operation 1: Adding Elements', 'Operation 2: Changing Elements', 'Operation 3: Removing Elements', 'Operation 4: Iterating the LinkedList']","['In order to create a LinkedList, we need to create an object of the LinkedList class. The LinkedList class consists of various constructors that allow the possible creation of the list. The following are the constructors available in this class:\xa0', '1. LinkedList(): This constructor is used to create an empty linked list. If we wish to create an empty LinkedList with the name ll, then, it can be created as:\xa0', '2. LinkedList(Collection C): This constructor is used to create an ordered list that contains all the elements of a specified collection, as returned by the collection’s iterator. If we wish to create a LinkedList with the name ll, then, it can be created as:\xa0', 'In the above illustration, AbstractList, CopyOnWriteArrayList, and the AbstractSequentialList are the classes that implement the list interface. A separate functionality is implemented in each of the mentioned classes. They are:', 'In order to add an element to an ArrayList, we can use the add() method. This method is overloaded to perform multiple operations based on different parameters. They are:\xa0\xa0', 'After adding the elements, if we wish to change the element, it can be done using the set() method. Since a LinkedList is indexed, the element which we wish to change is referenced by the index of the element. Therefore, this method takes an index and the updated element which needs to be inserted at that index.', 'In order to remove an element from a LinkedList, we can use the remove() method. This method is overloaded to perform multiple operations based on different parameters. They are:\xa0', 'There are multiple ways to iterate through LinkedList. The most famous ways are by using the basic for loop in combination with a get() method to get the element at a specific index and the advanced for-loop.']","['Linked List is a part of the Collection framework present in java.util package. This class is an implementation of the LinkedList data structure which is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses. Each element is known as a node. Due to the dynamicity and ease of insertions and deletions, they are preferred over the arrays. It also has a few disadvantages like the nodes cannot be accessed directly instead we need to start from the head and follow through the link to reach a node we wish to access.', 'Since a LinkedList acts as a dynamic array and we do not have to specify the size while creating it, the size of the list automatically increases when we dynamically add and remove items. And also, the elements are not stored in a continuous fashion. Therefore, there is no need to increase the size. Internally, the LinkedList is implemented using the doubly linked list data structure. The main difference between a normal linked list and a doubly LinkedList is that a doubly linked list contains an extra pointer, typically called the previous pointer, together with the next pointer and data which are there in the singly linked list.\xa0\xa0']","['// Java Program to Demonstrate// Implementation of LinekdList// class // Importing required classesimport java.util.*; // Main classpublic class GFG {     // Main driver method    public static void main(String args[])    {        // Creating object of the        // class linked list        LinkedList<String> ll = new LinkedList<String>();         // Adding elements to the linked list        ll.add(""A"");        ll.add(""B"");        ll.addLast(""C"");        ll.addFirst(""D"");        ll.add(2, ""E"");         System.out.println(ll);         ll.remove(""B"");        ll.remove(3);        ll.removeFirst();        ll.removeLast();         System.out.println(ll);    }}', '// Java program to add elements// to a LinkedList   import java.util.*;   public class GFG {       public static void main(String args[])    {        LinkedList<String> ll = new LinkedList<>();           ll.add(""Geeks"");        ll.add(""Geeks"");        ll.add(1, ""For"");           System.out.println(ll);    }}', '// Java program to change elements// in a LinkedList   import java.util.*;   public class GFG {       public static void main(String args[])    {        LinkedList<String> ll = new LinkedList<>();           ll.add(""Geeks"");        ll.add(""Geeks"");        ll.add(1, ""Geeks"");           System.out.println(""Initial LinkedList "" + ll);           ll.set(1, ""For"");           System.out.println(""Updated LinkedList "" + ll);    }}', '// Java program to remove elements// in a LinkedList   import java.util.*;   public class GFG {       public static void main(String args[])    {        LinkedList<String> ll = new LinkedList<>();           ll.add(""Geeks"");        ll.add(""Geeks"");        ll.add(1, ""For"");           System.out.println(            ""Initial LinkedList "" + ll);           ll.remove(1);           System.out.println(            ""After the Index Removal "" + ll);           ll.remove(""Geeks"");           System.out.println(            ""After the Object Removal "" + ll);    }}', '// Java program to iterate the elements// in an LinkedList   import java.util.*;   public class GFG {       public static void main(String args[])    {        LinkedList<String> ll            = new LinkedList<>();           ll.add(""Geeks"");        ll.add(""Geeks"");        ll.add(1, ""For"");           // Using the Get method and the        // for loop        for (int i = 0; i < ll.size(); i++) {               System.out.print(ll.get(i) + "" "");        }           System.out.println();           // Using the for each loop        for (String str : ll)            System.out.print(str + "" "");    }}']","['LinkedList ll = new LinkedList();', 'LinkedList ll = new LinkedList(C);', '[D, A, E, B, C]\n[A]', '[Geeks, For, Geeks]', 'Initial LinkedList [Geeks, Geeks, Geeks]\nUpdated LinkedList [Geeks, For, Geeks]', 'Initial LinkedList [Geeks, For, Geeks]\nAfter the Index Removal [Geeks, Geeks]\nAfter the Object Removal [Geeks]', 'Geeks For Geeks \nGeeks For Geeks']","['add(int index, E element)|||This method Inserts the specified element at the specified position in this list.&&&add(E e)|||This method Appends the specified element to the end of this list.&&&addAll(int index, Collection<E> c)|||This method Inserts all of the elements in the specified collection into this list, starting at the specified position.&&&addAll(Collection<E> c)|||This method Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection’s iterator.&&&addFirst(E e)|||This method Inserts the specified element at the beginning of this list.&&&addLast(E e)|||This method Appends the specified element to the end of this list.&&&clear()|||This method removes all of the elements from this list.&&&clone()|||This method returns a shallow copy of this LinkedList.&&&contains(Object o)|||This method returns true if this list contains the specified element.&&&descendingIterator()|||This method returns an iterator over the elements in this deque in reverse sequential order.&&&element()|||This method retrieves but does not remove, the head (first element) of this list.&&&get(int index)|||This method returns the element at the specified position in this list.&&&getFirst()|||This method returns the first element in this list.&&&getLast()|||This method returns the last element in this list.&&&indexOf(Object o)|||This method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.&&&lastIndexOf(Object o)|||This method returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.&&&listIterator(int index)|||This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.&&&offer(E e)|||This method Adds the specified element as the tail (last element) of this list.&&&offerFirst(E e)|||This method Inserts the specified element at the front of this list.&&&offerLast(E e)|||This method Inserts the specified element at the end of this list.&&&peek()|||This method retrieves but does not remove, the head (first element) of this list.&&&peekFirst()|||This method retrieves, but does not remove, the first element of this list, or returns null if this list is empty.&&&peekLast()|||This method retrieves, but does not remove, the last element of this list, or returns null if this list is empty.&&&poll()|||This method retrieves and removes the head (first element) of this list.&&&pollFirst()|||This method retrieves and removes the first element of this list, or returns null if this list is empty.&&&pollLast()|||This method retrieves and removes the last element of this list, or returns null if this list is empty.&&&pop()|||This method Pops an element from the stack represented by this list.&&&push(E e)|||This method pushes an element onto the stack represented by this list.&&&remove()|||This method retrieves and removes the head (first element) of this list.&&&remove(int index)|||This method removes the element at the specified position in this list.&&&remove(Object o)|||This method removes the first occurrence of the specified element from this list if it is present.&&&removeFirst()|||This method removes and returns the first element from this list.&&&removeFirstOccurrence(Object o)|||This method removes the first occurrence of the specified element in this list (when traversing the list from head to tail).&&&removeLast()|||This method removes and returns the last element from this list.&&&removeLastOccurrence(Object o)|||This method removes the last occurrence of the specified element in this list (when traversing the list from head to tail).&&&set(int index, E element)|||This method replaces the element at the specified position in this list with the specified element.&&&size()|||This method returns the number of elements in this list.&&&spliterator()|||This method creates a late-binding and fail-fast Spliterator over the elements in this list.&&&toArray()|||This method returns an array containing all of the elements in this list in proper sequence (from first to last element).&&&toArray(T[] a)|||This method returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.&&&toString()|||This method returns a string containing all of the elements in this list in proper sequence (from first to the last element), each element is separated by commas and the String is enclosed in square brackets.']","['add(Object): This method is used to add an element at the end of the LinkedList.|||add(int index, Object): This method is used to add an element at a specific index in the LinkedList.&&&remove(Object): This method is used to simply remove an object from the LinkedList. If there are multiple such objects, then the first occurrence of the object is removed.|||remove(int index): Since a LinkedList is indexed, this method takes an integer value which simply removes the element present at that specific index in the LinkedList. After removing the element and the indices of elements are updated so do the object of LinkedList is updated giving a new List after the deletion of element/s.&&&&&&AbstractList: This class is used to implement an unmodifiable list, for which one needs to only extend this AbstractList Class and implement only the get() and the size() methods.|||CopyOnWriteArrayList: This class implements the list interface. It is an enhanced version of ArrayList in which all the modifications(add, set, remove, etc.) are implemented by making a fresh copy of the list.&&&Adding elements|||Updating elements|||Removing elements|||Iterating over elements&&&']"
69,['Queue Interface In Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']","['Operations on Queue Interface', 'Classes which implement the Queue Interface:', 'Methods of Queue Interface']",['https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200903183026/Queue-Deque-PriorityQueue-In-Java.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/priority-queue-class-in-java-2/', 'https://www.geeksforgeeks.org/linked-list-in-java/', 'https://www.geeksforgeeks.org/priorityblockingqueue-class-in-java/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/generics-in-java/', 'https://www.geeksforgeeks.org/priority-queue-class-in-java-2/', 'https://www.geeksforgeeks.org/queue-add-method-in-java/', 'https://www.geeksforgeeks.org/queue-remove-method-in-java/', 'https://www.geeksforgeeks.org/linked-list-in-java/', 'https://www.geeksforgeeks.org/priority-queue-class-in-java-2/', 'https://www.geeksforgeeks.org/priority-queue-class-in-java-2/', 'https://www.geeksforgeeks.org/linked-list-in-java/', 'https://www.geeksforgeeks.org/data-structures/linked-list/', 'https://www.geeksforgeeks.org/priorityblockingqueue-class-in-java/', 'https://www.geeksforgeeks.org/priority-queue-class-in-java-2/', 'https://www.geeksforgeeks.org/understanding-outofmemoryerror-exception-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/list-addint-index-e-element-method-in-java/', 'https://www.geeksforgeeks.org/list-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-size-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-clear-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-removeint-index-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-get-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraylist-set-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-indexof-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-lastindexof-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/list-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/comparator-interface-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Declaration: The Queue interface is declared as:', 'public interface Queue extends Collection\xa0\xa0', 'Example of a Queue:', 'Characteristics of a Queue: The following are the characteristics of the queue:', 'Description']","['The Queue interface present in the java.util package and extends the Collection interface is used to hold the elements about to be processed in FIFO(First In First Out) order. It is an ordered list of objects with its use limited to insert elements at the end of the list and deleting elements from the start of the list, (i.e.), it follows the FIFO or the First-In-First-Out principle.', 'Being an interface the queue needs a concrete class for the declaration and the most common classes are the PriorityQueue and LinkedList in Java. Note that neither of these implementations are thread safe. PriorityBlockingQueue is one alternative implementation if thread safe implementation is needed.', 'Creating Queue ObjectsSince Queue is an interface, objects cannot be created of the type queue. We always need a class which extends this list in order to create an object. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the Queue. This type-safe queue can be defined as:', '// Obj is the type of the object to be stored in Queue\xa0Queue<Obj> queue = new PriorityQueue<Obj> ();\xa0\xa0', 'Let’s see how to perform a few frequently used operations on the queue using the Priority Queue class.1. Adding Elements: In order to add an element in a queue, we can use the add() method. The insertion order is not retained in the PriorityQueue. The elements are stored based on the priority order which is ascending by default.\xa0', '2. Removing Elements: In order to remove an element from a queue, we can use the remove() method. If there are multiple such objects, then the first occurrence of the object is removed. Apart from that, poll() method is also used to remove the head and return it.\xa0', '3. Iterating the Queue: There are multiple ways to iterate through the Queue. The most famous way is converting the queue to the array and traversing using the for loop. However, the queue also has an inbuilt iterator which can be used to iterate through the queue.\xa0', 'The queue interface inherits all the methods present in the collections interface while implementing the following methods:\xa0']","['1. PriorityQueue: PriorityQueue class which is implemented in the collection framework provides us a way to process the objects based on the priority. It is known that a queue follows First-In-First-Out algorithm, but sometimes the elements of the queue are needed to be processed according to the priority, that’s when the PriorityQueue comes into play. Let’s see how to create a queue object using this class.', '2. LinkedList: LinkedList is a class which is implemented in the collection framework which inherently implements the linked list data structure. It is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses. Each element is known as a node. Due to the dynamicity and ease of insertions and deletions, they are preferred over the arrays or queues. Let’s see how to create a queue object using this class.', '3. PriorityBlockingQueue: It is to be noted that both the implementations, the PriorityQueue and LinkedList are not thread-safe. PriorityBlockingQueue is one alternative implementation if thread-safe implementation is needed. PriorityBlockingQueue is an unbounded blocking queue that uses the same ordering rules as class PriorityQueue and supplies blocking retrieval operations.\xa0Since it is unbounded, adding elements may sometimes fail due to resource exhaustion resulting in OutOfMemoryError. Let’s see how to create a queue object using this class.']","['// Java program to demonstrate a Queue import java.util.LinkedList;import java.util.Queue; public class QueueExample {     public static void main(String[] args)    {        Queue<Integer> q            = new LinkedList<>();         // Adds elements {0, 1, 2, 3, 4} to        // the queue        for (int i = 0; i < 5; i++)            q.add(i);         // Display contents of the queue.        System.out.println(""Elements of queue ""                           + q);         // To remove the head of queue.        int removedele = q.remove();        System.out.println(""removed element-""                           + removedele);         System.out.println(q);         // To view the head of queue        int head = q.peek();        System.out.println(""head of queue-""                           + head);         // Rest all methods of collection        // interface like size and contains        // can be used with this        // implementation.        int size = q.size();        System.out.println(""Size of queue-""                           + size);    }}', '// Java program to add elements// to a Queue import java.util.*; public class GFG {     public static void main(String args[])    {        Queue<String> pq = new PriorityQueue<>();         pq.add(""Geeks"");        pq.add(""For"");        pq.add(""Geeks"");         System.out.println(pq);    }}', '// Java program to remove elements// from a Queue import java.util.*; public class GFG {     public static void main(String args[])    {        Queue<String> pq = new PriorityQueue<>();         pq.add(""Geeks"");        pq.add(""For"");        pq.add(""Geeks"");         System.out.println(""Initial Queue "" + pq);         pq.remove(""Geeks"");         System.out.println(""After Remove "" + pq);         System.out.println(""Poll Method "" + pq.poll());         System.out.println(""Final Queue "" + pq);    }}', '// Java program to iterate elements// to a Queue import java.util.*; public class GFG {     public static void main(String args[])    {        Queue<String> pq = new PriorityQueue<>();         pq.add(""Geeks"");        pq.add(""For"");        pq.add(""Geeks"");         Iterator iterator = pq.iterator();         while (iterator.hasNext()) {            System.out.print(iterator.next() + "" "");        }    }}', '// Java program to demonstrate the// creation of queue object using the// PriorityQueue class import java.util.*; class GfG {     public static void main(String args[])    {        // Creating empty priority queue        Queue<Integer> pQueue            = new PriorityQueue<Integer>();         // Adding items to the pQueue        // using add()        pQueue.add(10);        pQueue.add(20);        pQueue.add(15);         // Printing the top element of        // the PriorityQueue        System.out.println(pQueue.peek());         // Printing the top element and removing it        // from the PriorityQueue container        System.out.println(pQueue.poll());         // Printing the top element again        System.out.println(pQueue.peek());    }}', '// Java program to demonstrate the// creation of queue object using the// LinkedList class import java.util.*; class GfG {     public static void main(String args[])    {        // Creating empty LinkedList        Queue<Integer> ll            = new LinkedList<Integer>();         // Adding items to the ll        // using add()        ll.add(10);        ll.add(20);        ll.add(15);         // Printing the top element of        // the LinkedList        System.out.println(ll.peek());         // Printing the top element and removing it        // from the LinkedList container        System.out.println(ll.poll());         // Printing the top element again        System.out.println(ll.peek());    }}', '// Java program to demonstrate the// creation of queue object using the// PriorityBlockingQueue class import java.util.concurrent.PriorityBlockingQueue;import java.util.*; class GfG {    public static void main(String args[])    {        // Creating empty priority        // blocking queue        Queue<Integer> pbq            = new PriorityBlockingQueue<Integer>();         // Adding items to the pbq        // using add()        pbq.add(10);        pbq.add(20);        pbq.add(15);         // Printing the top element of        // the PriorityBlockingQueue        System.out.println(pbq.peek());         // Printing the top element and        // removing it from the        // PriorityBlockingQueue        System.out.println(pbq.poll());         // Printing the top element again        System.out.println(pbq.peek());    }}']","['Elements of queue [0, 1, 2, 3, 4]\nremoved element-0\n[1, 2, 3, 4]\nhead of queue-1\nSize of queue-4', '[For, Geeks, Geeks]', 'Initial Queue [For, Geeks, Geeks]\nAfter Remove [For, Geeks]\nPoll Method For\nFinal Queue [Geeks]', 'For Geeks Geeks', '10\n10\n15', '10\n10\n20', '10\n10\n15']","['add(int index, element)|||This method is used to add an element at a particular index in the list. When a single parameter is passed, it simply adds the element at the end of the list.&&&addAll(int index, Collection collection)|||This method is used to add all the elements in the given collection to the list. When a single parameter is passed, it adds all the elements of the given collection at the end of the list.&&&size()|||This method is used to return the size of the list.&&&clear()|||This method is used to remove all the elements in the list. However, the reference of the list created is still stored.&&&remove(int index)|||This method removes an element from the specified index. It shifts subsequent elements(if any) to left and decreases their indexes by 1.&&&remove(element)|||This method is used to remove the first occurrence of the given element in the list.&&&get(int index)|||This method returns elements at the specified index.&&&set(int index, element)|||This method replaces elements at a given index with the new element. This function returns the element which was just replaced by a new element.&&&indexOf(element)|||This method returns the first occurrence of the given element or -1 if the element is not present in the list.&&&lastIndexOf(element)|||This method returns the last occurrence of the given element or -1 if the element is not present in the list.&&&equals(element)|||This method is used to compare the equality of the given element with the elements of the list.&&&hashCode()|||This method is used to return the hashcode value of the given list.&&&isEmpty()|||This method is used to check if the list is empty or not. It returns true if the list is empty, else false.&&&contains(element)|||This method is used to check if the list contains the given element or not. It returns true if the list contains the element.&&&containsAll(Collection collection)|||This method is used to check if the list contains all the collection of elements.&&&sort(Comparator comp)|||This method is used to sort the elements of the list on the basis of the given comparator.']","['The Queue is used to insert elements at the end of the queue and removes from the beginning of the queue. It follows FIFO concept.|||The Java Queue supports all methods of Collection interface including insertion, deletion, etc.|||LinkedList, ArrayBlockingQueue and PriorityQueue are the most frequently used implementations.|||If any null operation is performed on BlockingQueues, NullPointerException is thrown.|||The Queues which are available in java.util package are Unbounded Queues.|||The Queues which are available in java.util.concurrent package are the Bounded Queues.|||All Queues except the Deques supports insertion and removal at the tail and head of the queue respectively. The Deques support element insertion and removal at both ends.']"
70,['PriorityQueue in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']","['Operations on PriorityQueue', 'Methods in PriorityQueue class', 'Methods Declared in class java.util.AbstractQueue', 'Methods Declared in class java.util.AbstractCollection', 'Methods Declared in interface java.util.Collection', 'Methods Declared in interface java.util.Queue']","['https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200903183026/Queue-Deque-PriorityQueue-In-Java.png', 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/Priority-Queue-min-1024x512.png']",[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/queue-interface-java/', 'https://www.geeksforgeeks.org/queue-interface-java/', 'https://www.geeksforgeeks.org/priorityblockingqueue-class-in-java/#:~:text=PriorityBlockingQueue%20is%20an%20unbounded%20blocking,and%20supplies%20blocking%20retrieval%20operations.&text=PriorityBlockingQueue%20class%20and%20its%20iterator,the%20Collection%20and%20Iterator%20interfaces.', 'https://www.geeksforgeeks.org/blockingqueue-interface-in-java/#:~:text=Methods%20in%20Blocking%20Queue%20Interface&text=Removes%20all%20available%20elements%20from,them%20to%20the%20given%20collection.&text=Removes%20at%20most%20the%20given,them%20to%20the%20given%20collection.', 'https://www.geeksforgeeks.org/priorityqueue-add-method-in-java/', 'https://www.geeksforgeeks.org/queue-peek-method-in-java/', 'https://www.geeksforgeeks.org/queue-poll-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-add-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-remove-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-add-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-clear-method-in-java/#:~:text=clear()%20method%20is%20used,only%20empty%20an%20existing%20PriorityQueue.', 'https://www.geeksforgeeks.org/priorityqueue-comparator-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-contains-method-in-java/#:~:text=PriorityQueue.,any%20particular%20element%20or%20not.&text=Return%20Value%3A%20The%20method%20returns,queue%20otherwise%20it%20returns%20False.', 'https://www.geeksforgeeks.org/priorityqueue-iterator-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-offer-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-remove-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-spliterator-method-in-java/', 'https://www.geeksforgeeks.org/priorityqueue-toarray-method-in-java/#:~:text=toArray(arr%5B%5D)%20method%20in,the%20previous%20method%20without%20parameters.', 'https://www.geeksforgeeks.org/priorityqueue-toarray-method-in-java/#:~:text=toArray(arr%5B%5D)%20method%20in,the%20previous%20method%20without%20parameters.', 'https://www.geeksforgeeks.org/abstractqueue-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractqueue-element-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractqueue-remove-method-in-java-with-examples/#:~:text=The%20remove()%20method%20of,the%20head%20of%20this%20queue.&text=Parameters%3A%20This%20method%20does%20not,if%20the%20queue%20is%20empty.', 'https://www.geeksforgeeks.org/abstractcollection-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-isempty-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-tostring-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/queue-peek-method-in-java/', 'https://www.geeksforgeeks.org/queue-poll-method-in-java/', 'https://www.geeksforgeeks.org/dijkstras-algorithm-for-adjacency-list-representation-greedy-algo-8/', 'https://www.geeksforgeeks.org/prims-algorithm-using-priority_queue-stl/', 'https://www.geeksforgeeks.org/maximize-array-sum-k-negations-set-2/', 'https://www.geeksforgeeks.org/java-util-priorityqueue-class-java/', 'https://www.geeksforgeeks.org/implement-priorityqueue-comparator-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['In the below priority queue, an element with maximum ASCII value will have the highest priority.', 'Declaration:', 'The class implements Serializable, Iterable<E>, Collection<E>, Queue<E> interfaces.', 'Few important points on Priority Queue are as follows:\xa0', 'Constructors:', 'PriorityQueue<E> pq = new PriorityQueue<E>();', 'PriorityQueue<E> pq = new PriorityQueue<E>(Collection<E> c);', 'PriorityQueue<E> pq = new PriorityQueue<E>(int initialCapacity);', 'PriorityQueue<E> pq = new PriorityQueue(int initialCapacity, Comparator<E> comparator);', 'PriorityQueue<E> pq = new PriorityQueue(PriorityQueue<E> c);', 'PriorityQueue<E> pq = new PriorityQueue<E>(SortedSet<E> c);', 'The example below explains the following basic operations of the priority queue.', 'Let’s see how to perform a few frequently used operations on the Priority Queue class.', 'Applications:\xa0', 'Related Articles:\xa0']","['1. PriorityQueue(): Creates a PriorityQueue with the default initial capacity (11) that orders its elements according to their natural ordering.', '2. PriorityQueue(Collection<E> c): Creates a PriorityQueue containing the elements in the specified collection.', '3. PriorityQueue(int initialCapacity): Creates a PriorityQueue with the specified initial capacity that orders its elements according to their natural ordering.', '4. PriorityQueue(int initialCapacity, Comparator<E> comparator): Creates a PriorityQueue with the specified initial capacity that orders its elements according to the specified comparator.', '5. PriorityQueue(PriorityQueue<E> c): Creates a PriorityQueue containing the elements in the specified priority queue.', '6. PriorityQueue(SortedSet<E> c): Creates a PriorityQueue containing the elements in the specified sorted set.', '1. Adding Elements: In order to add an element in a priority queue, we can use the add() method. The insertion order is not retained in the PriorityQueue. The elements are stored based on the priority order which is ascending by default.', '2. Removing Elements: In order to remove an element from a priority queue, we can use the remove() method. If there are multiple such objects, then the first occurrence of the object is removed. Apart from that, the poll() method is also used to remove the head and return it.', '3. Accessing the elements: Since Queue follows the First In First Out principle, we can access only the head of the queue. To access elements from a priority queue, we can use the peek() method.\xa0', '4. Iterating the PriorityQueue: There are multiple ways to iterate through the PriorityQueue. The most famous way is converting the queue to the array and traversing using the for loop. However, the queue also has an inbuilt iterator which can be used to iterate through the queue.', 'This article is contributed by Mehak Kumar. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['A PriorityQueue is used when the objects are supposed to be processed based on the priority. It is known that a Queue follows the First-In-First-Out algorithm, but sometimes the elements of the queue are needed to be processed according to the priority, that’s when the PriorityQueue comes into play. The PriorityQueue is based on the priority heap. The elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used.\xa0\xa0']","['// Java program to demonstrate the// working of PriorityQueueimport java.util.*;  class PriorityQueueDemo {          // Main Method    public static void main(String args[])    {        // Creating empty priority queue        PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();          // Adding items to the pQueue using add()        pQueue.add(10);        pQueue.add(20);        pQueue.add(15);          // Printing the top element of PriorityQueue        System.out.println(pQueue.peek());          // Printing the top element and removing it        // from the PriorityQueue container        System.out.println(pQueue.poll());          // Printing the top element again        System.out.println(pQueue.peek());    }}', '// Java program to add elements// to a PriorityQueueimport java.util.*;import java.io.*;  public class PriorityQueueDemo {      public static void main(String args[])    {        PriorityQueue<String> pq = new PriorityQueue<>();          pq.add(""Geeks"");        pq.add(""For"");        pq.add(""Geeks"");          System.out.println(pq);    }}', '// Java program to remove elements// from a PriorityQueue  import java.util.*;import java.io.*;  public class PriorityQueueDemo {      public static void main(String args[])    {        PriorityQueue<String> pq = new PriorityQueue<>();          pq.add(""Geeks"");        pq.add(""For"");        pq.add(""Geeks"");          System.out.println(""Initial PriorityQueue "" + pq);            // using the method        pq.remove(""Geeks"");          System.out.println(""After Remove - "" + pq);          System.out.println(""Poll Method - "" + pq.poll());          System.out.println(""Final PriorityQueue - "" + pq);    }}', '// Java program to access elements// from a PriorityQueueimport java.util.*;  class PriorityQueueDemo {          // Main Method    public static void main(String[] args)    {          // Creating a priority queue        PriorityQueue<String> pq = new PriorityQueue<>();        pq.add(""Geeks"");        pq.add(""For"");        pq.add(""Geeks"");        System.out.println(""PriorityQueue: "" + pq);          // Using the peek() method        String element = pq.peek();        System.out.println(""Accessed Element: "" + element);    }}', '// Java program to iterate elements// to a PriorityQueue  import java.util.*;  public class PriorityQueueDemo {        // Main Method    public static void main(String args[])    {        PriorityQueue<String> pq = new PriorityQueue<>();          pq.add(""Geeks"");        pq.add(""For"");        pq.add(""Geeks"");          Iterator iterator = pq.iterator();          while (iterator.hasNext()) {            System.out.print(iterator.next() + "" "");        }    }}']","['public class PriorityQueue<E> extends AbstractQueue<E> implements Serializable\n\nwhere E is the type of elements held in this queue', '10\n10\n15', '[For, Geeks, Geeks]', 'Initial PriorityQueue [For, Geeks, Geeks]\nAfter Remove - [For, Geeks]\nPoll Method - For\nFinal PriorityQueue - [Geeks]', 'PriorityQueue: [For, Geeks, Geeks]\nAccessed Element: For', 'For Geeks Geeks']","['add(E e)|||Inserts the specified element into this priority queue.&&&clear()|||Removes all of the elements from this priority queue.&&&comparator()|||Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the natural ordering of its elements.&&&contains\u200b(Object o)|||Returns true if this queue contains the specified element.&&&forEach\u200b(Consumer<? super E> action)|||Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.&&&iterator()|||Returns an iterator over the elements in this queue.&&&\xa0offer\u200b(E e)|||Inserts the specified element into this priority queue.&&&remove\u200b(Object o)|||Removes a single instance of the specified element from this queue, if it is present.&&&removeAll\u200b(Collection<?> c)|||Removes all of this collection’s elements that are also contained in the specified collection (optional operation).&&&removeIf\u200b(Predicate<? super E> filter)|||Removes all of the elements of this collection that satisfy the given predicate.&&&retainAll\u200b(Collection<?> c)|||Retains only the elements in this collection that are contained in the specified collection (optional operation).&&&spliterator()|||Creates a late-binding and fail-fast Spliterator over the elements in this queue.&&&\xa0toArray()|||Returns an array containing all of the elements in this queue.&&&\xa0toArray\u200b(T[] a)|||Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.', 'addAll(Collection<? extends E> c)|||Adds all of the elements in the specified collection to this queue.&&&element()|||Retrieves, but does not remove, the head of this queue.&&&remove()|||Retrieves and removes the head of this queue.', 'containsAll(Collection<?> c)|||Returns true if this collection contains all of the elements in the specified collection.&&&isEmpty()|||Returns true if this collection contains no elements.&&&toString()|||Returns a string representation of this collection.', 'containsAll(Collection<?> c)|||Returns true if this collection contains all of the elements in the specified collection.&&&equals(Object o)|||Compares the specified object with this collection for equality.&&&hashCode()|||Returns the hash code value for this collection.&&&isEmpty()|||Returns true if this collection contains no elements.&&&parallelStream()|||Returns a possibly parallel Stream with this collection as its source.&&&size()|||Returns the number of elements in this collection.&&&stream()|||Returns a sequential Stream with this collection as its source.&&&toArray(IntFunction<T[]> generator)|||Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.', 'peek()|||Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.&&&poll()|||Retrieves and removes the head of this queue, or returns null if this queue is empty.']","['PriorityQueue doesn’t permit null.|||We can’t create PriorityQueue of Objects that are non-comparable|||PriorityQueue are unbound queues.|||Theheadof this queue is theleastelement with respect to the specified ordering. If multiple elements are tied for least value, the head is one of those elements — ties are broken arbitrarily.|||Since PriorityQueue is not thread-safe, so java provides PriorityBlockingQueue class that implements the BlockingQueue interface to use in java multithreading environment.|||The queue retrieval operationspoll, remove, peek, andelementaccess the element at the head of the queue.|||It provides O(log(n)) time for add and poll methods.|||It inherits methods from AbstractQueue, AbstractCollection, Collection and Object class.&&&boolean add(E element): This method inserts the specified element into this priority queue.|||public peek(): This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.|||public poll(): This method retrieves and removes the head of this queue, or returns null if this queue is empty.&&&Implementing Dijkstra’s and Prim’s algorithms.|||Maximize array sum after K negations&&&Java.util.PriorityQueue class in Java|||Implement PriorityQueue through Comparator in Java']"
71,['Deque interface in Java with Example'],[],"['Operations using the Deque Interface and the ArrayDeque class', 'Methods of Deque Interface']",['https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200903183026/Queue-Deque-PriorityQueue-In-Java.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/queue-interface-java/', 'https://www.geeksforgeeks.org/queue/', 'https://www.geeksforgeeks.org/stack/', 'https://www.geeksforgeeks.org/deque-set-1-introduction-applications/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/generics-in-java/', 'https://www.geeksforgeeks.org/deque-add-method-in-java/', 'https://www.geeksforgeeks.org/deque-addfirst-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/deque-addlast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-in-java/', 'https://www.geeksforgeeks.org/deque-add-method-in-java/', 'https://www.geeksforgeeks.org/deque-addfirst-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/deque-addlast-method-in-java/', 'https://www.geeksforgeeks.org/deque-contains-method-in-java/', 'https://www.geeksforgeeks.org/deque-descendingiterator-method-in-java/', 'https://www.geeksforgeeks.org/deque-element-method-in-java/', 'https://www.geeksforgeeks.org/deque-getfirst-method-in-java/', 'https://www.geeksforgeeks.org/deque-getlast-method-in-java/', 'https://www.geeksforgeeks.org/deque-iterator-method-in-java/', 'https://www.geeksforgeeks.org/deque-offer-method-in-java/', 'https://www.geeksforgeeks.org/deque-offerfirst-method-in-java/', 'https://www.geeksforgeeks.org/deque-offerlast-method-in-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Declaration: The deque interface is declared as:', 'public interface Deque extends Queue', 'Creating Deque Objects', '// Obj is the type of the object to be stored in DequeDeque<Obj> deque = new ArrayDeque<Obj> ();', 'Example of a Deque:', 'Let’s see how to perform a few frequently used operations on the deque using the ArrayDeque class.', 'The class which implements the Deque interface is ArrayDeque.', 'The following are the methods present in the deque interface:']","['The Deque interface present in java.util package is a subtype of the queue interface. The Deque is related to the double-ended queue that supports addition or removal of elements from either end of the data structure. It can either be used as a queue(first-in-first-out/FIFO) or as a stack(last-in-first-out/LIFO). Deque is the acronym for double ended queue.', 'Since Deque is an interface, objects cannot be created of the type deque. We always need a class which extends this list in order to create an object. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the Deque. This type-safe queue can be defined as:', '[Element 6 (Head), Element 4 (Head), Element 2 (Head), Element 1 (Tail), Element 3 (Tail), Element 5 (Tail)]', 'Deque after removing first and last: [Element 4 (Head), Element 2 (Head), Element 1 (Tail), Element 3 (Tail)]', '1. Adding Elements: In order to add an element in a deque, we can use the add() method. The difference between a queue and a deque is that in deque, the addition is possible from any direction. Therefore, there are other two methods available named addFirst() and addLast() which are used to add the elements at either end.', '3. Iterating through the Deque: Since a deque can be iterated from both the directions, the iterator method of the deque interface provides us two ways to iterate. One from the first and the other from the back.']","['2. Removing Elements: In order to remove an element from a deque, there are various methods available. Since we can also remove from both the ends, the deque interface provides us with removeFirst(), removeLast() methods. Apart from that, this interface also provides us with the poll(), pop(), pollFirst(), pollLast() methods where pop() is used to remove and return the head of the deque. However, poll() is used because this offers the same functionality as pop() and doesnt return an exception when the deque is empty.', 'ArrayDeque: ArrayDeque class which is implemented in the collection framework provides us with a way to apply resizable-array. This is a special kind of array that grows and allows users to add or remove an element from both sides of the queue. Array deques have no capacity restrictions and they grow as necessary to support usage. They are not thread-safe which means that in the absence of external synchronization, ArrayDeque does not support concurrent access by multiple threads. ArrayDeque class is likely to be faster than Stack when used as a stack. ArrayDeque class is likely to be faster than LinkedList when used as a queue. Let’s see how to create a queue object using this class.']","['// Java program to demonstrate the working// of a Deque in Java  import java.util.*;  public class DequeExample {    public static void main(String[] args)    {        Deque<String> deque            = new LinkedList<String>();          // We can add elements to the queue        // in various ways          // Add at the last        deque.add(""Element 1 (Tail)"");          // Add at the first        deque.addFirst(""Element 2 (Head)"");          // Add at the last        deque.addLast(""Element 3 (Tail)"");          // Add at the first        deque.push(""Element 4 (Head)"");          // Add at the last        deque.offer(""Element 5 (Tail)"");          // Add at the first        deque.offerFirst(""Element 6 (Head)"");          System.out.println(deque + ""\\n"");          // We can remove the first element        // or the last element.        deque.removeFirst();        deque.removeLast();        System.out.println(""Deque after removing ""                           + ""first and last: ""                           + deque);    }}', '// Java program to demonstrate the// addition of elements in deque  import java.util.*;public class ArrayDequeDemo {    public static void main(String[] args)    {        // Initializing an deque        Deque<String> dq            = new ArrayDeque<String>();          // add() method to insert        dq.add(""For"");        dq.addFirst(""Geeks"");        dq.addLast(""Geeks"");          System.out.println(dq);    }}', '// Java program to demonstrate the// removal of elements in deque  import java.util.*;public class ArrayDequeDemo {    public static void main(String[] args)    {        // Initializing an deque        Deque<String> dq            = new ArrayDeque<String>();          // add() method to insert        dq.add(""For"");        dq.addFirst(""Geeks"");        dq.addLast(""Geeks"");          System.out.println(dq);          System.out.println(dq.pop());          System.out.println(dq.poll());          System.out.println(dq.pollFirst());          System.out.println(dq.pollLast());    }}', '// Java program to demonstrate the// iteration of elements in deque  import java.util.*;public class ArrayDequeDemo {    public static void main(String[] args)    {        // Initializing an deque        Deque<String> dq            = new ArrayDeque<String>();          // add() method to insert        dq.add(""For"");        dq.addFirst(""Geeks"");        dq.addLast(""Geeks"");        dq.add(""is so good"");          for (Iterator itr = dq.iterator();             itr.hasNext();) {            System.out.print(itr.next() + "" "");        }          System.out.println();          for (Iterator itr = dq.descendingIterator();             itr.hasNext();) {            System.out.print(itr.next() + "" "");        }    }}', '// Java program to demonstrate the// creation of deque object using the// ArrayDeque class in Java  import java.util.*;public class ArrayDequeDemo {    public static void main(String[] args)    {        // Initializing an deque        Deque<Integer> de_que            = new ArrayDeque<Integer>(10);          // add() method to insert        de_que.add(10);        de_que.add(20);        de_que.add(30);        de_que.add(40);        de_que.add(50);          System.out.println(de_que);          // clear() method        de_que.clear();          // addFirst() method to insert the        // elements at the head        de_que.addFirst(564);        de_que.addFirst(291);          // addLast() method to insert the        // elements at the tail        de_que.addLast(24);        de_que.addLast(14);          System.out.println(de_que);    }}']","['[Geeks, For, Geeks]', '[Geeks, For, Geeks]\nGeeks\nFor\nGeeks\nnull', 'Geeks For Geeks is so good \nis so good Geeks For Geeks', '[10, 20, 30, 40, 50]\n[291, 564, 24, 14]']",[],[]
72,['ArrayDeque in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/uploads/20200909140302/ArrayDequeinJava.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/arraydeque-in-java/', 'https://www.geeksforgeeks.org/queue-interface-java/', 'https://www.geeksforgeeks.org/deque-interface-java-example/', 'https://www.geeksforgeeks.org/deque-interface-java-example/', 'https://www.geeksforgeeks.org/queue-interface-java/', 'https://www.geeksforgeeks.org/arraydeque-add-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-addall-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-addfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-addlast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-clear-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-clone-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-contains-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-element-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-foreach-method-in-java/#:~:text=Method%20traverses%20each%20element%20of,are%20passed%20to%20the%20caller.', 'https://www.geeksforgeeks.org/arraydeque-getfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-getlast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-isempty-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-iterator-method-in-java/#:~:text=util.&text=iterator()%20method%20is%20used,Iterator%20iterate_value%20%3D%20Array_Deque.', 'https://www.geeksforgeeks.org/arraydeque-offer-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-offerfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-offerlast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-peek-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-poll-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-pop-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-push-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-remove-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-remove-method-in-java/#:~:text=remove()%20method%20is%20used,the%20head%20of%20the%20Deque.&text=Parameters%3A%20The%20method%20does%20not,the%20head%20of%20the%20Deque.', 'https://www.geeksforgeeks.org/arraydeque-removeall-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-removefirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-removefirstoccurrence-method-in-java/', 'https://www.geeksforgeeks.org/java-8-arraydeque-removeif-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/arraydeque-removelast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-removelastoccurrence-method-in-java/#:~:text=util.,specific%20element%20from%20this%20deque.&text=Return%20Value%3A%20This%20method%20returns,Deque%20else%20it%20returns%20false.', 'https://www.geeksforgeeks.org/arraydeque-size-method-in-java/#:~:text=ArrayDeque.,elements%20present%20in%20the%20Deque.&text=Parameters%3A%20The%20method%20does%20not,elements%20present%20in%20the%20Deque.', 'https://www.geeksforgeeks.org/arraydeque-spliterator-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-toarray-method-in-java/#:~:text=toArray()%20method%20is%20used,deque%20to%20a%20new%20array.&text=Parameters%3A%20The%20method%20does%20not%20take%20any%20parameters.', 'https://www.geeksforgeeks.org/abstractcollection-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-tostring-method-in-java-with-examples/?ref=rp', 'https://www.geeksforgeeks.org/list-containsall-method-in-java-with-examples/#:~:text=The%20containsAll()%20method%20of,elements%20in%20the%20specified%20Collection.&text=Return%20Value%3A%20The%20method%20returns,List%20otherwise%20it%20returns%20False.', 'https://www.geeksforgeeks.org/what-is-java-parallel-streams/', 'https://www.geeksforgeeks.org/deque-descendingiterator-method-in-java/', 'https://www.geeksforgeeks.org/what-is-java-parallel-streams/', 'https://www.geeksforgeeks.org/navigableset-pollfirst-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-polllast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-add-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-addfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-addlast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-offer-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-offerfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-offerlast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-getfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-getlast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-peek-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-peekfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-polllast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-removefirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-removelast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-poll-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-pop-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-pollfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-polllast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-remove-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-removefirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-removelast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-poll-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-peekfirst-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-polllast-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-pop-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-remove-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-iterator-method-in-java/', 'https://www.geeksforgeeks.org/arraydeque-descendingiterator-method-in-java/', 'https://www.geeksforgeeks.org/java-util-arraydeque-class-java/', 'https://www.geeksforgeeks.org/java-util-arraydeque-class-java-set-2/', 'https://www.geeksforgeeks.org/arraylist-vs-linkedlist-java/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Few important features of ArrayDeque are as follows:\xa0\xa0', 'Interfaces implemented by ArrayDeque:', 'The ArrayDeque class implements these two interfaces:', 'Syntax: Declaration', 'public class ArrayDeque<E>\xa0', 'extends AbstractCollection<E>\xa0', 'implements Deque<E>, Cloneable, Serializable', 'Here, E refers to the element which can refer to any class, such as Integer or String class.', 'Methods in ArrayDeque are as follows:', 'Note: Here, Element is the type of elements stored by ArrayDeque.\xa0', 'DESCRIPTION', 'Methods inherited from class java.util.AbstractCollection', 'Action Performed\xa0', 'Methods inherited from interface java.util.Collection', 'Action Performed\xa0', 'Methods declared in interface java.util.Deque', 'Action Performed\xa0', 'Operation 1: Adding Elements', 'Operation 2: Accessing the Elements', '\xa0Operation 3. Removing Elements', 'Operation 4: Iterating through the Deque', '\xa0Related Articles:\xa0']","['The ArrayDeque in Java provides a way to apply resizable-array in addition to the implementation of the Deque interface. It is also known as Array Double Ended Queue or Array Deck. This is a special kind of array that grows and allows users to add or remove an element from both sides of the queue.\xa0', 'ArrayDeque implements both Queue and Deque. It is dynamically resizable from both sides. All implemented interfaces of ArrayDeque in the hierarchy are Serializable, Cloneable, Iterable<E>, Collection<E>, Deque<E>, Queue<E>', 'Now we are done with syntax now let us come up with constructors been defined for it prior before implementing to grasp it better and perceiving the output better.\xa0', 'If there is some lag in clarity in this example, if so then we are proposing various operations on the ArrayDeque class Let’s see how to perform a few frequently used operations on the ArrayDeque to get a better understanding of the operations that we have used above to illustrate Array Deque as a whole.', 'Let us go through each of the operations by implementing alongside by providing clean java program as follows:', 'In order to add an element to the ArrayDeque, we can use the methods \xa0add(), addFirst(), addLast(), offer(), offerFirst(), offerLast() methods.', 'After adding the elements, if we wish to access the elements, we can use inbuilt methods like getFirst(), getLast(), etc.', 'Since a deque can be iterated from both directions, the iterator method of the deque interface provides us two ways to iterate. One from the first and the other from the back. These sets of operations are listed below as follows:']","['In order to remove an element from a deque, there are various methods available. Since we can also remove from both the ends, the deque interface provides us with removeFirst(), removeLast() methods. Apart from that, this interface also provides us with the poll(), pop(), pollFirst(), pollLast() methods where pop() is used to remove and return the head of the deque. However, poll() is used because this offers the same functionality as pop() and doesn’t return an exception when the deque is empty. These sets of operations are as listed below as follows:']","['// Java program to Implement ArrayDeque in Java// // Importing utility classesimport java.util.*; // ArrayDequeDemopublic class GGFG {    public static void main(String[] args)    {        // Creating and initializing deque        // Declaring object of integer type        Deque<Integer> de_que = new ArrayDeque<Integer>(10);         // Operations 1        // add() method         // Adding custom elements        // using add() method to insert        de_que.add(10);        de_que.add(20);        de_que.add(30);        de_que.add(40);        de_que.add(50);         // Iterating using for each loop        for (Integer element : de_que) {            // Print the corresponding element            System.out.println(""Element : "" + element);        }         // Operation 2        // clear() method        System.out.println(""Using clear() "");         // Clearing all elements using clear() method        de_que.clear();         // Operations 3        // addFirst() method         // Inserting at the start        de_que.addFirst(564);        de_que.addFirst(291);         // Operation 4        // addLast() method        // Inserting at end        de_que.addLast(24);        de_que.addLast(14);         // Display message        System.out.println(            ""Above elements are removed now"");         // Iterators         // Display message        System.out.println(            ""Elements of deque using Iterator :"");         for (Iterator itr = de_que.iterator();             itr.hasNext();) {            System.out.println(itr.next());        }         // descendingIterator()        // To reverse the deque order        System.out.println(            ""Elements of deque in reverse order :"");         for (Iterator dItr = de_que.descendingIterator();             dItr.hasNext();) {            System.out.println(dItr.next());        }         // Operation 5        // element() method : to get Head element        System.out.println(            ""\\nHead Element using element(): ""            + de_que.element());         // Operation 6        // getFirst() method : to get Head element        System.out.println(""Head Element using getFirst(): ""                           + de_que.getFirst());         // Operation 7        // getLast() method : to get last element        System.out.println(""Last Element using getLast(): ""                           + de_que.getLast());         // Operation 8        // toArray() method :        Object[] arr = de_que.toArray();        System.out.println(""\\nArray Size : "" + arr.length);         System.out.print(""Array elements : "");         for (int i = 0; i < arr.length; i++)            System.out.print("" "" + arr[i]);         // Operation 9        // peek() method : to get head        System.out.println(""\\nHead element : ""                           + de_que.peek());         // Operation 10        // poll() method : to get head        System.out.println(""Head element poll : ""                           + de_que.poll());         // Operation 11        // push() method        de_que.push(265);        de_que.push(984);        de_que.push(2365);         // Operation 12        // remove() method : to get head        System.out.println(""Head element remove : ""                           + de_que.remove());         System.out.println(""The final array is: "" + de_que);    }}', '// Java program to Illustrate Addition of elements// in ArrayDeque // Importing required classesimport java.io.*;import java.util.*; // Main class// AddingElementsToArrayDequepublic class GFG {     // Main driver method    public static void main(String[] args)    {        // Initializing a deque        // since deque is an interface        // it is assigned the        // ArrayDeque class        Deque<String> dq = new ArrayDeque<String>();         // add() method to insert        dq.add(""The"");        dq.addFirst(""To"");        dq.addLast(""Geeks"");         // offer() method to insert        dq.offer(""For"");        dq.offerFirst(""Welcome"");        dq.offerLast(""Geeks"");         // Printing Elements of ArrayDeque to the console        System.out.println(""ArrayDeque : "" + dq);    }}', '// Java program to Access Elements of ArrayDeque // Importing required classesimport java.io.*;import java.util.*; // Main class// AccessingElementsOfArrayDequepublic class GFG {     // Main driver method    public static void main(String args[])    {        // Creating an empty ArrayDeque        ArrayDeque<String> de_que            = new ArrayDeque<String>();         // Using add() method to add elements into the Deque        // Custom input elements        de_que.add(""Welcome"");        de_que.add(""To"");        de_que.add(""Geeks"");        de_que.add(""4"");        de_que.add(""Geeks"");         // Displaying the ArrayDeque        System.out.println(""ArrayDeque: "" + de_que);         // Displaying the First element        System.out.println(""The first element is: ""                           + de_que.getFirst());         // Displaying the Last element        System.out.println(""The last element is: ""                           + de_que.getLast());    }}', '// Java program to Illustrate Removal Elements in Deque // Importing all utility classesimport java.util.*; // RemoveElementsOfArrayDequepublic class GFG {     // Main driver method    public static void main(String[] args)    {        // Initializing a deque        Deque<String> dq = new ArrayDeque<String>();         // add() method to insert        dq.add(""One"");         // addFirst inserts at the front        dq.addFirst(""Two"");         // addLast inserts at the back        dq.addLast(""Three"");         // print elements to the console        System.out.println(""ArrayDeque : "" + dq);         // remove element as a stack from top/front        System.out.println(dq.pop());         // remove element as a queue from front        System.out.println(dq.poll());         // remove element from front        System.out.println(dq.pollFirst());         // remove element from back        System.out.println(dq.pollLast());    }}', '// Java program to Illustrate Iteration of Elements// in Deque // Importing all utility classesimport java.util.*; // Main class// IterateArrayDequepublic class GFG {     // Main driver method    public static void main(String[] args)    {        // Declaring and initializing an deque        Deque<String> dq = new ArrayDeque<String>();         // Addign elements at the back        // using add() method        dq.add(""For"");         // Adding element at the front        // using addFirst() method        dq.addFirst(""Geeks"");         // add element at the last        // using addLast() method        dq.addLast(""Geeks"");        dq.add(""is so good"");         // Iterate using Iterator interface        // from the front of the queue        for (Iterator itr = dq.iterator(); itr.hasNext();) {             // Print the elements            System.out.print(itr.next() + "" "");        }         // New line        System.out.println();         // Iterate in reverse sequence in a queue        for (Iterator itr = dq.descendingIterator();             itr.hasNext();) {             System.out.print(itr.next() + "" "");        }    }}']","['ArrayDeque<E> dq = new ArrayDeque<E>();', 'ArrayDeque<E> dq = new ArrayDeque<E>(Collection col);', 'ArrayDeque<E> dq = new ArrayDeque<E>(int numofElements);', 'Element : 10\nElement : 20\nElement : 30\nElement : 40\nElement : 50\nUsing clear() \nAbove elements are removed now\nElements of deque using Iterator :\n291\n564\n24\n14\nElements of deque in reverse order :\n14\n24\n564\n291\n\nHead Element using element(): 291\nHead Element using getFirst(): 291\nLast Element using getLast(): 14\n\nArray Size : 4\nArray elements :  291 564 24 14\nHead element : 291\nHead element poll : 291\nHead element remove : 2365\nThe final array is: [984, 265, 564, 24, 14]', 'ArrayDeque : [Welcome, To, The, Geeks, For, Geeks]', 'ArrayDeque: [Welcome, To, Geeks, 4, Geeks]\nThe first element is: Welcome\nThe last element is: Geeks', 'ArrayDeque : [Two, One, Three]\nTwo\nOne\nThree\nnull', 'Geeks For Geeks is so good \nis so good Geeks For Geeks']","['add(Element e)|||The method inserts a particular element at the end of the deque.&&&addAll\u200b(Collection<? extends E> c)|||Adds all of the elements in the specified collection at the end of this deque, as if by calling addLast(E) on each one, in the order that they are returned by the collection’s iterator.&&&addFirst(Element e)|||The method inserts particular element at the start of the deque.&&&addLast(Element e)\xa0|||The method inserts a particular element at the end of the deque. It is similar to the add() method&&&clear()\xa0|||The method removes all deque elements.&&&clone()|||The method copies the deque.&&&contains(Obj)|||The method checks whether a deque contains the element or not&&&element()\xa0|||The method returns element at the head of the deque&&&forEach\u200b(Consumer<? super E> action)|||Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.&&&getFirst()|||The method returns first element of the deque&&&getLast()|||The method returns last element of the deque&&&isEmpty()|||The method checks whether the deque is empty or not.&&&iterator()|||Returns an iterator over the elements in this deque.&&&offer(Element e)|||The method inserts element at the end of deque.&&&offerFirst(Element e)\xa0|||The method inserts element at the front of deque.&&&offerLast(Element e)|||The method inserts element at the end of the deque.&&&peek()|||The method returns head element without removing it.&&&poll()|||The method returns head element and also removes it&&&pop()|||The method pops out an element for stack represented by deque&&&push(Element e)|||The method pushes an element onto stack represented by deque&&&remove()|||The method returns head element and also removes it&&&remove\u200b(Object o)|||Removes a single instance of the specified element from this deque.&&&removeAll\u200b(Collection<?> c)|||Removes all of this collection’s elements that are also contained in the specified collection (optional operation).&&&removeFirst()|||The method returns the first element and also removes it&&&removeFirstOccurrence\u200b(Object o)|||Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail).&&&removeIf\u200b(Predicate<? super Element> filter)|||Removes all of the elements of this collection that satisfy the given predicate.&&&removeLast()|||The method returns the last element and also removes it&&&removeLastOccurrence\u200b(Object o)|||Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail).&&&retainAll\u200b(Collection<?> c)|||Retains only the elements in this collection that are contained in the specified collection (optional operation).&&&size()|||Returns the number of elements in this deque.&&&spliterator()|||Creates a late-binding and fail-fast Spliterator over the elements in this deque.&&&toArray()|||Returns an array containing all of the elements in this deque in proper sequence (from first to the last element).&&&toArray\u200b(T[] a)|||Returns an array containing all of the elements in this deque in proper sequence (from first to the last element); the runtime type of the returned array is that of the specified array.', 'containsAll(Collection c)|||Returns true if this collection contains all of the elements in the specified collection.&&&toString()|||Returns a string representation of this collection.', 'containsAll(Collection c)|||Returns true if this collection contains all of the elements in the specified collection.&&&equals()|||Compares the specified object with this collection for equality.&&&hashcode()|||Returns the hash code value for this collection.&&&parallelStream()|||Returns a possibly parallel Stream with this collection as its source.&&&stream()|||Returns a sequential Stream with this collection as its source.&&&toArray\u200b(IntFunction<T[]> generator)|||Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.', 'descendingIterator()|||Returns an iterator over the elements in this deque in reverse sequential order.&&&peekFirst()|||Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.&&&peekLast()|||Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.&&&pollFirst()|||Retrieves and removes the first element of this deque, or returns null if this deque is empty.&&&pollLast()|||Retrieves and removes the last element of this deque, or returns null if this deque is empty.']","['Array deques have no capacity restrictions and they grow as necessary to support usage.|||They are not thread-safe which means that in the absence of external synchronization, ArrayDeque does not support concurrent access by multiple threads.|||Null elements are prohibited in the ArrayDeque.|||ArrayDeque class is likely to be faster than Stack when used as a stack.|||ArrayDeque class is likely to be faster than LinkedList when used as a queue.&&&Queue Interface: It is an Interface that is a FirstIn – FirstOut Data Structure where the elements are added from the back.|||Deque Interface: It is a Doubly Ended Queue in which you can insert the elements from both sides. It is an interface that implements the Queue.&&&ArrayDeque(): This constructor is used to create an empty ArrayDeque and by default holds an initial capacity to hold 16 elements.&&&ArrayDeque(Collection<? extends E> c): This constructor is used to create an ArrayDeque containing all the elements the same as that of the specified collection.&&&ArrayDeque(int numofElements): This constructor is used to create an empty ArrayDeque and holds the capacity to contain a specified number of elements.&&&Adding operation|||Accessing operation|||Removing operations|||Iterating through the Deque&&&add()|||addFirst()|||addLast()|||offer()|||offerFirst()|||offerLast()&&&getFirst()|||getLast()|||peek()|||peekFirst()|||peekLast()&&&remove()|||removeFirst()|||removeLast()|||poll()|||pollFirst()|||pollLast()|||pop()&&&remove()|||iterator()|||descendingIterator()&&&Java.util.ArrayDeque Class in Java | Set 1|||Java.util.ArrayDeque Class in Java | Set 2|||ArrayList vs LinkedList in Java']"
73,['Set in Java'],"['Java', 'Java', 'Performing Various Operations on SortedSet', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/20211025025147/mayankimageedit.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/20211013145222/JavaCollections1100-660x284.jpg']",[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/navigableset-java-examples/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/generics-in-java/', 'https://www.geeksforgeeks.org/set-add-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-clear-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-iterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/iterators-in-java/', 'https://www.geeksforgeeks.org/set-remove-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-removeall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-retainall-method-in-java-with-example/', 'https://www.geeksforgeeks.org/set-size-method-in-java-with-example/', 'https://www.geeksforgeeks.org/set-toarray-method-in-java-with-example/', 'https://www.geeksforgeeks.org/generics-in-java/', 'https://www.geeksforgeeks.org/set-add-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-remove-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashset-in-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/data-structure-gq/hash-gq/', 'https://www.geeksforgeeks.org/enumset-class-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/enum-in-java/', 'https://www.geeksforgeeks.org/linkedhashset-in-java-with-examples/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/doubly-linked-list/', 'https://www.geeksforgeeks.org/treeset-in-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Declaration: The Set interface is declared as:', 'Creating Set Objects', 'Illustration: Sample Program to Illustrate Set interface', 'Operations on the Set Interface', 'Now let us implement the following operations as defined above as follows:', 'Now let us discuss these operations individually as follows:', 'Operations 1: Adding Elements', 'Operation 2: Accessing the Elements', 'Operation 3: Removing the Values', 'The values can be removed from the Set using the remove() method.', 'Operation 4: Iterating through the Set', 'Class 1: HashSet\xa0', 'Class 2: EnumSet', 'Class 3: LinkedHashSet', 'Class 4: TreeSet']","['In the above image, the navigable set extends the sorted set interface. Since a set doesn’t retain the insertion order, the navigable set interface provides the implementation to navigate through the Set. The class which implements the navigable set is a TreeSet which is an implementation of a self-balancing tree. Therefore, this interface provides us with a way to navigate through this tree.', 'Since Set is an interface, objects cannot be created of the typeset. We always need a class that extends this list in order to create an object. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the Set. This type-safe set can be defined as:', 'Let us discuss methods present in the Set interface provided below in a tabular format below as follows:', 'The set interface allows the users to perform the basic mathematical operation on the set. Let’s take two arrays to understand these basic operations. Let set1 = [1, 3, 2, 4, 8, 9, 0] and set2 = [1, 3, 7, 5, 4, 0, 7, 5]. Then the possible operations on the sets are:', '1. Intersection: This operation returns all the common elements from the given two sets. For the above two sets, the intersection would be:', '2. Union: This operation adds all the elements in one set with the other. For the above two sets, the union would be:\xa0', '3. Difference: This operation removes all the values present in one set from the other set. For the above two sets, the difference would be:\xa0', 'After adding the elements, if we wish to access the elements, we can use inbuilt methods like contains().', 'There are various ways to iterate through the Set. The most famous one is to use the enhanced for loop.', 'Classes that implement the Set interface in Java Collections can be easily perceived from the image below as follows and are listed as follows:', 'HashSet class which is implemented in the collection framework is an inherent implementation of the hash table data structure. The objects that we insert into the HashSet do not guarantee to be inserted in the same order. The objects are inserted based on their hashcode. This class also allows the insertion of NULL elements. Let’s see how to create a set object using this class.\xa0']","['The set interface is present in java.util package and extends the Collection interface is an unordered collection of objects in which duplicate values cannot be stored. It is an interface that implements the mathematical set. This interface contains the methods inherited from the Collection interface and adds a feature that restricts the insertion of the duplicate elements. There are two interfaces that extend the set implementation namely SortedSet and NavigableSet.', 'After the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the Set. Since Set is an interface, it can be used only with a class that implements this interface. HashSet is one of the widely used classes which implements the Set interface. Now, let’s see how to perform a few frequently used operations on the HashSet. We are going to perform the following operations as follows:', 'In order to add an element to the Set, we can use the add() method. However, the insertion order is not retained in the Set. Internally, for every element, a hash is generated and the values are stored with respect to the generated hash. the values are compared and sorted in ascending order. We need to keep a note that duplicate elements are not allowed and all the duplicate elements are ignored. And also, Null values are accepted by the Set.', 'EnumSet class which is implemented in the collections framework is one of the specialized implementations of the Set interface for use with the enumeration type. It is a high-performance set implementation, much faster than HashSet. All of the elements in an enum set must come from a single enumeration type that is specified when the set is created either explicitly or implicitly. Let’s see how to create a set object using this class.\xa0', 'LinkedHashSet class which is implemented in the collections framework is an ordered version of HashSet that maintains a doubly-linked List across all elements. When the iteration order is needed to be maintained this class is used. When iterating through a HashSet the order is unpredictable, while a LinkedHashSet lets us iterate through the elements in the order in which they were inserted. Let’s see how to create a set object using this class.\xa0', 'TreeSet class which is implemented in the collections framework and implementation of the SortedSet Interface and SortedSet extends Set Interface. It behaves like a simple set with the exception that it stores elements in a sorted format. TreeSet uses a tree data structure for storage. Objects are stored in sorted, ascending order. But we can iterate in descending order using the method TreeSet.descendingIterator(). Let’s see how to create a set object using this class.']","['// Java program Illustrating Set Interface // Importing utility classesimport java.util.*; // Main classpublic class GFG {       // Main driver method    public static void main(String[] args)    {        // Demonstrating Set using HashSet        // Declaring object of type String        Set<String> hash_Set = new HashSet<String>();         // Adding elements to the Set        // using add() method        hash_Set.add(""Geeks"");        hash_Set.add(""For"");        hash_Set.add(""Geeks"");        hash_Set.add(""Example"");        hash_Set.add(""Set"");         // Printing elements of HashSet object        System.out.println(hash_Set);    }}', '// Java Program Demonstrating Operations on the Set// such as Union, Intersection and Difference operations // Importing all utility classesimport java.util.*; // Main classpublic class SetExample {       // Main driver method    public static void main(String args[])    {        // Creating an object of Set class        // Declaring object of Integer type        Set<Integer> a = new HashSet<Integer>();               // Adding all elements to List        a.addAll(Arrays.asList(            new Integer[] { 1, 3, 2, 4, 8, 9, 0 }));             // Again declaring object of Set class      // with reference to HashSet        Set<Integer> b = new HashSet<Integer>();               b.addAll(Arrays.asList(            new Integer[] { 1, 3, 7, 5, 4, 0, 7, 5 }));                  // To find union        Set<Integer> union = new HashSet<Integer>(a);        union.addAll(b);        System.out.print(""Union of the two Set"");        System.out.println(union);         // To find intersection        Set<Integer> intersection = new HashSet<Integer>(a);        intersection.retainAll(b);        System.out.print(""Intersection of the two Set"");        System.out.println(intersection);         // To find the symmetric difference        Set<Integer> difference = new HashSet<Integer>(a);        difference.removeAll(b);        System.out.print(""Difference of the two Set"");        System.out.println(difference);    }}', '// Java Program Demonstrating Working of Set by// Adding elements using add() method // Importing all utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating an object of Set and        // declaring object of type String        Set<String> hs = new HashSet<String>();         // Adding elements to above object        // using add() method        hs.add(""B"");        hs.add(""B"");        hs.add(""C"");        hs.add(""A"");         // Printing the elements inside the Set object        System.out.println(hs);    }}', '// Java code to demonstrate Working of Set by// Accessing the Elements og the Set object // Importing all utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating an object of Set and        // declaring object of type String        Set<String> hs = new HashSet<String>();         // Elements are added using add() method        // Later onwards we wil show accessing the same         // Custom input elements        hs.add(""A"");        hs.add(""B"");        hs.add(""C"");        hs.add(""A"");         // Print the Set object elements        System.out.println(""Set is "" + hs);         // Declaring a string        String check = ""D"";         // Check if the above string exists in        // the SortedSet or not        // using contains() method        System.out.println(""Contains "" + check + "" ""                           + hs.contains(check));    }}', '// Java Program Demonstrating Working of Set by// Removing Element/s from the Set // Importing all utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Declaring object of Set of type String        Set<String> hs = new HashSet<String>();         // Elements are added        // using add() method         // Custom input elements        hs.add(""A"");        hs.add(""B"");        hs.add(""C"");        hs.add(""B"");        hs.add(""D"");        hs.add(""E"");         // Printing initial Set elements        System.out.println(""Initial HashSet "" + hs);         // Removing custom element        // using remove() method        hs.remove(""B"");         // Printing Set elements after removing an element        // and printing updated Set elements        System.out.println(""After removing element "" + hs);    }}', '// Java Program to Demonstrate Working of Set by// Iterating through the Elements // Importing utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating object of Set and declaring String type        Set<String> hs = new HashSet<String>();         // Adding elements to Set         // using add() method         // Custom input elements        hs.add(""A"");        hs.add(""B"");        hs.add(""C"");        hs.add(""B"");        hs.add(""D"");        hs.add(""E"");         // Iterating through the Set        // via for-each loop        for (String value : hs)             // Printing all the values inside the object            System.out.print(value + "", "");                 System.out.println();    }}', '// Java program Demonstrating Creation of Set object// Using the Hashset class // Importing utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating object of Set of type String        Set<String> h = new HashSet<String>();         // Adding elements into the HashSet        // using add() method         // Custom input elements        h.add(""India"");        h.add(""Australia"");        h.add(""South Africa"");         // Adding the duplicate element        h.add(""India"");         // Displaying the HashSet        System.out.println(h);         // Removing items from HashSet        // using remove() method        h.remove(""Australia"");        System.out.println(""Set after removing ""                           + ""Australia:"" + h);         // Iterating over hash set items        System.out.println(""Iterating over set:"");         // Iterating through iterators        Iterator<String> i = h.iterator();         // It holds true till there is a single element        // remaining in the object        while (i.hasNext())             System.out.println(i.next());    }}', '// Java program to demonstrate the// creation of the set object// using the EnumSet classimport java.util.*; enum Gfg { CODE, LEARN, CONTRIBUTE, QUIZ, MCQ }; public class GFG {     public static void main(String[] args)    {        // Creating a set        Set<Gfg> set1;         // Adding the elements        set1 = EnumSet.of(Gfg.QUIZ, Gfg.CONTRIBUTE,                          Gfg.LEARN, Gfg.CODE);         System.out.println(""Set 1: "" + set1);    }}', '// Java program to demonstrate the// creation of Set object using// the LinkedHashset classimport java.util.*; class GFG {     public static void main(String[] args)    {        Set<String> lh = new LinkedHashSet<String>();         // Adding elements into the LinkedHashSet        // using add()        lh.add(""India"");        lh.add(""Australia"");        lh.add(""South Africa"");         // Adding the duplicate        // element        lh.add(""India"");         // Displaying the LinkedHashSet        System.out.println(lh);         // Removing items from LinkedHashSet        // using remove()        lh.remove(""Australia"");        System.out.println(""Set after removing ""                           + ""Australia:"" + lh);         // Iterating over linked hash set items        System.out.println(""Iterating over set:"");        Iterator<String> i = lh.iterator();        while (i.hasNext())            System.out.println(i.next());    }}', '// Java Program Demonstrating Creation of Set object// Using the TreeSet class // Importing utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating a Set object and declaring it of String        // type        // with reference to TreeSet        Set<String> ts = new TreeSet<String>();         // Adding elements into the TreeSet        // using add()        ts.add(""India"");        ts.add(""Australia"");        ts.add(""South Africa"");         // Adding the duplicate        // element        ts.add(""India"");         // Displaying the TreeSet        System.out.println(ts);         // Removing items from TreeSet        // using remove()        ts.remove(""Australia"");        System.out.println(""Set after removing ""                           + ""Australia:"" + ts);         // Iterating over Tree set items        System.out.println(""Iterating over set:"");        Iterator<String> i = ts.iterator();         while (i.hasNext())            System.out.println(i.next());    }}']","['public interface Set extends Collection', '// Obj is the type of the object to be stored in Set\xa0\nSet<Obj> set = new HashSet<Obj> ();', '[Set, Example, Geeks, For]', 'Intersection = [0, 1, 3, 4]', 'Union = [0, 1, 2, 3, 4, 5, 7, 8, 9]', 'Difference = [2, 8, 9]', 'Union of the two Set[0, 1, 2, 3, 4, 5, 7, 8, 9]\nIntersection of the two Set[0, 1, 3, 4]\nDifference of the two Set[2, 8, 9]', '[A, B, C]', 'Set is [A, B, C]\nContains D false', 'Initial HashSet [A, B, C, D, E]\nAfter removing element [A, C, D, E]', 'A, B, C, D, E,', '[South Africa, Australia, India]\nSet after removing Australia:[South Africa, India]\nIterating over set:\nSouth Africa\nIndia', 'Set 1: [CODE, LEARN, CONTRIBUTE, QUIZ]', '[India, Australia, South Africa]\nSet after removing Australia:[India, South Africa]\nIterating over set:\nIndia\nSouth Africa', '[Australia, India, South Africa]\nSet after removing Australia:[India, South Africa]\nIterating over set:\nIndia\nSouth Africa']",['add(element)|||This method is used to add a specific element to the set. The function adds the element only if the specified element is not already present in the set else the function returns False if the element is already present in the Set.&&&addAll(collection)|||This method is used to append all of the elements from the mentioned collection to the existing set. The elements are added randomly without following any specific order.&&&clear()|||This method is used to remove all the elements from the set but not delete the set. The reference for the set still exists.&&&contains(element)|||This method is used to check whether a specific element is present in the Set or not.&&&containsAll(collection)|||This method is used to check whether the set contains all the elements present in the given collection or not. This method returns true if the set contains all the elements and returns false if any of the elements are missing.&&&hashCode()|||This method is used to get the hashCode value for this instance of the Set. It returns an integer value which is the hashCode value for this instance of the Set.&&&isEmpty()|||This method is used to check whether the set is empty or not.&&&iterator()|||This method is used to return the iterator of the set. The elements from the set are returned in a random order.&&&remove(element)|||This method is used to remove the given element from the set. This method returns True if the specified element is present in the Set otherwise it returns False.&&&removeAll(collection)|||This method is used to remove all the elements from the collection which are present in the set. This method returns true if this set changed as a result of the call.&&&retainAll(collection)|||This method is used to retain all the elements from the set which are mentioned in the given collection. This method returns true if this set changed as a result of the call.&&&size()|||This method is used to get the size of the set. This returns an integer value which signifies the number of elements.&&&toArray()|||This method is used to form an array of the same elements as that of the Set.'],['HashSet|||EnumSet|||LinkedHashSet|||TreeSet&&&&&&Adding elements|||Accessing elements|||Removing elements|||Iterating elements|||Iterating through Set&&&']
74,['HashSet in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']","['Constructors of HashSet class', 'Performing Various Operations on HashSet', 'Methods in HashSet', 'Methods inherited from class java.util.AbstractSet', 'Methods inherited from class java.util.AbstractCollection', 'Methods declared in interface java.util.Collection', 'Methods declared in interface java.lang.Iterable', 'Methods declared in interface java.util.Set', 'HashSet vs HashMap', 'HashSet vs TreeSet']",['https://media.geeksforgeeks.org/wp-content/uploads/20200909151828/HashSetinJava.png'],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/hashtable-in-java/', 'https://www.geeksforgeeks.org/abstractset-class-in-java-with-examples/#:~:text=The%20AbstractSet%20class%20in%20Java,implementation%20of%20the%20Set%20interface.', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/marker-interface-java/#:~:text=Cloneable%20interface%20%3A%20Cloneable%20interface%20is,of%20instances%20of%20that%20class.', 'https://www.geeksforgeeks.org/serialization-in-java/', 'https://www.geeksforgeeks.org/linkedhashset-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashset-add-method-in-java/', 'https://www.geeksforgeeks.org/hashset-remove-method-in-java/', 'https://www.geeksforgeeks.org/hashset-iterator-method-in-java/', 'https://www.geeksforgeeks.org/loops-in-java/', 'https://www.geeksforgeeks.org/arraylist-in-java/', 'https://www.geeksforgeeks.org/linked-list-in-java/', 'https://www.geeksforgeeks.org/java-util-vector-class-java/#:~:text=The%20Vector%20class%20implements%20a%20growable%20array%20of%20objects.&text=They%20are%20very%20similar%20to,AbstractList%20and%20implements%20List%20interfaces.', 'https://www.geeksforgeeks.org/equals-hashcode-methods-java/', 'https://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html#hashCode()', 'https://www.geeksforgeeks.org/hashset-add-method-in-java/', 'https://www.geeksforgeeks.org/hashset-clear-method-in-java/', 'https://www.geeksforgeeks.org/hashset-contains-method-in-java/', 'https://www.geeksforgeeks.org/hashset-remove-method-in-java/', 'https://www.geeksforgeeks.org/hashset-iterator-method-in-java/', 'https://www.geeksforgeeks.org/hashset-isempty-method-in-java/', 'https://www.geeksforgeeks.org/hashset-size-method-in-java/', 'https://www.geeksforgeeks.org/hashset-clone-method-in-java/', 'https://www.geeksforgeeks.org/abstractset-equals-method-in-java-with-examples/?ref=rp', 'https://www.geeksforgeeks.org/abstractset-hashcode-method-in-java-with-examples/?ref=rp', 'https://www.geeksforgeeks.org/abstractset-removeall-method-in-java-with-examples/?ref=rp', 'https://www.geeksforgeeks.org/abstractcollection-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-retainall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-toarray-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-tostring-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/iterable-foreach-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-equals-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-removeall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-retainall-method-in-java-with-example/', 'https://www.geeksforgeeks.org/set-toarray-method-in-java-with-example/', 'https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Few important features of HashSet are:\xa0', 'The Hierarchy of HashSet\xa0', 'Declaration of HashSet:', 'where E is the type of elements stored in a HashSet.', 'HashSet<E> hs = new HashSet<E>();', 'HashSet<E> hs = new HashSet<E>(int initialCapacity);', 'HashSet<E> hs = new HashSet<E>(int initialCapacity, float loadFactor);', 'HashSet<E> hs = new HashSet<E>(Collection C);', 'Let’s see how to perform a few frequently used operations on the HashSet.', '2. Removing the Elements:\xa0 The values can be removed from the HashSet using the remove() method.', 'Implementation of HashSet in java doc:\xa0', 'If we look at the add() method of\xa0HashSet class:\xa0\xa0', 'Let us understand this with the help of the below example:', 'Here, E is the Type of elements store in HashSet\xa0', 'DESCRIPTION', 'DESCRIPTION', 'This method is used to remove all the elements from the collection which are present in the set.', 'This method returns true if this set changed as a result of the call.', 'DESCRIPTION', 'The elements are added randomly without following any specific order.', 'This method returns true if this set changed as a result of the call.', 'DESCRIPTION', 'DESCRIPTION', 'DESCRIPTION']","['HashSet extends Abstract Set<E> class and implements Set<E>, Cloneable and Serializable interfaces where E is the type of elements maintained by this set. The directly known subclass of HashSet is LinkedHashSet.', 'Now for the maintenance of constant time performance, iterating over HashSet requires time proportional to the sum of the HashSet instance’s size (the number of elements) plus the “capacity” of the backing HashMap instance (the number of buckets). Thus, it’s very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important.\xa0', 'Example: If internal capacity is 16 and the load factor is 0.75 then the number of buckets will automatically get increased when the table has 12 elements in it.', 'In order to create a HashSet, we need to create an object of the HashSet class. The HashSet class consists of various constructors that allow the possible creation of the HashSet. The following are the constructors available in this class.', '1. HashSet(): This constructor is used to build an empty HashSet object in which the default initial capacity is 16 and the default load factor is 0.75. If we wish to create an empty HashSet with the name hs, then, it can be created as:', '2. HashSet(int initialCapacity): This constructor is used to build an empty HashSet object in which the initialCapacity is specified at the time of object creation. Here, the default loadFactor remains 0.75.', '3. HashSet(int initialCapacity, float loadFactor): This constructor is used to build an empty HashSet object in which the initialCapacity and loadFactor are specified at the time of object creation.', '4. HashSet(Collection): This constructor is used to build a HashSet object containing all the elements from the given collection. In short, this constructor is used when any conversion is needed from any Collection object to the HashSet object. If we wish to create a HashSet with the name hs, it can be created as:', '1. Adding Elements: In order to add an element to the HashSet, we can use the add() method. However, the insertion order is not retained in the HashSet. \xa0We need to keep a note that duplicate elements are not allowed and all the duplicate elements are ignored.', '3. Iterating through the HashSet: Iterate through the elements of HashSet using the iterator() method. The most famous one is to use the enhanced for loop.', 'Internal working of a HashSet: All the classes of Set interface internally backed up by Map. HashSet uses HashMap for storing its object internally. You must be wondering that to enter a value in HashMap we need a key-value pair, but in HashSet, we are passing only one value.\xa0', 'Storage in HashMap: Actually the value we insert in HashSet acts as a key to the map Object and for its value, java uses a constant variable. So in key-value pair, all the values will be the same.', 'We can notice that, add() method of HashSet class internally calls the put() method of backing the HashMap object by passing the element you have specified as a key and constant “PRESENT” as its\xa0value. remove()\xa0method also works in the same manner. It internally calls remove method of Map interface.\xa0\xa0', 'HashSet not only stores unique Objects but also unique Collection of Objects like ArrayList<E>, LinkedList<E>, Vector<E>,..etc.', 'Before storing an Object, HashSet checks whether there is an existing entry using hashCode() and equals() methods. In the above example, two lists are considered equal if they have the same elements in the same order. When you invoke the hashCode()\xa0 method on the two lists, they both would give the same hash since they are equal.\xa0', 'HashSet does not store duplicate items, \xa0if you give two Objects that are equal then it stores only the first one, here it is list1.', 'Time Complexity of HashSet Operations: The underlying data structure for HashSet is hashtable. So amortize (average or usual case) time complexity for add, remove and look-up (contains method) operation of HashSet takes O(1) time.', 'This method is used to append all of the elements from the mentioned collection to the existing set.', 'This method is used to check whether the set contains all the elements present in the given collection or not.', 'This method returns true if the set contains all the elements and returns false if any of the elements are missing.', 'This method is used to retain all the elements from the set which are mentioned in the given collection.', 'Reference: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html\xa0\xa0This article is contributed by Dharmesh Singh. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['The HashSet class implements the Set interface, backed by a hash table which is actually a HashMap instance. No guarantee is made as to the iteration order of the set which means that the class does not guarantee the constant order of elements over time. This class permits the null element. The class also offers constant time performance for the basic operations like add, remove, contains, and size assuming the hash function disperses the elements properly among the buckets, which we shall see further in the article.\xa0\xa0', 'Effect on performance:\xa0 Load factor and initial capacity are two main factors that affect the performance of HashSet operations. A load factor of 0.75 provides very effective performance with respect to time and space complexity. If we increase the load factor value more than that then memory overhead will be reduced (because it will decrease internal rebuilding operation) but, it will affect the add and search operation in the hashtable. To reduce the rehashing operation we should choose initial capacity wisely. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operation will ever occur.', 'Note: The implementation in a HashSet is not synchronized, in the sense that if multiple threads access a hash set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be “wrapped” using the Collections.synchronizedSet method. This is best done at creation time, to prevent accidental unsynchronized access to the set as shown below:\xa0\xa0']","['// Java program to demonstrate working of HashSetimport java.util.*;  class HashSetDemo {      // Main Method    public static void main(String[] args)    {        HashSet<String> h = new HashSet<String>();          // Adding elements into HashSet usind add()        h.add(""India"");        h.add(""Australia"");        h.add(""South Africa"");        h.add(""India""); // adding duplicate elements          // Displaying the HashSet        System.out.println(h);        System.out.println(""List contains India or not:""                           + h.contains(""India""));          // Removing items from HashSet using remove()        h.remove(""Australia"");        System.out.println(""List after removing Australia:""                           + h);          // Iterating over hash set items        System.out.println(""Iterating over list:"");        Iterator<String> i = h.iterator();        while (i.hasNext())            System.out.println(i.next());    }}', '// Java program for adding// elements to a HashSetimport java.util.*;import java.io.*;  class AddingElementsToHashSet {      public static void main(String[] args)    {        // Instantiate an object        // of HashSet        HashSet<String> hs = new HashSet<String>();          // Elements are added using add() method        hs.add(""Geek"");        hs.add(""For"");        hs.add(""Geeks"");          // Print the contents on the console        System.out.println(""HashSet elements : "" + hs);    }}', '// Java program to remove// elements of HashSetimport java.io.*;import java.util.*;  class RemoveElementsOfHashSet {      public static void main(String[] args)    {        // Instantiate an object        // of HashSet        HashSet<String> hs = new HashSet<String>();          // Elements are added using add() method        hs.add(""Geek"");        hs.add(""For"");        hs.add(""Geeks"");        hs.add(""A"");        hs.add(""B"");        hs.add(""Z"");          // Print the contents on the console        System.out.println(""Initial HashSet "" + hs);          // Removing the element B        hs.remove(""B"");          // Print the contents on the console        System.out.println(""After removing element "" + hs);          // Returns false if the element is not present        System.out.println(""Element AC exists in the Set : ""                           + hs.remove(""AC""));    }}', '// Java program to iterate// the HashSetimport java.io.*;import java.util.*;  class IterateTheHashSet {      public static void main(String[] args)    {        // Instantiate an object of HashSet        HashSet<String> hs = new HashSet<String>();          // Elements are added using add() method        hs.add(""Geek"");        hs.add(""For"");        hs.add(""Geeks"");        hs.add(""A"");        hs.add(""B"");        hs.add(""Z"");          // Iterating though the HashSet        Iterator itr = hs.iterator();        while (itr.hasNext())            System.out.print(itr.next() + "", "");        System.out.println();          // Using enhanced for loop        for (String s : hs)            System.out.print(s + "", "");        System.out.println();    }}', '// Java program to illustrate the concept// of Collection objects storage in a HashSetimport java.io.*;import java.util.*;  class CollectionObjectStorage {        public static void main(String[] args)    {        // Instantiate an object of HashSet        HashSet<ArrayList> set = new HashSet<>();          // create ArrayList list1        ArrayList<Integer> list1 = new ArrayList<>();          // create ArrayList list2        ArrayList<Integer> list2 = new ArrayList<>();          // Add elements using add method        list1.add(1);        list1.add(2);        list2.add(1);        list2.add(2);        set.add(list1);        set.add(list2);          // print the set size to understand the        // internal storage of ArrayList in Set        System.out.println(set.size());    }}']","['Number of stored elements in the table\nLoad Factor\xa0= -----------------------------------------\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Size of the hash table', 'Set s = Collections.synchronizedSet(new HashSet(...));', 'public class HashSet<E> extends AbstractSet<E> implements Set<E>, Cloneable, Serializable', '[South Africa, Australia, India]\nList contains India or not:true\nList after removing Australia:[South Africa, India]\nIterating over list:\nSouth Africa\nIndia', 'HashSet elements : [Geek, For, Geeks]', 'Initial HashSet [A, B, Geek, For, Geeks, Z]\nAfter removing element [A, Geek, For, Geeks, Z]\nElement AC exists in the Set : false', 'A, B, Geek, For, Geeks, Z, \nA, B, Geek, For, Geeks, Z,', 'private transient HashMap map;\n\n// Constructor - 1\n// All the constructors are internally creating HashMap Object.\npublic HashSet()\n{\n    // Creating internally backing HashMap object\n    map = new HashMap();\n}\n\n// Constructor - 2\npublic HashSet(int initialCapacity)\n{\n    // Creating internally backing HashMap object\n    map = new HashMap(initialCapacity);\n}\n\n// Dummy value to associate with an Object in Map\nprivate static final Object PRESENT = new Object();', 'public boolean add(E e)\n{\n   return map.put(e, PRESENT) == null;\n}', 'public boolean remove(Object o)\n{\n\xa0\xa0return map.remove(o) == PRESENT;\n}', '1']","['add(E e)|||Used to add the specified element if it is not present, if it is present then return false.&&&clear()|||Used to remove all the elements from set.&&&contains(Object o)|||Used to return true if an element is present in set.&&&remove(Object o)|||Used to remove the element if it is present in set.&&&iterator()|||\xa0Used to return an iterator over the element in the set.&&&isEmpty()|||Used to check whether the set is empty or not. Returns true for empty and false for a non-empty condition for set.&&&size()|||Used to return the size of the set.&&&clone()|||Used to create a shallow copy of the set.', 'equals()|||Used to verify the equality of an Object with a HashSet and compare them. The list returns true only if both HashSet contains same elements, irrespective of order.&&&hashcode()|||Returns the hash code value for this set.&&&removeAll(collection)|||This method is used to remove all the elements from the collection which are present in the set.This method returns true if this set changed as a result of the call.', 'addAll(collection)\xa0|||This method is used to append all of the elements from the mentioned collection to the existing set.The elements are added randomly without following any specific order.&&&containsAll(collection)\xa0|||This method is used to check whether the set contains all the elements present in the given collection or not.This method returns true if the set contains all the elements and returns false if any of the elements are missing.\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(""1b4172cd-acc7-4363-9184-3fadd3cdabcf"");\n                          });\n                        &&&retainAll(collection)|||This method is used to retain all the elements from the set which are mentioned in the given collection.This method returns true if this set changed as a result of the call.&&&toArray()|||This method is used to form an array of the same elements as that of the Set.&&&toString()|||The toString() method of Java HashSet is used to return a string representation of the elements of the HashSet Collection.', 'parallelStream()|||Returns a possibly parallel Stream with this collection as its source.&&&removeIf\u200b(Predicate<? super E> filter)|||Removes all of the elements of this collection that satisfy the given predicate.&&&stream()|||Returns a sequential Stream with this collection as its source.&&&toArray\u200b(IntFunction<T[]> generator)|||Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.', '\xa0forEach\u200b(Consumer<? super T> action)|||Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.', 'addAll\u200b(Collection<? extends E> c)|||Adds all of the elements in the specified collection to this set if they’re not already present (optional operation).&&&containsAll\u200b(Collection<?> c)|||Returns true if this set contains all of the elements of the specified collection.&&&equals\u200b(Object o)|||Compares the specified object with this set for equality.&&&hashCode()|||Returns the hash code value for this set.&&&removeAll\u200b(Collection<?> c)|||Removes from this set all of its elements that are contained in the specified collection (optional operation).&&&retainAll\u200b(Collection<?> c)|||Retains only the elements in this set that are contained in the specified collection (optional operation).&&&toArray()|||Returns an array containing all of the elements in this set.&&&toArray\u200b(T[] a)|||Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.', 'Implementation|||HashSet implements Set interface.|||HashMap implements Map interface.&&&Duplicates|||HashSet doesn’t allow duplicate values.|||HashMap store key, value pairs and it does not allow duplicate keys. If key is duplicate then the old key is replaced with the new value.&&&Number of objects during storing objects|||HashSet requires only one object add(Object o).|||HashMap requires two objects put(K key, V Value) to add an element to the HashMap object.&&&Dummy value|||HashSet internally uses HashMap to add elements. In HashSet, the argument passed in add(Object) method serves as key K. Java internally associates dummy value for each value passed in add(Object) method.|||HashMap does not have any concept of dummy value.&&&Storing or Adding mechanism|||HashSet internally uses the HashMap object to store or add the objects.|||HashMap internally uses hashing to store or add objects&&&Faster|||HashSet is slower than HashMap.|||HashMap is faster than HashSet.&&&Insertion|||HashSet uses the add() method for add or storing data.|||HashMap uses the put() method for storing data.&&&Example|||HashSet is a set, e.g. {1, 2, 3, 4, 5, 6, 7}.|||HashMap is a key -> value pair(key to value) map, e.g. {a -> 1, b -> 2, c -> 2, d -> 1}.', 'Speed and internal implementation|||For operations like search, insert and delete. It takes constant time for these operations on average. HashSet is faster than TreeSet. HashSet is Implemented using a hash table.|||TreeSet takes O(Log n) for search, insert and delete which is higher than HashSet. But TreeSet keeps sorted data. Also, it supports operations like higher() (Returns least higher element), floor(), ceiling(), etc. These operations are also O(Log n) in TreeSet and not supported in HashSet. TreeSet is implemented using a Self Balancing Binary Search Tree (Red-Black Tree). TreeSet is backed by TreeMap in Java.&&&Ordering\xa0|||Elements in HashSet are not ordered.|||TreeSet maintains objects in Sorted order defined by either Comparable or Comparator method in Java. TreeSet elements are sorted in ascending order by default. It offers several methods to deal with the ordered set like first(), last(), headSet(), tailSet(), etc.&&&Null Object|||HashSet allows the null object.|||TreeSet doesn’t allow null Object and throw NullPointerException, Why, because TreeSet uses compareTo() method to compare keys and compareTo() will throw java.lang.NullPointerException.&&&Comparison|||HashSet uses equals() method to compare two objects in Set and for detecting duplicates.|||TreeSet uses compareTo() method for same purpose. If equals() and compareTo() are not consistent, i.e. for two equal object equals should return true while compareTo() should return zero, then it will break the contract of the Set interface and will allow duplicates in Set implementations like TreeSet']","['Implements Set Interface.|||The underlying data structure for HashSet is Hashtable.|||As it implements the Set Interface, duplicate values are not allowed.|||Objects that you insert in HashSet are not guaranteed to be inserted in the same order. Objects are inserted based on their hash code.|||NULL elements are allowed in HashSet.|||HashSet also implements Serializable and Cloneable interfaces.&&&Initial Capacity: The initial capacity means the number of buckets when hashtable (HashSet internally uses hashtable data structure) is created. The number of buckets will be automatically increased if the current size gets full.|||Load Factor: The load factor is a measure of how full the HashSet is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.']"
75,['LinkedHashSet in Java with Examples'],"['Java', 'Java', 'Java', 'Java']","['Constructors of LinkedHashSet Class', 'Performing Various Operations on the LinkedHashSet Class', '\xa0Methods of LinkedHashSet', 'Methods Declared in class java.util.AbstractSet', 'Methods declared in class java.util.AbstractCollection', 'Methods declared in interface java.util.Collection', 'Methods declared in class java.util.HashSet', 'Methods declared in interface java.lang.Iterable', 'Methods declared in interface java.util.Set']",['https://media.geeksforgeeks.org/wp-content/uploads/20200911123402/HashSetLinkedHashSetinJava.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/hashset-in-java/', 'https://www.geeksforgeeks.org/linkedhashset-add-method-in-java-with-examples/?ref=rp', 'https://www.geeksforgeeks.org/linkedhashset-remove-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/iterators-in-java/', 'https://www.geeksforgeeks.org/iterators-in-java/', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/abstractset-equals-method-in-java-with-examples/?ref=rp', 'https://www.geeksforgeeks.org/abstractset-hashcode-method-in-java-with-examples/?ref=rp', 'https://www.geeksforgeeks.org/abstractset-removeall-method-in-java-with-examples/?ref=rp', 'https://www.geeksforgeeks.org/abstractcollection-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-retainall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-toarray-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-toarray-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractcollection-tostring-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashset-add-method-in-java/', 'https://www.geeksforgeeks.org/hashset-clear-method-in-java/', 'https://www.geeksforgeeks.org/hashset-clone-method-in-java/', 'https://www.geeksforgeeks.org/hashset-contains-method-in-java/', 'https://www.geeksforgeeks.org/hashset-isempty-method-in-java/', 'https://www.geeksforgeeks.org/hashset-iterator-method-in-java/', 'https://www.geeksforgeeks.org/hashset-remove-method-in-java/', 'https://www.geeksforgeeks.org/hashset-size-method-in-java/', 'https://www.geeksforgeeks.org/iterable-foreach-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/iterable-foreach-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-add-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-clear-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-isempty-method-in-java-with-examples/#:~:text=isEmpty()%20method%20is%20used,empty%20otherwise%20it%20returns%20False.&text=Return%20Value%3A%20The%20method%20returns,is%20empty%20else%20returns%20False.', 'https://www.geeksforgeeks.org/set-iterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-remove-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-removeall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-retainall-method-in-java-with-example/', 'https://www.geeksforgeeks.org/set-size-method-in-java-with-example/', 'https://www.geeksforgeeks.org/set-toarray-method-in-java-with-example/', 'https://www.geeksforgeeks.org/linkedhashmap-class-java-examples/', 'https://www.geeksforgeeks.org/hashset-in-java/', 'https://www.geeksforgeeks.org/hashmap-treemap-java/', 'https://www.facebook.com/Pratik.Agarwal01', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['The Hierarchy of LinkedHashSet is as follows:', 'Parameters: The type of elements maintained by this set', 'Syntax: Declaration\xa0', '1. LinkedHashSet(): This constructor is used to create a default HashSet', 'Let’s see how to perform a few frequently used operations on the LinkedHashSet.', 'Operation 1: Adding Elements', 'Operation 2: Removing Elements', 'The values can be removed from the LinkedHashSet using the remove() method.', 'Operation 3: Iterating through LinkedHashSet', 'Here, E is the type of element stored.', 'DESCRIPTION', 'DESCRIPTION', 'DESCRIPTION', 'DESCRIPTION', 'removeIf(Predicate<? super\xa0', 'E> filter)', 'DESCRIPTION', 'DESCRIPTION', 'forEach(Consumer<? super', '\xa0T> action)', 'Following is the difference between LinkedHashMap and LinekdHashSet:']","['2. LinkedHashSet(Collection C): Used in initializing the HashSet with the elements of the collection C.', '3. LinkedHashSet(int size): Used to initialize the size of the LinkedHashSet with the integer mentioned in the parameter.', '4. LinkedHashSet(int capacity, float fillRatio): Can be used to initialize both the capacity and the fill ratio, also called the load capacity of the LinkedHashSet with the arguments mentioned in the parameter. When the number of elements exceeds the capacity of the hash set is multiplied with the fill ratio thus expanding the capacity of the LinkedHashSet.', 'In order to add an element to the LinkedHashSet, we can use the add() method. This is different from HashSet because in HashSet, the insertion order is not retained but is retained in the LinkedHashSet.', 'Iterate through the elements of \xa0LinkedHashSet using the iterator() method. The most famous one is to use the enhanced for loop.', 'Note: Keeping the insertion order in both LinkedHashmap and LinkedHashset have additional associated costs, both in terms of spending additional CPU cycles and needing more memory. If you do not need the insertion order maintained, it is recommended to use the lighter-weight HashSet and HashMap instead.']","['The LinkedHashSet is an ordered version of HashSet that maintains a doubly-linked List across all elements. When the iteration order is needed to be maintained this class is used. When iterating through a HashSet the order is unpredictable, while a LinkedHashSet lets us iterate through the elements in the order in which they were inserted. When cycling through LinkedHashSet using an iterator, the elements will be returned in the order in which they were inserted.', 'This article is contributed by Pratik Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks’s main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java Program to Illustrate LinkedHashSet // Importing required classesimport java.util.LinkedHashSet; // Main class// LinkedHashSetExamplepublic class GFG {     // Main driver method    public static void main(String[] args)    {         // Creating an empty LinkedHashSet of string type        LinkedHashSet<String> linkedset            = new LinkedHashSet<String>();         // Adding element to LinkedHashSet        // using add() method        linkedset.add(""A"");        linkedset.add(""B"");        linkedset.add(""C"");        linkedset.add(""D"");         // Note: This will not add new element        // as A already exists        linkedset.add(""A"");        linkedset.add(""E"");         // Getting size of LinkedHashSet        // using size() method        System.out.println(""Size of LinkedHashSet = ""                           + linkedset.size());         System.out.println(""Original LinkedHashSet:""                           + linkedset);         // Removing existing entry from above Set        // using remove() method        System.out.println(""Removing D from LinkedHashSet: ""                           + linkedset.remove(""D""));         // Removing existing entry from above Set        // that does not exist in Set        System.out.println(            ""Trying to Remove Z which is not ""            + ""present: "" + linkedset.remove(""Z""));         // Checking for element whether it is present inside        // Set or not using contains() method        System.out.println(""Checking if A is present=""                           + linkedset.contains(""A""));         // Noew lastly printing the updated LinekdHashMap        System.out.println(""Updated LinkedHashSet: ""                           + linkedset);    }}', '// Java Program to Add Elements to LinkedHashSet // Importing required classesimport java.io.*;import java.util.*; // Main class// AddingElementsToLinkedHashSetclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating an empty LinkedHashSet        LinkedHashSet<String> hs = new LinkedHashSet<String>();         // Adding elements to above Set        // using add() method         // Note: Insertion order is maintained        hs.add(""Geek"");        hs.add(""For"");        hs.add(""Geeks"");         // Printing elements of Set        System.out.println(""LinkedHashSet : "" + hs);    }}', '// Java program to Remove Elements from LinkedHashSet // Importing required classesimport java.io.*;import java.util.*; // Main class// RemoveElementsFromLinkedHashSetclass GFG {     // Main driver method    public static void main(String[] args)    {         // Creating an empty LinekdhashSet of string type        LinkedHashSet<String> hs            = new LinkedHashSet<String>();         // Adding elements to above Set        // using add() method        hs.add(""Geek"");        hs.add(""For"");        hs.add(""Geeks"");        hs.add(""A"");        hs.add(""B"");        hs.add(""Z"");         // Printing all above elements to the console        System.out.println(""Initial HashSet "" + hs);         // Removing the element from above Set        hs.remove(""B"");         // Again removing the element        System.out.println(""After removing element "" + hs);         // Returning false if the element is not present        System.out.println(hs.remove(""AC""));    }}', '// Java Program to Illustrate Iterating over LinkedHashSet // Importing required classesimport java.io.*;import java.util.*; // Main class// IteratingLinkedHashSetclass GFG {     // Main driver method    public static void main(String[] args)    {         // Instantiate an object of Set        // Since LinkedHashSet implements Set        // Set points to LinkedHashSet        Set<String> hs = new LinkedHashSet<String>();         // Adding elements to above Set        // using add() method        hs.add(""Geek"");        hs.add(""For"");        hs.add(""Geeks"");        hs.add(""A"");        hs.add(""B"");        hs.add(""Z"");         // Iterating though the LinkedHashSet        // using iterators        Iterator itr = hs.iterator();         while (itr.hasNext())            System.out.print(itr.next() + "", "");         // New line        System.out.println();         // Using enhanced for loop for iteration        for (String s : hs)            System.out.print(s + "", "");        System.out.println();    }}']","['All Implemented Interfaces are as listed below:\nSerializable\nCloneable,\nIterable<E>\nCollection<E>\nSet<E>', 'public class LinkedHashSet<E> extends HashSet<E> implements Set<E>, Cloneable, Serializable', 'LinkedHashSet<E> hs = new LinkedHashSet<E>();', 'LinkedHashSet<E> hs = new LinkedHashSet<E>(Collection c);', 'LinkedHashSet<E> hs = new LinkedHashSet<E>(int size);', 'LinkedHashSet<E> hs = new LinkedHashSet<E>(int capacity, int fillRatio);', 'Size of LinkedHashSet = 5\nOriginal LinkedHashSet:[A, B, C, D, E]\nRemoving D from LinkedHashSet: true\nTrying to Remove Z which is not present: false\nChecking if A is present=true\nUpdated LinkedHashSet: [A, B, C, E]', 'LinkedHashSet : [Geek, For, Geeks]', 'Initial HashSet [Geek, For, Geeks, A, B, Z]\nAfter removing element [Geek, For, Geeks, A, Z]\nfalse', 'Geek, For, Geeks, A, B, Z, \nGeek, For, Geeks, A, B, Z,']","['spliterator()|||Creates a late-binding and fail-fast Spliterator over the elements in this set.', 'equals(Object o)|||Compares the specified object with this set for equality.&&&hashCode()|||Returns the hash code value for this set.&&&removeAll(Collection c)|||Removes from this set all of its elements that are contained in the specified collection (optional operation).', 'addAll\u200b(Collection<? extends E> c)|||Adds all of the elements in the specified collection to this collection (optional operation).&&&containsAll\u200b(Collection<?> c)|||Returns true if this collection contains all of the elements in the specified collection.&&&retainAll\u200b(Collection<?> c)|||Retains only the elements in this collection that are contained in the specified collection (optional operation).&&&toArray()|||Returns an array containing all of the elements in this collection.&&&toArray\u200b(T[] a)|||Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.&&&toString()|||Returns a string representation of this collection.', 'parallelStream()|||Returns a possibly parallel Stream with this collection as its source.&&&removeIf(Predicate<? super\xa0E> filter)|||Removes all of the elements of this collection that satisfy the given predicate.&&&stream()|||Returns a sequential Stream with this collection as its source.', 'add(E e)|||Adds the specified element to this set if it is not already present.&&&clear()|||Removes all of the elements from this set.&&&clone()|||Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.&&&contains(Object o)|||Returns true if this set contains the specified element.&&&isEmpty()|||Returns true if this set contains no elements.&&&iterator()|||Returns an iterator over the elements in this set.&&&remove(Object o)|||Removes the specified element from this set if it is present.&&&size()|||Returns the number of elements in this set (its cardinality).', 'forEach(Consumer<? super\xa0T> action)|||Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.', 'add(element)|||This method is used to add a specific element to the set. The function adds the element only if the specified element is not already present in the set else the function returns False if the element is already present in the Set.&&&addAll(Collection c)|||This method is used to append all of the elements from the mentioned collection to the existing set. The elements are added randomly without following any specific order.&&&clear()|||This method is used to remove all the elements from the set but not delete the set. The reference for the set still exists.&&&contains(element)|||This method is used to check whether a specific element is present in the Set or not.&&&containsAll(Collection c)|||This method is used to check whether the set contains all the elements present in the given collection or not. This method returns true if the set contains all the elements and returns false if any of the elements are missing.&&&hashCode()|||This method is used to get the hashCode value for this instance of the Set. It returns an integer value which is the hashCode value for this instance of the Set.&&&isEmpty()|||This method is used to check whether the set is empty or not.&&&iterator()|||This method is used to return the iterator of the set. The elements from the set are returned in random order.&&&remove(element)|||This method is used to remove the given element from the set. This method returns True if the specified element is present in the Set otherwise it returns False.&&&removeAll(collection)\xa0|||This method is used to remove all the elements from the collection which are present in the set. This method returns true if this set changed as a result of the call.&&&retainAll(collection)|||This method is used to retain all the elements from the set which are mentioned in the given collection. This method returns true if this set changed as a result of the call.&&&size()|||This method is used to get the size of the set. This returns an integer value which signifies the number of elements.&&&toArray()|||This method is used to form an array of the same elements as that of the Set.&&&toArray\u200b(T[] a)|||Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.', 'Operation|||Usd to store key-value pairs.|||Used to store collection of things\xa0&&&Duplicates|||Take unique an no duplicate keys but can takeduplicate values|||Stores no duplicate element\xa0&&&Implements|||HashMap|||HashSet&&&Example|||Map<String, Integer> lhm = new LinkedHashMap<String, Integer>();|||Set<String> lhs = new LinkedhashSet<String>();']",['Contains unique elements only like HashSet. It extends the HashSet class and implements the Set interface.|||Maintains insertion order.']
76,['SortedSet Interface in Java with Examples'],[],"['Performing Various Operations on SortedSet', 'Methods of SortedSet Interface']",['https://media.geeksforgeeks.org/wp-content/uploads/20200626215702/Set-TreeSet-SortedSet-In-Java-Collection.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/comparable-vs-comparator-in-java/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/generics-in-java/', 'https://www.geeksforgeeks.org/sortedset-add-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-last-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-remove-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/loops-in-java/', 'https://www.geeksforgeeks.org/treeset-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/treeset-descendingiterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/sortedset-add-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-clear-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/treeset-comparator-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-first-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-headset-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-isempty-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-last-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-remove-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-removeall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-retainall-method-in-java-with-example/', 'https://www.geeksforgeeks.org/sortedset-size-method-in-java-with-example/', 'https://www.geeksforgeeks.org/sortedset-subset-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-tailset-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-toarray-method-in-java-with-example/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Declaration: The SortedSet interface is declared as:', 'public interface SortedSet extends Set', 'Example of a Sorted Set:', 'Creating SortedSet Objects', '// Obj is the type of the object to be stored in SortedSetSortedSet<Obj> set = new TreeSet<Obj> ();', '3. Removing the Values: The values can be removed from the SortedSet using the remove() method.', 'The class which implements the SortedSet interface is TreeSet.']","['The SortedSet interface present in java.util package extends the Set interface present in the collection framework. It is an interface that implements the mathematical set. This interface contains the methods inherited from the Set interface and adds a feature that stores all the elements in this interface to be stored in a sorted manner.', 'In the above image, the navigable set extends the sorted set interface. Since a set doesn’t retain the insertion order, the navigable set interface provides the implementation to navigate through the Set. The class which implements the navigable set is a TreeSet which is an implementation of a self-balancing tree. Therefore, this interface provides us with a way to navigate through this tree.', 'Note: All the elements of a SortedSet must implement the Comparable interface (or be accepted by the specified Comparator) and all such elements must be mutually comparable. Mutually Comparable simply means that two objects accept each other as the argument to their compareTo method.', 'Since SortedSet is an interface, objects cannot be created of the type SortedSet. We always need a class which extends this list in order to create an object. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the SortedSet. This type-safe set can be defined as:', 'Since SortedSet is an interface, it can be used only with a class which implements this interface. TreeSet is the class which implements the SortedSet interface. Now, let’s see how to perform a few frequently used operations on the TreeSet.', '2. Accessing the Elements: After adding the elements, if we wish to access the elements, we can use inbuilt methods like contains(), first(), last(), etc.', '4. Iterating through the SortedSet: There are various ways to iterate through the SortedSet. The most famous one is to use the enhanced for loop.', 'The following are the methods present in the SortedSet interface. Here, the “*” represents that the methods are part of the Set interface.']","['1. Adding Elements: In order to add an element to the SortedSet, we can use the add() method. However, the insertion order is not retained in the TreeSet. Internally, for every element, the values are compared and sorted in the ascending order. We need to keep a note that duplicate elements are not allowed and all the duplicate elements are ignored. And also, Null values are not accepted by the SortedSet.', 'TreeSet: TreeSet class which is implemented in the collections framework is an implementation of the SortedSet Interface and SortedSet extends Set Interface. It behaves like a simple set with the exception that it stores elements in a sorted format. TreeSet uses a tree data structure for storage. Objects are stored in sorted, ascending order. But we can iterate in descending order using method TreeSet.descendingIterator(). Let’s see how to create a sortedset object using this class.']","['// Java program to demonstrate the// Sorted Setimport java.util.*;  class SortedSetExample{      public static void main(String[] args)    {        SortedSet<String> ts            = new TreeSet<String>();          // Adding elements into the TreeSet        // using add()        ts.add(""India"");        ts.add(""Australia"");        ts.add(""South Africa"");          // Adding the duplicate        // element        ts.add(""India"");          // Displaying the TreeSet        System.out.println(ts);          // Removing items from TreeSet        // using remove()        ts.remove(""Australia"");        System.out.println(""Set after removing ""                           + ""Australia:"" + ts);          // Iterating over Tree set items        System.out.println(""Iterating over set:"");        Iterator<String> i = ts.iterator();        while (i.hasNext())            System.out.println(i.next());    }}', '// Java code to demonstrate// the working of SortedSetimport java.util.*;  class GFG {      public static void main(String[] args)    {        SortedSet<String> ts            = new TreeSet<String>();          // Elements are added using add() method        ts.add(""A"");        ts.add(""B"");        ts.add(""C"");        ts.add(""A"");          System.out.println(ts);    }}', '// Java code to demonstrate// the working of SortedSet  import java.util.*;class GFG {      public static void main(String[] args)    {        SortedSet<String> ts            = new TreeSet<String>();          // Elements are added using add() method        ts.add(""A"");        ts.add(""B"");        ts.add(""C"");        ts.add(""A"");          System.out.println(""Sorted Set is "" + ts);          String check = ""D"";          // Check if the above string exists in        // the SortedSet or not        System.out.println(""Contains "" + check                           + "" "" + ts.contains(check));          // Print the first element in        // the SortedSet        System.out.println(""First Value "" + ts.first());          // Print the last element in        // the SortedSet        System.out.println(""Last Value "" + ts.last());    }}', '// Java code to demonstrate// the working of SortedSet  import java.util.*;class GFG{      public static void main(String[] args)    {        SortedSet<String> ts            = new TreeSet<String>();          // Elements are added using add() method        ts.add(""A"");        ts.add(""B"");        ts.add(""C"");        ts.add(""B"");        ts.add(""D"");        ts.add(""E"");          System.out.println(""Initial TreeSet "" + ts);          // Removing the element b        ts.remove(""B"");          System.out.println(""After removing element "" + ts);    }}', '// Java code to demonstrate// the working of SortedSet   import java.util.*;class GFG {     public static void main(String[] args)    {        SortedSet<String> ts            = new TreeSet<String>();           // Elements are added using add() method        ts.add(""C"");        ts.add(""D"");        ts.add(""E"");        ts.add(""A"");        ts.add(""B"");        ts.add(""Z"");           // Iterating though the SortedSet        for (String value : ts)            System.out.print(value                             + "", "");        System.out.println();    }}', '// Java program to demonstrate the// creation of SortedSet object using// the TreeSet class  import java.util.*;  class GFG {      public static void main(String[] args)    {        SortedSet<String> ts            = new TreeSet<String>();          // Adding elements into the TreeSet        // using add()        ts.add(""India"");        ts.add(""Australia"");        ts.add(""South Africa"");          // Adding the duplicate        // element        ts.add(""India"");          // Displaying the TreeSet        System.out.println(ts);          // Removing items from TreeSet        // using remove()        ts.remove(""Australia"");        System.out.println(""Set after removing ""                           + ""Australia:"" + ts);          // Iterating over Tree set items        System.out.println(""Iterating over set:"");        Iterator<String> i = ts.iterator();        while (i.hasNext())            System.out.println(i.next());    }}']","['[Australia, India, South Africa]\nSet after removing Australia:[India, South Africa]\nIterating over set:\nIndia\nSouth Africa', '[A, B, C]', 'Sorted Set is [A, B, C]\nContains D false\nFirst Value A\nLast Value C', 'Initial TreeSet [A, B, C, D, E]\nAfter removing element [A, C, D, E]', 'A, B, C, D, E, Z,', '[Australia, India, South Africa]\nSet after removing Australia:[India, South Africa]\nIterating over set:\nIndia\nSouth Africa']",[],[]
77,['NavigableSet in Java with Examples'],"['Java', 'Java', 'Java', 'Java', 'Java']","['Performing Various Operations on NavigableSet', 'Methods of Navigable Set', '\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0Methods inherited from interface java.util.SortedSet', 'Methods inherited from interface java.util.Set', 'Methods declared in interface java.util.Collection', 'Methods declared in interface java.lang.Iterable']",['https://media.geeksforgeeks.org/wp-content/uploads/20200806144340/NavigableSet-660x74.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/treeset-in-java/', 'https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentSkipListSet.html', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/concurrentskiplistset-in-java-with-examples/', 'https://www.geeksforgeeks.org/treeset-in-java-with-examples/', 'https://www.geeksforgeeks.org/navigableset-add-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/sortedset-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-first-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-last-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-remove-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/navigableset-pollfirst-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/navigableset-polllast-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/loops-in-java/', 'https://www.geeksforgeeks.org/navigableset-ceiling-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-descendingiterator-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-descendingset-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-floor-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-headset-method-in-java/', 'https://www.geeksforgeeks.org/headSet\u200b(E toElement, boolean inclusive)', 'https://www.geeksforgeeks.org/navigableset-higher-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-iterator-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-lower-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-pollfirst-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-polllast-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-subset-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-subset-method-in-java/', 'https://www.geeksforgeeks.org/navigableset-subset-method-in-java/', 'https://www.geeksforgeeks.org/treeset-comparator-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-first-method-in-java/', 'https://www.geeksforgeeks.org/sortedset-last-method-in-java/', 'https://www.geeksforgeeks.org/set-add-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-addall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-clear-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-contains-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-containsall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-equals-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/navigableset-isempty-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/set-remove-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-removeall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/set-retainall-method-in-java-with-example/', 'https://www.geeksforgeeks.org/set-size-method-in-java-with-example/', 'https://www.geeksforgeeks.org/set-toarray-method-in-java-with-example/', 'https://www.geeksforgeeks.org/iterable-foreach-method-in-java-with-examples/', 'https://www.facebook.com/Pratik.Agarwal01', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Here, E is the type of elements maintained by this set.', 'All Superinterfaces:', 'Collection<E>, Iterable<E>, Set<E>, SortedSet<E>', 'All Known Implementing Classes:', 'ConcurrentSkipListSet, TreeSet<E>', 'Declaration: The NavigableSet is declared as', 'public interface NavigableSet<E> \xa0extends SortedSet<E>\xa0', 'Creating NavigableSet Objects', '// Obj is the type of the object to be stored in NavigableSet', 'NavigableSet<Obj> set = new TreeSet<Obj> ();', 'The following are the methods present in the NavigableSet interface.\xa0', 'DESCRIPTION', 'subSet\u200b(E fromElement, boolean', 'fromInclusive, E toElement, boolean toInclusive)', 'DESCRIPTION', 'DESCRIPTION']","['Since NavigableSet is an interface, objects cannot be created of the type NavigableSet. We always need a class that extends this list in order to create an object. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the NavigableSet. This type-safe set can be defined as:', 'Since NavigableSet is an interface, it can be used only with a class that implements this interface. TreeSet is the class that implements the NavigableSet interface. Now, let’s see how to perform a few frequently used operations on the TreeSet.', '2. Accessing the Elements: After adding the elements, if we wish to access the elements, we can use inbuilt methods like contains(), first(), last(), etc.', '3. Removing the Values: The values can be removed from the NavigableSet using the remove(), pollFirst(), pollLast() methods.', '4. Iterating through the NavigableSet: There are various ways to iterate through the NavigableSet. The most famous one is to use the enhanced for loop.', 'This method is used to check whether the set contains all the elements present in the given collection or not.', 'This method returns true if the set contains all the elements and returns false if any of the elements are missing.']","['NavigableSet represents a navigable set in Java Collection Framework. The NavigableSet interface inherits from the SortedSet interface. It behaves like a SortedSet with the exception that we have navigation methods available in addition to the sorting mechanisms of the SortedSet.\xa0For example, the NavigableSet interface can navigate the set in reverse order compared to the order defined in SortedSet. A NavigableSet may be accessed and traversed in either ascending or descending order. The classes that implement this interface are, TreeSet and ConcurrentSkipListSet', '1. Adding Elements: In order to add an element to the NavigableSet, we can use the add() method. However, the insertion order is not retained in the TreeSet. Internally, for every element, the values are compared and sorted in the ascending order. We need to keep a note that duplicate elements are not allowed and all the duplicate elements are ignored. And also, Null values are not accepted by the NavigableSet.', 'This article is contributed by Pratik Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java program to demonstrate// the working of NavigableSetimport java.util.NavigableSet;import java.util.TreeSet; public class NavigableSetDemo{    public static void main(String[] args)    {        NavigableSet<Integer> ns = new TreeSet<>();        ns.add(0);        ns.add(1);        ns.add(2);        ns.add(3);        ns.add(4);        ns.add(5);        ns.add(6);         // Get a reverse view of the navigable set        NavigableSet<Integer> reverseNs = ns.descendingSet();         // Print the normal and reverse views        System.out.println(""Normal order: "" + ns);        System.out.println(""Reverse order: "" + reverseNs);         NavigableSet<Integer> threeOrMore = ns.tailSet(3, true);        System.out.println(""3 or  more:  "" + threeOrMore);        System.out.println(""lower(3): "" + ns.lower(3));        System.out.println(""floor(3): "" + ns.floor(3));        System.out.println(""higher(3): "" + ns.higher(3));        System.out.println(""ceiling(3): "" + ns.ceiling(3));         System.out.println(""pollFirst(): "" + ns.pollFirst());        System.out.println(""Navigable Set:  "" + ns);         System.out.println(""pollLast(): "" + ns.pollLast());        System.out.println(""Navigable Set:  "" + ns);         System.out.println(""pollFirst(): "" + ns.pollFirst());        System.out.println(""Navigable Set:  "" + ns);         System.out.println(""pollFirst(): "" + ns.pollFirst());        System.out.println(""Navigable Set:  "" + ns);         System.out.println(""pollFirst(): "" + ns.pollFirst());        System.out.println(""Navigable Set:  "" + ns);         System.out.println(""pollFirst(): "" + ns.pollFirst());        System.out.println(""pollLast(): "" + ns.pollLast());    }}', '// Java code to demonstrate// adding of elements in// NavigableSetimport java.util.*;import java.io.*; class NavigableSetDemo {     public static void main(String[] args)    {        NavigableSet<String> ts = new TreeSet<String>();         // Elements are added using add() method        ts.add(""A"");        ts.add(""B"");        ts.add(""C"");        ts.add(""A"");         System.out.println(ts);    }}', '// Java program to access// the elements of NavigableSetimport java.util.*;import java.io.*; class NavigableSetDemo {     public static void main(String[] args)    {        NavigableSet<String> ts = new TreeSet<String>();         // Elements are added using add() method        ts.add(""A"");        ts.add(""B"");        ts.add(""C"");        ts.add(""A"");         System.out.println(""Navigable Set is "" + ts);         String check = ""D"";         // Check if the above string exists in        // the NavigableSet or not        System.out.println(""Contains "" + check + "" ""                           + ts.contains(check));         // Print the first element in        // the NavigableSet        System.out.println(""First Value "" + ts.first());         // Print the last element in        // the NavigableSet        System.out.println(""Last Value "" + ts.last());    }}', '// Java Program to remove the// elements from NavigableSetimport java.util.*;import java.io.*; class NavigableSetDemo {     public static void main(String[] args)    {        NavigableSet<String> ts = new TreeSet<String>();         // Elements are added using add() method        ts.add(""A"");        ts.add(""B"");        ts.add(""C"");        ts.add(""B"");        ts.add(""D"");        ts.add(""E"");         System.out.println(""Initial TreeSet "" + ts);         // Removing the element b        ts.remove(""B"");         System.out.println(""After removing element "" + ts);         // Remove the First element of TreeSet        ts.pollFirst();         System.out.println(            ""After the removal of First Element "" + ts);         // Remove the Last element of TreeSet        ts.pollLast();         System.out.println(            ""After the removal of Last Element "" + ts);    }}', '// Java program to iterate// through NavigableSet import java.util.*;import java.io.*; class NavigableSetDemo {       public static void main(String[] args)    {        NavigableSet<String> ts = new TreeSet<String>();         // Elements are added using add() method        ts.add(""C"");        ts.add(""D"");        ts.add(""E"");        ts.add(""A"");        ts.add(""B"");        ts.add(""Z"");         // Iterating though the NavigableSet        for (String value : ts)            System.out.print(value + "", "");        System.out.println();    }}']","['Normal order: [0, 1, 2, 3, 4, 5, 6]\nReverse order: [6, 5, 4, 3, 2, 1, 0]\n3 or  more:  [3, 4, 5, 6]\nlower(3): 2\nfloor(3): 3\nhigher(3): 4\nceiling(3): 3\npollFirst(): 0\nNavigable Set:  [1, 2, 3, 4, 5, 6]\npollLast(): 6\nNavigable Set:  [1, 2, 3, 4, 5]\npollFirst(): 1\nNavigable Set:  [2, 3, 4, 5]\npollFirst(): 2\nNavigable Set:  [3, 4, 5]\npollFirst(): 3\nNavigable Set:  [4, 5]\npollFirst(): 4\npollLast(): 5', '[A, B, C]', 'Navigable Set is [A, B, C]\nContains D false\nFirst Value A\nLast Value C', 'Initial TreeSet [A, B, C, D, E]\nAfter removing element [A, C, D, E]\nAfter the removal of First Element [C, D, E]\nAfter the removal of Last Element [C, D]', 'A, B, C, D, E, Z,']","['\xa0ceiling\u200b(E e)|||Returns the least element in this set greater than or equal to the given element, or null if there is no such element.&&&descendingIterator()|||Returns an iterator over the elements in this set, in descending order.&&&descendingSet()|||Returns a reverse order view of the elements contained in this set.&&&floor\u200b(E e)|||Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.&&&headSet\u200b(E toElement)|||Returns a view of the portion of this set whose elements are strictly less than toElement.&&&headSet\u200b(E toElement, boolean inclusive)|||Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement.&&&higher\u200b(E e)|||Returns the least element in this set strictly greater than the given element, or null if there is no such element.&&&iterator()|||Returns an iterator over the elements in this set, in ascending order.&&&lower\u200b(E e)|||Returns the greatest element in this set strictly less than the given element, or null if there is no such element.&&&pollFirst()|||Retrieves and removes the first (lowest) element, or returns null if this set is empty.&&&pollLast()|||Retrieves and removes the last (highest) element, or returns null if this set is empty.&&&subSet\u200b(E fromElement, booleanfromInclusive, E toElement, boolean toInclusive)|||Returns a view of the portion of this set whose elements range from fromElement to toElement.&&&subSet\u200b(E fromElement, E toElement)|||Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive.&&&tailSet\u200b(E fromElement)|||Returns a view of the portion of this set whose elements are greater than or equal to fromElement.&&&tailSet\u200b(E fromElement, boolean inclusive)|||Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement.', 'comparator()\xa0|||This method returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements.&&&first()|||This method returns the first(lowest) element present in this set.&&&last()|||This method returns the last(highest) element present in the set.&&&spliterator()|||Creates a Spliterator over the elements in this sorted set.', 'add(element)|||This method is used to add a specific element to the set. The function adds the element only if the specified element is not already present in the set else the function returns False if the element is already present in the Set.&&&addAll(collection)\xa0|||This method is used to append all of the elements from the mentioned collection to the existing set. The elements are added randomly without following any specific order.&&&clear()\xa0\xa0|||This method is used to remove all the elements from the set but not delete the set. The reference for the set still exists.&&&contains(element)|||This method is used to check whether a specific element is present in the Set or not.&&&containsAll(collection)\xa0|||This method is used to check whether the set contains all the elements present in the given collection or not.This method returns true if the set contains all the elements and returns false if any of the elements are missing.&&&equals()|||Compares the specified object with this set for equality.&&&hashCode()\xa0|||This method is used to get the hashCode value for this instance of the Set. It returns an integer value which is the hashCode value for this instance of the Set.&&&isEmpty()|||This method is used to check if a NavigableSet is empty or not.&&&remove(element)|||This method is used to remove the given element from the set. This method returns True if the specified element is present in the Set otherwise it returns False.&&&removeAll(collection)|||This method is used to remove all the elements from the collection which are present in the set. This method returns true if this set changed as a result of the call.&&&retainAll(collection)|||This method is used to retain all the elements from the set which are mentioned in the given collection. This method returns true if this set changed as a result of the call.&&&size()|||This method is used to get the size of the set. This returns an integer value which signifies the number of elements.&&&toArray()|||This method is used to form an array of the same elements as that of the Set.&&&\xa0toArray\u200b(T[] a)|||Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.', 'parallelStream()|||Returns a possibly parallel Stream with this collection as its source.&&&removeIf\u200b(Predicate<? super E> filter)|||Removes all of the elements of this collection that satisfy the given predicate.&&&stream()|||Returns a sequential Stream with this collection as its source.&&&toArray\u200b(IntFunction<T[]> generator)|||Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.', 'forEach\u200b(Consumer<? super T> action)|||Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.']",['contains()|||first()|||last()&&&remove()|||pollFirst()|||pollLast()']
78,['TreeSet in Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java']",['Features of a TreeSet:'],['https://media.geeksforgeeks.org/wp-content/cdn-uploads/20210315172345/Java-Collections-Framework-Hierarchy.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/binary-tree-data-structure/', 'https://www.geeksforgeeks.org/comparator-interface-java/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/navigableset-java-examples/', 'https://www.geeksforgeeks.org/abstractset-class-in-java-with-examples/', 'https://www.geeksforgeeks.org/string-class-in-java/', 'https://www.geeksforgeeks.org/wrapper-classes-java/', 'https://www.geeksforgeeks.org/stringbuffer-class-in-java/', 'https://www.geeksforgeeks.org/null-pointer-exception-in-java/', 'https://www.geeksforgeeks.org/red-black-tree-set-1-introduction-2/', 'https://www.geeksforgeeks.org/encapsulation-in-java/', 'https://www.geeksforgeeks.org/collections-synchronizedsortedset-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/set-in-java/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/treeset-add-method-in-java/', 'https://www.geeksforgeeks.org/treeset-addall-method-in-java/', 'https://www.geeksforgeeks.org/treeset-ceiling-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/treeset-clear-method-in-java/', 'https://www.geeksforgeeks.org/treeset-clone-method-in-java/', 'https://www.geeksforgeeks.org/treeset-comparator-method-in-java/', 'https://www.geeksforgeeks.org/treeset-contains-method-in-java/', 'https://www.geeksforgeeks.org/treeset-descendingiterator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/treeset-descendingset-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/treeset-first-method-in-java/', 'https://www.geeksforgeeks.org/treeset-floor-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/treeset-headset-method-in-java/', 'https://www.geeksforgeeks.org/treeset-higher-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/treeset-isempty-method-in-java/', 'https://www.geeksforgeeks.org/treeset-iterator-method-in-java/', 'https://www.geeksforgeeks.org/treeset-last-method-in-java/', 'https://www.geeksforgeeks.org/treeset-lower-method-in-java/', 'https://www.geeksforgeeks.org/treeset-pollfirst-method-in-java/', 'https://www.geeksforgeeks.org/treeset-polllast-method-in-java-with-example/', 'https://www.geeksforgeeks.org/treeset-remove-method-in-java/', 'https://www.geeksforgeeks.org/treeset-size-method-in-java/', 'https://www.geeksforgeeks.org/treeset-subset-method-in-java/', 'https://www.geeksforgeeks.org/treeset-tailset-method-in-java/', 'https://www.geeksforgeeks.org/treeset-add-method-in-java/', 'https://www.geeksforgeeks.org/treeset-contains-method-in-java/', 'https://www.geeksforgeeks.org/treeset-first-method-in-java/', 'https://www.geeksforgeeks.org/treeset-last-method-in-java/', 'https://www.geeksforgeeks.org/treeset-remove-method-in-java/', 'https://www.geeksforgeeks.org/how-to-loop-over-treeset-in-java/', 'https://www.geeksforgeeks.org/loops-in-java/', 'https://www.geeksforgeeks.org/sortedset-java-examples/', 'https://www.geeksforgeeks.org/built-exceptions-java-examples/', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['How does TreeSet work Internally?', 'Constructors of TreeSet Class are as follows:', 'Syntax: If we wish to create an empty TreeSet with the name ts, then, it can be created as:\xa0', 'Syntax: If we wish to create a TreeSet with the name ts, then, it can be created as follows:', 'Syntax: If we wish to create a TreeSet with the name ts, then, it can be created as follows:', 'Illustration: The following implementation demonstrates how to create and use a TreeSet.', 'Implementation:', 'Operation 1: Adding Elements', 'Operation 2: Accessing the Elements', 'Operation 3: Removing the Values', 'Operation 4: Iterating through the TreeSet']","['TreeSet is one of the most important implementations of the SortedSet interface in Java that uses a Tree for storage. The ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is provided. This must be consistent with equals if it is to correctly implement the Set interface.\xa0', 'It can also be ordered by a Comparator provided at set creation time, depending on which constructor is used. The TreeSet implements a NavigableSet interface by inheriting AbstractSet class.', 'In order to create a TreeSet, we need to create an object of the TreeSet class. The TreeSet class consists of various constructors which allow the possible creation of the TreeSet. The following are the constructors available in this class:', 'Syntax: If we wish to create an empty TreeSet with the name ts with an external sorting phenomenon, then, it can be created as:', 'Methods in TreeSet Class are depicted below in tabular format which later on we will be implementing to showcase in the implementation part.', 'TreeSet implements SortedSet so it has the availability of all methods in Collection, Set, and SortedSet interfaces. Following are the methods in the Treeset interface. In the table below, the “?” signifies that the method works with any type of object including user-defined objects.\xa0', 'Here we will be performing various operations over the TreeSet object to get familiar with the methods and concepts of TreeSet in java. Let’s see how to perform a few frequently used operations on the TreeSet. They are listed as follows:', 'Now let us discuss each operation individually one by one later alongside grasping with the help of a clean java program.', 'In order to add an element to the TreeSet, we can use the add() method. However, the insertion order is not retained in the TreeSet. Internally, for every element, the values are compared and sorted in ascending order. We need to keep a note that duplicate elements are not allowed and all the duplicate elements are ignored. And also, Null values are not accepted by the TreeSet.', 'After adding the elements, if we wish to access the elements, we can use inbuilt methods like contains(), first(), last(), etc.\xa0', 'The values can be removed from the TreeSet using the remove() method. There are various other methods that are used to remove the first value or the last value.\xa0', 'There are various ways to iterate through the TreeSet. The most famous one is to use the enhanced for loop. and geeks mostly you would be iterating the elements with this approach while practicing questions over TreeSet as this is most frequently used when it comes to tree, maps, and graphs problems.\xa0', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['It can clearly be perceived from the above image that the navigable set extends the sorted set interface. Since a set doesn’t retain the insertion order, the navigable set interface provides the implementation to navigate through the Set. The class which implements the navigable set is a TreeSet which is an implementation of a self-balancing tree. Therefore, this interface provides us with a way to navigate through this tree.\xa0', 'TreeSet is basically an implementation of a self-balancing binary search tree like a Red-Black Tree. Therefore operations like add, remove, and search takes O(log(N)) time. The reason is that in a self-balancing tree, it is made sure that the height of the tree is always O(log(N)) for all the operations. Therefore, this is considered as one of the most efficient data structures in order to store the huge sorted data and perform operations on it. However, operations like printing N elements in the sorted order take O(N) time.', 'Now let us discuss Synchronized TreeSet prior moving ahead. The implementation of a TreeSet is not synchronized. This means that if multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by synchronizing some object that naturally encapsulates the set. If no such object exists, the set should be “wrapped” using the Collections.synchronizedSortedSet method. This is best done at the creation time, to prevent accidental unsynchronized access to the set. It can be achieved as shown below as follows:']","['// Java program to Illustrate Working of  TreeSet // Importing required utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating a Set interface with reference to        // TreeSet        Set<String> ts1 = new TreeSet<>();         // Elements are added using add() method        ts1.add(""A"");        ts1.add(""B"");        ts1.add(""C"");         // Duplicates will not get insert        ts1.add(""C"");         // Elements get stored in default natural        // Sorting Order(Ascending)        System.out.println(ts1);    }}', '// Java code to Illustrate Addition of Elements to TreeSet // Importing utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating a Set interface with        // reference to TreeSet class        // Declaring object of string type        Set<String> ts = new TreeSet<>();         // Elements are added using add() method        ts.add(""Geek"");        ts.add(""For"");        ts.add(""Geeks"");         // Print all elements inside object        System.out.println(ts);    }}', '// Java code to Illustrate Working of TreeSet by// Accessing the Element of TreeSet // Importing utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating a NavigableSet object  with      // reference to TreeSet class        NavigableSet<String> ts = new TreeSet<>();         // Elements are added using add() method        ts.add(""Geek"");        ts.add(""For"");        ts.add(""Geeks"");          // Printing the elements inside the TreeSet object        System.out.println(""Tree Set is "" + ts);         String check = ""Geeks"";         // Check if the above string exists in        // the treeset or not        System.out.println(""Contains "" + check + "" ""                           + ts.contains(check));         // Print the first element in        // the TreeSet        System.out.println(""First Value "" + ts.first());         // Print the last element in        // the TreeSet        System.out.println(""Last Value "" + ts.last());         String val = ""Geek"";         // Find the values just greater        // and smaller than the above string        System.out.println(""Higher "" + ts.higher(val));        System.out.println(""Lower "" + ts.lower(val));    }}', '// Java Program to Illustrate Removal of Elements// in a TreeSet // Importing utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating an object of NavigableSet        // with reference to TreeSet class        // Declaring object of string type        NavigableSet<String> ts = new TreeSet<>();         // Elements are added        // using add() method        ts.add(""Geek"");        ts.add(""For"");        ts.add(""Geeks"");        ts.add(""A"");        ts.add(""B"");        ts.add(""Z"");         // Print and display initial elements of TreeSet        System.out.println(""Initial TreeSet "" + ts);         // Removing a specific existing element inserted        // above        ts.remove(""B"");         // Printing the updated TreeSet        System.out.println(""After removing element "" + ts);         // Now removing the first element        // using pollFirst() method        ts.pollFirst();         // Again printing the updated TreeSet        System.out.println(""After removing first "" + ts);         // Removing the last element        // using pollLast() method        ts.pollLast();         // Lastly printing the elements of TreeSet remaining        // to figure out pollLast() method        System.out.println(""After removing last "" + ts);    }}', '// Java Program to Illustrate Working of TreeSet // Importing utility classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {        // Creating an object of Set with reference to        // TreeSet class         // Note: You can refer above media if geek        // is confused in programs why we are not        // directly creating TreeSet object        Set<String> ts = new TreeSet<>();         // Adding elements in above object        // using add() method        ts.add(""Geek"");        ts.add(""For"");        ts.add(""Geeks"");        ts.add(""A"");        ts.add(""B"");        ts.add(""Z"");         // Now we will be using for each loop in order        // to iterate through the TreeSet        for (String value : ts)             // Printing the values inside the object            System.out.print(value + "", "");         System.out.println();    }}', '// Java code to illustrate What if Heterogeneous// Objects are Inserted // Importing all utilit classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String[] args)    {         // Object creation        Set<StringBuffer> ts = new TreeSet<>();         // Adding elements to above object        // using add() method        ts.add(new StringBuffer(""A""));        ts.add(new StringBuffer(""Z""));        ts.add(new StringBuffer(""L""));        ts.add(new StringBuffer(""B""));        ts.add(new StringBuffer(""O""));        ts.add(new StringBuffer(1));         // Note: StringBuffer implements Comparable        // interface         // Printing the elements        System.out.println(ts);    }}']","['TreeSet ts = new TreeSet();\xa0\nSet syncSet = Collections.synchronziedSet(ts);', 'TreeSet ts = new TreeSet();', 'TreeSet ts = new TreeSet(Comparator comp);', 'TreeSet t = new TreeSet(Collection col);', 'TreeSet t = new TreeSet(SortedSet s);', '[A, B, C]', '[For, Geek, Geeks]', 'Tree Set is [For, Geek, Geeks]\nContains Geeks true\nFirst Value For\nLast Value Geeks\nHigher Geeks\nLower For', 'Initial TreeSet [A, B, For, Geek, Geeks, Z]\nAfter removing element [A, For, Geek, Geeks, Z]\nAfter removing first [For, Geek, Geeks, Z]\nAfter removing last [For, Geek, Geeks]', 'A, B, For, Geek, Geeks, Z,', '[, A, B, L, O, Z]']","['add(Object o)|||This method will add the specified element according to the same sorting order mentioned during the creation of the TreeSet. Duplicate entries will not get added.&&&addAll(Collection c)|||This method will add all elements of the specified Collection to the set. Elements in the Collection should be homogeneous otherwise ClassCastException will be thrown. Duplicate Entries of Collection will not be added to TreeSet.&&&ceiling?(E e)|||This method returns the least element in this set greater than or equal to the given element, or null if there is no such element.&&&clear()|||This method will remove all the elements.&&&clone()|||The method is used to return a shallow copy of the set, which is just a simple copied set.&&&Comparator comparator()|||This method will return the Comparator used to sort elements in TreeSet or it will return null if the default natural sorting order is used.&&&contains(Object o)|||This method will return true if a given element is present in TreeSet else it will return false.&&&descendingIterator?()|||This method returns an iterator over the elements in this set in descending order.&&&descendingSet?()|||This method returns a reverse order view of the elements contained in this set.&&&first()|||This method will return the first element in TreeSet if TreeSet is not null else it will throw NoSuchElementException.&&&floor?(E e)|||This method returns the greatest element in this set less than or equal to the given element, or null if there is no such element.&&&headSet(Object toElement)|||This method will return elements of TreeSet which are less than the specified element.&&&higher?(E e)|||This method returns the least element in this set strictly greater than the given element, or null if there is no such element.&&&isEmpty()|||This method is used to return true if this set contains no elements or is empty and false for the opposite case.&&&Iterator iterator()|||Returns an iterator for iterating over the elements of the set.&&&last()|||This method will return the last element in TreeSet if TreeSet is not null else it will throw NoSuchElementException.&&&lower?(E e)|||This method returns the greatest element in this set strictly less than the given element, or null if there is no such element.&&&pollFirst?()|||This method retrieves and removes the first (lowest) element, or returns null if this set is empty.&&&pollLast?()|||This method retrieves and removes the last (highest) element, or returns null if this set is empty.&&&remove(Object o)|||This method is used to return a specific element from the set.&&&size()|||This method is used to return the size of the set or the number of elements present in the set.&&&spliterator()|||This method creates a late-binding and fail-fast Spliterator over the elements in this set.&&&subSet(Object fromElement, Object toElement)|||This method will return elements ranging from fromElement to toElement. fromElement is inclusive and toElement is exclusive.&&&tailSet(Object fromElement)|||This method will return elements of TreeSet which are greater than or equal to the specified element.']","['An object is said to be comparable if and only if the corresponding class implements a Comparable interface.|||String class and all the Wrapper classes already implement Comparable interface but StringBuffer class implements Comparable interface. Hence, we DO NOT get a ClassCastException in the above example.|||For an empty tree-set, when trying to insert null as the first value, one will get NPE from JDK 7. From JDK 7 onwards, null is not at all accepted by TreeSet. However, up to JDK 6, null was accepted as the first value, but any insertion of more null values in the TreeSet resulted in NullPointerException. Hence, it was considered a bug and thus removed in JDK 7.|||TreeSet serves as an excellent choice for storing large amounts of sorted information which are supposed to be accessed quickly because of its faster access and retrieval time.|||The insertion of null values into a TreeSet throws NullPointerException because while insertion of null, it gets compared to the existing elements, and null cannot be compared to any value.&&&TreeSet(): This constructor is used to build an empty TreeSet object in which elements will get stored in default natural sorting order.&&&TreeSet(Comparator): This constructor is used to build an empty TreeSet object in which elements will need an external specification of the sorting order.&&&TreeSet(Collection): This constructor is used to build a TreeSet object containing all the elements from the given collection in which elements will get stored in default natural sorting order. In short, this constructor is used when any conversion is needed from any Collection object to TreeSet object.&&&TreeSet(SortedSet): This constructor is used to build a TreeSet object containing all the elements from the given sortedset in which elements will get stored in default natural sorting order. In short, this constructor is used to convert the SortedSet object to the TreeSet object.&&&Adding elements|||Accessing elements|||Removing elements|||Iterating through elements&&&&&&TreeSet implements the SortedSet interface. So, duplicate values are not allowed.|||Objects in a TreeSet are stored in a sorted and ascending order.|||TreeSet does not preserve the insertion order of elements but elements are sorted by keys.|||If we are depending on the default natural sorting order, the objects that are being inserted into the tree should be homogeneous and comparable. TreeSet does not allow the insertion of heterogeneous objects. It will throw a classCastException at Runtime if we try to add heterogeneous objects.|||The TreeSet can only accept generic types which are comparable.For example, the StringBuffer class implements the Comparable interface&&&']"
79,['Map Interface in Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']","['Methods in Map Interface', 'Performing various operations using Map Interface and HashMap Class']",['https://contribute.geeksforgeeks.org/wp-content/uploads/Selection_030.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-util-package-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/generics-in-java/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java/', 'https://www.geeksforgeeks.org/linkedhashmap-class-java-examples/', 'https://www.geeksforgeeks.org/treemap-in-java/', 'https://www.geeksforgeeks.org/treemap-in-java/', 'https://www.geeksforgeeks.org/linkedhashmap-class-java-examples/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java/', 'https://www.geeksforgeeks.org/sortedmap-java-examples/', 'https://www.geeksforgeeks.org/map-clear-method-in-java-with-example/', 'https://www.geeksforgeeks.org/map-containskey-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-containsvalue-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-entryset-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-equals-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-get-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-isempty-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-keyset-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-put-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-putall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-remove-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashing-data-structure/', 'https://www.geeksforgeeks.org/linkedhashmap-class-java-examples/', 'https://www.geeksforgeeks.org/treemap-in-java/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java-with-examples/', 'https://www.geeksforgeeks.org/generics-in-java/', 'https://www.geeksforgeeks.org/map-put-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-put-method-in-java/', 'https://www.geeksforgeeks.org/map-remove-method-in-java-with-examples/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Geeks, the brainstormer should have been why and when to use Maps?', 'Creating Map Objects', 'Syntax: Defining Type-safe Map', 'Characteristics of a Map Interface', 'Class 1: HashMap\xa0', 'Class 2: LinkedHashMap', 'Class 3: TreeMap', 'Operation 1: Adding Elements', 'Operation 2: Changing Element', 'Operation 3: Removing Elements', 'Operation 4: Iterating through the Map']","['Map interface is present in java.util package represents a mapping between a key and a value. The Map interface is not a subtype of the Collection interface. Therefore it behaves a bit differently from the rest of the collection types. A map contains unique keys.', 'Maps are perfect to use for key-value association mapping such as dictionaries. The maps are used to perform lookups by keys or when someone wants to retrieve and update elements by keys. Some common scenarios are as follows:\xa0', 'Since Map is an interface, objects cannot be created of the type map. We always need a class that extends this map in order to create an object. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the Map.\xa0', 'Classes that implement the Map interface are depicted in the below media and described later as follows:', 'LinkedHashMap is just like HashMap with an additional feature of maintaining an order of elements inserted into it. HashMap provided the advantage of quick insertion, search, and deletion but it never maintained the track and order of insertion which the LinkedHashMap provides where the elements can be accessed in their insertion order. Let’s see how to create a map object using this class.', 'Since Map is an interface, it can be used only with a class that implements this interface. Now, let’s see how to perform a few frequently used operations on a Map using the widely used HashMap class. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the map.\xa0', 'In order to add an element to the map, we can use the put() method. However, the insertion order is not retained in the hashmap. Internally, for every element, a separate hash is generated and the elements are indexed based on this hash to make it more efficient.', 'After adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the map are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.\xa0', 'In order to remove an element from the Map, we can use the remove() method. This method takes the key value and removes the mapping for a key from this map if it is present in the map.', 'There are multiple ways to iterate through the Map. The most famous way is to use a for-each loop and get the keys. The value of the key is found by using the getValue() method.']","['HashMap is a part of Java’s collection since Java 1.2. It provides the basic implementation of the Map interface of Java. It stores the data in (Key, Value) pairs. To access a value one must know its key. This class uses a technique called Hashing. Hashing is a technique of converting a large String to a small String that represents the same String. A shorter value helps in indexing and faster searches. Let’s see how to create a map object using this class.', 'The TreeMap in Java is used to implement Map interface and NavigableMap along with the Abstract Class. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used. This proves to be an efficient way of sorting and storing the key-value pairs. The storing order maintained by the treemap must be consistent with equals just like any other sorted map, irrespective of the explicit comparators. Let’s see how to create a map object using this class.']","['// Java Program to Demonstrate// Working of Map interface // Importing required classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Creating an empty HashMap        Map<String, Integer> hm            = new HashMap<String, Integer>();         // Inserting pairs in above Map        // using put() method        hm.put(""a"", new Integer(100));        hm.put(""b"", new Integer(200));        hm.put(""c"", new Integer(300));        hm.put(""d"", new Integer(400));         // Traversing through Map using for-each loop        for (Map.Entry<String, Integer> me :             hm.entrySet()) {             // Printing keys            System.out.print(me.getKey() + "":"");            System.out.println(me.getValue());        }    }}', '// Java Program to illustrate the Hashmap Class // Importing required classesimport java.util.*; // Main classpublic class GFG {     // Main driver method    public static void main(String[] args)    {         // Creating an empty HashMap        Map<String, Integer> map = new HashMap<>();         // Inserting entries in the Map        // using put() method        map.put(""vishal"", 10);        map.put(""sachin"", 30);        map.put(""vaibhav"", 20);         // Iterating over Map        for (Map.Entry<String, Integer> e : map.entrySet())             // Printing key-value pairs            System.out.println(e.getKey() + "" ""                               + e.getValue());    }}', '// Java Program to Illustrate the LinkedHashmap Class // Importing required classesimport java.util.*; // Main classpublic class GFG {     // Main driver method    public static void main(String[] args)    {         // Creating an empty LinkedHashMap        Map<String, Integer> map = new LinkedHashMap<>();         // Inserting pair entries in above Map        // using put() method        map.put(""vishal"", 10);        map.put(""sachin"", 30);        map.put(""vaibhav"", 20);         // Iterating over Map        for (Map.Entry<String, Integer> e : map.entrySet())             // Printing ket-value pairs            System.out.println(e.getKey() + "" ""                               + e.getValue());    }}', '// Java Program to Illustrate TreeMap Class // Importing required classesimport java.util.*; // Main classpublic class GFG {     // Main driver method    public static void main(String[] args)    {         // Creating an empty TreeMap        Map<String, Integer> map = new TreeMap<>();         // Inserting custom elements in the Map        // using put() method        map.put(""vishal"", 10);        map.put(""sachin"", 30);        map.put(""vaibhav"", 20);         // Iterating over Map using for each loop        for (Map.Entry<String, Integer> e : map.entrySet())             // Printing key-value pairs            System.out.println(e.getKey() + "" ""                               + e.getValue());    }}', '// Java program to demonstrate// the working of Map interface import java.util.*;class GFG {    public static void main(String args[])    {        // Default Initialization of a        // Map        Map<Integer, String> hm1 = new HashMap<>();         // Initialization of a Map        // using Generics        Map<Integer, String> hm2            = new HashMap<Integer, String>();         // Inserting the Elements        hm1.put(1, ""Geeks"");        hm1.put(2, ""For"");        hm1.put(3, ""Geeks"");         hm2.put(new Integer(1), ""Geeks"");        hm2.put(new Integer(2), ""For"");        hm2.put(new Integer(3), ""Geeks"");         System.out.println(hm1);        System.out.println(hm2);    }}', '// Java program to demonstrate// the working of Map interface import java.util.*;class GFG {    public static void main(String args[])    {         // Initialization of a Map        // using Generics        Map<Integer, String> hm1            = new HashMap<Integer, String>();         // Inserting the Elements        hm1.put(new Integer(1), ""Geeks"");        hm1.put(new Integer(2), ""Geeks"");        hm1.put(new Integer(3), ""Geeks"");         System.out.println(""Initial Map "" + hm1);         hm1.put(new Integer(2), ""For"");         System.out.println(""Updated Map "" + hm1);    }}', '// Java program to demonstrate// the working of Map interface import java.util.*;class GFG {     public static void main(String args[])    {         // Initialization of a Map        // using Generics        Map<Integer, String> hm1            = new HashMap<Integer, String>();         // Inserting the Elements        hm1.put(new Integer(1), ""Geeks"");        hm1.put(new Integer(2), ""For"");        hm1.put(new Integer(3), ""Geeks"");        hm1.put(new Integer(4), ""For"");         // Initial Map        System.out.println(hm1);         hm1.remove(new Integer(4));         // Final Map        System.out.println(hm1);    }}', '// Java program to demonstrate// the working of Map interface import java.util.*;class GFG {    public static void main(String args[])    {         // Initialization of a Map        // using Generics        Map<Integer, String> hm1            = new HashMap<Integer, String>();         // Inserting the Elements        hm1.put(new Integer(1), ""Geeks"");        hm1.put(new Integer(2), ""For"");        hm1.put(new Integer(3), ""Geeks"");         for (Map.Entry mapElement : hm1.entrySet()) {            int key                = (int)mapElement.getKey();             // Finding the value            String value                = (String)mapElement.getValue();             System.out.println(key + "" : ""                               + value);        }    }}']","['Map hm = new HashMap();\xa0\n// Obj is the type of the object to be stored in Map', 'a:100\nb:200\nc:300\nd:400', 'vaibhav 20\nvishal 10\nsachin 30', 'vishal 10\nsachin 30\nvaibhav 20', 'sachin 30\nvaibhav 20\nvishal 10', '{1=Geeks, 2=For, 3=Geeks}\n{1=Geeks, 2=For, 3=Geeks}', 'Initial Map {1=Geeks, 2=Geeks, 3=Geeks}\nUpdated Map {1=Geeks, 2=For, 3=Geeks}', '{1=Geeks, 2=For, 3=Geeks, 4=For}\n{1=Geeks, 2=For, 3=Geeks}', '1 : Geeks\n2 : For\n3 : Geeks']","['clear()|||This method is used to clear and remove all of the elements or mappings from a specified Map collection.&&&containsKey(Object)|||This method is used to check whether a particular key is being mapped into the Map or not. It takes the key element as a parameter and returns True if that element is mapped in the map.&&&containsValue(Object)|||This method is used to check whether a particular value is being mapped by a single or more than one key in the Map. It takes the value as a parameter and returns True if that value is mapped by any of the key in the map.&&&entrySet()|||This method is used to create a set out of the same elements contained in the map. It basically returns a set view of the map or we can create a new set and store the map elements into them.&&&equals(Object)|||This method is used to check for equality between two maps. It verifies whether the elements of one map passed as a parameter is equal to the elements of this map or not.&&&get(Object)|||This method is used to retrieve or fetch the value mapped by a particular key mentioned in the parameter. It returns NULL when the map contains no such mapping for the key.&&&hashCode()|||This method is used to generate a hashCode for the given map containing keys and values.&&&isEmpty()|||This method is used to check if a map is having any entry for key and value pairs. If no mapping exists, then this returns true.&&&keySet()|||This method is used to return a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.&&&put(Object, Object)|||This method is used to associate the specified value with the specified key in this map.&&&putAll(Map)|||This method is used to copy all of the mappings from the specified map to this map.&&&remove(Object)|||This method is used to remove the mapping for a key from this map if it is present in the map.&&&size()|||This method is used to return the number of key/value pairs available in the map.&&&values()|||This method is used to create a collection out of the values of the map. It basically returns a Collection view of the values in the HashMap.&&&getOrDefault(Object key, V defaultValue)|||Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.&&&merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)|||If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.&&&putIfAbsent(K key, V value)|||If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the curassociaterent value.']","['A map of error codes and their descriptions.|||A map of zip codes and cities.|||A map of managers and employees. Each manager (key) is associated with a list of employees (value) he manages.|||A map of classes and students. Each class (key) is associated with a list of students (value).&&&&&&A Map cannot contain duplicate keys and each key can map to at most one value. Some implementations allow null key and null values like the HashMap and LinkedHashMap, but some do not like the TreeMap.|||The order of a map depends on the specific implementations. For example, TreeMap and LinkedHashMap have predictable orders, while HashMap does not.|||There are two interfaces for implementing Map in java. They are Map and SortedMap, and three classes: HashMap, TreeMap, and LinkedHashMap.&&&']"
80,['HashMap in Java with Examples'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']","['Constructors in HashMap is as follows:', 'Performing Various Operations on HashMap', 'Important Features of HashMap', '\xa0Internal Structure of HashMap', 'Performance of HashMap', 'Synchronized HashMap', 'Methods in HashMap', '\xa0Methods inherited from class java.util.AbstractMap', 'Methods inherited from interface java.util.Map']","['https://media.geeksforgeeks.org/wp-content/uploads/20201119122201/HashMapinJava.png', 'https://media.geeksforgeeks.org/wp-content/uploads/array.png', 'https://media.geeksforgeeks.org/wp-content/uploads/node_hash_map.png']",[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/hashtable-in-java/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/linkedhashmap-class-java-examples/', 'https://www.geeksforgeeks.org/hashmap-put-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-put-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-remove-method-in-java/', 'https://www.geeksforgeeks.org/hashing-set-1-introduction/', 'https://www.geeksforgeeks.org/hashset-in-java/', 'https://docs.oracle.com/javase/7/docs/api/java/lang/Cloneable.html', 'https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html', 'https://www.geeksforgeeks.org/applications-of-hashing/', 'https://www.geeksforgeeks.org/hashmap-clear-method-in-java/#:~:text=HashMap.,mappings%20from%20a%20specified%20HashMap.&text=Parameters%3A%20The%20method%20does%20not,does%20not%20return%20any%20value.', 'https://www.geeksforgeeks.org/hashmap-clone-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-compute-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-compute-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-computeifabsent-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-computeifabsent-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-computeifpresentkey-bifunction-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-computeifpresentkey-bifunction-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-containskey-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-containsvalue-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-entryset-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-get-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-isempty-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-keyset-method-in-java/#:~:text=util.,the%20key%20elements%20in%20them.', 'https://www.geeksforgeeks.org/hashmap-mergekey-value-bifunction-method-in-java-with-examples/#:~:text=The%20merge(Key%2C%20Value%2C,as%20bucket1%20and%20so%20on.', 'https://www.geeksforgeeks.org/hashmap-mergekey-value-bifunction-method-in-java-with-examples/#:~:text=The%20merge(Key%2C%20Value%2C,as%20bucket1%20and%20so%20on.', 'https://www.geeksforgeeks.org/hashmap-put-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-putall-method-in-java/#:~:text=HashMap.,from%20one%20map%20into%20another.&text=Parameters%3A%20The%20method%20takes%20one,we%20want%20to%20copy%20from.', 'https://www.geeksforgeeks.org/hashmap-remove-method-in-java/', 'https://www.geeksforgeeks.org/hashmap-size-method-in-java/#:~:text=HashMap.,or%20mappings%20in%20the%20Map.&text=Parameters%3A%20The%20method%20does%20not,pairs%20present%20in%20the%20map.', 'https://www.geeksforgeeks.org/hashmap-values-method-in-java/', 'https://www.geeksforgeeks.org/abstractmap-equals-method-in-java-with-examples/#:~:text=The%20AbstractMap.,of%20this%20map%20or%20not.', 'https://www.geeksforgeeks.org/abstractmap-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/abstractmap-simpleentry-tostring-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-equals-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-treemap-java/', 'https://www.geeksforgeeks.org/differences-between-hashmap-and-hashtable-in-java/', 'https://www.geeksforgeeks.org/tag/java-hashmap/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['The Hierarchy of HashMap is as follows:', '\xa0Syntax: Declaration', 'Parameters: It takes two parameters namely as follows:', 'Constructor 1: HashMap()', 'Constructor 2: HashMap(int initialCapacity)', 'It creates a HashMap instance with a specified initial capacity and load factor of 0.75.', 'Constructor 3: HashMap(int initialCapacity, float loadFactor)', 'It creates a HashMap instance with a specified initial capacity and specified load factor.', 'HashMap<K, V> hm = new HashMap<K, V>(Map map);', '4. Traversal of HashMap', 'It can be seen that the node is containing a reference to its own object. So it’s a linked list.\xa0', 'HashMap:\xa0\xa0', 'Performance of HashMap depends on 2 parameters which are named as follows:', 'DESCRIPTION', 'DESCRIPTION', 'DESCRIPTION', 'forEach(BiConsumer<? super K,', '? super V> action)', 'replaceAll(BiFunction<? super K,', '? super V,? extends V> function)', 'Must Read:']","['HashMap is similar to HashTable, but it is unsynchronized. It allows to store the null keys as well, but there should be only one null key object and there can be any number of null values. \xa0This class makes no guarantees as to the order of the map. To use this class and its methods, you need to import java.util.HashMap package or its superclass.', 'HashMap implements Serializable, Cloneable, Map<K, V> interfaces. HashMap extends AbstractMap<K, V> class. The direct subclasses are LinkedHashMap, PrinterStateReasons.', 'HashMap provides 4 constructors and the access modifier of each is public which are listed as follows:', 'Now discussing above constructors one by one alongside implementing the same with help of clean java programs.', 'It is the default constructor which creates an instance of HashMap with an initial capacity of 16 and load factor of 0.75.', '\xa04. HashMap(Map map): It creates an instance of HashMap with the same mappings as the specified map.', '1. Adding Elements: In order to add an element to the map, we can use the put() method. However, the insertion order is not retained in the Hashmap. Internally, for every element, a separate hash is generated and the elements are indexed based on this hash to make it more efficient.', '2. Changing Elements: After adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the map are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.', '3. Removing Element: In order to remove an element from the Map, we can use the remove() method. This method takes the key value and removes the mapping for a key from this map if it is present in the map.', 'We can use the Iterator interface to traverse over any structure of the Collection Framework. Since Iterators work with one type of data we use Entry< ? , ? > to resolve the two separate types into a compatible format. Then using the next() method we print the entries of HashMap.', 'To access a value one must know its key. HashMap is known as HashMap because it uses a technique called Hashing. Hashing is a technique of converting a large String to small String that represents the same String. A shorter value helps in indexing and faster searches. HashSet also uses HashMap internally.Few important features of HashMap are:\xa0', 'Internally HashMap contains an array of Node and a node is represented as a class that contains 4 fields:\xa0', '1. Initial Capacity – It is the capacity of HashMap at the time of its creation (It is the number of buckets a HashMap can hold when the HashMap is instantiated). In java, it is 2^4=16 initially, meaning it can hold 16 key-value pairs.', '2. Load Factor – It is the percent value of the capacity after which the capacity of Hashmap is to be increased (It is the percentage fill of buckets after which Rehashing takes place). In java, it is 0.75f by default, meaning the rehashing takes place after filling 75% of the capacity.', '3. Threshold – It is the product of Load Factor and Initial Capacity. In java, by default, it is (16 * 0.75 = 12). That is, Rehashing takes place after inserting 12 key-value pairs into the HashMap.', '4. Rehashing – It is the process of doubling the capacity of the HashMap after it reaches its Threshold. In java, HashMap continues to rehash(by default) in the following sequence – 2^4, 2^5, 2^6, 2^7, …. so on.\xa0\xa0', 'Note: From Java 8 onward, Java has started using Self Balancing BST instead of a linked list for chaining. The advantage of self-balancing bst is, we get the worst case (when every key maps to the same slot) search time is O(Log n).\xa0\xa0']","['HashMap<K, V> is a part of Java’s collection since Java 1.2. This class is found in java.util package. It provides the basic implementation of the Map interface of Java. It stores the data in (Key, Value) pairs, and you can access them by an index of another type (e.g. an Integer). One object is used as a key (index) to another object (value). If you try to insert the duplicate key, it will replace the element of the corresponding key.', 'If the initial capacity is kept higher then rehashing will never be done. But by keeping it higher increases the time complexity of iteration. So it should be chosen very cleverly to increase performance. The expected number of values should be taken into account to set the initial capacity. The most generally preferred load factor value is 0.75 which provides a good deal between time and space costs. The load factor’s value varies between 0 and 1.\xa0', 'As it is told that HashMap is unsynchronized i.e. multiple threads can access it simultaneously. If multiple threads access this class simultaneously and at least one thread manipulates it structurally then it is necessary to make it synchronized externally. It is done by synchronizing some object which encapsulates the map. If No such object exists then it can be wrapped around Collections.synchronizedMap() to make HashMap synchronized and avoid accidental unsynchronized access. As in the following example:\xa0\xa0', 'Now the Map m is synchronized.\xa0 Iterators of this class are fail-fast if any structure modification is done after the creation of iterator, in any way except through the iterator’s remove method. In a failure of iterator, it will throw ConcurrentModificationException.\xa0Time complexity of HashMap: HashMap provides constant time complexity for basic operations, get and put if the hash function is properly written and it disperses the elements properly among the buckets. Iteration over HashMap depends on the capacity of HashMap and a number of key-value pairs. Basically, it is directly proportional to the capacity + size. Capacity is the number of buckets in HashMap. So it is not a good idea to keep a high number of buckets in HashMap initially.\xa0Applications of HashMap: HashMap is mainly the implementation of hashing. It is useful when we need efficient implementation of search, insert and delete operations. Please refer to the applications of hashing for details.', 'This article is contributed by Vishal Garg. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java program to illustrate HashMap class of java.util// package // Importing HashMap classimport java.util.HashMap; // Main classpublic class GFG {     // Main driver method    public static void main(String[] args)    {        // Create an empty hash map by declaring object        // of string and integer type        HashMap<String, Integer> map = new HashMap<>();         // Adding elements to the Map        // using standard add() method        map.put(""vishal"", 10);        map.put(""sachin"", 30);        map.put(""vaibhav"", 20);         // Print size and content of the Map        System.out.println(""Size of map is:- ""                           + map.size());         // Printing elements in object of Map        System.out.println(map);         // Checking if a key is present and if        // present, print value by passing        // random element        if (map.containsKey(""vishal"")) {             // Mapping            Integer a = map.get(""vishal"");             // Printing value fr the corresponding key            System.out.println(""value for key""                               + "" \\""vishal\\"" is:- "" + a);        }    }}', '// Java program to Demonstrate the HashMap() constructor // Importing bsiic required classesimport java.io.*;import java.util.*; // Main class// To add elements to HashMapclass GFG {     // Main driver method    public static void main(String args[])    {        // No need to mention the        // Generic type twice        HashMap<Integer, String> hm1 = new HashMap<>();         // Initialization of a HashMap using Generics        HashMap<Integer, String> hm2            = new HashMap<Integer, String>();         // Adding elements using put method        // Custom input elements        hm1.put(1, ""one"");        hm1.put(2, ""two"");        hm1.put(3, ""three"");         hm2.put(4, ""four"");        hm2.put(5, ""five"");        hm2.put(6, ""six"");         // Print and display mapping of HashMap 1        System.out.println(""Mappings of HashMap hm1 are : ""                           + hm1);         // Print and display mapping of HashMap 2        System.out.println(""Mapping of HashMap hm2 are : ""                           + hm2);    }}', '// Java program to Demonstrate// HashMap(int initialCapacity) Constructor // Importing basic classesimport java.io.*;import java.util.*; // Main class// To add elements to HashMapclass AddElementsToHashMap {     // Main driver method    public static void main(String args[])    {        // No need to mention the        // Generic type twice        HashMap<Integer, String> hm1 = new HashMap<>(10);         // Initialization of a HashMap using Generics        HashMap<Integer, String> hm2            = new HashMap<Integer, String>(2);         // Adding elements to object of HashMap        // using put method         // HashMap 1        hm1.put(1, ""one"");        hm1.put(2, ""two"");        hm1.put(3, ""three"");         // HashMap 2        hm2.put(4, ""four"");        hm2.put(5, ""five"");        hm2.put(6, ""six"");         // Printing elements of ahshMap 1        System.out.println(""Mappings of HashMap hm1 are : ""                           + hm1);         // Printing elements of HashMap 2        System.out.println(""Mapping of HashMap hm2 are : ""                           + hm2);    }}', '// Java program to Demonstrate// HashMap(int initialCapacity,float loadFactor) Constructor // Importing basic classesimport java.io.*;import java.util.*; // Main class// To add elements to HashMapclass GFG {     // Main driver method    public static void main(String args[])    {        // No need to mention the generic type twice        HashMap<Integer, String> hm1            = new HashMap<>(5, 0.75f);         // Initialization of a HashMap using Generics        HashMap<Integer, String> hm2            = new HashMap<Integer, String>(3, 0.5f);         // Add Elements using put() method        // Custom input elements        hm1.put(1, ""one"");        hm1.put(2, ""two"");        hm1.put(3, ""three"");         hm2.put(4, ""four"");        hm2.put(5, ""five"");        hm2.put(6, ""six"");         // Print and display elements in object of hashMap 1        System.out.println(""Mappings of HashMap hm1 are : ""                           + hm1);         // Print and display elements in object of hashMap 1        System.out.println(""Mapping of HashMap hm2 are : ""                           + hm2);    }}', '// Java program to demonstrate the// HashMap(Map map) Constructor import java.io.*;import java.util.*; class AddElementsToHashMap {    public static void main(String args[])    {        // No need to mention the        // Generic type twice        Map<Integer, String> hm1 = new HashMap<>();         // Add Elements using put method        hm1.put(1, ""one"");        hm1.put(2, ""two"");        hm1.put(3, ""three"");         // Initialization of a HashMap        // using Generics        HashMap<Integer, String> hm2            = new HashMap<Integer, String>(hm1);         System.out.println(""Mappings of HashMap hm1 are : ""                           + hm1);               System.out.println(""Mapping of HashMap hm2 are : ""                           + hm2);    }}', '// Java program to add elements// to the HashMap import java.io.*;import java.util.*; class AddElementsToHashMap {    public static void main(String args[])    {        // No need to mention the        // Generic type twice        HashMap<Integer, String> hm1 = new HashMap<>();         // Initialization of a HashMap        // using Generics        HashMap<Integer, String> hm2            = new HashMap<Integer, String>();         // Add Elements using put method        hm1.put(1, ""Geeks"");        hm1.put(2, ""For"");        hm1.put(3, ""Geeks"");         hm2.put(1, ""Geeks"");        hm2.put(2, ""For"");        hm2.put(3, ""Geeks"");         System.out.println(""Mappings of HashMap hm1 are : ""                           + hm1);        System.out.println(""Mapping of HashMap hm2 are : ""                           + hm2);    }}', '// Java program to change// elements of HashMap import java.io.*;import java.util.*;class ChangeElementsOfHashMap {    public static void main(String args[])    {         // Initialization of a HashMap        HashMap<Integer, String> hm            = new HashMap<Integer, String>();         // Change Value using put method        hm.put(1, ""Geeks"");        hm.put(2, ""Geeks"");        hm.put(3, ""Geeks"");         System.out.println(""Initial Map "" + hm);         hm.put(2, ""For"");         System.out.println(""Updated Map "" + hm);    }}', '// Java program to remove// elements from HashMap import java.io.*;import java.util.*;class RemoveElementsOfHashMap{    public static void main(String args[])    {        // Initialization of a HashMap        Map<Integer, String> hm            = new HashMap<Integer, String>();         // Add elements using put method        hm.put(1, ""Geeks"");        hm.put(2, ""For"");        hm.put(3, ""Geeks"");        hm.put(4, ""For"");         // Initial HashMap        System.out.println(""Mappings of HashMap are : ""                           + hm);         // remove element with a key        // using remove method        hm.remove(4);         // Final HashMap        System.out.println(""Mappings after removal are : ""                           + hm);    }}', '// Java program to traversal a// Java.util.HashMap import java.util.HashMap;import java.util.Map; public class TraversalTheHashMap {    public static void main(String[] args)    {        // initialize a HashMap        HashMap<String, Integer> map = new HashMap<>();         // Add elements using put method        map.put(""vishal"", 10);        map.put(""sachin"", 30);        map.put(""vaibhav"", 20);         // Iterate the map using        // for-each loop        for (Map.Entry<String, Integer> e : map.entrySet())            System.out.println(""Key: "" + e.getKey()                               + "" Value: "" + e.getValue());    }}']","['Size of map is:- 3\n{vaibhav=20, vishal=10, sachin=30}\nvalue for key ""vishal"" is:- 10', 'public class HashMap<K,V> extends AbstractMap<K,V>\n                          implements Map<K,V>, Cloneable, Serializable', 'HashMap<K, V> hm = new HashMap<K, V>();', 'Mappings of HashMap hm1 are : {1=one, 2=two, 3=three}\nMapping of HashMap hm2 are : {4=four, 5=five, 6=six}', 'HashMap<K, V> hm = new HashMap<K, V>(int initialCapacity);', 'Mappings of HashMap hm1 are : {1=one, 2=two, 3=three}\nMapping of HashMap hm2 are : {4=four, 5=five, 6=six}', 'HashMap<K, V> hm = new HashMap<K, V>(int initialCapacity, int  loadFactor);', 'Mappings of HashMap hm1 are : {1=one, 2=two, 3=three}\nMapping of HashMap hm2 are : {4=four, 5=five, 6=six}', 'Mappings of HashMap hm1 are : {1=one, 2=two, 3=three}\nMapping of HashMap hm2 are : {1=one, 2=two, 3=three}', 'Mappings of HashMap hm1 are : {1=Geeks, 2=For, 3=Geeks}\nMapping of HashMap hm2 are : {1=Geeks, 2=For, 3=Geeks}', 'Initial Map {1=Geeks, 2=Geeks, 3=Geeks}\nUpdated Map {1=Geeks, 2=For, 3=Geeks}', 'Mappings of HashMap are : {1=Geeks, 2=For, 3=Geeks, 4=For}\nMappings after removal are : {1=Geeks, 2=For, 3=Geeks}', 'Key: vaibhav Value: 20\nKey: vishal Value: 10\nKey: sachin Value: 30', 'Map m = Collections.synchronizedMap(new HashMap(...));']","['clear()|||Removes all of the mappings from this map.&&&clone()|||Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.&&&compute(K key, BiFunction<? super K, ? super V,? extends V> remappingFunction)|||Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).&&&computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)|||If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.\xa0&&&computeIfPresent(K key, BiFunction<? super K, ? super V,? extends V> remappingFunction)|||If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.\xa0&&&containsKey(Object key)|||Returns true if this map contains a mapping for the specified key.&&&containsValue(Object value)|||Returns true if this map maps one or more keys to the specified value.&&&entrySet()|||Returns a Set view of the mappings contained in this map.&&&get(Object key)|||Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.&&&isEmpty()|||Returns true if this map contains no key-value mappings.&&&keySet()|||Returns a Set view of the keys contained in this map.&&&merge(K key, V value, BiFunction<? super V, ? super V,? extends V> remappingFunction)|||If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.&&&put(K key, V value)|||Associates the specified value with the specified key in this map.&&&putAll(Map<? extends K,? extends V> m)|||Copies all of the mappings from the specified map to this map.&&&remove(Object key)|||Removes the mapping for the specified key from this map if present.&&&size()|||Returns the number of key-value mappings in this map.&&&values()|||Returns a Collection view of the values contained in this map.', 'equals()|||Compares the specified object with this map for equality.&&&hashCode()|||Returns the hash code value for this map.&&&toString()|||Returns a string representation of this map.', 'equals()|||Compares the specified object with this map for equality.&&&forEach(BiConsumer<? super K,? super V> action)|||Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.\xa0&&&getOrDefault(Object key, V defaultValue)|||Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.&&&hashCode()|||Returns the hash code value for this map.&&&putIfAbsent(K key, V value)|||If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.&&&remove(Object key, Object value)|||Removes the entry for the specified key only if it is currently mapped to the specified value.&&&replace(K key, V value)|||Replaces the entry for the specified key only if it is currently mapped to some value.&&&replace(K key, V oldValue, V newValue)|||Replaces the entry for the specified key only if currently mapped to the specified value.&&&replaceAll(BiFunction<? super K,? super V,? extends V> function)|||Replaces each entry’s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.']","['The type of keys maintained by this map|||The type of mapped values&&&HashMap is a part of java.util package.|||HashMap extends an abstract class AbstractMap which also provides an incomplete implementation of Map interface.|||It also implements Cloneable and Serializable interface. K and V in the above definition represent Key and Value respectively.|||HashMap doesn’t allow duplicate keys but allows duplicate values. That means A single key can’t contain more than 1 value but more than 1 key can contain a single value.|||HashMap allows null key also but only once and multiple null values.|||This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. It is roughly similar to HashTable but is unsynchronized.&&&K – The type of the keys in the map.|||V – The type of values mapped in the map.&&&Hashmap vs Treemap|||Hashmap vs HashTable|||Recent articles on Java HashMap!&&&&&&HashMap()|||HashMap(int initialCapacity)|||HashMap(int initialCapacity, float loadFactor)|||HashMap(Map map)&&&int hash|||K key|||V value|||Node next&&&Initial Capacity|||Load Factor&&&']"
81,['Hashtable in Java'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java', 'Java']","['The Hierarchy of Hashtable', '\xa0', 'Constructors:', 'Performing Various Operations on Hashtable \xa0\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0', '\xa0Internal Working of Hashtable', 'Methods of Hashtable', 'Methods declared in interface java.util.Map']","['https://media.geeksforgeeks.org/wp-content/uploads/20201124183400/HierarchyofHashtable.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20201118184804/hashtablecollisioninternalworkingJava.png']",[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/java-util-dictionary-class-java/', 'https://www.geeksforgeeks.org/java-util-properties-class-java/', 'https://www.geeksforgeeks.org/hashtable-put-method-in-java/#:~:text=Hashtable.,replaced%20by%20the%20new%20value.', 'https://www.geeksforgeeks.org/hashtable-put-method-in-java/#:~:text=Hashtable.,replaced%20by%20the%20new%20value.', 'https://www.geeksforgeeks.org/hashtable-remove-method-in-java/#:~:text=util.,particular%20key%20in%20the%20Table.', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/hashtable-clear-method-in-java/#:~:text=Hashtable.,keys%20from%20a%20specified%20Hashtable.&text=Parameters%3A%20The%20method%20does%20not,does%20not%20return%20any%20value.', 'https://www.geeksforgeeks.org/hashtable-clone-method-in-java/', 'https://www.geeksforgeeks.org/hashtable-compute-method-in-java-with-examples/#:~:text=The%20compute(Key%2C%20BiFunction),no%20current%20mapping%20is%20found).', 'https://www.geeksforgeeks.org/hashtable-compute-method-in-java-with-examples/#:~:text=The%20compute(Key%2C%20BiFunction),no%20current%20mapping%20is%20found).', 'https://www.geeksforgeeks.org/hashmap-computeifabsent-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-computeifabsent-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashmap-computeifpresentkey-bifunction-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/hashtable-contains-method-in-java/#:~:text=Hashtable.,keys%20present%20in%20the%20Hashtable.&text=Return%20Value%3A%20The%20method%20returns,the%20keys%20in%20the%20Hashtable.', 'https://www.geeksforgeeks.org/hashtable-containskey-method-in-java/', 'https://www.geeksforgeeks.org/hashtable-containsvalue-method-in-java/#:~:text=Hashtable.,the%20keys%20in%20the%20table.', 'https://www.geeksforgeeks.org/hashtable-elements-method-in-java/#:~:text=Hashtable.,values%20present%20in%20the%20hashtable.&text=Parameters%3A%20The%20method%20does%20not,the%20values%20of%20the%20Hashtable.', 'https://www.geeksforgeeks.org/hashtable-get-method-in-java/', 'https://www.geeksforgeeks.org/hashtable-isempty-method-in-java/', 'https://www.geeksforgeeks.org/hashtable-keys-method-in-java/', 'https://www.geeksforgeeks.org/hashtable-put-method-in-java/#:~:text=Hashtable.,replaced%20by%20the%20new%20value.', 'https://www.geeksforgeeks.org/hashtable-size-method-in-java/#:~:text=Hashtable.,or%20mappings%20in%20the%20Table.&text=Parameters%3A%20The%20method%20does%20not%20take%20any%20parameters.', 'https://www.geeksforgeeks.org/hashtable-tostring-method-in-java/', 'https://www.geeksforgeeks.org/hashtable-foreach-method-in-java-with-examples/#:~:text=The%20forEach(BiConsumer)%20method%20of,in%20the%20order%20of%20iteration.', 'https://www.geeksforgeeks.org/differences-between-hashmap-and-hashtable-in-java/#:~:text=1.,code%20whereas%20Hashtable%20is%20synchronized.&text=HashMap%20allows%20one%20null%20key,any%20null%20key%20or%20value.', 'https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Hashtable.html', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Features of Hashtable', 'Declaration:', 'Type Parameters:', 'Hashtable<K, V> ht = new Hashtable<K, V>();', 'Hashtable<K, V> ht = new Hashtable<K, V>(int initialCapacity);', 'Hashtable<K, V> ht = new Hashtable<K, V>(int size, float fillRatio);', 'Hashtable<K, V> ht = new Hashtable<K, V>(Map m);', 'DESCRIPTION', 'compute(K key, BiFunction<? super\xa0', 'K,? super V,? extends V> remappingFunction)', 'computeIfAbsent(K key, Function<? super K,?\xa0', 'extends V> mappingFunction)', 'DESCRIPTION', 'remove\u200b(Object key,', '\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Object value)', 'Must Read:', 'Reference: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Hashtable.html']","['The Hashtable class implements a hash table, which maps keys to values. Any non-null object can be used as a key or as a value.\xa0To successfully store and retrieve objects from a hashtable, the objects used as keys must implement the hashCode method and the equals method. \xa0', 'Hashtable implements Serializable, Cloneable, Map<K,V> interfaces and extends Dictionary<K,V>. The direct subclasses are Properties, UIDefaults.\xa0', 'In order to create a Hashtable, we need to import it from java.util.Hashtable. There are various ways in which we can create a Hashtable.', '1. Hashtable(): This creates an empty hashtable with the default load factor of 0.75 and an initial capacity is 11.\xa0', '2. Hashtable(int initialCapacity): This creates a hash table that has an initial size specified by initialCapacity and the default load factor is 0.75.', '3. Hashtable(int size, float fillRatio): This version creates a hash table that has an initial size specified by size and fill ratio specified by fillRatio. fill ratio: Basically, it determines how full a hash table can be before it is resized upward and its Value lies between 0.0 to 1.0.', '4. Hashtable(Map<? extends K,? extends V> m): This creates a hash table that is initialized with the elements in m.', '1. Adding Elements: In order to add an element to the hashtable, we can use the put() method. However, the insertion order is not retained in the hashtable. Internally, for every element, a separate hash is generated and the elements are indexed based on this hash to make it more efficient. \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0', '2. Changing Elements: After adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the hashtable are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.', '3. Removing Element: In order to remove an element from the Map, we can use the remove() method. This method takes the key value and removes the mapping for a key from this map if it is present in the map.', '4. Traversal of a Hashtable: To iterate the table, we can make use of an advanced for loop. Below is the example of iterating a hashtable.', 'It is possible that two unequal Objects have the same hashcode. This is called a collision. To resolve collisions, hashtable uses an array of lists. The pairs mapped to a single bucket (array index) are stored in a list and list reference is stored in the array index.']","['Hashtable datastructure is an array of buckets which stores the key/value pairs in them. It makes use of hashCode() method to determine which bucket the key/value pair should map.The hash function helps to determine the location for a given key in the bucket list. Generally, hashcode is a non-negative integer that is equal for equal Objects and may or may not be equal for unequal Objects. To determine whether two objects are equal or not, hashtable makes use of the equals() method.']","['// Java program to demonstrate// adding elements to Hashtable  import java.io.*;import java.util.*;  class AddElementsToHashtable {    public static void main(String args[])    {        // No need to mention the        // Generic type twice        Hashtable<Integer, String> ht1 = new Hashtable<>();          // Initialization of a Hashtable        // using Generics        Hashtable<Integer, String> ht2            = new Hashtable<Integer, String>();          // Inserting the Elements        // using put() method        ht1.put(1, ""one"");        ht1.put(2, ""two"");        ht1.put(3, ""three"");          ht2.put(4, ""four"");        ht2.put(5, ""five"");        ht2.put(6, ""six"");          // Print mappings to the console        System.out.println(""Mappings of ht1 : "" + ht1);        System.out.println(""Mappings of ht2 : "" + ht2);    }}', '// Java program to demonstrate// adding elements to Hashtable  import java.io.*;import java.util.*;  class AddElementsToHashtable {    public static void main(String args[])    {        // No need to mention the        // Generic type twice        Hashtable<Integer, String> ht1 = new Hashtable<>(4);          // Initialization of a Hashtable        // using Generics        Hashtable<Integer, String> ht2            = new Hashtable<Integer, String>(2);          // Inserting the Elements        // using put() method        ht1.put(1, ""one"");        ht1.put(2, ""two"");        ht1.put(3, ""three"");          ht2.put(4, ""four"");        ht2.put(5, ""five"");        ht2.put(6, ""six"");          // Print mappings to the console        System.out.println(""Mappings of ht1 : "" + ht1);        System.out.println(""Mappings of ht2 : "" + ht2);    }}', '// Java program to demonstrate// adding elements to Hashtable  import java.io.*;import java.util.*;  class AddElementsToHashtable {    public static void main(String args[])    {        // No need to mention the        // Generic type twice        Hashtable<Integer, String> ht1            = new Hashtable<>(4, 0.75f);          // Initialization of a Hashtable        // using Generics        Hashtable<Integer, String> ht2            = new Hashtable<Integer, String>(3, 0.5f);          // Inserting the Elements        // using put() method        ht1.put(1, ""one"");        ht1.put(2, ""two"");        ht1.put(3, ""three"");          ht2.put(4, ""four"");        ht2.put(5, ""five"");        ht2.put(6, ""six"");          // Print mappings to the console        System.out.println(""Mappings of ht1 : "" + ht1);        System.out.println(""Mappings of ht2 : "" + ht2);    }}', '// Java program to demonstrate// adding elements to Hashtable  import java.io.*;import java.util.*;  class AddElementsToHashtable {    public static void main(String args[])    {        // No need to mention the        // Generic type twice        Map<Integer, String> hm = new HashMap<>();          // Inserting the Elements        // using put() method        hm.put(1, ""one"");        hm.put(2, ""two"");        hm.put(3, ""three"");          // Initialization of a Hashtable        // using Generics        Hashtable<Integer, String> ht2            = new Hashtable<Integer, String>(hm);          // Print mappings to the console          System.out.println(""Mappings of ht2 : "" + ht2);    }}', '// Java program to illustrate// Java.util.Hashtable  import java.util.*;  public class GFG {    public static void main(String[] args)    {        // Create an empty Hashtable        Hashtable<String, Integer> ht = new Hashtable<>();          // Add elements to the hashtable        ht.put(""vishal"", 10);        ht.put(""sachin"", 30);        ht.put(""vaibhav"", 20);          // Print size and content        System.out.println(""Size of map is:- "" + ht.size());        System.out.println(ht);          // Check if a key is present and if        // present, print value        if (ht.containsKey(""vishal"")) {            Integer a = ht.get(""vishal"");            System.out.println(""value for key""                               + "" \\""vishal\\"" is:- "" + a);        }    }}', '// Java program to demonstrate// adding elements to Hashtable  import java.io.*;import java.util.*;  class AddElementsToHashtable {    public static void main(String args[])    {        // No need to mention the        // Generic type twice        Hashtable<Integer, String> ht1 = new Hashtable<>();          // Initialization of a Hashtable        // using Generics        Hashtable<Integer, String> ht2            = new Hashtable<Integer, String>();          // Inserting the Elements          // using put() method        ht1.put(1, ""Geeks"");        ht1.put(2, ""For"");        ht1.put(3, ""Geeks"");          ht2.put(1, ""Geeks"");        ht2.put(2, ""For"");        ht2.put(3, ""Geeks"");                    // Print mappings to the console        System.out.println(""Mappings of ht1 : "" + ht1);        System.out.println(""Mappings of ht2 : "" + ht2);    }}', '// Java program to demonstrate// updating Hashtable  import java.io.*;import java.util.*;class UpdatesOnHashtable {    public static void main(String args[])    {          // Initialization of a Hashtable        Hashtable<Integer, String> ht            = new Hashtable<Integer, String>();          // Inserting the Elements          // using put method        ht.put(1, ""Geeks"");        ht.put(2, ""Geeks"");        ht.put(3, ""Geeks"");                    // print initial map to the console        System.out.println(""Initial Map "" + ht);                    // Update the value at key 2        ht.put(2, ""For"");                    // print the updated map        System.out.println(""Updated Map "" + ht);    }}', '// Java program to demonstrate// the removing mappings from Hashtable  import java.io.*;import java.util.*;class RemovingMappingsFromHashtable {      public static void main(String args[])    {        // Initialization of a Hashtable        Map<Integer, String> ht            = new Hashtable<Integer, String>();          // Inserting the Elements          // using put method        ht.put(1, ""Geeks"");        ht.put(2, ""For"");        ht.put(3, ""Geeks"");        ht.put(4, ""For"");          // Initial HashMap        System.out.println(""Initial map : "" + ht);            // Remove the map entry with key 4        ht.remove(4);          // Final Hashtable        System.out.println(""Updated map : "" + ht);    }}', '// Java program to illustrate// traversal of Hashtable  import java.util.Hashtable;import java.util.Map;  public class IteratingHashtable {    public static void main(String[] args)    {          // Create an instance of Hashtable        Hashtable<String, Integer> ht = new Hashtable<>();            // Adding elements using put method        ht.put(""vishal"", 10);        ht.put(""sachin"", 30);        ht.put(""vaibhav"", 20);                // Iterating using enhanced for loop        for (Map.Entry<String, Integer> e : ht.entrySet())            System.out.println(e.getKey() + "" ""                               + e.getValue());    }}']","['public class Hashtable<K,V> extends Dictionary<K,V> implements Map<K,V>, Cloneable, Serializable', 'Mappings of ht1 : {3=three, 2=two, 1=one}\nMappings of ht2 : {6=six, 5=five, 4=four}', 'Mappings of ht1 : {3=three, 2=two, 1=one}\nMappings of ht2 : {4=four, 6=six, 5=five}', 'Mappings of ht1 : {3=three, 2=two, 1=one}\nMappings of ht2 : {6=six, 5=five, 4=four}', 'Mappings of ht2 : {3=three, 2=two, 1=one}', 'Size of map is:- 3\n{vaibhav=20, vishal=10, sachin=30}\nvalue for key ""vishal"" is:- 10', 'Mappings of ht1 : {3=Geeks, 2=For, 1=Geeks}\nMappings of ht2 : {3=Geeks, 2=For, 1=Geeks}', 'Initial Map {3=Geeks, 2=Geeks, 1=Geeks}\nUpdated Map {3=Geeks, 2=For, 1=Geeks}', 'Initial map : {4=For, 3=Geeks, 2=For, 1=Geeks}\nUpdated map : {3=Geeks, 2=For, 1=Geeks}', 'vaibhav 20\nvishal 10\nsachin 30']","['clear()|||Clears this hashtable so that it contains no keys.&&&clone()|||Creates a shallow copy of this hashtable.&&&compute(K key, BiFunction<? super\xa0K,? super V,? extends V> remappingFunction)|||Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).&&&computeIfAbsent(K key, Function<? super K,?\xa0extends V> mappingFunction)|||If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.&&&computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)|||If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.&&&contains(Object value)|||Tests if some key maps into the specified value in this hashtable.&&&containsKey(Object key)|||Tests if the specified object is a key in this hashtable.&&&containsValue(Object value)|||Returns true if this hashtable maps one or more keys to this value.&&&elements()|||Returns an enumeration of the values in this hashtable.&&&entrySet()|||Returns a Set view of the mappings contained in this map.&&&equals(Object o)|||Compares the specified Object with this Map for equality, as per the definition in the Map interface.&&&get(Object key)|||Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.&&&hashCode()|||Returns the hash code value for this Map as per the definition in the Map interface.&&&\xa0isEmpty()|||Tests if this hashtable maps no keys to values.&&&keys()|||Returns an enumeration of the keys in this hashtable.&&&keySet()|||Returns a Set view of the keys contained in this map.&&&merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)|||If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.&&&\xa0put(K key, V value)|||Maps the specified key to the specified value in this hashtable.&&&\xa0putAll(Map<? extends K,? extends V> t)|||Copies all of the mappings from the specified map to this hashtable.&&&rehash()|||Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently.&&&remove\u200b(Object key)|||Removes the key (and its corresponding value) from this hashtable.&&&size()|||Returns the number of keys in this hashtable.&&&\xa0toString()|||Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters “, ” (comma and space).&&&\xa0values()|||Returns a Collection view of the values contained in this map.', '\xa0forEach(BiConsumer<? super K,? super V> action)|||Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.&&&getOrDefault(Object key, V defaultValue)|||Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.&&&putIfAbsent\u200b(K key, V value)|||If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.&&&remove\u200b(Object key,\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Object value)|||Removes the entry for the specified key only if it is currently mapped to the specified value.&&&replace(K key, V value)|||Replaces the entry for the specified key only if it is currently mapped to some value.&&&replace(K key, V oldValue, V newValue)|||Replaces the entry for the specified key only if currently mapped to the specified value.&&&replaceAll(BiFunction<? super K,? super V,? extends V> function)|||Replaces each entry’s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.']","['It is similar to HashMap, but is synchronized.|||Hashtable stores key/value pair in hash table.|||In Hashtable we specify an object that is used as a key, and the value we want to associate to that key. The key is then hashed, and the resulting hash code is used as the index at which the value is stored within the table.|||The initial default capacity of Hashtable class is 11 whereas loadFactor is 0.75.|||HashMap doesn’t provide any Enumeration, while Hashtable provides not fail-fast Enumeration.&&&K – the type of keys maintained by this map|||V – the type of mapped values&&&K – The type of the keys in the map.|||V – The type of values mapped in the map.&&&Differences between HashMap and HashTable in Java']"
82,['LinkedHashMap in Java'],"['Java', 'Java', 'Java', 'Java', 'Java']","['How LinkedHashMap Work Internally?', 'Synchronized LinkedHashMap', 'Constructors of LinkedHashMap Class', '\xa0Methods of LinkedHashMap\xa0', '\xa0Various operations on the HashMap class']",['https://contribute.geeksforgeeks.org/wp-content/uploads/Selection_030.png'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java-with-examples/', 'https://www.geeksforgeeks.org/doubly-linked-list/', 'https://www.geeksforgeeks.org/hashing-set-1-introduction/', 'https://www.geeksforgeeks.org/linkedhashmap-get-method-in-java/', 'https://www.geeksforgeeks.org/linkedhashmap-removeeldestentry-method-in-java/', 'https://www.geeksforgeeks.org/linkedhashmap-removeeldestentry-method-in-java/', 'https://www.geeksforgeeks.org/java-util-hashmap-in-java/', 'https://www.geeksforgeeks.org/treemap-in-java/#:~:text=The%20TreeMap%20in%20Java%20is,on%20which%20constructor%20is%20used.', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/lru-cache-implementation/', 'https://www.geeksforgeeks.org/differences-treemap-hashmap-linkedhashmap-java/', 'https://www.geeksforgeeks.org/differences-treemap-hashmap-linkedhashmap-java/', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Important Features of a LinkedHashMap are listed as follows:', 'Declaration:', 'Here, K is the key Object type and V is the value Object type', '1. LinkedHashMap(): This is used to construct a default LinkedHashMap constructor.', 'DESCRIPTION', 'Let’s see how to perform a few frequently used operations on the LinkedHashMap.', 'Operation 1: Adding Elements', 'Operation 2: Changing Elements', 'Operation 3: Removing Element', 'Operation 4: Iterating through the LinkedHashMap', 'Related Articles:']","['The LinkedHashMap Class is just like HashMap with an additional feature of maintaining an order of elements inserted into it. HashMap provided the advantage of quick insertion, search, and deletion but it never maintained the track and order of insertion which the LinkedHashMap provides where the elements can be accessed in their insertion order.\xa0', 'It implements Map<K, V> interface, and extends HashMap<K, V> class. Though the Hierarchy of LinkedHashMap is as depicted in below media as follows:', 'A LinkedHashMap is an extension of the HashMap class and it implements the Map interface. Therefore, the class is declared as:', 'In this class, the data is stored in the form of nodes. The implementation of the LinkedHashMap is very similar to a doubly-linked list. Therefore, each node of the LinkedHashMap is represented as:', 'In order to create a LinkedHashMap, we need to create an object of the LinkedHashMap class. The LinkedHashMap class consists of various constructors that allow the possible creation of the ArrayList. The following are the constructors available in this class:', '2. LinkedHashMap(int capacity): It is used to initialize a particular LinkedHashMap with a specified capacity.', '3. LinkedHashMap(Map<? extends K,\u200b? extends V> map): It is used to initialize a particular LinkedHashMap with the elements of the specified map.', '4. LinkedHashMap(int capacity, float fillRatio): It is used to initialize both the capacity and fill ratio for a LinkedHashMap. A fillRatio also called as loadFactor is a metric that determines when to increase the size of the LinkedHashMap automatically. By default, this value is 0.75 which means that the size of the map is increased when the map is 75% full.', '5. LinkedHashMap(int capacity, float fillRatio, boolean Order): This constructor is also used to initialize both the capacity and fill ratio for a LinkedHashMap along with whether to follow the insertion order or not.', 'Here, For the Order attribute, true is passed for the last access order and false is passed for the insertion order.', 'Application: Since the LinkedHashMap makes use of Doubly LinkedList to maintain the insertion order, we can implement LRU Cache functionality by overriding the removeEldestEntry() method to impose a policy for automatically removing stale when new mappings are added to the map. This lets you expire data using some criteria that you define.', 'In order to add an element to the LinkedHashMap, we can use the put() method. This is different from HashMap because in HashMap, the insertion order is not retained but it is retained in the LinkedHashMap.\xa0', 'After adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the treemap are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.', 'In order to remove an element from the TreeMap, we can use the remove() method. This method takes the key value and removes the mapping for the key from this treemap if it is present in the map. Apart from that, we can also remove the first entered element from the map if the maximum size is defined.', 'There are multiple ways to iterate through the Map. The most famous way is to use a for-each loop and get the keys. The value of the key is found by using the getValue() method.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['The implementation of LinkedHashMap not synchronized. If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be “wrapped” using the Collections.synchronizedMap method. This is best done at creation time, to prevent accidental unsynchronized access to the map:']","['// Java Program to Demonstrate Working of LinkedHashMap  // Importing required classesimport java.util.*;  // LinkedHashMapExamplepublic class GFG {      // Main driver method    public static void main(String a[])    {          // Creating an empty LinkedHashMap        LinkedHashMap<String, String> lhm            = new LinkedHashMap<String, String>();          // Adding entries in Map        // using put() method        lhm.put(""one"", ""practice.geeksforgeeks.org"");        lhm.put(""two"", ""code.geeksforgeeks.org"");        lhm.put(""four"", ""quiz.geeksforgeeks.org"");          // Printing all entries inside Map        System.out.println(lhm);          // Note: It prints the elements in same order        // as they were inserted          // Getting and printing value for a specic key        System.out.println(""Getting value for key \'one\': ""                           + lhm.get(""one""));          // Getting size of Map using size() method        System.out.println(""Size of the map: ""                           + lhm.size());          // Checking whether Map is empty or not        System.out.println(""Is map empty? ""                           + lhm.isEmpty());          // Using containsKey() method to check for a key        System.out.println(""Contains key \'two\'? ""                           + lhm.containsKey(""two""));          // Using containsKey() method to check for a value        System.out.println(            ""Contains value \'practice.geeks""            + ""forgeeks.org\'? ""            + lhm.containsValue(""practice""                                + "".geeksforgeeks.org""));          // Removing entry using remove() method        System.out.println(""delete element \'one\': ""                           + lhm.remove(""one""));          // Printing mappings to the console        System.out.println(""Mappings of LinkedHashMap : ""                           + lhm);    }}', '// Java Program to Demonstrate Adding// Elements to a LinkedHashMap  // Importing required classesimport java.util.*;  // Main class// AddElementsToLinkedHashMapclass GFG {      // Main driver method    public static void main(String args[])    {          // Initialization of a LinkedHashMap        // using Generics        LinkedHashMap<Integer, String> hm1            = new LinkedHashMap<Integer, String>();          // Add mappings to Map        // using put() method        hm1.put(3, ""Geeks"");        hm1.put(2, ""For"");        hm1.put(1, ""Geeks"");          // Printing mappings to the console        System.out.println(""Mappings of LinkedHashMap : ""                           + hm1);    }}', '// Java Program to Demonstrate Updation of Elements// of LinkedHashMap  import java.util.*;  // Main class// UpdatingLinkedHashMapclass GFG {      // Main driver method    public static void main(String args[])    {          // Initialization of a LinkedHashMap        // using Generics        LinkedHashMap<Integer, String> hm            = new LinkedHashMap<Integer, String>();          // Inserting mappings into Map        // using put() method        hm.put(3, ""Geeks"");        hm.put(2, ""Geeks"");        hm.put(1, ""Geeks"");          // Printing mappings to the console        System.out.println(""Initial map : "" + hm);          // Updating the value with key 2        hm.put(2, ""For"");          // Printing the updated Map        System.out.println(""Updated Map : "" + hm);    }}', '// Java program to Demonstrate Removal of Elements// from LinkedHashMap  // Importing utility classesimport java.util.*;  // Main class// RemovingMappingsFromLinkedHashMapclass GFG {      // Main driver method    public static void main(String args[])    {        // Initialization of a LinkedHashMap        // using Generics        LinkedHashMap<Integer, String> hm            = new LinkedHashMap<Integer, String>();          // Inserting the Elements        // using put() method        hm.put(3, ""Geeks"");        hm.put(2, ""Geeks"");        hm.put(1, ""Geeks"");        hm.put(4, ""For"");          // Printing the mappings to the console        System.out.println(""Initial Map : "" + hm);          // Removing the mapping with Key 4        hm.remove(4);          // Printing the updated map        System.out.println(""Updated Map : "" + hm);    }}', '// Java program to demonstrate// Iterating over LinkedHashMap  // Importing required classesimport java.util.*;  // Main class// IteratingOverLinkedHashMapclass GFG {      // Main driver method    public static void main(String args[])    {          // Initialization of a LinkedHashMap        // using Generics        LinkedHashMap<Integer, String> hm            = new LinkedHashMap<Integer, String>();          // Inserting elements into Map        // using put() method        hm.put(3, ""Geeks"");        hm.put(2, ""For"");        hm.put(1, ""Geeks"");          // For-each loop for traversal over Map        for (Map.Entry<Integer, String> mapElement :             hm.entrySet()) {              Integer key = mapElement.getKey();              // Finding the value            // using getValue() method            String value = mapElement.getValue();              // Printing the key-value pairs            System.out.println(key + "" : "" + value);        }    }}']","['public class LinkedHashMap<K,\u200bV> extends HashMap<K,\u200bV> implements Map<K,\u200bV>', 'public class LinkedHashMap \nextends HashMap \nimplements Map', 'Map m = Collections.synchronizedMap(new LinkedHashMap(...));', 'LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>();', 'LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>(int capacity);', 'LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>(Map<? extends K,\u200b? extends V> map);', 'LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>(int capacity, float fillRatio);', 'LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>(int capacity, float fillRatio, boolean Order);', ""{one=practice.geeksforgeeks.org, two=code.geeksforgeeks.org, four=quiz.geeksforgeeks.org}\nGetting value for key 'one': practice.geeksforgeeks.org\nSize of the map: 3\nIs map empty? false\nContains key 'two'? true\nContains value 'practice.geeksforgeeks.org'? true\ndelete element 'one': practice.geeksforgeeks.org\nMappings of LinkedHashMap : {two=code.geeksforgeeks.org, four=quiz.geeksforgeeks.org}"", 'Mappings of LinkedHashMap : {3=Geeks, 2=For, 1=Geeks}', 'Initial map : {3=Geeks, 2=Geeks, 1=Geeks}\nUpdated Map : {3=Geeks, 2=For, 1=Geeks}', 'Initial Map : {3=Geeks, 2=Geeks, 1=Geeks, 4=For}\nUpdated Map : {3=Geeks, 2=Geeks, 1=Geeks}', '3 : Geeks\n2 : For\n1 : Geeks']","['containsValue\u200b(Object value)|||Returns true if this map maps one or more keys to the specified value.&&&entrySet()|||Returns a Set view of the mappings contained in this map.&&&get\u200b(Object key)|||Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.&&&keySet()|||Returns a Set view of the keys contained in this map.&&&removeEldestEntry\u200b(Map.Entry<K,\u200bV> eldest)|||Returns true if this map should remove its eldest entry.&&&values()|||Returns a Collection view of the values contained in this map.']","['A LinkedHashMap contains values based on the key. It implements the Map interface and extends the HashMap class.|||It contains only unique elements.|||It may have one null key and multiple null values.|||It is non-synchronized.|||It is the same as HashMap with an additional feature that it maintains insertion order. For example, when we run the code with a HashMap, we get a different order of elements.&&&K – The type of the keys in the map.|||V – The type of values mapped in the map.&&&Hash: All the input keys are converted into a hash which is a shorter form of the key so that the search and insertion are faster.|||Key: Since this class extends HashMap, the data is stored in the form of a key-value pair. Therefore, this parameter is the key to the data.|||Value: For every key, there is a value associated with it. This parameter stores the value of the keys. Due to generics, this value can be of any form.|||Next: Since the LinkedHashMap stores the insertion order, this contains the address to the next node of the LinkedHashMap.|||Previous: This parameter contains the address to the previous node of the LinkedHashMap.&&&LRU Cache Implementation|||Differences between TreeMap, HashMap, and LinkedHashMap in Java']"
83,['SortedMap Interface in Java with Examples'],"['Java', 'Java', 'Java', 'Java', 'Java', 'Java']","['Performing Various Operations on SortedMap', 'Methods of SortedMap Interface', 'Methods inherited from interface java.util.Map']",['https://media.geeksforgeeks.org/wp-content/uploads/20200807195934/SortedMap.png'],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/hashmap-treemap-java/', 'https://www.geeksforgeeks.org/hashmap-treemap-java/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/navigablemap-interface-in-java-with-example/#:~:text=NavigableMap%20is%20an%20extension%20of,than%20specified%20key%2C%20tailMap%20whose', 'https://www.geeksforgeeks.org/treemap-in-java/#:~:text=The%20TreeMap%20in%20Java%20is,on%20which%20constructor%20is%20used.', 'https://www.geeksforgeeks.org/interfaces-in-java/', 'https://www.geeksforgeeks.org/treemap-in-java/', 'https://www.geeksforgeeks.org/treemap-put-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/treemap-put-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/treemap-remove-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://www.geeksforgeeks.org/sortedmap-comparator-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedmap-entryset-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedmap-firstkey-method-in-java/', 'https://www.geeksforgeeks.org/sortedmap-headmap-method-in-java/', 'https://www.geeksforgeeks.org/sortedmap-keyset-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/sortedmap-lastkey-method-in-java/', 'https://www.geeksforgeeks.org/sortedmap-submap-method-in-java/', 'https://www.geeksforgeeks.org/sortedmap-tailmap-method-in-java/', 'https://www.geeksforgeeks.org/sortedmap-values-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-clear-method-in-java-with-example/', 'https://www.geeksforgeeks.org/map-containskey-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-containsvalue-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-entryset-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-equals-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-get-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-hashcode-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-isempty-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-keyset-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-put-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-putall-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/map-remove-method-in-java-with-examples/', 'https://www.facebook.com/Pratik.Agarwal01', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Type Parameters:', 'The parent interface of SortedMap is Map<K, V>. \xa0', 'The subInterfaces of SortedMap are ConcurrentNavigableMap<K, V>, NavigableMap<K, V>.', 'SortedMap is implemented by ConcurrentSkipListMap, TreeMap.', 'Declaration:', 'Creating SortedMap Objects', '// Obj1, Obj2 are the type of the object to be stored in SortedMap', 'SortedMap<Obj1, Obj2> set = new TreeMap<Obj1, Obj2> ();', 'The class which implements the SortedMap interface is TreeMap.', 'This method is used to check whether a particular key is being mapped into the Map or not.', '\xa0It takes the key element as a parameter and returns True if that element is mapped in the map.']","['SortedMap is an interface in the collection framework. This interface extends the Map interface and provides a total ordering of its elements (elements can be traversed in sorted order of keys). The class that implements this interface is TreeMap.\xa0', 'The main characteristic of a SortedMap is that it orders the keys by their natural ordering, or by a specified comparator. So consider using a TreeMap when you want a map that satisfies the following criteria:\xa0', 'Since SortedMap is an interface, objects cannot be created of the type SortedMap. We always need a class that extends this list in order to create an object. And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the SortedMap. This type-safe map can be defined as:', 'Since SortedMap is an interface, it can be used only with a class that implements this interface. TreeMap is the class that implements the SortedMap interface. Now, let’s see how to perform a few frequently used operations on the TreeMap.', '1. Adding Elements: In order to add an element to the SortedMap, we can use the put() method. However, the insertion order is not retained in the TreeMap. Internally, for every element, the keys are compared and sorted in the ascending order.', '2. Changing Elements: After adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the SortedMap are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.', '3. Removing Element: In order to remove an element from the SortedMap, we can use the remove() method. This method takes the key value and removes the mapping for the key from this SortedMap if it is present in the map.', '4. Iterating through the SortedMap: There are multiple ways to iterate through the Map. The most famous way is to use an enhanced for loop and get the keys. The value of the key is found by using the getValue() method.', 'This method is used to check whether a particular value is being mapped by a single or more than one key in the Map.\xa0', 'It takes the value as a parameter and returns True if that value is mapped by any of the key in the map.', 'This method is used to create a set out of the same elements contained in the map. It basically returns a set view of the map or we can create a new set and store the map elements into them.', 'This method is used to check for equality between two maps. It verifies whether the elements of one map passed as a parameter is equal to the elements of this map or not.', 'This method is used to retrieve or fetch the value mapped by a particular key mentioned in the parameter. It returns NULL when the map contains no such mapping for the key.', 'This method is used to return a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.', 'This method is used to create a collection out of the values of the map. It basically returns a Collection view of the values in the HashMap.']","['TreeMap class which is implemented in the collections framework is an implementation of the SortedMap Interface and SortedMap extends Map Interface. It behaves like a simple map with the exception that it stores keys in a sorted format. TreeMap uses a tree data structure for storage. Objects are stored in sorted, ascending order. But we can also store in descending order by passing a comparator. Let’s see how to create a SortedMap object using this class.', 'This article is contributed by Pratik Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\xa0']","['// Java code to demonstrate SortedMap Interfaceimport java.util.Iterator;import java.util.Map;import java.util.Set;import java.util.SortedMap;import java.util.TreeMap;  public class SortedMapExample {    public static void main(String[] args)    {        SortedMap<Integer, String> sm            = new TreeMap<Integer, String>();        sm.put(new Integer(2), ""practice"");        sm.put(new Integer(3), ""quiz"");        sm.put(new Integer(5), ""code"");        sm.put(new Integer(4), ""contribute"");        sm.put(new Integer(1), ""geeksforgeeks"");        Set s = sm.entrySet();          // Using iterator in SortedMap        Iterator i = s.iterator();          // Traversing map. Note that the traversal        // produced sorted (by keys) output .        while (i.hasNext()) {            Map.Entry m = (Map.Entry)i.next();              int key = (Integer)m.getKey();            String value = (String)m.getValue();              System.out.println(""Key : "" + key                               + ""  value : "" + value);        }    }}', '// Java program add the elements in the SortedMapimport java.io.*;import java.util.*;class GFG {      // Main Method    public static void main(String args[])    {        // Default Initialization of a        // SortedMap        SortedMap tm1 = new TreeMap();          // Initialization of a SortedMap        // using Generics        SortedMap<Integer, String> tm2            = new TreeMap<Integer, String>();          // Inserting the Elements        tm1.put(3, ""Geeks"");        tm1.put(2, ""For"");        tm1.put(1, ""Geeks"");          tm2.put(new Integer(3), ""Geeks"");        tm2.put(new Integer(2), ""For"");        tm2.put(new Integer(1), ""Geeks"");          System.out.println(tm1);        System.out.println(tm2);    }}', '// Java program to change// the elements in SortedMapimport java.io.*;import java.util.*;class GFG {          // Main Method    public static void main(String args[])    {        // Initialization of a SortedMap        // using Generics        SortedMap<Integer, String> tm            = new TreeMap<Integer, String>();          // Inserting the Elements        tm.put(3, ""Geeks"");        tm.put(2, ""Geeks"");        tm.put(1, ""Geeks"");          System.out.println(tm);          tm.put(2, ""For"");          System.out.println(tm);    }}', '// Java program to remove the // elements from SortedMapimport java.io.*;import java.util.*;  class GFG {          // Main Method    public static void main(String args[])    {        // Initialization of a SortedMap        // using Generics        SortedMap<Integer, String> tm            = new TreeMap<Integer, String>();          // Inserting the Elements        tm.put(3, ""Geeks"");        tm.put(2, ""Geeks"");        tm.put(1, ""Geeks"");        tm.put(4, ""For"");          System.out.println(tm);          tm.remove(4);          System.out.println(tm);    }}', '// Java program to iterate through SortedMapimport java.util.*;  class GFG {          // Main Method    public static void main(String args[])    {        // Initialization of a SortedMap        // using Generics        SortedMap<Integer, String> tm            = new TreeMap<Integer, String>();          // Inserting the Elements        tm.put(3, ""Geeks"");        tm.put(2, ""For"");        tm.put(1, ""Geeks"");          for (Map.Entry mapElement : tm.entrySet()) {            int key = (int)mapElement.getKey();              // Finding the value            String value = (String)mapElement.getValue();              System.out.println(key + "" : "" + value);        }    }}', '// Java program to demonstrate the// creation of SortedMap object using// the TreeMap class  import java.util.*;  class GFG {      public static void main(String[] args)    {        SortedMap<String, String> tm            = new TreeMap<String, String>(new Comparator<String>() {                  public int compare(String a, String b)                  {                      return b.compareTo(a);                  }              });          // Adding elements into the TreeMap        // using put()        tm.put(""India"", ""1"");        tm.put(""Australia"", ""2"");        tm.put(""South Africa"", ""3"");          // Displaying the TreeMap        System.out.println(tm);          // Removing items from TreeMap        // using remove()        tm.remove(""Australia"");        System.out.println(""Map after removing ""                           + ""Australia:"" + tm);    }}']","['public interface SortedMap<K, V> extends Map<K, V>\n{\n    Comparator comparator();\n    SortedMap subMap(K fromKey, K toKey);\n    SortedMap headMap(K toKey);\n    SortedMap tailMap(K fromKey);\n    K firstKey();\n    K lastKey();\n}', 'Key : 1  value : geeksforgeeks\nKey : 2  value : practice\nKey : 3  value : quiz\nKey : 4  value : contribute\nKey : 5  value : code', '{1=Geeks, 2=For, 3=Geeks}\n{1=Geeks, 2=For, 3=Geeks}', '{1=Geeks, 2=Geeks, 3=Geeks}\n{1=Geeks, 2=For, 3=Geeks}', '{1=Geeks, 2=Geeks, 3=Geeks, 4=For}\n{1=Geeks, 2=Geeks, 3=Geeks}', '1 : Geeks\n2 : For\n3 : Geeks', '{South Africa=3, India=1, Australia=2}\nMap after removing Australia:{South Africa=3, India=1}']","['comparator()|||Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.&&&entrySet()|||Returns a Set view of the mappings contained in this map.&&&firstKey()|||Returns the first (lowest) key currently in this map.&&&headMap(K toKey)|||Returns a view of the portion of this map whose keys are strictly less than toKey.&&&keySet()|||Returns a Set view of the keys contained in this map.&&&\xa0lastKey()|||Returns the last (highest) key currently in this map.&&&subMap(K fromKey, K toKey)|||Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.&&&tailMap(K fromKey)|||Returns a view of the portion of this map whose keys are greater than or equal to fromKey.&&&values()|||Returns a Collection view of the values contained in this map.', 'clear()\xa0|||This method is used to clear and remove all of the elements or mappings from a specified Map collection.&&&containsKey(Object)|||This method is used to check whether a particular key is being mapped into the Map or not.\xa0It takes the key element as a parameter and returns True if that element is mapped in the map.&&&containsValue(Object)\xa0|||This method is used to check whether a particular value is being mapped by a single or more than one key in the Map.\xa0It takes the value as a parameter and returns True if that value is mapped by any of the key in the map.&&&entrySet()|||This method is used to create a set out of the same elements contained in the map. It basically returns a set view of the map or we can create a new set and store the map elements into them.&&&equals(Object)|||This method is used to check for equality between two maps. It verifies whether the elements of one map passed as a parameter is equal to the elements of this map or not.&&&get(Object)|||This method is used to retrieve or fetch the value mapped by a particular key mentioned in the parameter. It returns NULL when the map contains no such mapping for the key.&&&hashCode()|||This method is used to generate a hashCode for the given map containing key and values.&&&isEmpty()|||This method is used to check if a map is having any entry for key and value pairs. If no mapping exists, then this returns true.&&&keySet()|||This method is used to return a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.&&&put(Object, Object)|||This method is used to associate the specified value with the specified key in this map.&&&putAll(Map)|||This method is used to copy all of the mappings from the specified map to this map.&&&remove(Object)|||This method is used to remove the mapping for a key from this map if it is present in the map.&&&size()|||This method is used to return the number of key/value pairs available in the map.&&&values()|||This method is used to create a collection out of the values of the map. It basically returns a Collection view of the values in the HashMap.']",['null key or null value is not permitted.|||The keys are sorted either by natural ordering or by a specified comparator.&&&K – the type of keys maintained by this map|||V – the type of mapped values']
84,['TreeMap in Java'],"['Features of a TreeMap', 'Constructors in TreeMap', 'Java', 'Java', 'Java', 'Java', 'Methods in the TreeMap Class', 'Java', 'Performing Various Operations on TreeMap', 'Java', 'Java', 'Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/navigablemap-interface-in-java-with-example/', 'https://www.geeksforgeeks.org/comparator-interface-java/', 'https://www.geeksforgeeks.org/collections-in-java-2/', 'https://www.geeksforgeeks.org/map-interface-java-examples/', 'https://www.geeksforgeeks.org/navigablemap-interface-in-java-with-example/', 'https://www.geeksforgeeks.org/sortedmap-java-examples/', 'https://www.geeksforgeeks.org/null-pointer-exception-in-java/', 'https://www.geeksforgeeks.org/map-entry-interface-java-example/', 'https://www.geeksforgeeks.org/collections-synchronizedsortedmap-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/concurrentmodificationexception-in-java-with-examples/', 'https://www.geeksforgeeks.org/red-black-tree-set-1-introduction-2/', 'https://www.geeksforgeeks.org/sortedmap-java-examples/', 'https://www.geeksforgeeks.org/treemap-clear-method-in-java/', 'https://www.geeksforgeeks.org/treemap-clone-method-in-java/', 'https://www.geeksforgeeks.org/treemap-containskey-method-in-java/', 'https://www.geeksforgeeks.org/treemap-containsvalue-method-in-java/', 'https://www.geeksforgeeks.org/treemap-entryset-method-in-java/', 'https://www.geeksforgeeks.org/java-util-treemap-firstentry-firstkey-java/', 'https://www.geeksforgeeks.org/treemap-get-method-in-java/', 'https://www.geeksforgeeks.org/treemap-headmap-method-in-java/', 'https://www.geeksforgeeks.org/treemap-keyset-method-in-java/', 'https://www.geeksforgeeks.org/treemap-lastkey-method-in-java/', 'https://www.geeksforgeeks.org/treemap-put-method-in-java/', 'https://www.geeksforgeeks.org/treemap-putall-method-in-java/', 'https://www.geeksforgeeks.org/treemap-remove-method-in-java/', 'https://www.geeksforgeeks.org/treemap-size-method-in-java/', 'https://www.geeksforgeeks.org/treemap-submap-method-in-java/', 'https://www.geeksforgeeks.org/treemap-values-method-in-java/', 'https://www.geeksforgeeks.org/treemap-put-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/treemap-put-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/treemap-remove-method-in-java/?ref=rp', 'https://www.geeksforgeeks.org/for-each-loop-in-java/', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['Some important features of the treemap are as follows:\xa0', 'Geeks, now you must be wondering how does the TreemMap works internally?\xa0', 'Each node in the tree has:\xa0', 'Let us discuss them individually alongside implementing every constructor as follows:', 'Constructor 1: TreeMap()', 'Constructor 2: TreeMap(Comparator comp)', 'Constructor 3: TreeMap(Map M)', 'Constructor 4: TreeMap(SortedMap sm)', 'Illustration:\xa0', 'Operation 1: Adding Elements', 'Operation 2: Changing Elements', 'Operation 3: Removing Element', 'Operation 4: Iterating through the TreeMap']","['The methods in a TreeMap while getting keyset and values, return an Iterator that is fail-fast in nature. Thus, any concurrent modification will throw ConcurrentModificationException. A TreeMap is based upon a red-black tree data structure.\xa0', 'In order to create a TreeMap, we need to create an object of the TreeMap class. The TreeMap class consists of various constructors that allow the possible creation of the TreeMap. The following are the constructors available in this class:', 'This constructor is used to build an empty treemap that will be sorted by using the natural order of its keys.\xa0', 'This constructor is used to build an empty TreeMap object in which the elements will need an external specification of the sorting order.', 'This constructor is used to initialize a TreeMap with the entries from the given map M which will be sorted by using the natural order of the keys.', 'This constructor is used to initialize a TreeMap with the entries from the given sorted map which will be stored in the same order as the given sorted map.', 'Implementation: The following programs below will demonstrate better how to create, insert, and traverse through the TreeMap.\xa0', 'After the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the TreeMap. Now, let’s see how to perform a few frequently used operations on the TreeMap.', 'In order to add an element to the TreeMap, we can use the put() method. However, the insertion order is not retained in the TreeMap. Internally, for every element, the keys are compared and sorted in ascending order.\xa0', 'After adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the treemap are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.', 'In order to remove an element from the TreeMap, we can use the remove() method. This method takes the key value and removes the mapping for the key from this treemap if it is present in the map.', 'There are multiple ways to iterate through the Map. The most famous way is to use a for-each loop and get the keys. The value of the key is found by using the getValue() method.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['The TreeMap in Java is used to implement Map interface and NavigableMap along with the AbstractMap Class. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used. This proves to be an efficient way of sorting and storing the key-value pairs. The storing order maintained by the treemap must be consistent with equals just like any other sorted map, irrespective of the explicit comparators. The treemap implementation is not synchronized in the sense that if a map is accessed by multiple threads, concurrently and at least one of the threads modifies the map structurally, it must be synchronized externally.\xa0', 'Now let us adhere forward and discuss Synchronized TreeMap. The implementation of a TreeMap is not synchronized. This means that if multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by using the Collections.synchronizedSortedMap method. This is best done at the creation time, to prevent accidental unsynchronized access to the set. This can be done as:']","['// Java Program to Demonstrate TreeMap// using the Default Constructor // Importing required classesimport java.util.*;import java.util.concurrent.*; // Main class// TreeMapImplementationpublic class GFG {     // Method 1    // To show TreeMap constructor    static void Example1stConstructor()    {        // Creating an empty TreeMap        TreeMap<Integer, String> tree_map            = new TreeMap<Integer, String>();         // Mapping string values to int keys        // using put() method        tree_map.put(10, ""Geeks"");        tree_map.put(15, ""4"");        tree_map.put(20, ""Geeks"");        tree_map.put(25, ""Welcomes"");        tree_map.put(30, ""You"");         // Printing the elements of TreeMap        System.out.println(""TreeMap: "" + tree_map);    }     // Method 2    // Main driver method    public static void main(String[] args)    {        System.out.println(""TreeMap using ""                           + ""TreeMap() constructor:\\n"");         // Calling constructor        Example1stConstructor();    }}', '// Java Program to Demonstrate TreeMap// using Comparator Constructor // Importing required classesimport java.util.*;import java.util.concurrent.*; // Class 1// Helper class representing Studentclass Student {     // Attributes of a student    int rollno;    String name, address;     // Constructor    public Student(int rollno, String name, String address)    {         // This keyword refers to current object itself        this.rollno = rollno;        this.name = name;        this.address = address;    }     // Method of this class    // To print student details    public String toString()    {        return this.rollno + "" "" + this.name + "" ""            + this.address;    }} // Class 2// Helper class - Comparator implementationclass Sortbyroll implements Comparator<Student> {     // Used for sorting in ascending order of    // roll number    public int compare(Student a, Student b)    {        return a.rollno - b.rollno;    }} // Class 3// Main classpublic class GFG {     // Calling constructor inside main()    static void Example2ndConstructor()    {        // Creating an empty TreeMap        TreeMap<Student, Integer> tree_map            = new TreeMap<Student, Integer>(                new Sortbyroll());         // Mapping string values to int keys        tree_map.put(new Student(111, ""bbbb"", ""london""), 2);        tree_map.put(new Student(131, ""aaaa"", ""nyc""), 3);        tree_map.put(new Student(121, ""cccc"", ""jaipur""), 1);         // Printing the elements of TreeMap        System.out.println(""TreeMap: "" + tree_map);    }     // Main driver method    public static void main(String[] args)    {         System.out.println(""TreeMap using ""                           + ""TreeMap(Comparator)""                           + "" constructor:\\n"");        Example2ndConstructor();    }}', '// Java Program to Demonstrate TreeMap// using the Default Constructor // Importing required classesimport java.util.*;import java.util.concurrent.*; // Main classpublic class TreeMapImplementation {     // Method 1    // To illustrate constructor<Map>    static void Example3rdConstructor()    {        // Creating an empty HashMap        Map<Integer, String> hash_map            = new HashMap<Integer, String>();         // Mapping string values to int keys        // using put() method        hash_map.put(10, ""Geeks"");        hash_map.put(15, ""4"");        hash_map.put(20, ""Geeks"");        hash_map.put(25, ""Welcomes"");        hash_map.put(30, ""You"");         // Creating the TreeMap using the Map        TreeMap<Integer, String> tree_map            = new TreeMap<Integer, String>(hash_map);         // Printing the elements of TreeMap        System.out.println(""TreeMap: "" + tree_map);    }     // Method 2    // Main driver method    public static void main(String[] args)    {         System.out.println(""TreeMap using ""                           + ""TreeMap(Map)""                           + "" constructor:\\n"");         Example3rdConstructor();    }}', '// Java Program to Demonstrate TreeMap// using the SortedMap Constructor // Importing required classesimport java.util.*;import java.util.concurrent.*; // Main class// TreeMapImplementationpublic class GFG {     // Method    // To show TreeMap(SortedMap) constructor    static void Example4thConstructor()    {        // Creating a SortedMap        SortedMap<Integer, String> sorted_map            = new ConcurrentSkipListMap<Integer, String>();         // Mapping string values to int keys        // using put() method        sorted_map.put(10, ""Geeks"");        sorted_map.put(15, ""4"");        sorted_map.put(20, ""Geeks"");        sorted_map.put(25, ""Welcomes"");        sorted_map.put(30, ""You"");         // Creating the TreeMap using the SortedMap        TreeMap<Integer, String> tree_map            = new TreeMap<Integer, String>(sorted_map);         // Printing the elements of TreeMap        System.out.println(""TreeMap: "" + tree_map);    }     // Method 2    // Main driver method    public static void main(String[] args)    {         System.out.println(""TreeMap using ""                           + ""TreeMap(SortedMap)""                           + "" constructor:\\n"");         Example4thConstructor();    }}', '// Java Program to Illustrate Operations in TreeMap// Such as Creation, insertion// searching, and traversal // Importing required classesimport java.util.*;import java.util.concurrent.*; // Main class// Implementation of TreeMappublic class GFG {     // Declaring a TreeMap    static TreeMap<Integer, String> tree_map;     // Method 1    // To create TreeMap    static void create()    {         // Creating an empty TreeMap        tree_map = new TreeMap<Integer, String>();         // Display message only        System.out.println(""TreeMap successfully""                           + "" created"");    }     // Method 2    // To Insert values in the TreeMap    static void insert()    {         // Mapping string values to int keys        // using put() method        tree_map.put(10, ""Geeks"");        tree_map.put(15, ""4"");        tree_map.put(20, ""Geeks"");        tree_map.put(25, ""Welcomes"");        tree_map.put(30, ""You"");         // Display message only        System.out.println(""\\nElements successfully""                           + "" inserted in the TreeMap"");    }     // Method 3    // To search a key in TreeMap    static void search(int key)    {         // Checking for the key        System.out.println(""\\nIs key \\"""" + key                           + ""\\"" present? ""                           + tree_map.containsKey(key));    }     // Method 4    // To search a value in TreeMap    static void search(String value)    {         // Checking for the value        System.out.println(""\\nIs value \\"""" + value                           + ""\\"" present? ""                           + tree_map.containsValue(value));    }     // Method 5    // To display the elements in TreeMap    static void display()    {         // Displaying the TreeMap        System.out.println(""\\nDisplaying the TreeMap:"");         System.out.println(""TreeMap: "" + tree_map);    }     // Method 6    // To traverse TreeMap    static void traverse()    {         // Display message only        System.out.println(""\\nTraversing the TreeMap:"");         for (Map.Entry<Integer, String> e :             tree_map.entrySet())            System.out.println(e.getKey() + "" ""                               + e.getValue());    }     // Method 6    // Main driver method    public static void main(String[] args)    {         // Calling above defined methods inside main()         // Creating a TreeMap        create();         // Inserting the values in the TreeMap        insert();         // Search key ""50"" in the TreeMap        search(50);         // Search value ""Geeks"" in the TreeMap        search(""Geeks"");         // Display the elements in TreeMap        display();         // Traversing the TreeMap        traverse();    }}', '// Java Program to Illustrate Addition of Elements// in TreeMap using put() Method // Importing required classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Default Initialization of a TreeMap        TreeMap tm1 = new TreeMap();         // Inserting the elements in TreeMap        // using put() method        tm1.put(3, ""Geeks"");        tm1.put(2, ""For"");        tm1.put(1, ""Geeks"");         // Initialization of a TreeMap using Generics        TreeMap<Integer, String> tm2            = new TreeMap<Integer, String>();         // Inserting the elements in TreeMap        // again using put() method        tm2.put(new Integer(3), ""Geeks"");        tm2.put(new Integer(2), ""For"");        tm2.put(new Integer(1), ""Geeks"");         // Printing the elements of both TreeMaps         // Map 1        System.out.println(tm1);        // Map 2        System.out.println(tm2);    }}', '// Java program to Illustrate Updation of Elements// in TreeMap using put() Method // Importing required classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Initialization of a TreeMap        // using Generics        TreeMap<Integer, String> tm            = new TreeMap<Integer, String>();         // Inserting the elements in Map        // using put() method        tm.put(3, ""Geeks"");        tm.put(2, ""Geeks"");        tm.put(1, ""Geeks"");         // Print all current elements in map        System.out.println(tm);         // Inserting the element at specified        // corresponding to specified key        tm.put(2, ""For"");         // Printing the updated elements of Map        System.out.println(tm);    }}', '// Java program to Illustrate Removal of Elements// in TreeMap using remove() Method // Importing required classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Initialization of a TreeMap        // using Generics        TreeMap<Integer, String> tm            = new TreeMap<Integer, String>();         // Inserting the elements        // using put() method        tm.put(3, ""Geeks"");        tm.put(2, ""Geeks"");        tm.put(1, ""Geeks"");        tm.put(4, ""For"");         // Printing all elements of Map        System.out.println(tm);         // Removing the element corresponding to key        tm.remove(4);         //  Printing updated TreeMap        System.out.println(tm);    }}', '// Java Program to Illustrate Iterating over TreeMap// using // Importing required classesimport java.util.*; // Main classclass GFG {     // Main driver method    public static void main(String args[])    {        // Initialization of a TreeMap        // using Generics        TreeMap<Integer, String> tm            = new TreeMap<Integer, String>();         // Inserting the elements        // using put() method        tm.put(3, ""Geeks"");        tm.put(2, ""For"");        tm.put(1, ""Geeks"");         // For-each loop for traversal over Map        // via entrySet() Method        for (Map.Entry mapElement : tm.entrySet()) {             int key = (int)mapElement.getKey();             // Finding the value            String value = (String)mapElement.getValue();             // Printing the key and value            System.out.println(key + "" : "" + value);        }    }}']","['SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));', 'TreeMap using TreeMap() constructor:\nTreeMap: {10=Geeks, 15=4, 20=Geeks, 25=Welcomes, 30=You}', 'TreeMap using TreeMap(Comparator) constructor:\nTreeMap: {111 bbbb london=2, 121 cccc jaipur=1, 131 aaaa nyc=3}', 'TreeMap using TreeMap(Map) constructor:\nTreeMap: {10=Geeks, 15=4, 20=Geeks, 25=Welcomes, 30=You}', 'TreeMap using TreeMap(SortedMap) constructor:\nTreeMap: {10=Geeks, 15=4, 20=Geeks, 25=Welcomes, 30=You}', 'TreeMap successfully created\nElements successfully inserted in the TreeMap\nIs key ""50"" present? false\nIs value ""Geeks"" present? true\nDisplaying the TreeMap:\nTreeMap: {10=Geeks, 15=4, 20=Geeks, 25=Welcomes, 30=You}\nTraversing the TreeMap:\n10 Geeks\n15 4\n20 Geeks\n25 Welcomes\n30 You', '{1=Geeks, 2=For, 3=Geeks}\n{1=Geeks, 2=For, 3=Geeks}', '{1=Geeks, 2=Geeks, 3=Geeks}\n{1=Geeks, 2=For, 3=Geeks}', '{1=Geeks, 2=Geeks, 3=Geeks, 4=For}\n{1=Geeks, 2=Geeks, 3=Geeks}', '1 : Geeks\n2 : For\n3 : Geeks']","['clear()|||The method removes all mappings from this TreeMap and clears the map.&&&clone()|||The method returns a shallow copy of this TreeMap.&&&containsKey(Object key)|||Returns true if this map contains a mapping for the specified key.&&&containsValue(Object value)|||Returns true if this map maps one or more keys to the specified value.&&&entrySet()|||Returns a set view of the mappings contained in this map.&&&firstKey()|||Returns the first (lowest) key currently in this sorted map.&&&get(Object key)|||Returns the value to which this map maps the specified key.&&&headMap(Object key_value)|||The method returns a view of the portion of the map strictly less than the parameter key_value.&&&keySet()|||The method returns a Set view of the keys contained in the treemap.&&&lastKey()|||Returns the last (highest) key currently in this sorted map.&&&put(Object key, Object value)|||The method is used to insert a mapping into a map.&&&putAll(Map map)|||Copies all of the mappings from the specified map to this map.&&&remove(Object key)|||Removes the mapping for this key from this TreeMap if present.&&&size()|||Returns the number of key-value mappings in this map.&&&subMap((K startKey, K endKey)|||The method returns the portion of this map whose keys range from startKey, inclusive, to endKey, exclusive.&&&values()|||Returns a collection view of the values contained in this map.']","['3 Variables (K key=Key, V value=Value, boolean color=Color)|||3 References (Entry left = Left, Entry right = Right, Entry parent = Parent)&&&&&&This class is a member of the Java Collections Framework.|||The class implements Map interfaces including NavigableMap, SortedMap, and extends AbstractMap class.|||TreeMap in Java does not allow null keys (like Map) and thus a NullPointerException is thrown. However, multiple null values can be associated with different keys.|||Entry pairs returned by the methods in this class and its views represent snapshots of mappings at the time they were produced. They do not support the Entry.setValue method.&&&TreeMap()|||TreeMap(Comparator comp)|||TreeMap(Map M)|||TreeMap(SortedMap sm)&&&']"
85,['Multithreading in Java'],"['Java', 'Java']",[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Threads can be created by using two mechanisms :\xa0', 'Thread Class vs Runnable Interface\xa0']","['Multithreading is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU. Each part of such program is called a thread. So, threads are light-weight processes within a process.', 'Thread creation by extending the Thread classWe create a class that extends the java.lang.Thread class. This class overrides the run() method available in the Thread class. A thread begins its life inside run() method. We create an object of our new class and call start() method to start the execution of a thread. Start() invokes the run() method on the Thread object.', 'Thread creation by implementing the Runnable InterfaceWe create a new class which implements java.lang.Runnable interface and override run() method. Then we instantiate a Thread object and call start() method on this object.\xa0\xa0', 'This article is contributed by Mehak Narang. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\xa0']",[],"['// Java code for thread creation by extending// the Thread classclass MultithreadingDemo extends Thread {    public void run()    {        try {            // Displaying the thread that is running            System.out.println(                ""Thread "" + Thread.currentThread().getId()                + "" is running"");        }        catch (Exception e) {            // Throwing an exception            System.out.println(""Exception is caught"");        }    }} // Main Classpublic class Multithread {    public static void main(String[] args)    {        int n = 8; // Number of threads        for (int i = 0; i < n; i++) {            MultithreadingDemo object                = new MultithreadingDemo();            object.start();        }    }}', '// Java code for thread creation by implementing// the Runnable Interfaceclass MultithreadingDemo implements Runnable {    public void run()    {        try {            // Displaying the thread that is running            System.out.println(                ""Thread "" + Thread.currentThread().getId()                + "" is running"");        }        catch (Exception e) {            // Throwing an exception            System.out.println(""Exception is caught"");        }    }} // Main Classclass Multithread {    public static void main(String[] args)    {        int n = 8; // Number of threads        for (int i = 0; i < n; i++) {            Thread object                = new Thread(new MultithreadingDemo());            object.start();        }    }}']","['Thread 15 is running\nThread 14 is running\nThread 16 is running\nThread 12 is running\nThread 11 is running\nThread 13 is running\nThread 18 is running\nThread 17 is running', 'Thread 13 is running\nThread 11 is running\nThread 12 is running\nThread 15 is running\nThread 14 is running\nThread 18 is running\nThread 17 is running\nThread 16 is running']",[],"['Extending the Thread class|||Implementing the Runnable Interface&&&If we extend the Thread class, our class cannot extend any other class because Java doesn’t support multiple inheritance. But, if we implement the Runnable interface, our class can still extend other base classes.|||We can achieve basic functionality of a thread by extending Thread class because it provides some inbuilt methods like yield(), interrupt() etc. that are not available in Runnable interface.|||Using runnable will give you an object that can be shared amongst multiple threads.']"
86,['Lifecycle and States of a Thread in Java'],['Java'],['Implementing the Thread States in Java'],['https://media.geeksforgeeks.org/wp-content/uploads/threadLifeCycle.jpg'],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/multithreading-in-java/', 'https://www.geeksforgeeks.org/joining-threads-in-java/', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['The diagram shown below represents various states of a thread at any instant in time.', 'Description: Thread state for a thread that has not yet started.\xa0', 'Description: Thread state for a terminated thread. The thread has completed execution.\xa0']","['A thread in Java at any point of time exists in any one of the following states. A thread lies only in one of the shown states at any instant:\xa0', 'In Java, to get the current state of the thread, use Thread.getState() method to get the current state of the thread. Java provides java.lang.Thread.State class that defines the ENUM constants for the state of a thread, as a summary of which is given below:\xa0', 'Description: Thread state for a runnable thread. A thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating system such as a processor.\xa0', 'Description: Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait().\xa0', 'Description: Thread state for a waiting thread. Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:\xa0', 'Description: Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:\xa0', 'This article is contributed by Mayank Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['Explanation: When a new thread is created, the thread is in the NEW state. When the start() method is called on a thread, the thread scheduler moves it to Runnable state. Whenever the join() method is called on a thread instance, the current thread executing that statement will wait for this thread to move to the Terminated state. So, before the final statement is printed on the console, the program calls join() on thread2 making the thread1 wait while thread2 completes its execution and is moved to the Terminated state. thread1 goes to Waiting state because it is waiting for thread2 to complete its execution as it has called join on thread2.']","['// Java program to demonstrate thread statesclass thread implements Runnable {    public void run()    {        // moving thread2 to timed waiting state        try {            Thread.sleep(1500);        }        catch (InterruptedException e) {            e.printStackTrace();        }         System.out.println(            ""State of thread1 while it called join() method on thread2 -""            + Test.thread1.getState());        try {            Thread.sleep(200);        }        catch (InterruptedException e) {            e.printStackTrace();        }    }} public class Test implements Runnable {    public static Thread thread1;    public static Test obj;     public static void main(String[] args)    {        obj = new Test();        thread1 = new Thread(obj);         // thread1 created and is currently in the NEW        // state.        System.out.println(            ""State of thread1 after creating it - ""            + thread1.getState());        thread1.start();         // thread1 moved to Runnable state        System.out.println(            ""State of thread1 after calling .start() method on it - ""            + thread1.getState());    }     public void run()    {        thread myThread = new thread();        Thread thread2 = new Thread(myThread);         // thread1 created and is currently in the NEW        // state.        System.out.println(            ""State of thread2 after creating it - ""            + thread2.getState());        thread2.start();         // thread2 moved to Runnable state        System.out.println(            ""State of thread2 after calling .start() method on it - ""            + thread2.getState());         // moving thread1 to timed waiting state        try {            // moving thread1 to timed waiting state            Thread.sleep(200);        }        catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println(            ""State of thread2 after calling .sleep() method on it - ""            + thread2.getState());         try {            // waiting for thread2 to die            thread2.join();        }        catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println(            ""State of thread2 when it has finished it\'s execution - ""            + thread2.getState());    }}']","['Declaration: public static final Thread.State NEW', 'Declaration: public static final Thread.State RUNNABLE', 'Declaration: public static final Thread.State BLOCKED', 'Declaration: public static final Thread.State WAITING', 'Declaration: public static final Thread.State TIMED_WAITING', 'Declaration: public static final Thread.State TERMINATED', ""State of thread1 after creating it - NEW\nState of thread1 after calling .start() method on it - RUNNABLE\nState of thread2 after creating it - NEW\nState of thread2 after calling .start() method on it - RUNNABLE\nState of thread2 after calling .sleep() method on it - TIMED_WAITING\nState of thread1 while it called join() method on thread2 -WAITING\nState of thread2 when it has finished it's execution - TERMINATED""]",[],"['Blocked|||Waiting&&&Because it exists normally. This happens when the code of the thread has been entirely executed by the program.|||Because there occurred some unusual erroneous event, like segmentation fault or an unhandled exception.&&&Object.wait with no timeout|||Thread.join with no timeout|||LockSupport.park&&&Thread.sleep|||Object.wait with timeout|||Thread.join with timeout|||LockSupport.parkNanos|||LockSupport.parkUntil&&&&&&New|||Runnable|||Blocked|||Waiting|||Timed Waiting|||Terminated&&&New Thread: When a new thread is created, it is in the new state. The thread has not yet started to run when the thread is in this state. When a thread lies in the new state, its code is yet to be run and hasn’t started to execute.|||Runnable State: A thread that is ready to run is moved to a runnable state. In this state, a thread might actually be running or it might be ready to run at any instant of time. It is the responsibility of the thread scheduler to give the thread, time to run.A multi-threaded program allocates a fixed amount of time to each individual thread. Each and every thread runs for a short while and then pauses and relinquishes the CPU to another thread so that other threads can get a chance to run. When this happens, all such threads that are ready to run, waiting for the CPU and the currently running thread lie in a runnable state.|||Blocked/Waiting state: When a thread is temporarily inactive, then it’s in one of the following states:BlockedWaiting|||Blocked|||Waiting|||Timed Waiting: A thread lies in a timed waiting state when it calls a method with a time-out parameter. A thread lies in this state until the timeout is completed or until a notification is received. For example, when a thread calls sleep or a conditional wait, it is moved to a timed waiting state.|||Terminated State: A thread terminates because of either of the following reasons:Because it exists normally. This happens when the code of the thread has been entirely executed by the program.Because there occurred some unusual erroneous event, like segmentation fault or an unhandled exception.|||Because it exists normally. This happens when the code of the thread has been entirely executed by the program.|||Because there occurred some unusual erroneous event, like segmentation fault or an unhandled exception.&&&']"
87,['Main thread in Java'],"['Java', 'Java']",[],['https://media.geeksforgeeks.org/wp-content/uploads/main-thread-in-java.jpeg'],[],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/jvm-works-jvm-architecture/', 'https://www.geeksforgeeks.org/daemon-thread-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['There are certain properties associated with the main thread which are as follows:', 'The flow diagram is as follows:', 'How to control Main thread', 'Deadlocking with use of Main Thread(only single thread)', 'We can create a deadlock by just using the Main thread, i.e. by just using a single thread.']","['Now let us discuss the relationship between the main() method and the main thread in Java. For each program, a Main thread is created by JVM(Java Virtual Machine). The “Main” thread first verifies the existence of the main() method, and then it initializes the class. Note that from JDK 6, main() method is mandatory in a standalone java application.', 'Output explanation:\xa0The statement “Thread.currentThread().join()”, will tell Main thread to wait for this thread(i.e. wait for itself) to die. Thus Main thread wait for itself to die, which is nothing but a deadlock.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']","['Java provides built-in support for multithreaded programming. A multi-threaded program contains two or more parts that can run concurrently. Each part of such a program is called a thread, and each thread defines a separate path of execution.When a Java program starts up, one thread begins running immediately. This is usually called the main thread of our program because it is the one that is executed when our program begins.\xa0', 'The main thread is created automatically when our program is started. To control it we must obtain a reference to it. This can be done by calling the method currentThread( ) which is present in Thread class. This method returns a reference to the thread on which it is called. The default priority of Main thread is 5 and for all remaining user threads priority will be inherited from parent to child.', 'Related Article: Daemon Threads in Java.This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java program to control the Main Thread // Importing required classesimport java.io.*;import java.util.*; // Class 1// Main class extending thread classpublic class Test extends Thread {     // Main driver method    public static void main(String[] args)    {         // Getting reference to Main thread        Thread t = Thread.currentThread();         // Getting name of Main thread        System.out.println(""Current thread: ""                           + t.getName());         // Changing the name of Main thread        t.setName(""Geeks"");        System.out.println(""After name change: ""                           + t.getName());         // Getting priority of Main thread        System.out.println(""Main thread priority: ""                           + t.getPriority());         // Setting priority of Main thread to MAX(10)        t.setPriority(MAX_PRIORITY);         // Print and display the main thread priority        System.out.println(""Main thread new priority: ""                           + t.getPriority());         for (int i = 0; i < 5; i++) {            System.out.println(""Main thread"");        }         // Main thread creating a child thread        Thread ct = new Thread() {            // run() method of a thread            public void run()            {                 for (int i = 0; i < 5; i++) {                    System.out.println(""Child thread"");                }            }        };         // Getting priority of child thread        // which will be inherited from Main thread        // as it is created by Main thread        System.out.println(""Child thread priority: ""                           + ct.getPriority());         // Setting priority of Main thread to MIN(1)        ct.setPriority(MIN_PRIORITY);         System.out.println(""Child thread new priority: ""                           + ct.getPriority());         // Starting child thread        ct.start();    }} // Class 2// Helper class extending Thread class// Child Thread classclass ChildThread extends Thread {     @Override public void run()    {         for (int i = 0; i < 5; i++) {             // Print statement whenever child thread is            // called            System.out.println(""Child thread"");        }    }}', '// Java program to demonstrate deadlock// using Main thread // Main classpublic class GFG {   // Main driver method  public static void main(String[] args) {     // Try block to check for exceptions    try {       // Print statement      System.out.println(""Entering into Deadlock"");       // Joining the current thread      Thread.currentThread().join();       // This statement will never execute      System.out.println(""This statement will never execute"");    }     // Catch block to handle the exceptions    catch (InterruptedException e) {       // Display the exception along with line number      // using printStackTrace() method      e.printStackTrace();    }  }}']",['Current thread: main\nAfter name change: Geeks\nMain thread priority: 5\nMain thread new priority: 10\nMain thread\nMain thread\nMain thread\nMain thread\nMain thread\nChild thread priority: 10\nChild thread new priority: 1\nChild thread\nChild thread\nChild thread\nChild thread\nChild thread'],[],"['It is the thread from which other “child” threads will be spawned.|||Often, it must be the last thread to finish execution because it performs various shutdown actions']"
88,['Java Thread Priority in Multithreading'],"['Java', 'Java']",[],[],['https://www.youtube.com/embed/7q22vVYKpnQ?feature=oembed'],"['https://www.geeksforgeeks.org/easy/', 'https://www.geeksforgeeks.org/multithreading-in-java/', 'https://www.geeksforgeeks.org/thread-scheduling/', 'https://www.geeksforgeeks.org/java-thread-priority-multithreading/', 'https://www.geeksforgeeks.org/naming-thread-fetching-name-current-thread-java/', 'https://www.geeksforgeeks.org/naming-thread-fetching-name-current-thread-java/', 'https://www.geeksforgeeks.org/method-class-getname-method-in-java/', 'https://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Here 3 constants are defined in it namely as follows:', 'The accepted value of priority for a thread is in the range of 1 to 10.\xa0', 'Let us do discuss how to get and set priority of a thread in java.\xa0', '\xa0Output explanation:', '\xa0Output explanation:']","['As we already know java being completely object-oriented works within a multithreading environment in which thread scheduler assigns the processor to a thread based on the priority of thread. Whenever we create a thread in Java, it always has some priority assigned to it. Priority can either be given by JVM while creating the thread or it can be given by the programmer explicitly.\xa0', 'Priorities in threads is a concept where each thread is having a priority which in layman’s language one can say every object is having priority here which is represented by numbers ranging from 1 to 10.\xa0', 'Let us discuss it with an example to get how internally the work is getting executed. Here we will be using the knowledge gathered above as follows:', 'All this processing is been carried over with the help of a thread scheduler which can be better visualized withthe help of a video sample been provided below as follows:']","['Now geeks you must be wondering out what if we do assign the same priorities to threads than what will happen. All the processing in order to look after threads is carried with help of the thread scheduler. One can refer to the below example of what will happen if the priorities are set to the same and later onwards we will discuss it as an output explanation to have a better understanding conceptually and practically.', 'This article is contributed by Dharmesh Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// Java Program to Illustrate Priorities in Multithreading// via help of getPriority() and setPriority() method // Importing required classesimport java.lang.*; // Main classclass ThreadDemo extends Thread {     // Method 1    // run() method for the thread that is called    // as soon as start() is invoked for thread in main()    public void run()    {        // Print statement        System.out.println(""Inside run method"");    }     // Main driver method    public static void main(String[] args)    {        // Creating random threads        // with the help of above class        ThreadDemo t1 = new ThreadDemo();        ThreadDemo t2 = new ThreadDemo();        ThreadDemo t3 = new ThreadDemo();         // Thread 1        // Display the priority of above thread        // using getPriority() method        System.out.println(""t1 thread priority : ""                           + t1.getPriority());         // Thread 1        // Display the priority of above thread        System.out.println(""t2 thread priority : ""                           + t2.getPriority());         // Thread 3        System.out.println(""t3 thread priority : ""                           + t3.getPriority());         // Setting priorities of above threads by        // passing integer arguments        t1.setPriority(2);        t2.setPriority(5);        t3.setPriority(8);         // t3.setPriority(21); will throw        // IllegalArgumentException         // 2        System.out.println(""t1 thread priority : ""                           + t1.getPriority());         // 5        System.out.println(""t2 thread priority : ""                           + t2.getPriority());         // 8        System.out.println(""t3 thread priority : ""                           + t3.getPriority());         // Main thread         // Displays the name of        // currently executing Thread        System.out.println(            ""Currently Executing Thread : ""            + Thread.currentThread().getName());         System.out.println(            ""Main thread priority : ""            + Thread.currentThread().getPriority());         // Main thread priority is set to 10        Thread.currentThread().setPriority(10);         System.out.println(            ""Main thread priority : ""            + Thread.currentThread().getPriority());    }}', '// Java program to demonstrate that a Child thread// Getting Same Priority as Parent thread // Importing all classes from java.lang packageimport java.lang.*; // Main class// ThreadDemo// Extending Thread classclass GFG extends Thread {     // Method 1    // run() method for the thread that is    // invoked as threads are started    public void run()    {        // Print statement        System.out.println(""Inside run method"");    }     // Method 2    // Main driver method    public static void main(String[] args)    {        // main thread priority is set to 6 now        Thread.currentThread().setPriority(6);         // Current thread is accessed        // using currentThread() method         // Print and display main thread priority        // using getPriority() method of Thread class        System.out.println(            ""main thread priority : ""            + Thread.currentThread().getPriority());         // Creating a thread by creating object inside        // main()        GFG t1 = new GFG();         // t1 thread is child of main thread        // so t1 thread will also have priority 6         // Print and display priority of current thread        System.out.println(""t1 thread priority : ""                           + t1.getPriority());    }}']","['t1 thread priority : 5\nt2 thread priority : 5\nt3 thread priority : 5\nt1 thread priority : 2\nt2 thread priority : 5\nt3 thread priority : 8\nCurrently Executing Thread : main\nMain thread priority : 5\nMain thread priority : 10', 'main thread priority : 6\nt1 thread priority : 6']",[],"['The default priority is set to 5 as excepted.|||Minimum priority is set to 1.|||Maximum priority is set to 10.&&&We will use currentThread() method to get the name of the current thread. User can also use setName() method if he/she wants to make names of thread as per choice for understanding purposes.|||getName() method will be used to get the name of the thread.&&&Thread with the highest priority will get an execution chance prior to other threads. Suppose there are 3 threads t1, t2, and t3 with priorities 4, 6, and 1. So, thread t2 will execute first based on maximum priority 6 after that t1 will execute and then t3.|||The default priority for the main thread is always 5, it can be changed later. The default priority for all other threads depends on the priority of the parent thread.&&&If two threads have the same priority then we can’t expect which thread will execute first. It depends on the thread scheduler’s algorithm(Round-Robin, First Come First Serve, etc)|||If we are using thread priority for thread scheduling then we should always keep in mind that the underlying platform should provide support for scheduling based on thread priority.&&&&&&public static int NORM_PRIORITY|||public static int MIN_PRIORITY|||public static int MAX_PRIORITY&&&public final int getPriority(): java.lang.Thread.getPriority() method returns priority of given thread.|||public final void setPriority(int newPriority): java.lang.Thread.setPriority() method changes the priority of thread to the value newPriority. This method throws IllegalArgumentException if value of parameter newPriority goes beyond minimum(1) and maximum(10) limit.&&&']"
89,['Synchronization in Java'],['Java'],[],[],['https://www.youtube.com/embed/IIgHG_YHXPE?feature=oembed'],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/multithreading-in-java/', 'https://www.geeksforgeeks.org/monitors-in-process-synchronization/', 'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article']","['Following is the general form of a synchronized block:\xa0', 'Following is an example of multi-threading with synchronized.', 'The output is the same every time we run the program.']","['Multi-threaded programs may often come to a situation where multiple threads try to access the same resources and finally produce erroneous and unforeseen results.\xa0', 'This synchronization is implemented in Java with a concept called monitors. Only one thread can own a monitor at a given time. When a thread acquires a lock, it is said to have entered the monitor. All other threads attempting to enter the locked monitor will be suspended until the first thread exits the monitor.', 'In the above example, we choose to synchronize the Sender object inside the run() method of the ThreadedSend class. Alternately, we could define the whole send() block as synchronized, producing the same result. Then we don’t have to synchronize the Message object inside the run() method in ThreadedSend class.\xa0', 'We do not always have to synchronize a whole method. Sometimes it is preferable to synchronize only part of a method. Java synchronized blocks inside methods make this possible.', 'This article is contributed by Souradeep Barua. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above']",['So it needs to be made sure by some synchronization method that only one thread can access the resource at a given point in time. Java provides a way of creating threads and synchronizing their tasks using synchronized blocks. Synchronized blocks in Java are marked with the synchronized keyword. A synchronized block in Java is synchronized on some object. All synchronized blocks synchronize on the same object can only have one thread executing inside them at a time. All other threads attempting to enter the synchronized block are blocked until the thread inside the synchronized block exits the block.'],"['// A Java program to demonstrate working of// synchronized.  import java.io.*;import java.util.*;  // A Class used to send a messageclass Sender{    public void send(String msg)    {        System.out.println(""Sending\\t""  + msg );        try        {            Thread.sleep(1000);        }        catch (Exception e)        {            System.out.println(""Thread  interrupted."");        }        System.out.println(""\\n"" + msg + ""Sent"");    }}  // Class for send a message using Threadsclass ThreadedSend extends Thread{    private String msg;    Sender  sender;      // Receives a message object and a string    // message to be sent    ThreadedSend(String m,  Sender obj)    {        msg = m;        sender = obj;    }      public void run()    {        // Only one thread can send a message        // at a time.        synchronized(sender)        {            // synchronizing the snd object            sender.send(msg);        }    }}  // Driver classclass SyncDemo{    public static void main(String args[])    {        Sender snd = new Sender();        ThreadedSend S1 =            new ThreadedSend( "" Hi "" , snd );        ThreadedSend S2 =            new ThreadedSend( "" Bye "" , snd );          // Start two threads of ThreadedSend type        S1.start();        S2.start();          // wait for threads to end        try        {            S1.join();            S2.join();        }        catch(Exception e)        {            System.out.println(""Interrupted"");        }    }}']","['// Only one thread can execute at a time. \n// sync_object is a reference to an object\n// whose lock associates with the monitor. \n// The code is said to be synchronized on\n// the monitor object\nsynchronized(sync_object)\n{\n   // Access shared variables and other\n   // shared resources\n}', 'Sending     Hi \n\n Hi Sent\nSending     Bye \n\n Bye Sent', '// An alternate implementation to demonstrate\n// that we can use synchronized with method also.\n\nclass Sender {\n   public synchronized void send(String msg)\n   {\n       System.out.println(""Sending\\t"" + msg);\n       try {\n           Thread.sleep(1000);\n       }\n       catch (Exception e) {\n           System.out.println(""Thread interrupted."");\n       }\n       System.out.println(""\\n"" + msg + ""Sent"");\n   }\n}', '// One more alternate implementation to demonstrate\n// that synchronized can be used with only a part of  \n// method\n\nclass Sender  \n{\n   public void send(String msg)\n   {\n       synchronized(this)\n       {\n           System.out.println(""Sending\\t"" + msg );\n           try  \n           {\n               Thread.sleep(1000);\n           }  \n           catch (Exception e)  \n           {\n               System.out.println(""Thread interrupted."");\n           }\n           System.out.println(""\\n"" + msg + ""Sent"");\n       }\n   }\n}']",[],[]
90,['File Handling in Java with CRUD operations'],"['Java', 'Java', 'Java', 'Java', 'Create', 'Read', 'Update', 'Delete']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/20190404224815/pqr1.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20190405201732/deletenew.png', 'https://media.geeksforgeeks.org/wp-content/uploads/20190405201004/newupdate.png']",[],"['https://www.geeksforgeeks.org/hard/', 'https://www.geeksforgeeks.org/java-io-inputstream-class-in-java/', 'https://www.geeksforgeeks.org/java-io-outputstream-class-java/', 'https://www.geeksforgeeks.org/java-io-filteroutputstream-class-java/', 'https://www.geeksforgeeks.org/creating-a-file-using-fileoutputstream/', 'https://www.geeksforgeeks.org/io-bytearrayoutputstream-class-java/', 'https://www.geeksforgeeks.org/io-bytearrayinputstream-class-java/', 'https://www.geeksforgeeks.org/java-io-fileinputstream-class-java/', 'https://www.geeksforgeeks.org/java-io-filterinputstream-class-in-java/', 'https://www.geeksforgeeks.org/java-io-stringbufferinputstream-class-java/', 'https://www.geeksforgeeks.org/java-io-sequenceinputstream-java/', 'https://www.geeksforgeeks.org/java-io-bufferedoutputstream-class-java/', 'https://www.geeksforgeeks.org/java-io-stringbufferinputstream-class-java/', 'https://www.geeksforgeeks.org/dataoutputstream-in-java/', 'https://www.geeksforgeeks.org/java-io-printstream-class-java-set-1/', 'https://www.geeksforgeeks.org/java-io-bufferedinputstream-class-java/', 'https://www.geeksforgeeks.org/java-io-datainputstream-class-java-set-1/', 'https://www.geeksforgeeks.org/java-io-pushbackinputstream-class-java/', 'https://www.geeksforgeeks.org/character-stream-vs-byte-stream-java/', 'https://www.geeksforgeeks.org/java-io-randomaccessfile-class-method-set-1/', 'https://practice.geeksforgeeks.org/courses/Java-Foundation?vC=1', 'https://practice.geeksforgeeks.org/courses/Java-Collections?vC=1', 'https://practice.geeksforgeeks.org/courses/complete-interview-preparation?utm_source=GeeksforGeeks&utm_medium=Text&utm_campaign=GFG_Article_Bottom_Text_CIP']","['What is File Handling in Java?', 'Different operations that can be performed on a file are:\xa0', 'Different classes that can be used in Java for File Handling:\xa0', 'Various Methods used to perform File operation:\xa0\xa0', 'File opening modes in Java:\xa0', 'Syntax of Opening File using RandomAccessFile:\xa0\xa0', 'CRUD operations using File Handling in Java', 'Syntax of a Contact in the file friendsContact.txt:\xa0\xa0', 'How to Create a File in Java?\xa0', 'Compiling and Adding the contact in the newly created file:\xa0\xa0', 'How to Read a File in Java?\xa0', 'Compiling and reading the contacts from the file:\xa0\xa0', 'How to Update a File in Java?', 'Compiling and updating the contact in the file:\xa0\xa0', 'How to Delete a File in Java?\xa0', 'Compiling and deleting the contact in the file:\xa0\xa0']","['So far the operations using Java programs are done on a prompt/terminal which is not stored anywhere. But in the software industry, most of the programs are written to store the information fetched from the program. One such way is to store the fetched information in a file.', 'A file is a container that is used to store various types of information. Data is permanently stored in secondary memory by creating a file with a unique name. A file may consist of text, image or any other document.\xa0', 'In this article, we will learn how Java ByteStreams are used to perform input and output of 8-bits(1 byte) using class RandomAccessFile which consists of method writeBytes() and readBytes() to write and read the data in the form of bytes.', 'Open for reading only. Invoking any of the write methods of the resulting object will cause an IOException to be thrown.', 'Open to reading and writing. If the file does not already exist then an attempt will be made to create it.', 'Open for reading and writing, as with “rw”, and also require that every update to the file’s content or metadata be written synchronously to the underlying storage device.', 'Open for reading and writing, as with “rw”, and also require that every update to the file’s content be written synchronously to the underlying storage device.', 'Example: Consider that you want to keep records of your friend’s contact number in a file. To distinguish between your friend’s name and contact number you need a separator. To do, so you need to select a separator such as ‘!’ or ‘$’ or some special symbol which does not appear in your friend’s name. Then we will form a string consist of a name, special symbol and number to insert into the file.', 'Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more,\xa0 please refer Complete Interview Preparation Course.']",[],"['// Java program to create a file ""friendsContact.txt""// and add a new contact in the file import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class AddFriend {     public static void main(String data[])    {         try {             // Get the name of the contact to be updated            // from the Command line argument            String newName = data[0];             // Get the number to be updated            // from the Command line argument            long newNumber = Long.parseLong(data[1]);             String nameNumberString;            String name;            long number;            int index;             // Using file pointer creating the file.            File file = new File(""friendsContact.txt"");             if (!file.exists()) {                 // Create a new file if not exists.                file.createNewFile();            }             // Opening file in reading and write mode.             RandomAccessFile raf                = new RandomAccessFile(file, ""rw"");            boolean found = false;             // Checking whether the name            // of contact already exists.            // getFilePointer() give the current offset            // value from start of the file.            while (raf.getFilePointer() < raf.length()) {                 // reading line from the file.                nameNumberString = raf.readLine();                 // splitting the string to get name and                // number                String[] lineSplit                    = nameNumberString.split(""!"");                 // separating name and number.                name = lineSplit[0];                number = Long.parseLong(lineSplit[1]);                 // if condition to find existence of record.                if (name == newName                    || number == newNumber) {                    found = true;                    break;                }            }             if (found == false) {                 // Enter the if block when a record                // is not already present in the file.                nameNumberString                    = newName + ""!""                      + String.valueOf(newNumber);                 // writeBytes function to write a string                // as a sequence of bytes.                raf.writeBytes(nameNumberString);                 // To insert the next record in new line.                raf.writeBytes(System.lineSeparator());                 // Print the message                System.out.println("" Friend added. "");                 // Closing the resources.                raf.close();            }            // The contact to be updated            // could not be found            else {                 // Closing the resources.                raf.close();                 // Print the message                System.out.println("" Input name""                                   + "" does not exists. "");            }        }         catch (IOException ioe) {             System.out.println(ioe);        }        catch (NumberFormatException nef) {             System.out.println(nef);        }    }}', '// Java program to read from file ""friendsContact.txt""// and display the contacts import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class DisplayFriends {     public static void main(String data[])    {         try {             String nameNumberString;            String name;            long number;            int index;             // Using file pointer creating the file.            File file = new File(""friendsContact.txt"");             if (!file.exists()) {                 // Create a new file if not exists.                file.createNewFile();            }             // Opening file in reading and write mode.             RandomAccessFile raf                = new RandomAccessFile(file, ""rw"");            boolean found = false;             // Traversing the file            // getFilePointer() give the current offset            // value from start of the file.            while (raf.getFilePointer() < raf.length()) {                 // reading line from the file.                nameNumberString = raf.readLine();                 // splitting the string to get name and                // number                String[] lineSplit                    = nameNumberString.split(""!"");                 // separating name and number.                name = lineSplit[0];                number = Long.parseLong(lineSplit[1]);                 // Print the contact data                System.out.println(                    ""Friend Name: "" + name + ""\\n""                    + ""Contact Number: "" + number + ""\\n"");            }             catch (IOException ioe)            {                 System.out.println(ioe);            }            catch (NumberFormatException nef)            {                 System.out.println(nef);            }        }    }', '// Java program to update in the file ""friendsContact.txt""// and change the number of an old contact import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class UpdateFriend {     public static void main(String data[])    {         try {             // Get the name of the contact to be updated            // from the Command line argument            String newName = data[0];             // Get the number to be updated            // from the Command line argument            long newNumber = Long.parseLong(data[1]);             String nameNumberString;            String name;            long number;            int index;             // Using file pointer creating the file.            File file = new File(""friendsContact.txt"");             if (!file.exists()) {                 // Create a new file if not exists.                file.createNewFile();            }             // Opening file in reading and write mode.            RandomAccessFile raf                = new RandomAccessFile(file, ""rw"");            boolean found = false;             // Checking whether the name            // of contact already exists.            // getFilePointer() give the current offset            // value from start of the file.            while (raf.getFilePointer() < raf.length()) {                 // reading line from the file.                nameNumberString = raf.readLine();                 // splitting the string to get name and                // number                String[] lineSplit                    = nameNumberString.split(""!"");                 // separating name and number.                name = lineSplit[0];                number = Long.parseLong(lineSplit[1]);                 // if condition to find existence of record.                if (name == newName                    || number == newNumber) {                    found = true;                    break;                }            }             // Update the contact if record exists.            if (found == true) {                 // Creating a temporary file                // with file pointer as tmpFile.                File tmpFile = new File(""temp.txt"");                 // Opening this temporary file                // in ReadWrite Mode                RandomAccessFile tmpraf                    = new RandomAccessFile(tmpFile, ""rw"");                 // Set file pointer to start                raf.seek(0);                 // Traversing the friendsContact.txt file                while (raf.getFilePointer()                       < raf.length()) {                     // Reading the contact from the file                    nameNumberString = raf.readLine();                     index = nameNumberString.indexOf(\'!\');                    name = nameNumberString.substring(                        0, index);                     // Check if the fetched contact                    // is the one to be updated                    if (name.equals(inputName)) {                         // Update the number of this contact                        nameNumberString                            = name + ""!""                              + String.valueOf(newNumber);                    }                     // Add this contact in the temporary                    // file                    tmpraf.writeBytes(nameNumberString);                     // Add the line separator in the                    // temporary file                    tmpraf.writeBytes(                        System.lineSeparator());                }                 // The contact has been updated now                // So copy the updated content from                // the temporary file to original file.                 // Set both files pointers to start                raf.seek(0);                tmpraf.seek(0);                 // Copy the contents from                // the temporary file to original file.                while (tmpraf.getFilePointer()                       < tmpraf.length()) {                    raf.writeBytes(tmpraf.readLine());                    raf.writeBytes(System.lineSeparator());                }                 // Set the length of the original file                // to that of temporary.                raf.setLength(tmpraf.length());                 // Closing the resources.                tmpraf.close();                raf.close();                 // Deleting the temporary file                tmpFile.delete();                 System.out.println("" Friend updated. "");            }             // The contact to be updated            // could not be found            else {                 // Closing the resources.                raf.close();                 // Print the message                System.out.println("" Input name""                                   + "" does not exists. "");            }        }         catch (IOException ioe) {            System.out.println(ioe);        }         catch (NumberFormatException nef) {            System.out.println(nef);        }    }}', '// Java program to delete a contact// from the file ""friendsContact.txt"" import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class DeleteFriend {     public static void main(String data[])    {         try {             // Get the name of the contact to be updated            // from the Command line argument            String newName = data[0];             String nameNumberString;            String name;            long number;            int index;             // Using file pointer creating the file.            File file = new File(""friendsContact.txt"");             if (!file.exists()) {                 // Create a new file if not exists.                file.createNewFile();            }             // Opening file in reading and write mode.            RandomAccessFile raf                = new RandomAccessFile(file, ""rw"");            boolean found = false;             // Checking whether the name of contact exists.            // getFilePointer() give the current offset            // value from start of the file.            while (raf.getFilePointer() < raf.length()) {                 // reading line from the file.                nameNumberString = raf.readLine();                 // splitting the string to get name and                // number                String[] lineSplit                    = nameNumberString.split(""!"");                 // separating name and number.                name = lineSplit[0];                number = Long.parseLong(lineSplit[1]);                 // if condition to find existence of record.                if (name == newName) {                    found = true;                    break;                }            }             // Delete the contact if record exists.            if (found == true) {                 // Creating a temporary file                // with file pointer as tmpFile.                File tmpFile = new File(""temp.txt"");                 // Opening this temporary file                // in ReadWrite Mode                RandomAccessFile tmpraf                    = new RandomAccessFile(tmpFile, ""rw"");                 // Set file pointer to start                raf.seek(0);                 // Traversing the friendsContact.txt file                while (raf.getFilePointer()                       < raf.length()) {                     // Reading the contact from the file                    nameNumberString = raf.readLine();                     index = nameNumberString.indexOf(\'!\');                    name = nameNumberString.substring(                        0, index);                     // Check if the fetched contact                    // is the one to be deleted                    if (name.equals(inputName)) {                         // Skip inserting this contact                        // into the temporary file                        continue;                    }                     // Add this contact in the temporary                    // file                    tmpraf.writeBytes(nameNumberString);                     // Add the line separator in the                    // temporary file                    tmpraf.writeBytes(                        System.lineSeparator());                }                 // The contact has been deleted now                // So copy the updated content from                // the temporary file to original file.                 // Set both files pointers to start                raf.seek(0);                tmpraf.seek(0);                 // Copy the contents from                // the temporary file to original file.                while (tmpraf.getFilePointer()                       < tmpraf.length()) {                    raf.writeBytes(tmpraf.readLine());                    raf.writeBytes(System.lineSeparator());                }                 // Set the length of the original file                // to that of temporary.                raf.setLength(tmpraf.length());                 // Closing the resources.                tmpraf.close();                raf.close();                 // Deleting the temporary file                tmpFile.delete();                 System.out.println("" Friend deleted. "");            }             // The contact to be deleted            // could not be found            else {                 // Closing the resources.                raf.close();                 // Print the message                System.out.println("" Input name""                                   + "" does not exists. "");            }        }         catch (IOException ioe) {            System.out.println(ioe);        }    }}', '// Java program to create a file ""friendsContact.txt""// and add a new contact in the file import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class AddFriend {     public static void main(String data[])    {         try {             // Get the name of the contact to be updated            // from the Command line argument            String newName = data[0];             // Get the number to be updated            // from the Command line argument            long newNumber = Long.parseLong(data[1]);             String nameNumberString;            String name;            long number;            int index;             // Using file pointer creating the file.            File file = new File(""friendsContact.txt"");             if (!file.exists()) {                 // Create a new file if not exists.                file.createNewFile();            }             // Opening file in reading and write mode.             RandomAccessFile raf                = new RandomAccessFile(file, ""rw"");            boolean found = false;             // Checking whether the name            // of contact already exists.            // getFilePointer() give the current offset            // value from start of the file.            while (raf.getFilePointer() < raf.length()) {                 // reading line from the file.                nameNumberString = raf.readLine();                 // splitting the string to get name and                // number                String[] lineSplit                    = nameNumberString.split(""!"");                 // separating name and number.                name = lineSplit[0];                number = Long.parseLong(lineSplit[1]);                 // if condition to find existence of record.                if (name == newName                    || number == newNumber) {                    found = true;                    break;                }            }             if (found == false) {                 // Enter the if block when a record                // is not already present in the file.                nameNumberString                    = newName + ""!""                      + String.valueOf(newNumber);                 // writeBytes function to write a string                // as a sequence of bytes.                raf.writeBytes(nameNumberString);                 // To insert the next record in new line.                raf.writeBytes(System.lineSeparator());                 // Print the message                System.out.println("" Friend added. "");                 // Closing the resources.                raf.close();            }            // The contact to be updated            // could not be found            else {                 // Closing the resources.                raf.close();                 // Print the message                System.out.println("" Input name""                                   + "" does not exists. "");            }        }         catch (IOException ioe) {             System.out.println(ioe);        }        catch (NumberFormatException nef) {             System.out.println(nef);        }    }}', '// Java program to read from file ""friendsContact.txt""// and display the contacts import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class DisplayFriends {     public static void main(String data[])    {         try {             String nameNumberString;            String name;            long number;            int index;             // Using file pointer creating the file.            File file = new File(""friendsContact.txt"");             if (!file.exists()) {                 // Create a new file if not exists.                file.createNewFile();            }             // Opening file in reading and write mode.             RandomAccessFile raf                = new RandomAccessFile(file, ""rw"");            boolean found = false;             // Traversing the file            // getFilePointer() give the current offset            // value from start of the file.            while (raf.getFilePointer() < raf.length()) {                 // reading line from the file.                nameNumberString = raf.readLine();                 // splitting the string to get name and                // number                String[] lineSplit                    = nameNumberString.split(""!"");                 // separating name and number.                name = lineSplit[0];                number = Long.parseLong(lineSplit[1]);                 // Print the contact data                System.out.println(                    ""Friend Name: "" + name + ""\\n""                    + ""Contact Number: "" + number + ""\\n"");            }             catch (IOException ioe)            {                 System.out.println(ioe);            }            catch (NumberFormatException nef)            {                 System.out.println(nef);            }        }    }', '// Java program to update in the file ""friendsContact.txt""// and change the number of an old contact import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class UpdateFriend {     public static void main(String data[])    {         try {             // Get the name of the contact to be updated            // from the Command line argument            String newName = data[0];             // Get the number to be updated            // from the Command line argument            long newNumber = Long.parseLong(data[1]);             String nameNumberString;            String name;            long number;            int index;             // Using file pointer creating the file.            File file = new File(""friendsContact.txt"");             if (!file.exists()) {                 // Create a new file if not exists.                file.createNewFile();            }             // Opening file in reading and write mode.            RandomAccessFile raf                = new RandomAccessFile(file, ""rw"");            boolean found = false;             // Checking whether the name            // of contact already exists.            // getFilePointer() give the current offset            // value from start of the file.            while (raf.getFilePointer() < raf.length()) {                 // reading line from the file.                nameNumberString = raf.readLine();                 // splitting the string to get name and                // number                String[] lineSplit                    = nameNumberString.split(""!"");                 // separating name and number.                name = lineSplit[0];                number = Long.parseLong(lineSplit[1]);                 // if condition to find existence of record.                if (name == newName                    || number == newNumber) {                    found = true;                    break;                }            }             // Update the contact if record exists.            if (found == true) {                 // Creating a temporary file                // with file pointer as tmpFile.                File tmpFile = new File(""temp.txt"");                 // Opening this temporary file                // in ReadWrite Mode                RandomAccessFile tmpraf                    = new RandomAccessFile(tmpFile, ""rw"");                 // Set file pointer to start                raf.seek(0);                 // Traversing the friendsContact.txt file                while (raf.getFilePointer()                       < raf.length()) {                     // Reading the contact from the file                    nameNumberString = raf.readLine();                     index = nameNumberString.indexOf(\'!\');                    name = nameNumberString.substring(                        0, index);                     // Check if the fetched contact                    // is the one to be updated                    if (name.equals(inputName)) {                         // Update the number of this contact                        nameNumberString                            = name + ""!""                              + String.valueOf(newNumber);                    }                     // Add this contact in the temporary                    // file                    tmpraf.writeBytes(nameNumberString);                     // Add the line separator in the                    // temporary file                    tmpraf.writeBytes(                        System.lineSeparator());                }                 // The contact has been updated now                // So copy the updated content from                // the temporary file to original file.                 // Set both files pointers to start                raf.seek(0);                tmpraf.seek(0);                 // Copy the contents from                // the temporary file to original file.                while (tmpraf.getFilePointer()                       < tmpraf.length()) {                    raf.writeBytes(tmpraf.readLine());                    raf.writeBytes(System.lineSeparator());                }                 // Set the length of the original file                // to that of temporary.                raf.setLength(tmpraf.length());                 // Closing the resources.                tmpraf.close();                raf.close();                 // Deleting the temporary file                tmpFile.delete();                 System.out.println("" Friend updated. "");            }             // The contact to be updated            // could not be found            else {                 // Closing the resources.                raf.close();                 // Print the message                System.out.println("" Input name""                                   + "" does not exists. "");            }        }         catch (IOException ioe) {            System.out.println(ioe);        }         catch (NumberFormatException nef) {            System.out.println(nef);        }    }}', '// Java program to delete a contact// from the file ""friendsContact.txt"" import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class DeleteFriend {     public static void main(String data[])    {         try {             // Get the name of the contact to be updated            // from the Command line argument            String newName = data[0];             String nameNumberString;            String name;            long number;            int index;             // Using file pointer creating the file.            File file = new File(""friendsContact.txt"");             if (!file.exists()) {                 // Create a new file if not exists.                file.createNewFile();            }             // Opening file in reading and write mode.            RandomAccessFile raf                = new RandomAccessFile(file, ""rw"");            boolean found = false;             // Checking whether the name of contact exists.            // getFilePointer() give the current offset            // value from start of the file.            while (raf.getFilePointer() < raf.length()) {                 // reading line from the file.                nameNumberString = raf.readLine();                 // splitting the string to get name and                // number                String[] lineSplit                    = nameNumberString.split(""!"");                 // separating name and number.                name = lineSplit[0];                number = Long.parseLong(lineSplit[1]);                 // if condition to find existence of record.                if (name == newName) {                    found = true;                    break;                }            }             // Delete the contact if record exists.            if (found == true) {                 // Creating a temporary file                // with file pointer as tmpFile.                File tmpFile = new File(""temp.txt"");                 // Opening this temporary file                // in ReadWrite Mode                RandomAccessFile tmpraf                    = new RandomAccessFile(tmpFile, ""rw"");                 // Set file pointer to start                raf.seek(0);                 // Traversing the friendsContact.txt file                while (raf.getFilePointer()                       < raf.length()) {                     // Reading the contact from the file                    nameNumberString = raf.readLine();                     index = nameNumberString.indexOf(\'!\');                    name = nameNumberString.substring(                        0, index);                     // Check if the fetched contact                    // is the one to be deleted                    if (name.equals(inputName)) {                         // Skip inserting this contact                        // into the temporary file                        continue;                    }                     // Add this contact in the temporary                    // file                    tmpraf.writeBytes(nameNumberString);                     // Add the line separator in the                    // temporary file                    tmpraf.writeBytes(                        System.lineSeparator());                }                 // The contact has been deleted now                // So copy the updated content from                // the temporary file to original file.                 // Set both files pointers to start                raf.seek(0);                tmpraf.seek(0);                 // Copy the contents from                // the temporary file to original file.                while (tmpraf.getFilePointer()                       < tmpraf.length()) {                    raf.writeBytes(tmpraf.readLine());                    raf.writeBytes(System.lineSeparator());                }                 // Set the length of the original file                // to that of temporary.                raf.setLength(tmpraf.length());                 // Closing the resources.                tmpraf.close();                raf.close();                 // Deleting the temporary file                tmpFile.delete();                 System.out.println("" Friend deleted. "");            }             // The contact to be deleted            // could not be found            else {                 // Closing the resources.                raf.close();                 // Print the message                System.out.println("" Input name""                                   + "" does not exists. "");            }        }         catch (IOException ioe) {            System.out.println(ioe);        }    }}']","['File file = new File( filename )\nRandomAccessFile raf = new RandomAccessFile(file, mode)', 'Name!Number', 'javac AddFriend.java \n\njava AddFriend abc 1111111111 \nFriend added\n\njava AddFriend pqr 1111111111\nInput name or number already exist', 'javac DisplayFriends.java \n\njava DisplayFriends\nFriend Name: abc \nContact Number: 1234567890\n\nFriend Name: lmn\nContact Number: 3333333333\n\nFriend Name: xyz \nContact Number: 4444444444', 'javac UpdateFriend.java \n\njava UpdateFriend abc 1234567890\nFriend updated.\n\njava UpdateFriend tqr\nInput name does not exists.', 'javac DeleteFriend.java \n\njava DeleteFriend pqr\nFriend deleted.\n\njava DeleteFriend tqr\nInput name does not exists.']","['“r”|||Open for reading only. Invoking any of the write methods of the resulting object will cause an IOException to be thrown.&&&“rw”|||Open to reading and writing. If the file does not already exist then an attempt will be made to create it.&&&“rws”|||Open for reading and writing, as with “rw”, and also require that every update to the file’s content or metadata be written synchronously to the underlying storage device.&&&“rwd”|||Open for reading and writing, as with “rw”, and also require that every update to the file’s content be written synchronously to the underlying storage device.']","['writeBytes(String s): Writes the string to the file as a sequence of bytes.|||readLine(): Reads the next line of text from this file.|||getFilePointer(): Returns the current offset in this file.|||length(): Returns the length of this file and return type is long.|||close(): Closes this random access file stream and releases any system resources associated with the stream.|||setLength(long newLength): Sets the length of this file.|||seek(long pos): Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.&&&&&&Creation of a new file|||Opening an existing file|||Reading from file|||Writing to a file|||Moving to a specific location in a file|||Closing a file&&&InputStream|||OutputStream|||FilterOutputStream|||FileOutputStream|||ByteArrayOutputStream|||ByteArrayInputStream|||FileInputStream|||FilterInputStream|||StringBufferInputStream|||SequenceInputStream|||BufferedOutputStream|||StringBufferInputStream|||DataOutputStream|||PrintStream|||BufferedInputStream|||DataInputStream|||PushbackInputStream&&&']"
91,['Java.io.InputStream Class in Java'],[],[],"['https://media.geeksforgeeks.org/wp-content/uploads/InputStream.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/InputStream-Class-in-Java..jpg']",[],"['https://media.geeksforgeeks.org/wp-content/uploads/InputStream.jpg', 'https://media.geeksforgeeks.org/wp-content/uploads/InputStream-Class-in-Java..jpg', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['Constructor :', 'Java Program explaining InputStream Class methods :']","['InputStream class is the superclass of all the io classes i.e. representing an input stream of bytes. It represents input stream of bytes. Applications that are defining subclass of InputStream must provide method, returning the next byte of input.A reset() method is invoked which re-positions the stream to the recently marked position.Declaration :', 'Note :This code won’t run on online IDE as no suc file is present here.You can run this code on your System to check the working.ABC.txt file used in the code has', 'This article is contributed by Mohit Gupta 🙂. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['// Java program illustrating the working of InputStream method// mark(), read(), skip()// markSupported(), close(), reset()import java.io.*;  public class NewClass{    public static void main(String[] args) throws Exception    {        InputStream geek = null;        try {              geek = new FileInputStream(""ABC.txt"");              // read() method : reading and printing Characters            // one by one            System.out.println(""Char : ""+(char)geek.read());            System.out.println(""Char : ""+(char)geek.read());            System.out.println(""Char : ""+(char)geek.read());              // mark() : read limiing the \'geek\' input stream            geek.mark(0);              // skip() : it results in redaing of \'e\' in G\'e\'eeks            geek.skip(1);            System.out.println(""skip() method comes to play"");            System.out.println(""mark() method comes to play"");            System.out.println(""Char : ""+(char)geek.read());            System.out.println(""Char : ""+(char)geek.read());            System.out.println(""Char : ""+(char)geek.read());              boolean check = geek.markSupported();            if (geek.markSupported())            {                // reset() method : repositioning the stram to                // marked positions.                geek.reset();                System.out.println(""reset() invoked"");                System.out.println(""Char : ""+(char)geek.read());                System.out.println(""Char : ""+(char)geek.read());            }            else                System.out.println(""reset() method not supported."");                System.out.println(""geek.markSupported() supported""+                              "" reset() : ""+check);          }        catch(Exception excpt)        {            // in case of I/O error            excpt.printStackTrace();        }        finally        {            // releasing the resources back to the            // GarbageCollector when closes            if (geek!=null)            {                // Use of close() : closing the file                // and releasing resources                geek.close();            }        }    }}']","['public abstract class InputStream\n   extends Object\n      implements Closeable', 'public void mark(int arg)\nParameters :\narg : integer specifying the read limit of the input Stream\nReturn : \nvoid', 'public abstract int read()\nParameters :\n------\nReturn : \nReads next data else, -1 i.e. when end of file is reached.\nException :\n->  IOException : If I/O error occurs.', 'public void close()\nParameters :\n------\nReturn : \nvoid\nException :\n->  IOException : If I/O error occurs.', 'public int read(byte[] arg)\nParameters :\narg : array whose number of bytes to be read\nReturn : \n reads number of bytes and return to the buffer else, -1 i.e. when end of file is reached.\nException :\n->  IOException : If I/O error occurs.\n->  NullPointerException : if arg is null.', 'public void reset()\nParameters :\n----\nReturn : \nvoid\nException :\n->  IOException : If I/O error occurs.', 'public boolean markSupported()\nParameters :\n-------\nReturn : \ntrue if input stream supports the mark() and reset() method  else,false', 'public long skip(long arg)\nParameters :\narg : no. of bytes to be skipped\nReturn : \nskip bytes.\nException :\n->  IOException : If I/O error occurs.', 'HelloGeeks', 'Char : H\nChar : e\nChar : l\nskip() method comes to play\nmark() method comes to play\nChar : o\nChar : G\nChar : e\nreset() method not supported.\ngeek.markSupported() supported reset() : false']",[],"['InputStream() : Single Constructor&&&mark() : Java.io.InputStream.mark(int arg) marks the current position of the input stream. It sets readlimit i.e. maximum number of bytes that can be read before mark position becomes invalid.Syntax :public void mark(int arg)\nParameters :\narg : integer specifying the read limit of the input Stream\nReturn : \nvoid|||read() : java.io.InputStream.read() reads next byte of data from the Input Stream. The value byte is returned in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned.Syntax :public abstract int read()\nParameters :\n------\nReturn : \nReads next data else, -1 i.e. when end of file is reached.\nException :\n->  IOException : If I/O error occurs.|||close() : java.io.InputStream.close() closes the input stream and releases system resources associated with this stream to Garbage Collector.Syntax :public void close()\nParameters :\n------\nReturn : \nvoid\nException :\n->  IOException : If I/O error occurs.|||read() : Java.io.InputStream.read(byte[] arg) reads number of bytes of arg.length from the input stream to the buffer array arg. The bytes read by read() method are returned as int. If len is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte.Syntax :public int read(byte[] arg)\nParameters :\narg : array whose number of bytes to be read\nReturn : \n reads number of bytes and return to the buffer else, -1 i.e. when end of file is reached.\nException :\n->  IOException : If I/O error occurs.\n->  NullPointerException : if arg is null.|||reset() : Java.io.InputStream.reset() is invoked by mark() method. It repositions the input stream to the marked position.Syntax :public void reset()\nParameters :\n----\nReturn : \nvoid\nException :\n->  IOException : If I/O error occurs.|||markSupported() : Java.io.InputStream.markSupported() method tests if this input stream supports the mark and reset methods. The markSupported method of InputStream returns false by default.Syntax :public boolean markSupported()\nParameters :\n-------\nReturn : \ntrue if input stream supports the mark() and reset() method  else,false|||skip() : Java.io.InputStream.skip(long arg) skips and discards arg bytes in the input stream.Syntax :public long skip(long arg)\nParameters :\narg : no. of bytes to be skipped\nReturn : \nskip bytes.\nException :\n->  IOException : If I/O error occurs.Java Program explaining InputStream Class methods :// Java program illustrating the working of InputStream method// mark(), read(), skip()// markSupported(), close(), reset()import java.io.*;public class NewClass{public static void main(String[] args) throws Exception{InputStream geek = null;try {geek = new FileInputStream(""ABC.txt"");// read() method : reading and printing Characters// one by oneSystem.out.println(""Char : ""+(char)geek.read());System.out.println(""Char : ""+(char)geek.read());System.out.println(""Char : ""+(char)geek.read());// mark() : read limiing the \'geek\' input streamgeek.mark(0);// skip() : it results in redaing of \'e\' in G\'e\'eeksgeek.skip(1);System.out.println(""skip() method comes to play"");System.out.println(""mark() method comes to play"");System.out.println(""Char : ""+(char)geek.read());System.out.println(""Char : ""+(char)geek.read());System.out.println(""Char : ""+(char)geek.read());boolean check = geek.markSupported();if (geek.markSupported()){// reset() method : repositioning the stram to// marked positions.geek.reset();System.out.println(""reset() invoked"");System.out.println(""Char : ""+(char)geek.read());System.out.println(""Char : ""+(char)geek.read());}elseSystem.out.println(""reset() method not supported."");System.out.println(""geek.markSupported() supported""+"" reset() : ""+check);}catch(Exception excpt){// in case of I/O errorexcpt.printStackTrace();}finally{// releasing the resources back to the// GarbageCollector when closesif (geek!=null){// Use of close() : closing the file// and releasing resourcesgeek.close();}}}}Note :This code won’t run on online IDE as no suc file is present here.You can run this code on your System to check the working.ABC.txt file used in the code hasHelloGeeksOutput :Char : H\nChar : e\nChar : l\nskip() method comes to play\nmark() method comes to play\nChar : o\nChar : G\nChar : e\nreset() method not supported.\ngeek.markSupported() supported reset() : falseThis article is contributed by Mohit Gupta 🙂. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave']"
92,['Java.io.OutputStream class in Java'],[],[],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.facebook.com/ChippingEye2766?ref=bookmarks', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']",['Constructor and Description'],"['This abstract class is the superclass of all classes representing an output stream of bytes. An output stream accepts output bytes and sends them to some sink.Applications that need to define a subclass of OutputStream must always provide at least a method that writes one byte of output.', 'This article is contributed by Nishant Sharma. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['import java.io.*;//Java program to demonstrate OutputStreamclass OutputStreamDemo{    public static void main(String args[])throws Exception    {        OutputStream os = new FileOutputStream(""file.txt"");        byte b[] = {65, 66, 67, 68, 69, 70};                  //illustrating write(byte[] b) method        os.write(b);                  //illustrating flush() method        os.flush();          //illustrating write(int b) method        for (int i = 71; i <75 ; i++)         {            os.write(i);        }                  os.flush();                  //close the stream        os.close();    }}']","['Syntax :public void close()\n           throws IOException\nThrows:\nIOException', 'Syntax :public void flush()\n           throws IOException\nThrows:\nIOException', 'Syntax :public void write(byte[] b)\n           throws IOException\nParameters:\nb - the data.\nThrows:\nIOException', 'Syntax :public void write(byte[] b,\n         int off,\n         int len)\n           throws IOException\nParameters:\nb - the data.\noff - the start offset in the data.\nlen - the number of bytes to write.\nThrows:\nIOException', 'Syntax :public abstract void write(int b)\n                    throws IOException\nParameters:\nb - the byte.\nThrows:\nIOException', 'ABCDEFGHIJ']",[],"['OutputStream() : Single Constructor&&&void close() : Closes this output stream and releases any system resources associated with this stream.Syntax :public void close()\n           throws IOException\nThrows:\nIOException|||void flush() : Flushes this output stream and forces any buffered output bytes to be written out.Syntax :public void flush()\n           throws IOException\nThrows:\nIOException|||void write(byte[] b) : Writes b.length bytes from the specified byte array to this output stream.Syntax :public void write(byte[] b)\n           throws IOException\nParameters:\nb - the data.\nThrows:\nIOException |||void write(byte[] b, int off, int len) : Writes len bytes from the specified byte array starting at offset off to this output stream.Syntax :public void write(byte[] b,\n         int off,\n         int len)\n           throws IOException\nParameters:\nb - the data.\noff - the start offset in the data.\nlen - the number of bytes to write.\nThrows:\nIOException |||abstract void write(int b) : Writes the specified byte to this output stream.Syntax :public abstract void write(int b)\n                    throws IOException\nParameters:\nb - the byte.\nThrows:\nIOException']"
93,['Java.io.File Class in Java'],"['Java', 'Java']",['Methods of File Class'],[],[],"['https://www.geeksforgeeks.org/medium/', 'https://www.geeksforgeeks.org/file-canexecute-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-canread-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-canwrite-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-createnewfile-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-createtempfile-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/files-delete-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-exists-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-getabsolutepath-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-list-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-getfreespace-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-getname-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-getparent-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-getparentfile-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-getpath-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-setreadonly-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-isdirectory-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-isfile-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-ishidden-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-length-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-listfiles-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-mkdir-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-renameto-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-setexecutable-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-setreadable-function-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-setreadable-function-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-setwritable-method-in-java-with-examples/', 'https://www.geeksforgeeks.org/file-handling-java-using-filewriter-filereader/', 'http://write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['How to create a File Object?\xa0', 'Example 1: Program to\xa0check if a\xa0file or directory physically exists or not.', 'Example 2: Program to display all the contents of a\xa0directory', 'Related Post: FileReader and FileWriter in Java']","['A File object is created\xa0by passing in a string that represents the name of a file, a String, or another File object. For example,\xa0', 'This defines an abstract file name for the geeks file in the directory /usr/local/bin. This is an absolute abstract file name.', 'Here we will accept a directory name from the keyboard and then display all the contents of the directory. For this purpose, list() method can be used as:\xa0', 'In the preceding statement, the list() method causes all the directory entries copied into the array arr[]. Then pass these array elements arr[i] to the File object and test them to know if they represent a file or directory.']","['The File class is Java’s representation of a file or directory pathname. Because\xa0file and directory names have different formats on different platforms, a simple string is not adequate to name them. The File class contains several methods for working with the pathname, deleting and renaming files, creating new directories, listing the contents of a directory, and determining several common attributes of files and directories.\xa0', 'This article is contributed by Nishant Sharma. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']","['// In this Java program, we accepts a file or directory name from// command line arguments. Then the program will check if// that file or directory physically exist or not and// it displays the property of that file or directory.  import java.io.File;  // Displaying file propertyclass fileProperty {    public static void main(String[] args)    {          // accept file name or directory name through        // command line args        String fname = args[0];          // pass the filename or directory name to File        // object        File f = new File(fname);          // apply File class methods on File object        System.out.println(""File name :"" + f.getName());        System.out.println(""Path: "" + f.getPath());        System.out.println(""Absolute path:""                           + f.getAbsolutePath());        System.out.println(""Parent:"" + f.getParent());        System.out.println(""Exists :"" + f.exists());          if (f.exists()) {            System.out.println(""Is writable:""                               + f.canWrite());            System.out.println(""Is readable"" + f.canRead());            System.out.println(""Is a directory:""                               + f.isDirectory());            System.out.println(""File Size in bytes ""                               + f.length());        }    }}', '// Java Program to display all // the contents of a directoryimport java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStreamReader;  // Displaying the contents of a directoryclass Contents {    public static void main(String[] args)        throws IOException    {        // enter the path and dirname from keyboard        BufferedReader br = new BufferedReader(            new InputStreamReader(System.in));          System.out.println(""Enter dirpath:"");        String dirpath = br.readLine();        System.out.println(""Enter the dirname"");        String dname = br.readLine();          // create File object with dirpath and dname        File f = new File(dirpath, dname);          // if directory exists,then        if (f.exists()) {            // get the contents into arr[]            // now arr[i] represent either a File or            // Directory            String arr[] = f.list();              // find no. of entries in the directory            int n = arr.length;              // displaying the entries            for (int i = 0; i < n; i++) {                System.out.println(arr[i]);                // create File object with the entry and                // test if it is a file or directory                File f1 = new File(arr[i]);                if (f1.isFile())                    System.out.println("": is a file"");                if (f1.isDirectory())                    System.out.println("": is a directory"");            }            System.out.println(                ""No of entries in this directory "" + n);        }        else            System.out.println(""Directory not found"");    }}']","['File a = new File(""/usr/local/bin/geeks"");', 'File name :file.txt\nPath: file.txt\nAbsolute path:C:\\Users\\akki\\IdeaProjects\\codewriting\\src\\file.txt\nParent:null\nExists :true\nIs writable:true\nIs readabletrue\nIs a directory:false\nFile Size in bytes 20', 'String arr[]=f.list();', 'Enter dirpath:\nC:\\Users\\akki\\IdeaProjects\\\nEnter the dirname\ncodewriting\n.idea\n: is a directory\nan1.txt\n: is a file\ncodewriting.iml\n: is a file\nfile.txt\n: is a file\nout\n: is a directory\nsrc\n: is a directory\ntext\n: is a file\nNo of entries in this directory 7']","['1.|||canExecute()|||Tests whether the application can execute the file denoted by this abstract pathname.|||boolean&&&2.|||canRead()|||Tests whether the application can read the file denoted by this abstract pathname.|||boolean&&&3.|||canWrite()|||Tests whether the application can modify the file denoted by this abstract pathname.|||boolean&&&4.|||compareTo(File pathname)|||Compares two abstract pathnames lexicographically.|||int&&&5.|||createNewFile()|||Atomically creates a new, empty file named by this abstract pathname.|||boolean&&&6.|||createTempFile(String prefix, String suffix)|||Creates an empty file in the default temporary-file directory.|||File&&&7.|||delete()|||Deletes the file or directory denoted by this abstract pathname.|||boolean&&&8.|||equals(Object obj)|||Tests this abstract pathname for equality with the given object.|||boolean&&&9.|||exists()|||Tests whether the file or directory denoted by this abstract pathname exists.|||boolean&&&10.|||getAbsolutePath()|||\xa0Returns the absolute pathname string of this abstract pathname.|||String&&&11.|||list()|||Returns an array of strings naming the files and directories in the directory.|||String[]&&&12.|||getFreeSpace()|||Returns the number of unallocated bytes in the partition.|||long&&&13.|||getName()|||Returns the name of the file or directory denoted by this abstract pathname.|||String&&&14.|||getParent()|||Returns the pathname string of this abstract pathname’s parent.|||String&&&15.|||getParentFile()|||Returns the abstract pathname of this abstract pathname’s parent.|||File&&&16.|||getPath()|||Converts this abstract pathname into a pathname string.|||String&&&17.|||setReadOnly()|||Marks the file or directory named so that only read operations are allowed.|||boolean&&&18.|||isDirectory()|||Tests whether the file denoted by this pathname is a directory.|||boolean&&&19.|||isFile()|||Tests whether the file denoted by this abstract pathname is a normal file.|||boolean&&&20.|||isHidden()|||Tests whether the file named by this abstract pathname is a hidden file.|||boolean&&&21.|||length()|||Returns the length of the file denoted by this abstract pathname.|||long&&&22.|||listFiles()|||Returns an array of abstract pathnames denoting the files in the directory.|||File[]&&&23.|||mkdir()|||Creates the directory named by this abstract pathname.|||boolean&&&24.|||renameTo(File dest)|||Renames the file denoted by this abstract pathname.|||boolean&&&25.|||setExecutable(boolean executable)|||A convenience method to set the owner’s execute permission.|||boolean&&&26.|||setReadable(boolean readable)|||A convenience method to set the owner’s read permission.|||boolean&&&27.|||setReadable(boolean readable, boolean ownerOnly)|||Sets the owner’s or everybody’s read permission.|||boolean&&&28.|||setWritable(boolean writable)|||A convenience method to set the owner’s write permission.|||boolean&&&29.|||toString()|||Returns the pathname string of this abstract pathname.|||String&&&30.|||toURI()|||Constructs a file URI that represents this abstract pathname.|||URI']","['It is an abstract representation of files and directory pathnames.|||A pathname, whether abstract or in string formcan be either absolute or relative. The parent of an abstract pathname may be obtained by invoking the getParent() method of this class.|||First of all, we should create the File class object by passing the filename or directory name to it. A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as access permissions.|||Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change.&&&File(File parent, String child):Creates a new File instance from a parent abstract pathname and a child pathname string.|||File(String pathname):Creates a new File instance by converting the given pathname string into an abstract pathname.|||File(String parent, String child):Creates a new File instance from a parent pathname string and a child pathname string.|||File(URI uri):Creates a new File instance by converting the given file: URI into an abstract pathname.']"
94,['File Permissions in Java'],"['Java', 'Java']","['Checking the Current File Permissions', 'Changing File Permissions']",[],[],"['https://www.geeksforgeeks.org/easy/', 'http://www.write.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']","['A file can be in any combination of the following permissible permissions:\xa0', '2. Readable: Tests whether the application can read the file denoted by this abstract path name.\xa0', '3. Writable: Tests whether the application can modify the file denoted by this abstract path name.\xa0', 'A file can have any combination of the following permissions:\xa0', 'Here are methods to change the permissions associated with a file:\xa0', 'Returns: It returns true if and only if the operation succeeded.\xa0', 'Returns: It returns true if and only if the operation succeeded.\xa0', 'Returns: It returns true if and only if the operation succeeded.']","['Java provides a number of method calls to check and change the permission of a file, such as a read-only file can be changed to have permissions to write. File permissions are required to be changed when the user wants to restrict the operations permissible on a file. For example, file permission can be changed from write to read-only because the user no longer wants to edit the file.\xa0', '1. Executable: Tests whether the application can execute the file denoted by this abstract path name.\xa0', 'Returns: It returns true if and only if the abstract pathname exists and the application is allowed to execute the file', 'Returns:\xa0It returns true if and only if the file specified by this abstract pathname exists and can be read by the application; false otherwise', 'Returns:\xa0It returns true if and only if the file system actually contains a file denoted by this abstract pathname and the application is allowed to write to the file; false otherwise.', 'For example, a file can be readable and writable but not executable. Here’s a Java program to get the current permissions associated with a file.', '1. setExecutableA convenience method to set the owner’s execute permission for this abstract path name.\xa0', 'Parameters: executable – If true, sets the access permission to allow execute operations; if false to disallow execute operations.', 'The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If the executable is false and the underlying file system does not implement an execute permission, then the operation will fail.\xa0', '2. setReadable: A convenience method to set the owner’s read permission for this abstract path name.\xa0', 'Parameters: readable – If true, sets the access permission to allow read operations; if false to disallow read operations', 'The operation will fail if the user does not have permission to change the access permissions of this abstract path name. If readable is false and the underlying file system does not implement a read permission, then the operation will fail.', '3. setWritable : A convenience method to set the owner’s write permission for this abstract path name.\xa0', 'Parameters: writable – If true, sets the access permission to allow write operations; if false to disallow write operations', 'The operation will fail if the user does not have permission to change the access permissions of this abstract path name.', 'This article is contributed by Mayank Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['// Java program to check the current file permissions. import java.io.*; public class Test {    public static void main(String[] args)    {        // creating a file instance        File file            = new File(""C:\\\\Users\\\\Mayank\\\\Desktop\\\\1.txt"");         // check if the file exists        boolean exists = file.exists();        if (exists == true) {            // printing the permissions associated with the            // file            System.out.println(""Executable: ""                               + file.canExecute());            System.out.println(""Readable: ""                               + file.canRead());            System.out.println(""Writable: ""                               + file.canWrite());        }        else {            System.out.println(""File not found."");        }    }}', '// Java program to change the file permissions import java.io.*; public class Test {    public static void main(String[] args)    {        // creating a new file instance        File file            = new File(""C:\\\\Users\\\\Mayank\\\\Desktop\\\\1.txt"");         // check if file exists        boolean exists = file.exists();        if (exists == true) {            // changing the file permissions            file.setExecutable(true);            file.setReadable(true);            file.setWritable(false);            System.out.println(""File permissions changed."");             // printing the permissions associated with the            // file currently            System.out.println(""Executable: ""                               + file.canExecute());            System.out.println(""Readable: ""                               + file.canRead());            System.out.println(""Writable: ""                               + file.canWrite());        }        else {            System.out.println(""File not found."");        }    }}']","['public boolean canExecute()', 'public boolean canRead()', 'public boolean canWrite()', 'Executable: true\nReadable: true\nWritable: true', 'public boolean setExecutable(boolean executable)', 'public boolean setReadable(boolean readable)', 'public boolean setWritable(boolean writable)', 'File permissions changed.\nExecutable: true\nReadable: true\nWritable: false']",[],['Executable|||Readable|||Writable']
95,['Copying file using FileStreams in Java'],[],[],[],[],"['https://www.geeksforgeeks.org/basic/', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']",['Methods used in the program'],"['We can copy a file from one location to another using FileInputStream and FileOutputStream classes in Java.For this we have to import some specific classes of java.io package. So for instance let us include the entire package with statement import java.io.*;', 'The main logic of copying file is to read the file associated to FileInputStream variable and write the read contents into the file associated with FileOutputStream variable.', 'This article is contributed by Parul Dang. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['/* Program to copy a src file to destination.   The name of src file and dest file must be   provided using command line arguments where   args[0] is the name of source file and   args[1] is name of destination file */  import java.io.*;class src2dest{    public static void main(String args[])    throws FileNotFoundException,IOException    {        /* If file doesnot exist FileInputStream throws           FileNotFoundException and read() write() throws           IOException if I/O error occurs */        FileInputStream fis = new FileInputStream(args[0]);          /* assuming that the file exists and need not to be           checked */        FileOutputStream fos = new FileOutputStream(args[1]);          int b;        while  ((b=fis.read()) != -1)            fos.write(b);          /* read() will readonly next int so we used while           loop here in order to read upto end of file and           keep writing the read int into dest file */        fis.close();        fos.close();    }}']",[],[],"['int read(); Reads a byte of data. Present in FileInputStream. Other versions of this method : int read(byte[] bytearray) and int read(byte[] bytearray, int offset, int length)|||void write(int b) : Writes a byte of data. Present in FileOutputStream. Other versions of this method : void write(byte[] bytearray) and void write(byte[] bytearray, int offset, int length);']"
96,['Delete a file using Java'],[],[],[],[],"['https://www.geeksforgeeks.org/easy/', 'https://docs.oracle.com/javase/8/doc/api/java/io/File.html', 'http://www.contribute.geeksforgeeks.org', 'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article']",['Reference:'],"['Java provides methods to delete files using java programs. On the contrary to normal delete operations in any operating system, files being deleted using java program is deleted permanently without being moved to trash/recycle bin.Following are the methods used to delete a file in Java:', 'This article is contributed by Mayank Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.', 'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.']",[],"['// Java program to delete a file import java.io.*;  public class Test{    public static void main(String[] args)    {        File file = new File(""C:\\\\Users\\\\Mayank\\\\Desktop\\\\1.txt"");                  if(file.delete())        {            System.out.println(""File deleted successfully"");        }        else        {            System.out.println(""Failed to delete the file"");        }    }}', '// Java program to demonstrate delete using Files classimport java.io.IOException;import java.nio.file.*;  public class Test{    public static void main(String[] args)    {        try        {            Files.deleteIfExists(Paths.get(""C:\\\\Users\\\\Mayank\\\\Desktop\\\\            445.txt""));        }        catch(NoSuchFileException e)        {            System.out.println(""No such file/directory exists"");        }        catch(DirectoryNotEmptyException e)        {            System.out.println(""Directory is not empty."");        }        catch(IOException e)        {            System.out.println(""Invalid permissions."");        }                  System.out.println(""Deletion successful."");    }}']","['public boolean delete()\nReturns: true if and only if the file or \ndirectory is successfully deleted; false otherwise', 'File deleted successfully', 'public static boolean deleteIfExists(Path path) throws IOException\nParameters: path - the path to the file to delete\nReturns: true if the file was deleted by this method; \nfalse if the file could not be deleted because it did not exist.\nThrows: \nDirectoryNotEmptyException - if the file is a directory and \ncould not otherwise be deleted because the directory is not empty\n(optional specific exception)\nIOException - if an I/O error occurs', 'Deletion successful.']",[],"['Oracle&&&&&&Using java.io.File.delete() function: Deletes the file or directory denoted by this abstract path name.Syntax:public boolean delete()\nReturns: true if and only if the file or \ndirectory is successfully deleted; false otherwise// Java program to delete a fileimport java.io.*;public class Test{public static void main(String[] args){File file = new File(""C:\\\\Users\\\\Mayank\\\\Desktop\\\\1.txt"");if(file.delete()){System.out.println(""File deleted successfully"");}else{System.out.println(""Failed to delete the file"");}}}Output:File deleted successfully|||Using java.nio.file.files.deleteifexists(Path p) method defined in Files package: This method deletes a file if it exists. It also deletes a directory mentioned in the path only if the directory is not empty.Syntax:public static boolean deleteIfExists(Path path) throws IOException\nParameters: path - the path to the file to delete\nReturns: true if the file was deleted by this method; \nfalse if the file could not be deleted because it did not exist.\nThrows: \nDirectoryNotEmptyException - if the file is a directory and \ncould not otherwise be deleted because the directory is not empty\n(optional specific exception)\nIOException - if an I/O error occurs// Java program to demonstrate delete using Files classimport java.io.IOException;import java.nio.file.*;public class Test{public static void main(String[] args){try{Files.deleteIfExists(Paths.get(""C:\\\\Users\\\\Mayank\\\\Desktop\\\\445.txt""));}catch(NoSuchFileException e){System.out.println(""No such file/directory exists"");}catch(DirectoryNotEmptyException e){System.out.println(""Directory is not empty."");}catch(IOException e){System.out.println(""Invalid permissions."");}System.out.println(""Deletion successful."");}}Output:Deletion successful.&&&']"
