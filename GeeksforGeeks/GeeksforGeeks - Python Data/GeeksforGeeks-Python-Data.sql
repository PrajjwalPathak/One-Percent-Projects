CREATE DATABASE  IF NOT EXISTS `web_scraped_data` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `web_scraped_data`;
-- MySQL dump 10.13  Distrib 8.0.26, for Win64 (x86_64)
--
-- Host: localhost    Database: web_scraped_data
-- ------------------------------------------------------
-- Server version	8.0.26

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `geeksforgeeks_python_data`
--

DROP TABLE IF EXISTS `geeksforgeeks_python_data`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `geeksforgeeks_python_data` (
  `page_no` int NOT NULL,
  `main_headings` varchar(94) NOT NULL,
  `sub_headings_h2` varchar(708) NOT NULL,
  `sub_headings_h3` varchar(641) NOT NULL,
  `image_urls` text,
  `video_urls` varchar(60) NOT NULL,
  `links` text,
  `facts` text,
  `definitions` text,
  `explanations` text,
  `codes` text,
  `outputs` text,
  `table_data` text,
  `list_items` text,
  PRIMARY KEY (`page_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `geeksforgeeks_python_data`
--

LOCK TABLES `geeksforgeeks_python_data` WRITE;
/*!40000 ALTER TABLE `geeksforgeeks_python_data` DISABLE KEYS */;
INSERT INTO `geeksforgeeks_python_data` VALUES (0,'[\'Python Language Introduction\']','[]','[]','[]','[\'https://www.youtube.com/embed/OLPbd-7Pp_8?feature=oembed\']','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://ide.geeksforgeeks.org/\', \'http://python.org/\', \'http://python.org/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Python is a programming language that lets you work quickly and integrate systems more efficiently.\', \'There are two major Python versions: Python 2 and Python 3. Both are quite different.\', \'Beginning with Python programming:\', \'1) Finding an Interpreter:\', \'2) Writing our first program:\', \'Just type in the following code after you start the interpreter.\', \'Let’s analyze the script line by line.\', \'Line 3: [# Script Ends] This is just another comment like in Line 1.\']','[\'Python is a widely used general-purpose, high level programming language. It was created by Guido van Rossum in 1991 and further developed by the Python Software Foundation. It was designed with an emphasis on code readability, and its syntax allows programmers to express their concepts in fewer lines of code.\', \'Before we start Python programming, we need to have an interpreter to interpret and run our programs. There are certain online interpreters like https://ide.geeksforgeeks.org/, http://ideone.com/ or http://codepad.org/ that can be used to run Python programs without installing an interpreter.\', \'Windows: There are many interpreters available freely to run Python scripts like IDLE (Integrated Development Environment) that comes bundled with the Python software downloaded from http://python.org/.\', \'Linux: Python comes preinstalled with popular Linux distros such as Ubuntu and Fedora. To check which version of Python you’re running, type “python” in the terminal emulator. The interpreter should start and print the version number.\', \'macOS: Generally, Python 2.7 comes bundled with macOS. You’ll have to manually install Python 3 from http://python.org/.\', \'Line 1: [# Script Begins] In Python, comments begin with a #. This statement is ignored by the interpreter and serves as documentation for our code.\', \'Line 2: [print(“GeeksQuiz”)] To print something on the console, print() function is used. This function also adds a newline after our message is printed(unlike in C). Note that in Python 2, “print” is not a function but a keyword and therefore can be used without parentheses. However, in Python 3, it is a function and must be invoked with parentheses.\', \'Please comment if you find anything incorrect, or if you want to share more information about the topic discussed above.\']','[]','[\'# Script Begins        print(\"GeeksQuiz\")        # Scripts Ends\']','[\'GeeksQuiz\']','[]','[]'),(1,'[\'Python Language advantages and applications\']','[]','[\'Advantages :xa0\', \'Applications :xa0\', \'Organizations using Python :xa0\']','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Organizations using Python :xa0\']','[]','[\'Python is a high-level, interpreted, and general-purpose dynamic programming language that focuses on code readability. It has fewer steps when compared to Java and C. It was founded in 1991 by developer Guido Van Rossum.xa0Python ranks among the most popular and fastest-growing languages in the world. Python is a powerful, flexible, and easy-to-use language. In addition, the community is very active there. It is used in many organizations as it supports multiple programming paradigms. It also performs automatic memory management.xa0\']','[]','[]','[]','[\'Presence of third-party modules|||Extensive support libraries(NumPy for numerical calculations, Pandas for data analytics etc)|||Open source and community development|||Versatile, Easy to read, learn and write|||User-friendly data structures|||High-level language|||Dynamically typed language(No need to mention data type based on the value assigned, it takes data type)|||Object-oriented language|||Portable and Interactive|||Ideal for prototypes – provide more functionality with less coding|||Highly Efficient(Python’s clean object-oriented design provides enhanced process control, and the language is equipped with excellent text processing and integration capabilities, as well as its own unit testing framework, which makes it more efficient.)|||(IoT)Internet of Things Opportunities|||Interpreted Language|||Portable across Operating systems&&&GUI based desktop applications|||Graphic design, image processing applications, Games, and Scientific/ computational Applications|||Web frameworks and applications|||Enterprise and Business applications|||Operating Systems|||Education|||Database Access|||Language Development|||Prototyping|||Software Development&&&Google(Components of Google spider and Search Engine)|||Yahoo(Maps)|||YouTube|||Mozilla|||Dropbox|||Microsoft|||Cisco|||Spotify|||Quora\']'),(2,'[\'Download and Install Python 3 Latest Version\']','[\'Python Latest Version Installation and Setup\']','[\'How to install Python on Windows?\', \'How to install Python on Linux?\', \'How to install Python on macOS / Mac OS X ?\', \'How to install Python on Android ?\', \'How to install Python on iOS (iPhone / iPad)?\', \'Online Interpreters of Python\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190926114235/How-to-install-Python-for-windows-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190926114317/how-to-install-python-for-windows-steps.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190926120522/Screenshot-130.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190926120809/Screenshot-2106.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190926121307/how-to-install-python-on-windows.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190926171029/how-to-install-python-on-linux.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190926174526/how-to-install-python-on-linux-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001121855/install-python-on-mac.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001121845/install-python-on-mac-4-.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001121848/install-python-on-mac-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001121851/install-python-on-mac-1-.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001122519/how-to-install-python-android-app.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001105624/Hw-to-install-python-on-android1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001105621/Hw-to-install-python-on-android2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001105619/Hw-to-install-python-on-android3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191001105625/How-to-install-python-on-android.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'http://python.org\', \'https://www.geeksforgeeks.org/#windows\', \'https://www.geeksforgeeks.org/#linux\', \'https://www.geeksforgeeks.org/#macos\', \'https://www.geeksforgeeks.org/#android\', \'https://www.geeksforgeeks.org/#ios-iphone-ipad\', \'https://www.geeksforgeeks.org/#online-ide\', \'https://www.python.org/downloads/windows/\', \'https://www.python.org/downloads/source/\', \'https://brew.sh/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://play.google.com/store/apps/details?id=ru.iiec.pydroid3\', \'https://play.google.com/store/apps/details?id=ru.iiec.pydroid3\', \'https://play.google.com/store/apps/details?id=ru.iiec.pydroid3\', \'http://omz-software.com/pythonista/\', \'https://apps.apple.com/in/app/pythonista-3/id1085978097?mt=8&ign-mpt=uo%3D4\', \'https://ide.geeksforgeeks.org/Fou4Yl6uPe\', \'https://ide.geeksforgeeks.org/Fou4Yl6uPe\', \'http://pythonfiddle.com/\', \'https://www.pythonanywhere.com/\', \'https://www.onlinegdb.com/online_python_compiler\', \'https://www.kaggle.com/\', \'https://jupyter.org/\', \'https://colab.research.google.com/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Let’s consider a few points:\', \'Here you can choose your OS and see the corresponding tutorial,\', \'Follow the steps below :\', \'This is Python Interpreter. I printed Hello geeks, python is working smoothly.\', \'On every linux system including following OS,\', \'To check latest version of python 2.x.x :\', \'To check latest version of python 3.x.x :\', \'To install the latest version from source code of Python follow below steps\', \'You can do all the above steps in a single command\', \'To install python simple open Terminal app from Application -> Utilitiesand enter following command\', \'Bingo..!! Python is installed on your computer. You can explore more about python here\', \'Python is installed successfully. You can check more features of this app here\', \'For expensive computations for deep learning libraries like TensorFlow, following IDEs can be used\']','[\'How to Download and Install Python 3 Latest Version? In this article, you will get the answer to all your questions related to installing Python on Windows/Linux/macOS. Python was developed by Guido van Rossum in the early 1990s and its latest version is 3.7.4, we can simply call it as Python3.\', \'To understand how to install Python You need to know What Python is and where it is actually installed in your system.\', \'In this Python tutorial of Installation and Setup, you’ll see how to install Python on Windows, macOS, Linux, iOS, and Android.\', \'Since windows don’t come with Python preinstalled, it needs to be installed explicitly. Here we will define step by step tutorial on How to install Python on Windows.\', \'You will find Python already installed. You can check it using the following command from the terminal\', \'Clearly it won’t be the latest version of python. There can be multiple methods to install python on a linux base system and it all depends on your linux system.For almost every Linux system, the following commands would work definitely.\', \'For installing Python successfully on Linux, Enter Following command to get the prerequisites and other source files\', \'Now we are all ready to unpack the file downloaded from the python official website’Move to downloads directory using cd downloads in terminaland then enter following commands\', \'Bingo..!! The latest version of Python language is installed on your Linux system. You can confirm it using the below command.\', \'Like Linux, macOS also comes with Python pre-installed on the system. It might be Python version 2 or some similar outdated version. To update to the latest version, we will use the Homebrew Package manager. It is one of the best and convenient methods to install Python on macOS.To know more about Homebrew Package manager, visit here\', \'If you don’t have homebrew installed on your system, follow the steps belowOpen the Terminal Application of macOS from Application -> Utilities. Bash terminal will open where you can enter commandsEnter following command in macOS terminal\', \'Enter the system password if prompted. This will install the Homebrew package Manager on your OS.After you see a message called “Installation Successful”. You are ready to install python version 3 on your macOS.\', \'After command processing is complete, Python’s version 3 would be installed on your mac.To verify the installation enter following commands in your Terminal app\', \'Python can run on Android through various apps from play store library.This tutorial will explain how to run python on Android using Pydroid 3 – IDE for Python 3 application.Features :\', \'Since most of the apps are paid on IOS and it doesn’t allow any interpreters officially. One can run Python from online IDEs and ide.geeksforgeeks.org.\', \'In this modern era of digital technologies, one can run Python directly from its browser without explicitly installing Python on OS.Here is a list of famous IDEs for python.\', \'These interpreters can run Python codes easily except for complex Django codes or TensorFlow libraries. To run such advanced applications, you need to install Python explicitly.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'On iOS platform, Python can be installed using various apps from app store. One of the most popular app is Pythonista. Pythonista is a complete development environment for writing Python™ scripts on your iPad or iPhone. Lots of examples are included — from games and animations to plotting, image manipulation, custom user interfaces, and automation scripts.You can download and buy Pythonista app from here\']','[]','[\'$ python --version\', \'$ python2 --version\', \'$ python3 --version\', \'$ sudo add-apt-repository ppa:deadsnakes/ppa\n$ sudo apt-get update\n$ sudo apt-get install python3.7\', \'$ wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz\', \'$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev  libncursesw5-dev xz-utils tk-dev\', \'$ tar xvf Python-3.6.5.tgz\n$ cd Python-3.6.5\n$ ./configure --enable-optimizations --with-ensurepip=install\n$ make -j 8\n$ sudo make altinstall\', \'python --version\', \'/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\', \'brew install python3\', \'python\', \'pip3\']','[]','[\'Python is a widely-used general-purpose, high-level programming language.|||Every Release of Python is open-source. Python releases have also been GPL-compatible.|||Any version of Python can be downloaded from Python Software Foundation website at python.org.|||Most of the languages, notably Linux provide a package manager through which you can directly install Python on your Operating System&&&First and foremost step is to open a browser and open https://www.python.org/downloads/windows/|||Underneath the Python Releases for Windows find Latest Python 3 Release – Python 3.7.4 (latest stable release as of now is Python 3.7.4).|||On this page move to Files and click on Windows x86-64 executable installer for 64-bit or Windows x86 executable installer for 32-bit.&&&Run the Python Installer from downloads folder|||Make sure to mark Add Python 3.7 to PATH otherwise you will have to do it explicitly.It will start installing python on windows.|||After installation is complete click on Close.Bingo..!! Python is installed. Now go to windows and type IDLE.This is Python Interpreter. I printed Hello geeks, python is working smoothly.&&&First and foremost step is to open a browser and openhttps://www.python.org/downloads/source/|||Underneath the Stable Releases find Download Gzipped source tarball (latest stable release as of now is Python 3.7.4).You can do all the above steps in a single command$ wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgzInstall Python 3.7.4 Latest Version on LinuxFor installing Python successfully on Linux, Enter Following command to get the prerequisites and other source files$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev  libncursesw5-dev xz-utils tk-dev\nNow we are all ready to unpack the file downloaded from the python official website’Move to downloads directory using cd downloads in terminaland then enter following commands$ tar xvf Python-3.6.5.tgz\n$ cd Python-3.6.5\n$ ./configure --enable-optimizations --with-ensurepip=install\n$ make -j 8\n$ sudo make altinstallBingo..!! The latest version of Python language is installed on your Linux system. You can confirm it using the below command.python --versionHow to install Python on macOS / Mac OS X ?Like Linux, macOS also comes with Python pre-installed on the system. It might be Python version 2 or some similar outdated version. To update to the latest version, we will use the Homebrew Package manager. It is one of the best and convenient methods to install Python on macOS.To know more about Homebrew Package manager, visit here|||Download and install Homebrew Package ManagerIf you don’t have homebrew installed on your system, follow the steps belowOpen the Terminal Application of macOS from Application -> Utilities. Bash terminal will open where you can enter commandsEnter following command in macOS terminal/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nEnter the system password if prompted. This will install the Homebrew package Manager on your OS.After you see a message called “Installation Successful”. You are ready to install python version 3 on your macOS.|||Install Python Latest Version on macOS / macOS XTo install python simple open Terminal app from Application -> Utilitiesand enter following commandbrew install python3After command processing is complete, Python’s version 3 would be installed on your mac.To verify the installation enter following commands in your Terminal apppythonpip3Bingo..!! Python is installed on your computer. You can explore more about python hereHow to install Python on Android ?Python can run on Android through various apps from play store library.This tutorial will explain how to run python on Android using Pydroid 3 – IDE for Python 3 application.Features :|||Offline Python 3.7 interpreter: no Internet is required to run Python programs.|||Pip package manager and a custom repository for prebuilt wheel packages for enhanced scientific libraries, such as numpy, scipy, matplotlib, scikit-learn and jupyter.|||Tensorflow is now also available.|||Examples available out-of-the-box for quicker learning.|||Complete Tkinter support for GUI.|||Full-featured Terminal Emulator, with a readline support (available in pip).Download Pydroid 3 – IDE for Python 3 app from Play store|||To install Pydroid app go to play store link here – Pydroid 3 – IDE for Python 3|||After installation is complete, run the app and it will show as installing python.|||Wait for a minute and it will show the ide. Here you can enter the Python code.|||Click on the yellow button to run the code.Python is installed successfully. You can check more features of this app hereHow to install Python on iOS (iPhone / iPad)?On iOS platform, Python can be installed using various apps from app store. One of the most popular app is Pythonista. Pythonista is a complete development environment for writing Python™ scripts on your iPad or iPhone. Lots of examples are included — from games and animations to plotting, image manipulation, custom user interfaces, and automation scripts.You can download and buy Pythonista app from hereSince most of the apps are paid on IOS and it doesn’t allow any interpreters officially. One can run Python from online IDEs and ide.geeksforgeeks.org.Online Interpreters of PythonIn this modern era of digital technologies, one can run Python directly from its browser without explicitly installing Python on OS.Here is a list of famous IDEs for python.GeeksforGeeks IDE – ide.geeksforgeeks.orgPython Fiddle: pythonfiddle.comPython Anywhere: www.pythonanywhere.comOnline gdp compiler – onlinegdb.comFor expensive computations for deep learning libraries like TensorFlow, following IDEs can be usedkaggle – kaggle.comJuPyter/IPython Notebook – jupyter.orgGoogle Colab – colab.research.google.comThese interpreters can run Python codes easily except for complex Django codes or TensorFlow libraries. To run such advanced applications, you need to install Python explicitly.Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level CourseMy Personal Notes\narrow_drop_upSave|||GeeksforGeeks IDE – ide.geeksforgeeks.org|||Python Fiddle: pythonfiddle.com|||Python Anywhere: www.pythonanywhere.com|||Online gdp compiler – onlinegdb.com|||kaggle – kaggle.com|||JuPyter/IPython Notebook – jupyter.org|||Google Colab – colab.research.google.com&&&GeeksforGeeks IDE – ide.geeksforgeeks.org|||Python Fiddle: pythonfiddle.com|||Python Anywhere: www.pythonanywhere.com|||Online gdp compiler – onlinegdb.com&&&kaggle – kaggle.com|||JuPyter/IPython Notebook – jupyter.org|||Google Colab – colab.research.google.com\']'),(3,'[\'Python 3 basics\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Python_console.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-from-2017-07-20-18-47-54.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-tutorial-learn-python-3-with-examples/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://www.geeksforgeeks.org/python-language-introduction/\', \'https://www.python.org/downloads/windows/\', \'https://www.geeksforgeeks.org/python-set-2-variables-expressions-conditions-and-functions/\', \'https://www.geeksforgeeks.org/python-set-3-strings-lists-tuples-iterations/\', \'https://www.geeksforgeeks.org/python-set-4-dictionary-keywords-python/\', \'https://www.geeksforgeeks.org/python-set-3-strings-lists-tuples-iterations/\', \'https://www.geeksforgeeks.org/loops-and-loop-control-statements-continue-break-and-pass-in-python/\', \'https://www.geeksforgeeks.org/python/#Modules in Python\', \'https://www.geeksforgeeks.org/python/#Modules in Python\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Introduction and Setup\', \'It will look somehow this :\', \'The ” >>> ” represents the python shell and its ready to take python commands and code.\', \'Variables and Data Structures\', \'Input and Output\', \'Selection in Python is made using the two keywords ‘if’ and ‘elif’ and else (elseif)\', \'Iteration (Looping)\']','[\'Python was developed by Guido van Rossum in the early 1990s and its latest version is 3.7.1, we can simply call it as Python3. Python 3.0 was released in 2008. and is interpreted language i.e it’s not compiled and the interpreter will check the code line by line. This article can used to learn very basics of Python programming language.\', \'So before moving on further.. let’s do the most popular ‘HelloWorld’ tradition ? and hence compare Python’s Syntax with C, C++, Java ( I have taken these 3 because they are most famous and mostly used languages).\', \'Note: Please note that Python for its scope doesn’t depend on the braces ( { } ), instead it uses indentation for its scope.Now moving on further Lets start our basics of Python . I will be covering the basics in some small sections. Just go through them and trust me you’ll learn the basics of Python very easily.\', \'In other programming languages like C, C++, and Java, you will need to declare the type of variables but in Python you don’t need to do that. Just type in the variable and when values will be given to it, then it will automatically know whether the value given would be an int, float, or char or even a String.\', \'See, how simple is it, just create a variable and assign it any value you want and then use the print function to print it. Python have 4 types of built in Data Structures namely List, Dictionary, Tuple and Set.\', \'List is the most basic Data Structure in python. List is a mutable data structure i.e items can be added to list later after the list creation. It’s like you are going to shop at the local market and made a list of some items and later on you can add more and more items to the list.append() function is used to add data to the list.\', \'In this section, we will learn how to take input from the user and hence manipulate it or simply display it. input() function is used to take input from the user.\', \'You can think of functions like a bunch of code that is intended to do a particular task in the whole Python script. Python used the keyword ‘def’ to define a function.Syntax:\', \'Now as we know any program starts from a ‘main’ function…lets create a main function like in many other programming languages.\', \'As the name suggests it calls repeating things again and again. We will use the most popular ‘for’ loop here.\', \'Python has a very rich module library that has several functions to do many tasks. You can read more about Python’s standard library by Clicking here‘import’ keyword is used to import a particular module into your python code. For instance consider the following program.\', \'These are some of the most basics of the Python programming language and I will be covering both the intermediate and advanced level Python topics in my upcoming articles.\', \'This article is contributed by Harsh Wardhan Chaudhary. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Your article will be reviewed first by Geeks for Geeks team before publishing.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'# Python code for \"Hello World\"# nothing else to type...see how simple is the syntax.  print(\"Hello World\")\', \'# Python program to declare variablesmyNumber = 3print(myNumber)  myNumber2 = 4.5print(myNumber2)  myNumber =\"helloworld\"print(myNumber)\', \'# Python program to illustrate a list   # creates a empty listnums = []   # appending data in listnums.append(21)nums.append(40.5)nums.append(\"String\")  print(nums)\', \'# Python program to illustrate# getting input from username = input(\"Enter your name: \")   # user entered the name \'harssh\'print(\"hello\", name)\', \'# Python3 program to get input from user  # accepting integer from the user# the return type of input() function is string ,# so we need to convert the input to integernum1 = int(input(\"Enter num1: \"))num2 = int(input(\"Enter num2: \"))  num3 = num1 * num2print(\"Product is: \", num3)\', \'# Python program to illustrate# selection statement  num1 = 34if(num1>12):    print(\"Num1 is good\")elif(num1>35):    print(\"Num2 is not gooooo....\")else:    print(\"Num2 is great\")\', \'# Python program to illustrate# functionsdef hello():    print(\"hello\")    print(\"hello again\")hello()  # calling functionhello()\', \'# Python program to illustrate # function with maindef getInteger():    result = int(input(\"Enter integer: \"))    return result  def Main():    print(\"Started\")      # calling the getInteger function and     # storing its returned value in the output variable    output = getInteger()         print(output)  # now we are required to tell Python # for \'Main\' function existenceif __name__==\"__main__\":    Main()\', \'# Python program to illustrate# a simple for loop  for step in range(5):        print(step)\', \'# Python program to illustrate# math moduleimport math  def Main():    num = -85      # fabs is used to get the absolute     # value of a decimal    num = math.fabs(num)     print(num)            if __name__==\"__main__\":    Main()\']','[\'3\n4.5\nhelloworld\', \'[21, 40.5, String]\', \'# is used for single line comment in Python\n\"\"\" this is a comment \"\"\" is used for multi line comments\', \'hello harssh\', \"Enter num1: 8 Enter num2: 6 (\'Product is: \', 48)\", \'Num1 is good\', \'def function-name(arguments):\n            #function body\', \'hello\nhello again\nhello\nhello again\', \'Started\nEnter integer: 5\', \'0\n1\n2\n3\n4\', \'85.0\']','[]','[\'If you are on Windows OS download Python by Clicking here and now install from the setup and in the start menu type IDLE.IDLE, you can think it as an Python’s IDE to run the Python Scripts.It will look somehow this :|||If you are on Linux/Unix-like just open the terminal and on 99% linux OS Python comes preinstalled with the OS.Just type ‘python3’ in terminal and you are ready to go.It will look like this :The ” >>> ” represents the python shell and its ready to take python commands and code.Variables and Data StructuresIn other programming languages like C, C++, and Java, you will need to declare the type of variables but in Python you don’t need to do that. Just type in the variable and when values will be given to it, then it will automatically know whether the value given would be an int, float, or char or even a String.# Python program to declare variablesmyNumber = 3print(myNumber)myNumber2 = 4.5print(myNumber2)myNumber =\"helloworld\"print(myNumber)Output:3\n4.5\nhelloworld\nSee, how simple is it, just create a variable and assign it any value you want and then use the print function to print it. Python have 4 types of built in Data Structures namely List, Dictionary, Tuple and Set.List is the most basic Data Structure in python. List is a mutable data structure i.e items can be added to list later after the list creation. It’s like you are going to shop at the local market and made a list of some items and later on you can add more and more items to the list.append() function is used to add data to the list.# Python program to illustrate a list# creates a empty listnums = []# appending data in listnums.append(21)nums.append(40.5)nums.append(\"String\")print(nums)Output:[21, 40.5, String]Comments:# is used for single line comment in Python\n\"\"\" this is a comment \"\"\" is used for multi line commentsInput and Output\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        In this section, we will learn how to take input from the user and hence manipulate it or simply display it. input() function is used to take input from the user.# Python program to illustrate# getting input from username = input(\"Enter your name: \")# user entered the name \'harssh\'print(\"hello\", name)Output:hello harssh   # Python3 program to get input from user# accepting integer from the user# the return type of input() function is string ,# so we need to convert the input to integernum1 = int(input(\"Enter num1: \"))num2 = int(input(\"Enter num2: \"))num3 = num1 * num2print(\"Product is: \", num3)Output:Enter num1: 8 Enter num2: 6 (\'Product is: \', 48)\nSelectionSelection in Python is made using the two keywords ‘if’ and ‘elif’ and else (elseif)# Python program to illustrate# selection statementnum1 = 34if(num1>12):print(\"Num1 is good\")elif(num1>35):print(\"Num2 is not gooooo....\")else:print(\"Num2 is great\")Output:Num1 is goodFunctionsYou can think of functions like a bunch of code that is intended to do a particular task in the whole Python script. Python used the keyword ‘def’ to define a function.Syntax:def function-name(arguments):\n            #function body# Python program to illustrate# functionsdef hello():print(\"hello\")print(\"hello again\")hello()# calling functionhello()Output:hello\nhello again\nhello\nhello again\nNow as we know any program starts from a ‘main’ function…lets create a main function like in many other programming languages.\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        # Python program to illustrate# function with maindef getInteger():result = int(input(\"Enter integer: \"))return resultdef Main():print(\"Started\")# calling the getInteger function and# storing its returned value in the output variableoutput = getInteger()print(output)# now we are required to tell Python# for \'Main\' function existenceif __name__==\"__main__\":Main()Output:Started\nEnter integer: 5\nIteration (Looping)As the name suggests it calls repeating things again and again. We will use the most popular ‘for’ loop here.# Python program to illustrate# a simple for loopfor step in range(5):print(step)Output:0\n1\n2\n3\n4\nModulesPython has a very rich module library that has several functions to do many tasks. You can read more about Python’s standard library by Clicking here‘import’ keyword is used to import a particular module into your python code. For instance consider the following program.# Python program to illustrate# math moduleimport mathdef Main():num = -85# fabs is used to get the absolute# value of a decimalnum = math.fabs(num)print(num)if __name__==\"__main__\":Main()Output:85.0These are some of the most basics of the Python programming language and I will be covering both the intermediate and advanced level Python topics in my upcoming articles.This article is contributed by Harsh Wardhan Chaudhary. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Your article will be reviewed first by Geeks for Geeks team before publishing.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave\']'),(4,'[\'Python Keywords\']','[\'List of all keywords in Python\', \'Python3\', \'True, False, None\', \'Python3\', \'and, or, not, in, is\', \'Python\', \'Iteration Keywords – for, while, break, continue\', \'Python3\', \'Conditional keywords – if, else, elif\', \'Python3\', \'def\', \'Python3\', \'Return Keywords – Return, Yield\', \'Python3\', \'class\', \'Python3\', \'With\', \'Python3\', \'as\', \'Python3\', \'pass\', \'Python3\', \'Lambda\', \'Python3\', \'Import, From\', \'Python3\', \'Exception Handling Keywords – try, except, raise, finally, and assert\', \'Python3\', \'del\', \'Python3\', \'Global, Nonlocal\', \'Python3\']','[\'Example: Python Keywords Listxa0\', \'Example: True, False, and None Keyword\', \'Example: and, or, not, is and in keyword\', \'Example: For, while, break, continue keyword\', \'Example: if, else, and elif keyword\', \'Example: def keyword\', \'Example: Return and Yield Keyword\', \'Example: Class Keyword\', \'Example: With Keyword\', \'Example: as Keyword\', \'Example: Pass Keyword\', \'Example: Lambda Keyword\', \'Example: Import, From Keyword\', \'Example: try, except, raise, finally, and assert Keywords\', \'Example: del Keyword\', \'Example: Global and nonlocal keywords\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/and1-249x300.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/or1-250x300.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/check-string-valid-keyword-python/\', \'https://www.geeksforgeeks.org/python-assert-keyword/\', \'https://www.geeksforgeeks.org/python-break-statement/\', \'https://www.geeksforgeeks.org/python-classes-and-objects/\', \'https://www.geeksforgeeks.org/python-continue-statement/\', \'https://www.geeksforgeeks.org/python-del-to-delete-objects/\', \'https://www.geeksforgeeks.org/python-try-except/\', \'https://www.geeksforgeeks.org/finally-keyword-in-python/\', \'https://www.geeksforgeeks.org/python-for-loops/\', \'https://www.geeksforgeeks.org/global-keyword-in-python/\', \'https://www.geeksforgeeks.org/import-module-python/\', \'https://www.geeksforgeeks.org/python-lambda/\', \'https://www.geeksforgeeks.org/python-pass-statement/\', \'https://www.geeksforgeeks.org/python-return-statement/\', \'https://www.geeksforgeeks.org/python-try-except/\', \'https://www.geeksforgeeks.org/python-while-loop/\', \'https://www.geeksforgeeks.org/with-statement-in-python/\', \'https://www.geeksforgeeks.org/python-yield-keyword/\', \'https://docs.python.org/3/reference/expressions.html#boolean-operations\', \'https://www.geeksforgeeks.org/python-for-loops/\', \'https://www.geeksforgeeks.org/python-while-loop/\', \'https://www.geeksforgeeks.org/python-break-statement/\', \'https://www.geeksforgeeks.org/python-continue-statement/\', \'https://www.geeksforgeeks.org/python-if-else/\', \'https://www.geeksforgeeks.org/python-return-statement/\', \'https://www.geeksforgeeks.org/python-yield-keyword/\', \'https://www.geeksforgeeks.org/python-classes-and-objects/\', \'https://www.geeksforgeeks.org/python-classes-and-objects/\', \'https://www.geeksforgeeks.org/with-statement-in-python/\', \'https://www.geeksforgeeks.org/python-pass-statement/\', \'https://www.geeksforgeeks.org/python-lambda/\', \'https://www.geeksforgeeks.org/import-module-python/\', \'https://www.geeksforgeeks.org/python-try-except/\', \'https://www.geeksforgeeks.org/python-try-except/\', \'https://www.geeksforgeeks.org/finally-keyword-in-python/\', \'https://www.geeksforgeeks.org/python-assert-keyword/\', \'https://www.geeksforgeeks.org/python-exception-handling/\', \'https://www.geeksforgeeks.org/python-del-to-delete-objects/\', \'https://www.geeksforgeeks.org/global-keyword-in-python/\', \'https://www.geeksforgeeks.org/global-local-variables-python/\', \'https://www.facebook.com/manjeet.04.singh\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Python Keywords: Introduction\', \'We can also get all the keyword names using the below code.\', \'The list of keywords is :xa0\', \'Let’s discuss each keyword in detail with the help of good examples.\', \'3 and 0 returns 0xa0\', \'3 and 10 returns 10xa0\', \'10 or 20 or 30 or 10 or 70 returns 10xa0\', \'3 or 0 returns 3xa0\', \'3 or 10 returns 3xa0\', \'0 or 0 or 3 or 10 or 0 returns 3xa0\', \'Note: For more information, refer to out Python if else Tutorial.\', \'def keyword is used to declare user defined functions.\', \'class keyword is used to declare user defined classes.\', \'Note: For more information, refer to our Python Classes and Objects Tutorial .\', \'Lambda keyword is used to make inline returning functions with no statements allowed internally.xa0\', \'Note: For more information refer to our tutorial Exception Handling Tutorial in Python.\', \'Note: For more information, refer to our Global and local variables tutorial in Python.\']','[\'Keywords in Python are reserved words that can not be used as a variable name, function name, or any other identifier.\', \'[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]\', \'The above statements might be a bit confusing to a programmer coming from a language like C where the logical operators always return boolean values(0 or 1). Following lines are straight from the python docs explaining this:\', \'The expression x and y first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.\', \'The expression x or y first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.\', \'with keyword is used to wrap the execution of block of code within methods defined by context manager. This keyword is not used much in day to day programming.\', \'as keyword is used to create the alias for the module imported. i.e giving a new name to the imported module. E.g import math as mymath.\', \'pass is the null statement in python. Nothing happens when this is encountered. This is used to prevent indentation errors and used as a placeholder.\', \'del is used to delete a reference to an object. Any variable or list value can be deleted using del.\']','[\'Note that neither and nor or restrict the value and type they return to False and True, but rather return the last evaluated argument. This is sometimes useful, e.g., if s is a string that should be replaced by a default value if it is empty, the expression s or ‘foo’ yields the desired value. Because not has to create a new value, it returns a boolean value regardless of the type of its argument (for example, not ‘foo’ produces False rather than ”.)\', \'This article is contributed by Manjeet Singh(S. Nandini). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\'# Python code to demonstrate working of iskeyword()  # importing \"keyword\" for keyword operationsimport keyword  # printing all keywords at once using \"kwlist()\"print(\"The list of keywords is : \")print(keyword.kwlist)\', \'print(False == 0)print(True == 1)  print(True + True + True)print(True + False + False)  print(None == 0)print(None == [])\', \'# showing logical operation# or (returns True)print(True or False)  # showing logical operation# and (returns False)print(False and True)  # showing logical operation# not (returns False)print(not True)  # using \"in\" to checkif \'s\' in \'geeksforgeeks\':    print(\"s is part of geeksforgeeks\")else:    print(\"s is not part of geeksforgeeks\")  # using \"in\" to loop throughfor i in \'geeksforgeeks\':    print(i, end=\" \")  print(\"\\r\")  # using is to check object identity# string is immutable( cannot be changed once allocated)# hence occupy same memory locationprint(\' \' is \' \')  # using is to check object identity# dictionary is mutable( can be changed once allocated)# hence occupy different memory locationprint({} is {})\', \'# Using for loopfor i in range(10):      print(i, end = \" \")          # break the loop as soon it sees 6    if i == 6:        break      print()      # loop from 1 to 10i = 0while i <10:          # If i is equals to 6,    # continue to next iteration    # without printing    if i == 6:        i+= 1        continue    else:        # otherwise print the value        # of i        print(i, end = \" \")              i += 1\', \'# Python program to illustrate if-elif-else ladder#!/usr/bin/python  i = 20if (i == 10):    print (\"i is 10\")elif (i == 20):    print (\"i is 20\")else:    print (\"i is not present\")\', \'# def keyworddef fun():    print(\"Inside Function\")      fun()\', \'# Return keyworddef fun():    S = 0          for i in range(10):        S += i    return S  print(fun())  # Yield Keyworddef fun():    S = 0          for i in range(10):        S += i        yield S  for i in fun():    print(i)\', \'# Python3 program to# demonstrate instantiating# a class    class Dog:          # A simple class    # attribute    attr1 = \"mammal\"    attr2 = \"dog\"      # A sample method    def fun(self):        print(\"I\'m a\", self.attr1)        print(\"I\'m a\", self.attr2)  # Driver code# Object instantiationRodger = Dog()  # Accessing class attributes# and method through objectsprint(Rodger.attr1)Rodger.fun()\', \"# using with statementwith open(\'file_path\', \'w\') as file:    file.write(\'hello world !\')\", \'import math as gfg  print(gfg.factorial(5))\', \'n = 10for i in range(n):      # pass can be used as placeholder# when code is to added laterpass\', \'# Lambda keywordg = lambda x: x*x*x  print(g(7))\', \'# import keywordimport mathprint(math.factorial(10))  # from keywordfrom math import factorialprint(factorial(10))\', \'# initializing numbera = 4b = 0  # No exception Exception raised in try blocktry:    k = a//b # raises divide by zero exception.    print(k)  # handles zerodivision exceptionexcept ZeroDivisionError:    print(\"Can\'t divide by zero\")  finally:    # this block is always executed    # regardless of exception generation.    print(\'This is always executed\')  # assert Keyword  # using assert to check for 0print (\"The value of a / b is : \")assert b != 0, \"Divide by 0 error\"print (a / b)\', \'my_variable1 = 20my_variable2 = \"GeeksForGeeks\"  # check if my_variable1 and my_variable2 existsprint(my_variable1)print(my_variable2)  # delete both the variablesdel my_variable1del my_variable2  # check if my_variable1 and my_variable2 existsprint(my_variable1)print(my_variable2)\', \'# global variablea = 15b = 10  # function to perform additiondef add():    c = a + b    print(c)  # calling a functionadd()  # nonlocal keyworddef fun():    var1 = 10      def gun():        # tell python explicitly that it        # has to access var1 initialized        # in fun on line 2        # using the keyword nonlocal        nonlocal var1                  var1 = var1 + 10        print(var1)      gun()fun()\']','[\'True\nTrue\n3\n1\nFalse\nFalse\', \'True\nFalse\nFalse\ns is part of geeksforgeeks\ng e e k s f o r g e e k s \nTrue\nFalse\', \'0 1 2 3 4 5 6 \n0 1 2 3 4 5 7 8 9\', \'i is 20\', \'Inside Function\', \'45\n0\n1\n3\n6\n10\n15\n21\n28\n36\n45\', \"mammal\nI\'m a mammal\nI\'m a dog\", \'120\', \'343\', \'3628800\n3628800\', \"Can\'t divide by zero\nThis is always executed\nThe value of a / b is :\nAssertionError: Divide by 0 error\", \"20\nGeeksForGeeks\nNameError: name \'my_variable1\' is not defined\", \'25\n20\']','[\'and|||as|||assert|||break&&&class|||continue|||def|||del&&&elif|||else|||except|||False&&&finally|||for|||from|||global&&&if|||import|||in|||is&&&lambda|||None|||nonlocal|||not&&&or|||pass|||raise|||return&&&True|||try|||while|||with&&&yield|||xa0|||xa0|||xa0\']','[\'True: This keyword is used to represent a boolean true. If a statement is true, “True” is printed.|||False: This keyword is used to represent a boolean false. If a statement is false, “False” is printed.|||None: This is a special constant used to denote a null value or a void. It’s important to remember, 0, any empty container(e.g empty list) does not compute to None.It is an object of its datatype – NoneType. It is not possible to create multiple None objects and can assign them to variables.&&&and: This a logical operator in python. “and” Return the first false value. If not found return last. The truth table for “and” is depicted below.&&&or: This a logical operator in python. “or” Return the first True value.if not found return last. The truth table for “or” is depicted below.&&&not: This logical operator inverts the truth value. The truth table for “not” is depicted below.|||in: This keyword is used to check if a container contains a value. This keyword is also used to loop through the container.|||is: This keyword is used to test object identity, i.e to check if both the objects take the same memory location or not.&&&for: This keyword is used to control flow and for looping.|||while: Has a similar working like “for”, used to control flow and for looping.|||break: “break” is used to control the flow of the loop. The statement is used to break out of the loop and passes the control to the statement following immediately after loop.|||continue: “continue” is also used to control the flow of code. The keyword skips the current iteration of the loop but does not end the loop.&&&if : It is a control statement for decision making. Truth expression forces control to go in “if” statement block.|||else : It is a control statement for decision making. False expression forces control to go in “else” statement block.|||elif : It is a control statement for decision making. It is short for “else if“&&&return : This keyword is used to return from the function.|||yield : This keyword is used like return statement but is used to return a generator.&&&import : This statement is used to include a particular module into current program.|||from : Generally used with import, from is used to import particular functionality from the module imported.&&&try : This keyword is used for exception handling, used to catch the errors in the code using the keyword except. Code in “try” block is checked, if there is any type of error, except block is executed.|||except : As explained above, this works together with “try” to catch exceptions.|||finally : No matter what is result of the “try” block, block termed “finally” is always executed.|||raise: We can raise an exception explicitly with the raise keyword|||assert: This function is used for debugging purposes. Usually used to check the correctness of code. If a statement is evaluated to be true, nothing happens, but when it is false, “AssertionError” is raised. One can also print a message with the error, separated by a comma.&&&global: This keyword is used to define a variable inside the function to be of a global scope.|||non-local : This keyword works similar to the global, but rather than global, this keyword declares a variable to point to variable of outside enclosing function, in case of nested functions.\']'),(5,'[\'Namespaces and Scope in Python\']','[\'Python3\', \'Python3\', \'Python3\']','[\'What is namespace:\', \'Types of namespaces :xa0\', \'The lifetime of a namespace :xa0\', \'Scope of Objects in Python :xa0\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/types_namespace-1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Example 1:xa0\']','[\'A lifetime of a namespace depends upon the scope of objects, if the scope of an object ends, the lifetime of that namespace comes to an end. Hence, it is not possible to access the inner namespace’s objects from an outer namespace.xa0\', \'As shown in the following figure, the same object name can be present in multiple namespaces as isolation between the same name is maintained by their namespace.\', \'Scope refers to the coding region from which a particular Python object is accessible. Hence one cannot access any particular object from anywhere from the code, the accessing has to be allowed by the scope of the object.Let’s take an example to have a detailed understanding of the same:xa0xa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'A namespace is a system that has a unique name for each and every object in Python. An object might be a variable or a method. Python itself maintains a namespace in the form of a Python dictionary. Let’s go through an example, a directory-file system structure in computers. Needless to say, that one can have multiple directories having a file with the same name inside every directory. But one can get directed to the file, one wishes, just by specifying the absolute path to the file.xa0Real-time example, the role of a namespace is like a surname. One might not find a single “Alice” in the class there might be multiple “Alice” but when you particularly ask for “Alice Lee” or “Alice Clark” (with a surname), there will be only one (time being don’t think of both first name and surname are same for multiple students).On similar lines, the Python interpreter understands what exact method or variable one is trying to point to in the code, depending upon the namespace. So, the division of the word itself gives a little more information. Its Name (which means name, a unique identifier) + Space(which talks something related to scope). Here, a name might be of any Python method or variable and space depends upon the location from where is trying to access a variable or a method.xa0\', \'When Python interpreter runs solely without any user-defined modules, methods, classes, etc. Some functions like print(), id() are always present, these are built-in namespaces. When a user creates a module, a global namespace gets created, later the creation of local functions creates the local namespace. The built-in namespace encompasses the global namespace and the global namespace encompasses the local namespace.xa0\', \'But in some cases, one might be interested in updating or processing global variables only, as shown in the following example, one should mark it explicitly as global and the update or process. xa0 Note that the line “count = count +1” references the global variable and therefore uses the global variable, but compare this to the same line written “count = 1”. xa0Then the line “global count” is absolutely needed according to scope rules.\']','[\'# var1 is in the global namespacevar1 = 5def some_func():     # var2 is in the local namespace    var2 = 6    def some_inner_func():         # var3 is in the nested local        # namespace        var3 = 7\', \'# Python program processing# global variable count = 5def some_method():    global count    count = count + 1    print(count)some_method()\', \'# Python program showing# a scope of object def some_func():    print(\"Inside some_func\")    def some_inner_func():        var = 10        print(\"Inside inner function, value of var:\",var)    some_inner_func()    print(\"Try printing var from outer function: \",var)some_func()\']','[\'6\', \'Inside some_func\nInside inner function, value of var: 10\n\nTraceback (most recent call last):\n  File \"/home/1eb47bb3eac2fa36d6bfe5d349dfcb84.py\", line 8, in \n    some_func()\n  File \"/home/1eb47bb3eac2fa36d6bfe5d349dfcb84.py\", line 7, in some_func\n    print(\"Try printing var from outer function: \",var)\nNameError: name \'var\' is not defined\']','[]','[]'),(6,'[\'Statement, Indentation and Comment in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'The lines print(‘Logging on to geeksforgeeks…’) and print(‘retype the URL.’) are two separate code blocks. The two blocks of code in our example if-statement are both indented four spaces. The final print(‘All set!’) is not indented, and so it does not belong to the else-block.xa0xa0\', \'To indicate a block of code in Python, you must indent each line of the block by the same whitespace. The two lines of code in the while loop are both indented four spaces. It is required for indicating what block of code a statement belongs to. For example, j=1 and while(j<=5): is not indented, and so it is not within the while block. So, Python code structures by indentation.xa0\']','[\'Instructions written in the source code for execution are called statements. There are different types of statements in the Python programming language like Assignment statements, Conditional statements, Looping statements, etc. These all help the user to get the required output. For example, n = 50 is an assignment statement.Multi-Line Statements: Statements in Python can be extended to one or more lines using parentheses (), braces {}, square brackets [], semi-colon (;), continuation character slash (\\). When the programmer needs to do long calculations and cannot fit his statements into one line, one can make use of these characters.xa0Example :xa0xa0\', \'A block is a combination of all these statements. Block can be regarded as the grouping of statements for a specific purpose. Most of the programming languages like C, C++, Java use braces { } to define a block of code. One of the distinctive features of Python is its use of indentation to highlighting the blocks of code. Whitespace is used for indentation in Python. All statements with the same distance to the right belong to the same block of code. If a block has to be more deeply nested, it is simply indented further to the right. You can understand it better by looking at the following lines of code:xa0\', \'Python developers often make use of the comment system as, without the use of it, things can get real confusing, real fast. Comments are the useful information that the developers provide to make the reader understand the source code. It explains the logic or a part of it used in the code. Comments are usually helpful to someone maintaining or enhancing your code when you are no longer around to answer questions about it. These are often cited as a useful programming convention that does not take part in the output of the program but improves the readability of the whole program. There are two types of comments in Python:xa0Single line comments: Python single line comment starts with hashtag symbol with no white spaces (#) and lasts till the end of the line. If the comment exceeds one line then put a hashtag on the next line and continue the comment. Python’s single-line comments are proved useful for supplying short explanations for variables, function declarations, and expressions. See the following code snippet demonstrating single line comment:Code 1:xa0xa0\', \'Multi-line string as a comment: Python multi-line comment is a piece of text enclosed in a delimiter (“””) on each end of the comment. Again there should be no white space between delimiter (“””). They are useful when the comment text does not fit into one line; therefore need to span across lines. Multi-line comments or paragraphs serve as documentation for others reading your code. See the following code snippet demonstrating multi-line comment:Code 1:xa0xa0\']','[\"# Python program showing# indentation site = \'gfg\' if site == \'gfg\':    print(\'Logging on to geeksforgeeks...\')else:    print(\'retype the URL.\')print(\'All set !\')\", \'j = 1while(j<= 5):     print(j)     j = j + 1\', \'# This is a comment# Print “GeeksforGeeks !” to consoleprint(\"GeeksforGeeks\")\', \'a, b = 1, 3 # Declaring two integerssum = a + b # adding two integersprint(sum) # displaying the output\', \'\"\"\"This would be a multiline comment in Python thatspans several lines and describes geeksforgeeks.A Computer Science portal for geeks. It containswell written, well thoughtand well-explained computer scienceand programming articles,quizzes and more.…\"\"\"print(\"GeeksForGeeks\")\', \'\'\'\'This article on geeksforgeeks gives you aperfect example ofmulti-line comments\'\'\' print(\"GeeksForGeeks\")\']','[\"Declared using Continuation Character (\\):\ns = 1 + 2 + 3 + \\\n    4 + 5 + 6 + \\\n    7 + 8 + 9\n\nDeclared using parentheses () :\nn = (1 * 2 * 3 + 7 + 8 + 9)\n\nDeclared using square brackets [] :\nfootballer = [\'MESSI\',\n          \'NEYMAR\',\n          \'SUAREZ\']\n\nDeclared using braces {} :\nx = {1 + 2 + 3 + 4 + 5 + 6 +\n     7 + 8 + 9}\n\nDeclared using semicolons(;) :\nflag = 2; ropes = 3; pole = 4\", \'Logging on to geeksforgeeks...\nAll set !\', \'1\n2\n3\n4\n5\']','[]','[]'),(7,'[\'How to assign values to variables in Python and other languages\']','[\'C++\', \'C\', \'Java\', \'Python3\', \'C#\', \'Javascript\', \'C++\', \'C\', \'Java\', \'Python3\', \'C#\', \'Javascript\', \'Python3\']','[\'Method 1: Direct Initialisation Methodxa0\', \'Method 2: Using Conditional Operator (?:)\', \'One liner if-else instead of Conditional Operator (?:) in Python\']','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'This article discusses methods to assign values to variables.xa0\', \'Below is the syntax in other popular languages.\']','[]','[]','[\'// C++ code to demonstrate variable assignment// upon condition using Direct Initialisation Method #include <bits/stdc++.h>using namespace std; int main(){    // initialising variables directly    int a = 5;     // printing value of a    cout << \"The value of a is: \" << a;}\', \'// C code to demonstrate variable assignment// upon condition using Direct Initialisation Method #include <stdio.h> int main(){    // initialising variables directly    int a = 5;     // printing value of a    printf(\"The value of a is: %d\", a);}\', \'// Java code to demonstrate variable assignment// upon condition using Direct Initialisation Method import java.io.*; class GFG {    public static void main(String args[])    {         // initialising variables directly        int a = 5;         // printing value of a        System.out.println(\"The value of a is: \" + a);    }}\', \'# Python 3 code to demonstrate variable assignment# upon condition using Direct Initialisation Method # initialising variable directlya = 5 # printing value of aprint (\"The value of a is: \" + str(a))\', \'// C# code to demonstrate variable assignment// upon condition using Direct Initialisation Methodusing System;  class GFG{     public static void Main(String []args){         // Initialising variables directly    int a = 5;     // Printing value of a    Console.Write(\"The value of a is: \" + a);}}  // This code is contributed by shivanisinghss2110\', \'<script> // JavaScript code to demonstrate variable assignment// upon condition using Direct Initialisation Method        // initialising variables directly        var a = 5;         // printing value of a        document.write(\"The value of a is: \" + a);  </script>// this code is contributed by shivanisinghss2110\', \'// C++ code to demonstrate variable assignment// upon condition using Conditional Operator #include <bits/stdc++.h>using namespace std; int main(){    // initialising variables using Conditional Operator    int a = 20 > 10 ? 1 : 0;     // printing value of a    cout << \"The value of a is: \" << a;}\', \'// C code to demonstrate variable assignment// upon condition using Conditional Operator #include <stdio.h> int main(){    // initialising variables using Conditional Operator    int a = 20 > 10 ? 1 : 0;     // printing value of a    printf(\"The value of a is: %d\", a);}\', \'// Java code to demonstrate variable assignment// upon condition using Conditional Operator import java.io.*; class GFG {    public static void main(String args[])    {         // initialising variables using Conditional Operator        int a = 20 > 10 ? 1 : 0;         // printing value of a        System.out.println(\"The value of a is: \" + a);    }}\', \'# Python3 code to demonstrate variable assignment# upon condition using Conditional Operator # Initialising variables using Conditional Operatora = 1 if 20 > 10 else 0 # Printing value of aprint(\"The value of a is: \" , str(a)) # This code is contributed by shivanisinghss2110\', \'// C# code to demonstrate variable assignment// upon condition using Conditional Operator using System; class GFG {    public static void Main(String []args)    {         // initialising variables using Conditional Operator        int a = 20 > 10 ? 1 : 0;         // printing value of a        Console.Write(\"The value of a is: \" + a);    }}// this code is contributed by shivanisinghss2110\', \'<script> // JavaScript code to demonstrate variable assignment// upon condition using Conditional Operator         // initialising variables using Conditional Operator        var a = 20 > 10 ? 1 : 0;         // printing value of a        document.write(\"The value of a is: \" + a); // This code is contributed by shivanisinghss2110 </script>\', \'# Python 3 code to demonstrate variable assignment# upon condition using One liner if-else # initialising variable using Conditional Operator# a = 20 > 10 ? 1 : 0 is not possible in Python# Instead there is one liner if-elsea = 1 if 20 > 10 else 0 # printing value of aprint (\"The value of a is: \" + str(a))\']','[\'The value of a is: 5\', \'The value of a is: 1\', \'The value of a is: 1\']','[]','[]'),(8,'[\'Taking input in Python\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/input1-4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Capture4-10.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Capture5-5.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/taking-input-from-console-in-python/\', \'https://www.geeksforgeeks.org/taking-input-from-console-in-python/\', \'https://www.geeksforgeeks.org/python-get-a-list-as-input-from-user/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Output:xa0How the input function works in Python :\', \'Refer to the article Taking list as input from the user for more information.\']','[\'Developers often have a need to interact with users, either to get data or to provide some sort of result. Most programs today use a dialog box as a way of asking the user to provide some type of input. While Python provides us with two inbuilt functions to read the input from the keyboard.\', \'input ( ) : This function first takes the input from the user and then evaluates the expression, which means Python automatically identifies whether user entered a string or a number or list. If the input provided is not correct then either syntax error or exception is raised by python. For example –\', \'raw_input ( ) : This function works in older version (like Python 2.x). This function takes exactly what is typed from the keyboard, convert it to string and then return it to the variable in which we want to store. For example –\', \'Here, g is a variable which will get the string value, typed by user during the execution of program. Typing of data for the raw_input() function is terminated by enter key. We can use raw_input() to enter numeric data also. In that case we use typecasting.For more details on typecasting refer this.xa0\']','[]','[\'# Python program showing # a use of input()  val = input(\"Enter your value: \")print(val)\', \'# Program to check input # type in Python  num = input (\"Enter number :\")print(num)name1 = input(\"Enter name : \")print(name1)  # Printing type of input valueprint (\"type of number\", type(num))print (\"type of name\", type(name1))\', \'# Python program showing # a use of raw_input()  g = raw_input(\"Enter your name : \")print g\']','[]','[]','[\'input ( prompt )|||raw_input ( prompt )&&&When input() function executes program flow will be stopped until the user has given an input.|||The text or message display on the output screen to ask a user to enter input value is optional i.e. the prompt, will be printed on the screen is optional.|||Whatever you enter as input, input function convert it into a string. if you enter an integer value still input() function convert it into a string. You need to explicitly convert it into an integer in your code using typecasting.\']'),(9,'[\'Taking input from console in Python\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-7-7.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/python1-1.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The primary prompt of the python console is the three greater than symbols\']','[\'What is Console in Python? Console (also called Shell) is basically a command line interpreter that takes input from the user i.e one command at a time and interprets it. If it is error free then it runs the command and gives required output otherwise shows the error message. A Python Console looks like this.\', \'Here we write command and to execute the command just press enter key and your command will be interpreted.For coding in Python you must know the basics of the console used in Python.\', \'You are free to write the next command on the shell only when after executing the first command these prompts have appeared. The Python Console accepts command in Python which you write after the prompt.\', \'Accepting Input from ConsoleUser enters the values in the Console and that value is then used in the program as it was required.To take input from the user we make use of a built-in function input().\', \'We can also type cast this input to integer, float or string by specifying the input() function inside the type.\']','[]','[\'# inputinput1 = input()  # outputprint(input1)\', \'# inputnum1 = int(input())num2 = int(input())  # printing the sum in integerprint(num1 + num2)\', \'# inputnum1 = float(input())num2 = float(input())  # printing the sum in floatprint(num1 + num2)\', \'# inputstring = str(input())  # outputprint(string)\']','[\'>>>\']','[]','[\'Typecasting the input to Integer: There might be conditions when you might require integer input from user/Console, the following code takes two input(integer/float) from console and typecasts them to integer then prints the sum.# inputnum1 = int(input())num2 = int(input())# printing the sum in integerprint(num1 + num2)|||Typecasting the input to Float: To convert the input to float the following code will work out.# inputnum1 = float(input())num2 = float(input())# printing the sum in floatprint(num1 + num2)|||Typecasting the input to String: All kind of input can be converted to string type whether they are float or integer. We make use of keyword str for typecasting.# inputstring = str(input())# outputprint(string)\']'),(10,'[\'Taking multiple inputs from user in Python\']','[\'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Capture8-1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-string-split/\', \'https://www.geeksforgeeks.org/python-list-comprehension-and-slicing/\', \'https://ide.geeksforgeeks.org/BHf0Cxr4mx\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Example :xa0\', \'Output :xa0xa0\', \'Please see https://ide.geeksforgeeks.org/BHf0Cxr4mx for a sample run.xa0\']','[\'The developer often wants a user to enter multiple values or inputs in one line. In C++/C user can take multiple inputs in one line using scanf but in Python user can take multiple values or inputs in one line by two methods.xa0\', \'Using split() method :xa0This function helps in getting multiple inputs from users. It breaks the given input by the specified separator. If a separator is not provided then any white space is a separator. Generally, users use a split() method to split a Python string but one can use it in taking multiple inputs.\', \'Using List comprehension :xa0List comprehension is an elegant way to define and create list in Python. We can create lists just like mathematical statements in one line only. It is also used in getting multiple inputs from a user.xa0\', \'Note: The above examples take input separated by spaces. In case we wish to take input separated by comma (, ), we can use the following:xa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# Python program showing how to# multiple input using split # taking two inputs at a timex, y = input(\"Enter two values: \").split()print(\"Number of boys: \", x)print(\"Number of girls: \", y)print() # taking three inputs at a timex, y, z = input(\"Enter three values: \").split()print(\"Total number of students: \", x)print(\"Number of boys is : \", y)print(\"Number of girls is : \", z)print() # taking two inputs at a timea, b = input(\"Enter two values: \").split()print(\"First number is {} and second number is {}\".format(a, b))print() # taking multiple inputs at a time# and type casting using list() functionx = list(map(int, input(\"Enter multiple values: \").split()))print(\"List of students: \", x)\', \'# Python program showing# how to take multiple input# using List comprehension # taking two input at a timex, y = [int(x) for x in input(\"Enter two values: \").split()]print(\"First Number is: \", x)print(\"Second Number is: \", y)print() # taking three input at a timex, y, z = [int(x) for x in input(\"Enter three values: \").split()]print(\"First Number is: \", x)print(\"Second Number is: \", y)print(\"Third Number is: \", z)print() # taking two inputs at a timex, y = [int(x) for x in input(\"Enter two values: \").split()]print(\"First number is {} and second number is {}\".format(x, y))print() # taking multiple inputs at a timex = [int(x) for x in input(\"Enter multiple values: \").split()]print(\"Number of list is: \", x)\', \'# taking multiple inputs at a time separated by commax = [int(x) for x in input(\"Enter multiple value: \").split(\",\")]print(\"Number of list is: \", x)\']','[\'input().split(separator, maxsplit)\']','[]','[\'Using split() method|||Using List comprehension\']'),(11,'[\'Python | Output using print() function\']','[\'String Literals\', \'Python3\', \'end= ” ” statement\', \'Python3\', \'flush Argument\', \'Python3\', \'Python3\', \'Separator\', \'Python3\', \'file Argument\', \'Python3\', \'Python3\']','[\'Example: Python print() without new line.\', \'Example: Python print() to file\', \'Example : Using print() function in Python\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20201222161256/CommandPrompt202012221608.gif\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20201222163647/Untitled26---Jupyter-Notebook---Google-Chrome-2020-12-22-16-33-02.mp4\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Python print() function prints the message to the screen or any other standard output device.\', \'Syntax: print(value(s), sep= ‘ ‘, end = ‘\\n’, file=file, flush=flush)\', \'Parameters:xa0\', \'Returns: It returns output to the screen.\', \'The initial code for this would look something like below;\']','[\'Though it is not necessary to pass arguments in the print() function, it requires an empty parenthesis at the end that tells python to execute the function rather calling it by name. Now, let’s explore the optional arguments that can be used with the print() function.\', \'String literals in python’s print statement are primarily used to format or design how a specific string appears when printed using the print() function.\', \'The end keyword is used to specify the content that is to be printed at the end of the execution of the print() function. By default, it is set to “\\n”, which leads to the change of line after the execution of print() statement.\', \'Imagine you are building a countdown timer, which appends the remaining time to the same line every second. It would look something like below:\', \'So, the above code adds text without a trailing newline and then sleeps for one second after each text addition. At the end of the countdown, it prints Start and terminates the line. If you run the code as it is, it waits for 3 seconds and abruptly prints the entire text at once. This is a waste of 3 seconds caused due to buffering of the text chunk as shown below:\', \'Though buffering serves a purpose, it can result in undesired effects as shown above. To counter the same issue, the flush argument is used with the print() function. Now, set the flush argument as true and again see the results.\', \'The print() function can accept any number of positional arguments. These arguments can be separated from each other using a “,” separator. These are primarily used for formatting multiple statements in a single print() function.\', \'Contrary to popular belief, the print() function doesn’t convert the messages into text on the screen. These are done by lower-level layers of code, that can read data(message) in bytes. The print() function is an interface over these layers, that delegates the actual printing to a stream or file-like object. By default, the print() function is bound to sys.stdout through the file argument.xa0\']','[\'The I/Os in python are generally buffered, meaning they are used in chunks. This is where flush comes in as it helps users to decide if they need the written content to be buffered or not. By default, it is set to false. If it is set to true, the output will be written as a sequence of characters one after the other. This process is slow simply because it is easier to write in chunks rather than writing one character at a time. To understand the use case of the flush argument in the print() function, let’s take an example.\']','[\'print(\"GeeksforGeeks \\n is best for DSA Content.\")\', \'# This line will automatically add a new line before the# next print statementprint (\"GeeksForGeeks is the best platform for DSA content\") # This print() function ends with \"**\" as set in the end argument.print (\"GeeksForGeeks is the best platform for DSA content\", end= \"**\")print(\"Welcome to GFG\")\', \"import time count_seconds = 3for i in reversed(range(count_seconds + 1)):    if i > 0:        print(i, end=\'>>>\')        time.sleep(1)    else:        print(\'Start\')\", \"import time count_seconds = 3for i in reversed(range(count_seconds + 1)):    if i > 0:        print(i, end=\'>>>\', flush = True)        time.sleep(1)    else:        print(\'Start\')\", \'b = \"for\" print(\"Geeks\", b , \"Geeks\")\', \"import io # declare a dummy filedummy_file = io.StringIO() # add message to the dummy fileprint(\'Hello Geeks!!\', file=dummy_file) # get the value from dummy filedummy_file.getvalue()\", \'# Python 3.x program showing# how to print data on# a screen # One object is passedprint(\"GeeksForGeeks\") x = 5# Two objects are passedprint(\"x =\", x) # code for disabling the softspace featureprint(\'G\', \'F\', \'G\', sep=\'\') # using end argumentprint(\"Python\", end=\'@\')print(\"GeeksforGeeks\")\']','[\'GeeksforGeeks \n is best for DSA Content.\', \'GeeksForGeeks is the best platform for DSA content\nGeeksForGeeks is the best platform for DSA content**Welcome to GFG\', \'3>>>2>>>1>>>Start\', \'Geeks for Geeks\', \"\'Hello Geeks!!\\n\'\", \'GeeksForGeeks\nx = 5\nGFG\nPython@GeeksforGeeks\']','[]','[\'value(s) : Any value, and as many as you like. Will be converted to string before printed|||sep=’separator’ : (Optional) Specify how to separate the objects, if there is more than one.Default :’ ‘|||end=’end’: (Optional) Specify what to print at the end.Default : ‘\\n’|||file : (Optional) An object with a write method. Default :sys.stdout|||flush : (Optional) A Boolean, specifying if the output is flushed (True) or buffered (False). Default: False&&&\\n : This string literal is used to add a new blank line while printing a statement.|||“” : An empty quote (“”) is used to print an empty line.\']'),(12,'[\'How to print without newline in Python?\']','[\'Python3\', \'python\', \'python3\', \'Python3\']','[\'Print without newline in Python 2.x\', \'Print without newline in Python 3.x\', \'Print without newline in Python 3.x without using for loop\']','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'For example:xa0\', \'Will result in this:xa0\', \'For Example:xa0\', \'The solution discussed here is totally dependent on the python version you are using.xa0xa0\']','[\'Generally, people switching from C/C++ to Python wonder how to print two or more variables or statements without going into a new line in python. Since the python print() function by default ends with a newline. Python has a predefined format if you use print(a_variable) then it will go to the next line automatically.xa0xa0\', \'But sometimes it may happen that we don’t want to go to the next line but want to print on the same line. So what we can do?xa0xa0\']','[]','[\'print(\"geeks\")print(\"geeksforgeeks\")\', \'# Python 2 code for printing# on the same line printing# geeks and geeksforgeeks# in the same line print(\"geeks\"),print(\"geeksforgeeks\") # arraya = [1, 2, 3, 4] # printing a element in same# linefor i in range(4):    print(a[i]),\', \'# Python 3 code for printing# on the same line printing# geeks and geeksforgeeks# in the same line print(\"geeks\", end =\" \")print(\"geeksforgeeks\") # arraya = [1, 2, 3, 4] # printing a element in same# linefor i in range(4):    print(a[i], end =\" \")\', \'# Print without newline in Python 3.x without using for loop l=[1,2,3,4,5,6] # using * symbol prints the list# elements in a single lineprint(*l) #This code is contributed by anuragsingh1022\']','[\'geeks\ngeeksforgeeks\', \'Input : print(\"geeks\") print(\"geeksforgeeks\")\nOutput : geeks geeksforgeeks\n\nInput : a = [1, 2, 3, 4]\nOutput : 1 2 3 4\', \'geeks geeksforgeeks\n1 2 3 4\', \'geeks geeksforgeeks\n1 2 3 4\', \'1 2 3 4 5 6\']','[]','[]'),(13,'[\'Python end parameter in print()\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'One more program to demonstrate working of end parameter.\']','[\'By default python’s print() function ends with a newline. A programmer with C/C++ background may wonder how to print without newline.\', \'Python’s print() function comes with a parameter called ‘end’. By default, the value of this parameter is ‘\\n’, i.e. the new line character. You can end a print statement with any character/string using this parameter.\', \'This article is contributed by Ankit Bindal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\']','[]','[\'# This Python program must be run with# Python 3 as it won\'t work with 2.7.  # ends the output with a <space> print(\"Welcome to\" , end = \' \') print(\"GeeksforGeeks\", end = \' \')\', \'# This Python program must be run with# Python 3 as it won\'t work with 2.7.  # ends the output with \'@\'print(\"Python\" , end = \'@\') print(\"GeeksforGeeks\")\']','[\'Welcome to GeeksforGeeks\', \'Python@GeeksforGeeks\']','[]','[]'),(14,'[\'Python | sep parameter in print()\']','[\'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/gfact-50-python-end-parameter-in-print/\', \'https://www.geeksforgeeks.org/gfact-50-python-end-parameter-in-print/\', \'https://www.facebook.com/Pratik.Agarwal01\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'The separator between the arguments to print() function in Python is space by default (softspace feature) , which can be modified and can be made to any character, integer or string as per our choice. The ‘sep’ parameter is used to achieve the same, it is found only in python 3.x or later. It is also used for formatting the output strings.xa0\', \'The sep parameter when used with the end parameter it produces awesome results. Some examples by combining the sep and end parameters.xa0\', \'Note: Please change the language from Python to Python 3 in the online ide.xa0Go to your interactive python ide by typing python in your cmd ( windows ) or terminal ( linux )xa0\']','[\'This article is contributed by Pratik Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\"#code for disabling the softspace featureprint(\'G\',\'F\',\'G\', sep=\'\') #for formatting a dateprint(\'09\',\'12\',\'2016\', sep=\'-\') #another exampleprint(\'pratik\',\'geeksforgeeks\', sep=\'@\')\", \"print(\'G\',\'F\', sep=\'\', end=\'\')print(\'G\')#\\n provides new line after printing the yearprint(\'09\',\'12\',\'2016\', sep=\'-\', end=\'\\n\') print(\'prtk\',\'agarwal\', sep=\'\', end=\'@\')print(\'geeksforgeeks\')\", \'#import the below module and see what happensimport antigravity#NOTE - it wont work on online ide\']','[\'GFG\n09-12-2016\npratik@geeksforgeeks\', \'GFG\n09-12-2016\nprtkagarwal@geeksforgeeks\']','[]','[]'),(15,'[\'Python | Output Formatting\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/formatedOutput-min-1-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/formatedOutput2-min-1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/\', \'https://www.geeksforgeeks.org/python-format-function/\', \'https://www.geeksforgeeks.org/python-format-function/\', \'https://www.geeksforgeeks.org/python-string-ljust-rjust-center/\', \'https://www.geeksforgeeks.org/python-string-ljust-rjust-center/\', \'https://www.geeksforgeeks.org/python-string-ljust-rjust-center/\', \'https://www.geeksforgeeks.org/python-string-ljust-rjust-center/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Let’s take a look at the placeholders in our example.xa0xa0\', \'xa0xa0Code 3:xa0\']','[\'There are several ways to present the output of a program, data can be printed in a human-readable form, or written to a file for future use, or even in some other specified form. Sometimes user often wants more control over the formatting of output than simply printing space-separated values. There are several ways to format output.xa0\', \'The string modulo operator ( % ) is still available in Python(3.x) and the user is using it widely. But nowadays the old style of formatting is removed from the language.xa0\', \'There are two of those in our example: “%2d” and “%5.2f”. The general syntax for a format placeholder is:xa0\', \'The brackets and characters within them (called format fields) are replaced with the objects passed into the format() method. A number in the brackets can be used to refer to the position of the object passed into the format() method.xa0xa0xa0Code 2:xa0\', \'The following diagram with an example usage depicts how the format method works for positional parameters:xa0\', \'Formatting output using the String method :xa0This output is formatted by using string slicing and concatenation operations. The string type has some methods that help in formatting output in a fancier way. Some of method which help in formatting a output are str.rjust(), str.rjust(), str.centre()\']','[\'Formatting output using String modulo operator(%) :xa0The % operator can also be used for string formatting. It interprets the left argument much like a printf()-style format as in C language string to be applied to the right argument. In Python, there is no printf() function but the functionality of the ancient printf is contained in Python. To this purpose, the modulo operator % is overloaded by the string class to perform string formatting. Therefore, it is often called a string modulo (or sometimes even called modulus) operator.xa0\', \'Formatting output using the format method :xa0The format() method was added in Python(2.6). The format method of strings requires more manual effort. Users use {} to mark where a variable will be substituted and can provide detailed formatting directives, but the user also needs to provide the information to be formatted. This method lets us concatenate elements within an output through positional formatting. For Example –xa0\']','[\'# Python program showing how to use# string modulo operator(%) to print# fancier output # print integer and float valueprint(\"Geeks : %2d, Portal : %5.2f\" % (1, 05.333)) # print integer valueprint(\"Total students : %3d, Boys : %2d\" % (240, 120)) # print octal valueprint(\"%7.3o\" % (25)) # print exponential valueprint(\"%10.3E\" % (356.08977))\', \'# Python program showing# use of format() method # using format() methodprint(\'I love {} for \"{}!\"\'.format(\'Geeks\', \'Geeks\')) # using format() method and referring# a position of the objectprint(\'{0} and {1}\'.format(\'Geeks\', \'Portal\')) print(\'{1} and {0}\'.format(\'Geeks\', \'Portal\'))  # the above formatting can also be done by using f-Strings# Although, this features work only with python 3.6 or above. print(f\"I love {\'Geeks\'} for \\\"{\'Geeks\'}!\\\"\") # using format() method and referring# a position of the objectprint(f\"{\'Geeks\'} and {\'Portal\'}\")\', \'# Python program showing# a use of format() method # combining positional and keyword argumentsprint(\'Number one portal is {0}, {1}, and {other}.\'     .format(\'Geeks\', \'For\', other =\'Geeks\')) # using format() method with numberprint(\"Geeks :{0:2d}, Portal :{1:8.2f}\".      format(12, 00.546)) # Changing positional argumentprint(\"Second argument: {1:3d}, first one: {0:7.2f}\".      format(47.42, 11)) print(\"Geeks: {a:5d},  Portal: {p:8.2f}\".     format(a = 453, p = 59.058))\', \'# Python program to# show format () is# used in dictionary tab = {\'geeks\': 4127, \'for\': 4098, \'geek\': 8637678} # using format() in dictionaryprint(\'Geeks: {0[geeks]:d}; For: {0[for]:d}; \'    \'Geeks: {0[geek]:d}\'.format(tab)) data = dict(fun =\"GeeksForGeeks\", adj =\"Portal\") # using format() in dictionaryprint(\"I love {fun} computer {adj}\".format(**data))\', \'# Python program to# format a output using# string() method cstr = \"I love geeksforgeeks\"   # Printing the center aligned # string with fillchrprint (\"Center aligned string with fillchr: \")print (cstr.center(40, \'#\')) # Printing the left aligned # string with \"-\" padding print (\"The left aligned string is : \")print (cstr.ljust(40, \'-\')) # Printing the right aligned string# with \"-\" padding print (\"The right aligned string is : \")print (cstr.rjust(40, \'-\'))\']','[\'Geeks :  1, Portal : 5.33\nTotal students : 240, Boys : 120\n031\n3.561E+02\', \'%[flags][width][.precision]type\', \'I love Geeks for \"Geeks!\"\nGeeks and Portal\nPortal and Geeks\', \'Number one portal is Geeks, For, and Geeks.\nGeeks :12, Portal :    0.55\nSecond argument:  11, first one:   47.42\nGeeks:   453, Portal:    59.06\', \'Geeks: 4127; For: 4098; Geeks: 8637678\nI love GeeksForGeeks computer Portal\', \'Center aligned string with fillchr: \n##########I love geeksforgeeks##########\n\nThe left aligned string is : \nI love geeksforgeeks--------------------\n\nThe right aligned string is : \n--------------------I love geeksforgeeks\']','[]','[\'To use formatted string literals, begin a string with for F before the opening quotation mark or triple quotation mark.|||The str. format() method of strings help a user to get a fancier Output|||Users can do all the string handling by using string slicing and concatenation operations to create any layout that the user wants. The string type has some methods that perform useful operations for padding strings to given column width.&&&The first placeholder “%2d” is used for the first component of our tuple, i.e. the integer 1. The number will be printed with 2 characters. As 1 consists only of one digit, the output is padded with 1 leading blanks.|||The second one “%5.2f” is a format description for a float number. Like other placeholders, it is introduced with the % character. This is followed by the total number of digits the string should contain. This number includes the decimal point and all the digits, i.e. before and after the decimal point.|||Our float number 05.333 has to be formatted with 5 characters. The decimal part of the number or the precision is set to 2, i.e. the number following the “.” in our placeholder. Finally, the last character “f” of our placeholder stands for “float”.\']'),(16,'[\'Python Operators\']','[\'Arithmetic Operators\', \'Python3\', \'Comparison Operators\', \'Python3\', \'Logical Operators\', \'Python3\', \'Bitwise Operators\', \'Python3\', \'Assignment Operatorsxa0\', \'Python3\', \'Identity Operators\', \'Python3\', \'Membership Operators\', \'Python3\', \'Precedence and Associativity of Operators\', \'Python3\', \'Python3\', \'Quiz on Python Operators\']','[\'Example: Arithmetic operators in Python\', \'Example: Comparison Operators in Python\', \'Example: Logical Operators in Python\', \'Example: Bitwise Operators in Python\', \'Example: Assignment Operators in Python\', \'Example: Identity Operator\', \'Example: Membership Operator\', \'Operator Precedence\', \'Example: Operator Precedence\', \'Operator Associativity\', \'Example: Operator Associativity\']','[]','[\'https://www.youtube.com/embed/oiJUZbRIR7Y?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-arithmetic-operators/\', \'https://www.geeksforgeeks.org/benefits-of-double-division-operator-over-single-division-operator-in-python/\', \'https://www.geeksforgeeks.org/relational-operators-in-python/\', \'https://www.geeksforgeeks.org/relational-operators-in-python/\', \'https://www.geeksforgeeks.org/python-logical-operators-with-examples-improvement-needed/\', \'https://www.geeksforgeeks.org/python-bitwise-operators/\', \'https://www.geeksforgeeks.org/assignment-operators-in-python/\', \'https://www.geeksforgeeks.org/python-membership-identity-operators-not-not/\', \'https://www.geeksforgeeks.org/python-operators/\', \'https://www.geeksforgeeks.org/operators-gq/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: Refer to Differences between / and // for some interesting facts about these two operators.\', \'Assignment operators are used to assigning values to the variables.\']','[\'Python Operators in general are used to perform operations on values and variables. These are standard symbols used for the purpose of logical and arithmetic operations. In this article, we will look into different types of Python operators.xa0\', \'Arithmetic operators are used to performing mathematical operations like addition, subtraction, multiplication, and division.\', \'Comparison of Relational operators compares the values. It either returns True or False according to the condition.\', \'Logical operators perform Logical AND, Logical OR, and Logical NOT operations. It is used to combine conditional statements.\', \'Bitwise operators act on bits and perform the bit-by-bit operations. These are used to operate on binary numbers.\', \'is and is not are the identity operators both are used to check if two values are located on the same part of the memory. Two variables that are equal do not imply that they are identical.xa0\', \'in and not in are the membership operators; used to test whether a value or variable is in a sequence.\', \'Precedence and Associativity of Operators: Operator precedence and associativity determine the priorities of the operator.\', \'This is used in an expression with more than one operator with different precedence to determine which operation to perform first.\', \'If an expression contains two or more operators with the same precedence then Operator Associativity is used to determine. It can either be Left to Right or from Right to Left.\']','[]','[\'# Examples of Arithmetic Operatora = 9b = 4 # Addition of numbersadd = a + b # Subtraction of numberssub = a - b # Multiplication of numbermul = a * b # Division(float) of numberdiv1 = a / b # Division(floor) of numberdiv2 = a // b # Modulo of both numbermod = a % b # Powerp = a ** b # print resultsprint(add)print(sub)print(mul)print(div1)print(div2)print(mod)print(p)\', \'# Examples of Relational Operatorsa = 13b = 33 # a > b is Falseprint(a > b) # a < b is Trueprint(a < b) # a == b is Falseprint(a == b) # a != b is Trueprint(a != b) # a >= b is Falseprint(a >= b) # a <= b is Trueprint(a <= b)\', \'# Examples of Logical Operatora = Trueb = False # Print a and b is Falseprint(a and b) # Print a or b is Trueprint(a or b) # Print not a is Falseprint(not a)\', \'# Examples of Bitwise operatorsa = 10b = 4 # Print bitwise AND operationprint(a & b) # Print bitwise OR operationprint(a | b) # Print bitwise NOT operationprint(~a) # print bitwise XOR operationprint(a ^ b) # print bitwise right shift operationprint(a >> 2) # print bitwise left shift operationprint(a << 2)\', \'# Examples of Assignment Operatorsa = 10 # Assign valueb = aprint(b) # Add and assign valueb += aprint(b) # Subtract and assign valueb -= aprint(b) # multiply and assignb *= aprint(b) # bitwise lishift operatorb <<= aprint(b)\', \'a = 10b = 20c = a print(a is not b)print(a is c)\', \'# Python program to illustrate# not \'in\' operatorx = 24y = 20list = [10, 20, 30, 40, 50] if (x not in list):    print(\"x is NOT present in given list\")else:    print(\"x is present in given list\") if (y in list):    print(\"y is present in given list\")else:    print(\"y is NOT present in given list\")\', \'# Examples of Operator Precedence # Precedence of \'+\' & \'*\'expr = 10 + 20 * 30print(expr) # Precedence of \'or\' & \'and\'name = \"Alex\"age = 0 if name == \"Alex\" or name == \"John\" and age >= 2:    print(\"Hello! Welcome.\")else:    print(\"Good Bye!!\")\', \'# Examples of Operator Associativity # Left-right associativity# 100 / 10 * 10 is calculated as# (100 / 10) * 10 and not# as 100 / (10 * 10)print(100 / 10 * 10) # Left-right associativity# 5 - 2 + 3 is calculated as# (5 - 2) + 3 and not# as 5 - (2 + 3)print(5 - 2 + 3) # left-right associativityprint(5 - (2 + 3)) # right-left associativity# 2 ** 3 ** 2 is calculated as# 2 ** (3 ** 2) and not# as (2 ** 3) ** 2print(2 ** 3 ** 2)\']','[\'13\n5\n36\n2.25\n2\n1\n6561\', \'False\nTrue\nFalse\nTrue\nFalse\nTrue\', \'False\nTrue\nFalse\', \'0\n14\n-11\n14\n2\n40\', \'10\n20\n10\n100\n102400\', \'is          True if the operands are identical \nis not      True if the operands are not identical\', \'True\nTrue\', \'in            True if value is found in the sequence\nnot in        True if value is not found in the sequence\', \'x is NOT present in given list\ny is present in given list\', \'610\nHello! Welcome.\', \'100.0\n6\n0\n512\']','[\'+|||Addition: adds two operands|||x + y&&&–|||Subtraction: subtracts two operands|||x – y&&&*|||Multiplication: multiplies two operands|||x * y&&&/|||Division (float): divides the first operand by the second|||x / y&&&//|||Division (floor): divides the first operand by the second|||x // y&&&%|||Modulus: returns the remainder when the first operand is divided by the second|||x % y&&&**|||Power: Returns first raised to power second|||x ** y\', \'>|||Greater than: True if the left operand is greater than the right|||x > y&&&<|||Less than: True if the left operand is less than the right|||x < y&&&==|||Equal to: True if both operands are equal|||x == y&&&!=|||Not equal to – True if operands are not equal|||x != y&&&>=|||Greater than or equal to True if the left operand is greater than or equal to the right|||x >= y&&&<=|||Less than or equal to True if the left operand is less than or equal to the right|||x <= y\', \'and|||Logical AND: True if both the operands are true|||x and y&&&or|||Logical OR: True if either of the operands is truexa0|||x or y&&&not|||Logical NOT: True if the operand is falsexa0|||not x\', \'&|||Bitwise AND|||x & y&&&||||Bitwise OR|||x | y&&&~|||Bitwise NOT|||~x&&&^|||Bitwise XOR|||x ^ y&&&>>|||Bitwise right shift|||x>>&&&<<|||Bitwise left shift|||x<<\', \'=|||Assign value of right side of expression to left side operandxa0|||x = y + z&&&+=|||Add AND: Add right-side operand with left side operand and then assign to left operand|||a+=b xa0 xa0 a=a+b&&&-=|||Subtract AND: Subtract right operand from left operand and then assign to left operand|||a-=b xa0 xa0 a=a-b&&&*=|||Multiply AND: Multiply right operand with left operand and then assign to left operand|||a*=b xa0 xa0 a=a*b&&&/=|||Divide AND: Divide left operand with right operand and then assign to left operand|||a/=b xa0 xa0 a=a/b&&&%=|||Modulus AND: Takes modulus using left and right operands and assign the result to left operand|||a%=b xa0 xa0 a=a%b&&&//=|||Divide(floor) AND: Divide left operand with right operand and then assign the value(floor) to left operand|||a//=b xa0 xa0 a=a//b&&&**=|||Exponent AND: Calculate exponent(raise power) value using operands and assign value to left operand|||a**=b xa0 xa0 a=a**b&&&&=|||Performs Bitwise AND on operands and assign value to left operand|||a&=b xa0 xa0 a=a&b&&&|=|||Performs Bitwise OR on operands and assign value to left operand|||a|=b xa0 xa0 a=a|b&&&^=|||Performs Bitwise xOR on operands and assign value to left operand|||a^=b xa0 xa0 a=a^b&&&>>=|||Performs Bitwise right shift on operands and assign value to left operand|||a>>=b xa0 xa0 a=a>>b&&&<<=|||Performs Bitwise left shift on operands and assign value to left operand|||a <<= b xa0 xa0 a= a << b\']','[]'),(17,'[\'Ternary Operator in Python\']','[\'Python\', \'Python\', \'Python\', \'Python\', \'Python3\', \'Python\']','[\'Important Points:xa0\']','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://mail.python.org/pipermail/python-dev/2005-September/056846.html\', \'https://www.geeksforgeeks.org/cc-ternary-operator-some-interesting-observations/\', \'https://www.facebook.com/banalshubham\', \'http://www.write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The above approach can be written as:xa0xa0\', \'Example: Find the Larger number among 2 using ternary operator in python3\', \'Example :xa0\']','[\'Ternary operators are also known as conditional expressions are operators that evaluate something based on a condition being true or false. It was added to Python in version 2.5.xa0It simply allows testing a condition in a single line replacing the multiline if-else making the code compact.xa0\', \'Method used prior to 2.5 when the ternary operator was not presentxa0In an expression like the one given below, the interpreter checks for the expression if this is true then on_true is evaluated, else the on_false is evaluated.xa0\', \'Note : The only drawback of this method is that on_true must not be zero or False. If this happens on_false will be evaluated always. The reason for that is if the expression is true, the interpreter will check for the on_true, if that will be zero or false, that will force the interpreter to check for on_false to give the final result of the whole expression.\']','[\'This article is contributed by Mayank Rawat and improved by Shubham Bansal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\'# Program to demonstrate conditional operatora, b = 10, 20 # Copy value of a in min if a < b else copy bmin = a if a < b else b print(min)\', \'# Python program to demonstrate ternary operatora, b = 10, 20 # Use tuple for selecting an item# (if_test_false,if_test_true)[test]# if [a<b] is true it return 1, so element with 1 index will print# else if [a<b] is false it return 0, so element with 0 index will printprint( (b, a) [a < b] ) # Use Dictionary for selecting an item# if [a < b] is true then value of True key will print# elif [a<b] is false then value of False key will printprint({True: a, False: b} [a < b]) # lambda is more efficient than above two methods# because in lambda  we are assure that# only one expression will be evaluated unlike in# tuple and Dictionaryprint((lambda: b, lambda: a)[a < b]())\', \'# Python program to demonstrate nested ternary operatora, b = 10, 20 print (\"Both a and b are equal\" if a == b else \"a is greater than b\"        if a > b else \"b is greater than a\")\', \'# Python program to demonstrate nested ternary operatora, b = 10, 20 if a != b:    if a > b:        print(\"a is greater than b\")    else:        print(\"b is greater than a\")else:    print(\"Both a and b are equal\")\', \'a=5b=7 # [statement_on_True] if [condition] else [statement_on_false] print(a,\"is greater\") if (a>b) else print(b,\"is Greater\")\', \"# Program to demonstrate conditional operatora, b = 10, 20 # If a is less than b, then a is assigned# else b is assigned (Note : it doesn\'t# work if a is 0.min = a < b and a or b print(min)\"]','[\'[on_true] if [expression] else [on_false]\', \'10\', \'10\n10\n10\', \'b is greater than a\', \'7 is Greater\', \'\'\'\'When condition becomes true, expression [on_false]\n   is not executed and value of \"True and [on_true]\"\n   is returned.  Else value of \"False or [on_false]\"\n   is returned.\n   Note that \"True and x\" is equal to x. \n   And \"False or x\" is equal to x. \'\'\'\n[expression] and [on_true] or [on_false]\', \'10\']','[]','[\'Simple Method to use ternary operator:&&&Direct Method by using tuples, Dictionary, and lambda&&&Ternary operator can be written as nested if-else:&&&To use print function in ternary operator be like:-&&&First the given condition is evaluated (a < b), then either a or b is returned based on the Boolean value returned by the condition|||Order of the arguments in the operator is different from other languages like C/C++ (See C/C++ ternary operators).|||Conditional expressions have the lowest priority amongst all Python operations.\']'),(18,'[\'Division Operators in Python\']','[\'Python3\', \'Python3\', \'Python3\']','[]','[]','[\'https://www.youtube.com/embed/oiJUZbRIR7Y?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://ide.geeksforgeeks.org/Rm9JMm\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Consider the below statements in Python.xa0\', \'See this for example.xa0\']','[\'The first output is fine, but the second one may be surprised if we are coming Java/C++ world. In Python, the “//” operator works as a floor division for integer and float arguments. However, the operator / returns a float value if one of the arguments is a float (this is similar to C++)\', \'The “//” operator is used to return the closest integer value which is less than or equal to a specified expression or value. So from the above code, 5//2 returns 2. You know that 5/2 is 2.5, the closest integer which is less than or equal is 2[5//2].( it is inverse to the normal maths, in normal maths the value is 3).xa0\', \'The real floor division operator is “//”. It returns floor value for both integer and floating point arguments.xa0\', \'This article is contributed by Arpit Agrawal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed abovexa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# A Python program to demonstrate the use of# \"//\" for integersprint (5//2)print (-5//2)\', \'# A Python program to demonstrate use of# \"/\" for floating point numbersprint (5.0/2)print (-5.0/2)\', \'# A Python program to demonstrate use of# \"//\" for both integers and floating pointsprint (5//2)print (-5//2)print (5.0//2)print (-5.0//2)\']','[\'2\n-3\', \'2.5\n-2.5\', \'2\n-3\n2.0\n-3.0\']','[]','[]'),(19,'[\'Operator Overloading in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/basic-operators-python/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Output :xa0xa0\', \'Output :xa0xa0\', \'Overloading comparison operators in Python :xa0xa0\', \'Output :xa0xa0\', \'Overloading equality and less than operators :xa0xa0\', \'Output :xa0xa0\']','[]','[\'Operator Overloading means giving extended meaning beyond their predefined operational meaning. For example operator + is used to add two integers as well as join two strings and merge two lists. It is achievable because ‘+’ operator is overloaded by int class and str class. You might have noticed that the same built-in operator or function shows different behavior for objects of different classes, this is called Operator Overloading.xa0xa0\', \'How to overload the operators in Python?xa0Consider that we have two objects which are a physical representation of a class (user-defined data type) and we have to add two objects with binary ‘+’ operator it throws an error, because compiler don’t know how to add two objects. So we define a method for an operator and that process is called operator overloading. We can overload all existing operators but we can’t create a new operator. To perform operator overloading, Python provides some special function or magic function that is automatically invoked when it is associated with that particular operator. For example, when we use + operator, the magic method __add__ is automatically invoked in which the operation for + operator is defined.Overloading binary + operator in Python :xa0When we use an operator on user defined data types then automatically a special function or magic function associated with that operator is invoked. Changing the behavior of operator is as simple as changing the behavior of method or function. You define methods in your class and operators work according to that behavior defined in methods. When we use + operator, the magic method __add__ is automatically invoked in which the operation for + operator is defined. There by changing this magic method’s code, we can give extra meaning to the + operator.xa0Code 1:xa0xa0\']','[\'# Python program to show use of# + operator for different purposes. print(1 + 2) # concatenate two stringsprint(\"Geeks\"+\"For\") # Product two numbersprint(3 * 4) # Repeat the Stringprint(\"Geeks\"*4)\', \'# Python Program illustrate how# to overload an binary + operator class A:    def __init__(self, a):        self.a = a     # adding two objects    def __add__(self, o):        return self.a + o.aob1 = A(1)ob2 = A(2)ob3 = A(\"Geeks\")ob4 = A(\"For\") print(ob1 + ob2)print(ob3 + ob4)\', \'# Python Program to perform addition# of two complex numbers using binary# + operator overloading. class complex:    def __init__(self, a, b):        self.a = a        self.b = b      # adding two objects    def __add__(self, other):        return self.a + other.a, self.b + other.b Ob1 = complex(1, 2)Ob2 = complex(2, 3)Ob3 = Ob1 + Ob2print(Ob3)\', \'# Python program to overload# a comparison operators class A:    def __init__(self, a):        self.a = a    def __gt__(self, other):        if(self.a>other.a):            return True        else:            return Falseob1 = A(2)ob2 = A(3)if(ob1>ob2):    print(\"ob1 is greater than ob2\")else:    print(\"ob2 is greater than ob1\")\', \'# Python program to overload equality# and less than operators class A:    def __init__(self, a):        self.a = a    def __lt__(self, other):        if(self.a<other.a):            return \"ob1 is lessthan ob2\"        else:            return \"ob2 is less than ob1\"    def __eq__(self, other):        if(self.a == other.a):            return \"Both are equal\"        else:            return \"Not equal\"                 ob1 = A(2)ob2 = A(3)print(ob1 < ob2) ob3 = A(4)ob4 = A(4)print(ob1 == ob2)\']','[\'3\nGeeksFor\n12\nGeeksGeeksGeeksGeeks\', \'3\nGeeksFor\', \'(3, 5)\', \'ob2 is greater than ob1\', \'ob1 is lessthan ob2\nNot equal\']','[]','[]'),(20,'[\'Any All in Python\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/All-any-in-python.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Any and All are two built ins provided in python used for successive And/Or.\', \'Syntax : any(list of iterables)\', \'Syntax : all(list of iterables)\', \'Practical Examples\', \'Truth table :-\']','[\'AnyReturns true if any of the items is True. It returns False if empty or all are false. Any can be thought of as a sequence of OR operations on the provided iterables.It short circuit the execution i.e. stop the execution as soon as the result is known.\', \'AllReturns true if all of the items are True (or if the iterable is empty). All can be thought of as a sequence of AND operations on the provided iterables. It also short circuit the execution i.e. stop the execution as soon as the result is known.\', \'This article is contributed by Mayank Rawat .If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'# Since all are false, false is returnedprint (any([False, False, False, False]))  # Here the method will short-circuit at the# second item (True) and will return True.print (any([False, True, False, False]))  # Here the method will short-circuit at the# first (True) and will return True.print (any([True, False, False, False]))\', \'# Here all the iterables are True so all# will return True and the same will be printedprint (all([True, True, True, True]))  # Here the method will short-circuit at the # first item (False) and will return False.print (all([False, True, True, False]))  # This statement will return False, as no# True is found in the iterablesprint (all([False, False, False]))\', \"# This code explains how can we # use \'any\' function on list list1 = []list2 = []  # Index ranges from 1 to 10 to multiplyfor i in range(1,11):    list1.append(4*i)   # Index to access the list2 is from 0 to 9for i in range(0,10):    list2.append(list1[i]%5==0)  print(\'See whether at least one number is divisible by 5 in list 1=>\')print(any(list2))\", \"# Illustration of \'all\' function in python 3  # Take two lists list1=[]list2=[]  # All numbers in list1 are in form: 4*i-3for i  in range(1,21):    list1.append(4*i-3)  # list2 stores info of odd numbers in list1for i in range(0,20):    list2.append(list1[i]%2==1)  print(\'See whether all numbers in list1 are odd =>\')print(all(list2))\"]','[\'False\nTrue\nTrue\', \'True\nFalse\nFalse\', \'See whether at least one number is divisible by 5 in list 1=>\nTrue\', \'See whether all numbers in list1 are odd =>\nTrue\']','[]','[]'),(21,'[\'Operator Functions in Python | Set 1\']','[]','[]','[]','[\'https://www.youtube.com/embed/ef4HnMGHWX0?feature=oembed\']','[\'https://www.geeksforgeeks.org/basic/\', \'https://auth.geeksforgeeks.org/profile.php?user=manjeet_04&list=practice\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'1. add(a, b) :- This functions returns addition of the given arguments.Operation – a + b.\', \'2. sub(a, b) :- This functions returns difference of the given arguments.Operation – a – b.\', \'3. mul(a, b) :- This functions returns product of the given arguments.Operation – a * b.\', \'4. truediv(a,b) :- This function returns division of the given arguments.Operation – a / b.\', \'6. pow(a,b) :- This function returns exponentiation of the given arguments.Operation – a ** b.\', \'7. mod(a,b) :- This function returns modulus of the given arguments.Operation – a % b.\']','[\'Python has predefined functions for many mathematical, logical, relational, bitwise etc operations under the module “operator”. Some of the basic functions are covered in this article.\', \'5. floordiv(a,b) :- This function also returns division of the given arguments. But the value is floored value i.e. returns greatest small integer.Operation – a // b.\', \'8. lt(a, b) :- This function is used to check if a is less than b or not. Returns true if a is less than b, else returns false.Operation – a < b.\', \'9. le(a, b) :- This function is used to check if a is less than or equal to b or not. Returns true if a is less than or equal to b, else returns false.Operation – a <= b.\', \'10. eq(a, b) :- This function is used to check if a is equal to b or not. Returns true if a is equal to b, else returns false.Operation – a == b.\', \'11. gt(a,b) :- This function is used to check if a is greater than b or not. Returns true if a is greater than b, else returns false.Operation – a > b.\', \'12. ge(a,b) :- This function is used to check if a is greater than or equal to b or not. Returns true if a is greater than or equal to b, else returns false.Operation – a >= b.\', \'13. ne(a,b) :- This function is used to check if a is not equal to b or is equal. Returns true if a is not equal to b, else returns false.Operation – a != b.\', \'This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'# Python code to demonstrate working of # add(), sub(), mul()  # importing operator module import operator  # Initializing variablesa = 4  b = 3  # using add() to add two numbersprint (\"The addition of numbers is :\",end=\"\");print (operator.add(a, b))  # using sub() to subtract two numbersprint (\"The difference of numbers is :\",end=\"\");print (operator.sub(a, b))  # using mul() to multiply two numbersprint (\"The product of numbers is :\",end=\"\");print (operator.mul(a, b))\', \'# Python code to demonstrate working of # truediv(), floordiv(), pow(), mod()  # importing operator module import operator  # Initializing variablesa = 5  b = 2  # using truediv() to divide two numbersprint (\"The true division of numbers is : \",end=\"\");print (operator.truediv(a,b))  # using floordiv() to divide two numbersprint (\"The floor division of numbers is : \",end=\"\");print (operator.floordiv(a,b))  # using pow() to exponentiate two numbersprint (\"The exponentiation of numbers is : \",end=\"\");print (operator.pow(a,b))  # using mod() to take modulus of two numbersprint (\"The modulus of numbers is : \",end=\"\");print (operator.mod(a,b))\', \'# Python code to demonstrate working of # lt(), le() and eq()  # importing operator module import operator  # Initializing variablesa = 3  b = 3  # using lt() to check if a is less than bif(operator.lt(a,b)):       print (\"3 is less than 3\")else : print (\"3 is not less than 3\")  # using le() to check if a is less than or equal to bif(operator.le(a,b)):       print (\"3 is less than or equal to 3\")else : print (\"3 is not less than or equal to 3\")  # using eq() to check if a is equal to bif (operator.eq(a,b)):       print (\"3 is equal to 3\")else : print (\"3 is not equal to 3\")\', \'# Python code to demonstrate working of # gt(), ge() and ne()  # importing operator module import operator  # Initializing variablesa = 4  b = 3  # using gt() to check if a is greater than bif (operator.gt(a,b)):       print (\"4 is greater than 3\")else : print (\"4 is not greater than 3\")  # using ge() to check if a is greater than or equal to bif (operator.ge(a,b)):       print (\"4 is greater than or equal to 3\")else : print (\"4 is not greater than or equal to 3\")  # using ne() to check if a is not equal to bif (operator.ne(a,b)):       print (\"4 is not equal to 3\")else : print (\"4 is equal to 3\")\']','[\'The addition of numbers is:7\nThe difference of numbers is :1\nThe product of numbers is:12\', \'The true division of numbers is: 2.5\nThe floor division of numbers is: 2\nThe exponentiation of numbers is: 25\nThe modulus of numbers is: 1\', \'3 is not less than 3\n3 is less than or equal to 3\n3 is equal to 3\', \'4 is greater than 3\n4 is greater than or equal to 3\n4 is not equal to 3\']','[]','[]'),(22,'[\'Operator Functions in Python | Set 2\']','[\'Python\', \'Python\', \'Python\', \'Python3\']','[]','[]','[\'https://www.youtube.com/embed/eVN7uYg0jm8?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/operator-functions-in-python-set-1/\', \'https://auth.geeksforgeeks.org/profile.php?user=manjeet_04&list=practice\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Operator Functions in Python | Set 1\', \'More functions are discussed in this article.\']','[\'1. setitem(ob, pos, val) :- This function is used to assign the value at a particular position in the container.xa0Operation – ob[pos] = val\', \'2. delitem(ob, pos) :- This function is used to delete the value at a particular position in the container.xa0Operation – del ob[pos]\', \'3. getitem(ob, pos) :- This function is used to access the value at a particular position in the container.xa0Operation – ob[pos]xa0\', \'4. setitem(ob, slice(a,b), vals) :- This function is used to set the values in a particular range in the container.xa0Operation – obj[a:b] = vals\', \'5. delitem(ob, slice(a,b)) :- This function is used to delete the values from a particular range in the container.xa0Operation – del obj[a:b]\', \'6. getitem(ob, slice(a,b)) :- This function is used to access the values in a particular range in the container.xa0Operation – obj[a:b]xa0\', \'xa07. concat(ob1,obj2) :- This function is used to concatenate two containers.xa0Operation – obj1 + obj2\', \'8. contains(ob1,obj2) :- This function is used to check if obj2 in present in obj1.xa0Operation – obj2 in obj1xa0\', \'xa09. and_(a,b) :- This function is used to compute bitwise and of the mentioned arguments.xa0Operation – a & b\', \'10. or_(a,b) :- This function is used to compute bitwise or of the mentioned arguments.xa0Operation – a | b\', \'11. xor(a,b) :- This function is used to compute bitwise xor of the mentioned arguments.xa0Operation – a ^ b\', \'12. invert(a) :- This function is used to compute bitwise inversion of the mentioned argument.xa0Operation – ~ axa0\']','[\'This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\'# Python code to demonstrate working of # setitem(), delitem() and getitem()  # importing operator module import operator  # Initializing listli = [1, 5, 6, 7, 8]  # printing original list print (\"The original list is : \",end=\"\")for i in range(0,len(li)):    print (li[i],end=\" \")  print (\"\\r\")  # using setitem() to assign 3 at 4th positionoperator.setitem(li,3,3)  # printing modified list after setitem()print (\"The modified list after setitem() is : \",end=\"\")for i in range(0,len(li)):    print (li[i],end=\" \")  print (\"\\r\")  # using delitem() to delete value at 2nd indexoperator.delitem(li,1)  # printing modified list after delitem()print (\"The modified list after delitem() is : \",end=\"\")for i in range(0,len(li)):    print (li[i],end=\" \")  print (\"\\r\")  # using getitem() to access 4th elementprint (\"The 4th element of list is : \",end=\"\")print (operator.getitem(li,3))\', \'# Python code to demonstrate working of # setitem(), delitem() and getitem()  # importing operator module import operator  # Initializing listli = [1, 5, 6, 7, 8]  # printing original list print (\"The original list is : \",end=\"\")for i in range(0,len(li)):    print (li[i],end=\" \")  print (\"\\r\")  # using setitem() to assign 2,3,4 at 2nd,3rd and 4th indexoperator.setitem(li,slice(1,4),[2,3,4])  # printing modified list after setitem()print (\"The modified list after setitem() is : \",end=\"\")for i in range(0,len(li)):    print (li[i],end=\" \")  print (\"\\r\")  # using delitem() to delete value at 3rd and 4th indexoperator.delitem(li,slice(2,4))  # printing modified list after delitem()print (\"The modified list after delitem() is : \",end=\"\")for i in range(0,len(li)):    print (li[i],end=\" \")  print (\"\\r\")  # using getitem() to access 1st and 2nd elementprint (\"The 1st and 2nd element of list is : \",end=\"\")print (operator.getitem(li,slice(0,2)))\', \'# Python code to demonstrate working of # concat() and contains()  # importing operator module import operator  # Initializing string 1s1 = \"geeksfor\"  # Initializing string 2s2 = \"geeks\"  # using concat() to concatenate two stringsprint (\"The concatenated string is : \",end=\"\")print (operator.concat(s1,s2))  # using contains() to check if s1 contains s2if (operator.contains(s1,s2)):       print (\"geeksfor contains geeks\")else : print (\"geeksfor does not contain geeks\")\', \'# Python code to demonstrate working of # and_(), or_(), xor(), invert()  # importing operator module import operator  # Initializing a and b  a = 1  b = 0  # using and_() to display bitwise and operationprint (\"The bitwise and of a and b is : \",end=\"\")print (operator.and_(a,b))  # using or_() to display bitwise or operationprint (\"The bitwise or of a and b is : \",end=\"\")print (operator.or_(a,b))  # using xor() to display bitwise exclusive or operationprint (\"The bitwise xor of a and b is : \",end=\"\")print (operator.xor(a,b))  # using invert() to invert value of aoperator.invert(a)  # printing modified valueprint (\"The inverted value of a is : \",end=\"\")print (operator.invert(a))\']','[\'The original list is : 1 5 6 7 8 \nThe modified list after setitem() is : 1 5 6 3 8 \nThe modified list after delitem() is : 1 6 3 8 \nThe 4th element of list is : 8\', \'The original list is : 1 5 6 7 8 \nThe modified list after setitem() is : 1 2 3 4 8 \nThe modified list after delitem() is : 1 2 8 \nThe 1st and 2nd element of list is : [1, 2]\', \'The concatenated string is : geeksforgeeks\ngeeksfor contains geeks\', \'The bitwise and of a and b is : 0\nThe bitwise or of a and b is : 1\nThe bitwise xor of a and b is : 1\nThe inverted value of a is : -2\']','[]','[]'),(23,'[\'Difference between == and is operator in Python\']','[\'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'This shows list1 and list2 refer to different objects.\']','[\'The Equality operator (==) compares the values of both the operands and checks for value equality. Whereas the ‘is’ operator checks whether both the operands refer to the same object or not (present in the same memory location).xa0\']','[]','[\'# python3 code to# illustrate the# difference between# == and is operator# [] is an empty listlist1 = []list2 = []list3=list1 if (list1 == list2):    print(\"True\")else:    print(\"False\") if (list1 is list2):    print(\"True\")else:    print(\"False\") if (list1 is list3):    print(\"True\")else:       print(\"False\") list3 = list3 + list2 if (list1 is list3):    print(\"True\")else:       print(\"False\")\', \'list1 = []list2 = [] print(id(list1))print(id(list2))\']','[\'True\nFalse\nTrue\nFalse\', \'139877155242696\n139877155253640\']','[]','[\'The output of the first if the condition is “True” as both list1 and list2 are empty lists.|||Second, if the condition shows “False” because two empty lists are at different memory locations. Hence list1 and list2 refer to different objects. We can check it with id() function in python which returns the “identity” of an object.|||The output of the third if the condition is “True” as both list1 and list3 are pointing to the same object.|||The output of the fourth if the condition is “False” because the concatenation of two lists always produces a new list.\']'),(24,'[\'Python Membership and Identity Operators\']','[\'Membership Operators\', \'Python3\', \'Python3\', \'Python3\', \'Identity operators\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'In this article, we are going to Python Membership and Identity Operators.\', \'The same example without using in operator:\']','[\'Membership operators are operators used to validate the membership of a value. It tests for membership in a sequence, such as strings, lists, or tuples.xa0\', \'In Python identity operators are used to determine whether a value is of a certain class or type. They are usually used to determine the type of data a certain variable contains.xa0There are different identity operators such asxa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# Python program to illustrate# Finding common member in list# using \'in\' operatorlist1=[1,2,3,4,5]list2=[6,7,8,9]for item in list1:    if item in list2:        print(\"overlapping\")     else:    print(\"not overlapping\")\', \'# Python program to illustrate# Finding common member in list# without  using \'in\' operator #  Define a function() that takes two listsdef overlapping(list1,list2):     c=0    d=0    for i in list1:        c+=1    for i in list2:        d+=1    for i in range(0,c):        for j in range(0,d):            if(list1[i]==list2[j]):                return 1    return 0list1=[1,2,3,4,5]list2=[6,7,8,9]if(overlapping(list1,list2)):    print(\"overlapping\")else:    print(\"not overlapping\")\', \'# Python program to illustrate# not \'in\' operatorx = 24y = 20list = [10, 20, 30, 40, 50 ]; if ( x not in list ):   print(\"x is NOT present in given list\")else:   print(\"x is  present in given list\") if ( y in list ):   print(\"y is present in given list\")else:   print(\"y is NOT present in given list\")\', \'# Python program to illustrate the use# of \'is\' identity operatorx = 5if (type(x) is int):    print(\"true\")else:    print(\"false\")\', \'# Python program to illustrate the# use of \'is not\' identity operatorx = 5.2if (type(x) is not int):    print(\"true\")else:    print(\"false\")\']','[\'not overlapping\', \'not overlapping\', \'x is NOT present in given list\ny is present in given list\', \'true\', \'true\']','[]','[\'in operator: The ‘in’ operator is used to check if a value exists in a sequence or not. Evaluate to true if it finds a variable in the specified sequence and false otherwise.&&&‘not in’ operator- Evaluates to true if it does not finds a variable in the specified sequence and false otherwise.&&&‘is’ operator – Evaluates to true if the variables on either side of the operator point to the same object and false otherwise.&&&‘is not’ operator – Evaluates to false if the variables on either side of the operator point to the same object and true otherwise.\']'),(25,'[\'Python | Set 3 (Strings, Lists, Tuples, Iterations)\']','[\'Python\', \'Python\', \'Python\', \'Python\', \'Python\', \'Python\', \'Python\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-set-2-variables-expressions-conditions-and-functions/\', \'https://www.geeksforgeeks.org/python-set-4-dictionary-keywords-python/\', \'https://www.geeksforgeeks.org/data-type-gq/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The output is :xa0xa0\', \'The output is :xa0\', \'The output is :xa0\', \'Example 2: Iteration by for loop on string\', \'The output is :xa0\', \'Example 3: Iteration by for loop on list\', \'The output is :xa0\', \'Example 4 : Iteration by for loop for range\', \'The output is :xa0\', \'https://www.youtube.com/watch?v=pCoB45\']','[\'In the previous article, we read about the basics of Python. Now, we continue with some more python concepts.\', \'Strings in Pythonxa0A string is a sequence of characters. It can be declared in python by using double-quotes. Strings are immutable, i.e., they cannot be changed.\', \'Lists in Pythonxa0Lists are one of the most powerful tools in python. They are just like the arrays declared in other languages. But the most powerful thing is that list need not be always homogeneous. A single list can contain strings, integers, as well as objects. Lists can also be used for implementing stacks and queues. Lists are mutable, i.e., they can be altered once declared.\', \'Tuples in Pythonxa0A tuple is a sequence of immutable Python objects. Tuples are just like lists with the exception that tuples cannot be changed once declared. Tuples are usually faster than lists.\', \'Iterations in Pythonxa0Iterations or looping can be performed in python by ‘for’ and ‘while’ loops. Apart from iterating upon a particular condition, we can also iterate on strings, lists, and tuples.Example 1: Iteration by while loop for a condition\']','[]','[\'# Assigning string to a variablea = \"This is a string\"print (a)\', \'# Declaring a listL = [1, \"a\" , \"string\" , 1+2]print LL.append(6)print LL.pop()print Lprint L[1]\', \'tup = (1, \"a\", \"string\", 1+2)print(tup)print(tup[1])\', \'i = 1while (i < 10):    print(i)    i += 1\', \'s = \"Hello World\"for i in s :    print (i)\', \'L = [1, 4, 5, 7, 8, 9]for  i in L:    print (i)\', \'for i in range(0, 10):    print (i)\']','[\"[1, \'a\', \'string\', 3]\n[1, \'a\', \'string\', 3, 6]\n[1, \'a\', \'string\', 3]\na\", \"(1, \'a\', \'string\', 3)\na\", \'1\n2\n3\n4\n5\n6\n7\n8\n9\', \'H\ne\nl\nl\no\n \nW\no\nr\nl\nd\', \'1\n4\n5\n7\n8\n9\', \'0\n1\n2\n3\n4\n5\n6\n7\n8\n9\']','[]','[\'Next Article – Python: Dictionary and Keywords|||Quizon Data Types in Python\']'),(26,'[\'Python String\']','[\'Creating a String\', \'Python3\', \'Accessing characters in Python\', \'Python3\', \'String Slicing\', \'Python3\', \'Deleting/Updating from a String\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Escape Sequencing in Python\', \'Python3\', \'Python3\', \'Formatting of Strings\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[\'String constantsxa0\', \'Recent Articles on Python Stringxa0\']','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200204160843/strings.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-string-format-method/\', \'https://www.geeksforgeeks.org/g-fact-43-logical-operators-on-string-in-python/\', \'http://geeksquiz.com/string-formatting-in-python-using/\', \'https://www.geeksforgeeks.org/template-class-in-python/\', \'https://www.geeksforgeeks.org/how-to-split-a-string-in-cc-python-and-java/\', \'https://www.geeksforgeeks.org/python-docstrings/\', \'https://www.geeksforgeeks.org/string-slicing-python-check-string-can-become-empty-recursive-deletion/\', \'https://www.geeksforgeeks.org/python-counter-find-duplicate-characters-string/\', \'https://www.geeksforgeeks.org/reverse-string-python-5-different-ways/\', \'https://www.geeksforgeeks.org/python-program-check-string-palindrome-not/\', \'https://www.geeksforgeeks.org/python-string-ascii_letters/\', \'https://www.geeksforgeeks.org/python-string-ascii_lowercase/\', \'https://www.geeksforgeeks.org/python-string-ascii_uppercase/\', \'https://www.geeksforgeeks.org/python-string-digits/\', \'https://www.geeksforgeeks.org/python-string-hexdigits/\', \'https://www.geeksforgeeks.org/string-endswith-python/\', \'https://www.geeksforgeeks.org/python-string-startswith/\', \'https://www.geeksforgeeks.org/python-string-isdigit-application/\', \'https//www.geeksforgeeks.org/python-string-isalpha-application/\', \'https://www.geeksforgeeks.org/python-string-isdecimal/\', \'https://www.geeksforgeeks.org/python-format-function/\', \'https://www.geeksforgeeks.org/python-string-index-applications/\', \'https://www.geeksforgeeks.org/python-string-isspace-application/\', \'https://www.geeksforgeeks.org/python-string-swapcase/\', \'https://www.geeksforgeeks.org/python-string-replace/\', \'https://www.geeksforgeeks.org/python-string-isdecimal/\', \'https://www.geeksforgeeks.org/python-string-isalnum/\', \'https://www.geeksforgeeks.org/python-string-istitle/\', \'https://www.geeksforgeeks.org/string-partition-python/\', \'https://www.geeksforgeeks.org/python-string-isidentifier/\', \'https://www.geeksforgeeks.org/python-string-length-len/\', \'https://www.geeksforgeeks.org/string-rindex-python/\', \'https://www.geeksforgeeks.org/python-string-max/\', \'https://www.geeksforgeeks.org/python-string-min/\', \'https://www.geeksforgeeks.org/python-string-splitlines/\', \'https://www.geeksforgeeks.org/string-capitalize-python/\', \'https://www.geeksforgeeks.org/python-expandtabs-method/\', \'https://www.geeksforgeeks.org/string-find-python/\', \'https://www.geeksforgeeks.org/python-string-rfind/\', \'https://www.geeksforgeeks.org/python-string-count/\', \'https://www.geeksforgeeks.org/python-string-lower/\', \'https://www.geeksforgeeks.org/python-string-split/\', \'https://write.geeksforgeeks.org/improve/find-the-smallest-binary-digit-multiple-of-given-number-2/\', \'https://www.geeksforgeeks.org/python-string-rpartition/\', \'https://www.geeksforgeeks.org/join-function-python/\', \'https://www.geeksforgeeks.org/python-string-strip/\', \'https://www.geeksforgeeks.org/python-string-strip/\', \'https://www.geeksforgeeks.org/python-string-rstrip/\', \'https://www.geeksforgeeks.org/python-string-swapcase/\', \'https://www.geeksforgeeks.org/python-string-translate/\', \'https://www.geeksforgeeks.org/python-string-upper/\', \'https://www.geeksforgeeks.org/string-rjust-ljust-python/\', \'https://www.geeksforgeeks.org/string-rjust-ljust-python/\', \'https://www.geeksforgeeks.org/string-center-python/\', \'https://www.geeksforgeeks.org/python-string-zfill/\', \'https://www.geeksforgeeks.org/replace-in-python-to-replace-a-substring/\', \'https://www.geeksforgeeks.org/casefold-string-python/\', \'https://www.geeksforgeeks.org/python-strings-encode-method/\', \'https://www.geeksforgeeks.org/python-maketrans-translate-functions/\', \'https://www.geeksforgeeks.org/tag/python-string/\', \'https://youtu.be/uWxLbPY9ewc\', \'https://youtu.be/ECnJ9AD6gHY\', \'https://youtu.be/m9iv9aM6Om8\', \'https://www.geeksforgeeks.org/interesting-facts-about-strings-in-python-set-1/\', \'https://www.geeksforgeeks.org/interesting-facts-about-strings-in-python-set-2/\', \'https://www.geeksforgeeks.org/string-methods-python-set-1/\', \'https://www.geeksforgeeks.org/python-string-methods-set-2-len-count-center-ljust-rjust-isalpha-isalnum-isspace-join/\', \'https://www.geeksforgeeks.org/python-string-methods-set-3-strip-lstrip-rstrip-min-max-maketrans-translate-relplace/\', \'https://www.geeksforgeeks.org/regular-expressions-python-set-1-search-match-find/\', \'https://www.geeksforgeeks.org/title-in-python/\', \'https://www.geeksforgeeks.org/python-swap-commas-dots-string/\', \'https://www.geeksforgeeks.org/python-program-convert-string-list/\', \'https://www.geeksforgeeks.org/python-count-display-vowels-string/\', \'https://www.geeksforgeeks.org/python-program-check-validity-password/\', \'https://www.geeksforgeeks.org/python-program-count-number-vowels-using-sets-given-string/\', \'https://www.geeksforgeeks.org/python-check-url-string/\', \'https://www.geeksforgeeks.org/python-check-substring-present-given-string/\', \'https://www.geeksforgeeks.org/python-sorted-check-two-strings-anagram-not/\', \'https://www.geeksforgeeks.org/map-function-dictionary-python-sum-ascii-values/\', \'https://www.geeksforgeeks.org/map-function-lambda-expression-python-replace-characters/\', \'https://www.geeksforgeeks.org/sequencematcher-in-python-for-longest-common-substring/\', \'https://www.geeksforgeeks.org/python-print-initials-name-last-name-full/\', \'https://www.geeksforgeeks.org/find-k-frequent-words-data-set-python/\', \'https://www.geeksforgeeks.org/python-find-close-matches-input-string-list/\', \'https://www.geeksforgeeks.org/python-check-k-consecutive-1s-binary-number/\', \'https://www.geeksforgeeks.org/lambda-filter-python-examples/\', \'https://www.geeksforgeeks.org/concatenated-string-uncommon-characters-python/\', \'https://www.geeksforgeeks.org/check-halves-string-set-characters-python/\', \'https://www.geeksforgeeks.org/find-first-repeated-word-string-python-using-dictionary/\', \'https://www.geeksforgeeks.org/second-repeated-word-sequence-python/\', \'https://www.geeksforgeeks.org/kth-non-repeating-character-python-using-list-comprehension-ordereddict/\', \'https://www.geeksforgeeks.org/python-counter-find-duplicate-characters-string/\', \'https://www.geeksforgeeks.org/print-number-commas-1000-separators-python/\', \'https://www.geeksforgeeks.org/Print number with commas as 1000 separators in Python\', \'https://www.geeksforgeeks.org/python-regex-extract-maximum-numeric-value-string/\', \'https://www.geeksforgeeks.org/python-set-pairs-complete-strings-two-sets/\', \'https://www.geeksforgeeks.org/python-remove-duplicates-words-given-sentence/\', \'https://www.geeksforgeeks.org/python-sort-words-sentence-ascending-order/\', \'https://www.geeksforgeeks.org/python-reverse-word-sentence/\', \'https://www.geeksforgeeks.org/python-code-print-common-characters-two-strings-alphabetical-order/\', \'https://www.geeksforgeeks.org/python-program-split-join-string/\', \'https://www.geeksforgeeks.org/python-code-move-spaces-front-string-single-traversal/\', \'https://www.geeksforgeeks.org/run-length-encoding-python/\', \'https://www.geeksforgeeks.org/remove-duplicates-given-string-python/\', \'https://www.geeksforgeeks.org/ways-increment-character-python/\', \'https://www.geeksforgeeks.org/prefix-matching-python-using-pytrie-module/\', \'https://www.geeksforgeeks.org/print-number-commas-1000-separators-python/\', \'https://www.geeksforgeeks.org/reverse-words-given-string-python/\', \'https://www.geeksforgeeks.org/execute-string-code-python/\', \'https://www.geeksforgeeks.org/string-slicing-python-check-string-can-become-empty-recursive-deletion/\', \'https://www.geeksforgeeks.org/ways-print-escape-characters-python/\', \'https://www.geeksforgeeks.org/string-slicing-python-rotate-string/\', \'https://www.geeksforgeeks.org/count-occurrences-of-a-word-in-string/\', \'https://www.geeksforgeeks.org/find-k-frequent-words-data-set-python/\', \'https://www.geeksforgeeks.org/python-print-initials-name-last-name-full/\', \'https://www.geeksforgeeks.org/zip-function-python-change-new-character-set/\', \'https://www.geeksforgeeks.org/python-string-isnumeric-application/\', \'https://www.geeksforgeeks.org/sort-words-lexicographical-order-python/\', \'https://www.geeksforgeeks.org/python-find-number-occurring-odd-number-times-using-lambda-expression-reduce-function/\', \'https://www.geeksforgeeks.org/title-in-python/\', \'https://www.geeksforgeeks.org/python-sort-words-sentence-ascending-order/\', \'https://www.geeksforgeeks.org/python-convert-list-characters-string/\', \'https://www.geeksforgeeks.org/python-groupby-method-remove-consecutive-duplicates/\', \'https://www.geeksforgeeks.org/python-groupby-method-remove-consecutive-duplicates/\', \'https://www.geeksforgeeks.org/python-program-for-removing-i-th-character-from-a-string/\', \'https://www.geeksforgeeks.org/replacing-strings-with-numbers-in-python-for-data-analysis/\', \'https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/\', \'https://www.geeksforgeeks.org/python-docstrings/\', \'https://www.geeksforgeeks.org/python-permutation-given-string-using-inbuilt-function/\', \'https://www.geeksforgeeks.org/find-frequency-of-each-word-in-a-string-in-python/\', \'https://www.geeksforgeeks.org/python-program-to-accept-the-strings-which-contains-all-vowels/\', \'https://www.geeksforgeeks.org/python-count-the-number-of-matching-characters-in-a-pair-of-string/\', \'https://www.geeksforgeeks.org/python-count-prefixes-given-string-greatest-frequency/\', \'https://www.geeksforgeeks.org/python-program-check-string-contains-special-character/\', \'https://www.geeksforgeeks.org/python-program-match-string-random-strings-length/\', \'https://www.geeksforgeeks.org/python-program-count-upper-lower-case-characters-without-using-inbuilt-functions/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Strings in Python can be created using single quotes or double quotes or even triple quotes.xa0\', \'Old style formatting was done without the use of format method by using % operatorxa0\', \'Useful String Operationsxa0xa0\', \'https://youtu.be/mvDQuegHVXg\', \'Programs of Python Stringsxa0xa0\']','[\'In Python, Strings are arrays of bytes representing Unicode characters. However, Python does not have a character data type, a single character is simply a string with a length of 1. Square brackets can be used to access elements of the string.\', \'In Python, individual characters of a String can be accessed by using the method of Indexing. Indexing allows negative address references to access characters from the back of the String, e.g. -1 refers to the last character, -2 refers to the second last character, and so on.xa0\', \'While accessing an index out of the range will cause an IndexError. Only Integers are allowed to be passed as an index, float or other types that will cause a TypeError.xa0\', \'To access a range of characters in the String, the method of slicing is used. Slicing in a String is done by using a Slicing operator (colon).xa0\', \'Traceback (most recent call last):xa0File “/home/360bb1830c83a918fc78aa8979195653.py”, line 10, inxa0String1[2] = ‘p’xa0TypeError: ‘str’ object does not support item assignment\', \'Traceback (most recent call last):xa0File “/home/499e96a61e19944e7e45b7a6e1276742.py”, line 10, inxa0del String1[2]xa0TypeError: ‘str’ object doesn’t support item deletion\', \'Deletion of the entire string is possible with the use of del keyword. Further, if we try to print the string, this will produce an error because String is deleted and is unavailable to be printed.xa0xa0\', \'Traceback (most recent call last):xa0File “/home/e4b8f2170f140da99d2fe57d9d8c6a94.py”, line 12, inxa0print(String1)xa0NameError: name ‘String1’ is not definedxa0\', \'While printing Strings with single and double quotes in it causes SyntaxError because String already contains Single and Double Quotes and hence cannot be printed with the use of either of these. Hence, to print such a String either Triple Quotes are used or Escape sequences are used to print such Strings.xa0\', \'Escape sequences start with a backslash and can be interpreted differently. If single quotes are used to represent a string, then all the single quotes present in the string must be escaped and same is done for Double Quotes.xa0\', \'To ignore the escape sequences in a String, r or R is used, this implies that the string is a raw string and escape sequences inside it are to be ignored.\', \'Strings in Python can be formatted with the use of format() method which is a very versatile and powerful tool for formatting Strings. Format method in String contains curly braces {} as placeholders which can hold arguments according to position or keyword to specify the order.\', \'Integers such as Binary, hexadecimal, etc., and floats can be rounded or displayed in the exponent form with the use of format specifiers.xa0\', \'A string can be left() or center(^) justified with the use of format specifiers, separated by a colon(:).xa0xa0\', \'More Videos on Python Strings:Python String Methods – Part2xa0Python String Methods – Part 3xa0Logical Operations and Splitting in Stringsxa0\']','[\'In Python, Updation or deletion of characters from a String is not allowed. This will cause an error because item assignment or item deletion from a String is not supported. Although deletion of the entire String is possible with the use of a built-in del keyword. This is because Strings are immutable, hence elements of a String cannot be changed once it has been assigned. Only new strings can be reassigned to the same name.xa0\']','[\'# Python Program for# Creation of String # Creating a String# with single QuotesString1 = \'Welcome to the Geeks World\'print(\"String with the use of Single Quotes: \")print(String1) # Creating a String# with double QuotesString1 = \"I\'m a Geek\"print(\"\\nString with the use of Double Quotes: \")print(String1) # Creating a String# with triple QuotesString1 = \'\'\'I\'m a Geek and I live in a world of \"Geeks\"\'\'\'print(\"\\nString with the use of Triple Quotes: \")print(String1) # Creating String with triple# Quotes allows multiple linesString1 = \'\'\'Geeks            For            Life\'\'\'print(\"\\nCreating a multiline String: \")print(String1)\', \'# Python Program to Access# characters of String String1 = \"GeeksForGeeks\"print(\"Initial String: \")print(String1) # Printing First characterprint(\"\\nFirst character of String is: \")print(String1[0]) # Printing Last characterprint(\"\\nLast character of String is: \")print(String1[-1])\', \'# Python Program to# demonstrate String slicing # Creating a StringString1 = \"GeeksForGeeks\"print(\"Initial String: \")print(String1) # Printing 3rd to 12th characterprint(\"\\nSlicing characters from 3-12: \")print(String1[3:12]) # Printing characters between# 3rd and 2nd last characterprint(\"\\nSlicing characters between \" +    \"3rd and 2nd last character: \")print(String1[3:-2])\', \'# Python Program to Update# character of a String String1 = \"Hello, I\'m a Geek\"print(\"Initial String: \")print(String1) # Updating a character# of the StringString1[2] = \'p\'print(\"\\nUpdating character at 2nd Index: \")print(String1)\', \'# Python Program to Update# entire String String1 = \"Hello, I\'m a Geek\"print(\"Initial String: \")print(String1) # Updating a StringString1 = \"Welcome to the Geek World\"print(\"\\nUpdated String: \")print(String1)\', \'# Python Program to Delete# characters from a String String1 = \"Hello, I\'m a Geek\"print(\"Initial String: \")print(String1) # Deleting a character# of the Stringdel String1[2]print(\"\\nDeleting character at 2nd Index: \")print(String1)\', \'# Python Program to Delete# entire String String1 = \"Hello, I\'m a Geek\"print(\"Initial String: \")print(String1) # Deleting a String# with the use of deldel String1print(\"\\nDeleting entire String: \")print(String1)\', \'# Python Program for# Escape Sequencing# of String # Initial StringString1 = \'\'\'I\'m a \"Geek\"\'\'\'print(\"Initial String with use of Triple Quotes: \")print(String1) # Escaping Single QuoteString1 = \'I\\\'m a \"Geek\"\'print(\"\\nEscaping Single Quote: \")print(String1) # Escaping Double QuotesString1 = \"I\'m a \\\"Geek\\\"\"print(\"\\nEscaping Double Quotes: \")print(String1) # Printing Paths with the# use of Escape SequencesString1 = \"C:\\\\Python\\\\Geeks\\\\\"print(\"\\nEscaping Backslashes: \")print(String1)\', \'# Printing Geeks in HEXString1 = \"This is \\x47\\x65\\x65\\x6b\\x73 in \\x48\\x45\\x58\"print(\"\\nPrinting in HEX with the use of Escape Sequences: \")print(String1) # Using raw String to# ignore Escape SequencesString1 = r\"This is \\x47\\x65\\x65\\x6b\\x73 in \\x48\\x45\\x58\"print(\"\\nPrinting Raw String in HEX Format: \")print(String1)\', \'# Python Program for# Formatting of Strings # Default orderString1 = \"{} {} {}\".format(\'Geeks\', \'For\', \'Life\')print(\"Print String in default order: \")print(String1) # Positional FormattingString1 = \"{1} {0} {2}\".format(\'Geeks\', \'For\', \'Life\')print(\"\\nPrint String in Positional order: \")print(String1) # Keyword FormattingString1 = \"{l} {f} {g}\".format(g=\'Geeks\', f=\'For\', l=\'Life\')print(\"\\nPrint String in order of Keywords: \")print(String1)\', \'# Formatting of IntegersString1 = \"{0:b}\".format(16)print(\"\\nBinary representation of 16 is \")print(String1) # Formatting of FloatsString1 = \"{0:e}\".format(165.6458)print(\"\\nExponent representation of 165.6458 is \")print(String1) # Rounding off IntegersString1 = \"{0:.2f}\".format(1/6)print(\"\\none-sixth is : \")print(String1)\', \'# String alignmentString1 = \"|{:<10}|{:^10}|{:>10}|\".format(\'Geeks\', \'for\', \'Geeks\')print(\"\\nLeft, center and right alignment with Formatting: \")print(String1) # To demonstrate aligning of spacesString1 = \"\\n{0:^16} was founded in {1:<4}!\".format(\"GeeksforGeeks\", 2009)print(String1)\', \'# Python Program for# Old Style Formatting# of Integers Integer1 = 12.3456789print(\"Formatting in 3.2f format: \")print(\'The value of Integer1 is %3.2f\' % Integer1)print(\"\\nFormatting in 3.4f format: \")print(\'The value of Integer1 is %3.4f\' % Integer1)\']','[\'String with the use of Single Quotes: \nWelcome to the Geeks World\n\nString with the use of Double Quotes: \nI\'m a Geek\n\nString with the use of Triple Quotes: \nI\'m a Geek and I live in a world of \"Geeks\"\n\nCreating a multiline String: \nGeeks\n            For\n            Life\', \'Initial String: \nGeeksForGeeks\n\nFirst character of String is: \nG\n\nLast character of String is: \ns\', \'Initial String: \nGeeksForGeeks\n\nSlicing characters from 3-12: \nksForGeek\n\nSlicing characters between 3rd and 2nd last character: \nksForGee\', \"Initial String: \nHello, I\'m a Geek\n\nUpdated String: \nWelcome to the Geek World\", \'Initial String with use of Triple Quotes: \nI\'m a \"Geek\"\n\nEscaping Single Quote: \nI\'m a \"Geek\"\n\nEscaping Double Quotes: \nI\'m a \"Geek\"\n\nEscaping Backslashes: \nC:\\Python\\Geeks\\\', \'Printing in HEX with the use of Escape Sequences: \nThis is Geeks in HEX\n\nPrinting Raw String in HEX Format: \nThis is \\x47\\x65\\x65\\x6b\\x73 in \\x48\\x45\\x58\', \'Print String in default order: \nGeeks For Life\n\nPrint String in Positional order: \nFor Geeks Life\n\nPrint String in order of Keywords: \nLife For Geeks\', \'Binary representation of 16 is \n10000\n\nExponent representation of 165.6458 is \n1.656458e+02\n\none-sixth is : \n0.17\', \'Left, center and right alignment with Formatting: \n|Geeks     |   for    |     Geeks|\n\n GeeksforGeeks   was founded in 2009 !\', \'Formatting in 3.2f format: \nThe value of Integer1 is 12.35\n\nFormatting in 3.4f format: \nThe value of Integer1 is 12.3457\']','[\'string.ascii_letters|||Concatenation of the ascii_lowercase and ascii_uppercase constants.&&&string.ascii_lowercase|||Concatenation of lowercase letters&&&string.ascii_uppercase|||Concatenation of uppercase letters&&&string.digits|||Digit in strings&&&string.hexdigits|||Hexadigit in strings&&&string.letters|||concatenation of the strings lowercase and uppercase&&&string.lowercase|||A string must contain lowercase letters.&&&string.octdigits|||Octadigit in a string&&&string.punctuation|||ASCII characters having punctuation characters.&&&string.printable|||String of characters which are printable&&&String.endswith()|||Returns True if a string ends with the given suffix otherwise returns False&&&String.startswith()|||Returns True if a string starts with the given prefix otherwise returns False&&&String.isdigit()|||Returns “True” if all characters in the string are digits, Otherwise, It returns “False”.&&&String.isalpha()|||Returns “True” if all characters in the string are alphabets, Otherwise, It returns “False”.&&&string.isdecimal()|||Returns true if all characters in a string are decimal.&&&str.format()|||one of the string formatting methods in Python3, which allows multiple substitutions and value formatting.&&&String.index|||Returns the position of the first occurrence of substring in a string&&&string.uppercase|||A string must contain uppercase letters.&&&string.whitespace|||A string containing all characters that are considered whitespace.&&&string.swapcase()|||Method converts all uppercase characters to lowercase and vice versa of the given string, and returns it&&&replace()|||returns a copy of the string where all occurrences of a substring is replaced with another substring.\', \'string.Isdecimal|||Returns true if all characters in a string are decimal&&&String.Isalnum|||Returns true if all the characters in a given string are alphanumeric.&&&string.Istitle|||Returns True if the string is a title cased string&&&String.partition|||splits the string at the first occurrence of the separator and returns a tuple.&&&String.Isidentifier|||Check whether a string is a valid identifier or not.&&&String.len|||Returns the length of the string.&&&String.rindex|||Returns the highest index of the substring inside the string if substring is found.&&&String.Max|||Returns the highest alphabetical character in a string.&&&String.min|||Returns the minimum alphabetical character in a string.&&&String.splitlines|||Returns a list of lines in the string.&&&string.capitalize|||Return a word with its first character capitalized.&&&string.expandtabs|||Expand tabs in a string replacing them by one or more spaces&&&string.find|||Return the lowest indexing a sub string.&&&string.rfind|||find the highest index.&&&string.count|||Return the number of (non-overlapping) occurrences of substring sub in string&&&string.lower|||Return a copy of s, but with upper case, letters converted to lower case.&&&string.split|||Return a list of the words of the string, If the optional second argument sep is absent or None&&&string.rsplit()|||Return a list of the words of the string s, scanning s from the end.&&&rpartition()|||Method splits the given string into three parts&&&string.splitfields|||Return a list of the words of the string when only used with two arguments.&&&string.join|||Concatenate a list or tuple of words with intervening occurrences of sep.&&&string.strip()|||It returns a copy of the string with both leading and trailing white spaces removed&&&string.lstrip|||Return a copy of the string with leading white spaces removed.&&&string.rstrip|||Return a copy of the string with trailing white spaces removed.&&&string.swapcase|||Converts lower case letters to upper case and vice versa.&&&string.translate|||Translate the characters using table&&&string.upper|||lower case letters converted to upper case.&&&string.ljust|||left-justify in a field of given width.&&&string.rjust|||Right-justify in a field of given width.&&&string.center()|||Center-justify in a field of given width.&&&string-zfill|||Pad a numeric string on the left with zero digits until the given width is reached.&&&string.replace|||Return a copy of string s with all occurrences of substring old replaced by new.&&&string.casefold()|||Returns the string in lowercase which can be used for caseless comparisons.&&&string.encode|||Encodes the string into any encoding supported by Python. The default encoding is utf-8.&&&string.maketrans|||Returns a translation table usable for str.translate()\']','[\'Logical Operators on String|||String Formatting using %|||String Template Class|||Split a string|||Python Docstrings|||String slicing|||Find all duplicate characters in string|||Reverse string in Python (5 different ways)|||Python program to check if a string is palindrome or not&&&Strings – Set 1, Set 2|||String Methods – Set 1 , Set 2 , Set 3|||Regular Expressions (Search, Match and Find All)|||Python String Title method|||Swap commas and dots in a String|||Program to convert String to a List|||Count and display vowels in a string|||Python program to check the validity of a Password|||Python program to count number of vowels using sets in given string|||Check for URL in a String|||Check if a Substring is Present in a Given String|||Check if two strings are anagram or not|||Map function and Dictionary in Python to sum ASCII values|||Map function and Lambda expression in Python to replace characters|||SequenceMatcher in Python for Longest Common Substring|||Print the initials of a name with last name in full|||The k most frequent words from data set in Python|||Find all close matches of input string from a list|||Check if there are K consecutive 1’s in a binary number|||Lambda and filter in Python|||Concatenated string with uncommon characters in Python|||Check if both halves of the string have same set of characters in Python|||Find the first repeated word in a string in Python|||Second most repeated word in a sequence in Python|||K’th Non-repeating Character in Python|||Reverse words in a given String in Python|||Print number with commas as 1000 separators in Python|||Prefix matching in Python using pytrie module|||Python Regex to extract maximum numeric value from a string|||Pairs of complete strings in two sets|||Remove all duplicates words from a given sentence|||Sort words of sentence in ascending order|||Reverse each word in a sentence|||Python code to print common characters of two Strings in alphabetical order|||Python program to split and join a string|||Python code to move spaces to front of string in single traversal|||Run Length Encoding in Python|||Remove all duplicates from a given string in Python|||Ways to increment a character in Python|||Prefix matching in Python using pytrie module|||Print number with commas as 1000 separators in Python|||Reverse words in a given String in Python|||Execute a String of Code in Python|||String slicing in Python to check if a string can become empty by recursive deletion|||Ways to print escape characters in Python|||String slicing in Python to rotate a string|||Count occurrences of a word in string|||Find the k most frequent words from data set in Python|||Python | Print the initials of a name with last name in full|||Zip function in Python to change to a new character set|||Python String isnumeric() and its application|||Sort the words in lexicographical order in Python|||Find the Number Occurring Odd Number of Times using Lambda expression and reduce function|||Python String Title method|||Sort words of sentence in ascending order|||Convert a list of characters into a string|||Python groupby method to remove all consecutive duplicates|||Python groupby method to remove all consecutive duplicates|||Python program for removing i-th character from a string|||Replacing strings with numbers in Python for Data Analysis|||Formatted string literals (f-strings) in Python|||Python Docstrings|||Permutation of a given string using inbuilt function|||Find frequency of each word in a string in Python|||Program to accept the strings which contains all vowels|||Count the Number of matching characters in a pair of string|||Count all prefixes in given string with greatest frequency|||Program to check if a string contains any special character|||Generating random strings until a given string is generated|||Python program to count upper and lower case characters without using inbuilt functions\']'),(27,'[\'Python Lists\']','[\'Creating a List\', \'Python3\', \'Python3\', \'Knowing the size of List\', \'Python3\', \'Adding Elements to a List\', \'Python3\', \'Python3\', \'Python3\', \'Accessing elements from the List\', \'Python3\', \'Python3\', \'Removing Elements from the List\', \'Python3\', \'Python3\', \'Slicing of a List\', \'Python3\', \'Python3\', \'List Comprehension\', \'Python3\', \'Python3\', \'Operations on List\', \'List Methods\']','[\'Creating a list with multiple distinct or duplicate elements\', \'Using append() method\', \'Using insert() method\', \'Using extend() method\', \'Negative indexing\', \'Using remove() method\', \'Using pop() method\', \'Negative index List slicing\', \'Built-in functions with List\', \'Recent articles on Lists\', \'More on Python List –\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/List-Slicing.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://www.geeksforgeeks.org/#cl\', \'https://www.geeksforgeeks.org/#ksl\', \'https://www.geeksforgeeks.org/#ael\', \'https://www.geeksforgeeks.org/#uam\', \'https://www.geeksforgeeks.org/#uim\', \'https://www.geeksforgeeks.org/#uem\', \'https://www.geeksforgeeks.org/#ael\', \'https://www.geeksforgeeks.org/#rel\', \'https://www.geeksforgeeks.org/#urm\', \'https://www.geeksforgeeks.org/#upm\', \'https://www.geeksforgeeks.org/#sl\', \'https://www.geeksforgeeks.org/#lc\', \'https://www.geeksforgeeks.org/#ool\', \'https://www.geeksforgeeks.org/#lm\', \'https://www.geeksforgeeks.org/python-sets/\', \'https://www.geeksforgeeks.org/list-methods-python/\', \'https://www.geeksforgeeks.org/append-extend-python/\', \'https://www.geeksforgeeks.org/append-extend-python/\', \'https://www.geeksforgeeks.org/python-list-remove/\', \'https://www.geeksforgeeks.org/python-list-remove/\', \'https://www.geeksforgeeks.org/python-list-pop/\', \'https://www.geeksforgeeks.org/python-list-comprehension-and-slicing/\', \'https://www.geeksforgeeks.org/python-list-comprehension/\', \'https://www.geeksforgeeks.org/python-list-comprehension-and-slicing/\', \'https://www.geeksforgeeks.org/nested-list-comprehensions-in-python/\', \'https://www.geeksforgeeks.org/list-comprehension-and-ord-in-python-to-remove-all-characters-other-than-alphabets/\', \'https://www.geeksforgeeks.org/python-ways-to-find-length-of-list/\', \'https://www.geeksforgeeks.org/iterate-over-a-list-in-python/\', \'https://www.geeksforgeeks.org/python-ways-to-concatenate-two-lists/\', \'https://www.geeksforgeeks.org/python-membership-identity-operators-not-not/\', \'https://www.geeksforgeeks.org/append-extend-python/\', \'https://www.geeksforgeeks.org/append-extend-python/\', \'https://www.geeksforgeeks.org/list-methods-in-python-set-2-del-remove-sort-insert-pop-extend/\', \'https://www.geeksforgeeks.org/list-methods-in-python-set-2-del-remove-sort-insert-pop-extend/\', \'https://www.geeksforgeeks.org/list-methods-in-python-set-2-del-remove-sort-insert-pop-extend/\', \'https://www.geeksforgeeks.org/list-methods-in-python-set-2-del-remove-sort-insert-pop-extend/\', \'https://www.geeksforgeeks.org/python-list-index/\', \'https://www.geeksforgeeks.org/python-list-function-count/\', \'https://www.geeksforgeeks.org/sort-in-python/\', \'https://www.geeksforgeeks.org/list-methods-in-python-set-2-del-remove-sort-insert-pop-extend/\', \'https://www.geeksforgeeks.org/python-list-copy-method/\', \'https://www.geeksforgeeks.org/reduce-in-python/\', \'https://www.geeksforgeeks.org/sum-function-python/\', \'https://www.geeksforgeeks.org/ord-function-python/\', \'https://www.geeksforgeeks.org/python-2-number-cmplist-method/\', \'https://www.geeksforgeeks.org/any-all-in-python/\', \'https://www.geeksforgeeks.org/any-all-in-python/\', \'https://www.geeksforgeeks.org/enumerate-in-python/\', \'https://www.geeksforgeeks.org/filter-in-python/\', \'https://www.geeksforgeeks.org/python-map-function/\', \'https://www.geeksforgeeks.org/python-lambda-anonymous-functions-filter-map-reduce/\', \'https://www.geeksforgeeks.org/tag/python-list/\', \'https://youtu.be/1Ej7ry6jacg\', \'https://www.geeksforgeeks.org/python-creating-3d-list/\', \'https://www.geeksforgeeks.org/iterate-over-a-list-in-python/\', \'https://www.geeksforgeeks.org/python-iterate-multiple-lists-simultaneously/\', \'https://www.geeksforgeeks.org/internal-working-of-list-in-python/\', \'https://www.geeksforgeeks.org/python-slicing-reverse-array-groups-given-size/\', \'https://www.geeksforgeeks.org/python-list-comprehensions-vs-generator-expressions/\', \'https://www.geeksforgeeks.org/list-methods-in-python-set-1-in-not-in-len-min-max/\', \'https://www.geeksforgeeks.org/list-methods-python/\', \'https://www.geeksforgeeks.org/intersection-two-arrays-python-lambda-expression-filter-function/\', \'https://www.geeksforgeeks.org/tag/python-list/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://www.geeksforgeeks.org/output-python-program-set-6/\', \'https://www.geeksforgeeks.org/output-python-program-set-11lists/\', \'https://www.geeksforgeeks.org/output-python-program-set-12lists-tuples/\', \'https://www.geeksforgeeks.org/output-python-program-set-13lists-tuples/\', \'https://www.geeksforgeeks.org/python-multiple-choice-questions/\', \'https://www.geeksforgeeks.org/category/python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note- Lists are a useful tool for preserving a sequence of data and further iterating over it.\', \'Table of content:xa0\', \'Note – Unlike Sets, the list may contain mutable elements.xa0xa0\', \'Note – append() and extend() methods can only add elements at the end.\', \'Note – Remove method in List will only remove the first occurrence of the searched element.\', \'Note – To print elements of List from rear-end, use Negative Indexes.xa0\', \'newList = [ expression(element) for element in oldList if condition ]\', \'For better understanding, the above code is similar to –xa0\', \'Refer to the below articles to get detailed information about List Comprehension.\', \'More videos on Python Lists: Python List – Set 2\', \'Useful Links:xa0\']','[\'Lists are just like dynamically sized arrays, declared in other languages (vector in C++ and ArrayList in Java). Lists need not be homogeneous always which makes it the most powerful tool in Python. A single list may contain DataTypes like Integers, Strings, as well as Objects. Lists are mutable, and hence, they can be altered even after their creation.\', \'List in Python are ordered and have a definite count. The elements in a list are indexed according to a definite sequence and the indexing of a list is done with 0 being the first index. Each element in the list has its definite place in the list, which allows duplicating of elements in the list, with each element having its own distinct place and credibility.\', \'Lists in Python can be created by just placing the sequence inside the square brackets[]. Unlike Sets, a list doesn’t need a built-in function for the creation of a list.xa0\', \'A list may contain duplicate values with their distinct positions and hence, multiple distinct or duplicate values can be passed as a sequence at the time of list creation.\', \'append() method only works for the addition of elements at the end of the List, for the addition of elements at the desired position, insert() method is used. Unlike append() which takes only one argument, the insert() method requires two arguments(position, value).xa0\', \'Other than append() and insert() methods, there’s one more method for the Addition of elements, extend(), this method is used to add multiple elements at the same time at the end of the list.\', \'In order to access the list items refer to the index number. Use the index operator [ ] to access an item in a list. The index must be an integer. Nested lists are accessed using nested indexing.xa0\', \'In Python, negative sequence indexes represent positions from the end of the array. Instead of having to compute the offset as in List[len(List)-3], it is enough to just write List[-3]. Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second-last item, etc.\', \'Elements can be removed from the List by using the built-in remove() function but an Error arises if the element doesn’t exist in the list. Remove() method only removes one element at a time, to remove a range of elements, the iterator is used. The remove() method removes the specified item.\', \'Pop() function can also be used to remove and return an element from the list, but by default it removes only the last element of the list, to remove an element from a specific position of the List, the index of the element is passed as an argument to the pop() method.\', \'List comprehensions are used for creating new lists from other iterables like tuples, strings, arrays, lists, etc.A list comprehension consists of brackets containing the expression, which is executed for each element along with the for loop to iterate over each element.xa0\']','[\'Elements can be added to the List by using the built-in append() function. Only one element at a time can be added to the list by using the append() method, for the addition of multiple elements with the append() method, loops are used. Tuples can also be added to the list with the use of the append method because tuples are immutable. Unlike Sets, Lists can also be added to the existing list with the use of the append() method.\', \'In Python List, there are multiple ways to print the whole List with all the elements, but to print a specific range of elements from the list, we use the Slice operation. Slice operation is performed on Lists with the use of a colon(:). To print elements from beginning to a range use [: Index], to print elements from end-use [:-Index], to print elements from specific Index till the end use [Index:], to print elements within a range, use [Start Index:End Index] and to print the whole List with the use of slicing operation, use [:]. Further, to print the whole List in reverse order, use [::-1].\']','[\'# Python program to demonstrate# Creation of List # Creating a ListList = []print(\"Blank List: \")print(List) # Creating a List of numbersList = [10, 20, 14]print(\"\\nList of numbers: \")print(List) # Creating a List of strings and accessing# using indexList = [\"Geeks\", \"For\", \"Geeks\"]print(\"\\nList Items: \")print(List[0])print(List[2]) # Creating a Multi-Dimensional List# (By Nesting a list inside a List)List = [[\'Geeks\', \'For\'], [\'Geeks\']]print(\"\\nMulti-Dimensional List: \")print(List)\', \'# Creating a List with# the use of Numbers# (Having duplicate values)List = [1, 2, 4, 4, 3, 3, 3, 6, 5]print(\"\\nList with the use of Numbers: \")print(List) # Creating a List with# mixed type of values# (Having numbers and strings)List = [1, 2, \'Geeks\', 4, \'For\', 6, \'Geeks\']print(\"\\nList with the use of Mixed Values: \")print(List)\', \'# Creating a ListList1 = []print(len(List1)) # Creating a List of numbersList2 = [10, 20, 14]print(len(List2))\', \'# Python program to demonstrate# Addition of elements in a List # Creating a ListList = []print(\"Initial blank List: \")print(List) # Addition of Elements# in the ListList.append(1)List.append(2)List.append(4)print(\"\\nList after Addition of Three elements: \")print(List) # Adding elements to the List# using Iteratorfor i in range(1, 4):    List.append(i)print(\"\\nList after Addition of elements from 1-3: \")print(List) # Adding Tuples to the ListList.append((5, 6))print(\"\\nList after Addition of a Tuple: \")print(List) # Addition of List to a ListList2 = [\'For\', \'Geeks\']List.append(List2)print(\"\\nList after Addition of a List: \")print(List)\', \'# Python program to demonstrate# Addition of elements in a List  # Creating a ListList = [1,2,3,4]print(\"Initial List: \")print(List) # Addition of Element at# specific Position# (using Insert Method)List.insert(3, 12)List.insert(0, \'Geeks\')print(\"\\nList after performing Insert Operation: \")print(List)\', \'# Python program to demonstrate# Addition of elements in a List # Creating a ListList = [1, 2, 3, 4]print(\"Initial List: \")print(List) # Addition of multiple elements# to the List at the end# (using Extend Method)List.extend([8, \'Geeks\', \'Always\'])print(\"\\nList after performing Extend Operation: \")print(List)\', \'# Python program to demonstrate# accessing of element from list # Creating a List with# the use of multiple valuesList = [\"Geeks\", \"For\", \"Geeks\"] # accessing a element from the# list using index numberprint(\"Accessing a element from the list\")print(List[0])print(List[2]) # Creating a Multi-Dimensional List# (By Nesting a list inside a List)List = [[\'Geeks\', \'For\'], [\'Geeks\']] # accessing an element from the# Multi-Dimensional List using# index numberprint(\"Accessing a element from a Multi-Dimensional list\")print(List[0][1])print(List[1][0])\', \'List = [1, 2, \'Geeks\', 4, \'For\', 6, \'Geeks\'] # accessing an element using# negative indexingprint(\"Accessing element using negative indexing\") # print the last element of listprint(List[-1]) # print the third last element of listprint(List[-3])\', \'# Python program to demonstrate# Removal of elements in a List # Creating a ListList = [1, 2, 3, 4, 5, 6,        7, 8, 9, 10, 11, 12]print(\"Initial List: \")print(List) # Removing elements from List# using Remove() methodList.remove(5)List.remove(6)print(\"\\nList after Removal of two elements: \")print(List) # Removing elements from List# using iterator methodfor i in range(1, 5):    List.remove(i)print(\"\\nList after Removing a range of elements: \")print(List)\', \'List = [1,2,3,4,5] # Removing element from the# Set using the pop() methodList.pop()print(\"\\nList after popping an element: \")print(List) # Removing element at a# specific location from the# Set using the pop() methodList.pop(2)print(\"\\nList after popping a specific element: \")print(List)\', \'# Python program to demonstrate# Removal of elements in a List # Creating a ListList = [\'G\', \'E\', \'E\', \'K\', \'S\', \'F\',        \'O\', \'R\', \'G\', \'E\', \'E\', \'K\', \'S\']print(\"Initial List: \")print(List) # Print elements of a range# using Slice operationSliced_List = List[3:8]print(\"\\nSlicing elements in a range 3-8: \")print(Sliced_List) # Print elements from a# pre-defined point to endSliced_List = List[5:]print(\"\\nElements sliced from 5th \"      \"element till the end: \")print(Sliced_List) # Printing elements from# beginning till endSliced_List = List[:]print(\"\\nPrinting all elements using slice operation: \")print(Sliced_List)\', \'# Creating a ListList = [\'G\', \'E\', \'E\', \'K\', \'S\', \'F\',        \'O\', \'R\', \'G\', \'E\', \'E\', \'K\', \'S\']print(\"Initial List: \")print(List) # Print elements from beginning# to a pre-defined point using SliceSliced_List = List[:-6]print(\"\\nElements sliced till 6th element from last: \")print(Sliced_List) # Print elements of a range# using negative index List slicingSliced_List = List[-6:-1]print(\"\\nElements sliced from index -6 to -1\")print(Sliced_List) # Printing elements in reverse# using Slice operationSliced_List = List[::-1]print(\"\\nPrinting List in reverse: \")print(Sliced_List)\', \'# Python program to demonstrate list# comprehension in Python # below list contains square of all# odd numbers from range 1 to 10odd_square = [x ** 2 for x in range(1, 11) if x % 2 == 1]print(odd_square)\', \'# for understanding, above generation is same as,odd_square = [] for x in range(1, 11):    if x % 2 == 1:        odd_square.append(x**2) print(odd_square)\']','[\"Blank List: \n[]\n\nList of numbers: \n[10, 20, 14]\n\nList Items\nGeeks\nGeeks\n\nMulti-Dimensional List: \n[[\'Geeks\', \'For\'], [\'Geeks\']]\", \"List with the use of Numbers: \n[1, 2, 4, 4, 3, 3, 3, 6, 5]\n\nList with the use of Mixed Values: \n[1, 2, \'Geeks\', 4, \'For\', 6, \'Geeks\']\", \'0\n3\', \"Initial blank List: \n[]\n\nList after Addition of Three elements: \n[1, 2, 4]\n\nList after Addition of elements from 1-3: \n[1, 2, 4, 1, 2, 3]\n\nList after Addition of a Tuple: \n[1, 2, 4, 1, 2, 3, (5, 6)]\n\nList after Addition of a List: \n[1, 2, 4, 1, 2, 3, (5, 6), [\'For\', \'Geeks\']]\", \"Initial List: \n[1, 2, 3, 4]\n\nList after performing Insert Operation: \n[\'Geeks\', 1, 2, 3, 12, 4]\", \"Initial List: \n[1, 2, 3, 4]\n\nList after performing Extend Operation: \n[1, 2, 3, 4, 8, \'Geeks\', \'Always\']\", \'Accessing a element from the list\nGeeks\nGeeks\nAccessing a element from a Multi-Dimensional list\nFor\nGeeks\', \'Accessing element using negative indexing\nGeeks\nFor\', \'Initial List: \n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nList after Removal of two elements: \n[1, 2, 3, 4, 7, 8, 9, 10, 11, 12]\n\nList after Removing a range of elements: \n[7, 8, 9, 10, 11, 12]\', \'List after popping an element: \n[1, 2, 3, 4]\n\nList after popping a specific element: \n[1, 2, 4]\', \"Initial List: \n[\'G\', \'E\', \'E\', \'K\', \'S\', \'F\', \'O\', \'R\', \'G\', \'E\', \'E\', \'K\', \'S\']\n\nSlicing elements in a range 3-8: \n[\'K\', \'S\', \'F\', \'O\', \'R\']\n\nElements sliced from 5th element till the end: \n[\'F\', \'O\', \'R\', \'G\', \'E\', \'E\', \'K\', \'S\']\n\nPrinting all elements using slice operation: \n[\'G\', \'E\', \'E\', \'K\', \'S\', \'F\', \'O\', \'R\', \'G\', \'E\', \'E\', \'K\', \'S\']\", \"Initial List: \n[\'G\', \'E\', \'E\', \'K\', \'S\', \'F\', \'O\', \'R\', \'G\', \'E\', \'E\', \'K\', \'S\']\n\nElements sliced till 6th element from last: \n[\'G\', \'E\', \'E\', \'K\', \'S\', \'F\', \'O\']\n\nElements sliced from index -6 to -1\n[\'R\', \'G\', \'E\', \'E\', \'K\']\n\nPrinting List in reverse: \n[\'S\', \'K\', \'E\', \'E\', \'G\', \'R\', \'O\', \'F\', \'S\', \'K\', \'E\', \'E\', \'G\']\", \'[1, 9, 25, 49, 81]\', \'[1, 9, 25, 49, 81]\']','[\'Append()|||Add an element to the end of the list&&&Extend()|||Add all elements of a list to another list&&&Insert()|||Insert an item at the defined index&&&Remove()|||Removes an item from the list&&&Pop()|||Removes and returns an element at the given index&&&Clear()|||Removes all items from the list&&&Index()|||Returns the index of the first matched item&&&Count()|||Returns the count of the number of items passed as an argument&&&Sort()|||Sort items in a list in ascending order&&&Reverse()|||Reverse the order of items in the list&&&copy()|||Returns a copy of the list\', \'reduce()|||apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation value&&&sum()|||Sums up the numbers in the list&&&ord()|||Returns an integer representing the Unicode code point of the given Unicode character&&&cmp()|||This function returns 1 if the first list is “greater” than the second list&&&max()|||return maximum element of a given list&&&min()|||return minimum element of a given list&&&all()|||Returns true if all element is true or if the list is empty&&&any()|||return true if any element of the list is true. if the list is empty, return false&&&len()|||Returns length of the list or size of the list&&&enumerate()|||Returns enumerate object of the list&&&accumulate()|||apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate results&&&filter()|||tests if each element of a list is true or not&&&map()|||returns a list of the results after applying the given function to each item of a given iterable&&&lambda()|||This function can have any number of arguments but only one expression, which is evaluated and returned.\']','[\'Creating a List|||Knowing the size of List|||Adding Elements to a List:Using append() methodUsing insert() methodUsing extend() method|||Using append() method|||Using insert() method|||Using extend() method|||Accessing elements from the List|||Removing Elements from the List:Using remove() methodUsing pop() method|||Using remove() method|||Using pop() method|||Slicing of a List|||List Comprehension|||Operations on List|||List Methods&&&Using append() method|||Using insert() method|||Using extend() method&&&Using remove() method|||Using pop() method&&&Python List Comprehension and Slicing|||Nested List Comprehensions in Python|||List comprehension and ord() in Python&&&Find length of list|||Iterate over a list in Python|||Concatenating two lists in Python|||List Membership Test&&&Creating a 3D List|||Iterate over a list in Python|||Iterate over multiple lists simultaneously|||Internal working of list in Python|||Python Slicing|||Python List Comprehensions vs Generator Expressions|||List Methods in Python – Set 1 Set 2|||Lambda expression and filter function&&&Recent Articles on Python List|||Python Tutorials|||Python Output Programs in List: Set 6, Set 11, Set 12, Set 13|||Multiple Choice Questions|||All articles in Python Category\']'),(28,'[\'Python Tuples\']','[\'Creating a Tuple\', \'Python3\', \'Python3\', \'Accessing of Tuples\', \'Python3\', \'Concatenation of Tuples\', \'Python3\', \'Slicing of Tuple\', \'Python3\', \'Deleting a Tuple\', \'Python\']','[\'Recent Articles on Tuple\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/Tuple-Concatenation-1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/Slicing-of-Tuple-1.jpg\']','[\'https://www.youtube.com/embed/lv_Z6loukOs?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/unpacking-a-tuple-in-python/\', \'https://www.geeksforgeeks.org/python-list-index/\', \'https://www.geeksforgeeks.org/python-list-count-method/\', \'https://www.geeksforgeeks.org/python-all-function/\', \'https://www.geeksforgeeks.org/python-any-function/\', \'https://www.geeksforgeeks.org/python-string-length-len/\', \'https://www.geeksforgeeks.org/enumerate-in-python/\', \'https://www.geeksforgeeks.org/python-max-function/\', \'https://www.geeksforgeeks.org/python-min-function/\', \'https://www.geeksforgeeks.org/sum-function-python/\', \'https://www.geeksforgeeks.org/sorted-function-python/\', \'https://www.geeksforgeeks.org/python-tuple-function/\', \'https://www.geeksforgeeks.org/tag/python-tuple/\', \'https://www.geeksforgeeks.org/python-print-unique-rows-given-boolean-matrix-using-set-tuples/\', \'https://www.geeksforgeeks.org/program-generate-possible-valid-ip-addresses-given-string/\', \'https://www.geeksforgeeks.org/python-dictionary-find-mirror-characters-string/\', \'https://www.geeksforgeeks.org/generate-two-output-strings-depending-upon-occurrence-character-input-string-python/\', \'https://www.geeksforgeeks.org/python-groupby-method-remove-consecutive-duplicates/\', \'https://www.geeksforgeeks.org/python-convert-list-characters-string/\', \'https://www.geeksforgeeks.org/python-remove-empty-tuples-list/\', \'https://www.geeksforgeeks.org/python-reversing-tuple/\', \'https://www.geeksforgeeks.org/python-modf-function/\', \'https://www.geeksforgeeks.org/python-convert-list-tuples-dictionary/\', \'https://www.geeksforgeeks.org/python-sort-tuple-float-element/\', \'https://www.geeksforgeeks.org/python-count-occurrences-element-tuple/\', \'https://www.geeksforgeeks.org/python-count-elements-list-element-tuple/\', \'https://www.geeksforgeeks.org/python-sort-tuples-increasing-order-key/\', \'https://www.geeksforgeeks.org/namedtuple-in-python/\', \'https://www.geeksforgeeks.org/output-python-programs-set-20-tuples/\', \'https://www.geeksforgeeks.org/tag/python-tuple/\', \'https://www.geeksforgeeks.org/python-multiple-choice-questions/\', \'https://www.geeksforgeeks.org/category/python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: Creation of Python tuple without the use of parentheses is known as Tuple Packing.xa0xa0\', \'Note- Negative Increment values can also be used to reverse the sequence of Tuples.xa0\', \'Note- Printing of Tuple after deletion results in an Error.xa0\', \'Tuples Programs\', \'Useful Links:\']','[\'Tuple is a collection of Python objects much like a list. The sequence of values stored in a tuple can be of any type, and they are indexed by integers.xa0\', \'Values of a tuple are syntactically separated by ‘commas’. Although it is not necessary, it is more common to define a tuple by closing the sequence of values in parentheses. This helps in understanding the Python tuples more easily.\', \'In Python, tuples are created by placing a sequence of values separated by ‘comma’ with or without the use of parentheses for grouping the data sequence.\', \'Tuples can contain any number of elements and of any datatype (like strings, integers, list, etc.). Tuples can also be created with a single element, but it is a bit tricky. Having one element in the parentheses is not sufficient, there must be a trailing ‘comma’ to make it a tuple.xa0\', \'Tuples are immutable, and usually, they contain a sequence of heterogeneous elements that are accessed via unpacking or indexing (or even by attribute in the case of named tuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list.\', \'Note: In unpacking of tuple number of variables on the left-hand side should be equal to a number of values in given tuple a.xa0\', \'Concatenation of tuple is the process of joining two or more Tuples. Concatenation is done by the use of ‘+’ operator. Concatenation of tuples is done always from the end of the original tuple. Other arithmetic operations do not apply on Tuples.xa0\', \'Note- Only the same datatypes can be combined with concatenation, an error arises if a list and a tuple are combined.xa0\', \'Slicing of a Tuple is done to fetch a specific range or slice of sub-elements from a Tuple. Slicing can also be done to lists and arrays. Indexing in a list results to fetching a single element whereas Slicing allows to fetch a set of elements.xa0\', \'Tuples are immutable and hence they do not allow deletion of a part of it. The entire tuple gets deleted by the use of del() method.xa0\', \'Traceback (most recent call last):xa0File “/home/efa50fd0709dec08434191f32275928a.py”, line 7, inxa0print(Tuple1)xa0NameError: name ‘Tuple1’ is not defined\']','[]','[\'# Creating an empty TupleTuple1 = ()print(\"Initial empty Tuple: \")print(Tuple1) # Creating a Tuple# with the use of stringTuple1 = (\'Geeks\', \'For\')print(\"\\nTuple with the use of String: \")print(Tuple1) # Creating a Tuple with# the use of listlist1 = [1, 2, 4, 5, 6]print(\"\\nTuple using List: \")print(tuple(list1)) # Creating a Tuple# with the use of built-in functionTuple1 = tuple(\'Geeks\')print(\"\\nTuple with the use of function: \")print(Tuple1)\', \'# Creating a Tuple# with Mixed DatatypeTuple1 = (5, \'Welcome\', 7, \'Geeks\')print(\"\\nTuple with Mixed Datatypes: \")print(Tuple1) # Creating a Tuple# with nested tuplesTuple1 = (0, 1, 2, 3)Tuple2 = (\'python\', \'geek\')Tuple3 = (Tuple1, Tuple2)print(\"\\nTuple with nested tuples: \")print(Tuple3) # Creating a Tuple# with repetitionTuple1 = (\'Geeks\',) * 3print(\"\\nTuple with repetition: \")print(Tuple1) # Creating a Tuple# with the use of loopTuple1 = (\'Geeks\')n = 5print(\"\\nTuple with a loop\")for i in range(int(n)):    Tuple1 = (Tuple1,)    print(Tuple1)\', \'# Accessing Tuple# with IndexingTuple1 = tuple(\"Geeks\")print(\"\\nFirst element of Tuple: \")print(Tuple1[0])  # Tuple unpackingTuple1 = (\"Geeks\", \"For\", \"Geeks\") # This line unpack# values of Tuple1a, b, c = Tuple1print(\"\\nValues after unpacking: \")print(a)print(b)print(c)\', \'# Concatenation of tuplesTuple1 = (0, 1, 2, 3)Tuple2 = (\'Geeks\', \'For\', \'Geeks\') Tuple3 = Tuple1 + Tuple2 # Printing first Tupleprint(\"Tuple 1: \")print(Tuple1) # Printing Second Tupleprint(\"\\nTuple2: \")print(Tuple2) # Printing Final Tupleprint(\"\\nTuples after Concatenation: \")print(Tuple3)\', \'# Slicing of a Tuple # Slicing of a Tuple# with NumbersTuple1 = tuple(\'GEEKSFORGEEKS\') # Removing First elementprint(\"Removal of First Element: \")print(Tuple1[1:]) # Reversing the Tupleprint(\"\\nTuple after sequence of Element is reversed: \")print(Tuple1[::-1]) # Printing elements of a Rangeprint(\"\\nPrinting elements between Range 4-9: \")print(Tuple1[4:9])\', \'# Deleting a Tuple Tuple1 = (0, 1, 2, 3, 4)del Tuple1 print(Tuple1)\']','[\"Initial empty Tuple: \n()\n\nTuple with the use of String: \n(\'Geeks\', \'For\')\n\nTuple using List: \n(1, 2, 4, 5, 6)\n\nTuple with the use of function: \n(\'G\', \'e\', \'e\', \'k\', \'s\')\", \"Tuple with Mixed Datatypes: \n(5, \'Welcome\', 7, \'Geeks\')\n\nTuple with nested tuples: \n((0, 1, 2, 3), (\'python\', \'geek\'))\n\nTuple with repetition: \n(\'Geeks\', \'Geeks\', \'Geeks\')\n\nTuple with a loop\n(\'Geeks\',)\n((\'Geeks\',),)\n(((\'Geeks\',),),)\n((((\'Geeks\',),),),)\n(((((\'Geeks\',),),),),)\", \'First element of Tuple: \nG\n\nValues after unpacking: \nGeeks\nFor\nGeeks\', \"Tuple 1: \n(0, 1, 2, 3)\n\nTuple2: \n(\'Geeks\', \'For\', \'Geeks\')\n\nTuples after Concatenation: \n(0, 1, 2, 3, \'Geeks\', \'For\', \'Geeks\')\", \"Removal of First Element: \n(\'E\', \'E\', \'K\', \'S\', \'F\', \'O\', \'R\', \'G\', \'E\', \'E\', \'K\', \'S\')\n\nTuple after sequence of Element is reversed: \n(\'S\', \'K\', \'E\', \'E\', \'G\', \'R\', \'O\', \'F\', \'S\', \'K\', \'E\', \'E\', \'G\')\n\nPrinting elements between Range 4-9: \n(\'S\', \'F\', \'O\', \'R\', \'G\')\"]','[\'index( )|||Find in the tuple and returns the index of the given value where it’s available&&&count( )|||Returns the frequency of occurrence of a specified value\', \'Returns true if all element are true or if tuple is empty&&&return true if any element of the tuple is true. if tuple is empty, return false&&&Returns length of the tuple or size of the tuple&&&Returns enumerate object of tuple&&&return maximum element of given tuple&&&return minimum element of given tuple&&&Sums up the numbers in the tuple&&&input elements in the tuple and return a new sorted list&&&Convert an iterable to a tuple.\']','[\'Print unique rows in a given boolean Strings|||Program to generate all possible valid IP addresses from given string|||Python Dictionary to find mirror characters in a string|||Generate two output strings depending upon occurrence of character in input string in Python|||Python groupby method to remove all consecutive duplicates|||Convert a list of characters into a string|||Remove empty tuples from a list|||Reversing a Tuple|||Python Set symmetric_difference()|||Convert a list of Tuples into Dictionary|||Sort a tuple by its float element|||Count occurrences of an element in a Tuple|||Count the elements in a list until an element is a Tuple|||Sort Tuples in Increasing Order by any key|||Namedtuple in Python&&&Output of Python Programs|||Recent Articles on Python Tuples|||Multiple Choice Questions – Python|||All articles in Python Category\']'),(29,'[\'Python Sets\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[\'Creating a Set\', \'Adding Elements to a Set\', \'Accessing a Set\', \'Removing elements from the Set\', \'Set Methods\', \'Recent Articles on Python Sets\', \'Set Programs\']','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/set-add-python/\', \'https://www.geeksforgeeks.org/python-remove-discard-sets/\', \'https://www.geeksforgeeks.org/set-clear-python/\', \'https://www.geeksforgeeks.org/set-copy-python/\', \'https://www.geeksforgeeks.org/python-set-pop/\', \'https://www.geeksforgeeks.org/python-set-update/\', \'https://www.geeksforgeeks.org/union-function-python/\', \'https://www.geeksforgeeks.org/python-set-difference/\', \'https://www.geeksforgeeks.org/python-set-difference_update/\', \'https://www.geeksforgeeks.org/python-remove-discard-sets/\', \'https://www.geeksforgeeks.org/intersection-function-python/\', \'https://www.geeksforgeeks.org/isdisjoint-function-python/\', \'https://www.geeksforgeeks.org/issubset-in-python/\', \'https://www.geeksforgeeks.org/issuperset-in-python/\', \'https://www.geeksforgeeks.org/python-set-symmetric_difference-2/\', \'https://www.geeksforgeeks.org/python-set-symmetric_difference_update/\', \'https://www.geeksforgeeks.org/tag/python-set/\', \'https://www.geeksforgeeks.org/python-program-to-accept-the-strings-which-contains-all-vowels/\', \'https://www.geeksforgeeks.org/python-program-find-common-elements-three-lists-using-sets/\', \'https://www.geeksforgeeks.org/python-find-missing-additional-values-two-lists/\', \'https://www.geeksforgeeks.org/python-set-pairs-complete-strings-two-sets/\', \'https://www.geeksforgeeks.org/python-set-check-whether-given-string-heterogram-not/\', \'https://www.geeksforgeeks.org/python-maximum-minimum-set/\', \'https://www.geeksforgeeks.org/python-remove-items-set/\', \'https://www.geeksforgeeks.org/python-set-difference-find-lost-element-duplicated-array/\', \'https://www.geeksforgeeks.org/python-minimum-number-subsets-distinct-elements-using-counter/\', \'https://www.geeksforgeeks.org/python-check-two-lists-least-one-element-common/\', \'https://www.geeksforgeeks.org/python-program-count-number-vowels-using-sets-given-string/\', \'https://www.geeksforgeeks.org/python-difference-two-lists/\', \'https://www.geeksforgeeks.org/python-set-check-string-panagram/\', \'https://www.geeksforgeeks.org/python-set-operations-union-intersection-difference-symmetric-difference/\', \'https://www.geeksforgeeks.org/concatenated-string-uncommon-characters-python/\', \'https://www.geeksforgeeks.org/python-dictionary-set-counter-check-frequencies-can-become/\', \'https://www.geeksforgeeks.org/using-set-python-pangram-checking/\', \'https://www.geeksforgeeks.org/set-update-python-union-n-arrays/\', \'https://www.geeksforgeeks.org/output-python-programs-set-24-sets/\', \'https://www.geeksforgeeks.org/tag/python-set/\', \'https://www.geeksforgeeks.org/python-multiple-choice-questions/\', \'https://www.geeksforgeeks.org/category/python/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Note – A set cannot have mutable elements like a list or dictionary, as it is immutable.xa0xa0\', \'To remove all the elements from the set, clear() function is used.xa0\', \'If no parameters are passed, it returns an empty frozenset.xa0xa0\']','[\'In Python, Set is an unordered collection of data type that is iterable, mutable and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements.\', \'The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set.\', \'Sets can be created by using the built-in set() function with an iterable object or a sequence by placing the sequence inside curly braces, separated by ‘comma’.\', \'A set contains only unique elements but at the time of set creation, multiple duplicate values can also be passed. Order of elements in a set is undefined and is unchangeable. Type of elements in a set need not be the same, various mixed up data type values can also be passed to the set.xa0\', \'Elements can be added to the Set by using built-in add() function. Only one element at a time can be added to the set by using add() method, loops are used to add multiple elements at a time with the use of add() method.\', \'Note – Lists cannot be added to a set as elements because Lists are not hashable whereas Tuples can be added because tuples are immutable and hence Hashable.xa0\', \'For addition of two or more elements Update() method is used. The update() method accepts lists, strings, tuples as well as other sets as its arguments. In all of these cases, duplicate elements are avoided.\', \'Set items cannot be accessed by referring to an index, since sets are unordered the items has no index. But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.\', \'Elements can be removed from the Set by using built-in remove() function but a KeyError arises if element doesn’t exist in the set. To remove elements from a set without KeyError, use discard(), if the element doesn’t exist in the set, it remains unchanged.\', \'Pop() function can also be used to remove and return an element from the set, but it removes only the last element of the set.xa0Note – If the set is unordered then there’s no such way to determine which element is popped by using the pop() function.xa0\', \'Frozen sets in Python are immutable objects that only support methods and operators that produce a result without affecting the frozen set or sets to which they are applied. While elements of a set can be modified at any time, elements of the frozen set remain the same after creation.xa0\']','[]','[\'# Python program to demonstrate# Creation of Set in Python # Creating a Setset1 = set()print(\"Initial blank Set: \")print(set1) # Creating a Set with# the use of a Stringset1 = set(\"GeeksForGeeks\")print(\"\\nSet with the use of String: \")print(set1) # Creating a Set with# the use of Constructor# (Using object to Store String)String = \'GeeksForGeeks\'set1 = set(String)print(\"\\nSet with the use of an Object: \" )print(set1) # Creating a Set with# the use of a Listset1 = set([\"Geeks\", \"For\", \"Geeks\"])print(\"\\nSet with the use of List: \")print(set1)\', \'# Creating a Set with# a List of Numbers# (Having duplicate values)set1 = set([1, 2, 4, 4, 3, 3, 3, 6, 5])print(\"\\nSet with the use of Numbers: \")print(set1) # Creating a Set with# a mixed type of values# (Having numbers and strings)set1 = set([1, 2, \'Geeks\', 4, \'For\', 6, \'Geeks\'])print(\"\\nSet with the use of Mixed Values\")print(set1)\', \'# Python program to demonstrate# Addition of elements in a Set # Creating a Setset1 = set()print(\"Initial blank Set: \")print(set1) # Adding element and tuple to the Setset1.add(8)set1.add(9)set1.add((6,7))print(\"\\nSet after Addition of Three elements: \")print(set1) # Adding elements to the Set# using Iteratorfor i in range(1, 6):    set1.add(i)print(\"\\nSet after Addition of elements from 1-5: \")print(set1)\', \'# Python program to demonstrate# Addition of elements in a Set # Addition of elements to the Set# using Update functionset1 = set([ 4, 5, (6, 7)])set1.update([10, 11])print(\"\\nSet after Addition of elements using Update: \")print(set1)\', \'# Python program to demonstrate# Accessing of elements in a set # Creating a setset1 = set([\"Geeks\", \"For\", \"Geeks\"])print(\"\\nInitial set\")print(set1) # Accessing element using# for loopprint(\"\\nElements of set: \")for i in set1:    print(i, end=\" \") # Checking the element# using in keywordprint(\"Geeks\" in set1)\', \'# Python program to demonstrate# Deletion of elements in a Set # Creating a Setset1 = set([1, 2, 3, 4, 5, 6,            7, 8, 9, 10, 11, 12])print(\"Initial Set: \")print(set1) # Removing elements from Set# using Remove() methodset1.remove(5)set1.remove(6)print(\"\\nSet after Removal of two elements: \")print(set1) # Removing elements from Set# using Discard() methodset1.discard(8)set1.discard(9)print(\"\\nSet after Discarding two elements: \")print(set1) # Removing elements from Set# using iterator methodfor i in range(1, 5):    set1.remove(i)print(\"\\nSet after Removing a range of elements: \")print(set1)\', \'# Python program to demonstrate# Deletion of elements in a Set # Creating a Setset1 = set([1, 2, 3, 4, 5, 6,            7, 8, 9, 10, 11, 12])print(\"Initial Set: \")print(set1) # Removing element from the# Set using the pop() methodset1.pop()print(\"\\nSet after popping an element: \")print(set1)\', \'#Creating a setset1 = set([1,2,3,4,5])print(\"\\n Initial set: \")print(set1)  # Removing all the elements from# Set using clear() methodset1.clear()print(\"\\nSet after clearing all the elements: \")print(set1)\', \'# Python program to demonstrate# working of a FrozenSet # Creating a SetString = (\'G\', \'e\', \'e\', \'k\', \'s\', \'F\', \'o\', \'r\') Fset1 = frozenset(String)print(\"The FrozenSet is: \")print(Fset1) # To print Empty Frozen Set# No parameter is passedprint(\"\\nEmpty FrozenSet: \")print(frozenset())\']','[\"Initial blank Set: \nset()\n\nSet with the use of String: \n{\'e\', \'r\', \'k\', \'o\', \'G\', \'s\', \'F\'}\n\nSet with the use of an Object: \n{\'r\', \'o\', \'e\', \'F\', \'s\', \'k\', \'G\'}\n\nSet with the use of List: \n{\'Geeks\', \'For\'}\", \"Set with the use of Numbers: \n{1, 2, 3, 4, 5, 6}\n\nSet with the use of Mixed Values\n{1, 2, 4, \'Geeks\', 6, \'For\'}\", \'Initial blank Set: \nset()\n\nSet after Addition of Three elements: \n{8, 9, (6, 7)}\n\nSet after Addition of elements from 1-5: \n{1, 2, 3, (6, 7), 4, 5, 8, 9}\', \'Set after Addition of elements using Update: \n{10, 11, 4, 5, (6, 7)}\', \"Initial set: \n{\'Geeks\', \'For\'}\n\nElements of set: \nGeeks For \n\nTrue\", \'Initial Set: \n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\n\nSet after Removal of two elements: \n{1, 2, 3, 4, 7, 8, 9, 10, 11, 12}\n\nSet after Discarding two elements: \n{1, 2, 3, 4, 7, 10, 11, 12}\n\nSet after Removing a range of elements: \n{7, 10, 11, 12}\', \'Initial Set: \n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\n\nSet after popping an element: \n{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\', \'Initial set:\n{1, 2, 3, 4, 5}\n\nSet after clearing all the elements: \nset()\']','[\'add()|||Adds an element to a set&&&remove()|||Removes an element from a set. If the element is not present in the set, raise a KeyError&&&clear()|||Removes all elements form a set&&&copy()|||Returns a shallow copy of a set&&&pop()|||Removes and returns an arbitrary set element. Raise KeyError if the set is empty&&&update()|||Updates a set with the union of itself and others&&&union()|||Returns the union of sets in a new set&&&difference()|||Returns the difference of two or more sets as a new set&&&difference_update()|||Removes all elements of another set from this set&&&discard()|||Removes an element from set if it is a member. (Do nothing if the element is not in set)&&&intersection()|||Returns the intersection of two sets as a new set&&&intersection_update()|||Updates the set with the intersection of itself and another&&&isdisjoint()|||Returns True if two sets have a null intersection&&&issubset()|||Returns True if another set contains this set&&&issuperset()|||Returns True if this set contains another set&&&symmetric_difference()|||Returns the symmetric difference of two sets as a new set&&&symmetric_difference_update()|||Updates a set with the symmetric difference of itself and another\']','[\'Program to accept the strings which contains all vowels|||Python program to find common elements in three lists using sets|||Find missing and additional values in two lists|||Pairs of complete strings in two sets|||Check whether a given string is Heterogram or not|||Maximum and Minimum in a Set|||Remove items from Set|||Python Set difference to find lost element from a duplicated array|||Minimum number of subsets with distinct elements using Counter|||Check if two lists have at-least one element common|||Program to count number of vowels using sets in given string|||Difference between two lists|||Python set to check if string is panagram|||Python set operations (union, intersection, difference and symmetric difference)|||Concatenated string with uncommon characters in Python|||Python dictionary, set and counter to check if frequencies can become same|||Using Set() in Python Pangram Checking|||Set update() in Python to do union of n arrays&&&Output of Python programs – Sets|||Recent Articles on Python Sets|||Multiple Choice Questions – Python|||All articles in Python Category\']'),(30,'[\'Python Dictionary\']','[\'Creating a Dictionary\', \'Python3\', \'Python3\', \'Python3\', \'Adding elements to a Dictionary\', \'Python3\', \'Accessing elements from a Dictionary\', \'Python3\', \'Python3\', \'Python3\', \'Removing Elements from Dictionary\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Dictionary Methodsxa0\']','[\'Nested Dictionary:\', \'Accessing an element of a nested dictionary\', \'Using del keyword\', \'Using pop() method\', \'Using popitem() method\', \'xa0Using clear() method\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/Dictionary-Creation-1.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/get-method-dictionaries-python/\', \'https://www.geeksforgeeks.org/python-dictionary-pop-method/\', \'https://www.geeksforgeeks.org/python-dictionary-copy/\', \'https://www.geeksforgeeks.org/python-dictionary-clear/\', \'https://www.geeksforgeeks.org/python-dictionary-pop-method/\', \'https://www.geeksforgeeks.org/python-dictionary-popitem-method/\', \'https://www.geeksforgeeks.org/get-method-dictionaries-python/\', \'https://www.geeksforgeeks.org/python-dictionary-values/\', \'https://www.geeksforgeeks.org/python-dictionary-update-method/\', \'https://www.geeksforgeeks.org/python-dictionary-setdefault-method/\', \'https://www.geeksforgeeks.org/python-dictionary-keys-method/\', \'https://www.geeksforgeeks.org/python-dictionary-items-method/\', \'https://www.geeksforgeeks.org/python-dictionary-has_key/\', \'https://www.geeksforgeeks.org/python-dictionary-fromkeys-method/\', \'https://www.geeksforgeeks.org/python-type-function/\', \'https://www.geeksforgeeks.org/dictionary-methods-in-python-set-1-cmp-len-items/\', \'https://www.geeksforgeeks.org/tag/python-dict/\', \'https://youtu.be/2snBklr3Ovo\', \'https://youtu.be/Bn1ror5wRKg\', \'https://www.geeksforgeeks.org/dictionary-methods-in-python-set-1-cmp-len-items/\', \'https://www.geeksforgeeks.org/dictionary-methods-in-python-set-2-update-has_key-fromkeys/\', \'https://www.geeksforgeeks.org/get-method-dictionaries-python/\', \'https://www.geeksforgeeks.org/handling-missing-keys-python-dictionaries/\', \'https://www.geeksforgeeks.org/program-print-distinct-elements-given-integer-array-python-ordered-dictionary/\', \'https://www.geeksforgeeks.org/ordereddict-in-python/\', \'https://www.geeksforgeeks.org/chainmap-in-python/\', \'https://www.geeksforgeeks.org/python-counter-majority-element/\', \'https://www.geeksforgeeks.org/dictionary-counter-python-find-winner-election/\', \'https://www.geeksforgeeks.org/implement-dictionary-python3/\', \'https://www.geeksforgeeks.org/possible-words-using-given-characters-python/\', \'https://www.geeksforgeeks.org/python-dictionary-set-counter-check-frequencies-can-become/\', \'https://www.geeksforgeeks.org/python-dictionary-intersection-find-common-elements-three-sorted-arrays/\', \'https://www.geeksforgeeks.org/using-ordereddict-python-check-order-characters-string/\', \'https://www.geeksforgeeks.org/python-dictionary-check-binary-representations-two-numbers-anagram/\', \'https://www.geeksforgeeks.org/python-counter-find-size-largest-subset-anagram-words/\', \'https://www.geeksforgeeks.org/print-anagrams-together-python-using-list-dictionary/\', \'https://www.geeksforgeeks.org/python-convert-list-tuples-dictionary/\', \'https://www.geeksforgeeks.org/python-counter-find-duplicate-characters-string/\', \'https://www.geeksforgeeks.org/python-remove-duplicates-words-given-sentence/\', \'https://www.geeksforgeeks.org/python-dictionary-find-mirror-characters-string/\', \'https://www.geeksforgeeks.org/python-counter-dictionary-intersection-example-make-string-using-deletion-rearrangement/\', \'https://www.geeksforgeeks.org/second-repeated-word-sequence-python/\', \'https://www.geeksforgeeks.org/python-dictionary-comprehension/\', \'https://www.geeksforgeeks.org/kth-non-repeating-character-python-using-list-comprehension-ordereddict/\', \'https://www.geeksforgeeks.org/scraping-and-finding-ordered-words-in-a-dictionary-using-python/\', \'https://www.geeksforgeeks.org/ways-sort-list-dictionaries-values-python-using-itemgetter/\', \'https://www.geeksforgeeks.org/python-merging-two-dictionaries/\', \'https://www.geeksforgeeks.org/tag/python-dict/\', \'https://www.geeksforgeeks.org/output-python-programs-set-24-dictionary/\', \'https://www.geeksforgeeks.org/output-python-program-set-14-dictionary/\', \'https://practice.geeksforgeeks.org/\', \'https://www.geeksforgeeks.org/python-multiple-choice-questions/\', \'https://www.geeksforgeeks.org/category/python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note – Keys in a dictionary don’t allow Polymorphism.\', \'There is also a method called get() that will also help in accessing the element from a dictionary.\', \'In order to access the value of any key in the nested dictionary, use indexing [] syntax.\', \'Pop() method is used to return and delete the value of the key specified.\', \'The popitem() returns and removes an arbitrary element (key, value) pair from the dictionary.\', \'All the items from a dictionary can be deleted at once by using clear() method.\', \'Recent Articles on Python Dictionary\', \'https://youtu.be/z7z_e5\', \'More Videos on Python Dictionary:xa0Python Dictionary Set 2xa0Python Dictionary Set 3\', \'xa0Dictionary Programs\', \'Useful Linksxa0\']','[\'Dictionary in Python is an unordered collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.xa0xa0\', \'Disclamer: It is important to note that Dictionaries have been modified to maintain insertion order with the release of Python 3.7, so they are now ordered collection of data values.\', \'In Python, a Dictionary can be created by placing a sequence of elements within curly {} braces, separated by ‘comma’. Dictionary holds pairs of values, one being the Key and the other corresponding pair element being its Key:value. Values in a dictionary can be of any data type and can be duplicated, whereas keys can’t be repeated and must be immutable.xa0xa0\', \'Note – Dictionary keys are case sensitive, the same name but different cases of Key will be treated distinctly.xa0\', \'Dictionary can also be created by the built-in function dict(). An empty dictionary can be created by just placing to curly braces{}.xa0\', \'In Python Dictionary, the Addition of elements can be done in multiple ways. One value at a time can be added to a Dictionary by defining value along with the key e.g. Dict[Key] = ‘Value’. Updating an existing value in a Dictionary can be done by using the built-in update() method. Nested key values can also be added to an existing Dictionary.xa0xa0\', \'Note- While adding a value, if the key-value already exists, the value gets updated otherwise a new Key with the value is added to the Dictionary.\', \'In order to access the items of a dictionary refer to its key name. Key can be used inside square brackets.xa0\', \'In Python Dictionary, deletion of keys can be done by using the del keyword. Using the del keyword, specific values from a dictionary as well as the whole dictionary can be deleted. Items in a Nested dictionary can also be deleted by using the del keyword and providing a specific nested key and particular key to be deleted from that nested Dictionary.xa0\', \'Note: The del Dict will delete the entire dictionary and hence printing it after deletion will raise an Error.\']','[]','[\'# Creating a Dictionary# with Integer KeysDict = {1: \'Geeks\', 2: \'For\', 3: \'Geeks\'}print(\"\\nDictionary with the use of Integer Keys: \")print(Dict) # Creating a Dictionary# with Mixed keysDict = {\'Name\': \'Geeks\', 1: [1, 2, 3, 4]}print(\"\\nDictionary with the use of Mixed Keys: \")print(Dict)\', \'# Creating an empty DictionaryDict = {}print(\"Empty Dictionary: \")print(Dict) # Creating a Dictionary# with dict() methodDict = dict({1: \'Geeks\', 2: \'For\', 3:\'Geeks\'})print(\"\\nDictionary with the use of dict(): \")print(Dict) # Creating a Dictionary# with each item as a PairDict = dict([(1, \'Geeks\'), (2, \'For\')])print(\"\\nDictionary with each item as a pair: \")print(Dict)\', \"# Creating a Nested Dictionary# as shown in the below imageDict = {1: \'Geeks\', 2: \'For\',        3:{\'A\' : \'Welcome\', \'B\' : \'To\', \'C\' : \'Geeks\'}} print(Dict)\", \'# Creating an empty DictionaryDict = {}print(\"Empty Dictionary: \")print(Dict) # Adding elements one at a timeDict[0] = \'Geeks\'Dict[2] = \'For\'Dict[3] = 1print(\"\\nDictionary after adding 3 elements: \")print(Dict) # Adding set of values# to a single KeyDict[\'Value_set\'] = 2, 3, 4print(\"\\nDictionary after adding 3 elements: \")print(Dict) # Updating existing Key\'s ValueDict[2] = \'Welcome\'print(\"\\nUpdated key value: \")print(Dict) # Adding Nested Key value to DictionaryDict[5] = {\'Nested\' :{\'1\' : \'Life\', \'2\' : \'Geeks\'}}print(\"\\nAdding a Nested Key: \")print(Dict)\', \'# Python program to demonstrate # accessing a element from a Dictionary # Creating a DictionaryDict = {1: \'Geeks\', \'name\': \'For\', 3: \'Geeks\'} # accessing a element using keyprint(\"Accessing a element using key:\")print(Dict[\'name\']) # accessing a element using keyprint(\"Accessing a element using key:\")print(Dict[1])\', \'# Creating a DictionaryDict = {1: \'Geeks\', \'name\': \'For\', 3: \'Geeks\'} # accessing a element using get()# methodprint(\"Accessing a element using get:\")print(Dict.get(3))\', \"# Creating a DictionaryDict = {\'Dict1\': {1: \'Geeks\'},        \'Dict2\': {\'Name\': \'For\'}} # Accessing element using keyprint(Dict[\'Dict1\'])print(Dict[\'Dict1\'][1])print(Dict[\'Dict2\'][\'Name\'])\", \'# Initial DictionaryDict = { 5 : \'Welcome\', 6 : \'To\', 7 : \'Geeks\',        \'A\' : {1 : \'Geeks\', 2 : \'For\', 3 : \'Geeks\'},        \'B\' : {1 : \'Geeks\', 2 : \'Life\'}}print(\"Initial Dictionary: \")print(Dict) # Deleting a Key valuedel Dict[6]print(\"\\nDeleting a specific key: \")print(Dict) # Deleting a Key from# Nested Dictionarydel Dict[\'A\'][2]print(\"\\nDeleting a key from Nested Dictionary: \")print(Dict)\', \"# Creating a DictionaryDict = {1: \'Geeks\', \'name\': \'For\', 3: \'Geeks\'} # Deleting a key# using pop() methodpop_ele = Dict.pop(1)print(\'\\nDictionary after deletion: \' + str(Dict))print(\'Value associated to poped key is: \' + str(pop_ele))\", \'# Creating DictionaryDict = {1: \'Geeks\', \'name\': \'For\', 3: \'Geeks\'} # Deleting an arbitrary key# using popitem() functionpop_ele = Dict.popitem()print(\"\\nDictionary after deletion: \" + str(Dict))print(\"The arbitrary pair returned is: \" + str(pop_ele))\', \'# Creating a DictionaryDict = {1: \'Geeks\', \'name\': \'For\', 3: \'Geeks\'}  # Deleting entire DictionaryDict.clear()print(\"\\nDeleting Entire Dictionary: \")print(Dict)\']','[\"Dictionary with the use of Integer Keys: \n{1: \'Geeks\', 2: \'For\', 3: \'Geeks\'}\n\nDictionary with the use of Mixed Keys: \n{1: [1, 2, 3, 4], \'Name\': \'Geeks\'}\", \"Empty Dictionary: \n{}\n\nDictionary with the use of dict(): \n{1: \'Geeks\', 2: \'For\', 3: \'Geeks\'}\n\nDictionary with each item as a pair: \n{1: \'Geeks\', 2: \'For\'}\", \"{1: \'Geeks\', 2: \'For\', 3: {\'A\': \'Welcome\', \'B\': \'To\', \'C\': \'Geeks\'}}\", \"Empty Dictionary: \n{}\n\nDictionary after adding 3 elements: \n{0: \'Geeks\', 2: \'For\', 3: 1}\n\nDictionary after adding 3 elements: \n{0: \'Geeks\', 2: \'For\', 3: 1, \'Value_set\': (2, 3, 4)}\n\nUpdated key value: \n{0: \'Geeks\', 2: \'Welcome\', 3: 1, \'Value_set\': (2, 3, 4)}\n\nAdding a Nested Key: \n{0: \'Geeks\', 2: \'Welcome\', 3: 1, 5: {\'Nested\': {\'1\': \'Life\', \'2\': \'Geeks\'}}, \'Value_set\': (2, 3, 4)}\", \'Accessing a element using key:\nFor\n\nAccessing a element using key:\nGeeks\', \'Accessing a element using get:\nGeeks\', \"{1: \'Geeks\'}\nGeeks\nFor\", \"Initial Dictionary: \n{\'A\': {1: \'Geeks\', 2: \'For\', 3: \'Geeks\'}, \'B\': {1: \'Geeks\', 2: \'Life\'}, 5: \'Welcome\', 6: \'To\', 7: \'Geeks\'}\n\nDeleting a specific key: \n{\'A\': {1: \'Geeks\', 2: \'For\', 3: \'Geeks\'}, \'B\': {1: \'Geeks\', 2: \'Life\'}, 5: \'Welcome\', 7: \'Geeks\'}\n\nDeleting a key from Nested Dictionary: \n{\'A\': {1: \'Geeks\', 3: \'Geeks\'}, \'B\': {1: \'Geeks\', 2: \'Life\'}, 5: \'Welcome\', 7: \'Geeks\'}\", \"Dictionary after deletion: {3: \'Geeks\', \'name\': \'For\'}\nValue associated to poped key is: Geeks\", \"Dictionary after deletion: {3: \'Geeks\', \'name\': \'For\'}\nThe arbitrary pair returned is: (1, \'Geeks\')\", \'Deleting Entire Dictionary: \n{}\']','[]','[\'Dictionary Methods – Set 1,Set 2|||Get() method for dictionaries|||Handling missing keys of dictionary|||Ordered Dictionary|||orderDict()|||Chainmap|||Majority Element|||Dictionary and counter in Python to find winner of election|||How to implement Dictionary with Python3|||Possible Words using given characters in Python|||Python dictionary, set and counter to check if frequencies can become same|||Python dictionary intersection|||OrderedDict() in Python|||Check if binary representations of two numbers are anagram|||Python Counter to find the size of largest subset of anagram words|||Print anagrams together in Python using List and Dictionary|||Convert a list of Tuples into Dictionary|||Find all duplicate characters in string|||Remove all duplicates words from a given sentence|||Python Dictionary to find mirror characters in a string|||Python counter and dictionary intersection example (Make a string using deletion and rearrangement)|||Second most repeated word in a sequence in Python|||Python Dictionary Comprehension|||K’th Non-repeating Character in Python using List Comprehension and OrderedDict|||Scraping And Finding Ordered Words In A Dictionary using Python|||Ways to sort list of dictionaries by values in Python – Using itemgetter|||Merging two Dictionaries&&&Recent Articles on Python Dictionary|||Output of Python programs – Dictionary|||Output of Python programs – Dictionary|||Coding Practice Platform|||Multiple Choice Questions – Python|||All articles in Python Category\']'),(31,'[\'Python Arrays\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/CommonArticleDesign1-min.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/CommonArticleDesign2-min.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/CommonArticleDesign3-min.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-list/\', \'https://www.geeksforgeeks.org/python-list-insert/\', \'https://www.geeksforgeeks.org/append-extend-python/\', \'https://www.geeksforgeeks.org/python-list-remove/\', \'https://www.geeksforgeeks.org/python-list-pop/\', \'https://www.geeksforgeeks.org/python-list-comprehension-and-slicing/\', \'https://www.geeksforgeeks.org/python-list-index/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'Array in Python can be created by importing array module. array(data_type, value_list) is used to create an array with data type and value list specified in its arguments.xa0xa0\', \'Some of the data types are mentioned below which will help in creating an array of different data types.xa0xa0\', \'Elements can be added to the Array by using built-in insert() function. Insert is used to insert one or more data elements into an array. Based on the requirement, a new element can be added at the beginning, end, or any given index of array. append() is also used to add the value mentioned in its arguments at the end of the array.xa0xa0\', \'In order to access the array items refer to the index number. Use the index operator [ ] to access an item in a array. The index must be an integer.xa0xa0\', \'In order to search an element in the array we use a python in-built index() method. This function returns the index of the first occurrence of value mentioned in arguments.xa0xa0\', \'In order to update an element in the array we simply reassign a new value to the desired index we want to update.xa0xa0\']','[\'An array is a collection of items stored at contiguous memory locations. The idea is to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array).For simplicity, we can think of an array a fleet of stairs where on each step is placed a value (let’s say one of your friends). Here, you can identify the location of any of your friends by simply knowing the count of the step they are on. Array can be handled in Python by a module named array. They can be useful when we have to manipulate only a specific data type values. A user can treat lists as arrays. However, user cannot constraint the type of elements stored in a list. If you create arrays using the array module, all elements of the array must be of the same type.xa0xa0\', \'Elements can be removed from the array by using built-in remove() function but an Error arises if element doesn’t exist in the set. Remove() method only removes one element at a time, to remove range of elements, iterator is used. pop() function can also be used to remove and return an element from the array, but by default it removes only the last element of the array, to remove element from a specific position of the array, index of the element is passed as an argument to the pop() method.Note – Remove method in List will only remove the first occurrence of the searched element.xa0xa0\', \'In Python array, there are multiple ways to print the whole array with all the elements, but to print a specific range of elements from the array, we use Slice operation. Slice operation is performed on array with the use of colon(:). To print elements from beginning to a range use [:Index], to print elements from end use [:-Index], to print elements from specific Index till the end use [Index:], to print elements within a range, use [Start Index:End Index] and to print whole List with the use of slicing operation, use [:]. Further, to print whole array in reverse order, use [::-1].xa0xa0\']','[\'# Python program to demonstrate# Creation of Array # importing \"array\" for array creationsimport array as arr # creating an array with integer typea = arr.array(\'i\', [1, 2, 3]) # printing original arrayprint (\"The new created array is : \", end =\" \")for i in range (0, 3):    print (a[i], end =\" \")print() # creating an array with float typeb = arr.array(\'d\', [2.5, 3.2, 3.3]) # printing original arrayprint (\"The new created array is : \", end =\" \")for i in range (0, 3):    print (b[i], end =\" \")\', \'# Python program to demonstrate# Adding Elements to a Array # importing \"array\" for array creationsimport array as arr # array with int typea = arr.array(\'i\', [1, 2, 3])  print (\"Array before insertion : \", end =\" \")for i in range (0, 3):    print (a[i], end =\" \")print() # inserting array using# insert() functiona.insert(1, 4) print (\"Array after insertion : \", end =\" \")for i in (a):    print (i, end =\" \")print() # array with float typeb = arr.array(\'d\', [2.5, 3.2, 3.3]) print (\"Array before insertion : \", end =\" \")for i in range (0, 3):    print (b[i], end =\" \")print() # adding an element using append()b.append(4.4) print (\"Array after insertion : \", end =\" \")for i in (b):    print (i, end =\" \")print()\', \'# Python program to demonstrate# accessing of element from list # importing array moduleimport array as arr # array with int typea = arr.array(\'i\', [1, 2, 3, 4, 5, 6]) # accessing element of arrayprint(\"Access element is: \", a[0]) # accessing element of arrayprint(\"Access element is: \", a[3]) # array with float typeb = arr.array(\'d\', [2.5, 3.2, 3.3]) # accessing element of arrayprint(\"Access element is: \", b[1]) # accessing element of arrayprint(\"Access element is: \", b[2])\', \'# Python program to demonstrate# Removal of elements in a Array  # importing \"array\" for array operationsimport array  # initializing array with array values# initializes array with signed integersarr = array.array(\'i\', [1, 2, 3, 1, 5]) # printing original arrayprint (\"The new created array is : \", end =\"\")for i in range (0, 5):    print (arr[i], end =\" \") print (\"\\r\") # using pop() to remove element at 2nd positionprint (\"The popped element is : \", end =\"\")print (arr.pop(2)) # printing array after poppingprint (\"The array after popping is : \", end =\"\")for i in range (0, 4):    print (arr[i], end =\" \") print(\"\\r\") # using remove() to remove 1st occurrence of 1arr.remove(1) # printing array after removingprint (\"The array after removing is : \", end =\"\")for i in range (0, 3):    print (arr[i], end =\" \")\', \'# Python program to demonstrate# slicing of elements in a Array # importing array moduleimport array as arr # creating a listl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] a = arr.array(\'i\', l)print(\"Initial Array: \")for i in (a):    print(i, end =\" \") # Print elements of a range# using Slice operationSliced_array = a[3:8]print(\"\\nSlicing elements in a range 3-8: \")print(Sliced_array) # Print elements from a# pre-defined point to endSliced_array = a[5:]print(\"\\nElements sliced from 5th \"      \"element till the end: \")print(Sliced_array) # Printing elements from# beginning till endSliced_array = a[:]print(\"\\nPrinting all elements using slice operation: \")print(Sliced_array)\', \'# Python code to demonstrate# searching an element in array   # importing array moduleimport array  # initializing array with array values# initializes array with signed integersarr = array.array(\'i\', [1, 2, 3, 1, 2, 5]) # printing original arrayprint (\"The new created array is : \", end =\"\")for i in range (0, 6):    print (arr[i], end =\" \") print (\"\\r\") # using index() to print index of 1st occurrenece of 2print (\"The index of 1st occurrence of 2 is : \", end =\"\")print (arr.index(2)) # using index() to print index of 1st occurrenece of 1print (\"The index of 1st occurrence of 1 is : \", end =\"\")print (arr.index(1))\', \'# Python code to demonstrate# how to update an element in array # importing array moduleimport array # initializing array with array values# initializes array with signed integersarr = array.array(\'i\', [1, 2, 3, 1, 2, 5]) # printing original arrayprint (\"Array before updation : \", end =\"\")for i in range (0, 6):    print (arr[i], end =\" \") print (\"\\r\") # updating a element in a arrayarr[2] = 6print(\"Array after updation : \", end =\"\")for i in range (0, 6):    print (arr[i], end =\" \")print() # updating a element in a arrayarr[4] = 8print(\"Array after updation : \", end =\"\")for i in range (0, 6):    print (arr[i], end =\" \")\']','[\'The new created array is :  1 2 3 \nThe new created array is :  2.5 3.2 3.3\', \'Array before insertion : 1 2 3 \nArray after insertion :  1 4 2 3 \nArray before insertion : 2.5 3.2 3.3 \nArray after insertion :  2.5 3.2 3.3 4.4\', \'Access element is:  1\nAccess element is:  4\nAccess element is:  3.2\nAccess element is:  3.3\', \'The new created array is : 1 2 3 1 5 \nThe popped element is : 3\nThe array after popping is : 1 2 1 5 \nThe array after removing is : 2 1 5\', \"Initial Array: \n1 2 3 4 5 6 7 8 9 10 \nSlicing elements in a range 3-8: \narray(\'i\', [4, 5, 6, 7, 8])\n\nElements sliced from 5th element till the end: \narray(\'i\', [6, 7, 8, 9, 10])\n\nPrinting all elements using slice operation: \narray(\'i\', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\", \"Initial Array: \n1 2 3 4 5 6 7 8 9 10 \nSlicing elements in a range 3-8: \narray(\'i\', [4, 5, 6, 7, 8])\n\nElements sliced from 5th element till the end: \narray(\'i\', [6, 7, 8, 9, 10])\n\nPrinting all elements using slice operation: \narray(\'i\', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\", \'The new created array is : 1 2 3 1 2 5 \nThe index of 1st occurrence of 2 is : 1\nThe index of 1st occurrence of 1 is : 0\', \'Array before updation : 1 2 3 1 2 5 \nArray after updation : 1 2 6 1 2 5 \nArray after updation : 1 2 6 1 8 5\']','[]','[]'),(32,'[\'Python if else\']','[\'if statement\', \'Flowchart of Python if statement\', \'Python3\', \'if-else\', \'FlowChart of Python if else statement\', \'Python3\', \'Python3\', \'nested-if\', \'Flowchart of Python Nested if Statement\', \'Python3\', \'if-elif-else ladder\', \'FlowChart of Python if else elif statementsxa0\', \'Python3\', \'Short Hand if statement\', \'Python3\', \'Short Hand if-else statement\', \'Python3\']','[\'Example: Python if Statement\', \'Example 1: Python if else statement\', \'Example 2: Python if else in list comprehension\', \'Example: Python Nested if\', \'Example: Python if else elif statements\', \'Example: Python if shorthand\', \'Example: Python if else shorthandxa0\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/if-statement.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/if-else.jpg\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200710163548/Nested_if.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'In Python, if else elif statement is used for decision making.\']','[\'There comes situations in real life when we need to make some decisions and based on these decisions, we decide what should we do next. Similar situations arise in programming also where we need to make some decisions and based on these decisions we will execute the next block of code. Decision-making statements in programming languages decide the direction of the flow of program execution.xa0\', \'if statement is the most simple decision-making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.\', \'Here, the condition after evaluation will be either true or false. if statement accepts boolean values – if the value is true then it will execute the block of statements below it otherwise not. We can use condition with bracket ‘(‘ ‘)’ also.xa0\', \'As we know, python uses indentation to identify a block. So the block under an if statement will be identified as shown in the below example:xa0xa0\', \'As the condition present in the if statement is false. So, the block below the if statement is not executed.\', \'The if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won’t. But what if we want to do something else if the condition is false. Here comes the else statement. We can use the else statement with if statement to execute a block of code when the condition is false.xa0\', \'The block of code following the else statement is executed as the condition present in the if statement is false after calling the statement which is not in block(without spaces).\', \'A nested if is an if statement that is the target of another if statement. Nested if statements mean an if statement inside another if statement. Yes, Python allows us to nest if statements within if statements. i.e, we can place an if statement inside another if statement.\', \'Here, a user can decide among multiple options. The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final else statement will be executed.\', \'Whenever there is only a single statement to be executed inside the if block then shorthand if can be used. The statement can be put on the same line as the if statement.xa0\', \'This can be used to write the if-else statements in a single line where there is only one statement to be executed in both if and else block.xa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# python program to illustrate If statement i = 10 if (i > 15):    print(\"10 is less than 15\")print(\"I am Not in if\")\', \'# python program to illustrate If else statement#!/usr/bin/python i = 20if (i < 15):    print(\"i is smaller than 15\")    print(\"i\'m in if Block\")else:    print(\"i is greater than 15\")    print(\"i\'m in else Block\")print(\"i\'m not in if and not in else Block\")\', \'# Explicit functiondef digitSum(n):    dsum = 0    for ele in str(n):        dsum += int(ele)    return dsum  # Initializing listList = [367, 111, 562, 945, 6726, 873] # Using the function on odd elements of the listnewList = [digitSum(i) for i in List if i & 1] # Displaying new listprint(newList)\', \'# python program to illustrate nested If statement#!/usr/bin/pythoni = 10if (i == 10):       #  First if statement    if (i < 15):        print(\"i is smaller than 15\")             # Nested - if statement    # Will only be executed if statement above    # it is true    if (i < 12):        print(\"i is smaller than 12 too\")    else:        print(\"i is greater than 15\")\', \'# Python program to illustrate if-elif-else ladder#!/usr/bin/python i = 20if (i == 10):    print(\"i is 10\")elif (i == 15):    print(\"i is 15\")elif (i == 20):    print(\"i is 20\")else:    print(\"i is not present\")\', \'# Python program to illustrate short hand ifi = 10if i < 15:    print(\"i is less than 15\")\', \'# Python program to illustrate short hand if-elsei = 10print(True) if i < 15 else print(False)\']','[\'if condition:\n   # Statements to execute if\n   # condition is true\', \'if condition:\n   statement1\nstatement2\n\n# Here if the condition is true, if block \n# will consider only statement1 to be inside \n# its block.\', \'I am Not in if\', \'if (condition):\n    # Executes this block if\n    # condition is true\nelse:\n    # Executes this block if\n    # condition is false\', \"i is greater than 15\ni\'m in else Block\ni\'m not in if and not in else Block\", \'[16, 3, 18, 18]\', \'if (condition1):\n   # Executes when condition1 is true\n   if (condition2): \n      # Executes when condition2 is true\n   # if Block is end here\n# if Block is end here\', \'i is smaller than 15\ni is smaller than 12 too\', \'if (condition):\n    statement\nelif (condition):\n    statement\n.\n.\nelse:\n    statement\', \'i is 20\', \'if condition: statement\', \'i is less than 15\', \'statement_when_True if condition else statement_when_False\', \'True\']','[]','[]'),(33,'[\'Chaining comparison operators in Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/c-operator-precedence-associativity/\', \'https://docs.python.org/3/reference/expressions.html\', \'https://www.linkedin.com/in/pratik-chhajer-4a102213b/\', \'http://contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Most common syntax to do it is as follows:\', \'List of comparison operators in Python:\', \'Chaining in Comparison Operators:\', \'doesn’t imply any kind of comparison between a and c, so\', \'is perfectly legal.\', \'Another Example:\', \'Reference : Python 3 Documentation\']','[\'Checking more than two conditions is very common in Programming Languages. Let say we want to check below condition:\', \'In Python, there is a better way to write this using Comparison operator Chaining. The chaining of operators can be written as follows:\', \'According to associativity and precedence in Python, all comparison operations in Python have the same priority, which is lower than that of any arithmetic, shifting or bitwise operation. Also unlike C, expressions like a < b < c have the interpretation that is conventional in mathematics.\', \'except that y is evaluated only once.(but in both cases z is not evaluated at all when x < y is found to be false).\', \'This article is contributed by Pratik Chhajer. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'# Python code to illustrate# chaining comparison operatorsx = 5print(1 < x < 10)print(10 < x < 20 )print(x < 10 < x*10 < 100)print(10 > x <= 9)print(5 == x > 4)\', \'# Python code to illustrate# chaining comparison operatorsa, b, c, d, e, f = 0, 5, 12, 0, 15, 15exp1 = a <= b < c > d is not e is fexp2 = a is d > f is not cprint(exp1)print(exp2)\']','[\'a < b < c\', \'if a < b and b < c :\n   {...}\', \'if a < b < c :\n    {.....}\', \'\">\" | \"<\" | \"==\" | \">=\" | \"<=\" | \"!=\" | \"is\" [\"not\"] | [\"not\"] \"in\"\', \'x < y <= z is equivalent to x < y and y <= z,\', \'a op1 b op2 c\', \'a < b > c\', \'True\nFalse\nTrue\nTrue\nTrue\', \'True\nFalse\']','[]','[\'Comparisons yield boolean values: True or False.|||Comparisons can be chained arbitrarily. For example:x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only once.(but in both cases z is not evaluated at all when x < y is found to be false).|||Formally, if a, b, c, …, y, z are expressions and op1, op2, …, opN are comparison operators, then a op1 b op2 c … y opN z is equivalent to a op1 b and b op2 c and … y opN z, except that each expression is evaluated at most once.|||Also,a op1 b op2 c doesn’t imply any kind of comparison between a and c, so a < b > cis perfectly legal.\']'),(34,'[\'Python For Loops\']','[\'Python3\', \'Loop Control Statements\', \'Python3\', \'Python3\', \'Python3\', \'range() function\', \'Python3\', \'Python for loop with else\', \'Python3\']','[\'Flowchart of for loop\', \'Example:xa0Python For Loop using List, Dictionary, String\', \'Continue Statement\', \'Example: Python for Loop with Continue Statement\', \'Break Statement\', \'Example: Python For Loop with Break Statement\', \'Pass Statement\', \'Example: Python For Loop with Pass Statement\', \'Example: Python for loop with range function\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191101172216/for-loop-python.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-continue-statement/\', \'https://www.geeksforgeeks.org/python-break-statement/\', \'https://www.geeksforgeeks.org/python-pass-statement/\', \'https://www.geeksforgeeks.org/python-range-function/\', \'https://www.geeksforgeeks.org/range-vs-xrange-python/\', \'https://www.geeksforgeeks.org/using-else-conditional-statement-with-for-loop-in-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: In Python, for loops only implements the collection-based iteration.\', \'Python continue Statement returns the control to the beginning of the loop.\', \'Python break statement brings control out of the loop.\', \'Note: For more information refer to our Python for loop with else tutorial.\']','[\'Here the iterable is a collection of objects like lists, tuples. The indented statements inside the for loops are executed once for each item in an iterable. The variable var takes the value of the next item of the iterable each time through the loop.\', \'Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed. Python supports the following control statements.\', \'The pass statement to write empty loops. Pass is also used for empty control statements, functions, and classes.\', \'In most of the programming languages (C/C++, Java, etc), the use of else statements has been restricted with the if conditional statements. But Python also allows us to use the else condition with for loops.xa0\', \'Note: The else block just after for/while is executed only when the loop is NOT terminated by a break statementxa0\']','[\'Python For loop is used for sequential traversal i.e. it is used for iterating over an iterable like string, tuple, list, etc. It falls under the category of definite iteration. Definite iterations mean the number of repetitions is specified explicitly in advance.xa0In Python, there is no C style for loop, i.e., for (i=0; i<n; i++). There is “for in” loop which is similar to for each loop in other languages. Let us learn how to use for in loop for sequential traversals.xa0\', \'Python range() is a built-in function that is used when a user needs to perform an action a specific number of times. range() in Python(3.x) is just a renamed version of a function called xrange() in Python(2.x). The range() function is used to generate a sequence of numbers.xa0Depending on how many arguments user is passing to the function, user can decide where that series of numbers will begin and end as well as how big the difference will be between one number and the next.range() takes mainly three arguments.xa0\']','[\'# Python program to illustrate# Iterating over a listprint(\"List Iteration\")l = [\"geeks\", \"for\", \"geeks\"]for i in l:    print(i) # Iterating over a tuple (immutable)print(\"\\nTuple Iteration\")t = (\"geeks\", \"for\", \"geeks\")for i in t:    print(i) # Iterating over a Stringprint(\"\\nString Iteration\")s = \"Geeks\"for i in s:    print(i) # Iterating over dictionaryprint(\"\\nDictionary Iteration\")d = dict()d[\'xyz\'] = 123d[\'abc\'] = 345for i in d:    print(\"% s % d\" % (i, d[i]))\', \"# Prints all letters except \'e\' and \'s\'for letter in \'geeksforgeeks\':    if letter == \'e\' or letter == \'s\':        continue    print(\'Current Letter :\', letter)\", \"for letter in \'geeksforgeeks\':     # break the loop as soon it sees \'e\'    # or \'s\'    if letter == \'e\' or letter == \'s\':        break print(\'Current Letter :\', letter)\", \"# An empty loopfor letter in \'geeksforgeeks\':    passprint(\'Last Letter :\', letter)\", \'# Python Program to# show range() basics # printing a numberfor i in range(10):    print(i, end=\" \")print() # using range for iterationl = [10, 20, 30, 40]for i in range(len(l)):    print(l[i], end=\" \")print() # performing sum of first 10 numberssum = 0for i in range(1, 10):    sum = sum + iprint(\"Sum of first 10 numbers :\", sum)\', \'# Python program to demonstrate# for-else loop for i in range(1, 4):    print(i)else:  # Executed because no break in for    print(\"No Break\\n\") for i in range(1, 4):    print(i)    breakelse:  # Not executed as there is a break    print(\"No Break\")\']','[\'for var in iterable:\n    # statements\', \'List Iteration\ngeeks\nfor\ngeeks\n\nTuple Iteration\ngeeks\nfor\ngeeks\n\nString Iteration\nG\ne\ne\nk\ns\n\nDictionary Iteration\nxyz 123\nabc 345\', \'Current Letter : g\nCurrent Letter : k\nCurrent Letter : f\nCurrent Letter : o\nCurrent Letter : r\nCurrent Letter : g\nCurrent Letter : k\', \'Current Letter : e\', \'Last Letter : s\', \'0 1 2 3 4 5 6 7 8 9 \n10 20 30 40 \nSum of first 10 numbers : 45\', \'1\n2\n3\nNo Break\n\n1\']','[]','[\'start: integer starting from which the sequence of integers is to be returned|||stop: integer before which the sequence of integers is to be returned.The range of integers end at stop – 1.|||step: integer value which determines the increment between each integer in the sequence\']'),(35,'[\'Python While Loop\']','[\'Python3\', \'Python3\', \'Single statement while block\', \'Python3\', \'Loop Control Statements\', \'Python3\', \'Python3\', \'Python3\', \'While loop with else\', \'Python3\', \'Sentinel Controlled Statement\', \'Python3\']','[\'Flowchart of While Loop :xa0\', \'Example 1: Python While Loop\', \'Example 2: Python while loop with list\', \'Continue Statement\', \'Example: Python while loop with continue statement\', \'Break Statement\', \'Example: Python while loop with break statement\', \'Pass Statement\', \'Example: Python while loop with pass statement\', \'Example: Python while loop with user input\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191101170515/while-loop.jpg\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-continue-statement/\', \'https://www.geeksforgeeks.org/python-break-statement/\', \'https://www.geeksforgeeks.org/python-pass-statement/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Python Continue Statement returns the control to the beginning of the loop.\', \'Python Break Statement brings control out of the loop.\', \'Explanation:\']','[\'Python While Loop is used to execute a block of statements repeatedly until a given condition is satisfied. And when the condition becomes false, the line immediately after the loop in the program is executed. While loop falls under the category of indefinite iteration. Indefinite iteration means that the number of times the loop is executed isn’t specified explicitly in advance.xa0\', \'In the above example, the condition for while will be True as long as the counter variable (count) is less than 3.xa0\', \'In the above example, we have run a while loop over a list that will run until there is an element present in the list.\', \'Just like the if block, if the while block consists of a single statement we can declare the entire loop in a single line. If there are multiple statements in the block that makes up the loop body, they can be separated by semicolons (;).xa0\', \'Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed. Python supports the following control statements.\', \'The Python pass statement to write empty loops. Pass is also used for empty control statements, functions, and classes.\', \'As discussed above, while loop executes the block until a condition is satisfied. When the condition becomes false, the statement immediately after the loop is executed.xa0The else clause is only executed when your while condition becomes false. If you break out of the loop, or if an exception is raised, it won’t be executed.\', \'Note: The else block just after for/while is executed only when the loop is NOT terminated by a break statement.xa0\', \'In this, we don’t use any counter variable because we don’t know that how many times the loop will execute. Here user decides that how many times he wants to execute the loop. For this, we use a sentinel value. A sentinel value is a value that is used to terminate a loop whenever a user enters it, generally, the sentinel value is -1.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Statements represent all the statements indented by the same number of character spaces after a programming construct are considered to be part of a single block of code. Python uses indentation as its method of grouping statements. When a while loop is executed, expr is first evaluated in a Boolean context and if it is true, the loop body is executed. Then the expr is checked again, if it is still true then the body is executed again and this continues until the expression becomes false.\']','[\'# Python program to illustrate# while loopcount = 0while (count < 3):    count = count + 1    print(\"Hello Geek\")\', \'# checks if list still# contains any elementa = [1, 2, 3, 4] while a:    print(a.pop())\', \'# Python program to illustrate# Single statement while blockcount = 0while (count < 5): count += 1; print(\"Hello Geek\")\', \"# Prints all letters except \'e\' and \'s\'i = 0a = \'geeksforgeeks\' while i < len(a):    if a[i] == \'e\' or a[i] == \'s\':        i += 1        continue             print(\'Current Letter :\', a[i])    i += 1\", \"# break the loop as soon it sees \'e\'# or \'s\'i = 0a = \'geeksforgeeks\' while i < len(a):    if a[i] == \'e\' or a[i] == \'s\':        i += 1        break             print(\'Current Letter :\', a[i])    i += 1\", \"# An empty loopa = \'geeksforgeeks\'i = 0 while i < len(a):    i += 1    pass   print(\'Value of i :\', i)\", \'# Python program to demonstrate# while-else loop i = 0while i < 4:    i += 1    print(i)else:  # Executed because no break in for    print(\"No Break\\n\") i = 0while i < 4:    i += 1    print(i)    breakelse:  # Not executed as there is a break    print(\"No Break\")\', \"a = int(input(\'Enter a number (-1 to quit): \')) while a != -1:    a = int(input(\'Enter a number (-1 to quit): \'))\"]','[\'while expression:\n    statement(s)\', \'Hello Geek\nHello Geek\nHello Geek\', \'4\n3\n2\n1\', \'Hello Geek\nHello Geek\nHello Geek\nHello Geek\nHello Geek\', \'Current Letter : g\nCurrent Letter : k\nCurrent Letter : f\nCurrent Letter : o\nCurrent Letter : r\nCurrent Letter : g\nCurrent Letter : k\', \'Current Letter : g\', \'Value of i : 13\', \'1\n2\n3\n4\nNo Break\n\n1\']','[]','[\'First, it asks the user to input a number. if the user enters -1 then the loop will not execute|||User enter 6 and the body of the loop executes and again ask for input|||Here user can input many times until he enters -1 to stop the loop|||User can decide how many times he wants to enter input\']'),(36,'[\'Python break statement\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191120193634/Break-statement-python.jpg\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'In this article, the main focus will be on break statement.\']','[\'Break statement in Python is used to bring the control out of the loop when some external condition is triggered. Break statement is put inside the loop body (generally after if condition).\', \'In the above example, both the loops are iterating the string ‘geeksforgeeks’ and as soon as they encounter the character ‘e’ or ‘s’, the if condition becomes true and the flow of execution is brought out of the loop.\']','[\'Using loops in Python automates and repeats the tasks in an efficient manner. But sometimes, there may arise a condition where you want to exit the loop completely, skip an iteration or ignore that condition. These can be done by loop control statements. Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed. Python supports the following control statements.\']','[\'# Python program to# demonstrate break statement  s = \'geeksforgeeks\'# Using for loopfor letter in s:      print(letter)    # break the loop as soon it sees \'e\'    # or \'s\'    if letter == \'e\' or letter == \'s\':        break  print(\"Out of for loop\")print()  i = 0  # Using while loopwhile True:    print(s[i])      # break the loop as soon it sees \'e\'    # or \'s\'    if s[i] == \'e\' or s[i] == \'s\':        break    i += 1  print(\"Out of while loop\")\']','[\'break\', \'g\ne\nOut of for loop\n\ng\ne\nOut of while loop\']','[]','[\'Continue statement|||Break statement|||Pass statement\']'),(37,'[\'Python Continue Statement\']','[\'Usage of Continue Statement\', \'Continue statement\', \'Flowchart of Continue Statement\', \'Python3\']','[\'Example: Continue statement in Python\']','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/loops-in-python/\', \'https://www.geeksforgeeks.org/break-continue-and-pass-in-python/\', \'https://www.geeksforgeeks.org/python-while-loop/\', \'https://www.geeksforgeeks.org/python-for-loops/\', \'https://www.geeksforgeeks.org/print-pattern-using-one-loop-continue-statement/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'In this article, we will discuss continue statements in Python for altering the flow of loops.\', \'Below is the implementation of the above idea:\', \'Exercise Problem:xa0\', \'Given a number n, print triangular pattern. We are allowed to use only one loop.\', \'Solution: Print the pattern by using one loop | Set 2 (Using Continue Statement)\']','[\'Loops in Python automates and repeats the tasks in an efficient manner. But sometimes, there may arise a condition where you want to exit the loop completely, skip an iteration or ignore that condition. These can be done by loop control statements. Continue is a type of loop control statement that can alter the flow of the loop.xa0\', \'Continue statement is a loop control statement that forces to execute the next iteration of the loop while skipping the rest of the code inside the loop for the current iteration only i.e. when the continue statement is executed in the loop, the code inside the loop following the continue statement will be skipped for the current iteration and the next iteration of the loop will begin.\', \'Note: The continue statement can be used with any other loop also like while loop in a similar way as it is used with for loop above.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Consider the situation when you need to write a program which prints the number from 1 to 10 and but not 6. It is specified that you have to do this using loop and only one loop is allowed to use. Here comes the usage of continue statement. What we can do here is we can run a loop from 1 to 10 and every time we have to compare the value of the iterator with 6. If it is equal to 6 we will use the continue statement to continue to the next iteration without printing anything otherwise we will print the value.\']','[\'# Python program to# demonstrate continue# statement # loop from 1 to 10for i in range(1, 11):     # If i is equals to 6,    # continue to next iteration    # without printing    if i == 6:        continue    else:        # otherwise print the value        # of i        print(i, end=\" \")\']','[\'continue\', \'1 2 3 4 5 7 8 9 10\', \'Input: 7\nOutput:\n*\n* * \n* * *\n* * * *\n* * * * *\n* * * * * *\n* * * * * * *\']','[]','[]'),(38,'[\'Python pass Statement\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1: Pass statement can be used in empty functions\', \'Example 2: pass statement can also be used in empty class\', \'Example 4: pass statement can be used with conditional statementsxa0\']','[\'The pass statement is a null statement. But the difference between pass and comment is that comment is ignored by the interpreter whereas pass is not ignored.xa0\', \'Example 3: pass statement can be used in for loop when user doesn’t know what to code inside the loop\', \'Example 5: lets take another example in which the pass statement get executed when the condition is truexa0\']','[\'The pass statement is generally used as a placeholder i.e. when the user does not know what code to write. So user simply places pass at that line. Sometimes, pass is used when the user doesn’t want any code to execute. So user can simply place pass where empty code is not allowed, like in loops, function definitions, class definitions, or in if statements. So using pass statement user avoids this error.\']','[\'def geekFunction:  pass\', \'class geekClass:  pass\', \'n = 10for i in range(n):     # pass can be used as placeholder  # when code is to added later  pass\', \'a = 10b = 20 if(a<b):  passelse:  print(\"b<a\")\', \"li =[\'a\', \'b\', \'c\', \'d\'] for i in li:    if(i ==\'a\'):        pass    else:        print(i)\"]','[\'pass\', \'b\nc\nd\']','[]','[]'),(39,'[\'Looping Techniques in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[\'Where they are used?\', \'Different looping techniques using Python data structures xa0are:xa0\']','[]','[\'https://www.youtube.com/embed/OwIoSkuuBB8?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/using-iterations-in-python-effectively/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1:\', \'Example 2:\', \'Example 1:\', \'Example 2:\', \'Example 1:\', \'Example 2:\']','[\'Different looping techniques are primarily useful in the places where we don’t need to actually manipulate the structure and order of the overall containers, rather only print the elements for a single-use instance, no in-place change occurs in the container. This can also be used in instances to save time.\']','[\'Python supports various looping techniques by certain inbuilt functions, in various sequential containers. These methods are primarily very useful in competitive programming and also in various projects which require a specific technique with loops maintaining the overall structure of code. xa0A lot of time and memory space is been saved as there is no need to declare the extra variables which we declare in the traditional approach of loops.\']','[\"# python code to demonstrate working of enumerate() for key, value in enumerate([\'The\', \'Big\', \'Bang\', \'Theory\']):    print(key, value)\", \"# python code to demonstrate working of enumerate() for key, value in enumerate([\'Geeks\', \'for\', \'Geeks\',                             \'is\', \'the\', \'Best\',                             \'Coding\', \'Platform\']):    print(value, end=\' \')\", \"# python code to demonstrate working of zip() # initializing listquestions = [\'name\', \'colour\', \'shape\']answers = [\'apple\', \'red\', \'a circle\'] # using zip() to combine two containers# and print valuesfor question, answer in zip(questions, answers):    print(\'What is your {0}?  I am {1}.\'.format(question, answer))\", \'# python code to demonstrate working of items() d = {\"geeks\": \"for\", \"only\": \"geeks\"} # iteritems() is renamed to items() in python3# using items to print the dictionary key-value pairprint(\"The key value pair using items is : \")for i, j in d.items():    print(i, j)\', \"# python code to demonstrate working of items() king = {\'Akbar\': \'The Great\', \'Chandragupta\': \'The Maurya\',        \'Modi\': \'The Changer\'} # using items to print the dictionary key-value pairfor key, value in king.items():    print(key, value)\", \'# python code to demonstrate working of sorted() # initializing listlis = [1, 3, 5, 6, 2, 1, 3] # using sorted() to print the list in sorted orderprint(\"The list in sorted order is : \")for i in sorted(lis):    print(i, end=\" \") print(\"\\r\") # using sorted() and set() to print the list in sorted order# use of set() removes duplicates.print(\"The list in sorted order (without duplicates) is : \")for i in sorted(set(lis)):    print(i, end=\" \")\', \"# python code to demonstrate working of sorted() # initializing listbasket = [\'guave\', \'orange\', \'apple\', \'pear\',          \'guava\', \'banana\', \'grape\'] # using sorted() and set() to print the list#  in sorted orderfor fruit in sorted(set(basket)):    print(fruit)\", \'# python code to demonstrate working of reversed() # initializing listlis = [1, 3, 5, 6, 2, 1, 3]  # using revered() to print the list in reversed orderprint(\"The list in reversed order is : \")for i in reversed(lis):    print(i, end=\" \")\', \'# python code to demonstrate working of reversed() # using reversed() to print in reverse orderfor i in reversed(range(1, 10, 3)):    print(i)\']','[\'0 The\n1 Big\n2 Bang\n3 Theory\', \'Geeks for Geeks is the Best Coding Platform\', \'What is your name?  I am apple.\nWhat is your color?  I am red.\nWhat is your shape?  I am a circle.\', \'The key value pair using iteritems is : \ngeeks for\nonly geeks\nThe key value pair using items is : \ngeeks for\nonly geeks\', \'Akbar The Great\nChandragupta The Maurya\nModi The Changer\', \'The list in sorted order is : \n1 1 2 3 3 5 6 \nThe list in sorted order (without duplicates) is : \n1 2 3 5 6\', \'apple\nbanana\ngrape\nguava\nguave\norange\npear\', \'The list in reversed order is : \n3 1 2 6 5 3 1\', \'7\n4\n1\']','[]','[\'Using enumerate(): enumerate() is used to loop through the containers printing the index number along with the value present in that particular index.&&&Using zip():zip() is used to combine 2 similar containers(list-list or dict-dict) printing the values sequentially. The loop exists only till the smaller container ends. A detailed explanation of zip() and enumerate() can be found here.&&&Using iteritem():iteritems() is used to loop through the dictionary printing the dictionary key-value pair sequentially which is used before Python 3 version.|||Using items(): items() performs the similar task on dictionary as iteritems() but have certain disadvantages when compared with iteritems().It is very time-consuming. Calling it on large dictionaries consumes quite a lot of time.It takes a lot of memory. Sometimes takes double the memory when called on a dictionary.|||It is very time-consuming. Calling it on large dictionaries consumes quite a lot of time.|||It takes a lot of memory. Sometimes takes double the memory when called on a dictionary.&&&It is very time-consuming. Calling it on large dictionaries consumes quite a lot of time.|||It takes a lot of memory. Sometimes takes double the memory when called on a dictionary.&&&Using sorted(): sorted() is used to print the container is sorted order. It doesn’t sort the container but just prints the container in sorted order for 1 instance. The use of set() can be combined to remove duplicate occurrences.&&&Using reversed():reversed() is used to print the values of the container in the reversed order.It does not reflect any changes to the original list&&&These techniques are quick to use and reduce coding effort. for, while loops need the entire structure of the container to be changed.|||These Looping techniques do not require any structural changes to the container.Theyhave keywords that present the exact purpose of usage. Whereas, no pre-predictions or guesses can be made in for, while loop i.e not easily understand the purpose at a glance.|||Looping technique makes the code moreconcisethan using for & while looping.\']'),(40,'[\'Python Functions\']','[\'Creating a Function\', \'Python3\', \'Calling a xa0Function\', \'Python3\', \'Arguments of a Function\', \'Python3\', \'Types of Arguments\', \'Python3\', \'Python3\', \'Python\', \'Python3\', \'Docstring\', \'Python3\', \'The return statement\', \'Python3\', \'Is Python Function Pass by Reference or pass by value?xa0\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Anonymous functions:xa0\', \'Python3\', \'Python Function within Functions\', \'Python3\']','[\'Example: Python Creating Function\', \'Example: Python Calling Function\', \'Example: Python Function with arguments\', \'Default arguments\', \'Keyword arguments\', \'Variable-length arguments\', \'Example 1: Variable length non-keywords argument\', \'Example 2: Variable length keyword arguments\', \'Example: Adding Docstring to the function\', \'Example: Python Function Return Statement\']','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/default-arguments-in-python/\', \'https://www.geeksforgeeks.org/args-kwargs-python/\', \'https://www.geeksforgeeks.org/python-docstrings/\', \'https://www.geeksforgeeks.org/python-lambda-anonymous-functions-filter-map-reduce/\', \'https://www.geeksforgeeks.org/python-lambda-anonymous-functions-filter-map-reduce/\', \'https://www.geeksforgeeks.org/functions-python-gq/\', \'https://www.geeksforgeeks.org/difference-method-function-python/\', \'https://www.geeksforgeeks.org/first-class-functions-python/\', \'https://www.geeksforgeeks.org/tag/python-functions/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'We can create a xa0Python function using the def keyword.\', \'The below syntax can be used to print out the docstring of a function:\', \'Exercise: Try to guess the output of the following code.xa0\']','[\'Python Functions is a block of related statements designed to perform a computational, logical, or evaluative task. The idea is to put some commonly or repeatedly done tasks together and make a function so that instead of writing the same code again and again for different inputs, we can do the function calls to reuse code contained in it over and over again.xa0\', \'Functions can be both built-in or user-defined. It helps the program to be concise, non-repetitive, and organized.\', \'After creating a function we can call it by using the name of the function followed by parenthesis containing parameters of that particular function.\', \'Arguments are the values passed inside the parenthesis of the function. A function can have any number of arguments separated by a comma.\', \'In this example, we will create a simple function to check whether the number passed as an argument to the function is even or odd.\', \'Python supports various types of arguments that can be passed at the time of the function call. Let’s discuss each type in detail.\', \'A default argument is a parameter that assumes a default value if a value is not provided in the function call for that argument. The following example illustrates Default arguments.xa0\', \'Like C++ default arguments, any number of arguments in a function can have a default value. But once we have a default argument, all the arguments to its right must also have default values.\', \'The idea is to allow the caller to specify the argument name with values so that caller does not need to remember the order of parameters.\', \'In Python, we can pass a variable number of arguments to a function using special symbols. There are two special symbols:\', \'The first string after the function is called the Document string or Docstring in short. This is used to describe the functionality of the function. The use of docstring in functions is optional but it is considered a good practice.\', \'The function return statement is used to exit from a function and go back to the function caller and return the specified value or data item to the caller.\', \'The return statement can consist of a variable, an expression, or a constant which is returned to the end of the function execution. If none of the above is present with the return statement a None object is returned.\', \'One important thing to note is, in Python every variable name is a reference. When we pass a variable to a function, a new reference to the object is created. Parameter passing in Python is the same as reference passing in Java.\', \'When we pass a reference and change the received reference to something else, the connection between the passed and received parameter is broken. For example, consider the below program.xa0\', \'Another example to demonstrate that the reference link is broken if we assign a new value (inside the function).xa0\', \'In Python, an anonymous function means that a function is without a name. As we already know the def keyword is used to define the normal functions and the lambda keyword is used to create anonymous functions. Please see this for details.\', \'A function that is defined inside another function is known as the inner function or nested function. Nested functions are able to access variables of the enclosing scope. Inner functions are used so that they can be protected from everything happening outside the function.\']','[]','[\'# A simple Python function def fun():  print(\"Welcome to GFG\")\', \'# A simple Python function def fun():  print(\"Welcome to GFG\")         # Driver code to call a functionfun()\', \'# A simple Python function to check# whether x is even or odd  def evenOdd(x):    if (x % 2 == 0):        print(\"even\")    else:        print(\"odd\")  # Driver code to call the functionevenOdd(2)evenOdd(3)\', \'# Python program to demonstrate# default arguments  def myFun(x, y=50):    print(\"x: \", x)    print(\"y: \", y)  # Driver code (We call myFun() with only# argument)myFun(10)\', \"# Python program to demonstrate Keyword Argumentsdef student(firstname, lastname):    print(firstname, lastname)  # Keyword argumentsstudent(firstname=\'Geeks\', lastname=\'Practice\')student(lastname=\'Practice\', firstname=\'Geeks\')\", \"# Python program to illustrate# *args for variable number of arguments  def myFun(*argv):    for arg in argv:        print(arg)  myFun(\'Hello\', \'Welcome\', \'to\', \'GeeksforGeeks\')\", \'# Python program to illustrate# *kwargs for variable number of keyword arguments  def myFun(**kwargs):    for key, value in kwargs.items():        print(\"%s == %s\" % (key, value))  # Driver codemyFun(first=\'Geeks\', mid=\'for\', last=\'Geeks\')\', \'# A simple Python function to check# whether x is even or odd  def evenOdd(x):    \"\"\"Function to check if the number is even or odd\"\"\"         if (x % 2 == 0):        print(\"even\")    else:        print(\"odd\")  # Driver code to call the functionprint(evenOdd.__doc__)\', \'def square_value(num):    \"\"\"This function returns the square    value of the entered number\"\"\"    return num**2  print(square_value(2))print(square_value(-4))\', \'# Here x is a new reference to same list lstdef myFun(x):    x[0] = 20  # Driver Code (Note that lst is modified# after function call.lst = [10, 11, 12, 13, 14, 15]myFun(lst)print(lst)\', \'def myFun(x):     # After below line link of x with previous    # object gets broken. A new object is assigned    # to x.    x = [20, 30, 40]  # Driver Code (Note that lst is not modified# after function call.lst = [10, 11, 12, 13, 14, 15]myFun(lst)print(lst)\', \'def myFun(x):     # After below line link of x with previous    # object gets broken. A new object is assigned    # to x.    x = 20  # Driver Code (Note that lst is not modified# after function call.x = 10myFun(x)print(x)\', \'def swap(x, y):    temp = x    x = y    y = temp  # Driver codex = 2y = 3swap(x, y)print(x)print(y)\', \'# Python code to illustrate the cube of a number# using lambda function  def cube(x): return x*x*x cube_v2 = lambda x : x*x*x print(cube(7))print(cube_v2(7))\', \"# Python program to# demonstrate accessing of# variables of nested functions def f1():    s = \'I love GeeksforGeeks\'         def f2():        print(s)             f2() # Driver\'s codef1()\"]','[\'def function_name(parameters):\n    \"\"\"docstring\"\"\"\n    statement(s)\n    return expression\', \'Welcome to GFG\', \'even\nodd\', \"(\'x: \', 10)\n(\'y: \', 50)\", \"(\'Geeks\', \'Practice\')\n(\'Geeks\', \'Practice\')\", \'Hello\nWelcome\nto\nGeeksforGeeks\', \'first == Geeks\nmid == for\nlast == Geeks\', \'Syntax: print(function_name.__doc__)\', \'Function to check if the number is even or odd\', \'Syntax: return [expression_list]\', \'4\n16\', \'[20, 11, 12, 13, 14, 15]\', \'[10, 11, 12, 13, 14, 15]\', \'10\', \'2\n3\', \'343\', \'I love GeeksforGeeks\']','[]','[\'*args (Non-Keyword Arguments)|||**kwargs (Keyword Arguments)&&&Quiz on Python Functions|||Difference between Method and Function in Python|||First Class functions in Python|||Recent articles on Python Functions.\']'),(41,'[\'*args and **kwargs in Python\']','[\'python3\', \'Python3\', \'python\', \'python\', \'python3\', \'python3\']','[\'Using *args and **kwargs to call a function\', \'Using *args and **kwargs in same line to call a function\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200907141910/keyword-300x176.PNG\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.linkedin.com/in/kishlayverma/\', \'http://contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Special Symbols Used for passing arguments:-\', \'1.)*args (Non-Keyword Arguments)\', \'2.)**kwargs (Keyword Arguments)\', \'2.)**kwargs\', \'Example for usage of **kwargs:xa0\']','[\'In Python, we can pass a variable number of arguments to a function using special symbols. There are two special symbols:\', \'Note: “We use the “wildcard” or “*” notation like this – *args OR **kwargs – as our function’s argument when we have doubts about the number of xa0arguments we should pass in a function.”xa0\', \'The special syntax *args in function definitions in python is used to pass a variable number of arguments to a function. It is used to pass a non-key worded, variable-length argument list.xa0\', \'The special syntax **kwargs in function definitions in python is used to pass a keyworded, variable-length argument list. We use the name kwargs with the double star. The reason is because the double star allows us to pass through keyword arguments (and any number of them).\']','[\'This article is contributed by Kishlay Verma. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\"# Python program to illustrate # *args for variable number of argumentsdef myFun(*argv):    for arg in argv:        print (arg)   myFun(\'Hello\', \'Welcome\', \'to\', \'GeeksforGeeks\')\", \'# Python program to illustrate# *args with first extra argumentdef myFun(arg1, *argv):    print (\"First argument :\", arg1)    for arg in argv:        print(\"Next argument through *argv :\", arg) myFun(\'Hello\', \'Welcome\', \'to\', \'GeeksforGeeks\')\', \'# Python program to illustrate # *kwargs for variable number of keyword arguments def myFun(**kwargs):    for key, value in kwargs.items():        print (\"%s == %s\" %(key, value)) # Driver codemyFun(first =\'Geeks\', mid =\'for\', last=\'Geeks\')\', \'# Python program to illustrate  **kwargs for# variable number of keyword arguments with# one extra argument. def myFun(arg1, **kwargs):    for key, value in kwargs.items():        print (\"%s == %s\" %(key, value)) # Driver codemyFun(\"Hi\", first =\'Geeks\', mid =\'for\', last=\'Geeks\')\', \'def myFun(arg1, arg2, arg3):    print(\"arg1:\", arg1)    print(\"arg2:\", arg2)    print(\"arg3:\", arg3)     # Now we can use *args or **kwargs to# pass arguments to this function :args = (\"Geeks\", \"for\", \"Geeks\")myFun(*args) kwargs = {\"arg1\" : \"Geeks\", \"arg2\" : \"for\", \"arg3\" : \"Geeks\"}myFun(**kwargs)\', \'def myFun(*args,**kwargs):    print(\"args: \", args)    print(\"kwargs: \", kwargs)  # Now we can use both *args ,**kwargs# to pass arguments to this function :myFun(\'geeks\',\'for\',\'geeks\',first=\"Geeks\",mid=\"for\",last=\"Geeks\")\']','[\'Hello\nWelcome\nto\nGeeksforGeeks\', \'First argument : Hello\nNext argument through *argv : Welcome\nNext argument through *argv : to\nNext argument through *argv : GeeksforGeeks\', \'last == Geeks\nmid == for\nfirst == Geeks\', \'last == Geeks\nmid == for\nfirst == Geeks\', \'arg1: Geeks\narg2: for\narg3: Geeks\narg1: Geeks\narg2: for\narg3: Geeks\', \"args: (\'geeks\', \'for\', \'geeks\')\nkwargs {\'first\': \'Geeks\', \'mid\': \'for\', \'last\': \'Geeks\'}\"]','[]','[\'The syntax is to use the symbol * to take in a variable number of arguments; by convention, it is often used with the word args.|||What *args allows you to do is take in more arguments than the number of formal arguments that you previously defined. With *args, any number of extra arguments can be tacked on to your current formal parameters (including zero extra arguments).|||For example : we want to make a multiply function that takes any number of arguments and able to multiply them all together. It can be done using *args.|||Using the *, the variable that we associate with the * becomes an iterable meaning you can do things like iterate over it, run some higher-order functions such as map and filter, etc.&&&A keyword argument is where you provide a name to the variable as you pass it into the function.|||One can think of the kwargs as being a dictionary that maps each keyword to the value that we pass alongside it. That is why when we iterate over the kwargs there doesn’t seem to be any order in which they were printed out.\']'),(42,'[\'When to use yield instead of return in Python?\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Let’s see with an example:\']','[\'The yield statement suspends function’s execution and sends a value back to the caller, but retains enough state to enable function to resume where it is left off. When resumed, the function continues execution immediately after the last yield run. This allows its code to produce a series of values over time, rather than computing them at once and sending them back like a list.\', \'Return sends a specified value back to its caller whereas Yield can produce a sequence of values. We should use yield when we want to iterate over a sequence, but don’t want to store the entire sequence in memory.\', \'Yield are used in Python generators. A generator function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function.\', \'This article is contributed by Arpit Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\']','[]','[\'# A Simple Python program to demonstrate working# of yield  # A generator function that yields 1 for the first time,# 2 second time and 3 third timedef simpleGeneratorFun():    yield 1    yield 2    yield 3  # Driver code to check above generator functionfor value in simpleGeneratorFun():     print(value)\', \'# A Python program to generate squares from 1# to 100 using yield and therefore generator  # An infinite generator function that prints# next square number. It starts with 1def nextSquare():    i = 1      # An Infinite loop to generate squares     while True:        yield i*i                        i += 1  # Next execution resumes                 # from this point       # Driver code to test above generator # functionfor num in nextSquare():    if num > 100:         break        print(num)\']','[\'1\n2\n3\', \'1\n4\n9\n16\n25\n36\n49\n64\n81\n100\']','[]','[]'),(43,'[\'Generators in Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/\', \'https://www.geeksforgeeks.org/iterators-in-python/\', \'https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/\', \'https://www.geeksforgeeks.org/iterators-in-python/\', \'http://www.dabeaz.com/finalgenerator/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Prerequisites: Yield Keyword and Iterators\', \'There are two terms involved when we discuss generators.\', \'As another example, below is a generator for Fibonacci Numbers.\']','[\'So a generator function returns an generator object that is iterable, i.e., can be used as an Iterators .\', \'Refer below link for more advanced applications of generators in Python.http://www.dabeaz.com/finalgenerator/\', \'This article is contributed by Shwetanshu Rohatgi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Applications : Suppose we to create a stream of Fibonacci numbers, adopting the generator approach makes it trivial; we just have to call next(x) to get the next Fibonacci number without bothering about where or when the stream of numbers ends.A more practical type of stream processing is handling large data files such as log files. Generators provide a space efficient method for such data processing as only parts of the file are handled at one given point in time. We can also use Iterators for these purposes, but Generator provides a quick way (We don’t need to write __next__ and __iter__ methods here).\']','[\'# A generator function that yields 1 for first time,# 2 second time and 3 third timedef simpleGeneratorFun():    yield 1                yield 2                yield 3               # Driver code to check above generator functionfor value in simpleGeneratorFun():     print(value)\', \'# A Python program to demonstrate use of # generator object with next()   # A generator functiondef simpleGeneratorFun():    yield 1    yield 2    yield 3   # x is a generator objectx = simpleGeneratorFun()  # Iterating over the generator object using nextprint(x.next()) # In Python 3, __next__()print(x.next())print(x.next())\', \'# A simple generator for Fibonacci Numbersdef fib(limit):          # Initialize first two Fibonacci Numbers     a, b = 0, 1      # One by one yield next Fibonacci Number    while a < limit:        yield a        a, b = b, a + b  # Create a generator objectx = fib(5)  # Iterating over the generator object using nextprint(x.next()) # In Python 3, __next__()print(x.next())print(x.next())print(x.next())print(x.next())  # Iterating over the generator object using for# in loop.print(\"\\nUsing for in loop\")for i in fib(5):     print(i)\']','[\'1\n2\n3\', \'1\n2\n3\', \'0\n1\n1\n2\n3\n\nUsing for in loop\n0\n1\n1\n2\n3\']','[]','[\'Generator-Function : A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function.# A generator function that yields 1 for first time,# 2 second time and 3 third timedef simpleGeneratorFun():yield 1yield 2yield 3# Driver code to check above generator functionfor value in simpleGeneratorFun():print(value)Output :1\n2\n3|||Generator-Object : Generator functions return a generator object. Generator objects are used either by calling the next method on the generator object or using the generator object in a “for in” loop (as shown in the above program).# A Python program to demonstrate use of# generator object with next()# A generator functiondef simpleGeneratorFun():yield 1yield 2yield 3# x is a generator objectx = simpleGeneratorFun()# Iterating over the generator object using nextprint(x.next()) # In Python 3, __next__()print(x.next())print(x.next())Output :1\n2\n3\']'),(44,'[\'Python lambda\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Example #1:\', \'Example #2:xa0\', \'Example #3: Difference between lambda and normal function callxa0\', \'Example #4: The lambda function gets more helpful when used inside a function.\', \'Example #5: filter() and map(\']','[\'In Python, anonymous function means that a function is without a name. As we already know that def keyword is used to define the normal functions and the lambda keyword is used to create anonymous functions. It has the following syntax:\', \'In this above example, the lambda is not being called by the print function but simply returning the function object and the memory location where it is stored.xa0So, to make the print to print the string first we need to call the lambda so that the string will get pass the print.\', \'We can also replace list comprehension with Lambda by using a map() method, not only it is a fast but efficient too, and let’s also see how to use lambda in the filter().\']','[]','[\"# Python program to demonstrate# lambda functions  string =\'GeeksforGeeks\' # lambda returns a function objectprint(lambda string : string)\", \'# Python program to demonstrate# lambda functions  x =\"GeeksforGeeks\" # lambda gets pass to print(lambda x : print(x))(x)\', \'# Python program to illustrate cube of a number # showing difference between def() and lambda().  def cube(y):    return y*y*y;   g = lambda x: x*x*xprint(g(7))   print(cube(5))\', \'# Python program to demonstrate# lambda functions  def power(n):    return lambda a : a ** n # base = lambda a : a**2 get# returned to basebase = power(2) print(\"Now power is set to 2\") # when calling base it gets# executed with already set with 2print(\"8 powerof 2 = \", base(8)) # base = lambda a : a**5 get# returned to basebase = power(5)print(\"Now power is set to 5\") # when calling base it gets executed# with already set with newly 2print(\"8 powerof 5 = \", base(8))\', \'# Python program to demonstrate# lambda functions inside map()# and filter()  a = [100, 2, 8, 60, 5, 4, 3, 31, 10, 11] # in filter either we use assignment or# conditional operator, the pass actual# parameter will get returnfiltered = filter (lambda x: x % 2 == 0, a)print(list(filtered)) # in map either we use assignment or# conditional operator, the result of# the value will get returnedmapped = map (lambda x: x % 2 == 0, a)print(list(mapped))\']','[\'lambda arguments : expression\', \'<function <lambda> at 0x7f268eb16f28>\', \'GeeksforGeeks\', \'343\n125\', \'Now power is set to 2\n8 powerof 2 =  64\nNow power is set to 5\n8 powerof 5 =  32768\', \'[100, 2, 8, 60, 4, 10]\n[True, True, True, True, False, True, False, False, True, False]\']','[]','[\'This function can have any number of arguments but only one expression, which is evaluated and returned.|||One is free to use lambda functions wherever function objects are required.|||You need to keep in your knowledge that lambda functions are syntactically restricted to a single expression.|||It has various uses in particular fields of programming besides other types of expressions in functions.\']'),(45,'[\'Global and Local Variables in Python\']','[\'Local Variables\', \'Python3\', \'Python3\', \'Global Variables\', \'Python3\', \'Python3\', \'Python3\', \'Global Keyword\', \'Python3\', \'Python3\']','[]','[]','[\'https://www.youtube.com/embed/SH_PDn1FG9I?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example: Creating local variables\', \'If we will try to use this local variable outside the function then let’s see what will happen.\', \'Example: Defining and accessing global variables\', \'Note: As there are no locals, the value from the globals will be used.\', \'Example 1: Using global keyword\', \'Now there is no ambiguity.xa0\', \'Example 2: Using global and local variables\']','[\'Local variables are those which are initialized inside a function and belongs only to that particular function. It cannot be accessed anywhere outside the function. Let’s see how to create a local variable.\', \'The global variables are those which are defined outside any function and which are accessible throughout the program i.e. inside and outside of every function Let’s see how to create a global variable.\', \'The variable s is defined as the global variable and is used both inside the function as well as outside the function.\', \'Now, what if there is a variable with the same name initialized inside a function as well as globally. Now the question arises, will the local variable will have some effect on the global variable or vice versa, and what will happen if we change the value of variable inside of the function f()? Will it affect the globals as well? We test it in the following piece of code:xa0\', \'If a variable with the same name is defined inside the scope of function as well then it will print the value given inside the function only and not the global value.xa0\', \'The question is, what if we try to change the value of a global variable inside the function. Let’s see it using the below example.\', \'To make the above program work, we need to use the “global” keyword. Let’s see what this global keyword is.\']','[\'Global variables are those which are not defined inside any function and have a global scope whereas local variables are those which are defined inside a function and its scope is limited to that function only. In other words, we can say that local variables are accessible only inside the function in which it was initialized whereas the global variables are accessible throughout the program and inside every function.xa0\', \'We only need to use the global keyword in a function if we want to do assignments or change the global variable. global is not needed for printing and accessing. Python “assumes” that we want a local variable due to the assignment to s inside of f(), so the first statement throws the error message. Any variable which is changed or created inside of a function is local if it hasn’t been declared as a global variable. To tell Python, that we want to use the global variable, we have to use the keyword “global”, as can be seen in the following example:xa0\', \'This article is contributed by Shwetanshu Rohatgi. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\'def f():         # local variable    s = \"I love Geeksforgeeks\"    print(s) # Driver codef()\', \'def f():         # local variable    s = \"I love Geeksforgeeks\"    print(\"Inside Function:\", s) # Driver codef()print(s)\', \'# This function uses global variable sdef f():    print(\"Inside Function\", s) # Global scopes = \"I love Geeksforgeeks\"f()print(\"Outside Function\", s)\', \'# This function has a variable with# name same as s.def f():    s = \"Me too.\"    print(s) # Global scopes = \"I love Geeksforgeeks\"f()print(s)\', \'# This function uses global variable sdef f():    s += \'GFG\'    print(\"Inside Function\", s) # Global scopes = \"I love Geeksforgeeks\"f()\', \'# This function modifies the global variable \'s\'def f():    global s    s += \' GFG\'    print(s)    s = \"Look for Geeksforgeeks Python Section\"    print(s) # Global Scopes = \"Python is great!\"f()print(s)\', \"a = 1 # Uses global because there is no local \'a\'def f():    print(\'Inside f() : \', a) # Variable \'a\' is redefined as a localdef g():    a = 2    print(\'Inside g() : \', a) # Uses global keyword to modify global \'a\'def h():    global a    a = 3    print(\'Inside h() : \', a)  # Global scopeprint(\'global : \', a)f()print(\'global : \', a)g()print(\'global : \', a)h()print(\'global : \', a)\"]','[\'I love Geeksforgeeks\', \"NameError: name \'s\' is not defined\", \'Inside Function I love Geeksforgeeks\nOutside Function I love Geeksforgeeks\', \'Me too.\nI love Geeksforgeeks.\', \"UnboundLocalError: local variable \'s\' referenced before assignment\", \'Python is great! GFG\nLook for Geeksforgeeks Python Section\nLook for Geeksforgeeks Python Section\', \'global :  1\nInside f() :  1\nglobal :  1\nInside g() :  2\nglobal :  1\nInside h() :  3\nglobal :  3\']','[]','[]'),(46,'[\'Global keyword in Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/global-local-variables-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Rules of global keyword:\', \'Code 2: Create a modify.py file to modify global variables:\']','[\'Global keyword is a keyword that allows a user to modify a variable outside of the current scope. It is used to create global variables from a non-global scope i.e inside a function. Global keyword is used inside a function only when we want to do assignments or when we want to change a variable. Global is not needed for printing and accessing.\', \'Use of global keyword:To access a global variable inside a function there is no need to use global keyword.Example 1:\', \'If we need to assign a new value to a global variable then we can do that by declaring the variable as global.Code 2: Without global keyword\', \'This output is an error because we are trying to assign a value to a variable in an outer scope. This can be done with the use of global variable.Code 3 : With global keyword\', \'Here we have modified the value of x, y, and z. These variables were defined in the module config.py, hence we have to import config module and we can use config.variable_name to access these variables.Code 3: Create a main.py file to modify global variables:\', \'Global in Nested functionsIn order to use global inside a nested functions, we have to declare a variable with global keyword inside a nested function\', \'In the above example Before and after making change(), the variable x takes the value of local variable i.e x = 15. Outside of the add() function, the variable x will take value defined in the change() function i.e x = 20. because we have used global keyword in x to create global variable inside the change() function (local scope).\']','[\'In the above example, we first define x as global keyword inside the function change(). The value of x is then incremented by 5, ie. x=x+5 and hence we get the output as 20.As we can see by changing the value inside the function change(), the change is also reflected in the value outside the global variable.xa0Global variables across python modules :The best way to share global variables across different modules within the same program is to create a special module (often named config or cfg). Import the config module in all modules of your application; the module then becomes available as a global name. There is only one instance of each module and so any changes made to the module object get reflected everywhere. For Example, sharing global variables across modulesCode 1: Create a config.py file to store global variables:\']','[\'# Python program showing no need to# use global keyword for accessing# a global value  # global variablea = 15b = 10  # function to perform additiondef add():    c = a + b    print(c)  # calling a functionadd()\', \'# Python program showing to modify# a global value without using global# keyword  a = 15  # function to change a global valuedef change():      # increment value of a by 5    a = a + 5     print(a)  change()\', \'# Python program to modify a global# value inside a function  x = 15def change():      # using a global keyword    global x      # increment value of a by 5    x = x + 5     print(\"Value of x inside a function :\", x)change()print(\"Value of x outside a function :\", x)\', \'x = 0y = 0z =\"none\"\', \'import configconfig.x = 1config.y = 2config.z =\"geeksforgeeks\"\', \'import configimport modifyprint(config.x)print(config.y)print(config.z)\', \'# Python program showing a use of# global in nested function  def add():     x = 15            def change():         global x         x = 20     print(\"Before making changing: \", x)     print(\"Making change\")     change()     print(\"After making change: \", x)  add()print(\"value of x\",x)\']','[\'25\', \"UnboundLocalError: local variable \'a\' referenced before assignment\", \'Value of x inside a function : 20\nValue of x outside a function : 20\', \'1\n2\ngeeksforgeeks\', \'Before making changing:  15\nMaking change\nAfter making change:  15\nvalue of x 20\']','[]','[\'If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.|||Variables that are only referenced inside a function are implicitly global.|||We Use global keyword to use a global variable inside a function.|||There is no need to use global keyword outside a function.\']'),(47,'[\'First Class functions in Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Properties of first class functions:\', \'Examples illustrating First Class functions in Python\']','[\'First class objects in a language are handled uniformly throughout. They may be stored in data structures, passed as arguments, or used in control structures. A programming language is said to support first-class functions if it treats functions as first-class objects. Python supports the concept of First Class functions.\', \'1. Functions are objects: Python functions are first class objects. In the example below, we are assigning function to a variable. This assignment doesn’t call the function. It takes the function object referenced by shout and creates a second name pointing to it, yell.\', \'2. Functions can be passed as arguments to other functions: Because functions are objects we can pass them as arguments to other functions. Functions that can accept other functions as arguments are also called higher-order functions. In the example below, we have created a function greet which takes a function as an argument.\', \'3. Functions can return another function: Because functions are objects we can return a function from another function. In the below example, the create_adder function returns adder function.\', \'This article is contributed by Mayank Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\"# Python program to illustrate functions# can be treated as objectsdef shout(text):    return text.upper()  print (shout(\'Hello\'))  yell = shout  print (yell(\'Hello\'))\", \'# Python program to illustrate functions# can be passed as arguments to other functionsdef shout(text):    return text.upper()  def whisper(text):    return text.lower()  def greet(func):    # storing the function in a variable    greeting = func(\"\"\"Hi, I am created by a function                    passed as an argument.\"\"\")    print (greeting)   greet(shout)greet(whisper)\', \'# Python program to illustrate functions# Functions can return another function  def create_adder(x):    def adder(y):        return x+y      return adder  add_15 = create_adder(15)  print (add_15(10))\']','[\'HELLO\nHELLO\', \'HI, I AM CREATED BY A FUNCTION PASSED AS AN ARGUMENT.\nhi, i am created by a function passed as an argument.\', \'25\']','[]','[\'A function is an instance of the Object type.|||You can store the function in a variable.|||You can pass the function as a parameter to another function.|||You can return the function from a function.|||You can store them in data structures such as hash tables, lists, …\']'),(48,'[\'Python Closures\']','[\'Python\', \'Python3\', \'Python3\']','[\'Nested functions in Python\', \'Python Closures\', \'When and why to use Closures:\']','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'http://contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'Before seeing what a closure is, we have to first understand what nested functions and non-local variables are.xa0xa0\', \'A function that is defined inside another function is known as a nested function. Nested functions are able to access variables of the enclosing scope.xa0In Python, these non-local variables can be accessed only within their scope and not outside their scope. This can be illustrated by the following example:xa0\', \'As we can see innerFunction() can easily be accessed inside the outerFunction body but not outside of it’s body. Hence, here, innerFunction() is treated as nested Function which uses text as non-local variable.xa0\', \'A Closure is a function object that remembers values in enclosing scopes even if they are not present in memory.xa0xa0\', \'1. As closures are used as callback functions, they provide some sort of data hiding. This helps us to reduce the use of global variables.\', \'2. xa0When we have few functions in our code, closures prove to be an efficient way. But if we need to have many functions, then go for class (OOP).\']','[\'This article is contributed by Omkar Pathak. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\"# Python program to illustrate# nested functionsdef outerFunction(text):    text = text     def innerFunction():        print(text)     innerFunction() if __name__ == \'__main__\':    outerFunction(\'Hey!\')\", \"# Python program to illustrate# closuresdef outerFunction(text):    text = text     def innerFunction():        print(text)     # Note we are returning function    # WITHOUT parenthesis    return innerFunction  if __name__ == \'__main__\':    myFunction = outerFunction(\'Hey!\')    myFunction()\", \'# Python program to illustrate# closuresimport logginglogging.basicConfig(filename=\'example.log\',                    level=logging.INFO)  def logger(func):    def log_func(*args):        logging.info(            \'Running \"{}\" with arguments {}\'.format(func.__name__,                                                    args))        print(func(*args))             # Necessary for closure to    # work (returning WITHOUT parenthesis)    return log_func             def add(x, y):    return x+y def sub(x, y):    return x-y add_logger = logger(add)sub_logger = logger(sub) add_logger(3, 3)add_logger(4, 5) sub_logger(10, 5)sub_logger(20, 10)\']','[\'Output:\nomkarpathak@omkarpathak-Inspiron-3542:\n~/Documents/Python-Programs/$ python Closures.py \nHey!\', \'OUTPUT:\nomkarpathak@omkarpathak-Inspiron-3542:\n~/Documents/Python-Programs/$ python MoreOnClosures.py \n6\n9\n5\n10\']','[]','[\'It is a record that stores a function together with an environment: a mapping associating each free variable of the function (variables that are used locally but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created.|||A closure—unlike a plain function—allows the function to access those captured variables through the closure’s copies of their values or references, even when the function is invoked outside their scope.&&&&&&As observed from the above code, closures help to invoke functions outside their scope.|||The function innerFunction has its scope only inside the outerFunction. But with the use of closures, we can easily extend its scope to invoke a function outside its scope.&&&\']'),(49,'[\'Decorators in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Decorators\', \'Python3\', \'Python3\', \'What if a function returns something or an argument is passed to the function?\', \'Python3\', \'Chaining Decorators\', \'Python3\']','[\'First Class ObjectsIn Python, functions are first class objects that mean that functions in Python can be used or passed as arguments.Properties of first class functions:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/decorators_step.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/function-decorators-in-python-set-1-introduction/\', \'https://www.geeksforgeeks.org/first-class-functions-python/\', \'https://www.geeksforgeeks.org/chain-multiple-decorators-in-python/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Consider the below examples for better understanding.\', \'Example 1: Treating the functions as objects.xa0\', \'Example 2: Passing the function as an argumentxa0\', \'Example 3: Returning functions from another function.\', \'Syntax for Decorator:xa0\', \'Decorator can modify the behaviour:xa0xa0\', \'In simpler terms chaining decorators means decorating a function with multiple decorators.\', \'The above example is similar to calling the function as –\']','[\'Decorators are a very powerful and useful tool in Python since it allows programmers to modify the behaviour of function or class. Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it. But before diving deep into decorators let us understand some concepts that will come in handy in learning the decorators.\', \'In the above example, we have assigned the function shout to a variable. This will not call the function instead it takes the function object referenced by a shout and creates a second name pointing to it, yell.\', \'In the above example, the greet function takes another function as a parameter (shout and whisper in this case). The function passed as an argument is then called inside the function greet.\', \'In the above example, we have created a function inside of another function and then have returned the function created inside.The above three examples depict the important concepts that are needed to understand decorators. After going through them let us now dive deep into decorators.\', \'As stated above the decorators are used to modify the behaviour of function or class. In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.\', \'In the above code, gfg_decorator is a callable function, will add some code on the top of some another callable function, hello_decorator function and return the wrapper function.\', \'Let’s see the behaviour of the above code how it runs step by step when the “function_to_be_used” is called.\', \'Let’s jump to another example where we can easily find out the execution time of a function using a decorator.\', \'In all the above examples the functions didn’t return anything so there wasn’t any issue, but one may need the returned value.\', \'In the above example, you may notice a keen difference in the parameters of the inner function. The inner function takes the argument as *args and **kwargs which means that a tuple of positional arguments or a dictionary of keyword arguments can be passed of any length. This makes it a general decorator that can decorate a function having any number of arguments.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\"# Python program to illustrate functions# can be treated as objectsdef shout(text):    return text.upper() print(shout(\'Hello\')) yell = shout print(yell(\'Hello\'))\", \'# Python program to illustrate functions# can be passed as arguments to other functionsdef shout(text):    return text.upper() def whisper(text):    return text.lower() def greet(func):    # storing the function in a variable    greeting = func(\"\"\"Hi, I am created by a function passed as an argument.\"\"\")    print (greeting) greet(shout)greet(whisper)\', \'# Python program to illustrate functions# Functions can return another function def create_adder(x):    def adder(y):        return x+y     return adder add_15 = create_adder(15) print(add_15(10))\', \'# defining a decoratordef hello_decorator(func):     # inner1 is a Wrapper function in    # which the argument is called         # inner function can access the outer local    # functions like in this case \"func\"    def inner1():        print(\"Hello, this is before function execution\")         # calling the actual function now        # inside the wrapper function.        func()         print(\"This is after function execution\")             return inner1  # defining a function, to be called inside wrapperdef function_to_be_used():    print(\"This is inside the function !!\")  # passing \'function_to_be_used\' inside the# decorator to control its behaviourfunction_to_be_used = hello_decorator(function_to_be_used)  # calling the functionfunction_to_be_used()\', \'# importing librariesimport timeimport math # decorator to calculate duration# taken by any function.def calculate_time(func):         # added arguments inside the inner1,    # if function takes any arguments,    # can be added like this.    def inner1(*args, **kwargs):         # storing time before function execution        begin = time.time()                 func(*args, **kwargs)         # storing time after function execution        end = time.time()        print(\"Total time taken in : \", func.__name__, end - begin)     return inner1   # this can be added to any function present,# in this case to calculate a factorial@calculate_timedef factorial(num):     # sleep 2 seconds because it takes very less time    # so that you can see the actual difference    time.sleep(2)    print(math.factorial(num)) # calling the function.factorial(10)\', \'def hello_decorator(func):    def inner1(*args, **kwargs):                 print(\"before Execution\")                 # getting the returned value        returned_value = func(*args, **kwargs)        print(\"after Execution\")                 # returning the value to the original frame        return returned_value             return inner1  # adding decorator to the function@hello_decoratordef sum_two_numbers(a, b):    print(\"Inside the function\")    return a + b a, b = 1, 2 # getting the value through return of the functionprint(\"Sum =\", sum_two_numbers(a, b))\', \'# code for testing decorator chainingdef decor1(func):    def inner():        x = func()        return x * x    return inner def decor(func):    def inner():        x = func()        return 2 * x    return inner @decor1@decordef num():    return 10 print(num())\']','[\'HELLO\nHELLO\', \'HI, I AM CREATED BY A FUNCTION PASSED AS AN ARGUMENT.\nhi, i am created by a function passed as an argument.\', \'25\', \'@gfg_decorator\ndef hello_decorator():\n    print(\"Gfg\")\n\n\'\'\'Above code is equivalent to -\n\ndef hello_decorator():\n    print(\"Gfg\")\n    \nhello_decorator = gfg_decorator(hello_decorator)\'\'\'\', \'Hello, this is before function execution\nThis is inside the function !!\nThis is after function execution\', \'3628800\nTotal time taken in :  factorial 2.0061802864074707\', \'before Execution\nInside the function\nafter Execution\nSum = 3\', \'400\', \'decor1(decor(num))\']','[]','[\'A function is an instance of the Object type.|||You can store the function in a variable.|||You can pass the function as a parameter to another function.|||You can return the function from a function.|||You can store them in data structures such as hash tables, lists, …\']'),(50,'[\'Decorators with parameters in Python\']','[\'The syntax for decorators with parameters :\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200418060619/inside-the-decorator-python.png\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200418060638/inside-function-python-decorator.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/decorators-in-python/\', \'https://www.geeksforgeeks.org/function-decorators-in-python-set-1-introduction/\', \'https://www.geeksforgeeks.org/decorators-in-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisite: Decorators in Python, Function Decorators\', \'Decorators with parameters is similar to normal decorators.xa0\', \'The above code is equivalent toxa0\', \'How Decorator with parameters is implementedxa0\', \'Here params can also be empty.xa0\', \'Observe these first :\', \'Another Way:xa0\', \'xa0xa0Let’s move to another example:xa0\', \'Example #1:xa0\', \'Example #2:xa0xa0\', \'Example #3: xa0\', \'1. Inside the Decorator\', \'2. Inside the function\', \'Note: Image snapshots are taken using PythonTutor.xa0\']','[\'We know Decorators are a very powerful and useful tool in Python since it allows programmers to modify the behavior of function or class. In this article, we will learn about the Decorators with Parameters with help of multiple examples.xa0Python functions are First Class citizens which means that functions can be treated similarly to objects.xa0xa0\', \'As the execution starts from left to right decorator(params) is called which returns a function object fun_obj. Using the fun_obj the call fun_obj(fun_name) is made. Inside the inner function, required operations are performed and the actual function reference is returned which will be assigned to func_name. Now, func_name() can be used to call the function with decorator applied on it.xa0\', \'This example also tells us that Outer function parameters can be accessed by the enclosed inner function.xa0xa0\']','[]','[\'def decorators(*args, **kwargs):    def inner(func):        \'\'\'           do operations with func        \'\'\'        return func    return inner #this is the fun_obj mentioned in the above content @decorators(params)def func():    \"\"\"         function implementation    \"\"\"\', \'# Python code to illustrate# Decorators basic in Python def decorator_fun(func):  print(\"Inside decorator\")   def inner(*args, **kwargs):    print(\"Inside inner function\")    print(\"Decorated the function\")    # do operations with func         func()       return inner @decorator_fundef func_to():    print(\"Inside actual function\") func_to()\', \'# Python code to illustrate# Decorators with parameters in Python def decorator_fun(func):  print(\"Inside decorator\")   def inner(*args, **kwargs):    print(\"Inside inner function\")    print(\"Decorated the function\")         func()       return inner  def func_to():    print(\"Inside actual function\") # another way of using decoratorsdecorator_fun(func_to)()\', \'# Python code to illustrate# Decorators with parameters in Python def decorator(*args, **kwargs):    print(\"Inside decorator\")         def inner(func):                 # code functionality here        print(\"Inside inner function\")        print(\"I like\", kwargs[\'like\'])                 func()             # returning inner function       return inner @decorator(like = \"geeksforgeeks\")def my_func():    print(\"Inside actual function\")\', \'# Python code to illustrate# Decorators with parameters in Python def decorator_func(x, y):     def Inner(func):         def wrapper(*args, **kwargs):            print(\"I like Geeksforgeeks\")            print(\"Summation of values - {}\".format(x+y) )             func(*args, **kwargs)                     return wrapper    return Inner  # Not using decoratordef my_fun(*args):    for ele in args:        print(ele) # another way of using decoratorsdecorator_func(12, 15)(my_fun)(\'Geeks\', \'for\', \'Geeks\')\', \'# Python code to illustrate# Decorators with parameters in Python  (Multi-level Decorators)  def decodecorator(dataType, message1, message2):    def decorator(fun):        print(message1)        def wrapper(*args, **kwargs):            print(message2)            if all([type(arg) == dataType for arg in args]):                return fun(*args, **kwargs)            return \"Invalid Input\"        return wrapper    return decorator  @decodecorator(str, \"Decorator for \'stringJoin\'\", \"stringJoin started ...\")def stringJoin(*args):    st = \'\'    for i in args:        st += i    return st  @decodecorator(int, \"Decorator for \'summation\'\\n\", \"summation started ...\")def summation(*args):    summ = 0    for arg in args:        summ += arg    return summ  print(stringJoin(\"I \", \'like \', \"Geeks\", \'for\', \"geeks\"))print()print(summation(19, 2, 8, 533, 67, 981, 119))\']','[\"@decorator(params)\ndef func_name():\n    \'\'\' Function implementation\'\'\'\", \'def func_name():\n    \'\'\' Function implementation\'\'\'\n\nfunc_name = (decorator(params))(func_name)\n\"\"\"\', \'Inside decorator\nInside inner function\nDecorated the function\nInside actual function\', \'Inside decorator\nInside inner function\nI like geeksforgeeks\nInside actual function\', \'I like Geeksforgeeks\nSummation of values - 27\nGeeks\nfor\nGeeks\', \"Decorator for \'stringJoin\'\nDecorator for \'summation\'\n\nstringJoin started ...\nI like Geeksforgeeks\n\nsummation started ...\n1729\"]','[]','[\'Function can be assigned to a variable i.e they can be referenced.|||Function can be passed as an argument to another function.|||Function can be returned from a function.\']'),(51,'[\'Memoization using decorators in Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\', \'https://www.geeksforgeeks.org/memoization-1d-2d-and-3d/\', \'https://www.geeksforgeeks.org/function-decorators-in-python-set-1-introduction/\', \'https://ide.geeksforgeeks.org/5DjCwox4B9\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The above program can be optimized by memoization using decorators.\']','[\'Recursion is a programming technique where a function calls itself repeatedly till a termination condition is met. Some of the examples where recursion is used are: calculation of fibonacci series, factorial etc. But the issue with them is that in the recursion tree, there can be chances that the sub-problem that is already solved is being solved again, which adds to an overhead.\', \'Memoization is a technique of recording the intermediate results so that it can be used to avoid repeated calculations and speed up the programs. It can be used to optimize the programs that use recursion. In Python, memoization can be done with the help of function decorators.\', \'Let us take the example of calculating the factorial of a number. The simple program below uses recursion to solve the problem:\', \'3. When facto(5) is called, the recursive operations take place in addition to the storage of intermediate results. Every time a calculation needs to be done, it is checked if the result is available in memory. If yes, then it is used, else, the value is calculated and is stored in memory.4. We can verify the fact that memoization actually works, please see output of this program.\']','[\'Explanation:1. A function called memoize_factorial has been defined. It’s main purpose is to store the intermediate results in the variable called memory.2. The second function called facto is the function to calculate the factorial. It has been annotated by a decorator(the function memoize_factorial). The facto has access to the memory variable as a result of the concept of closures.The annotation is equivalent to writing,\']','[\'# Simple recursive program to find factorialdef facto(num):    if num == 1:        return 1    else:        return num * facto(num-1)            print(facto(5))\', \"# Factorial program with memoization using# decorators.  # A decorator function for function \'f\' passed# as parameterdef memoize_factorial(f):    memory = {}      # This inner function has access to memory    # and \'f\'    def inner(num):        if num not in memory:                     memory[num] = f(num)        return memory[num]      return inner      @memoize_factorialdef facto(num):    if num == 1:        return 1    else:        return num * facto(num-1)  print(facto(5))\"]','[\'facto = memoize_factorial(facto)\']','[]','[]'),(52,'[\'Python Classes and Objects\']','[\'Python3\', \'Class Objects\', \'Python3\', \'The self\', \'__init__ method\', \'Python3\', \'Class and Instance Variables\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Blank-Diagram-Page-1-5.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Blank-Diagram-Page-1-3.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Some points on Python class:xa0xa0\', \'Defining a class –xa0\', \'Declaring an object –xa0\', \'Defining instance variable using a constructor.xa0\', \'Defining instance variable using the normal method.\']','[\'Class creates a user-defined data structure, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object.\', \'In the above example, the class keyword indicates that you are creating a class followed by the name of the class (Dog in this case).xa0\', \'An Object is an instance of a Class. A class is like a blueprint while an instance is a copy of the class with actual values. It’s not an idea anymore, it’s an actual dog, like a dog of breed pug who’s seven years old. You can have many dogs to create many different instances, but without the class as a guide, you would be lost, not knowing what information is required.An object consists of :xa0\', \'When an object of a class is created, the class is said to be instantiated. All the instances share the attributes and the behavior of the class. But the values of those attributes, i.e. the state are unique for each object. A single class may have any number of instances.\', \'In the above example, an object is created which is basically a dog named Rodger. This class only has two class attributes that tell us that Rodger is a dog and a mammal.xa0\', \'When we call a method of this object as myobject.method(arg1, arg2), this is automatically converted by Python into MyClass.method(myobject, arg1, arg2) – this is all the special self is about.xa0\', \'The __init__ method is similar to constructors in C++ and Java. Constructors are used to initializing the object’s state. Like methods, a constructor also contains a collection of statements(i.e. instructions) that are executed at the time of Object creation. It runs as soon as an object of a class is instantiated. The method is useful to do any initialization you want to do with your object.\', \'Instance variables are for data, unique to each instance and class variables are for attributes and methods shared by all instances of the class. Instance variables are variables whose value is assigned inside a constructor or method with self whereas class variables are variables whose value is assigned in the class.\']','[\'A class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by their class) for modifying their state.\', \'To understand the need for creating a class let’s consider an example, let’s say you wanted to track the number of dogs that may have different attributes like breed, age. If a list is used, the first element could be the dog’s breed while the second element could represent its age. Let’s suppose there are 100 different dogs, then how would you know which element is supposed to be which? What if you wanted to add other properties to these dogs? This lacks organization and it’s the exact need for classes.xa0\']','[\'# Python3 program to# demonstrate defining# a class class Dog:    pass\', \'# Python3 program to# demonstrate instantiating# a class  class Dog:         # A simple class    # attribute    attr1 = \"mammal\"    attr2 = \"dog\"     # A sample method     def fun(self):        print(\"I\'m a\", self.attr1)        print(\"I\'m a\", self.attr2) # Driver code# Object instantiationRodger = Dog() # Accessing class attributes# and method through objectsprint(Rodger.attr1)Rodger.fun()\', \"# A Sample class with init methodclass Person:       # init method or constructor     def __init__(self, name):        self.name = name       # Sample Method     def say_hi(self):        print(\'Hello, my name is\', self.name)   p = Person(\'Nikhil\')p.say_hi()\", \'# Python3 program to show that the variables with a value # assigned in the class declaration, are class variables and# variables inside methods and constructors are instance# variables.    # Class for Dogclass Dog:       # Class Variable    animal = \'dog\'                   # The init method or constructor    def __init__(self, breed, color):             # Instance Variable            self.breed = breed        self.color = color           # Objects of Dog classRodger = Dog(\"Pug\", \"brown\")Buzo = Dog(\"Bulldog\", \"black\") print(\'Rodger details:\')  print(\'Rodger is a\', Rodger.animal)print(\'Breed: \', Rodger.breed)print(\'Color: \', Rodger.color) print(\'\\nBuzo details:\')  print(\'Buzo is a\', Buzo.animal)print(\'Breed: \', Buzo.breed)print(\'Color: \', Buzo.color) # Class variables can be accessed using class# name alsoprint(\"\\nAccessing class variable using class name\")print(Dog.animal)\', \'# Python3 program to show that we can create # instance variables inside methods    # Class for Dogclass Dog:           # Class Variable    animal = \'dog\'                # The init method or constructor    def __init__(self, breed):                   # Instance Variable        self.breed = breed                   # Adds an instance variable     def setColor(self, color):        self.color = color           # Retrieves instance variable        def getColor(self):            return self.color      # Driver CodeRodger = Dog(\"pug\")Rodger.setColor(\"brown\")print(Rodger.getColor())\']','[\'Class Definition Syntax:\n\nclass ClassName:\n    # Statement-1\n    .\n    .\n    .\n    # Statement-N\', \"mammal\nI\'m a mammal\nI\'m a dog\", \'Hello, my name is Nikhil\', \'Rodger details:\nRodger is a dog\nBreed:  Pug\nColor:  brown\n\nBuzo details:\nBuzo is a dog\nBreed:  Bulldog\nColor:  black\n\nAccessing class variable using class name\ndog\', \'brown\']','[]','[\'Classes are created by keyword class.|||Attributes are the variables that belong to a class.|||Attributes are always public and can be accessed using the dot (.) operator. Eg.: Myclass.Myattribute&&&State: It is represented by the attributes of an object. It also reflects the properties of an object.|||Behavior: It is represented by the methods of an object. It also reflects the response of an object to other objects.|||Identity: It gives a unique name to an object and enables one object to interact with other objects.&&&Class methods must have an extra first parameter in the method definition. We do not give a value for this parameter when we call the method, Python provides it.|||If we have a method that takes no arguments, then we still have to have one argument.|||This is similar to this pointer in C++ and this reference in Java.\']'),(53,'[\'Constructors in Python\']','[\'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/object-oriented-programming-in-python-set-1-class-and-its-members/\', \'https://www.geeksforgeeks.org/object-oriented-programming-in-python-set-2-data-hiding-and-object-printing/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Types of constructors :xa0\', \'Example of default constructor :xa0xa0\', \'Example of the parameterized constructor :xa0\']','[]','[\'Prerequisites: Object-Oriented Programming in Python, Object-Oriented Programming in Python | Set 2xa0Constructors are generally used for instantiating an object. The task of constructors is to initialize(assign values) to the data members of the class when an object of the class is created. In Python the __init__() method is called the constructor and is always called when an object is created.Syntax of constructor declaration :xa0\']','[\'class GeekforGeeks:     # default constructor    def __init__(self):        self.geek = \"GeekforGeeks\"     # a method for printing data members    def print_Geek(self):        print(self.geek)  # creating object of the classobj = GeekforGeeks() # calling the instance method using the object objobj.print_Geek()\', \'class Addition:    first = 0    second = 0    answer = 0         # parameterized constructor    def __init__(self, f, s):        self.first = f        self.second = s         def display(self):        print(\"First number = \" + str(self.first))        print(\"Second number = \" + str(self.second))        print(\"Addition of two numbers = \" + str(self.answer))     def calculate(self):        self.answer = self.first + self.second # creating object of the class# this will invoke parameterized constructorobj = Addition(1000, 2000) # perform Additionobj.calculate() # display resultobj.display()\']','[\'def __init__(self):\n    # body of the constructor\', \'GeekforGeeks\', \'First number = 1000\nSecond number = 2000\nAddition of two numbers = 3000\']','[]','[\'default constructor: The default constructor is a simple constructor which doesn’t accept any arguments. Its definition has only one argument which is a reference to the instance being constructed.|||parameterized constructor: constructor with parameters is known as parameterized constructor. The parameterized constructor takes its first argument as a reference to the instance being constructed known as self and the rest of the arguments are provided by the programmer.\']'),(54,'[\'Destructors in Python\']','[\'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/constructors-in-python/\', \'https://www.geeksforgeeks.org/delattr-del-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 3 : Now, consider the following example :xa0xa0\']','[\'Note : A reference to objects is also deleted when the object goes out of reference or when the program ends.xa0Example 1 : Here is the simple example of destructor. By using del keyword we deleted the all references of object ‘obj’, therefore destructor invoked automatically.xa0\', \'Note : The destructor was called after the program ended or when all the references to object are deleted i.e when the reference count becomes zero, not when object went out of scope.Example 2 :This example gives the explanation of above mentioned note. Here, notice that the destructor is called after the ‘Program End…’ printed.xa0\']','[\'Constructors in PythonDestructors are called when an object gets destroyed. In Python, destructors are not needed as much as in C++ because Python has a garbage collector that handles memory management automatically.xa0The __del__() method is a known as a destructor method in Python. It is called when all references to the object have been deleted i.e when an object is garbage collected.xa0Syntax of destructor declaration :xa0xa0\', \'In this example when the function fun() is called, it creates an instance of class B which passes itself to class A, which then sets a reference to class B and resulting in a circular reference.Generally, Python’s garbage collector which is used to detect these types of cyclic references would remove it but in this example the use of custom destructor marks this item as “uncollectable”.xa0Simply, it doesn’t know the order in which to destroy the objects, so it leaves them. Therefore, if your instances are involved in circular references they will live in memory for as long as the application run.xa0\']','[\"# Python program to illustrate destructorclass Employee:     # Initializing    def __init__(self):        print(\'Employee created.\')     # Deleting (Calling destructor)    def __del__(self):        print(\'Destructor called, Employee deleted.\') obj = Employee()del obj\", \'# Python program to illustrate destructor class Employee:     # Initializing    def __init__(self):        print(\'Employee created\')     # Calling destructor    def __del__(self):        print(\"Destructor called\") def Create_obj():    print(\'Making Object...\')    obj = Employee()    print(\'function end...\')    return obj print(\'Calling Create_obj() function...\')obj = Create_obj()print(\'Program End...\')\', \'# Python program to illustrate destructor class A:    def __init__(self, bb):        self.b = bb class B:    def __init__(self):        self.a = A(self)    def __del__(self):        print(\"die\") def fun():    b = B() fun()\']','[\'def __del__(self):\n  # body of destructor\', \'Employee created.\nDestructor called, Employee deleted.\', \'Calling Create_obj() function...\nMaking Object...\nEmployee created\nfunction end...\nProgram End...\nDestructor called\', \'die\']','[]','[]'),(55,'[\'Inheritance in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/object-class-in-java/\', \'https://docs.python.org/release/2.2.3/whatsnew/sect-rellinks.html\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Below is a simple example of inheritance in Pythonxa0xa0\', \'The following code produces an error for the same reason.xa0xa0\', \'3. Multilevel inheritance: When we have a child and grandchild relationship.xa0\']','[\'Inheritance is the capability of one class to derive or inherit the properties from another class. The benefits of inheritance are:xa0xa0\', \'What is object class?xa0Like Java Object class, in Python (from version 3.x), object is root of all classes.xa0In Python 3.x, “class Test(object)” and “class Test” are same.xa0In Python 2.x, “class Test(object)” creates a class with object as parent (called new style class) and “class Test” creates old style class (without object parent). Refer this for more details.\', \'Subclassing (Calling constructor of parent class)xa0A child class needs to identify which class is its parent class. This can be done by mentioning the parent class name in the definition of the child class.xa0Eg: class subclass_name (superclass_name):xa0_ _ _xa0_ _ _xa0xa0\', \'‘a’ is the instance created for the class Person. It invokes the __init__() of the referred class. You can see ‘object’ written in the declaration of the class Person. In Python, every class inherits from a built-in basic class called ‘object’. The constructor i.e. the ‘__init__’ function of a class is invoked when we create an object variable or an instance of the class.\', \'4. Hierarchical inheritance More than one derived classes are created from a single base.5. Hybrid inheritance: This form combines more than one form of inheritance. Basically, it is a blend of more than one type of inheritance.\', \'Private members of parent classxa0We don’t always want the instance variables of the parent class to be inherited by the child class i.e. we can make some of the instance variables of the parent class private, which won’t be available to the child class.xa0We can make an instance variable by adding double underscores before its name. For example,xa0\', \'Since ‘d’ is made private by those underscores, it is not available to the child class ‘D’ and hence the error.xa0\']','[\'The variables defined within __init__() are called as the instance variables or objects. Hence, ‘name’ and ‘idnumber’ are the objects of the class Person. Similarly, ‘salary’ and ‘post’ are the objects of the class Employee. Since the class Employee inherits from class Person, ‘name’ and ‘idnumber’ are also the objects of class Employee.If you forget to invoke the __init__() of the parent class then its instance variables would not be available to the child class.xa0\', \'Different forms of Inheritance:xa01. Single inheritance: When a child class inherits from only one parent class, it is called single inheritance. We saw an example above.2. Multiple inheritance: When a child class inherits from multiple parent classes, it is called multiple inheritance.xa0Unlike Java and like C++, Python supports multiple inheritance. We specify all parent classes as a comma-separated list in the bracket.xa0xa0\']','[\'# A Python program to demonstrate inheritance    # Base or Super class. Note object in bracket.# (Generally, object is made ancestor of all classes)# In Python 3.x \"class Person\" is # equivalent to \"class Person(object)\"class Person(object):           # Constructor    def __init__(self, name):        self.name = name       # To get name    def getName(self):        return self.name       # To check if this person is an employee    def isEmployee(self):        return False      # Inherited or Subclass (Note Person in bracket)class Employee(Person):       # Here we return true    def isEmployee(self):        return True   # Driver codeemp = Person(\"Geek1\")  # An Object of Personprint(emp.getName(), emp.isEmployee())   emp = Employee(\"Geek2\") # An Object of Employeeprint(emp.getName(), emp.isEmployee())\', \'# Python code to demonstrate how parent constructors# are called.  # parent classclass Person( object ):              # __init__ is known as the constructor                 def __init__(self, name, idnumber):                   self.name = name                self.idnumber = idnumber        def display(self):                print(self.name)                print(self.idnumber)  # child classclass Employee( Person ):                   def __init__(self, name, idnumber, salary, post):                self.salary = salary                self.post = post                  # invoking the __init__ of the parent class                 Person.__init__(self, name, idnumber)                     # creation of an object variable or an instancea = Employee(\'Rahul\', 886012, 200000, \"Intern\")      # calling a function of the class Person using its instancea.display()\', \"# Python program to demonstrate error if we# forget to invoke __init__() of the parent.  class A:      def __init__(self, n = \'Rahul\'):              self.name = nclass B(A):      def __init__(self, roll):              self.roll = roll  object = B(23)print (object.name)\", \'# Python example to show the working of multiple # inheritanceclass Base1(object):    def __init__(self):        self.str1 = \"Geek1\"        print(\"Base1\")  class Base2(object):    def __init__(self):        self.str2 = \"Geek2\"                print(\"Base2\")  class Derived(Base1, Base2):    def __init__(self):                  # Calling constructors of Base1        # and Base2 classes        Base1.__init__(self)        Base2.__init__(self)        print(\"Derived\")              def printStrs(self):        print(self.str1, self.str2)           ob = Derived()ob.printStrs()\', \'# A Python program to demonstrate inheritance   # Base or Super class. Note object in bracket.# (Generally, object is made ancestor of all classes)# In Python 3.x \"class Person\" is # equivalent to \"class Person(object)\"class Base(object):          # Constructor    def __init__(self, name):        self.name = name      # To get name    def getName(self):        return self.name    # Inherited or Sub class (Note Person in bracket)class Child(Base):          # Constructor    def __init__(self, name, age):        Base.__init__(self, name)        self.age = age      # To get name    def getAge(self):        return self.age  # Inherited or Sub class (Note Person in bracket)class GrandChild(Child):          # Constructor    def __init__(self, name, age, address):        Child.__init__(self, name, age)        self.address = address      # To get address    def getAddress(self):        return self.address          # Driver codeg = GrandChild(\"Geek1\", 23, \"Noida\")  print(g.getName(), g.getAge(), g.getAddress())\', \'# Python program to demonstrate private members# of the parent classclass C(object):       def __init__(self):              self.c = 21                # d is private instance variable               self.__d = 42    class D(C):       def __init__(self):              self.e = 84              C.__init__(self)object1 = D()  # produces an error as d is private instance variableprint(object1.d)\']','[\'Geek1 False\nGeek2 True\', \'Rahul\n886012\', \'Traceback (most recent call last):\n  File \"/home/de4570cca20263ac2c4149f435dba22c.py\", line 12, in \n    print (object.name)\nAttributeError: \'B\' object has no attribute \'name\'\', \'Base1\nBase2\nDerived\nGeek1 Geek2\', \'Geek1 23 Noida\', \'File \"/home/993bb61c3e76cda5bb67bd9ea05956a1.py\", line 16, in \n    print (object1.d)                     \nAttributeError: type object \'D\' has no attribute \'d\'\']','[]','[\'It represents real-world relationships well.|||It provides reusability of a code. We don’t have to write the same code again and again. Also, it allows us to add more features to a class without modifying it.|||It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A.\']'),(56,'[\'Types of inheritance Python\']','[\'Python3\', \'Types of Inheritance in Python\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200108135809/inheritance11.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200108144424/multiple-inheritance1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200108144705/Multilevel-inheritance1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200108144949/Hierarchical-inheritance1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'Inheritance is defined as the capability of one class to derive or inherit the properties from some other class and use it whenever needed. Inheritance provides the following properties:xa0xa0\', \'Types of Inheritance depends upon the number of child and parent classes involved. There are four types of inheritance in Python:xa0\', \'Single Inheritance: Single inheritance enables a derived class to inherit properties from a single parent class, thus enabling code reusability and the addition of new features to existing code.xa0\', \'Multiple Inheritance: When a class can be derived from more than one base class this type of inheritance is called multiple inheritance. In multiple inheritance, all the features of the base classes are inherited into the derived class.xa0xa0\', \'Multilevel Inheritancexa0In multilevel inheritance, features of the base class and the derived class are further inherited into the new derived class. This is similar to a relationship representing a child and grandfather.xa0xa0\', \'Hierarchical Inheritance: When more than one derived classes are created from a single base this type of inheritance is called hierarchical inheritance. In this program, we have a parent (base) class and two child (derived) classes.xa0\', \'Hybrid Inheritance: Inheritance consisting of multiple types of inheritance is called hybrid inheritance.xa0\']','[]','[\'# A Python program to demonstrate# inheritance   # Base class or Parent classclass Child:     # Constructor    def __init__(self, name):        self.name = name     # To get name    def getName(self):        return self.name     # To check if this person is student    def isStudent(self):        return False # Derived class or Child classclass Student(Child):     # True is returned    def isStudent(self):        return True   # Driver code# An Object of Childstd = Child(\"Ram\")print(std.getName(), std.isStudent()) # An Object of Studentstd = Student(\"Shivam\")print(std.getName(), std.isStudent())\', \'# Python program to demonstrate# single inheritance  # Base classclass Parent:     def func1(self):          print(\"This function is in parent class.\") # Derived classclass Child(Parent):     def func2(self):          print(\"This function is in child class.\") # Driver\'s codeobject = Child()object.func1()object.func2()\', \'# Python program to demonstrate# multiple inheritance  # Base class1class Mother:    mothername = \"\"    def mother(self):        print(self.mothername) # Base class2class Father:    fathername = \"\"    def father(self):        print(self.fathername) # Derived classclass Son(Mother, Father):    def parents(self):        print(\"Father :\", self.fathername)        print(\"Mother :\", self.mothername) # Driver\'s codes1 = Son()s1.fathername = \"RAM\"s1.mothername = \"SITA\"s1.parents()\', \'# Python program to demonstrate# multilevel inheritance # Base classclass Grandfather:     def __init__(self, grandfathername):        self.grandfathername = grandfathername # Intermediate classclass Father(Grandfather):    def __init__(self, fathername, grandfathername):        self.fathername = fathername         # invoking constructor of Grandfather class        Grandfather.__init__(self, grandfathername) # Derived classclass Son(Father):    def __init__(self,sonname, fathername, grandfathername):        self.sonname = sonname         # invoking constructor of Father class        Father.__init__(self, fathername, grandfathername)     def print_name(self):        print(\'Grandfather name :\', self.grandfathername)        print(\"Father name :\", self.fathername)        print(\"Son name :\", self.sonname) #  Driver codes1 = Son(\'Prince\', \'Rampal\', \'Lal mani\')print(s1.grandfathername)s1.print_name()\', \'# Python program to demonstrate# Hierarchical inheritance  # Base classclass Parent:      def func1(self):          print(\"This function is in parent class.\") # Derived class1class Child1(Parent):      def func2(self):          print(\"This function is in child 1.\") # Derivied class2class Child2(Parent):      def func3(self):          print(\"This function is in child 2.\")  # Driver\'s codeobject1 = Child1()object2 = Child2()object1.func1()object1.func2()object2.func1()object2.func3()\', \'# Python program to demonstrate# hybrid inheritance  class School:     def func1(self):         print(\"This function is in school.\")  class Student1(School):     def func2(self):         print(\"This function is in student 1. \")  class Student2(School):     def func3(self):         print(\"This function is in student 2.\")  class Student3(Student1, School):     def func4(self):         print(\"This function is in student 3.\")  # Driver\'s codeobject = Student3()object.func1()object.func2()\']','[\'Ram False\nShivam True\', \'This function is in parent class.\nThis function is in child class.\', \'Father : RAM\nMother : SITA\', \'Lal mani\nGrandfather name : Lal mani\nFather name : Rampal\nSon name : Prince\', \'This function is in parent class.\nThis function is in child 1.\nThis function is in parent class.\nThis function is in child 2.\', \'This function is in school.\nThis function is in student 1.\']','[]','[\'It represents real-world relationships well.|||It provides reusability of code. We don’t have to write the same code again and again. Also, it allows us to add more features to a class without modifying it.|||It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A.\']'),(57,'[\'Encapsulation in Python\']','[\'variable\', \'Protected members\', \'Python3\', \'Private members\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191013164254/encapsulation-in-python.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/private-variables-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'However, to define a private member prefix the member name with double underscore “__”.\']','[\'A class is an example of encapsulation as it encapsulates all the data that is member functions, variables, etc.\', \'Protected members (in C++ and JAVA) are those members of the class that cannot be accessed outside the class but can be accessed from within the class and its subclasses. To accomplish this in Python, just follow the convention by prefixing the name of the member by a single underscore “_”.\', \'Although the protected variable can be accessed out of the class as well as in the derived class(modified too in derived class), it is customary(convention not a rule) to not access the protected out the class body.\', \'Note: The __init__ method is a constructor and runs as soon as an object of a class is instantiated.xa0xa0\', \'Private members are similar to protected members, the difference is that the class members declared private should neither be accessed outside the class nor by any base class. In Python, there is no existence of Private instance variables that cannot be accessed except inside a class.\', \'Note: Python’s private and protected member can be accessed outside the class through python name mangling.xa0\']','[\'Encapsulation is one of the fundamental concepts in object-oriented programming (OOP). It describes the idea of wrapping data and the methods that work on data within one unit. This puts restrictions on accessing variables and methods directly and can prevent the accidental modification of data. To prevent accidental change, an object’s variable can only be changed by an object’s method. Those types of variables are known as private\', \'Consider a real-life example of encapsulation, in a company, there are different sections like the accounts section, finance section, sales section etc. The finance section handles all the financial transactions and keeps records of all the data related to finance. Similarly, the sales section handles all the sales-related activities and keeps records of all the sales. Now there may arise a situation when for some reason an official from the finance section needs all the data about sales in a particular month. In this case, he is not allowed to directly access the data of the sales section. He will first have to contact some other officer in the sales section and then request him to give the particular data. This is what encapsulation is. Here the data of the sales section and the employees that can manipulate them are wrapped under a single name “sales section”. Using encapsulation also hides the data. In this example, the data of the sections like sales, finance, or accounts are hidden from any other section.\']','[\'# Python program to# demonstrate protected members # Creating a base classclass Base:    def __init__(self):         # Protected member        self._a = 2 # Creating a derived classclass Derived(Base):    def __init__(self):         # Calling constructor of        # Base class        Base.__init__(self)        print(\"Calling protected member of base class: \",              self._a)         # Modify the protected variable:        self._a = 3        print(\"Calling modified protected member outside class: \",              self._a)  obj1 = Derived() obj2 = Base() # Calling protected member# Can be accessed but should not be done due to conventionprint(\"Accessing protedted member of obj1: \", obj1._a) # Accessing the protected variable outsideprint(\"Accessing protedted member of obj2: \", obj2._a)\', \'# Python program to# demonstrate private members # Creating a Base class  class Base:    def __init__(self):        self.a = \"GeeksforGeeks\"        self.__c = \"GeeksforGeeks\" # Creating a derived classclass Derived(Base):    def __init__(self):         # Calling constructor of        # Base class        Base.__init__(self)        print(\"Calling private member of base class: \")        print(self.__c)  # Driver codeobj1 = Base()print(obj1.a) # Uncommenting print(obj1.c) will# raise an AttributeError # Uncommenting obj2 = Derived() will# also raise an AtrributeError as# private member of base class# is called inside derived class\']','[\'Calling protected member of base class:  2\nCalling modified protected member outside class:  3\nAccessing protedted member of obj1:  3\nAccessing protedted member of obj2:  2\', \'GeeksforGeeks\', \'Traceback (most recent call last):\n  File \"/home/f4905b43bfcf29567e360c709d3c52bd.py\", line 25, in <module>\n    print(obj1.c)\nAttributeError: \'Base\' object has no attribute \'c\'\n\nTraceback (most recent call last):\n  File \"/home/4d97a4efe3ea68e55f48f1e7c7ed39cf.py\", line 27, in <module>\n    obj2 = Derived()\n  File \"/home/4d97a4efe3ea68e55f48f1e7c7ed39cf.py\", line 20, in __init__\n    print(self.__c)\nAttributeError: \'Derived\' object has no attribute \'_Derived__c\'\']','[]','[]'),(58,'[\'Polymorphism in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Examples of user-defined polymorphic functions :xa0xa0\', \'xa0xa0Code: Implementing Polymorphism with a Functionxa0xa0\']','[\'What is Polymorphism: The word polymorphism means having many forms. In programming, polymorphism means the same function name (but different signatures) being used for different types.Example of inbuilt polymorphic functions :xa0xa0\', \'Polymorphism with class methods:xa0The below code shows how Python can use two different class types, in the same way. We create a for loop that iterates through a tuple of objects. Then call the methods without being concerned about which class type each object is. We assume that these methods actually exist in each class.xa0xa0\']','[\'xa0Polymorphism with Inheritance:xa0In Python, Polymorphism lets us define methods in the child class that have the same name as the methods in the parent class. In inheritance, the child class inherits the methods from the parent class. However, it is possible to modify a method in a child class that it has inherited from the parent class. This is particularly useful in cases where the method inherited from the parent class doesn’t quite fit the child class. In such cases, we re-implement the method in the child class. This process of re-implementing a method in the child class is known as Method Overriding.xa0xa0\', \'xa0Polymorphism with a Function and objects:xa0It is also possible to create a function that can take any object, allowing for polymorphism. In this example, let’s create a function called “func()” which will take an object which we will name “obj”. Though we are using the name ‘obj’, any instantiated object will be able to be called into this function. Next, let’s give the function something to do that uses the ‘obj’ object we passed to it. In this case, let’s call the three methods, viz., capital(), language() and type(), each of which is defined in the two classes ‘India’ and ‘USA’. Next, let’s create instantiations of both the ‘India’ and ‘USA’ classes if we don’t have them already. With those, we can call their action using the same func() function:xa0xa0\']','[\'# Python program to demonstrate in-built poly-# morphic functions # len() being used for a stringprint(len(\"geeks\")) # len() being used for a listprint(len([10, 20, 30]))\', \'# A simple Python function to demonstrate# Polymorphism def add(x, y, z = 0):    return x + y+z # Driver codeprint(add(2, 3))print(add(2, 3, 4))\', \'class India():    def capital(self):        print(\"New Delhi is the capital of India.\")     def language(self):        print(\"Hindi is the most widely spoken language of India.\")     def type(self):        print(\"India is a developing country.\") class USA():    def capital(self):        print(\"Washington, D.C. is the capital of USA.\")     def language(self):        print(\"English is the primary language of USA.\")     def type(self):        print(\"USA is a developed country.\") obj_ind = India()obj_usa = USA()for country in (obj_ind, obj_usa):    country.capital()    country.language()    country.type()\', \'class Bird:  def intro(self):    print(\"There are many types of birds.\")       def flight(self):    print(\"Most of the birds can fly but some cannot.\")   class sparrow(Bird):  def flight(self):    print(\"Sparrows can fly.\")     class ostrich(Bird):  def flight(self):    print(\"Ostriches cannot fly.\")     obj_bird = Bird()obj_spr = sparrow()obj_ost = ostrich() obj_bird.intro()obj_bird.flight() obj_spr.intro()obj_spr.flight() obj_ost.intro()obj_ost.flight()\', \'def func(obj):    obj.capital()    obj.language()    obj.type()  obj_ind = India()obj_usa = USA()  func(obj_ind)func(obj_usa)\', \'class India():    def capital(self):        print(\"New Delhi is the capital of India.\")      def language(self):        print(\"Hindi is the most widely spoken language of India.\")      def type(self):        print(\"India is a developing country.\")  class USA():    def capital(self):        print(\"Washington, D.C. is the capital of USA.\")      def language(self):        print(\"English is the primary language of USA.\")      def type(self):        print(\"USA is a developed country.\") def func(obj):    obj.capital()    obj.language()    obj.type()  obj_ind = India()obj_usa = USA()  func(obj_ind)func(obj_usa)\']','[\'5\n3\', \'5\n9\', \'New Delhi is the capital of India.\nHindi is the most widely spoken language of India.\nIndia is a developing country.\nWashington, D.C. is the capital of USA.\nEnglish is the primary language of USA.\nUSA is a developed country.\', \'There are many types of birds.\nMost of the birds can fly but some cannot.\nThere are many types of birds.\nSparrows can fly.\nThere are many types of birds.\nOstriches cannot fly.\', \'New Delhi is the capital of India.\nHindi is the most widely spoken language of India.\nIndia is a developing country.\nWashington, D.C. is the capital of USA.\nEnglish is the primary language of USA.\nUSA is a developed country.\']','[]','[]'),(59,'[\'Class or Static Variables in Python\']','[\'Python\']','[]','[]','[\'https://www.youtube.com/embed/FlGiKthOFbU?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/c-plus-plus/\', \'https://www.geeksforgeeks.org/java/\', \'https://www.geeksforgeeks.org/static-keyword-in-java/\', \'https://www.geeksforgeeks.org/stati/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'All variables which are assigned a value in the class declaration are class variables. And variables that are assigned values inside methods are instance variables.xa0\', \'This article is contributed by Harshit Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\']','[\'All objects share class or static variables. An instance or non-static variables are different for different objects (every object has a copy). For example, let a Computer Science Student be represented by class CSStudent. The class may have a static variable whose value is “cse” for all objects. And class may also have non-static members like name and roll. In C++ and Java, we can use static keywords to make a variable a class variable. The variables which don’t have a preceding static keyword are instance variables. See this for the Java example and this for the C++ example.The Python approach is simple; it doesn’t require a static keyword.xa0\']','[\'# Python program to show that the variables with a value# assigned in class declaration, are class variables # Class for Computer Science Studentclass CSStudent:    stream = \'cse\'                  # Class Variable    def __init__(self,name,roll):        self.name = name            # Instance Variable        self.roll = roll            # Instance Variable # Objects of CSStudent classa = CSStudent(\'Geek\', 1)b = CSStudent(\'Nerd\', 2) print(a.stream)  # prints \"cse\"print(b.stream)  # prints \"cse\"print(a.name)    # prints \"Geek\"print(b.name)    # prints \"Nerd\"print(a.roll)    # prints \"1\"print(b.roll)    # prints \"2\" # Class variables can be accessed using class# name alsoprint(CSStudent.stream) # prints \"cse\" # Now if we change the stream for just a it won\'t be changed for ba.stream = \'ece\'print(a.stream) # prints \'ece\'print(b.stream) # prints \'cse\' # To change the stream for all instances of the class we can change it# directly from the classCSStudent.stream = \'mech\' print(a.stream) # prints \'ece\'print(b.stream) # prints \'mech\'\']','[\'cse\ncse\nGeek\nNerd\n1\n2\ncse\nece\ncse\nece\nmech\']','[]','[]'),(60,'[\'Class method vs Static method in Python\']','[\'Python3\']','[\'Class Method\', \'Static Method\', \'Class method vs Static Method\', \'When to use what?\', \'How to define a class method and a static method?\']','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/function-decorators-in-python-set-1-introduction/\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'A static method does not receive an implicit first argument.xa0\', \'Implementationxa0\']','[\'The @classmethod decorator is a built-in function decorator that is an expression that gets evaluated after your function is defined. The result of that evaluation shadows your function definition.xa0A class method receives the class as an implicit first argument, just like an instance method receives the instancexa0Syntax:xa0\']','[\'To define a class method in python, we use @classmethod decorator, and to define a static method we use @staticmethod decorator.xa0Let us look at an example to understand the difference between both of them. Let us say we want to create a class Person. Now, python doesn’t support method overloading like C++ or Java so we use class methods to create factory methods. In the below example we use a class method to create a person object from birth year.As explained above we use static methods to create utility functions. In the below example we use a static method to check if a person is an adult or not.xa0xa0\', \'This article is contributed by Mayank Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\"# Python program to demonstrate# use of class method and static method.from datetime import date  class Person:    def __init__(self, name, age):        self.name = name        self.age = age          # a class method to create a Person object by birth year.    @classmethod    def fromBirthYear(cls, name, year):        return cls(name, date.today().year - year)          # a static method to check if a Person is adult or not.    @staticmethod    def isAdult(age):        return age > 18  person1 = Person(\'mayank\', 21)person2 = Person.fromBirthYear(\'mayank\', 1996)  print (person1.age)print (person2.age)  # print the resultprint (Person.isAdult(22))\"]','[\'class C(object):\n    @classmethod\n    def fun(cls, arg1, arg2, ...):\n       ....\nfun: function that needs to be converted into a class method\nreturns: a class method for function.\', \'class C(object):\n    @staticmethod\n    def fun(arg1, arg2, ...):\n        ...\nreturns: a static method for function fun.\', \'21\n25\nTrue\']','[]','[\'A class method is a method that is bound to the class and not the object of the class.|||They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance.|||It can modify a class state that would apply across all the instances of the class. For example, it can modify a class variable that will be applicable to all the instances.&&&A static method is also a method that is bound to the class and not the object of the class.|||A static method can’t access or modify the class state.|||It is present in a class because it makes sense for the method to be present in class.&&&A class method takes cls as the first parameter while a static method needs no specific parameters.|||A class method can access or modify the class state while a static method can’t access or modify it.|||In general, static methods know nothing about the class state. They are utility-type methods that take some parameters and work upon those parameters. On the other hand class methods must have class as a parameter.|||We use @classmethod decorator in python to create a class method and we use @staticmethod decorator to create a static method in python.&&&We generally use class method to create factory methods. Factory methods return class objects ( similar to a constructor ) for different use cases.|||We generally use static methods to create utility functions.\']'),(61,'[\'Python Exception Handling\']','[\'Difference between Syntax Error and Exceptions\', \'Python3\', \'Python3\', \'Try and Except Statement – Catching Exceptions\', \'Python3\', \'Catching Specific Exception\', \'Python3\', \'Try with Else Clause\', \'Python3\', \'Finally Keyword in Python\', \'Python3\', \'Raising Exception\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200616141640/python_syntax1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200616143535/zerodivition.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-the-new-generation-language/\', \'http://quiz.geeksforgeeks.org/python-set-2-variables-expressions-conditions-and-functions/\', \'http://quiz.geeksforgeeks.org/python-set-3-strings-lists-tuples-iterations/\', \'http://quiz.geeksforgeeks.org/python-set-4-dictionary-keywords-python/\', \'https://www.geeksforgeeks.org/errors-and-exceptions-in-python/\', \'https://docs.python.org/2/library/exceptions.html#exception-hierarchy\', \'https://www.geeksforgeeks.org/finally-keyword-in-python/\', \'https://www.geeksforgeeks.org/python-raising-an-exception-to-another-exception/\', \'https://www.facebook.com/nikhilkumar.singh.don\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'We have explored basic python till now from Set 1 to 4 (Set 1 | Set 2 | Set 3 | Set 4).xa0\', \'In the above example raised the ZeroDivisionError as we are trying to divide a number by 0.\', \'Example: Catching specific exception in Python\', \'If you comment on the line fun(3), the output will bexa0\', \'The output above is so because as soon as python tries to access the value of b, NameError occurs.xa0\', \'Example: Try with else clause\', \'https://youtu.be/fCRB8ADbBSc\', \'This article is contributed by Nikhil Kumar Singh(nickzuck_007)xa0\']','[\'In this article, we will discuss how to handle exceptions in Python using try. catch, and finally statement with the help of proper examples.xa0\', \'Error in Python can be of two types i.e. Syntax errors and Exceptions. Errors are the problems in a program due to which the program will stop the execution. On the other hand, exceptions are raised when some internal events occur which changes the normal flow of the program.xa0\', \'Syntax Error: As the name suggests this error is caused by the wrong syntax in the code. It leads to the termination of the program.xa0\', \'Exceptions: Exceptions are raised when the program is syntactically correct, but the code resulted in an error. This error does not stop the execution of the program, however, it changes the normal flow of the program.\', \'Note: Exception is the base class for all the exceptions in Python. You can check the exception hierarchy here.xa0xa0\', \'Try and except statements are used to catch and handle exceptions in Python. Statements that can raise exceptions are kept inside the try clause and the statements that handle the exception are written inside except clause.\', \'Example: Let us try to access the array element whose index is out of bound and handle the corresponding exception.\', \'In the above example, the statements that can cause the error are placed inside the try statement (second print statement in our case). The second print statement tries to access the fourth element of the list which is not there and this throws an exception. This exception is then caught by the except statement.\', \'A try statement can have more than one except clause, to specify handlers for different exceptions. Please note that at most one handler will be executed. For example, we can add IndexError in the above code. The general syntax for adding specific exceptions are –xa0\', \'In python, you can also use the else clause on the try-except block which must be present after all the except clauses. The code enters the else block only if the try clause does not raise an exception.\', \'Python provides a keyword finally, which is always executed after the try and except blocks. The final block always executes after normal termination of try block or after try block terminates due to some exception.\', \'The raise statement allows the programmer to force a specific exception to occur. The sole argument in raise indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from Exception).\', \'The output of the above code will simply line printed as “An exception” but a Runtime error will also occur in the last due to the raise statement in the last line. So, the output on your command line will look likexa0\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'# initialize the amount variableamount = 10000 # check that You are eligible to#  purchase Dsa Self Paced or notif(amount > 2999)print(\"You are eligible to purchase Dsa Self Paced\")\', \'# initialize the amount variablemarks = 10000 # perform division with 0a = marks / 0print(a)\', \'# Python program to handle simple runtime error#Python 3 a = [1, 2, 3]try:    print (\"Second element = %d\" %(a[1]))     # Throws error since there are only 3 elements in array    print (\"Fourth element = %d\" %(a[3])) except:    print (\"An error occurred\")\', \'# Program to handle multiple errors with one# except statement# Python 3 def fun(a):    if a < 4:         # throws ZeroDivisionError for a = 3        b = a/(a-3)     # throws NameError if a >= 4    print(\"Value of b = \", b)     try:    fun(3)    fun(5) # note that braces () are necessary here for# multiple exceptionsexcept ZeroDivisionError:    print(\"ZeroDivisionError Occurred and Handled\")except NameError:    print(\"NameError Occurred and Handled\")\', \'# Program to depict else clause with try-except# Python 3# Function which returns a/bdef AbyB(a , b):    try:        c = ((a+b) / (a-b))    except ZeroDivisionError:        print (\"a/b result in 0\")    else:        print (c) # Driver program to test above functionAbyB(2.0, 3.0)AbyB(3.0, 3.0)\', \'# Python program to demonstrate finally # No exception Exception raised in try blocktry:    k = 5//0  # raises divide by zero exception.    print(k) # handles zerodivision exceptionexcept ZeroDivisionError:    print(\"Can\'t divide by zero\") finally:    # this block is always executed    # regardless of exception generation.    print(\'This is always executed\')\', \'# Program to depict Raising Exception try:    raise NameError(\"Hi there\")  # Raise Errorexcept NameError:    print (\"An exception\")    raise  # To determine whether the exception was raised or not\']','[\'Second element = 2\nAn error occurred\', \'try:\n    # statement(s)\nexcept IndexError:\n    # statement(s)\nexcept ValueError:\n    # statement(s)\', \'ZeroDivisionError Occurred and Handled\', \'NameError Occurred and Handled\', \'-5.0\na/b result in 0\', \'try:\n    # Some Code.... \n\nexcept:\n    # optional block\n    # Handling of exception (if required)\n\nelse:\n    # execute if no exception\n\nfinally:\n    # Some code .....(always executed)\', \"Can\'t divide by zero\nThis is always executed\", \'Traceback (most recent call last):\n  File \"/home/d6ec14ca595b97bff8d8034bbf212a9f.py\", line 5, in <module>\n    raise NameError(\"Hi there\")  # Raise Error\nNameError: Hi there\']','[]','[]'),(62,'[\'Python Try Except\']','[\'Try Except in Python\', \'Python\', \'Python\', \'Python3\', \'Python3\']','[\'Else Clause\', \'Finally Keyword in Python\']','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/errors-and-exceptions-in-python/?ref=lbp\', \'https://www.geeksforgeeks.org/output-of-python-programs-set-10-exception-handling/\', \'https://www.geeksforgeeks.org/python-set-5-exception-handling/\', \'https://www.geeksforgeeks.org/user-defined-exceptions-python-examples/\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'How try() works?xa0xa0\', \'Code 1: No exception, so the try clause will run.xa0xa0\', \'Output :xa0xa0\', \'Code 1: There is an exception so only except clause will run.xa0xa0\', \'Output :xa0xa0\', \'Related Articles:xa0xa0\']','[\'Error in Python can be of two types i.e. Syntax errors and Exceptions. Errors are the problems in a program due to which the program will stop the execution. On the other hand, exceptions are raised when some internal events occur which changes the normal flow of the program.Note: For more information, refer to Errors and Exceptions in PythonSome of the common Exception Errors are :xa0xa0\', \'Try and Except statement is used to handle these errors within our code in Python. The try block is used to check some code for errors i.e the code inside the try block will execute when there is no error in the program. Whereas the code inside the except block will execute whenever the program encounters some error in the preceding try block.xa0\', \'In python, you can also use the else clause on the try-except block which must be present after all the except clauses. The code enters the else block only if the try clause does not raise an exception.xa0\', \'Python provides a keyword finally, which is always executed after the try and except blocks. The final block always executes after normal termination of try block or after try block terminates due to some exceptions.xa0\']','[\'This article is contributed by Mohit Gupta_OMG ?. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\'# Python code to illustrate# working of try()def divide(x, y):    try:        # Floor Division : Gives only Fractional Part as Answer        result = x // y        print(\"Yeah ! Your answer is :\", result)    except ZeroDivisionError:        print(\"Sorry ! You are dividing by zero \") # Look at parameters and note the working of Programdivide(3, 2)\', \'# Python code to illustrate# working of try()def divide(x, y):    try:        # Floor Division : Gives only Fractional Part as Answer        result = x // y        print(\"Yeah ! Your answer is :\", result)    except ZeroDivisionError:        print(\"Sorry ! You are dividing by zero \") # Look at parameters and note the working of Programdivide(3, 0)\', \'# Program to depict else clause with try-except  # Function which returns a/bdef AbyB(a , b):    try:        c = ((a+b) / (a-b))    except ZeroDivisionError:        print \"a/b result in 0\"    else:        print c  # Driver program to test above functionAbyB(2.0, 3.0)AbyB(3.0, 3.0)\', \'# Python program to demonstrate finally    # No exception Exception raised in try blocktry:    k = 5//0 # raises divide by zero exception.    print(k)    # handles zerodivision exception    except ZeroDivisionError:       print(\"Can\'t divide by zero\")        finally:    # this block is always executed     # regardless of exception generation.    print(\'This is always executed\')\']','[\'try:\n    # Some Code\nexcept:\n    # Executed if error in the\n    # try block\', \"(\'Yeah ! Your answer is :\', 1)\", \'Sorry ! You are dividing by zero\', \'try:\n    # Some Code\nexcept:\n    # Executed if error in the\n    # try block\nelse:\n    # execute if no exception\', \'-5.0\na/b result in 0\', \'try:\n    # Some Code\nexcept:\n    # Executed if error in the\n    # try block\nelse:\n    # execute if no exception\nfinally:\n    # Some code .....(always executed)\', \"Can\'t divide by zero\nThis is always executed\"]','[]','[\'IOError: if the file can’t be opened|||KeyboardInterrupt: when an unrequired key is pressed by the user|||ValueError: when built-in function receives a wrong argument|||EOFError: if End-Of-File is hit without reading any data|||ImportError: if it is unable to find the module&&&First, the try clause is executed i.e. the code between try and except clause.|||If there is no exception, then only the try clause will run, except the clause is finished.|||If any exception occurs, the try clause will be skipped and except clause will run.|||If any exception occurs, but the except clause within the code doesn’t handle it, it is passed on to the outer try statements. If the exception is left unhandled, then the execution stops.|||A try statement can have more than one except clause&&&Output Questions|||Exception Handling in Python|||User-Defined Exceptions\']'),(63,'[\'Errors and Exceptions in Python\']','[\'Syntax errors\', \'Python3\', \'logical errors(Exception)\', \'Python3\', \'Python3\', \'Error Handling\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200616141640/python_syntax1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200616143535/zerodivition.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200616161329/IE.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/built-exceptions-python/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'When the proper syntax of the language is not followed then a syntax error is thrown.Examplexa0xa0\', \'Some of the common built-in exceptions are other than above mention exceptions are:xa0\', \'Note: For more information, refer to Built-in Exceptions in Pythonxa0\']','[\'Errors are the problems in a program due to which the program will stop the execution. On the other hand, exceptions are raised when some internal events occur which changes the normal flow of the program.xa0Two types of Error occurs in python.xa0xa0\', \'It returns a syntax error message because after the if statement a colon: is missing. We can fix this by writing the correct syntax.xa0\', \'When in the runtime an error that occurs after passing the syntax test is called exception or logical type. For example, when we divide any number by zero then the ZeroDivisionError exception is raised, or when we import a module that does not exist then ImportError is raised.Example 1:xa0xa0\', \'In the above example the ZeroDivisionError as we are trying to divide a number by 0.Example 2: When indentation is not correct.xa0xa0\', \'When an error and an exception are raised then we handle that with the help of the Handling method.xa0\']','[]','[\'# initialize the amount variableamount = 10000  # check that You are eligible to#  purchase Dsa Self Paced or notif(amount>2999)    print(\"You are eligible to purchase Dsa Self Paced\")\', \'# initialize the amount variablemarks = 10000  # perform division with 0a = marks / 0print(a)\', \'if(a<3):print(\"gfg\")\', \'# put unsafe operation in try blocktry:     print(\"code start\")               # unsafe operation perform     print(1 / 0)  # if error occur the it goes in except blockexcept:     print(\"an error occurs\")  # final code in finally blockfinally:     print(\"GeeksForGeeks\")\', \'# try for unsafe codetry:    amount = 1999    if amount < 2999:                  # raise the ValueError        raise ValueError(\"please add money in your account\")    else:        print(\"You are eligible to purchase DSA Self Paced course\")              # if false then raise the value errorexcept ValueError as e:        print(e)\']','[\'code start\nan error occurs\nGeeksForGeeks\', \'please add money in your account\']','[\'IndexError|||When the wrong index of a list is retrieved.&&&AssertionError|||It occurs when the assert statement fails&&&AttributeError|||It occurs when an attribute assignment is failed.&&&ImportError|||It occurs when an imported module is not found.&&&KeyError|||It occurs when the key of the dictionary is not found.&&&NameError|||It occurs when the variable is not defined.&&&MemoryError|||It occurs when a program runs out of memory.&&&TypeError|||It occurs when a function and operation are applied in an incorrect type.\']','[\'Handling Exceptions with Try/Except/FinallyWe can handle errors by the Try/Except/Finally method. we write unsafe code in the try, fall back code in except and final code in finally block.Example&&&Output:&&&|||Raising exceptions for a predefined conditionWhen we want to code for the limitation of certain conditions then we can raise an exception.Example&&&Output:&&&&&&Syntax errors|||Logical errors (Exceptions)&&&\']'),(64,'[\'Built-in Exceptions in Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'http://contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'This returns a dictionary of built-in exceptions, functions and attributes.\', \'Base Classes\', \'The following exceptions are used mostly as base classes for other exceptions.\', \'Concrete exceptions\', \'The following exceptions are the exceptions that are usually raised.\']','[\'All instances in Python must be instances of a class that derives from BaseException. Two exception classes that are not related via subclassing are never equivalent, even if they have the same name. The built-in exceptions can be generated by the interpreter or built-in functions.\', \'There are several built-in exceptions in Python that are raised when errors occur. These built-in exceptions can be viewed using the local() built-in functions as follows :\', \'This article is contributed by Aditi Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'try:      a = 10/0      print (a)except ArithmeticError:          print (\"This statement is raising an arithmetic exception.\")else:      print (\"Success.\")\', \'try:     a = [1, 2, 3]     print (a[3]) except LookupError:     print (\"Index out of bound error.\")else:     print (\"Success\")\', \'class Attributes(object):    pass  object = Attributes()print (object.attribute)\', \"while True:    data = input(\'Enter name : \')    print (\'Hello  \', data)\", \'import math  print (math.exp(1000))\', \"def my_generator():    try:        for i in range(5):            print (\'Yielding\', i)            yield i    except GeneratorExit:        print (\'Exiting early\')  g = my_generator()print (g.next())g.close()\", \'import module_does_not_exist\', \'from exceptions import Userexception\', \'array = [ 0, 1, 2 ]print (array[3])\', \"array = { \'a\':1, \'b\':2 }print (array[\'c\'])\", \"try:    print (\'Press Return or Ctrl-C:\',)    ignored = input()except Exception, err:    print (\'Caught exception:\', err)except KeyboardInterrupt, err:    print (\'Caught KeyboardInterrupt\')else:    print (\'No exception\')\", \'def fact(a):    factors = []    for i in range(1, a+1):        if a%i == 0:            factors.append(i)    return factors   num = 600851475143print (fact(num))\', \'def func():    print ans  func()\', \'class BaseClass(object):    \"\"\"Defines the interface\"\"\"    def __init__(self):        super(BaseClass, self).__init__()    def do_something(self):        \"\"\"The interface, not implemented\"\"\"        raise NotImplementedError(self.__class__.__name__ + \'.do_something\')  class SubClass(BaseClass):    \"\"\"Implementes the interface\"\"\"    def do_something(self):        \"\"\"really does something\"\"\"        print (self.__class__.__name__ + \' doing something!\')  SubClass().do_something()BaseClass().do_something()\', \'def func():    print (ans)  func()\', \"import sys  print (\'Regular integer: (maxint=%s)\' % sys.maxint)try:    i = sys.maxint * 3    print (\'No overflow for \', type(i), \'i =\', i)except OverflowError, err:    print (\'Overflowed at \', i, err)  print()print (\'Long integer:\')for i in range(0, 100, 10):    print (\'%2d\' % i, 2L ** i)  print()print (\'Floating point values:\')try:    f = 2.0**i    for i in range(100):        print (i, f)        f = f ** 2except OverflowError, err:    print (\'Overflowed after \', f, err)\", \"import gcimport weakref  class Foo(object):      def __init__(self, name):        self.name = name          def __del__(self):        print (\'(Deleting %s)\' % self)  obj = Foo(\'obj\')p = weakref.proxy(obj)  print (\'BEFORE:\', p.name)obj = Noneprint (\'AFTER:\', p.name)\", \'Arr = [3, 1, 2]i=iter(Arr)  print (i)print (i.next())print (i.next())print (i.next())print (i.next())\', \"try:    print (eval(\'geeks for geeks\'))except SyntaxError, err:    print (\'Syntax error %s (%s-%s): %s\' % \\        (err.filename, err.lineno, err.offset, err.text))    print (err)\", \"arr = (\'tuple\', ) + \'string\'print (arr)\", \"def global_name_error():    print (unknown_global_name)  def unbound_local():    local_val = local_val + 1    print (local_val)  try:    global_name_error()except NameError, err:    print (\'Global name error:\', err)  try:    unbound_local()except UnboundLocalError, err:    print (\'Local name error:\', err)\", \"print (int(\'a\'))\", \'print (1/0)\']','[\">>> locals()[\'__builtins__\']\", \'try:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)\', \'This statement is raising an arithmetic exception.\', \'Index out of bound error.\', \"assert False, \'The assertion failed\'\", \'Traceback (most recent call last):\n  File \"exceptions_AssertionError.py\", line 12, in \n    assert False, \'The assertion failed\'\nAssertionError: The assertion failed\', \'Traceback (most recent call last):\n  File \"d912bae549a2b42953bc62da114ae7a7.py\", line 5, in \n    print object.attribute\nAttributeError: \'Attributes\' object has no attribute \'attribute\'\', \'Enter Name :Hello Aditi\nEnter Name :Traceback (most recent call last):\n  File \"exceptions_EOFError.py\", line 13, in \n    data = raw_input(\'Enter name :\')\nEOFError: EOF when reading a line\', \'Traceback (most recent call last):\n  File \"\", line 1, in \nFloatingPointError: in math_1\', \'Yielding 0\n0\nExiting early\', \'Traceback (most recent call last):\n  File \"exceptions_ImportError_nomodule.py\", line 12, in \n    import module_does_not_exist\nImportError: No module named module_does_not_exist\', \'Traceback (most recent call last):\n  File \"exceptions_ImportError_missingname.py\", line 12, in \n    from exceptions import Userexception\nImportError: cannot import name Userexception\', \'Traceback (most recent call last):\n  File \"exceptions_IndexError.py\", line 13, in \n    print array[3]\nIndexError: list index out of range\', \'Traceback (most recent call last):\n  File \"exceptions_KeyError.py\", line 13, in \n    print array[\'c\']\nKeyError: \'c\'\', \'Press Return or Ctrl-C: ^CCaught KeyboardInterrupt\', \'Traceback (most recent call last):\n  File \"4af5c316c749aff128df20714536b8f3.py\", line 9, in \n    print fact(num)\n  File \"4af5c316c749aff128df20714536b8f3.py\", line 3, in fact\n    for i in range(1, a+1):\nMemoryError\', \'Traceback (most recent call last):\n  File \"cfba0a5196b05397e0a23b1b5b8c7e19.py\", line 4, in \n    func()\n  File \"cfba0a5196b05397e0a23b1b5b8c7e19.py\", line 2, in func\n    print ans\nNameError: global name \'ans\' is not defined\', \'Traceback (most recent call last):\n  File \"b32fc445850cbc23cd2f081ba1c1d60b.py\", line 16, in \n    BaseClass().do_something()\n  File \"b32fc445850cbc23cd2f081ba1c1d60b.py\", line 7, in do_something\n    raise NotImplementedError(self.__class__.__name__ + \'.do_something\')\nNotImplementedError: BaseClass.do_something\', \'Traceback (most recent call last):\n  File \"442eccd7535a2704adbe372cb731fc0f.py\", line 4, in \n    print i, os.ttyname(i)\nOSError: [Errno 25] Inappropriate ioctl for device\', \"Regular integer: (maxint=9223372036854775807)\nNo overflow for   i = 27670116110564327421\n\nLong integer:\n 0 1\n10 1024\n20 1048576\n30 1073741824\n40 1099511627776\n50 1125899906842624\n60 1152921504606846976\n70 1180591620717411303424\n80 1208925819614629174706176\n90 1237940039285380274899124224\n\nFloating point values:\n0 1.23794003929e+27\n1 1.53249554087e+54\n2 2.34854258277e+108\n3 5.5156522631e+216\nOverflowed after  5.5156522631e+216 (34, \'Numerical result out of range\')\", \'BEFORE: obj\n(Deleting )\nAFTER:\n\nTraceback (most recent call last):\n  File \"49d0c29d8fe607b862c02f4e1cb6c756.py\", line 17, in \n    print \'AFTER:\', p.name\nReferenceError: weakly-referenced object no longer exists\', \'3\n1\n2\n\nTraceback (most recent call last):\n  File \"2136fa9a620e14f8436bb60d5395cc5b.py\", line 8, in \n    print i.next()\nStopIteration\', \'Syntax error  (1-9): geeks for geeks\ninvalid syntax (, line 1)\', \'Traceback (most recent call last):\n  File \"30238c120c0868eba7e13a06c0b1b1e4.py\", line 1, in \n    arr = (\'tuple\', ) + \'string\'\nTypeError: can only concatenate tuple (not \"str\") to tuple\', \"Global name error: global name \'unknown_global_name\' is not defined\nLocal name error: local variable \'local_val\' referenced before assignment\", \'Traceback (most recent call last):\n  File \"44f00efda935715a3c5468d899080381.py\", line 1, in \n    print int(\'a\')\nValueError: invalid literal for int() with base 10: \'a\'\', \'Traceback (most recent call last):\n  File \"c31d9626b41e53d170a78eac7d98cb85.py\", line 1, in \n    print 1/0\nZeroDivisionError: integer division or modulo by zero\']','[]','[\'args : The args are the tuple of arguments given to the exception constructor.|||with_traceback(tb) : This method is usually used in exception handling. This method sets tb as the new traceback for the exception and returns the exception object.Code :try:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)\n&&&OverflowError|||ZeroDivisionError|||FloatingPointError&&&KeyError|||IndexError&&&&&&&&&exception BaseExceptionThis is the base class for all built-in exceptions. It is not meant to be directly inherited by user-defined classes. For, user-defined classes, Exception is used. This class is responsible for creating a string representation of the exception using str() using the arguments passed. An empty string is returned if there are no arguments.args : The args are the tuple of arguments given to the exception constructor.with_traceback(tb) : This method is usually used in exception handling. This method sets tb as the new traceback for the exception and returns the exception object.Code :try:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)\n|||args : The args are the tuple of arguments given to the exception constructor.|||with_traceback(tb) : This method is usually used in exception handling. This method sets tb as the new traceback for the exception and returns the exception object.Code :try:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)\n|||exception ExceptionThis is the base class for all built-in non-system-exiting exceptions. All user-defined exceptions should also be derived from this class.|||exception ArithmeticErrorThis class is the base class for those built-in exceptions that are raised for various arithmetic errors such as :OverflowErrorZeroDivisionErrorFloatingPointErrorExample :try:a = 10/0print (a)except ArithmeticError:print (\"This statement is raising an arithmetic exception.\")else:print (\"Success.\")Output :This statement is raising an arithmetic exception.\n|||OverflowError|||ZeroDivisionError|||FloatingPointError|||exception BufferErrorThis exception is raised when buffer related operations cannot be performed.|||exception LookupErrorThis is the base class for those exceptions that are raised when a key or index used on a mapping or sequence is invalid or not found. The exceptions raised are :KeyErrorIndexErrorExample :try:a = [1, 2, 3]print (a[3])except LookupError:print (\"Index out of bound error.\")else:print (\"Success\")Output :\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        Index out of bound error.\n|||KeyError|||IndexError&&&exception AssertionErrorAn AssertionError is raised when an assert statement fails.Example :assert False, \'The assertion failed\'\nOutput :Traceback (most recent call last):\n  File \"exceptions_AssertionError.py\", line 12, in \n    assert False, \'The assertion failed\'\nAssertionError: The assertion failed\n|||exception AttributeErrorAn AttributeError is raised when an attribute reference or assignment fails such as when a non-existent attribute is referenced.Example :class Attributes(object):passobject = Attributes()print (object.attribute)Output :Traceback (most recent call last):\n  File \"d912bae549a2b42953bc62da114ae7a7.py\", line 5, in \n    print object.attribute\nAttributeError: \'Attributes\' object has no attribute \'attribute\'\n|||exception EOFErrorAn EOFError is raised when built-in functions like input() hits an end-of-file condition (EOF) without reading any data. The file methods like readline() return an empty string when they hit EOF.Example :\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        while True:data = input(\'Enter name : \')print (\'Hello \', data)Output :Enter Name :Hello Aditi\nEnter Name :Traceback (most recent call last):\n  File \"exceptions_EOFError.py\", line 13, in \n    data = raw_input(\'Enter name :\')\nEOFError: EOF when reading a line\n|||exception FloatingPointErrorA FloatingPointError is raised when a floating point operation fails. This exception is always defined, but can only be raised when Python is configured with the–with-fpectl option, or the WANT_SIGFPE_HANDLER symbol is defined in the pyconfig.h file.Example :import mathprint (math.exp(1000))Output :Traceback (most recent call last):\n  File \"\", line 1, in \nFloatingPointError: in math_1\n|||exception GeneratorExitThis exception directly inherits from BaseException instead of Exception since it is technically not an error. A GeneratorExit exception is raised when a generator or coroutine is closed.Example :def my_generator():try:for i in range(5):print (\'Yielding\', i)yield iexcept GeneratorExit:print (\'Exiting early\')g = my_generator()print (g.next())g.close()Output :Yielding 0\n0\nExiting early\n|||exception ImportErrorAn ImportError is raised when the import statement is unable to load a module or when the “from list” in from … import has a name that cannot be found.Example :import module_does_not_existOutput :\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        Traceback (most recent call last):\n  File \"exceptions_ImportError_nomodule.py\", line 12, in \n    import module_does_not_exist\nImportError: No module named module_does_not_exist\n\nExample :from exceptions import UserexceptionOutput :Traceback (most recent call last):\n  File \"exceptions_ImportError_missingname.py\", line 12, in \n    from exceptions import Userexception\nImportError: cannot import name Userexception\n\n|||exception ModuleNotFoundErrorThis is the subclass of ImportError which is raised by import when a module could not be found. It is also raised when None is found in sys.modules.|||exception IndexErrorAn IndexError is raised when a sequence is referenced which is out of range.Example :array = [ 0, 1, 2 ]print (array[3])Output :Traceback (most recent call last):\n  File \"exceptions_IndexError.py\", line 13, in \n    print array[3]\nIndexError: list index out of range\n|||exception KeyErrorA KeyError is raised when a mapping key is not found in the set of existing keys.Example :array = { \'a\':1, \'b\':2 }print (array[\'c\'])Output :Traceback (most recent call last):\n  File \"exceptions_KeyError.py\", line 13, in \n    print array[\'c\']\nKeyError: \'c\'\n|||exception KeyboardInterruptThis error is raised when the user hits the interrupt key such as Control-C or Delete.\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        Example :try:print (\'Press Return or Ctrl-C:\',)ignored = input()except Exception, err:print (\'Caught exception:\', err)except KeyboardInterrupt, err:print (\'Caught KeyboardInterrupt\')else:print (\'No exception\')Output :Press Return or Ctrl-C: ^CCaught KeyboardInterrupt\n|||exception MemoryErrorThis error is raised when an operation runs out of memory.Example :def fact(a):factors = []for i in range(1, a+1):if a%i == 0:factors.append(i)return factorsnum = 600851475143print (fact(num))Output :Traceback (most recent call last):\n  File \"4af5c316c749aff128df20714536b8f3.py\", line 9, in \n    print fact(num)\n  File \"4af5c316c749aff128df20714536b8f3.py\", line 3, in fact\n    for i in range(1, a+1):\nMemoryError\n|||exception NameErrorThis error is raised when a local or global name is not found. For example, an unqualified variable name.Example :def func():print ansfunc()Output :Traceback (most recent call last):\n  File \"cfba0a5196b05397e0a23b1b5b8c7e19.py\", line 4, in \n    func()\n  File \"cfba0a5196b05397e0a23b1b5b8c7e19.py\", line 2, in func\n    print ans\nNameError: global name \'ans\' is not defined\n|||exception NotImplementedErrorThis exception is derived from RuntimeError. Abstract methods in user defined classed should raise this exception when the derived classes override the method.Example :\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        class BaseClass(object):\"\"\"Defines the interface\"\"\"def __init__(self):super(BaseClass, self).__init__()def do_something(self):\"\"\"The interface, not implemented\"\"\"raise NotImplementedError(self.__class__.__name__ + \'.do_something\')class SubClass(BaseClass):\"\"\"Implementes the interface\"\"\"def do_something(self):\"\"\"really does something\"\"\"print (self.__class__.__name__ + \' doing something!\')SubClass().do_something()BaseClass().do_something()Output :Traceback (most recent call last):\n  File \"b32fc445850cbc23cd2f081ba1c1d60b.py\", line 16, in \n    BaseClass().do_something()\n  File \"b32fc445850cbc23cd2f081ba1c1d60b.py\", line 7, in do_something\n    raise NotImplementedError(self.__class__.__name__ + \'.do_something\')\nNotImplementedError: BaseClass.do_something\n|||exception OSError([arg])The OSError exception is raised when a system function returns a system-related error, including I/O failures such as “file not found” or “disk full” errors.Example :def func():print (ans)func()Output :Traceback (most recent call last):\n  File \"442eccd7535a2704adbe372cb731fc0f.py\", line 4, in \n    print i, os.ttyname(i)\nOSError: [Errno 25] Inappropriate ioctl for device\n|||exception OverflowErrorThe OverflowError is raised when the result of an arithmetic operation is out of range. Integers raise MemoryError instead of OverflowError. OverflowError is sometimes raised for integers that are outside a required range. Floating point operations are not checked because of the lack of standardization of floating point exception handling in C.Example :import sysprint (\'Regular integer: (maxint=%s)\' % sys.maxint)try:i = sys.maxint * 3print (\'No overflow for \', type(i), \'i =\', i)except OverflowError, err:print (\'Overflowed at \', i, err)print()print (\'Long integer:\')for i in range(0, 100, 10):print (\'%2d\' % i, 2L ** i)print()print (\'Floating point values:\')try:f = 2.0**ifor i in range(100):print (i, f)f = f ** 2except OverflowError, err:print (\'Overflowed after \', f, err)Output :Regular integer: (maxint=9223372036854775807)\nNo overflow for   i = 27670116110564327421\n\nLong integer:\n 0 1\n10 1024\n20 1048576\n30 1073741824\n40 1099511627776\n50 1125899906842624\n60 1152921504606846976\n70 1180591620717411303424\n80 1208925819614629174706176\n90 1237940039285380274899124224\n\nFloating point values:\n0 1.23794003929e+27\n1 1.53249554087e+54\n2 2.34854258277e+108\n3 5.5156522631e+216\nOverflowed after  5.5156522631e+216 (34, \'Numerical result out of range\')\n\n|||exception RecursionErrorThe RecursionError is derived from the RuntimeError. This exception is raised when the interpreter detects that the maximum recursion depth is exceeded.|||exception ReferenceErrorThe ReferenceError is raised when a weak reference proxy is used to access an attribute of the referent after the garbage collection.Example :import gcimport weakrefclass Foo(object):def __init__(self, name):self.name = namedef __del__(self):print (\'(Deleting %s)\' % self)obj = Foo(\'obj\')p = weakref.proxy(obj)print (\'BEFORE:\', p.name)obj = Noneprint (\'AFTER:\', p.name)Output :\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        BEFORE: obj\n(Deleting )\nAFTER:\n\nTraceback (most recent call last):\n  File \"49d0c29d8fe607b862c02f4e1cb6c756.py\", line 17, in \n    print \'AFTER:\', p.name\nReferenceError: weakly-referenced object no longer exists\n|||exception RuntimeErrorThe RuntimeError is raised when no other exception applies. It returns a string indicating what precisely went wrong.|||exception StopIterationThe StopIteration error is raised by built-in function next() and an iterator‘s __next__() method to signal that all items are produced by the iterator.Example :Arr = [3, 1, 2]i=iter(Arr)print (i)print (i.next())print (i.next())print (i.next())print (i.next())Output :\n3\n1\n2\n\nTraceback (most recent call last):\n  File \"2136fa9a620e14f8436bb60d5395cc5b.py\", line 8, in \n    print i.next()\nStopIteration\n|||exception SyntaxErrorThe SyntaxError is raised when the parser encounters a syntax error. A syntax error may occur in an import statement or while calling the built-in functions exec() or eval(), or when reading the initial script or standard input.Example :try:print (eval(\'geeks for geeks\'))except SyntaxError, err:print (\'Syntax error %s (%s-%s): %s\' % \\(err.filename, err.lineno, err.offset, err.text))print (err)Output :Syntax error  (1-9): geeks for geeks\ninvalid syntax (, line 1)\n|||exception SystemErrorThe SystemError is raised when the interpreter finds an internal error. The associated value is a string indicating what went wrong.|||exception SystemExitThe SystemExit is raised when sys.exit() function is called. A call to sys.exit() is translated into an exception to execute clean-up handlers (finally clauses of try statements) and to debug a script without running the risk of losing control.|||exception TypeErrorTypeError is raised when an operation or function is applied to an object of inappropriate type. This exception returns a string giving details about the type mismatch.Example :arr = (\'tuple\', ) + \'string\'print (arr)Output :\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        Traceback (most recent call last):\n  File \"30238c120c0868eba7e13a06c0b1b1e4.py\", line 1, in \n    arr = (\'tuple\', ) + \'string\'\nTypeError: can only concatenate tuple (not \"str\") to tuple\n|||exception UnboundLocalErrorUnboundLocalError is a subclass of NameError which is raised when a reference is made to a local variable in a function or method, but no value has been assigned to that variable.Example :def global_name_error():print (unknown_global_name)def unbound_local():local_val = local_val + 1print (local_val)try:global_name_error()except NameError, err:print (\'Global name error:\', err)try:unbound_local()except UnboundLocalError, err:print (\'Local name error:\', err)Output :Global name error: global name \'unknown_global_name\' is not defined\nLocal name error: local variable \'local_val\' referenced before assignment\n|||exception UnicodeErrorThis exception is a subclass of ValueError. UnicodeError is raised when a Unicode-related encoding or decoding error occurs.|||exception ValueErrorA ValueError is raised when a built-in operation or function receives an argument that has the right type but an invalid value.Example :print (int(\'a\'))Output :Traceback (most recent call last):\n  File \"44f00efda935715a3c5468d899080381.py\", line 1, in \n    print int(\'a\')\nValueError: invalid literal for int() with base 10: \'a\'\n|||exception ZeroDivisionErrorA ZeroDivisionError is raised when the second argument of a division or modulo operation is zero. This exception returns a string indicating the type of the operands and the operation.Example :print (1/0)Output :Traceback (most recent call last):\n  File \"c31d9626b41e53d170a78eac7d98cb85.py\", line 1, in \n    print 1/0\nZeroDivisionError: integer division or modulo by zero\n&&&\']'),(65,'[\'User-defined Exceptions in Python with Examples\']','[\'PYTHON\', \'PYTHON\', \'PYTHON\', \'PYTHON\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-exception-handling/\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Creating User-defined Exception\', \'Knowing all about Exception Class\', \'To know more about class Exception, run the code belowxa0\', \'Deriving Error from Super Class Exception\']','[\'Programmers may name their own exceptions by creating a new exception class. Exceptions need to be derived from the Exception class, either directly or indirectly. Although not mandatory, most of the exceptions are named as names that end in “Error” similar to the naming of the standard exceptions in python. For example:xa0\', \'Superclass Exceptions are created when a module needs to handle several distinct errors. One of the common ways of doing this is to create a base class for exceptions defined by that module. Further, various subclasses are defined to create specific exception classes for different error conditions.xa0\', \'How to use standard Exceptions as a base class?A runtime error is a class that is a standard exception that is raised when a generated error does not fall into any category. This program illustrates how to use runtime error as base class and network error as derived class. In a similar way, an exception can be derived from the standard exceptions of Python.xa0\']','[\'Prerequisite- This article is an extension to Exception Handling.Python throws errors and exceptions when there is a code gone wrong, which may cause the program to stop abruptly. Python also provides an exception handling method with the help of try-except. Some of the standard exceptions which are most frequent include IndexError, ImportError, IOError, ZeroDivisionError, TypeError, and FileNotFoundError. A user can create his own error using the exception class.xa0\', \'This article is contributed by Piyush Doorwar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\"# A python program to create user-defined exception # class MyError is derived from super class Exceptionclass MyError(Exception):     # Constructor or Initializer    def __init__(self, value):        self.value = value     # __str__ is to print() the value    def __str__(self):        return(repr(self.value)) try:    raise(MyError(3*2)) # Value of Exception is stored in errorexcept MyError as error:    print(\'A New Exception occured: \',error.value)\", \'help(Exception)\', \'# class Error is derived from super class Exceptionclass Error(Exception):     # Error is derived class for Exception, but    # Base class for exceptions in this module    pass class TransitionError(Error):     # Raised when an operation attempts a state    # transition that\'s not allowed.    def __init__(self, prev, nex, msg):        self.prev = prev        self.next = nex         # Error message thrown is saved in msg        self.msg = msgtry:    raise(TransitionError(2,3*2,\"Not Allowed\")) # Value of Exception is stored in errorexcept TransitionError as error:    print(\'Exception occured: \',error.msg)\', \'# NetworkError has base RuntimeError# and not Exceptionclass Networkerror(RuntimeError):    def __init__(self, arg):        self.args = arg try:    raise Networkerror(\"Error\") except Networkerror as e:    print (e.args)\']','[\"(\'A New Exception occured: \', 6)\", \"(\'Exception occured: \', \'Not Allowed\')\", \"(\'E\', \'r\', \'r\', \'o\', \'r\')\"]','[]','[]'),(66,'[\'NZEC error in Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://ide.geeksforgeeks.org/\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Why does NZEC occur?(one example)\', \'How to resolve?\', \'to delimit input by white spaces.\', \'Wrong code\', \'Input:2 3When you run the above code in IDE with above input you will get error:-\', \'Correct code\', \'Some prominent reasons for NZEC error\']','[\'In python, generally, multiple inputs are separated by commas and we read them using input() orxa0int(input()), but most of the online coding platforms while testing gives input separated by space and in those cases, int(input()) is not able to read the input properly and shows error like NZEC.\', \'For Example, Think of a simple program where you have to read 2 integers and print them(in input file both integers are in same line). Suppose you have two integers as shown below:23 45Instead of using :\', \'The above code will work fine when the input is in 2 two different lines. You can test yourself. To overcome this problem you need to use split.\', \'There could be some other reasons also for the occurrence NZEC error, I have listed the frequent ones.\', \'This article is contributed by Aakash Tiwari. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\'While coding in various competitive sites, many people must have encountered NZEC errors. NZEC (non zero exit code) as the name suggests occurs when your code is failed to return 0. When a code returns 0 it means it is successfully executed otherwise it will return some other number depending on the type of error.When the program ends and it is supposed to return “0” to indicate if finished fine and is not able to do so it causes NZEC. Of course, there are more cases associated with NZEC.\']','[\'n = int(input())k = int(input())print n,\" \",k\', \'n, k = raw_input().split(\" \")n = int(n)k = int(k)print n,\" \",k\']','[\'n = int(input())\nk = int(input())\', \'n, k = raw_input().split(\" \")\nn = int(n)\nk = int(k)\', \'Traceback (most recent call last):\n  File \"b712edd81d4a972de2a9189fac8a83ed.py\", line 1, in \n    n = int(input())\n  File \"\", line 1\n    2 3\n      ^\nSyntaxError: unexpected EOF while parsing\', \'7 3\', \'7   3\']','[]','[\'Infinite Recursion or if you have run out of stack memory.|||Input and output both are NOT exactly same as the test cases.|||As the online platforms, test your program using a computer code which matches your output with the specified outputs exactly.|||This type of error is also shown when your program is performing basic programming mistakes like dividing by 0.|||Check for the values of your variables, they can be vulnerable to integer flow.\']'),(67,'[\'File Handling in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[\'Working of open() function\', \'Working of read() mode\', \'Creating a file using write() mode\', \'Working of append() mode\', \'Using write along with the with() function\', \'split() using file handling\']','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'http://www.write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Where the following mode is supported:\', \'Take a look at the below example:\', \'Let’s see how the append mode works:xa0\', \'There are also various other commands in file handling that is used to handle various tasks like:xa0\', \'We can also use the write function along with the xa0with() function:xa0\']','[\'Before performing any operation on the file like read or write, first we have to open that file. For this, we should use Python’s inbuilt function open()\', \'But at the time of opening, we have to specify the mode, which represents the purpose of the opening file.\', \'The open command will open the file in the read mode and the for loop will print each line present in the file.xa0xa0\', \'There is more than one way to read a file in Python. If you need to extract a string that contains all characters in the file then we can use file.read(). The full code would work like this:xa0\', \'Another way to read a file is to call a certain number of characters like in the following code the interpreter will read the first five characters of stored data and return it as a string:xa0\', \'Let’s see how to create a file and how write mode works:xa0To manipulate the file, write the following in your Python environment:xa0\', \'The close() command terminates all the resources in use and frees the system of this particular program.xa0xa0\', \'It is designed to provide much cleaner syntax and exception handling when you are working with code. That explains why it’s good practice to use them with a statement where applicable. This is helpful because using this method any files opened will be closed automatically after one is done, so auto-cleanup.xa0Example:xa0\', \'We can also split lines using file handling in Python. This splits the variable when space is encountered. You can also split using any characters as we wish. Here is the code:\', \'There are also various other functions that help to manipulate the files and their contents. One can explore various other functions in Python Docs.xa0\']','[\'Python too supports file handling and allows users to handle files i.e., to read and write files, along with many other file handling options, to operate on files. The concept of file handling has stretched over various other languages, but the implementation is either complicated or lengthy, but like other concepts of Python, this concept here is also easy and short. Python treats file differently as text or binary and this is important. Each line of code includes a sequence of characters and they form text file. Each line of a file is terminated with a special character, called the EOL or End of Line characters like comma {,} or newline character. It ends the current line and tells the interpreter a new one has begun. Let’s start with Reading and Writing files.xa0xa0\', \'This article is contributed by Chinmoy Lenka. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed abovexa0\']','[\'# a file named \"geek\", will be opened with the reading mode.file = open(\'geek.txt\', \'r\')# This will print every line one by one in the filefor each in file:    print (each)\', \'# Python code to illustrate read() modefile = open(\"file.txt\", \"r\")print (file.read())\', \'# Python code to illustrate read() mode character wisefile = open(\"file.txt\", \"r\")print (file.read(5))\', \'# Python code to create a filefile = open(\'geek.txt\',\'w\')file.write(\"This is the write command\")file.write(\"It allows us to write in a particular file\")file.close()\', \'# Python code to illustrate append() modefile = open(\'geek.txt\',\'a\')file.write(\"This will add this line\")file.close()\', \'# Python code to illustrate with()with open(\"file.txt\") as file:     data = file.read()# do something with data\', \'# Python code to illustrate with() alongwith write()with open(\"file.txt\", \"w\") as f:    f.write(\"Hello World!!!\")\', \'# Python code to illustrate split() functionwith open(\"file.text\", \"r\") as file:    data = file.readlines()    for line in data:        word = line.split()        print (word)\']','[\'f = open(filename, mode)\', \'rstrip(): This function strips each line of a file off spaces from the right-hand side.\nlstrip(): This function strips each line of a file off spaces from the left-hand side.\']','[]','[\'r: open an existing file for a read operation.|||w: open an existing file for a write operation. If the file already contains some data then it will be overridden.|||a: open an existing file for append operation. It won’t override existing data.|||r+: To read and write data into the file. The previous data in the file will not be deleted.|||w+: To write and read data. It will override existing data.|||a+: To append and read data from the file. It won’t override existing data.\']'),(68,'[\'Open a File in Python\']','[\'Opening a file\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191203192405/open-file-python.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/file-handling-python/\', \'https://www.geeksforgeeks.org/reading-writing-text-files-python/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Refer the below articles to get the idea about basics of file handling.\', \'Example #1: Suppose the text file looked like this\', \'We want to read the content of the file using Python.\', \'Example #2: Suppose we want to write more data to the above file using Python.\']','[\'Python provides inbuilt functions for creating, writing and reading files. There are two types of files that can be handled in Python, normal text files and binary files (written in binary language, 0s and 1s).\', \'Opening a file refers to getting the file ready either for reading or for writing. This can be done using the open() function. This function returns a file object and takes two arguments, one that accepts the file name and another that accepts the mode(Access Mode). Now, the question arises what is access mode?\', \'Access modes govern the type of operations possible in the opened file. It refers to how the file will be used once it’s opened. These modes also define the location of the File Handle in the file. File handle is like a cursor, which defines from where the data has to be read or written in the file. There are 6 access modes in python.\', \'Note: The file should exist in the same directory as the Python script, otherwise full address of the file should be written.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# Python program to demonstrate# opening a file    # Open function to open the file \"myfile.txt\"  # (same directory) in read mode and store# it\'s reference in the variable file1  file1 = open(\"myfile.txt\")  # Reading from fileprint(file1.read())  file1.close()\', \'# Python program to demonstrate# opening a file    # Open function to open the file \"myfile.txt\"# (same directory) in append mode and store# it\'s reference in the variable file1file1 = open(\"myfile.txt\", \"a\")  # Writing to filefile1.write(\"\\nWriting to file :)\")  # Closing filefile1.close()\']','[\'File_object = open(r\"File_Name\", \"Access_Mode\")\', \'Welcome to GeeksForGeeks!!\']','[]','[\'Text files: In this type of file, Each line of text is terminated with a special character called EOL (End of Line), which is the new line character (‘\\n’) in Python by default.|||Binary files: In this type of file, there is no terminator for a line and the data is stored after converting it into machine-understandable binary language.&&&Basics of file handling|||Reading and Writing to file&&&Read Only (‘r’): Open text file for reading. The handle is positioned at the beginning of the file. If the file does not exist, raises I/O error. This is also the default mode in which the file is opened.|||Read and Write (‘r+’): Open the file for reading and writing. The handle is positioned at the beginning of the file. Raises I/O error if the file does not exist.|||Write Only (‘w’): Open the file for writing. For existing file, the data is truncated and over-written. The handle is positioned at the beginning of the file. Creates the file if the file does not exist.|||Write and Read (‘w+’): Open the file for reading and writing. For existing file, data is truncated and over-written. The handle is positioned at the beginning of the file.|||Append Only (‘a’): Open the file for writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.|||Append and Read (‘a+’): Open the file for reading and writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.\']'),(69,'[\'How to read from a file in Python\']','[\'Opening a File\', \'Closing a file\', \'Reading from a file\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/reading-writing-text-files-python/\', \'https://www.geeksforgeeks.org/reading-writing-text-files-python/\', \'https://www.geeksforgeeks.org/with-statement-in-python/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Note: To know more about file handling click here.\', \'Note: To know more about access mode click here.\', \'It is done using the open() function. No module is required to be imported for this function.\', \'Here, file1 is created as object for MyFile1 and file2 as object for MyFile2.\', \'There are three ways to read data from a text file.\', \'Note: ‘\\n’ is treated as a special character of two bytes.\', \'Note: To know more about with statement click here.\']','[\'Python provides inbuilt functions for creating, writing and reading files. There are two types of files that can be handled in python, normal text files and binary files (written in binary language, 0s and 1s).\', \'Access modes govern the type of operations possible in the opened file. It refers to how the file will be used once it’s opened. These modes also define the location of the File Handle in the file. File handle is like a cursor, which defines from where the data has to be read or written in the file. Different access modes for reading a file are –\', \'The file should exist in the same directory as the python program file else, full address of the file should be written on place of filename.\', \'close() function closes the file and frees the memory space acquired by that file. It is used at the time when the file is no longer needed or if it is to be opened in a different file mode.\', \'with statement in Python is used in exception handling to make the code cleaner and much more readable. It simplifies the management of common resources like file streams. Unlike the above implementations, there is no need to call file.close() when using with statement. The with statement itself ensures proper acquisition and release of resources.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Note: The r is placed before filename to prevent the characters in filename string to be treated as special character. For example, if there is \\temp in the file address, then \\t is treated as the tab character and error is raised of invalid address. The r makes the string raw, that is, it tells that the string is without any special characters. The r can be ignored if the file is in same directory and address is not being placed.\']','[\'# Open function to open the file \"MyFile1.txt\"  # (same directory) in read mode and file1 = open(\"MyFile.txt\", \"r\")     # store its reference in the variable file1  # and \"MyFile2.txt\" in D:\\Text in file2 file2 = open(r\"D:\\Text\\MyFile2.txt\", \"r+\")\', \'# Opening and Closing a file \"MyFile.txt\" # for object name file1. file1 = open(\"MyFile.txt\", \"r\") file1.close()\', \'# Program to show various ways to # read data from a file.   # Creating a filefile1 = open(\"myfile.txt\", \"w\")L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London \\n\"]  # Writing data to a filefile1.write(\"Hello \\n\") file1.writelines(L)file1.close()  # to change file access modes  file1 = open(\"myfile.txt\", \"r+\")  print(\"Output of Read function is \")print(file1.read())print()  # seek(n) takes the file handle to the nth# bite from the beginning. file1.seek(0)  print(\"Output of Readline function is \")print(file1.readline())print()  file1.seek(0)  # To show difference between read and readline print(\"Output of Read(9) function is \")print(file1.read(9))print()  file1.seek(0)  print(\"Output of Readline(9) function is \")print(file1.readline(9))print()  file1.seek(0)  # readlines function print(\"Output of Readlines function is \")print(file1.readlines())print()file1.close()\', \'# Program to show various ways to# read data from a file.  L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London \\n\"]  # Creating a filewith open(\"myfile.txt\", \"w\") as file1:    # Writing data to a file    file1.write(\"Hello \\n\")    file1.writelines(L)    file1.close()  # to change file access modes  with open(\"myfile.txt\", \"r+\") as file1:    # Reading form a file    print(file1.read())\']','[\'File_object = open(r\"File_Name\", \"Access_Mode\")\', \'File_object.close()\', \'File_object.read([n])\', \'File_object.readline([n])\', \'File_object.readlines()\', \"Output of Read function is\nHello\nThis is Delhi\nThis is Paris\nThis is London\n\n\nOutput of Readline function is\nHello\n\n\nOutput of Read(9) function is\nHello\nTh\n\nOutput of Readline(9) function is\nHello\n\n\nOutput of Readlines function is\n[\'Hello \\n\', \'This is Delhi \\n\', \'This is Paris \\n\', \'This is London \\n\']\", \'with open filename as file:\', \'Hello\nThis is Delhi\nThis is Paris\nThis is London\']','[]','[\'Text files: In this type of file, Each line of text is terminated with a special character called EOL (End of Line), which is the new line character (‘\\n’) in python by default.|||Binary files: In this type of file, there is no terminator for a line and the data is stored after converting it into machine-understandable binary language.&&&read() : Returns the read bytes in form of a string. Reads n bytes, if no n specified, reads the entire file.File_object.read([n])\n|||readline() : Reads a line of the file and returns in form of a string.For specified n, reads at most n bytes. However, does not reads more than one line, even if n exceeds the length of the line.File_object.readline([n])\n|||readlines() : Reads all the lines and return them as each line a string element in a list.File_object.readlines()\n&&&&&&Read Only (‘r’) : Open text file for reading. The handle is positioned at the beginning of the file. If the file does not exists, raises I/O error. This is also the default mode in which file is opened.|||Read and Write (‘r+’) : Open the file for reading and writing. The handle is positioned at the beginning of the file. Raises I/O error if the file does not exists.|||Append and Read (‘a+’) : Open the file for reading and writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.&&&\']'),(70,'[\'Writing to file in Python\']','[\'Opening a File\', \'Closing a file\', \'Writing to file\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/reading-writing-text-files-python/\', \'https://www.geeksforgeeks.org/#access\', \'https://www.geeksforgeeks.org/#opening\', \'https://www.geeksforgeeks.org/#closing\', \'https://www.geeksforgeeks.org/#writing\', \'https://www.geeksforgeeks.org/#appending\', \'https://www.geeksforgeeks.org/#with\', \'https://www.geeksforgeeks.org/reading-writing-text-files-python/\', \'https://www.geeksforgeeks.org/with-statement-in-python/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: To know more about file handling click here.\', \'Table of content\', \'Note: To know more about access mode click here.\', \'It is done using the open() function. No module is required to be imported for this function.\', \'Here, file1 is created as object for MyFile1 and file2 as object for MyFile2.\', \'There are two ways to write in a file.\', \'Note: ‘\\n’ is treated as a special character of two bytes.\', \'Note: To know more about with statement click here.\']','[\'Python provides inbuilt functions for creating, writing and reading files. There are two types of files that can be handled in python, normal text files and binary files (written in binary language, 0s and 1s).\', \'Access modes govern the type of operations possible in the opened file. It refers to how the file will be used once it’s opened. These modes also define the location of the File Handle in the file. File handle is like a cursor, which defines from where the data has to be read or written in the file. Different access modes for reading a file are –\', \'The file should exist in the same directory as the python program file else, full address of the file should be written on place of filename.\', \'close() function closes the file and frees the memory space acquired by that file. It is used at the time when the file is no longer needed or if it is to be opened in a different file mode.\', \'When the file is opened in append mode, the handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data. Let’s see the below example to clarify the difference between write mode and append mode.\', \'with statement in Python is used in exception handling to make the code cleaner and much more readable. It simplifies the management of common resources like file streams. Unlike the above implementations, there is no need to call file.close() when using with statement. The with statement itself ensures proper acquisition and release of resources.\']','[\'Note: The r is placed before filename to prevent the characters in filename string to be treated as special character. For example, if there is \\temp in the file address, then \\t is treated as the tab character and error is raised of invalid address. The r makes the string raw, that is, it tells that the string is without any special characters. The r can be ignored if the file is in same directory and address is not being placed.\']','[\'# Open function to open the file \"MyFile1.txt\"  # (same directory) in read mode and file1 = open(\"MyFile.txt\", \"w\")     # store its reference in the variable file1  # and \"MyFile2.txt\" in D:\\Text in file2 file2 = open(r\"D:\\Text\\MyFile2.txt\", \"w+\")\', \'# Opening and Closing a file \"MyFile.txt\" # for object name file1. file1 = open(\"MyFile.txt\", \"w\") file1.close()\', \'# Python program to demonstrate# writing to file  # Opening a filefile1 = open(\'myfile.txt\', \'w\')L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London \\n\"]s = \"Hello\\n\"  # Writing a string to filefile1.write(s)  # Writing multiple strings# at a timefile1.writelines(L)  # Closing filefile1.close()  # Checking if the data is# written to file or notfile1 = open(\'myfile.txt\', \'r\')print(file1.read())file1.close()\', \'# Python program to illustrate# Append vs write modefile1 = open(\"myfile.txt\", \"w\")L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London \\n\"]file1.writelines(L)file1.close()  # Append-adds at lastfile1 = open(\"myfile.txt\", \"a\")  # append modefile1.write(\"Today \\n\")file1.close()  file1 = open(\"myfile.txt\", \"r\")print(\"Output of Readlines after appending\")print(file1.read())print()file1.close()  # Write-Overwritesfile1 = open(\"myfile.txt\", \"w\")  # write modefile1.write(\"Tomorrow \\n\")file1.close()  file1 = open(\"myfile.txt\", \"r\")print(\"Output of Readlines after writing\")print(file1.read())print()file1.close()\', \'# Program to show various ways to# write data to a file using with statement  L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London \\n\"]  # Writing to filewith open(\"myfile.txt\", \"w\") as file1:    # Writing data to a file    file1.write(\"Hello \\n\")    file1.writelines(L)  # Reading from filewith open(\"myfile.txt\", \"r+\") as file1:    # Reading form a file    print(file1.read())\']','[\'File_object = open(r\"File_Name\", \"Access_Mode\")\', \'File_object.close()\', \'File_object.write(str1)\', \'File_object.writelines(L) for L = [str1, str2, str3]\', \'Hello\nThis is Delhi\nThis is Paris\nThis is London\', \'Output of Readlines after appending\nThis is Delhi\nThis is Paris\nThis is London\nToday\n\n\nOutput of Readlines after writing\nTomorrow\', \'with open filename as file:\', \'Hello\nThis is Delhi\nThis is Paris\nThis is London\']','[]','[\'Text files: In this type of file, Each line of text is terminated with a special character called EOL (End of Line), which is the new line character (‘\\n’) in python by default.|||Binary files: In this type of file, there is no terminator for a line and the data is stored after converting it into machine-understandable binary language.&&&Access mode|||Opening a file|||Closing a file|||Writing to fileAppending to a fileWith statement|||Appending to a file|||With statement&&&Appending to a file|||With statement&&&&&&Write Only (‘w’) : Open the file for writing. For an existing file, the data is truncated and over-written. The handle is positioned at the beginning of the file. Creates the file if the file does not exist.|||Write and Read (‘w+’) : Open the file for reading and writing. For an existing file, data is truncated and over-written. The handle is positioned at the beginning of the file.|||Append Only (‘a’) : Open the file for writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.&&&write() : Inserts the string str1 in a single line in the text file.File_object.write(str1)\n|||writelines() : For a list of string elements, each string is inserted in the text file. Used to insert multiple strings at a single time.File_object.writelines(L) for L = [str1, str2, str3] \n&&&\']'),(71,'[\'Python append to a file\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/reading-writing-text-files-python/\', \'https://www.geeksforgeeks.org/reading-writing-text-files-python/\', \'https://www.geeksforgeeks.org/with-statement-in-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisites:\', \'Note: ‘\\n’ is treated as a special character of two bytes.\', \'Note: To know more about with statement click here.\']','[\'While reading or writing to a file, access mode governs the type of operations possible in the opened file. It refers to how the file will be used once it’s opened. These modes also define the location of the File Handle in the file. File handle is like a cursor, which defines from where the data has to be read or written in the file.\', \"In order to append a new line to the existing file, open the file in append mode, by using either \'a\' or \'a+\' as the access mode. The definition of these access modes are as follows:\", \'When the file is opened in append mode, the handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data. Let’s see the below example to clarify the difference between write mode and append mode.\', \"In the above example, it can be seen that the data is not appended from the new line. This can be done by writing the newline \'\\n\' character to the file.\", \'with statement in Python is used in exception handling to make the code cleaner and much more readable. It simplifies the management of common resources like file streams. Unlike the above implementations, there is no need to call file.close() when using with statement. The with statement itself ensures proper acquisition and release of resources.\']','[]','[\'# Python program to illustrate# Append vs write modefile1 = open(\"myfile.txt\", \"w\")L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London\"]file1.writelines(L)file1.close()   # Append-adds at lastfile1 = open(\"myfile.txt\", \"a\")  # append modefile1.write(\"Today \\n\")file1.close()   file1 = open(\"myfile.txt\", \"r\")print(\"Output of Readlines after appending\")print(file1.read())print()file1.close()   # Write-Overwritesfile1 = open(\"myfile.txt\", \"w\")  # write modefile1.write(\"Tomorrow \\n\")file1.close()   file1 = open(\"myfile.txt\", \"r\")print(\"Output of Readlines after writing\")print(file1.read())print()file1.close()\', \'# Python program to illustrate# append from new line  file1 = open(\"myfile.txt\", \"w\")L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London\"]file1.writelines(L)file1.close()  # Append-adds at last# append modefile1 = open(\"myfile.txt\", \"a\")    # writing newline characterfile1.write(\"\\n\")file1.write(\"Today\")  # without newline characterfile1.write(\"Tomorrow\")    file1 = open(\"myfile.txt\", \"r\")print(\"Output of Readlines after appending\")print(file1.read())print()file1.close()\', \'# Program to show various ways to# append data to a file using# with statement  L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London \\n\"]  # Writing to filewith open(\"myfile.txt\", \"w\") as file1:    # Writing data to a file    file1.write(\"Hello \\n\")    file1.writelines(L)  # Appending to filewith open(\"myfile.txt\", \'a\') as file1:    file1.write(\"Today\")    # Reading from filewith open(\"myfile.txt\", \"r+\") as file1:    # Reading form a file    print(file1.read())\']','[\'Output of Readlines after appending\nThis is Delhi\nThis is Paris\nThis is LondonToday\n\n\nOutput of Readlines after writing\nTomorrow\', \'Output of Readlines after appending\nThis is Delhi\nThis is Paris\nThis is London\nTodayTomorrow\', \'Hello\nThis is Delhi\nThis is Paris\nThis is London\nToday\']','[]','[\'Basics of file handling|||Access modes&&&Append Only (‘a’): Open the file for writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.|||Append and Read (‘a+’): Open the file for reading and writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.\']'),(72,'[\'Regular Expression in Python with Examples | Set 1\']','[\'Python3\', \'MetaCharacters\', \'\\ – Backslash\', \'Python3\', \'[] – Square Brackets\', \'^ – Caret\', \'$ – Dollar\', \'. – Dot\', \'| – Or\', \'? – Question Mark\', \'* – Star\', \'+ – Plus\', \'{m, n} – Braces\', \'(<regex>) – Group\', \'Special Sequences\', \'Regex Module in Python\', \'Python3\', \'re.findall()\', \'Python3\', \'re.compile()xa0\', \'Python\', \'Python\', \'Python\', \'Python\', \'re.split()xa0\', \'Python\', \'Python\', \'re.sub()xa0\', \'Python\', \'re.subn()xa0\', \'Python\', \'re.escape()\', \'Python\', \'re.search()\', \'Python3\', \'Match Object\', \'Python3\', \'Python3\', \'Getting matched substring\', \'Python3\']','[\'List of special sequencesxa0\', \'Getting the string and the regex\', \'Getting index of matched object\']','[]','[\'https://www.youtube.com/embed/JKNLy55G2z0?feature=oembed\']','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/import-module-python/\', \'https://www.geeksforgeeks.org/regular-expressions-python-set-1-search-match-find/\', \'https://docs.python.org/2/library/re.html\', \'http://www.write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The above code gives the starting index and the ending index of the string portal.xa0\', \'Let’s discuss each of these metacharacters in detailxa0\', \'We cal also specify a range of characters using – inside the square brackets. For example,xa0\', \'We can also invert the character class using the caret(^) symbol. For example,xa0\', \'Braces match any repetitions preceding regex from m to n both inclusive. For example – xa0\', \'Group symbol is used to group sub-patterns. For example – xa0\', \'Example: Importing re module in Pythonxa0\', \'Let’s see various functions provided by this module to work with regex in Python.xa0\', \'Example: Finding all occurrences of a patternxa0\', \'Example 1:\', \'Understanding the Output:xa0\', \'Example 2: Set class [\\s,.] will match any whitespace character, xa0‘,’, xa0or, ‘.’ .xa0\', \'Example 3:\', \'Example 4:\', \'Understanding the Output:xa0\', \'Example 1:\', \'Example 2:\', \'Example 1:\', \'Example: Searching an occurrence of the pattern\', \'Example: Getting the string and the regex of the matched object\', \'Example: Getting index of matched objectxa0\', \'Example: Getting matched substringxa0\', \'Related Article :xa0https://www.geeksforgeeks.org/regular-expressions-python-set-1-search-match-find/\', \'Reference:xa0https://docs.python.org/2/library/re.html\']','[\'Note: Here r character (r’portal’) stands for raw, not regex. The raw string is slightly different from a regular string, it won’t interpret the \\ character as an escape character. This is because the regular expression engine uses \\ character for its own escaping purpose.\', \'Before starting with the Python regex module let’s see how to actually write regex using metacharacters or special sequences.xa0\', \'To understand the RE analogy, MetaCharacters are useful, important, and will be used in functions of module re.xa0Below is the list of metacharacters.\', \'Square Brackets ([]) represents a character class consisting of a set of characters that we wish to match. For example, the character class [abc] will match any single a, b, or c.xa0\', \'Caret (^) symbol matches the beginning of the string i.e. checks whether the string starts with the given character(s) or not. For example – xa0\', \'Dollar($) symbol matches the end of the string i.e checks whether the string ends with the given character(s) or not. For example –xa0\', \'Dot(.) symbol matches only a single character except for the newline character (\\n). For example – xa0\', \'Or symbol works as the or operator meaning it checks whether the pattern before or after the or symbol is present in the string or not. For example – xa0\', \'Question mark(?) checks if the string before the question mark in the regex occurs at least once or not at all. For example – xa0\', \'Star (*) symbol matches zero or more occurrences of the regex preceding the * symbol. For example – xa0\', \'Plus (+) symbol matches one or more occurrences of the regex preceding the + symbol. For example – xa0\', \'Special sequences do not match for the actual character in the string instead it tells the specific location in the search string where the match must occur. It makes it easier to write commonly used patterns. xa0\', \'Python has a module named re that is used for regular expressions in Python. We can import this module by using the import statement.\', \'Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found.\', \'Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions.xa0\', \'Split string by the occurrences of a character or a pattern, upon finding that pattern, the remaining characters from the string are returned as part of the resulting list.xa0\', \'The ‘sub’ in the function stands for SubString, a certain regular expression pattern is searched in the given string(3rd parameter), and upon finding the substring pattern is replaced by repl(2nd parameter), count checks and maintains the number of times this occurs.xa0\', \'subn() is similar to sub() in all ways, except in its way to providing output. It returns a tuple with count of total of replacement and the new string rather than just the string.xa0\', \'Return string with all non-alphanumerics backslashed, this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.\', \'his method either returns None (if the pattern doesn’t match), or a re.MatchObject contains information about the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more than extracting data.\', \'A Match object contains all the information about the search and the result and if there is no match found then None will be returned. Let’s see some of the commonly used methods and attributes of the match object.\', \'math.re attribute returns the regular expression passed and match.string attribute returns the string passed.\', \'group() method returns the part of the string for which the patterns match. See the below example for a better understanding.\', \'In the above example, our pattern specifies for the string that contains at least 2 characters which are followed by a space, and that space is followed by a t.xa0\', \'This article is contributed by Piyush Doorwar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\'A Regular Expressions (RegEx) is a special sequence of characters that uses a search pattern to find a string or set of strings. It can detect the presence or absence of a text by matching with a particular pattern, and also can split a pattern into one or more sub-patterns. Python provides a re module that supports the use of regex in Python. Its primary function is to offer a search, where it takes a regular expression and a string. Here, it either returns the first match or else none.\', \'The backslash (\\) makes sure that the character is not treated in a special way. This can be considered a way of escaping metacharacters. For example, if you want to search for the dot(.) in the string then you will find that dot(.) will be treated as a special character as is one of the metacharacters (as shown in the above table). So for this case, we will use the backslash(\\) just before the dot(.) so that it will lose its specialty. See the below example for a better understanding.\', \'The First parameter, pattern denotes the regular expression, string is the given string in which pattern will be searched for and in which splitting occurs, maxsplit if not provided is considered to be zero ‘0’, and if any nonzero value is provided, then at most that many splits occur. If maxsplit = 1, then the string will split once only, resulting in a list of length 2. The flags are very useful and can help to shorten code, they are not necessary parameters, eg: flags = re.IGNORECASE, In this split, case will be ignored.\']','[\"import re s = \'GeeksforGeeks: A computer science portal for geeks\' match = re.search(r\'portal\', s) print(\'Start Index:\', match.start())print(\'End Index:\', match.end())\", \"import re s = \'geeks.forgeeks\' # without using \\match = re.search(r\'.\', s)print(match) # using \\match = re.search(r\'\\.\', s)print(match)\", \'import re\', \'# A Python program to demonstrate working of# findall()import re # A sample text string where regular expression# is searched.string = \"\"\"Hello my Number is 123456789 and            my friend\'s number is 987654321\"\"\" # A sample regular expression to find digits.regex = \'\\d+\' match = re.findall(regex, string)print(match) # This example is contributed by Ayush Saluja.\', \'# Module Regular Expression is imported# using __import__().import re # compile() creates regular expression# character class [a-e],# which is equivalent to [abcde].# class [abcde] will match with string with# \'a\', \'b\', \'c\', \'d\', \'e\'.p = re.compile(\'[a-e]\') # findall() searches for the Regular Expression# and return a list upon findingprint(p.findall(\"Aye, said Mr. Gibenson Stark\"))\', \'import re # \\d is equivalent to [0-9].p = re.compile(\'\\d\')print(p.findall(\"I went to him at 11 A.M. on 4th July 1886\")) # \\d+ will match a group on [0-9], group# of one or greater sizep = re.compile(\'\\d+\')print(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\', \'import re # \\w is equivalent to [a-zA-Z0-9_].p = re.compile(\'\\w\')print(p.findall(\"He said * in some_lang.\")) # \\w+ matches to group of alphanumeric character.p = re.compile(\'\\w+\')print(p.findall(\"I went to him at 11 A.M., he \\said *** in some_language.\")) # \\W matches to non alphanumeric characters.p = re.compile(\'\\W\')print(p.findall(\"he said *** in some_language.\"))\', \'import re # \'*\' replaces the no. of occurrence# of a character.p = re.compile(\'ab*\')print(p.findall(\"ababbaabbb\"))\', \'from re import split # \'\\W+\' denotes Non-Alphanumeric Characters# or group of characters Upon finding \',\'# or whitespace \' \', the split(), splits the# string from that pointprint(split(\'\\W+\', \'Words, words , Words\'))print(split(\'\\W+\', \"Word\'s words Words\")) # Here \':\', \' \' ,\',\' are not AlphaNumeric thus,# the point where splitting occursprint(split(\'\\W+\', \'On 12th Jan 2016, at 11:02 AM\')) # \'\\d+\' denotes Numeric Characters or group of# characters Splitting occurs at \'12\', \'2016\',# \'11\', \'02\' onlyprint(split(\'\\d+\', \'On 12th Jan 2016, at 11:02 AM\'))\', \"import re # Splitting will occurs only once, at# \'12\', returned list will have length 2print(re.split(\'\\d+\', \'On 12th Jan 2016, at 11:02 AM\', 1)) # \'Boy\' and \'boy\' will be treated same when# flags = re.IGNORECASEprint(re.split(\'[a-f]+\', \'Aey, Boy oh boy, come here\', flags=re.IGNORECASE))print(re.split(\'[a-f]+\', \'Aey, Boy oh boy, come here\'))\", \'import re # Regular Expression pattern \'ub\' matches the# string at \"Subject\" and \"Uber\". As the CASE# has been ignored, using Flag, \'ub\' should# match twice with the string Upon matching,# \'ub\' is replaced by \'~*\' in \"Subject\", and# in \"Uber\", \'Ub\' is replaced.print(re.sub(\'ub\', \'~*\', \'Subject has Uber booked already\',             flags=re.IGNORECASE)) # Consider the Case Sensitivity, \'Ub\' in# \"Uber\", will not be reaplced.print(re.sub(\'ub\', \'~*\', \'Subject has Uber booked already\')) # As count has been given value 1, the maximum# times replacement occurs is 1print(re.sub(\'ub\', \'~*\', \'Subject has Uber booked already\',             count=1, flags=re.IGNORECASE)) # \'r\' before the pattern denotes RE, \\s is for# start and end of a String.print(re.sub(r\'\\sAND\\s\', \' & \', \'Baked Beans And Spam\',             flags=re.IGNORECASE))\', \"import re print(re.subn(\'ub\', \'~*\', \'Subject has Uber booked already\')) t = re.subn(\'ub\', \'~*\', \'Subject has Uber booked already\',            flags=re.IGNORECASE)print(t)print(len(t)) # This will give same output as sub() would haveprint(t[0])\", \'import re # escape() returns a string with BackSlash \'\\\',# before every Non-Alphanumeric Character# In 1st case only \' \', is not alphanumeric# In 2nd case, \' \', caret \'^\', \'-\', \'[]\', \'\\\'# are not alphanumericprint(re.escape(\"This is Awesome even 1 AM\"))print(re.escape(\"I Asked what is this [a-9], he said \\t ^WoW\"))\', \'# A Python program to demonstrate working of re.match().import re # Lets use a regular expression to match a date string# in the form of Month name followed by day numberregex = r\"([a-zA-Z]+) (\\d+)\" match = re.search(regex, \"I was born on June 24\") if match != None:     # We reach here when the expression \"([a-zA-Z]+) (\\d+)\"    # matches the date string.     # This will print [14, 21), since it matches at index 14    # and ends at 21.    print (\"Match at index %s, %s\" % (match.start(), match.end()))     # We us group() method to get all the matches and    # captured groups. The groups contain the matched values.    # In particular:    # match.group(0) always returns the fully matched string    # match.group(1) match.group(2), ... return the capture    # groups in order from left to right in the input string    # match.group() is equivalent to match.group(0)     # So this will print \"June 24\"    print (\"Full match: %s\" % (match.group(0)))     # So this will print \"June\"    print (\"Month: %s\" % (match.group(1)))     # So this will print \"24\"    print (\"Day: %s\" % (match.group(2))) else:    print (\"The regex pattern does not match.\")\', \'import re s = \"Welcome to GeeksForGeeks\" # here x is the match objectres = re.search(r\"\\bG\", s) print(res.re)print(res.string)\', \'import re s = \"Welcome to GeeksForGeeks\" # here x is the match objectres = re.search(r\"\\bGee\", s) print(res.start())print(res.end())print(res.span())\', \'import re s = \"Welcome to GeeksForGeeks\" # here x is the match objectres = re.search(r\"\\D{2} t\", s) print(res.group())\']','[\'Start Index: 34\nEnd Index: 40\', \"<_sre.SRE_Match object; span=(0, 1), match=\'g\'>\n<_sre.SRE_Match object; span=(5, 6), match=\'.\'>\", \"[\'123456789\', \'987654321\']\", \"[\'e\', \'a\', \'d\', \'b\', \'e\', \'a\']\", \"[\'1\', \'1\', \'4\', \'1\', \'8\', \'8\', \'6\']\n[\'11\', \'4\', \'1886\']\", \"[\'H\', \'e\', \'s\', \'a\', \'i\', \'d\', \'i\', \'n\', \'s\', \'o\', \'m\', \'e\', \'_\', \'l\', \'a\', \'n\', \'g\']\n[\'I\', \'went\', \'to\', \'him\', \'at\', \'11\', \'A\', \'M\', \'he\', \'said\', \'in\', \'some_language\']\n[\' \', \' \', \'*\', \'*\', \'*\', \' \', \' \', \'.\']\", \"[\'ab\', \'abb\', \'a\', \'abbb\']\", \'re.split(pattern, string, maxsplit=0, flags=0)\', \"[\'Words\', \'words\', \'Words\']\n[\'Word\', \'s\', \'words\', \'Words\']\n[\'On\', \'12th\', \'Jan\', \'2016\', \'at\', \'11\', \'02\', \'AM\']\n[\'On \', \'th Jan \', \', at \', \':\', \' AM\']\", \"[\'On \', \'th Jan 2016, at 11:02 AM\']\n[\'\', \'y, \', \'oy oh \', \'oy, \', \'om\', \' h\', \'r\', \'\']\n[\'A\', \'y, Boy oh \', \'oy, \', \'om\', \' h\', \'r\', \'\']\", \'re.sub(pattern, repl, string, count=0, flags=0)\', \'S~*ject has ~*er booked already\nS~*ject has Uber booked already\nS~*ject has Uber booked already\nBaked Beans & Spam\', \'re.subn(pattern, repl, string, count=0, flags=0)\', \"(\'S~*ject has Uber booked already\', 1)\n(\'S~*ject has ~*er booked already\', 2)\nLength of Tuple is:  2\nS~*ject has ~*er booked already\", \'re.escape(string)\', \'This\\ is\\ Awesome\\ even\\ 1\\ AM\nI\\ Asked\\ what\\ is\\ this\\ \\[a\\-9\\]\\,\\ he\\ said\\ \\    \\ \\^WoW\', \'Match at index 14, 21\nFull match: June 24\nMonth: June\nDay: 24\', \"re.compile(\'\\\\bG\')\nWelcome to GeeksForGeeks\", \'11\n14\n(11, 14)\', \'me t\']','[\'\\|||Used to drop the special meaning of character following it&&&[]|||Represent a character class&&&^|||Matches the beginning&&&$|||Matches the end&&&.|||Matches any character except newline&&&||||Means OR (Matches with any of the characters separated by it.&&&?|||Matches zero or one occurrence&&&*|||Any number of occurrences (including 0 occurrences)&&&+|||One or more occurrences&&&{}|||Indicate the number of occurrences of a preceding regex to match.&&&()|||Enclose a group of Regex\', \'\\A|||Matches if the string begins with the given character|||\\Aforxa0|||for geeks&&&for the world&&&\\b|||Matches if the word begins or ends with the given character. \\b(string) will check for the beginning of the word and (string)\\b will check for the ending of the word.|||\\bge|||geeks&&&get&&&\\B|||It is the opposite of the \\b i.e. the string should not start or end with the given regex.|||\\Bge|||together&&&forge&&&\\d|||Matches any decimal digit, this is equivalent to the set class [0-9]|||\\d|||123&&&gee1&&&\\D|||Matches any non-digit character, this is equivalent to the set class [^0-9]|||\\D|||geeks&&&geek1&&&\\s|||Matches any whitespace character.|||\\s|||gee ks&&&a bc a&&&\\S|||Matches any non-whitespace character|||\\S|||a bd&&&abcd&&&\\w|||Matches any alphanumeric character, this is equivalent to the class [a-zA-Z0-9_].|||\\w|||123&&&geeKs4&&&\\W|||Matches any non-alphanumeric character.|||\\W|||>$&&&gee<>&&&\\Z|||Matches if the string ends with the given regex|||ab\\Z|||abcdab&&&abababab\']','[\'[0, 3] is sample as [0123]|||[a-c] is same as [abc]&&&[^0-3] means any number except 0, 1, 2, or 3|||[^a-c] means any character except a, b, or c&&&^g will check if the string starts with g such as geeks, globe, girl, g, etc.|||^ge will check if the string starts with ge such as geeks, geeksforgeeks, etc.&&&s$ will check for the string that ends with a such as geeks, ends, s, etc.|||ks$ will check for the string that ends with ks such as geeks, geeksforgeeks, ks, etc.&&&a.b will check for the string that contains any character at the place of the dot such as acb, acbd, abbb, etc|||.. will check if the string contains at least 2 characters&&&a|b will match any string that contains a or b such as acd, bcd, abcd, etc.&&&ab?c will be matched for the string ac, acb, dabc but will not be matched for abbc because there are two b. Similarly, it will not be matched for abdc because b is not followed by c.&&&ab*c will be matched for the string ac, abc, abbbc, dabc, etc. but will not be matched for abdc because b is not followed by c.&&&ab+c will be matched for the string abc, abbc, dabc, but will not be matched for ac, abdc because there is no b in ac and b is not followed by c in abdc.&&&a{2, 4} will be matched for the string aaab, baaaac, gaad, but will not be matched for strings like abc, bc because there is only one a or no a in both the cases.&&&(a|b)cd will match for strings like acd, abcd, gacd, etc.&&&First occurrence is ‘e’ in “Aye” and not ‘A’, as it being Case Sensitive.|||Next Occurrence is ‘a’ in “said”, then ‘d’ in “said”, followed by ‘b’ and ‘e’ in “Gibenson”, the Last ‘a’ matches with “Stark”.|||Metacharacter backslash ‘\\’ has a very important role as it signals various sequences. If the backslash is to be used without its special meaning as metacharacter, use’\\\\’&&&Our RE is ab*, which ‘a’ accompanied by any no. of ‘b’s, starting from 0.|||Output ‘ab’, is valid because of single ‘a’ accompanied by single ‘b’.|||Output ‘abb’, is valid because of single ‘a’ accompanied by 2 ‘b’.|||Output ‘a’, is valid because of single ‘a’ accompanied by 0 ‘b’.|||Output ‘abbb’, is valid because of single ‘a’ accompanied by 3 ‘b’.&&&start() method returns the starting index of the matched substring|||end() method returns the ending index of the matched substring|||span() method returns a tuple containing the starting and the ending index of the matched substring\']'),(73,'[\'Regular Expressions in Python – Set 2 (Search, Match and Find All)\']','[\'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/regular-expression-python-examples-set-1/\', \'https://docs.python.org/2/library/re.html\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Searching an occurrence of patternxa0\', \'Matching a Pattern with Textxa0\', \'Finding all occurrences of a patternxa0\', \'We will soon be discussing more methods on regular expressions.\']','[\'Regular Expression in Python with Examples | Set 1The module re provides support for regular expressions in Python. Below are main methods in this module.\', \'re.search() : This method either returns None (if the pattern doesn’t match), or a re.MatchObject that contains information about the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more than extracting data.\', \'re.match() : This function attempts to match pattern to whole string. The re.match function returns a match object on success, None on failure.xa0\', \'re.findall() : Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found (Source : Python Docs).xa0\', \'Regular expression is a vast topic. It’s a complete library. Regular expressions can do a lot of stuff. You can Match, Search, Replace, Extract a lot of data. For example, below small code is so powerful that it can extract email address from a text. So we can make our own Web Crawlers and scrappers in python with easy.Look at the below regex.xa0\', \'This article is contributed by Shwetanshu Rohatgi. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed abovexa0\']','[]','[\'# A Python program to demonstrate working of re.match(). import re    # Lets use a regular expression to match a date string # in the form of Month name followed by day number regex = r\"([a-zA-Z]+) (\\d+)\"   match = re.search(regex, \"I was born on June 24\")    if match != None:        # We reach here when the expression \"([a-zA-Z]+) (\\d+)\"     # matches the date string.        # This will print [14, 21), since it matches at index 14     # and ends at 21.     print (\"Match at index %s, %s\" % (match.start(), match.end()))        # We us group() method to get all the matches and     # captured groups. The groups contain the matched values.     # In particular:     # match.group(0) always returns the fully matched string     # match.group(1) match.group(2), ... return the capture     # groups in order from left to right in the input string     # match.group() is equivalent to match.group(0)        # So this will print \"June 24\"     print (\"Full match: %s\" % (match.group(0)))        # So this will print \"June\"     print (\"Month: %s\" % (match.group(1)))        # So this will print \"24\"     print (\"Day: %s\" % (match.group(2)))   else:     print (\"The regex pattern does not match.\")\', \'# A Python program to demonstrate working# of re.match().import re    # a sample function that uses regular expressions# to find month and day of a date.def findMonthAndDate(string):            regex = r\"([a-zA-Z]+) (\\d+)\"    match = re.match(regex, string)            if match == None:         print (\"Not a valid date\")        return        print (\"Given Data: %s\" % (match.group()))    print (\"Month: %s\" % (match.group(1)))    print (\"Day: %s\" % (match.group(2)))            # Driver CodefindMonthAndDate(\"Jun 24\")print(\"\")findMonthAndDate(\"I was born on June 24\")\', \'# A Python program to demonstrate working of# findall()import re   # A sample text string where regular expression # is searched.string  = \"\"\"Hello my Number is 123456789 and             my friend\'s number is 987654321\"\"\"   # A sample regular expression to find digits.regex = \'\\d+\'               match = re.findall(regex, string)print(match)   # This example is contributed by Ayush Saluja.\']','[\'Match at index 14, 21\nFull match: June 24\nMonth: June\nDay: 24\', \'re.match(pattern, string, flags=0)\n\npattern : Regular expression to be matched.\nstring : String where pattern is searched\nflags : We can specify different flags \n        using bitwise OR (|).\', \'Given Data: Jun 24\nMonth: Jun\nDay: 24\n\nNot a valid date\', \"[\'123456789\', \'987654321\']\", \'# extract all email addresses and add them into the resulting set\nnew_emails = set(re.findall(r\"[a-z0-9\\.\\-+_]+@[a-z0-9\\.\\-+_]+\\.[a-z]+\", \n                           text, re.I))\']','[]','[]'),(74,'[\'Python Regex: re.search() VS re.findall()\']','[\'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/regular-expression-python-examples-set-1/\', \'https://www.geeksforgeeks.org/regular-expression-python-examples-set-1/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisite: Regular Expression with Examples | Python\', \'There are a total of 14 metacharacters and will be discussed as they follow into functions:\']','[\'A Regular expression (sometimes called a Rational expression) is a sequence of characters that define a search pattern, mainly for use in pattern matching with strings, or string matching, i.e. “find and replace”-like operations. Regular expressions are a generalized way to match patterns with sequences of characters.\', \'Module Regular Expressions (RE) specifies a set of strings (pattern) that matches it. To understand the RE analogy, MetaCharacters are useful, important and will be used in functions of module re.\', \'re.search() method either returns None (if the pattern doesn’t match), or a re.MatchObject that contains information about the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more than extracting data.\', \'Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found.\']','[]','[\'# A Python program to demonstrate working of re.match(). import re     # Lets use a regular expression to match a date string # in the form of Month name followed by day number regex = r\"([a-zA-Z]+) (\\d+)\"    match = re.search(regex, \"I was born on June 24\")     if match != None:         # We reach here when the expression \"([a-zA-Z]+) (\\d+)\"     # matches the date string.         # This will print [14, 21), since it matches at index 14     # and ends at 21.      print(\"Match at index % s, % s\" % (match.start(), match.end()))        # We us group() method to get all the matches and     # captured groups. The groups contain the matched values.     # In particular:     # match.group(0) always returns the fully matched string     # match.group(1) match.group(2), ... return the capture     # groups in order from left to right in the input string     # match.group() is equivalent to match.group(0)         # So this will print \"June 24\"     print(\"Full match: % s\" % (match.group(0)))        # So this will print \"June\"     print(\"Month: % s\" % (match.group(1)))        # So this will print \"24\"     print(\"Day: % s\" % (match.group(2)))    else:     print(\"The regex pattern does not match.\")\', \'# A Python program to demonstrate working of # findall() import re     # A sample text string where regular expression  # is searched. string = \"\"\"Hello my Number is 123456789 and              my friend\'s number is 987654321\"\"\"    # A sample regular expression to find digits. regex = \'\\d+\'                 match = re.findall(regex, string) print(match)\']','[\'\\   Used to drop the special meaning of character\n    following it (discussed below)\n[]  Represent a character class\n^   Matches the beginning\n$   Matches the end\n.   Matches any character except newline\n?   Matches zero or one occurrence.\n|   Means OR (Matches with any of the characters\n    separated by it.\n*   Any number of occurrences (including 0 occurrences)\n+   One or more occurrences\n{}  Indicate number of occurrences of a preceding RE \n    to match.\n()  Enclose a group of REs\', \'Match at index 14, 21\nFull match: June 24\nMonth: June\nDay: 24\', \"[\'123456789\', \'987654321\']\"]','[]','[]'),(75,'[\'Verbose in Python Regex\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'In this article, we will learn about VERBOSE flag of the re package and how to use it.\', \'Below is the Python implementation –\']','[\'It’s passed as an argument to re.compile() i.e re.compile(Regular Expression, re.VERBOSE). re.compile() returns a RegexObject which is then matched with the given string.\', \'Let’s consider an example where the user is asked to enter their Email ID and we have to validate it using RegEx. The format of an email is as follow:\']','[\'re.VERBOSE : This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.Whitespace within the pattern is ignored, except when in a character class, or when preceded by an unescaped backslash, or within tokens like *?, (?: or (?P. When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored.\']','[\'# Without Using VERBOSEregex_email = re.compile(r\'^([a-z0-9_\\.-]+)@([0-9a-z\\.-]+)\\.([a-z\\.]{2, 6})$\',              re.IGNORECASE)   # Using VERBOSEregex_email = re.compile(r\"\"\"            ^([a-z0-9_\\.-]+)              # local Part            @                             # single @ sign            ([0-9a-z\\.-]+)                # Domain name            \\.                            # single Dot .            ([a-z]{2,6})$                 # Top level Domain               \"\"\",re.VERBOSE | re.IGNORECASE)\', \'# Python3 program to show the Implementation of VERBOSE in RegEXimport re  def validate_email(email):      # RegexObject = re.compile( Regular expression, flag )    # Compiles a regular expression pattern into     # a regular expression object    regex_email=re.compile(r\"\"\"                           ^([a-z0-9_\\.-]+)                 # local Part                           @                             # single @ sign                            ([0-9a-z\\.-]+)                 # Domain name                           \\.                             # single Dot .                            ([a-z]{2,6})$                 # Top level Domain                                \"\"\",re.VERBOSE | re.IGNORECASE)      # RegexObject is matched with the desired    # string using fullmatch function    # In case a match is found, search()    # returns a MatchObject Instance    res=regex_email.fullmatch(email)      #If match is found, the string is valid    if res:        print(\"{} is Valid. Details are as follow:\".format(email))                  #prints first part/personal detail of Email Id        print(\"Local:{}\".format(res.group(1)))                  #prints Domain Name of Email Id        print(\"Domain:{}\".format(res.group(2)))                  #prints Top Level Domain Name of Email Id        print(\"Top Level domain:{}\".format(res.group(3)))        print()              else:        #If match is not found,string is invalid        print(\"{} is Invalid\".format(email))  # Driver Codevalidate_email(\"expectopatronum@gmail.com\")validate_email(\"avadakedavra@yahoo.com@\")validate_email(\"Crucio@.com\")\']','[\'Input : expectopatronum@gmail.com\nOutput : Valid\n\n\nInput : avadakedavra@yahoo.com@\nOutput : Invalid\nThis is invalid because there is @ after the top level domain name.\', \'expectopatronum@gmail.com is Valid. Details are as follow:\nLocal:expectopatronum\nDomain:gmail\nTop Level domain:com\n\navadakedavra@yahoo.com@ is Invalid\nCrucio@.com is Invalid\']','[]','[\'Personal details/local part like john123|||Single @|||Domain Name like gmail/yahoo etc|||Single Dot(.)|||Top Level Domain like .com/.org/.net\']'),(76,'[\'Password validation in Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/pattern-matching-python-regex/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Conditions for a valid password are:\', \'We can check if a given string is eligible to be a password or not using multiple ways.\', \'Method #1: Naive Method (Without using Regex).\']','[\'Let’s take a password as a combination of alphanumeric characters along with special characters, and check whether the password is valid or not with the help of few conditions.\', \'This code used boolean functions to check if all the conditions were satisfied or not. We see that though the complexity of the code is basic, the length is considerable.xa0Method #2: Using regex\', \'compile() method of Regex module makes a Regex object, making it possible to execute regex functions onto the pat variable. Then we check if the pattern defined by pat is followed by the input string passwd. If so, the search method returns true, which would allow the password to be valid.\']','[]','[\'# Password validation in Python# using naive method  # Function to validate the passworddef password_check(passwd):          SpecialSym =[\'$\', \'@\', \'#\', \'%\']    val = True          if len(passwd) < 6:        print(\'length should be at least 6\')        val = False              if len(passwd) > 20:        print(\'length should be not be greater than 8\')        val = False              if not any(char.isdigit() for char in passwd):        print(\'Password should have at least one numeral\')        val = False              if not any(char.isupper() for char in passwd):        print(\'Password should have at least one uppercase letter\')        val = False              if not any(char.islower() for char in passwd):        print(\'Password should have at least one lowercase letter\')        val = False              if not any(char in SpecialSym for char in passwd):        print(\'Password should have at least one of the symbols $@#\')        val = False    if val:        return val  # Main methoddef main():    passwd = \'Geek12@\'          if (password_check(passwd)):        print(\"Password is valid\")    else:        print(\"Invalid Password !!\")          # Driver Code        if __name__ == \'__main__\':    main()\', \'# importing re libraryimport re  def main():    passwd = \'Geek12@\'    reg = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{6,20}$\"          # compiling regex    pat = re.compile(reg)          # searching regex                     mat = re.search(pat, passwd)          # validating conditions    if mat:        print(\"Password is valid.\")    else:        print(\"Password invalid !!\")  # Driver Code     if __name__ == \'__main__\':    main()\']','[\'Input :  Geek12#\nOutput : Password is valid.\n\nInput :  asd123\nOutput : Invalid Password !!\', \'Password is valid\', \'Password is valid.\']','[]','[\'Should have at least one number.|||Should have at least one uppercase and one lowercase character.|||Should have at least one special symbol.|||Should be between 6 to 20 characters long.\']'),(77,'[\'Python Collections Module\']','[\'Counters\', \'Python3\', \'OrderedDict\', \'Python3\', \'Python3\', \'DefaultDict\', \'Python3\', \'Python3\', \'ChainMap\', \'Python3\', \'Python3\', \'Python3\', \'NamedTuple\', \'Python3\', \'Python3\', \'Deque\', \'Python3\', \'Python3\', \'Python3\', \'UserDict\', \'Python3\', \'UserList\', \'Python3\', \'UserString\', \'Python3\']','[\'Initializing Counter Objects\', \'Initializing DefaultDict Objects\', \'Accessing Keys and Values from ChainMap\', \'Adding new dictionary\', \'Conversion Operationsxa0\', \'Inserting Elements\', \'Removing Elements\']','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-tuples/\', \'https://www.geeksforgeeks.org/python-list/\', \'https://www.geeksforgeeks.org/python-dictionary/\', \'https://www.geeksforgeeks.org/#counters\', \'https://www.geeksforgeeks.org/#ordereddict\', \'https://www.geeksforgeeks.org/#defaultdict\', \'https://www.geeksforgeeks.org/#chainmap\', \'https://www.geeksforgeeks.org/#namedtuple\', \'https://www.geeksforgeeks.org/#deque\', \'https://www.geeksforgeeks.org/#userdict\', \'https://www.geeksforgeeks.org/#userlist\', \'https://www.geeksforgeeks.org/#userstring\', \'https://www.geeksforgeeks.org/counters-in-python-set-1/\', \'https://www.geeksforgeeks.org/counters-in-python-set-1/\', \'https://www.geeksforgeeks.org/ordereddict-in-python/\', \'https://www.geeksforgeeks.org/ordereddict-in-python/\', \'https://www.geeksforgeeks.org/defaultdict-in-python/\', \'https://www.geeksforgeeks.org/defaultdict-in-python/\', \'https://www.geeksforgeeks.org/chainmap-in-python/\', \'https://www.geeksforgeeks.org/chainmap-in-python/\', \'https://www.geeksforgeeks.org/namedtuple-in-python/\', \'https://www.geeksforgeeks.org/ordereddict-in-python/\', \'https://www.geeksforgeeks.org/namedtuple-in-python/\', \'https://www.geeksforgeeks.org/deque-in-python/\', \'https://www.geeksforgeeks.org/deque-in-python/\', \'https://www.geeksforgeeks.org/collections-userdict-in-python/\', \'https://www.geeksforgeeks.org/collections-userdict-in-python/\', \'https://www.geeksforgeeks.org/collections-userlist-in-python/\', \'https://www.geeksforgeeks.org/collections-userlist-in-python/\', \'https://www.geeksforgeeks.org/collections-userstring-in-python/\', \'https://www.geeksforgeeks.org/collections-userstring-in-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Table of Content:\', \'Note: It is equivalent to bag or multiset of other languages.\', \'Note: For more information, refer xa0Counters in Python.\', \'Note: for more information, refer OrderedDict in Python\', \'Example 2:\', \'Note: For more information, refer Defaultdict in Python\', \'A ChainMap encapsulates many dictionaries into a single unit and returns a list of dictionaries.\', \'Note: For more information, refer ChainMap in Python\', \'1. _make(): This function is used to return a namedtuple() from the iterable passed as argument.\', \'Note: For more xa0information, refer NamedTuple in Python\', \'This function takes the list as an argument.\', \'Note: For more information, refer Deque in Python.\', \'Note: For more information, refer UserDict in Python\', \'Note: For more information, refer UserList in Python\', \'Note: For more information, refer UserString in Python\']','[\'The collection Module in Python provides different types of containers. A Container is an object that is used to store different objects and provide a way to access the contained objects and iterate over them. Some of the built-in containers are Tuple, List, Dictionary, etc. In this article, we will discuss the different containers provided by the collections module.\', \'A counter is a sub-class of the dictionary. It is used to keep the count of the elements in an iterable in the form of an unordered dictionary where the key represents the element in the iterable and value represents the count of that element in the iterable.\', \'The counter object can be initialized using the counter() function and this function can be called in one of the following ways:\', \'An OrderedDict is also a sub-class of dictionary but unlike dictionary, it remembers the order in which the keys were inserted.xa0\', \'While deleting and re-inserting the same key will push the key to the last to maintain the order of insertion of the key.\', \'A DefaultDict is also a sub-class to dictionary. It is used to provide some default values for the key that does not exist and never raises a KeyError.\', \'default_factory is a function that provides the default value for the dictionary created. If this parameter is absent then the KeyError is raised.\', \'DefaultDict objects can be initialized using DefaultDict() method by passing the data type as an argument.\', \'Dictionary with values as list:xa0defaultdict(<class ‘list’>, {0: [0], 1: [1], 2: [2], 3: [3], 4: [4]})\', \'Values from ChainMap can be accessed using the key name. They can also be accessed by using the keys() and values() method.\', \'1xa0ValuesView(ChainMap({‘a’: 1, ‘b’: 2}, {‘c’: 3, ‘d’: 4}, {‘e’: 5, ‘f’: 6}))xa0KeysView(ChainMap({‘a’: 1, ‘b’: 2}, {‘c’: 3, ‘d’: 4}, {‘e’: 5, ‘f’: 6}))\', \'A new dictionary can be added by using the new_child() method. The newly added dictionary is added at the beginning of the ChainMap.\', \'2. _asdict(): This function returns the OrdereDict() as constructed from the mapped values of namedtuple().\', \'Deque (Doubly Ended Queue) is the optimized list for quicker append and pop operations from both sides of the container. It provides O(1) time complexity for append and pop operations as compared to list with O(n) time complexity.\', \'Elements in deque can be inserted from both ends. To insert the elements from right append() method is used and to insert the elements from the left appendleft() method is used.\', \'Elements can also be removed from the deque from both the ends. To remove elements from right use pop() method and to remove elements from the left use popleft() method.\', \'UserDict is a dictionary-like container that acts as a wrapper around the dictionary objects. This container is used when someone wants to create their own dictionary with some modified or new functionality.xa0\', \'UserList is a list like container that acts as a wrapper around the list objects. This is useful when someone wants to create their own list with some modified or additional functionality.\', \'UserString is a string like container and just like UserDict and UserList it acts as a wrapper around string objects. It is used when someone wants to create their own strings with some modified or additional functionality.xa0\']','[\'A NamedTuple returns a tuple object with names for each position which the ordinary tuples lack. For example, consider a tuple names student where the first element represents fname, second represents lname and the third element represents the DOB. Suppose for calling fname instead of remembering the index position you can actually call the element by using the fname argument, then it will be really easy for accessing tuples element. This functionality is provided by the NamedTuple.\']','[\"# A Python program to show different# ways to create Counterfrom collections import Counter   # With sequence of items print(Counter([\'B\',\'B\',\'A\',\'B\',\'C\',\'A\',\'B\',               \'B\',\'A\',\'C\']))   # with dictionaryprint(Counter({\'A\':3, \'B\':5, \'C\':2}))   # with keyword argumentsprint(Counter(A=3, B=5, C=2))\", \'# A Python program to demonstrate working# of OrderedDict from collections import OrderedDict   print(\"This is a Dict:\\n\")d = {}d[\'a\'] = 1d[\'b\'] = 2d[\'c\'] = 3d[\'d\'] = 4   for key, value in d.items():    print(key, value)   print(\"\\nThis is an Ordered Dict:\\n\")od = OrderedDict()od[\'a\'] = 1od[\'b\'] = 2od[\'c\'] = 3od[\'d\'] = 4   for key, value in od.items():    print(key, value)\', \"# A Python program to demonstrate working# of OrderedDict from collections import OrderedDict  od = OrderedDict()od[\'a\'] = 1od[\'b\'] = 2od[\'c\'] = 3od[\'d\'] = 4   print(\'Before Deleting\')for key, value in od.items():    print(key, value)     # deleting elementod.pop(\'a\') # Re-inserting the sameod[\'a\'] = 1 print(\'\\nAfter re-inserting\')for key, value in od.items():    print(key, value)\", \'# Python program to demonstrate# defaultdict        from collections import defaultdict        # Defining the dictd = defaultdict(int)    L = [1, 2, 3, 4, 2, 4, 1, 2]    # Iterate through the list# for keeping the countfor i in L:            # The default value is 0    # so there is no need to     # enter the key first    d[i] += 1        print(d)\', \'# Python program to demonstrate# defaultdict      from collections import defaultdict      # Defining a dictd = defaultdict(list)   for i in range(5):    d[i].append(i)       print(\"Dictionary with values as list:\")print(d)\', \"# Python program to demonstrate# ChainMap        from collections import ChainMap        d1 = {\'a\': 1, \'b\': 2}d2 = {\'c\': 3, \'d\': 4}d3 = {\'e\': 5, \'f\': 6} # Defining the chainmapc = ChainMap(d1, d2, d3)    print(c)\", \"# Python program to demonstrate# ChainMap        from collections import ChainMap        d1 = {\'a\': 1, \'b\': 2}d2 = {\'c\': 3, \'d\': 4}d3 = {\'e\': 5, \'f\': 6} # Defining the chainmapc = ChainMap(d1, d2, d3)    # Accessing Values using key nameprint(c[\'a\']) # Accessing values using values()# methodprint(c.values()) # Accessing keys using keys()# methodprint(c.keys())\", \'# Python code to demonstrate ChainMap and# new_child()   import collections   # initializing dictionariesdic1 = { \'a\' : 1, \'b\' : 2 }dic2 = { \'b\' : 3, \'c\' : 4 }dic3 = { \'f\' : 5 }   # initializing ChainMapchain = collections.ChainMap(dic1, dic2)   # printing chainMapprint (\"All the ChainMap contents are : \")print (chain)   # using new_child() to add new dictionarychain1 = chain.new_child(dic3)   # printing chainMapprint (\"Displaying new ChainMap : \")print (chain1)\', \'# Python code to demonstrate namedtuple()   from collections import namedtuple   # Declaring namedtuple()Student = namedtuple(\'Student\',[\'name\',\'age\',\'DOB\'])   # Adding valuesS = Student(\'Nandini\',\'19\',\'2541997\')   # Access using indexprint (\"The Student age using index is : \",end =\"\")print (S[1])   # Access using name print (\"The Student name using keyname is : \",end =\"\")print (S.name)\', \'# Python code to demonstrate namedtuple() and# _make(), _asdict()    from collections import namedtuple   # Declaring namedtuple()Student = namedtuple(\'Student\',[\'name\',\'age\',\'DOB\'])   # Adding valuesS = Student(\'Nandini\',\'19\',\'2541997\')   # initializing iterable li = [\'Manjeet\', \'19\', \'411997\' ]   # initializing dictdi = { \'name\' : \"Nikhil\", \'age\' : 19 , \'DOB\' : \'1391997\' }   # using _make() to return namedtuple()print (\"The namedtuple instance using iterable is  : \")print (Student._make(li))   # using _asdict() to return an OrderedDict()print (\"The OrderedDict instance using namedtuple is  : \")print (S._asdict())\', \"# Python code to demonstrate deque    from collections import deque   # Declaring dequequeue = deque([\'name\',\'age\',\'DOB\'])   print(queue)\", \'# Python code to demonstrate working of # append(), appendleft()    from collections import deque   # initializing dequede = deque([1,2,3])   # using append() to insert element at right end # inserts 4 at the end of dequede.append(4)   # printing modified dequeprint (\"The deque after appending at right is : \")print (de)   # using appendleft() to insert element at right end # inserts 6 at the beginning of dequede.appendleft(6)   # printing modified dequeprint (\"The deque after appending at left is : \")print (de)\', \'# Python code to demonstrate working of # pop(), and popleft() from collections import deque # initializing dequede = deque([6, 1, 2, 3, 4]) # using pop() to delete element from right end # deletes 4 from the right end of dequede.pop()   # printing modified dequeprint (\"The deque after deleting from right is : \")print (de)   # using popleft() to delete element from left end # deletes 6 from the left end of dequede.popleft()   # printing modified dequeprint (\"The deque after deleting from left is : \")print (de)\', \'# Python program to demonstrate# userdict       from collections import UserDict       # Creating a Dictionary where# deletion is not allowedclass MyDict(UserDict):           # Function to stop deletion    # from dictionary    def __del__(self):        raise RuntimeError(\"Deletion not allowed\")               # Function to stop pop from     # dictionary    def pop(self, s = None):        raise RuntimeError(\"Deletion not allowed\")               # Function to stop popitem     # from Dictionary    def popitem(self, s = None):        raise RuntimeError(\"Deletion not allowed\")       # Driver\'s coded = MyDict({\'a\':1,    \'b\': 2,    \'c\': 3})   d.pop(1)\', \'# Python program to demonstrate# userlist       from collections import UserList       # Creating a List where# deletion is not allowedclass MyList(UserList):           # Function to stop deletion    # from List    def remove(self, s = None):        raise RuntimeError(\"Deletion not allowed\")               # Function to stop pop from     # List    def pop(self, s = None):        raise RuntimeError(\"Deletion not allowed\")       # Driver\'s codeL = MyList([1, 2, 3, 4])   print(\"Original List\")   # Inserting to List\"L.append(5)print(\"After Insertion\")print(L)   # Deleting From ListL.remove()\', \'# Python program to demonstrate# userstring       from collections import UserString       # Creating a Mutable Stringclass Mystring(UserString):           # Function to append to    # string    def append(self, s):        self.data += s               # Function to remove from     # string    def remove(self, s):        self.data = self.data.replace(s, \"\")       # Driver\'s codes1 = Mystring(\"Geeks\")print(\"Original String:\", s1.data)   # Appending to strings1.append(\"s\")print(\"String After Appending:\", s1.data)   # Removing from strings1.remove(\"e\")print(\"String after Removing:\", s1.data)\']','[\'class collections.Counter([iterable-or-mapping])\', \"Counter({\'B\': 5, \'A\': 3, \'C\': 2})\nCounter({\'B\': 5, \'A\': 3, \'C\': 2})\nCounter({\'B\': 5, \'A\': 3, \'C\': 2})\", \'class collections.OrderDict()\', \'This is a Dict:\n\na 1\nb 2\nc 3\nd 4\n\nThis is an Ordered Dict:\n\na 1\nb 2\nc 3\nd 4\', \'Before Deleting\na 1\nb 2\nc 3\nd 4\n\nAfter re-inserting\nb 2\nc 3\nd 4\na 1\', \'class collections.defaultdict(default_factory)\', \"defaultdict(<class \'int\'>, {1: 2, 2: 3, 3: 1, 4: 2})\", \'class collections.ChainMap(dict1, dict2)\', \"ChainMap({\'a\': 1, \'b\': 2}, {\'c\': 3, \'d\': 4}, {\'e\': 5, \'f\': 6})\", \"All the ChainMap contents are : \nChainMap({\'a\': 1, \'b\': 2}, {\'b\': 3, \'c\': 4})\nDisplaying new ChainMap : \nChainMap({\'f\': 5}, {\'a\': 1, \'b\': 2}, {\'b\': 3, \'c\': 4})\", \'class collections.namedtuple(typename, field_names)\', \'The Student age using index is : 19\nThe Student name using keyname is : Nandini\', \"The namedtuple instance using iterable is  : \nStudent(name=\'Manjeet\', age=\'19\', DOB=\'411997\')\nThe OrderedDict instance using namedtuple is  : \nOrderedDict([(\'name\', \'Nandini\'), (\'age\', \'19\'), (\'DOB\', \'2541997\')])\", \'class collections.deque(list)\', \"deque([\'name\', \'age\', \'DOB\'])\", \'The deque after appending at right is : \ndeque([1, 2, 3, 4])\nThe deque after appending at left is : \ndeque([6, 1, 2, 3, 4])\', \'The deque after deleting from right is : \ndeque([6, 1, 2, 3])\nThe deque after deleting from left is : \ndeque([1, 2, 3])\', \'class collections.UserDict([initialdata])\', \'Traceback (most recent call last):\n  File \"/home/f8db849e4cf1e58177983b2b6023c1a3.py\", line 32, in <module>\n    d.pop(1) \n  File \"/home/f8db849e4cf1e58177983b2b6023c1a3.py\", line 20, in pop\n    raise RuntimeError(\"Deletion not allowed\") \nRuntimeError: Deletion not allowed\nException ignored in: <bound method MyDict.__del__ of {\'a\': 1, \'b\': 2, \'c\': 3}>\nTraceback (most recent call last):\n  File \"/home/f8db849e4cf1e58177983b2b6023c1a3.py\", line 15, in __del__\nRuntimeError: Deletion not allowed\', \'class collections.UserList([list])\', \'Original List\nAfter Insertion\n[1, 2, 3, 4, 5]\', \'Traceback (most recent call last):\n  File \"/home/c90487eefa7474c0566435269f50a52a.py\", line 33, in <module>\n    L.remove() \n  File \"/home/c90487eefa7474c0566435269f50a52a.py\", line 15, in remove\n    raise RuntimeError(\"Deletion not allowed\") \nRuntimeError: Deletion not allowed\', \'class collections.UserString(seq)\', \'Original String: Geeks\nString After Appending: Geekss\nString after Removing: Gkss\']','[]','[\'Counters|||OrderedDict|||DefaultDict|||ChainMap|||NamedTuple|||DeQue|||UserDict|||UserList|||UserString&&&With a sequence of items|||With a dictionary containing keys and counts|||With keyword arguments mapping string names to counts\']'),(78,'[\'Counters in Python | Set 1 (Initialization and Updation)\']','[\'What is Container?\']','[]','[]','[\'https://www.youtube.com/embed/3qdRTlWpdGo?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-collections-module/\', \'https://www.geeksforgeeks.org/python-collections-module/\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Initialization :The constructor of counter can be called in any one of the following ways :\', \'Example of each type of initialization :\', \'Output of all the three lines is same :\', \'Updation :We can also create an empty counter in the following manner :\', \'And can be updated via update() method .Syntax for the same :\']','[\'Counter is a container included in the collections module. Now you all must be wondering what is a container. Don’t worry first let’s discuss about the container.\', \'Containers are objects that hold objects. They provide a way to access the contained objects and iterate over them. Examples of built in containers are Tuple, list, and dictionary. Others are included in Collections module.\', \'A Counter is a subclass of dict. Therefore it is an unordered collection where elements and their respective count are stored as a dictionary. This is equivalent to a bag or multiset of other languages.\', \'This article is contributed by Mayank Rawat .If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\"# A Python program to show different ways to create# Counterfrom collections import Counter  # With sequence of items print(Counter([\'B\',\'B\',\'A\',\'B\',\'C\',\'A\',\'B\',\'B\',\'A\',\'C\']))  # with dictionaryprint(Counter({\'A\':3, \'B\':5, \'C\':2}))  # with keyword argumentsprint(Counter(A=3, B=5, C=2))\", \'# A Python program to demonstrate update()from collections import Countercoun = Counter()  coun.update([1, 2, 3, 1, 2, 1, 1, 2])print(coun)  coun.update([1, 2, 4])print(coun)\', \'# Python program to demonstrate that counts in # Counter can be 0 and negativefrom collections import Counter  c1 = Counter(A=4,  B=3, C=10)c2 = Counter(A=10, B=3, C=4)  c1.subtract(c2)print(c1)\', \"# An example program where different list items are# counted using counterfrom collections import Counter  # Create a listz = [\'blue\', \'red\', \'blue\', \'yellow\', \'blue\', \'red\']  # Count distinct elements and print Counter abojectprint(Counter(z))\"]','[\'class collections.Counter([iterable-or-mapping])\', \"Counter({\'B\': 5, \'A\': 3, \'C\': 2})\nCounter({\'B\': 5, \'A\': 3, \'C\': 2})\nCounter({\'B\': 5, \'A\': 3, \'C\': 2})\", \'coun = collections.Counter()\', \'coun.update(Data)\', \'Counter({1: 4, 2: 3, 3: 1})\nCounter({1: 5, 2: 4, 3: 1, 4: 1})\', \"Counter({\'c\': 6, \'B\': 0, \'A\': -6})\", \"Counter({\'blue\': 3, \'red\': 2, \'yellow\': 1})\"]','[]','[\"Data can be provided in any of the three ways as mentioned in initialization and the counter’s data will be increased not replaced.|||Counts can be zero and negative also.# Python program to demonstrate that counts in# Counter can be 0 and negativefrom collections import Counterc1 = Counter(A=4, B=3, C=10)c2 = Counter(A=10, B=3, C=4)c1.subtract(c2)print(c1)Output : Counter({\'c\': 6, \'B\': 0, \'A\': -6})|||We can use Counter to count distinct elements of a list or other collections.# An example program where different list items are# counted using counterfrom collections import Counter# Create a listz = [\'blue\', \'red\', \'blue\', \'yellow\', \'blue\', \'red\']# Count distinct elements and print Counter abojectprint(Counter(z))Output:Counter({\'blue\': 3, \'red\': 2, \'yellow\': 1})\n\"]'),(79,'[\'OrderedDict in Python\']','[\'Python\', \'Python\', \'Python\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-set-4-dictionary-keywords-python/\', \'http://www.write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Important Points:xa0\', \'Other Considerations:xa0xa0\']','[\'An OrderedDict is a dictionary subclass that remembers the order that keys were first inserted. The only difference between dict() and OrderedDict() is that:\', \'OrderedDict preserves the order in which the keys are inserted. A regular dict doesn’t track the insertion order and iterating it gives the values in an arbitrary order. By contrast, the order the items are inserted is remembered by OrderedDict.\', \'1. Key value Change: If the value of a certain key is changed, the position of the key remains unchanged in OrderedDict.\', \'2. Deletion and Re-Inserting: Deleting and re-inserting the same key will push it to the back as OrderedDict, however, maintains the order of insertion.\', \'This article is contributed by Sri Sanketh Uppalapati. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'# A Python program to demonstrate working of OrderedDictfrom collections import OrderedDict print(\"This is a Dict:\\n\")d = {}d[\'a\'] = 1d[\'b\'] = 2d[\'c\'] = 3d[\'d\'] = 4 for key, value in d.items():    print(key, value) print(\"\\nThis is an Ordered Dict:\\n\")od = OrderedDict()od[\'a\'] = 1od[\'b\'] = 2od[\'c\'] = 3od[\'d\'] = 4 for key, value in od.items():    print(key, value)\', \'# A Python program to demonstrate working of key# value change in OrderedDictfrom collections import OrderedDict print(\"Before:\\n\")od = OrderedDict()od[\'a\'] = 1od[\'b\'] = 2od[\'c\'] = 3od[\'d\'] = 4for key, value in od.items():    print(key, value) print(\"\\nAfter:\\n\")od[\'c\'] = 5for key, value in od.items():    print(key, value)\', \'# A Python program to demonstrate working of deletion# re-insertion in OrderedDictfrom collections import OrderedDict print(\"Before deleting:\\n\")od = OrderedDict()od[\'a\'] = 1od[\'b\'] = 2od[\'c\'] = 3od[\'d\'] = 4 for key, value in od.items():    print(key, value) print(\"\\nAfter deleting:\\n\")od.pop(\'c\')for key, value in od.items():    print(key, value) print(\"\\nAfter re-inserting:\\n\")od[\'c\'] = 3for key, value in od.items():    print(key, value)\']','[\'This is a Dict:\na 1\nc 3\nb 2\nd 4\n\nThis is an Ordered Dict:\na 1\nb 2\nc 3\nd 4\', \'Before:\n\na 1\nb 2\nc 3\nd 4\n\nAfter:\n\na 1\nb 2\nc 5\nd 4\', \'Before deleting:\n\na 1\nb 2\nc 3\nd 4\n\nAfter deleting:\n\na 1\nb 2\nd 4\n\nAfter re-inserting:\n\na 1\nb 2\nd 4\nc 3\']','[]','[\'Ordered dict in Python version 2.7 consumes more memory than normal dict. This is due to the underlying Doubly Linked List implementation for keeping the order. In Python 2.7 Ordered Dict is not dict subclass, it’s a specialized container from collections module.|||Starting from Python 3.7, insertion order of Python dictionaries is guaranteed.|||Ordered Dict can be used as a stack with the help of popitem function. Try implementing LRU cache with Ordered Dict.\']'),(80,'[\'Defaultdict in Python\']','[\'Python3\', \'DefaultDict\', \'Python3\', \'Inner Working of defaultdict\', \'Python3\', \'Python3\', \'Using List as default_factory\', \'Python3\', \'Using int as default_factory\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-dictionary/\', \'https://www.geeksforgeeks.org/python-dictionary/\', \'https://www.geeksforgeeks.org/python-dictionary/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax: defaultdict(default_factory)Parameters:xa0xa0\']','[\'Sometimes, when the KeyError is raised, it might become a problem. To overcome this Python introduces another dictionary like container known as Defaultdict which is present inside the collections module.Note: For more information, refer to Python Dictionary.xa0\', \'Defaultdict is a container like dictionaries present in the module collections. Defaultdict is a sub-class of the dictionary class that returns a dictionary-like object. The functionality of both dictionaries and defualtdict are almost same except for the fact that defualtdict never raises a KeyError. It provides a default value for the key that does not exists.\', \'Defaultdict adds one writable instance variable and one method in addition to the standard dictionary operations. The instance variable is the default_factory parameter and the method provided is __missing__.\', \'When the list class is passed as the default_factory argument, then a defaultdict is created with the values that are list.Example:\', \'When the int class is passed as the default_factory argument, then a defaultdict is created with default value as zero.Example:\']','[\'Dictionary in Python is an unordered collection of data values that are used to store data values like a map. Unlike other Data Types that hold only single value as an element, the Dictionary holds key-value pair. In Dictionary, the key must be unique and immutable. This means that a Python Tuple can be a key whereas a Python List can not. A Dictionary can be created by placing a sequence of elements within curly {} braces, separated by ‘comma’.xa0Example:\']','[\'# Python program to demonstrate# dictionary  Dict = {1: \'Geeks\', 2: \'For\', 3: \'Geeks\'}print(\"Dictionary:\")print(Dict)print(Dict[1]) # Uncommenting this print(Dict[4])# will raise a KeyError as the# 4 is not present in the dictionary\', \'# Python program to demonstrate# defaultdict  from collections import defaultdict  # Function to return a default# values for keys that is not# presentdef def_value():    return \"Not Present\"     # Defining the dictd = defaultdict(def_value)d[\"a\"] = 1d[\"b\"] = 2 print(d[\"a\"])print(d[\"b\"])print(d[\"c\"])\', \'# Python program to demonstrate# default_factory argument of# defaultdict  from collections import defaultdict      # Defining the dict and passing# lambda as default_factory argumentd = defaultdict(lambda: \"Not Present\")d[\"a\"] = 1d[\"b\"] = 2 print(d[\"a\"])print(d[\"b\"])print(d[\"c\"])\', \'# Python program to demonstrate# defaultdict  from collections import defaultdict      # Defining the dictd = defaultdict(lambda: \"Not Present\")d[\"a\"] = 1d[\"b\"] = 2 # Provides the default value# for the keyprint(d.__missing__(\'a\'))print(d.__missing__(\'d\'))\', \'# Python program to demonstrate# defaultdict  from collections import defaultdict  # Defining a dictd = defaultdict(list) for i in range(5):    d[i].append(i)     print(\"Dictionary with values as list:\")print(d)\', \'# Python program to demonstrate# defaultdict    from collections import defaultdict    # Defining the dictd = defaultdict(int)  L = [1, 2, 3, 4, 2, 4, 1, 2]  # Iterate through the list# for keeping the countfor i in L:          # The default value is 0    # so there is no need to    # enter the key first    d[i] += 1      print(d)\']','[\"Dictionary:\n{1: \'Geeks\', 2: \'For\', 3: \'Geeks\'}\nGeeks\", \'Traceback (most recent call last):\n  File \"/home/1ca83108cc81344dc7137900693ced08.py\", line 11, in \n    print(Dict[4])\nKeyError: 4\', \'1\n2\nNot Present\', \'1\n2\nNot Present\', \'Not Present\nNot Present\', \"Dictionary with values as list:\ndefaultdict(<class \'list\'>, {0: [0], 1: [1], 2: [2], 3: [3], 4: [4]})\", \"defaultdict(<class \'int\'>, {1: 2, 2: 3, 3: 1, 4: 2})\"]','[]','[\'default_factory: A function returning the default value for the dictionary defined. If this argument is absent then the dictionary raises a KeyError.&&&Default_factory: It is a function returning the default value for the dictionary defined. If this argument is absent then the dictionary raises a KeyError.Example:&&&__missing__(): This function is used to provide the default value for the dictionary. This function takes default_factory as an argument and if this argument is None, a KeyError is raised otherwise it provides a default value for the given key. This method is basically called by the __getitem__() method of the dict class when the requested key is not found. __getitem__() raises or return the value returned by the __missing__(). method.Example:\']'),(81,'[\'ChainMap in Python\']','[\'Access Operations\', \'Manipulating Operations\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-set-4-dictionary-keywords-python/\', \'https://www.geeksforgeeks.org/python-collections-module/\', \'https://auth.geeksforgeeks.org/profile.php?user=manjeet_04&list=practice\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Let’s see various Operations on ChainMap\']','[\'Python contains a container called “ChainMap” which encapsulates many dictionaries into one unit. ChainMap is member of module “collections“.\', \'Note : Notice the key named “b” exists in both dictionaries, but only first dictionary key is taken as key value of “b”. Ordering is done as the dictionaries are passed in function.\', \'This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\"# Python program to demonstrate  # ChainMap                from collections import ChainMap                d1 = {\'a\': 1, \'b\': 2} d2 = {\'c\': 3, \'d\': 4} d3 = {\'e\': 5, \'f\': 6}     # Defining the chainmap  c = ChainMap(d1, d2, d3)         print(c)\", \'# Please select Python 3 for running this code in IDE# Python code to demonstrate ChainMap and# keys(), values() and maps  # importing collections for ChainMap operationsimport collections  # initializing dictionariesdic1 = { \'a\' : 1, \'b\' : 2 }dic2 = { \'b\' : 3, \'c\' : 4 }  # initializing ChainMapchain = collections.ChainMap(dic1, dic2)  # printing chainMap using mapsprint (\"All the ChainMap contents are : \")print (chain.maps)  # printing keys using keys()print (\"All keys of ChainMap are : \")print (list(chain.keys()))  # printing keys using keys()print (\"All values of ChainMap are : \")print (list(chain.values()))\', \'# Please select Python 3 for running this code in IDE# Python code to demonstrate ChainMap and# reversed() and new_child()  # importing collections for ChainMap operationsimport collections  # initializing dictionariesdic1 = { \'a\' : 1, \'b\' : 2 }dic2 = { \'b\' : 3, \'c\' : 4 }dic3 = { \'f\' : 5 }  # initializing ChainMapchain = collections.ChainMap(dic1, dic2)  # printing chainMap using mapprint (\"All the ChainMap contents are : \")print (chain.maps)  # using new_child() to add new dictionarychain1 = chain.new_child(dic3)  # printing chainMap using mapprint (\"Displaying new ChainMap : \")print (chain1.maps)  # displaying value associated with b before reversingprint (\"Value associated with b before reversing is : \",end=\"\")print (chain1[\'b\'])  # reversing the ChainMapchain1.maps = reversed(chain1.maps)  # displaying value associated with b after reversingprint (\"Value associated with b after reversing is : \",end=\"\")print (chain1[\'b\'])\']','[\"ChainMap({\'a\': 1, \'b\': 2}, {\'c\': 3, \'d\': 4}, {\'e\': 5, \'f\': 6})\", \"All the ChainMap contents are : \n[{\'b\': 2, \'a\': 1}, {\'c\': 4, \'b\': 3}]\nAll keys of ChainMap are : \n[\'a\', \'c\', \'b\']\nAll values of ChainMap are : \n[1, 4, 2]\", \"All the ChainMap contents are : \n[{\'b\': 2, \'a\': 1}, {\'b\': 3, \'c\': 4}]\nDisplaying new ChainMap : \n[{\'f\': 5}, {\'b\': 2, \'a\': 1}, {\'b\': 3, \'c\': 4}]\nValue associated with b before reversing is : 2\nValue associated with b after reversing is : 3\"]','[]','[\'keys() :- This function is used to display all the keys of all the dictionaries in ChainMap.|||values() :- This function is used to display values of all the dictionaries in ChainMap.|||maps() :- This function is used to display keys with corresponding values of all the dictionaries in ChainMap.&&&new_child() :- This function adds a new dictionary in the beginning of the ChainMap.|||reversed() :- This function reverses the relative ordering of dictionaries in the ChainMap.\']'),(82,'[\'Namedtuple in Python\']','[\'Python3\', \'Let’s see various Operations on namedtuple()xa0\', \'Access Operations\', \'Python3\', \'Conversion Operations\', \'Python3\', \'Additional Operationxa0\', \'Python\']','[]','[]','[\'https://www.youtube.com/embed/SLs2VCzmA9c?feature=oembed\']','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-set-4-dictionary-keywords-python/\', \'https://www.geeksforgeeks.org/python-collections-module/\', \'https://www.geeksforgeeks.org/ordereddict-in-python/\', \'https://auth.geeksforgeeks.org/profile.php?user=manjeet_04&list=practice\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'Python supports a type of container like dictionaries called “namedtuple()” present in the module, “collections“. Like dictionaries, they contain keys that are hashed to a particular value. But on contrary, it supports both access from key-value and iteration, the functionality that dictionaries lack.\', \'This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[]','[\'# Python code to demonstrate namedtuple() from collections import namedtuple # Declaring namedtuple()Student = namedtuple(\'Student\', [\'name\', \'age\', \'DOB\']) # Adding valuesS = Student(\'Nandini\', \'19\', \'2541997\') # Access using indexprint(\"The Student age using index is : \", end=\"\")print(S[1]) # Access using nameprint(\"The Student name using keyname is : \", end=\"\")print(S.name)\', \'# Python code to demonstrate namedtuple() and# Access by name, index and getattr() # importing \"collections\" for namedtuple()import collections # Declaring namedtuple()Student = collections.namedtuple(\'Student\', [\'name\', \'age\', \'DOB\']) # Adding valuesS = Student(\'Nandini\', \'19\', \'2541997\') # Access using indexprint(\"The Student age using index is : \", end=\"\")print(S[1]) # Access using nameprint(\"The Student name using keyname is : \", end=\"\")print(S.name) # Access using getattr()print(\"The Student DOB using getattr() is : \", end=\"\")print(getattr(S, \'DOB\'))\', \'# Python code to demonstrate namedtuple() and# _make(), _asdict() and \"**\" operator # importing \"collections\" for namedtuple()import collections # Declaring namedtuple()Student = collections.namedtuple(\'Student\',                                 [\'name\', \'age\', \'DOB\']) # Adding valuesS = Student(\'Nandini\', \'19\', \'2541997\') # initializing iterableli = [\'Manjeet\', \'19\', \'411997\'] # initializing dictdi = {\'name\': \"Nikhil\", \'age\': 19, \'DOB\': \'1391997\'} # using _make() to return namedtuple()print(\"The namedtuple instance using iterable is  : \")print(Student._make(li)) # using _asdict() to return an OrderedDict()print(\"The OrderedDict instance using namedtuple is  : \")print(S._asdict()) # using ** operator to return namedtuple from dictionaryprint(\"The namedtuple instance from dict is  : \")print(Student(**di))\', \'# Python code to demonstrate namedtuple() and# _fields and _replace() # importing \"collections\" for namedtuple()import collections # Declaring namedtuple()Student = collections.namedtuple(\'Student\', [\'name\', \'age\', \'DOB\']) # Adding valuesS = Student(\'Nandini\', \'19\', \'2541997\') # using _fields to display all the keynames of namedtuple()print(\"All the fields of students are : \")print(S._fields) # ._replace returns a new namedtuple, it does not modify the originalprint(\"returns a new namedtuple : \")print(S._replace(name=\'Manjeet\'))# original namedtupleprint(S)\']','[\'The Student age using index is : 19\nThe Student name using keyname is : Nandini\', \'The Student age using index is : 19\nThe Student name using keyname is : Nandini\nThe Student DOB using getattr() is : 2541997\', \"The namedtuple instance using iterable is  : \nStudent(name=\'Manjeet\', age=\'19\', DOB=\'411997\')\nThe OrderedDict instance using namedtuple is  : \nOrderedDict([(\'name\', \'Nandini\'), (\'age\', \'19\'), (\'DOB\', \'2541997\')])\nThe namedtuple instance from dict is  : \nStudent(name=\'Nikhil\', age=19, DOB=\'1391997\')\", \"All the fields of students are : \n(\'name\', \'age\', \'DOB\')\nThe modified namedtuple is : \nStudent(name=\'Manjeet\', age=\'19\', DOB=\'2541997\')\"]','[]','[\'Access by index: The attribute values of namedtuple() are ordered and can be accessed using the index number unlike dictionaries which are not accessible by index.|||Access by keyname: Access by keyname is also allowed as in dictionaries.|||using getattr(): This is yet another way to access the value by giving namedtuple and key value as its argument.&&&_make() :- This function is used to return a namedtuple() from the iterable passed as argument.|||_asdict() :- This function returns the OrderedDict() as constructed from the mapped values of namedtuple().|||using “**” (double star) operator :- This function is used to convert a dictionary into the namedtuple().&&&_fields: This function is used to return all the keynames of the namespace declared.|||_replace(): _replace() is like str.replace() but targets named fields( does not modify the original values)\']'),(83,'[\'Deque in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[]','[\'https://www.youtube.com/embed/P6nskYVnQOE?feature=oembed\']','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-set-3-strings-lists-tuples-iterations/\', \'https://auth.geeksforgeeks.org/profile.php?user=manjeet_04&list=practice\', \'http://www.write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Let’s see various Operations on deque :xa0\']','[\'Deque (Doubly Ended Queue) in Python is implemented using the module “collections“. Deque is preferred over a list in the cases where we need quicker append and pop operations from both the ends of the container, as deque provides an O(1) time complexity for append and pop operations as compared to list which provides O(n) time complexity.\']','[\'This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\"# Python code to demonstrate deque        from collections import deque     # Declaring dequequeue = deque([\'name\',\'age\',\'DOB\'])      print(queue)\", \'# Python code to demonstrate working of# append(), appendleft(), pop(), and popleft() # importing \"collections\" for deque operationsimport collections # initializing dequede = collections.deque([1,2,3]) # using append() to insert element at right end# inserts 4 at the end of dequede.append(4) # printing modified dequeprint (\"The deque after appending at right is : \")print (de) # using appendleft() to insert element at left end# inserts 6 at the beginning of dequede.appendleft(6) # printing modified dequeprint (\"The deque after appending at left is : \")print (de) # using pop() to delete element from right end# deletes 4 from the right end of dequede.pop() # printing modified dequeprint (\"The deque after deleting from right is : \")print (de) # using popleft() to delete element from left end# deletes 6 from the left end of dequede.popleft() # printing modified dequeprint (\"The deque after deleting from left is : \")print (de)\', \'# Python code to demonstrate working of# insert(), index(), remove(), count() # importing \"collections\" for deque operationsimport collections # initializing dequede = collections.deque([1, 2, 3, 3, 4, 2, 4]) # using index() to print the first occurrence of 4print (\"The number 4 first occurs at a position : \")print (de.index(4,2,5)) # using insert() to insert the value 3 at 5th positionde.insert(4,3) # printing modified dequeprint (\"The deque after inserting 3 at 5th position is : \")print (de) # using count() to count the occurrences of 3print (\"The count of 3 in deque is : \")print (de.count(3)) # using remove() to remove the first occurrence of 3de.remove(3) # printing modified dequeprint (\"The deque after deleting first occurrence of 3 is : \")print (de)\', \'# Python code to demonstrate working of# extend(), extendleft(), rotate(), reverse() # importing \"collections\" for deque operationsimport collections # initializing dequede = collections.deque([1, 2, 3,]) # using extend() to add numbers to right end# adds 4,5,6 to right endde.extend([4,5,6]) # printing modified dequeprint (\"The deque after extending deque at end is : \")print (de) # using extendleft() to add numbers to left end# adds 7,8,9 to right endde.extendleft([7,8,9]) # printing modified dequeprint (\"The deque after extending deque at beginning is : \")print (de) # using rotate() to rotate the deque# rotates by 3 to leftde.rotate(-3) # printing modified dequeprint (\"The deque after rotating deque is : \")print (de) # using reverse() to reverse the dequede.reverse() # printing modified dequeprint (\"The deque after reversing deque is : \")print (de)\']','[\"deque([\'name\', \'age\', \'DOB\'])\", \'The deque after appending at right is : \ndeque([1, 2, 3, 4])\nThe deque after appending at left is : \ndeque([6, 1, 2, 3, 4])\nThe deque after deleting from right is : \ndeque([6, 1, 2, 3])\nThe deque after deleting from left is : \ndeque([1, 2, 3])\', \'The number 4 first occurs at a position : \n4\nThe deque after inserting 3 at 5th position is : \ndeque([1, 2, 3, 3, 3, 4, 2, 4])\nThe count of 3 in deque is : \n3\nThe deque after deleting first occurrence of 3 is : \ndeque([1, 2, 3, 3, 4, 2, 4])\', \'The deque after extending deque at end is : \ndeque([1, 2, 3, 4, 5, 6])\nThe deque after extending deque at beginning is : \ndeque([9, 8, 7, 1, 2, 3, 4, 5, 6])\nThe deque after rotating deque is : \ndeque([1, 2, 3, 4, 5, 6, 9, 8, 7])\nThe deque after reversing deque is : \ndeque([7, 8, 9, 6, 5, 4, 3, 2, 1])\']','[]','[\'append():- This function is used to insert the value in its argument to the right end of the deque.|||appendleft():- This function is used to insert the value in its argument to the left end of the deque.|||pop():- This function is used to delete an argument from the right end of the deque.|||popleft():- This function is used to delete an argument from the left end of the deque.&&&index(ele, beg, end):- This function returns the first index of the value mentioned in arguments, starting searching from beg till end index.|||insert(i, a) :- This function inserts the value mentioned in arguments(a) at index(i) specified in arguments.|||remove():- This function removes the first occurrence of value mentioned in arguments.|||count():- This function counts the number of occurrences of value mentioned in arguments.&&&extend(iterable):- This function is used to add multiple values at the right end of the deque. The argument passed is iterable.|||extendleft(iterable):- This function is used to add multiple values at the left end of the deque. The argument passed is iterable. Order is reversed as a result of left appends.|||reverse():- This function is used to reverse the order of deque elements.|||rotate():- This function rotates the deque by the number specified in arguments. If the number specified is negative, rotation occurs to the left. Else rotation is to right.\']'),(84,'[\'Heap queue (or heapq) in Python\']','[]','[]','[]','[\'https://www.youtube.com/embed/nXp7lg2SVQo?feature=oembed\']','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/applications-of-heap-data-structure/\', \'https://auth.geeksforgeeks.org/profile.php?user=manjeet_04&list=practice\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Let’s see various Operations on heap :\']','[\'Heap data structure is mainly used to represent a priority queue. In Python, it is available using “heapq” module. The property of this data structure in Python is that each time the smallest of heap element is popped(min heap). Whenever elements are pushed or popped, heap structure in maintained. The heap[0] element also returns the smallest element each time.\', \'This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'# Python code to demonstrate working of # heapify(), heappush() and heappop()  # importing \"heapq\" to implement heap queueimport heapq  # initializing listli = [5, 7, 9, 1, 3]  # using heapify to convert list into heapheapq.heapify(li)  # printing created heapprint (\"The created heap is : \",end=\"\")print (list(li))  # using heappush() to push elements into heap# pushes 4heapq.heappush(li,4)  # printing modified heapprint (\"The modified heap after push is : \",end=\"\")print (list(li))  # using heappop() to pop smallest elementprint (\"The popped and smallest element is : \",end=\"\")print (heapq.heappop(li))\', \'# Python code to demonstrate working of # heappushpop() and heapreplce()  # importing \"heapq\" to implement heap queueimport heapq  # initializing list 1li1 = [5, 7, 9, 4, 3]  # initializing list 2li2 = [5, 7, 9, 4, 3]  # using heapify() to convert list into heapheapq.heapify(li1)heapq.heapify(li2)  # using heappushpop() to push and pop items simultaneously# pops 2print (\"The popped item using heappushpop() is : \",end=\"\")print (heapq.heappushpop(li1, 2))  # using heapreplace() to push and pop items simultaneously# pops 3print (\"The popped item using heapreplace() is : \",end=\"\")print (heapq.heapreplace(li2, 2))\', \'# Python code to demonstrate working of # nlargest() and nsmallest()  # importing \"heapq\" to implement heap queueimport heapq  # initializing list li1 = [6, 7, 9, 4, 3, 5, 8, 10, 1]  # using heapify() to convert list into heapheapq.heapify(li1)  # using nlargest to print 3 largest numbers# prints 10, 9 and 8print(\"The 3 largest numbers in list are : \",end=\"\")print(heapq.nlargest(3, li1))  # using nsmallest to print 3 smallest numbers# prints 1, 3 and 4print(\"The 3 smallest numbers in list are : \",end=\"\")print(heapq.nsmallest(3, li1))\']','[\'The created heap is : [1, 3, 9, 7, 5]\nThe modified heap after push is : [1, 3, 4, 7, 5, 9]\nThe popped and smallest element is : 1\', \'The popped item using heappushpop() is : 2\nThe popped item using heapreplace() is : 3\', \'The 3 largest numbers in list are : [10, 9, 8]\nThe 3 smallest numbers in list are : [1, 3, 4]\']','[]','[\'heapify(iterable) :- This function is used to convert the iterable into a heap data structure. i.e. in heap order.|||heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.|||heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.&&&heappushpop(heap, ele) :- This function combines the functioning of both push and pop operations in one statement, increasing efficiency. Heap order is maintained after this operation.|||heapreplace(heap, ele) :- This function also inserts and pops element in one statement, but it is different from above function. In this, element is first popped, then the element is pushed.i.e, the value larger than the pushed value can be returned. heapreplace() returns the smallest value originally in heap regardless of the pushed element as opposed to heappushpop().&&&nlargest(k, iterable, key = fun) :- This function is used to return the k largest elements from the iterable specified and satisfying the key if mentioned.|||nsmallest(k, iterable, key = fun) :- This function is used to return the k smallest elements from the iterable specified and satisfying the key if mentioned.\']'),(85,'[\'Collections.UserDict in Python\']','[\'Collections.UserDict\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-dictionary/\', \'https://www.geeksforgeeks.org/python-dictionary/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python Dictionary\', \'Example 1:\', \'Example 2: Let’s create a class inheriting from UserDict to implement a customized dictionary.\']','[\'An unordered collection of data values that are used to store data values like a map is known as Dictionary in Python. Unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.\']','[\'Python supports a dictionary like a container called UserDict present in the collections module. This class acts as a wrapper class around the dictionary objects. This class is useful when one wants to create a dictionary of their own with some modified functionality or with some new functionality. It can be considered as a way of adding new behaviors to the dictionary. This class takes a dictionary instance as an argument and simulates a dictionary that is kept in a regular dictionary. The dictionary is accessible by the data attribute of this class.\']','[\"# Python program to demonstrate# userdict  from collections import UserDict  d = {\'a\':1,    \'b\': 2,    \'c\': 3} # Creating an UserDictuserD = UserDict(d)print(userD.data)  # Creating an empty UserDictuserD = UserDict()print(userD.data)\", \'# Python program to demonstrate# userdict   from collections import UserDict   # Creating a Dictionary where# deletion is not allowedclass MyDict(UserDict):         # Function to stop deletion    # from dictionary    def __del__(self):        raise RuntimeError(\"Deletion not allowed\")             # Function to stop pop from    # dictionary    def pop(self, s = None):        raise RuntimeError(\"Deletion not allowed\")             # Function to stop popitem    # from Dictionary    def popitem(self, s = None):        raise RuntimeError(\"Deletion not allowed\")     # Driver\'s coded = MyDict({\'a\':1,    \'b\': 2,    \'c\': 3}) print(\"Original Dictionary\")print(d) d.pop(1)\']','[\'collections.UserDict([initialdata])\', \"{\'a\': 1, \'b\': 2, \'c\': 3}\n{}\", \"Original Dictionary\n{\'a\': 1, \'c\': 3, \'b\': 2}\", \'Traceback (most recent call last):\n  File \"/home/3ce2f334f5d25a3e24d10d567c705ce6.py\", line 35, in \n    d.pop(1)\n  File \"/home/3ce2f334f5d25a3e24d10d567c705ce6.py\", line 20, in pop\n    raise RuntimeError(\"Deletion not allowed\")\nRuntimeError: Deletion not allowed\nException ignored in: \nTraceback (most recent call last):\n  File \"/home/3ce2f334f5d25a3e24d10d567c705ce6.py\", line 15, in __del__\nRuntimeError: Deletion not allowed\']','[]','[]'),(86,'[\'Collections.UserList in Python\']','[\'Collections.UserList\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-list/\', \'https://www.geeksforgeeks.org/python-list/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1:xa0\', \'Example 2:xa0\']','[\'Python Lists are array-like data structure but unlike it can be homogeneous. A single list may contain DataTypes like Integers, Strings, as well as Objects. List in Python are ordered and have a definite count. The elements in a list are indexed according to a definite sequence and the indexing of a list is done with 0 being the first index.xa0Note: For more information, refer to Python Listxa0\']','[\'Python supports a List like a container called UserList present in the collections module. This class acts as a wrapper class around the List objects. This class is useful when one wants to create a list of their own with some modified functionality or with some new functionality. It can be considered as a way of adding new behaviors for the list. This class takes a list instance as an argument and simulates a list that is kept in a regular list. The list is accessible by the data attribute of the this class.Syntax:xa0\']','[\'# Python program to demonstrate# userlist  from collections import UserList  L = [1, 2, 3, 4] # Creating a userlistuserL = UserList(L)print(userL.data)  # Creating empty userlistuserL = UserList()print(userL.data)\', \'# Python program to demonstrate# userlist   from collections import UserList   # Creating a List where# deletion is not allowedclass MyList(UserList):         # Function to stop deletion    # from List    def remove(self, s = None):        raise RuntimeError(\"Deletion not allowed\")             # Function to stop pop from    # List    def pop(self, s = None):        raise RuntimeError(\"Deletion not allowed\")     # Driver\'s codeL = MyList([1, 2, 3, 4]) print(\"Original List\") # Inserting to List\"L.append(5)print(\"After Insertion\")print(L) # Deleting From ListL.remove()\']','[\'collections.UserList([list])\', \'[1, 2, 3, 4]\n[]\', \'Original List\nAfter Insertion\n[1, 2, 3, 4, 5]\', \'Traceback (most recent call last):\n  File \"/home/9399c9e865a7493dce58e88571472d23.py\", line 33, in \n    L.remove()\n  File \"/home/9399c9e865a7493dce58e88571472d23.py\", line 15, in remove\n    raise RuntimeError(\"Deletion not allowed\")\nRuntimeError: Deletion not allowed\']','[]','[]'),(87,'[\'Collections.UserString in Python\']','[\'Python3\', \'Collections.UserString\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'http://geeksforgeeks.org/python-strings/\', \'http://geeksforgeeks.org/python-strings/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python Stringxa0\', \'Example 1:\', \'Example 2:\']','[\'Strings are the arrays of bytes representing Unicode characters. However, Python does not support the character data type. A character is a string of length one.xa0Example:\']','[\'Python supports a String like a container called UserString present in the collections module. This class acts as a wrapper class around the string objects. This class is useful when one wants to create a string of their own with some modified functionality or with some new functionality. It can be considered as a way of adding new behaviors for the string. This class takes any argument that can be converted to string and simulates a string whose content is kept in a regular string. The string is accessible by the data attribute of this class.Syntax:xa0\']','[\'# Python program to demonstrate# string # Creating a String # with single QuotesString1 = \'Welcome to the Geeks World\'print(\"String with the use of Single Quotes: \")print(String1)   # Creating a String# with double QuotesString1 = \"I\'m a Geek\"print(\"\\nString with the use of Double Quotes: \")print(String1)\', \'# Python program to demonstrate# userstring  from collections import UserString  d = 12344 # Creating an UserDictuserS = UserString(d)print(userS.data)  # Creating an empty UserDictuserS = UserString(\"\")print(userS.data)\', \'# Python program to demonstrate# userstring   from collections import UserString   # Creating a Mutable Stringclass Mystring(UserString):         # Function to append to    # string    def append(self, s):        self.data += s             # Function to remove from    # string    def remove(self, s):        self.data = self.data.replace(s, \"\")     # Driver\'s codes1 = Mystring(\"Geeks\")print(\"Original String:\", s1.data) # Appending to strings1.append(\"s\")print(\"String After Appending:\", s1.data) # Removing from strings1.remove(\"e\")print(\"String after Removing:\", s1.data)\']','[\"String with the use of Single Quotes: \nWelcome to the Geeks World\n\nString with the use of Double Quotes: \nI\'m a Geek\", \'collections.UserString(seq)\', \'12344\', \'Original String: Geeks\nString After Appending: Geekss\nString after Removing: Gkss\']','[]','[]'),(88,'[\'OS Module in Python with Examples\']','[\'Handling the Current Working Directory\', \'Python3\', \'Python3\', \'Creating a Directory\', \'Python3\', \'PYTHON\', \'Listing out Files and Directories with Python\', \'Python3\', \'Deleting Directory or Files using Python\', \'Python3\', \'Python3\', \'Commonly Used Functions\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python\', \'Python3\', \'Python3\', \'Python3\']','[\'Using os.mkdir()\', \'Using os.makedirs()\', \'Using os.remove()\', \'Using os.rmdir()\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191125183910/python-os.remove-input.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191125184203/python-os.remove-output.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191125192432/python-os.rmdir-input.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191125192658/python-os.rmdir-output.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/get-directory-of-current-python-script/\', \'https://www.geeksforgeeks.org/python-os-getcwd-method/\', \'https://www.geeksforgeeks.org/change-current-working-directory-with-python/\', \'https://www.geeksforgeeks.org/python-os-chdir-method/\', \'https://www.geeksforgeeks.org/python-os-listdir-method/\', \'http://www.write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Changing the Current working directory\', \'Note: The current working directory is the folder in which the Python script is operating.xa0\', \'There are different methods available in the OS module for creating a directory. These are –\', \'OS module proves different methods for removing directories and files in Python. These are –xa0\', \'Example: Suppose the file contained in the folder are:xa0\', \'Example: Suppose the directories arexa0\', \'Note: Output for popen() will not be shown, there would be direct changes into the file.xa0\', \'Note: The same error may not be thrown, due to the non-existent file or permission privilege.xa0\']','[\'The OS module in Python provides functions for interacting with the operating system. OS comes under Python’s standard utility modules. This module provides a portable way of using operating system-dependent functionality. The *os* and *os.path* modules include many functions to interact with the file system.xa0\', \'To change the current working directory(CWD) os.chdir() method is used. This method changes the CWD to a specified path. It only takes a single argument as a new directory path.xa0\', \'os.mkdir() method in Python is used to create a directory named path with the specified numeric mode. This method raises FileExistsError if the directory to be created already exists.xa0\', \'os.makedirs() method in Python is used to create a directory recursively. That means while making leaf directory if any intermediate-level directory is missing, os.makedirs() method will create them all.xa0\', \'os.listdir() method in Python is used to get the list of all files and directories in the specified directory. If we don’t specify any directory, then the list of files and directories in the current working directory will be returned.xa0\', \'os.remove() method in Python is used to remove or delete a file path. This method can not remove or delete a directory. If the specified path is a directory then OSError will be raised by the method.xa0\', \'os.rmdir() method in Python is used to remove or delete an empty directory. OSError will be raised if the specified path is not an empty directory.xa0\', \'1. os.name: This function gives the name of the operating system dependent module imported. The following names have currently been registered: ‘posix’, ‘nt’, ‘os2’, ‘ce’, ‘java’ and ‘riscos’.\', \'Note: It may give different output on different interpreters, such as ‘posix’ when you run the code here.xa0\', \'2. os.error: All functions in this module raise OSError in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system. os.error is an alias for built-in OSError exception.xa0\', \'xa03. os.popen(): This method opens a pipe to or from command. The return value can be read or written depending on whether the mode is ‘r’ or ‘w’.xa0Syntax:xa0\', \'Parameters mode & bufsize are not necessary parameters, if not provided, default ‘r’ is taken for mode.xa0\', \'4. os.close(): Close file descriptor fd. A file opened using open(), can be closed by close()only. But file opened through os.popen(), can be closed with close() or os.close(). If we try closing a file opened with open(), using os.close(), Python would throw TypeError.xa0\', \'5. os.rename(): A file old.txt can be renamed to new.txt, using the function os.rename(). The name of the file changes only if, the file exists and the user has sufficient privilege permission to change the file.\', \'Understanding the Output: A file name “GFG.txt” exists, thus when os.rename() is used the first time, the file gets renamed. Upon calling the function os.rename() second time, file “New.txt” exists and not “GFG.txt”xa0thus Python throws FileNotFoundError.xa0xa0\', \'6. os.remove(): Using the Os module we can remove a file in our system using the remove() method. To remove a file we need to pass the name of the file as a parameter.xa0\', \'The OS module provides us a layer of abstraction between us and the operating system. When we are working with os module always specify the absolute path depending upon the operating system the code can run on any os but we need to change the path exactly. If you try to remove a file that does not exist you will get FileNotFoudError.xa0\', \'7. os.path.exists(): This method will check whether a file exists or not by passing the name of the file as a parameter. OS module has a sub-module named PATH by using which we can perform many more functions.xa0\', \'As in the above code, the file does not exist it will give output False. If the file exists it will give us output True.xa0\', \'8. os.path.getsize(): In this method, python will give us the size of the file in bytes. To use this method we need to pass the name of the file as a parameter.\']','[\'Consider Current Working Directory(CWD) as a folder, where the Python is operating. Whenever the files are called only by their name, Python assumes that it starts in the CWD which means that name-only reference will be successful only if the file is in the Python’s CWD.Note: The folder where the Python script is running is known as the Current Directory. This is not the path where the Python script is located.Getting the Current working directoryTo get the location of the current working directory os.getcwd() is used.xa0\', \'This article is contributed by Piyush Doorwar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\'# Python program to explain os.getcwd() method         # importing os moduleimport os     # Get the current working# directory (CWD)cwd = os.getcwd()     # Print the current working# directory (CWD)print(\"Current working directory:\", cwd)\', \'# Python program to change the# current working directory      import os   # Function to Get the current # working directorydef current_path():    print(\"Current working directory before\")    print(os.getcwd())    print()      # Driver\'s code# Printing CWD beforecurrent_path()   # Changing the CWDos.chdir(\'../\')   # Printing CWD aftercurrent_path()\', \'# Python program to explain os.mkdir() method # importing os moduleimport os # Directorydirectory = \"GeeksforGeeks\" # Parent Directory pathparent_dir = \"D:/Pycharm projects/\" # Pathpath = os.path.join(parent_dir, directory) # Create the directory# \'GeeksForGeeks\' in# \'/home / User / Documents\'os.mkdir(path)print(\"Directory \'% s\' created\" % directory) # Directorydirectory = \"Geeks\" # Parent Directory pathparent_dir = \"D:/Pycharm projects\" # modemode = 0o666 # Pathpath = os.path.join(parent_dir, directory) # Create the directory# \'GeeksForGeeks\' in# \'/home / User / Documents\'# with mode 0o666os.mkdir(path, mode)print(\"Directory \'% s\' created\" % directory)\', \'# Python program to explain os.makedirs() method     # importing os moduleimport os     # Leaf directorydirectory = \"Nikhil\"     # Parent Directoriesparent_dir = \"D:/Pycharm projects/GeeksForGeeks/Authors\"     # Pathpath = os.path.join(parent_dir, directory)     # Create the directory# \'Nikhil\'os.makedirs(path)print(\"Directory \'% s\' created\" % directory)     # Directory \'GeeksForGeeks\' and \'Authors\' will# be created too# if it does not exists               # Leaf directorydirectory = \"c\"     # Parent Directoriesparent_dir = \"D:/Pycharm projects/GeeksforGeeks/a/b\"     # modemode = 0o666     path = os.path.join(parent_dir, directory)     # Create the directory \'c\'     os.makedirs(path, mode)print(\"Directory \'% s\' created\" % directory)          # \'GeeksForGeeks\', \'a\', and \'b\'# will also be created if# it does not exists     # If any of the intermediate level# directory is missing# os.makedirs() method will# create them     # os.makedirs() method can be# used to create a directory tree\', \'# Python program to explain os.listdir() method     # importing os moduleimport os # Get the list of all files and directories# in the root directorypath = \"/\"dir_list = os.listdir(path) print(\"Files and directories in \'\", path, \"\' :\") # print the listprint(dir_list)\', \'# Python program to explain os.remove() method     # importing os moduleimport os     # File namefile = \'file1.txt\'     # File locationlocation = \"D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/\"     # Pathpath = os.path.join(location, file)     # Remove the file# \'file.txt\'os.remove(path)e)\', \'# Python program to explain os.rmdir() method     # importing os moduleimport os     # Directory namedirectory = \"Geeks\"     # Parent Directoryparent = \"D:/Pycharm projects/\"     # Pathpath = os.path.join(parent, directory)     # Remove the Directory# \"Geeks\"os.rmdir(path)\', \'import os print(os.name)\', \"import os  try:    # If the file does not exist,    # then it would throw an IOError    filename = \'GFG.txt\'    f = open(filename, \'rU\')    text = f.read()    f.close() # Control jumps directly to here if# any of the above lines throws IOError.   except IOError:     # print(os.error) will <class \'OSError\'>    print(\'Problem reading: \' + filename)     # In any case, the code then continues with# the line after the try/except\", \'import osfd = \"GFG.txt\" # popen() is similar to open()file = open(fd, \'w\')file.write(\"Hello\")file.close()file = open(fd, \'r\')text = file.read()print(text) # popen() provides a pipe/gateway and accesses the file directlyfile = os.popen(fd, \'w\')file.write(\"Hello\")# File not closed, shown in next function.\', \'import os  fd = \"GFG.txt\"file = open(fd, \'r\')text = file.read()print(text)os.close(file)\', \'import os  fd = \"GFG.txt\"os.rename(fd,\'New.txt\')os.rename(fd,\'New.txt\')\', \'import os #importing os module. os.remove(\"file_name.txt\") #removing the file.\', \'import os#importing os module result = os.path.exists(\"file_name\") #giving the name of the file as a parameter. print(result)\', \'import os #importing os module size = os.path.getsize(\"filename\") print(\"Size of the file is\", size,\" bytes.\")\']','[\'Current working directory: /home/nikhil/Desktop/gfg\', \'Current working directory before\nC:\\Users\\Nikhil Aggarwal\\Desktop\\gfg\n\nCurrent working directory after\nC:\\Users\\Nikhil Aggarwal\\Desktop\', \"Directory \'GeeksforGeeks\' created\nDirectory \'Geeks\' created\", \"Directory \'Nikhil\' created\nDirectory \'c\' created\", \"Files and directories in \' / \' :\n[\'sys\', \'run\', \'tmp\', \'boot\', \'mnt\', \'dev\', \'proc\', \'var\', \'bin\', \'lib64\', \'usr\', \n\'lib\', \'srv\', \'home\', \'etc\', \'opt\', \'sbin\', \'media\']\", \'posix\', \'Problem reading: GFG.txt\', \'os.popen(command[, mode[, bufsize]])\', \'Hello\', \'Traceback (most recent call last):\n  File \"C:\\Users\\GFG\\Desktop\\GeeksForGeeksOSFile.py\", line 6, in \n    os.close(file)\nTypeError: an integer is required (got type _io.TextIOWrapper)\', \'Traceback (most recent call last):\n  File \"C:\\Users\\GFG\\Desktop\\ModuleOS\\GeeksForGeeksOSFile.py\", line 3, in \n    os.rename(fd,\'New.txt\')\nFileNotFoundError: [WinError 2] The system cannot find the\nfile specified: \'GFG.txt\' -> \'New.txt\'\', \'False\', \'Size of the file is 192 bytes.\']','[]','[\'os.mkdir()|||os.makedirs()&&&Using os.remove()|||Using os.rmdir()\']'),(89,'[\'Functional Programming in Python\']','[\'Concepts of Functional Programming\', \'Functional Programming in Python\', \'Difference between Functional Programming and Object Oriented Programming\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/recursion/\', \'https://www.geeksforgeeks.org/first-class-functions-python/\', \'http://geeksforgeeks.org/python-map-function/\', \'https://www.geeksforgeeks.org/filter-in-python/\', \'https://www.geeksforgeeks.org/python-lambda-anonymous-functions-filter-map-reduce/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Any Functional programming language is expected to follow these concepts.\', \'As Discussed above, pure functions have two properties.\', \'Note: For more information, refer Recursion\', \'Properties of first class functions:\', \'Note: For more information, refer to First Class functions in Python.\', \'Built-in Higher-order functions\', \'Syntax: map(fun, iter)\', \'Return Type: Returns an iterator of map class.\', \'Note: For more information, refer to Python map() function\', \'Syntax: filter(function, sequence)\', \'Return Type: returns an iterator that is already filtered.\', \'Note: For more information, refer to filter() in Python\', \'Note: For more information, refer to Python lambda.\']','[\'Python too supports Functional Programming paradigms without the support of any special features or libraries.\', \'Example: Let’s consider a program that will find the sum of all the elements of a list without using any for loop.\', \'First-class objects are handled uniformly throughout. They may be stored in data structures, passed as arguments, or used in control structures. A programming language is said to support first-class functions if it treats functions as first-class objects.\', \'To make the processing of iterable objects like lists and iterator much easier, Python has implemented some commonly used Higher-Order Functions. These functions return an iterator that is space-efficient. Some of the built-in higher-order functions are:\', \'Parameters:fun: It is a function to which map passes each element of given iterable.iter: It is a iterable which is to be mapped.\', \'Parameters:function: a function that tests if each element of a sequence true or not.sequence: sequence which needs to be filtered, it can be sets, lists, tuples, or containers of any iterators.\', \'Immutability is a functional programming paradigm can be used for debugging as it will throw an error where the variable is being changed not where the value is changed. Python too supports some immutable data types like string, tuple, numeric, etc.\', \'Object-oriented languages are good when you have a fixed set of operations on things, and as your code evolves, you primarily add new things. This can be accomplished by adding new classes which implement existing methods, and the existing classes are left alone.\', \'Functional languages are good when you have a fixed set of things, and as your code evolves, you primarily add new operations on existing things. This can be accomplished by adding new functions which compute with existing data types, and the existing functions are left alone.\']','[\'Functional programming is a programming paradigm in which we try to bind everything in pure mathematical functions style. It is a declarative type of programming style. Its main focus is on “what to solve” in contrast to an imperative style where the main focus is “how to solve“. It uses expressions instead of statements. An expression is evaluated to produce a value whereas a statement is executed to assign variables.\', \'The second property is also known as immutability. The only result of the Pure Function is the value it returns. They are deterministic. Programs done using functional programming are easy to debug because pure functions have no side effects or hidden I/O. Pure functions also make it easier to write parallel/concurrent applications. When the code is written in this style, a smart compiler can do many things – it can parallelize the instructions, wait to evaluate results when needing them, and memorize the results since the results never change as long as the input doesn’t change.\', \'During functional programming, there is no concept of for loop or while loop, instead recursion is used. Recursion is a process in which a function calls itself directly or indirectly. In the recursive program, the solution to the base case is provided and the solution to the bigger problem is expressed in terms of smaller problems. A question may arise what is base case? The base case can be considered as a condition that tells the compiler or interpreter to exit from the function.\', \'1) This function can have any number of arguments but only one expression, which is evaluated and returned.2) One is free to use lambda functions wherever function objects are required.3) You need to keep in your knowledge that lambda functions are syntactically restricted to a single expression.4) It has various uses in particular fields of programming besides other types of expressions in functions.\']','[\'# Python program to demonstrate# pure functions    # A pure function that does Not# changes the input list and # returns the new Listdef pure_func(List):          New_List = []          for i in List:        New_List.append(i**2)              return New_List      # Driver\'s codeOriginal_List = [1, 2, 3, 4]Modified_List = pure_func(Original_List)  print(\"Original List:\", Original_List)print(\"Modified List:\", Modified_List)\', \"# Python program to demonstrate# recursion    # Recursive Function to find# sum of a listdef Sum(L, i, n, count):          # Base case    if n <= i:        return count          count += L[i]          # Going into the recursion    count = Sum(L, i + 1, n, count)          return count      # Driver\'s codeL = [1, 2, 3, 4, 5]count = 0n = len(L)print(Sum(L, 0, n, count))\", \'# Python program to demonstrate# higher order functions    def shout(text):     return text.upper()     def whisper(text):     return text.lower()     def greet(func):     # storing the function in a variable     greeting = func(\"Hi, I am created by a function passed as an argument.\")     print(greeting)      greet(shout) greet(whisper)\', \'# Python program to demonstrate working # of map.     # Return double of n def addition(n):     return n + n     # We double all numbers using map() numbers = (1, 2, 3, 4) results = map(addition, numbers)   # Does not Print the valueprint(results)  # For Printing valuefor result in results:    print(result, end = \" \")\', \"# Python program to demonstrate working # of the filter.     # function that filters vowels def fun(variable):           letters = [\'a\', \'e\', \'i\', \'o\', \'u\']           if (variable in letters):         return True    else:         return False        # sequence sequence = [\'g\', \'e\', \'e\', \'j\', \'k\', \'s\', \'p\', \'r\']     # using filter function filtered = filter(fun, sequence)     print(\'The filtered letters are:\')   for s in filtered:     print(s)\", \'# Python code to demonstrate# lambda      cube = lambda x: x * x*x print(cube(7))         L = [1, 3, 2, 4, 5, 6]is_even = [x for x in L if x % 2 == 0]  print(is_even)\', \'# Python program to demonstrate # immutable data types      # String data typesimmutable = \"GeeksforGeeks\"  # changing the values will# raise an errorimmutable[1] = \'K\'\']','[\'Original List: [1, 2, 3, 4]\nModified List: [1, 4, 9, 16]\', \'15\', \'HI, I AM CREATED BY A FUNCTION PASSED AS AN ARGUMENT.\nhi, I am created by a function passed as an argument.\', \'<map object at 0x7fae3004b630>\n2 4 6 8\', \'The filtered letters are:\ne\ne\', \'lambda arguments: expression\', \'343\n[2, 4, 6]\', \'Traceback (most recent call last):\n  File \"/home/ee8bf8d8f560b97c7ec0ef080a077879.py\", line 10, in \n    immutable[1] = \'K\'\nTypeError: \'str\' object does not support item assignment\']','[]','[\'Pure Functions: These functions have two main properties. First, they always produce the same output for the same arguments irrespective of anything else. Secondly, they have no side-effects i.e. they do modify any argument or global variables or output something.|||Recursion: There are no “for” or “while” loop in functional languages. Iteration in functional languages is implemented through recursion.|||Functions are First-Class and can be Higher-Order: First-class functions are treated as first-class variable. The first-class variables can be passed to functions as a parameter, can be returned from functions or stored in data structures.|||Variables are Immutable: In functional programming, we can’t modify a variable after it’s been initialized. We can create new variables – but we can’t modify existing variables.&&&It always produces the same output for the same arguments. For example, 3+7 will always be 10 no matter what.|||It does not change or modifies the input variable.&&&A function is an instance of the Object type.|||You can store the function in a variable.|||You can pass the function as a parameter to another function.|||You can return the function from a function.|||You can store them in data structures such as hash tables, lists, …&&&Map(): map() function returns a list of the results after applying the given function to each item of a given iterable (list, tuple etc.)Syntax: map(fun, iter)Parameters:fun: It is a function to which map passes each element of given iterable.iter: It is a iterable which is to be mapped.Return Type: Returns an iterator of map class.Example:# Python program to demonstrate working# of map.# Return double of ndef addition(n):return n + n# We double all numbers using map()numbers = (1, 2, 3, 4)results = map(addition, numbers)# Does not Print the valueprint(results)# For Printing valuefor result in results:print(result, end = \" \")Output:<map object at 0x7fae3004b630>\n2 4 6 8 \nNote: For more information, refer to Python map() function|||filter(): The filter() method filters the given sequence with the help of a function that tests each element in the sequence to be true or not.Syntax: filter(function, sequence)Parameters:function: a function that tests if each element of a sequence true or not.sequence: sequence which needs to be filtered, it can be sets, lists, tuples, or containers of any iterators.Return Type: returns an iterator that is already filtered.Example:# Python program to demonstrate working# of the filter.# function that filters vowelsdef fun(variable):letters = [\'a\', \'e\', \'i\', \'o\', \'u\']if (variable in letters):return Trueelse:return False# sequencesequence = [\'g\', \'e\', \'e\', \'j\', \'k\', \'s\', \'p\', \'r\']# using filter functionfiltered = filter(fun, sequence)print(\'The filtered letters are:\')for s in filtered:print(s)Output:The filtered letters are:\ne\ne\nNote: For more information, refer to filter() in Python|||Lambda functions: In Python, anonymous function means that a function is without a name. As we already know that def keyword is used to define the normal functions and the lambda keyword is used to create anonymous functions.Syntax:lambda arguments: expression\n1) This function can have any number of arguments but only one expression, which is evaluated and returned.2) One is free to use lambda functions wherever function objects are required.3) You need to keep in your knowledge that lambda functions are syntactically restricted to a single expression.4) It has various uses in particular fields of programming besides other types of expressions in functions.Example:# Python code to demonstrate# lambdacube = lambda x: x * x*xprint(cube(7))L = [1, 3, 2, 4, 5, 6]is_even = [x for x in L if x % 2 == 0]print(is_even)Output:343\n[2, 4, 6]\nNote: For more information, refer to Python lambda.\']'),(90,'[\'Metaprogramming with Metaclasses in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/metaclass-hierarchy-Page-1-1024x370.jpeg\']','[]','[\'https://www.geeksforgeeks.org/expert/\', \'https://www.geeksforgeeks.org/function-decorators-in-python-set-1-introduction/\', \'https://www.geeksforgeeks.org/function-decorators-in-python-set-1-introduction/\', \'http://www.dabeaz.com/py3meta/Py3Meta.pdf\', \'https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python\', \'https://www.linkedin.com/in/atul-kumar-733b32136/\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: This article considers Python 3.3 and abovexa0\', \'Metaclasses\', \'This whole meta thing can be summarized as – Metaclass create Classes and Classes creates objectsxa0xa0\', \'Creating custom Metaclass\', \'We can create classes using the type() function directly. It can be called in following ways –xa0\', \'Consider this example –xa0xa0\', \'Solving problems with metaclass\', \'When to use Metaclasses\', \'As quoted by Tim Petersxa0\', \'References\']','[\'In Python, everything has some type associated with it. For example, if we have a variable having an integer value then its type is int. You can get the type of anything using the type() function.xa0\', \'Every type in Python is defined by Class. So in the above example, unlike C++ or Java where int, char, float are primary data types, in Python they are objects of int class or str class. So we can make a new type by creating a class of that type. For example, we can create a new type of Student by creating a Student class.xa0\', \'A Class is also an object, and just like any other object, it’s an instance of something called Metaclass. A special class type creates these Class objects. The type class is default metaclass which is responsible for making classes. In the above example, if we try to find out the type of Student class, it comes out to be a type.xa0\', \'Because Classes are also an object, they can be modified in the same way. We can add or subtract fields or methods in class in the same way we did with other objects. For example –xa0\', \'To create our custom metaclass, our custom metaclass has to inherit type metaclass and usually override –xa0\', \'Now let’s create a metaclass without using type() directly. In the following example, we will be creating a metaclass MultiBases which will check if the class being created has inherited from more than one base class. If so, it will raise an error.xa0\', \'There are some problems which can be solved by decorators (easily) as well as by metaclasses. But there are a few problems whose results can only be achieved by metaclasses. For example, consider a very simple problem of code repetition.xa0We want to debug class methods, what we want is that whenever the class method executes, it should print its fully qualified name before executing its body.\', \'The very first solution that comes to our mind is using method decorators, following is the sample code –xa0\', \'Most of the time we do not use metaclasses, it’s usually used for something complicated, but a few cases where we use metaclasses are –xa0\', \'Metaclasses are deeper magic that 99% of users should never worry about. If you wonder whether you need them, you don’t (the people who actually need them know with certainty that they need them, and don’t need an explanation about why).xa0\']','[\'At first, the word Metaprogramming seems like a very funky and alien thing but if you have ever worked with decorators or metaclasses, you were doing metaprogramming there all along. In a nutshell, we can say metaprogramming is the code that manipulates code.In this article, we are going to discuss Metaclasses, why and when we should use them, and what are the alternatives. This is a fairly advance Python topic and the following prerequisite is expected –xa0\', \'The metaclass is responsible for the generation of classes, so we can write our custom metaclasses to modify the way classes are generated by performing extra actions or injecting code. Usually, we do not need custom metaclasses but sometimes it’s necessary.xa0There are problems for which metaclass and non-metaclass-based solutions are available (which are often simpler) but in some cases, only metaclass can solve the problem. We will discuss such a problem in this article.\', \'This solution works fine but there is one problem, what if we want to apply this method decorator to all subclasses which inherit this Calc class. In that case, we have to separately apply the method decorator to every subclass just like we did with the Calc class.The problem is if we have many such subclasses, then in that case we won’t like adding a decorator to each one separately. If we know beforehand that every subclass must have this debug property, then we should look up to the metaclass-based solution.Have a look at this metaclass based solution, the idea is that classes will be created normally and then immediately wrapped up by debug method decorator –xa0\', \'This article is contributed by Atul Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\'num = 23print(\"Type of num is:\", type(num)) lst = [1, 2, 4]print(\"Type of lst is:\", type(lst)) name = \"Atul\"print(\"Type of name is:\", type(name))\', \'class Student:    passstu_obj = Student() # Print type of object of Student classprint(\"Type of stu_obj is:\", type(stu_obj))\', \'class Student:    pass # Print type of Student classprint(\"Type of Student class is:\", type(Student))\', \"# Defined class without any# class methods and variablesclass test:pass # Defining method variablestest.x = 45 # Defining class methodstest.foo = lambda self: print(\'Hello\') # creating objectmyobj = test() print(myobj.x)myobj.foo()\", \'def test_method(self):    print(\"This is Test class method!\") # creating a base classclass Base:    def myfun(self):        print(\"This is inherited method!\") # Creating Test class dynamically using# type() method directlyTest = type(\'Test\', (Base, ), dict(x=\"atul\", my_method=test_method)) # Print type of Testprint(\"Type of Test class: \", type(Test)) # Creating instance of Test classtest_obj = Test()print(\"Type of test_obj: \", type(test_obj)) # calling inherited methodtest_obj.myfun() # calling Test class methodtest_obj.my_method() # printing variableprint(test_obj.x)\', \'# our metaclassclass MultiBases(type):    # overriding __new__ method    def __new__(cls, clsname, bases, clsdict):        # if no of base classes is greater than 1        # raise error        if len(bases)>1:            raise TypeError(\"Inherited multiple base classes!!!\")                 # else execute __new__ method of super class, ie.        # call __init__ of type class        return super().__new__(cls, clsname, bases, clsdict) # metaclass can be specified by \'metaclass\' keyword argument# now MultiBase class is used for creating classes# this will be propagated to all subclasses of Baseclass Base(metaclass=MultiBases):    pass # no error is raisedclass A(Base):    pass # no error is raisedclass B(Base):    pass # This will raise an error!class C(A, B):    pass\', \'from functools import wraps def debug(func):    \'\'\'decorator for debugging passed function\'\'\'         @wraps(func)    def wrapper(*args, **kwargs):        print(\"Full name of this method:\", func.__qualname__)        return func(*args, **kwargs)    return wrapper def debugmethods(cls):    \'\'\'class decorator make use of debug decorator       to debug class methods \'\'\'         # check in class dictionary for any callable(method)    # if exist, replace it with debugged version    for key, val in vars(cls).items():        if callable(val):            setattr(cls, key, debug(val))    return cls # sample class@debugmethodsclass Calc:    def add(self, x, y):        return x+y    def mul(self, x, y):        return x*y    def div(self, x, y):        return x/y     mycal = Calc()print(mycal.add(2, 3))print(mycal.mul(5, 2))\', \'from functools import wraps def debug(func):    \'\'\'decorator for debugging passed function\'\'\'         @wraps(func)    def wrapper(*args, **kwargs):        print(\"Full name of this method:\", func.__qualname__)        return func(*args, **kwargs)    return wrapper def debugmethods(cls):    \'\'\'class decorator make use of debug decorator       to debug class methods \'\'\'         for key, val in vars(cls).items():        if callable(val):            setattr(cls, key, debug(val))    return cls class debugMeta(type):    \'\'\'meta class which feed created class object       to debugmethod to get debug functionality       enabled objects\'\'\'         def __new__(cls, clsname, bases, clsdict):        obj = super().__new__(cls, clsname, bases, clsdict)        obj = debugmethods(obj)        return obj     # base class with metaclass \'debugMeta\'# now all the subclass of this# will have debugging appliedclass Base(metaclass=debugMeta):pass # inheriting Baseclass Calc(Base):    def add(self, x, y):        return x+y     # inheriting Calcclass Calc_adv(Calc):    def mul(self, x, y):        return x*y # Now Calc_adv object showing# debugging behaviourmycal = Calc_adv()print(mycal.mul(2, 3))\']','[\"Type of num is: <class \'int\'>\nType of lst is: <class \'list\'>\nType of name is: <class \'str\'>\", \"Type of stu_obj is: <class \'__main__.Student\'>\", \"Type of Student class is: <class \'type\'>\", \'45\nHello\', \"Type of Test class:  <class \'type\'>\nType of test_obj:  <class \'__main__.Test\'>\nThis is inherited method!\nThis is Test class method!\natul\", \'Traceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\n  File \"<stdin>\", line 8, in __new__\nTypeError: Inherited multiple base classes!!!\', \'Full name of this method: Calc.add\n5\nFull name of this method: Calc.mul\n10\', \'Full name of this method: Calc_adv.mul\n6\']','[]','[\'OOP concept in Python|||Decorators in Python&&&__new__(): It’s a method which is called before __init__(). It creates the object and returns it. We can override this method to control how the objects are created.|||__init__(): This method just initialize the created object passed as a parameter&&&As we have seen in the above example, metaclasses propagate down the inheritance hierarchies. It will affect all the subclasses as well. If we have such a situation, then we should use metaclasses.|||If we want to change class automatically, when it is created, we use metaclasses|||For API development, we might use metaclasses&&&http://www.dabeaz.com/py3meta/Py3Meta.pdf|||https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python&&&&&&When called with only one argument, it returns the type. We have seen it before in the above examples.|||When called with three parameters, it creates a class. Following arguments are passed to it –Class nameTuple having base classes inherited by classClass Dictionary: It serves as a local namespace for the class, populated with class methods and variables|||Class name|||Tuple having base classes inherited by class|||Class Dictionary: It serves as a local namespace for the class, populated with class methods and variables&&&Class name|||Tuple having base classes inherited by class|||Class Dictionary: It serves as a local namespace for the class, populated with class methods and variables&&&\']'),(91,'[\'Abstract Classes in Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'xa0xa0Code 2:xa0\', \'Let look over the example to invoke the method using super():xa0xa0\']','[\'xa0xa0Implementation Through Subclassing :xa0By subclassing directly from the base, we can avoid the need to register the class explicitly. In this case, the Python class management is used to recognize PluginImplementation as implementing the abstract PluginBase.xa0xa0\', \'In the above program, we can invoke the methods in abstract classes by using super().xa0xa0xa0Abstract Properties :xa0Abstract classes include attributes in addition to methods, you can require the attributes in concrete classes by defining them with @abstractproperty.xa0xa0\']','[\'An abstract class can be considered as a blueprint for other classes. It allows you to create a set of methods that must be created within any child classes built from the abstract class. A class which contains one or more abstract methods is called an abstract class. An abstract method is a method that has a declaration but does not have an implementation. While we are designing large functional units we use an abstract class. When we want to provide a common interface for different implementations of a component, we use an abstract class.xa0xa0xa0Why use Abstract Base Classes :xa0By defining an abstract base class, you can define a common Application Program Interface(API) for a set of subclasses. This capability is especially useful in situations where a third-party is going to provide implementations, such as with plugins, but can also help you when working in a large team or with a large code-base where keeping all classes in your mind is difficult or not possible.xa0xa0xa0How Abstract Base classes work :xa0By default, Python does not provide abstract classes. Python comes with a module that provides the base for defining Abstract Base classes(ABC) and that module name is ABC. ABC works by decorating methods of the base class as abstract and then registering concrete classes as implementations of the abstract base. A method becomes abstract when decorated with the keyword @abstractmethod. For Example –xa0\', \'A side-effect of using direct subclassing is, it is possible to find all the implementations of your plugin by asking the base class for the list of known classes derived from it.xa0xa0xa0Concrete Methods in Abstract Base Classes :xa0Concrete classes contain only concrete (normal)methods whereas abstract classes may contain both concrete methods and abstract methods. The concrete class provides an implementation of abstract methods, the abstract base class can also provide an implementation by invoking the methods via super().xa0xa0\', \'In the above example, the Base class cannot be instantiated because it has only an abstract version of the property getter method.xa0xa0xa0Abstract Class Instantiation :xa0Abstract classes are incomplete because they have methods that have nobody. If python allows creating an object for abstract classes then using that object if anyone calls the abstract method, but there is no actual implementation to invoke. So we use an abstract class as a template and according to the need, we extend it and build on it before we can use it. Due to the fact, an abstract class is not a concrete class, it cannot be instantiated. When we create an object for the abstract class it raises an error.xa0xa0\']','[\'# Python program showing# abstract base class work from abc import ABC, abstractmethod class Polygon(ABC):     @abstractmethod    def noofsides(self):        pass class Triangle(Polygon):     # overriding abstract method    def noofsides(self):        print(\"I have 3 sides\") class Pentagon(Polygon):     # overriding abstract method    def noofsides(self):        print(\"I have 5 sides\") class Hexagon(Polygon):     # overriding abstract method    def noofsides(self):        print(\"I have 6 sides\") class Quadrilateral(Polygon):     # overriding abstract method    def noofsides(self):        print(\"I have 4 sides\") # Driver codeR = Triangle()R.noofsides() K = Quadrilateral()K.noofsides() R = Pentagon()R.noofsides() K = Hexagon()K.noofsides()\', \'# Python program showing# abstract base class work from abc import ABC, abstractmethodclass Animal(ABC):     def move(self):        pass class Human(Animal):     def move(self):        print(\"I can walk and run\") class Snake(Animal):     def move(self):        print(\"I can crawl\") class Dog(Animal):     def move(self):        print(\"I can bark\") class Lion(Animal):     def move(self):        print(\"I can roar\")         # Driver codeR = Human()R.move() K = Snake()K.move() R = Dog()R.move() K = Lion()K.move()\', \'# Python program showing# implementation of abstract# class through subclassing import abc class parent:          def geeks(self):        pass class child(parent):    def geeks(self):        print(\"child class\") # Driver codeprint( issubclass(child, parent))print( isinstance(child(), parent))\', \'# Python program invoking a# method using super() import abcfrom abc import ABC, abstractmethod class R(ABC):    def rk(self):        print(\"Abstract Base Class\") class K(R):    def rk(self):        super().rk()        print(\"subclass \") # Driver coder = K()r.rk()\', \'# Python program showing# abstract properties import abcfrom abc import ABC, abstractmethod class parent(ABC):    @abc.abstractproperty    def geeks(self):        return \"parent class\"class child(parent):          @property    def geeks(self):        return \"child class\"    try:    r =parent()    print( r.geeks)except Exception as err:    print (err)  r = child()print (r.geeks)\', \'# Python program showing# abstract class cannot# be an instantiationfrom abc import ABC,abstractmethod class Animal(ABC):    @abstractmethod    def move(self):        passclass Human(Animal):    def move(self):        print(\"I can walk and run\") class Snake(Animal):    def move(self):        print(\"I can crawl\") class Dog(Animal):    def move(self):        print(\"I can bark\") class Lion(Animal):    def move(self):        print(\"I can roar\") c=Animal()\']','[\'I have 3 sides\nI have 4 sides\nI have 5 sides\nI have 6 sides\', \'I can walk and run\nI can crawl\nI can bark\nI can roar\', \'True\nTrue\', \'Abstract Base Class\nsubclass\', \"Can\'t instantiate abstract class parent with abstract methods geeks\nchild class\", \'Traceback (most recent call last):\n  File \"/home/ffe4267d930f204512b7f501bb1bc489.py\", line 19, in \n    c=Animal()\nTypeError: Can\'t instantiate abstract class Animal with abstract methods move\']','[]','[]'),(92,'[\'Multithreading in Python | Set 1\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/multithreading-python-11.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multithreading-python-21.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multithreading-python-31.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multithreading-python-4.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/multiprocessing-python-set-1/\', \'https://www.geeksforgeeks.org/multithreading-in-python-set-2-synchronization/\', \'http://www.write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Let us first understand the concept of thread in computer architecture.\', \'A thread contains all this information in a Thread Control Block (TCB):\', \'Consider the diagram below to understand the relation between process and its thread:\', \'Multithreading\', \'Multiple threads can exist within one process where:\', \'Consider the diagram below to understand how multiple threads exist in memory:\', \'Multithreading is defined as the ability of a processor to execute multiple threads concurrently.\', \'Consider the diagram below in which a process contains two active threads:\', \'Multithreading in Python\', \'Let us consider a simple example using threading module:\', \'Let us try to understand the above code:\', \'In above example, we created 2 threads with different target functions:\', \'Consider the diagram below for a better understanding of how above program works:\', \'Let us try to understand the above code:\', \'As it is clear from the output, the process ID remains same for all threads.\', \'The diagram given below clears the above concept:\', \'Multithreading in Python | Set 2 (Synchronization)\']','[\'This article covers the basics of multithreading in Python programming language. Just like multiprocessing, multithreading is a way of achieving multitasking. In multithreading, the concept of threads is used.\', \'In computing, a process is an instance of a computer program that is being executed. Any process has 3 basic components:\', \'A thread is an entity within a process that can be scheduled for execution. Also, it is the smallest unit of processing that can be performed in an OS (Operating System).\', \'In simple words, a thread is a sequence of such instructions within a program that can be executed independently of other code. For simplicity, you can assume that a thread is simply a subset of a process!\', \'In Python, the threading module provides a very simple and intuitive API for spawning multiple threads in a program.\', \'As a result, the current program will first wait for the completion of t1 and then t2. Once, they are finished, the remaining statements of current program are executed.\', \'Consider the python program given below in which we print thread name and corresponding process for each task:\', \'So, this was a brief introduction to multithreading in Python. The next article in this series covers synchronization between multiple threads.\', \'This article is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'In a simple, single-core CPU, it is achieved using frequent switching between threads. This is termed as context switching. In context switching, the state of a thread is saved and state of another thread is loaded whenever any interrupt (due to I/O or manually set) takes place. Context switching takes place so frequently that all the threads appear to be running parallelly (this is termed as multitasking).\']','[\'# Python program to illustrate the concept# of threading# importing the threading moduleimport threading  def print_cube(num):    \"\"\"    function to print cube of given num    \"\"\"    print(\"Cube: {}\".format(num * num * num))  def print_square(num):    \"\"\"    function to print square of given num    \"\"\"    print(\"Square: {}\".format(num * num))  if __name__ == \"__main__\":    # creating thread    t1 = threading.Thread(target=print_square, args=(10,))    t2 = threading.Thread(target=print_cube, args=(10,))      # starting thread 1    t1.start()    # starting thread 2    t2.start()      # wait until thread 1 is completely executed    t1.join()    # wait until thread 2 is completely executed    t2.join()      # both threads completely executed    print(\"Done!\")\', \'# Python program to illustrate the concept# of threadingimport threadingimport os  def task1():    print(\"Task 1 assigned to thread: {}\".format(threading.current_thread().name))    print(\"ID of process running task 1: {}\".format(os.getpid()))  def task2():    print(\"Task 2 assigned to thread: {}\".format(threading.current_thread().name))    print(\"ID of process running task 2: {}\".format(os.getpid()))  if __name__ == \"__main__\":      # print ID of current process    print(\"ID of process running main program: {}\".format(os.getpid()))      # print name of main thread    print(\"Main thread name: {}\".format(threading.current_thread().name))      # creating threads    t1 = threading.Thread(target=task1, name=\'t1\')    t2 = threading.Thread(target=task2, name=\'t2\')        # starting threads    t1.start()    t2.start()      # wait until all threads finish    t1.join()    t2.join()\']','[\'Square: 100\nCube: 1000\nDone!\', \'import threading\', \'t1 = threading.Thread(target=print_square, args=(10,))\nt2 = threading.Thread(target=print_cube, args=(10,))\', \'t1.start()\nt2.start()\', \'t1.join()\nt2.join()\', \'ID of process running main program: 11758\nMain thread name: MainThread\nTask 1 assigned to thread: t1\nID of process running task 1: 11758\nTask 2 assigned to thread: t2\nID of process running task 2: 11758\', \'print(\"ID of process running main program: {}\".format(os.getpid()))\', \'print(\"Main thread name: {}\".format(threading.main_thread().name))\', \'print(\"Task 1 assigned to thread: {}\".format(threading.current_thread().name))\']','[]','[\'An executable program.|||The associated data needed by the program (variables, work space, buffers, etc.)|||The execution context of the program (State of process)&&&Thread Identifier: Unique id (TID) is assigned to every new thread|||Stack pointer: Points to thread’s stack in the process. Stack contains the local variables under thread’s scope.|||Program counter: a register which stores the address of the instruction currently being executed by thread.|||Thread state: can be running, ready, waiting, start or done.|||Thread’s register set: registers assigned to thread for computations.|||Parent process Pointer: A pointer to the Process control block (PCB) of the process that the thread lives on.&&&Each thread contains its own register set and local variables (stored in stack).|||All thread of a process share global variables (stored in heap) and the program code.&&&To import the threading module, we do:import threading\n|||To create a new thread, we create an object of Thread class. It takes following arguments:target: the function to be executed by threadargs: the arguments to be passed to the target functionIn above example, we created 2 threads with different target functions:t1 = threading.Thread(target=print_square, args=(10,))\nt2 = threading.Thread(target=print_cube, args=(10,))\n|||target: the function to be executed by thread|||args: the arguments to be passed to the target function|||To start a thread, we use start method of Thread class.t1.start()\nt2.start()\n|||Once the threads start, the current program (you can think of it like a main thread) also keeps on executing. In order to stop execution of current program until a thread is complete, we use join method.t1.join()\nt2.join()\nAs a result, the current program will first wait for the completion of t1 and then t2. Once, they are finished, the remaining statements of current program are executed.&&&target: the function to be executed by thread|||args: the arguments to be passed to the target function&&&We use os.getpid() function to get ID of current process.print(\"ID of process running main program: {}\".format(os.getpid()))\nAs it is clear from the output, the process ID remains same for all threads.|||We use threading.main_thread() function to get the main thread object. In normal conditions, the main thread is the thread from which the Python interpreter was started. name attribute of thread object is used to get the name of thread.print(\"Main thread name: {}\".format(threading.main_thread().name))\n|||We use the threading.current_thread() function to get the current thread object.print(\"Task 1 assigned to thread: {}\".format(threading.current_thread().name))\n\']'),(93,'[\'Multithreading in Python | Set 2 (Synchronization)\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/multithreading-python-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multithreadingfinal.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multithreading-python-3.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.facebook.com/nikhilksingh97\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Synchronization between threads\', \'Critical section refers to the parts of the program where the shared resource is accessed.\', \'Concurrent accesses to shared resource can lead to race condition.\', \'Consider the program below to understand the concept of race condition:\', \'In above program:\', \'Given below is a diagram which shows how can race condition occur in above program:\', \'Using Locks\', \'Lock class provides following methods:\', \'Consider the example given below:\', \'Let us try to understand the above code step by step:\', \'Here is a diagram given below which depicts the implementation of locks in above program:\', \'Advantages:\', \'Disadvantages:\']','[\'This article discusses the concept of thread synchronization in case of multithreading in Python programming language.\', \'Thread synchronization is defined as a mechanism which ensures that two or more concurrent threads do not simultaneously execute some particular program segment known as critical section.\', \'For example, in the diagram below, 3 threads try to access shared resource or critical section at the same time.\', \'A race condition occurs when two or more threads can access shared data and they try to change it at the same time. As a result, the values of variables may be unpredictable and vary depending on the timings of context switches of the processes.\', \'The expected final value of x is 200000 but what we get in 10 iterations of main_task function is some different values.\', \'This happens due to concurrent access of threads to the shared variable x. This unpredictability in value of x is nothing but race condition.\', \'Notice that expected value of x in above diagram is 12 but due to race condition, it turns out to be 11!Hence, we need a tool for proper synchronization between multiple threads.\', \'threading module provides a Lock class to deal with the race conditions. Lock is implemented using a Semaphore object provided by the Operating System.\', \'As you can see in the results, the final value of x comes out to be 200000 every time (which is the expected final result).\', \'This brings us to the end of this tutorial series on Multithreading in Python.Finally, here are a few advantages and disadvantages of multithreading:\', \'This article is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\'A semaphore is a synchronization object that controls access by multiple processes/threads to a common resource in a parallel programming environment. It is simply a value in a designated place in operating system (or kernel) storage that each process/thread can check and then change. Depending on the value that is found, the process/thread can use the resource or will find that it is already in use and must wait for some period before trying again. Semaphores can be binary (0 or 1) or can have additional values. Typically, a process/thread using semaphores checks the value and then, if it using the resource, changes the value to reflect this so that subsequent semaphore users will know to wait.\']','[\'import threading  # global variable xx = 0  def increment():    \"\"\"    function to increment global variable x    \"\"\"    global x    x += 1  def thread_task():    \"\"\"    task for thread    calls increment function 100000 times.    \"\"\"    for _ in range(100000):        increment()  def main_task():    global x    # setting global variable x as 0    x = 0      # creating threads    t1 = threading.Thread(target=thread_task)    t2 = threading.Thread(target=thread_task)      # start threads    t1.start()    t2.start()      # wait until threads finish their job    t1.join()    t2.join()  if __name__ == \"__main__\":    for i in range(10):        main_task()        print(\"Iteration {0}: x = {1}\".format(i,x))\', \'import threading  # global variable xx = 0  def increment():    \"\"\"    function to increment global variable x    \"\"\"    global x    x += 1  def thread_task(lock):    \"\"\"    task for thread    calls increment function 100000 times.    \"\"\"    for _ in range(100000):        lock.acquire()        increment()        lock.release()  def main_task():    global x    # setting global variable x as 0    x = 0      # creating a lock    lock = threading.Lock()      # creating threads    t1 = threading.Thread(target=thread_task, args=(lock,))    t2 = threading.Thread(target=thread_task, args=(lock,))      # start threads    t1.start()    t2.start()      # wait until threads finish their job    t1.join()    t2.join()  if __name__ == \"__main__\":    for i in range(10):        main_task()        print(\"Iteration {0}: x = {1}\".format(i,x))\']','[\'Iteration 0: x = 175005\nIteration 1: x = 200000\nIteration 2: x = 200000\nIteration 3: x = 169432\nIteration 4: x = 153316\nIteration 5: x = 200000\nIteration 6: x = 167322\nIteration 7: x = 200000\nIteration 8: x = 169917\nIteration 9: x = 153589\', \'Iteration 0: x = 200000\nIteration 1: x = 200000\nIteration 2: x = 200000\nIteration 3: x = 200000\nIteration 4: x = 200000\nIteration 5: x = 200000\nIteration 6: x = 200000\nIteration 7: x = 200000\nIteration 8: x = 200000\nIteration 9: x = 200000\', \'lock = threading.Lock()\', \'t1 = threading.Thread(target=thread_task, args=(lock,))\n  t2 = threading.Thread(target=thread_task, args=(lock,))\', \'lock.acquire()\n  increment()\n  lock.release()\']','[]','[\'Two threads t1 and t2 are created in main_task function and global variable x is set to 0.|||Each thread has a target function thread_task in which increment function is called 100000 times.|||increment function will increment the global variable x by 1 in each call.&&&acquire([blocking]) : To acquire a lock. A lock can be blocking or non-blocking.When invoked with the blocking argument set to True (the default), thread execution is blocked until the lock is unlocked, then lock is set to locked and return True.When invoked with the blocking argument set to False, thread execution is not blocked. If lock is unlocked, then set it to locked and return True else return False immediately.|||When invoked with the blocking argument set to True (the default), thread execution is blocked until the lock is unlocked, then lock is set to locked and return True.|||When invoked with the blocking argument set to False, thread execution is not blocked. If lock is unlocked, then set it to locked and return True else return False immediately.|||release() : To release a lock.When the lock is locked, reset it to unlocked, and return. If any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.If lock is already unlocked, a ThreadError is raised.|||When the lock is locked, reset it to unlocked, and return. If any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.|||If lock is already unlocked, a ThreadError is raised.&&&When invoked with the blocking argument set to True (the default), thread execution is blocked until the lock is unlocked, then lock is set to locked and return True.|||When invoked with the blocking argument set to False, thread execution is not blocked. If lock is unlocked, then set it to locked and return True else return False immediately.&&&When the lock is locked, reset it to unlocked, and return. If any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.|||If lock is already unlocked, a ThreadError is raised.&&&Firstly, a Lock object is created using:  lock = threading.Lock()\n|||Then, lock is passed as target function argument:  t1 = threading.Thread(target=thread_task, args=(lock,))\n  t2 = threading.Thread(target=thread_task, args=(lock,))\n|||In the critical section of target function, we apply lock using lock.acquire() method. As soon as a lock is acquired, no other thread can access the critical section (here, increment function) until the lock is released using lock.release() method.  lock.acquire()\n  increment()\n  lock.release()\nAs you can see in the results, the final value of x comes out to be 200000 every time (which is the expected final result).&&&It doesn’t block the user. This is because threads are independent of each other.|||Better use of system resources is possible since threads execute tasks parallely.|||Enhanced performance on multi-processor machines.|||Multi-threaded servers and interactive GUIs use multithreading exclusively.&&&As number of threads increase, complexity increases.|||Synchronization of shared resources (objects, data) is necessary.|||It is difficult to debug, result is sometimes unpredictable.|||Potential deadlocks which leads to starvation, i.e. some threads may not be served with a bad design|||Constructing and synchronizing threads is CPU/memory intensive.\']'),(94,'[\'Multiprocessing in Python | Set 1 (Introduction)\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Multiprocessing-Python-Set-1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://docs.python.org/3/library/multiprocessing.html\', \'https://www.geeksforgeeks.org/multiprocessing-python-set-2/\', \'https://www.geeksforgeeks.org/synchronization-pooling-processes-python/\', \'http://learn.parallax.com/tutorials/language/blocklyprop/blocklyprop-functions-and-multicore/bit-about-multicore\', \'https://docs.python.org/3/library/multiprocessing.html\', \'https://www.facebook.com/nikhilksingh97\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'This article is a brief yet concise introduction to multiprocessing in Python programming language.\', \'What is multiprocessing?\', \'Why multiprocessing?\', \'Here, the CPU can easily executes several tasks at once, with each task using its own processor.\', \'Multiprocessing in Python\', \'Let us try to understand the above code:\', \'References:\']','[\'Multiprocessing refers to the ability of a system to support more than one processor at the same time. Applications in a multiprocessing system are broken to smaller routines that run independently. The operating system allocates these threads to the processors improving performance of the system.\', \'Consider a computer system with a single processor. If it is assigned several processes at the same time, it will have to interrupt each task and switch briefly to another, to keep all of the processes going.This situation is just like a chef working in a kitchen alone. He has to do several tasks like baking, stirring, kneading dough, etc.\', \'So the gist is that: The more tasks you must do at once, the more difficult it gets to keep track of them all, and keeping the timing right becomes more of a challenge.This is where the concept of multiprocessing arises!A multiprocessing system can have:\', \'It is just like the chef in last situation being assisted by his assistants. Now, they can divide the tasks among themselves and chef doesn’t need to switch between his tasks.\', \'In Python, the multiprocessing module includes a very simple and intuitive API for dividing work between multiple processes.Let us consider a simple example using multiprocessing module:\', \'Note: Process constructor takes many other arguments also which will be discussed later. In above example, we created 2 processes with different target functions:\', \'As a result, the current program will first wait for the completion of p1 and then p2. Once, they are completed, the next statements of current program are executed.\', \'Let us consider another program to understand the concept of different processes running on same python script. In this example below, we print the ID of the processes running the target functions:\', \'Notice that it matches with the process IDs of p1 and p2 which we obtain using pid attribute of Process class.\', \'Consider the diagram below to understand how new processes are different from main Python script:So, this was a brief introduction to multiprocessing in Python. Next few articles will cover following topics related to multiprocessing:\', \'This article is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'# importing the multiprocessing moduleimport multiprocessing  def print_cube(num):    \"\"\"    function to print cube of given num    \"\"\"    print(\"Cube: {}\".format(num * num * num))  def print_square(num):    \"\"\"    function to print square of given num    \"\"\"    print(\"Square: {}\".format(num * num))  if __name__ == \"__main__\":    # creating processes    p1 = multiprocessing.Process(target=print_square, args=(10, ))    p2 = multiprocessing.Process(target=print_cube, args=(10, ))      # starting process 1    p1.start()    # starting process 2    p2.start()      # wait until process 1 is finished    p1.join()    # wait until process 2 is finished    p2.join()      # both processes finished    print(\"Done!\")\', \'# importing the multiprocessing moduleimport multiprocessingimport os  def worker1():    # printing process id    print(\"ID of process running worker1: {}\".format(os.getpid()))  def worker2():    # printing process id    print(\"ID of process running worker2: {}\".format(os.getpid()))  if __name__ == \"__main__\":    # printing main program process id    print(\"ID of main process: {}\".format(os.getpid()))      # creating processes    p1 = multiprocessing.Process(target=worker1)    p2 = multiprocessing.Process(target=worker2)      # starting processes    p1.start()    p2.start()      # process IDs    print(\"ID of process p1: {}\".format(p1.pid))    print(\"ID of process p2: {}\".format(p2.pid))      # wait until processes are finished    p1.join()    p2.join()      # both processes finished    print(\"Both processes finished execution!\")      # check if processes are alive    print(\"Process p1 is alive: {}\".format(p1.is_alive()))    print(\"Process p2 is alive: {}\".format(p2.is_alive()))\']','[\'Square: 100\nCube: 1000\nDone!\', \'import multiprocessing\', \'p1 = multiprocessing.Process(target=print_square, args=(10, ))\np2 = multiprocessing.Process(target=print_cube, args=(10, ))\', \'p1.start()\np2.start()\', \'p1.join()\np2.join()\', \'ID of main process: 28628\nID of process running worker1: 29305\nID of process running worker2: 29306\nID of process p1: 29305\nID of process p2: 29306\nBoth processes finished execution!\nProcess p1 is alive: False\nProcess p2 is alive: False\']','[]','[\'multiprocessor, i.e. a computer with more than one central processor.|||multi-core processor, i.e. a single computing component with two or more independent actual processing units (called “cores”).&&&To import the multiprocessing module, we do:import multiprocessing\n|||To create a process, we create an object of Process class. It takes following arguments:target: the function to be executed by processargs: the arguments to be passed to the target functionNote: Process constructor takes many other arguments also which will be discussed later. In above example, we created 2 processes with different target functions:p1 = multiprocessing.Process(target=print_square, args=(10, ))\np2 = multiprocessing.Process(target=print_cube, args=(10, ))\n|||target: the function to be executed by process|||args: the arguments to be passed to the target function|||To start a process, we use start method of Process class.p1.start()\np2.start()\n|||Once the processes start, the current program also keeps on executing. In order to stop execution of current program until a process is complete, we use join method.p1.join()\np2.join()\nAs a result, the current program will first wait for the completion of p1 and then p2. Once, they are completed, the next statements of current program are executed.&&&target: the function to be executed by process|||args: the arguments to be passed to the target function&&&The main python script has a different process ID and multiprocessing module spawns new processes with different process IDs as we create Process objects p1 and p2. In above program, we use os.getpid() function to get ID of process running the current target function.Notice that it matches with the process IDs of p1 and p2 which we obtain using pid attribute of Process class.|||Each process runs independently and has its own memory space.|||As soon as the execution of target function is finished, the processes get terminated. In above program we used is_alive method of Process class to check if a process is still active or not.&&&Sharing data between processes using Array, value and queues.|||Lock and Pool concepts in multiprocessing&&&Multiprocessing in Python | Set 2|||Synchronization and Pooling of processes in Python&&&http://learn.parallax.com/tutorials/language/blocklyprop/blocklyprop-functions-and-multicore/bit-about-multicore|||https://docs.python.org/3/library/multiprocessing.html\']'),(95,'[\'Multiprocessing in Python | Set 2 (Communication between processes)\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/multiprocessing-python-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multiprocessing-python-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multiprocessing-python-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multiprocessing-python-4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/multiprocessing-python-5.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/multiprocessing-python-set-1/\', \'https://docs.python.org/3/library/queue.html\', \'https://www.geeksforgeeks.org/synchronization-pooling-processes-python/\', \'https://www.facebook.com/nikhilksingh97\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Consider the program below to understand this concept:\', \'In above example, we try to print contents of global list result at two places:\', \'Diagram shown below clears this concept:\', \'Sharing data between processes\', \'Given below is a simple example showing use of Array and Value for sharing data between processes.\', \'Let us try to understand the above code line by line:\', \'Similarly, we create a Value square_sum like this:\', \'Here, we only need to specify data type. The value can be given an initial value(say 10) like this:\', \'square_sum is given a value by using its value attribute:\', \'Value of square_sum is simply printed as:\', \'Here is a diagram depicting how processes share Array and Value object:\', \'Consider the example given below:\', \'Let us try to understand above piece of code:\', \'All the lines under with statement block are under the scope of manager object.\', \'Similarly, you can create a dictionary as manager.dict method.\', \'The concept of server process is depicted in the diagram shown below:\', \'Communication between processes\', \'Let us try to understand the above code step by step:\', \'Given below is a simple diagram depicting the operations on queue:\', \'Let us try to understand above code:\', \'The function returned two connection objects for the two ends of the pipe.\', \'Consider the diagram given below which shows the relation b/w pipe and processes:\']','[\'Multiprocessing in Python | Set 1These articles discusses the concept of data sharing and message passing between processes while using multiprocessing module in Python.In multiprocessing, any newly created process will do following:\', \'Server process managers are more flexible than using shared memory objects because they can be made to support arbitrary object types like lists, dictionaries, Queue, Value, Array, etc. Also, a single manager can be shared by processes on different computers over a network. They are, however, slower than using shared memory.\', \'Effective use of multiple processes usually requires some communication between them, so that work can be divided and results can be aggregated.multiprocessing supports two types of communication channel between processes:\', \'multiprocessing module provides Pipe() function which returns a pair of connection objects connected by a pipe. The two connection objects returned by Pipe() represent the two ends of the pipe. Each connection object has send() and recv() methods (among others).Consider the program given below:\', \'This article is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\'Note: Data in a pipe may become corrupted if two processes (or threads) try to read from or write to the same end of the pipe at the same time. Of course, there is no risk of corruption from processes using different ends of the pipe at the same time. Also note that Queues do proper synchronization between processes, at the expense of more complexity. Hence, queues are said to be thread and process safe!\']','[\'import multiprocessing  # empty list with global scoperesult = []  def square_list(mylist):    \"\"\"    function to square a given list    \"\"\"    global result    # append squares of mylist to global list result    for num in mylist:        result.append(num * num)    # print global list result    print(\"Result(in process p1): {}\".format(result))  if __name__ == \"__main__\":    # input list    mylist = [1,2,3,4]      # creating new process    p1 = multiprocessing.Process(target=square_list, args=(mylist,))    # starting process    p1.start()    # wait until process is finished    p1.join()      # print global result list    print(\"Result(in main program): {}\".format(result))\', \'import multiprocessing  def square_list(mylist, result, square_sum):    \"\"\"    function to square a given list    \"\"\"    # append squares of mylist to result array    for idx, num in enumerate(mylist):        result[idx] = num * num      # square_sum value    square_sum.value = sum(result)      # print result Array    print(\"Result(in process p1): {}\".format(result[:]))      # print square_sum Value    print(\"Sum of squares(in process p1): {}\".format(square_sum.value))  if __name__ == \"__main__\":    # input list    mylist = [1,2,3,4]      # creating Array of int data type with space for 4 integers    result = multiprocessing.Array(\'i\', 4)      # creating Value of int data type    square_sum = multiprocessing.Value(\'i\')      # creating new process    p1 = multiprocessing.Process(target=square_list, args=(mylist, result, square_sum))      # starting process    p1.start()      # wait until the process is finished    p1.join()      # print result array    print(\"Result(in main program): {}\".format(result[:]))      # print square_sum Value    print(\"Sum of squares(in main program): {}\".format(square_sum.value))\', \'import multiprocessing  def print_records(records):    \"\"\"    function to print record(tuples) in records(list)    \"\"\"    for record in records:        print(\"Name: {0}\\nScore: {1}\\n\".format(record[0], record[1]))  def insert_record(record, records):    \"\"\"    function to add a new record to records(list)    \"\"\"    records.append(record)    print(\"New record added!\\n\")  if __name__ == \'__main__\':    with multiprocessing.Manager() as manager:        # creating a list in server process memory        records = manager.list([(\'Sam\', 10), (\'Adam\', 9), (\'Kevin\',9)])        # new record to be inserted in records        new_record = (\'Jeff\', 8)          # creating new processes        p1 = multiprocessing.Process(target=insert_record, args=(new_record, records))        p2 = multiprocessing.Process(target=print_records, args=(records,))          # running process p1 to insert new record        p1.start()        p1.join()          # running process p2 to print records        p2.start()        p2.join()\', \'import multiprocessing  def square_list(mylist, q):    \"\"\"    function to square a given list    \"\"\"    # append squares of mylist to queue    for num in mylist:        q.put(num * num)  def print_queue(q):    \"\"\"    function to print queue elements    \"\"\"    print(\"Queue elements:\")    while not q.empty():        print(q.get())    print(\"Queue is now empty!\")  if __name__ == \"__main__\":    # input list    mylist = [1,2,3,4]      # creating multiprocessing Queue    q = multiprocessing.Queue()      # creating new processes    p1 = multiprocessing.Process(target=square_list, args=(mylist, q))    p2 = multiprocessing.Process(target=print_queue, args=(q,))      # running process p1 to square list    p1.start()    p1.join()      # running process p2 to get queue elements    p2.start()    p2.join()\', \'import multiprocessing  def sender(conn, msgs):    \"\"\"    function to send messages to other end of pipe    \"\"\"    for msg in msgs:        conn.send(msg)        print(\"Sent the message: {}\".format(msg))    conn.close()  def receiver(conn):    \"\"\"    function to print the messages received from other    end of pipe    \"\"\"    while 1:        msg = conn.recv()        if msg == \"END\":            break        print(\"Received the message: {}\".format(msg))  if __name__ == \"__main__\":    # messages to be sent    msgs = [\"hello\", \"hey\", \"hru?\", \"END\"]      # creating a pipe    parent_conn, child_conn = multiprocessing.Pipe()      # creating new processes    p1 = multiprocessing.Process(target=sender, args=(parent_conn,msgs))    p2 = multiprocessing.Process(target=receiver, args=(child_conn,))      # running processes    p1.start()    p2.start()      # wait until processes finish    p1.join()    p2.join()\']','[\'Result(in process p1): [1, 4, 9, 16]\nResult(in main program): []\', \'Result(in process p1): [1, 4, 9, 16]\nSum of squares(in process p1): 30\nResult(in main program): [1, 4, 9, 16]\nSum of squares(in main program): 30\', \"result = multiprocessing.Array(\'i\', 4)\", \"square_sum = multiprocessing.Value(\'i\')\", \"square_sum = multiprocessing.Value(\'i\', 10)\", \'p1 = multiprocessing.Process(target=square_list, args=(mylist, result, square_sum))\', \'for idx, num in enumerate(mylist):\n      result[idx] = num * num\', \'square_sum.value = sum(result)\', \'print(\"Result(in process p1): {}\".format(result[:]))\', \'print(\"Sum of squares(in process p1): {}\".format(square_sum.value))\', \'New record added!\n\nName: Sam\nScore: 10\n\nName: Adam\nScore: 9\n\nName: Kevin\nScore: 9\n\nName: Jeff\nScore: 8\', \'with multiprocessing.Manager() as manager:\', \"records = manager.list([(\'Sam\', 10), (\'Adam\', 9), (\'Kevin\',9)])\", \'Queue elements:\n1\n4\n9\n16\nQueue is now empty!\', \'q = multiprocessing.Queue()\', \'q.put(num * num)\', \'while not q.empty():\n      print(q.get())\', \'Sent the message: hello\nSent the message: hey\nSent the message: hru?\nReceived the message: hello\nSent the message: END\nReceived the message: hey\nReceived the message: hru?\', \'parent_conn, child_conn = multiprocessing.Pipe()\', \'conn.send(msg)\', \'msg = conn.recv()\']','[]','[\'run independently|||have their own memory space.&&&In square_list function. Since, this function is called by process p1, result list is changed in memory space of process p1 only.|||After the completion of process p1 in main program. Since main program is run by a different process, its memory space still contains the empty result list.&&&Array: a ctypes array allocated from shared memory.|||Value: a ctypes object allocated from shared memory.&&&First of all, we create an Array result like this:  result = multiprocessing.Array(\'i\', 4)\nFirst argument is the data type. ‘i’ stands for integer whereas ‘d’ stands for float data type.Second argument is the size of array. Here, we create an array of 4 elements.Similarly, we create a Value square_sum like this:  square_sum = multiprocessing.Value(\'i\')\nHere, we only need to specify data type. The value can be given an initial value(say 10) like this:  square_sum = multiprocessing.Value(\'i\', 10)\n|||First argument is the data type. ‘i’ stands for integer whereas ‘d’ stands for float data type.|||Second argument is the size of array. Here, we create an array of 4 elements.|||Secondly, we pass result and square_sum as arguments while creating Process object.  p1 = multiprocessing.Process(target=square_list, args=(mylist, result, square_sum))\n|||result array elements are given a value by specifying index of array element.  for idx, num in enumerate(mylist):\n      result[idx] = num * num\nsquare_sum is given a value by using its value attribute:  square_sum.value = sum(result)\n|||In order to print result array elements, we use result[:] to print complete array.  print(\"Result(in process p1): {}\".format(result[:]))\nValue of square_sum is simply printed as:  print(\"Sum of squares(in process p1): {}\".format(square_sum.value))\n&&&First argument is the data type. ‘i’ stands for integer whereas ‘d’ stands for float data type.|||Second argument is the size of array. Here, we create an array of 4 elements.&&&First of all, we create a manager object using:  with multiprocessing.Manager() as manager:\nAll the lines under with statement block are under the scope of manager object.&&&Then, we create a list records in server process memory using:  records = manager.list([(\'Sam\', 10), (\'Adam\', 9), (\'Kevin\',9)])\nSimilarly, you can create a dictionary as manager.dict method.&&&Finally, we create to processes p1 (to insert a new record in records list) and p2 (to print records) and run them while passing records as one of the arguments.&&&Queue|||Pipe&&&Firstly, we create a multiprocessing Queue using:  q = multiprocessing.Queue()\n|||Then we pass empty queue q to square_list function through process p1. Elements are inserted to queue using put method.  q.put(num * num)\n|||In order to print queue elements, we use get method until queue is not empty.  while not q.empty():\n      print(q.get())\n&&&A pipe was created simply using:  parent_conn, child_conn = multiprocessing.Pipe()\nThe function returned two connection objects for the two ends of the pipe.|||Message is sent from one end of pipe to another using send method.  conn.send(msg)\n|||To receive any messages at one end of a pipe, we use recv method.  msg = conn.recv()\n|||In above program, we send a list of messages from one end to another. At the other end, we read messages until we receive “END” message.&&&Synchronization and Pooling of processes in Python&&&&&&Shared memory : multiprocessing module provides Array and Value objects to share data between processes.Array: a ctypes array allocated from shared memory.Value: a ctypes object allocated from shared memory.Given below is a simple example showing use of Array and Value for sharing data between processes.import multiprocessingdef square_list(mylist, result, square_sum):\"\"\"function to square a given list\"\"\"# append squares of mylist to result arrayfor idx, num in enumerate(mylist):result[idx] = num * num# square_sum valuesquare_sum.value = sum(result)# print result Arrayprint(\"Result(in process p1): {}\".format(result[:]))# print square_sum Valueprint(\"Sum of squares(in process p1): {}\".format(square_sum.value))if __name__ == \"__main__\":# input listmylist = [1,2,3,4]# creating Array of int data type with space for 4 integersresult = multiprocessing.Array(\'i\', 4)# creating Value of int data typesquare_sum = multiprocessing.Value(\'i\')# creating new processp1 = multiprocessing.Process(target=square_list, args=(mylist, result, square_sum))# starting processp1.start()# wait until the process is finishedp1.join()# print result arrayprint(\"Result(in main program): {}\".format(result[:]))# print square_sum Valueprint(\"Sum of squares(in main program): {}\".format(square_sum.value))Result(in process p1): [1, 4, 9, 16]\nSum of squares(in process p1): 30\nResult(in main program): [1, 4, 9, 16]\nSum of squares(in main program): 30\nLet us try to understand the above code line by line:First of all, we create an Array result like this:  result = multiprocessing.Array(\'i\', 4)\nFirst argument is the data type. ‘i’ stands for integer whereas ‘d’ stands for float data type.Second argument is the size of array. Here, we create an array of 4 elements.Similarly, we create a Value square_sum like this:  square_sum = multiprocessing.Value(\'i\')\nHere, we only need to specify data type. The value can be given an initial value(say 10) like this:  square_sum = multiprocessing.Value(\'i\', 10)\nSecondly, we pass result and square_sum as arguments while creating Process object.  p1 = multiprocessing.Process(target=square_list, args=(mylist, result, square_sum))\nresult array elements are given a value by specifying index of array element.  for idx, num in enumerate(mylist):\n      result[idx] = num * num\nsquare_sum is given a value by using its value attribute:  square_sum.value = sum(result)\nIn order to print result array elements, we use result[:] to print complete array.  print(\"Result(in process p1): {}\".format(result[:]))\nValue of square_sum is simply printed as:  print(\"Sum of squares(in process p1): {}\".format(square_sum.value))\nHere is a diagram depicting how processes share Array and Value object:|||Array: a ctypes array allocated from shared memory.|||Value: a ctypes object allocated from shared memory.|||First of all, we create an Array result like this:  result = multiprocessing.Array(\'i\', 4)\nFirst argument is the data type. ‘i’ stands for integer whereas ‘d’ stands for float data type.Second argument is the size of array. Here, we create an array of 4 elements.Similarly, we create a Value square_sum like this:  square_sum = multiprocessing.Value(\'i\')\nHere, we only need to specify data type. The value can be given an initial value(say 10) like this:  square_sum = multiprocessing.Value(\'i\', 10)\n|||First argument is the data type. ‘i’ stands for integer whereas ‘d’ stands for float data type.|||Second argument is the size of array. Here, we create an array of 4 elements.|||Secondly, we pass result and square_sum as arguments while creating Process object.  p1 = multiprocessing.Process(target=square_list, args=(mylist, result, square_sum))\n|||result array elements are given a value by specifying index of array element.  for idx, num in enumerate(mylist):\n      result[idx] = num * num\nsquare_sum is given a value by using its value attribute:  square_sum.value = sum(result)\n|||In order to print result array elements, we use result[:] to print complete array.  print(\"Result(in process p1): {}\".format(result[:]))\nValue of square_sum is simply printed as:  print(\"Sum of squares(in process p1): {}\".format(square_sum.value))\n|||Server process : Whenever a python program starts, a server process is also started. From there on, whenever a new process is needed, the parent process connects to the server and requests it to fork a new process.A server process can hold Python objects and allows other processes to manipulate them using proxies.multiprocessing module provides a Manager class which controls a server process. Hence, managers provide a way to create data that can be shared between different processes.Server process managers are more flexible than using shared memory objects because they can be made to support arbitrary object types like lists, dictionaries, Queue, Value, Array, etc. Also, a single manager can be shared by processes on different computers over a network. They are, however, slower than using shared memory.\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        Consider the example given below:import multiprocessingdef print_records(records):\"\"\"function to print record(tuples) in records(list)\"\"\"for record in records:print(\"Name: {0}\\nScore: {1}\\n\".format(record[0], record[1]))def insert_record(record, records):\"\"\"function to add a new record to records(list)\"\"\"records.append(record)print(\"New record added!\\n\")if __name__ == \'__main__\':with multiprocessing.Manager() as manager:# creating a list in server process memoryrecords = manager.list([(\'Sam\', 10), (\'Adam\', 9), (\'Kevin\',9)])# new record to be inserted in recordsnew_record = (\'Jeff\', 8)# creating new processesp1 = multiprocessing.Process(target=insert_record, args=(new_record, records))p2 = multiprocessing.Process(target=print_records, args=(records,))# running process p1 to insert new recordp1.start()p1.join()# running process p2 to print recordsp2.start()p2.join()New record added!\n\nName: Sam\nScore: 10\n\nName: Adam\nScore: 9\n\nName: Kevin\nScore: 9\n\nName: Jeff\nScore: 8\nLet us try to understand above piece of code:First of all, we create a manager object using:  with multiprocessing.Manager() as manager:\nAll the lines under with statement block are under the scope of manager object.Then, we create a list records in server process memory using:  records = manager.list([(\'Sam\', 10), (\'Adam\', 9), (\'Kevin\',9)])\nSimilarly, you can create a dictionary as manager.dict method.Finally, we create to processes p1 (to insert a new record in records list) and p2 (to print records) and run them while passing records as one of the arguments.The concept of server process is depicted in the diagram shown below:|||First of all, we create a manager object using:  with multiprocessing.Manager() as manager:\nAll the lines under with statement block are under the scope of manager object.|||Then, we create a list records in server process memory using:  records = manager.list([(\'Sam\', 10), (\'Adam\', 9), (\'Kevin\',9)])\nSimilarly, you can create a dictionary as manager.dict method.|||Finally, we create to processes p1 (to insert a new record in records list) and p2 (to print records) and run them while passing records as one of the arguments.&&&Queue : A simple way to communicate between process with multiprocessing is to use a Queue to pass messages back and forth. Any Python object can pass through a Queue.Note: The multiprocessing.Queue class is a near clone of queue.Queue.Consider the example program given below:import multiprocessingdef square_list(mylist, q):\"\"\"function to square a given list\"\"\"# append squares of mylist to queuefor num in mylist:q.put(num * num)def print_queue(q):\"\"\"function to print queue elements\"\"\"print(\"Queue elements:\")while not q.empty():print(q.get())print(\"Queue is now empty!\")if __name__ == \"__main__\":# input listmylist = [1,2,3,4]# creating multiprocessing Queueq = multiprocessing.Queue()# creating new processesp1 = multiprocessing.Process(target=square_list, args=(mylist, q))p2 = multiprocessing.Process(target=print_queue, args=(q,))# running process p1 to square listp1.start()p1.join()# running process p2 to get queue elementsp2.start()p2.join()Queue elements:\n1\n4\n9\n16\nQueue is now empty!\nLet us try to understand the above code step by step:Firstly, we create a multiprocessing Queue using:  q = multiprocessing.Queue()\nThen we pass empty queue q to square_list function through process p1. Elements are inserted to queue using put method.  q.put(num * num)\nIn order to print queue elements, we use get method until queue is not empty.  while not q.empty():\n      print(q.get())\nGiven below is a simple diagram depicting the operations on queue:|||Firstly, we create a multiprocessing Queue using:  q = multiprocessing.Queue()\n|||Then we pass empty queue q to square_list function through process p1. Elements are inserted to queue using put method.  q.put(num * num)\n|||In order to print queue elements, we use get method until queue is not empty.  while not q.empty():\n      print(q.get())\n|||Pipes : A pipe can have only two endpoints. Hence, it is preferred over queue when only two-way communication is required.multiprocessing module provides Pipe() function which returns a pair of connection objects connected by a pipe. The two connection objects returned by Pipe() represent the two ends of the pipe. Each connection object has send() and recv() methods (among others).Consider the program given below:import multiprocessingdef sender(conn, msgs):\"\"\"function to send messages to other end of pipe\"\"\"for msg in msgs:conn.send(msg)print(\"Sent the message: {}\".format(msg))conn.close()def receiver(conn):\"\"\"function to print the messages received from otherend of pipe\"\"\"while 1:msg = conn.recv()if msg == \"END\":breakprint(\"Received the message: {}\".format(msg))if __name__ == \"__main__\":# messages to be sentmsgs = [\"hello\", \"hey\", \"hru?\", \"END\"]# creating a pipeparent_conn, child_conn = multiprocessing.Pipe()# creating new processesp1 = multiprocessing.Process(target=sender, args=(parent_conn,msgs))p2 = multiprocessing.Process(target=receiver, args=(child_conn,))# running processesp1.start()p2.start()# wait until processes finishp1.join()p2.join()Sent the message: hello\nSent the message: hey\nSent the message: hru?\nReceived the message: hello\nSent the message: END\nReceived the message: hey\nReceived the message: hru?\nLet us try to understand above code:A pipe was created simply using:  parent_conn, child_conn = multiprocessing.Pipe()\nThe function returned two connection objects for the two ends of the pipe.Message is sent from one end of pipe to another using send method.  conn.send(msg)\nTo receive any messages at one end of a pipe, we use recv method.  msg = conn.recv()\nIn above program, we send a list of messages from one end to another. At the other end, we read messages until we receive “END” message.Consider the diagram given below which shows the relation b/w pipe and processes:|||A pipe was created simply using:  parent_conn, child_conn = multiprocessing.Pipe()\nThe function returned two connection objects for the two ends of the pipe.|||Message is sent from one end of pipe to another using send method.  conn.send(msg)\n|||To receive any messages at one end of a pipe, we use recv method.  msg = conn.recv()\n|||In above program, we send a list of messages from one end to another. At the other end, we read messages until we receive “END” message.&&&\']'),(96,'[\'Socket Programming in Python\']','[\'Python3\', \'Python3\', \'Python3\']','[\'Connecting to a server:xa0\', \'A simple server-client program :xa0xa0\']','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://pythontips.com/2013/08/06/python-socket-network-programming/\', \'https://www.linkedin.com/in/kishlayverma/\', \'http://www.contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'You can also find the IP using python:xa0\', \'Here is an example of a script for connecting to Google.\', \'This output shows that our server is working.Now for the client-side:xa0\']','[\'Here we made a socket instance and passed it two parameters. The first parameter is AF_INET and the second one is SOCK_STREAM. AF_INET refers to the address-family ipv4. The SOCK_STREAM means connection-oriented TCP protocol.xa0Now we can connect to a server using this socket.3\', \'Note that if any error occurs during the creation of a socket then a socket. error is thrown and we can only connect to a server by knowing its IP. You can find the IP of the server by using this :xa0\', \'Client :xa0Now we need something with which a server can interact. We could tenet to the server like this just to know that our server is working. Type these commands in the terminal:xa0\', \'If ‘telnet’ is not recognized. On windows search windows features and turn on the “telnet client” feature.\']','[\'Socket programming is a way of connecting two nodes on a network to communicate with each other. One socket(node) listens on a particular port at an IP, while the other socket reaches out to the other to form a connection. The server forms the listener socket while the client reaches out to the server.xa0They are the real backbones behind web browsing. In simpler terms, there is a server and a client.xa0Socket programming is started by importing the socket library and making a simple socket.xa0\', \'A server has a bind() method which binds it to a specific IP and port so that it can listen to incoming requests on that IP and port. A server has a listen() method which puts the server into listening mode. This allows the server to listen to incoming connections. And last a server has an accept() and close() method. The accept method initiates a connection with the client and the close method closes the connection with the client.xa0\', \'Reference: Python Socket ProgrammingThis article is contributed by Kishlay Verma. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\'# An example script to connect to Google using socket# programming in Pythonimport socket # for socketimport sys try:    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    print (\"Socket successfully created\")except socket.error as err:    print (\"socket creation failed with error %s\" %(err)) # default port for socketport = 80 try:    host_ip = socket.gethostbyname(\'www.google.com\')except socket.gaierror:     # this means could not resolve the host    print (\"there was an error resolving the host\")    sys.exit() # connecting to the servers.connect((host_ip, port)) print (\"the socket has successfully connected to google\")\', \'# first of all import the socket libraryimport socket             # next create a socket objects = socket.socket()        print (\"Socket successfully created\") # reserve a port on your computer in our# case it is 12345 but it can be anythingport = 12345                # Next bind to the port# we have not typed any ip in the ip field# instead we have inputted an empty string# this makes the server listen to requests# coming from other computers on the networks.bind((\'\', port))        print (\"socket binded to %s\" %(port)) # put the socket into listening modes.listen(5)    print (\"socket is listening\")            # a forever loop until we interrupt it or# an error occurswhile True: # Establish connection with client.  c, addr = s.accept()      print (\'Got connection from\', addr )   # send a thank you message to the client. encoding to send byte type.  c.send(\'Thank you for connecting\'.encode())   # Close the connection with the client  c.close()     # Breaking once connection closed  break\', \"# Import socket moduleimport socket             # Create a socket objects = socket.socket()         # Define the port on which you want to connectport = 12345                # connect to the server on local computers.connect((\'127.0.0.1\', port)) # receive data from the server and decoding to get the string.print (s.recv(1024).decode())# close the connections.close()\"]','[\'import socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\', \'$ ping www.google.com\', \"import socket \n\nip = socket.gethostbyname(\'www.google.com\')\nprint ip\", \'Socket successfully created\nthe socket has successfully connected to google \non port == 173.194.40.19\', \'# start the server\n$ python server.py\n\n# keep the above terminal openxa0\n# now open another terminal and type:xa0\n \n$ telnet localhost 12345\', \"# in the server.py terminal you will see\n# this output:\nSocket successfully created\nsocket binded to 12345\nsocket is listening\nGot connection from (\'127.0.0.1\', 52617)\", \"# In the telnet terminal you will get this:\nTrying ::1...\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is \'^]\'.\nThank you for connectingConnection closed by foreign host.\", \"# start the server:\n$ python server.py\nSocket successfully created\nsocket binded to 12345\nsocket is listening\nGot connection from (\'127.0.0.1\', 52617)\", \'# start the client:\n$ python client.py\nThank you for connecting\']','[]','[\'First of all, we made a socket.|||Then we resolved google’s IP and lastly, we connected to google.|||Now we need to know how can we send some data through a socket.|||For sending data the socket library has a sendall function. This function allows you to send data to a server to which the socket is connected and the server can also send data to the client using this function.&&&First of all, we import socket which is necessary.|||Then we made a socket object and reserved a port on our pc.|||After that, we bound our server to the specified port. Passing an empty string means that the server can listen to incoming connections from other computers as well. If we would have passed 127.0.0.1 then it would have listened to only those calls made within the local computer.|||After that we put the server into listening mode.5 here means that 5 connections are kept waiting if the server is busy and if a 6th socket tries to connect then the connection is refused.|||At last, we make a while loop and start to accept all incoming connections and close those connections after a thank you message to all connected sockets.&&&First of all, we make a socket object.|||Then we connect to localhost on port 12345 (the port on which our server runs) and lastly, we receive data from the server and close the connection.|||Now save this file as client.py and run it from the terminal after starting the server script.\']'),(97,'[\'Socket Programming with Multi-threading in Python\']','[\'Python3\', \'Python\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/socket-programming-python/\', \'https://www.geeksforgeeks.org/multithreading-python-set-1/\', \'https://docs.python.org/2/library/thread.html\', \'https://www.linkedin.com/in/shaurya-uppal-3b7a6373/\', \'http://www.write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'A lock object is created by->xa0xa0\', \'Client Codexa0xa0\']','[\'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Prerequisite : Socket Programming in Python, Multi-threading in PythonSocket Programming-> It helps us to connect a client to a server. Client is message sender and receiver and server is just a listener that works on data sent by client.What is a Thread?xa0A thread is a light-weight process that does not require much memory overhead, they are cheaper than processes.What is Multi-threading Socket Programming?xa0Multithreading is a process of executing multiple threads simultaneously in a single process.Multi-threading Modules :xa0A _thread module & threading module is used for multi-threading in python, these modules help in synchronization and provide a lock to a thread in use.xa0xa0\', \'A lock has two states, “locked” or “unlocked”. It has two basic methods acquire() and release(). When the state is unlocked print_lock.acquire() is used to change state to locked and print_lock.release() is used to change state to unlock.The function thread.start_new_thread() is used to start a new thread and return its identifier. The first argument is the function to call and its second argument is a tuple containing the positional list of arguments.Let’s study client-server multithreading socket programming by code-xa0Note:-The code works with python3.xa0Multi-threaded Server Codexa0xa0\', \'Reference->xa0https://docs.python.org/2/library/thread.htmlThis article is contributed by SHAURYA UPPAL. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\'# import socket programming libraryimport socket # import thread modulefrom _thread import *import threading print_lock = threading.Lock() # thread functiondef threaded(c):    while True:         # data received from client        data = c.recv(1024)        if not data:            print(\'Bye\')                         # lock released on exit            print_lock.release()            break         # reverse the given string from client        data = data[::-1]         # send back reversed string to client        c.send(data)     # connection closed    c.close()  def Main():    host = \"\"     # reverse a port on your computer    # in our case it is 12345 but it    # can be anything    port = 12345    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    s.bind((host, port))    print(\"socket binded to port\", port)     # put the socket into listening mode    s.listen(5)    print(\"socket is listening\")     # a forever loop until client wants to exit    while True:         # establish connection with client        c, addr = s.accept()         # lock acquired by client        print_lock.acquire()        print(\'Connected to :\', addr[0], \':\', addr[1])         # Start a new thread and return its identifier        start_new_thread(threaded, (c,))    s.close()  if __name__ == \'__main__\':    Main()\', \'# Import socket moduleimport socket  def Main():    # local host IP \'127.0.0.1\'    host = \'127.0.0.1\'     # Define the port on which you want to connect    port = 12345     s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)     # connect to server on local computer    s.connect((host,port))     # message you send to server    message = \"shaurya says geeksforgeeks\"    while True:         # message sent to server        s.send(message.encode(\'ascii\'))         # message received from server        data = s.recv(1024)         # print the received message        # here it would be a reverse of sent message        print(\'Received from the server :\',str(data.decode(\'ascii\')))         # ask the client whether he wants to continue        ans = input(\'\\nDo you want to continue(y/n) :\')        if ans == \'y\':            continue        else:            break    # close the connection    s.close() if __name__ == \'__main__\':    Main()\']','[\'from _thread import *\nimport threading\', \'print_lock = threading.Lock()\', \'Console Window:\nsocket binded to port 12345\nsocket is listening\nConnected to : 127.0.0.1 : 11600\nBye\', \'Console Window:\nReceived from the server : skeegrofskeeg syas ayruahs\n\nDo you want to continue(y/n) :y\nReceived from the server : skeegrofskeeg syas ayruahs\n\nDo you want to continue(y/n) :n\n\nProcess finished with exit code 0\']','[]','[]'),(98,'[\'NumPy Tutorial\']','[\'Introduction\', \'Creating NumPy Array\', \'NumPy Array Manipulation\', \'Matrix in NumPy\', \'Operations on NumPy Array\', \'Reshaping NumPy Array\', \'Indexing NumPy Array\', \'Arithmetic operations on NumPy Array\', \'Linear Algebra in NumPy Array\', \'NumPy and Random Data\', \'Sorting and Searching in NumPy Array\', \'Universal Functions\', \'Working With Images\', \'Projects and Applications with NumPy\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/tag/python-numpy/\', \'https://www.geeksforgeeks.org/numpy-in-python-set-1-introduction/\', \'https://www.geeksforgeeks.org/python-numpy/\', \'https://www.geeksforgeeks.org/numpy-array-in-python/\', \'https://www.geeksforgeeks.org/basics-of-numpy-arrays/\', \'https://www.geeksforgeeks.org/python-lists-vs-numpy-arrays/\', \'https://www.geeksforgeeks.org/numpy-ndarray/\', \'https://www.geeksforgeeks.org/data-type-object-dtype-numpy-python/\', \'https://www.geeksforgeeks.org/numpy-array-creation/\', \'https://www.geeksforgeeks.org/numpy-arange-python/\', \'https://www.geeksforgeeks.org/numpy-zeros-python/\', \'https://www.geeksforgeeks.org/create-a-numpy-array-filled-with-all-ones/\', \'https://www.geeksforgeeks.org/numpy-linspace-python/\', \'https://www.geeksforgeeks.org/numpy-eye-python/\', \'https://www.geeksforgeeks.org/numpy-meshgrid-function/\', \'https://www.geeksforgeeks.org/creating-a-one-dimensional-numpy-array/\', \'https://www.geeksforgeeks.org/how-to-create-an-empty-and-a-full-numpy-array/\', \'https://www.geeksforgeeks.org/create-a-numpy-array-filled-with-all-zeros-python/\', \'https://www.geeksforgeeks.org/create-a-numpy-array-filled-with-all-ones/\', \'https://www.geeksforgeeks.org/how-to-generate-2-d-gaussian-array-using-numpy/\', \'https://www.geeksforgeeks.org/how-to-create-a-vector-in-python-using-numpy/\', \'https://www.geeksforgeeks.org/python-numpy-fromrecords-method/\', \'https://www.geeksforgeeks.org/copy-and-view-in-numpy-array/\', \'https://www.geeksforgeeks.org/how-to-copy-numpy-array-into-another-array/\', \'https://www.geeksforgeeks.org/appending-values-at-the-end-of-an-numpy-array/\', \'https://www.geeksforgeeks.org/how-to-swap-columns-of-a-given-numpy-array/\', \'https://www.geeksforgeeks.org/insert-a-new-axis-within-a-numpy-array/\', \'https://www.geeksforgeeks.org/numpy-hstack-in-python/\', \'https://www.geeksforgeeks.org/numpy-vstack-in-python/\', \'https://www.geeksforgeeks.org/joining-numpy-array/\', \'https://www.geeksforgeeks.org/combining-a-one-and-a-two-dimensional-numpy-array/\', \'https://www.geeksforgeeks.org/python-numpy-np-ma-concatenate-method/\', \'https://www.geeksforgeeks.org/python-numpy-dstack-method/\', \'https://www.geeksforgeeks.org/splitting-arrays-in-numpy/\', \'https://www.geeksforgeeks.org/how-to-compare-two-numpy-arrays/\', \'https://www.geeksforgeeks.org/find-the-union-of-two-numpy-arrays/\', \'https://www.geeksforgeeks.org/find-unique-rows-in-a-numpy-array/\', \'https://www.geeksforgeeks.org/python-numpy-np-unique-method/\', \'https://www.geeksforgeeks.org/numpy-trim_zeros-in-python/\', \'https://www.geeksforgeeks.org/matrix-manipulation-python/\', \'https://www.geeksforgeeks.org/numpy-matrix-operations-empty-function/\', \'https://www.geeksforgeeks.org/numpy-matrix-operations-zeros-function/\', \'https://www.geeksforgeeks.org/numpy-matrix-operations-ones-function/\', \'https://www.geeksforgeeks.org/numpy-matrix-operations-eye-function/\', \'https://www.geeksforgeeks.org/numpy-matrix-operations-identity-function/\', \'https://www.geeksforgeeks.org/adding-and-subtracting-matrices-in-python/\', \'https://www.geeksforgeeks.org/matrix-multiplication-in-numpy/\', \'https://www.geeksforgeeks.org/numpy-ndarray-dot-function-python/\', \'https://www.geeksforgeeks.org/numpy-vector-multiplication/\', \'https://www.geeksforgeeks.org/how-to-calculate-dot-product-of-two-vectors-in-python/\', \'https://www.geeksforgeeks.org/multiplication-two-matrices-single-line-using-numpy-python/\', \'https://www.geeksforgeeks.org/python-numpy-np-eigvals-method/\', \'https://www.geeksforgeeks.org/how-to-calculate-the-determinant-of-a-matrix-using-numpy/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-transpose/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-var/\', \'https://www.geeksforgeeks.org/compute-the-inverse-of-a-matrix-using-numpy/\', \'https://www.geeksforgeeks.org/numpy-binary-operations/\', \'https://www.geeksforgeeks.org/numpy-mathematical-function/\', \'https://www.geeksforgeeks.org/numpy-string-operations/\', \'https://www.geeksforgeeks.org/reshape-numpy-array/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-resize/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-reshape/\', \'https://www.geeksforgeeks.org/numpy-array-shape/\', \'https://www.geeksforgeeks.org/change-the-dimension-of-a-numpy-array/\', \'https://www.geeksforgeeks.org/numpy-ndarray-resize-function-python/\', \'https://www.geeksforgeeks.org/flatten-a-matrix-in-python-using-numpy/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-ravel/\', \'https://www.geeksforgeeks.org/numpy-moveaxis-function-python/\', \'https://www.geeksforgeeks.org/numpy-swapaxes-function-python/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-swapaxes/\', \'https://www.geeksforgeeks.org/numpy-vsplit-function-python/\', \'https://www.geeksforgeeks.org/numpy-hsplit-function-python/\', \'https://www.geeksforgeeks.org/numpy-maskedarray-reshape-function-python/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-squeeze/\', \'https://www.geeksforgeeks.org/indexing-in-numpy/\', \'https://www.geeksforgeeks.org/numpy-compress-python/\', \'https://www.geeksforgeeks.org/accessing-data-along-multiple-dimensions-arrays-in-python-numpy/\', \'https://www.geeksforgeeks.org/how-to-access-different-rows-of-a-multidimensional-numpy-array/\', \'https://www.geeksforgeeks.org/numpy-tril_indices-function-python/\', \'https://www.geeksforgeeks.org/python-broadcasting-with-numpy-arrays/\', \'https://www.geeksforgeeks.org/estimation-of-variable-set-1/\', \'https://www.geeksforgeeks.org/python-operations-on-numpy-arrays/\', \'https://www.geeksforgeeks.org/how-to-use-the-numpy-sum-function/\', \'https://www.geeksforgeeks.org/numpy-divide-python/\', \'https://www.geeksforgeeks.org/numpy-inner-in-python/\', \'https://www.geeksforgeeks.org/absolute-deviation-and-absolute-mean-deviation-using-numpy-python/\', \'https://www.geeksforgeeks.org/find the standard deviation a matrix\', \'https://www.geeksforgeeks.org/numpy-gcd-in-python/\', \'https://www.geeksforgeeks.org/numpy-linear-algebra/\', \'https://www.geeksforgeeks.org/get-the-qr-factorization-of-a-given-numpy-array/\', \'https://www.geeksforgeeks.org/how-to-get-the-magnitude-of-a-vector-in-numpy/\', \'https://www.geeksforgeeks.org/how-to-compute-the-eigenvalues-and-right-eigenvectors-of-a-given-square-array-using-numpy/\', \'https://www.geeksforgeeks.org/random-sampling-in-numpy-ranf-function/\', \'https://www.geeksforgeeks.org/random-sampling-in-numpy-random-function/\', \'https://www.geeksforgeeks.org/random-sampling-in-numpy-random_sample-function/\', \'https://www.geeksforgeeks.org/random-sampling-in-numpy-sample-function/\', \'https://www.geeksforgeeks.org/random-sampling-in-numpy-random_integers-function/\', \'https://www.geeksforgeeks.org/random-sampling-in-numpy-randint-function/\', \'https://www.geeksforgeeks.org/numpy-random-choice-in-python/\', \'https://www.geeksforgeeks.org/how-to-choose-elements-from-the-list-with-different-probability-using-numpy/\', \'https://www.geeksforgeeks.org/how-to-get-weighted-random-choice-in-python/\', \'https://www.geeksforgeeks.org/numpy-random-shuffle-in-python/\', \'https://www.geeksforgeeks.org/numpy-random-geometric-in-python/\', \'https://www.geeksforgeeks.org/numpy-random-permutation-in-python/\', \'https://www.geeksforgeeks.org/searching-in-a-numpy-array/\', \'https://www.geeksforgeeks.org/how-to-sort-a-numpy-array-python/\', \'https://www.geeksforgeeks.org/numpy-sorting-searching-and-counting/\', \'https://www.geeksforgeeks.org/sort-sorteda-np-argsorta-np-lexsortb-python/\', \'https://www.geeksforgeeks.org/numpy-sort_complex-in-python/\', \'https://www.geeksforgeeks.org/python-numpy-np-ma-mini-method/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-sort/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-argsort/\', \'https://www.geeksforgeeks.org/numpy-ufunc-universal-functions/\', \'https://www.geeksforgeeks.org/create-your-own-universal-function-in-numpy/\', \'https://www.geeksforgeeks.org/create-a-white-image-using-numpy-in-python/\', \'https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/\', \'https://www.geeksforgeeks.org/how-to-convert-images-to-numpy-array/\', \'https://www.geeksforgeeks.org/how-to-convert-an-image-to-numpy-array-and-saveit-to-csv-file-using-python/\', \'https://www.geeksforgeeks.org/python-program-print-checkerboard-pattern-nxn-using-numpy/\', \'https://www.geeksforgeeks.org/implementation-of-neural-network-from-scratch-using-numpy/\', \'https://www.geeksforgeeks.org/analyzing-selling-price-of-used-cars-using-python/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Recent Articles on NumPy !!\']','[\'This NumPy tutorial helps you learn the fundamentals of NumPy from Basics to Advance, like operations on NumPy array, matrices using a huge dataset of NumPy – programs and projects.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Python NumPy is a general-purpose array processing package which provides tools for handling the n-dimensional arrays. It provides various computing tools such as comprehensive mathematical functions, linear algebra routines. NumPy provides both the flexibility of Python and the speed of well-optimized compiled C code. It’s easy to use syntax makes it highly accessible and productive for programmers from any background.\']','[]','[]','[]','[\'Introduction to Numpy|||Python NumPy|||NumPy array in Python|||Basics of NumPy Arrays|||Python Lists VS Numpy Arrays|||Numpy – ndarray|||Data type Object (dtype) in NumPy Python&&&Numpy – Array Creation|||The Arange Method|||The Zero Method|||Create a Numpy array filled with all ones|||The linspace Method|||The eye Method|||Numpy Meshgrid function|||Creating a one-dimensional NumPy array|||How to create an empty and a full NumPy array?|||Create a Numpy array filled with all zeros|||Create a Numpy array filled with all ones|||How to generate 2-D Gaussian array using NumPy?|||How to create a vector in Python using NumPy|||Create the record array from list of individual records&&&Copy and View in NumPy Array|||How to Copy NumPy array into another array?|||Appending values at the end of an NumPy array|||How to swap columns of a given NumPy array?|||Insert a new axis within a NumPy array|||Stack the sequence of NumPy array horizontally|||Stack the sequence of NumPy array vertically|||Joining NumPy Array|||Combining a one and a two-dimensional NumPy Array|||Concatenate two arrays – np.ma.concatenate()|||Combined array index by index|||Splitting Arrays in NumPy|||Compare two NumPy arrays|||Find the union of two NumPy arrays|||Find unique rows in a NumPy array|||Get the unique values from an array|||Trim the leading and/or trailing zeros from a 1-D array&&&Matrix manipulation in Python|||numpy matrix operations | empty() function|||numpy matrix operations | zeros() function|||numpy matrix operations | ones() function|||numpy matrix operations | eye() function|||numpy matrix operations | identity() function|||Adding and Subtracting Matrices in Python|||Matrix Multiplication in NumPy|||Dot product of two arrays|||NumPy | Vector Multiplication|||How to calculate dot product of two vectors in Python?|||Multiplication of two Matrices in Single line using Numpy in Python|||Get the eigen values of a matrix|||Calculate the determinant of a matrix using NumPy|||Find the transpose of the matrix|||Find the variance of a matrix|||Compute the inverse of a matrix using NumPy&&&Numpy – Binary Operations|||Numpy – Mathematical Function|||Numpy – String Operations&&&Reshape NumPy Array|||Resize the shape of the given matrix|||Reshape the shape of the given matrix|||Get the Shape of NumPy Array|||Change the dimension of a NumPy array|||Change shape and size of array in-place|||Flatten a Matrix in Python using NumPy|||Flatten a matrix – matrix.ravel()|||Move axes of an array to new positions|||Interchange two axes of an array|||Swap the axes a matrix|||Split an array into multiple sub-arrays vertically|||Split an array into multiple sub-arrays horizontally|||Give a new shape to the masked array without changing its data|||Squeeze the size of a matrix&&&Basic Slicing and Advanced Indexing in NumPy Python|||Get selected slices of an array along mentioned axis|||Accessing Data Along Multiple Dimensions Arrays in Python Numpy|||How to access different rows of a multidimensional NumPy array?|||Get the indices for the lower-triangle of an (n, m) array&&&Broadcasting with NumPy Arrays|||Estimation of Variable|||Python: Operations on Numpy Arrays|||How to use the NumPy sum function?|||Divide the NumPy array element wise|||Computes the inner product of two arrays|||Absolute Deviation and Absolute Mean Deviation using NumPy|||Find the standard deviation a matrix|||Calculate the GCD of the NumPy array&&&Numpy | Linear Algebra|||Get the QR factorization of a given NumPy array|||How to get the magnitude of a vector in NumPy?|||Compute the eigenvalues and right eigenvectors of a given square array using NumPy?&&&Random sampling in numpy | ranf() function|||Random sampling in numpy | random() function|||Random sampling in numpy | random_sample() function|||Random sampling in numpy | sample() function|||Random sampling in numpy | random_integers() function|||Random sampling in numpy | randint() function|||Get random elements from NumPy – random.choice()|||How to choose elements from the list with different probability using NumPy?|||How to get weighted random choice in Python?|||How to get the random positioning of different integer values?|||Get Random Elements form geometric distribution|||Get Random samples of a sequence of permutation&&&Searching in a NumPy array|||How to sort a Numpy Array|||Numpy – Sorting, Searching and Counting|||Variations in different Sorting techniques in Python|||Sort a complex array|||Get the minimum value of masked array|||Sort the values in a matrix|||Sort the elements in the given matrix having one or more dimension&&&Numpy ufunc | Universal functions|||Create your own universal function in NumPy&&&Create a white image using NumPy in Python|||Convert a NumPy array to an image|||How to Convert images to NumPy array?|||Convert an image to NumPy array and save it to CSV file using Python?&&&Print checkerboard pattern of nxn using numpy|||Implementation of neural network from scratch using NumPy|||Analyzing selling price of used cars using Python\']'),(99,'[\'Basic Slicing and Advanced Indexing in NumPy Python\']','[\'Python\', \'Python\', \'Python\', \'Python\', \'Python\', \'Python\', \'Python\', \'Python\', \'Python\', \'Python\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://write.geeksforgeeks.org/introduction-to-numpy-set-1-all-changes-made/\', \'https://docs.scipy.org/doc/numpy-dev/user/quickstart.html\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Why do we need NumPy ?\', \'Where as this can easily be done with NumPy arrays.\', \'Another example,\', \'Indexing using index arrays\', \'Another example,\', \'Types of Indexing\', \'There are two types of indexing :\', \'All arrays generated by basic slicing are always view of the original array.\', \'2. Advanced indexing : Advanced indexing is triggered when obj is :xa0\']','[\'Prerequisites : Numpy in Python IntroductionNumPy or Numeric Python is a package for computation on homogeneous n-dimensional arrays. In numpy dimensions are called as axes.\', \'A question arises that why do we need NumPy when python lists are already there. The answer to it is we cannot perform operations on all the elements of two list directly. For example we cannot multiply two lists directly we will have to do it element wise. This is where the role of NumPy comes into play.\', \'This article will help you get acquainted with indexing in NumPy in detail. Numpy package of python has a great power of indexing in different ways.xa0\', \'Indexing can be done in numpy by using an array as an index. In case of slice, a view or shallow copy of the array is returned but in index array a copy of the original array is returned. Numpy arrays can be indexed with other arrays or any other sequence with the exception of tuples. The last element is indexed by -1 second last by -2 and so on.\', \'1. Basic Slicing and indexing : Consider the syntax x[obj] where x is the array and obj is the index. Slice object is the index in case of basic slicing. Basic slicing occurs when obj is :\', \'Ellipsis can also be used along with basic slicing. Ellipsis (…) is the number of : objects needed to make a selection tuple of the same length as the dimensions of the array.\', \'Advanced indexing returns a copy of data rather than a view of it. Advanced indexing is of two types integer and Boolean.\', \'Purely integer indexing : When integers are used for indexing. Each element of first dimension is paired with the element of the second dimension. So the index of the elements in this case are (0,0),(1,0),(2,1) and the corresponding elements are selected.\', \'Boolean Indexingxa0This indexing has some boolean expression as the index. Those elements are returned which satisfy that Boolean expression. It is used for filtering the desired element values.\']','[\'Reference :xa0SciPy.orgThis article is contributed by Ayushi Asthana. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\'# Python program to demonstrate a need of NumPy list1 = [1, 2, 3, 4 ,5, 6]list2 = [10, 9, 8, 7, 6, 5] # Multiplying both lists directly would give an error.print(list1*list2)\', \'# Python program to demonstrate the use of NumPy arraysimport numpy as np list1 = [1, 2, 3, 4, 5, 6]list2 = [10, 9, 8, 7, 6, 5] # Convert list1 into a NumPy arraya1 = np.array(list1) # Convert list2 into a NumPy arraya2 = np.array(list2) print(a1*a2)\', \'# Python program to demonstrate# the use of index arrays.import numpy as np # Create a sequence of integers from 10 to 1 with a step of -2a = np.arrange(10, 1, -2)print(\"\\n A sequential array with a negative step: \\n\",a) # Indexes are specified inside the np.array method.newarr = a[np.array([3, 1, 2 ])]print(\"\\n Elements at these indices are:\\n\",newarr)\', \'import numpy as np # NumPy array with elements from 1 to 9x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) # Index values can be negative.arr = x[np.array([1, 3, -3])]print(\"\\n Elements are : \\n\",arr)\', \'# Python program for basic slicing.import numpy as np # Arrange elements from 0 to 19a = np.arrange(20)print(\"\\n Array is:\\n \",a) # a[start:stop:step]print(\"\\n a[-8:17:1] = \",a[-8:17:1]) # The : operator means all elements till the end.print(\"\\n a[10:] = \",a[10:])\', \'# Python program for indexing using basic slicing with ellipsisimport numpy as np # A 3 dimensional array.b = np.array([[[1, 2, 3],[4, 5, 6]],            [[7, 8, 9],[10, 11, 12]]]) print(b[...,1]) #Equivalent to b[: ,: ,1 ]\', \'# Python program showing advanced indexingimport numpy as np a = np.array([[1 ,2 ],[3 ,4 ],[5 ,6 ]])print(a[[0 ,1 ,2 ],[0 ,0 ,1]])\', \'# You may wish to select numbers greater than 50import numpy as np a = np.array([10, 40, 80, 50, 100])print(a[a>50])\', \'# You may wish to square the multiples of 40import numpy as np a = np.array([10, 40, 80, 50, 100])print(a[a%40==0]**2)\', \'# You may wish to select those elements whose# sum of row is a multiple of 10.import numpy as np b = np.array([[5, 5],[4, 5],[16, 4]])sumrow = b.sum(-1)print(b[sumrow%10==0])\']','[\"TypeError: can\'t multiply sequence by non-int of type \'list\'\", \'array([10, 18, 24, 28, 30, 30])\', \'A sequential array with a negative step:\n[10  8  6  4  2]\n\nElements at these indices are:\n[4 8 6]\', \'Elements are:\n[2 4 7]\', \'Array is:\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n\na[-8:17:1]  =  [12 13 14 15 16]\n\na[10:] = [10 11 12 13 14 15 16 17 18 19]\', \'[[ 2  5]\n [ 8 11]]\', \'[1 3 6]\', \'[80 100]\', \'[1600 6400])\', \'array([[ 5, 5], [16, 4]])\']','[]','[\'an ndarray of type integer or Boolean|||or a tuple with at least one sequence object|||is a non tuple sequence object&&&&&&a slice object that is of the form start : stop : step|||an integer|||or a tuple of slice objects and integers&&&\']'),(100,'[\'Random sampling in numpy | randint() function\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax : numpy.random.randint(low, high=None, size=None, dtype=’l’)\', \'xa0Code #3 :\']','[\'numpy.random.randint() is one of the function for doing random sampling in numpy. It returns an array of specified shape and fills it with random integers from low (inclusive) to high (exclusive), i.e. in the interval [low, high).\', \'Return : Array of random integers in the interval [low, high) or a single such random int if size not provided.\']','[\'Parameters :low : [int] Lowest (signed) integer to be drawn from the distribution.But, it works as a highest integer in the sample if high=None.high : [int, optional] Largest (signed) integer to be drawn from the distribution.size : [int or tuple of ints, optional] Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned.dtype : [optional] Desired output data-type.\']','[\'# Python program explaining# numpy.random.randint() function  # importing numpyimport numpy as geek  # output arrayout_arr = geek.random.randint(low = 0, high = 3, size = 5)print (\"Output 1D Array filled with random integers : \", out_arr)\', \'# Python program explaining# numpy.random.randint() function  # importing numpyimport numpy as geek    # output arrayout_arr = geek.random.randint(low = 4, size =(2, 3))print (\"Output 2D Array filled with random integers : \", out_arr)\', \'# Python program explaining# numpy.random.randint() function  # importing numpyimport numpy as geek  # output arrayout_arr = geek.random.randint(2, 10, (2, 3, 4))print (\"Output 3D Array filled with random integers : \", out_arr)\']','[\'Output 1D Array filled with random integers :  [1 1 0 1 1]\', \'Output 2D Array filled with random integers :  [[1 1 0]\n [1 0 3]]\', \'Output 3D Array filled with random integers :  [[[4 8 5 7]\n  [6 5 6 7]\n  [4 3 4 3]]\n\n [[2 9 2 2]\n  [3 2 2 3]\n  [6 8 3 2]]]\']','[]','[]'),(101,'[\'Random sampling in numpy | random_sample() function\']','[]','[]','[]','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax : numpy.random.random_sample(size=None)\', \'xa0Code #3 :\']','[\'numpy.random.random_sample() is one of the function for doing random sampling in numpy. It returns an array of specified shape and fills it with random floats in the half-open interval [0.0, 1.0).\', \'Parameters :size : [int or tuple of ints, optional] Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned.\', \'Return : Array of random floats in the interval [0.0, 1.0). or a single such random float if size not provided.\']','[]','[\'# Python program explaining# numpy.random.sample() function  # importing numpyimport numpy as geek  # output random valueout_val = geek.random.random_sample()print (\"Output random float value : \", out_val)\', \'# Python program explaining# numpy.random.random_sample() function  # importing numpyimport numpy as geek    # output arrayout_arr = geek.random.random_sample(size =(1, 3))print (\"Output 2D Array filled with random floats : \", out_arr)\', \'# Python program explaining# numpy.random.random_sample() function  # importing numpyimport numpy as geek  # output arrayout_arr = geek.random.random_sample((3, 2, 1))print (\"Output 3D Array filled with random floats : \", out_arr)\']','[\'Output random float value :  0.9211987310893188\', \'Output 2D Array filled with random floats :  [[ 0.64325146  0.4699456   0.89895437]]\', \'Output 3D Array filled with random floats :  [[[ 0.78245025]\n  [ 0.77736746]]\n\n [[ 0.54389267]\n  [ 0.18491758]]\n\n [[ 0.97428409]\n  [ 0.73729256]]]\']','[]','[]'),(102,'[\'Random sampling in numpy | ranf() function\']','[]','[]','[]','[]','[\'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Syntax : numpy.random.ranf(size=None)\', \'xa0Code #3 :\']','[\'numpy.random.ranf() is one of the function for doing random sampling in numpy. It returns an array of specified shape and fills it with random floats in the half-open interval [0.0, 1.0).\', \'Parameters :size : [int or tuple of ints, optional] Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned.\', \'Return : Array of random floats in the interval [0.0, 1.0). or a single such random float if size not provided.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# Python program explaining# numpy.random.ranf() function  # importing numpyimport numpy as geek    # output random float valueout_val = geek.random.ranf()print (\"Output random float value : \", out_val)\', \'# Python program explaining# numpy.random.ranf() function  # importing numpyimport numpy as geek    # output arrayout_arr = geek.random.ranf(size =(2, 1))print (\"Output 2D Array filled with random floats : \", out_arr)\', \'# Python program explaining# numpy.random.ranf() function  # importing numpyimport numpy as geek  # output arrayout_arr = geek.random.ranf((3, 3, 2))print (\"Output 3D Array filled with random floats : \", out_arr)\']','[\'Output random float value :  0.0877051588430926\', \'Output 2D Array filled with random floats :  [[ 0.14186407]\n [ 0.58068259]]\', \'Output 3D Array filled with random floats :  [[[ 0.11013584  0.67844746]\n  [ 0.84691569  0.09467084]\n  [ 0.69918864  0.12137178]]\n\n [[ 0.30629051  0.28301093]\n  [ 0.1302665   0.2196221 ]\n  [ 0.51555358  0.73191852]]\n\n [[ 0.72806359  0.66485275]\n  [ 0.80654791  0.04947181]\n  [ 0.06380535  0.99306064]]]\']','[]','[]'),(103,'[\'Random sampling in numpy | random_integers() function\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax : numpy.random.random_integers(low, high=None, size=None)\', \'xa0Code #3 :\']','[\'numpy.random.random_integers() is one of the function for doing random sampling in numpy. It returns an array of specified shape and fills it with random integers from low (inclusive) to high (exclusive), i.e. in the interval [low, high).\', \'Return : Array of random integers in the interval [low, high) or a single such random int if size not provided.\']','[\'Parameters :low : [int] Lowest (signed) integer to be drawn from the distribution.But, it works as a highest integer in the sample if high=None.high : [int, optional] Largest (signed) integer to be drawn from the distribution.size : [int or tuple of ints, optional] Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned.\']','[\'# Python program explaining# numpy.random.random_integers() function  # importing numpyimport numpy as geek  # output arrayout_arr = geek.random.random_integers(low = 0, high = 5, size = 4)print (\"Output 1D Array filled with random integers : \", out_arr)\', \'# Python program explaining# numpy.random.random_integers() function  # importing numpyimport numpy as geek    # output arrayout_arr = geek.random.random_integers(low = 3, size =(3, 3))print (\"Output 2D Array filled with random integers : \", out_arr)\', \'# Python program explaining# numpy.random.random_integers() function  # importing numpyimport numpy as geek  # output arrayout_arr = geek.random.random_integers(1, 6, (2, 2, 3))print (\"Output 3D Array filled with random integers : \", out_arr)\']','[\'Output 1D Array filled with random integers :  [1 1 4 1]\', \'Output 2D Array filled with random integers :  [[2 3 1]\n [2 2 3]\n [3 3 3]]\', \'Output 3D Array filled with random integers :  [[[4 8 5 7]\nOutput 3D Array filled with random integers :  [[[5 1 5]\n  [5 4 1]]\n\n [[3 6 4]\n  [4 5 3]]]\']','[]','[]'),(104,'[\'Numpy ufunc | Universal functions\']','[\'Python3\', \'Python3\', \'Python3\']','[\'Trigonometric functions:\', \'Statistical functions:\', \'Bit-twiddling functions:\']','[]','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Some of the basic universal functions in Numpy are-xa0\']','[\'These functions work on radians, so angles need to be converted to radians by multiplying by pi/180. Only then we can call trigonometric functions. They take an array as input arguments. It includes functions like-\', \'These functions are used to calculate mean, median, variance, minimum of array elements. It includes functions like-xa0\', \'These functions accept integer values as input arguments and perform bitwise operations on binary representations of those integers. It include functions like-xa0\']','[\'Universal functions in Numpy are simple mathematical functions. It is just a term that we gave to mathematical functions in the Numpy library. Numpy provides various universal functions that cover a wide variety of operations.xa0These functions include standard trigonometric functions, functions for arithmetic operations, handling complex numbers, statistical functions, etc. Universal functions have various characteristics which are as follows-xa0xa0\']','[\"# Python code to demonstrate trigonometric functionimport numpy as np  # create an array of anglesangles = np.array([0, 30, 45, 60, 90, 180])   # conversion of degree into radians# using deg2rad functionradians = np.deg2rad(angles)  # sine of anglesprint(\'Sine of angles in the array:\')sine_value = np.sin(radians)print(np.sin(radians))  # inverse sine of sine valuesprint(\'Inverse Sine of sine values:\')print(np.rad2deg(np.arcsin(sine_value)))  # hyperbolic sine of anglesprint(\'Sine hyperbolic of angles in the array:\')sineh_value = np.sinh(radians)print(np.sinh(radians))  # inverse sine hyperbolic print(\'Inverse Sine hyperbolic:\')print(np.sin(sineh_value))   # hypot function demonstrationbase = 4height = 3print(\'hypotenuse of right triangle is:\')print(np.hypot(base, height))\", \"# Python code demonstrate statistical functionimport numpy as np  # construct a weight arrayweight = np.array([50.7, 52.5, 50, 58, 55.63, 73.25, 49.5, 45])  # minimum and maximum print(\'Minimum and maximum weight of the students: \')print(np.amin(weight), np.amax(weight))  # range of weight i.e. max weight-min weightprint(\'Range of the weight of the students: \')print(np.ptp(weight))  # percentileprint(\'Weight below which 70 % student fall: \')print(np.percentile(weight, 70))   # mean print(\'Mean weight of the students: \')print(np.mean(weight))  # median print(\'Median weight of the students: \')print(np.median(weight))  # standard deviation print(\'Standard deviation of weight of the students: \')print(np.std(weight))  # variance print(\'Variance of weight of the students: \')print(np.var(weight))  # average print(\'Average weight of the students: \')print(np.average(weight))\", \"# Python code to demonstrate bitwise-functionimport numpy as np  # construct an array of even and odd numberseven = np.array([0, 2, 4, 6, 8, 16, 32])odd = np.array([1, 3, 5, 7, 9, 17, 33])  # bitwise_andprint(\'bitwise_and of two arrays: \')print(np.bitwise_and(even, odd))  # bitwise_orprint(\'bitwise_or of two arrays: \')print(np.bitwise_or(even, odd))  # bitwise_xorprint(\'bitwise_xor of two arrays: \')print(np.bitwise_xor(even, odd))   # invert or notprint(\'inversion of even no. array: \')print(np.invert(even))  # left_shift print(\'left_shift of even no. array: \')print(np.left_shift(even, 1))  # right_shift print(\'right_shift of even no. array: \')print(np.right_shift(even, 1))\"]','[\'Sine of angles in the array:\n[  0.00000000e+00   5.00000000e-01   7.07106781e-01   8.66025404e-01\n   1.00000000e+00   1.22464680e-16]\n\nInverse Sine of sine values:\n[  0.00000000e+00   3.00000000e+01   4.50000000e+01   6.00000000e+01\n   9.00000000e+01   7.01670930e-15]\n\nSine hyperbolic of angles in the array:\n[  0.           0.54785347   0.86867096   1.24936705   2.3012989\n  11.54873936]\n\nInverse Sine hyperbolic:\n[ 0.          0.52085606  0.76347126  0.94878485  0.74483916 -0.85086591]\n\nhypotenuse of right triangle is:\n5.0\', \'Minimum and maximum weight of the students: \n45.0 73.25\n\nRange of the weight of the students: \n28.25\n\nWeight below which 70 % student fall: \n55.317\n\nMean weight of the students: \n54.3225\n\nMedian weight of the students: \n51.6\n\nStandard deviation of weight of the students: \n8.05277397857\n\nVariance of weight of the students: \n64.84716875\n\nAverage weight of the students: \n54.3225\', \'bitwise_and of two arrays: \n[ 0  2  4  6  8 16 32]\n\nbitwise_or of two arrays: \n[ 1  3  5  7  9 17 33]\n\nbitwise_xor of two arrays: \n[1 1 1 1 1 1 1]\n\ninversion of even no. array: \n[ -1  -3  -5  -7  -9 -17 -33]\n\nleft_shift of even no. array: \n[ 0  4  8 12 16 32 64]\n\nright_shift of even no. array: \n[ 0  1  2  3  4  8 16]\']','[]','[\'These functions operates on ndarray (N-dimensional array) i.e Numpy’s array class.|||It performs fast element-wise array operations.|||It supports various features like array broadcasting, type casting etc.|||Numpy, universal functions are objects those belongs to numpy.ufunc class.|||Python functions can also be created as a universal function using frompyfunc library function.|||Some ufuncs are called automatically when the corresponding arithmetic operator is used on arrays. For example when addition of two array is performed element-wise using ‘+’ operator then np.add() is called internally.\']'),(105,'[\'Pandas Tutorial\']','[\'Introduction\', \'Creating Objects\', \'Viewing Data\', \'Selection\', \'Manipulating Data\', \'Grouping Data\', \'Merging, Joining and Concatenating\', \'Working with Date and Time\', \'Working With Text Data\', \'Working with CSV and Excel files\', \'Operations\', \'Visualization\', \'Applications and Projects\', \'Miscellaneous\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200226170738/Pandas-Tutorial-copy-2.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/#introduction\', \'https://www.geeksforgeeks.org/#creating\', \'https://www.geeksforgeeks.org/#viewing\', \'https://www.geeksforgeeks.org/#selection\', \'https://www.geeksforgeeks.org/#manipulating\', \'https://www.geeksforgeeks.org/#grouping\', \'https://www.geeksforgeeks.org/#merging\', \'https://www.geeksforgeeks.org/#dates\', \'https://www.geeksforgeeks.org/#text\', \'https://www.geeksforgeeks.org/#csv\', \'https://www.geeksforgeeks.org/#operations\', \'https://www.geeksforgeeks.org/#visualization\', \'https://www.geeksforgeeks.org/#applications\', \'https://www.geeksforgeeks.org/#miscellaneous\', \'https://www.geeksforgeeks.org/pandas-practice-excercises-questions-and-solutions/\', \'https://www.geeksforgeeks.org/tag/python-pandas/\', \'https://www.geeksforgeeks.org/introduction-to-pandas-in-python/\', \'https://www.geeksforgeeks.org/how-to-install-python-pandas-on-windows-and-linux/\', \'https://www.geeksforgeeks.org/how-to-use-jupyter-notebook-an-ultimate-guide/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe/\', \'https://www.geeksforgeeks.org/creating-a-pandas-dataframe/\', \'https://www.geeksforgeeks.org/python-pandas-series/\', \'http://geeksforgeeks.org/creating-a-pandas-series/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-series-head-method/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-series-tail-method/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-describe-method/\', \'https://www.geeksforgeeks.org/pandas-dataframe-to_numpy-convert-dataframe-to-numpy-array/\', \'https://www.geeksforgeeks.org/python-pandas-series-to_numpy/\', \'https://www.geeksforgeeks.org/python-pandas-series-as_matrix/\', \'https://www.geeksforgeeks.org/dealing-with-rows-and-columns-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/dealing-with-rows-and-columns-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/\', \'https://www.geeksforgeeks.org/indexing-and-selecting-data-with-pandas/\', \'https://www.geeksforgeeks.org/boolean-indexing-in-pandas/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-ix/\', \'https://www.geeksforgeeks.org/tag/python-pandas-indexing/\', \'https://www.geeksforgeeks.org/adding-new-column-to-existing-dataframe-in-pandas/\', \'https://www.geeksforgeeks.org/python-delete-rows-columns-from-dataframe-using-pandas-drop/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-truncate/\', \'https://www.geeksforgeeks.org/python-pandas-series-truncate/\', \'https://www.geeksforgeeks.org/iterating-over-rows-and-columns-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/working-with-missing-data-in-pandas/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-sort_values-set-1/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-sort_values-set-2/\', \'https://www.geeksforgeeks.org/pandas-groupby/\', \'https://www.geeksforgeeks.org/grouping-rows-in-pandas/\', \'https://www.geeksforgeeks.org/combining-multiple-columns-in-pandas-groupby-with-dictionary/\', \'https://www.geeksforgeeks.org/python-pandas-merging-joining-and-concatenating/\', \'https://www.geeksforgeeks.org/python-pandas-series-str-cat-to-concatenate-string/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-append/\', \'https://www.geeksforgeeks.org/python-pandas-series-append/\', \'https://www.geeksforgeeks.org/python-pandas-index-append/\', \'https://www.geeksforgeeks.org/python-pandas-series-combine/\', \'https://www.geeksforgeeks.org/add-a-row-at-top-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/python-pandas-str-join-to-join-string-list-elements-with-passed-delimiter/\', \'https://www.geeksforgeeks.org/join-two-text-columns-into-a-single-column-in-pandas/\', \'https://www.geeksforgeeks.org/python-working-with-date-and-time-using-pandas/\', \'https://www.geeksforgeeks.org/python-pandas-timestamp-timestamp/\', \'https://www.geeksforgeeks.org/python-pandas-timestamp-now/\', \'https://www.geeksforgeeks.org/python-pandas-timestamp-isoformat/\', \'https://www.geeksforgeeks.org/python-pandas-timestamp-date/\', \'https://www.geeksforgeeks.org/python-pandas-timestamp-replace/\', \'https://www.geeksforgeeks.org/python-pandas-to_datetime/\', \'https://www.geeksforgeeks.org/python-pandas-date_range-method/\', \'https://www.geeksforgeeks.org/python-pandas-working-with-text-data/\', \'https://www.geeksforgeeks.org/python-pandas-series-str-lower-upper-and-title/\', \'https://www.geeksforgeeks.org/python-pandas-series-str-replace-to-replace-text-in-a-series/\', \'https://www.geeksforgeeks.org/python-pandas-series-replace/\', \'https://www.geeksforgeeks.org/python-pandas-series-str-strip-lstrip-and-rstrip/\', \'https://www.geeksforgeeks.org/python-pandas-tseries-offsets-dateoffset/\', \'https://www.geeksforgeeks.org/python-read-csv-using-pandas-read_csv/\', \'https://www.geeksforgeeks.org/saving-a-pandas-dataframe-as-a-csv/\', \'https://www.geeksforgeeks.org/loading-excel-spreadsheet-as-pandas-dataframe/\', \'https://www.geeksforgeeks.org/creating-a-dataframe-using-excel-files/\', \'https://www.geeksforgeeks.org/python-working-with-pandas-and-xlsxwriter-set-1/\', \'https://www.geeksforgeeks.org/python-working-with-pandas-and-xlsxwriter-set-2/\', \'https://www.geeksforgeeks.org/python-working-with-pandas-and-xlsxwriter-set-3/\', \'https://www.geeksforgeeks.org/python-pandas-apply/\', \'https://www.geeksforgeeks.org/apply-function-to-every-row-in-a-pandas-dataframe/\', \'https://www.geeksforgeeks.org/python-pandas-series-apply/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-aggregate/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-mean/\', \'https://www.geeksforgeeks.org/python-pandas-series-mean/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-mad/\', \'https://www.geeksforgeeks.org/python-pandas-series-mad-to-calculate-mean-absolute-deviation-of-a-series/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-sem/\', \'https://www.geeksforgeeks.org/python-pandas-series-value_counts/\', \'https://www.geeksforgeeks.org/python-pandas-index-value_counts/\', \'https://www.geeksforgeeks.org/pandas-built-in-data-visualization-ml/\', \'https://www.geeksforgeeks.org/data-analysis-visualization-python/\', \'https://www.geeksforgeeks.org/data-analysis-visualization-python-set-2/\', \'https://www.geeksforgeeks.org/box-plot-visualization-with-pandas-and-seaborn/\', \'https://www.geeksforgeeks.org/how-to-do-a-vlookup-in-python-using-pandas/\', \'http://geeksforgeeks.org/convert-csv-to-html-table-in-python/\', \'https://www.geeksforgeeks.org/kde-plot-visualization-with-pandas-and-seaborn/\', \'https://www.geeksforgeeks.org/analyzing-selling-price-of-used-cars-using-python/\', \'https://www.geeksforgeeks.org/add-css-to-the-jupyter-notebook-using-pandas/\', \'https://www.geeksforgeeks.org/tag/python-pandas/\', \'https://www.geeksforgeeks.org/tag/python-pandas-dataframe/\', \'https://www.geeksforgeeks.org/tag/python-pandas-dataframe-methods/\', \'https://www.geeksforgeeks.org/tag/python-pandas-series/\', \'https://www.geeksforgeeks.org/tag/python-pandas-series-methods/\', \'https://www.geeksforgeeks.org/tag/python-pandas-general-functions/\', \'https://www.geeksforgeeks.org/tag/python-pandas-datetime/\', \'https://www.geeksforgeeks.org/tag/python-pandas-datetimeindex/\', \'https://www.geeksforgeeks.org/tag/python-pandas-timedelta/\', \'https://www.geeksforgeeks.org/tag/python-pandas-timedeltaindex/\', \'https://www.geeksforgeeks.org/tag/python-pandas-timestamp/\', \'https://www.geeksforgeeks.org/tag/python-pandas-series-datetime/\', \'https://www.geeksforgeeks.org/tag/python-pandas-multiindex/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Table of Contents\', \'Pandas Practice problems with solutions !Recent Articles on Python Pandas !\', \'?? Recent Articles on Pandas-Indexing\']','[\'Pandas is an open-source library that is built on top of NumPy library. It is a Python package that offers various data structures and operations for manipulating numerical data and time series. It is mainly popular for importing and analyzing data much easier. Pandas is fast and it has high-performance & productivity for users.\', \'This Pandas Tutorial will help learning Pandas from Basics to advance data analysis operations, including all necessary functions explained in detail.\']','[]','[]','[]','[]','[\'Introduction|||Creating Objects|||Viewing Data|||Selection|||Manipulating Data|||Grouping Data|||Merging, Joining and Concatenating|||Working with Date and Time|||Working With Text Data|||Working with CSV and Excel files|||Operations|||Visualization|||Applications and Projects|||Miscellaneous&&&Introduction to Pandas in Python|||How to Install Python Pandas on Windows and Linux?|||How To Use Jupyter Notebook – An Ultimate Guide&&&Python | Pandas DataFrame|||Creating a Pandas DataFrame|||Python | Pandas Series|||Creating a Pandas Series&&&View the top rows of the frame|||View the bottom rows of the frame|||View basic statistical details|||Convert the pandas DataFrame to numpy Array|||Convert the pandas Series to numpy Array|||Convert series or dataframe object to Numpy-array using .as_matrix().&&&Dealing with Rows and Columns in Pandas DataFrame|||How to select multiple columns in a pandas dataframe|||Python | Pandas Extracting rows using .loc[]|||Python | Extracting rows using Pandas .iloc[]|||Indexing and Selecting Data with Pandas|||Boolean Indexing in Pandas|||Label and Integer based slicing technique using DataFrame.ix[ ]&&&Adding new column to existing DataFrame in Pandas|||Python | Delete rows/columns from DataFrame|||Truncate a DataFrame before and after some index value|||Truncate a Series before and after some index value|||Iterating over rows and columns in Pandas DataFrame|||Working with Missing Data in Pandas|||Sorts a data frame in Pandas | Set-1|||Sorts a data frame in Pandas | Set-2&&&Pandas GroupBy|||Grouping Rows in pandas|||Combining multiple columns in Pandas groupby with dictionary&&&Python | Pandas Merging, Joining, and Concatenating|||Concatenate Strings|||Append rows to Dataframe|||Concatenate two or more series|||Append a single or a collection of indices|||Combine two series into one|||Add a row at top in pandas DataFrame|||Join all elements in list present in a series|||Join two text columns into a single column in Pandas&&&Python | Working with date and time using Pandas|||Timestamp using Pandas|||Current Time using Pandas|||Convert timestamp to ISO Format|||Get datetime object using Pandas|||Replace the member values of the given Timestamp|||Convert string Date time into Python Date time object using Pandas|||Get a fixed frequency DatetimeIndex using Pandas&&&Python | Pandas Working With Text Data|||Convert String into lower, upper or camel case|||Replace Text Value|||Replace Text Value using series.replace()|||Removing Whitespaces|||Move dates forward a given number of valid dates using Pandas&&&Read csv using pandas|||Saving a Pandas Dataframe as a CSV|||Loading Excel spreadsheet as pandas DataFrame|||Creating a dataframe using Excel files|||Working with Pandas and XlsxWriter | Set – 1|||Working with Pandas and XlsxWriter | Set – 2|||Working with Pandas and XlsxWriter | Set – 3&&&Apply a function on the possible series|||Apply function to every row in a Pandas DataFrame|||Apply a function on each element of the series|||Aggregation data across one or more column|||Mean of the values for the requested axis|||Mean of the underlying data in the Series|||Mean absolute deviation of the values for the requested axis|||Mean absolute deviation of the values for the Series|||Unbiased standard error of the mean|||Find the Series containing counts of unique values|||Find the Series containing counts of unique values using Index.value_counts()&&&Pandas Built-in Data Visualization|||Data analysis and Visualization with Python | Set 1|||Data analysis and Visualization with Python | Set 2|||Box plot visualization with Pandas and Seaborn&&&How to Do a vLookup in Python using pandas|||Convert CSV to HTML Table in Python|||KDE Plot Visualization with Pandas and Seaborn|||Analyzing selling price of used cars using Python|||Add CSS to the Jupyter Notebook using Pandas&&&More Functions on Python-Pandas|||More articles on pandas-dataframe|||More Functions on pandas-dataframe|||More articles on pandas-series|||More Functions on pandas-series|||More Articles on pandas-general-functions|||More Functions on pandas-datetime|||More Functions on pandas-datetimeIndex|||More Functions on pandas-timedelta|||More Functions on pandas-TimeDeltaIndex|||More Functions on pandas-Timestmap|||More Functions on pandas-series-datetime|||More Functions on pandas-multiindex\']'),(106,'[\'Introduction to Pandas in Python\']','[\'History\', \'Advantagesxa0\', \'Getting Started\', \'Python3\', \'Python3\', \'Why Pandas is used for Data Science\']','[\'Series:\', \'DataFrame\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200225170506/pandas-series.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200225170602/pandas-dataframe.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/#history\', \'https://www.geeksforgeeks.org/#advantages\', \'https://www.geeksforgeeks.org/#getting\', \'https://www.geeksforgeeks.org/#series\', \'https://www.geeksforgeeks.org/#dataframe\', \'https://www.geeksforgeeks.org/#why\', \'https://www.geeksforgeeks.org/python-pandas-series/\', \'https://www.geeksforgeeks.org/python-pandas-series/\', \'https://www.geeksforgeeks.org/creating-a-pandas-series/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe/\', \'https://www.geeksforgeeks.org/creating-a-pandas-dataframe/\', \'https://www.geeksforgeeks.org/how-to-use-jupyter-notebook-an-ultimate-guide/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Table of Contentxa0:\', \'Pandas generally provide two data structures for manipulating data, They are:xa0\', \'Note: For more information, refer to Python | Pandas Seriesxa0\', \'Note: For more information, refer to Creating a Pandas Series\', \'Note: For more information, refer to Python | Pandas DataFramexa0\', \'Note: For more information, refer to Creating a Pandas DataFramexa0\']','[\'Pandas is an open-source library that is made mainly for working with relational or labeled data both easily and intuitively. It provides various data structures and operations for manipulating numerical data and time series. This library is built on top of the NumPy library. Pandas is fast and it has high performance & productivity for users.\', \'Pandas were initially developed by Wes McKinney in 2008 while he was working at AQR Capital Management. He convinced the AQR to allow him to open source the Pandas. Another AQR employee, Chang She, joined as the second major contributor to the library in 2012. Over time many versions of pandas have been released. The latest version of the pandas is 1.3.4\', \'After the pandas have been installed into the system, you need to import the library. This module is generally imported as:\', \'Here, pd is referred to as an alias to the Pandas. However, it is not necessary to import the library using the alias, it just helps in writing less amount code every time a method or property is called.xa0\', \'In the real world, a Pandas Series will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, an Excel file. Pandas Series can be created from the lists, dictionary, and from a scalar value etc.\', \'Pandas DataFrame is a two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. Pandas DataFrame consists of three principal components, the data, rows, and columns.\', \'In the real world, a Pandas DataFrame will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, an Excel file. Pandas DataFrame can be created from the lists, dictionary, and from a list of dictionaries, etc.\', \'Note: For more information on Jupyter Notebook, refer to How To Use Jupyter Notebook – An Ultimate Guidexa0\']','[\'Pandas Series is a one-dimensional labelled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called indexes. Pandas Series is nothing but a column in an excel sheet. Labels need not be unique but must be a hashable type. The object supports both integer and label-based indexing and provides a host of methods for performing operations involving the index.\', \'Pandas are generally used for data science but have you wondered why? This is because pandas are used in conjunction with other libraries that are used for data science. It is built on the top of the NumPy library which means that a lot of structures of NumPy are used or replicated in Pandas. The data produced by Pandas are often used as input for plotting functions of Matplotlib, statistical analysis in SciPy, machine learning algorithms in Scikit-learn.Pandas program can be run from any text editor but it is recommended to use Jupyter Notebook for this as Jupyter given the ability to execute code in a particular cell rather than executing the entire file. Jupyter also provides an easy way to visualize pandas data frames and plots.\']','[\"import pandas as pdimport numpy as np  # Creating empty seriesser = pd.Series()   print(ser) # simple arraydata = np.array([\'g\', \'e\', \'e\', \'k\', \'s\'])   ser = pd.Series(data)print(ser)\", \"import pandas as pd   # Calling DataFrame constructordf = pd.DataFrame()print(df) # list of stringslst = [\'Geeks\', \'For\', \'Geeks\', \'is\',             \'portal\', \'for\', \'Geeks\']   # Calling DataFrame constructor on listdf = pd.DataFrame(lst)print(df)\"]','[\'import pandas as pd\', \'Series([], dtype: float64)\n0    g\n1    e\n2    e\n3    k\n4    s\ndtype: object\', \'Empty DataFrame\nColumns: []\nIndex: []\n        0\n0   Geeks\n1     For\n2   Geeks\n3      is\n4  portal\n5     for\n6   Geeks\']','[]','[\'History|||Advantages|||Getting StartedSeriesDataFrame|||Series|||DataFrame|||Why Pandas is used for Data Science&&&Series|||DataFrame&&&Fast and efficient for manipulating and analyzing data.|||Data from different file objects can be loaded.|||Easy handling of missing data (represented as NaN) in floating point as well as non-floating point data|||Size mutability: columns can be inserted and deleted from DataFrame and higher dimensional objects|||Data set merging and joining.|||Flexible reshaping and pivoting of data sets|||Provides time-series functionality.|||Powerful group by functionality for performing split-apply-combine operations on data sets.&&&Series|||DataFrame\']'),(107,'[\'How to Install Python Pandas on Windows and Linux?\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200117124014/python-version-check-windows.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220185559/PIP-Installation-Pandas-02.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220190824/Anaconda-Navigator-011.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200224123904/Anaconda-Installation-Pandas-01.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201134/Anaconda-Installation-Pandas-12.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201137/Anaconda-Installation-Pandas-13.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201140/Anaconda-Installation-Pandas-14.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201142/Anaconda-Installation-Pandas-15.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201145/Anaconda-Installation-Pandas-16.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201148/Anaconda-Installation-Pandas-17.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201150/Anaconda-Installation-Pandas-18.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201153/Anaconda-Installation-Pandas-19.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220201132/Anaconda-Installation-Pandas-10.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200220202453/Pandas-Installation-Linux.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/how-to-install-python-on-windows/\', \'https://www.geeksforgeeks.org/how-to-install-python-on-linux/\', \'https://www.geeksforgeeks.org/how-to-install-anaconda-on-windows/\', \'https://www.geeksforgeeks.org/how-to-install-anaconda-on-linux/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'If Python is already installed, it will generate a message with the Python version available.\', \'To install Python, please visit: How to Install Python on Windows or Linux?\', \'Python Pandas can be installed on Windows in two ways:\']','[\'Pandas programs can be written on any plain text editor like notepad, notepad++, or anything of that sort and saved with a .py extension. To begin with, writing Pandas Codes and performing various intriguing and useful operations, one must have Python installed on their System. This can be done by following the step by step instructions provided below:\', \'To check if your device is pre-installed with Python or not, just go to the Command line(search for cmd in the Run dialog( + R).Now run the following command:\', \'Pandas can be installed in multiple ways on Windows and on Linux. Various different ways are listed below:\', \'PIP is a package management system used to install and manage software packages/libraries written in Python. These files are stored in a large “on-line repository” termed as Python Package Index (PyPI).Pandas can be installed using PIP by the use of the following command:\', \'To install Pandas on Linux, just type the following command in the Terminal Window and press Enter. Linux will automatically download and install the packages and files required to run Pandas Environment in Python:\']','[\'Pandas in Python is a package that is written for data analysis and manipulation. Pandas offer various operations and data structures to perform numerical data manipulations and time series. Pandas is an open-source library that is built over Numpy libraries. Pandas library is known for its high productivity and high performance. Pandas is popular because it makes importing and analyzing data much easier.\', \'Anaconda is open-source software that contains Jupyter, spyder, etc that are used for large data processing, data analytics, heavy scientific computing. If your system is not pre-equipped with Anaconda Navigator, you can learn how to install Anaconda Navigator on Windows or Linux?xa0Steps to Install Pandas using Anaconda Navigator:xa0Step 1: Search for Anaconda Navigator in Start Menu and open it.xa0Step 2: Click on the Environment tab and then click on the create button to create a new Pandas Environment.xa0Step 3: Give a name to your Environment, e.g. Pandas and then choose a python version to run in the environment. Now click on the Create button to create Pandas Environment.xa0Step 4: Now click on the Pandas Environment created to activate it.xa0Step 5: In the list above package names, select All to filter all the packages.xa0Step 6: Now in the Search Bar, look for ‘Pandas‘. Select the Pandas package for Installation.xa0Step 7: Now Right Click on the checkbox given before the name of the package and then go to ‘Mark for specific version installation‘. Now select the version that you want to install.xa0Step 8: Click on the Apply button to install the Pandas Package.xa0Step 9: Finish the Installation process by clicking on the Apply button.xa0Step 10: Now to open the Pandas Environment, click on the Green Arrow on the right of package name and select the Console with which you want to begin your Pandas programming.xa0Pandas Terminal Window:\']','[]','[\'python --version\', \'pip install pandas\', \'pip3 install pandas\']','[]','[\'Using pip|||Using Anaconda\']'),(108,'[\'Creating a Pandas DataFrame\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/CreatingaPandasDataFrame-min.png\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/creating_dataframe1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/df_from_list1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/df2-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/dict_of_lists.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/create-a-pandas-dataframe-from-lists/\', \'https://www.geeksforgeeks.org/python-create-a-pandas-dataframe-from-a-dict-of-equal-length-lists/\', \'https://www.geeksforgeeks.org/create-pandas-dataframe-from-lists-using-dictionary/\', \'https://www.geeksforgeeks.org/different-ways-to-create-pandas-dataframe/\', \'https://www.geeksforgeeks.org/create-pandas-dataframe-from-lists-using-zip/\', \'https://www.geeksforgeeks.org/create-a-pandas-dataframe-from-list-of-dicts/\', \'https://www.geeksforgeeks.org/python-create-a-pandas-dataframe-from-a-dict-of-equal-length-lists/\', \'https://www.geeksforgeeks.org/create-a-pandas-dataframe-from-lists/\', \'https://www.geeksforgeeks.org/create-pandas-dataframe-from-lists-using-dictionary/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Output :xa0xa0\', \'xa0Multiple ways of creating dataframe :xa0xa0\']','[\'In the real world, a Pandas DataFrame will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, and Excel file. Pandas DataFrame can be created from the lists, dictionary, and from a list of dictionary etc.xa0xa0\', \'A Dataframe is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. In dataframe datasets arrange in rows and columns, we can store any number of datasets in a dataframe. We can perform many operations on these datasets like arithmetic operation, columns/rows selection, columns/rows addition etc.xa0xa0\', \'Pandas DataFrame can be created in multiple ways. Let’s discuss different ways to create a DataFrame one by one.Creating an empty dataframe :xa0A basic DataFrame, which can be created is an Empty Dataframe. An Empty Dataframe is created just by calling a dataframe constructor.xa0xa0\', \'xa0xa0Creating a dataframe using List:xa0DataFrame can be created using a single list or a list of lists.xa0xa0\', \'xa0xa0Creating DataFrame from dict of ndarray/lists:xa0To create DataFrame from dict of narray/list, all the narray must be of same length. If index is passed then the length index should be equal to the length of arrays. If no index is passed, then by default, index will be range(n) where n is the array length.xa0xa0\', \'xa0xa0Create pandas dataframe from lists using dictionary:xa0Creating pandas data-frame from lists using dictionary can be achieved in different ways. We can create pandas dataframe from lists using dictionary using pandas.DataFrame. With this method in Pandas we can transform a dictionary of list to a dataframe.xa0\']','[]','[\'# import pandas as pdimport pandas as pd # Calling DataFrame constructordf = pd.DataFrame() print(df)\', \"# import pandas as pdimport pandas as pd # list of stringslst = [\'Geeks\', \'For\', \'Geeks\', \'is\',            \'portal\', \'for\', \'Geeks\'] # Calling DataFrame constructor on listdf = pd.DataFrame(lst)print(df)\", \"# Python code demonstrate creating# DataFrame from dict narray / lists# By default addresses. import pandas as pd # initialise data of lists.data = {\'Name\':[\'Tom\', \'nick\', \'krish\', \'jack\'], \'Age\':[20, 21, 19, 18]} # Create DataFramedf = pd.DataFrame(data) # Print the output.print(df)\", \'# importing pandas as pdimport pandas as pd # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],        \'score\':[90, 40, 80, 98]} df = pd.DataFrame(dict) print(df)\']','[\'Empty DataFrame\nColumns: []\nIndex: []\']','[]','[\'Different ways to create Pandas Dataframe|||Create pandas dataframe from lists using zip|||Create a Pandas DataFrame from List of Dicts|||Create a Pandas Dataframe from a dict of equal length lists|||Creating a dataframe using List|||Create pandas dataframe from lists using dictionary\']'),(109,'[\'Creating a Pandas Series\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/series.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser2.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser3.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser4.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser5.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-pandas-series/\', \'https://www.geeksforgeeks.org/creating-a-pandas-series-from-lists/\', \'https://www.geeksforgeeks.org/creating-a-pandas-series-from-dictionary/\', \'https://www.geeksforgeeks.org/create-pandas-series-using-numpy-functions/\', \'https://www.geeksforgeeks.org/numpy-linspace-python/\', \'https://www.geeksforgeeks.org/numpy-random-randn-python/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Creating an empty Series :A basic series, which can be created is an Empty Series.\']','[\'Pandas Series is a one-dimensional labelled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called index.\', \'Labels need not be unique but must be a hashable type. The object supports both integer and label-based indexing and provides a host of methods for performing operations involving the index.\', \'xa0Creating a series from array:In order to create a series from array, we have to import a numpy module and have to use array() function.\', \'xa0Creating a series from array with index :In order to create a series from array with index, we have to provide index with same number of element as it is in array.\', \'xa0Creating a series from Lists:In order to create a series from list, we have to first create a list after that we can create a series from list.\', \'Creating a series from Dictionary:In order to create a series from dictionary, we have to first create a dictionary after that we can make a series using dictionary. Dictionary key are used to construct a index.\', \'xa0Creating a series from Scalar value:In order to create a series from scalar value, an index must be provided. The scalar value will be repeated to match the length of index.\', \'xa0Creating a series using NumPy functions :In order to create a series using numpy function, we can use different function of numpy like numpy.linspace(), numpy.random.radn().\']','[]','[\'# import pandas as pdimport pandas as pd  # Creating empty seriesser = pd.Series()  print(ser)\', \"# import pandas as pdimport pandas as pd  # import numpy as npimport numpy as np  # simple arraydata = np.array([\'g\', \'e\', \'e\', \'k\', \'s\'])  ser = pd.Series(data)print(ser)\", \"# import pandas as pdimport pandas as pd  # import numpy as npimport numpy as np  # simple arraydata = np.array([\'g\', \'e\', \'e\', \'k\', \'s\'])  # providing an indexser = pd.Series(data, index =[10, 11, 12, 13, 14])print(ser)\", \"import pandas as pd  # a simple listlist = [\'g\', \'e\', \'e\', \'k\', \'s\']   # create series form a listser = pd.Series(list)print(ser)\", \"import pandas as pd   # a simple dictionarydict = {\'Geeks\' : 10,        \'for\' : 20,        \'geeks\' : 30}   # create series from dictionaryser = pd.Series(dict)   print(ser)\", \'import pandas as pd  import numpy as np  # giving a scalar value with indexser = pd.Series(10, index =[0, 1, 2, 3, 4, 5])  print(ser)\', \'# import pandas and numpy import pandas as pd import numpy as np     # series with numpy linspace()  ser1 = pd.Series(np.linspace(3, 33, 3)) print(ser1)     # series with numpy linspace() ser2 = pd.Series(np.linspace(1, 100, 10)) print(\"\\n\", ser2)\']','[\'Series([], dtype: float64)\']','[]','[]'),(110,'[\'Python | Pandas Dataframe/Series.head() method\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/nba-1-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-from-2018-09-30-03-47-29.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-from-2018-09-30-03-57-39.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Pandas head() method is used to return top n (5 by default) rows of a data frame or series.\', \'Syntax: Dataframe.head(n=5)\', \'Parameters:n: integer value, number of rows to be returned\', \'Return type: Dataframe with top n rows\', \'Example #1:\', \'xa0Example #2: Calling on Series with n parameter()\', \'Output:As shown in the output image, top 9 rows ranging from 0 to 8th index position were returned.\']','[\'Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier.\', \'To download the data set used in following example, click here.In the following examples, the data frame used contains data of some NBA players. The image of data frame before any operations is attached below.\', \'In this example, top 5 rows of data frame are returned and stored in a new variable. No parameter is passed to .head() method since by default it is 5.\', \'Output:As shown in the output image, it can be seen that the index of returned rows is ranging from 0 to 4. Hence, top 5 rows were returned.\', \'In this example, the .head() method is called on series with custom input of n parameter to return top 9 rows of the series.\']','[]','[\'# importing pandas moduleimport pandas as pd  # making data framedata = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")  # calling head() method # storing in new variabledata_top = data.head()  # displaydata_top\', \'# importing pandas moduleimport pandas as pd  # making data framedata = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")  # number of rows to returnn = 9  # creating seriesseries = data[\"Name\"]  # returning top n rowstop = series.head(n = n)  # displaytop\']','[]','[]','[]'),(111,'[\'Python | Pandas Dataframe.describe() method\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/nba-1-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-from-2018-09-30-16-02-22.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-from-2018-09-30-16-08-19.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax: DataFrame.describe(percentiles=None, include=None, exclude=None)\', \'Return type: Statistical summary of data frame.\', \'Example #1: Describing data frame with both object and numeric data type\']','[\'Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier.\', \'Pandas describe() is used to view some basic statistical details like percentile, mean, std etc. of a data frame or a series of numeric values. When this method is applied to a series of string, it returns a different output which is shown in the examples below.\', \'Parameters:percentile: list like data type of numbers between 0-1 to return the respective percentileinclude: List of data types to be included while describing dataframe. Default is Noneexclude: List of data types to be Excluded while describing dataframe. Default is None\', \'To download the data set used in following example, click here.In the following examples, the data frame used contains data of some NBA players. The image of data frame before any operations is attached below.\', \'In this example, the data frame is described and [‘object’] is passed to include parameter to see description of object series. [.20, .40, .60, .80] is passed to percentile parameter to view the respective percentile of Numeric series.\', \'Output:As shown in the output image, Statistical description of dataframe was returned with the respective passed percentiles. For the columns with strings, NaN was returned for numeric operations.xa0Example #2: Describing series of strings\', \'In this example, the describe method is called by the Name column to see the behaviour with object data type.\', \'Output:As shown in the output image, the behaviour of describe() is different with series of strings.Different stats were returned like count of values, unique values, top and frequency of occurrence in this case.\']','[]','[\'# importing pandas module import pandas as pd   # importing regex moduleimport re    # making data frame data = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")     # removing null values to avoid errors data.dropna(inplace = True)   # percentile listperc =[.20, .40, .60, .80]  # list of dtypes to includeinclude =[\'object\', \'float\', \'int\']  # calling describe methoddesc = data.describe(percentiles = perc, include = include)  # displaydesc\', \'# importing pandas module import pandas as pd   # importing regex moduleimport re    # making data frame data = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")     # removing null values to avoid errors data.dropna(inplace = True)   # calling describe methoddesc = data[\"Name\"].describe()  # displaydesc\']','[]','[]','[]'),(112,'[\'Dealing with Rows and Columns in Pandas DataFrame\']','[]','[\'Dealing with Columns\', \'Dealing with Rows:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/DealingwithRowsandColumns-min.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/dealing_with_rows_columns.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/df_col1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/add_column1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas_drop3.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas_drop4.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/out1-22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/to_num1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/row_at_top.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas_drop1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas_drop2.jpg\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://www.geeksforgeeks.org/how-to-select-multiple-columns-in-a-pandas-dataframe/\', \'https://www.geeksforgeeks.org/how-to-select-multiple-columns-in-a-pandas-dataframe/\', \'https://www.geeksforgeeks.org/adding-new-column-to-existing-dataframe-in-pandas/\', \'https://www.geeksforgeeks.org/adding-new-column-to-existing-dataframe-in-pandas/\', \'https://www.geeksforgeeks.org/python-delete-rows-columns-from-dataframe-using-pandas-drop/\', \'https://www.geeksforgeeks.org/python-delete-rows-columns-from-dataframe-using-pandas-drop/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/add-a-row-at-top-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/add-a-row-at-top-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/python-delete-rows-columns-from-dataframe-using-pandas-drop/\', \'https://www.geeksforgeeks.org/python-delete-rows-columns-from-dataframe-using-pandas-drop/\', \'https://www.geeksforgeeks.org/how-to-get-column-names-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/how-to-drop-one-or-multiple-columns-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/get-unique-values-from-a-column-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/how-to-lowercase-column-names-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/apply-uppercase-to-a-column-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/capitalize-first-letter-of-a-column-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/get-n-largest-values-from-a-particular-column-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/get-n-smallest-values-from-a-particular-column-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/convert-a-column-to-row-name-index-in-pandas/\', \'https://www.geeksforgeeks.org/apply-function-to-every-row-in-a-pandas-dataframe/\', \'https://www.geeksforgeeks.org/how-to-get-rows-index-names-in-pandas-dataframe/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Problem related to Rows:\']','[\'A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. We can perform basic operations on rows/columns like selecting, deleting, adding, and renaming. In this article, we are using nba.csv file.\', \'In order to deal with columns, we perform basic operations on columns like selecting, deleting, adding and renaming.\', \'Column Selection:In Order to select a column in Pandas DataFrame, we can either access the columns by calling them by their columns name.\', \'Output:For more examples refer to How to select multiple columns in a pandas dataframexa0Column Addition:In Order to add a column in Pandas DataFrame, we can declare a new list as a column and add to a existing Dataframe.\', \'Output:For more examples refer to Adding new column to existing DataFrame in Pandasxa0Column Deletion:In Order to delete a column in Pandas DataFrame, we can use the drop() method. Columns is deleted by dropping columns with column names.\', \'Output:As shown in the output images, the new output doesn’t have the passed columns. Those values were dropped since axis was set equal to 1 and the changes were made in the original data frame since inplace was True.Data Frame before Dropping Columns-Data Frame after Dropping Columns-For more examples refer to Delete columns from DataFrame using Pandas.drop()\', \'In order to deal with rows, we can perform basic operations on rows like selecting, deleting, adding and renaming.\', \'Row Selection:Pandas provide a unique method to retrieve rows from a Data frame.DataFrame.loc[] method is used to retrieve rows from Pandas DataFrame. Rows can also be selected by passing integer location to an iloc[] function.\', \'Output:As shown in the output image, two series were returned since there was only one parameter both of the times.For more examples refer to Pandas Extracting rows using .loc[]xa0Row Addition:In Order to add a Row in Pandas DataFrame, we can concat the old dataframe with new one.\', \'Output:Data Frame before Adding Row-Data Frame after Adding Row-For more examples refer to Add a row at top in pandas DataFramexa0Row Deletion:In Order to delete a row in Pandas DataFrame, we can use the drop() method. Rows is deleted by dropping Rows by index label.\', \'Output:As shown in the output images, the new output doesn’t have the passed values. Those values were dropped and the changes were made in the original data frame since inplace was True.Data Frame before Dropping values-Data Frame after Dropping values-For more examples refer to Delete rows from DataFrame using Pandas.drop()xa0Problem related to Columns:\']','[]','[\"# Import pandas packageimport pandas as pd  # Define a dictionary containing employee datadata = {\'Name\':[\'Jai\', \'Princi\', \'Gaurav\', \'Anuj\'],        \'Age\':[27, 24, 22, 32],        \'Address\':[\'Delhi\', \'Kanpur\', \'Allahabad\', \'Kannauj\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\']}  # Convert the dictionary into DataFrame df = pd.DataFrame(data)  # select two columnsprint(df[[\'Name\', \'Qualification\']])\", \"# Import pandas package import pandas as pd  # Define a dictionary containing Students datadata = {\'Name\': [\'Jai\', \'Princi\', \'Gaurav\', \'Anuj\'],        \'Height\': [5.1, 6.2, 5.1, 5.2],        \'Qualification\': [\'Msc\', \'MA\', \'Msc\', \'Msc\']}  # Convert the dictionary into DataFramedf = pd.DataFrame(data)  # Declare a list that is to be converted into a columnaddress = [\'Delhi\', \'Bangalore\', \'Chennai\', \'Patna\']  # Using \'Address\' as the column name# and equating it to the listdf[\'Address\'] = address  # Observe the resultprint(df)\", \'# importing pandas moduleimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\" )  # dropping passed columnsdata.drop([\"Team\", \"Weight\"], axis = 1, inplace = True)  # displayprint(data)\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving row by loc methodfirst = data.loc[\"Avery Bradley\"]second = data.loc[\"R.J. Hunter\"]    print(first, \"\\n\\n\\n\", second)\', \'# importing pandas module import pandas as pd     # making data frame df = pd.read_csv(\"nba.csv\", index_col =\"Name\")   df.head(10)  new_row = pd.DataFrame({\'Name\':\'Geeks\', \'Team\':\'Boston\', \'Number\':3,                        \'Position\':\'PG\', \'Age\':33, \'Height\':\'6-2\',                        \'Weight\':189, \'College\':\'MIT\', \'Salary\':99999},                                                            index =[0])# simply concatenate both dataframesdf = pd.concat([new_row, df]).reset_index(drop = True)df.head(5)\', \'# importing pandas moduleimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\" )  # dropping passed valuesdata.drop([\"Avery Bradley\", \"John Holland\", \"R.J. Hunter\",                            \"R.J. Hunter\"], inplace = True)  # displaydata\']','[]','[]','[\'How to get column names in Pandas dataframe|||How to rename columns in Pandas DataFrame|||How to drop one or multiple columns in Pandas Dataframe|||Get unique values from a column in Pandas DataFrame|||How to lowercase column names in Pandas dataframe|||Apply uppercase to a column in Pandas dataframe|||Capitalize first letter of a column in Pandas dataframe|||Get n-largest values from a particular column in Pandas DataFrame|||Get n-smallest values from a particular column in Pandas DataFrame|||Convert a column to row name/index in Pandas&&&Apply function to every row in a Pandas DataFrame|||How to get rows names in Pandas dataframe\']'),(113,'[\'Python | Pandas Extracting rows using .loc[]\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/out1-22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/out2-15.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/out3-11.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/out4-5.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax: pandas.DataFrame.loc[]\', \'Parameters:Index label: String or list of string of index label of rows\', \'Return type: Data frame or Series depending on parameters\', \'To download the CSV used in code, click here.\', \'Example #1: Extracting single Row\', \'xa0Example #2: Multiple parameters\', \'Example #3: Extracting multiple rows with same index\', \'Example #4: Extracting rows between two index labels\']','[\'Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier.\', \'Pandas provide a unique method to retrieve rows from a Data frame. DataFrame.loc[] method is a method that takes only index labels and returns row or dataframe if the index label exists in the caller data frame.\', \'In this example, Name column is made as the index column and then two single rows are extracted one by one in the form of series using index label of rows.\', \'Output:As shown in the output image, two series were returned since there was only one parameter both of the times.\', \'In this example, Name column is made as the index column and then two single rows are extracted at the same time by passing a list as parameter.\', \'Output:As shown in the output image, this time the data type of returned value is a data frame. Both of the rows were extracted and displayed like a new data frame.\', \'In this example, Team name is made as the index column and one team name is passed to .loc method to check if all values with same team name have been returned or not.\', \'Output:As shown in the output image, All rows with team name “Utah Jazz” were returned in the form of a data frame.\', \'In this example, two index label of rows are passed and all the rows that fall between those two index label have been returned (Both index labels Inclusive).\', \'Output:As shown in the output image, all the rows that fall between passed two index labels are returned in the form of a data frame.\']','[]','[\'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving row by loc methodfirst = data.loc[\"Avery Bradley\"]second = data.loc[\"R.J. Hunter\"]    print(first, \"\\n\\n\\n\", second)\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving rows by loc methodrows = data.loc[[\"Avery Bradley\", \"R.J. Hunter\"]]  # checking data type of rowsprint(type(rows))  # displayrows\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Team\")  # retrieving rows by loc methodrows = data.loc[\"Utah Jazz\"]  # checking data type of rowsprint(type(rows))  # displayrows\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving rows by loc methodrows = data.loc[\"Avery Bradley\":\"Isaiah Thomas\"]  # checking data type of rowsprint(type(rows))  # displayrows\']','[]','[]','[]'),(114,'[\'Python | Extracting rows using Pandas .iloc[]\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/out1-23.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/out2-16.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax: pandas.DataFrame.iloc[]\', \'Parameters:Index Position: Index position of rows in integer or list of integer.\', \'Return type: Data frame or Series depending on parameters\', \'To download the CSV used in code, click here.\', \'Example #1: Extracting single row and comparing with .loc[]\', \'Output:As shown in the output image, the results returned by both the methods are same.\', \'Example #2: Extracting multiple rows with index\']','[\'Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier.\', \'Pandas provide a unique method to retrieve rows from a Data frame. Dataframe.iloc[] method is used when the index label of a data frame is something other than numeric series of 0, 1, 2, 3….n or in case the user doesn’t know the index label. Rows can be extracted using an imaginary index position which isn’t visible in the data frame.\', \'In this example, same index number row is extracted by both .iloc[] and.loc[] method and compared. Since the index column by default is numeric, hence the index label will also be integers.\', \'In this example, multiple rows are extracted first by passing a list and then by passing integers to extract rows between that range. After that, both the values are compared.\', \'Output:As shown in the output image, the results returned by both the methods are same. All values are True except values in college column since those were NaN values.\']','[]','[\'# importing pandas packageimport pandas as pd  # making data frame from csv file data = pd.read_csv(\"nba.csv\")  # retrieving rows by loc method row1 = data.loc[3]  # retrieving rows by iloc methodrow2 = data.iloc[3]  # checking if values are equalrow1 == row2\', \'# importing pandas packageimport pandas as pd  # making data frame from csv file data = pd.read_csv(\"nba.csv\")  # retrieving rows by loc method row1 = data.iloc[[4, 5, 6, 7]]  # retrieving rows by loc method row2 = data.iloc[4:8]  # comparing valuesrow1 == row2\']','[]','[]','[]'),(115,'[\'Indexing and Selecting Data with Pandas\']','[]','[\'Pandas Indexing using [ ], .loc[], .iloc[ ], .ix[ ]\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/IndexingandSelectingData-min.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index-15.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index13.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index1-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index14.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index2-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index15.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/snippp.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/finalsap.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index10.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/finalsip-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas7.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas8.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas9.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/finallast.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index11.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/index12.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba-2.csv\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-ix/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-ix/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-ix/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-ix/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-ix/\', \'https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-series-head-method/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-series-tail-method/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-at/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-iat/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-series-tail-method/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-pop/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-get/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-isin/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-where/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-mask/\', \'https://www.geeksforgeeks.org/python-filtering-data-with-pandas-query-method/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-insert/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'In order to select a single column, we simply put the name of the column in-between the brackets\', \'In order to select multiple columns, we have to pass a list of columns in an indexing operator.\', \'In order to select a single row using .loc[], we put a single row label in a .loc function.\', \'In order to select a single row using .iloc[], we can pass a single integer to .iloc[] function.\', \'In order to select multiple rows, we can pass a list of integer to .iloc[] function.\']','[\'Indexing in Pandas :Indexing in pandas means simply selecting particular rows and columns of data from a DataFrame. Indexing could mean selecting all the rows and some of the columns, some of the rows and all of the columns, or some of each of the rows and columns. Indexing can also be known as Subset Selection.\', \'Let’s see some example of indexing in Pandas. In this article, we are using “nba.csv” file to download the CSV, click here.\', \'Let’s take a DataFrame with some fake data, now we perform indexing on this DataFrame. In this, we are selecting some rows and some columns from a DataFrame. Dataframe with dataset.Suppose we want to select columns Age, College and Salary for only rows with a labels Amir Johnson and Terry RozierOur final DataFrame would look like this:\', \'Let’s say we want to select row Amir Jhonson, Terry Rozier and John Holland with all columns in a dataframe.Our final DataFrame would look like this:\', \'Let’s say we want to select columns Age, Height and Salary with all rows in a dataframe.Our final DataFrame would look like this:xa0\', \'There are a lot of ways to pull the elements, rows, and columns from a DataFrame. There are some indexing method in Pandas which help in getting an element from a DataFrame. These indexing methods appear very similar but behave very differently. Pandas support four types of Multi-axes indexing they are:\', \'Output:xa0Indexing a DataFrame using .loc[ ] :This function selects data by the label of the rows and columns. The df.loc indexer selects data in a different way than just the indexing operator. It can select subsets of rows or columns. It can also simultaneously select subsets of rows and columns.\', \'Output:As shown in the output image, two series were returned since there was only one parameter both of the times.xa0\', \'In order to select multiple rows, we put all the row labels in a list and pass that to .loc function.\', \'In order to select two rows and three columns, we select a two rows which we want to select and three columns and put it in a separate list like this:\', \'In order to select all of the rows and some columns, we use single colon [:] to select all of rows and list of some columns which we want to select like this:\', \'Output:xa0Indexing a DataFrame using .iloc[ ] :This function allows us to retrieve rows and columns by position. In order to do that, we’ll need to specify the positions of the rows that we want, and the positions of the columns that we want as well. The df.iloc indexer is very similar to df.loc but only uses integer locations to make its selections.\', \'In order to select two rows and two columns, we create a list of 2 integer for rows and list of 2 integer for columns then pass to a .iloc[] function.\', \'In order to select all rows and some columns, we use single colon [:] to select all of rows and for columns we make a list of integer then pass to a .iloc[] function.\', \'In order to select a single row, we put a single row label in a .ix function. This function act similar as .loc[] if we pass a row label as a argument of a function.\', \'In order to select a single row, we can pass a single integer to .ix[] function. This function similar as a iloc[] function if we pass an integer in a .ix[] function.\']','[\'Collectively, they are called the indexers. These are by far the most common ways to index data. These are four function which help in getting the elements, rows, and columns from a DataFrame.xa0Indexing a Dataframe using indexing operator [] :Indexing operator is used to refer to the square brackets following an object. The .loc and .iloc indexers also use the indexing operator to make selections. In this indexing operator to refer to df[].\', \'Output:xa0Indexing a using Dataframe.ix[ ] :Early in the development of pandas, there existed another indexer, ix. This indexer was capable of selecting both by label and by integer location. While it was versatile, it caused lots of confusion because it’s not explicit. Sometimes integers can also be labels for rows or columns. Thus there were instances where it was ambiguous. Generally, ix is label based and acts just as the .loc indexer. However, .ix also supports integer type selections (as in .iloc) where passed an integer. This only works where the index of the DataFrame is not integer based .ix will accept any of the inputs of .loc and .iloc.Note: The .ix indexer has been deprecated in recent versions of Pandas.\']','[\'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving columns by indexing operatorfirst = data[\"Age\"]      print(first)\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving multiple columns by indexing operatorfirst = data[[\"Age\", \"College\", \"Salary\"]]      first\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving row by loc methodfirst = data.loc[\"Avery Bradley\"]second = data.loc[\"R.J. Hunter\"]    print(first, \"\\n\\n\\n\", second)\', \'import pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving multiple rows by loc methodfirst = data.loc[[\"Avery Bradley\", \"R.J. Hunter\"]]      print(first)\', \'import pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving two rows and three columns by loc methodfirst = data.loc[[\"Avery Bradley\", \"R.J. Hunter\"],                   [\"Team\", \"Number\", \"Position\"]]      print(first)\', \'import pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # retrieving all rows and some columns by loc methodfirst = data.loc[:, [\"Team\", \"Number\", \"Position\"]]      print(first)\', \'import pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")    # retrieving rows by iloc method row2 = data.iloc[3]       print(row2)\', \'import pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")    # retrieving multiple rows by iloc method row2 = data.iloc [[3, 5, 7]]      row2\', \'import pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")    # retrieving two rows and two columns by iloc method row2 = data.iloc [[3, 4], [1, 2]]      print(row2)\', \'import pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")    # retrieving all rows and some columns by iloc method row2 = data.iloc [:, [1, 2]]      print(row2)\', \'# importing pandas packageimport pandas as pd   # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")   # retrieving row by ix methodfirst = data.ix[\"Avery Bradley\"]        print(first)\', \'# importing pandas packageimport pandas as pd   # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")   # retrieving row by ix methodfirst = data.ix[1]        print(first)\']','[\'Dataframe.loc[[\"row1\", \"row2\"], [\"column1\", \"column2\", \"column3\"]]\', \'Dataframe.loc[[:, [\"column1\", \"column2\", \"column3\"]]\']','[]','[\'Dataframe.[ ] ; This function also known as indexing operator|||Dataframe.loc[ ] : This function is used for labels.|||Dataframe.iloc[ ] : This function is used for positions or integer based|||Dataframe.ix[] : This function is used for both label and integer based\']'),(116,'[\'Boolean Indexing in Pandas\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python\', \'Python3\', \'Python3\', \'Python\', \'Python\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/BooleanIndexing-min.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool5.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool13.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool6.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/finallastindex.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool10.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/bool11.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/\', \'https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/\', \'https://www.geeksforgeeks.org/python-pandas-dataframe-ix/\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba1.1.csv\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba-2.csv\', \'https://media.geeksforgeeks.org/wp-content/uploads/nba1.1.csv\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Code #2:xa0xa0\', \'Code #2:xa0xa0\', \'Code #2:xa0xa0\', \'Code #2:xa0xa0\', \'Code #2:xa0xa0\']','[\'In boolean indexing, we will select subsets of data based on the actual values of the data in the DataFrame and not on their row/column labels or integer locations. In boolean indexing, we use a boolean vector to filter the data.xa0xa0\', \'Boolean indexing is a type of indexing which uses actual values of the data in the DataFrame. In boolean indexing, we can filter a data in four ways –xa0xa0\', \'Accessing a DataFrame with a boolean index :xa0In order to access a dataframe with a boolean index, we have to create a dataframe in which the index of dataframe contains a boolean value that is “True” or “False”. For Examplexa0xa0\', \'Now we have created a dataframe with the boolean index after that user can access a dataframe with the help of the boolean index. User can access a dataframe using three functions that is .loc[], .iloc[], .ix[]xa0xa0\', \'In order to access a dataframe with a boolean index using .loc[], we simply pass a boolean value (True or False) in a .loc[] function.xa0xa0\', \'In order to access a dataframe using .iloc[], we have to pass a boolean value (True or False) xa0but iloc[] function accept only integer as an argument so it will throw an error so we can only access a dataframe when we pass an integer in iloc[] functionxa0Code #1:xa0xa0\', \'In order to access a dataframe using .ix[], we have to pass boolean value (True or False) and integer value to .ix[] function because as we know that .ix[] function is a hybrid of .loc[] and .iloc[] function.xa0Code #1:xa0xa0\', \'xa0xa0Masking data based on column value :xa0In a dataframe we can filter a data based on a column value in order to filter data, we can apply certain conditions on the dataframe using different operators like ==, >, <, <=, >=. When we apply these operators to the dataframe then it produces a Series of True and False. To download the “nba.csv” CSV, click here.Code #1:xa0xa0\', \'xa0xa0Masking data based on index value :xa0In a dataframe we can filter a data based on a column value in order to filter data, we can create a mask based on the index values using different operators like ==, >, <, etc… . To download “nba1.1” CSV file click here.Code #1:xa0xa0\']','[\'xa0xa0Applying a boolean mask to a dataframe :xa0In a dataframe we can apply a boolean mask in order to do that we, can use __getitems__ or [] accessor. We can apply a boolean mask by giving a list of True and False of the same length as contain in a dataframe. When we apply a boolean mask it will print only that dataframe in which we pass a boolean value True. To download “nba1.1” CSV file click here.Code #1:xa0xa0\']','[\'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],        \'score\':[90, 40, 80, 98]}  df = pd.DataFrame(dict, index = [True, False, True, False])  print(df)\', \'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],        \'score\':[90, 40, 80, 98]} # creating a dataframe with boolean indexdf = pd.DataFrame(dict, index = [True, False, True, False]) # accessing a dataframe using .loc[] functionprint(df.loc[True])\', \'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],        \'score\':[90, 40, 80, 98]} # creating a dataframe with boolean index df = pd.DataFrame(dict, index = [True, False, True, False]) # accessing a dataframe using .iloc[] functionprint(df.iloc[True])\', \'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],        \'score\':[90, 40, 80, 98]} # creating a dataframe with boolean index df = pd.DataFrame(dict, index = [True, False, True, False])   # accessing a dataframe using .iloc[] functionprint(df.iloc[1])\', \'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],        \'score\':[90, 40, 80, 98]} # creating a dataframe with boolean indexdf = pd.DataFrame(dict, index = [True, False, True, False])   # accessing a dataframe using .ix[] functionprint(df.ix[True])\', \'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],        \'score\':[90, 40, 80, 98]} # creating a dataframe with boolean indexdf = pd.DataFrame(dict, index = [True, False, True, False])   # accessing a dataframe using .ix[] functionprint(df.ix[1])\', \'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],        \'score\':[90, 40, 80, 98]}  df = pd.DataFrame(dict, index = [0, 1, 2, 3])    print(df[[True, False, True, False]])\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba1.1.csv\")  df = pd.DataFrame(data, index = [0, 1, 2, 3, 4, 5, 6,                                 7, 8, 9, 10, 11, 12])   df[[True, False, True, False, True,    False, True, False, True, False,                True, False, True]]\', \'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"BCA\", \"BCA\", \"M.Tech\", \"BCA\"],        \'score\':[90, 40, 80, 98]} # creating a dataframedf = pd.DataFrame(dict)  # using a comparison operator for filtering of dataprint(df[\'degree\'] == \'BCA\')\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")  # using greater than operator for filtering of dataprint(data[\'Age\'] > 25)\', \'# importing pandas as pdimport pandas as pd  # dictionary of listsdict = {\'name\':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],        \'degree\': [\"BCA\", \"BCA\", \"M.Tech\", \"BCA\"],        \'score\':[90, 40, 80, 98]}   df = pd.DataFrame(dict, index = [0, 1, 2, 3]) mask = df.index == 0 print(df[mask])\', \'# importing pandas packageimport pandas as pd  # making data frame from csv filedata = pd.read_csv(\"nba1.1.csv\") # giving a index to a dataframedf = pd.DataFrame(data, index = [0, 1, 2, 3, 4, 5, 6,                                 7, 8, 9, 10, 11, 12]) # filtering data on index valuemask = df.index > 7 df[mask]\']','[\'TypeError\']','[]','[\'Accessing a DataFrame with a boolean index|||Applying a boolean mask to a dataframe|||Masking data based on column value|||Masking data based on an index value\']'),(117,'[\'Pandas GroupBy\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/groupby1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/groupby3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/groupby2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/groupby4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser23.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser24.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser25.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser26.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser27.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser28.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser29.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser30.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser31.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser32.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser33.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser34.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser35.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser22.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser36.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser37.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser38.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser37.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser39.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser37.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/ser40.jpg\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'2. Now there’s a bucket for each groupxa0xa0\', \'3. Toss the other data into the bucketsxa0xa0\', \'4. Apply a function on the weight column of each bucket.xa0xa0\', \'Now we group a data of Name using groupby() function.xa0xa0\', \'Output :xa0xa0\', \'xa0xa0Now we print the first entries in all the groups formed.xa0xa0\', \'Output :xa0xa0\', \'Output :xa0xa0\', \'Now we apply groupby() without sortxa0xa0\', \'Output :xa0xa0\', \'Now we apply groupby() using sort in order to attain potential speedupsxa0xa0\', \'Output :xa0xa0\', \'Now we group data like we do in a dictionary using keys.xa0xa0\', \'Output :xa0xa0\', \'Now we iterate an element of group in a similar way we do in itertools.obj.xa0xa0\', \'Output :xa0xa0\', \'Now we iterate an element of group containing multiple keysxa0xa0\', \'Output :xa0As shown in output that group name will be tuplexa0xa0\', \'Now we select a single group using Groupby.get_group.xa0xa0\', \'Output :xa0xa0\', \'Now we select an object grouped on multiple columnsxa0xa0\', \'Output :xa0xa0\', \'Now we perform aggregation using aggregate methodxa0xa0\', \'Output :xa0xa0\', \'Now we perform aggregation on agroup containing multiple keysxa0xa0\', \'Output :xa0xa0\', \'Now we apply a multiple functions by passing a list of functions.xa0xa0\', \'Output :xa0xa0\', \'Now we apply a different aggregation to the columns of a dataframe.xa0xa0\', \'Output :xa0xa0\', \'Now we perform some group-specific computations and return a like-indexed.xa0xa0\', \'Output :xa0xa0\', \'Now we filter data that to return the Name which have lived two or more times .xa0xa0\', \'Output :xa0xa0\']','[\'The following image will help in understanding a process involve in Groupby concept.xa01. Group the unique values from the Team columnxa0xa0\', \'Note :In this we refer to the grouping objects as the keys.xa0Grouping data with one key:xa0In order to group data with one key, we pass only one key as an argument in groupby function.xa0xa0\', \'xa0xa0Grouping data with multiple keys :xa0In order to group data with multiple keys, we pass multiple keys in groupby function.xa0xa0\', \'Now we group a data of “Name” and “Qualification” together using multiple keys in groupby function.xa0xa0\', \'xa0xa0Grouping data by sorting keys :xa0Group keys are sorted by default using the groupby operation. User can pass sort=False for potential speedups.xa0xa0\', \'xa0xa0Grouping data with object attributes :xa0Groups attribute is like dictionary whose keys are the computed unique groups and corresponding values being the axis labels belonging to each group.xa0xa0\', \'In order to iterate an element of groups, we can iterate through the object similar to itertools.obj.xa0xa0\', \'In order to select a group, we can select group using GroupBy.get_group(). We can select a group by applying a function GroupBy.get_group this function select a single group.xa0xa0\', \'After splitting a data into a group, we apply a function to each group in order to do that we perform some operation they are:xa0xa0\', \'xa0xa0Aggregation :xa0Aggregation is a process in which we compute a summary statistic about each group. Aggregated function returns a single aggregated value for each group. After splitting a data into groups using groupby function, several aggregation operations can be performed on the grouped data.xa0Code #1: Using aggregation via the aggregate methodxa0xa0\', \'xa0xa0Applying multiple functions at once :xa0We can apply a multiple functions at once by passing a list or dictionary of functions to do aggregation with, outputting a DataFrame.xa0xa0\', \'xa0xa0Applying different functions to DataFrame columns :xa0In order to apply a different aggregation to the columns of a DataFrame, we can pass a dictionary to aggregate .xa0xa0\', \'Transformation :xa0Transformation is a process in which we perform some group-specific computations and return a like-indexed. Transform method returns an object that is indexed the same (same size) as the one being grouped. The transform function must:xa0xa0\', \'Filtration :xa0Filtration is a process in which we discard some groups, according to a group-wise computation that evaluates True or False. In order to filter a group, we use filter method and apply some condition by which we filter group.xa0xa0\']','[\'Groupby is a pretty simple concept. We can create a grouping of categories and apply a function to the categories. It’s a simple concept but it’s an extremely valuable technique that’s widely used in data science. In real data science projects, you’ll be dealing with large amounts of data and trying things over and over, so for efficiency, we use Groupby concept. Groupby concept is really important because it’s ability to aggregate data efficiently, both in performance and the amount code is magnificent. Groupby mainly refers to a process involving one or more of the following steps they are:xa0xa0\', \'Splitting is a process in which we split data into a group by applying some conditions on datasets. In order to split the data, we apply certain conditions on datasets. In order to split the data, we use groupby() function this function is used to split the data into groups based on some criteria. Pandas objects can be split on any of their axes. The abstract definition of grouping is to provide a mapping of labels to group names. Pandas datasets can be split into any of their objects. There are multiple ways to split data like:xa0xa0\']','[\"# importing pandas moduleimport pandas as pd  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\']}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# using groupby function# with one key df.groupby(\'Name\')print(df.groupby(\'Name\').groups)\", \"# applying groupby() function to# group the data on Name value.gk = df.groupby(\'Name\')   # Let\'s print the first entries# in all the groups formed.gk.first()\", \"# importing pandas moduleimport pandas as pd  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\']}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# Using multiple keys in# groupby() functiondf.groupby([\'Name\', \'Qualification\']) print(df.groupby([\'Name\', \'Qualification\']).groups)\", \"# importing pandas moduleimport pandas as pd  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32], }      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# using groupby function# without using sort df.groupby([\'Name\']).sum()\", \"# using groupby function# with sort df.groupby([\'Name\'], sort = False).sum()\", \"# importing pandas moduleimport pandas as pd  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\']}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# using keys for grouping# data df.groupby(\'Name\').groups\", \"# importing pandas moduleimport pandas as pd  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\']}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# iterating an element# of group grp = df.groupby(\'Name\')for name, group in grp:    print(name)    print(group)    print()\", \"# iterating an element# of group containing# multiple keys grp = df.groupby([\'Name\', \'Qualification\'])for name, group in grp:    print(name)    print(group)    print()\", \"# importing pandas moduleimport pandas as pd  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\']}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# selecting a single group grp = df.groupby(\'Name\')grp.get_group(\'Jai\')\", \"# selecting object grouped# on multiple columns grp = df.groupby([\'Name\', \'Qualification\'])grp.get_group((\'Jai\', \'Msc\'))\", \"# importing pandas moduleimport pandas as pd # importing numpy as npimport numpy as np  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\']}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# performing aggregation using# aggregate method grp1 = df.groupby(\'Name\') grp1.aggregate(np.sum)\", \"# performing aggregation on# group containing multiple# keysgrp1 = df.groupby([\'Name\', \'Qualification\']) grp1.aggregate(np.sum)\", \"# importing pandas moduleimport pandas as pd # importing numpy as npimport numpy as np  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\']}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# applying a function by passing# a list of functions grp = df.groupby(\'Name\') grp[\'Age\'].agg([np.sum, np.mean, np.std])\", \"# importing pandas moduleimport pandas as pd # importing numpy as npimport numpy as np  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\'],        \'Score\': [23, 34, 35, 45, 47, 50, 52, 53]}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# using different aggregation# function by passing dictionary# to aggregategrp = df.groupby(\'Name\') grp.agg({\'Age\' : \'sum\', \'Score\' : \'std\'})\", \"# importing pandas moduleimport pandas as pd # importing numpy as npimport numpy as np  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\'],        \'Score\': [23, 34, 35, 45, 47, 50, 52, 53]}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# using transform functiongrp = df.groupby(\'Name\')sc = lambda x: (x - x.mean()) / x.std()*10grp.transform(sc)\", \"# importing pandas moduleimport pandas as pd # importing numpy as npimport numpy as np  # Define a dictionary containing employee datadata1 = {\'Name\':[\'Jai\', \'Anuj\', \'Jai\', \'Princi\',                 \'Gaurav\', \'Anuj\', \'Princi\', \'Abhi\'],        \'Age\':[27, 24, 22, 32,               33, 36, 27, 32],        \'Address\':[\'Nagpur\', \'Kanpur\', \'Allahabad\', \'Kannuaj\',                   \'Jaunpur\', \'Kanpur\', \'Allahabad\', \'Aligarh\'],        \'Qualification\':[\'Msc\', \'MA\', \'MCA\', \'Phd\',                         \'B.Tech\', \'B.com\', \'Msc\', \'MA\'],        \'Score\': [23, 34, 35, 45, 47, 50, 52, 53]}      # Convert the dictionary into DataFrame df = pd.DataFrame(data1)  print(df)\", \"# filtering data using# filter datagrp = df.groupby(\'Name\')grp.filter(lambda x: len(x) >= 2)\"]','[]','[]','[\'Splitting : It is a process in which we split data into group by applying some conditions on datasets.|||Applying : It is a process in which we apply a function to each group independently|||Combining : It is a process in which we combine different datasets after applying groupby and results into a data structure&&&obj.groupby(key)|||obj.groupby(key, axis=1)|||obj.groupby([key1, key2])&&&Aggregation : It is a process in which we compute a summary statistic (or statistics) about each group. For Example, Compute group sums ormeans|||Transformation : It is a process in which we perform some group-specific computations and return a like-indexed. For Example, Filling NAs within groups with a value derived from each group|||Filtration : It is a process in which we discard some groups, according to a group-wise computation that evaluates True or False. For Example, Filtering out data based on the group sum or mean&&&Return a result that is either the same size as the group chunk|||Operate column-by-column on the group chunk|||Not perform in-place operations on the group chunk.\']'),(118,'[\'Python | Working with date and time using Pandas\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/data_dataframe1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/Untitled-125.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Untitled-129.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Untitled-130.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://pandas.pydata.org/pandas-docs/stable/api.html#datetimelike-properties\', \'http://bit.ly/uforeports\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Code #1: Create a dates dataframexa0\', \'xa0Code #2: Create range of dates and show basic featuresxa0\', \'Divide a given date into features –xa0\', \'Code #3: Break date and time into separate featuresxa0xa0\', \'Let’s analyze this problem on a real dataset uforeports.xa0\']','[\'While working with data, encountering time series data is very usual. Pandas is a very useful tool while working with time series data.xa0\', \'Pandas provide a different set of tools using which we can perform all the necessary tasks on date-time data. Let’s try to understand with the examples discussed below.\', \'Datetime features can be divided into two categories. The first one time moments in a period and second the time passed since a particular period. These features can be very useful to understand the patterns in the data.\', \'pandas.Series.dt.year returns the year of the date time.xa0pandas.Series.dt.month returns the month of the date time.xa0pandas.Series.dt.day returns the day of the date time.xa0pandas.Series.dt.hour returns the hour of the date time.xa0pandas.Series.dt.minute returns the minute of the date time.Refer all datetime properties from here.\', \'Code #4: To get the present time, use Timestamp.now() and then convert timestamp to datetime and directly access year, month or day.\']','[]','[\"import pandas as pd # Create dates dataframe with frequency data = pd.date_range(\'1/1/2011\', periods = 10, freq =\'H\') data\", \"# Create date and time with dataframedata = pd.date_range(\'1/1/2011\', periods = 10, freq =\'H\') x = datetime.now()x.month, x.year\", \"# Create date and time with dataframerng = pd.DataFrame()rng[\'date\'] = pd.date_range(\'1/1/2011\', periods = 72, freq =\'H\') # Print the dates in dd-mm-yy formatrng[:5] # Create features for year, month, day, hour, and minuterng[\'year\'] = rng[\'date\'].dt.yearrng[\'month\'] = rng[\'date\'].dt.monthrng[\'day\'] = rng[\'date\'].dt.dayrng[\'hour\'] = rng[\'date\'].dt.hourrng[\'minute\'] = rng[\'date\'].dt.minute # Print the dates divided into featuresrng.head(3)\", \'# Input present datetime using Timestampt = pandas.tslib.Timestamp.now()t\', \'# Convert timestamp to datetimet.to_datetime()\', \'# Directly access and print the featurest.yeart.montht.dayt.hourt.minutet.second\', \"import pandas as pd url = \'http://bit.ly/uforeports\' # read csv filedf = pd.read_csv(url)          df.head()\", \"# Convert the Time column to datetime formatdf[\'Time\'] = pd.to_datetime(df.Time) df.head()\", \'# shows the type of each column datadf.dtypes\', \'# Get hour detail from time datadf.Time.dt.hour.head()\', \'# Get name of each datedf.Time.dt.weekday_name.head()\', \'# Get ordinal day of the yeardf.Time.dt.dayofyear.head()\']','[\'(9, 2018)\', \"Timestamp(\'2018-09-18 17:18:49.101496\')\", \'datetime.datetime(2018, 9, 18, 17, 18, 49, 101496)\', \'2018\n8\n25\n15\n53\', \'City                       object\nColors Reported            object\nShape Reported             object\nState                      object\nTime               datetime64[ns]\ndtype: object\', \'0    22\n1    20\n2    14\n3    13\n4    19\nName: Time, dtype: int64\', \'0     Sunday\n1     Monday\n2     Sunday\n3     Monday\n4    Tuesday\nName: Time, dtype: object\', \'0    152\n1    181\n2     46\n3    152\n4    108\nName: Time, dtype: int64\']','[]','[]'),(119,'[\'Python | Read csv using pandas.read_csv()\']','[\'PYTHON3\', \'PYTHON3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/indexcol.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/header.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://drive.google.com/open?id=1IL2tszyJKNrzqH-FbIU9ZEWHLHzOliRl\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'xa0xa0Code #1 : read_csv is an important pandas function to read csv files and do operations on it.xa0xa0\', \'Makes passed column as index instead of 0, 1, 2, 3…rxa0xa0\', \'Makes passed row/s[int/int list] as headerxa0\', \'Refer the link to data set used from here.Code #2 :xa0\']','[\'Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric python packages. Pandas is one of those packages and makes importing and analyzing data much easier.Import Pandas:xa0xa0\', \'Not all of them are much important but remembering these actually save time of performing same functions on own. One can see parameters of any function by pressing shift + tab in jupyter notebook. Useful ones are given below with their usage :xa0\']','[\'Opening a CSV file through this is easy. But there are many others thing one can do through this function only to change the returned object completely. For instance, one can read a csv file not only locally, but from a URL through read_csv or one can choose what columns needed to export so that we don’t have to edit the array later.Here is the list of parameters it takes with their Default values.xa0\', \"pd.read_csv(filepath_or_buffer, sep=’, ‘, delimiter=None, header=’infer’, names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, iterator=False, chunksize=None, compression=’infer’, thousands=None, decimal=b’.’, lineterminator=None, quotechar=\'”‘, quoting=0, escapechar=None, comment=None, encoding=None, dialect=None, tupleize_cols=None, error_bad_lines=True, warn_bad_lines=True, skipfooter=0, doublequote=True, delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None)xa0xa0\"]','[\'# Import pandasimport pandas as pd # reading csv filepd.read_csv(\"filename.csv\")\', \'# importing Pandas libraryimport pandas as pd pd.read_csv(filepath_or_buffer = \"pokemon.csv\") # makes the passed rows headerpd.read_csv(\"pokemon.csv\", header =[1, 2]) # make the passed column as index instead of 0, 1, 2, 3....pd.read_csv(\"pokemon.csv\", index_col =\'Type\') # uses passed cols only for data framepd.read_csv(\"pokemon.csv\", usecols =[\"Type\"]) # returns pandas series if there is only one columnpd.read_csv(\"pokemon.csv\", usecols =[\"Type\"],                              squeeze = True)                               # skips the passed rows in new seriespd.read_csv(\"pokemon.csv\",            skiprows = [1, 2, 3, 4])\']','[\'import pandas as pd\']','[\'filepath_or_buffer|||URL or Dir location of file&&&sep|||Stands for separator, default is ‘, ‘ as in csv(comma separated values)&&&index_col|||Makes passed column as index instead of 0, 1, 2, 3…rxa0xa0xa0&&&header|||Makes passed row/s[int/int list] as headerxa0xa0&&&use_cols|||Only uses the passed col[string list] to make data frame&&&squeeze|||If true and only one column is passed, returns pandas series&&&skiprows|||Skips passed rows in new data frame\']','[]'),(120,'[\'Python | Working with Pandas and XlsxWriter | Set – 1\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/pandas_with_excel1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas_with_excel2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas_with_excel3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/pandas_with_excel4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-5319.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Pandas writes Excel files using the XlsxWriter modules.\', \'Code #1: Converting a Pandas dataframe to an xlsx file using Pandas and XlsxWriter.\', \'Code #2: Writing multiple dataframes to worksheets using Pandas and XlsxWriter.\', \'Output :  xa0Code #3: Positioning dataframes in a worksheet using Pandas and XlsxWriter.\']','[\'Python Pandas is a data analysis library. It can read, filter and re-arrange small and large datasets and output them in a range of formats including Excel.\', \'XlsxWriter is a Python module for writing files in the XLSX file format. It can be used to write text, numbers, and formulas to multiple worksheets. Also, it supports features such as formatting, images, charts, page setup, auto filters, conditional formatting and many others.\']','[]','[\"# import pandas as pdimport pandas as pd  # Create a Pandas dataframe from some data.df = pd.DataFrame({\'Data\': [\'Geeks\', \'For\', \'geeks\', \'is\',                               \'portal\', \'for\', \'geeks\']})  # Create a Pandas Excel writer# object using XlsxWriter as the engine.writer = pd.ExcelWriter(\'pandasEx.xlsx\',                    engine =\'xlsxwriter\')  # Write a dataframe to the worksheet.df.to_excel(writer, sheet_name =\'Sheet1\')  # Close the Pandas Excel writer# object and output the Excel file.writer.save()\", \"# import pandas as pdimport pandas as pd    # Create some Pandas dataframes from some data.df1 = pd.DataFrame({\'Data\': [11, 12, 13, 14]})df2 = pd.DataFrame({\'Data\': [21, 22, 23, 24]})df3 = pd.DataFrame({\'Data\': [31, 32, 33, 34]})  # Create a Pandas Excel writer object # using XlsxWriter as the engine.writer = pd.ExcelWriter(\'pandas_multiple.xlsx\',                           engine =\'xlsxwriter\')  # Write each dataframe to a different worksheet.df1.to_excel(writer, sheet_name =\'Sheet1\')df2.to_excel(writer, sheet_name =\'Sheet2\')df3.to_excel(writer, sheet_name =\'Sheet3\')  # Close the Pandas Excel writer object# and output the Excel file.writer.save()\", \"# import pandas as pdimport pandas as pd    # Create some Pandas dataframes from some data.df1 = pd.DataFrame({\'Data\': [11, 12, 13, 14]})df2 = pd.DataFrame({\'Data\': [21, 22, 23, 24]})df3 = pd.DataFrame({\'Data\': [31, 32, 33, 34]})df4 = pd.DataFrame({\'Data\': [41, 42, 43, 44]})  # Create a Pandas Excel writer object# using XlsxWriter as the engine.writer = pd.ExcelWriter(\'pandas_positioning.xlsx\',                              engine =\'xlsxwriter\')  # write and Positioning the dataframes in the worksheet.# Default position, cell A1.df1.to_excel(writer, sheet_name =\'Sheet1\')  df2.to_excel(writer, sheet_name =\'Sheet1\', startcol = 3)df3.to_excel(writer, sheet_name =\'Sheet1\', startrow = 6)  # It is also possible to write the# dataframe without the header and index.df4.to_excel(writer, sheet_name =\'Sheet1\',             startrow = 7, startcol = 4,             header = False, index = False)  # Close the Pandas Excel writer object# and output the Excel file.writer.save()\"]','[]','[]','[]'),(121,'[\'Django Tutorial\']','[]','[\'Django Basics\', \'Django Forms\', \'Django Templates\', \'Misc\', \'Django Views\', \'Django Models\', \'Projects\']','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200221235734/Django-tutorial-learn-.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://www.geeksforgeeks.org/tag/python-django/\', \'https://www.geeksforgeeks.org/django-basics/\', \'https://www.geeksforgeeks.org/django-introduction-and-installation/\', \'https://www.geeksforgeeks.org/when-to-use-django-comparison-with-other-development-stacks/\', \'https://www.geeksforgeeks.org/django-project-mvt-structure/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://www.geeksforgeeks.org/django-forms/\', \'https://www.geeksforgeeks.org/how-to-create-a-form-using-django-forms/\', \'https://www.geeksforgeeks.org/render-html-forms-get-post-in-django/\', \'https://www.geeksforgeeks.org/django-forms/#form-fields\', \'https://www.geeksforgeeks.org/django-form-field-custom-widgets/\', \'https://www.geeksforgeeks.org/initial-form-data-django-forms/\', \'https://www.geeksforgeeks.org/django-modelform-create-form-from-models/\', \'https://www.geeksforgeeks.org/render-django-form-fields-manually/\', \'https://www.geeksforgeeks.org/django-formsets/\', \'https://www.geeksforgeeks.org/django-modelformsets/\', \'https://www.geeksforgeeks.org/django-templates/\', \'https://www.geeksforgeeks.org/django-template-filters/\', \'https://www.geeksforgeeks.org/django-template-tags/\', \'https://www.geeksforgeeks.org/variables-django-templates/\', \'https://www.geeksforgeeks.org/boolean-operators-django-template-tags/\', \'https://www.geeksforgeeks.org/for-loop-django-template-tags/\', \'https://www.geeksforgeeks.org/if-django-template-tags/\', \'https://www.geeksforgeeks.org/extends-django-template-tags/\', \'https://www.geeksforgeeks.org/handling-ajax-request-in-django/\', \'https://www.geeksforgeeks.org/python-user-groups-custom-permissions-django/\', \'https://www.geeksforgeeks.org/python-django-admin-interface/\', \'https://www.geeksforgeeks.org/python-extending-and-customizing-django-allauth/\', \'https://www.geeksforgeeks.org/django-dealing-with-warnings/\', \'https://www.geeksforgeeks.org/python-sessions-framework-using-django/\', \'https://www.geeksforgeeks.org/django-sign-up-and-login-with-confirmation-email-python/\', \'https://www.geeksforgeeks.org/views-in-django-python/\', \'https://www.geeksforgeeks.org/django-crud-create-retrieve-update-delete-function-based-views/\', \'https://www.geeksforgeeks.org/create-view-function-based-views-django/\', \'https://www.geeksforgeeks.org/list-view-function-based-views-django/\', \'https://www.geeksforgeeks.org/detail-view-function-based-views-django/\', \'https://www.geeksforgeeks.org/update-view-function-based-views-django/\', \'https://www.geeksforgeeks.org/delete-view-function-based-views-django/\', \'https://www.geeksforgeeks.org/class-based-generic-views-django-create-retrieve-update-delete/\', \'https://www.geeksforgeeks.org/createview-class-based-views-django/\', \'https://www.geeksforgeeks.org/listview-class-based-views-django/\', \'https://www.geeksforgeeks.org/detailview-class-based-views-django/\', \'https://www.geeksforgeeks.org/updateview-class-based-views-django/\', \'https://www.geeksforgeeks.org/listview-class-based-views-django/\', \'https://www.geeksforgeeks.org/formview-class-based-views-django/\', \'https://www.geeksforgeeks.org/django-models/\', \'https://www.geeksforgeeks.org/django-orm-inserting-updating-deleting-data/\', \'https://www.geeksforgeeks.org/django-basic-app-model-makemigrations-and-migrate/\', \'https://www.geeksforgeeks.org/django-model-data-types-and-fields-list/\', \'https://www.geeksforgeeks.org/add-the-slug-field-inside-django-model/\', \'https://www.geeksforgeeks.org/intermediate-fields-in-django-python/\', \'https://www.geeksforgeeks.org/python-uploading-images-in-django/\', \'https://www.geeksforgeeks.org/render-model-in-django-admin-interface/\', \'https://www.geeksforgeeks.org/change-object-display-name-using-__str__-function-django-models-python/\', \'https://www.geeksforgeeks.org/built-in-field-validations-django-models/\', \'https://www.geeksforgeeks.org/custom-field-validations-in-django-models/\', \'https://www.geeksforgeeks.org/how-to-use-django-field-choices/\', \'https://www.geeksforgeeks.org/overriding-the-save-method-django-models/\', \'https://www.geeksforgeeks.org/python-django-google-authentication-and-fetching-mails-from-scratch/\', \'https://www.geeksforgeeks.org/python-todo-webapp-using-django/\', \'https://www.geeksforgeeks.org/python-django-news-app/\', \'https://www.geeksforgeeks.org/weather-app-using-django-python/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Recent Articles on Django !!\']','[]','[\'Django is a Python-based web framework that allows you to quickly create efficient web applications. It is also called batteries included framework because Django provides built-in features for everything including Django Admin Interface, default database – SQLlite3, etc. When you’re building a website, you always need a similar set of components: a way to handle user authentication (signing up, signing in, signing out), a management panel for your website, forms, a way to upload files, etc. Django gives you ready-made components to use and that too for rapid development.\']','[]','[]','[]','[\'Excellent documentation and high scalability.|||Used by Top MNCs and Companies, such as Instagram, Disqus, Spotify, Youtube, Bitbucket, Dropbox, etc. and the list is never-ending.|||Easiest Framework to learn, rapid development and Batteries fully included.|||The last but not least reason to learn Django is Python, Python has huge library and features such as Web Scrapping, Machine Learning, Image Processing, Scientific Computing, etc. One can integrate it all this with web application and do lots and lots of advance stuff.&&&Django Basics|||Django Introduction and Installation|||When to Use Django? Comparison with other Development Stacks|||Django Project MVT Structure|||How to Create a Basic Project using MVT in Django ?|||How to Create an App in Django ?&&&Django Forms|||How to create a form using Django Forms ?|||Render HTML Forms (GET & POST) in Django|||Django Form Fields|||form field custom widgets|||Initial form data – Django Forms|||ModelForm – Create form from Models|||Render Form Fields Manually|||Django Formsets|||Django ModelFormSets&&&Django Templates|||Template Filters|||Template Tags|||variables|||Boolean Operators|||for loop|||if – Django Templates|||Template Inheritance&&&Handling Ajax request in Django|||User groups with Custom permissions in Django|||Django Admin Interface|||Extending and customizing django-allauth|||Django – Dealing with warnings|||Sessions framework using django|||Django Sign Up and login with confirmation Email&&&Django Views|||Function Based ViewsCreate ViewList ViewDetail ViewUpdate ViewDelete View|||Create View|||List View|||Detail View|||Update View|||Delete View|||Class Based Generic Views DjangoCreateviewListViewDetailViewUpdateViewDeleteViewFormViewDjango ModelsDjango ModelsORM – Inserting, Updating & Deleting DataBasic App Model – Makemigrations and Migratemodel data types and fields listAdd the slug field inside Django ModelIntermediate fields in DjangoUploading images in DjangoRender Model in Django Admin InterfaceChange Object Display Name using __str__ function – Django ModelsBuilt-in Field Validations – Django ModelsCustom Field Validations in Django ModelsHow to use Django Field Choices ?Overriding the save method – Django ModelsProjectsGoogle authentication and Fetching mails from scratchToDo webapp using DjangoDjango News AppWeather app using Django|||Createview|||ListView|||DetailView|||UpdateView|||DeleteView|||FormView|||Django Models|||ORM – Inserting, Updating & Deleting Data|||Basic App Model – Makemigrations and Migrate|||model data types and fields list|||Add the slug field inside Django Model|||Intermediate fields in Django|||Uploading images in Django|||Render Model in Django Admin Interface|||Change Object Display Name using __str__ function – Django Models|||Built-in Field Validations – Django Models|||Custom Field Validations in Django Models|||How to use Django Field Choices ?|||Overriding the save method – Django Models|||Google authentication and Fetching mails from scratch|||ToDo webapp using Django|||Django News App|||Weather app using Django&&&Create View|||List View|||Detail View|||Update View|||Delete View&&&Createview|||ListView|||DetailView|||UpdateView|||DeleteView|||FormView&&&Django Models|||ORM – Inserting, Updating & Deleting Data|||Basic App Model – Makemigrations and Migrate|||model data types and fields list|||Add the slug field inside Django Model|||Intermediate fields in Django|||Uploading images in Django|||Render Model in Django Admin Interface|||Change Object Display Name using __str__ function – Django Models|||Built-in Field Validations – Django Models|||Custom Field Validations in Django Models|||How to use Django Field Choices ?|||Overriding the save method – Django Models&&&Google authentication and Fetching mails from scratch|||ToDo webapp using Django|||Django News App|||Weather app using Django\']'),(122,'[\'Django Basics\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200210175202/django-basics.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-62-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200210141248/django-basics-project.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/when-to-use-django-comparison-with-other-development-stacks/\', \'https://www.geeksforgeeks.org/django-project-mvt-structure/\', \'https://www.python.org/downloads/\', \'http://localhost:8000/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://www.geeksforgeeks.org/django-models/\', \'https://www.geeksforgeeks.org/django-forms/\', \'https://www.geeksforgeeks.org/views-in-django-python/\', \'https://www.geeksforgeeks.org/django-templates/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'MVT Structure has the following three parts –\', \'To check more about Django’s architecture, visit Django Project MVT Structure\', \'Lets’ check how to create a basic project using Django after you have installed it in your pc.\', \'Now visit http://localhost:8000/,\', \'Now you can see your directory structure as under :\']','[\'Django is based on MVT (Model-View-Template) architecture. MVT is a software design pattern for developing a web application.\', \'Model: Model is going to act as the interface of your data. It is responsible for maintaining data. It is the logical data structure behind the entire application and is represented by a database (generally relational databases such as MySql, Postgres).\', \'View: The View is the user interface — what you see in your browser when you render a website. It is represented by HTML/CSS/Javascript and Jinja files.\', \'Template: A template consists of static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted.\', \'Note- Installation of Django in Linux and Mac is similar, here I am showing it in windows for Linux and mac just open terminal in place of command prompt and go through the following commands.\', \'Django is famous for its unique and fully managed app structure. For every functionality, an app can be created like a completely independent module. This article will take you through how to create a basic app and add functionalities using that app.\', \'Now in the list of URL patterns, you need to specify app name for including your app urls. Here is the code for it –\', \'The main feature of Django Apps is independence, every app functions as an independent unit in supporting the main project. To know more about apps in Django, visit How to Create an App in Django ?\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Django is a Python-based web framework which allows you to quickly create web application without all of the installation or dependency problems that you normally will find with other frameworks.When you’re building a website, you always need a similar set of components: a way to handle user authentication (signing up, signing in, signing out), a management panel for your website, forms, a way to upload files, etc. Django gives you ready-made components to use.\']','[\"# Application definition  INSTALLED_APPS = [    \'django.contrib.admin\',    \'django.contrib.auth\',    \'django.contrib.contenttypes\',    \'django.contrib.sessions\',    \'django.contrib.messages\',    \'django.contrib.staticfiles\',    \'projectApp\']\", \'from django.contrib import adminfrom django.urls import path, include  urlpatterns = [    path(\'admin/\', admin.site.urls),    # Enter the app name in following syntax for this to work    path(\'\', include(\"projectApp.urls\")),]\']','[\'python -m pip install -U pip\', \'pip install virtualenv\', \'virtualenv env_site\', \'cd env_site\', \'cd Script\', \'activate\', \'pip install django\', \'django-admin startproject projectName\', \'cd projectName\', \'Python manage.py runserver\', \'python manage.py startapp projectApp\', \'from django.urls import include\']','[]','[\'Django is a rapid web development framework that can be used to develop fully fleshed web applications in a short period of time.|||It’s very easy to switch database in Django framework.|||It has built-in admin interface which makes easy to work with it.|||Django is fully functional framework that requires nothing else.|||It has thousands of additional packages available.|||It is very scalable. For more visit When to Use Django? Comparison with other Development Stacks ?&&&Install python3 if not installed in your system ( according to configuration of your system and OS) from here . Try to download the latest version of python it’s python3.6.4 this time.Note- Installation of Django in Linux and Mac is similar, here I am showing it in windows for Linux and mac just open terminal in place of command prompt and go through the following commands.|||Install pip- Open command prompt and enter following command-python -m pip install -U pip|||Install virtual environment- Enter following command in cmd-pip install virtualenv|||Set Virtual environment- Setting up the virtual environment will allow you to edit the dependency which generally your system wouldn’t allow.Follow these steps to set up a virtual environment-Create a virtual environment by giving this command in cmd-virtualenv env_siteChange directory to env_site by this command-cd env_siteGo to Script directory inside env_site and activate virtual environment-cd Scriptactivate|||Create a virtual environment by giving this command in cmd-virtualenv env_site|||Change directory to env_site by this command-cd env_site|||Go to Script directory inside env_site and activate virtual environment-cd Scriptactivate|||Install Django- Install django by giving following command-pip install djangoCreating a ProjectLets’ check how to create a basic project using Django after you have installed it in your pc.To initiate a project of Django on Your PC, open Terminal and Enter the following commanddjango-admin startproject projectNameA New Folder with name projectName will be created. To enter in the project using terminal enter commandcd projectNameNow run,Python manage.py runserverNow visit http://localhost:8000/,Creating an AppDjango is famous for its unique and fully managed app structure. For every functionality, an app can be created like a completely independent module. This article will take you through how to create a basic app and add functionalities using that app.To create a basic app in your Django project you need to go to directory containing manage.py and from there enter the command :python manage.py startapp projectAppNow you can see your directory structure as under :To consider the app in your project you need to specify your project name in INSTALLED_APPS list as follows in settings.py:# Application definitionINSTALLED_APPS = [\'django.contrib.admin\',\'django.contrib.auth\',\'django.contrib.contenttypes\',\'django.contrib.sessions\',\'django.contrib.messages\',\'django.contrib.staticfiles\',\'projectApp\']So, we have finally created an app but to render the app using urls we need to include the app in our main project so that urls redirected to that app can be rendered. Let us explore it.Move to projectName-> projectName -> urls.py and add below code in the headerfrom django.urls import include Now in the list of URL patterns, you need to specify app name for including your app urls. Here is the code for it –from django.contrib import adminfrom django.urls import path, includeurlpatterns = [path(\'admin/\', admin.site.urls),# Enter the app name in following syntax for this to workpath(\'\', include(\"projectApp.urls\")),]Now You can use the default MVT model to create URLs, models, views, etc. in your app and they will be automatically included in your main project.The main feature of Django Apps is independence, every app functions as an independent unit in supporting the main project. To know more about apps in Django, visit How to Create an App in Django ?More with Django –Django ModelsDjango FormsDjango ViewsDjango TemplatesAttention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level CourseMy Personal Notes\narrow_drop_upSave|||To initiate a project of Django on Your PC, open Terminal and Enter the following commanddjango-admin startproject projectName|||A New Folder with name projectName will be created. To enter in the project using terminal enter commandcd projectNameNow run,Python manage.py runserverNow visit http://localhost:8000/,Creating an AppDjango is famous for its unique and fully managed app structure. For every functionality, an app can be created like a completely independent module. This article will take you through how to create a basic app and add functionalities using that app.To create a basic app in your Django project you need to go to directory containing manage.py and from there enter the command :python manage.py startapp projectAppNow you can see your directory structure as under :To consider the app in your project you need to specify your project name in INSTALLED_APPS list as follows in settings.py:# Application definitionINSTALLED_APPS = [\'django.contrib.admin\',\'django.contrib.auth\',\'django.contrib.contenttypes\',\'django.contrib.sessions\',\'django.contrib.messages\',\'django.contrib.staticfiles\',\'projectApp\']So, we have finally created an app but to render the app using urls we need to include the app in our main project so that urls redirected to that app can be rendered. Let us explore it.Move to projectName-> projectName -> urls.py and add below code in the headerfrom django.urls import include Now in the list of URL patterns, you need to specify app name for including your app urls. Here is the code for it –from django.contrib import adminfrom django.urls import path, includeurlpatterns = [path(\'admin/\', admin.site.urls),# Enter the app name in following syntax for this to workpath(\'\', include(\"projectApp.urls\")),]Now You can use the default MVT model to create URLs, models, views, etc. in your app and they will be automatically included in your main project.The main feature of Django Apps is independence, every app functions as an independent unit in supporting the main project. To know more about apps in Django, visit How to Create an App in Django ?More with Django –Django ModelsDjango FormsDjango ViewsDjango TemplatesAttention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level CourseMy Personal Notes\narrow_drop_upSave|||To create a basic app in your Django project you need to go to directory containing manage.py and from there enter the command :python manage.py startapp projectAppNow you can see your directory structure as under :|||To consider the app in your project you need to specify your project name in INSTALLED_APPS list as follows in settings.py:# Application definitionINSTALLED_APPS = [\'django.contrib.admin\',\'django.contrib.auth\',\'django.contrib.contenttypes\',\'django.contrib.sessions\',\'django.contrib.messages\',\'django.contrib.staticfiles\',\'projectApp\']|||So, we have finally created an app but to render the app using urls we need to include the app in our main project so that urls redirected to that app can be rendered. Let us explore it.Move to projectName-> projectName -> urls.py and add below code in the headerfrom django.urls import include Now in the list of URL patterns, you need to specify app name for including your app urls. Here is the code for it –from django.contrib import adminfrom django.urls import path, includeurlpatterns = [path(\'admin/\', admin.site.urls),# Enter the app name in following syntax for this to workpath(\'\', include(\"projectApp.urls\")),]|||Now You can use the default MVT model to create URLs, models, views, etc. in your app and they will be automatically included in your main project.&&&To initiate a project of Django on Your PC, open Terminal and Enter the following commanddjango-admin startproject projectName|||A New Folder with name projectName will be created. To enter in the project using terminal enter commandcd projectNameNow run,Python manage.py runserverNow visit http://localhost:8000/,Creating an AppDjango is famous for its unique and fully managed app structure. For every functionality, an app can be created like a completely independent module. This article will take you through how to create a basic app and add functionalities using that app.To create a basic app in your Django project you need to go to directory containing manage.py and from there enter the command :python manage.py startapp projectAppNow you can see your directory structure as under :To consider the app in your project you need to specify your project name in INSTALLED_APPS list as follows in settings.py:# Application definitionINSTALLED_APPS = [\'django.contrib.admin\',\'django.contrib.auth\',\'django.contrib.contenttypes\',\'django.contrib.sessions\',\'django.contrib.messages\',\'django.contrib.staticfiles\',\'projectApp\']So, we have finally created an app but to render the app using urls we need to include the app in our main project so that urls redirected to that app can be rendered. Let us explore it.Move to projectName-> projectName -> urls.py and add below code in the headerfrom django.urls import include Now in the list of URL patterns, you need to specify app name for including your app urls. Here is the code for it –from django.contrib import adminfrom django.urls import path, includeurlpatterns = [path(\'admin/\', admin.site.urls),# Enter the app name in following syntax for this to workpath(\'\', include(\"projectApp.urls\")),]Now You can use the default MVT model to create URLs, models, views, etc. in your app and they will be automatically included in your main project.The main feature of Django Apps is independence, every app functions as an independent unit in supporting the main project. To know more about apps in Django, visit How to Create an App in Django ?More with Django –Django ModelsDjango FormsDjango ViewsDjango TemplatesAttention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level CourseMy Personal Notes\narrow_drop_upSave|||To create a basic app in your Django project you need to go to directory containing manage.py and from there enter the command :python manage.py startapp projectAppNow you can see your directory structure as under :|||To consider the app in your project you need to specify your project name in INSTALLED_APPS list as follows in settings.py:# Application definitionINSTALLED_APPS = [\'django.contrib.admin\',\'django.contrib.auth\',\'django.contrib.contenttypes\',\'django.contrib.sessions\',\'django.contrib.messages\',\'django.contrib.staticfiles\',\'projectApp\']|||So, we have finally created an app but to render the app using urls we need to include the app in our main project so that urls redirected to that app can be rendered. Let us explore it.Move to projectName-> projectName -> urls.py and add below code in the headerfrom django.urls import include Now in the list of URL patterns, you need to specify app name for including your app urls. Here is the code for it –from django.contrib import adminfrom django.urls import path, includeurlpatterns = [path(\'admin/\', admin.site.urls),# Enter the app name in following syntax for this to workpath(\'\', include(\"projectApp.urls\")),]|||Now You can use the default MVT model to create URLs, models, views, etc. in your app and they will be automatically included in your main project.&&&To create a basic app in your Django project you need to go to directory containing manage.py and from there enter the command :python manage.py startapp projectAppNow you can see your directory structure as under :|||To consider the app in your project you need to specify your project name in INSTALLED_APPS list as follows in settings.py:# Application definitionINSTALLED_APPS = [\'django.contrib.admin\',\'django.contrib.auth\',\'django.contrib.contenttypes\',\'django.contrib.sessions\',\'django.contrib.messages\',\'django.contrib.staticfiles\',\'projectApp\']|||So, we have finally created an app but to render the app using urls we need to include the app in our main project so that urls redirected to that app can be rendered. Let us explore it.Move to projectName-> projectName -> urls.py and add below code in the headerfrom django.urls import include Now in the list of URL patterns, you need to specify app name for including your app urls. Here is the code for it –from django.contrib import adminfrom django.urls import path, includeurlpatterns = [path(\'admin/\', admin.site.urls),# Enter the app name in following syntax for this to workpath(\'\', include(\"projectApp.urls\")),]|||Now You can use the default MVT model to create URLs, models, views, etc. in your app and they will be automatically included in your main project.&&&&&&&&&Create a virtual environment by giving this command in cmd-virtualenv env_site|||Change directory to env_site by this command-cd env_site|||Go to Script directory inside env_site and activate virtual environment-cd Scriptactivate&&&\']'),(123,'[\'Django Introduction and Installation\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-55-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-56-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-57-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-58-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-60-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-62-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-63-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-64-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-65.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-66-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-67.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.python.org/downloads/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Installation of Django\', \'Benefits of Django Architecture –\', \'Drawbacks of MVC Architecture –\']','[\'Versatility of DjangoDjango can build almost any type of website. It can also work with any client-side framework and can deliver content in any format such as HTML, JSON, XML etc. Some sites which can be built using Django are wikis, social networks, new sites etc.\', \'SecuritySince Django framework is made for making web development easy, it has been engineered in such a way that it automatically do the right things to protect the website. For example, In the Django framework instead of putting a password in cookies, the hashed password is stored in it so that it can’t be fetched easily by hackers.\', \'ScalabilityDjango web nodes have no stored state, they scale horizontally – just fire up more of them when you need them. Being able to do this is the essence of good scalability. Instagram and Disqus are two Django based products that have millions of active users, this is taken as an example of the scalability of Django.\', \'PortabilityAll the codes of the Django framework are written in Python, which runs on many platforms. Which leads to run Django too in many platforms such as Linux, Windows and Mac OS.\', \'Note- Installation of Django in Linux and Mac is similar, here I am showing it in windows for Linux and mac just open terminal in place of command prompt and go through the following commands.\']','[\'Django is a Python-based web framework which allows you to quickly create web application without all of the installation or dependency problems that you normally will find with other frameworks.When you’re building a website, you always need a similar set of components: a way to handle user authentication (signing up, signing in, signing out), a management panel for your website, forms, a way to upload files, etc. Django gives you ready-made components to use.\', \'Django is used in many popular sites like as: Disqus, Instagram, Knight Foundation, MacArthur Foundation, Mozilla, National Geographic etc. There are more than 5k online sites based on the Django framework. ( Source )Sites like Hot Frameworks assess the popularity of a framework by counting the number of GitHub projects and StackOverflow questions for each platform, here Django is in 6th position. Web frameworks often refer to themselves as “opinionated” or “un-opinionated” based on opinions about the right way to handle any particular task. Django is somewhat opinionated, hence delivers the in both worlds( opinionated & un-opinionated ).\']','[]','[\'python -m pip install -U pip\', \'pip install virtualenv\', \'virtualenv env_site\', \'cd env_site\', \'cd Scripts\', \'activate\', \'pip install django\', \'cd ..\', \'django-admin startproject geeks_site\', \'cd geeks_site\', \'python manage.py runserver\']','[]','[\'Install python3 if not installed in your system ( according to configuration of your system and OS) from here . Try to download the latest version of python it’s python3.6.4 this time.Note- Installation of Django in Linux and Mac is similar, here I am showing it in windows for Linux and mac just open terminal in place of command prompt and go through the following commands.|||Install pip- Open command prompt and enter following command-python -m pip install -U pip|||Install virtual environment- Enter following command in cmd-pip install virtualenv|||Set Virtual environment- Setting up the virtual environment will allow you to edit the dependency which generally your system wouldn’t allow.Follow these steps to set up a virtual environment-Create a virtual environment by giving this command in cmd-virtualenv env_siteChange directory to env_site by this command-cd env_site\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        Go to Scripts directory inside env_site and activate virtual environment-cd Scriptsactivate|||Create a virtual environment by giving this command in cmd-virtualenv env_site|||Change directory to env_site by this command-cd env_site\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        |||Go to Scripts directory inside env_site and activate virtual environment-cd Scriptsactivate|||Install Django- Install django by giving following command-pip install django|||Return to the env_site directory-cd ..|||Start a project by following command-django-admin startproject geeks_site|||Change directory to geeks_sitecd geeks_site|||Start the server- Start the server by typing following command in cmd-python manage.py runserver|||To check whether server is running or not go to web browser and enter http://127.0.0.1:8000/ as url.Benefits of Django Architecture –Rapid DevelopmentLoosely CoupledEase of ModificationDrawbacks of MVC Architecture –Too much load on Model ComponentDevelopment Complexity is highTwo components are controlling ViewMy Personal Notes\narrow_drop_upSave|||Rapid Development|||Loosely Coupled|||Ease of Modification|||Too much load on Model Component|||Development Complexity is high|||Two components are controlling View&&&Rapid Development|||Loosely Coupled|||Ease of Modification&&&Too much load on Model Component|||Development Complexity is high|||Two components are controlling View&&&&&&It’s very easy to switch database in Django framework.|||It has built-in admin interface which makes easy to work with it.|||Django is fully functional framework that requires nothing else.|||It has thousands of additional packages available.|||It is very scalable.&&&Create a virtual environment by giving this command in cmd-virtualenv env_site|||Change directory to env_site by this command-cd env_site\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        |||Go to Scripts directory inside env_site and activate virtual environment-cd Scriptsactivate&&&\']'),(124,'[\'Django Project MVT Structure\']','[]','[\'xa0Project Structure :\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210606092225/image.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-77.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-78.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/django-models/\', \'https://www.geeksforgeeks.org/views-in-django-python/\', \'https://www.geeksforgeeks.org/django-templates/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'MVT Structure has the following three parts –xa0\']','[\'Django is based on MVT (Model-View-Template) architecture. MVT is a software design pattern for developing a web application.xa0\', \'Model: The model is going to act as the interface of your data. It is responsible for maintaining data. It is the logical data structure behind the entire application and is represented by a database (generally relational databases such as MySql, Postgres). To check more, visit – Django Modelsxa0\', \'View: The View is the user interface — what you see in your browser when you render a website. It is represented by HTML/CSS/Javascript and Jinja files. To check more, visit – Django Views.xa0\', \'Template: A template consists of static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted. To check more, visit – Django Templatesxa0\', \'A Django Project when initialized contains basic files by default such as manage.py, view.py, etc. A simple project structure is enough to create a single-page application. Here are the major files and their explanations. Inside the geeks_site folder ( project folder ) there will be the following files-xa0xa0\', \'manage.py- This file is used to interact with your project via the command line(start the server, sync the database… etc). For getting the full list of commands that can be executed by manage.py type this code in the command window-xa0\', \'xa0folder ( geeks_site ) – This folder contains all the packages of your project. Initially, it contains four files –xa0\']','[]','[]','[\'$ python manage.py help\']','[]','[\'_init_.py – It is a python package. It is invoked when the package or a module in the package is imported. We usually use this to execute package initialization code, for example for the initialization of package-level data.|||settings.py – As the name indicates it contains all the website settings. In this file, we register any applications we create, the location of our static files, database configuration details, etc.|||urls.py – In this file, we store all links of the project and functions to call.|||wsgi.py – This file is used in deploying the project in WSGI. It is used to help your Django application communicate with the webserver.\']'),(125,'[\'How to Create a Basic Project using MVT in Django ?\']','[\'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-72.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-73.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-74.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-75.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/django-project-mvt-structure/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisite – Django Project MVT Structurexa0\', \'Create a basic Project:xa0\']','[\'Assuming you have gone through the previous article. This article focuses on creating a basic project to render a template using MVT architecture. We will use MVT (Models, Views, Templates) to render data to a local server.xa0\']','[]','[\'# HttpResponse is used to# pass the information# back to viewfrom django.http import HttpResponse # Defining a function which# will receive request and# perform task depending# upon function definitiondef hello_geek (request) :     # This will return Hello Geeks    # string as HttpResponse    return HttpResponse(\"Hello Geeks\")\']','[\'django-admin startproject projectName\', \'cd projectName\', \'from projectName.views import hello_geeks\', \"path(\'geek/\', hello_geek),\", \'$ cd env_site\', \'$ cd Script\', \'$ activate\', \'$ cd ..\', \'$ cd geeks_site\', \'$ python manage.py runserver\', \'http://127.0.0.1:8000/geek/\']','[]','[\'To initiate a project of Django on Your PC, open Terminal and Enter the following command&&&A New Folder with the name projectName will be created. To enter in the project using the terminal enter command&&&Create a new file views.py inside the project folder where settings.py, urls.py and other files are stored and save the following code in it-&&&Open urls.py inside project folder (projectName) and add your entry-Import hello_geek function from views.py file.|||Import hello_geek function from views.py file.&&&Import hello_geek function from views.py file.&&&Add an entry in url field inside url patterns-&&&Now to run the server follow these steps-Open command prompt and change directory to env_site by this command-|||Open command prompt and change directory to env_site by this command-&&&Open command prompt and change directory to env_site by this command-&&&Go to Script directory inside env_site and activate virtual environment-&&&Return to the env_site directory and goto the project directory-&&&Start the server- Start the server by typing following command in cmd-&&&Checking – Open the browser and type this url-\']'),(126,'[\'How to Create an App in Django ?\']','[\'Python3\', \'Python3\']','[\'Benefits of using Django apps –\', \'Creating an App in Django :\', \'Method-1\', \'xa0Method-2\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190923140305/Screenshot-from-2019-09-23-14-02-16.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190923142649/directory-structure-of-app-django.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/django-orm-inserting-updating-deleting-data/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisite – How to Create a Basic Project using MVT in Django?\', \'Django ORM – Inserting, Updating & Deleting Dataxa0xa0\', \'Let us start building an app.xa0\', \'Now you can see your directory structure as under :xa0\']','[\'Pre-installed apps –xa0Django provides some pre-installed apps for users. To see pre-installed apps, navigate to projectName –> projectName –> settings.pyxa0In your settings.py file, you will find INSTALLED_APPS. Apps listed in INSTALLED_APPS are provided by Django for the developer’s comfort.xa0\', \'The main feature of Django Apps is independence, every app functions as an independent unit in supporting the main project.xa0\']','[\'Django is famous for its unique and fully managed app structure. For every functionality, an app can be created like a completely independent module. This article will take you through how to create a basic app and add functionalities using that app.For example, if you are creating a Blog, Separate modules should be created for Comments, Posts, Login/Logout, etc. In Django, these modules are known as apps. There is a different app for each task.xa0xa0\']','[\"# Application definition INSTALLED_APPS = [    \'django.contrib.admin\',    \'django.contrib.auth\',    \'django.contrib.contenttypes\',    \'django.contrib.sessions\',    \'django.contrib.messages\',    \'django.contrib.staticfiles\',    \'projectApp\']\", \'from django.contrib import adminfrom django.urls import path, include urlpatterns = [    path(\'admin/\', admin.site.urls),    # Enter the app name in following    # syntax for this to work    path(\'\', include(\"projectApp.urls\")),]\']','[\'python manage.py startapp projectApp\', \'django-admin startapp projectApp\', \'from django.urls import include\']','[]','[\'Django apps are reusable i.e. a Django app can be used with multiple projects.|||We have loosely coupled i.e. almost independent components|||Multiple developers can work on different components|||Debugging and code organization is easy. Django has an excellent debugger tool.|||It has in-built features like admin pages etc, which reduces the effort of building the same from stratch&&&To create a basic app in your Django project you need to go to the directory containing manage.py and from there enter the command :&&&To create a basic app in your Django project you need to go to the directory containing manage.py and from there enter the command :&&&To consider the app in your project you need to specify your project name in INSTALLED_APPS list as follows in settings.py:&&&So, we have finally created an app but to render the app using URLs we need to include the app in our main project so that URLs redirected to that app can be rendered. Let us explore it.Move to projectName-> projectName -> urls.py and add below code in the header&&&Now in the list of URL patterns, you need to specify the app name for including your app URLs. Here is the code for it –&&&Now You can use the default MVT model to create URLs, models, views, etc. in your app and they will be automatically included in your main project.\']'),(127,'[\'Django Forms\']','[\'Python3\', \'Using Django Forms\', \'Python3\', \'Python3\', \'html\', \'Python3\', \'Python3\']','[\'Creating a Django Form\', \'Render Django Forms\', \'Create Django Form from Models\', \'More on Django Forms:\', \'Basic form data types and fields list\', \'Core Field Arguments\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200107124202/flowChart-1-1024x682.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191113140709/create-django-form.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/#Field-types\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-a-form-using-django-forms/\', \'https://www.geeksforgeeks.org/form-as_table-render-django-forms-as-table/\', \'https://www.geeksforgeeks.org/form-as_p-render-django-forms-as-paragraph/\', \'https://www.geeksforgeeks.org/form-as_ul-render-django-forms-as-list/\', \'http://localhost:8000/\', \'https://www.geeksforgeeks.org/render-django-form-fields-manually/\', \'http://127.0.0.1:8000/\', \'https://www.geeksforgeeks.org/render-html-forms-get-post-in-django/\', \'https://geeksforgeeks.org/form-as_p-render-django-forms-as-paragraph/\', \'https://geeksforgeeks.org/form-as_table-render-django-forms-as-table/\', \'https://geeksforgeeks.org/form-as_ul-render-django-forms-as-list/\', \'https://www.geeksforgeeks.org/django-form-field-custom-widgets/\', \'https://www.geeksforgeeks.org/python-form-validation-using-django/\', \'https://geeksforgeeks.org/django-modelform-create-form-from-models/\', \'https://write.geeksforgeeks.org/render-django-form-fields-manually/\', \'https://www.geeksforgeeks.org/django-formsets/\', \'https://write.geeksforgeeks.org/django-modelformsets/\', \'https://www.geeksforgeeks.org/booleanfield-django-forms/\', \'https://www.geeksforgeeks.org/charfield-django-forms/\', \'https://www.geeksforgeeks.org/choicefield-django-forms/\', \'https://www.geeksforgeeks.org/typedchoicefield-django-forms/\', \'https://www.geeksforgeeks.org/datefield-django-forms/\', \'https://www.geeksforgeeks.org/datetimefield-django-forms/\', \'https://www.geeksforgeeks.org/decimalfield-django-forms/\', \'https://www.geeksforgeeks.org/durationfield-django-forms/\', \'https://www.geeksforgeeks.org/emailfield-django-forms/\', \'https://www.geeksforgeeks.org/filefield-django-forms/\', \'https://www.geeksforgeeks.org/filepathfield-django-forms/\', \'https://www.geeksforgeeks.org/floatfield-django-forms/\', \'https://www.geeksforgeeks.org/imagefield-django-forms/\', \'https://www.geeksforgeeks.org/integerfield-django-forms/\', \'https://www.geeksforgeeks.org/genericipaddressfield-django-forms/\', \'https://www.geeksforgeeks.org/multiplechoicefield-django-forms/\', \'https://www.geeksforgeeks.org/typedmultiplechoicefield-django-forms/\', \'https://www.geeksforgeeks.org/nullbooleanfield-django-forms/\', \'https://www.geeksforgeeks.org/regexfield-django-forms/\', \'https://www.geeksforgeeks.org/slugfield-django-models/\', \'https://www.geeksforgeeks.org/timefield-django-forms/\', \'https://www.geeksforgeeks.org/urlfield-django-forms/\', \'https://www.geeksforgeeks.org/uuidfield-django-forms/\', \'https://www.geeksforgeeks.org/required-django-form-field-validation/\', \'https://www.geeksforgeeks.org/label-django-form-field-validation/\', \'https://www.geeksforgeeks.org/label-django-form-field-validation/\', \'https://docs.djangoproject.com/en/2.2/ref/forms/fields/#label-suffix\', \'https://www.geeksforgeeks.org/django-form-field-custom-widgets/\', \'https://docs.djangoproject.com/en/2.2/ref/forms/widgets/\', \'https://www.geeksforgeeks.org/help_text-django-form-field-validation/\', \'https://www.geeksforgeeks.org/error_messages-django-form-field-validation/\', \'https://www.geeksforgeeks.org/django-form-field-custom-widgets/\', \'http://localize\', \'https://www.geeksforgeeks.org/disabled-django-form-field-validation/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax :xa0 Django Fields work like Django Model Fields and have the syntax:\', \'Refer to the following articles to check how to create a project and an app in Django.xa0\', \'To create a form, in geeks/forms.py Enter the code,\', \'To render this form into a view, move to views.py and create a home_view as below.xa0\', \'Now, visit http://localhost:8000/\', \'.xa0To check how to use the data rendered by Django Forms visit Render Django Form Fieldsxa0\', \'To create a form directly for this model, dive into geeks/forms.py and Enter the following code:\', \'Now visit http://127.0.0.1:8000/,xa0\']','[\'Django maps the fields defined in Django forms into HTML input fields. Django handles three distinct parts of the work involved in forms:\', \'Note that all types of work done by Django forms can be done with advanced HTML stuff, but Django makes it easier and efficient especially the validation part. Once you get hold of Django forms you will just forget about HTML forms.\', \'To use Django Forms, one needs to have a project and an app working in it. After you start an app you can create a form in app/forms.py. Before starting to use a form let’s check how to start a project and implement Django Forms.\', \'Creating a form in Django is completely similar to creating a model, one needs to specify what fields would exist in the form and of what type. For example, to input, a registration form one might need First Name (CharField), Roll Number (IntegerField), and so on.xa0\', \'To know more about how to create a Form using Django forms, visit How to create a form using Django Forms ?.\', \'Django form fields have several built-in methods to ease the work of the developer but sometimes one needs to implement things manually for customizing User Interface(UI). A form comes with 3 in-built methods that can be used to render Django form fields.xa0\', \'In view, one needs to just create an instance of the form class created above in forms.py. Now let’s edit templates > home.htmlxa0\', \'Django ModelForm is a class that is used to directly convert a model into a Django form. If you’re building a database-driven app, chances are you’ll have forms that map closely to Django models. Now when we have our project ready, create a model in geeks/models.py,\', \'The most important part of a form and the only required part is the list of fields it defines. Fields are specified by class attributes. Here is a list of all Form Field types used in Django\', \'.math-table { border-collapse: collapse; width: 100%; } .math-table td { border: 1px solid #5fb962; text-align: left !important; padding: 8px; } .math-table th { border: 1px solid #5fb962; padding: 8px; } .math-table tr>th{ background-color: #c6ebd9; vertical-align: middle; } .math-table tr:nth-child(odd) { background-color: #ffffff; }\']','[\'When one creates a Form class, the most important part is defining the fields of the form. Each field has custom validation logic, along with a few other hooks. This article revolves around various fields one can use in a form along with various features and techniques concerned with Django Forms. Forms are basically used for taking input from the user in some manner and using that information for logical operations on databases. For example, Registering a user by taking input as his name, email, password, etc.\', \'Core Field arguments are the arguments given to each field for applying some constraint or imparting a particular characteristic to a particular Field. For example, adding an argument required = False to CharField will enable it to be left blank by the user. Each Field class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:\']','[\'from django import forms # creating a formclass GeeksForm(forms.Form):    title = forms.CharField()    description = forms.CharField()\', \'# import the standard Django Forms# from built-in libraryfrom django import forms   # creating a form class InputForm(forms.Form):       first_name = forms.CharField(max_length = 200)    last_name = forms.CharField(max_length = 200)    roll_number = forms.IntegerField(                     help_text = \"Enter 6 digit roll number\"                     )    password = forms.CharField(widget = forms.PasswordInput())\', \'from django.shortcuts import renderfrom .forms import InputForm # Create your views here.def home_view(request):    context ={}    context[\'form\']= InputForm()    return render(request, \"home.html\", context)\', \'<form action = \"\" method = \"post\">    {% csrf_token %}    {{form }}    <input type=\"submit\" value=Submit\"></form>\', \'# import the standard Django Model# from built-in libraryfrom django.db import models   # declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):        # fields of the model    title = models.CharField(max_length = 200)    description = models.TextField()    last_modified = models.DateTimeField(auto_now_add = True)    img = models.ImageField(upload_to = \"images/\")           # renames the instances of the model        # with their title name    def __str__(self):        return self.title\', \'# import form class from djangofrom django import forms  # import GeeksModel from models.pyfrom .models import GeeksModel  # create a ModelFormclass GeeksForm(forms.ModelForm):    # specify the name of model to use    class Meta:        model = GeeksModel        fields = \"__all__\"\']','[\'field_name = forms.FieldType(**options)\', \'from django import forms\n        \nclass FormName(forms.Form):\n         # each field would be mapped as an input field in HTML\n        field_name = forms.Field(**options)\']','[\'BooleanField|||class BooleanField(**kwargs)|||CheckboxInput&&&CharField|||class CharField(**kwargs)|||TextInput&&&ChoiceField|||class ChoiceField(**kwargs)|||Select&&&TypedChoiceField|||class TypedChoiceField(**kwargs)|||Select&&&DateField|||class DateField(**kwargs)|||DateInput&&&DateTimeField|||class DateTimeField(**kwargs)|||DateTimeInput&&&DecimalField|||class DecimalField(**kwargs)|||NumberInput when Field.localize is False, else TextInput&&&DurationField|||class DurationField(**kwargs)|||TextInput&&&EmailField|||class EmailField(**kwargs|||EmailInput&&&FileField|||class FileField(**kwargs)|||ClearableFileInput&&&FilePathField|||class FilePathField(**kwargs)|||Select&&&FloatField|||class FloatField(**kwargs)|||NumberInput when Field.localize is False, else TextInput&&&ImageField|||class ImageField(**kwargs)|||ClearableFileInput&&&IntegerField|||class IntegerField(**kwargs)|||NumberInput when Field.localize is False, else TextInput&&&GenericIPAddressField|||class GenericIPAddressField(**kwargs)|||TextInput&&&MultipleChoiceField|||class MultipleChoiceField(**kwargs)|||SelectMultiple&&&TypedMultipleChoiceField|||class TypedMultipleChoiceField(**kwargs)|||SelectMultiple&&&NullBooleanField|||class NullBooleanField(**kwargs)|||NullBooleanSelect&&&RegexField|||class RegexField(**kwargs)|||TextInput&&&SlugField|||class SlugField(**kwargs)|||TextInput&&&TimeField|||class TimeField(**kwargs)|||TimeInput&&&URLField|||class URLField(**kwargs)|||URLInput&&&UUIDField|||class UUIDField(**kwargs)|||TextInput\', \'required|||By default, each Field class assumes the value is required, so to make it not required you need to set required=False&&&label|||The label argument lets you specify the “human-friendly” label for this field. This is used when the Field is displayed in a Form.&&&label_suffix|||The label_suffix argument lets you override the form’s label_suffix on a per-field basis.&&&widget|||The widget argument lets you specify a Widget class to use when rendering this Field. See Widgets for more information.&&&help_text|||The help_text argument lets you specify descriptive text for this Field. If you provide help_text, it will be displayed next to the Field when the Field is rendered by one of the convenience Form methods.xa0xa0&&&error_messages|||The error_messages argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override.&&&validators|||The validators argument lets you provide a list of validation functions for this field.xa0xa0&&&localize|||The localize argument enables the localization of form data input, as well as the rendered output.&&&disabled.|||The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won’t be editable by users.xa0xa0\']','[\'preparing and restructuring data to make it ready for rendering|||creating HTML forms for the data|||receiving and processing submitted forms and data from the client&&&How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?&&&{{ form.as_table }} will render them as table cells wrapped in <tr> tags|||{{ form.as_p }} will render them wrapped in <p> tags|||{{ form.as_ul }} will render them wrapped in <li> tags&&&Render HTML Forms (GET & POST) in Django|||{{ form.as_p }} – Render Django Forms as paragraph|||{{ form.as_table }} – Render Django Forms as table|||{{ form.as_ul }} – Render Django Forms as list|||Django form field custom widgets|||Python | Form validation using django|||Django ModelForm – Create form from Models|||Render Django Form Fields Manually|||Django Formsets|||Django ModelFormSets\']'),(128,'[\'Render HTML Forms (GET & POST) in Django\']','[\'HTML\', \'Python3\', \'Python3\', \'Python3\', \'HTML\', \'Python3\']','[\'Render HTML Forms in Django Explanation\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191113100712/django-forms-python.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191113101553/python-django-forms-.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191113103717/python-django-forms-get-request.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191113111555/python-django-forms-render-post-request.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/html-form-tag/\', \'https://www.geeksforgeeks.org/django-models-set-1/\', \'https://www.geeksforgeeks.org/get-post-requests-using-python/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'To know more about HTML forms, visit HTML | form Tag.\', \'Refer to the following articles to check how to create a project and an app in Django.\', \'Now when we fill the form we can see the output in the terminal as below:\', \'In home.html\', \'Now when we submit the form it shows the data as below.\']','[\'Django also provides a built-in feature of Django Forms just like Django Models. One can create forms in Django and use them to fetch data from the user in a convenient manner.To begin with forms, one needs to be familiar with GET and POST requests in forms.\', \'Illustration of Django Forms using an Example. Consider a project named geeksforgeeks having an app named geeks.\', \'Let’s create a simple HTML form to show how can you input the data from a user and use it in your view. Enter following code in geeks > templates > home.html\', \'Now to render it in our view we need to modify urls.py for geeks app.Enter the following code in geeksforgeeks > urls.py\', \'Now, let’s move to our home_view and start checking how are we going to get the data. Entire data from an HTML form in Django is transferred as a JSON object called a request. Let’s create a view first and then we will try all methods to fetch data from the form.\', \'As we have everything set up let us run Python manage.py run server and check if the form is there on the home page.\', \'By default every form ever written in HTML makes a GET request to the back end of an application, a GET request normally works using queries in the URL. Let’s demonstrate it using the above form, Fill up the form using your name, and let’s check what happens.\', \'The above URL is appended with a name attribute of the input tag and the name entered in the form. This is how the GET request works whatever be the number of inputs they would be appended to the URL to send the data to the back end of an application. Let’s check how to finally get this data in our view so that logic could be applied based on input.xa0In views.py\', \'request.GET returns a query dictionary that one can access like any other python dictionary and finally use its data for applying some logic.xa0Similarly, if the method of transmission is POST, you can use request.POST as query dictionary for rendering the data from the form into views.\', \'Note that whenever we create a form request, Django requires you to add {% csrf_token %} in form for security purposesxa0Now, in views.py let’s check what request.POST has got.\', \'This way one can use this data for querying into the database or for processing using some logical operation and pass using the context dictionary to the template.\']','[\'Django is often called “Batteries Included Framework” because it has a default setting for everything and has features that can help anyone develop a website rapidly. Talking about forms, In HTML, a form is a collection of elements inside <form>…</form> that allow a visitor to do things like entering text, select options, manipulate objects or controls, and so on, and then send that information back to the server. Basically, it is a collection of data for processing it for any purpose including saving it in the database or fetching data from the database. Django supports all types of HTML forms and rendering data from them to a view for processing using various logical operations.\']','[\'<form action = \"\" method = \"get\">    <label for=\"your_name\">Your name: </label>    <input id=\"your_name\" type=\"text\" name=\"your_name\">    <input type=\"submit\" value=\"OK\"></form>\', \"from django.urls import path # importing views from views..pyfrom .views import geeks_view urlpatterns = [    path(\'\', home_view ),]\", \'from django.shortcuts import render # Create your views here.def home_view(request):     # logic of view will be implemented here    return render(request, \"home.html\")\', \'from django.shortcuts import render # Create your views here.def home_view(request):    print(request.GET)    return render(request, \"home.html\")\', \'<form action = \"\" method = \"POST\">    {% csrf_token %}    <label for=\"your_name\">Your name: </label>    <input id=\"your_name\" type=\"text\" name=\"your_name\">    <input type=\"submit\" value=\"OK\"></form>\', \'from django.shortcuts import render # Create your views here.def home_view(request):    print(request.POST)    return render(request, \"home.html\")\']','[]','[]','[\'GET: GET, by contrast, bundles the submitted data into a string, and uses this to compose a URL. The URL contains the address where the data must be sent, as well as the data keys and values. You can see this in action if you do a search in the Django documentation, which will produce a URL of the form https://docs.djangoproject.com/search/?q=forms&release=1.|||POST: Any request that could be used to change the state of the system – for example, a request that makes changes in the database – should use POST.&&&How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?\']'),(129,'[\'Django form field custom widgets\']','[]','[\'Default Widget in Form Fields\', \'Custom Django form field widgets\', \'Using Widgets to Customize DateField\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191224125851/Screenshot-from-2019-12-24-12-57-57.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191224130642/django-forms-widgets-ss.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191224131630/django-wisdget-datefield.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191224131942/django-widgets-datefield.png\']','[]','[\'https://docs.djangoproject.com/en/3.0/ref/forms/fields/#built-in-fields\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'http://127.0.0.1:8000/\', \'https://docs.djangoproject.com/en/3.0/ref/forms/widgets/\', \'http://127.0.0.1:8000/\', \'https://docs.djangoproject.com/en/3.0/ref/forms/widgets/#selectdatewidget\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Refer to the following articles to check how to create a project and an app in Django.\', \'Now let’s create a demo form in “geeks/forms.py”,\', \'and in templates/home.html,\', \'Now let’s display the form by running\', \'visit http://127.0.0.1:8000/\', \'By default, DateField as widget TextInput. It can be seen as\']','[\'Every field has a predefined widget, for example IntegerField has a default widget of NumberInput. Let’s demonstrate this with help of our base project geeksforgeeks.\', \'Now to render this form we need to create the view and template which will be used to display the form to user. In geeks/views.py, create a view\', \'As seen in above screenshot, there is a different type of input field for IntegerField, BooleanField, etc. One can modify this using the following ways.\', \'One can override the default widget of each field for various purposes. The list of widgets can be seen here – Widgets | Django Documentation. To override the default widget we need to explicitly define the widget we want to assign to a field.Make following changes to geeks/forms.py,\', \'Now visit http://127.0.0.1:8000/,Thus we can assign, any widget to any field using widget attribute. Note – The validations imposed on fields would still remain same, for example even if an IntegerField is made the same as CharField, it will only accept Integer inputs.\', \'widgets have a great use in Form Fields especially using Select type of widgets where one wants to limit the type and number of inputs form a user. Let’s demonstrate this with help of modifying DateField. Consider forms.py as,\', \'Now let’s change the widget for better and convenient input from user of a date. Add SelectDateWidget to DateField in forms.py,\', \'Now input of date can be seen as very easy and helpful in the front end of the application. This way we can use multiple widgets for modifying the input fields.\']','[\'A widget is Django’s representation of an HTML input element. The widget handles the rendering of the HTML, and the extraction of data from a GET/POST dictionary that corresponds to the widget. Whenever you specify a field on a form, Django will use a default widget that is appropriate to the type of data that is to be displayed. To find which widget is used on which field, see the documentation about Built-in Field classes. This post revolves about the advanced use of widgets to modify the form structure and input type.\']','[\'from django import forms  // creating a django formclass GeeksForm(forms.Form):    title = forms.CharField()    description = forms.CharField()    views = forms.IntegerField()    available = forms.BooleanField()\', \'from django.shortcuts import renderfrom .forms import GeeksForm  # creating a home viewdef home_view(request):    context = {}    form = GeeksForm(request.POST or None)    context[\'form\'] = form    return render(request, \"home.html\", context)\', \'<form method=\"POST\">    {% csrf_token %}    {{ form.as_p }}    <input type=\"submit\" value=\"Submit\"></form>\', \'from django import forms  class GeeksForm(forms.Form):    title = forms.CharField(widget = forms.Textarea)    description = forms.CharField(widget = forms.CheckboxInput)    views = forms.IntegerField(widget = forms.TextInput)    available = forms.BooleanField(widget = forms.Textarea)\', \'from django import forms  class GeeksForm(forms.Form):    title = forms.CharField()    description = forms.CharField()    views = forms.IntegerField()    date = forms.DateField()\', \'from django import forms  class GeeksForm(forms.Form):    title = forms.CharField()    description = forms.CharField()    views = forms.IntegerField()    date = forms.DateField(widget = forms.SelectDateWidget)\']','[\'Python manage.py runserver\']','[]','[\'How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?\']'),(130,'[\'Django ModelForm – Create form from Models\']','[]','[\'How to convert a model into a Django Form?\', \'Field types\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191226121102/django-modelform-model-1024x585.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191226123335/django-modelform-form.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191226123334/django-modelform-enter-data.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191226123331/django-modelform-save-model-1024x317.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'http://127.0.0.1:8000/admin/geeks/geeksmodel/add/\', \'http://127.0.0.1:8000/\', \'http://localhost:8000/admin/geeks/geeksmodel/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Refer to the following articles to check how to create a project and an app in Django.\', \'Now when we have our project ready, create a model in geeks/models.py,\', \'Now, run following commands to create the model,\', \'To create a form directly for this model, dive into geeks/forms.py and Enter following code,\', \'This form takes two arguments fields or exclude.\']','[\'To explain the working of the project, we will use project geeksforgeeks, create a model and map it to Django forms.\', \'We can check that model has been successfully created at http://127.0.0.1:8000/admin/geeks/geeksmodel/add/,\', \'Finally, to complete our MVT structure, create a view that would render the form and directly save it to the database. In geeks/views.py,\', \'The generated Form class will have a form field for every model field specified, in the order specified in the fields attribute. Each model field has a corresponding default form field. For example, a CharField on a model is represented as a CharField on a form. A model ManyToManyField is represented as a MultipleChoiceField. Here is the full list of conversions:\']','[\'Django ModelForm is a class that is used to directly convert a model into a Django form. If you’re building a database-driven app, chances are you’ll have forms that map closely to Django models. For example, a User Registration model and form would have same quality and quantity of model fields and form fields. So instead of creating a redundant code to first create a form and then map it to the model in a view, we can directly use ModelForm. It takes as argument the name of the model and converts it into a Django Form. Not only this, ModelForm offers a lot of methods and features which automate the entire process and help remove code redundancy.\', \'Everything set, Now visit http://127.0.0.1:8000/,Now you can see that every model field is mapped into a form field and displayed correspondingly. Field mappings are discussed later in this article. So now let’s try entering data into form and check if it gets saved into the database.Hit submit and Bingo the form gets saved automatically to database. We can verify it at http://localhost:8000/admin/geeks/geeksmodel/.\']','[\'# import the standard Django Model# from built-in libraryfrom django.db import models   # declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):        # fields of the model    title = models.CharField(max_length = 200)    description = models.TextField()    last_modified = models.DateTimeField(auto_now_add = True)    img = models.ImageField(upload_to = \"images/\")           # renames the instances of the model        # with their title name    def __str__(self):        return self.title\', \'# import form class from djangofrom django import forms  # import GeeksModel from models.pyfrom .models import GeeksModel  # create a ModelFormclass GeeksForm(forms.ModelForm):    # specify the name of model to use    class Meta:        model = GeeksModel        fields = \"__all__\"\', \'from django.shortcuts import renderfrom .forms import GeeksForm  def home_view(request):    context ={}      # create object of form    form = GeeksForm(request.POST or None, request.FILES or None)          # check if form data is valid    if form.is_valid():        # save the form data to model        form.save()      context[\'form\']= form    return render(request, \"home.html\", context)\']','[\'Python manage.py makemigrations\nPython manage.py migrate\', \"class PartialAuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        exclude = [\'title\']\"]','[]','[\"How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?&&&fields – It is strongly recommended that you explicitly set all fields that should be edited in the form using the fields attribute. Failure to do so can easily lead to security problems when a form unexpectedly allows a user to set certain fields, especially when new fields are added to a model. Depending on how the form is rendered, the problem may not even be visible on the web page. Set the fields attribute to the special value ‘__all__’ to indicate that all fields in the model should be used.|||exclude – Set the exclude attribute of the ModelForm’s inner Meta class to a list of fields to be excluded from the form.For example:class PartialAuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        exclude = [\'title\']\n\"]'),(131,'[\'Django Formsets\']','[]','[\'Creating and using Django Formsets\', \'How to create Multiple forms using Django Formsets\', \'Handling Multiple forms using Django Formsets\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200101195759/django-formsets.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200101200429/django-formsets-multiple-forms.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200101215332/enter-formset-data-django-formsets.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200101215705/django-formsets-use-data1.png\']','[]','[\'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://docs.djangoproject.com/en/2.2/topics/forms/#the-django-form-class\', \'http://localhost:8000/\', \'http://localhost:8000/\', \'https://docs.djangoproject.com/en/3.0/topics/forms/formsets/#understanding-the-managementform\', \'http://localhost:8000/\', \'https://docs.djangoproject.com/en/3.0/topics/forms/formsets\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Refer to the following articles to check how to create a project and an app in Django.\', \'Now to create a simple formset of this form, move to views.py and create a formset_view as below.\']','[\'Formsets in a Django is an advanced way of handling multiple forms on a single webpage. In other words, Formsets are a group of forms in Django. One might want to initialize multiple forms on a single page all of which may involve multiple POST requests, for example\', \'Illustration of Rendering Django Forms Manually using an Example. Consider a project named geeksforgeeks having an app named geeks.\', \'In your geeks app make a new file called forms.py where you would be making all your forms. To create a Django form you need to use Django Form Class. Let’s demonstrate how,In your forms.py Enter the following,\', \'Let’s explain what exactly is happening, left side denotes the name of the field and to right of it, you define various functionalities of an input field correspondingly. A field’s syntax is denoted asSyntax :\', \'To render the formset through HTML, create a html file “home.html”. Now let’s edit templates > home.html\', \'All set to check if our formset is working or not let’s visit http://localhost:8000/..Our formset is working completely. Let’s learn how to modify this formset to use extra features of this formset.\', \'Django formsets are used to handle multiple instances of a form. One can create multiple forms easily using extra attribute of Django Formsets. In geeks/views.py,\', \'The keyword argument extra makes multiple copies of same form. If one wants to create 5 forms enter extra = 5 and similarly for others. Visit http://localhost:8000/ to check if 5 forms are created.\', \'Creating a form is much easier than handling the data entered into those fields at the back end. Let’s try to demonstrate how one can easily use the data of a formset in a view. When trying to handle formset, Django formsets required one extra argument {{ formset.management_data }}. To know more about Management data, visit Understanding the ManagementForm.In templates/home.html,\', \'Now to check how and what type of data is being rendered edit formset_view to print the data. In geeks/view.py,\']','[\'Now one might want to permit the user to create articles at once, so if thought in a conventional manner one uses multiple forms and different names for each form to handle data on a single page but this would complicate the code as well as functionality. A formset is a layer of abstraction to work with multiple forms on the same page. It can be best compared to a data grid.Now to create a formset of this GeeksForm,\', \'Now let’s try to enter data in the formset through http://localhost:8000/Hit submit and data will be display in command line where server is running. One can use this data in any manner conveniently now.Formset is advanced stuff which can be used to resolve a number of problems but should be used with correct syntax and field validations otherwise conflicts and errors will disrupt the normal functioning. To know more about Formsets, Visit Official Documentation for Formsets.\']','[\'from django import forms  # create a formclass GeeksForm(forms.Form):    title = forms.CharField()    description = forms.CharField()\', \'from django.shortcuts import render  # relative import of formsfrom .forms import GeeksForm  # importing formset_factoryfrom django.forms import formset_factory  def formset_view(request):    context ={}      # creating a formset    GeeksFormSet = formset_factory(GeeksForm)    formset = GeeksFormSet()          # Add the formset to context dictionary    context[\'formset\']= formset    return render(request, \"home.html\", context)\', \'<form method=\"POST\" enctype=\"multipart/form-data\">    {% csrf_token %}    {{ formset.as_p }}    <input type=\"submit\" value=\"Submit\"></form>\', \'from django.shortcuts import render  # relative import of formsfrom .forms import GeeksForm  # importing formset_factoryfrom django.forms import formset_factory  def formset_view(request):    context ={}      # creating a formset and 5 instances of GeeksForm    GeeksFormSet = formset_factory(GeeksForm, extra = 5)    formset = GeeksFormSet()          # Add the formset to context dictionary    context[\'formset\']= formset    return render(request, \"home.html\", context)\', \'<form method=\"POST\" enctype=\"multipart/form-data\">          <!-- Management data of formset -->    {{ formset.management_data }}      <!-- Security token -->    {% csrf_token %}      <!-- Using the formset -->    {{ formset.as_p }}          <input type=\"submit\" value=\"Submit\"></form>\', \'from django.shortcuts import render  # relative import of formsfrom .forms import GeeksForm  # importing formset_factoryfrom django.forms import formset_factory  def formset_view(request):    context ={}      # creating a formset and 5 instances of GeeksForm    GeeksFormSet = formset_factory(GeeksForm, extra = 3)    formset = GeeksFormSet(request.POST or None)          # print formset data if it is valid    if formset.is_valid():        for form in formset:            print(form.cleaned_data)                  # Add the formset to context dictionary    context[\'formset\']= formset    return render(request, \"home.html\", context)\']','[\'from django import forms\nclass GeeksForm(forms.Form):\n    title = forms.CharField()\n    pub_date = forms.DateField()\', \'from django.forms import formset_factory\nGeeksFormSet = formset_factory(GeeksForm)\', \'Field_name = forms.FieldType(attributes)\']','[]','[\'How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?\']'),(132,'[\'Django ModelFormSets\']','[]','[\'Creating and using Django ModelFormsets\', \'How to create Multiple forms using Django ModelFormsets\', \'Handling Multiple forms using Django Formsets\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200102123510/django-modelformsets.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200102123659/django-modelfornsets-extra-keyword-521x1024.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200102124153/django-modelformsets-use-data.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200102124147/django-model-formset-result.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'http://localhost:8000/\', \'http://localhost:8000/\', \'https://docs.djangoproject.com/en/3.0/topics/forms/formsets/#understanding-the-managementform\', \'http://localhost:8000/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Refer to the following articles to check how to create a project and an app in Django.\', \'Now to create a simple formset of this form, move to views.py and create a formset_view as below.\', \'All set to check if our formset is working or not let’s visit http://localhost:8000/.\', \'Now let’s try to enter data in the formset through http://localhost:8000/\']','[\'ModelFormsets in a Django is an advanced way of handling multiple forms created using a model and use them to create model instances. In other words, ModelFormsets are a group of forms in Django. One might want to initialize multiple forms on a single page all of which may involve multiple POST requests, for example\', \'Now if one wants to create a modelformset for this model, modelformset_factory needs to be used. A formset is a layer of abstraction to work with multiple forms on the same page. It can be best compared to a data grid.\', \'Illustration of Rendering Django ModelFormsets manually using an Example. Consider a project named geeksforgeeks having an app named geeks.\', \'In your geeks app make a new file called models.py where you would be making all your models. To create a Django model you need to use Django Models. Let’s demonstrate how,In your models.py Enter the following,\', \'Let’s explain what exactly is happening, left side denotes the name of the field and to right of it, you define various functionalities of an input field correspondingly. A field’s syntax is denoted asSyntax :\', \'To render the formset through HTML, create a html file “home.html”. Now let’s edit templates > home.html\', \'Our modelformset is working completely. Let’s learn how to modify this formset to use extra features of this formset.\', \'Django formsets are used to handle multiple instances of a form. One can create multiple forms easily using extra attribute of Django Formsets. In geeks/views.py,\', \'The keyword argument extra makes multiple copies of same form. If one wants to create 5 forms enter extra = 5 and similarly for others. Visit http://localhost:8000/ to check if 5 forms are created.\', \'Creating a form is much easier than handling the data entered into those fields at the back end. Let’s try to demonstrate how one can easily use the data of a model formset in a view. When trying to handle formset, Django formsets required one extra argument {{ formset.management_data }}. To know more about Management data, Understanding the ManagementForm.In templates/home.html,\', \'Now to check how and what type of data is being rendered edit formset_view to print the data. In geeks/view.py,\', \'Hit submit and data will be saved in GeeksModel where server is running. One can use this data in any manner conveniently now.\']','[]','[\'# import the standard Django Model# from built-in libraryfrom django.db import models   # declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):      # fields of the model    title = models.CharField(max_length = 200)    description = models.TextField()      # renames the instances of the model    # with their title name    def __str__(self):        return self.title\', \'from django.shortcuts import render  # relative import of formsfrom .forms import GeeksForm  # importing formset_factoryfrom django.forms import formset_factory  def formset_view(request):    context ={}      # creating a formset    GeeksFormSet = modelformset_factory(GeeksForm)    formset = GeeksFormSet()          # Add the formset to context dictionary    context[\'formset\']= formset    return render(request, \"home.html\", context)\', \'<form method=\"POST\" enctype=\"multipart/form-data\">    {% csrf_token %}    {{ formset.as_p }}    <input type=\"submit\" value=\"Submit\"></form>\', \'from django.shortcuts import render  # relative import of formsfrom .models import GeeksModel  # importing formset_factoryfrom django.forms import modelformset_factory  def modelformset_view(request):    context ={}      # creating a formset and 5 instances of GeeksForm    GeeksFormSet = modelformset_factory(GeeksModel, fields =[\'title\', \'description\'], extra = 3)    formset = GeeksFormSet()                    # Add the formset to context dictionary    context[\'formset\']= formset    return render(request, \"home.html\", context)\', \'<form method=\"POST\" enctype=\"multipart/form-data\">          <!-- Management data of formset -->    {{ formset.management_data }}      <!-- Security token -->    {% csrf_token %}      <!-- Using the formset -->    {{ formset.as_p }}          <input type=\"submit\" value=\"Submit\"></form>\', \'from django.shortcuts import render  # relative import of formsfrom .forms import GeeksForm  # importing formset_factoryfrom django.forms import formset_factory  def formset_view(request):    context ={}      # creating a formset and 5 instances of GeeksForm    GeeksFormSet = formset_factory(GeeksForm, extra = 3)    formset = GeeksFormSet(request.POST or None)          # print formset data if it is valid    if formset.is_valid():        for form in formset:            print(form.cleaned_data)                  # Add the formset to context dictionary    context[\'formset\']= formset    return render(request, \"home.html\", context)\']','[\'class GeeksModel(models.Model):\n    title = models.CharField(max_length = 200)\n    description = models.TextField()\', \'from django.forms import formset_factory\nGeeksFormSet = modelformset_factory(GeeksModel)\', \'Field_name = models.FieldType(attributes)\']','[]','[\'How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?\']'),(133,'[\'Django Templates\']','[\'Python3\', \'Python3\', \'Python3\', \'HTML\', \'The Django template language\', \'HTML\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200207123805/django-templates.png\']','[]','[\'https://www.geeksforgeeks.org/django-project-mvt-structure/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://www.geeksforgeeks.org/variables-django-templates/\', \'https://www.geeksforgeeks.org/comment-django-template-tags/\', \'https://www.geeksforgeeks.org/cycle-django-template-tags/\', \'https://www.geeksforgeeks.org/extends-django-template-tags/\', \'https://www.geeksforgeeks.org/if-django-template-tags/\', \'https://www.geeksforgeeks.org/for-loop-django-template-tags/\', \'https://www.geeksforgeeks.org/for-empty-loop-django-template-tags/\', \'https://geeksforgeeks.org/boolean-operators-django-template-tags/\', \'https://geeksforgeeks.org/firstof-django-template-tags/\', \'https://geeksforgeeks.org/include-django-template-tags/\', \'https://www.geeksforgeeks.org/lorem-django-template-tags/\', \'https://www.geeksforgeeks.org/now-django-template-tags/\', \'https://www.geeksforgeeks.org/url-django-template-tags/\', \'https://www.geeksforgeeks.org/django-template-filters/#add\', \'https://www.geeksforgeeks.org/django-template-filters/#addslashes\', \'https://www.geeksforgeeks.org/django-template-filters/#center\', \'https://www.geeksforgeeks.org/django-template-filters/#cut\', \'https://www.geeksforgeeks.org/django-template-filters/#date\', \'https://www.geeksforgeeks.org/django-template-filters/#default\', \'https://www.geeksforgeeks.org/django-template-filters/#dictsort\', \'https://www.geeksforgeeks.org/django-template-filters/#divisibleby\', \'https://www.geeksforgeeks.org/django-template-filters/#escape\', \'https://www.geeksforgeeks.org/django-template-filters/#filesizeformat\', \'https://www.geeksforgeeks.org/django-template-filters/#filesizeformat\', \'https://www.geeksforgeeks.org/django-template-filters/#first\', \'https://www.geeksforgeeks.org/django-template-filters/#join\', \'https://www.geeksforgeeks.org/django-template-filters/#last\', \'https://www.geeksforgeeks.org/django-template-filters/#length\', \'https://www.geeksforgeeks.org/django-template-filters/#lower\', \'https://www.geeksforgeeks.org/django-template-filters/#make_list\', \'https://www.geeksforgeeks.org/django-template-filters/#random\', \'https://www.geeksforgeeks.org/django-template-filters/#slice\', \'https://www.geeksforgeeks.org/django-template-filters/#slugify\', \'https://www.geeksforgeeks.org/django-template-filters/#time\', \'https://www.geeksforgeeks.org/django-template-filters/#timesince\', \'https://www.geeksforgeeks.org/django-template-filters/#title\', \'https://www.geeksforgeeks.org/django-template-filters/#unordered_list\', \'https://www.geeksforgeeks.org/django-template-filters/#upper\', \'https://www.geeksforgeeks.org/django-template-filters/#wordcount\', \'https://www.geeksforgeeks.org/comment-django-template-tags/\', \'https://www.geeksforgeeks.org/extends-django-template-tags/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Django Templates can be configured in app_name/settings.py,xa0xa0\', \'Refer to the following articles to check how to create a project and an app in Django.xa0\', \'Now we need to map a URL to render this view,xa0\', \'Finally create a template in templates/geeks.html,xa0\', \'Let’s check if it is working,xa0\', \'ExampleVariables are surrounded by {{ and }} like this:xa0xa0\', \'With a context of {‘first_name’: ‘Naveen’, ‘last_name’: ‘Arora’}, this template renders to:xa0\', \'To know more about Django Template Variables visit – variables – Django Templatesxa0\', \'Tags are surrounded by {% and %} like this:\', \'Most tags accept arguments, for example :xa0\', \'If value is [‘a’, ‘b’, ‘c’, ‘d’], the output will be 4.xa0\', \'To know more about using comments in Templates, visit comment – Django template tagsxa0\', \'Example :assume the following directory structure:\', \'In template.html, the following paths would be valid:xa0\', \'To know more about Template inheritance and extends, visit extends – Django Template Tagsxa0xa0\']','[\'For our current project, we will create a single template directory that will be spread over the entire project for simplicity. App-level templates are generally used in big projects or in case we want to provide a different layout to each component of our webpage.\', \'Illustration of How to use templates in Django using an Example Project. Templates not only show static data but also the data from different databases connected to the application through a context dictionary. Consider a project named geeksforgeeks having an app named geeks.xa0\', \'To render a template one needs a view and a URL mapped to that view. Let’s begin by creating a view in geeks/views.py,xa0xa0\', \'Variables output a value from the context, which is a dict-like object mapping keys to values. The context object we sent from the view can be accessed in the template using variables of Django Template.xa0\', \'Tags provide arbitrary logic in the rendering process. For example, a tag can output content, serve as a control structure e.g. an “if” statement or a “for” loop, grab content from a database, or even enable access to other template tags.\', \'Django Template Engine provides filters that are used to transform the values of variables and tag arguments. We have already discussed major Django Template Tags. Tags can’t modify the value of a variable whereas filters can be used for incrementing the value of a variable or modifying it to one’s own need.xa0\', \'Filters can be “chained.” The output of one filter is applied to the next. {{ text|escape|linebreaks }} is a common idiom for escaping text contents, then converting line breaks to <p> tags.xa0\', \'Template ignores everything between {% comment %} and {% end comment %}. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled.xa0\']','[\'Templates are the third and most important part of Django’s MVT Structure. A template in Django is basically written in HTML, CSS, and Javascript in a .html file. Django framework efficiently handles and generates dynamically HTML web pages that are visible to the end-user. Django mainly functions with a backend so, in order to provide a frontend and provide a layout to our website, we use templates. There are two methods of adding the template to our website depending on our needs.We can use a single template directory which will be spread over the entire project.xa0For each app of our project, we can create a different template directory.\', \'This is one of the most important facilities provided by Django Templates. A Django template is a text document or a Python string marked-up using the Django template language. Some constructs are recognized and interpreted by the template engine. The main ones are variables and tags. As we used for the loop in the above example, we used it as a tag. similarly, we can use various other conditions such as if, else, if-else, empty, etc. The main characteristics of Django Template language are Variables, Tags, Filters, and Comments.xa0\', \'The most powerful and thus the most complex part of Django’s template engine is template inheritance. Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines blocks that child templates can override. extends tag is used for the inheritance of templates in Django. One needs to repeat the same code again and again. Using extends we can inherit templates as well as variables.\']','[\"TEMPLATES = [    {        # Template backend to be used, For example Jinja        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',        # Directories for templates        \'DIRS\': [],        \'APP_DIRS\': True,         # options to configure        \'OPTIONS\': {            \'context_processors\': [                \'django.template.context_processors.debug\',                \'django.template.context_processors.request\',                \'django.contrib.auth.context_processors.auth\',                \'django.contrib.messages.context_processors.messages\',            ],        },    },]\", \'# import Http Response from djangofrom django.shortcuts import render  # create a functiondef geeks_view(request):    # create a dictionary to pass    # data to the template    context ={        \"data\":\"Gfg is the best\",        \"list\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]    }    # return response with template and context    return render(request, \"geeks.html\", context)\', \"from django.urls import path # importing views from views..pyfrom .views import geeks_view urlpatterns = [    path(\'\', geeks_view),]\", \'<!DOCTYPE html><html lang=\"en\"><head>    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">    <title>Homepage</title></head><body>    <h1>Welcome to Geeksforgeeks.</h1>       <p> Data  is {{  data }}</p>       <h4>List is </h4>    <ul>    {% for i in list %}    <li>{{ i }}</li>    {% endfor %}</body></html>\', \'{% extends \"./base2.html\" %}{% extends \"../base1.html\" %}{% extends \"./my/base3.html\" %}\']','[\'{{ variable_name }}\', \'My first name is {{ first_name }}. My last name is {{ last_name }}.\', \'My first name is Naveen. My last name is Arora.\', \'{% tag_name %}\', \'{% csrf_token %}\', \"{% cycle \'odd\' \'even\' %}\", \'{{ variable_name | filter_name }}\', \'{{ value | length }}\', \"{% comment \'comment_name\' %}\n{% endcomment %}\", \'{% comment \"Optional note\" %}\n    Commented out text with {{ create_date|date:\"c\" }}\n{% endcomment %}\', \"{% extends \'template_name.html\' %}\", \'dir1/\n    template.html\n    base2.html\n    my/\n        base3.html\nbase1.html\']','[\'Comment|||cycle|||extends&&&if|||for loop|||for … empty loop&&&Boolean Operators|||firstof|||include&&&lorem|||now|||url\', \'add|||addslashes|||capfirst&&&center|||cut|||date&&&default|||dictsort|||divisibleby&&&escape|||filesizefodivisible byrmat|||first&&&join|||last|||length&&&line numbers|||lower|||make_list&&&random|||slice|||slugify&&&time|||timesince|||title&&&unordered_list|||upper|||wordcount\']','[\'How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?\']'),(134,'[\'Views In Django | Python\']','[\'Django View Example\', \'Python3\', \'Python3\', \'Types of Views\', \'Function Based Views\', \'Python3\', \'Python3\', \'Python3\', \'html\', \'Class Based Views\', \'Python3\', \'Python3\', \'html\']','[\'Function based view Example –\', \'Class based view Example –\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200124153519/django-views.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200123151616/django-view-example.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200123160947/djang-views-types-1024x631.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200108120217/django-listview-check-models-instances.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200108120919/django-listview-function-based.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200116152134/django-listview-class-based-views.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/django-project-mvt-structure/\', \'https://www.geeksforgeeks.org/django-request-and-response-cycle-httprequest-and-httpresponse-objects/\', \'https://www.geeksforgeeks.org/mvc-design-pattern/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://www.geeksforgeeks.org/django-request-and-response-cycle-httprequest-and-httpresponse-objects/\', \'http://127.0.0.1:8000/\', \'https://www.geeksforgeeks.org/django-introduction-set-2-creating-a-project/\', \'https://www.geeksforgeeks.org/django-app-model-python-manage-py-makemigrations-command/\', \'https://www.geeksforgeeks.org/django-manage-py-migrate-command-python/\', \'http://localhost:8000/admin/geeks/geeksmodel/\', \'http://localhost:8000/\', \'https://www.geeksforgeeks.org/django-crud-create-retrieve-update-delete-function-based-views/\', \'http://localhost:8000/\', \'https://www.geeksforgeeks.org/class-based-generic-views-django-create-retrieve-update-delete/\', \'https://www.geeksforgeeks.org/createview-class-based-views-django/\', \'https://www.geeksforgeeks.org/createview-class-based-views-django/\', \'https://www.geeksforgeeks.org/updateview-class-based-views-django/\', \'https://www.geeksforgeeks.org/deleteview-class-based-views-django/\', \'https://www.geeksforgeeks.org/formview-class-based-views-django/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Refer to the following articles to check how to create a project and an app in Django.xa0\', \'After you have a project ready, we can create a view in geeks/views.py,\', \'Let’s step through this code one line at a time:xa0\', \'Now, visit http://127.0.0.1:8000/,\', \'Django views are divided into two major categories:-\', \'After creating this model, we need to run two commands in order to create Database for the same.\', \'Now let’s create some instances of this model using shell, run form bash,\', \'Enter following commands\', \'Let’s create a view and template for the same. In geeks/views.py,\', \'Create a template in templates/list_view.html,\', \'Let’s check what is there on http://localhost:8000/\', \'In geeks/views.py,\', \'Now create a URL path to map the view. In geeks/urls.py,\', \'Create a template in templates/geeks/geeksmodel_list.html,\', \'Let’s check what is there on http://localhost:8000/xa0\', \'Django CRUD (Create, Retrieve, Update, Delete) Class Based Generic Views :-\']','[\'Django Views are one of the vital participants of MVT Structure of Django. As per Django Documentation, A view function is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image, anything that a web browser can display.xa0\', \'Illustration of How to create and use a Django view using an Example. Consider a project named geeksforgeeks having an app named geeks.xa0\', \'For more info on HttpRequest and HttpResponse visit – Django Request and Response cycle – HttpRequest and HttpResponse ObjectsLet’s get this view to working, in geeks/urls.py,\', \'To check how to make a basic project using MVT (Model, View, Template) structure of Django, visit Creating a Project Django.\', \'Function based views are writer using a function in python which receives as an argument HttpRequest object and returns an HttpResponse Object. Function based views are generally divided into 4 basic strategies, i.e., CRUD (Create, Retrieve, Update, Delete). CRUD is the base of any framework one is using for development.xa0xa0\', \'Let’s Create a function-based view list view to display instances of a model. Let’s create a model of which we will be creating instances through our view. In geeks/models.py,\', \'Now if you want to see your model and its data in the admin panel, then you need to register your model.Let’s register this model. In geeks/admin.py,\', \'Now we have everything ready for the back end. Verify that instances have been created from http://localhost:8000/admin/geeks/geeksmodel/xa0\', \'Similarly, function based views can be implemented with logics for create, update, retrieve and delete views.Django CRUD (Create, Retrieve, Update, Delete) Function Based Views :-xa0\', \'Class-based views provide an alternative way to implement views as Python objects instead of functions. They do not replace function-based views, but have certain differences and advantages when compared to function-based views:xa0\', \'Class-based views are simpler and efficient to manage than function-based views. A function-based view with tons of lines of code can be converted into class-based views with few lines only. This is where Object-Oriented Programming comes into impact.xa0xa0\']','[\'Django views are part of the user interface — they usually render the HTML/CSS/Javascript in your Template files into what you see in your browser when you render a web page. (Note that if you’ve used other frameworks based on the MVC (Model-View-Controller), do not get confused between Django views and views in the MVC paradigm. Django views roughly correspond to controllers in MVC, and Django templates to views in MVC.)\']','[\'# import Http Response from djangofrom django.http import HttpResponse# get datetimeimport datetime # create a functiondef geeks_view(request):    # fetch date and time    now = datetime.datetime.now()    # convert to string    html = \"Time is {}\".format(now)    # return response    return HttpResponse(html)\', \"from django.urls import path # importing views from views..pyfrom .views import geeks_view urlpatterns = [    path(\'\', geeks_view),]\", \'# import the standard Django Model# from built-in libraryfrom django.db import models  # declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):     # fields of the model    title = models.CharField(max_length = 200)    description = models.TextField()     # renames the instances of the model    # with their title name    def __str__(self):        return self.title\', \'from django.contrib import adminfrom .models import GeeksModel# Register your models here.admin.site.register(GeeksModel)\', \'from django.shortcuts import render # relative import of formsfrom .models import GeeksModel  def list_view(request):    # dictionary for initial data with    # field names as keys    context ={}     # add the dictionary during initialization    context[\"dataset\"] = GeeksModel.objects.all()             return render(request, \"list_view.html\", context)\', \'<div class=\"main\">     {% for data in dataset %}.     {{ data.title }}<br/>    {{ data.description }}<br/>    <hr/>     {% endfor %} </div>\', \'from django.views.generic.list import ListViewfrom .models import GeeksModel class GeeksList(ListView):     # specify the model for list view    model = GeeksModel\', \"from django.urls import path # importing views from views..pyfrom .views import GeeksListurlpatterns = [    path(\'\', GeeksList.as_view()),]\", \'<ul>    <!-- Iterate over object_list -->    {% for object in object_list %}    <!-- Display Objects -->    <li>{{ object.title }}</li>    <li>{{ object.description }}</li>     <hr/>    <!-- If objet_list is empty  -->    {% empty %}    <li>No objects yet.</li>    {% endfor %}</ul>\']','[\'Python manage.py makemigrations\nPython manage.py migrate\', \'Python manage.py shell\', \'>>> from geeks.models import GeeksModel\n>>> GeeksModel.objects.create(\n                       title=\"title1\",\n                       description=\"description1\").save()\n>>> GeeksModel.objects.create(\n                       title=\"title2\",\n                       description=\"description2\").save()\n>>> GeeksModel.objects.create(\n                       title=\"title2\",\n                       description=\"description2\").save()\']','[]','[\'How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?&&&First, we import the class HttpResponse from the django.http module, along with Python’s datetime library.|||Next, we define a function called geeks_view. This is the view function. Each view function takes an HttpRequest object as its first parameter, which is typically named request.|||The view returns an HttpResponse object that contains the generated response. Each view function is responsible for returning an HttpResponse object.&&&Function-Based Views|||Class-Based Views&&&Organization of code related to specific HTTP methods (GET, POST, etc.) can be addressed by separate methods instead of conditional branching.|||Object oriented techniques such as mixins (multiple inheritance) can be used to factor code into reusable components.&&&CreateView – Class based Views Django|||DetailView – Class based Views Django|||UpdateView – Class based Views Django|||DeleteView – Class based Views Django|||FormView – Class Based Views Django\']'),(135,'[\'Django CRUD (Create, Retrieve, Update, Delete) Function Based Views\']','[\'Django CRUD (Create, Retrieve, Update, Delete) Function Based Views\', \'Python3\', \'Python3\', \'Python3\', \'html\', \'Python3\', \'html\', \'Python3\', \'Python3\', \'html\', \'Python3\', \'html\', \'html\', \'Python3\', \'Python3\', \'html\']','[\'Create View\', \'Retrieve View\', \'Update View\', \'Delete View\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200114185631/Untitled-Diagram-316-1024x630.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200107131257/django-create-view-function-based.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200108120919/django-listview-function-based.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200109122929/django-detail-view-demo1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200109143813/django-update-view-.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200113123949/django-delete-view.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://www.geeksforgeeks.org/django-app-model-python-manage-py-makemigrations-command/\', \'https://www.geeksforgeeks.org/django-manage-py-migrate-command-python/\', \'https://geeksforgeeks.org/django-modelform-create-form-from-models/\', \'http://localhost:8000/\', \'https://www.geeksforgeeks.org/create-view-function-based-views-django/\', \'http://localhost:8000/\', \'https://www.geeksforgeeks.org/list-view-function-based-views-django/\', \'http://localhost:8000/1\', \'https://www.geeksforgeeks.org/detail-view-function-based-views-django/\', \'http://localhost:8000/1/update\', \'https://www.geeksforgeeks.org/update-view-function-based-views-django/\', \'http://localhost:8000/2/delete\', \'https://www.geeksforgeeks.org/delete-view-function-based-views-django/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Refer to the following articles to check how to create a project and an app in Django.xa0xa0\', \'After creating this model, we need to run two commands in order to create Database for the same.xa0xa0\', \'Create a template in templates/create_view.html,xa0xa0\', \'Now visit http://localhost:8000/xa0xa0\', \'Retrieve view is basically divided into two types of views Detail View and List View.xa0xa0\', \'Create a template in templates/list_view.html,xa0xa0\', \'Now visit http://localhost:8000/xa0xa0\', \'Let’s create a view and template for the same. In geeks/views.py,xa0\', \'Create a template in templates/Detail_view.html,xa0xa0\', \'Let’s check what is there on http://localhost:8000/1xa0xa0\', \'Now create following templates in templates folder,xa0In geeks/templates/update_view.html,xa0\', \'In geeks/templates/detail_view.html,xa0xa0\', \'Let’s check if everything is working, visithttp://localhost:8000/1/update.xa0xa0\', \'Now a url mapping to this view with a regular expression of id,xa0In geeks/urls.pyxa0xa0\', \'Everything ready, now let’s check if it is working or not, visit http://localhost:8000/2/deletexa0xa0\']','[\'Create – create or add new entries in a table in the database.xa0Retrieve – read, retrieve, search, or view existing entries as a list(List View) or retrieve a particular entry in detail (Detail View)xa0Update – update or edit existing entries in a table in the databasexa0Delete – delete, deactivate, or remove existing entries in a table in the databasexa0\', \'Illustration of How to create and use CRUD view using an Example. Consider a project named geeksforgeeks having an app named geeks.xa0xa0\', \'After you have a project and an app, let’s create a model of which we will be creating instances through our view. In geeks/models.py,xa0xa0\', \'Now we will create a Django ModelForm for this model. Refer this article for more on modelform – Django ModelForm – Create form from Models. create a file forms.py in geeks folder,xa0xa0\', \'Create View refers to a view (logic) to create an instance of a table in the database. It is just like taking an input from a user and storing it in a specified table.xa0In geeks/views.py,xa0xa0\', \'To check complete implementation of Function based Create View, visit Create View – Function based Views Django.xa0\', \'List View refers to a view (logic) to list all or particular instances of a table from the database in a particular order. It is used to display multiple types of data on a single page or view, for example, products on an eCommerce page.xa0In geeks/views.py,xa0xa0\', \'To check complete implementation of Function based List View, visit List View – Function based Views Djangoxa0xa0\', \'Detail View refers to a view (logic) to display a particular instance of a table from the database with all the necessary details. It is used to display multiple types of data on a single page or view, for example, profile of a user.xa0In geeks/views.py,xa0xa0\', \'To check complete implementation of Function based Detail View, visit Detail View – Function based Views Djangoxa0\', \'Update View refers to a view (logic) to update a particular instance of a table from the database with some extra details. It is used to update entries in the database for example, updating an article at geeksforgeeks.xa0In geeks/views.py,xa0\', \'To check complete implementation of Function based update View, visit Update View – Function based Views Djangoxa0\', \'Delete View refers to a view (logic) to delete a particular instance of a table from the database. It is used to delete entries in the database for example, deleting an article at geeksforgeeks.xa0In geeks/views.pyxa0xa0\', \'Template for delete view includes a simple form confirming whether user wants to delete the instance or not. In geeks/templates/delete_view.html,xa0xa0\', \'To check complete implementation of Function based Delete View, visit Delete View – Function based Views Djangoxa0\']','[\'Django is a Python-based web framework which allows you to quickly create web application without all of the installation or dependency problems that you normally will find with other frameworks. Django is based on MVT (Model View Template) architecture and revolves around CRUD (Create, Retrieve, Update, Delete) operations. CRUD can be best explained as an approach to building a Django web application. In general CRUD means performing Create, Retrieve, Update and Delete operations on a table in a database. Let’s discuss what actually CRUD means,xa0\']','[\'# import the standard Django Model# from built-in libraryfrom django.db import models  # declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):     # fields of the model    title = models.CharField(max_length = 200)    description = models.TextField()     # renames the instances of the model    # with their title name    def __str__(self):        return self.title\', \'from django import formsfrom .models import GeeksModel  # creating a formclass GeeksForm(forms.ModelForm):     # create meta class    class Meta:        # specify model to be used        model = GeeksModel         # specify fields to be used        fields = [            \"title\",            \"description\",        ]\', \'from django.shortcuts import render # relative import of formsfrom .models import GeeksModelfrom .forms import GeeksForm  def create_view(request):    # dictionary for initial data with    # field names as keys    context ={}     # add the dictionary during initialization    form = GeeksForm(request.POST or None)    if form.is_valid():        form.save()             context[\'form\']= form    return render(request, \"create_view.html\", context)\', \'<form method=\"POST\" enctype=\"multipart/form-data\">     <!-- Security token -->    {% csrf_token %}     <!-- Using the formset -->    {{ form.as_p }}         <input type=\"submit\" value=\"Submit\"></form>\', \'from django.shortcuts import render # relative import of formsfrom .models import GeeksModel  def list_view(request):    # dictionary for initial data with    # field names as keys    context ={}     # add the dictionary during initialization    context[\"dataset\"] = GeeksModel.objects.all()             return render(request, \"list_view.html\", context)\', \'<div class=\"main\">     {% for data in dataset %}.     {{ data.title }}<br/>    {{ data.description }}<br/>    <hr/>     {% endfor %} </div>\', \"from django.urls import path # importing views from views..pyfrom .views import detail_view urlpatterns = [    path(\'<id>\', detail_view ),]\", \'from django.shortcuts import render # relative import of formsfrom .models import GeeksModel # pass id attribute from urlsdef detail_view(request, id):    # dictionary for initial data with    # field names as keys    context ={}     # add the dictionary during initialization    context[\"data\"] = GeeksModel.objects.get(id = id)             return render(request, \"detail_view.html\", context)\', \'<div class=\"main\">         <!-- Specify fields to be displayed -->    {{ data.title }}<br/>    {{ data.description }}<br/> </div>\', \'from django.shortcuts import (get_object_or_404,                              render,                              HttpResponseRedirect) # relative import of formsfrom .models import GeeksModelfrom .forms import GeeksForm # after updating it will redirect to detail_Viewdef detail_view(request, id):    # dictionary for initial data with    # field names as keys    context ={}      # add the dictionary during initialization    context[\"data\"] = GeeksModel.objects.get(id = id)              return render(request, \"detail_view.html\", context) # update view for detailsdef update_view(request, id):    # dictionary for initial data with    # field names as keys    context ={}     # fetch the object related to passed id    obj = get_object_or_404(GeeksModel, id = id)     # pass the object as instance in form    form = GeeksForm(request.POST or None, instance = obj)     # save the data from the form and    # redirect to detail_view    if form.is_valid():        form.save()        return HttpResponseRedirect(\"/\"+id)     # add form dictionary to context    context[\"form\"] = form     return render(request, \"update_view.html\", context)\', \'<div class=\"main\">    <!-- Create a Form -->    <form method=\"POST\">        <!-- Security token by Django -->        {% csrf_token %}         <!-- form as paragraph -->        {{ form.as_p }}         <input type=\"submit\" value=\"Update\">    </form> </div>\', \'<div class=\"main\">    <!-- Display attributes of instance -->    {{ data.title }} <br/>    {{ data.description }}</div>\', \'from django.shortcuts import (get_object_or_404,                              render,                              HttpResponseRedirect) from .models import GeeksModel  # delete view for detailsdef delete_view(request, id):    # dictionary for initial data with    # field names as keys    context ={}     # fetch the object related to passed id    obj = get_object_or_404(GeeksModel, id = id)      if request.method ==\"POST\":        # delete object        obj.delete()        # after deleting redirect to        # home page        return HttpResponseRedirect(\"/\")     return render(request, \"delete_view.html\", context)\', \"from django.urls import path # importing views from views..pyfrom .views import delete_viewurlpatterns = [    path(\'<id>/delete\', delete_view ),]\", \'<div class=\"main\">    <!-- Create a Form -->    <form method=\"POST\">        <!-- Security token by Django -->        {% csrf_token %}        Are you want to delete this item ?        <input type=\"submit\" value=\"Yes\" />        <a href=\"/\">Cancel </a>    </form></div>\']','[\'Python manage.py makemigrations\nPython manage.py migrate\']','[]','[\'How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?\']'),(136,'[\'Class Based Generic Views Django (Create, Retrieve, Update, Delete)\']','[\'Django CRUD (Create, Retrieve, Update, Delete) Class Based Views\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'HTML\', \'Python3\', \'Python3\', \'HTML\', \'Python3\', \'Python3\', \'HTML\', \'Python3\', \'Python3\', \'HTML\', \'Python3\', \'Python3\', \'HTML\', \'Python3\', \'HTML\', \'Python3\']','[\'Using Class Based Views\', \'CreateView\', \'Retrieve Views\', \'UpdateView\', \'DeleteView\', \'FormView\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200114185631/Untitled-Diagram-316-1024x630.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200107131257/django-create-view-function-based.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200116152134/django-listview-class-based-views.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200118000848/django-detailview-class-based.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200120134704/django-updateview-class-based-view.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200121124942/django-deleteview-class-based-views.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200107131257/django-create-view-function-based.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/#createview\', \'https://www.geeksforgeeks.org/#retrieveview\', \'https://www.geeksforgeeks.org/#listview\', \'https://www.geeksforgeeks.org/#detailview\', \'https://www.geeksforgeeks.org/#updateview\', \'https://www.geeksforgeeks.org/#deleteview\', \'https://www.geeksforgeeks.org/#formview\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://www.geeksforgeeks.org/django-app-model-python-manage-py-makemigrations-command/\', \'https://www.geeksforgeeks.org/django-manage-py-migrate-command-python/\', \'https://geeksforgeeks.org/django-modelform-create-form-from-models/\', \'http://localhost:8000/\', \'https://www.geeksforgeeks.org/createview-class-based-views-django/\', \'https://www.geeksforgeeks.org/list-view-function-based-views-django/\', \'http://localhost:8000/\', \'https://www.geeksforgeeks.org/listview-class-based-views-django/\', \'https://www.geeksforgeeks.org/detail-view-function-based-views-django/\', \'http://localhost:8000/1\', \'https://www.geeksforgeeks.org/detailview-class-based-views-django/\', \'https://www.geeksforgeeks.org/update-view-function-based-views-django/\', \'http://localhost:8000/1/update\', \'https://www.geeksforgeeks.org/updateview-class-based-views-django/\', \'https://www.geeksforgeeks.org/delete-view-function-based-views-django/\', \'http://localhost:8000/1/delete\', \'https://www.geeksforgeeks.org/deleteview-class-based-views-django/\', \'http://127.0.0.1:8000/\', \'https://www.geeksforgeeks.org/formview-class-based-views-django/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Refer to the following articles to check how to create a project and an app in Django.xa0\', \'After creating this model, we need to run two commands in order to create Database for the same.xa0\', \'So where the code to handle HTTP GET in a view function would look something like:xa0\', \'In a class-based view, this would become:\', \'Now create a url path to map the view. In geeks/urls.py,xa0\', \'Create a template in templates/geeks/geeksmodel_form.html,xa0\', \'Let’s check what is there on http://localhost:8000/xa0\', \'Now create a url path to map the view. In geeks/urls.py,xa0\', \'Create a template in templates/geeks/geeksmodel_list.html,xa0\', \'Let’s check what is there on http://localhost:8000/xa0\', \'To check complete implementation of Class based ListView, visit ListView – Class Based Views Django\', \'Now create a url path to map the view. In geeks/urls.py,xa0\', \'Create a template in templates/geeks/geeksmodel_detail.html,xa0\', \'Let’s check what is there on http://localhost:8000/1/xa0\', \'Now create a url path to map the view. In geeks/urls.py,xa0\', \'Create a template in templates/geeks/geeksmodel_form.html,xa0\', \'Let’s check what is there on http://localhost:8000/1/update/xa0\', \'Now create a url path to map the view. In geeks/urls.py,xa0\', \'Create a template in templates/geeks/geeksmodel_confirm_delete.html,xa0\', \'Let’s check what is there on http://localhost:8000/1/deletexa0\', \'Create a template for this view in geeks/geeksmodel_form.html,xa0\', \'Map a url to this view in geeks/urls.py,xa0\', \'Now visit http://127.0.0.1:8000/,xa0\']','[\'This article revolves around complete implementation of Class Based Views in Django (Create, Retrieve, Update, Delete). Let’s discuss what actually CRUD means,\', \'Illustration of How to create and use CRUD views using an Example. Consider a project named geeksforgeeks having an app named geeks.xa0xa0\', \'After you have a project and an app, let’s create a model of which we will be creating instances through our view. In geeks/models.py,xa0xa0\', \'Now we will create a Django ModelForm for this model. Refer this article for more on modelform – Django ModelForm – Create form from Models. create a file forms.py in geeks folder,xa0xa0\', \'At its core, a class-based view allows you to respond to different HTTP request methods with different class instance methods, instead of with conditionally branching code inside a single view function.\', \'Similarly in urls.py, one needs to use as_view() method to differentiate a class based view from function based view.xa0\', \'To check complete implementation of Class based CreateView, visit Createview – Class Based Views Django.xa0\', \'To check complete implementation of Class based DetailView, visit DetailView – Class Based Views Djangoxa0\', \'To check complete implementation of Class based UpdateView, visit UpdateView – Class Based Views Django.xa0\', \'To check complete implementation of Class based DeleteView, visit DeleteView – Class Based Views Django\', \'FormView refers to a view (logic) to display and verify a Django Form. For example a form to register users at geeksforgeeks. Class Based Views automatically setup everything from A to Z. One just needs to specify which form to create FormView for and template_name, then Class based FormView will automatically render that form. Let’s create our class based view. In geeks/views.py,xa0xa0\', \'To check complete implementation of Class based FormView, visit FormView – Class Based Views Djangoxa0\']','[\'Django is a Python-based web framework that allows you to quickly create web applications. It has built-in admin interface which makes easy to work with it. It is often called Batteries included framework because it provides built-in facilities for every functionality. Class Based Generic Views are advanced set of Built-in views which are used for implementation of selective view strategies such as Create, Retrieve, Update, Delete. Class based views simplify the use by separating GET, POST requests for a view. They do not replace function-based views, but have certain differences and advantages when compared to function-based views:\', \'CreateView – create or add new entries in a table in the database.xa0Retrieve Views – read, retrieve, search, or view existing entries as a list(ListView) or retrieve a particular entry in detail (DetailView)xa0UpdateView – update or edit existing entries in a table in the databasexa0DeleteView – delete, deactivate, or remove existing entries in a table in the databasexa0FormView – render a form to template and handle data entered by user\', \'Create View refers to a view (logic) to create an instance of a table in the database. We have already discussed basics of Create View in Create View – Function based Views Django. Class Based Views automatically setup everything from A to Z. One just needs to specify which model to create Create View for and the fields. Then Class based CreateView will automatically try to find a template in app_name/modelname_form.html. In our case it is geeks/templates/geeks/geeksmodel_form.html. Let’s create our class based view. In geeks/views.py,xa0\', \'List View refers to a view (logic) to display multiple instances of a table in the database. We have already discussed basics of List View in List View – Function based Views Django. Class Based Views automatically setup everything from A to Z. One just needs to specify which model to create ListView for, then Class based ListView will automatically try to find a template in app_name/modelname_list.html. In our case it is geeks/templates/geeks/geeksmodel_list.html. Let’s create our class based view. In geeks/views.py,xa0\', \'Detail View refers to a view (logic) to display one instances of a table in the database. We have already discussed basics of Detail View in Detail View – Function based Views Django. Class Based Views automatically setup everything from A to Z. One just needs to specify which model to create DetailView for, then Class based DetailView will automatically try to find a template in app_name/modelname_detail.html. In our case it is geeks/templates/geeks/geeksmodel_detail.html. Let’s create our class based view. In geeks/views.py,xa0\', \'UpdateView refers to a view (logic) to update a particular instance of a table from the database with some extra details. It is used to update entries in the database for example, updating an article at geeksforgeeks. We have already discussed basics of Update View in Update View – Function based Views Django. Class Based Views automatically setup everything from A to Z. One just needs to specify which model to create UpdateView for, then Class based UpdateView will automatically try to find a template in app_name/modelname_form.html. In our case it is geeks/templates/geeks/geeksmodel_form.html. Let’s create our class based view. In geeks/views.py,xa0\', \'Delete View refers to a view (logic) to delete a particular instance of a table from the database. It is used to delete entries in the database for example, deleting an article at geeksforgeeks. We have already discussed basics of Delete View in Delete View – Function based Views Django. Class Based Views automatically setup everything from A to Z. One just needs to specify which model to create DeleteView for, then Class based DeleteViewde will automatically try to find a template in app_name/modelname_confirm_delete.html. In our case it is geeks/templates/geeks/geeksmodel_confirm_delete.html. Let’s create our class based view. In geeks/views.py,xa0\']','[\'# import the standard Django Model# from built-in libraryfrom django.db import models  # declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):     # fields of the model    title = models.CharField(max_length = 200)    description = models.TextField()     # renames the instances of the model    # with their title name    def __str__(self):        return self.title\', \'from django import formsfrom .models import GeeksModel  # creating a formclass GeeksForm(forms.ModelForm):     # create meta class    class Meta:        # specify model to be used        model = GeeksModel         # specify fields to be used        fields = [            \"title\",            \"description\",        ]\', \"from django.http import HttpResponse def my_view(request):    if request.method == \'GET\':        # <view logic>        return HttpResponse(\'result\')\", \"from django.http import HttpResponsefrom django.views import View class MyView(View):    def get(self, request):        # <view logic>        return HttpResponse(\'result\')\", \"# urls.pyfrom django.urls import pathfrom myapp.views import MyView urlpatterns = [     path(\'about/\', MyView.as_view()), ]\", \"from django.views.generic.edit import CreateViewfrom .models import GeeksModel class GeeksCreate(CreateView):     # specify the model for create view    model = GeeksModel     # specify the fields to be displayed     fields = [\'title\', \'description\']\", \"from django.urls import path # importing views from views..pyfrom .views import GeeksCreateurlpatterns = [    path(\'\', GeeksCreate.as_view() ),]\", \'<form method=\"POST\" enctype=\"multipart/form-data\">     <!-- Security token -->    {% csrf_token %}     <!-- Using the formset -->    {{ form.as_p }}         <input type=\"submit\" value=\"Submit\"></form>\', \'from django.views.generic.list import ListViewfrom .models import GeeksModel class GeeksList(ListView):     # specify the model for list view    model = GeeksModel\', \"from django.urls import path # importing views from views..pyfrom .views import GeeksListurlpatterns = [    path(\'\', GeeksList.as_view()),]\", \'<ul>    <!-- Iterate over object_list -->    {% for object in object_list %}    <!-- Display Objects -->    <li>{{ object.title }}</li>    <li>{{ object.description }}</li>     <hr/>    <!-- If object_list is empty  -->    {% empty %}    <li>No objects yet.</li>    {% endfor %}</ul>\', \'from django.views.generic.detail import DetailView from .models import GeeksModel class GeeksDetailView(DetailView):    # specify the model to use    model = GeeksModel\', \"from django.urls import path # importing views from views..pyfrom .views import GeeksDetailViewurlpatterns = [    # <pk> is identification for id field,    # slug can also be used    path(\'<pk>/\', GeeksDetailView.as_view()),]\", \'<h1>{{ object.title }}</h1>   <p>{{ object.description }}</p>\', \'# import generic UpdateViewfrom django.views.generic.edit import UpdateView # Relative import of GeeksModelfrom .models import GeeksModel class GeeksUpdateView(UpdateView):    # specify the model you want to use    model = GeeksModel     # specify the fields    fields = [        \"title\",        \"description\"    ]     # can specify success url    # url to redirect after successfully    # updating details    success_url =\"/\"\', \"from django.urls import path # importing views from views..pyfrom .views import GeeksUpdateViewurlpatterns = [    # <pk> is identification for id field,    # <slug> can also be used    path(\'<pk>/update\', GeeksUpdateView.as_view()),]\", \'<form method=\"post\">    {% csrf_token %}    {{ form.as_p }}    <input type=\"submit\" value=\"Save\"></form>\', \'# import generic UpdateViewfrom django.views.generic.edit import DeleteView # Relative import of GeeksModelfrom .models import GeeksModel class GeeksDeleteView(DeleteView):    # specify the model you want to use    model = GeeksModel         # can specify success url    # url to redirect after successfully    # deleting object    success_url =\"/\"\', \"from django.urls import path # importing views from views..pyfrom .views import GeeksDeleteViewurlpatterns = [    # <pk> is identification for id field,    # slug can also be used    path(\'<pk>/delete/\', GeeksDeleteView.as_view()),]\", \'<form method=\"post\">{% csrf_token %}       <p>Are you sure you want to delete \"{{ object }}\"?</p>       <input type=\"submit\" value=\"Confirm\"></form>\', \'# import generic FormViewfrom django.views.generic.edit import FormView # Relative import of GeeksFormfrom .forms import GeeksForm class GeeksFormView(FormView):    # specify the Form you want to use    form_class = GeeksForm         # specify name of template    template_name = \"geeks / geeksmodel_form.html\"     # can specify success url    # url to redirect after successfully    # updating details    success_url =\"/thanks/\"\', \'<form method=\"post\">    {% csrf_token %}    {{ form.as_p }}    <input type=\"submit\" value=\"Save\"></form>\', \"from django.urls import path # importing views from views..pyfrom .views import GeeksFormViewurlpatterns = [    path(\'\', GeeksFormView.as_view()),]\"]','[\'Python manage.py makemigrations\nPython manage.py migrate\']','[]','[\'Organization of code related to specific HTTP methods (GET, POST, etc.) can be addressed by separate methods instead of conditional branching.|||Object oriented techniques such as mixins (multiple inheritance) can be used to factor code into reusable components.&&&How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?\']'),(137,'[\'Django Models\']','[\'Using Django Models\', \'Basic model data types and fields list\', \'Field Options\']','[\'Creating a Model\', \'Render a model in Django Admin Interface\', \'Django CRUD – Inserting, Updating and Deleting Data\', \'Validation on Fields in a Model\', \'More on Django Models –\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191220123439/django-models.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191220125101/Django-Models-render-admin-1024x302.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://docs.djangoproject.com/en/3.0/topics/db/queries/\', \'https://www.geeksforgeeks.org/how-to-create-a-basic-project-using-mvt-in-django/\', \'https://www.geeksforgeeks.org/how-to-create-an-app-in-django/\', \'https://www.geeksforgeeks.org/django-basic-app-model-makemigrations-and-migrate/\', \'https://www.geeksforgeeks.org/render-model-in-django-admin-interface/\', \'https://www.geeksforgeeks.org/django-orm-inserting-updating-deleting-data/\', \'https://www.geeksforgeeks.org/built-in-field-validations-django-models/\', \'https://www.geeksforgeeks.org/change-object-display-name-using-__str__-function-django-models-python/\', \'https://geeksforgeeks.org/custom-field-validations-in-django-models/\', \'https://www.geeksforgeeks.org/django-manage-py-migrate-command-python/\', \'https://www.geeksforgeeks.org/django-app-model-python-manage-py-makemigrations-command/\', \'https://contribute.geeksforgeeks.org/django-model-data-types-and-fields-list/\', \'https://www.geeksforgeeks.org/how-to-use-django-field-choices/\', \'https://www.geeksforgeeks.org/overriding-the-save-method-django-models/\', \'https://www.geeksforgeeks.org/autofield-django-models/\', \'https://www.geeksforgeeks.org/bigautofield-django-models/\', \'https://www.geeksforgeeks.org/bigintegerfield-django-models/\', \'https://www.geeksforgeeks.org/binaryfield-django-models/\', \'https://www.geeksforgeeks.org/booleanfield-django-models/\', \'https://www.geeksforgeeks.org/charfield-django-models/\', \'https://www.geeksforgeeks.org/datefield-django-models/\', \'https://www.geeksforgeeks.org/datetimefield-django-models/\', \'https://www.geeksforgeeks.org/decimalfield-django-models/\', \'https://www.geeksforgeeks.org/durationfield-django-models/\', \'https://www.geeksforgeeks.org/emailfield-django-models/\', \'https://www.geeksforgeeks.org/filefield-django-models/\', \'https://www.geeksforgeeks.org/floatfield-django-models/\', \'https://www.geeksforgeeks.org/imagefield-django-models/\', \'https://www.geeksforgeeks.org/integerfield-django-models/\', \'https://www.geeksforgeeks.org/genericipaddressfield-django-models/\', \'https://www.geeksforgeeks.org/nullbooleanfield-django-forms/\', \'https://www.geeksforgeeks.org/positiveintegerfield-django-models/\', \'https://www.geeksforgeeks.org/positivesmallintegerfield-django-models/\', \'https://www.geeksforgeeks.org/slugfield-django-models/\', \'https://www.geeksforgeeks.org/smallintegerfield-django-models/\', \'https://www.geeksforgeeks.org/textfield-django-models/\', \'https://www.geeksforgeeks.org/timefield-django-models/\', \'https://www.geeksforgeeks.org/urlfield-django-models/\', \'https://www.geeksforgeeks.org/uuidfield-django-models/\', \'https://www.geeksforgeeks.org/python-relational-fields-in-django-models/\', \'https://www.geeksforgeeks.org/python-relational-fields-in-django-models/\', \'https://www.geeksforgeeks.org/python-relational-fields-in-django-models/\', \'https://www.geeksforgeeks.org/nulltrue-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/blanktrue-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/default-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/help_text-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/primary_key-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/editablefalse-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/error_messages-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/help_text-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/verbose_name-django-built-in-field-validation/\', \'https://www.geeksforgeeks.org/custom-field-validations-in-django-models/\', \'https://docs.djangoproject.com/en/2.2/ref/validators/\', \'https://www.geeksforgeeks.org/uniquetrue-django-built-in-field-validation/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Django maps the fields defined in Django models into table fields of the database as shown below.\', \'Refer to the following articles to check how to create a project and an app in Django.\', \'To create a model, in geeks/models.py Enter the code,\', \'SQL Query to create above Model as a Table is created and\', \'creates the table in the database.\', \'Retrieving objectsTo retrieve all the objects of a model, we write the following command:\', \'Modifying existing objectsWe can modify an existing object as follows:\', \'Deleting objectsTo delete a single object, we need to write the following commands:\', \'Django also defines a set of fields that represent relations.\']','[\'To use Django Models, one needs to have a project and an app working in it. After you start an app you can create models in app/models.py. Before starting to use a model let’s check how to start a project and create an app named geeks.py\', \'Now we have created a model we can perform various operations such as creating a Row for the table or in terms of Django Creating an instance of Model. To know more visit – Django Basic App Model – Makemigrations and Migrate\', \'To render a model in Django admin, we need to modify app/admin.py. Go to admin.py in geeks app and enter the following code. Import the corresponding model from models.py and register it to the admin interface.\', \'Now we can check whether the model has been rendered in Django Admin. Django Admin Interface can be used to graphically implement CRUD (Create, Retrieve, Update, Delete).To check more on rendering models in django admin, visit – Render Model in Django Admin Interface\', \'Django lets us interact with its database models, i.e. add, delete, modify and query objects, using a database-abstraction API called ORM(Object Relational Mapper). We can access the Django ORM by running the following command inside our project directory.\', \'Adding objects.To create an object of model Album and save it into the database, we need to write the following command:\', \'To check detailed post of Django’s ORM (Object) visit Django ORM – Inserting, Updating & Deleting Data\', \'Built-in Field Validations in Django models are the default validations that come predefined to all Django fields. Every field comes in with built-in validations from Django validators. For example, IntegerField comes with built-in validation that it can only store integer values and that too in a particular range.Enter the following code into models.py file of geeks app.\', \'After running makemigrations and migrate on Django and rendering above model, let us try to create an instance using string “GfG is Best“.You can see in the admin interface, one can not enter a string in an IntegerField. Similarly every field has its own validations. To know more about validations visit, Built-in Field Validations – Django Models\', \'The most important part of a model and the only required part of a model is the list of database fields it defines. Fields are specified by class attributes. Here is a list of all Field types used in Django.\', \'Field Options are the arguments given to each field for applying some constraint or imparting a particular characteristic to a particular Field. For example, adding an argument null = True to CharField will enable it to store empty values for that table in relational database.Here are the field options and attributes that an CharField can use.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'A Django model is the built-in feature that Django uses to create tables, their fields, and various constraints. In short, Django Models is the SQL of Database one uses with Django. SQL (Structured Query Language) is complex and involves a lot of different queries for creating, deleting, updating or any other stuff related to database. Django models simplify the tasks and organize tables into models. Generally, each model maps to a single database table.This article revolves about how one can use Django models to store data in the database conveniently. Moreover, we can use admin panel of Django to create, update, delete or retrieve fields of a model and various similar operations. Django models provide simplicity, consistency, version control and advanced metadata handling. Basics of a model include –\', \'Whenever we create a Model, Delete a Model, or update anything in any of models.py of our project. We need to run two commands makemigrations and migrate. makemigrations basically generates the SQL commands for preinstalled apps (which can be viewed in installed apps in settings.py) and your newly created app’s model which you add in installed apps whereas migrate executes those SQL commands in the database file.So when we run,\']','[\'from django.db import models  # Create your models here.class GeeksModel(models.Model):    title = models.CharField(max_length = 200)    description = models.TextField()\', \'# import the standard Django Model# from built-in libraryfrom django.db import models  # declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):        # fields of the model    title = models.CharField(max_length = 200)    description = models.TextField()    last_modified = models.DateTimeField(auto_now_add = True)    img = models.ImageField(upload_to = \"images/\")          # renames the instances of the model        # with their title name    def __str__(self):        return self.title\', \'from django.contrib import admin     # Register your models here. from .models import GeeksModel     admin.site.register(GeeksModel)\', \'from django.db import modelsfrom django.db.models import Model# Create your models here.  class GeeksModel(Model):    geeks_field = models.IntegerField()      def __str__(self):        return self.geeks_field\']','[\'from django.db import models\n        \nclass ModelName(models.Model):\n        field_name = models.Field(**options)\', \'Python manage.py makemigrations\', \'Python manage.py migrate\', \'python manage.py shell\', \'>>> a = GeeksModel(\n         title = “GeeksForGeeks”,  \n         description = “A description here”,\n         img = “geeks/abc.png”\n         )\n>>> a.save()\', \'>>> GeeksModel.objects.all()\n<QuerySet [<GeeksModel: Divide>, <GeeksModel: Abbey Road>, <GeeksModel: Revolver>]>\', \'>>> a = GeeksModel.objects.get(id = 3)\n>>> a.title = \"Pop\"\n>>> a.save()\', \'>>> a = Album.objects.get(id = 2)\n>>> a.delete()\']','[]','[\'How to Create a Basic Project using MVT in Django?|||How to Create an App in Django ?&&&Change Object Display Name using __str__ function – Django Models|||Custom Field Validations in Django Models|||Django python manage.py migrate command|||Django App Model – Python manage.py makemigrations command|||Django model data types and fields list|||How to use Django Field Choices ?|||Overriding the save method – Django Models\']'),(138,'[\'Django ORM – Inserting, Updating & Deleting Data\']','[]','[\'Adding objects\', \'Retrieving objects\', \'Modifying existing objects\', \'Deleting objects\']','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/django-models/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisite: Django models\', \'For demonstration purposes, we will use the following Django models.\', \'We can access the Django ORM by running the following command inside our project directory.\', \'Let us add 2 more Albums records for the sake of demonstration.\', \'To retrieve all the objects of a model, we write the following command:\', \'We can modify an existing object as follows:\', \'To delete a single object, we need to write the following commands:\', \'To delete multiple objects, we can use filter() or exclude() functions as follows:\']','[\'Django lets us interact with its database models, i.e. add, delete, modify and query objects, using a database-abstraction API called ORM(Object Relational Mapper). This article discusses all the useful operations we can perform using Django ORM.\', \'This brings us to an interactive Python console. Assuming that our models exist in myProject/albums/models.py we can import our models using the following command:\', \'To create an object of model Album and save it into the database, we need to write the following command:\', \'To create an object of model Song and save it into the database, we need to write the following command:\', \'The output is a QuerySet, or a set of objects that match the query. Notice that the name printed is the output of the __str__() function.\', \'We can also filter queries using the functions filter(), exclude() and get(). The filter() function returns a QuerySet having objects that match the given lookup parameters.\', \'The exclude() function returns a QuerySet having objects other than those matching the given lookup parameters.\', \'The get() function returns a single object which matches the given lookup parameter. It gives an error when the query returns multiple objects.\']','[]','[\'class Album(models.Model):    title = models.CharField(max_length = 30)    artist = models.CharField(max_length = 30)    genre = models.CharField(max_length = 30)      def __str__(self):        return self.title  class Song(models.Model):    name = models.CharField(max_length = 100)    album = models.ForeignKey(Album, on_delete = models.CASCADE)      def __str__(self):        return self.name\']','[\'python manage.py shell\', \'>>> from books.models import Song, Album\', \'>>> a = Album(title = \"Divide\", artist = \"Ed Sheeran\", genre = \"Pop\")\n>>> a.save()\', \'>>> s = Song(name = \"Castle on the Hill\", album = a)\n>>> s.save()\', \'>>> a = Album(title = \"Abbey Road\", artist = \"The Beatles\", genre = \"Rock\")\n>>> a.save()\n>>> a = Album(title = \"Revolver\", artist = \"The Beatles\", genre = \"Rock\")\n>>> a.save()\', \'>>> Album.objects.all()\n<QuerySet [<Album: Divide>, <Album: Abbey Road>, <Album: Revolver>]>\', \'>>> Album.objects.filter(artist = \"The Beatles\")\n<QuerySet [<Album: Abbey Road>, <Album: Revolver>]>\', \'>>> Album.objects.exclude(genre = \"Rock\")\n<QuerySet [<Album: Divide>]>\', \'>>> Album.objects.get(pk = 3)\n<QuerySet [<Album: Revolver>]>\', \'>>> a = Album.objects.get(pk = 3)\n>>> a.genre = \"Pop\"\n>>> a.save()\', \'>>> a = Album.objects.get(pk = 2)\n>>> a.delete()\n>>> Album.objects.all()\n<QuerySet [<Album: Divide>, <Album: Revolver>]>\', \'>>> Album.objects.filter(genre = \"Pop\").delete()\n>>> Album.objects.all()\n<QuerySet []>\']','[]','[]'),(139,'[\'Django Basic App Model – Makemigrations and Migrate\']','[]','[\'Makemigrations –\', \'Migrate –\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190925103952/Django-Basic-App-Model-Makemigrations-and-MigrateDjango-basic-app-structure-.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://docs.djangoproject.com/en/2.2/topics/db/models/\', \'https://www.geeksforgeeks.org/django-app-model-python-manage-py-makemigrations-command/\', \'http://sqlitebrowser.org/\', \'https://www.geeksforgeeks.org/django-manage-py-migrate-command-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'To create an app run command through terminal :\', \'and add geeks to INSTALLED_APPS list in settings.py. Now directory structure of the app will be,\', \'Now models.py will look like,\', \'Enter the following code into models.py\', \'After this command run following command to finally implement database changes accordingly\', \'Let’s understand clearly what Makemigrations and Migrate do.\']','[\'In this article, we will create a basic model of an app. Say, we have a project geeksforgeeks in which we will create a new app in order to simplify and make independent model units.\', \'Now go to models.py in geeks app, Here we will create our first model. To create a model you need to first import the Model from django.db.models library.\', \'According to Django documentation, A model is the single, definitive source of information about your data. It contains the essential fields and behaviours of the data you’re storing. Generally, each model maps to a single database table.\', \'Django provides a number of predefined fields and methods to create a Model. To create a model you need to specify a model name first.\', \'The similar syntax would always be used to create a model.After making any change in any of app’s models file you need to run following command from the terminal\', \'After you run makemigrations and migrate a new table would have been created in database. You can check it from geeks -> makemigrations -> 0001_initial.py.\', \'makemigrations basically generates the SQL commands for preinstalled apps (which can be viewed in installed apps in settings.py) and your newly created apps’ model which you add in installed apps. It does not execute those commands in your database file. So tables are not created after makemigrations.\', \'After applying makemigrations you can see those SQL commands with sqlmigrate which shows all the SQL commands which have been generated by makemigrations. To check more about makemigrations visit – Django App Model – Python manage.py makemigrations command\', \'migrate executes those SQL commands in the database file. So after executing migrate all the tables of your installed apps are created in your database file.\', \'You can confirm this by installing sqlite browser and opening db.sqlite3 you can see all the tables appears in the database file after executing migrate command. To check more about makemigrations visit Django manage.py migrate command | Python\']','[]','[\'# importing Model from djangofrom django.db.models import Model\', \'from django.db import modelsfrom django.db.models import Model# Created an empty model class GeeksModel(Model):    pass\', \"# Generated by Django 2.2.5 on 2019-09-25 06:00  from django.db import migrations, models    class Migration(migrations.Migration):    initial = True      dependencies = []      operations = [        migrations.CreateModel(            name =\'GeeksModel\',            fields =[                (\'id\', models.AutoField(auto_created = True,                  primary_key = True, serialize = False,                  verbose_name =\'ID\')),], ),    ]\"]','[\'python manage.py startapp geeks\', \'Python manage.py makemigrations\', \'Python manage.py migrate\']','[]','[]'),(140,'[\'Python JSON\']','[\'Python3\', \'Introduction\', \'Reading and Writing JSON\', \'Parsing JSON\', \'Serializing and Deserializing JSON\', \'Conversion between JSON\', \'More operations JSON\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20201125211352/PythonJSON.jpg\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/javascript-json/\', \'https://www.geeksforgeeks.org/json-data-types/\', \'https://www.geeksforgeeks.org/working-with-json-data-in-python/\', \'https://www.geeksforgeeks.org/read-write-and-parse-json-using-python/\', \'https://www.geeksforgeeks.org/reading-and-writing-json-to-a-file-in-python/\', \'https://www.geeksforgeeks.org/read-json-file-using-python/\', \'https://www.geeksforgeeks.org/append-to-json-file-using-python/\', \'https://www.geeksforgeeks.org/how-to-parse-data-from-json-into-python/\', \'https://www.geeksforgeeks.org/how-to-convert-python-dictionary-to-json/\', \'https://www.geeksforgeeks.org/python-convert-json-to-string/\', \'https://www.geeksforgeeks.org/python-ways-to-convert-string-to-json-object/\', \'https://www.geeksforgeeks.org/convert-json-data-into-a-custom-python-object/\', \'https://www.geeksforgeeks.org/serializing-json-data-in-python/\', \'https://www.geeksforgeeks.org/json-dump-in-python/\', \'https://www.geeksforgeeks.org/json-dumps-in-python/\', \'https://www.geeksforgeeks.org/python-difference-between-json-dump-and-json-dumps/\', \'https://www.geeksforgeeks.org/deserialize-json-to-object-in-python/\', \'https://www.geeksforgeeks.org/json-load-in-python/\', \'https://www.geeksforgeeks.org/json-loads-in-python/\', \'https://www.geeksforgeeks.org/python-difference-between-json-load-and-json-loads/\', \'https://www.geeksforgeeks.org/encoding-and-decoding-custom-objects-in-python-json/\', \'https://www.geeksforgeeks.org/serialize-and-deserialize-complex-json-in-python/\', \'https://www.geeksforgeeks.org/python-json-to-xml/\', \'https://www.geeksforgeeks.org/python-xml-to-json/\', \'https://www.geeksforgeeks.org/convert-csv-to-json-using-python/\', \'https://www.geeksforgeeks.org/convert-multiple-json-files-to-csv-python/\', \'https://www.geeksforgeeks.org/convert-text-file-to-json-in-python/\', \'https://www.geeksforgeeks.org/saving-text-json-and-csv-to-a-file-in-python/\', \'https://www.geeksforgeeks.org/json-formatting-python/\', \'https://www.geeksforgeeks.org/pretty-print-json-in-python/\', \'https://www.geeksforgeeks.org/flattening-json-objects-in-python/\', \'https://www.geeksforgeeks.org/python-check-whether-a-string-is-valid-json-or-not/\', \'https://www.geeksforgeeks.org/python-sort-json-by-value/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'This JSON Tutorial will help you learn the working of JSON with Python from basics to advance, like parsing JSON, reading and writing to JSON file, serializing and deserializing JSON using a huge set of JSON programs.\']','[\'JSON JavaScript Object Notation is a format for structuring data. It is mainly used for storing and transferring data between the browser and the server. Python too supports JSON with a built-in package called json. This package provides all the necessary tools for working with JSON Objects including parsing, serializing, deserializing, and many more. Let’s see a simple example where we convert the JSON objects to Python objects and vice-versa.\']','[\'import json  # JSON stringemployee = \'{\"id\":\"09\", \"name\": \"Nitin\", \"department\":\"Finance\"}\'  # Convert string to Python dictemployee_dict = json.loads(employee)print(employee_dict)print(type(employee_dict))print(\"\\n\")  # Convert Python dict to JSONjson_object = json.dumps(employee_dict, indent=4)print(json_object)print(type(json_object))\']','[\'{\'id\': \'09\', \'name\': \'Nitin\', \'department\': \'Finance\'}\n<class \'dict\'>\n\n\n{\n    \"id\": \"09\",\n    \"name\": \"Nitin\",\n    \"department\": \"Finance\"\n}\n<class \'str\'>\']','[]','[\'What is JSON?|||Data types in JSON|||Working With JSON Data in Python|||Read, Write and Parse JSON using Python&&&Reading and Writing JSON to a File in Python|||Read JSON file using Python|||Append to JSON file using Python&&&How to Parse Data From JSON into Python?|||How To Convert Python Dictionary To JSON?|||Python – Convert JSON to string|||Ways to convert string to json object|||Convert JSON data Into a Custom Python Object&&&Serializing JSON in Python|||json.dump() in Python|||json.dumps() in Python|||Python – Difference between json.dump() and json.dumps()|||Deserialize JSON to Object in Python|||json.load() in Python|||json.loads() in Python|||Difference Between json.load() and json.loads()|||Encoding and Decoding Custom Objects in Python-JSON|||Serialize and Deserialize complex JSON in Python&&&Python – JSON to XML|||Python – XML to JSON|||Convert CSV to JSON using Python|||Convert multiple JSON files to CSV Python|||Convert Text file to JSON in Python|||Saving Text, JSON, and CSV to a File in Python&&&JSON Formatting in Python|||Pretty Print JSON in Python|||Flattening JSON objects in Python|||Check whether a string is valid json or not|||Sort JSON by value\']'),(141,'[\'Working With JSON Data in Python\']','[\'Python3\', \'Python3\', \'Serializing JSON :xa0\', \'Python3\', \'Python3\', \'Deserializing JSON :xa0\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[\'Serialization Example :xa0\', \'Deserialization Example :xa0\', \'Encoding and Decoding :xa0\', \'Command-Line Usage\', \'Searching through JSON with JMESPath\', \'Real-World Example :xa0\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210401115631/gfgdel.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210401120539/gfgdel.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/context-manager-in-python/\', \'https://jsonplaceholder.typicode.com/\', \'https://jsonplaceholder.typicode.com\', \'https://docs.python.org/3/library/json.html\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Introduction of JSON in Python :xa0\', \'Consider the given example of a Python object.\', \'Using Python’s context manager, create a file named Sample.json and open it with write mode.xa0\', \'For Windows:xa0\', \'For Ubuntu:\', \'Syntax: xa0demjson.encode(self, obj, nest_level=0)xa0\', \'Example 1: Encoding using demjson package.xa0\', \'Decoding: The decode() function is used to convert the JSON object into python-format type.xa0\', \'Syntaxxa0: demjson.decode(self, obj)\', \'Example 2: Decoding using demjson packagexa0\', \'Example 3: Encoding using iterencode packagexa0xa0\', \'Example 4: Encoding and Decoding using dumps() and loads().\', \'The JSON library can also be used from the command-line, to validate and pretty-print your JSON.\', \'First, install jmespath :xa0\', \'To know more, Click Here\']','[\'As you can see, JSON supports primitive types, like strings and numbers, as well as nested lists, tuples, and objectsxa0xa0\', \'Here, the dump() takes two arguments first, the data object to be serialized, and second the object to which it will be written(Byte format).xa0\', \'Deserialization is the opposite of Serialization, i.e. conversion of JSON objects into their respective Python objects. The load() method is used for it. If you have used JSON data from another program or obtained it as a string format of JSON, then it can easily be deserialized with load(), which is usually used to load from string, otherwise, the root object is in a list or dict.xa0\', \'Encoding : The encode() function is used to convert the python object into a JSON string representation.xa0\', \'JMESPath is a query language for JSON. It allows you to easily obtain the data you need from a JSON document. If you ever worked with JSON before, you probably know that it’s easy to get a nested value. For example, doc[“person”][“age”] will get you the nested value for age in a document.\', \'Let us take a real-life example of the implementation of the JSON in python. A good source for practice purposes is JSON_placeholder, it provides a great API requests package which we will be using in our example. To get started, follow these simple steps. Open Python IDE or CLI and create a new script file, name it sample.py.xa0\']','[\'The full form of JSON is JavaScript Object Notation. It means that a script (executable) file which is made of text in a programming language, is used to store and transfer the data. Python supports JSON through a built-in package called JSON. To use this feature, we import the JSON package in Python script. The text in JSON is done through quoted-string which contains the value in key-value mapping within { }. It is similar to the dictionary in Python. JSON shows an API similar to users of Standard Library marshal and pickle modules and Python natively supports JSON features. For Examplexa0xa0\', \'The process of encoding JSON is usually called serialization. This term refers to the transformation of data into a series of bytes (hence serial) to be stored or transmitted across a network. To handle the data flow in a file, the JSON library in Python uses dump() function to convert the Python objects into their respective JSON object, so it makes easy to write data to files. See the following table given below.xa0xa0\', \'Encoding is defined as converting the text or values into an encrypted form that can only be used by the desired user through decoding it. Here encoding and decoding is done for JSON (object)format. Encoding is also known as Serialization and Decoding is known as Deserialization. Python has a popular package for this operation. This package is known as Demjson. To install it follow the steps below.xa0\']','[\'# Python program showing# use of json package import json # {key:value mapping}a ={\"name\":\"John\",   \"age\":31,    \"Salary\":25000} # conversion to JSON done by dumps() function b = json.dumps(a) # printing the outputprint(b)\', \'# Python program showing that# json support different primitive# types import json # list conversion to Arrayprint(json.dumps([\'Welcome\', \"to\", \"GeeksforGeeks\"])) # tuple conversion to Arrayprint(json.dumps((\"Welcome\", \"to\", \"GeeksforGeeks\"))) # string conversion to Stringprint(json.dumps(\"Hi\")) # int conversion to Numberprint(json.dumps(123)) # float conversion to Numberprint(json.dumps(23.572)) # Boolean conversion to their respective valuesprint(json.dumps(True))print(json.dumps(False)) # None value to nullprint(json.dumps(None))\', \'var = {      \"Subjects\": {                  \"Maths\":85,                  \"Physics\":90                   }      }\', \'with open(\"Sample.json\", \"w\") as p:     json.dump(var, p)\', \'with open(\"Sample.json\", \"r\") as read_it:     data = json.load(read_it)\', \'json_var =\"\"\"{    \"Country\": {        \"name\": \"INDIA\",        \"Languages_spoken\": [            {                \"names\": [\"Hindi\", \"English\", \"Bengali\", \"Telugu\"]            }        ]    }}\"\"\"var = json.loads(json_var)\', \'# storing marks of 3 subjectsvar = [{\"Math\": 50, \"physics\":60, \"Chemistry\":70}]print(demjson.encode(var))\', \'var = \'{\"a\":0, \"b\":1, \"c\":2, \"d\":3, \"e\":4}\'text = demjson.decode(var)\', \'# Other Method of Encodingjson.JSONEncoder().encode({\"foo\": [\"bar\"]})\'{\"foo\": [\"bar\"]}\' # Using iterencode(object) to encode a given object.for i in json.JSONEncoder().iterencode(bigobject):    mysocket.write(i)\', \'# To encode and decode operationsimport jsonvar = {\'age\':31, \'height\'= 6}x = json.dumps(var)y = json.loads(var)print(x)print(y) # when performing from a file in diskwith open(\"any_file.json\", \"r\") as readit:    x = json.load(readit)print(x)\', \'import requestsimport json # Now we have to request our JSON data through# the API packageres = requests.get(\"https://jsonplaceholder.typicode.com / todos\")var = json.loads(res.text) # To view your Json data, type var and hit entervar # Now our Goal is to find the User who have# maximum completed their task !!# i.e we would count the True value of a# User in completed key.# {    # \"userId\": 1,    # \"id\": 1,    # \"title\": \"Hey\",    # \"completed\": false,  # we will count                           # this for a user.# } # Note that there are multiple users with# unique id, and their task have respective# Boolean Values. def find(todo):    check = todo[\"completed\"]    max_var = todo[\"userId\"] in users    return check and max_var # To find the values. Value = list(filter(find, todos)) # To write these value to your disk with open(\"sample.json\", \"w\") as data:    Value = list(filter(keep, todos))    json.dump(Value, data, indent = 2)\']','[\'{\"age\": 31, \"Salary\": 25000, \"name\": \"John\"}\', \'[\"Welcome\", \"to\", \"GeeksforGeeks\"]\n[\"Welcome\", \"to\", \"GeeksforGeeks\"]\n\"Hi\"\n123\n23.572\ntrue\nfalse\nnull\', \'pip install demjson\', \'sudo apt-get update\n sudo apt-get install python-demjson\', \'[{\"Chemistry\":70, \"Math\":50, \"physics\":60}]\', \"{\'a\': 0, \'b\': 1, \'c\': 2, \'d\': 3, \'e\': 4}\", \'$ echo \"{ \\\"name\\\": \\\"Monty\\\", \\\"age\\\": 45 }\"\', \'$ pip3 install jmespath\']','[]','[]'),(142,'[\'Read, Write and Parse JSON using Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191227135952/pyhton-append-json1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191227140208/python-read-json-output1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20191227150249/python-json-write-to-file.png\']','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/javascript-json/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The syntax of JSON is considered as a subset of the syntax of JavaScript including the following:\', \'Keys/Name must be strings with double quotes and values must be data types amongst the following:xa0xa0\', \'json.loads() method can parse a json string and the result will be a Python dictionary.Syntax:\', \'Example: Let’s suppose the JSON looks like this.\', \'We want to read the content of this file. Below is the implementation.\', \'json.dumps() method can convert a Python object into a JSON string.xa0Syntax:\', \'It takes two parameters:\', \'The following types of Python objects can be converted into JSON strings:xa0xa0\', \'Python objects and their equivalent conversion to JSON:\', \'json.dump() method can be used for writing to JSON file.Syntax:\', \'It takes 2 parameters:\']','[\'JSON is a lightweight data format for data interchange which can be easily read and written by humans, easily parsed and generated by machines. It is a complete language-independent text format. To work with JSON data, Python has a built-in package called json.xa0\', \'json.load() method can read a file which contains a JSON object. Consider a file named employee.json which contains a JSON object.Syntax:\', \'Here, we have used the open() function to read the JSON file. Then, the file is parsed using json.load() method which gives us a dictionary named data.\', \'The above program opens a file named sample.json in writing mode using ‘w’. The file will be created if it does not exist. Json.dump() will transform dictionary to a JSON string and it will be saved in the file sample.json.\']','[]','[\'# Python program to convert JSON to Python    import json  # JSON stringemployee =\'{\"id\":\"09\", \"name\": \"Nitin\", \"department\":\"Finance\"}\'  # Convert string to Python dictemployee_dict = json.loads(employee)print(employee_dict)  print(employee_dict[\'name\'])\', \"# Python program to read# json file      import json   # Opening JSON filef = open(\'data.json\',)   # returns JSON object as # a dictionarydata = json.load(f)   # Iterating through the json# listfor i in data[\'emp_details\']:    print(i)   # Closing filef.close()\", \'# Python program to convert# Python to JSON      import json   # Data to be writtendictionary ={  \"id\": \"04\",  \"name\": \"sunil\",  \"department\": \"HR\"}   # Serializing json json_object = json.dumps(dictionary, indent = 4)print(json_object)\', \'# Python program to write JSON# to a file      import json   # Data to be writtendictionary ={    \"name\" : \"sathiyajith\",    \"rollno\" : 56,    \"cgpa\" : 8.6,    \"phonenumber\" : \"9976770500\"}   with open(\"sample.json\", \"w\") as outfile:    json.dump(dictionary, outfile)\']','[\'Example:\ns = \'{\"id\":01, \"name\": \"Emily\", \"language\": [\"C++\", \"Python\"]}\'\', \'Example:\n {\n   \"employee\": [\n\n      {\n         \"id\": \"01\",\n         \"name\": \"Amit\",\n         \"department\": \"Sales\"\n      },\n\n      {\n         \"id\": \"04\",\n         \"name\": \"sunil\",\n         \"department\": \"HR\"\n      }\n   ]\n}\', \'json.loads(json_string)\', \"{\'id\': \'09\', \'department\': \'Finance\', \'name\': \'Nitin\'}\nNitin\", \'json.load(file_object)\', \'json.dumps(dict, indent)\', \'{\n    \"id\": \"04\",\n    \"name\": \"sunil\",\n    \"department\": \"HR\"\n}\', \'{\n    \"depatment\": \"HR\",\n    \"id\": \"04\",\n    \"name\": \"sunil\"\n}\', \'json.dump(dict, file_pointer)\']','[\'dict|||object&&&list, tuple|||array&&&str|||string&&&int, float|||number&&&True|||true&&&False|||false&&&None|||null\']','[\"Name/Value pairs: Represents Data, name is followed by ‘:\'(colon) and the Name/Value pairs separated by, (comma).|||Curly braces: Holds objects.|||Square brackets: Hold arrays with values separated by, (comma).&&&String|||Number|||Object (JSON object)|||array|||Boolean|||Null&&&dictionary – name of dictionary which should be converted to JSON object.|||indent – defines the number of units for indentation&&&dict|||list|||tuple|||string|||int|||float|||True|||False|||None&&&dictionary – name of dictionary which should be converted to JSON object.|||file pointer – pointer of the file opened in write or append mode.\"]'),(143,'[\'Append to JSON file using Python\']','[\'Python3\', \'Python3\']','[\'Functions Used:xa0xa0\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191217133500/python-json-to-csv1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Example 1: Updating a JSON string.xa0xa0\', \'{“pin”: 110096, “organization”: “GeeksForGeeks”, “country”: “India”, “city”: “Noida”}xa0xa0\', \'Example 2: Updating a JSON file. Suppose the JSON file looks like this.xa0\', \'We want to add another JSON data after emp_details. Below is the implementation.\']','[\'Syntax: json.loads(json_string)Parameter: It takes JSON string as the parameter.Return type: It returns the python dictionary object.xa0xa0\', \'Syntax: json.dumps(object)Parameter: It takes Python Object as the parameter.Return type: It returns the JSON string.xa0xa0\', \'Syntax: dict.update([other])Parameters: Takes another dictionary or an iterable key/value pair.Return type: Returns None.xa0xa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'The full form of JSON is JavaScript Object Notation. It means that a script (executable) file which is made of text in a programming language, is used to store and transfer the data. Python supports JSON through a built-in package called JSON. To use this feature, we import the JSON package in Python script. The text in JSON is done through quoted-string which contains the value in key-value mapping within { }.xa0xa0\']','[\'# Python program to update# JSON  import json  # JSON data:x =  \'{ \"organization\":\"GeeksForGeeks\",        \"city\":\"Noida\",        \"country\":\"India\"}\' # python object to be appendedy = {\"pin\":110096} # parsing JSON string:z = json.loads(x)  # appending the dataz.update(y) # the result is a JSON string:print(json.dumps(z))\', \'# Python program to update# JSON  import json  # function to add to JSONdef write_json(new_data, filename=\'data.json\'):    with open(filename,\'r+\') as file:          # First we load existing data into a dict.        file_data = json.load(file)        # Join new_data with file_data inside emp_details        file_data[\"emp_details\"].append(new_data)        # Sets file\'s current position at offset.        file.seek(0)        # convert back to json.        json.dump(file_data, file, indent = 4)     # python object to be appendedy = {\"emp_name\":\"Nikhil\",     \"email\": \"nikhil@geeksforgeeks.org\",     \"job_profile\": \"Full Time\"    }     write_json(y)\']','[]','[]','[\'json.loads(): json.loads() function is present in python built-in ‘json’ module. This function is used to parse the JSON string.&&&json.dumps(): json.dumps() function is present in python built-in ‘json’ module. This function is used to convert Python object into JSON string.&&&update(): This method updates the dictionary with elements from another dictionary object or from an iterable key/value pair.\']'),(144,'[\'Serializing JSON data in Python\']','[\'json.dump()\', \'Python3\', \'json.dumps()\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20201125193115/Capture-660x274.PNG\', \'https://media.geeksforgeeks.org/wp-content/uploads/20201125190923/Capture1.PNG\', \'https://media.geeksforgeeks.org/wp-content/uploads/20201125191430/Capture-660x37.PNG\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/json-dump-in-python/\', \'https://www.geeksforgeeks.org/json-dumps-in-python/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Let’s take a look at how we serialize Python data to JSON format with these methods:\', \'Syntax: json.dump(dict, file_pointer)\', \'Parameters:\', \'Below is the implementation:\', \'Converting python object and writing into json file.\', \'data_file.json\', \'json.dumps() method can convert a Python object into a JSON string.\', \'Syntax: json.dumps(dict)\', \'Parameters:\', \'Below is the implementation:\', \'Converting python object into json string.\']','[\'Serialization is the process of encoding the from naive datat type to JSON format. The Python module json converts a Python dictionary object into JSON object, and list and tuple are converted into JSON array, and int and float converted as JSON number, None converted as JSON null.xa0\', \'json.dump() method can be used for writing to JSON file. Write data to a file-like object in json format.\']','[]','[\'# import moduleimport json  # Data to be writtendata = {    \"user\": {        \"name\": \"satyam kumar\",        \"age\": 21,        \"Place\": \"Patna\",        \"Blood group\": \"O+\"    }}  # Serializing json and # Writing json filewith open( \"datafile.json\" , \"w\" ) as write:    json.dump( data , write )\', \'# import moduleimport json  # Data to be written data = {    \"user\": {        \"name\": \"satyam kumar\",        \"age\": 21,        \"Place\": \"Patna\",        \"Blood group\": \"O+\"    }}  # Serializing jsonres = json.dumps( data )print( res )\']','[]','[]','[\'Dump().|||Dumps().&&&dictionary – name of dictionary which should be converted to JSON object.|||file pointer – pointer of the file opened in write or append mode.&&&dictionary – name of dictionary which should be converted to JSON object.\']'),(145,'[\'Deserialize JSON to Object in Python\']','[\'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200721141328/json_file.png\']','[]','[\'https://www.geeksforgeeks.org/json-loads-in-python/\', \'https://www.geeksforgeeks.org/json-load-in-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1 : Using the loads() function.xa0xa0\', \'Output :xa0xa0\', \'Example 2 : Using the load() function. We have to deserialize a file named file.json.xa0xa0\', \'Output :xa0xa0\']','[\'Let us see how to deserialize a JSON document into a Python object. Deserialization is the process of decoding the data that is in JSON format into native data type. In Python, deserialization decodes JSON data into a dictionary(data type in python).We will be using these methods of the json module to perform this task :xa0xa0\']','[]','[\'# importing the moduleimport json # creating the JSON data as a stringdata = \'{\"Name\" : \"Romy\", \"Gender\" : \"Female\"}\' print(\"Datatype before deserialization : \"      + str(type(data)))  # deserializing the datadata = json.loads(data) print(\"Datatype after deserialization : \"      + str(type(data)))\', \'# importing the moduleimport json # opening the JSON filedata = open(\'file.json\',) print(\"Datatype before deserialization : \"      + str(type(data)))    # deserializing the datadata = json.load(data) print(\"Datatype after deserialization : \"      + str(type(data)))\']','[\'Datatype before deserialization : \nDatatype after deserialization :\', \'Datatype before deserialization : \nDatatype after deserialization :\']','[]','[\'loads() : to deserialize a JSON document to a Python object.|||load() : to deserialize a JSON formatted stream ( which supports reading from a file) to a Python object.\']'),(146,'[\'Working with csv files in Python\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20210722192432/csv1.png\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20210722192533/csv2.png\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20210722192614/csv3.png\']','[\'https://www.youtube.com/embed/9DzfTARXJE0?feature=oembed\']','[\'https://www.geeksforgeeks.org/medium/\', \'https://docs.python.org/2/library/csv.html\', \'http://www.sharecsv.com/s/04a9c977e80226a7632fc2c0ba178081/aapl.csv\', \'https://practice.geeksforgeeks.org/courses?utm_source=practice&utm_medium=practice-page&utm_campaign=gfg-main&utm_term=gfg-main\']','[\'This article explains how to load and parse a CSV file in Python.\', \'For working CSV files in python, there is an inbuilt module called csv.\', \'Reading a CSV file\', \'The output of above program looks like this:\', \'Let us try to understand this piece of code.\', \'Writing to a CSV file\', \'Let us try to understand the above code in pieces.\', \'Now we use writerow method to write the first row which is nothing but the field names.\', \'We use writerows method to write multiple rows at once.\', \'Writing a dictionary to a CSV file\', \'In this example, we write a dictionary mydict to a CSV file.\', \'writeheader method simply writes the first row of your csv file using the pre-specified fieldnames.\', \'writerows method simply writes all the rows but in each row, it writes only the values(not keys).\', \'So, in the end, our CSV file looks like this:\', \'Important Points:\', \'Now, while defining a csv.reader or csv.writer object, we can specify the dialect likethis:\']','[\'The above example uses a CSV file aapl.csv which can be downloaded from here.Run this program with the aapl.csv file in same directory.\', \'Here, we first open the CSV file in READ mode. The file object is named as csvfile. The file object is converted to csv.reader object. We save the csv.reader object as csvreader.\', \'csvreader is an iterable object. Hence, .next() method returns the current row and advances the iterator to the next row. Since the first row of our csv file contains the headers (or field names), we save them in a list called fields.\', \'Now, we iterate through remaining rows using a for loop. Each row is appended to a list called rows. If you try to print each row, one can find that row is nothing but a list containing all the field values.\', \'csvreader.line_num is nothing but a counter which returns the number of rows which have been iterated.\', \'Here, we first open the CSV file in WRITE mode. The file object is named as csvfile. The file object is converted to csv.writer object. We save the csv.writer object as csvwriter.\', \'Here, the file object (csvfile) is converted to a DictWriter object.Here, we specify the fieldnames as an argument.\', \'We notice that the delimiter is not a comma but a semi-colon. Also, the rows are separated by two newlines instead of one. In such cases, we can specify the delimiter and line terminator as follows:\', \'So, this was a brief, yet concise discussion on how to load and parse CSV files in a python program.This blog is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[\'First of all, what is a CSV ?CSV (Comma Separated Values) is a simple file format used to store tabular data, such as a spreadsheet or database. A CSV file stores tabular data (numbers and text) in plain text. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. The use of the comma as a field separator is the source of the name for this file format.\']','[\'# importing csv moduleimport csv  # csv file namefilename = \"aapl.csv\"  # initializing the titles and rows listfields = []rows = []  # reading csv filewith open(filename, \'r\') as csvfile:    # creating a csv reader object    csvreader = csv.reader(csvfile)          # extracting field names through first row    fields = next(csvreader)      # extracting each data row one by one    for row in csvreader:        rows.append(row)      # get total number of rows    print(\"Total no. of rows: %d\"%(csvreader.line_num))  # printing the field namesprint(\'Field names are:\' + \', \'.join(field for field in fields))  #  printing first 5 rowsprint(\'\\nFirst 5 rows are:\\n\')for row in rows[:5]:    # parsing each column of a row    for col in row:        print(\"%10s\"%col),    print(\'\\n\')\', \'# importing the csv moduleimport csv  # field namesfields = [\'Name\', \'Branch\', \'Year\', \'CGPA\']  # data rows of csv filerows = [ [\'Nikhil\', \'COE\', \'2\', \'9.0\'],         [\'Sanchit\', \'COE\', \'2\', \'9.1\'],         [\'Aditya\', \'IT\', \'2\', \'9.3\'],         [\'Sagar\', \'SE\', \'1\', \'9.5\'],         [\'Prateek\', \'MCE\', \'3\', \'7.8\'],         [\'Sahil\', \'EP\', \'2\', \'9.1\']]  # name of csv filefilename = \"university_records.csv\"  # writing to csv filewith open(filename, \'w\') as csvfile:    # creating a csv writer object    csvwriter = csv.writer(csvfile)          # writing the fields    csvwriter.writerow(fields)          # writing the data rows    csvwriter.writerows(rows)\', \'# importing the csv moduleimport csv  # my data rows as dictionary objectsmydict =[{\'branch\': \'COE\', \'cgpa\': \'9.0\', \'name\': \'Nikhil\', \'year\': \'2\'},         {\'branch\': \'COE\', \'cgpa\': \'9.1\', \'name\': \'Sanchit\', \'year\': \'2\'},         {\'branch\': \'IT\', \'cgpa\': \'9.3\', \'name\': \'Aditya\', \'year\': \'2\'},         {\'branch\': \'SE\', \'cgpa\': \'9.5\', \'name\': \'Sagar\', \'year\': \'1\'},         {\'branch\': \'MCE\', \'cgpa\': \'7.8\', \'name\': \'Prateek\', \'year\': \'3\'},         {\'branch\': \'EP\', \'cgpa\': \'9.1\', \'name\': \'Sahil\', \'year\': \'2\'}]  # field namesfields = [\'name\', \'branch\', \'year\', \'cgpa\']  # name of csv filefilename = \"university_records.csv\"  # writing to csv filewith open(filename, \'w\') as csvfile:    # creating a csv dict writer object    writer = csv.DictWriter(csvfile, fieldnames = fields)          # writing headers (field names)    writer.writeheader()          # writing data rows    writer.writerows(mydict)\']','[\"with open(filename, \'r\') as csvfile:\n    csvreader = csv.reader(csvfile)\", \'fields = csvreader.next()\', \'for row in csvreader:\n        rows.append(row)\', \'print(\"Total no. of rows: %d\"%(csvreader.line_num))\', \"with open(filename, \'w\') as csvfile:\n    csvwriter = csv.writer(csvfile)\", \'csvwriter.writerow(fields)\', \'csvwriter.writerows(rows)\', \"with open(filename, \'w\') as csvfile:\n    writer = csv.DictWriter(csvfile, fieldnames = fields)\", \'writer.writeheader()\', \'writer.writerows(mydict)\', \'csv.register_dialect(\n    \'mydialect\',\n    delimiter = \',\',\n    quotechar = \'\"\',\n    doublequote = True,\n    skipinitialspace = True,\n    lineterminator = \'\\r\\n\',\n    quoting = csv.QUOTE_MINIMAL)\', \"csvreader = csv.reader(csvfile, dialect=\'mydialect\')\", \"csvreader = csv.reader(csvfile, delimiter = \';\', lineterminator = \'\\n\\n\')\"]','[]','[\'with open(filename, \'r\') as csvfile:\n    csvreader = csv.reader(csvfile)Here, we first open the CSV file in READ mode. The file object is named as csvfile. The file object is converted to csv.reader object. We save the csv.reader object as csvreader.|||fields = csvreader.next()csvreader is an iterable object. Hence, .next() method returns the current row and advances the iterator to the next row. Since the first row of our csv file contains the headers (or field names), we save them in a list called fields.|||for row in csvreader:\n        rows.append(row)Now, we iterate through remaining rows using a for loop. Each row is appended to a list called rows. If you try to print each row, one can find that row is nothing but a list containing all the field values.|||print(\"Total no. of rows: %d\"%(csvreader.line_num))csvreader.line_num is nothing but a counter which returns the number of rows which have been iterated.&&&fields and rows have been already defined. fields is a list containing all the field names. rows is a list of lists. Each row is a list containing the field values of that row.|||with open(filename, \'w\') as csvfile:\n    csvwriter = csv.writer(csvfile)Here, we first open the CSV file in WRITE mode. The file object is named as csvfile. The file object is converted to csv.writer object. We save the csv.writer object as csvwriter.|||csvwriter.writerow(fields)Now we use writerow method to write the first row which is nothing but the field names.||| csvwriter.writerows(rows)We use writerows method to write multiple rows at once.&&&with open(filename, \'w\') as csvfile:\n    writer = csv.DictWriter(csvfile, fieldnames = fields)Here, the file object (csvfile) is converted to a DictWriter object.Here, we specify the fieldnames as an argument.||| writer.writeheader()writeheader method simply writes the first row of your csv file using the pre-specified fieldnames.|||writer.writerows(mydict)writerows method simply writes all the rows but in each row, it writes only the values(not keys).&&&In csv modules, an optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV format.By default, csv module uses excel dialect which makes them compatible with excel spreadsheets. You can define your own dialect using register_dialect method.Here is an example:&&&Now, consider that a CSV file looks like this in plain-text:We notice that the delimiter is not a comma but a semi-colon. Also, the rows are separated by two newlines instead of one. In such cases, we can specify the delimiter and line terminator as follows:csvreader = csv.reader(csvfile, delimiter = \';\', lineterminator = \'\\n\\n\')\']'),(147,'[\'Reading CSV files in Python\']','[\'Reading a CSV File\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191213022527/Giants.csv-File-Format-1024x324.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-read-csv-using-pandas-read_csv/\', \'https://www.geeksforgeeks.org/python-read-csv-using-pandas-read_csv/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'There are various ways to read a CSV file that uses either the CSV module or the pandas library.xa0\', \'Reading a CSV File Format in Python:Consider the below CSV file named ‘Giants.CSV’:xa0\']','[\'In the above program reader() method is used to read the Giants.csv file which maps the data into lists.\', \'OrderedDict([(‘Organization’, ‘Alphabet’), (‘CEO’, ‘Sundar Pichai’), (‘Established’, ’02-Oct-15′)])xa0OrderedDict([(‘Organization’, ‘Microsoft’), (‘CEO’, ‘Satya Nadella’), (‘Established’, ’04-Apr-75′)])xa0OrderedDict([(‘Organization’, ‘Amazon’), (‘CEO’, ‘Jeff Bezos’), (‘Established’, ’05-Jul-94′)])\', \'In the above program, the csv_read() method of pandas library reads the Giants.csv file and maps its data into a 2D list.xa0Note: To know more about pandas.csv_read() click here.\']','[\'A CSV (Comma Separated Values) filexa0is a form of plain text document which uses a particular format to organize tabular information. CSV file format is a bounded text document that uses a comma to distinguish the values. Every row in the document is a data log. Each log is composed of one or more fields, divided by commas. It is the most popular file format for importing and exporting spreadsheets and databases.xa0\']','[\"import csv # opening the CSV filewith open(\'Giants.csv\', mode =\'r\')as file:     # reading the CSV file  csvFile = csv.reader(file)   # displaying the contents of the CSV file  for lines in csvFile:        print(lines)\", \"import csv # opening the CSV filewith open(\'Giants.csv\', mode =\'r\') as file:                  # reading the CSV file       csvFile = csv.DictReader(file)        # displaying the contents of the CSV file       for lines in csvFile:            print(lines)\", \"import pandas # reading the CSV filecsvFile = pandas.read_csv(\'Giants.csv\') # displaying the contents of the CSV fileprint(csvFile)\"]','[\"[\'Organization\', \'CEO\', \'Established\']\n[\'Alphabet\', \'Sundar Pichai\', \'02-Oct-15\']\n[\'Microsoft\', \'Satya Nadella\', \'04-Apr-75\']\n[\'Amazon\', \'Jeff Bezos\', \'05-Jul-94\']\", \'Organization            CEO Established\n0   Alphabet  Sundar Pichai   02-Oct-15\n1   Microsoft  Satya Nadella   04-Apr-75\n2   Amazon     Jeff Bezos   05-Jul-94\']','[]','[\'csv Module: The CSV module is one of the modules in Python which provides classes for reading and writing tabular information in CSV file format.|||pandas Library: The pandas library is one of the open-source Python libraries that provide high-performance, convenient data structures and data analysis tools and techniques for Python programming.&&&USing csv.reader(): At first, the CSV file is opened using the open() method in ‘r’ mode(specifies read mode while opening a file) which returns the file object then it is read by using the reader() method of CSV module that returns the reader object that iterates throughout the lines in the specified CSV document.Note: The ‘with’ keyword is used along with the open() method as it simplifies exception handling and automatically closes the CSV file.&&&Using csv.DictReader() class: It is similar to the previous method, the CSV file is first opened using the open() method then it is read by using the DictReader class of csv module which works like a regular reader but maps the information in the CSV file intoa dictionary. The very first line of the file consists of dictionary keys.&&&Using pandas.read_csv() method: It is very easy and simple to read a CSV file using pandas library functions. Here read_csv() method of pandas library is used to read data from CSV files.\']'),(148,'[\'Writing CSV files in Python\']','[\'Using csv.writer class\', \'Using csv.DictWriter class\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191219182206/python-write-to-csv-1.png\']','[]','[\'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Syntax: csv.writer(csvfile, dialect=’excel’, **fmtparams)\', \'csv.writer class provides two methods for writing to CSV. They are writerow() and writerows().\', \'This class returns a writer object which maps dictionaries onto output rows.\', \'csv.DictWriter provides two methods for writing to CSV. They are:\']','[\'CSV (Comma Separated Values) is a simple file format used to store tabular data, such as a spreadsheet or database. CSV file stores tabular data (numbers and text) in plain text. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. The use of the comma as a field separator is the source of the name for this file format.\', \'Python provides an in-built module called csv to work with CSV files. There are various classes provided by this module for writing to CSV:\', \"csv.writer class is used to insert data to the CSV file. This class returns a writer object which is responsible for converting the user’s data into a delimited string. A csvfile object should be opened with newline=\'\' otherwise newline characters inside the quoted fields will not be interpreted correctly.\", \'Parameters:csvfile: A file object with write() method.dialect (optional): Name of the dialect to be used.fmtparams (optional): Formatting parameters that will overwrite those specified in the dialect.\', \'Syntax: csv.DictWriter(csvfile, fieldnames, restval=”, extrasaction=’raise’, dialect=’excel’, *args, **kwds)\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Parameters:csvfile: A file object with write() method.fieldnames: A sequence of keys that identify the order in which values in the dictionary should be passed.restval (optional): Specifies the value to be written if the dictionary is missing a key in fieldnames.extrasaction (optional): If a key not found in fieldnames, the optional extrasaction parameter indicates what action to take. If it is set to raise a ValueError will be raised.dialect (optional): Name of the dialect to be used.\']','[\'# Python program to demonstrate# writing to CSV    import csv     # field names fields = [\'Name\', \'Branch\', \'Year\', \'CGPA\']     # data rows of csv file rows = [ [\'Nikhil\', \'COE\', \'2\', \'9.0\'],          [\'Sanchit\', \'COE\', \'2\', \'9.1\'],          [\'Aditya\', \'IT\', \'2\', \'9.3\'],          [\'Sagar\', \'SE\', \'1\', \'9.5\'],          [\'Prateek\', \'MCE\', \'3\', \'7.8\'],          [\'Sahil\', \'EP\', \'2\', \'9.1\']]     # name of csv file filename = \"university_records.csv\"    # writing to csv file with open(filename, \'w\') as csvfile:     # creating a csv writer object     csvwriter = csv.writer(csvfile)             # writing the fields     csvwriter.writerow(fields)             # writing the data rows     csvwriter.writerows(rows)\', \'# importing the csv module import csv     # my data rows as dictionary objects mydict =[{\'branch\': \'COE\', \'cgpa\': \'9.0\', \'name\': \'Nikhil\', \'year\': \'2\'},          {\'branch\': \'COE\', \'cgpa\': \'9.1\', \'name\': \'Sanchit\', \'year\': \'2\'},          {\'branch\': \'IT\', \'cgpa\': \'9.3\', \'name\': \'Aditya\', \'year\': \'2\'},          {\'branch\': \'SE\', \'cgpa\': \'9.5\', \'name\': \'Sagar\', \'year\': \'1\'},          {\'branch\': \'MCE\', \'cgpa\': \'7.8\', \'name\': \'Prateek\', \'year\': \'3\'},          {\'branch\': \'EP\', \'cgpa\': \'9.1\', \'name\': \'Sahil\', \'year\': \'2\'}]     # field names fields = [\'name\', \'branch\', \'year\', \'cgpa\']     # name of csv file filename = \"university_records.csv\"    # writing to csv file with open(filename, \'w\') as csvfile:     # creating a csv dict writer object     writer = csv.DictWriter(csvfile, fieldnames = fields)             # writing headers (field names)     writer.writeheader()             # writing data rows     writer.writerows(mydict)\']','[\'writerow(fields)\', \'Writing CSV files in Python\nwriterows(rows)\', \'writeheader()\', \'writerows(mydict)\']','[]','[\'Using csv.writer class|||Using csv.DictWriter class&&&writerow(): This method writes a single row at a time. Field row can be written using this method.Syntax:writerow(fields)\n|||writerows(): This method is used to write multiple rows at a time. This can be used to write rows list.Syntax:Writing CSV files in Python\nwriterows(rows)\n&&&writeheader(): writeheader() method simply writes the first row of your csv file using the pre-specified fieldnames.Syntax:writeheader()\n|||writerows(): writerows method simply writes all the rows but in each row, it writes only the values(not keys).Syntax:writerows(mydict)\n\']'),(149,'[\'Python MySQL\']','[\'Installation\', \'Connecting to MySQL Server\', \'Python3\', \'Creating Database\', \'Python3\', \'Creating Tables\', \'Python3\', \'Insert Data into Tables\', \'Python3\', \'Python3\', \'Fetching Data\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Update Data\', \'Python3\', \'Delete Data from Table\', \'Python3\', \'Drop Tables\', \'Python3\', \'Python3\', \'Python MySQL Exercises\', \'Python MySQL Applications and Projects\']','[\'Example: Creating MySQL database with Python\', \'Example: Creating MySQL table using Python\', \'Example 1: Inserting Single Row\', \'Example 2: Inserting Multiple Rows\', \'Example: Select data from MySQL table using Python\', \'Where Clause\', \'Example: Where clause in MySQL using Python\', \'Order By Clause\', \'Example: Order By clause in MySQL using Python\', \'Limit Clause\', \'Example: Limit Clause in MySQL using Python\', \'Example: Update MySQL table using Python\', \'Example: Delete Data from MySQL table using Python\', \'Example 1: Drop Table in MySQL using Python\', \'Example 2: Drop Table if exists\', \'Working With Tables\', \'Working on Columns\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210820222658/pythonmysqltutorial.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927190045/pythonmysqlconnectorinstallmin.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927192312/Pyhtonmysqlcreatedatabase.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927214707/createtablepythonmysql.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927194925/insert1rowinmysqldatabaseusingPython.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927200130/pythonmysqlinsertmanyrows.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927200646/pythonmysqlselectquery.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927201738/pythonmysqlorderyby.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927203007/pythonmysqlupdatetable.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927212114/pythonmySQLdeletefromtable.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927213703/pythonmysqldroptables.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210927214034/pythonmysqldroptables.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/how-to-install-python-on-windows/\', \'https://www.geeksforgeeks.org/how-to-install-python-on-linux/\', \'https://www.geeksforgeeks.org/connect-mysql-database-using-mysql-connector-python/\', \'https://www.geeksforgeeks.org/python-mysql-create-database/\', \'https://www.geeksforgeeks.org/python-mysql-create-table/\', \'https://www.geeksforgeeks.org/python-mysql-insert-into-table/\', \'https://www.geeksforgeeks.org/python-mysql-select-query/\', \'https://www.geeksforgeeks.org/python-mysql-where-clause/\', \'https://www.geeksforgeeks.org/python-mysql-order-by-clause/\', \'https://www.geeksforgeeks.org/python-mysql-limit-clause/\', \'https://www.geeksforgeeks.org/python-mysql-update-query/\', \'https://www.geeksforgeeks.org/python-mysql-delete-query/\', \'https://www.geeksforgeeks.org/python-mysql-drop-table/\', \'https://www.geeksforgeeks.org/how-to-insert-values-into-mysql-server-table-using-python/\', \'https://www.geeksforgeeks.org/how-to-show-all-tables-in-mysql-using-python/\', \'https://www.geeksforgeeks.org/how-to-get-the-size-of-a-table-in-mysql-using-python/\', \'https://www.geeksforgeeks.org/how-to-rename-a-mysql-table-in-python/\', \'https://www.geeksforgeeks.org/how-to-copy-a-table-in-mysql-using-python/\', \'https://www.geeksforgeeks.org/how-to-copy-a-table-definition-in-mysql-using-python/\', \'https://www.geeksforgeeks.org/get-the-id-after-insert-into-mysql-database-using-python/\', \'https://www.geeksforgeeks.org/how-to-use-if-statement-in-mysql-using-python/\', \'https://www.geeksforgeeks.org/deleting-element-from-table-in-mysql-using-python/\', \'https://www.geeksforgeeks.org/grant-mysql-table-and-column-permissions-using-python/\', \'https://www.geeksforgeeks.org/how-to-count-the-number-of-rows-in-a-mysql-table-in-python/\', \'https://www.geeksforgeeks.org/count-sql-table-column-using-python/\', \'https://www.geeksforgeeks.org/how-to-add-a-column-to-a-mysql-table-in-python/\', \'https://www.geeksforgeeks.org/how-to-get-the-minimum-and-maximum-value-of-a-column-of-a-mysql-table-using-python/\', \'https://www.geeksforgeeks.org/how-to-perform-arithmetic-across-columns-of-a-mysql-table-using-python/\', \'https://www.geeksforgeeks.org/how-to-concatenate-column-values-of-a-mysql-table-using-python/\', \'https://www.geeksforgeeks.org/add-comment-to-column-in-mysql-using-python/\', \'https://www.geeksforgeeks.org/grant-mysql-table-and-column-permissions-using-python/\', \'https://www.geeksforgeeks.org/create-mysql-database-login-page-in-python-using-tkinter/\', \'https://www.geeksforgeeks.org/extract-data-from-database-using-mysql-connector-and-xampp-in-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'We can connect to the MySQL server using the connect() method.xa0\', \'<mysql.connector.connection_cext.CMySQLConnection object at 0x7f73f0191d00>\', \'Note: For more information, refer to Connect MySQL database using MySQL-Connector Python.\', \'To insert data into the MySQL table Insert into query is used.xa0\', \'We can use the select query on the MySQL tables in the following ways –\', \'SELECT column1, column2, …. cloumnN FROM [TABLE NAME] WHERE [CONDITION];\', \'We can use the Delete query to delete data from the table in MySQL.\', \'At first, let’s see the list of tables in our database.\', \'We can see that there are two tables for students, so let’s drop the second table.\']','[\'Python MySQL Connector is a Python driver that helps to integrate Python and MySQL. This Python MySQL library allows the conversion between Python and MySQL data types. MySQL Connector API is implemented using pure Python and does not require any third-party library.xa0\', \'This Python MySQL tutorial will help to learn how to use MySQL with Python from basics to advance, including all necessary functions and queries explained in detail with the help of good Python MySQL examples. So, let’s get started.\', \'To install the Python-mysql-connector module, one must have Python and PIP, preinstalled on their system. If Python and pip are already installed type the below command in the terminal.\', \'Note: If Python is not present, go through How to install Python on Windows and Linux? and follow the instructions provided.\', \'After connecting to the MySQL server let’s see how to create a MySQL database using Python. For this, we will first create a cursor() object and will then pass the SQL command as a string to the execute() method. The SQL command to create a database is –xa0\', \'For creating tables we will follow the similar approach of writing the SQL commands as strings and then passing it to the execute() method of the cursor object. SQL command for creating a table is –xa0\', \'To insert multiple values at once, executemany() method is used. This method iterates through the sequence of parameters, passing the current parameter to the execute method.\', \'Where clause is used in MySQL database to filter the data as per the condition required. You can fetch, delete or update a particular set of data in MySQL database by using where clause.\', \'OrderBy is used to arrange the result set in either ascending or descending order. By default, it is always in ascending order unless “DESC” is mentioned, which arranges it in descending order. “ASC” can also be used to explicitly arrange it in ascending order. But, it is generally not done this way since default already does that.\', \'The Limit clause is used in SQL to control or limit the number of records in the result set returned from the query generated. By default, SQL gives out the required number of records starting from the top but it allows the use of OFFSET keyword. OFFSET allows you to start from a custom row and get the required number of result rows.\', \'The update query is used to change the existing values in a database. By using update a specific value can be corrected or updated. It only affects the data and not the structure of the table. The basic advantage provided by this command is that it keeps the table accurate.\', \'Drop command affects the structure of the table and not data. It is used to delete an already existing table. For cases where you are not sure if the table to be dropped exists or not DROP TABLE IF EXISTS command is used. Both cases will be dealt with in the following examples.\', \'The above example, will not create any error and output because we have used the Drop Table is exists query. If we will simply use the Drop table Employee then ProgrammingError: 1051 (42S02): Unknown table ‘gfg.Employee’ is raised.\']','[]','[\'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\") print(dataBase)  # Disconnecting from the serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\") # preparing a cursor objectcursorObject = dataBase.cursor() # creating databasecursorObject.execute(\"CREATE DATABASE gfg\")\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  # creating tablestudentRecord = \"\"\"CREATE TABLE STUDENT (                   NAME  VARCHAR(20) NOT NULL,                   BRANCH VARCHAR(50),                   ROLL INT NOT NULL,                   SECTION VARCHAR(5),                   AGE INT                   )\"\"\"  # table createdcursorObject.execute(studentRecord)  # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  sql = \"INSERT INTO STUDENT (NAME, BRANCH, ROLL, SECTION, AGE)\\VALUES (%s, %s, %s, %s, %s)\"val = (\"Ram\", \"CSE\", \"85\", \"B\", \"19\")   cursorObject.execute(sql, val)dataBase.commit()   # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  sql = \"INSERT INTO STUDENT (NAME, BRANCH, ROLL, SECTION, AGE)\\VALUES (%s, %s, %s, %s, %s)\"val = [(\"Nikhil\", \"CSE\", \"98\", \"A\", \"18\"),       (\"Nisha\", \"CSE\", \"99\", \"A\", \"18\"),       (\"Rohan\", \"MAE\", \"43\", \"B\", \"20\"),       (\"Amit\", \"ECE\", \"24\", \"A\", \"21\"),       (\"Anil\", \"MAE\", \"45\", \"B\", \"20\"),       (\"Megha\", \"ECE\", \"55\", \"A\", \"22\"),       (\"Sita\", \"CSE\", \"95\", \"A\", \"19\")]   cursorObject.executemany(sql, val)dataBase.commit()   # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  query = \"SELECT NAME, ROLL FROM STUDENT\"cursorObject.execute(query)   myresult = cursorObject.fetchall()   for x in myresult:    print(x) # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  query = \"SELECT * FROM STUDENT where AGE >=20\"cursorObject.execute(query)   myresult = cursorObject.fetchall()   for x in myresult:    print(x) # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  query = \"SELECT * FROM STUDENT ORDER BY NAME DESC\"cursorObject.execute(query)   myresult = cursorObject.fetchall()   for x in myresult:    print(x) # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  query = \"SELECT * FROM STUDENT LIMIT 2 OFFSET 1\"cursorObject.execute(query)   myresult = cursorObject.fetchall()   for x in myresult:    print(x) # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  query = \"UPDATE STUDENT SET AGE = 23 WHERE Name =\'Ram\'\"cursorObject.execute(query)dataBase.commit() # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  query = \"DELETE FROM STUDENT WHERE NAME = \'Ram\'\"cursorObject.execute(query)dataBase.commit() # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  query =\"DROP TABLE Student;\" cursorObject.execute(query)dataBase.commit() # disconnecting from serverdataBase.close()\', \'# importing required librariesimport mysql.connector  dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"password\",  database = \"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor()  query =\"Drop Table if exists Employee;\" cursorObject.execute(query)dataBase.commit() # disconnecting from serverdataBase.close()\']','[\'pip3 install mysql-connector-python\', \'CREATE DATABASE DATABASE_NAME\', \'CREATE TABLE\n(\n    column_name_1 column_Data_type,\n    column_name_2 column_Data_type,\n    :\n    :\n    column_name_n column_Data_type\n);\', \'INSERT INTO table_name (column_names) VALUES (data)\', \'SELECT attr1, attr2 FROM table_name\', \'SELECT * FROM table_name\', \"(\'Rohan\', \'MAE\', 43, \'B\', 20)\n(\'Amit\', \'ECE\', 24, \'A\', 21)\n(\'Anil\', \'MAE\', 45, \'B\', 20)\n(\'Megha\', \'ECE\', 55, \'A\', 22)\", \'SELECT column1, column2\nFROM table_name\nORDER BY column_name ASC|DESC;\', \'SELECT * FROM tablename LIMIT limit;\nSELECT * FROM tablename LIMIT limit OFFSET offset;\', \"(\'Nikhil\', \'CSE\', 98, \'A\', 18)\n(\'Nisha\', \'CSE\', 99, \'A\', 18)\", \'UPDATE tablename\nSET =\"new value\"\nWHERE =\"old value\";\', \'DELETE FROM TABLE_NAME WHERE ATTRIBUTE_NAME = ATTRIBUTE_VALUE\', \'DROP TABLE tablename;\nDROP TABLE IF EXISTS tablename;\']','[]','[\'In order to select particular attribute columns from a table, we write the attribute names.&&&In order to select all the attribute columns from a table, we use the asterisk ‘*’ symbol.&&&How to insert values into MySQL server table using Python?|||How to Show All Tables in MySQL using Python?|||How to Get the Size of a Table in MySQL using Python?|||How to Rename a MySQL Table in Python?|||How to Copy a Table in MySQL Using Python?|||How to Copy a Table Definition in MySQL Using Python?|||Get the id after INSERT into MySQL database using Python|||How to Use IF Statement in MySQL Using Python|||Deleting Element from Table in MySql using Python|||Grant MySQL table and column permissions using Python&&&How to Count the Number of Rows in a MySQL Table in Python?|||Count SQL Table Column Using Python|||How to Add a Column to a MySQL Table in Python?|||How to Get the Minimum and maximum Value of a Column of a MySQL Table Using Python?|||How to Perform Arithmetic Across Columns of a MySQL Table Using Python?|||How to Concatenate Column Values of a MySQL Table Using Python?|||Add comment to column in MySQL using Python|||Grant MySQL table and column permissions using Python&&&Create MySQL Database Login Page in Python using Tkinter|||Extract Data from Database using MySQL-Connector and XAMPP in Python\']'),(150,'[\'Connect MySQL database using MySQL-Connector Python\']','[\'Connecting to the Database\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200304152526/python-mysql-connect-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200304152800/python-mysql-connect-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200304153027/python-mysql-connect-3.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'In the following example we will be connecting to MySQL database using connect()Example:xa0\', \'Also for the same, we can use connection.MySQLConnection() class instead of connect():Example:xa0\', \'Another way is to pass the dictionary in the connect() function using ‘**’ operator:Example:xa0\']','[]','[\'While working with Python we need to work with databases, they may be of different types like MySQL, SQLite, NoSQL, etc. In this article, we will be looking forward to how to connect MySQL databases using MySQL Connector/Python.MySQL Connector module of Python is used to connect MySQL databases with the Python programs, it does that using the Python Database API Specification v2.0 (PEP 249). It uses the Python standard library and has no dependencies.xa0\']','[\"# Python program to connect# to mysql database  import mysql.connector  # Connecting from the serverconn = mysql.connector.connect(user = \'username\',                               host = \'localhost\',                              database = \'database_name\') print(conn) # Disconnecting from the serverconn.close()\", \"# Python program to connect# to mysql database  from mysql.connector import connection # Connecting to the serverconn = connection.MySQLConnection(user = \'username\',                              host = \'localhost\',                              database = \'database_name\') print(conn) # Disconnecting from the serverconn.close()\", \"# Python program to connect# to mysql database  from mysql.connector import connection  dict = {  \'user\': \'root\',  \'host\': \'localhost\',  \'database\': \'College\'} # Connecting to the serverconn = connection.MySQLConnection(**dict) print(conn) # Disconnecting from the serverconn.close()\"]','[]','[]','[]'),(151,'[\'Python MySQL – Create Database\']','[\'Python\', \'Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200304161950/python-mysql-create-db.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200304162535/PYTHON-MYSQL-CREATE-DB1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'The above program illustrates the creation of MySQL database geeks4geeks in which host-name is localhost, the username is user and password is gfg.Let’s suppose we want to create a table in the database, then we need to connect to a database. Below is a program to create a table in the geeks4geeks database which was created in the above program.xa0\']','[\'Python Database API ( Application Program Interface ) is the Database interface for the standard Python. This standard is adhered to by most Python Database interfaces. There are various Database servers supported by Python Database such as MySQL, GadFly, mSQL, PostgreSQL, Microsoft SQL Server 2000, Informix, Interbase, Oracle, Sybase etc. To connect with MySQL database server from Python, we need to import the mysql.connector interface.Syntax:xa0xa0\']','[\'# importing required librariesimport mysql.connector dataBase = mysql.connector.connect(  host =\"localhost\",  user =\"user\",  passwd =\"gfg\") # preparing a cursor objectcursorObject = dataBase.cursor() # creating databasecursorObject.execute(\"CREATE DATABASE geeks4geeks\")\', \'# importing required libraryimport mysql.connector # connecting to the databasedataBase = mysql.connector.connect(                     host = \"localhost\",                     user = \"user\",                     passwd = \"gfg\",                     database = \"geeks4geeks\" )  # preparing a cursor objectcursorObject = dataBase.cursor() # creating table studentRecord = \"\"\"CREATE TABLE STUDENT (                   NAME  VARCHAR(20) NOT NULL,                   BRANCH VARCHAR(50),                   ROLL INT NOT NULL,                   SECTION VARCHAR(5),                   AGE INT                   )\"\"\" # table createdcursorObject.execute(studentRecord)  # disconnecting from serverdataBase.close()\']','[\'CREATE DATABASE DATABASE_NAME\']','[]','[]'),(152,'[\'Python: MySQL Create Table\']','[\'python\', \'Table\', \'python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191209195607/Untitled-Document3-293x300.png\']','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example: Consider the below example for creating a database in MySQL(Ex: college)xa0\', \'SQL command for Creating Table :xa0xa0\']','[\'1. connect():xa0This function is used for establishing a connection with the MySQL server.xa0The following are the arguments that are used to initiate a connection:\', \'2. cursor(): Cursor is the workspace created in the system memory when the SQL command is executed. This memory is temporary and the cursor connection is bounded for the entire session/lifetime and the commands are executedxa0xa0\', \'3. execute(): The execute function takes a SQL query as an argument and executes. A query is an SQL command which is used to create, insert, retrieve, update, delete etc.xa0xa0\', \'The database is an organization of information structured into multiple tables. Databases are organized in such a way so that manipulating the data is easy i.e Creating, inserting, updating, and deleting etc.SQL command for Creating Database :xa0xa0\', \'Data types are used for defining the type of data that will be stored in the cell of the table.xa0Different Types of the Datatypesxa0xa0\', \'Apart from the above-mentioned datatypes, there are other miscellaneous data types in MySQL that include datatypes of CLOB, BLOB, JSON, XML.Consider the below-mentioned python code for creating a table of the “student” which contains two Columns Name, Roll number in the database “college” previously created.xa0\']','[\'MySQL is a Relational Database Management System (RDBMS) whereas the structured Query Language (SQL) is the language used for handling the RDBMS using commands i.e Creating, Inserting, Updating and Deleting the data from the databases. SQL commands are case insensitive i.e CREATE and create signify the same command.Installationxa0Follow the below-mentioned process for installing the dependencies for python MySQL\']','[\'# Python code for creating Database# Host: It is the server name. It will be# \"localhost\" if you are using localhost database import mysql.connector as SQLC# Establishing connection with the SQL DataBase = SQLC.connect(  host =\"server name\",  user =\"user name\",  password =\"password\")# Cursor to the databaseCursor = DataBase.cursor() Cursor.execute(\"CREATE DATABASE College\")print(\"College Data base is created\")\', \'# Python code for creating Table in the Database# Host: It is the server name. It will be \"localhost\"# if you are using localhost database import mysql.connectors as SQLCdef CreateTable():           # Connecting To the Database in Localhost     DataBase = SQLC.connect(                 host =\"server name\",                 user =\"user name\",                 password =\"password\",                 database =\"College\"               )      # Cursor to the database     Cursor = DataBase.cursor()      # Query for Creating the table     # The student table contains two columns Name and     # Name of data type varchar i.e to store string     # and Roll number of the integer data type.     TableName =\"CREATE TABLE Student                (                    Name VARCHAR(255),                    Roll_no int                );\"      Cursor.execute(TableName)     print(\"Student Table is Created in the Database\")     return # Calling CreateTable functionCreateTable()\']','[\'pip install mysql-connector\', \'CREATE DATABASE ;\', \'College Data base is created\', \'CREATE TABLE\n(\n     column_name_1 column_Data_type, \n     column_name_2 column_Data_type, \n     :\n     :\n     column_name_n column_Data_type\n);\', \'Student Table is Created in the Database\']','[]','[\'Navigate to the python script directory using the command prompt.|||Execute the command&&&user: User name associated with the MySQL server used to authenticate the connection|||password: Password associated with the user name for authentication|||database: Data base in the MySQL for creating the Table&&&The table is a collection of data organized in the form of rows and columns. Table is present within a database.|||Rows are also called tuples|||Columns are called the attributes of the table&&&Numeric|||Character/String|||Date/time.|||Unicode Character/String|||Binary\']'),(153,'[\'Python MySQL – Insert into Table\']','[\'Inserting data\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200304145524/python-mysql-insert.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200304145647/python-mysql-insert-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200304145938/python-mysql-insert-3.png\']','[]','[\'https://www.geeksforgeeks.org/python-mysql-create-table/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Connector query\', \'Now, the Insert into Query can be written as follows:\', \'Example: Let’s suppose the record looks like this –\']','[\'MySQL is a Relational Database Management System (RDBMS) whereas the structured Query Language (SQL) is the language used for handling the RDBMS using commands i.e Creating, Inserting, Updating and Deleting the data from the databases. SQL commands are case insensitive i.e CREATE and create signify the same command.\', \'Note: Before we insert data into our database, we need to create a table. In order to do so, refer to Python: MySQL Create Table.\', \'You can insert one row or multiple rows at once. The connector code is required to connect the commands to the particular database.\', \'To insert multiple values at once, executemany() method is used. This method iterates through the sequence of parameters, passing the current parameter to the execute method.\']','[]','[\'# Enter the server name in host# followed by your user and# password along with the database # name provided by you.  import mysql.connector    mydb = mysql.connector.connect(  host = \"localhost\",  user = \"username\",  password = \"password\",  database = \"database_name\")   mycursor = mydb.cursor()\', \'sql = \"INSERT INTO Student (Name, Roll_no) VALUES (%s, %s)\"val = (\"Ram\", \"85\")  mycursor.execute(sql, val)mydb.commit()  print(mycursor.rowcount, \"details inserted\")  # disconnecting from servermydb.close()\', \'sql = \"INSERT INTO Student (Name, Roll_no) VALUES (%s, %s)\"val = [(\"Akash\", \"98\"),       (\"Neel\", \"23\"),       (\"Rohan\", \"43\"),       (\"Amit\", \"87\"),       (\"Anil\", \"45\"),        (\"Megha\", \"55\"),        (\"Sita\", \"95\")]  mycursor.executemany(sql, val)mydb.commit()  print(mycursor.rowcount, \"details inserted\")  # disconnecting from servermydb.close()\']','[\'1 details inserted\', \'7 details inserted\']','[]','[\'The cursor() is used in order to iterate through the rows.|||Without the command mydb.commit() the changes will not be saved.\']'),(154,'[\'Python MySQL – Select Query\']','[\'Select Query\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200304185953/python-mysql-select.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200304190126/python-mysql-select-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200304190310/python-mysql-select-3.png\']','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Below is a program to connect with MySQL database geeks.\', \'After connecting with the database in MySQL we can select queries from the tables in it.\', \'Example 1: Let’s consider the table looks like this –\', \'Below is a program to select a query from the table in the database.\', \'Example 2: Let us look at another example for selecting queries in a table.\']','[\'The above program illustrates the connection with the MySQL database geeks in which host-name is localhost, the username is user and password is pswrd.\']','[\'Python Database API ( Application Program Interface ) is the Database interface for the standard Python. This standard is adhered to by most Python Database interfaces. There are various Database servers supported by Python Database such as MySQL, GadFly, mSQL, PostgreSQL, Microsoft SQL Server 2000, Informix, Interbase, Oracle, Sybase etc. To connect with MySQL database server from Python, we need to import the mysql.connector module.\']','[\'# importing required library import mysql.connector  # connecting to the database dataBase = mysql.connector.connect(                     host = \"localhost\",                     user = \"user\",                     passwd = \"pswrd\",                     database = \"geeks\" )   # preparing a cursor object cursorObject = dataBase.cursor()   # disconnecting from serverdataBase.close()\', \'# importing required library import mysql.connector     # connecting to the database dataBase = mysql.connector.connect(                     host = \"localhost\",                     user = \"user\",                     passwd = \"pswrd\",                     database = \"geeks\" )     # preparing a cursor object cursorObject = dataBase.cursor()    print(\"Displaying NAME and ROLL columns from the STUDENT table:\")  # selecting queryquery = \"SELECT NAME, ROLL FROM STUDENT\"cursorObject.execute(query)  myresult = cursorObject.fetchall()  for x in myresult:    print(x)  # disconnecting from serverdataBase.close()\', \'# importing required library import mysql.connector     # connecting to the database dataBase = mysql.connector.connect(                     host = \"localhost\",                     user = \"user\",                     passwd = \"pswrd\",                     database = \"geeks\" )      # preparing a cursor object cursorObject = dataBase.cursor()    print(\"Displaying NAME and ROLL columns from the STUDENT table:\")  # selecting queryquery = \"SELECT * FROM STUDENT\"cursorObject.execute(query)  myresult = cursorObject.fetchall()  for x in myresult:    print(x)  # disconnecting from serverdataBase.close()\']','[\'SELECT attr1, attr2 FROM table_name\', \'SELECT * FROM table_name\']','[]','[\'In order to select particular attribute columns from a table, we write the attribute names.SELECT attr1, attr2 FROM table_name|||In order to select all the attribute columns from a table, we use the asterisk ‘*’ symbol.SELECT * FROM table_name\']'),(155,'[\'Python MySQL – Where Clause\']','[]','[\'Where Clause In Python\']','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200227134245/python-db-schema.png\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200227134341/python-db-table.png\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200227134524/python-where-mysql.png\']','[]','[\'https://www.geeksforgeeks.org/expert/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'SELECT column1, column2, …. cloumnN FROM [TABLE NAME] WHERE [CONDITION];\', \'The above syntax is used for displaying a certain set of data following the condition.\', \'Example: Consider the following database named college and having a table name as a student.\', \'Schema of the database:\', \'xa0Database:\', \'Steps to use where clause in Python is:\']','[\'Where clause is used in MySQL database to filter the data as per the condition required. You can fetch, delete or update a particular set of data in MySQL database by using where clause.\']','[]','[\'import mysql.connector   #Establishing connectionconn = mysql.connector.connect(user=\'your_username\',                               host=\'localhost\',                               password =\'your_password\',                               database=\'College\')   # Creating a cursor object using # the cursor() methodmycursor = conn.cursor();   # SQL Querysql = \"select * from Student where Roll_no >= 3;\"   # Executing querymycursor.execute(sql)   myresult = mycursor.fetchall()   for x in myresult:    print(x)  # Closing the connectionconn.close()\']','[]','[]','[\'First form a connection between MySQL and Python program. It is done by importing mysql.connector package and using mysql.connector.connect() method, for passing the user name, password, host (optional default: localhost) and, database (optional) as parameters to it.|||Now, create a cursor object on the connection object created above by using cursor() method. A database cursor is a control structure that enables traversal over the records in a database.|||Then, execute the where clause statement by passing it through execute() method.\']');
INSERT INTO `geeksforgeeks_python_data` VALUES (156,'[\'Python MySQL – Order By Clause\']','[\'OrderBy Clause\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200306172253/python-order-by.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200306172634/python-mysql-order-by.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200306172847/python-mysql-order-by-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200306173127/python-mysql-order-by-3.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The following programs will help you understand this better.DATABASE IN USE:\', \'Example 1: Program to arrange the data in ascending order by name\', \'Example 2: Arranging the database in descending order\', \'Example 3: Program to get namefrom the table, arranged in descending order by Roll no.\']','[\'A connector is employed when we have to use MySQL with other programming languages. The work of MySQL-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and the MySQL Server.\', \'OrderBy is used to arrange the result set in either ascending or descending order. By default, it is always in ascending order unless “DESC” is mentioned, which arranges it in descending order.“ASC” can also be used to explicitly arrange it in ascending order. But, it is generally not done this way since default already does that.\']','[]','[\'# Python program to demonstrate# order by clause    import mysql.connector  # Connecting to the Databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',  password = \'\')  cs = mydb.cursor()  # Order by clausestatement =\"SELECT * FROM Student ORDER BY Name\"cs.execute(statement)  result_set = cs.fetchall()  for x in result_set:    print(x)      # Disconnecting from the databasemydb.close()\', \'# Python program to demonstrate# order by clause    import mysql.connector  # Connecting to the Databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)  cs = mydb.cursor()  # Order by clausestatement =\"SELECT * FROM Student ORDER BY Name DESC\"cs.execute(statement)  result_set = cs.fetchall()  for x in result_set:    print(x)    # Disconnecting from the database  mydb.close()\', \'# Python program to demonstrate# order by clause    import mysql.connector  # Connecting to the Databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)  cs = mydb.cursor()  # Order by clausestatement =\"SELECT Name FROM Student ORDER BY Roll_no DESC\"cs.execute(statement)  result_set = cs.fetchall()  for x in result_set:    print(x)      # Disconnecting from the databasemydb.close()\']','[\'SELECT column1, column2\nFROM table_name\nORDER BY column_name ASC|DESC;\']','[]','[]'),(157,'[\'Python MySQL – Delete Query\']','[]','[\'Deleting query from tables\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200302163740/python-mysql-delete.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200302173433/PYTHON-MYSQL-DELETE1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Below is a program to connect with MySQL database geeks.\', \'After connecting with the database in MySQL we can create tables in it and can manipulate them.\', \'Syntax Statement:\', \'Example 1: Below is a program to delete a query from the table in the database.\', \'Example 2: Let us look at another example for queries in a table.\']','[\'The above program illustrates the connection with the MySQL database geeks in which host-name is localhost, the username is user and password is pswrd.\', \'In the above program, a table named STUDENT is created having attributes NAME, BRANCH, ROLL, SECTION and AGE. Multiple data is inserted into the STUDENT table and then a single query is deleted from the the table having the ROLL attribute value 1706256.\', \'In the above program, another table is created in the geeks database named PHONE_RECORD having attribute NAME and PHONE. Only one column is inserted into the table and then it is deleted using the DELETE statement.\']','[\'Python Database API ( Application Program Interface ) is the Database interface for the standard Python. This standard is adhered to by most Python Database interfaces. There are various Database servers supported by Python Databases such as MySQL, GadFly, PostgreSQL, Microsoft SQL Server 2000, Informix, Interbase, Oracle, Sybase, etc. To connect with MySQL database server from Python, we need to import the mysql.connector interface.\']','[\'# importing required library import mysql.connector  # connecting to the database dataBase = mysql.connector.connect(                     host = \"localhost\",                     user = \"user\",                     passwd = \"pswrd\",                     database = \"geeks\" )   # preparing a cursor object cursorObject = dataBase.cursor()     # disconnecting from serverdataBase.close()\', \'# importing required library import mysql.connector   # connecting to the database dataBase = mysql.connector.connect(                     host = \"localhost\",                     user = \"user\",                     passwd = \"pswrd\",                     database = \"geeks\" )    # preparing a cursor object cursorObject = dataBase.cursor()   # creating table  studentRecord = \"\"\"CREATE TABLE STUDENT (                    NAME  VARCHAR(20) NOT NULL,                    BRANCH VARCHAR(50),                    ROLL INT NOT NULL,                   SECTION VARCHAR(5),                    AGE INT                   )\"\"\"  # table createdcursorObject.execute(studentRecord)    # inserting data into the tablequery = \"INSERT INTO STUDENT (NAME, BRANCH, ROLL, SECTION, AGE) VALUES (% s, % s)\"  attrValues = (\"Rituraj Saha\", \"Information Technology\", \"1706256\", \"IT-3\", \"20\")cursorObject.execute(query, attrValues)  attrValues = (\"Ritam Barik\", \"Information Technology\", \"1706254\", \"IT-3\", \"21\")cursorObject.execute(query, attrValues)  attrValues = (\"Rishi Kumar\", \"Information Technology\", \"1706253\", \"IT-3\", \"21\")cursorObject.execute(query, attrValues)  # deleting queryquery = \"DELETE FROM STUDENT WHERE ROLL = 1706256\"cursorObject.execute(query, attrValues)  dataBase.commit()  # disconnecting from serverdataBase.close()\', \'# importing required library import mysql.connector  # connecting to the database dataBase = mysql.connector.connect(                     host = \"localhost\",                     user = \"user\",                     passwd = \"pswrd\",                     database = \"geeks\" )   # preparing a cursor object cursorObject = dataBase.cursor()   # drop table if it already exists cursorObject.execute(\"DROP TABLE IF EXISTS PHONE_RECORD\")  # creating table  phoneRecord = \"\"\"CREATE TABLE PHONE_RECORD (                    NAME  VARCHAR(20) NOT NULL,                    PHONE VARCHAR(10) NOT NULL                   )\"\"\"  # table createdcursorObject.execute(phoneRecord)    # inserting data into the tablequery = \"INSERT INTO PHONE_RECORD (NAME, PHONE) VALUES (% s, % s)\"attrValues = (\"Rituraj Saha\", \"9163089075\")cursorObject.execute(query, attrValues)  # deleting queryquery = \"DELETE FROM STUDENT WHERE NAME = \'Rituraj Saha\'\"cursorObject.execute(query)  dataBase.commit()  # disconnecting from serverdataBase.close()\']','[\'DELETE FROM TABLE_NAME WHERE ATTRIBUTE_NAME = ATTRIBUTE_VALUE\']','[]','[]'),(158,'[\'Python MySQL – Drop Table\']','[\'Drop Table Command\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200306175724/python-mysql-drop.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200306180259/python-mysql-drop-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200306180436/python-mysql-drop-2.png\']','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The following programs will help you understand this better.\', \'Tables before drop:\', \'Example 2: Program to drop table Geeks\']','[\'A connector is employed when we have to use MySQL with other programming languages. The work of MySQL-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and the MySQL Server.\', \'Drop command affects the structure of the table and not data. It is used to delete an already existing table. For cases where you are not sure if the table to be dropped exists or not DROP TABLE IF EXISTS command is used. Both cases will be dealt with in the following examples.\', \'Example 1: Program to demonstrate drop if exists. We will try to drop a table which does not exist in the above database.\']','[]','[\'# Python program to demonstrate# drop clause    import mysql.connector  # Connecting to the Databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)  cs = mydb.cursor()  # drop clausestatement = \"Drop Table if exists Employee\"  # Uncommenting statement =\"DROP TABLE employee\"# Will raise an error as the table employee# does not exists  cs.execute(statement)      # Disconnecting from the databasemydb.close()\', \'# Python program to demonstrate# drop clause    import mysql.connector  # Connecting to the Databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)  cs = mydb.cursor()  # drop clausestatement =\"DROP TABLE Geeks\"  cs.execute(statement)      # Disconnecting from the databasemydb.close()\']','[\'DROP TABLE tablename;\n\nDROP TABLE IF EXISTS tablename;\']','[]','[]'),(159,'[\'Python MySQL – Update Query\']','[\'Update Clause\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200306180837/python-mysql-update.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200306181248/python-mysql-update1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200306181526/python-mysql-update2.png\']','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The following programs will help you understand this better.DATABASE IN USE:\', \'Example 1: Program to update the age of student named Rishi Kumar.\', \'Example 2: Program to correct the spelling of an Student named SK\']','[\'A connector is employed when we have to use MySQL with other programming languages. The work of MySQL-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and the MySQL Server.\', \'The update is used to change the existing values in a database. By using update a specific value can be corrected or updated. It only affects the data and not the structure of the table.The basic advantage provided by this command is that it keeps the table accurate.\']','[]','[\'# Python program to demonstrate# update clause    import mysql.connector  # Connecting to the Databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)  cs = mydb.cursor()  # drop clausestatement =\"UPDATE STUDENT SET AGE = 23 WHERE Name =\'Rishi Kumar\'\"  cs.execute(statement)mydb.commit()  # Disconnecting from the databasemydb.close()\', \'# Python program to demonstrate# update clause    import mysql.connector  # Connecting to the Databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)  cs = mydb.cursor()  # drop clausestatement =\"UPDATE STUDENT SET Name = \'S.K. Anirban\' WHERE Name =\'SK Anirban\'\"  cs.execute(statement)mydb.commit()  # Disconnecting from the databasemydb.close()\']','[\'UPDATE tablename\nSET =\"new value\"\nWHERE =\"old value\";\']','[]','[]'),(160,'[\'Python MySQL – Limit Clause\']','[\'LIMIT Clause Of SQL\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200316195500/python-join-db22.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200316195644/python-limit-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200316195737/python-limit-2.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The following programs will help you understand this better.DATABASE IN USE:\', \'Example 1: program to display only 2 records\', \'Example 2:program to start from the second record and display the first two records\']','[\'A connector is employed when we have to use MySQL with other programming languages. The work of mysql-connector is to provide access to MySQL Driver to the the required language. Thus, it generates a connection between the programming language and MySQL Server.\', \'This is a MySQL Connector that allows Python to access MySQL Driver and implement SQL queries in its programming facility. Here we will try implementing Limit clause on our Database and will study the output generated.\', \'The Limit clause is used in SQL to control or limit the number of records in the result set returned from the query generated. By default, SQL gives out the required number of records starting from the top but it allows the use of OFFSET keyword. OFFSET allows you to start from a custom row and get the required number of result rows.\']','[]','[\'import mysql.connector   # Conencting to the databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)   cs = mydb.cursor()  # STUDENT and STudent are# two different databasestatement =\"SELECT * FROM STUDENT LIMIT 2\"  cs.execute(statement)result_set = cs.fetchall()  for x in result_set:    print(x)\', \'import mysql.connector   # Conencting to the databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)   cs = mydb.cursor()  # STUDENT and STudent are# two different databasestatement =\"SELECT * FROM STUDENT LIMIT 2 OFFSET 1\"  cs.execute(statement)result_set = cs.fetchall()  for x in result_set:    print(x)\']','[\'SELECT * FROM tablename LIMIT limit;\n\nSELECT * FROM tablename LIMIT limit OFFSET offset;\']','[]','[]'),(161,'[\'Python MySQL – Join\']','[\'JOIN Clause Of SQL\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200314221726/JOIN.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200316192130/python-join-db1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200316193328/python-join-db21.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200316194558/python-join-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200316194754/python-join-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200316194904/python-join-3.png\']','[]','[\'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'The following programs will help you understand this better.DATABASE IN USE:\', \'PROGRAM 1: Use of inner join\', \'PROGRAM 2: use of LEFT JOIN\', \'PROGRAM 3 : use of RIGHT JOIN\']','[\'A connector is employed when we have to use mysql with other programming languages. The work of mysql-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and the MySQL Server.\', \'This is a MySQL Connector that allows Python to access MySQL Driver and implement SQL queries in its programming facility. Here we will try implementing Join clause on our Database and will study the output generated.\', \'Join allows you to combine two or more tables in SQL, based on related column between them. Based on this application of join there are three types of join:\']','[]','[\'import mysql.connector   # Conencting to the databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)   cs = mydb.cursor()  # STUDENT and STudent are# two different databasestatement =\"SELECT S.NAME from Student S JOIN \\Student on S.Roll_no = Student.Roll_no\"  cs.execute(statement)result_set = cs.fetchall()  for x in result_set:    print(x)\', \'import mysql.connector   # Conencting to the databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)   cs = mydb.cursor()  # STUDENT and STudent are# two different databasestatement =\"SELECT S.Name from STUDENT S\\ LEFT JOIN Student s ON S.Roll_no = s.Roll_no\"  cs.execute(statement)result_set = cs.fetchall()  for x in result_set:    print(x)\', \'import mysql.connector   # Conencting to the databasemydb = mysql.connector.connect(  host =\'localhost\',  database =\'College\',  user =\'root\',)   cs = mydb.cursor()  # STUDENT and STudent are# two different databasestatement =\"SELECT S.Name from STUDENT S RIGHT \\JOIN Student s ON S.Roll_no = s.Roll_no\"  cs.execute(statement)result_set = cs.fetchall()  for x in result_set:    print(x)\']','[\'SELECT column1, column2...\nFROM tablename\nJOIN tablename ON condition;\', \'SELECT column1, column2...\nFROM tablename\nINNER JOIN tablename ON condition;\', \'SELECT column1, column2...\nFROM tablename\nLEFT JOIN tablename ON condition;\', \'SELECT column1, column2...\nFROM tablename\nRIGHT JOIN tablename ON condition;\']','[]','[\'INNER JOINgives the records that are produced by matching columns. JOIN and INNER JOIN both work the same.Syntax:SELECT column1, column2...\nFROM tablename\nJOIN tablename ON condition;SELECT column1, column2...\nFROM tablename\nINNER JOIN tablename ON condition;|||LEFT JOINgives those records from table 1 removing exclusive contents of 2Syntax:SELECT column1, column2...\nFROM tablename\nLEFT JOIN tablename ON condition;|||RIGHT JOINgives all records from table 2 after removing exclusive records of 1.Syntax:SELECT column1, column2...\nFROM tablename\nRIGHT JOIN tablename ON condition;\']'),(162,'[\'Python MongoDB Tutorial\']','[\'Introduction\', \'Getting Started\', \'MongoDB Queries\', \'Working with Collections and documents in MongoDB\', \'Indexing in MongoDB\', \'Conversion between MongoDB data and Structured data\', \'Questions on MongoDB\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/#introduction\', \'https://www.geeksforgeeks.org/#getting\', \'https://www.geeksforgeeks.org/#queries\', \'https://www.geeksforgeeks.org/#working\', \'https://www.geeksforgeeks.org/#indexing\', \'https://www.geeksforgeeks.org/#conversion\', \'https://www.geeksforgeeks.org/#questions\', \'https://www.geeksforgeeks.org/tag/python-mongodb/\', \'http://geeksforgeeks.org/mongodb-an-introduction/\', \'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://www.geeksforgeeks.org/guide-install-mongodb-python-windows/\', \'https://www.geeksforgeeks.org/how-do-document-databases-work/\', \'https://www.geeksforgeeks.org/what-is-a-pymongo-cursor/\', \'https://www.geeksforgeeks.org/create-a-database-in-mongodb-using-python/\', \'https://www.geeksforgeeks.org/python-mongodb-query/\', \'http://geeksforgeeks.org/mongodb-python-insert-update-data/\', \'https://www.geeksforgeeks.org/python-mongodb-insert_one-query/\', \'https://www.geeksforgeeks.org/python-mongodb-insert_many-query/\', \'https://www.geeksforgeeks.org/difference-between-insert-insertone-and-insertmany-in-pymongo/\', \'https://www.geeksforgeeks.org/python-mongodb-update_one/\', \'https://www.geeksforgeeks.org/python-mongodb-update_many-query/\', \'http://geeksforgeeks.org/mongodb-python-insert-replace_one-replace_many/\', \'http://geeksforgeeks.org/mongodb-python-delete-data-drop-collection/\', \'https://www.geeksforgeeks.org/python-mongodb-delete_one/\', \'https://www.geeksforgeeks.org/python-mongodb-delete_many/\', \'http://geeksforgeeks.org/python-mongodb-find/\', \'https://www.geeksforgeeks.org/python-mongodb-find_one-query/\', \'https://www.geeksforgeeks.org/python-mongodb-find_one_and_update-query/\', \'https://www.geeksforgeeks.org/python-mongoddb-find_one_and_delete-query/\', \'https://www.geeksforgeeks.org/python-mongodb-find_one_and_replace-query/\', \'http://geeksforgeeks.org/python-mongodb-sort/\', \'https://www.geeksforgeeks.org/python-mongodb-distinct/\', \'https://www.geeksforgeeks.org/python-mongodb-rename/\', \'https://www.geeksforgeeks.org/python-mongodb-bulk_write/\', \'https://www.geeksforgeeks.org/python-mongodb-group-aggregation/\', \'https://www.geeksforgeeks.org/python-mongodb-limit-query/\', \'https://www.geeksforgeeks.org/nested-queries-in-pymongo/\', \'https://www.geeksforgeeks.org/how-to-access-a-collection-in-mongodb-using-python/\', \'https://www.geeksforgeeks.org/get-the-names-of-all-collections-using-pymongo/\', \'https://www.geeksforgeeks.org/drop-collection-if-already-exists-in-mongodb-using-python/\', \'https://www.geeksforgeeks.org/how-to-update-data-in-a-collection-using-python/\', \'https://www.geeksforgeeks.org/get-all-the-documents-of-the-collection-using-pymongo/\', \'https://www.geeksforgeeks.org/count-the-number-of-documents-in-mongodb-using-python/\', \'https://www.geeksforgeeks.org/update-all-documents-in-a-collection-using-pymongo/\', \'https://www.geeksforgeeks.org/aggregation-in-mongodb-using-python/\', \'https://www.geeksforgeeks.org/indexing-in-mongodb-using-python/\', \'https://www.geeksforgeeks.org/python-mongodb-create_index-query/\', \'https://www.geeksforgeeks.org/how-to-create-index-for-mongodb-collection-using-python/\', \'https://www.geeksforgeeks.org/get-all-the-information-of-a-collections-indexes-using-pymongo/\', \'https://www.geeksforgeeks.org/python-mongodb-drop_index-query/\', \'https://www.geeksforgeeks.org/how-to-drop-all-the-indexes-in-a-collection-using-pymongo/\', \'https://www.geeksforgeeks.org/how-to-rebuild-all-the-indexes-of-a-collection-using-pymongo/\', \'https://www.geeksforgeeks.org/how-to-import-json-file-in-mongodb-using-python/\', \'https://www.geeksforgeeks.org/convert-pymongo-cursor-to-json/\', \'https://www.geeksforgeeks.org/convert-pymongo-cursor-to-dataframe/\', \'https://www.geeksforgeeks.org/how-to-check-if-the-pymongo-cursor-is-empty/\', \'https://www.geeksforgeeks.org/how-to-fetch-data-from-mongodb-using-python/\', \'https://www.geeksforgeeks.org/geospatial-queries-with-python-mongodb/\', \'https://www.geeksforgeeks.org/3d-plotting-sample-data-from-mongodb-atlas-using-python/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Table Of Content:\', \'Recent Articles on Python MongoDB !!\']','[\'MongoDB is one of the most popular NoSQL database. It is a cross-platform, object-oriented database. Basically NoSQL means MongoDB does not store data in the table or relational format rather provide a different mechanism for storage and retrieval of data. This is called BSON which is similar to JSON. That’s why MongoDB offers high speed, high availability, and high scalability.\', \'This MongoDB tutorial will help you learn the interaction of MongoDB database with Python from Basics to Advance using a huge set of Python MongoDB programs and projects.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[]','[]','[]','[\'Introduction|||Getting Started|||MongoDB Queries|||Working with Collections and documents in MongoDB|||Indexing in MongoDB|||Conversion between MongoDB data and Structured data|||Questions on MongoDB&&&MongoDB: An introduction|||MongoDB and Python|||Guide to Install MongoDB with Python | Windows&&&How do Document Databases Work?|||What is a PyMongo Cursor?|||Create a database in MongoDB using Python&&&What is a MongoDB Query?|||Insert and Update Data Query|||insert_one Query|||insert_many Query|||Difference Between insert, insert_one, and insert_many queries in Pymongo|||Update_one Query|||Update_many Query|||insert, replace_one, replace_many Queries|||Delete Data and Drop Collection|||Delete_one Query|||Delete_many Query|||Find Query|||find_one Query|||find_one_and_update Query|||find_one_and_delete query|||find_one_and_replace Query|||Sort Query|||distinct Query|||rename Query|||bulk_write Query|||$group (aggregation) Operation|||Limit Query|||Nested Queries in PyMongo&&&How to access a collection in MongoDB using Python?|||Get the Names of all Collections using PyMongo|||Drop Collection if already exists in MongoDB using Python|||How to update data in a Collection using Python?|||Get all the Documents of the Collection using PyMongo|||Count the number of Documents in MongoDB using Python|||Update all Documents in a Collection using PyMongo|||Aggregation in MongoDB using Python&&&Indexing in MongoDB using Python|||Python MongoDB – create_index Query|||How to create index for MongoDB Collection using Python?|||Get all the information of a Collection’s indexes using PyMongo|||drop_index Query|||How to Drop all the indexes in a Collection using PyMongo?|||How to rebuild all the indexes of a collection using PyMongo?&&&How to import JSON File in MongoDB using Python?|||Convert PyMongo Cursor to JSON|||Convert PyMongo Cursor to Dataframe&&&How to check if the PyMongo Cursor is Empty?|||How to fetch data from MongoDB using Python?|||Geospatial Queries with Python MongoDB|||3D Plotting sample Data from MongoDB Atlas Using Python\']'),(163,'[\'Installing MongoDB on Windows with Python\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/rough.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/rough2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/rough6.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/rough3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/rough4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/rough5.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.mongodb.com/dr/fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.4.10-signed.msi/download\', \'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://www.linkedin.com/in/shaurya-uppal-3b7a6373/\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Step 1 -> Install the community EditionInstallation Link\', \'Step 2 -> Run the installed MongoDB windows installer package that you just downloaded.\', \'MongoDB get installed here->\', \'Step 3 -> Let’s set MongoDB environment\', \'Wait till the connection message appears\', \'(d) To Connect to MongoDBOpen other command prompt and run->\', \'Step 4-> Ready MongoDBOpen Command Prompt(Admin mode) type->\', \'Below steps from step 5 to step 8 are optional :Step 5-> Open command prompt and run-\', \'Step 8-> To start & stop MongoDB runTo start :\', \'Step 10 -> Install package to use MongoDBTo install this package with conda run:\']','[\'We would explain the installation of MongoDB in steps. Before you install, I would suggest everyone use ide spyder, Anaconda.\', \'(c) Verify Environment Path or set path if not correctly setOpen environment variables, you can search this by windows search.\', \'Open Environment Variable under the System variables section open Path.This would look like this.Add the path of bin folder as shown in the image above.\', \'NOTE : Till step 4 MongoDB will work only when the Command Prompt is open and it’s listening.Now we’ll see Extension to make it better.\', \'Step 6-> Create a configuration file at C:\\Program Files\\MongoDB\\Server\\3.4\\mongod.cfg (name of file mongod.cfg)\', \'This can be created and saved in Admin mode of Notepad or Notepad++ or any other editor to run notepad admin mode press Ctrl + Shift + Enter. Admin mode of notepad will let you create mongod.cfg and save above text file.\', \'Step 7 -> Install the MongoDB service by starting mongod.exe with the –install option and the -config option to specify the previously created configuration file.Now run this command on command prompt\', \'NOTE : ALL commands are run on Command Prompt Admin mode, to open command prompt Admin Mode either open normal command prompt and press Ctrl+Shift+Enter or Right click on left windows icon start button where you can see the options.Step 9 -> Open Anaconda Command Prompt as shown in the image.\', \'Congratulations!! Installation completed.( Pymongo works only when MongoDB is started, use net start MongoDB to start it and then work on spyder)You can study and understand MongoDB in python here.\', \'This article is contributed by SHAURYA UPPAL. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[]','[\'C:\\Program Files\\MongoDB\\Server\\3.4\\\', \'md C:\\data\\db\', \'\"C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongod.exe\"\', \'\"C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongo.exe\', \'mongod\', \'mkdir c:\\data\\db\nmkdir c:\\data\\log\', \'systemLog:\n    destination: file\n    path: c:\\data\\log\\mongod.log\nstorage:\n    dbPath: c:\\data\\db\', \'\"C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongod.exe\" \n--config \"C:\\Program Files\\MongoDB\\Server\\3.4\\mongod.cfg\" --install\', \'net start MongoDB\', \'net stop MongoDB\', \'conda install -c anaconda pymongo\']','[]','[\'(a) Create data directory where all data is stored.On C: drive create a folder data inside it create a folder dborRunmd C:\\data\\db|||(b) To start MongoDBRun ->\"C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongod.exe\"\nWait till the connection message appears|||(c) Verify Environment Path or set path if not correctly setOpen environment variables, you can search this by windows search.Open Environment Variable under the System variables section open Path.This would look like this.Add the path of bin folder as shown in the image above.|||(d) To Connect to MongoDBOpen other command prompt and run->\"C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongo.exe\n\']'),(164,'[\'MongoDB and Python\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/MongoDB_and_Python_1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/rough6.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/MongoDB_and_Python_2.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/mongodb-an-introduction/\', \'https://docs.mongodb.com/manual/tutorial/model-tree-structures/\', \'https://www.geeksforgeeks.org/guide-install-mongodb-python-windows/\', None, \'http://contribute.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'MongoDB vs RDBMS\', \'MongoDB and PyMongo Installation Guide\', \'orMethod 2:\', \'It can also be done using the following command:\', \'Method 2 :\', \'>MongoDB store the database in the form of dictionaries as shown:>\', \'The whole code looks likes this when needs to be implemented.\', \'These two query functions can be summed to give a give the most filtered result as shown below.\', \'This article is contributed by Rishabh Bansal and Shaurya Uppal.\']','[\'Prerequisite : MongoDB : An introductionMongoDB is a cross-platform, document-oriented database that works on the concept of collections and documents. MongoDB offers high speed, high availability, and high scalability.The next question which arises in the mind of the people is “Why MongoDB”?Reasons to opt for MongoDB :\', \'See port number by default is set 27017 (last line in above image).Python has a native library for MongoDB. The name of the available library is “PyMongo”. To import this, execute the following command:\', \'After this, connect to the default host and port. Connection to the host and port is done explicitly. The following command is used to connect the MongoClient on the localhost which runs on port number 27017.\', \'If there is no previously created database with this name, MongoDB will implicitly create one for the user.Note : The name of the database fill won’t tolerate any dash (-) used in it. The names like my-Table will raise an error. So, underscore are permitted to use in the name.\', \'‘_id’ is the special key which get automatically added if the programmer forgets to add explicitly. _id is the 12 bytes hexadecimal number which assures the uniqueness of every inserted document.\', \'We normally use insert_one() method document into our collections. Say, we wish to enter the data named as record into the ’myTable’ of ‘mydatabase’.\', \'This will output all the documents in the myTable of mydatabase whose title is ‘MongoDB and Python’.\', \'This will output the numbers of documents in the myTable of mydatabase whose title is ‘MongoDB and Python’.\', \'If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\', \'Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\']','[]','[\'from pymongo import MongoClient\', \'from pymongo import MongoClientclient = MongoClient()\', \'client = MongoClient(‘host’, port_number)example:- client = MongoClient(‘localhost’, 27017)\', \'client = MongoClient(“mongodb://localhost:27017/”)\', \'mydatabase = client[‘name_of_the_database’]\', \'mydatabase = client.name_of_the_database\', \'mycollection = mydatabase[‘myTable’]\', \'mycollection = mydatabase.myTable\', \'rec = myTable.insert_one(record)\', \"# importing modulefrom pymongo import MongoClient  # creation of MongoClientclient=MongoClient()  # Connect with the portnumber and hostclient = MongoClient(“mongodb://localhost:27017/”)  # Access databasemydatabase = client[‘name_of_the_database’]  # Access collection of the databasemycollection=mydatabase[‘myTable’]  # dictionary to be added in the databaserec={title: \'MongoDB and Python\', description: \'MongoDB is no SQL database\', tags: [\'mongodb\', \'database\', \'NoSQL\'], viewers: 104 }  # inserting the data in the databaserec = mydatabase.myTable.insert(record)\", \"for i in mydatabase.myTable.find({title: \'MongoDB and Python\'})    print(i)\", \"print(mydatabase.myTable.count({title: \'MongoDB and Python\'}))\", \"print(mydatabase.myTable.find({title: \'MongoDB and Python\'}).count())\", \'from pymongo import MongoClient  try:    conn = MongoClient()    print(\"Connected successfully!!!\")except:      print(\"Could not connect to MongoDB\")  # database name: mydatabasedb = conn.mydatabase  # Created or Switched to collection names: myTablecollection = db.myTable  # To find() all the entries inside collection name \'myTable\'cursor = collection.find()for record in cursor:    print(record)\']','[\'mongod\', \'net start MongoDB\', \"record = {\ntitle: \'MongoDB and Python\', \ndescription: \'MongoDB is no SQL database\', \ntags: [\'mongodb\', \'database\', \'NoSQL\'], \nviewers: 104 \n}\", \'insert_one() or insert_many()\']','[]','[\'It supports hierarchical data structure (Please refer docs for details)|||It supports associate arrays like Dictionaries in Python.|||Built-in Python drivers to connect python-application with Database. Example- PyMongo|||It is designed for Big Data.|||Deployment of MongoDB is very easy.&&&First start MongoDB from command prompt using :Method 1:mongodorMethod 2:net start MongoDBSee port number by default is set 27017 (last line in above image).Python has a native library for MongoDB. The name of the available library is “PyMongo”. To import this, execute the following command:from pymongo import MongoClient|||Create a connection : The very first after importing the module is to create a MongoClient.from pymongo import MongoClientclient = MongoClient()After this, connect to the default host and port. Connection to the host and port is done explicitly. The following command is used to connect the MongoClient on the localhost which runs on port number 27017.client = MongoClient(‘host’, port_number)example:- client = MongoClient(‘localhost’, 27017)It can also be done using the following command:client = MongoClient(“mongodb://localhost:27017/”)|||Access DataBase Objects : To create a database or switch to an existing database we use:Method 1 : Dictionary-stylemydatabase = client[‘name_of_the_database’]Method2 :mydatabase = client.name_of_the_databaseIf there is no previously created database with this name, MongoDB will implicitly create one for the user.Note : The name of the database fill won’t tolerate any dash (-) used in it. The names like my-Table will raise an error. So, underscore are permitted to use in the name.|||Accessing the Collection : Collections are equivalent to Tables in RDBMS. We access a collection in PyMongo in the same way as we access the Tables in the RDBMS. To access the table, say table name “myTable” of the database, say “mydatabase”.Method 1:mycollection = mydatabase[‘myTable’]Method 2 :\n                          var adpushup = window.adpushup  = window.adpushup || {que:[]};\n                          adpushup.que.push(function() {\n                            adpushup.triggerAd(\"1b4172cd-acc7-4363-9184-3fadd3cdabcf\");\n                          });\n                        mycollection = mydatabase.myTable>MongoDB store the database in the form of dictionaries as shown:>record = {\ntitle: \'MongoDB and Python\', \ndescription: \'MongoDB is no SQL database\', \ntags: [\'mongodb\', \'database\', \'NoSQL\'], \nviewers: 104 \n} ‘_id’ is the special key which get automatically added if the programmer forgets to add explicitly. _id is the 12 bytes hexadecimal number which assures the uniqueness of every inserted document.|||Insert the data inside a collection :Methods used:insert_one() or insert_many()We normally use insert_one() method document into our collections. Say, we wish to enter the data named as record into the ’myTable’ of ‘mydatabase’.rec = myTable.insert_one(record)The whole code looks likes this when needs to be implemented.# importing modulefrom pymongo import MongoClient# creation of MongoClientclient=MongoClient()# Connect with the portnumber and hostclient = MongoClient(“mongodb://localhost:27017/”)# Access databasemydatabase = client[‘name_of_the_database’]# Access collection of the databasemycollection=mydatabase[‘myTable’]# dictionary to be added in the databaserec={title: \'MongoDB and Python\',description: \'MongoDB is no SQL database\',tags: [\'mongodb\', \'database\', \'NoSQL\'],viewers: 104}# inserting the data in the databaserec = mydatabase.myTable.insert(record)|||Querying in MongoDB : There are certain query functions which are used to filer the data in the database. The two most commonly used functions are:find()find() is used to get more than one single document as a result of query.for i in mydatabase.myTable.find({title: \'MongoDB and Python\'})print(i)This will output all the documents in the myTable of mydatabase whose title is ‘MongoDB and Python’.count()count() is used to get the numbers of documents with the name as passed int he parameters.print(mydatabase.myTable.count({title: \'MongoDB and Python\'}))This will output the numbers of documents in the myTable of mydatabase whose title is ‘MongoDB and Python’.These two query functions can be summed to give a give the most filtered result as shown below.print(mydatabase.myTable.find({title: \'MongoDB and Python\'}).count())To print all the documents/entries inside ‘myTable’ of database ‘mydatabase’ : Use the following code:from pymongo import MongoClienttry:conn = MongoClient()print(\"Connected successfully!!!\")except:print(\"Could not connect to MongoDB\")# database name: mydatabasedb = conn.mydatabase# Created or Switched to collection names: myTablecollection = db.myTable# To find() all the entries inside collection name \'myTable\'cursor = collection.find()for record in cursor:print(record)This article is contributed by Rishabh Bansal and Shaurya Uppal.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave|||find()find() is used to get more than one single document as a result of query.for i in mydatabase.myTable.find({title: \'MongoDB and Python\'})print(i)This will output all the documents in the myTable of mydatabase whose title is ‘MongoDB and Python’.|||count()count() is used to get the numbers of documents with the name as passed int he parameters.print(mydatabase.myTable.count({title: \'MongoDB and Python\'}))This will output the numbers of documents in the myTable of mydatabase whose title is ‘MongoDB and Python’.These two query functions can be summed to give a give the most filtered result as shown below.print(mydatabase.myTable.find({title: \'MongoDB and Python\'}).count())|||To print all the documents/entries inside ‘myTable’ of database ‘mydatabase’ : Use the following code:from pymongo import MongoClienttry:conn = MongoClient()print(\"Connected successfully!!!\")except:print(\"Could not connect to MongoDB\")# database name: mydatabasedb = conn.mydatabase# Created or Switched to collection names: myTablecollection = db.myTable# To find() all the entries inside collection name \'myTable\'cursor = collection.find()for record in cursor:print(record)&&&find()find() is used to get more than one single document as a result of query.for i in mydatabase.myTable.find({title: \'MongoDB and Python\'})print(i)This will output all the documents in the myTable of mydatabase whose title is ‘MongoDB and Python’.|||count()count() is used to get the numbers of documents with the name as passed int he parameters.print(mydatabase.myTable.count({title: \'MongoDB and Python\'}))This will output the numbers of documents in the myTable of mydatabase whose title is ‘MongoDB and Python’.These two query functions can be summed to give a give the most filtered result as shown below.print(mydatabase.myTable.find({title: \'MongoDB and Python\'}).count())|||To print all the documents/entries inside ‘myTable’ of database ‘mydatabase’ : Use the following code:from pymongo import MongoClienttry:conn = MongoClient()print(\"Connected successfully!!!\")except:print(\"Could not connect to MongoDB\")# database name: mydatabasedb = conn.mydatabase# Created or Switched to collection names: myTablecollection = db.myTable# To find() all the entries inside collection name \'myTable\'cursor = collection.find()for record in cursor:print(record)\']'),(165,'[\'Create a database in MongoDB using Python\']','[\'Creating a database using Python in MongoDB\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200506191746/python-create-database-mongodb1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200506192100/python-mongodvb-create-database-2.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'List of databases using MongoDB shell (before):\', \'We can check if the database is present in the list of databases using the following code:\', \'List of Databases in MongoDB shell (after):\']','[\'MongoDB is a general-purpose, document-based, distributed database built for modern application developers and the cloud. It is a document database, which means it stores data in JSON-like documents. This is an efficient way to think about data and is more expressive and powerful than the traditional table model.\', \'MongoDB has no separate command to create a database. Instead, it uses the use command to create a database. The use command is used to switch to the specific database. If the database name specified after the use keyword does not exist, then a new database is created with the specified name.\', \'To use Python in MongoDB, we are going to import PyMongo. From that, MongoClient can be imported which is used to create a client to the database. Using the client, a new database can be created.\', \'In the above example, it is clearly shown how a database is created. When creating a client, the local host along with its port number, which is 27017 here, is passed to the MongoClient. Then, by using the client, a new database named ‘GFG’ is created.\']','[]','[\'# import MongoClientfrom pymongo import MongoClient    # Creating a clientclient = MongoClient(\'localhost\', 27017)  # Greating a database name GFGdb = client[\'GFG\']print(\"Database is created !!\")\', \'list_of_db = client.list_database_names()  if \"mydbase\" in list_of_db:    print(\"Exists !!\")\']','[\'Database is created!!\', \'Exists!!\']','[]','[]'),(166,'[\'Python MongoDB – insert_one Query\']','[\'insert_one()xa0\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200519152511/python-mongodb-sample-database.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200519152905/python-mongodb-insert-one-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200519153519/python-mongodb-insert-one-2.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax: xa0collection.insert_one(document, xa0bypass_document_validation=False, session=None)\', \'Parameters:xa0\', \'Example 1:xa0\', \'Sample Database:\', \'Example 2: Inserting multiple values\']','[\'MongoDB is a cross-platform document-oriented and a non relational (i.e NoSQL) database program. It is an open-source document database, that stores the data in the form of key-value pairs. MongoDB is developed by MongoDB Inc. and initially released on 11 February 2009. It is written in C++, Go, JavaScript, Python languages. MongoDB offers high speed, high availability, and high scalability.\']','[\'This is a method by which we can insert a single entry within the collection or the database in MongoDB. If the collection does not exist this method creates a new collection and insert the data into it. It takes dictionary as a parameter containing the name and value of each field in the document you want to insert in the collection.xa0This method returns an instance of class “~pymongo.results.InsertOneResult” which has a “_id” field that holds the id of the inserted document. If the document does not specify an “_id” field, then MongoDB will add the “_id” field and assign a unique object id for the document before inserting.\']','[\'# importing Mongoclient from pymongofrom pymongo import MongoClient   # Making Connectionmyclient = MongoClient(\"mongodb://localhost:27017/\")   # database db = myclient[\"GFG\"]  # Created or Switched to collection # names: GeeksForGeekscollection = db[\"Student\"]  # Creating Dictionary of records to be # insertedrecord = { \"_id\": 5,          \"name\": \"Raju\",          \"Roll No\": \"1005\",          \"Branch\": \"CSE\"}      # Inserting the record1 in the collection # by using collection.insert_one()rec_id1 = collection.insert_one(record)\', \'# importing Mongoclient from pymongofrom pymongo import MongoClient     # Making Connectionmyclient = MongoClient(\"mongodb://localhost:27017/\")   # database db = myclient[\"GFG\"]  # Created or Switched to collection # names: GeeksForGeekscollection = db[\"Student\"]  # Creating Dictionary of records to be # insertedrecords = {    \"record1\": { \"_id\": 6,    \"name\": \"Anshul\",    \"Roll No\": \"1006\",    \"Branch\": \"CSE\"},      \"record2\": { \"_id\": 7,    \"name\": \"Abhinav\",    \"Roll No\": \"1007\",    \"Branch\": \"ME\"}}    # Inserting the records in the collection # by using collection.insert_one()for record in records.values():    collection.insert_one(record)\']','[]','[]','[\'‘document’: The document to insert. Must be a mutable mapping type. If the document does not have an _id field one will be added automatically.|||‘bypass_document_validation’ (optional): If “True”, allows the write to opt-out of document level validation. Default is “False”.|||‘session’ (optional): a class ‘~pymongo.client_session.ClientSession’.\']'),(167,'[\'Python MongoDB – insert_many Query\']','[\'insert_many()\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200515220245/python-mongodb-insert-many.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200515220520/python-mongodb-insert-many-2.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1: In this example _id is provided.xa0xa0\', \'Example 2: In this example _id is not provided, it is allocated automatically by MongoDB.xa0xa0\']','[\'MongoDB is a cross-platform document-oriented and a non relational (i.e NoSQL) database program. It is an open-source document database, that stores the data in the form of key-value pairs. MongoDB is developed by MongoDB Inc. and initially released on 11 February 2009. It is written in C++, Go, JavaScript, Python languages. MongoDB offers high speed, high availability, and high scalability.xa0\', \'Syntax: collection.insert_many(documents, ordered=True, bypass_document_validation=False, session=None)Parameters:xa0xa0\']','[\'This method is used to insert multiple entries in a collection or the database in MongoDB. The parameter of this method is a list that contains dictionaries of the data that we want to insert in the collection.This method returns an instance of class “~pymongo.results.InsertManyResult” which has a “_id” field that holds the id of the inserted documents. If the document does not specify an “_id” field, then MongoDB will add the “_id” field to all the data in the list and assign a unique object id for the documents before inserting.xa0\']','[\'# importing Mongoclient from pymongofrom pymongo import MongoClient  myclient = MongoClient(\"mongodb://localhost:27017/\") # databasedb = myclient[\"GFG\"] # Created or Switched to collection# names: GeeksForGeekscollection = db[\"Student\"] # Creating a list of records which we# insert in the collection using the# update_many() method.mylist = [  { \"_id\": 1, \"name\": \"Vishwash\", \"Roll No\": \"1001\", \"Branch\":\"CSE\"},  { \"_id\": 2, \"name\": \"Vishesh\", \"Roll No\": \"1002\", \"Branch\":\"IT\"},  { \"_id\": 3, \"name\": \"Shivam\", \"Roll No\": \"1003\", \"Branch\":\"ME\"},  { \"_id\": 4, \"name\": \"Yash\", \"Roll No\": \"1004\", \"Branch\":\"ECE\"},] # In the above list _id field is provided so it inserted in# the collection as specified. # Inserting the entire list in the collectioncollection.insert_many(mylist)\', \'# importing Mongoclient from pymongofrom pymongo import MongoClient  myclient = MongoClient(\"mongodb://localhost:27017/\") # databasedb = myclient[\"GFG\"] # Created or Switched to collection# names: GeeksForGeekscollection = db[\"Geeks\"] # Creating a list of records which we# insert in the collection using the# update_many() method.mylist = [  {\"Manufacturer\":\"Honda\", \"Model\":\"City\", \"Color\":\"Black\"},  {\"Manufacturer\":\"Tata\", \"Model\":\"Altroz\", \"Color\":\"Golden\"},  {\"Manufacturer\":\"Honda\", \"Model\":\"Civic\", \"Color\":\"Red\"},  {\"Manufacturer\":\"Hyundai\", \"Model\":\"i20\", \"Color\":\"white\"},  {\"Manufacturer\":\"Maruti\", \"Model\":\"Swift\", \"Color\":\"Blue\"},]# In the above list we do not specify the _id, the MongoDB assigns# a unique id to all the records in the collection by default. # Inserting the entire list in the collectioncollection.insert_many(mylist)\']','[]','[]','[\'‘documents’ : A iterable of documents to insert.|||‘ordered’ (optional): If “True” (the default) documents will be inserted on the server serially, in the order provided. If an error occurs all remaining inserts are aborted. If “False”, documents will be inserted on the server in arbitrary order, possibly in parallel, and all document inserts will be attempted.|||‘bypass_document_validation’ (optional) : If “True”, allows the write to opt-out of document level validation. Default is “False”.|||‘session’ (optional): a class ‘~pymongo.client_session.ClientSession’.\']'),(168,'[\'Python MongoDB – Find\']','[\'Finding data from the collection or the database\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200226132249/python-mongodb-db1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200226132638/python-mongodb-find-one1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200226133152/python-mongodb-fond-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200226134151/python-mongodb-3.png\']','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1: Find the first document from the student’s collection/database.\', \'Let’s suppose the database looks like this –\', \'Note: It works the same as SELECT* without any parameter.\', \'Example: Return only the names and address, not the id:\']','[\'In MongoDB, there are 2 functions that are used to find the data from the collection or the database.\', \'In MongoDB, to select data from the collection we use find_one() method. It returns the first occurred information in the selection and brings backs as an output. In find_one() method there are no parameters required as it brings the first occurrence of information from the database.\', \'find() method is used to select data from the database. It returns all the occurrences of the information stored in the collection. It has 2 types of parameters, The first parameter of the find() method is a query object. In the below example we will use an empty Query object, which will select all information from the collection.\', \'The second parameter to the find() method is that you can specify the field to include in the result. The second parameter passed in the find() method is of object type describing the field. Thus, this parameter is optional.\', \'If omitted then all the fields from the collection/database will be displayed into the result.To include the field in the result the value of the parameter passed should be 1, if the value is 0 then it will be excluded from the result.\']','[\'MongoDB is a cross-platform document-oriented database program and the most popular NoSQL database program. The term NoSQL means non-relational. MongoDB stores the data in the form of key-value pairs. It is an Open Source, Document Database which provides high performance and scalability along with data modeling and data management of huge sets of data in an enterprise application. MongoDB also provides the feature of Auto-Scaling. It uses JSON like documents, which makes the database very flexible and scalable.\']','[\'# Python program to demonstrate# find_one()    import pymongo    mystudent = pymongo.MongoClient(\'localhost\', 27017)  # Name of the databasemydb = mystudent[\"gfg\"]  # Name of the collectionmycol = mydb[\"names\"]  x = mycol.find_one()  print(x)\', \'import pymongo    # establishing connection# to the databasemy_client = pymongo.MongoClient(\'localhost\', 27017)  # Name of the databasemydb = my_client[\"gfg\"]  # Name of the collectionmynew = mydb[\"names\"]  for x in mycol.find():    print(x)\', \'import pymongo    # establishing connection# to the databasemy_client = pymongo.MongoClient(\'localhost\', 27017)  # Name of the databasemydb = my_client[\"gfg\"]  # Name of the collectionmynew = mydb[\"names\"]    for x in mycol.find({}, {\"_id\":0, \"name\": 1, \"address\": 1 }):    print(x)\']','[]','[]','[\'find_one()|||find()\']'),(169,'[\'Python MongoDB – Query\']','[\'What is a MongoDB Query?\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200604185334/Mongo15.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200604193256/Ex119.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200604193219/EX215.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Query Selectors:\', \'Following is the list of some operators used in the queries in MongoDB.\', \'The Database or Collection on which we operate:\', \'Example 1:\', \'Example 2:\']','[\'MongoDB is a cross-platform document-oriented and a non relational (i.e NoSQL) database program. It is an open-source document database, that stores the data in the form of key-value pairs.\', \'MongoDB query is used to specify the selection filter using query operators while retrieving the data from the collection by db.find() method. We can easily filter the documents using the query object. To apply the filter on the collection, we can pass the query specifying the condition for the required documents as a parameter to this method, which is an optional parameter for db.find() method.\']','[]','[\'# importing Mongoclient from pymongofrom pymongo import MongoClient     # Making Connectionmyclient = MongoClient(\"mongodb://localhost:27017/\")    # database db = myclient[\"mydatabase\"]   # Created or Switched to collection# names: GeeksForGeeksCollection = db[\"GeeksForGeeks\"]  # Filtering the Quantities greater# than 40 using query.cursor = Collection.find({\"Quantity\":{\"$gt\":40}})  # Printing the filterd data.print(\"The data having Quantity greater than 40 is:\")for record in cursor:     print(record)       # Filtering the Quantities less # than 40 using query.cursor = Collection.find({\"Quantity\":{\"$lt\":40}})  # Printing the filterd data.print(\"\\nThe data having Quantity less than 40 is:\")for record in cursor:     print(record)\', \'# importing Mongoclient from pymongofrom pymongo import MongoClient     # Making Connectionmyclient = MongoClient(\"mongodb://localhost:27017/\")    # database db = myclient[\"mydatabase\"]   # Created or Switched to collection # names: GeeksForGeeksCollection = db[\"GeeksForGeeks\"]  # Filtering the (Quantities greater than# 40 AND greater than 40) using AND query.cursor = Collection.find({\"$and\":[{\"Quantity\":{\"$gt\":40}},                                  {\"Quantity\":{\"$gt\":50}}]})  # Printing the filterd data.print(\"Quantities greater than 40 AND\\Quantities greater than 40 :\")for record in cursor:     print(record)   # Filtering the (Quantities greater than# 40 OR greater than 40) using OR query.cursor = Collection.find({\"$or\":[{\"Quantity\":{\"$gt\":40}},                                 {\"Quantity\":{\"$gt\":50}}]})  # Printing the filterd data.print()print(\"Quantities greater than 40 OR\\Quantities greater than 40 :\")for record in cursor:     print(record)\']','[]','[]','[]'),(170,'[\'Python MongoDB – Sort\']','[]','[\'Sorting the MongoDB documents\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200226130803/python-mongodb-db.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200226131211/python-mongodb-sort-1.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Note: For more information, refer to MongoDB and Python\', \'Example 1: Using sort() function to sort the result alphabetically by name.\', \'Let’s suppose the database looks like this –\', \'Example 2: Sorting in descending order\']','[\'sort() method is used for sorting the database in some order. This method accepts two parameters first is the fieldname and the second one is for the direction to sort. (By default it sorts in ascending order)\', \'Note: 1 as the direction is used for ascending order and -1 as the direction is used for descending order\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'MongoDB is a cross-platform document-oriented database program and the most popular NoSQL database program. The term NoSQL means non-relational. MongoDB stores the data in the form of key-value pairs. It is an Open Source, Document Database which provides high performance and scalability along with data modeling and data management of huge sets of data in an enterprise application. MongoDB also provides the feature of Auto-Scaling. It uses JSON like documents, which makes the database very flexible and scalable.\']','[\'# python code to sort elements# alphabetically in ascending order   import pymongo    # establishing connection# to the databasemy_client = pymongo.MongoClient(\'localhost\', 27017)  # Name of the databasemydb = my_client[\"gfg\"]  # Name of the collectionmynew = mydb[\"names\"]   # sorting function mydoc = mynew.find().sort(\"name\")   for x in mydoc:    print(x)\', \'import pymongo    # establishing connection # to the databasemy_client = pymongo.MongoClient(\'localhost\', 27017)  # Name of the databasemydb = my_client[\"gfg\"]  # Name of the collectionmynew = mydb[\"names\"]   # sorting function with -1 # as directionmydoc = mynew.find().sort(\"name\", -1)   for x in mydoc:    print(x)\']','[\'sort(fieldname, direction)\']','[]','[]'),(171,'[\'MongoDB python | Delete Data and Drop Collection\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/mongodb-getting-started/\', \'https://www.geeksforgeeks.org/mongodb-python-insert-update-data/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisite : MongoDB Basics, Insert and Update\', \'Method 2 : Delete all documents using collection.remove()\', \'We first insert a document in the collection then deleted the documents as per query.\']','[\'Aim : To delete entries/documents of a collection in a database. Assume name of collection ‘my_collection’.Method used : delete_one() or delete_many()\', \'Best method to remove is to drop the collection so that data indexes are also removed and then create a new collection in that insert data.\']','[]','[\'# Python program to illustrate # delete, drop and removefrom pymongo import MongoClient  try:    conn = MongoClient()    print(\"Connected successfully!!!\")except:      print(\"Could not connect to MongoDB\")  # databasedb = conn.database  # Created or Switched to collection names: my_gfg_collectioncollection = db.my_gfg_collection  emp_rec1 = {        \"name\":\"Mr.Geek\",        \"eid\":24,        \"location\":\"delhi\"        }emp_rec2 = {        \"name\":\"Mr.Shaurya\",        \"eid\":14,        \"location\":\"delhi\"        }emp_rec3 = {        \"name\":\"Mr.Coder\",        \"eid\":14,        \"location\":\"gurugram\"        }   # Insert Datarec_id1 = collection.insert_one(emp_rec1)rec_id2 = collection.insert_one(emp_rec2)rec_id3 = collection.insert_one(emp_rec3)print(\"Data inserted with record ids\",rec_id1,\" \",rec_id2,rec_id3)  # Printing the document before deletioncursor = collection.find()for record in cursor:    print(record)  # Delete Document with name : Mr Coderresult = collection.delete_one({\"name\":\"Mr.Coder\"})  # If query would have been delete all entries with eid:14# use this# result = collection.delete_many(\"eid\":14})   cursor = collection.find()for record in cursor:print(record)\']','[\'result = my_collection.delete_many({\"name\": \"Mr.Geek\"})\', \'print(result.deleted_count)\', \'result= my_collection.delete_many({})\', \'result = my_collection.remove()\', \'db.my_collection.drop()\', \"OUTPUT (comment line denoted by #)\n\nConnected successfully!!!\nData inserted with record ids     \n#Data INSERT\n{\'_id\': ObjectId(\'5a02227c37b8552becf5ed2b\'), \'name\': \n\'Mr.GfG\', \'eid\': 45, \'location\': \'noida\'}\n{\'_id\': ObjectId(\'5a0c734937b8551c1cd03349\'), \'name\': \n\'Mr.Shaurya\', \'eid\': 14, \'location\': \'delhi\'}\n{\'_id\': ObjectId(\'5a0c734937b8551c1cd0334a\'), \'name\': \n\'Mr.Coder\', \'eid\': 14, \'location\': \'gurugram\'}\n#Mr.Coder is deleted\n{\'_id\': ObjectId(\'5a02227c37b8552becf5ed2b\'), \'name\': \n\'Mr.GfG\', \'eid\': 45, \'location\': \'noida\'}\n{\'_id\': ObjectId(\'5a0c734937b8551c1cd03349\'), \'name\': \n\'Mr.Shaurya\', \'eid\': 14, \'location\': \'delhi\'}\"]','[]','[\'Remove All Documents That Match a Condition : The following operation removes all documents that match the specified condition. result = my_collection.delete_many({\"name\": \"Mr.Geek\"})|||To see the number of documents deleted : print(result.deleted_count)|||Remove All Documents :Method 1 : Remove all documents using delete_many() result= my_collection.delete_many({})Method 2 : Delete all documents using collection.remove() result = my_collection.remove() Best method to remove is to drop the collection so that data indexes are also removed and then create a new collection in that insert data.|||To Drop a Collection :db.my_collection.drop()\']'),(172,'[\'Python Mongodb – Delete_one()\']','[\'Connecting to a Database\', \'Deleting document from Collection or Database\', \'Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200508155233/python-delte-one-mongodb.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200508155853/python-mongodb-delete-one.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Step 1 – Establishing Connection: Port number Default: 27017xa0xa0\', \'If using default port-number i.e. 27017. Alternate connection method:xa0\', \'Step 2 – Create Database or Switch to Existing Database:xa0xa0\', \'Create a collection or Switch to an existing collection:xa0\', \'Note: Deleting a document is the same as deleting a record in the case of SQL.\', \'Consider the sample database:xa0\', \'Examples:xa0xa0\', \'MongoDB Shell:xa0\']','[\'Mongodb is a very popular cross-platform document-oriented, NoSQL(stands for “not only SQL”) database program, written in C++. It stores data in JSON format(as key-value pairs), which makes it easy to use. MongoDB can run over multiple servers, balancing the load to keep the system up and run in case of hardware failure.\', \'In MongoDB, a single document can be deleted by the method delete_one(). The first parameter of the method would be a query object which defines the document to be deleted. If there is a reoccurrence of the same document, only the first appeared document would be deleted.xa0\']','[]','[\'# Python program to demonstrate# delete_one  import pymongo  # creating Mongoclient object to# create database with the specified# connection URLstudents = pymongo.MongoClient(\'localhost\', 27017) # connecting to a database with# name GFGDb = students[\"GFG\"] # connecting to a collection with# name Geekscoll = Db[\"Geeks\"] # creating query objectmyQuery ={\'Class\':\'2\'}coll.delete_one(myQuery) # print collection after deletion:for x in coll.find():    print(x)\']','[\'conn = MongoClient(‘localhost’, port-number)\', \'conn = MongoClient()\', \'db = conn.dabasename\', \'collection = db.collection_name\', \"\'_id\': 2.0, \'Name\': \'Golu\', \'Class\': \'3\'}\n{\'_id\': 3.0, \'Name\': \'Raja\', \'Class\': \'4\'}\n{\'_id\': 4.0, \'Name\': \'Moni\', \'Class\': \'5\'}\"]','[]','[]'),(173,'[\'Python Mongodb – Delete_many()\']','[\'Delete_many()\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200508161051/python-mongodb-delete-many-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200508161412/python-mongodb-delet-many-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200508161708/python-mongodb-delete-many-3.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Sample Database:\', \'Example 1: Deleting all the documents where the name starts with ‘A’.\', \'MongoDB Shell:\', \'Example 2:\', \'MongoDB Shell:\']','[\'MongoDB is a general-purpose, document-based, distributed database built for modern application developers and the cloud. It is a document database, which means it stores data in JSON-like documents. This is an efficient way to think about data and is more expressive and powerful than the traditional table model.\', \'Delete_many() is used when one needs to delete more than one document. A query object containing which document to be deleted is created and is passed as the first parameter to the delete_many().\']','[]','[\'import pymongo    client = pymongo.MongoClient(\"mongodb://localhost:27017/\")  # Connecting to the databasemydb = client[\"GFG\"]  # Connecting the to collectioncol = mydb[\"Geeks\"]  query = {\"Name\": {\"$regex\": \"^A\"}}d = col.delete_many(query)  print(d.deleted_count, \" documents deleted !!\")\', \'import pymongo    client = pymongo.MongoClient(\"mongodb://localhost:27017/\")  # Connecting to the databasemydb = client[\"GFG\"]  # Connecting the to collectioncol = mydb[\"Geeks\"]  query = {\"Class\": \'3\'}d = col.delete_many(query)  print(d.deleted_count, \" documents deleted !!\")\']','[\'2  documents deleted !!\', \'1  documents deleted !!\']','[]','[]'),(174,'[\'Python MongoDB – Update_one()\']','[\'Python3\', \'updateOne()\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200512201019/python-mongodb-update-one-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200512201021/python-update-one-mongodb-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200512201949/python-momgodb-update-one-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200512202032/python-mongodb-update-one-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200512202821/python-mongodb-update-one-4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200512202818/python-mongodb-update-one-5.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'MongoDB Shell:xa0\', \'Example 1: In this example, we are going to update the fan quantity from 10 to 25.xa0xa0\', \'MongoDB Shell:xa0\', \'MongoDB Shell:xa0xa0\']','[\'MongoDB is a cross-platform document-oriented and a non relational (i.e NoSQL) database program. It is an open-source document database, that stores the data in the form of key-value pairs.First create a database on which we perform the update_one() operation:xa0xa0\', \'collection.update_one(filter, new_values, upsert=False, bypass_document_validation=False, collation=None, array_filters=None, session=None)Parameters:xa0xa0\', \'Example 2: In this example we are changing the tv company name from ‘samsung’ to ‘sony’ by using update_one():xa0xa0\', \'NOTE :The “$set” operator replaces the value of a field with the specified value. If the field does not exist, “$set” will add a new field with the specified value, provided that the new field does not violate a type constraint.xa0\']','[\'It is a function by which we can update a record in a MongoDB database or Collection. This method mainly focuses on two arguments that we passed one is the query (i.e filter) object defining which document to update and the second is an object defining the new values of the document(i.e new_values) and the rest arguments are optional that we will discuss in the syntax section. This function finds the first document that matches with the query and update it with an object defining the new values of the document, i.e Updates a single document within the collection based on the filter.xa0Syntax:xa0\']','[\'# importing Mongoclient from pymongofrom pymongo import MongoClient  try:    conn = MongoClient()  # Making connection except:    print(\"Could not connect to MongoDB\")  # databasedb = conn.database  # Created or Switched to collection# names: GeeksForGeekscollection = db.GeeksForGeeks  # Creating Records:record1 = { \"appliance\":\"fan\",           \"quantity\":10,           \"rating\":\"3 stars\",           \"company\":\"havells\"}record2 = { \"appliance\":\"cooler\",           \"quantity\":15,           \"rating\":\"4 stars\",           \"company\":\"symphony\"}record3 = { \"appliance\":\"ac\",           \"quantity\":20,           \"rating\":\"5 stars\",           \"company\":\"voltas\"}record4 = { \"appliance\":\"tv\",           \"quantity\":12,           \"rating\":\"3 stars\",           \"company\":\"samsung\"}  # Inserting the Datarec_id1 = collection.insert_one(record1)rec_id2 = collection.insert_one(record2)rec_id3 = collection.insert_one(record3)rec_id4 = collection.insert_one(record4)  # Printing the data insertedprint(\"The data in the database is:\")cursor = collection.find()for record in cursor:    print(record)\', \'# importing Mongoclient from pymongofrom pymongo import MongoClient conn = MongoClient(\'localhost\', 27017)# databasedb = conn.database # Created or Switched to collection# names: GeeksForGeekscollection = db.GeeksForGeeks # Updating fan quantity form 10 to 25.filter = { \'appliance\': \'fan\' } # Values to be updated.newvalues = { \"$set\": { \'quantity\': 25 } } # Using update_one() method for single# updation.collection.update_one(filter, newvalues) # Printing the updated content of the# databasecursor = collection.find()for record in cursor:    print(record)\', \'# importing Mongoclient from pymongofrom pymongo import MongoClient  conn = MongoClient(\'localhost\', 27017) # databasedb = conn.database # Created or Switched to collection# names: GeeksForGeekscollection = db.GeeksForGeeks # Updating the tv company name from# \'samsung\' to \'sony\'.filter = { \'appliance\': \'tv\' } # Values to be updated.newvalues = { \"$set\": { \'company\': \"sony\" } } # Using update_one() method for single updation.collection.update_one(filter, newvalues) # Printing the updated content of the databasecursor = collection.find()for record in cursor:    print(record)\']','[]','[]','[\'‘filter’ : A query that matches the document to update.|||‘new_values’ : The modifications to apply.|||‘upsert’ (optional): If “True”, perform an insert if no documents match the filter.|||‘bypass_document_validation’ (optional) : If “True”, allows the write to opt-out of document level validation. Default is “False”.|||‘collation’ (optional) : An instance of class: ‘~pymongo.collation.Collation’. This option is only supported on MongoDB 3.4 and above.|||‘array_filters’ (optional) : A list of filters specifying which array elements an update should apply. Requires MongoDB 3.6+.|||‘session’ (optional) : a class:’~pymongo.client_session.ClientSession’.\']'),(175,'[\'Python MongoDB – Update_many Query\']','[\'Update_many()\', \'Python3\', \'Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200515192629/Screenshot-from-2020-05-15-18-03-441.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200515193254/Screenshot-from-2020-05-15-18-12-181.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200515193601/Screenshot-from-2020-05-15-18-21-582.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Update Operators in MongoDB\', \'Setting Values:\', \'Numeric Operators:\', \'Miscellaneous Operators:\', \'Sample Database:\', \'Some use cases we are going to see in this article where updating many records can be useful:xa0\', \'Example 1: All the students with marks greater than 35 has been passed.\', \'Database After Query:xa0\', \'Example 2: New field called address added to all documents\', \'Database After query:xa0\']','[\'Update function has been deprecated in newer versions of xa0MongoDB (3.xx and above). Earlier update function could be used for both single updates and multiple using “multi = true”. But in newer versions of mongoDB it is recommended to use update_many() and update_one().xa0\', \'The major difference is that the user needs to plan ahead if the query is going to be updating single or multiple documents.\']','[\'MongoDB is xa0a NoSQL database management system. Unlike MySQL the data in MongoDB is not stored as relations or tables. Data in mongoDB is stored as documents. Documents are Javascript/JSON like objects. More formally documents in MongoDB use BSON. PyMongo is a MongoDB API for python. It allows to read and write data from a MongoDB database using a python script. It needs both python and mongoDB to be installed on the system.\']','[\'from pymongo import MongoClient    # Creating an instance of MongoClient # on default localhostclient = MongoClient(\'mongodb://localhost:27017\')  # Accessing desired database and collectiondb = client.gfgcollection = db[\"classroom\"]  # Update passed field to be true for all# students with marks greater than 35collection.update_many(    {\"marks\": { \"$gt\": \"35\" } },        {            \"$set\": { \"passed\" : \"True\" }        })\', \'from pymongo import MongoClient    # Creating an instance of MongoClient # on default localhostclient = MongoClient(\'mongodb://localhost:27017\')  # Accessing desired database and collectiondb = client.gfgcollection = db[\"classroom\"]  # Address filed to be added to all documentscollection.update_many(        {},        {\"$set\":            {                \"Address\": \"value\"            }        },       # don\'t insert if no document found   upsert=False,   array_filters=None   )\']','[\'db.collection.updateMany(\n   <filter>,\n   <update>,\n   {\n     upsert: <boolean>,\n     writeConcern: <document>,\n     collation: <document>,\n     arrayFilters: [ <filterdocument1>, ... ],\n     hint:  <document|string>\n   }\n)\']','[]','[\'$set: Used to set a fields value.|||$setOnInsert: Update value only if a new document insertion.|||$unset: Remove the field and its value.&&&$inc: Increases the value by a given amount.|||$min/$max: returns minimum or maximum of value.|||$mul: multiplies the values by a given amount.&&&$currentDate: Updates value of a field to current date.|||$rename: Renames a field&&&&&&Changing or incrementing several elements based on a condition.|||Inserting a new field to multiple or all documents.&&&\']'),(176,'[\'Python MongoDB – Limit Query\']','[\'Limit()\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200522151308/python-mongodb-sample-database2.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1:\', \'Sample Database:\', \'Example 2:\', \'{‘_id’: 1, ‘name’: ‘Vishwash’, ‘Roll No’: ‘1001’, ‘Branch’: ‘CSE’}\', \'Example 3:\']','[\'MongoDB is one of the most used databases with its document stored as collections. These documents can be compared to JSON objects. MongoDB when it is used with Python then the combination is termed as PyMongo.\', \'The function limit() does what its name suggests- limiting the number of documents that will be returned. There is only one argument in the parameter which is a number signifying the number of documents that need to be returned.\', \'First 3 docs in the collection are:{‘_id’: 1, ‘name’: ‘Vishwash’, ‘Roll No’: ‘1001’, ‘Branch’: ‘CSE’}{‘_id’: 2, ‘name’: ‘Vishesh’, ‘Roll No’: ‘1002’, ‘Branch’: ‘IT’}{‘_id’: 3, ‘name’: ‘Shivam’, ‘Roll No’: ‘1003’, ‘Branch’: ‘ME’}\', \'While limit() puts a limitation on the number of documents fetched, find() can be used to find documents according to some specifies criteria.\', \'For skipping some files before fetching the said amount of documents skip() can be used with limit()\', \'3 docs in the collection are:{‘_id’: 3, ‘name’: ‘Shivam’, ‘Roll No’: ‘1003’, ‘Branch’: ‘ME’}{‘_id’: 4, ‘name’: ‘Yash’, ‘Roll No’: ‘1004’, ‘Branch’: ‘ECE’}{‘_id’: 5, ‘name’: ‘Raju’, ‘Roll No’: ‘1005’, ‘Branch’: ‘CSE’}\']','[]','[\'from pymongo import MongoClient  # Create a pymongo clientclient = MongoClient(\'localhost\', 27017)  # database instancedb = client[\'GFG\']  # collection instancedoc = db[\'Student\']  # Retrieving first 3 documents using the# find() and limit() methodsprint(\"First 3 docs in the collection are: \")  for doc1 in doc.find().limit(3):    print(doc1)\', \"from pymongo import MongoClient  # Create a pymongo clientclient = MongoClient(\'localhost\', 27017)  # database instancedb = client[\'GFG\']  # collection instancedoc = db[\'Student\']  # Printing documents of only those having# branch as CSE and limiting the document # to 1for doc1 in doc.find({\'Branch\': \'CSE\'}).limit(1):    print(doc1)\", \'from pymongo import MongoClient  # Create a pymongo clientclient = MongoClient(\'localhost\', 27017)  # database instancedb = client[\'GFG\']  # collection instancedoc = db[\'Student\']  # Retrieving 3 documents using the# find() and limit() methodsprint(\"3 docs in the collection are: \")  for doc1 in doc.find().limit(3).skip(2):    print(doc1)\']','[\'coll.find().limit(n)\']','[]','[\'coll- name of the collection|||n- number that needs to be returned\']'),(177,'[\'Python MongoDB – create_index Query\']','[\'Indexingxa0\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200519203932/python-mongodb-sample-database.png\']','[]','[\'https://www.geeksforgeeks.org/mongodb-and-python/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017/\', \'https://www.geeksforgeeks.org/mongodb://localhost:27017/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Let’s look at some examples.\', \'Example 1:\', \'Sample Database:\', \'Example 2:\']','[\'MongoDB is an open-source document-oriented database. MongoDB stores data in the form of key-value pairs and is a NoSQL database program. The term NoSQL means non-relational.\', \'Indexing helps in querying the documents efficiently. It stores the value of a specific field or set of fields which are ordered by the value of the field as specified in the index.xa0\', \'PyMongo contains a function create_index() to explicitly create index. By default _id is the only index present in the document. This function can accept either a key or a list of (key, direction) pairs.\', \'DuplicateKeyError xa0 xa0 xa0 xa0 xa0 xa0 xa0 xa0 xa0 xa0 xa0 xa0 Traceback (most recent call last)<ipython-input-62-264f0e13db93> in <module>xa0 xa0 16 record = {‘_id’: 4, “student_id”: 873, “name”: “John”, “section”: “A”}xa0 xa0 17—> 18 mycollection.insert_one(record)\', \'DuplicateKeyError: E11000 duplicate key error collection: GFG.College index: student_id_1 dup key: { : 873 }\', \'It raises the DuplicateKeyError as there is already a document that exists with the student_id 873 and we are trying to insert another document with the same student_id. This error occurs because we created an index on the field student_id and marked it as unique.\']','[]','[\'from pymongo import MongoClient           # creation of MongoClient client = MongoClient()     # Connect with the portnumber and host client = MongoClient(\"mongodb://localhost:27017/\")     # Access database mydatabase = client[\'GFG\']     # Access collection of the database mycollection = mydatabase[\'College\']   # Before Creating indexindex_list = sorted(list(mycollection.index_information()))print(\"Before Creating index\")print(index_list)  # Creating indexmycollection.create_index(\"student_id\", unique = True)  # After Creating indexindex_list = sorted(list(mycollection.index_information()))print(\"\\nAfter Creating index\")print(index_list)\', \'from pymongo import MongoClient           # creation of MongoClient client = MongoClient()     # Connect with the portnumber and host client = MongoClient(\"mongodb://localhost:27017/\")     # Access database mydatabase = client[\'GFG\']     # Access collection of the database mycollection = mydatabase[\'College\']   record = {\'_id\': 4,           \"student_id\": 873,          \"name\": \"John\",          \"section\": \"A\"}  mycollection.insert_one(record)\']','[\'create_index(keys, session=None, **kwargs)\', \"Before Creating index\n[\'_id_\']\n\nAfter Creating index\n[\'_id_\', \'student_id_1\']\"]','[]','[\'Here, we create an index named student_id using create_index() method. This results in two indexes in the documents _id and student_id.|||Using index_information() method, we get all the indexes in the collection,\']'),(178,'[\'Python MongoDB – drop_index Query\']','[\'What Are Indexes?\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200525211356/testDB.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200525211414/showIndex.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200525213138/insertedIndex.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200525214459/dropIndex.jpg\']','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax: drop_index(index_or_name, session=None, **kwargs)Parameters:\', \'Example 1: Adding an Index to the Collection\', \'As we can see the autogenerated name is newIndex_1.\', \'Example 2: Deleting the Index from the Collection\']','[\'The drop_index() library function in PyMongo is used to drop the index from a collection in the database, as the name suggests. In this article, we are going to discuss how to remove an index from a collection using our python application with PyMongo.\', \'On a locally hosted Mongo server, let us create a database test with a collection students. The database will hold the following information about students –\', \'By default, each collection has the _id index. All collections compulsorily have at least one index. If all indexes are removed, then a new index will be automatically generated. We can see the indexes present by running the following command –\', \'Now, we can run the following code to add a new Index called newIndex to the students collection, given that the mongo server is running:\', \'The output shows that the newly inserted Index called newIndex was dropped and only the original _id index remained. This is the application of drop_index().\']','[\'Indexes are a special data structure used in MongoDB for increasing the efficiency of query execution. They are defined at the collection level and they allow MongoDB to limit the number of documents that it searches. B-tree data structures are used for indexing in MongoDB. There are various types of Indexes such as single-field indexes, compound indexes, multi-key indexes. For the sake of understanding, in this article, we shall use single-field indexes.\']','[\'import pprintimport pymongo  # connectiontry:    client = pymongo.MongoClient()    db = client[\'test\']    print(\'connection to the server established\')      except Exception:    print(\'Failed to Connect to server\')  collection = db.students    # creating an indexresp = collection.create_index(\"newIndex\")  # printing the auto generated name # returned by MongoDBprint(resp)  # index_information() is analogous # to getIndexespprint.pprint(collection.index_information())\', \'import pprintimport pymongo    try:    client = pymongo.MongoClient()    db = client[\'test\']    print(\'connection to the server established\')  except Exception:    print(\'Failed to Connect to server\')  collection = db.students  # dropping the index using autogenerated# name from MongoDBcollection.drop_index(\"newIndex_1\")  # printing the indexes present on the collectionpprint.pprint(collection.index_information())\']','[]','[]','[\'index_or_name: The name of the index generated by calling create_index() or ensure_index() method on a collection. If a custom index name was created through the name parameter, then the custom name should be passed here.|||session: This is an optional argument which specifies the ClientSession(from class pymongo.client_session).|||kwargs: These are additional keyword arguments(optional).\']'),(179,'[\'OpenCV Python Tutorial\']','[\'Working with Images\', \'Working with Videos\', \'Applications and Projects\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200128164816/Open2.png\']','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/python-numpy/\', \'https://www.geeksforgeeks.org/#getting\', \'https://www.geeksforgeeks.org/#images\', \'https://www.geeksforgeeks.org/#imagesstart\', \'https://www.geeksforgeeks.org/#processing\', \'https://www.geeksforgeeks.org/#feature\', \'https://www.geeksforgeeks.org/#drawing\', \'https://www.geeksforgeeks.org/#videos\', \'https://www.geeksforgeeks.org/#videostart\', \'https://www.geeksforgeeks.org/#videoprocessing\', \'https://www.geeksforgeeks.org/#applications\', \'https://www.geeksforgeeks.org/tag/opencv/\', \'https://www.geeksforgeeks.org/opencv-overview/\', \'https://www.geeksforgeeks.org/introduction-to-opencv/\', \'https://www.geeksforgeeks.org/how-to-install-opencv-for-python-in-windows/\', \'https://www.geeksforgeeks.org/how-to-install-opencv-for-python-in-linux/\', \'https://www.geeksforgeeks.org/set-opencv-anaconda-environment/\', \'https://www.geeksforgeeks.org/reading-image-opencv-using-python/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-imshow-method/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-imwrite-method/\', \'https://www.geeksforgeeks.org/opencv-saving-an-image/\', \'https://www.geeksforgeeks.org/color-spaces-in-opencv-python/\', \'https://www.geeksforgeeks.org/arithmetic-operations-on-images-using-opencv-set-1-addition-and-subtraction/\', \'https://www.geeksforgeeks.org/arithmetic-operations-on-images-using-opencv-set-2-bitwise-operations-on-binary-images/\', \'https://www.geeksforgeeks.org/image-resizing-using-opencv-python/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-erode-method/\', \'https://www.geeksforgeeks.org/python-image-blurring-using-opencv/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-copymakeborder-method/\', \'https://www.geeksforgeeks.org/python-grayscaling-of-images-using-opencv/\', \'https://www.geeksforgeeks.org/image-processing-in-python-scaling-rotating-shifting-and-edge-detection/\', \'https://www.geeksforgeeks.org/erosion-dilation-images-using-opencv-python/\', \'https://www.geeksforgeeks.org/opencv-python-program-analyze-image-using-histogram/\', \'https://www.geeksforgeeks.org/histograms-equalization-opencv/\', \'https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-1-simple-thresholding/\', \'https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-2-adaptive-thresholding/\', \'https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-3-otsu-thresholding/\', \'https://www.geeksforgeeks.org/opencv-segmentation-using-thresholding/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-cvtcolor-method/\', \'https://www.geeksforgeeks.org/filter-color-with-opencv/\', \'https://www.geeksforgeeks.org/python-denoising-of-colored-images-using-opencv/\', \'https://www.geeksforgeeks.org/python-visualizing-image-in-different-color-spaces/\', \'https://www.geeksforgeeks.org/find-co-ordinates-of-contours-using-opencv-python/\', \'https://www.geeksforgeeks.org/python-bilateral-filtering/\', \'https://www.geeksforgeeks.org/image-inpainting-using-opencv/\', \'https://www.geeksforgeeks.org/python-intensity-transformation-operations-on-images/\', \'https://www.geeksforgeeks.org/image-registration-using-opencv-python/\', \'https://www.geeksforgeeks.org/python-background-subtraction-using-opencv/\', \'https://www.geeksforgeeks.org/background-subtraction-in-an-image-using-concept-of-running-average/\', \'https://www.geeksforgeeks.org/python-foreground-extraction-in-an-image-using-grabcut-algorithm/\', \'https://www.geeksforgeeks.org/python-morphological-operations-in-image-processing-opening-set-1/\', \'https://www.geeksforgeeks.org/python-morphological-operations-in-image-processing-closing-set-2/\', \'https://www.geeksforgeeks.org/python-morphological-operations-in-image-processing-gradient-set-3/\', \'https://www.geeksforgeeks.org/image-segmentation-using-morphological-operation/\', \'https://www.geeksforgeeks.org/image-translation-using-opencv-python/\', \'https://www.geeksforgeeks.org/image-pyramid-using-opencv-python/\', \'https://www.geeksforgeeks.org/line-detection-python-opencv-houghline-method/\', \'https://www.geeksforgeeks.org/circle-detection-using-opencv-python/\', \'https://www.geeksforgeeks.org/python-detect-corner-of-an-image-using-opencv/\', \'https://www.geeksforgeeks.org/python-corner-detection-with-shi-tomasi-corner-detection-method-using-opencv/\', \'https://www.geeksforgeeks.org/python-corner-detection-with-harris-corner-detection-method-using-opencv/\', \'https://www.geeksforgeeks.org/find-circles-and-ellipses-in-an-image-using-opencv-python/\', \'https://www.geeksforgeeks.org/python-document-field-detection-using-template-matching/\', \'https://www.geeksforgeeks.org/python-smile-detection-using-opencv/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-line-method/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-arrowedline-method/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-ellipse-method/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-circle-method/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-rectangle-method/\', \'https://www.geeksforgeeks.org/python-opencv-cv2-puttext-method/\', \'https://www.geeksforgeeks.org/find-and-draw-contours-using-opencv-python/\', \'https://www.geeksforgeeks.org/draw-a-triangle-with-centroid-using-opencv/\', \'https://www.geeksforgeeks.org/python-play-a-video-using-opencv/\', \'https://www.geeksforgeeks.org/python-create-video-using-multiple-images-using-opencv/\', \'https://www.geeksforgeeks.org/extract-images-from-video-in-python/\', \'https://www.geeksforgeeks.org/python-program-extract-frames-using-opencv/\', \'https://www.geeksforgeeks.org/displaying-the-coordinates-of-the-points-clicked-on-the-image-using-python-opencv/\', \'https://www.geeksforgeeks.org/white-and-black-dot-detection-using-opencv-python/\', \'https://www.geeksforgeeks.org/python-opencv-bgr-color-palette-with-trackbars/\', \'https://www.geeksforgeeks.org/python-draw-rectangular-shape-and-extract-objects-using-opencv/\', \'https://www.geeksforgeeks.org/invisible-cloak-using-opencv-python-project/\', \'https://www.geeksforgeeks.org/ml-unsupervised-face-clustering-pipeline/\', \'https://www.geeksforgeeks.org/saving-operated-video-from-a-webcam-using-opencv/\', \'https://www.geeksforgeeks.org/face-detection-using-python-and-opencv-with-webcam/\', \'https://www.geeksforgeeks.org/opening-multiple-color-windows-to-capture-using-opencv-in-python/\', \'https://www.geeksforgeeks.org/python-play-video-reverse-mode-using-opencv/\', \'https://www.geeksforgeeks.org/template-matching-using-opencv-in-python/\', \'https://www.geeksforgeeks.org/cartooning-an-image-using-opencv-python/\', \'https://www.geeksforgeeks.org/opencv-python-program-vehicle-detection-video-frame/\', \'https://www.geeksforgeeks.org/count-number-of-faces-using-python-opencv/\', \'https://www.geeksforgeeks.org/live-webcam-drawing-using-opencv/\', \'https://www.geeksforgeeks.org/detect-and-recognize-car-license-plate-from-a-video-in-real-time/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Table Of Content:\', \'Recent Articles on OpenCV !!\', \'Getting Started\', \'Image Processing\', \'Drawing Functions\', \'Getting Started\', \'Video Processing\']','[\'This OpenCV tutorial will help you learn the Image-processing from Basics to Advance, like operations on Images, Videos using a huge set of Opencv-programs and projects.\']','[\'OpenCV is a huge open-source library for computer vision, machine learning, and image processing. OpenCV supports a wide variety of programming languages like Python, C++, Java, etc. It can process images and videos to identify objects, faces, or even the handwriting of a human. When it is integrated with various libraries, such as Numpy which is a highly optimized library for numerical operations, then the number of weapons increases in your Arsenal i.e whatever operations one can do in Numpy can be combined with OpenCV.\']','[]','[]','[]','[\'Getting Started|||Working with ImagesGetting StartedImage ProcessingFeature Detection and DescriptionDrawing Functions|||Getting Started|||Image Processing|||Feature Detection and Description|||Drawing Functions|||Working with VideosGetting StartedVideo Processing|||Getting Started|||Video Processing|||Applications and Projects&&&Getting Started|||Image Processing|||Feature Detection and Description|||Drawing Functions&&&Getting Started|||Video Processing&&&OpenCV – Overview|||Introduction to OpenCV|||Install OpenCV for Python on Windows|||Install OpenCV for Python on Linux|||Set up Opencv with anaconda environment&&&Reading an image in OpenCV using Python|||Display an image in OpenCV using Python|||Writing an image in OpenCV using Python|||OpenCV | Saving an Image|||Color Spaces|||Arithmetic operations on Images|||Bitwise Operations on Binary Images&&&Image Resizing|||Eroding an Image|||Blurring an Image|||Create Border around Images|||Grayscaling of Images|||Scaling, Rotating, Shifting and Edge Detection|||Erosion and Dilation of images|||Analyze an image using Histogram|||Histograms Equalization|||Simple Thresholding|||Adaptive Thresholding|||Otsu Thresholding|||Segmentation using Thresholding|||Convert an image from one color space to another|||Filter Color with OpenCV|||Denoising of colored images|||Visualizing image in different color spaces|||Find Co-ordinates of Contours|||Bilateral Filtering|||Image Inpainting using OpenCV|||Intensity Transformation Operations on Images|||Image Registration|||Background subtraction|||Background Subtraction in an Image using Concept of Running Average|||Foreground Extraction in an Image using Grabcut Algorithm|||Morphological Operations in Image Processing (Opening)|||Morphological Operations in Image Processing (Closing)|||Morphological Operations in Image Processing (Gradient)|||Image segmentation using Morphological operations|||Image Translation|||Image Pyramid&&&Line detection using Houghline method|||Circle Detection|||Detect corner of an image|||Corner Detection with Shi-Tomasi method|||Corner detection with Harris Corner Detection|||Find Circles and Ellipses in an Image|||Document field detection|||Smile detection&&&Draw a line|||Draw arrow segment|||Draw an ellipse|||Draw a circle|||Draw a rectangle|||Draw a text string|||Find and Draw Contours|||Draw a triangle with centroid&&&Play a video using OpenCV&&&Create video using multiple images|||Extract images from video&&&Extract frames using OpenCV|||Displaying the coordinates of the points clicked on the image using Python-OpenCV|||White and black dot detection|||OpenCV BGR color palette with trackbars|||Draw rectangular shape and extract objects|||Invisible Cloak using OpenCV|||Unsupervised Face Clustering Pipeline|||Saving Operated Video from a webcam|||Face Detection using Python and OpenCV with webcam|||Opening multiple color windows|||Play a video in reverse mode|||Template matching using OpenCV in Python|||Cartooning an Image using OpenCV – Python|||Vehicle detection in a Video frame using Python – OpenCV|||Count number of Faces using Python – OpenCV|||Live Webcam Drawing using OpenCV|||Detect and Recognize Car License Plate from a video in real time\']'),(180,'[\'Introduction to OpenCV\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190904230821/road.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190904230740/roi.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190904230728/resize6.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190904230735/Resizing-with-proper-aspect-ratio.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190904230755/Rotation1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190904230758/Screenshot-2019-08-24-at-5.38.11-PM.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190904230719/rectangle3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190904230816/Text_screenshot_24.08.2019.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'This is the original image that we will manipulate throughout the course of this article.\', \'Let’s start with the simple task of reading an image using OpenCV.\', \'Reading an image\', \'Extracting the RGB values of a pixel\', \'Extracting the Region of Interest (ROI)\', \'Resizing the Image\', \'Rotating the Image\', \'There are a lot of steps involved in rotating an image. So, let me explain each of them in detail.\', \'The 2 main functions used here are –\', \'getRotationMatrix2D()It takes 3 arguments –\', \'warpAffine()\', \'The function warpAffine transforms the source image using the rotation matrix:\', \'Drawing a RectangleIt is an in-place operation.\', \'It takes in 5 arguments –\', \'xa0Displaying textIt is also an in-place operation\', \'It takes in 7 arguments –\']','[\'OpenCV is one of the most popular computer vision libraries. If you want to start your journey in the field of computer vision, then a thorough understanding of the concepts of OpenCV is of paramount importance.In this article, I will try to introduce the most basic and important concepts of OpenCV in an intuitive manner.This article will cover the following topics:\', \'Now we will focus on extracting the RGB values of an individual pixel.Note – OpenCV arranges the channels in BGR order. So the 0th value will correspond to Blue pixel and not Red.\', \'The problem with this approach is that the aspect ratio of the image is not maintained. So we need to do some extra work in order to maintain a proper aspect ratio.\', \'xa0It returns a 2*3 matrix consisting of values derived from alpha and betaalpha = scale * cos(angle)beta = scale * sine(angle)\', \'Here M is the rotation matrix, described above.It calculates new x, y co-ordinates of the image and transforms it.\']','[]','[\'# Importing the OpenCV libraryimport cv2# Reading the image using imread() functionimage = cv2.imread(\'image.png\')  # Extracting the height and width of an imageh, w = image.shape[:2]# Displaying the height and widthprint(\"Height = {},  Width = {}\".format(h, w))\', \'# Extracting RGB values. # Here we have randomly chosen a pixel# by passing in 100, 100 for height and width.(B, G, R) = image[100, 100]  # Displaying the pixel valuesprint(\"R = {}, G = {}, B = {}\".format(R, G, B))  # We can also pass the channel to extract # the value for a specific channelB = image[100, 100, 0]print(\"B = {}\".format(B))\', \'# We will calculate the region of interest # by slicing the pixels of the imageroi = image[100 : 500, 200 : 700]\', \'# resize() function takes 2 parameters, # the image and the dimensionsresize = cv2.resize(image, (800, 800))\', \'# Calculating the ratioratio = 800 / w  # Creating a tuple containing width and heightdim = (800, int(h * ratio))  # Resizing the imageresize_aspect = cv2.resize(image, dim)\', \'# Calculating the center of the imagecenter = (w // 2, h // 2)  # Generating a rotation matrixmatrix = cv2.getRotationMatrix2D(center, -45, 1.0)   # Performing the affine transformationrotated = cv2.warpAffine(image, matrix, (w, h))\', \'# We are copying the original image, # as it is an in-place operation.output = image.copy()  # Using the rectangle() function to create a rectangle.rectangle = cv2.rectangle(output, (1500, 900),                           (600, 400), (255, 0, 0), 2)\', \"# Copying the original imageoutput = image.copy()  # Adding the text using putText() functiontext = cv2.putText(output, \'OpenCV Demo\', (500, 550),                    cv2.FONT_HERSHEY_SIMPLEX, 4, (255, 0, 0), 2)\"]','[\'dst(x, y) = src(M11X + M12Y + M13, M21X + M22Y + M23)\']','[]','[\"getRotationMatrix2D()|||warpAffine()&&&center – The center coordinates of the image|||Angle – The angle (in degrees) by which the image should be rotated|||Scale – The scaling factorIt returns a 2*3 matrix consisting of values derived from alpha and betaalpha = scale * cos(angle)beta = scale * sine(angle)warpAffine()The function warpAffine transforms the source image using the rotation matrix:dst(x, y) = src(M11X + M12Y + M13, M21X + M22Y + M23)\nHere M is the rotation matrix, described above.It calculates new x, y co-ordinates of the image and transforms it.Drawing a RectangleIt is an in-place operation.# We are copying the original image,# as it is an in-place operation.output = image.copy()# Using the rectangle() function to create a rectangle.rectangle = cv2.rectangle(output, (1500, 900),(600, 400), (255, 0, 0), 2)It takes in 5 arguments –ImageTop-left corner co-ordinatesBottom-right corner co-ordinatesColor (in BGR format)Line widthDisplaying textIt is also an in-place operation# Copying the original imageoutput = image.copy()# Adding the text using putText() functiontext = cv2.putText(output, \'OpenCV Demo\', (500, 550),cv2.FONT_HERSHEY_SIMPLEX, 4, (255, 0, 0), 2)It takes in 7 arguments –ImageText to be displayedBottom-left corner co-ordinates, from where the text should startFontFont sizeColor (BGR format)Line widthMy Personal Notes\narrow_drop_upSave|||Image|||Top-left corner co-ordinates|||Bottom-right corner co-ordinates|||Color (in BGR format)|||Line width|||Image|||Text to be displayed|||Bottom-left corner co-ordinates, from where the text should start|||Font|||Font size|||Color (BGR format)|||Line width&&&Image|||Top-left corner co-ordinates|||Bottom-right corner co-ordinates|||Color (in BGR format)|||Line width&&&&&&Reading an image|||Extracting the RGB values of a pixel|||Extracting the Region of Interest (ROI)|||Resizing the Image|||Rotating the Image|||Drawing a Rectangle|||Displaying text&&&Image|||Text to be displayed|||Bottom-left corner co-ordinates, from where the text should start|||Font|||Font size|||Color (BGR format)|||Line width&&&\"]'),(181,'[\'How to Install OpenCV for Python on Windows?\']','[]','[\'Downloading and Installing OpenCV:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200117124014/python-version-check-windows.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200117170656/pip-verification-windows.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200122190245/OpenCV-Installation-Windows-01.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200122190247/OpenCV-Installation-Windows-02.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200122190249/OpenCV-Installation-Windows-03.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200122190251/OpenCV-Installation-Windows-04.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-language-introduction/\', \'https://www.geeksforgeeks.org/how-to-install-python-on-windows/\', \'https://www.geeksforgeeks.org/how-to-install-pip-on-windows/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Open the Command line(search for cmd in the Run dialog( + R).Now run the following command:\', \'If Python is already installed, it will generate a message with the Python version available.\', \'Beginning with the installation:\']','[\'To install OpenCV, one must have Python and PIP, preinstalled on their system. To check if your system already contains Python, go through the following instructions:\', \'If PIP is not present, go through How to install PIP on Windows? and follow the instructions provided.\', \'OpenCV can be directly downloaded and installed with the use of pip (package manager). To install OpenCV, just go to the command-line and type the following command:\', \'To check if OpenCV is correctly installed, just run the following commands to perform a version check:\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Prerequisite: Python Language Introductionxa0OpenCV is the huge open-source library for computer vision, machine learning, and image processing and now it plays a major role in real-time operation which is very important in today’s systems. By using it, one can process images and videos to identify objects, faces, or even the handwriting of a human. When it integrated with various libraries, such as Numpuy, python is capable of processing the OpenCV array structure for analysis. To Identify image patterns and its various features we use vector space and perform mathematical operations on these features.\', \'If Python is not present, go through How to install Python on Windows? and follow the instructions provided.xa0PIP is a package management system used to install and manage software packages/libraries written in Python. These files are stored in a large “on-line repository” termed as Python Package Index (PyPI).To check if PIP is already installed on your system, just go to the command line and execute the following command:\']','[]','[\'python --version\', \'pip -V\', \'pip install opencv-python\', \'python\n>>>import cv2\n>>>print(cv2.__version__)\']','[]','[\'Type the command in the Terminal and proceed:|||Collecting Information and downloading data:|||Installing Packages:|||Finished Installation:\']'),(182,'[\'Reading an image in OpenCV using Python\']','[\'Python3\', \'Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190802021607/geeks14.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190802022327/Annotation-2019-08-02-022111.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190802022316/Annotation-2019-08-02-022133.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/set-opencv-anaconda-environment/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisite: Basics of OpenCV\', \'To install these libraries, we need to run these pip commands in cmd:\', \'Syntax: cv2.imread(path, flag)\', \'Return Value: This method returns an image that is loaded from the specified file.\', \'Note: The image should be in the working directory or a full path of image should be given.\', \'All three types of flags are described below:\', \'Image Used:\', \'Example #2: Opening in grascale mode\']','[\'In this article, we’ll try to open an image by using OpenCV (Open Source Computer Vision). To use the OpenCV library in python, we need to install these libraries as a prerequisite:\', \'xa0To read the images cv2.imread() method is used. This method loads an image from the specified file. If the image cannot be read (because of missing file, improper permissions, unsupported or invalid format) then this method returns an empty matrix.\', \'Parameters:path: A string representing the path of the image to be read.flag: It specifies the way in which image should be read. It’s default value is cv2.IMREAD_COLOR\', \'Below codes are implementations to read images and display images on the screen using OpenCV and matplotlib libraries functions.xa0Example #1 (Using OpenCV) :xa0\']','[\'cv2.IMREAD_COLOR: It specifies to load a color image. Any transparency of image will be neglected. It is the default flag. Alternatively, we can pass integer value 1 for this flag.cv2.IMREAD_GRAYSCALE: It specifies to load an image in grayscale mode. Alternatively, we can pass integer value 0 for this flag.cv2.IMREAD_UNCHANGED: It specifies to load an image as such including alpha channel. Alternatively, we can pass integer value -1 for this flag.\']','[\'# Python code to read imageimport cv2 # To read image from disk, we use# cv2.imread function, in below method,img = cv2.imread(\"geeksforgeeks.png\", cv2.IMREAD_COLOR) # Creating GUI window to display an image on screen# first Parameter is windows title (should be in string format)# Second Parameter is image arraycv2.imshow(\"Cute Kitens\", img) # To hold the window on screen, we use cv2.waitKey method# Once it detected the close input, it will release the control# To the next line# First Parameter is for holding screen for specified milliseconds# It should be positive integer. If 0 pass an parameter, then it will# hold the screen until user close it.cv2.waitKey(0) # It is for removing/deleting created GUI window from screen# and memorycv2.destroyAllWindows()\', \"# Python program to explain cv2.imread() method # importing cv2import cv2 # pathpath = r\'geeksforgeeks.png\' # Using cv2.imread() method# Using 0 to read image in grayscale modeimg = cv2.imread(path, 0) # Displaying the imagecv2.imshow(\'image\', img)\"]','[\'pip install opencv-python\npip install numpy\npip install matplotlib\']','[]','[\'Numpy Library (Necessary, because OpenCV uses it in the background).|||OpenCV python\']'),(183,'[\'OpenCV | Saving an Image\']','[]','[\'Code : C++ code for saving an image to any location in OpenCV.\', \'Explanation :\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190817133606/abcd2-300x169.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190817133639/img_save.png\']','[]','[\'https://practice.geeksforgeeks.org/contest/gate-cs-all-india-mock-3-aim-3/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'So, let us dig deep into it and understand the concept with the complete explanation.\', \'Input :Output :\']','[\'This article aims to learn how to save an image from one location to any other desired location on your system in CPP using OpenCv. Using OpenCV, we can generate a blank image with any colour one wishes to.\', \'This part of the code reads the image from the path we have given to it. And it takes care of any error (if occurs). If there is no image present at this path, then “Can not open or image is not present” message will display and at the press of any key, the window will exit.\', \'This part of the code write the image to the defined path and if not successful, it will generate “Mission – Saving the image, FAILED” message and at the press of any key, the window will exit. And rest of the code will create the window and display the image in it. It will keep on displaying the image in the window until the key is pressed. Finally, the window will be destroyed.\']','[]','[\'// c++ code explaining how to// save an image to a defined// location in OpenCV  // loading library files#include <highlevelmonitorconfigurationapi.h>#include <opencv2\\highgui\\highgui.hpp>#include <opencv2\\opencv.hpp>  using namespace cv;using namespace std;  int main(int argc, char** argv){      // Reading the image file from a given location in system    Mat img = imread(\"..path\\\\abcd.jpg\");      // if there is no image    // or in case of error    if (img.empty()) {        cout << \"Can not open or image is not present\" << endl;          // wait for any key to be pressed        cin.get();        return -1;    }      // You can make any changes    // like blurring, transformation      // writing the image to a defined location as JPEG    bool check = imwrite(\"..path\\\\MyImage.jpg\", img);      // if the image is not saved    if (check == false) {        cout << \"Mission - Saving the image, FAILED\" << endl;          // wait for any key to be pressed        cin.get();        return -1;    }      cout << \"Successfully saved the image. \" << endl;      // Naming the window    String geek_window = \"MY SAVED IMAGE\";      // Creating a window    namedWindow(geek_window);      // Showing the image in the defined window    imshow(geek_window, img);      // waiting for any key to be pressed    waitKey(0);      // destroying the creating window    destroyWindow(geek_window);      return 0;}\', \'// Reading the image file from a given location in systemMat img = imread(\"..path\\\\abcd.jpg\");  // if there is no image// or in case of errorif (img.empty()) {    cout << \"Can not open or image is not present\" << endl;      // wait for any key to be pressed    cin.get();    return -1;}\', \'// writing the image to a defined location as JPEGbool check = imwrite(\"..path\\\\MyImage.jpg\", img);  // if the image is not savedif (check == false) {    cout << \"Mission - Saving the image, FAILED\" << endl;      // wait for any key to be pressed    cin.get();    return -1;}  cout << \"Successfully saved the image. \" << endl;\']','[]','[]','[]'),(184,'[\'Arithmetic Operations on Images using OpenCV | Set-1 (Addition and Subtraction)\']','[\'Python3\', \'Python3\']','[\'Addition of Image:\', \'Subtraction of Image:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/1-500x250-3.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/2-500x250-2.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-9-17.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/star-1-300x168.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/dot-300x168.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-10-10-300x167.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Images used as Input:Input Image1:xa0\', \'Input Image2:xa0\', \'Below is the code:xa0xa0\', \'Images used as Input:xa0Input Image1:xa0\', \'Input Image2:xa0\', \'Below is the code:xa0\']','[\'We can add two images by using function cv2.add(). This directly adds up image pixels in the two images.xa0xa0\', \'But adding the pixels is not an ideal situation. So, we use cv2.addweighted(). Remember, both images should be of equal size and depth.xa0xa0\', \'Just like addition, we can subtract the pixel values in two images and merge them with the help of cv2.subtract(). The images should be of equal size and depth.xa0xa0\']','[\'Arithmetic Operations like Addition, Subtraction, and Bitwise Operations(AND, OR, NOT, XOR) can be applied to the input images. These operations can be helpful in enhancing the properties of the input images. The Image arithmetics are important for analyzing the input image properties. The operated images can be further used as an enhanced input image, and many more operations can be applied for clarifying, thresholding, dilating etc of the image.xa0xa0\', \'Syntax: cv2.addWeighted(img1, wt1, img2, wt2, gammaValue)Parameters:xa0img1: First Input Image array(Single-channel, 8-bit or floating-point)xa0wt1: Weight of the first input image elements to be applied to the final imagexa0img2: Second Input Image array(Single-channel, 8-bit or floating-point)xa0wt2: Weight of the second input image elements to be applied to the final imagexa0gammaValue: Measurement of lightxa0\']','[\"# Python program to illustrate# arithmetic operation of# addition of two images   # organizing importsimport cv2import numpy as np   # path to input images are specified and # images are loaded with imread commandimage1 = cv2.imread(\'input1.jpg\')image2 = cv2.imread(\'input2.jpg\') # cv2.addWeighted is applied over the# image inputs with applied parametersweightedSum = cv2.addWeighted(image1, 0.5, image2, 0.4, 0) # the window showing output image# with the weighted sumcv2.imshow(\'Weighted Image\', weightedSum) # De-allocate any associated memory usage if cv2.waitKey(0) & 0xff == 27:    cv2.destroyAllWindows()\", \"# Python program to illustrate# arithmetic operation of# subtraction of pixels of two images # organizing importsimport cv2import numpy as np   # path to input images are specified and # images are loaded with imread commandimage1 = cv2.imread(\'input1.jpg\')image2 = cv2.imread(\'input2.jpg\') # cv2.subtract is applied over the# image inputs with applied parameterssub = cv2.subtract(image1, image2) # the window showing output image# with the subtracted imagecv2.imshow(\'Subtracted Image\', sub) # De-allocate any associated memory usage if cv2.waitKey(0) & 0xff == 27:    cv2.destroyAllWindows()\"]','[\'Syntax: cv2.add(img1, img2)\', \'Syntax:  cv2.subtract(src1, src2)\']','[]','[]'),(185,'[\'Arithmetic Operations on Images using OpenCV | Set-2 (Bitwise Operations on Binary Images)\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\']','[\'Bitwise AND operation on Image:\', \'Bitwise OR operation on Image:\', \'Bitwise XOR operation on Image:\', \'Bitwise NOT operation on Image:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190222191001/1bit1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190222191045/2bit2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190222201455/AND4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190222201756/OR5.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190222202323/XOR2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190222202450/NOT11.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190222202522/NOT21.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/arithmetic-operations-on-images-using-opencv-set-1-addition-and-subtraction/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Input Image 2:xa0xa0\', \'Bit-wise conjunction of input array elements.xa0xa0\', \'Bit-wise disjunction of input array elements.xa0xa0\', \'Bit-wise exclusive-OR operation on input array elements.xa0xa0\', \'Inversion of input array elements.xa0xa0\', \'Output:xa0Bitwise NOT on Image 1xa0xa0\', \'Bitwise NOT on Image 2xa0xa0\']','[\'Prerequisite: Arithmetic Operations on Images | Set-1Bitwise operations are used in image manipulation and used for extracting essential parts in the image. In this article, Bitwise operations used are :xa0xa0\', \'Also, Bitwise operations helps in image masking. Image creation can be enabled with the help of these operations. These operations can be helpful in enhancing the properties of the input images.xa0NOTE: The Bitwise operations should be applied on input images of same dimensionsInput Image 1:xa0xa0\', \'Syntax: cv2.bitwise_and(source1, source2, destination, mask)Parameters:xa0source1: First Input Image array(Single-channel, 8-bit or floating-point)xa0source2: Second Input Image array(Single-channel, 8-bit or floating-point)xa0dest: Output array (Similar to the dimensions and type of Input image array)xa0mask: Operation mask, Input / output 8-bit single-channel maskxa0xa0\', \'Syntax: cv2.bitwise_or(source1, source2, destination, mask)Parameters:xa0source1: First Input Image array(Single-channel, 8-bit or floating-point)xa0source2: Second Input Image array(Single-channel, 8-bit or floating-point)xa0dest: Output array (Similar to the dimensions and type of Input image array)xa0mask: Operation mask, Input / output 8-bit single-channel maskxa0xa0\', \'Syntax: cv2.bitwise_xor(source1, source2, destination, mask)Parameters:xa0source1: First Input Image array(Single-channel, 8-bit or floating-point)xa0source2: Second Input Image array(Single-channel, 8-bit or floating-point)xa0dest: Output array (Similar to the dimensions and type of Input image array)xa0mask: Operation mask, Input / output 8-bit single-channel maskxa0xa0\', \'Syntax: cv2.bitwise_not(source, destination, mask)Parameters:xa0source: Input Image array(Single-channel, 8-bit or floating-point)xa0dest: Output array (Similar to the dimensions and type of Input image array)xa0mask: Operation mask, Input / output 8-bit single-channel maskxa0xa0\']','[]','[\"# Python program to illustrate# arithmetic operation of# bitwise AND of two images    # organizing importsimport cv2import numpy as np    # path to input images are specified and  # images are loaded with imread command img1 = cv2.imread(\'input1.png\') img2 = cv2.imread(\'input2.png\') # cv2.bitwise_and is applied over the# image inputs with applied parametersdest_and = cv2.bitwise_and(img2, img1, mask = None) # the window showing output image# with the Bitwise AND operation# on the input imagescv2.imshow(\'Bitwise And\', dest_and)  # De-allocate any associated memory usage if cv2.waitKey(0) & 0xff == 27:    cv2.destroyAllWindows()\", \"# Python program to illustrate# arithmetic operation of# bitwise OR of two images    # organizing importsimport cv2import numpy as np    # path to input images are specified and  # images are loaded with imread command img1 = cv2.imread(\'input1.png\') img2 = cv2.imread(\'input2.png\') # cv2.bitwise_or is applied over the# image inputs with applied parametersdest_or = cv2.bitwise_or(img2, img1, mask = None) # the window showing output image# with the Bitwise OR operation# on the input imagescv2.imshow(\'Bitwise OR\', dest_or)  # De-allocate any associated memory usage if cv2.waitKey(0) & 0xff == 27:    cv2.destroyAllWindows()\", \"# Python program to illustrate# arithmetic operation of# bitwise XOR of two images    # organizing importsimport cv2import numpy as np    # path to input images are specified and  # images are loaded with imread command img1 = cv2.imread(\'input1.png\') img2 = cv2.imread(\'input2.png\') # cv2.bitwise_xor is applied over the# image inputs with applied parametersdest_xor = cv2.bitwise_xor(img1, img2, mask = None) # the window showing output image# with the Bitwise XOR operation# on the input imagescv2.imshow(\'Bitwise XOR\', dest_xor)  # De-allocate any associated memory usage if cv2.waitKey(0) & 0xff == 27:    cv2.destroyAllWindows()\", \"# Python program to illustrate# arithmetic operation of# bitwise NOT on input image    # organizing importsimport cv2import numpy as np    # path to input images are specified and  # images are loaded with imread command img1 = cv2.imread(\'input1.png\') img2 = cv2.imread(\'input2.png\') # cv2.bitwise_not is applied over the# image input with applied parametersdest_not1 = cv2.bitwise_not(img1, mask = None)dest_not2 = cv2.bitwise_not(img2, mask = None) # the windows showing output image# with the Bitwise NOT operation# on the 1st and 2nd input imagecv2.imshow(\'Bitwise NOT on image 1\', dest_not1)cv2.imshow(\'Bitwise NOT on image 2\', dest_not2)  # De-allocate any associated memory usage if cv2.waitKey(0) & 0xff == 27:    cv2.destroyAllWindows()\"]','[]','[]','[\'AND|||OR|||XOR|||NOT\']'),(186,'[\'Image Resizing using OpenCV | Python\']','[\'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190429225307/Screenshot-2901.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/C://gfg//tomatoes.jpg\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Choice of Interpolation Method for Resizing –xa0\', \'Below is the code for resizing.xa0xa0\']','[\'Note: One thing to keep in mind while using the cv2.resize() function is that the tuple passed for determining the size of the new image ((1050, 1610) in this case) follows the order (width, height) unlike as expected (height, width).xa0\']','[\'Image resizing refers to the scaling of images. Scaling comes in handy in many image processing as well as machine learning applications. It helps in reducing the number of pixels from an image and that has several advantages e.g. It can reduce the time of training of a neural network as more is the number of pixels in an image more is the number of input nodes that in turn increases the complexity of the model.It also helps in zooming in images. Many times we need to resize the image i.e. either shrink it or scale up to meet the size requirements. OpenCV provides us several interpolation methods for resizing an image.xa0\']','[\'import cv2import numpy as npimport matplotlib.pyplot as plt image = cv2.imread(\"C://gfg//tomatoes.jpg\", 1)# Loading the image half = cv2.resize(image, (0, 0), fx = 0.1, fy = 0.1)bigger = cv2.resize(image, (1050, 1610)) stretch_near = cv2.resize(image, (780, 540),               interpolation = cv2.INTER_NEAREST)  Titles =[\"Original\", \"Half\", \"Bigger\", \"Interpolation Nearest\"]images =[image, half, bigger, stretch_near]count = 4 for i in range(count):    plt.subplot(2, 2, i + 1)    plt.title(Titles[i])    plt.imshow(images[i]) plt.show()\']','[]','[]','[\'cv2.INTER_AREA: This is used when we need to shrink an image.|||cv2.INTER_CUBIC: This is slow but more efficient.|||cv2.INTER_LINEAR: This is primarily used when zooming is required. This is the default interpolation technique in OpenCV.\']'),(187,'[\'Image Processing in Python (Scaling, Rotating, Shifting and Edge Detection)\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/cc-1.png\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/result2.jpg\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/result3.jpg\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/result4.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://opencv.org/\', \'https://en.wikipedia.org/wiki/Object_detection\', \'https://en.wikipedia.org/wiki/Canny_edge_detector\', \'https://github.com/ravi089/Image-Processing-Python\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Let’s start with a simple one i.e Scaling an image.\', \'Scaling an Image :-\', \'Scaling operation increases/reduces size of an image.\', \'Translating an Image :-Translating an image means shifting it within a given frame of reference.\', \'Please refer Github for more details.\']','[\'Rotating an image :-Images can be rotated to any degree clockwise or otherwise. We just need to define rotation matrix listing rotation point, degree of rotation and the scaling factor.\', \'Edge detection in an Image :-The process of image detection involves detecting sharp edges in the image. This edge detection is essential in context of image recognition or object localization/detection. There are several algorithms for detecting edges due to it’s wide applicability. We’ll be using one such algorithm known as Canny Edge Detection.\']','[\'Taking pictures is just a matter of click so why playing around with it should be more than few lines of code. Seems not a case with python. There are quite a few good libraries available in python to process images such as open-cv, Pillow etc. In this article we’ll be using Open CV, an open source library for computer vision. It has C++, python and java interfaces available. It’s highly optimized (written in C/C++) for real time applications in the domain of computer vision.\']','[\"import cv2import numpy as np  FILE_NAME = \'volleyball.jpg\'try:    # Read image from disk.    img = cv2.imread(FILE_NAME)      # Get number of pixel horizontally and vertically.    (height, width) = img.shape[:2]      # Specify the size of image along with interploation methods.    # cv2.INTER_AREA is used for shrinking, whereas cv2.INTER_CUBIC    # is used for zooming.    res = cv2.resize(img, (int(width / 2), int(height / 2)), interpolation = cv2.INTER_CUBIC)      # Write image back to disk.    cv2.imwrite(\'result.jpg\', res)  except IOError:    print (\'Error while reading files !!!\')\", \"import cv2import numpy as np  FILE_NAME = \'volleyball.jpg\'try:    # Read image from the disk.    img = cv2.imread(FILE_NAME)      # Shape of image in terms of pixels.    (rows, cols) = img.shape[:2]      # getRotationMatrix2D creates a matrix needed for transformation.    # We want matrix for rotation w.r.t center to 45 degree without scaling.    M = cv2.getRotationMatrix2D((cols / 2, rows / 2), 45, 1)    res = cv2.warpAffine(img, M, (cols, rows))      # Write image back to disk.    cv2.imwrite(\'result.jpg\', res)except IOError:    print (\'Error while reading files !!!\')\", \"import cv2import numpy as np  FILE_NAME = \'volleyball.jpg\'# Create translation matrix.# If the shift is (x, y) then matrix would be# M = [1 0 x]#     [0 1 y]# Let\'s shift by (100, 50).M = np.float32([[1, 0, 100], [0, 1, 50]])  try:      # Read image from disk.    img = cv2.imread(FILE_NAME)    (rows, cols) = img.shape[:2]      # warpAffine does appropriate shifting given the    # translation matrix.    res = cv2.warpAffine(img, M, (cols, rows))      # Write image back to disk.    cv2.imwrite(\'result.jpg\', res)  except IOError:    print (\'Error while reading files !!!\')\", \"import cv2import numpy as np  FILE_NAME = \'volleyball.jpg\'try:    # Read image from disk.    img = cv2.imread(FILE_NAME)      # Canny edge detection.    edges = cv2.Canny(img, 100, 200)      # Write image back to disk.    cv2.imwrite(\'result.jpg\', edges)except IOError:    print (\'Error while reading files !!!\')\"]','[]','[]','[]'),(188,'[\'Python | Image blurring using OpenCV\']','[]','[]','[\'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-0e80b99ad85fefbbc12134e069537987_l3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190417162731/Screenshot-2831.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/C://Geeksforgeeks//image_processing//fruits.jpg\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Advantages of blurring:\', \'Important types of blurring:\', \'Below is the Python code:\']','[\'Image Blurring refers to making the image less clear or distinct. It is done with the help of various low pass filter kernels.\']','[]','[\"# importing librariesimport cv2import numpy as np  image = cv2.imread(\'C://Geeksforgeeks//image_processing//fruits.jpg\')  cv2.imshow(\'Original Image\', image)cv2.waitKey(0)  # Gaussian BlurGaussian = cv2.GaussianBlur(image, (7, 7), 0)cv2.imshow(\'Gaussian Blurring\', Gaussian)cv2.waitKey(0)  # Median Blurmedian = cv2.medianBlur(image, 5)cv2.imshow(\'Median Blurring\', median)cv2.waitKey(0)    # Bilateral Blurbilateral = cv2.bilateralFilter(image, 9, 75, 75)cv2.imshow(\'Bilateral Blurring\', bilateral)cv2.waitKey(0)cv2.destroyAllWindows()\"]','[]','[]','[\'It helps in Noise removal. As noise is considered as high pass signal so by the application of low pass filter kernel we restrict noise.|||It helps in smoothing the image.|||Low intensity edges are removed.|||It helps in hiding the details when necessary. For e.g. in many cases police deliberately want to hide the face of the victim, in such cases blurring is required.&&&Gaussian Blurring:Gaussian blur is the result of blurring an image by a Gaussian function. It is a widely used effect in graphics software, typically to reduce image noise and reduce detail. It is also used as a preprocessing stage before applying our machine learning or deep learning models.E.g. of a Gaussian kernel(3×3)|||Median Blur: The Median Filter is a non-linear digital filtering technique, often used to remove noise from an image or signal. Median filtering is very widely used in digital image processing because, under certain conditions, it preserves edges while removing noise. It is one of the best algorithms to remove Salt and pepper noise.|||Bilateral Blur: A bilateral filter is a non-linear, edge-preserving, and noise-reducing smoothing filter for images. It replaces the intensity of each pixel with a weighted average of intensity values from nearby pixels. This weight can be based on a Gaussian distribution. Thus, sharp edges are preserved while discarding the weak ones.\']'),(189,'[\'Erosion and Dilation of images using OpenCV in python\']','[\'Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Selection_014.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://write.geeksforgeeks.org\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Working of erosion:xa0xa0\', \'Basics of dilation:xa0xa0\', \'Working of dilation:xa0\', \'Uses of Erosion and Dilation:xa0xa0\']','[\'Morphological operations are a set of operations that process images based on shapes. They apply a structuring element to an input image and generate an output image.xa0The most basic morphological operations are two: Erosion and Dilationxa0Basics of Erosion:xa0xa0\', \'The second image is the eroded form of the original image and the third image is the dilated form.xa0xa0\']','[\'This article is contributed by Pratima Upadhyay. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.xa0\']','[\"# Python program to demonstrate erosion and# dilation of images.import cv2import numpy as np # Reading the input imageimg = cv2.imread(\'input.png\', 0) # Taking a matrix of size 5 as the kernelkernel = np.ones((5,5), np.uint8) # The first parameter is the original image,# kernel is the matrix with which image is# convolved and third parameter is the number# of iterations, which will determine how much# you want to erode/dilate a given image.img_erosion = cv2.erode(img, kernel, iterations=1)img_dilation = cv2.dilate(img, kernel, iterations=1) cv2.imshow(\'Input\', img)cv2.imshow(\'Erosion\', img_erosion)cv2.imshow(\'Dilation\', img_dilation) cv2.waitKey(0)\"]','[]','[]','[\'Erodes away the boundaries of the foreground object|||Used to diminish the features of an image.&&&Increases the object area|||Used to accentuate features&&&It is useful for removing small white noises.|||Used to detach two connected objects etc.&&&In cases like noise removal, erosion is followed by dilation. Because, erosion removes white noises, but it also shrinks our object. So we dilate it. Since noise is gone, they won’t come back, but our object area increases.|||It is also useful in joining broken parts of an object.&&&&&&A kernel(a matrix of odd size(3,5,7) is convolved with the image.|||A pixel in the original image (either 1 or 0) will be considered 1 only if all the pixels under the kernel are 1, otherwise, it is eroded (made to zero).|||Thus all the pixels near the boundary will be discarded depending upon the size of the kernel.|||So the thickness or size of the foreground object decreases or simply the white region decreases in the image.&&&A kernel(a matrix of odd size(3,5,7) is convolved with the image|||A pixel element in the original image is ‘1’ if at least one pixel under the kernel is ‘1’.|||It increases the white region in the image or the size of the foreground object increases&&&Erosion:It is useful for removing small white noises.Used to detach two connected objects etc.|||It is useful for removing small white noises.|||Used to detach two connected objects etc.|||Dilation:In cases like noise removal, erosion is followed by dilation. Because, erosion removes white noises, but it also shrinks our object. So we dilate it. Since noise is gone, they won’t come back, but our object area increases.It is also useful in joining broken parts of an object.|||In cases like noise removal, erosion is followed by dilation. Because, erosion removes white noises, but it also shrinks our object. So we dilate it. Since noise is gone, they won’t come back, but our object area increases.|||It is also useful in joining broken parts of an object.&&&\']'),(190,'[\'Python | Thresholding techniques using OpenCV | Set-1 (Simple Thresholding)\']','[\'Python3\']','[\'Simple Thresholding\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190505162413/Screenshot-4113.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190505163930/download5.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190505163732/Screenshot-427.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'In OpenCV with Python, the function cv2.threshold is used for thresholding.xa0xa0\', \'Below is the Python code explaining different Simple Thresholding Techniques –xa0xa0\']','[\'Syntax: cv2.threshold(source, thresholdValue, maxVal, thresholdingTechnique)xa0Parameters:xa0-> source: Input Image array (must be in Grayscale).xa0-> thresholdValue: Value of Threshold below and above which pixel values will change accordingly.xa0-> maxVal: Maximum value that can be assigned to a pixel.xa0-> thresholdingTechnique: The type of thresholding to be applied.xa0xa0\', \'The basic Thresholding technique is Binary Thresholding. For every pixel, the same threshold value is applied. If the pixel value is smaller than the threshold, it is set to 0, otherwise, it is set to a maximum value.The different Simple Thresholding Techniques are:xa0xa0\']','[\'Thresholding is a technique in OpenCV, which is the assignment of pixel values in relation to the threshold value provided. In thresholding, each pixel value is compared with the threshold value. If the pixel value is smaller than the threshold, it is set to 0, otherwise, it is set to a maximum value (generally 255). Thresholding is a very popular segmentation technique, used for separating an object considered as a foreground from its background. A threshold is a value which has two regions on its either side i.e. below the threshold or above the threshold.xa0In Computer Vision, this technique of thresholding is done on grayscale images. So initially, the image has to be converted in grayscale color space.xa0xa0\']','[\"# Python program to illustrate# simple thresholding type on an image     # organizing importsimport cv2import numpy as np # path to input image is specified and # image is loaded with imread commandimage1 = cv2.imread(\'input1.jpg\') # cv2.cvtColor is applied over the# image input with applied parameters# to convert the image in grayscaleimg = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY) # applying different thresholding# techniques on the input image# all pixels value above 120 will# be set to 255ret, thresh1 = cv2.threshold(img, 120, 255, cv2.THRESH_BINARY)ret, thresh2 = cv2.threshold(img, 120, 255, cv2.THRESH_BINARY_INV)ret, thresh3 = cv2.threshold(img, 120, 255, cv2.THRESH_TRUNC)ret, thresh4 = cv2.threshold(img, 120, 255, cv2.THRESH_TOZERO)ret, thresh5 = cv2.threshold(img, 120, 255, cv2.THRESH_TOZERO_INV) # the window showing output images# with the corresponding thresholding# techniques applied to the input imagescv2.imshow(\'Binary Threshold\', thresh1)cv2.imshow(\'Binary Threshold Inverted\', thresh2)cv2.imshow(\'Truncated Threshold\', thresh3)cv2.imshow(\'Set to 0\', thresh4)cv2.imshow(\'Set to 0 Inverted\', thresh5)   # De-allocate any associated memory usage if cv2.waitKey(0) & 0xff == 27:    cv2.destroyAllWindows()\"]','[\'If f (x, y) < T \n   then f (x, y) = 0 \nelse \n   f (x, y) = 255\n\nwhere \nf (x, y) = Coordinate Pixel Value\nT = Threshold Value.\']','[]','[\'cv2.THRESH_BINARY: If pixel intensity is greater than the set threshold, value set to 255, else set to 0 (black).|||cv2.THRESH_BINARY_INV: Inverted or Opposite case of cv2.THRESH_BINARY.|||cv.THRESH_TRUNC: If pixel intensity value is greater than threshold, it is truncated to the threshold. The pixel values are set to be the same as the threshold. All other values remain the same.|||cv.THRESH_TOZERO: Pixel intensity is set to 0, for all the pixels intensity, less than the threshold value.|||cv.THRESH_TOZERO_INV: Inverted or Opposite case of cv2.THRESH_TOZERO.\']'),(191,'[\'Python | Thresholding techniques using OpenCV | Set-2 (Adaptive Thresholding)\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190506013251/bp1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190506013415/Screenshot-443.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-1-simple-thresholding/\', \'https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-1-simple-thresholding/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190506013251/bp1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190506013415/Screenshot-443.png\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Prerequisite: Simple Thresholding using OpenCV\', \'Syntax: cv2.adaptiveThreshold(source, maxVal, adaptiveMethod, thresholdType, blocksize, constant)\', \'Below is the Python implementation :\', \'Input Image:\']','[\'Parameters:-> source: Input Image array(Single-channel, 8-bit or floating-point)-> maxVal: Maximum value that can be assigned to a pixel.-> adaptiveMethod: Adaptive method decides how threshold value is calculated.\', \'xa0cv2.ADAPTIVE_THRESH_MEAN_C: Threshold Value = (Mean of the neighbourhood area values – constant value). In other words, it is the mean of the blockSize×blockSize neighborhood of a point minus constant.\', \'cv2.ADAPTIVE_THRESH_GAUSSIAN_C: Threshold Value = (Gaussian-weighted sum of the neighbourhood values – constant value). In other words, it is a weighted sum of the blockSize×blockSize neighborhood of a point minus constant.\', \'-> thresholdType: The type of thresholding to be applied.-> blockSize: Size of a pixel neighborhood that is used to calculate a threshold value.-> constant: A constant value that is subtracted from the mean or weighted sum of the neighbourhood pixels.\']','[\'In the previous post, Simple Thresholding was explained with different types of thresholding techniques. Another Thresholding technique is Adaptive Thresholding. In Simple Thresholding, a global value of threshold was used which remained constant throughout. So, a constant threshold value won’t help in the case of variable lighting conditions in different areas. Adaptive thresholding is the method where the threshold value is calculated for smaller regions. This leads to different threshold values for different regions with respect to the change in lighting. We use cv2.adaptiveThreshold for this.\']','[\"# Python program to illustrate # adaptive thresholding type on an image       # organizing imports import cv2 import numpy as np    # path to input image is specified and  # image is loaded with imread command image1 = cv2.imread(\'input1.jpg\')    # cv2.cvtColor is applied over the# image input with applied parameters# to convert the image in grayscale img = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)   # applying different thresholding # techniques on the input imagethresh1 = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C,                                          cv2.THRESH_BINARY, 199, 5)  thresh2 = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,                                          cv2.THRESH_BINARY, 199, 5)  # the window showing output images# with the corresponding thresholding # techniques applied to the input imagecv2.imshow(\'Adaptive Mean\', thresh1)cv2.imshow(\'Adaptive Gaussian\', thresh2)       # De-allocate any associated memory usage  if cv2.waitKey(0) & 0xff == 27:     cv2.destroyAllWindows()\"]','[]','[]','[]'),(192,'[\'Python | Thresholding techniques using OpenCV | Set-3 (Otsu Thresholding)\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190524233042/download6.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190524233336/Screenshot-462.png\']','[]','[\'https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-1-simple-thresholding/\', \'https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-2-adaptive-thresholding/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190524233042/download6.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190524233336/Screenshot-462.png\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'We use the Traditional cv2.threshold function and use cv2.THRESH_OTSU as an extra flag.\', \'Syntax: cv2.threshold(source, thresholdValue, maxVal, thresholdingTechnique)\', \'Below is the Python code explaining Otsu Thresholding Technique –\']','[\'In the previous posts, Simple Thresholding and Adaptive Thresholding were explained. In Simple Thresholding, the global value of threshold was used which remained constant throughout. In Adaptive thresholding, the threshold value is calculated for smaller regions with different threshold values for different regions with respect to the change in lighting.\', \'In Otsu Thresholding, a value of the threshold isn’t chosen but is determined automatically. A bimodal image (two distinct image values) is considered. The histogram generated contains two peaks. So, a generic condition would be to choose a threshold value that lies in the middle of both the histogram peak values.\', \'Parameters:-> source: Input Image array (must be in Grayscale).-> thresholdValue: Value of Threshold below and above which pixel values will change accordingly.-> maxVal: Maximum value that can be assigned to a pixel.-> thresholdingTechnique: The type of thresholding to be applied.\', \'The calculation accepts that the picture contains two classes of pixels following foreground and background pixels, it at that point ascertains the ideal limit isolating the two classes with the goal that their consolidated spread is insignificant.\']','[]','[\"# Python program to illustrate# Otsu thresholding type on an image  # organizing importsimport cv2         import numpy as np      # path to input image is specified and# image is loaded with imread commandimage1 = cv2.imread(\'input1.jpg\')  # cv2.cvtColor is applied over the# image input with applied parameters# to convert the image in grayscaleimg = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)  # applying Otsu thresholding# as an extra flag in binary # thresholding     ret, thresh1 = cv2.threshold(img, 120, 255, cv2.THRESH_BINARY +                                             cv2.THRESH_OTSU)       # the window showing output image         # with the corresponding thresholding         # techniques applied to the input image    cv2.imshow(\'Otsu Threshold\', thresh1)                # De-allocate any associated memory usage         if cv2.waitKey(0) & 0xff == 27:    cv2.destroyAllWindows()\"]','[]','[]','[]'),(193,'[\'Filter Color with OpenCV\']','[\'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190623003704/Screenshot-3091-300x238.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190623003738/Screenshot-3111-300x237.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190623003814/Screenshot-3121-300x235.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Below is the code:xa0xa0\', \'Original Image-xa0xa0\', \'Masked Image-xa0xa0\', \'Blue Color segmented regions-xa0xa0\']','[]','[\'Colour segmentation or color filtering is widely used in OpenCV for identifying specific objects/regions having a specific color. The most widely used color space is RGB color space, it is called an additive color space as the three color shades add up to give color to the image. To identify a region of a specific color, put the threshold and create a mask to separate the different colors. HSV color space is much more useful for this purpose as the colors in HSV space are much more localized thus can be easily separated. Color Filtering has many applications and uses cases such as in Cryptography, infrared analysis, food preservation of perishable foods, etc. In such cases, the concepts of Image processing can be used to find out or extract out regions of a particular color.xa0For color segmentation, all we need is the threshold values or the knowledge of the lower bound and upper bound range of colors in one of the color spaces. It works best in the Hue-Saturation-Value color space.xa0After specifying the range of color to be segmented, it is needed to create a mask accordingly and by using it, a particular region of interest can be separated out.xa0\']','[\"import cv2import numpy as np cap = cv2.VideoCapture(0) while(1):    _, frame = cap.read()    # It converts the BGR color space of image to HSV color space    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)         # Threshold of blue in HSV space    lower_blue = np.array([60, 35, 140])    upper_blue = np.array([180, 255, 255])     # preparing the mask to overlay    mask = cv2.inRange(hsv, lower_blue, upper_blue)         # The black region in the mask has the value of 0,    # so when multiplied with original image removes all non-blue regions    result = cv2.bitwise_and(frame, frame, mask = mask)     cv2.imshow(\'frame\', frame)    cv2.imshow(\'mask\', mask)    cv2.imshow(\'result\', result)         cv2.waitKey(0) cv2.destroyAllWindows()cap.release()\"]','[]','[]','[]'),(194,'[\'Python | Bilateral Filtering\']','[\'Gaussian Blur\', \'Bilateral Filter: an Additional Edge Term\', \'Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190824233655/gaussian_eq.png\', \'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-0ab47573054042989fd4bcb26e11e4b5_l3.png\', \'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-42f7a065dd2227dee68ea2f22414ed00_l3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190825010814/Untitled-Diagram-138.png\', \'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-61d61c9282f189374b9b56a8428e6dd6_l3.png\', \'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-a1501e63129b9990c626d501fde93a0a_l3.png\', \'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-a1501e63129b9990c626d501fde93a0a_l3.png\', \'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-a1501e63129b9990c626d501fde93a0a_l3.png\', \'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-e7f9e4ed45460e5bf58e6beb367664ab_l3.png\', \'https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-e7f9e4ed45460e5bf58e6beb367664ab_l3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190825194611/taj.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190825195026/taj_bilateral.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190825195324/taj_avg.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190825195427/taj_median.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190825195613/taj_gaussian.jpg\']','[]','[\'https://www.geeksforgeeks.org/salt-and-pepper-noise-removal-using-c/\', \'https://www.geeksforgeeks.org/noise-removal-using-median-filter-in-c/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Gaussian blurring can be formulated as follows:xa0\', \'The bilateral filter can be formulated as follows:xa0xa0\', \'Code :xa0Input : Noisy Image.xa0\', \'Code : Implementing Bilateral Filteringxa0\', \'Output of Bilateral Filterxa0\', \'Below is the output of the median filter (cv2.medianBlur(img, 5)).xa0xa0\', \'Below is the output of the Gaussian filter (cv2.GaussianBlur(img, (5, 5), 0)).xa0xa0\']','[\'Here,xa0is the result at pixel p, and the RHS is essentially a sum over all pixels q weighted by the Gaussian function.xa0is the intensity at pixel q.\', \'Comparison with Average and Median filtersxa0Below is the output of the average filter (cv2.blur(img, (5, 5))).xa0\', \'It is easy to note that all these denoising filters smudge the edges, while Bilateral Filtering retains them.\']','[\'A bilateral filter is used for smoothening images and reducing noise, while preserving edges. This article explains an approach using the averaging filter, while this article provides one using a median filter. However, these convolutions often result in a loss of important edge information, since they blur out everything, irrespective of it being noise or an edge. To counter this problem, the non-linear bilateral filter was introduced.xa0\', \'Here, the normalization factor and the range weight are new terms added to the previous equation.xa0denotes the spatial extent of the kernel, i.e. the size of the neighborhood, andxa0denotes the minimum amplitude of an edge. It ensures that only those pixels with intensity values similar to that of the central pixel are considered for blurring, while sharp intensity changes are maintained. The smaller the value ofxa0, the sharper the edge. Asxa0tends to infinity, the equation tends to a Gaussian blur.OpenCV has a function called bilateralFilter() with the following arguments:xa0xa0\']','[\"import cv2 # Read the image.img = cv2.imread(\'taj.jpg\') # Apply bilateral filter with d = 15,# sigmaColor = sigmaSpace = 75.bilateral = cv2.bilateralFilter(img, 15, 75, 75) # Save the output.cv2.imwrite(\'taj_bilateral.jpg\', bilateral)\"]','[]','[]','[\'d: Diameter of each pixel neighborhood.|||sigmaColor: Value ofin the color space. The greater the value, the colors farther to each other will start to get mixed.|||sigmaSpace: Value ofin the coordinate space. The greater its value, the more further pixels will mix together, given that their colors lie within the sigmaColor range.\']'),(195,'[\'Python | Background subtraction using OpenCV\']','[\'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190628230551/Screenshot-from-2019-06-28-21-52-12-300x190.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190628230638/Screenshot-from-2019-06-28-21-52-121-300x193.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Original video frame:xa0xa0\', \'Background subtracted video frame:xa0xa0\']','[\'Thus, we saw an application of background subtraction algorithm detecting motions, life in video frames.xa0\']','[\'Background Subtraction has several use cases in everyday life, It is being used for object segmentation, security enhancement, pedestrian tracking, counting the number of visitors, number of vehicles in traffic etc. It is able to learn and identify the foreground mask.As the name suggests, it is able to subtract or eliminate the background portion in an image. Its output is a binary segmented image which essentially gives information about the non-stationary objects in the image. There lies a problem in this concept of finding non-stationary portion, as the shadow of the moving object can be moving and sometimes being classified in the foreground.The popular Background subtraction algorithms are:xa0xa0\']','[\"# Python code for Background subtraction using OpenCVimport numpy as npimport cv2 cap = cv2.VideoCapture(\'/home/sourabh/Downloads/people-walking.mp4\')fgbg = cv2.createBackgroundSubtractorMOG2() while(1):    ret, frame = cap.read()     fgmask = fgbg.apply(frame)      cv2.imshow(\'fgmask\', fgmask)    cv2.imshow(\'frame\',frame )          k = cv2.waitKey(30) & 0xff    if k == 27:        break      cap.release()cv2.destroyAllWindows()\"]','[]','[]','[\'BackgroundSubtractorMOG : It is a gaussian mixture based background segmentation algorithm.|||BackgroundSubtractorMOG2: It uses the same concept but the major advantage that it provides is in terms of stability even when there is change in luminosity and better identification capability of shadows in the frames.|||Geometric multigrid: It makes uses of statistical method and per pixel bayesin segmentation algorithm.\']'),(196,'[\'Python | Play a video using OpenCV\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/python-play-video-reverse-mode-using-opencv/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Let’s see how to play a video using the OpenCV Python.\', \'Below is the implementation:\', \'Note : Video file should have in same directory where program is executed.Output:\', \'Sample Frame of video :\', \'Related Article : How to play video in reverse mode.\']','[\'OpenCV (Open Source Computer Vision) is a computer vision library that contains various functions to perform operations on Images or videos. OpenCV library can be used to perform multiple operations on videos.\', \'To capture a video, we need to create a VideoCapture object. VideoCapture have the device index or the name of a video file. Device index is just the number to specify which camera. If we pass 0 then it is for first camera, 1 for second camera so on. We capture the video frame by frame.Syntax :\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# importing librariesimport cv2import numpy as np   # Create a VideoCapture object and read from input filecap = cv2.VideoCapture(\'tree.mp4\')   # Check if camera opened successfullyif (cap.isOpened()== False):   print(\"Error opening video  file\")   # Read until video is completedwhile(cap.isOpened()):        # Capture frame-by-frame  ret, frame = cap.read()  if ret == True:       # Display the resulting frame    cv2.imshow(\'Frame\', frame)       # Press Q on keyboard to  exit    if cv2.waitKey(25) & 0xFF == ord(\'q\'):      break     # Break the loop  else:     break   # When everything done, release # the video capture objectcap.release()   # Closes all the framescv2.destroyAllWindows()\']','[\'cv2.VideoCapture(0): Means first camera or webcam.\ncv2.VideoCapture(1):  Means second camera or webcam.\ncv2.VideoCapture(\"file name.mp4\"): Means video file\']','[]','[]'),(197,'[\'Extract images from video in Python\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/Screen-Shot-2018-07-18-at-5.17.30-PM.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/b-3.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/tag/opencv/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Modules Needed:\', \'Function Used :\', \'VideoCapture(File_path) : Read the video(.mp4 format)\', \'read() : Read data depending upon the type of object that calls\', \'imwrite(filename, img[, params]) : Saves an image to a specified file.\', \'Below is the implementation:\', \'All the extracted images will be saved in a folder named “data” on the system.\']','[\'OpenCV comes with many powerful video editing functions. In current scenario, techniques such as image scanning, face recognition can be accomplished using OpenCV.\', \'Image Analysis is a very common field in the area of Computer Vision. It is the extraction of meaningful information from videos or images. OpenCv library can be used to perform multiple operations on videos.\']','[]','[\'# Importing all necessary librariesimport cv2import os  # Read the video from specified pathcam = cv2.VideoCapture(\"C:\\\\Users\\\\Admin\\\\PycharmProjects\\\\project_1\\\\openCV.mp4\")  try:          # creating a folder named data    if not os.path.exists(\'data\'):        os.makedirs(\'data\')  # if not created then raise errorexcept OSError:    print (\'Error: Creating directory of data\')  # framecurrentframe = 0  while(True):          # reading from frame    ret,frame = cam.read()      if ret:        # if video is still left continue creating images        name = \'./data/frame\' + str(currentframe) + \'.jpg\'        print (\'Creating...\' + name)          # writing the extracted images        cv2.imwrite(name, frame)          # increasing counter so that it will        # show how many frames are created        currentframe += 1    else:        break  # Release all space and windows once donecam.release()cv2.destroyAllWindows()\']','[\'import cv2\nimport os\']','[]','[]'),(198,'[\'Face Detection using Python and OpenCV with webcam\']','[\'Python\', \'Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/2-59-300x151.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/1-69-300x196.jpg\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://github.com/vschs007/realtime-face-detection-using-python-and-opencv/blob/master/haarcascade_frontalface_default.xml\', \'https://github.com/vschs007/realtime-face-detection-using-python-and-opencv/blob/master/haarcascade_frontalface_default.xml\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Approach/Algorithms used:xa0xa0\', \'How to use :xa0xa0\', \'Following code should be run after the model has been trained for the faces :xa0\', \'Note : Above programs will not run on online IDE.xa0xa0\', \'Screenshots of the Program\', \'face detection\', \'Datasets Storage :xa0xa0\']','[\'OpenCV is a Library which is used to carry out image processing using programming languages like python. This project utilizes OpenCV Library to make a Real-Time Face Detection using your webcam as a primary camera.Following are the requirements for it:-xa0xa0\', \'It may look something different because I had integrated the above program on flask frameworkRunning of second program yields results similar to the below image :xa0xa0\']','[]','[\"# Creating database# It captures images and stores them in datasets# folder under the folder name of sub_dataimport cv2, sys, numpy, oshaar_file = \'haarcascade_frontalface_default.xml\' # All the faces data will be#  present this folderdatasets = \'datasets\'   # These are sub data sets of folder,# for my faces I\'ve used my name you can# change the label heresub_data = \'vivek\'     path = os.path.join(datasets, sub_data)if not os.path.isdir(path):    os.mkdir(path) # defining the size of images(width, height) = (130, 100)    #\'0\' is used for my webcam,# if you\'ve any other camera#  attached use \'1\' like thisface_cascade = cv2.CascadeClassifier(haar_file)webcam = cv2.VideoCapture(0) # The program loops until it has 30 images of the face.count = 1while count < 30:    (_, im) = webcam.read()    gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)    faces = face_cascade.detectMultiScale(gray, 1.3, 4)    for (x, y, w, h) in faces:        cv2.rectangle(im, (x, y), (x + w, y + h), (255, 0, 0), 2)        face = gray[y:y + h, x:x + w]        face_resize = cv2.resize(face, (width, height))        cv2.imwrite(\'% s/% s.png\' % (path, count), face_resize)    count += 1         cv2.imshow(\'OpenCV\', im)    key = cv2.waitKey(10)    if key == 27:        break\", \"# It helps in identifying the facesimport cv2, sys, numpy, ossize = 4haar_file = \'haarcascade_frontalface_default.xml\'datasets = \'datasets\' # Part 1: Create fisherRecognizerprint(\'Recognizing Face Please Be in sufficient Lights...\') # Create a list of images and a list of corresponding names(images, labels, names, id) = ([], [], {}, 0)for (subdirs, dirs, files) in os.walk(datasets):    for subdir in dirs:        names[id] = subdir        subjectpath = os.path.join(datasets, subdir)        for filename in os.listdir(subjectpath):            path = subjectpath + \'/\' + filename            label = id            images.append(cv2.imread(path, 0))            labels.append(int(label))        id += 1(width, height) = (130, 100) # Create a Numpy array from the two lists above(images, labels) = [numpy.array(lis) for lis in [images, labels]] # OpenCV trains a model from the images# NOTE FOR OpenCV2: remove \'.face\'model = cv2.face.LBPHFaceRecognizer_create()model.train(images, labels) # Part 2: Use fisherRecognizer on camera streamface_cascade = cv2.CascadeClassifier(haar_file)webcam = cv2.VideoCapture(0)while True:    (_, im) = webcam.read()    gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)    faces = face_cascade.detectMultiScale(gray, 1.3, 5)    for (x, y, w, h) in faces:        cv2.rectangle(im, (x, y), (x + w, y + h), (255, 0, 0), 2)        face = gray[y:y + h, x:x + w]        face_resize = cv2.resize(face, (width, height))        # Try to recognize the face        prediction = model.predict(face_resize)        cv2.rectangle(im, (x, y), (x + w, y + h), (0, 255, 0), 3)         if prediction[1]<500:            cv2.putText(im, \'% s - %.0f\' %(names[prediction[0]], prediction[1]), (x-10, y-10),cv2.FONT_HERSHEY_PLAIN, 1, (0, 255, 0))        else:          cv2.putText(im, \'not recognized\',(x-10, y-10), cv2.FONT_HERSHEY_PLAIN, 1, (0, 255, 0))     cv2.imshow(\'OpenCV\', im)         key = cv2.waitKey(10)    if key == 27:        break\"]','[]','[]','[\'Python 2.7|||OpenCV|||Numpy|||Haar Cascade Frontal face classifiers&&&This project uses LBPH (Local Binary Patterns Histograms) Algorithm to detect faces. It labels the pixels of an image by thresholding the neighborhood of each pixel and considers the result as a binary number.|||LBPH uses 4 parameters :(i) Radius: the radius is used to build the circular local binary pattern and represents the radius around thecentral pixel.(ii) Neighbors : the number of sample points to build the circular local binary pattern.(iii) Grid X : the number of cells in the horizontal direction.(iv) Grid Y : the number of cells in the vertical direction.|||The model built is trained with the faces with tag given to them, and later on, the machine is given a test data and machine decides the correct label for it.&&&Create a directory in your pc and name it (say project)|||Create two python files named create_data.py and face_recognize.py, copy the first source code and second source code in it respectively.|||Copy haarcascade_frontalface_default.xml to the project directory, you can get it in opencv or fromhere.|||You are ready to now run the following codes.\']'),(199,'[\'Selenium Python Tutorial\']','[]','[\'Why learn Selenium Python ?\', \'Selenium WebDriver\']','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://www.geeksforgeeks.org/java/\', \'https://www.geeksforgeeks.org/csharp-programming-language/\', \'https://www.geeksforgeeks.org/selenium-basics-components-features-uses-and-limitations/\', \'https://www.geeksforgeeks.org/components-of-selenium/\', \'https://www.geeksforgeeks.org/applications-and-uses-of-selenium-webdriver/\', \'https://www.geeksforgeeks.org/features-of-selenium-webdriver/\', \'https://www.geeksforgeeks.org/limitations-of-selenium-webdriver/\', \'https://geeksforgeeks.org/selenium-python-introduction-and-installation/\', \'https://www.geeksforgeeks.org/navigating-links-using-get-method-selenium-python/\', \'https://www.geeksforgeeks.org/interacting-with-webpage-selenium-python/\', \'https://www.geeksforgeeks.org/locating-single-elements-in-selenium-python/\', \'https://www.geeksforgeeks.org/locating-multiple-elements-in-selenium-python/\', \'https://www.geeksforgeeks.org/locator-strategies-selenium-python/\', \'https://www.geeksforgeeks.org/writing-tests-using-selenium-python/\', \'https://www.geeksforgeeks.org/find_element_by_id-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/find_element_by_name-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/find_element_by_xpath-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_partial_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_tag_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_class_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_css_selector-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_name-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/find_elements_by_xpath-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_partial_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_tag_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_class_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_css_selector-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/explicit-waits-in-selenium-python/\', \'https://www.geeksforgeeks.org/implicit-waits-in-selenium-python/\', \'https://www.geeksforgeeks.org/action-chains-in-selenium-python/\', \'https://geeksforgeeks.org/click-method-action-chains-in-selenium-python/\', \'https://www.geeksforgeeks.org/click_and_hold-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/context_click-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/double_click-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/drag_and_drop-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/key_down-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/key_up-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/move_by_offset-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/move_to_element-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/move_to_element_with_offset-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/release-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/reset_actions-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/send_keys-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/exceptions-selenium-python/\', \'https://www.geeksforgeeks.org/special-keys-in-selenium-python/\', \'https://www.geeksforgeeks.org/how-to-handle-alert-prompts-in-selenium-python/\', \'https://www.geeksforgeeks.org/adding-and-deleting-cookies-in-selenium-python/\', \'https://www.geeksforgeeks.org/how-to-move-back-and-forward-in-history-using-selenium-python/\', \'https://www.geeksforgeeks.org/special-keys-in-selenium-python/\', \'https://www.geeksforgeeks.org/assertion-in-selenium-webdriver-using-testng/\', \'https://www.geeksforgeeks.org/selenium-python-tricks/\', \'https://www.geeksforgeeks.org/page-object-model-pom/\', \'https://www.geeksforgeeks.org/whatsapp-using-python/\', \'https://www.geeksforgeeks.org/browser-automation-using-selenium/\', \'https://www.geeksforgeeks.org/facebook-login-using-python/\', \'https://www.geeksforgeeks.org/python-automating-happy-birthday-post-on-facebook-using-selenium/\', \'https://www.geeksforgeeks.org/how-to-access-popup-login-window-in-selenium-using-python/\', \'https://www.geeksforgeeks.org/python-sms-bomber-using-selenium/\', \'https://www.geeksforgeeks.org/web-driver-methods-in-selenium-python/\', \'https://www.geeksforgeeks.org/add_cookie-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/back-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/close-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/create_web_element-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/delete_all_cookies-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/delete_cookie-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/execute_async_script-driver-method-selenium-python/\', \'https://geeksforgeeks.org/execute_script-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/forward-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/fullscreen_window-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/add_cookie-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/get_cookies-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/get_log-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/get_screenshot_as_base64-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/get_screenshot_as_file-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/get_screenshot_as_png-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/get_window_position-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/get_window_rect-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/get_window_size-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/implicitly_wait-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/maximize_window-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/minimize_window-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/quit-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/refresh-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/set_page_load_timeout-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/set_script_timeout-driver-method-selenium-python/?ref=rp\', \'https://geeksforgeeks.org/set_window_position-driver-method-selenium-python/\', \'https://geeksforgeeks.org/set_window_rect-driver-method-selenium-python/\', \'https://geeksforgeeks.org/current_url-driver-method-selenium-python/\', \'https://geeksforgeeks.org/current_window_handle-driver-method-selenium-python/\', \'https://geeksforgeeks.org/page_source-driver-method-selenium-python/\', \'https://geeksforgeeks.org/title-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/element-methods-in-selenium-python/\', \'https://geeksforgeeks.org/is_selected-element-method-selenium-python/\', \'https://geeksforgeeks.org/is_displayed-element-method-selenium-python/\', \'https://geeksforgeeks.org/is_enabled-element-method-selenium-python/\', \'https://geeksforgeeks.org/get_property-element-method-selenium-python/\', \'https://geeksforgeeks.org/get_attribute-element-method-selenium-python/\', \'https://geeksforgeeks.org/send_keys-element-method-selenium-python/\', \'https://geeksforgeeks.org/click-element-method-selenium-python/\', \'https://geeksforgeeks.org/clear-element-method-selenium-python/\', \'https://geeksforgeeks.org/screenshot-element-method-selenium-python/\', \'https://geeksforgeeks.org/submit-element-method-selenium-python/\', \'https://geeksforgeeks.org/value_of_css_property-element-method-selenium-python/\', \'https://geeksforgeeks.org/location-element-method-selenium-python/\', \'https://geeksforgeeks.org/screenshot_as_png-element-method-selenium-python/\', \'https://geeksforgeeks.org/parent-element-method-selenium-python/\', \'https://geeksforgeeks.org/size-element-method-selenium-python/\', \'https://geeksforgeeks.org/tag_name-element-method-selenium-python/\', \'https://geeksforgeeks.org/text-element-method-selenium-python/\', \'https://geeksforgeeks.org/rect-element-method-selenium-python/\', \'https://geeksforgeeks.org/screenshot_as_base64-element-method-selenium-python/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Selenium Python Basics\', \'Locating Strategies\', \'Action Chains\', \'Advanced in Selenium Python –\', \'Project Examples\']','[\'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Selenium is a powerful tool for controlling web browsers through programs and performing browser automation. It is functional for all browsers, works on all major OS and its scripts are written in various languages i.e Python, Java, C#, etc, we will be working with Python. Selenium Tutorial covers all topics such as – WebDriver, WebElement, Unit Testing with selenium. This Python Selenium Tutorial covers Selenium from basics to advanced and professional uses.\']','[]','[]','[]','[\'Open Source and Portable – Selenium is an open source and portable Web testing Framework.|||Combination of tool and DSL – Selenium is combination of tools and DSL (Domain Specific Language) in order to carry out various types of tests.|||Easier to understand and implement – Selenium commands are categorized in terms of different classes which make it easier to understand and implement.|||Less burden and stress for testers – As mentioned above, the amount of time required to do testing repeated test scenarios on each and every new build is reduced to zero, almost. Hence, the burden of tester gets reduced.|||Cost reduction for the Business Clients – The Business needs to pay the testers their salary, which is saved using automation testing tool. The automation not only saves time but gets cost benefits too, to the business.&&&Selenium Basics|||Components of Selenium|||Applications and Uses|||Features|||Limitations&&&Selenium Python Introduction and Installation|||Navigating links using get method|||Interacting with Webpage|||Locating single elements|||Locating multiple elements|||Locator Strategies – Selenium Python|||Writing Tests using Selenium Python&&&Locating Single Elements –find_element_by_id()find_element_by_name()find_element_by_xpath()find_element_by_link_text()find_element_by_partial_link_text()find_element_by_tag_name()find_element_by_class_name()find_element_by_css_selector()|||find_element_by_id()|||find_element_by_name()|||find_element_by_xpath()|||find_element_by_link_text()|||find_element_by_partial_link_text()|||find_element_by_tag_name()|||find_element_by_class_name()|||find_element_by_css_selector()|||Locating Multiple Elements –find_elements_by_name()find_elements_by_xpath()find_elements_by_link_text()find_element_by_partial_link_text()find_elements_by_tag_name()find_elements_by_class_name()find_elements_by_css_selector()|||find_elements_by_name()|||find_elements_by_xpath()|||find_elements_by_link_text()|||find_element_by_partial_link_text()|||find_elements_by_tag_name()|||find_elements_by_class_name()|||find_elements_by_css_selector()&&&find_element_by_id()|||find_element_by_name()|||find_element_by_xpath()|||find_element_by_link_text()|||find_element_by_partial_link_text()|||find_element_by_tag_name()|||find_element_by_class_name()|||find_element_by_css_selector()&&&find_elements_by_name()|||find_elements_by_xpath()|||find_elements_by_link_text()|||find_element_by_partial_link_text()|||find_elements_by_tag_name()|||find_elements_by_class_name()|||find_elements_by_css_selector()&&&Explicit waits|||Implicit Waits&&&Action Chains Basics|||click|||click_and_hold|||context_click|||double_click|||drag_and_drop|||key_down|||key_up|||move_by_offset|||move_to_element|||move_to_element_with_offset|||release|||reset_actions|||send_keys&&&Handling Exceptions – Selenium Python|||Special Keys in Selenium Python|||How to handle alert prompts in Selenium Python ?|||Adding and Deleting Cookies in Selenium Python|||How to move back and forward in History using Selenium Python ?|||Special Keys in Selenium Python|||Assertion in Selenium WebDriver using TestNg|||Selenium Python Tricks|||Page Object Model (POM)&&&Whatsapp using Python!|||Browser Automation Using Selenium|||Facebook Login using Python|||Automating Happy Birthday post on Facebook using Selenium|||How to access popup login window in selenium using Python|||SMS Bomber using Selenium\']'),(200,'[\'Selenium Basics – Components, Features, Uses and Limitations\', \'Selenium Basics\']','[\'Components\', \'Features\', \'Applications\', \'Limitations\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200404153047/Components-of-Selenium.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/#components\', \'https://www.geeksforgeeks.org/#features\', \'https://www.geeksforgeeks.org/#applications\', \'https://www.geeksforgeeks.org/#limitations\', \'https://www.geeksforgeeks.org/#IDE\', \'https://www.geeksforgeeks.org/#RC\', \'https://www.geeksforgeeks.org/#web-driver\', \'https://www.geeksforgeeks.org/#GRID\', \'https://www.geeksforgeeks.org/components-of-selenium/\', \'https://www.geeksforgeeks.org/features-of-selenium-webdriver/\', \'https://www.geeksforgeeks.org/applications-and-uses-of-selenium-webdriver/\', \'https://www.geeksforgeeks.org/limitations-of-selenium-webdriver/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'For more, checkout – Features of Selenium Webdriver\', \'For more, checkout – Applications and Uses of Selenium WebDriver\', \'For more, checkout – Limitations of Selenium Webdriver\']','[\'Selenium is a powerful tool for controlling web browser through program. It is functional for all browsers, works on all major OS and its scripts are written in various languages i.e Python, Java, C#, etc, we will be working with Python. Selenium has four major components – Selenium IDE, Selenium RC, Selenium Web driver, Selenium GRID.\', \'Selenium has been in the industry for a long time and used by automation testers all around the globe.Let’s check the four major components of Selenium –\', \'Scripts may be automatically recorded and edited manually providing autocompletion support and the ability to move commands around quickly. Scripts are recorded in Selenese, a special test scripting language for Selenium. Selenese provides commands for performing actions in a browser (click a link, select an option) and for retrieving data from the resulting pages.\', \'The ability to run tests on remote browser instances is useful to spread the load of testing across several machines and to run tests in browsers running on different platforms or operating systems. The latter is particularly useful in cases where not all browsers to be used for testing can run on the same platform.For More, check out – Components of Selenium.\', \'Selenium WebDriver is used to automate web application testing to verify that it works as expected. It supports many browsers such as Firefox, Chrome, IE, and Safari. However, using the Selenium WebDriver, we can automate testing for web applications only.\']','[\'Selenium IDE (Integrated Development Environment) is the major tool in the Selenium Suite. It is a complete integrated development environment (IDE) for Selenium tests. It is implemented as a Firefox Add-On and as a Chrome Extension. It allows for recording, editing and debugging of functional tests. It was previously known as Selenium Recorder. Selenium-IDE was originally created by Shinya Kasatani and donated to the Selenium project in 2006. Selenium IDE was previously little-maintained. Selenium IDE began being actively maintained in 2018.\', \'Selenium Remote Control (RC) is a server, written in Java, that accepts commands for the browser via HTTP. RC makes it possible to write automated tests for a web application in any programming language, which allows for better integration of Selenium in existing unit test frameworks. To make writing tests easier, Selenium project currently provides client drivers for PHP, Python, Ruby, .NET, Perl and Java. The Java driver can also be used with JavaScript (via the Rhino engine). An instance of selenium RC server is needed to launch html test case – which means that the port should be different for each parallel run. However, for Java/PHP test case only one Selenium RC instance needs to be running continuously.\', \'Selenium WebDriver is the successor to Selenium RC. Selenium WebDriver accepts commands (sent in Selenese, or via a Client API) and sends them to a browser. This is implemented through a browser-specific browser driver, which sends commands to a browser and retrieves results. Most browser drivers actually launch and access a browser application (such as Firefox, Google Chrome, Internet Explorer, Safari, or Microsoft Edge); there is also an HtmlUnit browser driver, which simulates a browser using the headless browser HtmlUnit.\', \'Selenium WebDriver does not need a special server to execute tests. Instead, the WebDriver directly starts a browser instance and controls it. However, Selenium Grid can be used with WebDriver to execute tests on remote systems (see below). Where possible, WebDriver uses native operating system level functionality rather than browser-based JavaScript commands to drive the browser. This bypasses problems with subtle differences between native and JavaScript commands, including security restrictions.\', \'Selenium Grid is a server that allows tests to use web browser instances running on remote machines. With Selenium Grid, one server acts as the hub. Tests contact the hub to obtain access to browser instances. The hub has a list of servers that provide access to browser instances (WebDriver nodes), and lets tests use these instances. Selenium Grid allows running tests in parallel on multiple machines and to manage different browser versions and browser configurations centrally (instead of in each individual test).\']','[]','[]','[]','[\'Components|||Features|||Applications|||Limitations&&&Selenium IDE|||Selenium RC|||Selenium Web driver|||Selenium GRID&&&Open Source and Portable – Selenium is an open source and portable Web testing Framework.|||Combination of tool and DSL – Selenium is combination of tools and DSL (Domain Specific Language) in order to carry out various types of tests.|||Easier to understand and implement – Selenium commands are categorized in terms of different classes which make it easier to understand and implement.|||Reduce test execution time – Selenium supports parallel test execution that reduce the time taken in executing parallel tests.|||Lesser resources required – Selenium requires lesser resources when compared to its competitors like UFT, RFT, etc.|||Supports Multiple Programming Languages – C#, Java, Python, PHP, Ruby, Perl, and JavaScript|||Supports Multiple Operating Systems – Android, iOS, Windows, Linux, Mac, Solaris.|||Supports Multiple Browsers – Google Chrome, Mozilla Firefox, Internet Explorer, Edge, Opera, Safari, etc.|||Parallel Test Execution – It also supports parallel test execution which reduces time and increases the efficiency of tests.&&&Open Source and Portable – Selenium is an open source and portable Web testing Framework.|||Less burden and stress for testers – As mentioned above, the amount of time required to do testing repeated test scenarios on each and every new build is reduced to zero, almost. Hence, the burden of tester gets reduced.|||Cost reduction for the Business Clients – The Business needs to pay the testers their salary, which is saved using automation testing tool. The automation not only saves time but gets cost benefits too, to the business.|||Increased test coverage – With the uses of Selenium, testing time gets reduced and hence the tester can do more testing on other test scenarios at the same time.|||Reduce test execution time – Selenium supports parallel test execution that reduce the time taken in executing parallel tests.&&&No support for desktop applications – Selenium does not support testing for desktop applications.|||Expertise – Selenium requires expertise of your team — and resources to manage.|||Maintenance and Scalability – Selenium is a maintenance-heavy framework — and is difficult to scale as one grows.|||Open Source Forums – Since Selenium is open source software, one has to rely on community forums to get your technical issues resolved.|||No support for REST and SOAP Platforms – We can’t perform automation tests on web services like SOAP or REST using Selenium.|||No Reporting capability – Selenium does not have any inbuilt reporting capability, one has to rely on plug-ins like JUnit and TestNG for test reports.|||Image Testing – It is not possible to perform testing on images. One needs to integrate Selenium with Sikuli for image testing.\']'),(201,'[\'Components of Selenium\']','[\'Components of Selenium\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200404153047/Components-of-Selenium.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/#IDE\', \'https://www.geeksforgeeks.org/#RC\', \'https://www.geeksforgeeks.org/#web-driver\', \'https://www.geeksforgeeks.org/#GRID\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'Selenium is a powerful tool for controlling web browser through program. It is functional for all browsers, works on all major OS and its scripts are written in various languages i.e Python, Java, C#, etc, we will be working with Python. Selenium has four major components – Selenium IDE, Selenium RC, Selenium Web driver, Selenium GRID.\', \'Selenium has been in the industry for a long time and used by automation testers all around the globe.Let’s check the four major components of Selenium –\', \'Scripts may be automatically recorded and edited manually providing autocompletion support and the ability to move commands around quickly. Scripts are recorded in Selenese, a special test scripting language for Selenium. Selenese provides commands for performing actions in a browser (click a link, select an option) and for retrieving data from the resulting pages.\', \'The ability to run tests on remote browser instances is useful to spread the load of testing across several machines and to run tests in browsers running on different platforms or operating systems. The latter is particularly useful in cases where not all browsers to be used for testing can run on the same platform.\']','[\'Selenium IDE (Integrated Development Environment) is the major tool in the Selenium Suite. It is a complete integrated development environment (IDE) for Selenium tests. It is implemented as a Firefox Add-On and as a Chrome Extension. It allows for recording, editing and debugging of functional tests. It was previously known as Selenium Recorder. Selenium-IDE was originally created by Shinya Kasatani and donated to the Selenium project in 2006. Selenium IDE was previously little-maintained. Selenium IDE began being actively maintained in 2018.\', \'Selenium Remote Control (RC) is a server, written in Java, that accepts commands for the browser via HTTP. RC makes it possible to write automated tests for a web application in any programming language, which allows for better integration of Selenium in existing unit test frameworks. To make writing tests easier, Selenium project currently provides client drivers for PHP, Python, Ruby, .NET, Perl and Java. The Java driver can also be used with JavaScript (via the Rhino engine). An instance of selenium RC server is needed to launch html test case – which means that the port should be different for each parallel run. However, for Java/PHP test case only one Selenium RC instance needs to be running continuously.\', \'Selenium WebDriver is the successor to Selenium RC. Selenium WebDriver accepts commands (sent in Selenese, or via a Client API) and sends them to a browser. This is implemented through a browser-specific browser driver, which sends commands to a browser and retrieves results. Most browser drivers actually launch and access a browser application (such as Firefox, Google Chrome, Internet Explorer, Safari, or Microsoft Edge); there is also an HtmlUnit browser driver, which simulates a browser using the headless browser HtmlUnit.\', \'Selenium WebDriver does not need a special server to execute tests. Instead, the WebDriver directly starts a browser instance and controls it. However, Selenium Grid can be used with WebDriver to execute tests on remote systems (see below). Where possible, WebDriver uses native operating system level functionality rather than browser-based JavaScript commands to drive the browser. This bypasses problems with subtle differences between native and JavaScript commands, including security restrictions.\', \'Selenium Grid is a server that allows tests to use web browser instances running on remote machines. With Selenium Grid, one server acts as the hub. Tests contact the hub to obtain access to browser instances. The hub has a list of servers that provide access to browser instances (WebDriver nodes), and lets tests use these instances. Selenium Grid allows running tests in parallel on multiple machines and to manage different browser versions and browser configurations centrally (instead of in each individual test).\']','[]','[]','[]','[\'Selenium IDE|||Selenium RC|||Selenium Web driver|||Selenium GRID\']'),(202,'[\'Selenium Python Introduction and Installation\']','[\'Selenium Python Introduction\', \'Selenium Python Installation\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20191227170655/Screenshot-from-2019-12-26-13-28-471.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://geeksforgeeks.org/selenium-basics-components-features-uses-and-limitations/\', \'https://www.geeksforgeeks.org/download-and-install-python-3-latest-version/\', \'https://pypi.python.org/pypi/selenium\', \'https://github.com/mozilla/geckodriver/releases\', \'https://github.com/mozilla/geckodriver/releases\', \'https://google.co.in\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'First MethodOpen Terminal/Cmd and Write Command as written Belowxa0\', \'One Can Install Firefox, Chromium, PhantomJs(Deprecated Now), etc.xa0xa0\', \'In this article, Firefox is used so One can Follow the Below Steps to Install:-\', \'2. Extract the file with:xa0xa0\', \'3. Make it executable:xa0xa0\', \'4. Move Files to usr/local/binxa0xa0\', \'For Example:-xa0xa0\']','[\'Selenium’s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. Through Selenium Python API you can access all functionalities of Selenium WebDriver in an intuitive way. To check more details about Selenium visit – Selenium Basics – Components, Features, Uses and Limitations.xa0\', \'Selenium Python bindings provide a convenient API to access Selenium WebDrivers like Firefox, Ie, Chrome, Remote etc. The current supported Python versions are 2.7, 3.5 and above.xa0\', \'For any operating system selenium can be installed after you have installed python on your operating system. If not, checkout – Download and Install Python 3 Latest Versionxa0\', \'Second MethodAlternatively, you can download the source distribution here, unarchive it, and run the command below:xa0xa0\', \'Steps for Linux:-1. Go to the geckodriver releases page. Find the latest version of the driver for your platform and download it.xa0For example:xa0xa0\', \'Steps for Windows:-1. Same as Step 1 in Linux Download the GeckoDriver2. Extract it using WinRar or any application you may have.3. Add it to Path using Command Prompt\']','[]','[\'# Python program to demonstrate# selenium # import webdriverfrom selenium import webdriver # create webdriver objectdriver = webdriver.Firefox()# get google.co.indriver.get(\"https://google.co.in\")\']','[\'python -m pip install selenium\', \'python setup.py install\', \'wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz\', \'tar -xvzf geckodriver*\', \'chmod +x geckodriver\', \'sudo mv geckodriver /usr/local/bin/\', \'setx path \"%path%;GeckoDriver Path\"\', \'setx path \"%path%;c:/user/eliote/Desktop/geckodriver-v0.26.0-win64/geckodriver.exe\"\']','[]','[\'Open Source and Portable – Selenium is an open source and portable Web testing Framework.|||Combination of tool and DSL – Selenium is combination of tools and DSL (Domain Specific Language) in order to carry out various types of tests.|||Easier to understand and implement – Selenium commands are categorized in terms of different classes which make it easier to understand and implement.|||Reduce test execution time – Selenium supports parallel test execution that reduce the time taken in executing parallel tests.|||Lesser resources required – Selenium requires lesser resources when compared to its competitors like UFT, RFT, etc.|||Supports Multiple Operating Systems – Android, iOS, Windows, Linux, Mac, Solaris.|||Supports Multiple Browsers – Google Chrome, Mozilla Firefox, Internet Explorer, Edge, Opera, Safari, etc.|||Parallel Test Execution – It also supports parallel test execution which reduces time and increases the efficiency of tests.&&&for using Firefox you may need to install GeckoDriver|||for using Chrome you may need to install Chromium\']'),(203,'[\'Navigating links using get method – Selenium Python\']','[\'How to navigate links using Python Selenium\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200406033220/search-google-using-python-selenium.png\']','[]','[\'https://geeksforgeeks.org/selenium-python-introduction-and-installation/\', \'https://google.co.in\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Project Example –After you have installed Selenium, create a file called run.py as –Program –\']','[\'If you have not installed Selenium and its components yet, install them from here – Selenium Python Introduction and Installation.\', \'The first thing one’ll want to do with WebDriver is navigate to a link. The normal way to do this is by calling get method:Syntax –\', \'WebDriver will wait until the page has fully loaded (that is, the onload event has fired) before returning control to your test or script. It’s worth noting that if your page uses a lot of AJAX on load then WebDriver may not know when it has completely loaded. If you need to ensure such pages are fully loaded then you can use waits.\']','[\'Selenium’s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. Through Selenium Python API you can access all functionalities of Selenium WebDriver in an intuitive way. This article illustrates about how to use Selenium Python to navigate to any link on web using get method of Selenium Webdriver in python.\']','[\'# Python program to demonstrate# selenium  # import webdriverfrom selenium import webdriver  # create webdriver objectdriver = webdriver.Firefox()  # get google.co.indriver.get(\"https://google.co.in / search?q = geeksforgeeks\")\']','[\'driver.get(url)\', \'driver.get(\"http://www.google.com\")\']','[]','[]'),(204,'[\'Interacting with Webpage – Selenium Python\']','[\'html\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200419044204/Interacting-with-Webpage-Selenium-Python.png\']','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/navigating-links-using-get-method-selenium-python/\', \'https://www.geeksforgeeks.org/locator-strategies-selenium-python/\', \'https://www.geeksforgeeks.org/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'To find an element one needs to use one of the locating strategies, For example,xa0\', \'Also, to find multiple elements, we can use –xa0xa0\', \'One can simulate pressing the arrow keys by using the “Keys” class:xa0xa0\', \'Project Example –xa0Let’s try to search something automatically at geeksforgeeksxa0Program –xa0xa0\']','[\'Also note, it is possible to call send_keys on any element, which makes it possible to test keyboard shortcuts such as those used on Gmail.xa0One can easily clear the contents of a text field or textarea with the clear method:xa0\']','[\'Selenium’s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. To open a webpage using Selenium Python, checkout – Navigating links using get method – Selenium Python. Just being able to go to places isn’t terribly useful. What we’d really like to do is to interact with the pages, or, more specifically, the HTML elements within a page. First of all, we need to find one. WebDriver offers a number of ways to find elements. For example, given an element defined as:xa0xa0\', \'One can also look for a link by its text, but be careful! The text must be an exact match! One should also be careful when using XPATH in WebDriver. If there’s more than one element that matches the query, then only the first will be returned. If nothing can be found, a NoSuchElementException will be raised.xa0WebDriver has an “Object-based” API, we represent all types of elements using the same interface. This means that although one may see a lot of possible methods one could invoke when one hits IDE’s auto-complete key combination, not all of them will make sense or be valid. To check all methods, checkout Locator Strategies – Selenium Pythonxa0So after getting an element what next? One might want to enter text into a field, for example,xa0xa0\']','[\'<input type=\"text\" name=\"passwd\" id=\"passwd-id\" />\', \'# import webdriverfrom selenium import webdriver # create webdriver objectdriver = webdriver.Firefox()  # get geeksforgeeks.orgdriver.get(\"https://www.geeksforgeeks.org/\") # get elementelement = driver.find_element_by_id(\"gsc-i-id1\") # send keyselement.send_keys(\"Arrays\")\']','[\'element = driver.find_element_by_id(\"passwd-id\")\nelement = driver.find_element_by_name(\"passwd\")\nelement = driver.find_element_by_xpath(\"//input[@id=\'passwd-id\']\")\', \'elements = driver.find_elements_by_name(\"passwd\")\', \'element.send_keys(\"some text\")\', \'element.send_keys(\" and some\", Keys.ARROW_DOWN)\', \'element.clear()\']','[]','[]'),(205,'[\'Locating single elements in Selenium Python\']','[\'Locator Strategies to locate single first elements\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/how-to-install-selenium-in-python/\', \'https://www.geeksforgeeks.org/navigating-links-using-get-method-selenium-python/\', \'https://www.geeksforgeeks.org/#find_element_by_id\', \'https://www.geeksforgeeks.org/#find_element_by_name\', \'https://www.geeksforgeeks.org/#find_element_by_xpath\', \'https://www.geeksforgeeks.org/#find_element_by_link_text\', \'https://www.geeksforgeeks.org/#find_element_by_partial_link_text\', \'https://www.geeksforgeeks.org/#find_element_by_tag_name\', \'https://www.geeksforgeeks.org/#find_element_by_class_name\', \'https://www.geeksforgeeks.org/#find_element_by_class_name\', \'https://www.geeksforgeeks.org/find_element_by_id-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/find_element_by_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_xpath-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_partial_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_tag_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_class_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_css_selector-driver-method-selenium-python/?ref=rp\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab an element using –\', \'To check practical implementation, visit – find_element_by_id() driver method – Selenium Python\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab an element using –\', \'To check practical Implementation, visit – find_element_by_name() driver method – Selenium Python\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab an element using –\', \'To check Practical Implementation, visit – find_element_by_xpath() driver method – Selenium Python\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab an element using –\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab an element using –\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab an element using –\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab an element using –\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab an element using –\']','[\'Selenium Python follows different locating strategies for elements. One can locate a element in 8 different ways. Here is a list of locating strategies for Selenium in python –\', \'With this strategy, the first element with the id attribute value matching the location will be returned. If no element has a matching id attribute, a NoSuchElementException will be raised.\', \'With this strategy, the first element with the name attribute value matching the location will be returned. If no element has a matching name attribute, a NoSuchElementException will be raised.\', \'With this strategy, the first element with pattern of xpath matching the location will be returned. If no element has a matching element attribute, a NoSuchElementException will be raised.\', \'With this strategy, the first element with the link text value matching the location will be returned. If no element has a matching link text attribute, a NoSuchElementException will be raised.\', \'To check practical Implementation, visit – find_element_by_link_text() driver method – Selenium Python\', \'With this strategy, the first element with the partial link text value matching the location will be returned. If no element has a matching partial link text attribute, a NoSuchElementException will be raised.\', \'To check practical implementation, visit – find_element_by_partial_link_text() driver method – Selenium Python\', \'With this strategy, the first element with the given tag name will be returned. If no element has a matching tag name, a NoSuchElementException will be raised.\', \'To check practical Implementation, visit – find_element_by_tag_name() driver method – Selenium Python\', \'With this strategy, the first element with the matching class attribute name will be returned. If no element has a matching class attribute name, a NoSuchElementException will be raised.\', \'To check practical Implementation, visit – find_element_by_class_name() driver method – Selenium Python\', \'With this strategy, the first element with the matching CSS selector will be returned. If no element has a matching CSS selector, a NoSuchElementException will be raised.\', \'To check practical implementation, visit – find_element_by_css_selector() driver method – Selenium Python\']','[\'Locators Strategies in Selenium Python are methods that are used to locate elements from the page and perform an operation on the same. Selenium’s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. After one has installed selenium and checked out – Navigating links using get method, one might want to play more with Selenium Python. After opening a page using selenium such as geeksforgeeks, user might want to click some buttons automatically or fill a form automatically or any such automated task. This article revolves around Locating single elements in Selenium Python.\']','[\'<html> <body>  <form id=\"loginForm\">   <input name=\"username\" type=\"text\" />   <input name=\"password\" type=\"password\" />   <input name=\"continue\" type=\"submit\" value=\"Login\" />  </form> </body><html>\', \'<html> <body>  <form id=\"loginForm\">   <input name=\"username\" type=\"text\" />   <input name=\"password\" type=\"password\" />   <input name=\"continue\" type=\"submit\" value=\"Login\" />  </form> </body><html>\', \'<html> <body>  <form id=\"loginForm\">   <input name=\"username\" type=\"text\" />   <input name=\"password\" type=\"password\" />   <input name=\"continue\" type=\"submit\" value=\"Login\" />  </form> </body><html>\', \'<html> <body>  <p>Are you sure you want to do this?</p>  <a href=\"continue.html\">Continue</a>  <a href=\"cancel.html\">Cancel</a></body><html>\', \'<html> <body>  <p>Are you sure you want to do this?</p>  <a href=\"continue.html\">Continue</a>  <a href=\"cancel.html\">Cancel</a></body><html>\', \'<html> <body>  <h1>Welcome</h1>  <p>Site content goes here.</p></body><html>\', \'<html> <body>  <p class=\"content\">Site content goes here.</p></body><html>\', \'<html> <body>  <p class=\"content\">Site content goes here.</p></body><html>\']','[\'driver.find_element_by_id(\"id_of_element\")\', \"login_form = driver.find_element_by_id(\'loginForm\')\", \'driver.find_element_by_name(\"name_of_element\")\', \"element = driver.find_element_by_name(\'username\')\", \'driver.find_element_by_xpath(\"xpath\")\', \'login_form = driver.find_element_by_xpath(\"/html/body/form[1]\")\nlogin_form = driver.find_element_by_xpath(\"//form[1]\")\', \'driver.find_element_by_link_text(\"Text of Link\")\', \"login_form = driver.find_element_by_link_text(\'Continue\')\", \'driver.find_element_by_partial_link_text(\"Text of Link\")\', \"login_form = driver.find_element_by_partial_link_text(\'Conti\')\", \'driver.find_element_by_tag_name(\"Tag name\")\', \"login_form = driver.find_element_by_tag_name(\'h1\')\", \'driver.find_element_by_class_name(\"class_of_element\")\', \"content = driver.find_element_by_class_name(\'content\')\", \'driver.find_element_by_css_selector(\"CSS Selectors\")\', \"content = driver.find_element_by_css_selector(\'p.content\')\"]','[]','[]'),(206,'[\'Locating multiple elements in Selenium Python\']','[\'Locator Strategies to locate multiple elements\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/how-to-install-selenium-in-python/\', \'https://www.geeksforgeeks.org/navigating-links-using-get-method-selenium-python/\', \'https://www.geeksforgeeks.org/#find_elements_by_name\', \'https://www.geeksforgeeks.org/#find_elements_by_xpath\', \'https://www.geeksforgeeks.org/#find_elements_by_link_text\', \'https://www.geeksforgeeks.org/#find_elements_by_partial_link_text\', \'https://www.geeksforgeeks.org/#find_elements_by_tag_name\', \'https://www.geeksforgeeks.org/#find_elements_by_class_name\', \'https://www.geeksforgeeks.org/#find_elements_by_class_name\', \'https://www.geeksforgeeks.org/find_elements_by_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_xpath-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_partial_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_tag_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_class_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_css_selector-driver-method-selenium-python/?ref=rp\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab elements using –\', \'To check practical Implementation, visit – find_elements_by_name() driver method – Selenium Python\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab elements using –\', \'To check Practical Implementation, visit – find_elements_by_xpath() driver method – Selenium Python\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab elements using –\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab all elements using –\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab all elements using –\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab all elements using –\', \'Example –For instance, consider this page source:\', \'Now after you have created a driver, you can grab all elements using –\']','[\'Selenium Python follows different locating strategies for elements. One can locate multiple elements in 7 different ways. Here is a list of locating strategies for Selenium in python –\', \'With this strategy, all elements with the name attribute value matching the location will be returned. If no element has a matching name attribute, a NoSuchElementException will be raised.\', \'With this strategy, all elements with pattern of xpath matching the location will be returned. If no element has a matching element attribute, a NoSuchElementException will be raised.\', \'With this strategy, all elements with the link text value matching the location will be returned. If no element has a matching link text attribute, a NoSuchElementException will be raised.\', \'To check practical Implementation, visit – find_elements_by_link_text() driver method – Selenium Python\', \'With this strategy, all elements with the partial link text value matching the location will be returned. If no element has a matching partial link text attribute, a NoSuchElementException will be raised.\', \'To check practical implementation, visit – find_elements_by_partial_link_text() driver method – Selenium Python\', \'With this strategy, all elements with the given tag name will be returned. If no element has a matching tag name, a NoSuchElementException will be raised.\', \'To check practical Implementation, visit – find_elements_by_tag_name() driver method – Selenium Python\', \'With this strategy, the first elements with the matching class attribute name will be returned. If no element has a matching class attribute name, a NoSuchElementException will be raised.\', \'To check practical Implementation, visit – find_elements_by_class_name() driver method – Selenium Python\', \'With this strategy, all elements with the matching CSS selector will be returned. If no element has a matching CSS selector, a NoSuchElementException will be raised.\', \'To check practical implementation, visit – find_elements_by_css_selector() driver method – Selenium Python\']','[\'Locators Strategies in Selenium Python are methods that are used to locate single or multiple elements from the page and perform operations on the same. Selenium’s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. After one has installed selenium and checked out – Navigating links using get method, one might want to play more with Selenium Python. After opening page using selenium such as geeksforgeeks, one might want to click some buttons automatically or fill a form automatically or any such automated task. This article revolves around Locating multiple elements in Selenium Python.\']','[\'<html> <body>  <form id=\"loginForm\">   <input name=\"username\" type=\"text\" />   <input name=\"username\" type=\"username\" />   <input name=\"continue\" type=\"submit\" value=\"Login\" />  </form> </body><html>\', \'<html> <body>  <form id=\"loginForm\">   <input name=\"username\" type=\"text\" />   <input name=\"password\" type=\"password\" />   <input name=\"continue\" type=\"submit\" value=\"Login\" />  </form> </body><html>\', \'<html> <body>  <p>Are you sure you want to do this?</p>  <a href=\"continue.html\">Continue</a>  <a href=\"cancel.html\">Cancel</a></body><html>\', \'<html> <body>  <p>Are you sure you want to do this?</p>  <a href=\"continue.html\">Continue</a>  <a href=\"cancel.html\">Cancel</a></body><html>\', \'<html> <body>  <h1>Welcome</h1>  <p>Site content goes here.</p></body><html>\', \'<html> <body>  <p class=\"content\">Site content goes here.</p></body><html>\', \'<html> <body>  <p class=\"content\">Site content goes here.</p></body><html>\']','[\'driver.find_elements_by_name(\"name_of_element\")\', \"elements = driver.find_elements_by_name(\'username\')\", \'driver.find_elements_by_xpath(\"xpath\")\', \'login_form = driver.find_elements_by_xpath(\"/html/body/form[1]\")\nlogin_form = driver.find_elements_by_xpath(\"//form[1]\")\', \'driver.find_elements_by_link_text(\"Text of Link\")\', \"login_form = driver.find_elements_by_link_text(\'Continue\')\", \'driver.find_elements_by_partial_link_text(\"Text of Link\")\', \"login_form = driver.find_elements_by_partial_link_text(\'Conti\')\", \'driver.find_elements_by_tag_name(\"Tag name\")\', \"login_form = driver.find_elements_by_tag_name(\'h1\')\", \'driver.find_elements_by_class_name(\"class_of_element\")\', \"content = driver.find_elements_by_class_name(\'content\')\", \'driver.find_elements_by_css_selector(\"CSS Selectors\")\', \"content = driver.find_elements_by_css_selector(\'p.content\')\"]','[]','[]'),(207,'[\'Locator Strategies – Selenium Python\']','[\'Locator Strategies to locate single first elements\', \'Locator Strategies to locate multiple elements\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/how-to-install-selenium-in-python/\', \'https://www.geeksforgeeks.org/navigating-links-using-get-method-selenium-python/\', \'https://www.geeksforgeeks.org/find_element_by_id-driver-method-selenium-python/\', \'https://www.geeksforgeeks.org/find_element_by_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_xpath-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_partial_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_tag_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_class_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_element_by_css_selector-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_xpath-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_partial_link_text-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_tag_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_class_name-driver-method-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/find_elements_by_css_selector-driver-method-selenium-python/?ref=rp\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[]','[\'Selenium Python follows different locating strategies for elements. One can locate a element in 8 different ways. Here is a list of locating strategies for Selenium in python –\', \'Selenium Python follows different locating strategies for elements. One can locate multiple elements in 8 different ways. Here is a list of locating strategies for Selenium in python –\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Locators Strategies in Selenium Python are methods that are used to locate elements from the page and perform an operation on the same. Selenium’s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. After one has installed selenium and checked out – Navigating links using get method, one might want to play more with Selenium Python. After opening a page using selenium such as geeksforgeeks, one might want to click some buttons automatically or fill a form automatically or any such automated task. This article revolves around two strategies – Locating Single Elements and Location Multiple Elements.\']','[]','[]','[]','[]'),(208,'[\'Action Chains in Selenium Python\']','[\'How to create an Action Chain Object ?\', \'How to use Action Chains in Selenium ?\', \'Project Example –\', \'Action Chain Methods in Selenium Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200512084303/driver-methods-Selenium-Python.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200420010502/click-element-method-Selenium-Python.png\']','[]','[\'https://www.geeksforgeeks.org/\', \'https://geeksforgeeks.org/click-method-action-chains-in-selenium-python/\', \'https://www.geeksforgeeks.org/click_and_hold-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/context_click-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/double_click-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/drag_and_drop-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/key_down-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/key_up-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/move_by_offset-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/move_to_element-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/move_to_element_with_offset-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/perform-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/pause-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/release-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/reset_actions-method-action-chains-in-selenium-python/?ref=rp\', \'https://www.geeksforgeeks.org/send_keys-method-action-chains-in-selenium-python/?ref=rp\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Or actions can be queued up one by one, then performed.:\', \'then redirects to https://practice.geeksforgeeks.org/\']','[\'ActionChains are implemented with the help of a action chain object which stores the actions in a queue and when perform() is called, performs the queued operations.\', \'To create object of Action Chain, import ACtion chain class from docs and pass driver as the key argument. After this one can use this object to perform all the operations of action chains.\', \'After one has created an object of Action chain, open a webpage, and perform various other methods using below syntax and examples. Action chains can be used in a chain pattern as below –\', \'Let’s try to implement action chains using https://www.geeksforgeeks.org/ and play around with various methods of Selenium Python.\', \'Above code, first opens https://www.geeksforgeeks.org/ and then clicks on courses button in the header, which then redirects the browser to https://practice.geeksforgeeks.org/ automatically.Output –First driver opens https://www.geeksforgeeks.org/,\', \'One can perform a huge number of operations using Action chains such as click, right-click, etc. Here is a list of important methods used in Action chains.\']','[\'Selenium’s Python Module is built to perform automated testing with Python. ActionChains are a way to automate low-level interactions such as mouse movements, mouse button actions, keypress, and context menu interactions. This is useful for doing more complex actions like hover over and drag and drop. Action chain methods are used by advanced scripts where we need to drag an element, click an element, This article revolves around how to manipulate DOM using Action Chains in Selenium. We have covered all the methods with examples int detail.\']','[\'# import webdriverfrom selenium import webdriver   # import Action chains from selenium.webdriver.common.action_chains import ActionChains   # create webdriver objectdriver = webdriver.Firefox()   # create action chain objectaction = ActionChains(driver)\', \'menu = driver.find_element_by_css_selector(\".nav\")hidden_submenu = driver.find_element_by_css_selector(\".nav # submenu1\")  ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()\', \'menu = driver.find_element_by_css_selector(\".nav\")hidden_submenu = driver.find_element_by_css_selector(\".nav # submenu1\")  actions = ActionChains(driver)actions.move_to_element(menu)actions.click(hidden_submenu)actions.perform()\', \'# import webdriverfrom selenium import webdriver   # import Action chains from selenium.webdriver.common.action_chains import ActionChains   # create webdriver objectdriver = webdriver.Firefox()   # get geeksforgeeks.orgdriver.get(\"https://www.geeksforgeeks.org/\")   # get element element = driver.find_element_by_link_text(\"Courses\")   # create action chain objectaction = ActionChains(driver)   # click the itemaction.click(on_element = element)   # perform the operationaction.perform()\']','[]','[]','[]'),(209,'[\'Exceptions – Selenium Python\']','[\'Example –\', \'Exceptions in Selenium Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200429020217/nosuchelementesception-s-selenium-python.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'Let’s demonstrate Exception by trying to find an element that doesn’t exist and click it at geeksforgeeks.org\', \'Now, let’s run this program, it first open geeksforgeeks.org and then raise exception – selenium.common.exceptions.NoSuchElementException, which means that element doesn’t exists on the website.\', \'Exceptions are of primary use when you are writing development ready code especially which is at a high risk of causing certain type of exception. So here is list of all exceptions in Selenium Python.\']','[\'Exceptions in Selenium Python are the errors that occur when one of method fails or an unexpected event occurs. All instances in Python must be instances of a class that derives from BaseException. Two exception classes that are not related via subclassing are never equivalent, even if they have the same name. The built-in exceptions can be generated by the interpreter or built-in functions. This article revolves around multiple exceptions that can occur during the run of a Selenium program.\']','[\'# import webdriverfrom selenium import webdriver  # create webdriver objectdriver = webdriver.Firefox()  # get geeksforgeeks.orgdriver.get(\"https://www.geeksforgeeks.org/\")  # get element element = driver.find_element_by_link_text(\"abrakadabra\")  # click the itemprint(element.click())\']','[]','[]','[]'),(210,'[\'Python Tkinter Tutorial\']','[\'Introduction\', \'Widgets\', \'Geometry Management\', \'Binding Functions\', \'Working with Images in Tkinter\', \'Tkinter Advance\', \'Applications and Projects\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200511204638/TkinterTutorials.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/#introduction\', \'https://www.geeksforgeeks.org/#widgets\', \'https://www.geeksforgeeks.org/#basic\', \'https://www.geeksforgeeks.org/#toplevel\', \'https://www.geeksforgeeks.org/#geometry\', \'https://www.geeksforgeeks.org/#binding\', \'https://www.geeksforgeeks.org/#working\', \'https://www.geeksforgeeks.org/#advance\', \'https://www.geeksforgeeks.org/#applications\', \'https://www.geeksforgeeks.org/tag/python-tkinter/\', \'https://www.geeksforgeeks.org/introduction-to-tkinter/\', \'https://www.geeksforgeeks.org/what-are-widgets-in-tkinter/\', \'https://www.geeksforgeeks.org/hello-world-in-tkinter/\', \'https://www.geeksforgeeks.org/create-first-gui-application-using-python-tkinter/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://www.geeksforgeeks.org/python-creating-a-button-in-tkinter/\', \'https://www.geeksforgeeks.org/python-add-style-to-tkinter-button/\', \'https://www.geeksforgeeks.org/python-add-image-on-a-tkinter-button/\', \'https://www.geeksforgeeks.org/python-tkinter-label/\', \'http://geeksforgeeks.org/python-tkinter-create-labelframe-and-add-widgets-to-it/\', \'http://geeksforgeeks.org/radiobutton-in-tkinter-python/\', \'https://www.geeksforgeeks.org/python-tkinter-checkbutton-widget/\', \'https://www.geeksforgeeks.org/python-tkinter-canvas-widget/\', \'http://geeksforgeeks.org/python-tkinter-create-different-shapes-using-canvas-class/\', \'http://geeksforgeeks.org/python-tkinter-create-different-type-of-lines-using-canvas-class/\', \'http://geeksforgeeks.org/python-tkinter-moving-objects-using-canvas-move-method/\', \'http://geeksforgeeks.org/combobox-widget-in-tkinter-python/\', \'http://geeksforgeeks.org/maxsize-method-in-tkinter-python/\', \'http://geeksforgeeks.org/minsize-method-in-tkinter-python/\', \'http://geeksforgeeks.org/resizable-method-in-tkinter-python/\', \'https://www.geeksforgeeks.org/python-tkinter-entry-widget/\', \'https://www.geeksforgeeks.org/tkinter-read-only-entry-widget/\', \'https://www.geeksforgeeks.org/python-tkinter-text-widget/\', \'https://www.geeksforgeeks.org/python-tkinter-message/\', \'http://geeksforgeeks.org/python-menu-widget-in-tkinter/\', \'https://www.geeksforgeeks.org/python-tkinter-menubutton-widget/\', \'https://www.geeksforgeeks.org/python-tkinter-spinbox/\', \'http://geeksforgeeks.org/progressbar-widget-in-tkinter-python/\', \'https://www.geeksforgeeks.org/python-tkinter-scrollbar/\', \'https://www.geeksforgeeks.org/python-tkinter-scrolledtext-widget/\', \'https://www.geeksforgeeks.org/python-tkinter-listbox-widget/\', \'https://www.geeksforgeeks.org/scrollable-listbox-in-python-tkinter/\', \'https://www.geeksforgeeks.org/python-tkinter-frame-widget/\', \'https://www.geeksforgeeks.org/scrollable-frames-in-tkinter/\', \'https://www.geeksforgeeks.org/how-to-make-a-proper-double-scrollbar-frame-in-tkinter/\', \'https://www.geeksforgeeks.org/python-tkinter-scale-widget/\', \'https://www.geeksforgeeks.org/hierarchical-treeview-in-python-gui-application/\', \'https://www.geeksforgeeks.org/python-tkinter-treeview-scrollbar/\', \'https://www.geeksforgeeks.org/python-tkinter-toplevel-widget/\', \'http://geeksforgeeks.org/python-askopenfile-function-in-tkinter/\', \'http://geeksforgeeks.org/python-asksaveasfile-function-in-tkinter/\', \'https://www.geeksforgeeks.org/python-tkinter-askquestion-dialog/\', \'https://www.geeksforgeeks.org/python-tkinter-messagebox-widget/\', \'https://www.geeksforgeeks.org/create-a-yes-no-message-box-in-python-using-tkinter/\', \'https://www.geeksforgeeks.org/change-the-size-of-messagebox-tkinter/\', \'https://www.geeksforgeeks.org/different-messages-in-tkinter-python/\', \'https://www.geeksforgeeks.org/change-icon-for-tkinter-messagebox/\', \'https://www.geeksforgeeks.org/python-tkinter-choose-color-dialog/\', \'https://www.geeksforgeeks.org/popup-menu-in-tkinter/\', \'http://geeksforgeeks.org/python-place-method-in-tkinter/\', \'http://geeksforgeeks.org/python-grid-method-in-tkinter/\', \'http://geeksforgeeks.org/python-tkinter-grid_location-and-grid_size-method/\', \'https://www.geeksforgeeks.org/python-pack-method-in-tkinter/\', \'http://geeksforgeeks.org/python-forget_pack-and-forget_grid-method-in-tkinter/\', \'http://geeksforgeeks.org/python-panedwindow-widget-in-tkinter/\', \'http://geeksforgeeks.org/python-geometry-method-in-tkinter/\', \'https://www.geeksforgeeks.org/setting-the-position-of-tkinter-labels/\', \'http://geeksforgeeks.org/python-binding-function-in-tkinter/\', \'https://www.geeksforgeeks.org/binding-function-with-double-click-with-tkinter-listbox/\', \'https://www.geeksforgeeks.org/right-click-menu-using-tkinter/\', \'https://www.geeksforgeeks.org/reading-images-with-python-tkinter/\', \'http://geeksforgeeks.org/iconphoto-method-in-tkinter-python/\', \'http://geeksforgeeks.org/loading-images-in-tkinter-using-pil/\', \'http://geeksforgeeks.org/getting-screens-height-and-width-using-tkinter-python/\', \'https://www.geeksforgeeks.org/python-how-to-dynamically-change-text-of-checkbutton/\', \'http://geeksforgeeks.org/python-focus_set-and-focus_get-method/\', \'https://www.geeksforgeeks.org/search-string-in-text-using-python-tkinter/\', \'https://www.geeksforgeeks.org/autocmplete-combobox-in-python-tkinter/\', \'https://www.geeksforgeeks.org/autohiding-scrollbars-using-python-tkinter/\', \'http://geeksforgeeks.org/python-tkinter-validating-entry-widget/\', \'http://geeksforgeeks.org/tracing-tkinter-variables-in-python/\', \'http://geeksforgeeks.org/python-setting-and-retrieving-values-of-tkinter-variable/\', \'http://geeksforgeeks.org/tkinter-adding-style-to-the-input-text-using-ttk-entry-widget/\', \'http://geeksforgeeks.org/python-after-method-in-tkinter/\', \'http://geeksforgeeks.org/destroy-method-in-tkinter-python/\', \'http://geeksforgeeks.org/text-detection-using-python/\', \'http://geeksforgeeks.org/python-winfo_ismapped-and-winfo_exist-in-tkinter/\', \'http://geeksforgeeks.org/collapsible-pane-in-tkinter-python/\', \'https://www.geeksforgeeks.org/creating-a-multiple-selection-using-tkinter/\', \'https://www.geeksforgeeks.org/creating-tabbed-widget-with-python-tkinter/\', \'https://www.geeksforgeeks.org/open-a-new-window-with-a-button-in-python-tkinter/\', \'http://geeksforgeeks.org/cryptography-gui-using-python/\', \'https://www.geeksforgeeks.org/python-simple-gui-calculator-using-tkinter/\', \'https://www.geeksforgeeks.org/create-table-using-tkinter/\', \'https://www.geeksforgeeks.org/python-gui-calendar-using-tkinter/\', \'https://www.geeksforgeeks.org/file-explorer-in-python-using-tkinter/\', \'https://www.geeksforgeeks.org/python-todo-gui-application-using-tkinter/\', \'https://www.geeksforgeeks.org/python-weight-conversion-gui-using-tkinter/\', \'http://geeksforgeeks.org/python-age-calculator-using-tkinter/\', \'http://geeksforgeeks.org/python-create-a-gui-marksheet-using-tkinter/\', \'http://geeksforgeeks.org/python-loan-calculator-using-tkinter/\', \'http://geeksforgeeks.org/python-create-a-digital-clock-using-tkinter/\', \'https://www.geeksforgeeks.org/make-notepad-using-tkinter/\', \'https://www.geeksforgeeks.org/color-game-python/\', \'https://www.geeksforgeeks.org/python-simple-flames-game-using-tkinter/?ref=rp\', \'https://www.geeksforgeeks.org/python-simple-registration-form-using-tkinter/?ref=rp\', \'https://www.geeksforgeeks.org/how-to-create-a-covid19-data-representation-gui/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Table of Contents\', \'Recent Articles on Python TKinter !\', \'Basic Widgets\', \'Toplevel Widgets\']','[\'Tkinter is the most commonly used library for developing GUI (Graphical User Interface) in Python. It is a standard Python interface to the Tk GUI toolkit shipped with Python. As Tk and Tkinter are available on most of the Unix platforms as well as on the Windows system, developing GUI applications with Tkinter becomes the fastest and easiest.\', \'This Tkinter Tutorial will help learning Tkinter from Basics to advance GUI development, including all the necessary functions explained in detail.\']','[]','[]','[]','[]','[\'Introduction|||WidgetsBasic WidgetsToplevel Widgets|||Basic Widgets|||Toplevel Widgets|||Geometry Management|||Binding Functions|||Working with Images in Tkinter|||Tkinter Advance|||Applications and Projects&&&Basic Widgets|||Toplevel Widgets&&&Introduction to Tkinter|||What are Widgets in Tkinter?|||Hello World in Tkinter|||Create First GUI Application using Python-Tkinter|||Python GUI – tkinter Overview&&&Creating a button in tkinter|||Add style to tkinter button|||Add image on a Tkinter button|||Label Widget in Tkinter|||Create LabelFrame and add widgets to it|||RadioButton in Tkinter|||Checkbutton in Tkinter|||Canvas Widget|||Create different shapes using Canvas class|||Create different type of lines using Canvas class|||Moving objects using Canvas.move() method|||Combobox Widget in tkinter|||Set the Maximum size of the Root|||Set the Minimum size of the Root|||Resizing Root in Tkinter|||Entry Widget|||Read only Entry Widget|||Text Widget|||Message Widget|||Menu widget in Tkinter|||Menubutton Widget|||SpinBox Widget|||Progressbar widget in Tkinter|||Scrollbar Widget in Tkinter|||ScrolledText Widget|||ListBox Widget|||Scrollable ListBox in Python-tkinter|||Frame Widget|||Scrollable Frames in Tkinter|||How to make a proper double scrollbar frame in Tkinter|||Scale Widget|||Hierarchical treeview Widget|||Treeview scrollbar Widget in Tkinter&&&Toplevel Widget|||Askopenfile Dialog in Tkinter|||Asksaveasfile Dialog in Tkinter|||Askquestion Dialog in Tkinter|||MessageBox Widget|||Create a Yes/No Message Box|||Change the size of MessageBox|||Different types of MessageBox in Tkinter|||Change Icon for Tkinter MessageBox|||Choose color Dialog|||Popup Menu in Tkinter&&&Place() method in Tkinter|||Grid() method in Tkinter|||Get the location and total number of grids in Tkinter|||Pack() method in Tkinter|||Unmap any widget from the screen or toplevel|||PanedWindow Widget in Tkinter|||Set the dimensions of the Tkinter window|||Setting the position of TKinter labels&&&Binding function in Tkinter|||Binding Function with double click with Tkinter ListBox|||Right Click menu using Tkinter&&&Reading Images With Python – Tkinter|||Set the titlebar icon of any tkinter/toplevel window|||Loading Images in Tkinter using PIL&&&Getting screen’s height and width using Tkinter|||How to dynamically change text of Checkbutton|||Set the focus on the desired widget|||Search String in Text|||Autocmplete ComboBox in Python-Tkinter|||Autohiding Scrollbars|||Validating Entry Widget|||Tracing Tkinter variables in Python|||Setting and retrieving values of Tkinter variable|||Adding style to the input text using ttk.Entry widget|||After method in Tkinter|||Destroy widgets in Tkinter|||Text detection using Python|||Check whether the specified widget is visible or not|||Collapsible Pane in Tkinter|||Creating a multiple Selection using Tkinter|||Creating Tabbed Widget With Python-Tkinter|||Open a new Window with a button in Python-Tkinter|||Cryptography GUI using python&&&Simple GUI calculator using Tkinter|||Create Table Using Tkinter|||GUI Calendar using Tkinter|||File Explorer in Python using Tkinter|||ToDo GUI Application using Tkinter|||Weight Conversion GUI using Tkinter|||Age Calculator using Tkinter|||Create a GUI Marksheet using Tkinter|||Loan calculator using Tkinter|||Create a digital clock using Tkinter|||Make Notepad using Tkinter|||Color game using Tkinter in Python|||Simple FLAMES game using Tkinter|||Simple registration form using Tkinter|||How to create a COVID19 Data Representation GUI?\']'),(211,'[\'Introduction to Tkinter\']','[\'What is Tkinter?\', \'What are Widgets?\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200518184446/pik8.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200518183107/pik7.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Among all Tkinter is most widely used\', \'Fundamental structure of tkinter programBasic Tkinter Widgets:\']','[\'Graphical User Interface(GUI) is a form of user interface which allows users to interact with computers through visual indicators using items such as icons, menus, windows, etc. It has advantages over the Command Line Interface(CLI) where users interact with computers by writing commands using keyboard only and whose usage is more difficult than GUI.\', \'Widgets in Tkinter are the elements of GUI application which provides various controls (such as Labels, Buttons, ComboBoxes, CheckBoxes, MenuBars, RadioButtons and many more) to users to interact with the application.\']','[\'Tkinter is the inbuilt python module that is used to create GUI applications. It is one of the most commonly used modules for creating GUI applications in Python as it is simple and easy to work with. You don’t need to worry about the installation of the Tkinter module separately as it comes with Python already. It gives an object-oriented interface to the Tk GUI toolkit.Some other Python Libraries available for creating our own GUI applications are\']','[\'from tkinter import * from tkinter.ttk import *    # writing code needs to# create the main window of # the application creating # main window object named rootroot = Tk()  # giving title to the main windowroot.title(\"First_Program\")  # Label is what output will be # show on the windowlabel = Label(root, text =\"Hello World !\").pack()  # calling mainloop method which is used# when your application is ready to run# and it tells the code to keep displaying root.mainloop()\']','[]','[]','[\'&&&\']'),(212,'[\'What are Widgets in Tkinter?\']','[\'Widgetsxa0\', \'Python\']','[\'Widget Classesxa0\', \'Geometry Management\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200521124400/geek-200x191.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Example :xa0\', \'Tkinter supports the below mentioned core widgets –\']','[\'Tkinter is Python’s standard GUI (Graphical User Interface) package. tkinter provides us with a variety of common GUI elements which we can use to build out interface – such as buttons, menus and various kind of entry fields and display areas. We call these elements Widgets.\', \'In general, xa0Widget is an element of Graphical User Interface (GUI) that displays/illustrates information or gives a way for the user to interact with the OS. xa0In Tkinter , Widgets are objects ; instances of classes that represent buttons, frames, and so on. xa0\', \'Each separate widget is a Python object. When creating a widget, you must pass its parent as a parameter to the widget creation function. The only exception is the “root” window, which is the top-level window that will contain everything else and it does not have a parent.xa0\', \'Creating a new widget doesn’t mean that it will appear on the screen. To display it, we need to call a special method: either grid, pack(example above), or place.xa0\']','[]','[\"from tkinter import *    # create root windowroot = Tk()                             # frame inside root windowframe = Frame(root)                    # geometry methodframe.pack()                            # button inside frame which is # inside rootbutton = Button(frame, text =\'Geek\')  button.pack()                           # Tkinter event looproot.mainloop()\"]','[]','[]','[]'),(213,'[\'Python | Creating a button in tkinter\']','[\'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190306214501/Tkinter-button-without-tk-themed-widget.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190306215951/Tkinter-button-using-tk-themed-widget.jpg\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210216123330/FreeOnlineScreenRecorderProject3.mp4\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210216123333/FreeOnlineScreenRecorderProject4.mp4\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Follow the below steps:xa0\', \'Importing tkinter module is same as importing any other module.xa0xa0\', \'Code #1: Creating button using Tkinter.xa0\', \'xa0xa0Creation of Button without using tk themed widget.xa0xa0\', \'Code #2:xa0xa0\']','[\'Tkinter is Python’s standard GUI (Graphical User Interface) package. It is one of the most commonly used packages for GUI applications which comes with Python itself. Let’s see how to create a button using Tkinter.xa0\', \'Creation of Button using tk themed widget (tkinter.ttk). This will give you the effects of modern graphics. Effects will change from one OS to another because it is basically for the appearance.xa0\']','[\'The tkinter.ttk module provides access to the Tk-themed widget set, introduced in Tk 8.5. If Python has not been compiled against Tk 8.5, this module can still be accessed if Tile has been installed. The former method using Tk 8.5 provides additional benefits including anti-aliased font rendering under X11 and window transparency.The basic idea for tkinter.ttk is to separate, to the extent possible, the code implementing a widget’s behavior from the code implementing its appearance. tkinter.ttk is used to create modern GUI (Graphical User Interface) applications that cannot be achieved by tkinter itself.xa0\', \'Note: See in the Output of both the code, BORDER is not present in 2nd output because tkinter.ttk does not support border. Also, when you hover the mouse over both the buttons ttk.Button will change its color and become light blue (effects may change from one OS to another) because it supports modern graphics while in the case of a simple Button it won’t change color as it does not support modern graphics.xa0\']','[\"# import everything from tkinter modulefrom tkinter import *    # create a tkinter windowroot = Tk()              # Open window having dimension 100x100root.geometry(\'100x100\') # Create a Buttonbtn = Button(root, text = \'Click me !\', bd = \'5\',                          command = root.destroy) # Set the position of button on the top of window.  btn.pack(side = \'top\')    root.mainloop()\", \"# import tkinter modulefrom tkinter import *        # Following will import tkinter.ttk module and# automatically override all the widgets# which are present in tkinter module.from tkinter.ttk import * # Create Objectroot = Tk() # Initialize tkinter window with dimensions 100x100            root.geometry(\'100x100\')     btn = Button(root, text = \'Click me !\',                command = root.destroy) # Set the position of button on the top of windowbtn.pack(side = \'top\')     root.mainloop()\"]','[\'import tkinter   # In Python 3.x\n\nimport Tkinter   # In python 2.x. (Note Capital T)\']','[]','[\'Import tkinter module # Tkinter in Python 2.x. (Note Capital T)|||Create main window (root = Tk())|||Add as many widgets as you want.\']'),(214,'[\'Python Tkinter – Label\']','[\'Label Widget\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200312021650/FireShot-Capture-001-Python-Tkinter-Label-Javatpoint-www.javatpoint.com_-300x216.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'w = Label ( master, option, … )\', \'Parameters:\', \'Various Options are:\']','[]','[\'Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task using widgets. Widgets are standard graphical user interfaces (GUI) elements, like buttons and menus.\', \'Tkinter Label is a widget that is used to implement display boxes where you can place text or images. The text displayed by this widget can be changed by the developer at any time you want. It is also used to perform tasks such as to underline the part of the text and span the text across multiple lines. It is important to note that a label can use only one font at a time to display text. To use a label, you just have to specify what to display in it (this can be text, a bitmap, or an image).\']','[\'from tkinter import *     top = Tk()   top.geometry(\"450x300\")      # the label for user_name user_name = Label(top,                   text = \"Username\").place(x = 40,                                           y = 60)      # the label for user_password  user_password = Label(top,                       text = \"Password\").place(x = 40,                                               y = 100)      submit_button = Button(top,                        text = \"Submit\").place(x = 40,                                              y = 130)    user_name_input_area = Entry(top,                             width = 30).place(x = 110,                                               y = 60)      user_password_entry_area = Entry(top,                                 width = 30).place(x = 110,                                                   y = 100)        top.mainloop()\']','[]','[]','[\'master: This represents the parent window|||options: Below is the list of most commonly used options for this widget. These options can be used as key-value pairs separated by commas:&&&anchor: This options is used to control the positioning of the text if the widget has more space than required for the text. The default is anchor=CENTER, which centers the text in the available space.|||bg:This option is used to set the normal background clior displayed behind the label and indicator.|||height:This option is used to set the vertical dimension of the new frame.|||width:Width of the label in characters (not pixels!). If this option is not set, the label will be sized to fit its contents.|||bd:This option is used to set the size of the border around the indicator. Default bd value is set on 2 pixels.|||font:If you are displaying text in the label (with the text or textvariable option), the font option is used to specify in what font that text in the label will be displayed.|||cursor:It is used to specify what cursor to show when the mouse is moved over the label. The default is to use the standard cursor.|||textvariable: As the name suggests it is associated with a Tkinter variable (usually a StringVar) with the label. If the variable is changed, the label text is updated.|||bitmap:It is used to set the bitmap to the graphical object specified so that, the label can represent the graphics instead of text.|||fg:The label clior, used for text and bitmap labels. The default is system specific. If you are displaying a bitmap, this is the clior that will appear at the position of the 1-bits in the bitmap.|||image: This option is used to display a static image in the label widget.|||padx:This option is used to add extra spaces between left and right of the text within the label.The default value for this option is 1.|||pady:This option is used to add extra spaces between top and bottom of the text within the label.The default value for this option is 1.|||justify:This option is used to define how to align multiple lines of text. Use LEFT, RIGHT, or CENTER as its values. Note that to position the text inside the widget, use the anchor option. Default value for justify is CENTER.|||relief: This option is used to specify appearance of a decorative border around the label. The default value for this option is FLAT.|||underline:This|||wraplength:Instead of having only one line as the label text it can be broken itno to the number of lines where each line has the number of characters specified to this option.\']'),(215,'[\'RadioButton in Tkinter | Python\']','[\'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190517234224/Capture34-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190517234228/Capture140.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190517235330/Capture34-3-300x167.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518000541/Capture34-3-300x169.png\']','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210216123802/FreeOnlineScreenRecorderProject5.mp4\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210216123948/FreeOnlineScreenRecorderProject6.mp4\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210216124134/FreeOnlineScreenRecorderProject7.mp4\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'xa0xa0Code #2: Changing button boxes into standard radio buttons. For this remove indicatoron option.xa0xa0\']','[\'The Radiobutton is a standard Tkinter widget used to implement one-of-many selections. Radiobuttons can contain text or images, and you can associate a Python function or method with each button. When the button is pressed, Tkinter automatically calls that function or method.Syntax:xa0xa0\', \'button = Radiobutton(master, text=”Name on Button”, variable = “shared variable”, value = “values of each button”, options = values, …)shared variable = A Tkinter variable shared among all Radio buttonsxa0value = each radiobutton should have different value otherwise more than 1 radiobutton will get selected.xa0xa0\', \'Code #1:xa0Radio buttons, but not in the form of buttons, in form of button box. In order to display button box, indicatoron/indicator option should be set to 0.xa0xa0\', \'The background of these button boxes is light blue. Button boxes having a white backgrounds as well as sunken are selected ones.xa0\', \'These Radiobuttons are created using tkinter.ttk that is why background option is not available but we can use style class to do styling.xa0xa0Code #3: Adding Style to Radio Button using style class.xa0xa0\', \'You may observe that font style is changed as well as background and foreground colors are also changed. Here, TRadiobutton is used in style class, it automatically applies styling to all the available Radiobuttons.xa0\']','[]','[\'# Importing Tkinter modulefrom tkinter import *# from tkinter.ttk import * # Creating master Tkinter windowmaster = Tk()master.geometry(\"175x175\") # Tkinter string variable# able to store any string valuev = StringVar(master, \"1\") # Dictionary to create multiple buttonsvalues = {\"RadioButton 1\" : \"1\",          \"RadioButton 2\" : \"2\",          \"RadioButton 3\" : \"3\",          \"RadioButton 4\" : \"4\",          \"RadioButton 5\" : \"5\"} # Loop is used to create multiple Radiobuttons# rather than creating each button separatelyfor (text, value) in values.items():    Radiobutton(master, text = text, variable = v,                value = value, indicator = 0,                background = \"light blue\").pack(fill = X, ipady = 5) # Infinite loop can be terminated by# keyboard or mouse interrupt# or by any predefined function (destroy())mainloop()\', \'# Importing Tkinter modulefrom tkinter import *from tkinter.ttk import * # Creating master Tkinter windowmaster = Tk()master.geometry(\"175x175\") # Tkinter string variable# able to store any string valuev = StringVar(master, \"1\") # Dictionary to create multiple buttonsvalues = {\"RadioButton 1\" : \"1\",        \"RadioButton 2\" : \"2\",        \"RadioButton 3\" : \"3\",        \"RadioButton 4\" : \"4\",        \"RadioButton 5\" : \"5\"} # Loop is used to create multiple Radiobuttons# rather than creating each button separatelyfor (text, value) in values.items():    Radiobutton(master, text = text, variable = v,        value = value).pack(side = TOP, ipady = 5) # Infinite loop can be terminated by# keyboard or mouse interrupt# or by any predefined function (destroy())mainloop()\', \'# Importing Tkinter modulefrom tkinter import *from tkinter.ttk import * # Creating master Tkinter windowmaster = Tk()master.geometry(\'175x175\') # Tkinter string variable# able to store any string valuev = StringVar(master, \"1\") # Style class to add style to Radiobutton# it can be used to style any ttk widgetstyle = Style(master)style.configure(\"TRadiobutton\", background = \"light green\",                foreground = \"red\", font = (\"arial\", 10, \"bold\")) # Dictionary to create multiple buttonsvalues = {\"RadioButton 1\" : \"1\",          \"RadioButton 2\" : \"2\",          \"RadioButton 3\" : \"3\",          \"RadioButton 4\" : \"4\",          \"RadioButton 5\" : \"5\"} # Loop is used to create multiple Radiobuttons# rather than creating each button separatelyfor (text, value) in values.items():    Radiobutton(master, text = text, variable = v,                value = value).pack(side = TOP, ipady = 5) # Infinite loop can be terminated by# keyboard or mouse interrupt# or by any predefined function (destroy())mainloop()\']','[]','[]','[]'),(216,'[\'Python Tkinter – Checkbutton Widget\']','[\'Checkbutton Widget\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200310130823/cap9.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Syntax:The syntax to use the checkbutton is given below.\', \'Parameters:\', \'Options:Following are commonly used Option can be used with this widget :-\', \'Methods:Methods used in this widgets are as follows:\']','[\'Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.\', \'The Checkbutton widget is a standard Tkinter widget that is used to implement on/off selections. Checkbuttons can contain text or images. When the button is pressed, Tkinter calls that function or method.\']','[]','[\'from tkinter import *   root = Tk()root.geometry(\"300x200\")  w = Label(root, text =\'GeeksForGeeks\', font = \"50\") w.pack()  Checkbutton1 = IntVar()  Checkbutton2 = IntVar()  Checkbutton3 = IntVar()  Button1 = Checkbutton(root, text = \"Tutorial\",                       variable = Checkbutton1,                      onvalue = 1,                      offvalue = 0,                      height = 2,                      width = 10)  Button2 = Checkbutton(root, text = \"Student\",                      variable = Checkbutton2,                      onvalue = 1,                      offvalue = 0,                      height = 2,                      width = 10)  Button3 = Checkbutton(root, text = \"Courses\",                      variable = Checkbutton3,                      onvalue = 1,                      offvalue = 0,                      height = 2,                      width = 10)      Button1.pack()  Button2.pack()  Button3.pack()  mainloop()\']','[\'w = Checkbutton ( master, options)\']','[]','[\'master: This parameter is used to represents the parent window.|||options:There are many options which are available and they can be used as key-value pairs separated by commas.&&&activebackground: This option used to represent the background color when the checkbutton is under the cursor.|||activeforeground: This option used to represent the foreground color when the checkbutton is under the cursor.|||bg: This option used to represent the normal background color displayed behind the label and indicator.|||bitmap: This option used to display a monochrome image on a button.|||bd: This option used to represent the size of the border around the indicator and the default value is 2 pixels.|||command: This option is associated with a function to be called when the state of the checkbutton is changed.|||cursor: By using this option, the mouse cursor will change to that pattern when it is over the checkbutton.|||disabledforeground: The foreground color used to render the text of a disabled checkbutton. The default is a stippled version of the default foreground color.|||font: This option used to represent the font used for the text.|||fg: This option used to represent the color used to render the text.|||height: This option used to represent the number of lines of text on the checkbutton and it’s default value is 1.|||highlightcolor: This option used to represent the color of the focus highlight when the checkbutton has the focus.|||image: This option used to display a graphic image on the button.|||justify: This option used to control how the text is justified: CENTER, LEFT, or RIGHT.|||offvalue: The associated control variable is set to 0 by default if the button is unchecked. We can change the state of an unchecked variable to some other one.|||onvalue: The associated control variable is set to 1 by default if the button is checked. We can change the state of the checked variable to some other one.|||padx: This option used to represent how much space to leave to the left and right of the checkbutton and text. It’s default value is 1 pixel.|||pady: This option used to represent how much space to leave above and below the checkbutton and text. It’s default value is 1 pixel.|||relief: The type of the border of the checkbutton. It’s default value is set to FLAT.|||selectcolor: This option used to represent the color of the checkbutton when it is set. The Default is selectcolor=”red”.|||selectimage: The image is shown on the checkbutton when it is set.|||state: It represents the state of the checkbutton. By default, it is set to normal. We can change it to DISABLED to make the checkbutton unresponsive. The state of the checkbutton is ACTIVE when it is under focus.|||text: This option used use newlines (“\\n”) to display multiple lines of text.|||underline: This option used to represent the index of the character in the text which is to be underlined. The indexing starts with zero in the text.|||variable: This option used to represents the associated variable that tracks the state of the checkbutton.|||width: This option used to represents the width of the checkbutton. and also represented in the number of characters that are represented in the form of texts.|||wraplength: This option will be broken text into the number of pieces.&&&deselect(): This method is called to turn off the checkbutton.|||flash(): The checkbutton is flashed between the active and normal colors.|||invoke(): This method will invoke the method associated with the checkbutton.|||select(): This method is called to turn on the checkbutton.|||toggle(): This method is used to toggle between the different Checkbuttons.\']'),(217,'[\'Python Tkinter – Canvas Widget\']','[\'Canvas widget\', \'Python3\', \'Python3\']','[\'Some common drawing methods:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200313221631/TK7.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200309091355/TK5.png\']','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Optional parameters:xa0\', \'Example 1: Simple Shapes Drawingxa0\', \'Example 2: Simple Paint Appxa0\']','[\'Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in python. Tkinter uses an object-oriented approach to make GUIs.Note: For more information, refer to Python GUI – tkinter\', \'The Canvas widget lets us display various graphics on the application. It can be used to draw simple shapes to complicated graphs. We can also display various kinds of custom widgets according to our needs.\']','[]','[\'from tkinter import *  root = Tk() C = Canvas(root, bg=\"yellow\",           height=250, width=300) line = C.create_line(108, 120,                     320, 40,                     fill=\"green\") arc = C.create_arc(180, 150, 80,                   210, start=0,                   extent=220,                   fill=\"red\") oval = C.create_oval(80, 30, 140,                     150,                     fill=\"blue\") C.pack()mainloop()\', \'from tkinter import *  root = Tk() # Create Titleroot.title(  \"Paint App \") # specify sizeroot.geometry(\"500x350\") # define function when # mouse double click is enableddef paint( event ):        # Co-ordinates.    x1, y1, x2, y2 = ( event.x - 3 ),( event.y - 3 ), ( event.x + 3 ),( event.y + 3 )         # Colour    Colour = \"#000fff000\"         # specify type of display    w.create_line( x1, y1, x2,                  y2, fill = Colour )  # create canvas widget.w = Canvas(root, width = 400, height = 250) # call function when double# click is enabled.w.bind( \"<B1-Motion>\", paint ) # create label.l = Label( root, text = \"Double Click and Drag to draw.\" )l.pack()w.pack() mainloop()\']','[\'C = Canvas(root, height, width, bd, bg, ..)\', \'oval = C.create_oval(x0, y0, x1, y1, options)\', \'arc = C.create_arc(20, 50, 190, 240, start=0, extent=110, fill=\"red\")\', \'line = C.create_line(x0, y0, x1, y1, ..., xn, yn, options)\', \'oval = C.create_polygon(x0, y0, x1, y1, ...xn, yn, options)\']','[]','[\'root = root window.|||height = height of the canvas widget.|||width = width of the canvas widget.|||bg = background colour for canvas.|||bd = border of the canvas window.|||scrollregion (w, n, e, s)tuple defined as a region for scrolling left, top, bottom and right.|||highlightcolor colour shown in the focus highlight.|||cursor It can be defined as a cursor for the canvas which can be a circle, a do, an arrow etc.|||confine decides if canvas can be accessed outside the scroll region.|||relief type of the border which can be SUNKEN, RAISED, GROOVE and RIDGE.&&&Creating an Oval&&&Creating an arc&&&Creating a Line&&&Creating a polygon\']'),(218,'[\'Combobox Widget in tkinter | Python\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200109173948/gfg_combobox.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200109174055/combobox_gfg.jpg\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1: Combobox widget without setting a default value.\']','[\'Note: Tkinter(capital T) is different from the tkinter. Tkinter is used in Python2.x and is changed to tkinter in Python.3x.\', \'Example 2: Combobox with initial default values.We can also set the initial default values in the Combobox widget as shown in the below sample code.\']','[\'Python provides a variety of GUI (Graphic User Interface) types such as PyQT, Tkinter, Kivy, WxPython, and PySide. Among them, tkinter is the most commonly used GUI module in Python since it is simple and easy to understand. The word Tkinter comes from the Tk interface. The tkinter module is available in Python standard library which has to be imported while writing a program in Python to generate a GUI.\', \'Combobox is a combination of Listbox and an entry field. It is one of the Tkinter widgets where it contains a down arrow to select from a list of options. It helps the users to select according to the list of options displayed. When the user clicks on the drop-down arrow on the entry field, a pop up of the scrolled Listbox is displayed down the entry field. The selected option will be displayed in the entry field only when an option from the Listbox is selected.\']','[\'# python program demonstrating# Combobox widget using tkinter    import tkinter as tkfrom tkinter import ttk  # Creating tkinter windowwindow = tk.Tk()window.title(\'Combobox\')window.geometry(\'500x250\')  # label text for titlettk.Label(window, text = \"GFG Combobox Widget\",           background = \'green\', foreground =\"white\",           font = (\"Times New Roman\", 15)).grid(row = 0, column = 1)  # labelttk.Label(window, text = \"Select the Month :\",          font = (\"Times New Roman\", 10)).grid(column = 0,          row = 5, padx = 10, pady = 25)  # Combobox creationn = tk.StringVar()monthchoosen = ttk.Combobox(window, width = 27, textvariable = n)  # Adding combobox drop down listmonthchoosen[\'values\'] = (\' January\',                           \' February\',                          \' March\',                          \' April\',                          \' May\',                          \' June\',                          \' July\',                          \' August\',                          \' September\',                          \' October\',                          \' November\',                          \' December\')  monthchoosen.grid(column = 1, row = 5)monthchoosen.current()window.mainloop()\', \'import tkinter as tkfrom tkinter import ttk  # Creating tkinter windowwindow = tk.Tk()window.geometry(\'350x250\')# Labelttk.Label(window, text = \"Select the Month :\",         font = (\"Times New Roman\", 10)).grid(column = 0,         row = 15, padx = 10, pady = 25)  n = tk.StringVar()monthchoosen = ttk.Combobox(window, width = 27,                             textvariable = n)  # Adding combobox drop down listmonthchoosen[\'values\'] = (\' January\',                           \' February\',                          \' March\',                          \' April\',                          \' May\',                          \' June\',                           \' July\',                           \' August\',                           \' September\',                           \' October\',                           \' November\',                           \' December\')  monthchoosen.grid(column = 1, row = 15)  # Shows february as a default valuemonthchoosen.current(1) window.mainloop()\']','[\'combobox = ttk.Combobox(master, option=value, ...)\']','[]','[]'),(219,'[\'Python Tkinter – Entry Widget\']','[\'Python3\', \'The Entry Widget\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200312232318/python-tkinter1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200311193426/Screenshot-14110.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Example: Now let’s create a simple window using Tkinterxa0\', \'The Entry Widget is a Tkinter Widget used to Enter or display a single line of text.xa0xa0\', \'Parameters:xa0xa0\', \'Methods: The various methods provided by the entry widget are:xa0\', \'Example:xa0xa0\', \'Output :xa0xa0\']','[\'Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.In Python3 Tkinter is come preinstalled But you can also install it by using the command:xa0xa0\', \'1) Parent: The Parent window or frame in which the widget to display.2) Options: The various options provided by the entry widget are:xa0xa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# creating a simple tkinter window# if you are using python2# use import Tkinter as tk  import tkinter as tk  root = tk.Tk()root.title(\"First Tkinter Window\")root.mainloop()\', \'# Program to make a simple# login screen   import tkinter as tk  root=tk.Tk() # setting the windows sizeroot.geometry(\"600x400\")  # declaring string variable# for storing name and passwordname_var=tk.StringVar()passw_var=tk.StringVar()   # defining a function that will# get the name and password and# print them on the screendef submit():     name=name_var.get()    password=passw_var.get()         print(\"The name is : \" + name)    print(\"The password is : \" + password)         name_var.set(\"\")    passw_var.set(\"\")          # creating a label for# name using widget Labelname_label = tk.Label(root, text = \'Username\', font=(\'calibre\',10, \'bold\'))  # creating a entry for input# name using widget Entryname_entry = tk.Entry(root,textvariable = name_var, font=(\'calibre\',10,\'normal\'))  # creating a label for passwordpassw_label = tk.Label(root, text = \'Password\', font = (\'calibre\',10,\'bold\'))  # creating a entry for passwordpassw_entry=tk.Entry(root, textvariable = passw_var, font = (\'calibre\',10,\'normal\'), show = \'*\')  # creating a button using the widget# Button that will call the submit functionsub_btn=tk.Button(root,text = \'Submit\', command = submit)  # placing the label and entry in# the required position using grid# methodname_label.grid(row=0,column=0)name_entry.grid(row=0,column=1)passw_label.grid(row=1,column=0)passw_entry.grid(row=1,column=1)sub_btn.grid(row=2,column=1)  # performing an infinite loop# for the window to displayroot.mainloop()\']','[\'pip install tkinter\', \'entry = tk.Entry(parent, options)\']','[]','[\'bg : The normal background color displayed behind the label and indicator.|||bd : The size of the border around the indicator. Default is 2 pixels.|||font : The font used for the text.|||fg : The color used to render the text.|||justify : If the text contains multiple lines, this option controls how the text is justified: CENTER, LEFT, or RIGHT.|||relief : With the default value, relief=FLAT. You may set this option to any of the other styles like : SUNKEN, RIGID, RAISED, GROOVE|||show : Normally, the characters that the user types appear in the entry. To make a .password. entry that echoes each character as an asterisk, set show=”*”.|||textvariable : In order to be able to retrieve the current text from your entry widget, you must set this option to an instance of the StringVar class.&&&get() : Returns the entry’s current text as a string.|||delete() : Deletes characters from the widget|||insert ( index, ‘name’) : Inserts string ‘name’ before the character at the given index.\']'),(220,'[\'Python Tkinter – Text Widget\']','[\'Text Widget\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200309084414/TK4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200313234922/TK9.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Optional parameters\', \'Some Common methods\', \'Tag handling methods\', \'Mark handling methods\', \'Example 1:\', \'Example 2: Saving Text and performing operations\']','[\'Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in python. Tkinter uses an object-oriented approach to make GUIs.\', \'Text Widget is used where a user wants to insert multiline text fields. This widget can be used for a variety of applications where the multiline text is required such as messaging, sending information or displaying information and many other tasks. We can insert media files such as images and links also in the Textwidget.\']','[]','[\'import tkinter as tk    root = Tk()  # specify size of window.root.geometry(\"250x170\")  # Create text widget and specify size.T = Text(root, height = 5, width = 52)  # Create labell = Label(root, text = \"Fact of the Day\")l.config(font =(\"Courier\", 14))  Fact = \"\"\"A man can be arrested inItaly for wearing a skirt in public.\"\"\"  # Create button for next text.b1 = Button(root, text = \"Next\", )  # Create an Exit button.b2 = Button(root, text = \"Exit\",            command = root.destroy)   l.pack()T.pack()b1.pack()b2.pack()  # Insert The Fact.T.insert(tk.END, Fact)  tk.mainloop()\', \'from tkinter import *  root = Tk()root.geometry(\"300x300\")root.title(\" Q&A \")  def Take_input():    INPUT = inputtxt.get(\"1.0\", \"end-1c\")    print(INPUT)    if(INPUT == \"120\"):        Output.insert(END, \'Correct\')    else:        Output.insert(END, \"Wrong answer\")      l = Label(text = \"What is 24 * 5 ? \")inputtxt = Text(root, height = 10,                width = 25,                bg = \"light yellow\")  Output = Text(root, height = 5,               width = 25,               bg = \"light cyan\")  Display = Button(root, height = 2,                 width = 20,                  text =\"Show\",                 command = lambda:Take_input())  l.pack()inputtxt.pack()Display.pack()Output.pack()  mainloop()\']','[\'T = Text(root, bg, fg, bd, height, width, font, ..)\']','[]','[\'root – root window.|||bg – background colour|||fg – foreground colour|||bd – border of widget.|||height – height of the widget.|||width – width of the widget.|||font – Font type of the text.|||cursor – The type of the cursor to be used.|||insetofftime – The time in milliseconds for which the cursor blink is off.|||insertontime – the time in milliseconds for which the cusrsor blink is on.|||padx – horizontal padding.|||pady – vertical padding.|||state – defines if the widget will be responsive to mouse or keyboards movements.|||highligththickness – defines the thickness of the focus highlight.|||insertionwidth – defines the width of insertion character.|||relief – type of the border which can be SUNKEN, RAISED, GROOVE and RIDGE.|||yscrollcommand – to make the widget vertically scrollable.|||xscrollcommand – to make the widget horizontally scrollable.&&&index(index) – To get the specified index.|||insert(index) – To insert a string at a specified index.|||see(index) – Checks if a string is visible or not at a given index.|||get(startindex, endindex) – to get characters within a given range.|||delete(startindex, endindex) – deletes characters within specified range.&&&tag_delete(tagname) – To delete a given tag.|||tag_add(tagname, startindex, endindex) – to tag the string in the specified range|||tag_remove(tagname, startindex, endindex) – to remove a tag from specified range&&&mark_names() – to get all the marks in the given range.|||index(mark) – to get index of a mark.|||mark_gravity() – to get the gravity of a given mark.\']'),(221,'[\'Python Tkinter – Message\']','[\'Message widget\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Syntax:The syntax to use the message is given below.\', \'Parameters:\', \'Options:Following are commonly used Option can be used with this widget :-\']','[\'Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.\', \'The Message widget is used to show the message to the user regarding the behavior of the python application. The message text contains more than one line.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'from tkinter import *  root = Tk()root.geometry(\"300x200\")  w = Label(root, text =\'GeeksForGeeks\', font = \"50\") w.pack()    msg = Message( root, text = \"A computer science portal for geeks\")      msg.pack()    root.mainloop()\']','[\'w = Message( master, options)\']','[]','[\'master: This parameter is used to represents the parent window.|||options:There are many options which are available and they can be used as key-value pairs separated by commas.&&&anchor: This option is used to decide the exact position of the text within the space .Its default value is CENTER.|||bg: This option used to represent the normal background color.|||bitmap: This option used to display a monochrome image.|||bd: This option used to represent the size of the border and the default value is 2 pixels.|||cursor: By using this option, the mouse cursor will change to that pattern when it is over type.|||font: This option used to represent the font used for the text.|||fg: This option used to represent the color used to render the text.|||height: This option used to represent the number of lines of text on the message.|||image: This option used to display a graphic image on the widget.|||justify: This option used to control how the text is justified: CENTER, LEFT, or RIGHT.|||padx: This option used to represent how much space to leave to the left and right of the widget and text. It’s default value is 1 pixel.|||pady: This option used to represent how much space to leave above and below the widget. It’s default value is 1 pixel.|||relief: The type of the border of the widget. It’s default value is set to FLAT.|||text: This option used use newlines (“\\n”) to display multiple lines of text.|||variable: This option used to represents the associated variable that tracks the state of the widget.|||width: This option used to represents the width of the widget. and also represented in the number of characters that are represented in the form of texts.|||wraplength: This option will be broken text into the number of pieces.\']'),(222,'[\'Python | Menu widget in Tkinter\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190412004518/output112-300x196.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190412004543/output212-300x196.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190412004606/output311-300x194.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'xa0Below is the implementation:\']','[\'Tkinter is Python’s standard GUI (Graphical User Interface) package. It is one of the most commonly used package for GUI applications which comes with the Python itself.\', \'Menus are the important part of any GUI. A common use of menus is to provide convenient access to various operations such as saving or opening a file, quitting a program, or manipulating data. Toplevel menus are displayed just under the title bar of the root or any other toplevel windows.\', \'Note: In above application, commands are set to None but one may add different commands to different labels to perform the required task.\']','[]','[\"# importing only  those functions # which are neededfrom tkinter import * from tkinter.ttk import * from time import strftime  # creating tkinter windowroot = Tk()root.title(\'Menu Demonstration\')  # Creating Menubarmenubar = Menu(root)  # Adding File Menu and commandsfile = Menu(menubar, tearoff = 0)menubar.add_cascade(label =\'File\', menu = file)file.add_command(label =\'New File\', command = None)file.add_command(label =\'Open...\', command = None)file.add_command(label =\'Save\', command = None)file.add_separator()file.add_command(label =\'Exit\', command = root.destroy)  # Adding Edit Menu and commandsedit = Menu(menubar, tearoff = 0)menubar.add_cascade(label =\'Edit\', menu = edit)edit.add_command(label =\'Cut\', command = None)edit.add_command(label =\'Copy\', command = None)edit.add_command(label =\'Paste\', command = None)edit.add_command(label =\'Select All\', command = None)edit.add_separator()edit.add_command(label =\'Find...\', command = None)edit.add_command(label =\'Find again\', command = None)  # Adding Help Menuhelp_ = Menu(menubar, tearoff = 0)menubar.add_cascade(label =\'Help\', menu = help_)help_.add_command(label =\'Tk Help\', command = None)help_.add_command(label =\'Demo\', command = None)help_.add_separator()help_.add_command(label =\'About Tk\', command = None)  # display Menuroot.config(menu = menubar)mainloop()\"]','[\'menu = Menu(master, **options)\']','[]','[]'),(223,'[\'Python Tkinter – SpinBox\']','[\'Spinbox widget\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200315023253/val4.png\']','[]','[\'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Syntax:The syntax to use the Spinbox is given below.\', \'Parameters:\', \'Options:Following are commonly used Option can be used with this widget :-\', \'Methods:Methods used in this widgets are as follows:\']','[\'Python offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter is the fastest and easiest way to create the GUI applications. Creating a GUI using tkinter is an easy task.\', \'The Spinbox widget is used to select from a fixed number of values. It is an alternative Entry widget and provides the range of values to the user.\']','[]','[\'from tkinter import *  root = Tk()root.geometry(\"300x200\")  w = Label(root, text =\'GeeksForGeeks\', font = \"50\") w.pack()  sp = Spinbox(root, from_= 0, to = 20)sp.pack()  root.mainloop()\']','[\'w = Spinbox ( master, options)\']','[]','[\'master: This parameter is used to represents the parent window.|||options:There are many options which are available and they can be used as key-value pairs separated by commas.&&&activebackground: This option used to represent the background color when the slider and arrowheads is under the cursor.|||bg: This option used to represent the normal background color displayed behind the label and indicator.|||bd: This option used to represent the size of the border around the indicator and the default value is 2 pixels.|||command: This option is associated with a function to be called when the state is changed.|||cursor: By using this option, the mouse cursor will change to that pattern when it is over the type.|||disabledforeground: This option used to represent the foreground color of the widget when it is disabled..|||disabledbackground: This option used to represent the background color of the widget when it is disabled..|||font: This option used to represent the font used for the text.|||fg: This option used to represent the color used to render the text.|||format: This option used to formatting the string and it’s has no default value.|||from_: This option used to represent the minimum value.|||justify: This option used to control how the text is justified: CENTER, LEFT, or RIGHT.|||relief: This option used to represent the type of the border and It’s default value is set to SUNKEN.|||repeatdelay: This option is used to control the button auto repeat and its default value is in milliseconds.|||repeatinterval: This option is similar to repeatdelay.|||state: This option used to represent the represents the state of the widget and its default value is NORMAL.|||textvariable: This option used to control the behaviour of the widget text.|||to: It specify the maximum limit of the widget value. The other is specified by the from_ option.|||validate: This option is used to control how the widget value is validated.|||validatecommand: This option is associated to the function callback which is used for the validation of the widget content.|||values: This option used to represent the tuple containing the values for this widget.|||vcmd: This option is same as validation command.|||width: This option is used to represents the width of the widget.|||wrap: This option wraps up the up and down button the Spinbox.|||xscrollcommand: This options is set to the set() method of scrollbar to make this widget horizontally scrollable.&&&delete(startindex, endindex): This method is used to delete the characters present at the specified range.|||get(startindex, endindex): This method is used to get the characters present in the specified range.|||identify(x, y): This method is used to identify the widget’s element within the specified range.|||index(index): This method is used to get the absolute value of the given index.|||insert(index, string): This method is used to insert the string at the specified index.|||invoke(element): This method is used to invoke the callback associated with the widget.\']'),(224,'[\'Progressbar widget in Tkinter | Python\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190430235939/demonstration_of_progressbar_widget.mp4\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190501001802/progressbar_in_indeterminate_mode.mp4\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'xa0Code #1 In determinate mode\']','[]','[\'The purpose of this widget is to reassure the user that something is happening. It can operate in one of two modes –In determinate mode, the widget shows an indicator that moves from beginning to end under program control.In indeterminate mode, the widget is animated so the user will believe that something is in progress. In this mode, the indicator bounces back and forth between the ends of the widget.\']','[\"# importing tkinter modulefrom tkinter import * from tkinter.ttk import *  # creating tkinter windowroot = Tk()  # Progress bar widgetprogress = Progressbar(root, orient = HORIZONTAL,              length = 100, mode = \'determinate\')  # Function responsible for the updation# of the progress bar valuedef bar():    import time    progress[\'value\'] = 20    root.update_idletasks()    time.sleep(1)      progress[\'value\'] = 40    root.update_idletasks()    time.sleep(1)      progress[\'value\'] = 50    root.update_idletasks()    time.sleep(1)      progress[\'value\'] = 60    root.update_idletasks()    time.sleep(1)      progress[\'value\'] = 80    root.update_idletasks()    time.sleep(1)    progress[\'value\'] = 100  progress.pack(pady = 10)  # This button will initialize# the progress barButton(root, text = \'Start\', command = bar).pack(pady = 10)  # infinite loopmainloop()\", \"# importing tkinter modulefrom tkinter import * from tkinter.ttk import *  # creating tkinter windowroot = Tk()  # Progress bar widgetprogress = Progressbar(root, orient = HORIZONTAL,            length = 100, mode = \'indeterminate\')  # Function responsible for the updation# of the progress bar valuedef bar():    import time    progress[\'value\'] = 20    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 40    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 50    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 60    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 80    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 100    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 80    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 60    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 50    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 40    root.update_idletasks()    time.sleep(0.5)      progress[\'value\'] = 20    root.update_idletasks()    time.sleep(0.5)    progress[\'value\'] = 0        progress.pack(pady = 10)  # This button will initialize# the progress barButton(root, text = \'Start\', command = bar).pack(pady = 10)  # infinite loopmainloop()\"]','[\'widget_object = Progressbar(parent, **options)\']','[]','[]'),(225,'[\'Python-Tkinter Scrollbar\']','[\'Scrollbar Widget\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200315113618/1406-3.png\']','[]','[\'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Syntax:The syntax to use the Scrollbar widget is given below.\', \'Parameters:\', \'Options:Following are commonly used Option can be used with this widget :-\', \'Methods:Methods used in this widgets are as follows:\']','[\'Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.\', \'The scrollbar widget is used to scroll down the content. We can also create the horizontal scrollbars to the Entry widget.\']','[]','[\'from tkinter import *  root = Tk()root.geometry(\"150x200\")   w = Label(root, text =\'GeeksForGeeks\',          font = \"50\")   w.pack()   scroll_bar = Scrollbar(root)  scroll_bar.pack( side = RIGHT,                fill = Y )   mylist = Listbox(root,                  yscrollcommand = scroll_bar.set )   for line in range(1, 26):    mylist.insert(END, \"Geeks \" + str(line))  mylist.pack( side = LEFT, fill = BOTH )  scroll_bar.config( command = mylist.yview )   root.mainloop()\']','[\'w = Scrollbar(master, options)\']','[]','[\'master: This parameter is used to represents the parent window.|||options: There are many options which are available and they can be used as key-value pairs separated by commas.&&&activebackground: This option is used to represent the background color of the widget when it has the focus.|||bg: This option is used to represent the background color of the widget.|||bd: This option is used to represent the border width of the widget.|||command: This option can be set to the procedure associated with the list which can be called each time when the scrollbar is moved.|||cursor: In this option, the mouse pointer is changed to the cursor type set to this option which can be an arrow, dot, etc.|||elementborderwidth: This option is used to represent the border width around the arrow heads and slider. The default value is -1.|||Highlightbackground: This option is used to focus highlighcolor when the widget doesn’t have the focus.|||highlighcolor: This option is used to focus highlighcolor when the widget has the focus.|||highlightthickness: This option is used to represent the thickness of the focus highlight.|||jump: This option is used to control the behavior of the scroll jump. If it set to 1, then the callback is called when the user releases the mouse button.|||orient: This option can be set to HORIZONTAL or VERTICAL depending upon the orientation of the scrollbar.|||repeatdelay: This option tells the duration up to which the button is to be pressed before the slider starts moving in that direction repeatedly. The default is 300 ms.|||repeatinterval: The default value of the repeat interval is 100.|||takefocus: You can tab the focus through a scrollbar widget|||troughcolor: This option is used to represent the color of the trough.|||width: This option is used to represent the width of the scrollbar.&&&get(): This method is used to returns the two numbers a and b which represents the current position of the scrollbar.|||set(first, last): This method is used to connect the scrollbar to the other widget w. The yscrollcommand or xscrollcommand of the other widget to this method.\']'),(226,'[\'Python Tkinter – ScrolledText Widget\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200403021652/ScrolledText_widget1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200409192258/scrolledtext_widget1.png\']','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Example 1 : Python code displaying scrolledText widget.\', \'Example 2 : ScrolledText widget making tkinter text Read only.\']','[\'In the first example, as you can see the cursor, the user can enter any number of lines of text. In the second example, the user can just read the text which is displayed in the text box and cannot edit/enter any lines of text. We may observe that the scroll bar disappears automatically if the text entered by the user is less than the size of the widget.\']','[\'Tkinter is a built-in standard python library. With the help of Tkinter, many GUI applications can be created easily. There are various types of widgets available in Tkinter such as button, frame, label, menu, scrolledtext, canvas and many more. A widget is an element that provides various controls. ScrolledText widget is a text widget with a scroll bar. The tkinter.scrolledtext module provides the text widget along with a scroll bar. This widget helps the user enter multiple lines of text with convenience. Instead of adding a Scroll bar to a text widget, we can make use of a scrolledtext widget that helps to enter any number of lines of text.\']','[\'# Python program demonstrating# ScrolledText widget in tkinter  import tkinter as tkfrom tkinter import ttkfrom tkinter import scrolledtext  # Creating tkinter main windowwin = tk.Tk()win.title(\"ScrolledText Widget\")  # Title Labelttk.Label(win,           text = \"ScrolledText Widget Example\",          font = (\"Times New Roman\", 15),           background = \'green\',           foreground = \"white\").grid(column = 0,                                     row = 0)  # Creating scrolled text # area widgettext_area = scrolledtext.ScrolledText(win,                                       wrap = tk.WORD,                                       width = 40,                                       height = 10,                                       font = (\"Times New Roman\",                                              15))  text_area.grid(column = 0, pady = 10, padx = 10)  # Placing cursor in the text areatext_area.focus()win.mainloop()\', \'# Importing required modules  import tkinter as tkimport tkinter.scrolledtext as st  # Creating tkinter windowwin = tk.Tk()win.title(\"ScrolledText Widget\")  # Title Labeltk.Label(win,          text = \"ScrolledText Widget Example\",          font = (\"Times New Roman\", 15),          background = \'green\',          foreground = \"white\").grid(column = 0,                                    row = 0)  # Creating scrolled text area# widget with Read only by# disabling the statetext_area = st.ScrolledText(win,                            width = 30,                             height = 8,                             font = (\"Times New Roman\",                                    15))  text_area.grid(column = 0, pady = 10, padx = 10)  # Inserting Text which is read onlytext_area.insert(tk.INSERT,\"\"\"\\This is a scrolledtext widget to make tkinter text read only.HiGeeks !!!Geeks !!!Geeks !!! Geeks !!!Geeks !!!Geeks !!!Geeks !!!\"\"\")  # Making the text read onlytext_area.configure(state =\'disabled\')win.mainloop()\']','[]','[]','[]'),(227,'[\'Python Tkinter – ListBox Widget\']','[\'ListBox widget\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200314013406/TKli.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200314013614/TKli2.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Optional parameters\', \'Common methods\', \'Example 1:\', \'OutputExample 2: Let’s Delete the elements from the above created listbox\']','[\'Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in python. Tkinter uses an object-oriented approach to make GUIs.\', \'The ListBox widget is used to display different types of items. These items must be of the same type of font and having the same font color. The items must also be of Text type. The user can select one or more items from the given list according to the requirement.\']','[]','[\'from tkinter import *    # create a root window.top = Tk()  # create listbox objectlistbox = Listbox(top, height = 10,                   width = 15,                   bg = \"grey\",                  activestyle = \'dotbox\',                   font = \"Helvetica\",                  fg = \"yellow\")  # Define the size of the window.top.geometry(\"300x250\")    # Define a label for the list.  label = Label(top, text = \" FOOD ITEMS\")   # insert elements by their# index and names.listbox.insert(1, \"Nachos\")listbox.insert(2, \"Sandwich\")listbox.insert(3, \"Burger\")listbox.insert(4, \"Pizza\")listbox.insert(5, \"Burrito\")  # pack the widgetslabel.pack()listbox.pack()    # Display untill User # exits themselves.top.mainloop()\', \'# Delete Items from the list#  by specifying the index.listbox.delete(2)\']','[\'listbox = Listbox(root, bg, fg, bd, height, width, font, ..)\']','[]','[\'root – root window.|||bg – background colour|||fg – foreground colour|||bd – border|||height – height of the widget.|||width – width of the widget.|||font – Font type of the text.|||highlightcolor – The colour of the list items when focused.|||yscrollcommand – for scrolling vertically.|||xscrollcommand – for scrolling horizontally.|||cursor – The cursor on the widget which can be an arrow, a dot etc.&&&yview – allows the widget to be vertically scrollable.|||xview – allows the widget to be horizontally scrollable.|||get() – to get the list items in a given range.|||activate(index) – to select the lines with a specified index.|||size() – return the number of lines present.|||delete(start, last) – delete lines in the specified range.|||nearest(y) – returns the index of the nearest line.|||curseselection() – returns a tuple for all the line numbers that are being selected.\']'),(228,'[\'Python Tkinter – Frame Widget\']','[\'Frame\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200315020442/val3.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Syntax:The syntax to use the frame widget is given below.\', \'Parameters:\', \'Options:Following are commonly used Option can be used with this widget :-\']','[\'Python offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter is the fastest and easiest way to create the GUI applications. Creating a GUI using tkinter is an easy task.\', \'A frame is a rectangular region on the screen. A frame can also be used as a foundation class to implement complex widgets. It is used to organize a group of widgets.\']','[]','[\'from tkinter import * root = Tk()root.geometry(\"300x150\")  w = Label(root, text =\'GeeksForGeeks\', font = \"50\") w.pack()  frame = Frame(root)frame.pack()  bottomframe = Frame(root)bottomframe.pack( side = BOTTOM )  b1_button = Button(frame, text =\"Geeks1\", fg =\"red\")b1_button.pack( side = LEFT)  b2_button = Button(frame, text =\"Geeks2\", fg =\"brown\")b2_button.pack( side = LEFT )  b3_button = Button(frame, text =\"Geeks3\", fg =\"blue\")b3_button.pack( side = LEFT )  b4_button = Button(bottomframe, text =\"Geeks4\", fg =\"green\")b4_button.pack( side = BOTTOM)  b5_button = Button(bottomframe, text =\"Geeks5\", fg =\"green\")b5_button.pack( side = BOTTOM)  b6_button = Button(bottomframe, text =\"Geeks6\", fg =\"green\")b6_button.pack( side = BOTTOM)  root.mainloop()\']','[\'w = frame( master, options)\']','[]','[\'master: This parameter is used to represents the parent window.|||options:There are many options which are available and they can be used as key-value pairs separated by commas.&&&bg: This option used to represent the normal background color displayed behind the label and indicator.|||bd: This option used to represent the size of the border around the indicator and the default value is 2 pixels.|||cursor: By using this option, the mouse cursor will change to that pattern when it is over the frame.|||height: The vertical dimension of the new frame.|||highlightcolor: This option used to represent the color of the focus highlight when the frame has the focus.|||highlightthickness: This option used to represent the color of the focus highlight when the frame does not have focus.|||highlightbackground: This option used to represent the thickness of the focus highlight..|||relief: The type of the border of the frame. It’s default value is set to FLAT.|||width: This option used to represents the width of the frame.\']'),(229,'[\'Python Tkinter – Scale Widget\']','[\'Scale widget\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200314005806/TJhor.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200314010111/TKver.png\']','[]','[\'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Optional parameters\', \'Example 1: Creating a horizontal bar\', \'Example 2: Creating a vertical slider\']','[\'Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in python. Tkinter uses an object-oriented approach to make GUIs.\', \'The Scale widget is used whenever we want to select a specific value from a range of values. It provides a sliding bar through which we can select the values by sliding from left to right or top to bottom depending upon the orientation of our sliding bar.\']','[]','[\'# Python program to demonstrate# scale widget  from tkinter import *     root = Tk()  root.geometry(\"400x300\")   v1 = DoubleVar()  def show1():            sel = \"Horizontal Scale Value = \" + str(v1.get())    l1.config(text = sel, font =(\"Courier\", 14))      s1 = Scale( root, variable = v1,            from_ = 1, to = 100,            orient = HORIZONTAL)     l3 = Label(root, text = \"Horizontal Scaler\")  b1 = Button(root, text =\"Display Horizontal\",             command = show1,             bg = \"yellow\")    l1 = Label(root)    s1.pack(anchor = CENTER) l3.pack()b1.pack(anchor = CENTER)l1.pack()   root.mainloop()\', \'from tkinter import *  root = Tk()  root.geometry(\"400x300\") v2 = DoubleVar()  def show2():          sel = \"Vertical Scale Value = \" + str(v2.get())     l2.config(text = sel, font =(\"Courier\", 14))  s2 = Scale( root, variable = v2,           from_ = 50, to = 1,           orient = VERTICAL)   l4 = Label(root, text = \"Vertical Scaler\")  b2 = Button(root, text =\"Display Vertical\",            command = show2,            bg = \"purple\",             fg = \"white\")  l2 = Label(root)  s2.pack(anchor = CENTER) l4.pack()b2.pack()l2.pack()  root.mainloop()\']','[\'S = Scale(root, bg, fg, bd, command, orient, from_, to, ..)\']','[]','[\'root – root window.|||bg – background colour|||fg – foreground colour|||bd – border|||orient – orientation(vertical or horizontal)|||from_ – starting value|||to – ending value|||troughcolor – set colour for trough.|||state – decides if the widget will be responsive or unresponsive.|||sliderlength – decides the length of the slider.|||label – to display label in the widget.|||highlightbackground – the colour of the focus when widget is not focused.|||cursor – The cursor on the widget which could be arrow, circle, dot etc.&&&set(value) – set the value for scale.|||get() – get the value of scale.\']'),(230,'[\'Hierarchical treeview in Python GUI application\']','[\'Treeview widgets\', \'Python\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210116133555/Screenshot245.png\']','[]','[\'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210116133613/FreeOnlineScreenRecorderProject6.mp4\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'The GUI would look like below:\', \'Example:xa0xa0\']','[\'In the above output, a hierarchical treeview is created. Where, GeeksforGeeks is the parent with Computer Science, GATE papers and Programming Languages as its child. And all the child have their respective attributes attached to them. At last, move() method is called here in order to connect all the children to the parent tree.xa0\']','[\'Python uses different GUI applications that are helpful for the users while interacting with the applications they are using. There are basically three GUI(s) that python uses namely Tkinter, wxPython, and PyQt. All of these can operate with windows, Linux, and mac-OS. However, these GUI applications have many widgets i.e, controls that are helpful for the user interaction with the application. Some of the widgets are buttons, list boxes, scrollbar, treeview, etc.xa0Note: For more information, refer to Python GUI – tkinterxa0\', \'This widget is helpful in visualizing and permitting navigation over a hierarchy of items. It can display more than one feature of every item in the hierarchy. It can build a tree view as a user interface like in Windows explorer. Therefore, here we will use Tkinter in order to construct a hierarchical treeview in the Python GUI application.xa0Let’s see an example of constructing a hierarchical treeview in Python GUI application.xa0\']','[\'# Python program to illustrate the usage# of hierarchical treeview in python GUI# application using tkinter # Importing tkinterfrom tkinter import *  # Importing ttk from tkinterfrom tkinter import ttk  # Creating app windowapp = Tk()  # Defining title of the appapp.title(\"GUI Application of Python\")  # Defining label of the app and calling a geometry# management method i.e, pack in order to organize# widgets in form of blocks before locating them# in the parent widgetttk.Label(app, text =\"Treeview(hierarchical)\").pack() # Creating treeview windowtreeview = ttk.Treeview(app)  # Calling pack method on the treeviewtreeview.pack()  # Inserting items to the treeview# Inserting parenttreeview.insert(\'\', \'0\', \'item1\',                text =\'GeeksforGeeks\') # Inserting childtreeview.insert(\'\', \'1\', \'item2\',                text =\'Computer Science\')treeview.insert(\'\', \'2\', \'item3\',                text =\'GATE papers\')treeview.insert(\'\', \'end\', \'item4\',                text =\'Programming Languages\') # Inserting more than one attribute of an itemtreeview.insert(\'item2\', \'end\', \'Algorithm\',                text =\'Algorithm\') treeview.insert(\'item2\', \'end\', \'Data structure\',                text =\'Data structure\')treeview.insert(\'item3\', \'end\', \'2018 paper\',                text =\'2018 paper\') treeview.insert(\'item3\', \'end\', \'2019 paper\',                text =\'2019 paper\')treeview.insert(\'item4\', \'end\', \'Python\',                text =\'Python\')treeview.insert(\'item4\', \'end\', \'Java\',                text =\'Java\') # Placing each child items in parent widgettreeview.move(\'item2\', \'item1\', \'end\') treeview.move(\'item3\', \'item1\', \'end\')treeview.move(\'item4\', \'item1\', \'end\') # Calling main() app.mainloop()\']','[]','[]','[]'),(231,'[\'Python-Tkinter Treeview scrollbar\']','[\'Treeview scrollbar\', \'Python\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200319194643/python-tkinter-treeview-scrollbar.webm\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[]','[\'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Python has several options for constructing GUI and python tkinter is one of them. It is the standard GUI library for Python, which helps in making GUI applications easily. It provides an efficient object-oriented interface to the tk GUI toolkit. It also has multiple controls called widgets like text boxes, scrollbars, buttons, etc. Moreover, Tkinter has some geometry management methods namely, pack(), grid(), and, place() which are helpful in organizing widgets.Note: For more information, refer to Python GUI – tkinterxa0\', \'When a scrollbar uses treeview widgets, then that type of scrollbar is called as treeview scrollbar. Where, a treeview widget is helpful in displaying more than one feature of every item listed in the tree to the right side of the tree in the form of columns. However, it can be implemented using tkinter in python with the help of some widgets and geometry management methods as supported by tkinter.xa0Below example illustrates the usage of Treeview Scrollbar using Python-tkinter:xa0Example 1:xa0xa0\', \'In the above program, we have used pack() method of the geometry management methods. And, we have constructed only vertical scrollbar as per the requirement of the code but you can construct both the bars as per your requirements. Moreover, anchors are used here in order to define the positions of the text. However, you can also use other geometry management methods in order to construct the treeview scrollbar.xa0\']','[\'# Python program to illustrate the usage of# treeview scrollbars using tkinter  from tkinter import ttkimport tkinter as tk # Creating tkinter windowwindow = tk.Tk()window.resizable(width = 1, height = 1) # Using treeview widgettreev = ttk.Treeview(window, selectmode =\'browse\') # Calling pack method w.r.to treeviewtreev.pack(side =\'right\') # Constructing vertical scrollbar# with treeviewverscrlbar = ttk.Scrollbar(window,                           orient =\"vertical\",                           command = treev.yview) # Calling pack method w.r.to vertical# scrollbarverscrlbar.pack(side =\'right\', fill =\'x\') # Configuring treeviewtreev.configure(xscrollcommand = verscrlbar.set) # Defining number of columnstreev[\"columns\"] = (\"1\", \"2\", \"3\") # Defining headingtreev[\'show\'] = \'headings\' # Assigning the width and anchor to  the# respective columnstreev.column(\"1\", width = 90, anchor =\'c\')treev.column(\"2\", width = 90, anchor =\'se\')treev.column(\"3\", width = 90, anchor =\'se\') # Assigning the heading names to the# respective columnstreev.heading(\"1\", text =\"Name\")treev.heading(\"2\", text =\"Sex\")treev.heading(\"3\", text =\"Age\") # Inserting the items and their features to the# columns builttreev.insert(\"\", \'end\', text =\"L1\",             values =(\"Nidhi\", \"F\", \"25\"))treev.insert(\"\", \'end\', text =\"L2\",             values =(\"Nisha\", \"F\", \"23\"))treev.insert(\"\", \'end\', text =\"L3\",             values =(\"Preeti\", \"F\", \"27\"))treev.insert(\"\", \'end\', text =\"L4\",             values =(\"Rahul\", \"M\", \"20\"))treev.insert(\"\", \'end\', text =\"L5\",             values =(\"Sonu\", \"F\", \"18\"))treev.insert(\"\", \'end\', text =\"L6\",             values =(\"Rohit\", \"M\", \"19\"))treev.insert(\"\", \'end\', text =\"L7\",             values =(\"Geeta\", \"F\", \"25\"))treev.insert(\"\", \'end\', text =\"L8\",             values =(\"Ankit\", \"M\", \"22\"))treev.insert(\"\", \'end\', text =\"L10\",             values =(\"Mukul\", \"F\", \"25\"))treev.insert(\"\", \'end\', text =\"L11\",             values =(\"Mohit\", \"M\", \"16\"))treev.insert(\"\", \'end\', text =\"L12\",             values =(\"Vivek\", \"M\", \"22\"))treev.insert(\"\", \'end\', text =\"L13\",             values =(\"Suman\", \"F\", \"30\")) # Calling mainloopwindow.mainloop()\']','[]','[]','[]'),(232,'[\'Python Tkinter – Toplevel Widget\']','[\'Toplevel widget\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200314021004/TKtop.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200309064739/TK3.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Optional parametersxa0xa0\', \'Common methodsxa0xa0\', \'Example 1:xa0xa0\', \'Example 2: Creating Multiple toplevels over one anotherxa0\']','[\'Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in Python. Tkinter uses an object-oriented approach to make GUIs.\', \'A Toplevel widget is used to create a window on top of all other windows. The Toplevel widget is used to provide some extra information to the user and also when our program deals with more than one application. These windows are directly organized and managed by the Window Manager and do not need to have any parent window associated with them every time.\']','[]','[\'from tkinter import *  root = Tk()root.geometry(\"200x300\")root.title(\"main\") l = Label(root, text = \"This is root window\") top = Toplevel()top.geometry(\"180x100\")top.title(\"toplevel\")l2 = Label(top, text = \"This is toplevel window\") l.pack()l2.pack() top.mainloop()\', \'from tkinter import *  # Create the root window# with specified size and titleroot = Tk() root.title(\"Root Window\") root.geometry(\"450x300\")  # Create label for root windowlabel1 = Label(root, text = \"This is the root window\")   # define a function for 2nd toplevel# window which is not associated with# any parent windowdef open_Toplevel2():          # Create widget    top2 = Toplevel()         # define title for window    top2.title(\"Toplevel2\")         # specify size    top2.geometry(\"200x100\")         # Create label    label = Label(top2,                  text = \"This is a Toplevel2 window\")         # Create exit button.    button = Button(top2, text = \"Exit\",                    command = top2.destroy)         label.pack()    button.pack()         # Display until closed manually.    top2.mainloop()      # define a function for 1st toplevel# which is associated with root window.def open_Toplevel1():          # Create widget    top1 = Toplevel(root)         # Define title for window    top1.title(\"Toplevel1\")         # specify size    top1.geometry(\"200x200\")         # Create label    label = Label(top1,                  text = \"This is a Toplevel1 window\")         # Create Exit button    button1 = Button(top1, text = \"Exit\",                     command = top1.destroy)         # create button to open toplevel2    button2 = Button(top1, text = \"open toplevel2\",                     command = open_Toplevel2)         label.pack()    button2.pack()    button1.pack()         # Display until closed manually    top1.mainloop() # Create button to open toplevel1button = Button(root, text = \"open toplevel1\",                command = open_Toplevel1)label1.pack() # position the buttonbutton.place(x = 155, y = 50)   # Display until closed manuallyroot.mainloop()\']','[\'toplevel = Toplevel(root, bg, fg, bd, height, width, font, ..)\']','[]','[\'root = root window(optional)|||bg = background colour|||fg = foreground colour|||bd = border|||height = height of the widget.|||width = width of the widget.|||font = Font type of the text.|||cursor = cursor that appears on the widget which can be an arrow, a dot etc.&&&iconify turns the windows into icon.|||deiconify turns back the icon into window.|||state returns the current state of window.|||withdraw removes the window from the screen.|||title defines title for window.|||frame returns a window identifier which is system specific.\']'),(233,'[\'Python | askopenfile() function in Tkinter\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190403005742/open_dialog_window.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190403005929/printed_content_of_file.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190403010024/original_and_printed_content.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'In order to use askopenfile() function you may require to follow these steps:\', \'Printed content of selected file –\', \'Comparison of content of original file and printed content –\']','[\'-> import tkinter-> from tkinter.filedialog import askopenfile ## Now you can use this function-> file = askopeenfile(mode=’r’, filetypes=[(‘any name you want to display’, ‘extension of file type’)])\', \'We have to specify the mode in which you want to open the file like in above snippet, this will open a file in reading mode.\', \'Note: In above code only .py (python files) types files will be open. To open specified type of files, one has to mention it in the filetypes option along with it’s extension as done in above code.\']','[\'While working with GUI one may need to open files and read data from it or may require to write data in that particular file. One can achieve this with the help of open() function (python built-in) but one may not be able to select any required file unless provides a path to that particular file in code.With the help of GUI, you may not require to specify the path of any file but you can directly open a file and read it’s content.\']','[\"# importing tkinter and tkinter.ttk# and all their functions and classesfrom tkinter import * from tkinter.ttk import *  # importing askopenfile function# from class filedialogfrom tkinter.filedialog import askopenfile  root = Tk()root.geometry(\'200x100\')  # This function will be used to open# file in read mode and only Python files# will be openeddef open_file():    file = askopenfile(mode =\'r\', filetypes =[(\'Python Files\', \'*.py\')])    if file is not None:        content = file.read()        print(content)  btn = Button(root, text =\'Open\', command = lambda:open_file())btn.pack(side = TOP, pady = 10)  mainloop()\"]','[]','[]','[]'),(234,'[\'Python | asksaveasfile() function in Tkinter\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190403163934/folder_before_saving_a_file-300x239.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190403164037/creating_new_python_file-300x208.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190403164217/content_of_folder_after_saving_2_file-300x233.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Below is the Code:\', \'Output #1: Directory before saving any file (folder is initially empty)\', \'Output #3: Directory after saving 2 Python files (one may also change the type of file)\']','[\'Python provides a variety of modules with the help of which one may develop GUI (Graphical User Interface) applications. Tkinter is one of the easiest and fastest way to develop GUI applications.\', \'While working with files one may need to open files, do operations on files and after that to save file. asksaveasfile() is the function which is used to save user’s file (extension can be set explicitly or you can set default extensions also). This function comes under the class filedialog.\', \'Output #2: Dialogbox when user presses the save button (dialog box to save file is opened). You may see in the output Python file as default is selected.\']','[]','[\"# importing all files  from tkinterfrom tkinter import * from tkinter import ttk  # import only asksaveasfile from filedialog# which is used to save file in any extensionfrom tkinter.filedialog import asksaveasfile  root = Tk()root.geometry(\'200x150\')  # function to call when user press# the save button, a filedialog will# open and ask to save filedef save():    files = [(\'All Files\', \'*.*\'),              (\'Python Files\', \'*.py\'),             (\'Text Document\', \'*.txt\')]    file = asksaveasfile(filetypes = files, defaultextension = files)  btn = ttk.Button(root, text = \'Save\', command = lambda : save())btn.pack(side = TOP, pady = 20)  mainloop()\"]','[]','[]','[]'),(235,'[\'Python – Tkinter askquestion Dialog\']','[\'Askquestion()\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200328223737/pro_1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200328223740/prob_2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200328223742/prob_3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200328223744/prob_4.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200328223746/prob_5.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'http://geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax of the Message-Box Functions:xa0xa0\', \'Example:xa0xa0\', \'ICONS that We can use in Optionsxa0xa0\', \'Example-xa0xa0\', \'Example-xa0xa0\', \'Example-xa0xa0\', \'Example-xa0xa0\']','[\'This function is used to ask questions to the user. That has only two options YES or NO.xa0Application of this function:xa0\', \'1. Importing the Librariesxa0To use the GUI functionality in python we have to import the libraries. In the first line, we are importing Tkinter, and second-line we’re importing messagebox libraryxa0\', \'2. Main window instancexa0We have to create an instance or object for the window to TK(); Tk() is a function of Tkinter that create a window that can be referred from the main variablexa0xa0\', \'3. Set dimensionxa0we set the dimension of the window we can set it in various ways.in this we are setting is by geometry() function of size “100X100”.xa0xa0\', \'4. Applying other widget and functionxa0In our example, we create a method named Submit and call the askquestion() and Creating Button and setting it by Pack() functionxa0xa0\', \'5. mainloop()xa0This method can be used when all the code is ready to execute.It runs the INFINITE Loop used to run the application. A window will open until the close button is pressed.\', \'We can change the icon of the dialog box. The type of icon that we want to use just depends on the application’s need. we have four icons.xa0\']','[\'In Python, There Are Serval Libraries for Graphical User Interface. Tkinter is one of them that is most useful. It is a standard interface. Tkinter is easy to use and provides serval functions for building efficient applications. In Every Application, we need some Message to Display like “Do You Want To Close ” or showing any warning or Something information. For this Tkinter provide a library like messagebox. By using the message box library we can show serval Information, Error, Warning, Cancellation ETC in the form of Message-Box. It has a Different message box for a different purpose.xa0\']','[\'from tkinter import *from tkinter import messagebox       # object of TK()main = Tk() # function to use the# askquestion() functiondef Submit():    messagebox.askquestion(\"Form\",                           \"Do you want to Submit\")     # setting geometry of window# instancemain.geometry(\"100x100\") # creating WindowB1 = Button(main, text = \"Submit\", command = Submit) # Button positioningB1.pack()   # infinite loop till closemain.mainloop()\', \'# illustration of icon - Errorfrom tkinter import *from tkinter import messagebox main = Tk() def check():   messagebox.askquestion(\"Form\",                          \"Is your name correct?\",                          icon =\'error\') main.geometry(\"100x100\")B1 = Button(main, text = \"check\", command = check)B1.pack() main.mainloop()\', \'# illustration of icon - Infofrom tkinter import *from tkinter import messagebox main = Tk() def check():   messagebox.askquestion(\"Form\",                          \"do you want to continue\",                          icon =\'info\') main.geometry(\"100x100\")B1 = Button(main, text = \"check\", command = check)B1.pack() main.mainloop()\', \'# illustration of icon - questionfrom tkinter import *from tkinter import messagebox main = Tk() def check():   messagebox.askquestion(\"Form\",                          \"are you 18+\",                          icon =\'question\') main.geometry(\"100x100\")B1 = Button(main, text = \"check\", command = check)B1.pack() main.mainloop()\', \'# illustration of icon - Warningfrom tkinter import *from tkinter import messagebox main = Tk() def check():   messagebox.askquestion(\"Form\",                          \"Gender is empty?\",                          icon =\'warning\') main.geometry(\"100x100\")B1 = Button(main, text = \"check\", command = check)B1.pack() main.mainloop()\']','[\'messagebox.name_of_function(Title, Message, [, options])\', \'messagebox.askfunction((Title, Message, [, options])\', \'from tkinter import *\nfrom tkinter import messagebox\', \'main = Tk()\', \'top.geometry(\"100x100\")\', \'def Submit():\n   messagebox.askquestion(\"Form\", \"Do you want to Submit\")\n\nmain.geometry(\"100x100\")  \nB1 = Button(main, text = \"Submit\", command = Submit) \nB1.pack()\', \"messagebox.function_name(Title, Message, icon=\'error\')\", \"messagebox.function_name(Title, Message, icon=\'info\')\", \"messagebox.function_name(Title, Message, icon=\'question\')\", \"messagebox.function_name(Title, Message, icon=\'warning\')\"]','[]','[\'showinfo() – To display some important information .|||showwarning() – To display some type of Warning.|||showerror() –To display some Error Message.|||askquestion() – To display a dialog box that asks with two options YES or NO.|||askokcancel() – To display a dialog box that asks with two options OK or CANCEL.|||askretrycancel() – To display a dialog box that asks with two options RETRY or CANCEL.|||askyesnocancel() – To display a dialog box that asks with three options YES or NO or CANCEL.&&&name_of_function – Function name that which we want to use .|||Title – Message Box’s Title.|||Message – Message that you want to show in the dialog.|||Options –To configure the options.&&&We can use this to ask the user if the User want’s to continue.|||We can use this to ask the user if the User wanted to Submit or not.&&&Error|||Info|||Warning|||Question\']'),(236,'[\'Python Tkinter – MessageBox Widget\']','[\'MessageBox Widget\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20200315010917/1406-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200315010922/223-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200315010942/3164-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200315010956/4108-1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200315011007/580-1.pg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200315011018/682.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200315011026/755.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note: For more information, refer to Python GUI – tkinter\', \'Parameters:There are various parameters :\', \'Function_Name:There are functions or methods available in the messagebox widget.\']','[\'Python offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter is the fastest and easiest way to create the GUI applications. Creating a GUI using tkinter is an easy task.\', \'Python Tkinter – MessageBox Widget is used to display the message boxes in the python applications. This module is used to display a message using provides a number of functions.\']','[]','[\'from tkinter import * from tkinter import messagebox  root = Tk()root.geometry(\"300x200\")  w = Label(root, text =\'GeeksForGeeks\', font = \"50\") w.pack()  messagebox.showinfo(\"showinfo\", \"Information\")  messagebox.showwarning(\"showwarning\", \"Warning\")  messagebox.showerror(\"showerror\", \"Error\")  messagebox.askquestion(\"askquestion\", \"Are you sure?\")  messagebox.askokcancel(\"askokcancel\", \"Want to continue?\")  messagebox.askyesno(\"askyesno\", \"Find the value?\")    messagebox.askretrycancel(\"askretrycancel\", \"Try again?\")    root.mainloop()\']','[\'messagebox.Function_Name(title, message [, options])\']','[]','[\'Function_Name: This parameter is used to represents an appropriate message box function.|||title: This parameter is a string which is shown as a title of a message box.|||message: This parameter is the string to be displayed as a message on the message box.|||options: There are two options that can be used are:default: This option is used to specify the default button like ABORT, RETRY, or IGNORE in the message box.parent: This option is used to specify the window on top of which the message box is to be displayed.|||default: This option is used to specify the default button like ABORT, RETRY, or IGNORE in the message box.|||parent: This option is used to specify the window on top of which the message box is to be displayed.&&&&&&default: This option is used to specify the default button like ABORT, RETRY, or IGNORE in the message box.|||parent: This option is used to specify the window on top of which the message box is to be displayed.&&&showinfo(): Show some relevant information to the user.|||showwarning(): Display the warning to the user.|||showerror(): Display the error message to the user.|||askquestion(): Ask question and user has to answered in yes or no.|||askokcancel(): Confirm the user’s action regarding some application activity.|||askyesno(): User can answer in yes or no for some action.|||askretrycancel(): Ask the user about doing a particular task again or not.&&&\']'),(237,'[\'Python | place() method in Tkinter\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190606125406/Capture34-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190606130239/Capture34-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190606130244/Capture154.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note : place() method can be used with grid() method as well as with pack() method.\', \'Output: In below images notice that one button is placed inside the other.\']','[\'The Place geometry manager is the simplest of the three general geometry managers provided in Tkinter. It allows you explicitly set the position and size of a window, either in absolute terms, or relative to another window.You can access the place manager through the place() method which is available for all standard widgets.\', \'It is usually not a good idea to use place() for ordinary window and dialog layouts; its simply to much work to get things working as they should. Use the pack() or grid() managers for such purposes.\', \'When we use pack() or grid() managers, then it is very easy to put two different widgets separate to each other but putting one of them inside other is a bit difficult. But this can easily be achieved by place() method.In place() method, we can use in_ option to put one widget inside other.\']','[]','[\'# Importing tkinter modulefrom tkinter import * from tkinter.ttk import *  # creating Tk windowmaster = Tk()  # setting geometry of tk windowmaster.geometry(\"200x200\")  # button widgetb1 = Button(master, text = \"Click me !\")b1.place(relx = 1, x =-2, y = 2, anchor = NE)  # label widgetl = Label(master, text = \"I\'m a Label\")l.place(anchor = NW)  # button widgetb2 = Button(master, text = \"GFG\")b2.place(relx = 0.5, rely = 0.5, anchor = CENTER)  # infinite loop which is required to# run tkinter program infinitely# until an interrupt occursmainloop()\', \'# Importing tkinter modulefrom tkinter import * from tkinter.ttk import *  # creating Tk windowmaster = Tk()  # setting geometry of tk windowmaster.geometry(\"200x200\")  # button widgetb2 = Button(master, text = \"GFG\")b2.pack(fill = X, expand = True, ipady = 10)  # button widgetb1 = Button(master, text = \"Click me !\")  # This is where b1 is placed inside b2 with in_ optionb1.place(in_= b2, relx = 0.5, rely = 0.5, anchor = CENTER)  # label widgetl = Label(master, text = \"I\'m a Label\")l.place(anchor = NW)  # infinite loop which is required to# run tkinter program infinitely# until an interrupt occursmainloop()\']','[\'widget.place(relx = 0.5, rely = 0.5, anchor = CENTER)\']','[]','[]'),(238,'[\'Python | grid() method in Tkinter\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190606134812/download8.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190609162512/Capture34-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190609173206/Capture34-3-300x125.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Consider the following example –\', \'Output:xa0Code #2: Creating the layout which is shown above.\', \'Warning: Never mix grid() and pack() in the same master window.\']','[\'The Grid geometry manager puts the widgets in a 2-dimensional table. The master widget is split into a number of rows and columns, and each “cell” in the resulting table can hold a widget.The grid manager is the most flexible of the geometry managers in Tkinter. If you don’t want to learn how and when to use all three managers, you should at least make sure to learn this one.\', \'Creating this layout using the pack manager is possible, but it takes a number of extra frame widgets, and a lot of work to make things look good. If you use the grid manager instead, you only need one call per widget to get everything laid out properly.\', \'Using the grid manager is easy. Just create the widgets, and use the grid method to tell the manager in which row and column to place them. You don’t have to specify the size of the grid beforehand; the manager automatically determines that from the widgets in it.\']','[]','[\'# import tkinter modulefrom tkinter import * from tkinter.ttk import *  # creating main tkinter window/toplevelmaster = Tk()  # this wil create a label widgetl1 = Label(master, text = \"First:\")l2 = Label(master, text = \"Second:\")  # grid method to arrange labels in respective# rows and columns as specifiedl1.grid(row = 0, column = 0, sticky = W, pady = 2)l2.grid(row = 1, column = 0, sticky = W, pady = 2)  # entry widgets, used to take entry from usere1 = Entry(master)e2 = Entry(master)  # this will arrange entry widgetse1.grid(row = 0, column = 1, pady = 2)e2.grid(row = 1, column = 1, pady = 2)  # infinite loop which can be terminated by keyboard# or mouse interruptmainloop()\', \'# import tkinter modulefrom tkinter import * from tkinter.ttk import *  # creating main tkinter window/toplevelmaster = Tk()  # this will create a label widgetl1 = Label(master, text = \"Height\")l2 = Label(master, text = \"Width\")  # grid method to arrange labels in respective# rows and columns as specifiedl1.grid(row = 0, column = 0, sticky = W, pady = 2)l2.grid(row = 1, column = 0, sticky = W, pady = 2)  # entry widgets, used to take entry from usere1 = Entry(master)e2 = Entry(master)  # this will arrange entry widgetse1.grid(row = 0, column = 1, pady = 2)e2.grid(row = 1, column = 1, pady = 2)  # checkbutton widgetc1 = Checkbutton(master, text = \"Preserve\")c1.grid(row = 2, column = 0, sticky = W, columnspan = 2)  # adding image (remember image should be PNG and not JPG)img = PhotoImage(file = r\"C:\\Users\\Admin\\Pictures\\capture1.png\")img1 = img.subsample(2, 2)  # setting image with the help of labelLabel(master, image = img1).grid(row = 0, column = 2,       columnspan = 2, rowspan = 2, padx = 5, pady = 5)  # button widgetb1 = Button(master, text = \"Zoom in\")b2 = Button(master, text = \"Zoom out\")  # arranging button widgetsb1.grid(row = 2, column = 2, sticky = E)b2.grid(row = 2, column = 3, sticky = E)  # infinite loop which can be terminated # by keyboard or mouse interruptmainloop()\']','[]','[]','[]'),(239,'[\'Python | pack() method in Tkinter\']','[\'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190606133427/Capture34-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190606134014/Capture34-3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190606134218/Capture155-300x69.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Code #2: Placing widgets on top of each other and side by side. We can do this by side option.xa0xa0\', \'Code #3:xa0xa0\']','[\'The Pack geometry manager packs widgets in rows or columns. We can use options like fill, expand, and side to control this geometry manager.Compared to the grid manager, the pack manager is somewhat limited, but it’s much easier to use in a few, but quite common situations:\', \'Code #1: Putting a widget inside frame and filling entire frame. We can do this with the help of expand and fill options.xa0\']','[]','[\'# Importing tkinter modulefrom tkinter import * from tkinter.ttk import * # creating Tk windowmaster = Tk() # creating a Fra, e which can expand according# to the size of the windowpane = Frame(master)pane.pack(fill = BOTH, expand = True) # button widgets which can also expand and fill# in the parent widget entirely# Button 1b1 = Button(pane, text = \"Click me !\")b1.pack(fill = BOTH, expand = True) # Button 2b2 = Button(pane, text = \"Click me too\")b2.pack(fill = BOTH, expand = True) # Execute Tkintermaster.mainloop()\', \'# Importing tkinter modulefrom tkinter import *# from tkinter.ttk import * # creating Tk windowmaster = Tk() # creating a Fra, e which can expand according# to the size of the windowpane = Frame(master)pane.pack(fill = BOTH, expand = True) # button widgets which can also expand and fill# in the parent widget entirely# Button 1b1 = Button(pane, text = \"Click me !\",            background = \"red\", fg = \"white\")b1.pack(side = TOP, expand = True, fill = BOTH) # Button 2b2 = Button(pane, text = \"Click me too\",            background = \"blue\", fg = \"white\")b2.pack(side = TOP, expand = True, fill = BOTH) # Button 3b3 = Button(pane, text = \"I\'m also button\",            background = \"green\", fg = \"white\")b3.pack(side = TOP, expand = True, fill = BOTH) # Execute Tkintermaster.mainloop()\', \'# Importing tkinter modulefrom tkinter import *# from tkinter.ttk import * # creating Tk windowmaster = Tk() # creating a Fra, e which can expand according# to the size of the windowpane = Frame(master)pane.pack(fill = BOTH, expand = True) # button widgets which can also expand and fill# in the parent widget entirely# Button 1b1 = Button(pane, text = \"Click me !\",            background = \"red\", fg = \"white\")b1.pack(side = LEFT, expand = True, fill = BOTH) # Button 2b2 = Button(pane, text = \"Click me too\",            background = \"blue\", fg = \"white\")b2.pack(side = LEFT, expand = True, fill = BOTH) # Button 3b3 = Button(pane, text = \"I\'m also button\",            background = \"green\", fg = \"white\")b3.pack(side = LEFT, expand = True, fill = BOTH) # Execute Tkintermaster.mainloop()\']','[]','[]','[\'Put a widget inside a frame (or any other container widget), and have it fill the entire frame|||Place a number of widgets on top of each other|||Place a number of widgets side by side\']'),(240,'[\'Python | PanedWindow Widget in Tkinter\']','[]','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190528234122/two_panes-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190528234928/multiple_panes.png\']','[]','[\'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax: PanedWindow(master, **options)\', \'PanedWindow can be used to implement common 2-panes or 3-panes but multiple panes can be used.\', \'Code #1:PanedWindow with only two panes\', \'Output:xa0Code #2: PanedWindow with multiple panes\']','[\'Tkinter supports a variety of widgets to make GUI more and more attractive and functional. The PanedWindow widget is a geometry manager widget, which can contain one or more child widgets panes. The child widgets can be resized by the user, by moving separator lines sashes using the mouse.\', \'Parameters:master: parent widget or main Tk() objectoptions: which are passed in config method or directly in the constructor\']','[]','[\'# Importing everything from tkinter modulefrom tkinter import * from tkinter import ttk  # main tkinter windowroot = Tk()  # panedwindow objectpw = PanedWindow(orient =\'vertical\')  # Button widgettop = ttk.Button(pw, text =\"Click Me !\\nI\'m a Button\")top.pack(side = TOP)  # This will add button widget to the panedwindowpw.add(top)  # Checkbutton Widgetbot = Checkbutton(pw, text =\"Choose Me !\")bot.pack(side = TOP)  # This will add Checkbutton to panedwindowpw.add(bot)  # expand is used so that widgets can expand# fill is used to let widgets adjust itself# according to the size of main windowpw.pack(fill = BOTH, expand = True)  # This method is used to show sashpw.configure(sashrelief = RAISED)  # Infinite loop can be destroyed by# keyboard or mouse interruptmainloop()\', \'# Importing everything from tkinter modulefrom tkinter import * from tkinter import ttk  # main tkinter windowroot = Tk()  # panedwindow objectpw = PanedWindow(orient =\'vertical\')  # Button widgettop = ttk.Button(pw, text =\"Click Me !\\nI\'m a Button\")top.pack(side = TOP)  # This will add button widget to the panedwindowpw.add(top)  # Checkbutton Widgetbot = Checkbutton(pw, text =\"Choose Me !\")bot.pack(side = TOP)  # This will add Checkbutton to panedwindowpw.add(bot)  # adding Label widgetlabel = Label(pw, text =\"I\'m a Label\")label.pack(side = TOP)  pw.add(label)  # Tkinter string variablestring = StringVar()  # Entry widget with some styling in fontsentry = Entry(pw, textvariable = string, font =(\'arial\', 15, \'bold\'))entry.pack()  # Focus force is used to focus on particular# widget that means widget is already selected for operationsentry.focus_force()  pw.add(entry)  # expand is used so that widgets can expand# fill is used to let widgets adjust itself# according to the size of main windowpw.pack(fill = BOTH, expand = True)  # This method is used to show sashpw.configure(sashrelief = RAISED)  # Infinite loop can be destroyed by# keyboard or mouse interruptmainloop()\']','[]','[]','[]'),(241,'[\'Python | Binding function in Tkinter\']','[\'Python3\', \'Python3\', \'Python3\']','[]','[]','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190402212137/working_of_bind_fucntion_with_mouse_event.mp4\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190402212646/working_of_bind_fucntion_with_mouse_click.mp4\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190402230107/binding_keyboard_buttons_with_tkinter.mp4\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'xa0xa0Code #2: Binding Mouse buttons with Tkinter Framexa0xa0\', \'xa0xa0Code #3: Binding keyboard buttons with the root window (tkinter main window).xa0xa0\']','[\'Note: When we bind keyboard buttons with the tkinter window, whenever we press special characters we will only get space while in the case of alphabets and numerical we will get actual values (in the string).xa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Tkinter is a GUI (Graphical User Interface) module that is widely used in desktop applications. It comes along with the Python, but you can also install it externally with the help of pip command.xa0It provides a variety of Widget classes and functions with the help of which one can make our GUI more attractive and user-friendly in terms of both looks and functionality.The binding function is used to deal with the events. We can bind Python’s Functions and methods to an event as well as we can bind these functions to any particular widget.Code #1: Binding mouse movement with tkinter Frame.xa0xa0\']','[\"# Import all files from# tkinter and overwrite# all the tkinter files# by tkinter.ttkfrom tkinter import *from tkinter.ttk import * # creates tkinter window or root windowroot = Tk()root.geometry(\'200x100\') # function to be called when mouse enters in a framedef enter(event):    print(\'Button-2 pressed at x = % d, y = % d\'%(event.x, event.y)) # function to be called when when mouse exits the framedef exit_(event):    print(\'Button-3 pressed at x = % d, y = % d\'%(event.x, event.y)) # frame with fixed geometryframe1 = Frame(root, height = 100, width = 200) # these lines are showing the# working of bind function# it is universal widget methodframe1.bind(\'<Enter>\', enter)frame1.bind(\'<Leave>\', exit_) frame1.pack() mainloop()\", \"# Import all files from# tkinter and overwrite# all the tkinter files# by tkinter.ttkfrom tkinter import *from tkinter.ttk import * # creates tkinter window or root windowroot = Tk()root.geometry(\'200x100\') # function to be called when button-2 of mouse is presseddef pressed2(event):    print(\'Button-2 pressed at x = % d, y = % d\'%(event.x, event.y)) # function to be called when button-3 of mouse is presseddef pressed3(event):    print(\'Button-3 pressed at x = % d, y = % d\'%(event.x, event.y)) ## function to be called when button-1 is double clockeddef double_click(event):    print(\'Double clicked at x = % d, y = % d\'%(event.x, event.y)) frame1 = Frame(root, height = 100, width = 200) # these lines are binding mouse# buttons with the Frame widgetframe1.bind(\'<Button-2>\', pressed2)frame1.bind(\'<Button-3>\', pressed3)frame1.bind(\'<Double 1>\', double_click) frame1.pack() mainloop()\", \"# Import all files from# tkinter and overwrite# all the tkinter files# by tkinter.ttkfrom tkinter import *from tkinter.ttk import * # function to be called when# keyboard buttons are presseddef key_press(event):    key = event.char    print(key, \'is pressed\') # creates tkinter window or root windowroot = Tk()root.geometry(\'200x100\') # here we are binding keyboard# with the main windowroot.bind(\'<Key>\', key_press) mainloop()\"]','[]','[]','[]'),(242,'[\'Python Tkinter – Validating Entry Widget\']','[]','[]','[]','[]','[\'https://www.geeksforgeeks.org/python-gui-tkinter/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200318144811/validationOutput.mp4\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Syntax: Entry(master, **options)Parameter:\', \'Syntax: place(x, y)Parameter:\', \'Explanation:This method specifies the position of Entry widget in the parent window (root) .\', \'Syntax: register(function)Parameter:\', \'Syntax: config(validate=”key”, validatecommand=(reg, ‘%P’))Parameter:\', \'Complete code for validation of Entry widget\', \'Output: (Full Screen View Recommended)\']','[\'Syntax: Tk(screenName=None, baseName=None, className=’Tk’, useTk=1)Parameter: In this example, Tk class is instantiated without arguments.ExplanationThis method creates a parent widget which usually is the main window of an application.\', \'Return Value: Returns a string (.!entry) .ExplanationThis method is used to create the Entry widget on the parent widget (root) .\', \'Return Value: This method returns a character string that can be used to call the function.ExplanationThe register() method returns a string which is assigned to a variable ‘reg’ that is used to call the callback function in the later stages.\', \'Syntax: mainloop()ExplanationThe mainloop() is an infinite loop used to run the application as long as the window is not closed.\']','[\'Python offers a variety of frameworks to work with GUI applications. Tkinter or Tk interface is one of the most widely used Python interface to build GUI based applications. There are applications that require validation of text fields to prevent invalid input from the user before the form is submitted. Python allows input validation by allowing variable tracing using a callback function. This function is called whenever an input is added/deleted to/from an Entry widget. Some applications validate input on form submission, but the following piece of code performs validation with every stroke of key from the keyboard.\', \'ExplanationThe callback function checks the input in the Entry widget for valid entry. If the entry is valid it returns True else False. In this example, the input entered through the keyboard is checked for numeric type. If the input is numeric type then the callback function returns true. For deletion operation the callback function returns true as input is “” . However for any non-numeric input the callback function returns false.\', \'ExplanationValidate option supports other values such as focus, focusin, focusout, all and none. The default value is “none”, which means that there is no validation.Validatecommand option supports other values such as %d, %i, %s, %S, %v, %V and %W . The percent substitution can be added for each parameter to be passed to the Python functionThe Entry widget also supports an invalidcommand option that calls a function whenever the validatecommand returns False.These can be used based on the requirement of the user.\', \'ExplanationWhen we enter digits using our keyboard the callback function returns true and the value is allowed in the entry widget. However on entering alphabets from the keyboard the callback function returns false and the value is not allowed to entered in the entry widget. To get a clearer idea about the working of the callback function the input sent through the keyboard is printed on the console. It can be seen that any non-numeric input gets printed on the console but is not allowed in the entry widget. Also both insertion and deletion of numerics are allowed in the entry widget.\']','[\'import tkinterfrom tkinter import *    def callback(input):          if input.isdigit():        print(input)        return True                              elif input is \"\":        print(input)        return True      else:        print(input)        return False                          root = Tk()  e = Entry(root)e.place(x = 50, y = 50)reg = root.register(callback)  e.config(validate =\"key\",          validatecommand =(reg, \'% P\'))  root.mainloop()\']','[\'import tkinter\', \'from tkinter import *\', \'def callback(input):\n    if input.isdigit():\n        print(input)\n        return True\n                        \n    elif input is \"\":\n        print(input)\n        return True\n\n    else:\n        print(input)\n        return False\', \'root=Tk()\', \'e=Entry(root)\', \'e.place(x=50, y=50)\', \'reg=root.register(callback)\', \'e.config(validate=\"key\", validatecommand=(reg, \'%P\'))\', \'root.mainloop()\']','[]','[\'master: Represents the parent window (here root) .|||options: The supported options are bg, bd, command, cursor, font, exportselection, justify, relief, highlightcolor, fg, selectbackground, selectforeground, selectborderwidth, show, xscrollcommand, state, textvariable and width.&&&x: Position of the Entry widget with respect to parent widget along X axis.|||y: Position of the Entry widget with respect to parent widget along Y axis.&&&function: The function that is to be called to validate the input in the Entry widget.&&&validate: This option is used to specify when the callback function will be called to validate the input. The “key” value specifies that validation occurs whenever any keystroke(input from keyboard) changes the widget’s contents.|||validatecommand: This option is used to specify the callback function. The function is not called directly rather a variable is passed which was registered in the earlier steps. ‘%P’ is passed to denote the value that the text will have if the change is allowed.&&&&&&Import tkinter moduleimport tkinter|||Import tkinter submodulesfrom tkinter import *|||Define the “callback” functiondef callback(input):\n    if input.isdigit():\n        print(input)\n        return True\n                        \n    elif input is \"\":\n        print(input)\n        return True\n\n    else:\n        print(input)\n        return FalseExplanationThe callback function checks the input in the Entry widget for valid entry. If the entry is valid it returns True else False. In this example, the input entered through the keyboard is checked for numeric type. If the input is numeric type then the callback function returns true. For deletion operation the callback function returns true as input is “” . However for any non-numeric input the callback function returns false.|||Creating the parent windowroot=Tk()Syntax: Tk(screenName=None, baseName=None, className=’Tk’, useTk=1)Parameter: In this example, Tk class is instantiated without arguments.ExplanationThis method creates a parent widget which usually is the main window of an application.|||Creating Entry widgete=Entry(root)Syntax: Entry(master, **options)Parameter:master: Represents the parent window (here root) .options: The supported options are bg, bd, command, cursor, font, exportselection, justify, relief, highlightcolor, fg, selectbackground, selectforeground, selectborderwidth, show, xscrollcommand, state, textvariable and width.Return Value: Returns a string (.!entry) .ExplanationThis method is used to create the Entry widget on the parent widget (root) .|||master: Represents the parent window (here root) .|||options: The supported options are bg, bd, command, cursor, font, exportselection, justify, relief, highlightcolor, fg, selectbackground, selectforeground, selectborderwidth, show, xscrollcommand, state, textvariable and width.|||Specify the position of Entry widget within the parent windowe.place(x=50, y=50)Syntax: place(x, y)Parameter:x: Position of the Entry widget with respect to parent widget along X axis.y: Position of the Entry widget with respect to parent widget along Y axis.Explanation:This method specifies the position of Entry widget in the parent window (root) .|||x: Position of the Entry widget with respect to parent widget along X axis.|||y: Position of the Entry widget with respect to parent widget along Y axis.|||Register the callback functionreg=root.register(callback)Syntax: register(function)Parameter:function: The function that is to be called to validate the input in the Entry widget.Return Value: This method returns a character string that can be used to call the function.ExplanationThe register() method returns a string which is assigned to a variable ‘reg’ that is used to call the callback function in the later stages.|||function: The function that is to be called to validate the input in the Entry widget.|||Call the callback function to validate the input in Entry widgete.config(validate=\"key\", validatecommand=(reg, \'%P\'))Syntax: config(validate=”key”, validatecommand=(reg, ‘%P’))Parameter:validate: This option is used to specify when the callback function will be called to validate the input. The “key” value specifies that validation occurs whenever any keystroke(input from keyboard) changes the widget’s contents.validatecommand: This option is used to specify the callback function. The function is not called directly rather a variable is passed which was registered in the earlier steps. ‘%P’ is passed to denote the value that the text will have if the change is allowed.ExplanationValidate option supports other values such as focus, focusin, focusout, all and none. The default value is “none”, which means that there is no validation.Validatecommand option supports other values such as %d, %i, %s, %S, %v, %V and %W . The percent substitution can be added for each parameter to be passed to the Python functionThe Entry widget also supports an invalidcommand option that calls a function whenever the validatecommand returns False.These can be used based on the requirement of the user.|||validate: This option is used to specify when the callback function will be called to validate the input. The “key” value specifies that validation occurs whenever any keystroke(input from keyboard) changes the widget’s contents.|||validatecommand: This option is used to specify the callback function. The function is not called directly rather a variable is passed which was registered in the earlier steps. ‘%P’ is passed to denote the value that the text will have if the change is allowed.|||Run the applicationroot.mainloop()Syntax: mainloop()ExplanationThe mainloop() is an infinite loop used to run the application as long as the window is not closed.&&&\']'),(243,'[\'Kivy Tutorial\']','[]','[\'Getting Started\', \'The kv Design Language (.kv file tutorial)\', \'Applications and Projects\']','[\'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20210721192938/Kivy-Tutorials.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/#getting\', \'https://www.geeksforgeeks.org/#widgets\', \'https://www.geeksforgeeks.org/#buttons\', \'https://www.geeksforgeeks.org/#layouts\', \'https://www.geeksforgeeks.org/#kv\', \'https://www.geeksforgeeks.org/#widgets2\', \'https://www.geeksforgeeks.org/#buttons2\', \'https://www.geeksforgeeks.org/#layouts2\', \'https://www.geeksforgeeks.org/#applications\', \'https://www.geeksforgeeks.org/tag/python-kivy/\', \'https://www.geeksforgeeks.org/what-is-kivy/\', \'https://www.geeksforgeeks.org/introduction-to-kivy/\', \'https://www.geeksforgeeks.org/hello-world-in-kivy/\', \'https://www.geeksforgeeks.org/python-add-label-to-a-kivy-window/\', \'https://www.geeksforgeeks.org/python-textinput-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-canvas-in-kivy/\', \'https://www.geeksforgeeks.org/python-line-canvas-in-kivy/\', \'https://www.geeksforgeeks.org/python-checkbox-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-dropdown-list-in-kivy/\', \'https://www.geeksforgeeks.org/python-window-size-adjustment-in-kivy/\', \'https://www.geeksforgeeks.org/python-scrollview-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-carousel-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-boxlayout-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-slider-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-add-image-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-popup-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-switch-widget-in-kivy/\', \'http://geeksforgeeks.org/python-spinner-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-progress-bar-widget-in-kivy/\', \'https://www.geeksforgeeks.org/python-bubble-in-kivy/\', \'https://www.geeksforgeeks.org/python-tabbed-panel-in-kivy/\', \'https://www.geeksforgeeks.org/python-scatter-in-kivy/\', \'https://www.geeksforgeeks.org/how-to-use-multiple-ux-widgets-in-kivy-python/\', \'https://www.geeksforgeeks.org/python-animation-in-kivy/\', \'https://www.geeksforgeeks.org/python-working-with-buttons-in-kivy/\', \'https://www.geeksforgeeks.org/python-button-action-in-kivy/\', \'https://www.geeksforgeeks.org/change-button-color-in-kivy/\', \'https://www.geeksforgeeks.org/change-the-size-and-position-of-button-in-kivy/\', \'https://www.geeksforgeeks.org/python-rounding-button-corners-in-kivy/\', \'https://www.geeksforgeeks.org/disable-kivy-button/\', \'https://www.geeksforgeeks.org/text-input-box-with-a-verification-button-in-kivy/\', \'https://www.geeksforgeeks.org/use-image-as-a-button-in-kivy/\', \'https://www.geeksforgeeks.org/python-float-layout-in-kivy/\', \'https://www.geeksforgeeks.org/gridlayouts-in-kivy-python/\', \'https://www.geeksforgeeks.org/python-stacklayout-in-kivy/\', \'https://www.geeksforgeeks.org/python-anchorlayout-in-kivy/\', \'https://www.geeksforgeeks.org/python-relative-layout-in-kivy/\', \'https://www.geeksforgeeks.org/python-pagelayout-in-kivy/\', \'https://www.geeksforgeeks.org/python-layouts-in-layouts-multiple-layouts-in-kivy/\', \'https://www.geeksforgeeks.org/python-kivy-kv-file/\', \'https://www.geeksforgeeks.org/python-create-box-layout-widget-using-kv-file/\', \'https://www.geeksforgeeks.org/python-canvas-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-textinput-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-create-checkbox-using-kv-file/\', \'https://www.geeksforgeeks.org/python-drop-down-list-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-drop-down-list-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-switch-widget-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-spinner-widget-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-popup-widget-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-carousel-widget-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-slider-widget-using-kv-file/\', \'https://www.geeksforgeeks.org/python-progressbar-widget-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-recycleview-in-kivy/\', \'https://www.geeksforgeeks.org/python-adding-image-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-set-background-template-in-kivy/\', \'https://www.geeksforgeeks.org/python-screenmanager-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-animation-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-working-with-buttons-in-kivy-with-kv-file/\', \'https://www.geeksforgeeks.org/python-change-button-color-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-change-kivy-button-size-and-position-using-kv-file/\', \'https://www.geeksforgeeks.org/python-toggle-button-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/add-image-button-using-kv-file-in-kivy/\', \'https://www.geeksforgeeks.org/python-rounding-button-corners-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/disable-kivy-button-using-kv-file/\', \'https://www.geeksforgeeks.org/floating-action-type-button-in-kivy-python/\', \'https://www.geeksforgeeks.org/animated-floating-action-button-in-kivy-python/\', \'https://www.geeksforgeeks.org/text-input-box-with-a-verification-button-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/circular-oval-like-button-using-canvas-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-grid-layout-in-kivy-without-kv-file/\', \'https://www.geeksforgeeks.org/python-stacklayout-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-floatlayout-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-anchorlayout-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-relative-layout-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-pagelayout-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-ellipse-different-polygons-in-kivy/\', \'https://www.geeksforgeeks.org/python-make-a-simple-window-using-kivy/\', \'https://www.geeksforgeeks.org/python-vkeyboard-virtual-keyboard-in-kivy/\', \'https://www.geeksforgeeks.org/python-multiple-sliders-widgets-controlling-background-screen-or-windowcolor-in-kivy/\', \'https://www.geeksforgeeks.org/python-how-to-use-multiple-kv-files-in-kivy/\', \'https://www.geeksforgeeks.org/python-accordion-in-kivy/\', \'https://www.geeksforgeeks.org/python-accordion-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-creating-a-simple-drawing-app-in-kivy/\', \'https://www.geeksforgeeks.org/python-file-chooser-in-kivy/\', \'https://www.geeksforgeeks.org/how-to-make-calculator-using-kivy-python/\', \'https://www.geeksforgeeks.org/python-create-a-stopwatch-using-clock-object-in-kivy-using-kv-file/\', \'https://www.geeksforgeeks.org/python-create-a-stopwatch-using-clock-object-in-kivy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Table Of Content –\', \'Recent Articles on Kivy !!\']','[]','[\'Kivy is a graphical user interface opensource Python library that allows you to develop multi-platform applications on Windows, macOS, Android, iOS, Linux, and Raspberry-Pi. In addition to the regular mouse and keyboard inputs, it also supports multitouch events. The applications made using Kivy will similar across all the platforms but it also means that the applications fell or look will differ from any native application.\']','[]','[]','[]','[\'Getting Started|||Widgets|||Buttons|||Layouts|||The kv Design Language (.kv file tutorial)WidgetsButtonsLayouts|||Widgets|||Buttons|||Layouts|||Applications and Projects&&&Widgets|||Buttons|||Layouts&&&What is Kivy?|||Kivy Introduction & Installation|||Hello World in Kivy&&&Label Widget in Kivy|||Textinput widget in kivy|||Canvas in kivy|||Line (Canvas) in kivy|||Checkbox widget in Kivy|||Dropdown list in kivy|||Window size Adjustment in Kivy|||Scrollview widget in kivy|||Carousel Widget In Kivy|||BoxLayout widget in Kivy|||Slider widget in Kivy|||Add image widget in Kivy|||Popup widget in Kivy|||Switch widget in Kivy|||Spinner widget in kivy|||Progress Bar widget in kivy|||Bubble in kivy|||Tabbed panel in kivy|||Scatter in kivy|||How to use multiple UX Widgets in kivy|||Animation in Kivy&&&Working with buttons in Kivy|||Button Action in Kivy|||Change button Color in Kivy|||Change the size and position of button in Kivy|||Python – Rounding button corners in kivy|||Disable Kivy Button|||Text Input box with a verification button in kivy|||Use image as a button in kivy&&&Float Layout in Kivy|||GridLayouts in Kivy|||StackLayout in Kivy|||AnchorLayout in Kivy|||Relative Layout in Kivy|||PageLayout in Kivy|||Layouts in layouts (Multiple Layouts) in Kivy&&&Kivy .kv File|||Create Box Layout widget using .kv file|||Canvas in Kivy using .kv file|||TextInput in kivy using .kv file|||Create checkbox using .kv file|||Python | Drop-down list in kivy using .kv file|||Drop-down list in kivy using .kv file|||Switch widget in Kivy using .kv file|||Spinner widget in Kivy using .kv file|||Popup widget in Kivy using .kv file|||Carousel Widget In Kivy using .kv file|||Slider widget using .kv file|||Progressbar widget in kivy using .kv file|||RecycleView in Kivy|||Adding image in Kivy using .kv file|||Set Background Template in kivy|||ScreenManager in Kivy using .kv file|||Animation in Kivy using .kv file&&&Python | Working with buttons in Kivy with .kv file|||Python – Change button color in kivy using .kv file|||Python – Change kivy button size and position using kv file|||Toggle button in kivy using .kv file|||Add image button using .kv file in kivy|||Python – Rounding button corners in kivy using .kv file|||Disable kivy button using .kv file|||Floating Action type button in kivy – Python|||Animated Floating Action Button in kivy – Python|||Text Input box with a verification button in kivy (using .kv file)|||Circular (Oval like) button using canvas in kivy (using .kv file)&&&Grid Layout in Kivy without .kv file|||StackLayout in Kivy using .kv file|||FloatLayout in Kivy using .kv file|||AnchorLayout in Kivy using .kv file|||Relative Layout in Kivy using .kv file|||PageLayout in Kivy using .kv file&&&Ellipse (different polygons) in Kivy|||Make a simple window using kivy|||Vkeyboard (virtual keyboard) in kivy|||Multiple Sliders widgets Controlling Background Screen or WindowColor in Kivy|||How to use Multiple kv files in kivy|||Accordion in kivy|||Accordion in kivy using .kv file|||Creating a Simple Drawing App in kivy|||File chooser in kivy|||Make a calculator using kivy|||Create a stopwatch using clock object in kivy using .kv file|||Create a stopwatch Using Clock Object in kivy\']'),(244,'[\'Introduction to Kivy ; A Cross-platform Python Framework\']','[\'Python3\']','[\'Installation in Windows:xa0xa0\', \'Installation in Linux:xa0xa0\', \'Create an applicationxa0\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20201222202740/1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20201222202743/2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-97-1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Note that it is necessary to have Python 3 on your machine to make use of the library.\', \'It will result in something like the below image:\', \'There are three steps of creating an application with kivy:\']','[\'Kivy is a graphical user interface open-source Python library that allows you to develop multi-platform applications on Windows, macOS, Android, iOS, Linux, and Raspberry Pi. The best thing about kivy is, it performs better than HTML5 cross-platform alternatives.xa0\', \'Example :xa0This is python3 code to make a simple application that shows the desired text on the system’s screen:xa0\', \'To run this code open cmd(terminal in Linux) and go through the directory in which the code is saved and type this command-xa0xa0\']','[]','[\'import kivykivy.require(\'1.10.0\')  from kivy.app import Appfrom kivy.uix.button import Label  # Inherit Kivy\'s App class which represents the window# for our widgets# HelloKivy inherits all the fields and methods# from Kivyclass HelloKivy(App):      # This returns the content we want in the window    def build(self):          # Return a label widget with Hello Kivy        return Label(text =\"Hello Geeks\")  helloKivy = HelloKivy()helloKivy.run()\']','[\'python -m pip install --upgrade pip wheel setuptools\', \'python -m pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew\npython -m pip install kivy.deps.gstreamer\npython -m pip install kivy.deps.angle\', \'python -m pip install kivy\', \'sudo add-apt-repository ppa:kivy-team/kivy\', \'sudo apt-get update\', \'sudo apt-get install python3-kivy\', \'python file_name.py\']','[]','[\'Step 1: Update the pip and wheel before installing kivy by entering this command in cmd-&&&Step 2: Install the dependencies-&&&Step 3: Install kivy.&&&Step 1: Add the PPA by entering this command in terminal-&&&Step 2: Update your package list using your package manager-&&&Step 3: Install Kivy&&&&&&Inherit Kivy’s App class which represents the window for our widgets|||Create a build() method, which will show the content of the widgets.|||And at last calling of the run() method.&&&\']'),(245,'[\'Python | Add Label to a kivy window\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190419094035/Capture34-2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190419103247/Capture55.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190419105448/markup.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210506145919/b18-300x284.JPG\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://kivy.org/doc/stable/api-kivy.uix.label.html\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Kivy Tutorial – Learn Kivy with Examples.\', \'How to add a label ?xa0\', \'Below is the code:xa0xa0\', \'xa0xa0How to do Styling in label ?xa0\', \'More markup tags we can use –xa0\', \'Reference: https://kivy.org/doc/stable/api-kivy.uix.label.html\', \'First, we will import MDlabel from kivyMD.uix library\', \'MDLabel has the following parameters-\', \'Below is the following example using MDLabel\']','[\'xa0xa0How to markup the text ?You can change the style of the text using Text Markup. The syntax is similar to above syntax but some more things are there.xa0\', \'Label using KivyMDKivyMD is an extension of the Kivy framework. KivyMD is a collection of Material Design widgets for use with Kivy, a GUI framework for making mobile applications.\']','[\'Kivy is a platform-independent GUI tool in Python. As it can be run on Android, iOS, Linux and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktop applications.Label widget –xa0The Label widget is for rendering text. It supports ASCII and unicode strings. The label is the text which we want to add to our window, give to the buttons, and so on. On labels, we can apply the styling also i.e increase text, size, color, and more.xa0Let’s see how to add Label to a Kivy window.xa0\', \'[b][/b] -> Activate bold text[i][/i] -> Activate italic text[u][/u] -> Underlined text[s][/s] -> Strikethrough text[font=][/font] -> Change the font[size=][/size]] -> Change the font size[color=#][/color] -> Change the text color[ref=][/ref] -> Add an interactive zone. The reference + bounding box inside the reference will be available in Label.refs[anchor=] -> Put an anchor in the text. You can get the position of your anchor within the text with Label.anchors[sub][/sub] -> Display the text at a subscript position relative to the text before it.[sup][/sup] -> Display the text at a superscript position relative to the text before it.\']','[\'# import kivy moduleimport kivy # this restricts the kivy version i.e# below this kivy version you cannot use the app or softwarekivy.require(\"1.9.1\") # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App # if you not import label and use it it through errorfrom kivy.uix.label import Label # defining the App classclass MyLabelApp(App):    def build(self):        # label display the text on screen        lbl = Label(text =\"Label is Added on screen !!:):)\")        return lbl # creating the objectlabel = MyLabelApp()# run the windowlabel.run()\', \'# change only line 19 else all will same. # text colourl2 = Label(text =\"Label is Added on \\n screen !!:):)            and its Multi\\nLine\", font_size =\'20sp\',            color =[0.41, 0.42, 0.74, 1])\', \'# markup text with different colourl2 = Label(text =\"[color = ff3333][b]\'Label\'[/b] is Added [/color]\\n                  [color = 3333ff]Screen !!:):):):)[/color]\",                  font_size =\'20sp\', markup = True)\', \'from kivymd.app import MDAppfrom kivymd.uix.label import MDLabelfrom kivymd.uix.screen import Screen class Demo(MDApp):     def build(self):        #defining screen        screen = Screen()         #defining 1st label        l=MDLabel(text=\"Welcome!\",pos_hint={\'center_x\':0.8,                                            \'center_y\':0.8},                  theme_text_color=\"Custom\",                  text_color=(0.5,0,0.5,1),                  font_style=\'Caption\')                 #defining 2nd label        l1 = MDLabel(text=\"Welcome!\", pos_hint={\'center_x\':0.8,                                                \'center_y\':0.5},                     theme_text_color=\"Custom\",                     text_color=(0.5, 0, 0.5, 1),                     font_style=\'H2\')                 #defining 3rd label        l2 = MDLabel(text=\"Welcome!\", pos_hint={\'center_x\':0.8,                                                \'center_y\':0.2},                     theme_text_color=\"Custom\",                     text_color=(0.5, 0, 0.5, 1),                      font_style=\'H1\')                 screen.add_widget(l)          screen.add_widget(l1)        screen.add_widget(l2)        return screen if __name__ == \"__main__\":    Demo().run()\']','[\'1) import kivy\n2) import kivy App\n3) import label\n4) set minimum version (optional)\n5) Extend the App class\n6) overwrite the build function\n7) Add and return label\n8) Run the instance of class\']','[]','[\'text- the text we want to put on the label|||halign-the position where we want to put the label.|||theme_text_color- the theme for text colors like custom, primary, secondary, hint, or error|||text_color- if theme_text_color is custom we can assign text color to an RGB tuple.|||font_style-like caption,headings\']'),(246,'[\'Python | Textinput widget in kivy\']','[]','[\'TextInput:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190826194520/save5-300x236.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190826194516/Capture34-3-300x236.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'?? Kivy Tutorial – Learn Kivy with Examples.\', \'To work with Textinput you have to import it by the command –\', \'from kivy.uix.textinput import TextInput\', \'Now the implementation of the Approach:\', \'After some input –\']','[\'Kivy is a platform-independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'The TextInput widget provides a box for editable plain text. Unicode, multiline, cursor navigation, selection and clipboard features are supported.\', \'To create a multiline TextInput (the ‘enter’ key adds a new line).To create a singleline TextInput, set the TextInput.multiline property to False.\']','[]','[\'# Program to Show how to use textinput (UX widget) in kivy   # import kivy module    import kivy         # base Class of your App inherits from the App class.    # app:always refers to the instance of your application   from kivy.app import App      # this restrict the kivy version i.e  # below this kivy version you cannot  # use the app or software  kivy.require(\'1.9.0\')     # The Label widget is for rendering text.  from kivy.uix.label import Label     # module consist the floatlayout  # to work with FloatLayout first  # you have to import it  from kivy.uix.floatlayout import FloatLayout   # Scatter is used to build interactive# widgets that can be translated,# rotated and scaled with two or more# fingers on a multitouch system.from kivy.uix.scatter import Scatter  # The TextInput widget provides a# box for editable plain textfrom kivy.uix.textinput import TextInput  # BoxLayout arranges widgets in either# in vertical fashion that# is one on top of another or in# horizontal fashion that is one after another.from kivy.uix.boxlayout import BoxLayout  # Create the App classclass TutorialApp(App):          def build(self):          b = BoxLayout(orientation =\'vertical\')          # Adding the text input        t = TextInput(font_size = 50,                      size_hint_y = None,                      height = 100)                  f = FloatLayout()          # By this you are able to move the        # Text on the screen to anywhere you want        s = Scatter()          l = Label(text =\"Hello !\",                  font_size = 50)          f.add_widget(s)        s.add_widget(l)          b.add_widget(t)        b.add_widget(f)          # Binding it with the label        t.bind(text = l.setter(\'text\'))                    return b  # Run the Appif __name__ == \"__main__\":    TutorialApp().run()\']','[\"TextInput(text=\'Hello world\', multiline=False)\", \'Basic Approach:\n1) import kivy\n2) import kivyApp\n3) import Label\n4) import Scatter\n5) import Floatlayout\n6) import Textinput\n7) import BoxLayout\n8) Set minimum version(optional)\n9) create App class\n10) return Layout/widget/Class(according to requirement)\n11) Run an instance of the class\']','[]','[]'),(247,'[\'Python | Canvas in kivy\']','[\'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190626112449/Capture34-3-300x236.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190626112444/download4.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190626112503/Capture237-300x236.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'???????? Kivy Tutorial – Learn Kivy with Examples.\', \'Implementation of the Approach –xa0xa0\', \'Output:Original image used in App is:xa0xa0\', \'Image in Canvas:xa0xa0\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.xa0\', \'Canvas:xa0The Canvas is the root object used for drawing by a Widget . A kivy canvas is not the place where you paint. The major problems I had at the beginning with the canvas were due to its name. Particularly considering all the buzz about HTML5 canvas. I initially think that the canvas is the paint But canvas is basically a container of instructions.xa0To use Canvas you must have to import:xa0\', \'Note: Each Widget in Kivy already has a Canvas by default. When you create a widget, you can create all the instructions needed for drawing. If self is your current widget. The instructions Color and Rectangle are automatically added to the canvas object and will be used when the window is drawn.xa0\', \'You can also use any other widget in canvas. In the below example we will show how to add image and change its color.xa0To change the color just change the canvas color that will change the image color.xa0xa0\', \'Note:xa0Kivy drawing instructions are not automatically relative to the widgets’ position or size. You, therefore, you need to consider these factors when drawing. In order to make your drawing instructions relative to the widget, the instructions need either to be declared in the KvLang or bound to pos and size changes.xa0\']','[]','[\'# import kivy moduleimport kivy   # this restrict the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\"1.9.1\")   # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App # A Widget is the base building block# of GUI interfaces in Kivy.# It provides a Canvas that# can be used to draw on screen.from kivy.uix.widget import Widget # From graphics module we are importing# Rectangle and Color as they are# basic building of canvas.from kivy.graphics import Rectangle, Color # class in which we are creating the canvasclass CanvasWidget(Widget):         def __init__(self, **kwargs):         super(CanvasWidget, self).__init__(**kwargs)         # Arranging Canvas        with self.canvas:             Color(.234, .456, .678, .8)  # set the colour             # Setting the size and position of canvas            self.rect = Rectangle(pos = self.center,                                  size =(self.width / 2.,                                        self.height / 2.))             # Update the canvas as the screen size change            self.bind(pos = self.update_rect,                  size = self.update_rect)     # update function which makes the canvas adjustable.    def update_rect(self, *args):        self.rect.pos = self.pos        self.rect.size = self.size # Create the App Classclass CanvasApp(App):    def build(self):        return CanvasWidget() # run the AppCanvasApp().run()\', \'# import kivy moduleimport kivy   # this restrict the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\"1.9.1\")   # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App # A Widget is the base building block# of GUI interfaces in Kivy.# It provides a Canvas that# can be used to draw on screen.from kivy.uix.widget import Widget # From graphics module we are importing# Rectangle and Color as they are# basic building of canvas.from kivy.graphics import Rectangle, Color # class in which we are creating the canvasclass CanvasWidget(Widget):         def __init__(self, **kwargs):         super(CanvasWidget, self).__init__(**kwargs)         # Arranging Canvas        with self.canvas:             Color(1, 0, 0, 1)  # set the colour             # Setting the size and position of image            # image must be in same folder            self.rect = Rectangle(source =\'download.jpg\',                                  pos = self.pos, size = self.size)             # Update the canvas as the screen size change            # if not use this next 5 line the            # code will run but not cover the full screen            self.bind(pos = self.update_rect,                  size = self.update_rect)     # update function which makes the canvas adjustable.    def update_rect(self, *args):        self.rect.pos = self.pos        self.rect.size = self.size # Create the App Classclass CanvasApp(App):    def build(self):        return CanvasWidget() # run the AppCanvasApp().run()\']','[\'from kivy.graphics import Rectangle, Color\', \'Basic Approach \n-> import kivy\n-> import kivy App\n-> import widget\n-> import Canvas i.e.:\n      from kivy.graphics import Rectangle, Color\n-> set minimum version(optional)\n-> Extend the Widget class\n-> Create the App Class\n-> return a Widget\n-> Run an instance of the class\']','[]','[]'),(248,'[\'Python | Checkbox widget in Kivy\']','[\'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190510115249/Capture34-3-300x165.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190510124219/checkbox.webm\', \'https://kivy.org/doc/stable/api-kivy.uix.checkbox.html\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'Kivy Tutorial – Learn Kivy with Examples.\', \'Basic Approach to follow while creating Slider :xa0\', \'Now the program of How to create Checkbox in Kivy:xa0xa0\', \'Now program to arrange a callback to Checkbox i.e whether checkbox is checked or not.xa0xa0\', \'Video Output:xa0xa0\', \'xa0xa0Reference: https://kivy.org/doc/stable/api-kivy.uix.checkbox.html.xa0\']','[\'Kivy is a platform independent GUI tool in Python. Kivy applications can be run on Android, IOS, linux, and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktop applications.xa0\', \'Checkbox widget –CheckBox is a specific two-state button that can be either checked or unchecked. Checkboxes have an accompanying label that describes the purpose of the checkbox. Checkboxes can be grouped together to form radio buttons. Checkboxes are used to convey whether a setting is to be applied or not.\', \'To work with the Checkbox, you first have to import Checkbox from the module which consists all features, functions of the slider i.e.xa0xa0\', \'Now Question is that How can we bind or attach callback to Checkbox?xa0So the simple example is given which bind Checkbox with the click i.e when it clicked it print “Checkbox Checked” else it will print “Checkbox unchecked”.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\"# Program to learn how to make checkbox in kivy # import kivy moduleimport kivy # base Class of your App inherits from the App class. # app:always refers to the instance of your application from kivy.app import App # The :class:`Widget` class is the base class# required for creating Widgets.from kivy.uix.widget import Widget # The Label widget is for rendering text.from kivy.uix.label import Label # To use the checkbox must import it from this modulefrom kivy.uix.checkbox import CheckBox # The GridLayout arranges children in a matrix.from kivy.uix.gridlayout import GridLayout   # Container class for the app\'s widgetsclass check_box(GridLayout):     def __init__(self, **kwargs):        # super function can be used to gain access        # to inherited methods from a parent or sibling class        # that has been overwritten in a class object.        super(check_box, self).__init__(**kwargs)         # 2 columns in grid layout        self.cols = 2         # Add checkbox, widget and labels        self.add_widget(Label(text =\'Male\'))        self.active = CheckBox(active = True)        self.add_widget(self.active)         self.add_widget(Label(text =\'Female\'))        self.active = CheckBox(active = True)        self.add_widget(self.active)         self.add_widget(Label(text =\'Other\'))        self.active = CheckBox(active = True)        self.add_widget(self.active)          # App derived from App classclass CheckBoxApp(App):    def build(self):             return check_box() # Run the appif __name__ == \'__main__\':    CheckBoxApp().run()\", \'# Program to learn how to make checkbox# and adding callback in kivy # import kivy moduleimport kivy # base Class of your App inherits from the App class. # app:always refers to the instance of your application from kivy.app import App # The :class:`Widget` class is the base class# required for creating Widgets.from kivy.uix.widget import Widget # The Label widget is for rendering text.from kivy.uix.label import Label # To use the checkbox must import it from this modulefrom kivy.uix.checkbox import CheckBox # The GridLayout arranges children in a matrix.# imports the GridLayout class for use in the app.from kivy.uix.gridlayout import GridLayout   # Container class for the app\'s widgetsclass check_box(GridLayout):     def __init__(self, **kwargs):        # super function can be used to gain access        # to inherited methods from a parent or sibling class        # that has been overwritten in a class object.        super(check_box, self).__init__(**kwargs)         # 2 columns in grid layout        self.cols = 2         # Add checkbox, Label and Widget        self.add_widget(Label(text =\'Male\'))        self.active = CheckBox(active = True)        self.add_widget(self.active)         # Adding label to screen        self.lbl_active = Label(text =\'Checkbox is on\')        self.add_widget(self.lbl_active)                  # Attach a callback        self.active.bind(active = self.on_checkbox_Active)       # Callback for the checkbox    def on_checkbox_Active(self, checkboxInstance, isActive):        if isActive:            self.lbl_active.text =\"Checkbox is ON\"            print(\"Checkbox Checked\")        else:            self.lbl_active.text =\"Checkbox is OFF\"            print(\"Checkbox unchecked\")   # App derived from App classclass CheckBoxApp(App):    def build(self):        # build is a method of Kivy\'s App class used        # to place widgets onto the GUI.        return check_box() # Run the appif __name__ == \'__main__\':    CheckBoxApp().run()\']','[\'from kivy.uix.checkbox import CheckBox\', \'1) import kivy\n2) import kivy App\n3) import gridlayout\n4) import Label\n5) import Checkbox\n6) import Widget\n7) set minimum version(optional)\n8) Extend the class\n9) Add widget in the class\n10) Create the App class\n11) run the instance of the class\']','[]','[]'),(249,'[\'Python | Dropdown list in kivy\']','[]','[\'Dropdown list\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190824001329/Capture244-300x272.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190824001336/Capture158-300x236.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'?? Kivy Tutorial – Learn Kivy with Examples.\', \'Some important points to keep in mind while making a drop-down list:\', \'To work with this widget you must have to import:\', \'from kivy.uix.dropdown import DropDown\', \'Implementation of the Approach –\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'A dop-down list can be used with custom widgets. It allows you to display a list of widgets under a displayed widget. Unlike other toolkits, the list of widgets can contain any type of widget: simple buttons, images etc.\', \'The positioning of the drop-down list is fully automatic: we will always try to place the dropdown list in a way that the user can select an item in the list.\']','[]','[\"# Program to explain how to create drop-down in kivy      # import kivy module    import kivy         # base Class of your App inherits from the App class.    # app:always refers to the instance of your application   from kivy.app import App      # this restrict the kivy version i.e  # below this kivy version you cannot  # use the app or software  kivy.require(\'1.9.0\')      # Importing Drop-down from the module to use in the programfrom kivy.uix.dropdown import DropDown  # The Button is a Label with associated actions# that are triggered when the button is pressed# (or released after a click / touch)from kivy.uix.button import Button  # another way used to run kivy app from kivy.base import runTouchApp  # create a dropdown with 10 buttonsdropdown = DropDown()for index in range(10):      # Adding button in drop down list    btn = Button(text =\'Value % d\' % index, size_hint_y = None, height = 40)      # binding the button to show the text when selected    btn.bind(on_release = lambda btn: dropdown.select(btn.text))      # then add the button inside the dropdown    dropdown.add_widget(btn)  # create a big main buttonmainbutton = Button(text =\'Hello\', size_hint =(None, None), pos =(350, 300))  # show the dropdown menu when the main button is released# note: all the bind() calls pass the instance of the caller # (here, the mainbutton instance) as the first argument of the callback# (here, dropdown.open.).mainbutton.bind(on_release = dropdown.open)  # one last thing, listen for the selection in the # dropdown list and assign the data to the button text.dropdown.bind(on_select = lambda instance, x: setattr(mainbutton, \'text\', x))  # runtouchApp:# If you pass only a widget in runtouchApp(), a Window will# be created and your widget will be added to the window# as the root widget.runTouchApp(mainbutton)\"]','[\'Basic Approach:\n1) import kivy\n2) import kivy App\n3) import dropdown list\n4) import button\n5) set minimum version(optional)\n6) import runTouchApp\n7) Create dropdown\n8) create runtouchApp method \n   which takes widget as an argument\n   to run the App\']','[]','[]'),(250,'[\'Python | Carousel Widget In Kivy\']','[\'Carousel widget:\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190626182209/2nd2-300x236.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'http://placehold.it\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'?? Kivy Tutorial – Learn Kivy with Examples.\', \'Some Important Points to notice:\', \'To work with this widget you must have to import:\', \'Implementation of the Approach:\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'The Carousel widget provides the classic mobile-friendly carousel view where you can swipe between slides. You can add any content to the carousel and have it move horizontally or vertically. The carousel can display pages in a sequence or a loop.\', \'1) It provides ease to traverse set of slides.2) It can hold image, videos or any other content3) The movement can be vertical or horizontal swipes4) Kivy provides several customizations to a Carousel that include:\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[]','[\'# Program to explain how to add carousel in kivy     # import kivy module    import kivy        # base Class of your App inherits from the App class.    # app:always refers to the instance of your application   from kivy.app import App     # this restrict the kivy version i.e  # below this kivy version you cannot  # use the app or software  kivy.require(\'1.9.0\')     # The Image widget is used to display an image # this module contain all features of images from kivy.uix.image import AsyncImage  # The Carousel widget provides the# classic mobile-friendly carousel# view where you can swipe between slidesfrom kivy.uix.carousel import Carousel      # Create the App classclass CarouselApp(App):    def build(self):          # Add carousel        # And add the direction of swipe        carousel = Carousel(direction =\'right\')          # Adding 10 slides        for i in range(10):            src = \"http://placehold.it / 480x270.png&text = slide-%d&.png\" %i            # using Asynchronous image                        image = AsyncImage(source = src, allow_stretch = True)            carousel.add_widget(image)        return carousel  # Run the AppCarouselApp().run()\']','[\'from kivy.uix.carousel import Carousel\', \'Basic Approach:\n1) import kivy\n2) import kivy App\n3) import Gridlayout\n4) import widget\n5) set minimum version(optional)\n6) Create as much as widget class as needed\n7) create the App class\n8) return the widget/layout etc class\n9) Run an instance of the class\']','[]','[\'Animation effect while a transition is made from one slide to another slide, duration of the transition period|||Specifying the direction of the swipe|||Disabling vertical swipes|||Whether the carousel should loop infinitely or not|||Specification of minimum distance to be considered while accepting a swipe|||Specification of minimum duration to be considered while accepting a swipe|||Specifying current, previous and next slides\']'),(251,'[\'Python | BoxLayout widget in Kivy\']','[\'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190505233127/Capture34-3-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190506000601/Capture136-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190506000603/Capture219-300x165.png\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'???????? Kivy Tutorial – Learn Kivy with Examples.\', \'Below is the code to use BoxLayout:xa0xa0\', \'xa0xa0Some modification like add colour, fix size in Box layout widget:xa0xa0\', \'Output:Picture1:xa0xa0\', \'Picture2:xa0xa0\', \'Note: Every time you run the code it provides you the different color outputs as in the pictures.xa0\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, Linux and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.xa0\', \'Basic Approach to follow while creating button :xa01) import kivyxa02) import kivyAppxa03) import BoxLayoutxa04) set minimum version(optional)xa05) Add widgetsxa06) Extend the classxa07) Return layoutxa08) Run an instance of the class\']','[\'Now in this article, we will learn about the use of BoxLayout widget in kivy and how to add some features like color, size etc to it.BoxLayout:xa0BoxLayout arranges widgets in either in a vertical fashion that is one on top of another or in a horizontal fashion that is one after another. When you will not provide any size-hint then the child widgets divides the size of its parent widget equally or accordingly.xa0\']','[\'# code to show how to use nested boxlayouts. # import kivy moduleimport kivy   # this restricts the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\"1.9.1\")   # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App   # creates the button in kivy# if not imported shows the errorfrom kivy.uix.button import Button # BoxLayout arranges children in a vertical or horizontal box.# or help to put the children at the desired location.from kivy.uix.boxlayout import BoxLayout   # class in which we are creating the button by using boxlayout# defining the App classclass BoxLayoutApp(App):           def build(self):         # To position oriented widgets again in the proper orientation        # use of vertical orientation to set all widgets         superBox = BoxLayout(orientation =\'vertical\')         # To position widgets next to each other,        # use a horizontal BoxLayout.        HB = BoxLayout(orientation =\'horizontal\')                 btn1 = Button(text =\"One\")        btn2 = Button(text =\"Two\")         # HB represents the horizontal boxlayout orientation        # declared above        HB.add_widget(btn1)        HB.add_widget(btn2)         # To position widgets above/below each other,        # use a vertical BoxLayout.        VB = BoxLayout(orientation =\'vertical\')         btn3 = Button(text =\"Three\")        btn4 = Button(text =\"Four\")         # VB represents the vertical boxlayout orientation        # declared above        VB.add_widget(btn3)        VB.add_widget(btn4)         # superbox used to again align the oriented widgets        superBox.add_widget(HB)        superBox.add_widget(VB)         return superBox # creating the object root for BoxLayoutApp() class root = BoxLayoutApp()   # run function runs the whole program# i.e run() method which calls the# target function passed to the constructor.root.run()\', \'# code to show how to use nested boxlayouts. # import kivy moduleimport kivy # to choose the colors randomly# every time you run it shows different colorimport random  # this restricts the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\"1.9.1\")   # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App   # creates the button in kivy# if not imported shows the errorfrom kivy.uix.button import Button # BoxLayout arranges children in a vertical or horizontal box.# or help to put the children at the desired location.from kivy.uix.boxlayout import BoxLayout # declaring the colours you can use directly alsored = [1, 0, 0, 1]green = [0, 1, 0, 1]blue =  [0, 0, 1, 1]purple = [1, 0, 1, 1]   # class in which we are creating the buttonclass BoxLayoutApp(App):           def build(self):         # To position oriented widgets again in the proper orientation        # use of vertical orientation to set all widgets         superBox = BoxLayout(orientation =\'vertical\')         # To position widgets next to each other,        # use a horizontal BoxLayout.        HB = BoxLayout(orientation =\'horizontal\')         colors = [red, green, blue, purple]                 # styling the button boxlayout        btn1 = Button(text =\"One\",                      background_color = random.choice(colors),                      font_size = 32,                      size_hint =(0.7, 1))        btn2 = Button(text =\"Two\",                      background_color = random.choice(colors),                      font_size = 32,                      size_hint =(0.7, 1))         # HB represents the horizontal boxlayout orientation        # declared above        HB.add_widget(btn1)        HB.add_widget(btn2)         # To position widgets above/below each other,        # use a vertical BoxLayout.        VB = BoxLayout(orientation =\'vertical\')         btn3 = Button(text =\"Three\",                      background_color = random.choice(colors),                      font_size = 32,                      size_hint =(1, 10))        btn4 = Button(text =\"Four\",                      background_color = random.choice(colors),                      font_size = 32,                      size_hint =(1, 15))         # VB represents the vertical boxlayout orientation        # declared above        VB.add_widget(btn3)        VB.add_widget(btn4)         # superbox used to again align the oriented widgets        superBox.add_widget(HB)        superBox.add_widget(VB)         return superBox # creating the object root for BoxLayoutApp() class root = BoxLayoutApp()   # run function runs the whole program# i.e run() method which calls the# target function passed to the constructor.root.run()\']','[]','[]','[]'),(252,'[\'Python | Slider widget in Kivy\']','[\'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190506190537/Capture34-3-300x165.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190506192257/20190506_192030.mp4\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'???????? Kivy Tutorial – Learn Kivy with Examples.\', \'Below is the code implementing slider:xa0xa0\', \'Video to explain how slider works –xa0xa0\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.xa0\', \'Slider:xa0To work with the slider you first have to import the module which consists all features, functions of the slider i.e.xa0xa0\', \'Basic Approach to follow while creating Slider :1) import kivyxa02) import kivy Appxa03) import gridlayout(not compulsory according to need)xa04) import Label(not compulsory according to need)xa05) import Sliderxa06) import Numeric propertyxa07) set minimum version(optional)xa08) Extend the classxa09) Add and return a widgetxa010) Run an instance of the class\', \'xa0xa0To add some styling and coloring to the slider, just replace the line no 42 with the below and add some new features also if you want. For text, styling uses the proper commands in text portion.xa0xa0\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'The Slider widget looks like same we are using in android to increase the brightness, volume etc. It supports horizontal and vertical orientations, min/max values and a default value. Kivy supports several slider widget options for customizing the cursor, cursor image, border, background to be used in different orientations, region between the minimum value and the maximum value.xa0Kivy also supports to deal in term of Normalized value (range 0 to 1) rather than the real ranges supported by the slider.xa0\']','[\'# import kivy moduleimport kivy   # this restrict the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\"1.9.1\") # Kivy Example App for the slider widgetfrom kivy.app import App # The GridLayout arranges children in a matrix.from kivy.uix.gridlayout import GridLayout # If we will not import this module# It will through the errorfrom kivy.uix.slider import Slider # The Label widget is for rendering text.from kivy.uix.label import Label # Property that represents a numeric value# within a minimum bound and / or maximum# bound – within a numeric range.from kivy.properties  import NumericProperty # class in which we are defining the# sliders and its effectsclass WidgetContainer(GridLayout):     def __init__(self, **kwargs):                 # super function can be used to gain access        # to inherited methods from a parent or sibling        # class that has been overwritten in a class object.        super(WidgetContainer, self).__init__(**kwargs)         # 4 columns in grid layout        self.cols = 4                 # declaring the slider and adding some effects to it        self.brightnessControl = Slider(min = 0, max = 100)                   # 1st row - one label, one slider           self.add_widget(Label(text =\'brightness\'))        self.add_widget(self.brightnessControl)         # 2nd row - one label for caption,        # one label for slider value        self.add_widget(Label(text =\'Slider Value\'))        self.brightnessValue = Label(text =\'0\')        self.add_widget(self.brightnessValue)          # On the slider object Attach a callback        # for the attribute named value        self.brightnessControl.bind(value = self.on_value)            # Adding functionality behind the slider    # i.e when pressed increase the value    def on_value(self, instance, brightness):        self.brightnessValue.text = \"% d\"% brightness  # The app classclass SliderExample(App):    def build(self):        widgetContainer = WidgetContainer()        return widgetContainer   # creating the object root for ButtonApp() class root = SliderExample()   # run function runs the whole program# i.e run() method which calls the# target function passed to the constructor.root.run()\', \"# declaring the slider and adding some effects to it# By default its orientation is horizontal# if want to change to vertical do like below        self.brightnessControl = Slider(min = 0, max = 100,                                        orientation =\'vertical\',                                        value_track = True,                                        value_track_color =[1, 0, 0, 1])\"]','[\'Module: kivy.uix.slider\']','[]','[]'),(253,'[\'Python | Popup widget in Kivy\']','[]','[\'Popup widget :\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190530192036/Capture34-3-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190530192039/Capture228-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190530192511/short-300x165.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://kivy.org/doc/stable/api-kivy.uix.popup.html\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'?? Kivy Tutorial – Learn Kivy with Examples.\', \'To use popup you must have to import :\', \'When click on screen popup will open like this:\', \'When click on Close the popup it will close.\', \'Output:Popup size will be smaller than the window size.\', \'Reference : https://kivy.org/doc/stable/api-kivy.uix.popup.html\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'Note: Popup is a special widget. Don’t try to add it as a child to any other widget. If you do, Popup will be handled like an ordinary widget and won’t be created hidden in the background.\', \'xa0Code #2:In the second code when we use the size_hint and the size we can give the size accordingly. In this just add something as in the below code in line number 75.\']','[]','[\'# Kivy example for the Popup widget  # Program to Show how to create a switch# import kivy module   import kivy      # base Class of your App inherits from the App class.   # app:always refers to the instance of your application  from kivy.app import App   # this restrict the kivy version i.e # below this kivy version you cannot # use the app or software kivy.require(\'1.9.0\')  # The Button is a Label with associated actions# that is triggered when the button# is pressed (or released after a click/touch).from kivy.uix.button import Button    # The GridLayout arranges children in a matrix.# It takes the available space and# divides it into columns and rows,# then adds widgets to the resulting “cells”.from kivy.uix.gridlayout import GridLayout  # Popup widget is used to create popups.# By default, the popup will cover# the whole “parent” window.# When you are creating a popup,# you must at least set a Popup.title and Popup.content.from kivy.uix.popup import Popup  # The Label widget is for rendering text. from kivy.uix.label import Label  # to change the kivy default settings we use this module configfrom kivy.config import Config  # 0 being off 1 being on as in true / false# you can use 0 or 1 && True or FalseConfig.set(\'graphics\', \'resizable\', True)  # Make an app by deriving from the kivy provided app classclass PopupExample(App):    # override the build method and return the root widget of this App      def build(self):        # Define a grid layout for this App        self.layout = GridLayout(cols = 1, padding = 10)            # Add a button        self.button = Button(text =\"Click for pop-up\")        self.layout.add_widget(self.button)          # Attach a callback for the button press event        self.button.bind(on_press = self.onButtonPress)                  return self.layout      # On button press - Create a popup dialog with a label and a close button    def onButtonPress(self, button):                  layout = GridLayout(cols = 1, padding = 10)          popupLabel = Label(text = \"Click for pop-up\")        closeButton = Button(text = \"Close the pop-up\")          layout.add_widget(popupLabel)        layout.add_widget(closeButton)                 # Instantiate the modal popup and display        popup = Popup(title =\'Demo Popup\',                      content = layout)          popup.open()             # Attach close button press with popup.dismiss action        closeButton.bind(on_press = popup.dismiss)     # Run the appif __name__ == \'__main__\':    PopupExample().run()\', \'# Kivy example for the Popup widget  # Program to Show how to create a switch# import kivy module   import kivy      # base Class of your App inherits from the App class.   # app:always refers to the instance of your application  from kivy.app import App   # this restrict the kivy version i.e # below this kivy version you cannot # use the app or software kivy.require(\'1.9.0\')  # The Button is a Label with associated actions# that is triggered when the button# is pressed (or released after a click/touch).from kivy.uix.button import Button    # The GridLayout arranges children in a matrix.# It takes the available space and# divides it into columns and rows,# then adds widgets to the resulting “cells”.from kivy.uix.gridlayout import GridLayout  # Popup widget is used to create popups.# By default, the popup will cover# the whole “parent” window.# When you are creating a popup,# you must at least set a Popup.title and Popup.content.from kivy.uix.popup import Popup  # The Label widget is for rendering text. from kivy.uix.label import Label  # to change the kivy default settings we use this module configfrom kivy.config import Config  # 0 being off 1 being on as in true / false# you can use 0 or 1 && True or FalseConfig.set(\'graphics\', \'resizable\', True)  # Make an app by deriving from the kivy provided app classclass PopupExample(App):    # override the build method and return the root widget of this App      def build(self):        # Define a grid layout for this App        self.layout = GridLayout(cols = 1, padding = 10)            # Add a button        self.button = Button(text =\"Click for pop-up\")        self.layout.add_widget(self.button)          # Attach a callback for the button press event        self.button.bind(on_press = self.onButtonPress)                  return self.layout      # On button press - Create a popup dialog with a label and a close button    def onButtonPress(self, button):                  layout = GridLayout(cols = 1, padding = 10)          popupLabel = Label(text = \"Click for pop-up\")        closeButton = Button(text = \"Close the pop-up\")          layout.add_widget(popupLabel)        layout.add_widget(closeButton)                 # Instantiate the modal popup and display        popup = Popup(title =\'Demo Popup\',                      content = layout,                      size_hint =(None, None), size =(200, 200))          popup.open()             # Attach close button press with popup.dismiss action        closeButton.bind(on_press = popup.dismiss)     # Run the appif __name__ == \'__main__\':    PopupExample().run()\']','[\'from kivy.uix.popup import Popup\', \'Basic Approach :\n\n1) import kivy\n2) import kivyApp\n3) import Label\n4) import button\n5) import Gridlayout\n6) import popup\n7) Set minimum version(optional)\n8) create App class\n9) return Layout/widget/Class(according to requirement)\n10) In the App class create the popup\n11) Run an instance of the class\']','[]','[\'The Popup widget is used to create popups. By default, the popup will cover the whole “parent” window. When you are creating a popup, you must at least set a Popup.title and Popup.content.|||Popup dialogs are used ]when we have to convey certain obvious messages to the user. Messages to the user through status bars as well for specific messages which need to be told with emphasis can still be done through popup dialogs.|||Keep one thing in mind that the default size of a widget is size_hint=(1, 1).|||If you don’t want your popup to be on the full screen you must gave either size hints with values less than 1 (for instance size_hint=(.8, .8)) or deactivate the size_hint and use fixed size attributes.\']'),(254,'[\'Python | Switch widget in Kivy\']','[\'Python3\', \'Python3\']','[\'Switch widget:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190530152005/Capture34-3-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190530152009/Capture146-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190530152000/Capture34-3-282x300.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'???????? Kivy Tutorial – Learn Kivy with Examples.\', \'Implementation of the Approach:xa0xa0\', \'Attaching Callback to Switch:xa0xa0\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.xa0\', \'The Switch widget is active or inactive, as a mechanical light switch. The user can swipe to the left/right to activate/deactivate it. The value represented by the switch is either True or False. That is the switch can be either in On position or Off position.To work with Switch you must have to import:xa0xa0\', \'Note: If you want to control the state with a single touch instead of a swipe, use the ToggleButton instead.xa0\', \'Now For attaching a callback you have to define a callback function and bind it with the switch. So below is the code how to Attach a callback:xa0\']','[]','[\'# Program to Show how to create a switch# import kivy module  import kivy   # base Class of your App inherits from the App class.  # app:always refers to the instance of your application from kivy.app import App # this restrict the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\'1.9.0\') # The Switch widget is active or inactive# The state transition of a switch is from# either on to off or off to on.from kivy.uix.switch import Switch # The GridLayout arranges children in a matrix.# It takes the available space and# divides it into columns and rows,# then adds widgets to the resulting “cells”.from kivy.uix.gridlayout import GridLayout # The Label widget is for rendering text.from kivy.uix.label import Label # A Gridlayout with a label a switch# A class which contains all stuff about the switchclass SimpleSwitch(GridLayout):      # Defining __init__ constructor     def __init__(self, **kwargs):           # super function can be used to gain access          # to inherited methods from a parent or sibling class          # that has been overwritten in a class object.          super(SimpleSwitch, self).__init__(**kwargs)           # no of columns          self.cols = 2           # Adding label to the Switch          self.add_widget(Label(text =\"Switch\"))           # Initially switch is Off i.e active = False          self.settings_sample = Switch(active = False)           # Add widget          self.add_widget(self.settings_sample)             # Defining the App Classclass SwitchApp(App):     # define build function     def build(self):          # return the switch class          return SimpleSwitch()   # Run the kivy appif __name__ == \'__main__\':     SwitchApp().run()\', \'# Program to Show how to attach a callback to switch # import kivy module  import kivy   # base Class of your App inherits from the App class.  # app:always refers to the instance of your application from kivy.app import App # this restrict the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\'1.9.0\') # The Switch widget is active or inactive# The state transition of a switch is from# either on to off or off to on.from kivy.uix.switch import Switch # The GridLayout arranges children in a matrix.# It takes the available space and# divides it into columns and rows,# then adds widgets to the resulting “cells”.from kivy.uix.gridlayout import GridLayout # The Label widget is for rendering text.from kivy.uix.label import Label # A Gridlayout with a label a switch# A class which contains all stuff about the switchclass SimpleSwitch(GridLayout):      # Defining __init__ constructor     def __init__(self, **kwargs):           # super function can be used to gain access          # to inherited methods from a parent or sibling class          # that has been overwritten in a class object.          super(SimpleSwitch, self).__init__(**kwargs)           # no of columns          self.cols = 2           # Adding label to the Switch          self.add_widget(Label(text =\"Switch\"))           # Initially switch is Off i.e active = False          self.settings_sample = Switch(active = False)           # Add widget          self.add_widget(self.settings_sample)           # Arranging a callback to the switch          # using bing function          self.settings_sample.bind(active = switch_callback)       # Callback for the switch state transition# Defining a Callback function# Contains Two parameter switchObject, switchValuedef switch_callback(switchObject, switchValue):         # Switch value are True and False    if(switchValue):        print(\'Switch is ON:):):)\')    else:        print(\'Switch is OFF:(:(:(\')   # Defining the App Classclass SwitchApp(App):     # define build function     def build(self):          # return the switch class          return SimpleSwitch()   # Run the kivy appif __name__ == \'__main__\':     SwitchApp().run()\']','[\'from kivy.uix.switch import Switch\', \'Basic Approach:\n\n1) import kivy\n2) import kivyApp\n3) import Switch\n4) import Gridlayout\n5) import Label\n6) Set minimum version(optional)\n7) create Layout class(In this you create a switch)\n8) create App class\n9) return Layout/widget/Class(according to requirement)\n10) Run an instance of the class\']','[]','[\'A switch can be attached with a call back to retrieve the value of the switch.|||The state transition of a switch is from either ON to OFF or OFF to ON.|||When switch makes any transition the callback is triggered and new state can be retrieved i.e came and any other action can be taken based on the state.|||By default, the representation of the widget is static. The minimum size required is 83*32 pixels.|||The entire widget is active, not just the part with graphics. As long as you swipe over the widget’s bounding box, it will work.\']'),(255,'[\'Python | Spinner widget in kivy\']','[]','[\'Spinner widget :\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190530223148/Capture34-3-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190530223154/Capture150-300x232.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190530225920/Capture229-300x222.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190530230143/spinner.webm\', \'https://practice.geeksforgeeks.org/courses/Python-Foundation?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_Foundation\', \'https://practice.geeksforgeeks.org/courses/Data-Structures-With-Python?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_DS\', \'https://practice.geeksforgeeks.org/courses/machine-learning?utm_source=geeksforgeeks&utm_medium=article&utm_campaign=GFG_Article_Bottom_Python_ML\']','[\'?? Kivy Tutorial – Learn Kivy with Examples.\', \'To work with spinner you must have to import:\', \'Implementation of a simple spinner:\', \'Below is the Implementation:\', \'Below is the output in video to get better understanding:\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'Now if we have to tell user every time which element in a list is selected, we will display a label just beside the spinner which tells about the selected label. Also, we will print the value, and text of spinner.\', \'xa0Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. xa0\', \'To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. And to begin with your Machine Learning Journey, join the Machine Learning - Basic Level Course\']','[\'Spinner is a widget that provides a quick way to select one value from a set. In the default state, a spinner shows its currently selected value. Touching the spinner displays a dropdown menu with all the other available values from which the user can select a new one.Like a combo box, a spinner object can have multiple values and one of the values can be selected.A callback can be attached to the spinner object to receive notifications on selection of a value from the spinner object.\']','[\'# Sample spinner app in kivy to change the# kivy default settings we use this module configfrom kivy.config import Config  # 0 being off 1 being on as in true / false# you can use 0 or 1 && True or FalseConfig.set(\'graphics\', \'resizable\', True)  # Program to Show how to create a switch# import kivy module   import kivy      # base Class of your App inherits from the App class.   # app:always refers to the instance of your application  from kivy.app import App   # this restrict the kivy version i.e # below this kivy version you cannot # use the app or software kivy.require(\'1.9.0\')  # The Label widget is for rendering text. from kivy.uix.label import Label  # Spinner is a widget that provides a# quick way to select one value from a set.# like a dropdown listfrom kivy.uix.spinner import Spinner  # module consist the floatlayout # to work with FloatLayout first # you have to import it from kivy.uix.floatlayout import FloatLayout    # Make an App by deriving from the App classclass SpinnerExample(App):      # define build     def build(self):          # creating floatlayout        layout = FloatLayout()          # creating the spinner        # configure spinner object and add to layout        self.spinnerObject = Spinner(text =\"Python\",             values =(\"Python\", \"Java\", \"C++\", \"C\", \"C#\", \"PHP\"),             background_color =(0.784, 0.443, 0.216, 1))           self.spinnerObject.size_hint = (0.3, 0.2)          self.spinnerObject.pos_hint ={\'x\': .35, \'y\':.75}          layout.add_widget(self.spinnerObject)          # return the layout        return layout;    # Run the appif __name__ == \'__main__\':    SpinnerExample().run()\', \'# Sample spinner app in kivy to change the# kivy default settings we use this module configfrom kivy.config import Config  # 0 being off 1 being on as in true / false# you can use 0 or 1 && True or FalseConfig.set(\'graphics\', \'resizable\', True)  # Program to Show how to create a switch# import kivy module   import kivy      # base Class of your App inherits from the App class.   # app:always refers to the instance of your application  from kivy.app import App   # this restrict the kivy version i.e # below this kivy version you cannot # use the app or software kivy.require(\'1.9.0\')  # The Label widget is for rendering text. from kivy.uix.label import Label  # Spinner is a widget that provides a# quick way to select one value from a set.# like a dropdown listfrom kivy.uix.spinner import Spinner  # module consist the floatlayout # to work with FloatLayout first # you have to import it from kivy.uix.floatlayout import FloatLayout    # Make an App by deriving from the App classclass SpinnerExample(App):      # define build     def build(self):          # creating floatlayout        layout = FloatLayout()          # creating the spinner        # configure spinner object and add to layout        self.spinnerObject = Spinner(text =\"Python\",              values =(\"Python\", \"Java\", \"C++\", \"C\", \"C#\", \"PHP\"),              background_color =(0.784, 0.443, 0.216, 1))           self.spinnerObject.size_hint = (0.3, 0.2)          self.spinnerObject.pos_hint ={\'x\': .35, \'y\':.75}          layout.add_widget(self.spinnerObject)        self.spinnerObject.bind(text = self.on_spinner_select)          # It changes the label info as well        # add a label displaying the selection from the spinner        self.spinnerSelection = Label(text =\"Selected value in spinner is: %s\"                                                      %self.spinnerObject.text)          layout.add_widget(self.spinnerSelection)        self.spinnerSelection.pos_hint ={\'x\': .1, \'y\':.3}                  return layout;      # call back for the selection in spinner object    def on_spinner_select(self, spinner, text):        self.spinnerSelection.text = \"Selected value in spinner is: %s\"                                              %self.spinnerObject.text)          print(\'The spinner\', spinner, \'have text\', text)        # Run the appif __name__ == \'__main__\':    SpinnerExample().run()\']','[\'from kivy.uix.spinner import Spinner\', \'Basic Approach :\n\n1) import kivy\n2) import kivyApp\n3) import Label\n4) import Spinner\n5) import Floatlayout\n6) Set minimum version(optional)\n7) create App class:\n        1) Create the spinner\n        2) Attach the labels to spinners\n        3) Attach a callback also \n8) return Layout/widget/Class(according to requirement)\n9) Run an instance of the class\']','[]','[]'),(256,'[\'Python | Progress Bar widget in kivy\']','[\'Python3\', \'Python3\']','[\'Progressbar Widget:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190825234305/pgb-300x236.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190825234302/pgb2-300x236.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'?? Kivy Tutorial – Learn Kivy with Examples.\', \'To use it, simply assign a value to indicate the current progress:\', \'To work with the progressbar widget you must have to import it by the command:\', \'from kivy.uix.progressbar import ProgressBar\', \'The progress bar take takes two arguments:\', \'Implementation of the Approach:\']','[\'Kivy is a platform-independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'ProgressBar widget is used to visualize the progress of some task. Only the horizontal mode is currently supported: the vertical mode is not yet available.The progress bar has no interactive elements and is a display-only widget.\', \'1) max: Maximum value allowed for value. It is a Numericproperty and defaults to 100.2) value: Current Value for the slider\', \'Note: This code is for a complete working progressbar and you need to focus only the creation and working of the progressbar no need to take stress on other properties I will be covering them in future.You first have to click on the button that is made in the file and then the progressbar will show.\']','[]','[\'from kivy.uix.progressbar import ProgressBarpb = ProgressBar(max = 1000)  # this will update the graphics automatically (75 % done)pb.value = 750\', \'# Program to Show how to create a Progressbar in .kv file  # import kivy module    import kivy         # base Class of your App inherits from the App class.    # app:always refers to the instance of your application   from kivy.app import App      # this restrict the kivy version i.e  # below this kivy version you cannot  # use the app or software  kivy.require(\'1.9.0\')     # The ProgressBar widget is used to# visualize the progress of some taskfrom kivy.uix.progressbar import ProgressBar   # BoxLayout arranges children in a vertical or horizontal box. # or help to put the children at the desired location. from kivy.uix.boxlayout import BoxLayout  # The Clock object allows you to schedule a# function call in the futurefrom kivy.clock import Clock   # The Button is a Label with associated actions # that is triggered when the button # is pressed (or released after a click / touch).  from kivy.uix.button import Button  # Popup widget is used to create popups. # By default, the popup will cover # the whole “parent” window. # When you are creating a popup, # you must at least set a Popup.title and Popup.content.from kivy.uix.popup import Popup  # A Widget is the base building block# of GUI interfaces in Kivy.# It provides a Canvas that# can be used to draw on screen.from kivy.uix.widget import Widget  # ObjectProperty is a specialised sub-class# of the Property class, so it has the same# initialisation parameters as it:# By default, a Property always takes a default# value[.] The default value must be a value# that agrees with the Property type.from kivy.properties import ObjectProperty      # Create the widget classclass MyWidget(Widget):      progress_bar = ObjectProperty()          def __init__(self, **kwa):        super(MyWidget, self).__init__(**kwa)                  self.progress_bar = ProgressBar()        self.popup = Popup(            title =\'Download\',            content = self.progress_bar        )        self.popup.bind(on_open = self.puopen)        self.add_widget(Button(text =\'Download\', on_release = self.pop))      # the function which works when you click = k the button     def pop(self, instance):        self.progress_bar.value = 1        self.popup.open()      # To continuously increasing the value of pb.    def next(self, dt):        if self.progress_bar.value>= 100:            return False        self.progress_bar.value += 1          def puopen(self, instance):        Clock.schedule_interval(self.next, 1 / 25)  # Create the App class class MyApp(App):    def build(self):        return MyWidget()  # run the Appif __name__ in (\"__main__\"):    MyApp().run()\']','[\'Basic Approach:\n\n1) import kivy\n2) import kivyApp\n3) import progressbar\n4) import Boxlayout(according to need)\n5) Set minimum version(optional)\n6) Create Layout class:\n7) Create App class\n8) return Layout/widget/Class(according to requirement)\n9) Run an instance of the class\']','[]','[]'),(257,'[\'Python | Working with buttons in Kivy\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\']','[\'Button using KivyMD:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190417142100/Capture133-300x236.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190417144053/Capture34-2-300x236.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190417152138/Capturem-300x156.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210504145950/b17.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210503153943/b16.JPG\']','[]','[\'https://www.geeksforgeeks.org/medium/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190417153626/video_20190417_1529191.mp4\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'xa0Kivy Tutorial – Learn Kivy with Examples.\', \'Basic Approach to follow while creating button :xa0\', \'Code #1: How to create button in kivy.xa0xa0\', \'Video output:xa0xa0\', \'Below is an example of MDRectangularFlatButton\', \'MDRectangleFlatButton has the following parameters:\', \'When the button is pressed it displays the following output\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. Kivy provides you the functionality to write the code for once and run it on different platforms. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.xa0\', \'Now in this article, we will learn how to build a button in kivy, just like the button we use in calculators and many more places, adding functionality to the button, styling of the button.The Button is a Label with associated actions that are triggered when the button is pressed (or released after a click/touch). We can add functions behind the button and style the button.xa0\', \'In the above output, the button will cover the whole window as we have not given any specific size or done any styling in the button so by default it shows button size equal to window size.xa0xa0xa0Code #2: Styling The Buttonxa0\', \'These are just similar to the HTML, CSS effects. By this, we fix the position of a button at the center of the window, text size, colour and anything you want.xa0xa0xa0Code #3 Adding Functionality behind the button.\', \'KivyMD is an extension of the Kivy framework. KivyMD is a collection of Material Design widgets for use with Kivy, a GUI framework for making mobile applications.\']','[\'One of the common problems is how to add functionality to the button. So to add functionality we usexa0bind() function it binds the function to the button. bind() creates an event that is send to callback().One of the most common problems for new Kivy users is misunderstanding how the bind method works, especially amongst newer Python users who haven’t fully formed their intuition about function calls.xa0The thing is that the bind method doesn’t know about the existence of a function or its arguments, it only receives the result of this function call. As in the given code when the button is pressed it prints that “button pressed” def in the function callback.In the given code inside bind() we use on_press because when button press it tells the function that button is pressed then the bind uses its functionality.xa0xa0\']','[\'# import kivy moduleimport kivy # this restrict the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\"1.9.1\") # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App # creates the button in kivy# if not imported shows the errorfrom kivy.uix.button import Button # class in which we are creating the buttonclass ButtonApp(App):         def build(self):                 btn = Button(text =\"Push Me !\")        return btn # creating the object root for ButtonApp() classroot = ButtonApp() # run function runs the whole program# i.e run() method which calls the# target function passed to the constructor.root.run()\', \'def build(self):        # use a (r, g, b, a) tuple        btn = Button(text =\"Push Me !\",                   font_size =\"20sp\",                   background_color =(1, 1, 1, 1),                   color =(1, 1, 1, 1),                   size =(32, 32),                   size_hint =(.2, .2),                   pos =(300, 250))         return btn\', \'# import kivy moduleimport kivy # this restrict the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\"1.9.1\") # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App # creates the button in kivy# if not imported shows the errorfrom kivy.uix.button import Button # class in which we are creating the buttonclass ButtonApp(App):         def build(self):        # use a (r, g, b, a) tuple        btn = Button(text =\"Push Me !\",                   font_size =\"20sp\",                   background_color =(1, 1, 1, 1),                   color =(1, 1, 1, 1),                   size =(32, 32),                   size_hint =(.2, .2),                   pos =(300, 250))         # bind() use to bind the button to function callback        btn.bind(on_press = self.callback)        return btn     # callback function tells when button pressed    def callback(self, event):        print(\"button pressed\")        print(\'Yoooo !!!!!!!!!!!\')          # creating the object root for ButtonApp() classroot = ButtonApp() # run function runs the whole program# i.e run() method which calls the target# function passed to the constructor.root.run()\', \'from kivymd.app import MDAppfrom kivymd.uix.screen import Screenfrom kivymd.uix.button import MDRectangleFlatButton class Demo(MDApp):     def build(self):        screen = Screen()                 btn= MDRectangleFlatButton(text=\"Submit\",pos_hint={\'center_x\':0.5,\'center_y\':0.3},on_release=self.btnfunc)           screen.add_widget(btn)        # adding widgets to screen             return screen    def btnfunc(self,obj):        print(\"button is pressed!!\")    if __name__==\"__main__\":    Demo().run()\']','[\'-> import kivy\n-> import kivy App\n-> import button\n-> set minimum version(optional)\n-> Extend the class\n-> Add and return a button\n-> Run an instance of the class\']','[]','[\'text- the text we want to put on the button|||pos_hint- a dictionary having the position with respect to x-axis and y-axis|||on_release- it is a function that has the properties that we want to call on clicking the button\']'),(258,'[\'Python | Float Layout in Kivy\']','[\'Python3\', \'Python3\']','[\'FloatLayout:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190520095946/Capture34-3-300x190.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190520103443/dynamic1-300x230.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190520104004/float-layout.webm\', \'https://kivy.org/doc/stable/api-kivy.uix.floatlayout.html\', \'https://techwithtim.net/tutorials/kivy-tutorial/floatlayout/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'?? Kivy Tutorial – Learn Kivy with Examples.\', \'Note: FloatLayout honors the pos_hint and the size_hint properties of its children.\', \'The first thing we need to do to use a FloatLayout is import it.\', \'For example, a FloatLayout with a size of (300, 300) is created:\', \'Implementation of the Approach:\', \'We have 2 properties to create dynamic placement:\', \'2) size_hint: provide hint of sizeContains two arguments i.e. width and height\', \'Code to implement dynamic positioning:\', \'Video Output:\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'By default, all widgets have their size_hint = (1, 1), so this below button will adopt the same size as the layout:\', \'To create a button having a specific width and height of layout placed at a particular position you can do like below –\', \'Note: Now if you change the size of window, it changes its position relatively and size also. This layout can be used for an application. Most of the time, you will use the size of the Window.\', \'Dynamic Placements –Now there is something missing or the above code is not perfect you can say. We still need to add the placement for the buttons.\', \'1) pos_hint: provide hint of positionWe can define upto 6 keys i.e. it takes arguments in form of dictionary.pos_hint = {“x”:1, “y”:1, “left”:1, “right”:1, “top”:1, “bottom”:1}\']','[\'Floatlayout allows us to place the elements relatively based on the current window size and height especially in mobiles i.e. Floatlayout allow us to place the elements using something called relative position. This means rather than defining the specific position or the coordinates we will place everything using the percentage w.r.t the size of window. When we change the dimensions of the window everything placed in the window will adjust its size and position accordingly. This makes the Application more reliable and scalable to window size.\']','[\'# Sample Python application demonstrating the# working of FloatLayout in Kivy  import kivy  # base Class of your App inherits from the App class.  # app:always refers to the instance of your application  from kivy.app import App  # creates the button in kivy # if not imported shows the error from kivy.uix.button import Button  # module consist the floatlayout# to work with FloatLayout first# you have to import itfrom kivy.uix.floatlayout import FloatLayout  # To change the kivy default settings # we use this module config from kivy.config import Config     # 0 being off 1 being on as in true / false # you can use 0 or 1 && True or False Config.set(\'graphics\', \'resizable\', True)   # creating the App classclass MyApp(App):      def build(self):          # creating Floatlayout        Fl = FloatLayout()          # creating button        # a button 30 % of the width and 20 %        # of the height of the layout and        # positioned at (300, 200), you can do:        btn = Button(text =\'Hello world\',                    size_hint =(.3, .2),                    pos =(300, 200))          # adding widget i.e button        Fl.add_widget(btn)          # return the layout        return Fl  # run the Appif __name__ == \"__main__\":    MyApp().run()\', \'# Sample Python application demonstrating the# working of Dynamic placement in FloatLayout in Kivy  import kivy  # base Class of your App inherits from the App class.  # app:always refers to the instance of your application  from kivy.app import App  # creates the button in kivy # if not imported shows the error from kivy.uix.button import Button  # module consist the floatlayout# to work with FloatLayout first# you have to import itfrom kivy.uix.floatlayout import FloatLayout  # To change the kivy default settings # we use this module config from kivy.config import Config     # 0 being off 1 being on as in true / false # you can use 0 or 1 && True or False Config.set(\'graphics\', \'resizable\', True)   # creating the App classclass MyApp(App):      def build(self):          # creating Floatlayout        Fl = FloatLayout()          # creating button        # a button 30 % of the width and 50 %        # of the height of the layout and        # positioned at 20 % right and 20 % up        # from bottom left, i.e x, y = 200, 200 from bottom left:        btn = Button(text =\'Hello world\', size_hint =(.3, .5),                     background_color =(.3, .6, .7, 1),                    pos_hint ={\'x\':.2, \'y\':.2 })          # adding widget i.e button        Fl.add_widget(btn)          # return the layout        return Fl  # run the Appif __name__ == \"__main__\":    MyApp().run()\']','[\'from kivy.uix.floatlayout import FloatLayout\', \'Basic Approach:\n\n1) import kivy\n2) import kivyApp\n3) import button\n4) import Floatlayout\n5) Set minimum version(optional)\n6) create App class\n7) return Layout/widget/Class(according to requirement)\n8) Run an instance of the class\', \'layout = FloatLayout(size=(300, 300))\', \"button = Button(text=\'Hello world\')\nlayout.add_widget(button)\"]','[]','[\'You can only use values between 0-1 for both size_hint and pos_hint. Where 0 = 0% and 1 = 100%.|||The coordinate system in kivy works from the bottom left! This will be important when placing our objects. (i.e (0, 0) is the bottom left).\']'),(259,'[\'GridLayouts in Kivy | Python\']','[\'Python3\', \'Python3\', \'Python3\', \'Python3\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190329120905/gridlayout_1.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190329121406/gridlayout_2.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190329122653/gridlayout_3.jpg\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://kivy.org/doc/stable/guide/lang.html\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Use this command To install kivy:xa0\', \'Kivy Tutorial – Learn Kivy with Examples.\', \'Now the Columns represent the width and the rows represents the height just like matrix.xa0\', \'Note : For understanding how to use .kv files, just visit this.\', \'Output :xa0xa0\', \'Code #3:xa0We can also fix the row height to a specific size.\']','[\'Kivy is a platform independent as it can be run on Android, IOS, Linux and Windows, etc. Kivy provides you the functionality to write the code for once and run it on different platforms. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktop applications.\', \'In the given below example, all the widgets will have the same or equal size. By default, the size is (1, 1) so the child will take full size of the parent.\', \'Note: To run this code you have to make the main.py python file for the above python code and another file my.kv file.xa0xa0Code #2:xa0Now let’s fix the size of the buttons to 100px instead of the default size_hint_x = 1.\']','[\'Gridlayout is the function which creates the children and arrange them in a matrix format. It takes the available space(square) and divides that space into rows and columns then add the widgets accordingly to the resulting cells or grids.xa0We can not explicitly place the widgets in a particular column/row. Each child is assigned a particular position automatically determined by the layout configuration and the child index in children list. A gridlayout must contain at least on input constraints i.e. cols and rows. If we do not specify the cols or rows to it, the layout gives you an exception.xa0\']','[\"# main.py# import the kivy moduleimport kivy # It’s required that the base Class# of your App inherits from the App class.from kivy.app import Appfrom kivy.uix.gridlayout import GridLayout # This class stores the info of .kv file# when it is called goes to my.kv fileclass MainWidget(GridLayout):    pass # we are defining the Base Class of our Kivy Appclass myApp(App):    def build(self):        # return a MainWidget() as a root widget        return MainWidget() if __name__ == \'__main__\':         # Here the class MyApp is initialized    # and its run() method called.    myApp().run()\", \"# my.kv file code here<MainWidget>:     cols: 2     rows: 2         Button:                text: \'Hello 1\'    Button:        text: \'World 1\'    Button:        text: \'Hello 2\'    Button:               text: \'World 2\'\", \"# just do change in the above my.kv# (code #1) file else all are same.<MainWidget>:     cols: 2     rows: 2         Button:               text: \'Hello 1\'        size_hint_x: None        width: 100    Button:        text: \'World 1\'    Button:        text: \'Hello 2\'        size_hint_x: None        width: 100    Button:               text: \'World 2\'\", \"# just do change in the above my.kv# (code #1)file else all are same. <MainWidget>:     cols: 2     rows: 2    row_force_default: True    row_default_height: 40    Button:               text: \'Hello 1\'        size_hint_x: None        width: 100    Button:        text: \'World 1\'    Button:        text: \'Hello 2\'        size_hint_x: None        width: 100    Button:               text: \'World 2\'\"]','[\'pip install kivy\']','[]','[\'Initial the size is given by the col_default_width and row_default_height properties. We can force the default size by setting the col_force_default or row_force_default property. This will force the layout to ignore the width and size_hint properties of children and use the default size.|||To customize the size of a single column or row, use cols_minimum or rows_minimum.|||It is not necessary to give both rows and columns, it depends on the requirement. We can provide either both or anyone accordingly.\']'),(260,'[\'Python | StackLayout in Kivy\']','[\'Python3\']','[\'StackLayout:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190518211418/lr-tb-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518211418/lr-tb-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518211510/lr-bt-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518211539/rl-tb-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518211602/rl-bt-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518211622/tb-lr-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518211637/tb-rl-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518211658/bt-lr-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190518211715/bt-rl-300x165.png\']','[]','[\'https://www.geeksforgeeks.org/basic/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://www.geeksforgeeks.org/python-boxlayout-widget-in-kivy/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'???????? Kivy Tutorial – Learn Kivy with Examples.\', \'To use StackLayout first import StackLayout by below command:xa0xa0\', \'The four row-wise orientations and four column-wise orientation are shown in below pictures.xa0\', \'xa0xa0Implementation of the Approach:xa0\', \'xa0xa0Below there are picture output all the orientations above –For row wise orientation use:xa0xa0\', \'xa0xa0For column wise orientation use:xa0\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.xa0\', \'It is quite confusing to understand the difference between Stack and Boxlayout.xa0StackLayout can organize widgets with more complexity than BoxLayout Boxlayout can organize widgets either in a vertical or horizontal way. But with the StackLayout, you can combine the orientations. There are 4 row-wise and 4 column wise orientations.xa0\', \'This is for the orientation ‘lr-tb’. First the widgets are added left-to-right and then top-to-bottom.Note: If want to change orientation, just change the orientation in line no 31 with any of the below orientations –xa0xa0\']','[]','[\'# code to show how to use StackLayout # import kivy moduleimport kivy # this restricts the kivy version i.e# below this kivy version you cannot# use the app or softwarekivy.require(\"1.9.1\")   # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App   # creates the button in kivy# if not imported shows the errorfrom kivy.uix.button import Button # The StackLayout arranges children vertically# or horizontally, as many as the layout can fit.from kivy.uix.stacklayout import StackLayout  # class in which we are creating StackLayoutclass StackLayoutApp(App):           def build(self):         # Different orientation        # [\'lr-tb\', \'tb-lr\', \'rl-tb\', \'tb-rl\',           \'lr-bt\', \'bt-lr\', \'rl-bt\', \'bt-rl\']               SL = StackLayout(orientation =\'lr-tb\')         # Creating Multiple Buttons        btn1 = Button(text =\"B1\",                      font_size = 20,                      size_hint =(.2, .1))        btn2 = Button(text =\"B2\",                      font_size = 20,                      size_hint =(.2, .1))        btn3 = Button(text =\"B3\",                      font_size = 20,                      size_hint =(.2, .1))        btn4 = Button(text =\"B4\",                      font_size = 20,                      size_hint =(.2, .1))        btn5 = Button(text =\"B5\",                      font_size = 20,                      size_hint =(.2, .1))        btn6 = Button(text =\"B6\",                      font_size = 20,                      size_hint =(.2, .1))        btn7 = Button(text =\"B7\",                      font_size = 20,                      size_hint =(.2, .1))        btn8 = Button(text =\"B8\",                      font_size = 20,                      size_hint =(.2, .1))        btn9 = Button(text =\"B9\",                      font_size = 20,                      size_hint =(.2, .1))        btn10 = Button(text =\"B10\",                      font_size = 20,                      size_hint =(.2, .1))          # adding widgets        SL.add_widget(btn1)        SL.add_widget(btn2)        SL.add_widget(btn3)        SL.add_widget(btn4)        SL.add_widget(btn5)        SL.add_widget(btn6)        SL.add_widget(btn7)        SL.add_widget(btn8)        SL.add_widget(btn9)        SL.add_widget(btn10)          # returning widgets        return SL # run function runs the whole program# i.e run() method which calls the# target function passed to the constructor.if __name__ == \'__main__\':    StackLayoutApp().run()\']','[\'from kivy.uix.stacklayout import StackLayout\', \"More flexible that Boxlayout(1D)\n\nStackLayout Orientation (2D):\n - right to left or left to right\n - top to bottom or bottom to top\n - \'rl-bt\', \'rl-tb\', lr-bt\', \'lr-tb\'(Row wise)\n - \'bt-rl\', \'bt-lr\', \'tb-rl\', \'tb-lr\'(Column wise)\", \'Basic Approach to create Stack layout :\n\n1) import kivy\n2) import kivyApp\n3) import Button\n4) import Stacklayout\n5) Set minimum version(optional)\n6) create App class\n7) return widget\n8) Run an instance of the class\', \"For row wise orientation use:\n  -\'lr-tb\'\n  -\'lr-bt\'\n  -\'rl-tb\'\n  -\'rl-bt\'\n\nFor column wise orientation use:\n  -\'tb-lr\'\n  -\'tb-rl\'\n  -\'bt-lr\'\n  -\'bt-rl\'\", \"\'lr-tb\'\", \"\'lr-bt\'\", \"\'rl-tb\'\", \"\'rl-bt\'\", \"\'tb-lr\'\", \"\'tb-rl\'\", \"\'bt-lr\'\", \"\'bt-rl\'\"]','[]','[]'),(261,'[\'Python| AnchorLayout in Kivy\']','[]','[\'AnchorLayout:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190519114411/right-bottom-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190519114721/right-top-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190519115331/center-top-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190519115454/left-top-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190519115558/left-bottom-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190519115959/left-center-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190519120001/center-center-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190519115958/center-bottom-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190519120000/right-center-300x165.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'?? Kivy Tutorial – Learn Kivy with Examples.\', \'AnchorLayout can be initialized with parameters:\', \'to select the place where the widgets are placed in the parent container.\', \'There are 9 different layout regions where the Anchorlayout can be placed for effect:\', \'xa0Implementation of the Approach (with some Styling):\', \'1) anchor_x=’right’, anchor_y=’bottom’:\', \'2) anchor_x=’right’, anchor_y=’top’:\', \'3) anchor_x=’center’, anchor_y=’top’:Output:\', \'4) anchor_x=’left’, anchor_y=’top’:Output:\', \'5) anchor_x=’left’, anchor_y=’bottom’:Output:\', \'6) anchor_x=’left’, anchor_y=’center’:Output:\', \'7) anchor_x=’center’, anchor_y=’center’:Output:\', \'8) anchor_x=’center’, anchor_y=’bottom’:Output:\', \'9) anchor_x=’right’, anchor_y=’center’:Output:\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'The AnchorLayout aligns its children to a border (top, bottom, left, right) or center. The class given below is used to implement the anchor layout.\', \'Top-left, top-center, top-right, center-left, center-center, center-right, bottom-left, bottom-center and bottom-right.\', \'Note: Remember adding multiple widgets to an anchor layout, only positions the widgets at the same location.\', \'If you want to change the positions of the AnchorLayouts then just replace the class code in the above code with below or you can change the anchor_x and anchor_y with any of the parameters to make any 9 combinations as described above.\']','[]','[\"# Sample Python application demonstrating# the working of AnchorLayout in Kivy  # Module imports  # base Class of your App inherits from the App class. # app:always refers to the instance of your application from kivy.app import App  # The AnchorLayout aligns its children to a border# (top, bottom, left, right) or centerfrom kivy.uix.anchorlayout import AnchorLayout  # BoxLayout arranges children in a vertical or horizontal box.# or help to put the childrens at the desired location.from kivy.uix.boxlayout import BoxLayout  # creates the button in kivy # if not imported shows the errorfrom kivy.uix.button import Button    # A Kivy app demonstrating the working of anchor layoutclass AnchorLayoutApp(App):          def build(self):                    # Anchor Layout1        layout = AnchorLayout(        anchor_x =\'right\', anchor_y =\'bottom\')        btn = Button(text =\'Hello World\',                     size_hint =(.3, .3),                     background_color =(1.0, 0.0, 0.0, 1.0))              layout.add_widget(btn)        return layout   # creating the object root for AnchorLayoutApp() class  root = AnchorLayoutApp()# Run the Kivy approot.run()\", \"# A Kivy app demonstrating the working of anchor layoutclass AnchorLayoutApp(App):          def build(self):                  # Anchor Layout1        layout = AnchorLayout(        anchor_x =\'right\', anchor_y =\'top\')        btn = Button(text =\'Hello World\',                     size_hint =(.3, .3),                     background_color =(1.0, 0.0, 1.0, 1.0))              layout.add_widget(btn)        return layout\"]','[\'kivy.uix.anchorlayout.AnchorLayout\', \'anchor_x\nParameters can be passed: “left”, “right” and “center”.\n\nanchor_y\nParameters can be passed:“top”,  “bottom” and “center”.\', \'Basic Approach:\n\n1) import kivy\n2) import kivyApp\n4) import Anchorlayout\n5) Set minimum version(optional)\n6) create App class\n7) return Layout/widget/Class(according to requirement)\n8) Run an instance of the class\']','[]','[]'),(262,'[\'Python | Relative Layout in Kivy\']','[\'Python3\', \'Python3\']','[\'Relative Layout:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190523122257/pos-300x169.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190523122303/Capture34-3-300x235.png\']','[]','[\'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://www.geeksforgeeks.org/python-float-layout-in-kivy/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Kivy Tutorial – Learn Kivy with Examples.xa0\', \'The first thing we need to do to use a RelativeLayout is to import it.xa0\', \'Now if you want that the button adjusts itself according to window pos_hint is used.xa0\', \'Implementation Approach by using pos_hintxa0\']','[\'Kivy is a platform-independent GUI tool in Python. As it can be run on Android, IOS, Linux and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktop applications.\', \'Note:xa0This layout allows you to set relative coordinates for children. If you want absolute positioning, use the FloatLayout. In RelativeLayout each child widget size and position has to be given. This also does the dynamic placement.\', \'Note:xa0Floatlayout and RelativeLayout both support absolute and relative positioning depending upon whether pos_hint or pos is used. But If you want absolute positioning, use the FloatLayout.\', \'Implementation of approach using pos :xa0It simply assigns the position to the button. As Relativelayout does not depends on the window size it gets fixed to that position now if you do the window size small it may disappear rather than adjusting itself.xa0\']','[]','[\'# Sample Python application demonstrating the# working of RelativeLayout in Kivy # import modulesimport kivy # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App # creates the button in kivy# if not imported shows the errorfrom kivy.uix.button import Button # This layout allows you to set relative coordinates for children.from kivy.uix.relativelayout import RelativeLayout # To change the kivy default settings# we use this module configfrom kivy.config import Config     # 0 being off 1 being on as in true / false# you can use 0 or 1 && True or FalseConfig.set(\'graphics\', \'resizable\', True) # creating the App classclass MyApp(App):     def build(self):         # creating Relativelayout        Rl = RelativeLayout()         # creating button        # a button 30 % of the width and 20 %        # of the height of the layout and        # positioned at (x, y), you can do        # The position does not depend on window size        # it just positioned at the given places:        btn = Button(text =\'Hello world\',                 size_hint =(.2, .2),                 pos =(396.0, 298.0))        btn1 = Button(text =\'Hello world !!!!!!!!!\',                 size_hint =(.2, .2),                 pos =(-137.33, 298.0))         # adding widget i.e button        Rl.add_widget(btn)        Rl.add_widget(btn1)                         # return the layout        return Rl # run the Appif __name__ == \"__main__\":    MyApp().run()\', \'# Sample Python application demonstrating the# working of RelativeLayout in Kivy # import modulesimport kivy # base Class of your App inherits from the App class.# app:always refers to the instance of your applicationfrom kivy.app import App # creates the button in kivy# if not imported shows the errorfrom kivy.uix.button import Button # This layout allows you to set relative coordinates for children.from kivy.uix.relativelayout import RelativeLayout # To change the kivy default settings# we use this module configfrom kivy.config import Config     # 0 being off 1 being on as in true / false# you can use 0 or 1 && True or FalseConfig.set(\'graphics\', \'resizable\', True) # creating the App classclass Relative_Layout(App):         def build(self):         # creating Relativelayout        rl = RelativeLayout()               # creating button        # size of button is 20 % by height and width of layout        # position is bottom left i.e x = 0, y = 0        b1 = Button(size_hint =(.2, .2),                    pos_hint ={\'x\':0, \'y\':0},                    text =\"B1\")                 # position is bottom right i.e right = 1, y = 0        b2 = Button(size_hint =(.2, .2),                    pos_hint ={\'right\':1, \'y\':0},                    text =\"B2\")         b3 = Button(size_hint =(.2, .2),                    pos_hint ={\'center_x\':.5, \'center_y\':.5},                    text =\"B3\")         b4 = Button(size_hint =(.2, .2),                    pos_hint ={\'x\':0, \'top\':1},                    text =\"B4\")         b5 = Button(size_hint =(.2, .2),                    pos_hint ={\'right\':1, \'top\':1},                    text =\"B5\")                           # adding button to widget        rl.add_widget(b1)        rl.add_widget(b2)        rl.add_widget(b3)        rl.add_widget(b4)        rl.add_widget(b5)                      # returning widget        return rl# run the Appif __name__  == \"__main__\":    Relative_Layout().run()\']','[\'from kivy.uix.relativelayout import RelativeLayout\', \'We can do relative positioning by:\npos_hint: provide hint of position\nWe can define upto 8 keys i.e. it takes arguments in form of dictionary.\npos_hint = {“x”:1, “y”:1, “left”:1, “right”:1, \"center_x\":1, \"center_y\":1,\n           “top”:1, “bottom”:1(\"top\":0)}\', \'Basic Approach to create Relative Layout:\n\n1) import kivy\n2) import kivyApp\n3) import button\n4) import Relativelayout\n5) Set minimum version(optional)\n6) create App class:\n        - define build() function\n7) return Layout/widget/Class(according to requirement)\n8) Run an instance of the class\']','[]','[\'Relative layout is just similar to the FloatLayout the difference is that its child widget are positioned relative to the layout.|||This layout operates in the same way as FloatLayout does, but the positioning properties (x, y, center_x, right, y, center_y, and top) are relative to the Layout size and not the window size.|||In reality, regardless of absolute and relative positioning, the widgets are moved when the position of the layout changes.|||When the widget with position=(0, 0) is added to RelativeLayout, Now if the position of RelativeLayout is changed the child widget will also move. The Child widget coordinates remains same i.e (0, 0) as they are always relative to the parent layout.|||The available pos_hint keys (x, center_x, right, y, center_y, and top) are useful for aligning to edges or centering.For example:pos_hint: {‘center_x’:.5, ‘center_y’:.5} would align a Widget in the middle, no matter what the size of the window is.\']'),(263,'[\'Python | PageLayout in Kivy\']','[\'Python3\', \'Python3\']','[\'PageLayout:\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20190523203046/page-12-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190523203043/page-23-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190523203045/page-31-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190523204109/page-c-1-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190523204104/page-2-c-300x165.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190523204106/page-3-c-300x165.png\']','[]','[\'https://www.geeksforgeeks.org/hard/\', \'https://www.geeksforgeeks.org/kivy-tutorial/\', \'https://kivy.org/doc/stable/api-kivy.utils.html\', \'https://media.geeksforgeeks.org/wp-content/uploads/20190523204914/Page-layout.webm\', \'https://kivy.org/doc/stable/api-kivy.uix.pagelayout.html#kivy.uix.pagelayout.PageLayout.on_touch_down\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Kivy Tutorial – Learn Kivy with Examples.xa0\', \'To use PageLayout you have to import it by the below command:xa0xa0\', \'Basic Approach to create PageLayout:xa0xa0\', \'Implementation of the Approach:xa0\', \'Output:Page 1 imagexa0\', \'Page 2 imagexa0\', \'Page 3 imagexa0\', \'Implementation of the PageLayout with featuresxa0\', \'Output:Page 1xa0\', \'Video Output:xa0xa0\']','[\'Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux, and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.\', \'Note:xa0PageLayout does not currently honor the size_hint, size_hint_min, size_hint_max, or pos_hint properties.That means we can not use all these in a page layout.\', \'In PageLayout You can add some features on every page. We can add image, create canvas, add color, add multiple widgets, multiple layoutsxa0This is how we can use the PageLayout in an efficient way. One of the best example Our gallery Contains multiple pages.Below is the code in which i am adding the different color to every page with the help of get_color_from_hex\', \'Note: More effective when works on Android, Ios, any other touch supported Laptops.xa0Reference: https://kivy.org/doc/stable/api-kivy.uix.pagelayout.htmlxa0\']','[\'The PageLayout works in a different manner from other layouts. It is a dynamic layout, in the sense that it allows flipping through pages using its borders. The idea is that its components are stacked in front of each other, and we can just see the one that is on top.xa0The PageLayout class is used to create a simple multi-page layout, in a way that allows easy flipping from one page to another using border.\']','[\'# Sample Python application demonstrating # How to create PageLayout in Kivy   import kivy   # base Class of your App inherits from the App class.  # app:always refers to the instance of your application  from kivy.app import App # The PageLayout class is used to create# a simple multi-page layout,# in a way that allows easy flipping from# one page to another using borders.from kivy.uix.pagelayout import PageLayout # creates the button in kivy # if not imported shows the error from kivy.uix.button import Button   class PageLayout(PageLayout):    \"\"\"    Define class PageLayout here    \"\"\"      def __init__(self):                 # The super function in Python can be        # used to gain access to inherited methods        # which is either from a parent or sibling class.        super(PageLayout, self).__init__()         # creating buttons on different pages        btn1 = Button(text =\'Page 1\')                 btn2 = Button(text =\'Page 2\')          btn3 = Button(text =\'Page 3\')         # adding button on the screen        # by add widget method        self.add_widget(btn1)         self.add_widget(btn2)         self.add_widget(btn3)   # creating the App classclass Page_LayoutApp(App):    \"\"\"    App class here    \"\"\"      def build(self):        \"\"\"        build function here        \"\"\"        return PageLayout()   # Run the Appif __name__ == \'__main__\':    Page_LayoutApp().run()\', \'# Sample Python application demonstrating the# working of PageLayout in Kivy with some features   import kivy   # base Class of your App inherits from the App class.  # app:always refers to the instance of your application  from kivy.app import App # The PageLayout class is used to create# a simple multi-page layout,# in a way that allows easy flipping from# one page to another using borders.from kivy.uix.pagelayout import PageLayout # creates the button in kivy # if not imported shows the error from kivy.uix.button import Button  # The Utils module provides a selection of general utility# functions and classes that may be useful for various applications.# These include maths, color, algebraic and platform functions.# Here we are using color from the module# By get_color_from_hex# Transform a hex string color to a kivy Color.from kivy.utils import get_color_from_hex   class PageLayout(PageLayout):    \"\"\"    Define class PageLayout here    \"\"\"      def __init__(self):                 # The super function in Python can be        # used to gain access to inherited methods        # which is either from a parent or sibling class.        super(PageLayout, self).__init__()         # creating buttons on different pages         # Button 1 or Page 1        btn1 = Button(text =\'Page 1\')        # Adding Colour to page        # Here we are using colour from             btn1.background_color = get_color_from_hex(\'# FF0000\')          btn2 = Button(text =\'Page 2\')        btn2.background_color = get_color_from_hex(\'# 00FF00\')          btn3 = Button(text =\'Page 3\')        btn3.background_color = get_color_from_hex(\'# 0000FF\')           # adding button on the screen        # by add widget method        self.add_widget(btn1)         self.add_widget(btn2)         self.add_widget(btn3)   # creating the App classclass Page_LayoutApp(App):    \"\"\"    App class here    \"\"\"      def build(self):        \"\"\"        build function here        \"\"\"        return PageLayout()   # Run the Appif __name__ == \'__main__\':    Page_LayoutApp().run()\']','[\'from kivy.uix.pagelayout import PageLayout\', \'1) import kivy\n2) import kivyApp\n3) import Pagelayout\n4) import button\n5) Set minimum version(optional)\n6) create App class:\n        - define build() function\n7) return Layout/widget/Class(according to requirement)\n8) Run an instance of the class\']','[]','[]'),(264,'[\'Matplotlib Tutorial\']','[\'Getting Started\', \'Python3\', \'Pyplot\', \'Python3\', \'Figure class\', \'Python3\', \'Python3\', \'Axes Class\', \'Python3\', \'Python3\', \'Setting Limits and Tick labels\', \'Python3\', \'Multiple Plots\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'What is a Legend?\', \'Python3\', \'Creating Different Types of Plots\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Working with Images\', \'Python3\', \'Customizing Plots in Matplotlib\', \'More articles on Matplotlib\', \'Exercises, Applications, and Projects\']','[\'Creating the Legend\', \'Line Graph\', \'Bar chart\', \'Histograms\', \'Scatter Plot\', \'Pie Chart\', \'3D Plotsxa0\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210114194822/simpleplotmatplotlibtutorial.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200325205925/plot15.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210114185730/pythonmatplotlobutorialfigureclass.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210114190206/pythonmatplotlibtutorialfigureclass2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200521151556/python-matplotlib-axes1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210114192915/pythonaxesclassmatplotlibtutorial.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210114231320/matplotlobtutorialsetimitandticklabel.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210114200428/matplotlibtutorialmultipleplots.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210114201322/matplotlibtutorialsubplots.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210114202524/matplotlibtutorialsubplots.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210114203337/matplotlibtutorialsubplot2grid.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210115133429/matplotlibtutoriallegend.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210115141120/matplotlibtutoriallinechart.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210115152505/matplotlibtutorialbarchart.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210115155021/matplotlibtutorialhistogram.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210115170714/matplotlibtutorialscatterplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210115162910/matplotlobtutorialpiechart.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210115173126/matplotlibtutorial3dplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210115173712/matplotlibtutorial3dplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200506231821/g4g_1.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/#getting\', \'https://www.geeksforgeeks.org/#pyplot\', \'https://www.geeksforgeeks.org/#figure\', \'https://www.geeksforgeeks.org/#axes\', \'https://www.geeksforgeeks.org/#limits\', \'https://www.geeksforgeeks.org/#multiple\', \'https://www.geeksforgeeks.org/#what\', \'https://www.geeksforgeeks.org/#creating\', \'https://www.geeksforgeeks.org/#line\', \'https://www.geeksforgeeks.org/#bar\', \'https://www.geeksforgeeks.org/#histogram\', \'https://www.geeksforgeeks.org/#scatter\', \'https://www.geeksforgeeks.org/#pie\', \'https://www.geeksforgeeks.org/#3d\', \'https://www.geeksforgeeks.org/#images\', \'https://www.geeksforgeeks.org/#customizing\', \'https://www.geeksforgeeks.org/#more\', \'https://www.geeksforgeeks.org/#exercises\', \'https://www.geeksforgeeks.org/tag/python-matplotlib/\', \'https://www.geeksforgeeks.org/environment-setup-for-matplotlib/\', \'https://www.geeksforgeeks.org/using-matplotlib-with-jupyter-notebook/\', \'https://www.geeksforgeeks.org/simple-plot-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/python-introduction-matplotlib/\', \'https://www.geeksforgeeks.org/simple-plot-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/pyplot-in-matplotlib/\', \'https://www.geeksforgeeks.org/pyplot-in-matplotlib/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-plot-function-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-title-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-imshow-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-legend-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-subplots-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-colors-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-grid-in-python/\', \'https://www.geeksforgeeks.org/tag/matplotlib-pyplot-class/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-add_axes-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-clear-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-colorbar-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-get_figwidth-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-get_figheight-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-subplots-in-python/\', \'https://www.geeksforgeeks.org/tag/matplotlib-figure-class/\', \'https://www.geeksforgeeks.org/matplotlib-axes-class/\', \'https://www.geeksforgeeks.org/matplotlib-axes-class/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-update-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-draw-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-get_figure-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-set_figure-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-properties-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-class/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-set_xlim-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-set_ylim-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-set_xticklabels-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-set_yticklabels-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-add_axes-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-add_axes-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-subplot-function-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-subplots-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-subplot2grid-in-python/\', \'https://www.geeksforgeeks.org/how-to-create-multiple-subplots-in-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/how-to-add-title-to-subplots-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-set-a-single-main-title-for-all-the-subplots-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-turn-off-the-axes-for-subplots-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-create-different-subplot-sizes-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-set-the-spacing-between-subplots-in-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/python-matplotlib-sub-plotting-using-object-oriented-api/\', \'https://www.geeksforgeeks.org/make-subplots-span-multiple-grid-rows-and-columns-in-matplotlib/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-legend-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-legend-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-legend-in-python/\', \'https://www.geeksforgeeks.org/change-the-legend-position-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-change-legend-font-size-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-change-the-vertical-spacing-between-legend-entries-in-matplotlib/\', \'https://www.geeksforgeeks.org/use-multiple-columns-in-a-matplotlib-legend/\', \'https://www.geeksforgeeks.org/how-to-create-a-single-legend-for-all-subplots-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-manually-add-a-legend-with-a-color-box-on-a-matplotlib-figure/\', \'https://www.geeksforgeeks.org/how-to-place-legend-outside-of-the-plot-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-remove-the-legend-in-matplotlib/\', \'https://www.geeksforgeeks.org/remove-the-legend-border-in-matplotlib/\', \'https://www.geeksforgeeks.org/line-chart-in-matplotlib-python/\', \'https://www.geeksforgeeks.org/line-plot-styles-in-matplotlib/\', \'https://www.geeksforgeeks.org/plot-a-horizontal-line-in-matplotlib/\', \'https://www.geeksforgeeks.org/plot-a-vertical-line-in-matplotlib/\', \'https://www.geeksforgeeks.org/plot-multiple-lines-in-matplotlib/\', \'https://www.geeksforgeeks.org/change-the-line-opacity-in-matplotlib/\', \'https://www.geeksforgeeks.org/increase-the-thickness-of-a-line-with-matplotlib/\', \'https://www.geeksforgeeks.org/plot-line-graph-from-numpy-array/\', \'https://www.geeksforgeeks.org/how-to-fill-between-multiple-lines-in-matplotlib/\', \'https://www.geeksforgeeks.org/bar-plot-in-matplotlib/\', \'https://www.geeksforgeeks.org/draw-a-horizontal-bar-chart-with-matplotlib/\', \'https://www.geeksforgeeks.org/create-a-stacked-bar-plot-in-matplotlib/\', \'https://www.geeksforgeeks.org/stacked-percentage-bar-plot-in-matplotlib/\', \'https://www.geeksforgeeks.org/plotting-back-to-back-bar-charts-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-display-the-value-of-each-bar-in-a-bar-chart-using-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-annotate-bars-in-barplot-with-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/how-to-annotate-bars-in-grouped-barplot-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-hist-in-python/\', \'https://www.geeksforgeeks.org/plotting-histogram-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/create-a-cumulative-histogram-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-plot-two-histograms-together-in-matplotlib/\', \'https://www.geeksforgeeks.org/overlapping-histograms-with-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/bin-size-in-matplotlib-histogram/\', \'https://www.geeksforgeeks.org/compute-the-histogram-of-a-set-of-data-using-numpy-in-python/\', \'https://www.geeksforgeeks.org/plot-2-d-histogram-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-scatter-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-scatter-in-python/\', \'https://www.geeksforgeeks.org/how-to-add-a-legend-to-a-scatter-plot-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-connect-scatterplot-points-with-line-in-matplotlib/https://www.geeksforgeeks.org/how-to-connect-scatterplot-points-with-line-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-create-a-scatter-plot-with-several-colors-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-increase-the-size-of-scatter-points-in-matplotlib/\', \'https://www.geeksforgeeks.org/matplotlib-axes-axes-pie-in-python/\', \'https://www.geeksforgeeks.org/plot-a-pie-chart-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-set-border-for-wedges-in-matplotlib-pie-chart/\', \'https://www.geeksforgeeks.org/radially-displace-pie-chart-wedge-in-matplotlib/\', \'https://www.geeksforgeeks.org/three-dimensional-plotting-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/3d-scatter-plotting-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/3d-surface-plotting-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/3d-wireframe-plotting-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/3d-contour-plotting-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/tri-surface-plot-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/surface-plots-and-contour-plots-in-python/\', \'https://www.geeksforgeeks.org/how-to-change-angle-of-3d-plot-in-python/\', \'https://www.geeksforgeeks.org/how-to-animate-3d-graph-using-matplotlib/\', \'https://www.geeksforgeeks.org/draw-contours-on-an-unstructured-triangular-grid-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/working-with-images-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/python-working-with-png-images-using-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-display-an-image-in-grayscale-in-matplotlib/\', \'https://www.geeksforgeeks.org/plot-a-point-or-a-line-on-an-image-with-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-draw-rectangle-on-image-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-display-an-opencv-image-in-python-with-matplotlib/\', \'https://www.geeksforgeeks.org/calculate-the-area-of-an-image-using-matplotlib/\', \'https://www.geeksforgeeks.org/style-plots-using-matplotlib/\', \'https://www.geeksforgeeks.org/change-plot-size-in-matplotlib-python/\', \'https://www.geeksforgeeks.org/how-to-change-the-transparency-of-a-graph-plot-in-matplotlib-with-python/\', \'https://www.geeksforgeeks.org/how-to-change-the-color-of-a-graph-plot-in-matplotlib-with-python/\', \'https://www.geeksforgeeks.org/how-to-change-fonts-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-change-the-font-size-of-the-title-in-a-matplotlib-figure/\', \'https://www.geeksforgeeks.org/how-to-set-tick-labels-font-size-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-set-plot-background-color-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-generate-a-random-color-for-a-matplotlib-plot-in-python/\', \'https://www.geeksforgeeks.org/add-text-inside-the-plot-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-add-text-to-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-change-matplotlib-color-bar-size-in-python/\', \'https://www.geeksforgeeks.org/how-to-manually-add-a-legend-with-a-color-box-on-a-matplotlib-figure/\', \'https://www.geeksforgeeks.org/how-to-change-the-size-of-axis-labels-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-hide-axis-text-ticks-or-tick-labels-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-adjust-position-of-axis-labels-in-matplotlib/\', \'https://www.geeksforgeeks.org/hide-axis-borders-and-white-spaces-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-create-an-empty-figure-with-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/change-the-x-or-y-interval-of-a-matplotlib-figure/\', \'https://www.geeksforgeeks.org/how-to-add-a-grid-on-a-figure-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-change-the-size-of-figures-drawn-with-matplotlib/\', \'https://www.geeksforgeeks.org/place-plots-side-by-side-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-reverse-axes-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-remove-the-frame-from-a-matplotlib-figure-in-python/\', \'https://www.geeksforgeeks.org/use-different-y-axes-on-the-left-and-right-of-a-matplotlib-plot/\', \'https://www.geeksforgeeks.org/how-to-add-a-y-axis-label-to-the-secondary-y-axis-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-plot-a-simple-vector-field-in-matplotlib/\', \'https://www.geeksforgeeks.org/difference-between-cla-clf-and-close-methods-in-matplotlib/\', \'https://www.geeksforgeeks.org/make-filled-polygons-between-two-horizontal-curves-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-save-a-plot-to-a-file-using-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-plot-logarithmic-axes-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-put-the-y-axis-in-logarithmic-scale-with-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-draw-2d-heatmap-using-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/plotting-correlation-matrix-using-python/\', \'https://www.geeksforgeeks.org/plot-candlestick-chart-using-mplfinance-module-in-python/\', \'https://www.geeksforgeeks.org/autocorrelation-plot-using-matplotlib/\', \'https://www.geeksforgeeks.org/stem-and-leaf-plots-in-python/\', \'https://www.geeksforgeeks.org/python-basic-gantt-chart-using-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-plot-list-of-x-y-coordinates-in-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-put-the-origin-in-the-center-of-the-figure-with-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-draw-a-circle-using-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/how-to-plot-mean-and-standard-deviation-in-pandas/\', \'https://www.geeksforgeeks.org/how-to-plot-a-complex-number-in-python-using-matplotlib/\', \'https://www.geeksforgeeks.org/3d-sine-wave-using-matplotlib-python/\', \'https://www.geeksforgeeks.org/plotting-a-square-wave-using-matplotlib-numpy-and-scipy/\', \'https://www.geeksforgeeks.org/how-to-make-a-square-plot-with-equal-axes-in-matplotlib/\', \'https://www.geeksforgeeks.org/plotting-a-sawtooth-wave-using-matplotlib/\', \'https://www.geeksforgeeks.org/visualizing-bubble-sort-using-python/\', \'https://www.geeksforgeeks.org/visualization-of-merge-sort-using-matplotlib/\', \'https://www.geeksforgeeks.org/visualization-of-quick-sort-using-matplotlib/\', \'https://www.geeksforgeeks.org/insertion-sort-visualization-using-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/3d-visualisation-of-quick-sort-using-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/3d-visualisation-of-merge-sort-using-matplotlib/\', \'https://www.geeksforgeeks.org/3d-visualisation-of-insertion-sort-using-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/how-to-plot-a-normal-distribution-with-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/normal-distribution-plot-using-numpy-and-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-create-a-poisson-probability-mass-function-plot-in-python/\', \'https://www.geeksforgeeks.org/find-all-peaks-amplitude-lies-above-0-using-scipy/\', \'https://www.geeksforgeeks.org/how-to-plot-ricker-curve-using-scipy-python/\', \'https://www.geeksforgeeks.org/how-to-plot-a-confidence-interval-in-python/\', \'https://www.geeksforgeeks.org/how-to-highlight-a-time-range-in-time-series-plot-in-python-with-matplotlib/\', \'https://www.geeksforgeeks.org/how-to-make-a-time-series-plot-with-rolling-average-in-python/\', \'https://www.geeksforgeeks.org/digital-band-pass-butterworth-filter-in-python/\', \'https://www.geeksforgeeks.org/digital-band-reject-butterworth-filter-in-python/\', \'https://www.geeksforgeeks.org/digital-high-pass-butterworth-filter-in-python/\', \'https://www.geeksforgeeks.org/digital-low-pass-butterworth-filter-in-python/\', \'https://www.geeksforgeeks.org/design-an-iir-notch-filter-to-denoise-signal-using-python/\', \'https://www.geeksforgeeks.org/design-an-iir-bandpass-chebyshev-type-2-filter-using-scipy-python/\', \'https://www.geeksforgeeks.org/visualizing-tiff-file-using-matplotlib-and-gdal-using-python/\', \'https://www.geeksforgeeks.org/plotting-various-sounds-on-graphs-using-python-and-matplotlib/\', \'https://www.geeksforgeeks.org/covid-19-data-visualization-using-matplotlib-in-python/\', \'https://www.geeksforgeeks.org/analyzing-selling-price-of-used-cars-using-python/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Table Of Contentxa0\', \'Recent Articles on Matplotlib !!!\', \'matplotlib.pyplot.plot(*args, scalex=True, scaley=True, data=None, **kwargs)\', \'>>> More Functions on Pyplot class\', \'Example 1:\', \'Example 2: Creating multiple plots\', \'>>> More Functions in Figure Class\', \'matplotlib.pyplot.axis(*args, emit=True, **kwargs)\', \'Example 1:\', \'Example 2:xa0\', \'>>> More Functions on Axes Class\', \'Method 1: Using the add_axes() methodxa0\', \'The add_axes() method figure module of matplotlib library is used to add an axes to the figure.\', \'add_axes(self, *args, **kwargs)\', \'The add_axes() method adds the plot in the same figure by creating another axes object.\', \'Method 2: Using subplot() method.xa0\', \'This method adds another plot to the current figure at the specified grid position.\', \'subplot(nrows, ncols, index, **kwargs)\', \'subplot(pos, **kwargs)xa0\', \'subplot(ax)\', \'Note: Subplot() function have the following disadvantages –xa0\', \'Method 3: Using subplots() method\', \'This function is used to create figure and multiple subplots at the same time.\', \'Method 4: Using subplot2grid() method\', \'Plt.subplot2grid(shape, location, rowspan, colspan)\', \'Refer to the below articles to get detailed information about subplots\', \'matplotlib.pyplot.legend([“blue”, “green”], bbox_to_anchor=(0.75, 1.15), ncol=2)\', \'Refer to the below articles to get detailed information about the legend –xa0\', \'Refer to the below article to get detailed information about line chart.\', \'plt.bar(x, height, width, bottom, align)\', \'Refer to the below articles to get detailed information about Bar charts –\', \'Refer to the below articles to get detailed information about histograms.\', \'Refer to the below articles to get detailed information about the scatter plot.\', \'matplotlib.pyplot.pie(data, explode=None, labels=None, colors=None, autopct=None, shadow=False)\', \'Refer to the below articles to get detailed information about pie charts.\', \'Refer to the below articles to get detailed information about 3D plots.\', \'Refer to the below articles to get detailed information about working with images using Matplotlib.\']','[\'Matplotlib is easy to use and an amazing visualizing library in Python. It is built on NumPy arrays and designed to work with the broader SciPy stack and consists of several plots like line, bar, scatter, histogram, etc.xa0\', \'In this article, we will learn about Python plotting with Matplotlib from basics to advance with the help of a huge dataset containing information about different types of plots and their customizations.\', \'Before we start learning about Matplotlib we first have to set up the environment and will also see how to use Matplotlib with Jupyter Notebook:\', \'After learning about the environment setup and how to use Matplotlib with Jupyter let’s create a simple plot. We will be plotting two lists containing the X, Y coordinates for the plot.\', \'In the above example, the elements of X and Y provides the coordinates for the x axis and y axis and a straight line is plotted against those coordinates. For a detailed introduction to Matplotlib and to see how basic charts are plotted refer to the below article.\', \'In the above article, you might have seen Pyplot was imported in code and must have wondered what is Pyplot. Don’t worry we will discuss the Pyplot in the next section.xa0\', \'Pyplot is a Matplotlib module that provides a MATLAB like interface. Pyplot provides functions that interact with the figure i.e. creates a figure, decorates the plot with labels, creates plotting area in a figure.\', \'Refer to the below articles to get detailed information about Pyplot and functions associated with this class.\', \'Matplotlib take care of the creation of inbuilt defaults like Figure and Axes. Don’t worry about these terms we will study about them in detail in the below section but let’s take a brief about these terms.\', \'Figure class is the top-level container that contains one or more axes. It is the overall window or page on which everything is drawn.\', \'class matplotlib.figure.Figure(figsize=None, dpi=None, facecolor=None, edgecolor=None, linewidth=0.0, frameon=None, subplotpars=None, tight_layout=None, constrained_layout=None)\', \'Refer to the below articles to get detailed information about the Figure class and functions associated with it.\', \'Axes class is the most basic and flexible unit for creating sub-plots. A given figure may contain many axes, but a given axes can only be present in one figure. The axes() function creates the axes object. Let’s see the below example.\', \'Refer to the below articles to get detailed information about the axes class and functions associated with it.\', \'You might have seen that Matplotlib automatically sets the values and the markers(points) of the x and y axis, however, it is possible to set the limit and markers manually. set_xlim() and set_ylim() functions are used to set the limits of the x-axis and y-axis respectively. Similarly, set_xticklabels() and set_yticklabels() functions are used to set tick labels.\', \'Till now you must have got a basic idea about Matplotlib and plotting some simple plots, now what if you want to plot multiple plots in the same figure. This can be done using multiple ways. One way was discussed above using the add_axes() method of the figure class. Let’s see various ways multiple plots can be added with the help of examples.\', \'matplotlib.pyplot.subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw)\', \'This function give additional flexibility in creating axes object at a specified location inside a grid. It also helps in spanning the axes object across multiple rows or columns. In simpler words, this function is used to create multiple charts within the same figure.\', \'A legend is an area describing the elements of the graph. In simple terms, it reflects the data displayed in the graph’s Y-axis. It generally appears as the box containing a small sample of each color on the graph and a small description of what this data means.\', \'A Legend can be created using the legend() method. The attribute Loc in the legend() is used to specify the location of the legend. The default value of loc is loc=”best” (upper left). The strings ‘upper left’, ‘upper right’, ‘lower left’, ‘lower right’ place the legend at the corresponding corner of the axes/figure.\', \'The attribute bbox_to_anchor=(x, y) of legend() function is used to specify the coordinates of the legend, and the attribute ncol represents the number of columns that the legend has. Its default value is 1.\', \'Till now you all must have seen that we are working with only the line charts as they are easy to plot and understand. Line Chart is used to represent a relationship between two data X and Y on a different axis. It is plotted using the pot() function. Let’s see the below example\', \'A bar plot or bar chart is a graph that represents the category of data with rectangular bars with lengths and heights that is proportional to the values which they represent. The bar plots can be plotted horizontally or vertically. A bar chart describes the comparisons between the discrete categories. It can be created using the bar() method.\', \'matplotlib.pyplot.hist(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype=’bar’, align=’mid’, orientation=’vertical’, rwidth=None, log=False, color=None, label=None, stacked=False, \\*, data=None, \\*\\*kwargs)\', \'Scatter plots are used to observe relationship between variables and uses dots to represent the relationship between them. The scatter() method in the matplotlib library is used to draw a scatter plot.\', \'matplotlib.pyplot.scatter(x_axis_data, y_axis_data, s=None, c=None, marker=None, cmap=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors=None)\', \'A Pie Chart is a circular statistical plot that can display only one series of data. The area of the chart is the total percentage of the given data. The area of slices of the pie represents the percentage of the parts of the data. The slices of pie are called wedges. The area of the wedge is determined by the length of the arc of the wedge. It can be created using the pie() method.\', \'Matplotlib was introduced keeping in mind, only two-dimensional plotting. But at the time when the release of 1.0 occurred, the 3D utilities were developed upon the 2D and thus, we have a 3D implementation of data available today.\', \'The above code lets the creation of a 3D plot in Matplotlib. We can create different types of 3D plots like scatter plots, contour plots, surface plots, etc. Let’s create a simple 3D line plot.\', \'The image module in matplotlib library is used for working with images in Python. The image module also includes two useful methods which are imread which is used to read images and imshow which is used to display the image.\']','[\'A histogram is basically used to represent data in the form of some groups. It is a type of bar plot where the X-axis represents the bin ranges while the Y-axis gives information about frequency. To create a histogram the first step is to create a bin of the ranges, then distribute the whole range of the values into a series of intervals, and count the values which fall into each of the intervals. Bins are clearly identified as consecutive, non-overlapping intervals of variables. The hist() function is used to compute and create histogram of x.\']','[\'import matplotlib.pyplot as plt   # initializing the data   x = [10, 20, 30, 40]   y = [20, 30, 40, 50]   # plotting the data   plt.plot(x, y)   # Adding the title   plt.title(\"Simple Plot\")   # Adding the labels   plt.ylabel(\"y-axis\")   plt.xlabel(\"x-axis\")   plt.show()\', \'# Python program to show pyplot module   import matplotlib.pyplot as plt    plt.plot([1, 2, 3, 4], [1, 4, 9, 16])    plt.axis([0, 6, 0, 20])    plt.show()\', \'# Python program to show pyplot module   import matplotlib.pyplot as plt    from matplotlib.figure import Figure    # Creating a new figure with width = 5 inches   # and height = 4 inches   fig = plt.figure(figsize =(5, 4))    # Creating a new axes for the figure   ax = fig.add_axes([1, 1, 1, 1])    # Adding the data to be plotted   ax.plot([2, 3, 4, 5, 5, 6, 6], [5, 7, 1, 3, 4, 6 ,8])   plt.show()\', \'# Python program to show pyplot module   import matplotlib.pyplot as plt    from matplotlib.figure import Figure    # Creating a new figure with width = 5 inches   # and height = 4 inches   fig = plt.figure(figsize =(5, 4))    # Creating first axes for the figure   ax1 = fig.add_axes([1, 1, 1, 1])    # Creating second axes for the figure   ax2 = fig.add_axes([1, 0.5, 0.5, 0.5])   # Adding the data to be plotted   ax1.plot([2, 3, 4, 5, 5, 6, 6], [5, 7, 1, 3, 4, 6 ,8])   ax2.plot([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])   plt.show()\', \'# Python program to show pyplot module   import matplotlib.pyplot as plt    from matplotlib.figure import Figure    # Creating the axes object with argument as    # [left, bottom, width, height]   ax = plt.axes([1, 1, 1, 1])\', \'# Python program to show pyplot module   import matplotlib.pyplot as plt    from matplotlib.figure import Figure    fig = plt.figure(figsize = (5, 4))   # Adding the axes to the figure   ax = fig.add_axes([1, 1, 1, 1])   # plotting 1st dataset to the figure   ax1 = ax.plot([1, 2, 3, 4], [1, 2, 3, 4])   # plotting 2nd dataset to the figure   ax2 = ax.plot([1, 2, 3, 4], [2, 3, 4, 5])   plt.show()\', \'# Python program to show pyplot module   import matplotlib.pyplot as plt    from matplotlib.figure import Figure    x = [3, 1, 3]    y = [3, 2, 1]    # Creating a new figure with width = 5 inches   # and height = 4 inches   fig = plt.figure(figsize =(5, 4))    # Creating first axes for the figure   ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])    # Adding the data to be plotted   ax.plot(x, y)   ax.set_xlim(1, 2)   ax.set_xticklabels((   \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"))    plt.show()\', \'# Python program to show pyplot module   import matplotlib.pyplot as plt    from matplotlib.figure import Figure    # Creating a new figure with width = 5 inches   # and height = 4 inches   fig = plt.figure(figsize =(5, 4))    # Creating first axes for the figure   ax1 = fig.add_axes([0.1, 0.1, 0.8, 0.8])    # Creating second axes for the figure   ax2 = fig.add_axes([0.5, 0.5, 0.3, 0.3])   # Adding the data to be plotted   ax1.plot([5, 4, 3, 2, 1], [2, 3, 4, 5, 6])   ax2.plot([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])   plt.show()\', \'import matplotlib.pyplot as plt    # data to display on plots    x = [3, 1, 3]    y = [3, 2, 1]    z = [1, 3, 1]    # Creating figure object    plt.figure()    # addind first subplot    plt.subplot(121)    plt.plot(x, y)    # addding second subplot    plt.subplot(122)    plt.plot(z, y)\', \'import matplotlib.pyplot as plt    # Creating the figure and subplots   # according the argument passed   fig, axes = plt.subplots(1, 2)   # plotting the data in the 1st subplot   axes[0].plot([1, 2, 3, 4], [1, 2, 3, 4])   # plotting the data in the 1st subplot only   axes[0].plot([1, 2, 3, 4], [4, 3, 2, 1])   # plotting the data in the 2nd subplot only   axes[1].plot([1, 2, 3, 4], [1, 1, 1, 1])\', \'import matplotlib.pyplot as plt    # data to display on plots    x = [3, 1, 3]    y = [3, 2, 1]    z = [1, 3, 1]    # adding the subplots   axes1 = plt.subplot2grid (   (7, 1), (0, 0), rowspan = 2,  colspan = 1)    axes2 = plt.subplot2grid (   (7, 1), (2, 0), rowspan = 2, colspan = 1)    axes3 = plt.subplot2grid (   (7, 1), (4, 0), rowspan = 2, colspan = 1)    # plotting the data   axes1.plot(x, y)   axes2.plot(x, z)   axes3.plot(z, y)\', \'import matplotlib.pyplot as plt    # data to display on plots    x = [3, 1, 3]    y = [3, 2, 1]    plt.plot(x, y)   plt.plot(y, x)   # Adding the legends   plt.legend([\"blue\", \"orange\"])   plt.show()\', \'import matplotlib.pyplot as plt    # data to display on plots    x = [3, 1, 3]    y = [3, 2, 1]    # This will plot a simple line chart   # with elements of x as x axis and y   # as y axis   plt.plot(x, y)   plt.title(\"Line Chart\")   # Adding the legends   plt.legend([\"Line\"])   plt.show()\', \'import matplotlib.pyplot as plt    # data to display on plots    x = [3, 1, 3, 12, 2, 4, 4]    y = [3, 2, 1, 4, 5, 6, 7]    # This will plot a simple bar chart   plt.bar(x, y)   # Title to the plot   plt.title(\"Bar Chart\")   # Adding the legends   plt.legend([\"bar\"])   plt.show()\', \'import matplotlib.pyplot as plt    # data to display on plots    x = [1, 2, 3, 4, 5, 6, 7, 4]    # This will plot a simple histogram   plt.hist(x, bins = [1, 2, 3, 4, 5, 6, 7])   # Title to the plot   plt.title(\"Histogram\")   # Adding the legends   plt.legend([\"bar\"])   plt.show()\', \'import matplotlib.pyplot as plt    # data to display on plots    x = [3, 1, 3, 12, 2, 4, 4]   y = [3, 2, 1, 4, 5, 6, 7]   # This will plot a simple scatter chart   plt.scatter(x, y)   # Adding legend to the plot   plt.legend(\"A\")   # Title to the plot   plt.title(\"Scatter chart\")   plt.show()\', \'import matplotlib.pyplot as plt    # data to display on plots    x = [1, 2, 3, 4]    # this will explode the 1st wedge   # i.e. will separate the 1st wedge   # from the chart   e  =(0.1, 0, 0, 0)   # This will plot a simple pie chart   plt.pie(x, explode = e)   # Title to the plot   plt.title(\"Pie chart\")   plt.show()\', \"import matplotlib.pyplot as plt    # Creating the figure object   fig = plt.figure()   # keeping the projection = 3d   # ctreates the 3d plot   ax = plt.axes(projection = \'3d\')\", \"import matplotlib.pyplot as plt    x = [1, 2, 3, 4, 5]   y = [1, 4, 9, 16, 25]   z = [1, 8, 27, 64, 125]   # Creating the figure object   fig = plt.figure()   # keeping the projection = 3d   # ctreates the 3d plot   ax = plt.axes(projection = \'3d\')   ax.plot3D(z, y, x)\", \"# importing required libraries    import matplotlib.pyplot as plt    import matplotlib.image as img    # reading the image    testImage = img.imread(\'g4g.png\')    # displaying the image    plt.imshow(testImage)\"]','[]','[]','[\'Getting Started|||Pyplot|||Figure class|||Axes Class|||Setting Limits and Tick labels|||Multiple Plots|||What is a Legend?|||Creating Different Types of PlotsLine GraphBar chartHistogramsScatter PlotPie Chart3D Plots|||Line Graph|||Bar chart|||Histograms|||Scatter Plot|||Pie Chart|||3D Plots|||Working with Images|||Customizing Plots in Matplotlib|||More articles on Matplotlib|||Exercises, Applications, and Projects&&&Line Graph|||Bar chart|||Histograms|||Scatter Plot|||Pie Chart|||3D Plots&&&Environment Setup for Matplotlib|||Using Matplotlib with Jupyter Notebook&&&Introduction to Matplotlib|||Simple Plot in Python using Matplotlib&&&Pyplot in Matplotlib|||Matplotlib.pyplot.plot() function in Python|||Matplotlib.pyplot.title() in Python|||matplotlib.pyplot.imshow() in Python|||Matplotlib.pyplot.legend() in Python|||Matplotlib.pyplot.subplots() in Python|||Matplotlib.pyplot.colors() in Python|||Matplotlib.pyplot.grid() in Python&&&Figure: This class is the top-level container for all the plots means it is the overall window or page on which everything is drawn. A figure object can be considered as a box-like container that can hold one or more axes.|||Axes: This class is the most basic and flexible component for creating sub-plots. You might confuse axes as the plural of axis but it is an individual plot or graph. A given figure may contain many axes but a given axes can only be in one figure.&&&Matplotlib.figure.Figure() in Python|||Matplotlib.figure.Figure.add_axes() in Python|||Matplotlib.figure.Figure.clear() in Python|||Matplotlib.figure.Figure.colorbar() in Python|||Matplotlib.figure.Figure.get_figwidth() in Python|||Matplotlib.figure.Figure.get_figheight() in Python|||Matplotlib.figure.Figure.subplots() in Python&&&Matplotlib – Axes Class|||Matplotlib.axes.Axes.update() in Python|||Matplotlib.axes.Axes.draw() in Python|||Matplotlib.axes.Axes.get_figure() in Python|||Matplotlib.axes.Axes.set_figure() in Python|||Matplotlib.axes.Axes.properties() in Python&&&It does not allow adding multiple subplots at the same time.|||It deletes the preexisting plot of the figure.&&&How to create multiple subplots in Matplotlib in Python?|||How to Add Title to Subplots in Matplotlib?|||How to Set a Single Main Title for All the Subplots in Matplotlib?|||How to Turn Off the Axes for Subplots in Matplotlib?|||How to Create Different Subplot Sizes in Matplotlib?|||How to set the spacing between subplots in Matplotlib in Python?|||Matplotlib Sub plotting using object oriented API|||Make subplots span multiple grid rows and columns in Matplotlib&&&Matplotlib.pyplot.legend() in Python|||Matplotlib.axes.Axes.legend() in Python|||Change the legend position in Matplotlib|||How to Change Legend Font Size in Matplotlib?|||How Change the vertical spacing between legend entries in Matplotlib?|||Use multiple columns in a Matplotlib legend|||How to Create a Single Legend for All Subplots in Matplotlib?|||How to manually add a legend with a color box on a Matplotlib figure ?|||How to Place Legend Outside of the Plot in Matplotlib?|||How to Remove the Legend in Matplotlib?|||Remove the legend border in Matplotlib&&&Line chart in Matplotlib|||Line plot styles in Matplotlib|||Plot a Horizontal line in Matplotlib|||Plot a Vertical line in Matplotlib|||Plot Multiple lines in Matplotlib|||Change the line opacity in Matplotlib|||Increase the thickness of a line with Matplotlib|||Plot line graph from NumPy array|||How to Fill Between Multiple Lines in Matplotlib?&&&Bar Plot in Matplotlib|||Draw a horizontal bar chart with Matplotlib|||Create a stacked bar plot in Matplotlib|||Stacked Percentage Bar Plot In MatPlotLib|||Plotting back-to-back bar charts Matplotlib|||How to display the value of each bar in a bar chart using Matplotlib?|||How To Annotate Bars in Barplot with Matplotlib in Python?|||How to Annotate Bars in Grouped Barplot in Python?&&&Plotting Histogram in Python using Matplotlib|||Create a cumulative histogram in Matplotlib|||How to plot two histograms together in Matplotlib?|||Overlapping Histograms with Matplotlib in Python|||Bin Size in Matplotlib Histogram|||Compute the histogram of a set of data using NumPy in Python|||Plot 2-D Histogram in Python using Matplotlib&&&matplotlib.pyplot.scatter() in Python|||How to add a legend to a scatter plot in Matplotlib ?|||How to Connect Scatterplot Points With Line in Matplotlib?|||How to create a Scatter Plot with several colors in Matplotlib?|||How to increase the size of scatter points in Matplotlib ?|||&&&matplotlib.axes.Axes.pie() in Python|||Plot a pie chart in Python using Matplotlib|||How to set border for wedges in Matplotlib pie chart?|||Radially displace pie chart wedge in Matplotlib&&&Three-dimensional Plotting in Python using Matplotlib|||3D Scatter Plotting in Python using Matplotlib|||3D Surface plotting in Python using Matplotlib|||3D Wireframe plotting in Python using Matplotlib|||3D Contour Plotting in Python using Matplotlib|||Tri-Surface Plot in Python using Matplotlib|||Surface plots and Contour plots in Python|||How to change angle of 3D plot in Python?|||How to animate 3D Graph using Matplotlib?|||Draw contours on an unstructured triangular grid in Python using Matplotlib&&&Working with Images in Python using Matplotlib|||Working with PNG Images using Matplotlib|||How to Display an Image in Grayscale in Matplotlib?|||Plot a Point or a Line on an Image with Matplotlib|||How to Draw Rectangle on Image in Matplotlib?|||How to Display an OpenCV image in Python with Matplotlib?|||Calculate the area of an image using Matplotlib&&&Style Plots using Matplotlib|||Change plot size in Matplotlib – Python|||How to Change the Transparency of a Graph Plot in Matplotlib with Python?|||How to Change the Color of a Graph Plot in Matplotlib with Python?|||How to Change Fonts in matplotlib?|||How to change the font size of the Title in a Matplotlib figure ?|||How to Set Tick Labels Font Size in Matplotlib?|||How to Set Plot Background Color in Matplotlib?|||How to generate a random color for a Matplotlib plot in Python?|||Add Text Inside the Plot in Matplotlib|||How to add text to Matplotlib?|||How to change Matplotlib color bar size in Python?|||How to manually add a legend with a color box on a Matplotlib figure ?|||How to change the size of axis labels in Matplotlib?|||How to Hide Axis Text Ticks or Tick Labels in Matplotlib?|||How To Adjust Position of Axis Labels in Matplotlib?|||Hide Axis, Borders and White Spaces in Matplotlib&&&How to Create an Empty Figure with Matplotlib in Python?|||Change the x or y interval of a Matplotlib figure|||How to add a grid on a figure in Matplotlib?|||How to change the size of figures drawn with matplotlib?|||Place plots side by side in Matplotlib|||How to Reverse Axes in Matplotlib?|||How to remove the frame from a Matplotlib figure in Python?|||Use different y-axes on the left and right of a Matplotlib plot|||How to Add a Y-Axis Label to the Secondary Y-Axis in Matplotlib?|||How to plot a simple vector field in Matplotlib ?|||Difference Between cla(), clf() and close() Methods in Matplotlib|||Make filled polygons between two horizontal curves in Python using Matplotlib|||How to Save a Plot to a File Using Matplotlib?|||How to Plot Logarithmic Axes in Matplotlib?|||How to put the y-axis in logarithmic scale with Matplotlib ?|||How to draw 2D Heatmap using Matplotlib in python?|||Plotting Correlation Matrix using Python|||Plot Candlestick Chart using mplfinance module in Python|||Autocorrelation plot using Matplotlib|||Stem and Leaf Plots in Python|||Python | Basic Gantt chart using Matplotlib&&&How to Plot List of X, Y Coordinates in Matplotlib?|||How to put the origin in the center of the figure with Matplotlib ?|||How to Draw a Circle Using Matplotlib in Python?|||How to Plot Mean and Standard Deviation in Pandas?|||How to plot a complex number in Python using Matplotlib ?|||3D Sine Wave Using Matplotlib – Python|||Plotting A Square Wave Using Matplotlib, Numpy And Scipy|||How to Make a Square Plot With Equal Axes in Matplotlib?|||Plotting a Sawtooth Wave using Matplotlib|||Visualizing Bubble sort using Python|||Visualization of Merge sort using Matplotlib|||Visualization of Quick sort using Matplotlib|||Insertion Sort Visualization using Matplotlib in Python|||3D Visualisation of Quick Sort using Matplotlib in Python|||3D Visualisation of Merge Sort using Matplotlib|||3D Visualisation of Insertion Sort using Matplotlib in Python|||How to plot a normal distribution with Matplotlib in Python ?|||Normal Distribution Plot using Numpy and Matplotlib|||How to Create a Poisson Probability Mass Function Plot in Python?|||Find all peaks amplitude lies above 0 Using Scipy|||How to plot ricker curve using SciPy – Python?|||How to Plot a Confidence Interval in Python?|||How To Highlight a Time Range in Time Series Plot in Python with Matplotlib?|||How to Make a Time Series Plot with Rolling Average in Python?|||Digital Band Pass Butterworth Filter in Python|||Digital Band Reject Butterworth Filter in Python|||Digital High Pass Butterworth Filter in Python|||Digital Low Pass Butterworth Filter in Python|||Design an IIR Notch Filter to Denoise Signal using Python|||Design an IIR Bandpass Chebyshev Type-2 Filter using Scipy – Python|||Visualizing Tiff File Using Matplotlib and GDAL using Python|||Plotting Various Sounds on Graphs using Python and Matplotlib|||COVID-19 Data Visualization using matplotlib in Python|||Analyzing selling price of used cars using Python\']'),(265,'[\'Python Seaborn Tutorial\']','[\'Getting Started\', \'Python3\', \'Using Seaborn with Matplotlib\', \'Python3\', \'Python3\', \'Customizing Seaborn Plots\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Color Palette\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Multiple plots with Seaborn\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Creating Different Types of Plots\', \'Relational Plots\', \'Python3\', \'Python3\', \'Python3\', \'Categorical Plots\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Distribution Plots\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Regression Plots\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'More Gaphs in Seaborn\', \'More Topics on Seaborn\']','[\'Changing Figure Aesthetic\', \'Removal of Spines\', \'Changing the figure Size\', \'Scaling the plots\', \'Setting the Style Temporarily\', \'Diverging Color Palette\', \'Sequential Color Palette\', \'Setting the default Color Palette\', \'Using Matplotlib\', \'Using Seabornxa0\', \'Relplot()\', \'Scatter Plot\', \'Line Plot\', \'Bar Plot\', \'Count Plot\', \'Box Plot\', \'Violinplot\', \'Stripplot\', \'Swarmplot\', \'Factorplot\', \'Histogram\', \'Distplot\', \'Jointplot\', \'Pairplot\', \'Rugplot\', \'KDE Plot\', \'lmplot\', \'Regplot\', \'Matrix Plots\', \'Heatmap\', \'Clustermap\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210118140758/seaborntutorialsimpleplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118151105/seaborntutorialusingwithmatplotlib.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118160040/seaborntutorialusingwithmatplotlib2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118163325/seaborntutorialstylingplots.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118164030/seaborntutorialremovingspines.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118165217/seaborntutorialchangingfiguresize.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118172228/seaborntutorialsettingthescale.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118175259/seaborntutorialtemporarystyle.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118181314/seaborntutorialcolorpalette.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118182425/seaborntutorialdivergingcolor.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118184816/seaborntutorialsequentialcolorpalette.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210118185640/seaborntutorialdefaultpalette.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119135304/seaborntutorialaddaxes.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119135550/seaborntutorialsubplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119135732/seaborntutorialsubplot2grid.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119142058/seaborntutorialfacetgrid.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119145058/seaborntutorialpairgrid.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119191304/seaborntutorialrelplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119192107/seaborntutorialscatterplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119194211/seaborntutoriallineplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119200703/seabontutorialbarplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119215829/Seaborntutorialcountplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119220412/seaborntutorialboxplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119221356/seaborntutorialviolinpot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210119221948/seaborntutorialstripplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120104605/seaborntutorialswarmplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120105259/seaborntutorialfactorplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120165925/seaborntutorialhistogram.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120121154/seaborntutorialdistplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120122026/seaborntutorialjointplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120122658/seaborntutorialpairplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120123252/seaborntutorialrugplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120131343/seaborntutorialkdeplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120133324/seaborntutoriallmplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120134808/seaborntutorialregplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210120163847/seaborntutorialheatmap.png\']','[]','[\'https://www.geeksforgeeks.org/#Getting\', \'https://www.geeksforgeeks.org/#Seaborn\', \'https://www.geeksforgeeks.org/#Customizing\', \'https://www.geeksforgeeks.org/#Aesthetic\', \'https://www.geeksforgeeks.org/#Removal\', \'https://www.geeksforgeeks.org/#Size\', \'https://www.geeksforgeeks.org/#Scaling\', \'https://www.geeksforgeeks.org/#Temporarily\', \'https://www.geeksforgeeks.org/#Color\', \'https://www.geeksforgeeks.org/#Diverging\', \'https://www.geeksforgeeks.org/#Sequential\', \'https://www.geeksforgeeks.org/#default\', \'https://www.geeksforgeeks.org/#Multiple\', \'https://www.geeksforgeeks.org/#Matplotlib\', \'https://www.geeksforgeeks.org/#Seaborn\', \'https://www.geeksforgeeks.org/#Different\', \'https://www.geeksforgeeks.org/#Relational\', \'https://www.geeksforgeeks.org/#Categorical\', \'https://www.geeksforgeeks.org/#Distribution\', \'https://www.geeksforgeeks.org/#Regression\', \'https://www.geeksforgeeks.org/#More\', \'https://www.geeksforgeeks.org/#Topics\', \'https://www.geeksforgeeks.org/tag/python-seaborn/\', \'https://www.geeksforgeeks.org/introduction-to-seaborn-python/\', \'https://www.geeksforgeeks.org/plotting-graph-using-seaborn-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-figure-in-python/\', \'https://www.geeksforgeeks.org/seaborn-style-and-color/\', \'https://www.geeksforgeeks.org/seaborn-color-palette/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-add_axes-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-subplot-function-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-subplot2grid-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-figure-figure-add_axes-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-subplot-function-in-python/\', \'https://www.geeksforgeeks.org/matplotlib-pyplot-subplot2grid-in-python/\', \'https://www.geeksforgeeks.org/python-seaborn-facetgrid-method/\', \'https://www.geeksforgeeks.org/python-seaborn-pairgrid-method/\', \'https://www.geeksforgeeks.org/python-seaborn-facetgrid-method/\', \'https://www.geeksforgeeks.org/python-seaborn-pairgrid-method/\', \'https://www.geeksforgeeks.org/relational-plots-in-seaborn-part-i/\', \'https://www.geeksforgeeks.org/relational-plots-in-seaborn-part-ii/\', \'https://www.geeksforgeeks.org/scatterplot-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/visualizing-relationship-between-variables-with-scatter-plots-in-seaborn/\', \'https://www.geeksforgeeks.org/how-to-make-scatter-plot-with-regression-line-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/scatter-plot-with-marginal-histograms-in-python-with-seaborn/\', \'https://www.geeksforgeeks.org/seaborn-lineplot-method-in-python/\', \'https://www.geeksforgeeks.org/seaborn-lineplot-method-in-python/\', \'https://www.geeksforgeeks.org/data-visualization-with-seaborn-line-plot/\', \'https://www.geeksforgeeks.org/creating-a-time-series-plot-with-seaborn-and-pandas/\', \'https://www.geeksforgeeks.org/how-to-make-a-time-series-plot-with-rolling-average-in-python/\', \'https://www.geeksforgeeks.org/seaborn-categorical-plots/\', \'https://www.geeksforgeeks.org/exploring-categorical-data/\', \'https://www.geeksforgeeks.org/seaborn-categorical-plots/\', \'https://www.geeksforgeeks.org/seaborn-barplot-method-in-python/\', \'https://www.geeksforgeeks.org/seaborn-barplot-method-in-python/\', \'https://www.geeksforgeeks.org/barplot-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/seaborn-sort-bars-in-barplot/\', \'https://www.geeksforgeeks.org/countplot-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/boxplot-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/horizontal-boxplots-with-seaborn-in-python/\', \'https://www.geeksforgeeks.org/how-to-use-seaborn-color-palette-to-color-boxplot/\', \'https://www.geeksforgeeks.org/seaborn-coloring-boxplots-with-palettes/\', \'https://www.geeksforgeeks.org/how-to-show-mean-on-boxplot-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/sort-boxplot-by-mean-with-seaborn-in-python/\', \'https://www.geeksforgeeks.org/how-to-manually-order-boxplot-in-seaborn/\', \'https://www.geeksforgeeks.org/grouped-boxplots-in-python-with-seaborn/\', \'https://www.geeksforgeeks.org/horizontal-boxplots-with-points-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/how-to-make-boxplots-with-data-points-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/box-plot-visualization-with-pandas-and-seaborn/\', \'https://www.geeksforgeeks.org/violinplot-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/geeksforgeeks.org/how-to-make-horizontal-violin-plot-with-seaborn-in-python/\', \'https://www.geeksforgeeks.org/geeksforgeeks.org/make-violinplot-with-data-points-using-seaborn/\', \'https://www.geeksforgeeks.org/how-to-make-violinpot-with-data-points-in-seaborn/\', \'https://www.geeksforgeeks.org/how-to-make-grouped-violinplot-with-seaborn-in-python/\', \'https://www.geeksforgeeks.org/stripplot-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/python-seaborn-swarmplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-swarmplot-method/\', \'https://www.geeksforgeeks.org/swarmplot-using-seaborn-in-python/\', \'https://www.geeksforgeeks.org/python-seaborn-factorplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-factorplot-method/\', \'https://www.geeksforgeeks.org/plotting-different-types-of-plots-using-factor-plot-in-seaborn/\', \'https://www.geeksforgeeks.org/seaborn-distribution-plots/\', \'https://www.geeksforgeeks.org/how-to-make-histograms-with-density-plots-with-seaborn-histplot/\', \'https://www.geeksforgeeks.org/how-to-add-outline-or-edge-color-to-histogram-in-seaborn/\', \'https://www.geeksforgeeks.org/scatter-plot-with-marginal-histograms-in-python-with-seaborn/\', \'https://www.geeksforgeeks.org/python-seaborn-jointplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-jointplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-pairplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-pairplot-method/\', \'https://www.geeksforgeeks.org/data-visualization-with-pairplot-seaborn-and-pandas/\', \'https://www.geeksforgeeks.org/seaborn-kdeplot-a-comprehensive-guide/\', \'https://www.geeksforgeeks.org/kde-plot-visualization-with-pandas-and-seaborn/\', \'https://www.geeksforgeeks.org/seaborn-regression-plots/\', \'https://www.geeksforgeeks.org/python-seaborn-lmplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-lmplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-regplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-regplot-method/\', \'https://www.geeksforgeeks.org/ml-matrix-plots-in-seaborn/\', \'https://www.geeksforgeeks.org/seaborn-heatmap-a-comprehensive-guide/\', \'https://www.geeksforgeeks.org/how-to-create-a-seaborn-correlation-heatmap-in-python/\', \'https://www.geeksforgeeks.org/how-to-create-a-triangle-correlation-heatmap-in-seaborn-python/\', \'https://www.geeksforgeeks.org/colormaps-in-seaborn-heatmaps/\', \'https://www.geeksforgeeks.org/how-to-change-the-colorbar-size-of-a-seaborn-heatmap-figure-in-python/\', \'https://www.geeksforgeeks.org/how-to-add-a-frame-to-a-seaborn-heatmap-figure-in-python/\', \'https://www.geeksforgeeks.org/how-to-increase-the-size-of-the-annotations-of-a-seaborn-heatmap-in-python/\', \'https://www.geeksforgeeks.org/clustering-in-machine-learning/\', \'https://www.geeksforgeeks.org/hierarchically-clustered-heatmap-in-python-with-seaborn-clustermap/\', \'https://www.geeksforgeeks.org/exploring-correlation-in-python/\', \'https://www.geeksforgeeks.org/seaborn-bubble-plot/\', \'https://www.geeksforgeeks.org/python-seaborn-residplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-boxenplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-pointplot-method/\', \'https://www.geeksforgeeks.org/python-seaborn-catplot/\', \'https://www.geeksforgeeks.org/how-to-make-countplot-or-barplot-with-seaborn-catplot/\', \'https://www.geeksforgeeks.org/how-to-make-grouped-boxplot-with-seaborn-catplot/\', \'https://www.geeksforgeeks.org/python-seaborn-strip-plot-illustration-using-catplot/\', \'https://www.geeksforgeeks.org/how-to-make-simple-facet-plots-with-seaborn-catplot-in-python/\', \'https://www.geeksforgeeks.org/how-to-make-ridgeline-plot-in-python-with-seaborn/\', \'https://www.geeksforgeeks.org/change-axis-labels-set-title-and-figure-size-to-plots-with-seaborn/\', \'https://www.geeksforgeeks.org/how-to-place-legend-outside-the-plot-with-seaborn-in-python/\', \'https://www.geeksforgeeks.org/how-to-plot-a-confidence-interval-in-python/\', \'https://www.geeksforgeeks.org/creating-a-time-series-plot-with-seaborn-and-pandas/\', \'https://www.geeksforgeeks.org/how-to-make-a-time-series-plot-with-rolling-average-in-python/\', \'https://www.geeksforgeeks.org/how-to-add-regression-line-per-group-with-seaborn-in-python/\', \'https://www.geeksforgeeks.org/data-visualization-with-python-seaborn-and-pandas/\', \'https://www.geeksforgeeks.org/data-visualization-in-python-using-matplotlib-and-seaborn/\', \'https://www.geeksforgeeks.org/visualizing-ml-dataset-through-seaborn-plots-and-matplotlib/\']','[\'Table Of Contentxa0\', \'Recent articles on Seaborn !!\', \'In the terminal, it will look like this –xa0\', \'Note: Seaborn has the following dependencies –xa0\', \'Example 2: Setting the xlim and ylim\', \'set_style(style=None, rc=None)\', \'Example: Using the dark theme\', \'sns.despine(left = True)\', \'set_context(context=None, font_scale=1, rc=None)\', \'axes_style() method is used to set the style temporarily. It is used along with the with statement.\', \'axes_style(style=None, rc=None)\', \'Refer to the below article for detailed information about styling Seaborn Plot.\', \'Refer to the below article to get detailed information about the color palette.\', \'Example 1: Using add_axes() method\', \'Example 2: Using subplot() method\', \'Example 3: Using subplot2grid() method\', \'Seaborn also provides some functions for plotting multiple plots. Let’s see them in detail\', \'Method 1: Using FacetGrid() method\', \'seaborn.FacetGrid( data, \\*\\*kwargs)\', \'Method 2: Using PairGrid() method\', \'seaborn.PairGrid( data, \\*\\*kwargs)\', \'Refer to the below articles to get detailed information about the multiple plots\', \'There are different types of Relational Plots. We will discuss each of them in detail –\', \'seaborn.relplot(x=None, y=None, data=None, **kwargs)xa0\', \'seaborn.scatterplot(x=None, y=None, data=None, **kwargs)\', \'Refer to the below articles to get detailed information about Scatter plot.\', \'seaborn.lineplot(x=None, y=None, data=None, **kwargs)\', \'Refer to the below articles to get detailed information about line plot.\', \'Refer to the below articles to get detailed information.\', \'xa0There are various types of categorical plots let’s discuss each one them in detail.\', \'barplot([x, y, hue, data, order, hue_order, …])\', \'Refer to the below article to get detailed information about the topic.\', \'countplot([x, y, hue, data, order, …])\', \'Refer to the below articles t get detailed information about the count plot.\', \'boxplot([x, y, hue, data, order, hue_order, …])\', \'Refer to the below articles to get detailed information about box plot.\', \'violinplot([x, y, hue, data, order, …]\', \'Refer to the below articles to get detailed information about violin plot.\', \'stripplot([x, y, hue, data, order, …])\', \'Refer to the below articles to detailed information about strip plot.\', \'swarmplot([x, y, hue, data, order, …])\', \'Refer to the below articles to get deyailed information about swarmplot.\', \'sns.factorplot([x, y, hue, data, row, col, …])\', \'Refer to the below articles to get dtailed information about the factor plot.\', \'Refer to the below article to get detailed informaon about the distribution plots.\', \'xa0There are various types of distribution plots let’s discuss each one them in detail.\', \'histplot(data=None, *, x=None, y=None, hue=None, xa0**kwargs)\', \'Refer to the below articles to get detailed information about histplot.\', \'distplot(a[, bins, hist, kde, rug, fit, …])\', \'jointplot(x, y[, data, kind, stat_func, …])\', \'Refer to the below articles to get detailed information about the topic.\', \'pairplot(data[, hue, hue_order, palette, …])\', \'Refer to the below articles to get deyailed information about the pairplot.\', \'rugplot(a[, height, axis, ax])\', \'seaborn.kdeplot(x=None, *, y=None, vertical=False, palette=None, **kwargs)\', \'Refer to the below articles to getdetailed information about the topic.\', \'Refer to the below article to get detailed information about the regression plots.\', \'seaborn.lmplot(x, y, data, hue=None, col=None, row=None, **kwargs)\', \'Refer to the below articles to get detailed information about the lmplot.\', \'regplot() method is also similar to lmplot which creates linear regression model.\', \'seaborn.regplot( x, xa0y, xa0data=None, x_estimator=None, **kwargs)\', \'Refer to the below articles to get detailed information about regplot.\', \'Refer to the below articles to get detailed information about the matrix plots.\', \'Refer to the below articles to get detailed information about the heatmap.\', \'clustermap(data, *, pivot_kws=None, xa0**kwargs)\', \'Refer to the below articles to get detailed information about clustermap.\']','[\'Seaborn is a library mostly used for statistical plotting in Python. It is built on top of Matplotlib and provides beautiful default styles and color palettes to make statistical plots more attractive.\', \'In this tutorial, we will learn about Python Seaborn from basics to advance using a huge dataset of seaborn basics, concepts, and different graphs that can be plotted.\', \'First of all, let us install Seaborn. Seaborn can be installed using the pip. Type the below command in the terminal.\', \'After the installation is completed you will get a successfully installed message at the end of the terminal as shown below.\', \'After the installation let us see an example of a simple plot using Seaborn. We will be plotting a simple line plot using the iris dataset. Iris dataset contains five columns such as Petal Length, Petal Width, Sepal Length, Sepal Width and Species Type. Iris is a flowering plant, the researchers have measured various features of the different iris flowers and recorded them digitally.\', \'In the above example, a simple line plot is created using the lineplot() method. Do not worry about these functions as we will be discussing them in detail in the below sections. Now after going through a simple example let us see a brief introduction about the Seaborn. Refer to the below articles to get detailed information about the same.\', \'In the introduction, you must have read that Seaborn is built on the top of Matplotlib. It means that Seaborn can be used with Matplotlib.xa0\', \'Using both Matplotlib and Seaborn together is a very simple process. We just have to invoke the Seaborn Plotting function as normal, and then we can use Matplotlib’s customization function.\', \'Example 1: We will be using the above example and will add the title to the plot using the Matplotlib.\', \'Seaborn comes with some customized themes and a high-level interface for customizing the looks of the graphs. Consider the above example where the default of the Seaborn is used. It still looks nice and pretty but we can customize the graph according to our own needs. So let’s see the styling of plots in detail.\', \'set_style() method is used to set the aesthetic of the plot. It means it affects things like the color of the axes, whether the grid is active or not, or other aesthetic elements. There are five themes available in Seaborn.\', \'Spines are the lines noting the data boundaries and connecting the axis tick marks. It can be removed using the despine() method.\', \'The figure size can be changed using the figure() method of Matplotlib. figure() method creates a new figure of the specified size passed in the figsize parameter.\', \'It can be done using the set_context() method. It allows us to override default parameters. This affects things like the size of the labels, lines, and other elements of the plot, but not the overall style. The base context is “notebook”, and the other contexts are “paper”, “talk”, and “poster”. font_scale sets the font size.\', \'Colormaps are used to visualize plots effectively and easily. One might use different sorts of colormaps for different kinds of plots. color_palette() method is used to give colors to the plot. Another function palplot() is used to deal with the color palettes and plots the color palette as a horizontal array.\', \'This type of color palette uses two different colors where each color depicts different points ranging from a common point in either direction. Consider a range of -10 to 10 so the value from -10 to 0 takes one color and values from 0 to 10 take another.\', \'In the above example, we have used an in-built diverging color palette which shows 11 different points of color. The color on the left shows pink color and color on the right shows green color.\', \'A sequential palette is used where the distribution ranges from a lower value to a higher value. To do this add the character ‘s’ to the color passed in the color palette.\', \'set_palette() method is used to set the default color palette for all the plots. The arguments for both color_palette() and set_palette() is same. set_palette() changes the default matplotlib parameters.\', \'You might have seen multiple plots in the above examples and some of you might have got confused. Don’t worry we will cover multiple plots in this section. Multiple plots in Seaborn can also be created using the Matplotlib as well as Seaborn also provides some functions for the same.\', \'Matplotlib provides various functions for plotting subplots. Some of them are add_axes(), subplot(), and subplot2grid(). Let’s see an example of each function for better understanding.\', \'Relational plots are used for visualizing the statistical relationship between the data points. Visualization is necessary because it allows the human to see trends and patterns in the data. The process of understanding how the variables in the dataset relate each other and their relationships are termed as Statistical analysis. Refer to the below articles for detailed information.\', \'This function provides us the access to some other different axes-level functions which shows the relationships between two variables with semantic mappings of subsets. It is plotted using the relplot() method.\', \'The scatter plot is a mainstay of statistical visualization. It depicts the joint distribution of two variables using a cloud of points, where each point represents an observation in the dataset. This depiction allows the eye to infer a substantial amount of information about whether there is any meaningful relationship between them. It is plotted using the scatterplot() method.\', \'For certain datasets, you may want to consider changes as a function of time in one variable, or as a similarly continuous variable. In this case, drawing a line-plot is a better option. It is plotted using the lineplot() method.\', \'Categorical Plots are used where we have to visualize relationship between two numerical values. A more specialized approach can be used if one of the main variable is categorical which means such variables that take on a fixed and limited number of possible values.\', \'A countplot basically counts the categories and returns a count of their occurrences. It is one of the most simple plots provided by the seaborn library. It can be created using the countplot() method.\', \'A boxplot is sometimes known as the box and whisker plot.It shows the distribution of the quantitative data that represents the comparisons between variables. boxplot shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution i.e. the dots indicating the presence of outliers. It is created using the boxplot() method.\', \'It is similar to the boxplot except that it provides a higher, more advanced visualization and uses the kernel density estimation to give a better description about the data distribution. It is created using the violinplot() method.\', \'It basically creates a scatter plot based on the category. It is created using the stripplot() method.\', \'Factorplot is the most general of all these plots and provides a parameter called kind to choose the kind of plot we want thus saving us from the trouble of writing these plots separately. The kind parameter can be bar, violin, swarm etc. It is plotted using the factorplot() method.\', \'Distribution Plots are used for examining univariate and bivariate distributions meaning such distributions that involve one variable or two discrete variables.\', \'A histogram is basically used to represent data provided in a form of some groups.It is accurate method for the graphical representation of numerical data distribution. It can be plotted using the histplot() function.\', \'Distplot is used basically for univariant set of observations and visualizes it through a histogram i.e. only one observation and hence we choose one particular column of the dataset. It is potted using the distplot() method.\', \'Jointplot is used to draw a plot of two variables with bivariate and univariate graphs. It basically combines two different plots. It is plotted using the jointplot() method.\', \'Pairplot represents pairwise relation across the entire dataframe and supports an additional argument called hue for categorical separation. What it does basically is create a jointplot between every possible numerical column and takes a while if the dataframe is really huge. It is plotted using the pairplot() method.\', \'Rugplot plots datapoints in an array as sticks on an axis.Just like a distplot it takes a single column. Instead of drawing a histogram it creates dashes all across the plot. If you compare it with the joinplot you can see that what a jointplot does is that it counts the dashes and shows it as bins. It is plotted using the rugplot() method.\', \'KDE Plot described as Kernel Density Estimate is used for visualizing the Probability Density of a continuous variable. It depicts the probability density at different values in a continuous variable. We can also plot a single graph for multiple samples which helps in more efficient data visualization.\', \'The regression plots are primarily intended to add a visual guide that helps to emphasize patterns in a dataset during exploratory data analyses. Regression plots as the name suggests creates a regression line between two parameters and helps to visualize their linear relationships.\', \'there are two main functions that are used to draw linear regression models. These functions are lmplot(), and regplot(), are closely reled to each other. They even share their core functionality.\', \'lmplot() method can be understood as a function that basically creates a linear model plot. It creates a scatter plot with a linear fit on top of it.\', \'Note: The difference between both the function is that regplot accepts the x, y variables in different format inlcuding NumPy arrays, Pandas objects, whereas, the lmplot only accepts the value as strings.\', \'A matrix plot means plotting matrix data where color coded diagrams shows rows data, column data and values. It can shown using the heatmap and clustermap.\', \'Heatmap is defined as a graphical representation of data using colors to visualize the value of the matrix. In this, to represent more common values or higher activities brighter colors basically reddish colors are used and to represent less common or activity values, darker colors are preferred. it can be plotted using the heatmap() function.\', \'seaborn.heatmap(data, *, vmin=None, vmax=None, cmap=None, center=None, annot_kws=None, linewidths=0, linecolor=’white’, cbar=True, **kwargs)\', \'The clustermap() function of seaborn plots the hierarchically-clustered heatmap of the given matrix dataset. Clustering simply means grouping data based on relationship among the variables in the data.\']','[\'A barplot is basically used to aggregate the categorical data according to some methods and by default its the mean. It can also be understood as a visualization of the group by action. To use this plot we choose a categorical column for the x axis and a numerical column for the y axis and we see that it creates a plot taking a mean per categorical column. It can be created using the barplot() method.\', \'Swarmplot is very similar to the stripplot except the fact that the points are adjusted so that they do not overlap.Some people also like combining the idea of a violin plot and a stripplot to form this plot. One drawback to using swarmplot is that sometimes they dont scale well to really large numbers and takes a lot of computation to arrange them. So in case we want to visualize a swarmplot properly we can plot it on top of a violinplot. It is plotted using the swarmplot() method.\']','[\'# importing packages import seaborn as sns   # loading dataset data = sns.load_dataset(\"iris\")   # draw lineplot sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt   # loading dataset data = sns.load_dataset(\"iris\")   # draw lineplot sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)   # setting the title using Matplotlibplt.title(\'Title using Matplotlib Function\')  plt.show()\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt   # loading dataset data = sns.load_dataset(\"iris\")   # draw lineplot sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)   # setting the x limit of the plotplt.xlim(5)  plt.show()\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt   # loading dataset data = sns.load_dataset(\"iris\")   # draw lineplot sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)   # changing the theme to darksns.set_style(\"dark\")plt.show()\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt   # loading dataset data = sns.load_dataset(\"iris\")   # draw lineplot sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)   # Removing the spinessns.despine()plt.show()\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt   # loading dataset data = sns.load_dataset(\"iris\")   # changing the figure sizeplt.figure(figsize = (2, 4))  # draw lineplot sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)   # Removing the spinessns.despine()  plt.show()\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt   # loading dataset data = sns.load_dataset(\"iris\")   # draw lineplot sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)   # Setting the scale of the plotsns.set_context(\"paper\")  plt.show()\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt   # loading dataset data = sns.load_dataset(\"iris\")     def plot():    sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)   with sns.axes_style(\'darkgrid\'):          # Adding the subplot    plt.subplot(211)    plot()      plt.subplot(212)plot()\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt  # current colot palettepalette = sns.color_palette()  # plots the color palette as a# horizontal arraysns.palplot(palette)  plt.show()\', \"# importing packages import seaborn as sns import matplotlib.pyplot as plt  # current colot palettepalette = sns.color_palette(\'PiYG\', 11)  # diverging color palettesns.palplot(palette)  plt.show()\", \"# importing packages import seaborn as sns import matplotlib.pyplot as plt  # current colot palettepalette = sns.color_palette(\'Greens\', 11)  # sequential color palettesns.palplot(palette)  plt.show()\", \'# importing packages import seaborn as sns import matplotlib.pyplot as plt  # loading dataset data = sns.load_dataset(\"iris\")   def plot():    sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)  # setting the default color palettesns.set_palette(\'vlag\')plt.subplot(211)  # plotting with the color palette# as vlagplot()  # setting another default color palettesns.set_palette(\'Accent\')plt.subplot(212)plot()  plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt    # loading datasetdata = sns.load_dataset(\"iris\")  def graph():    sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)  # Creating a new figure with width = 5 inches# and height = 4 inchesfig = plt.figure(figsize =(5, 4))   # Creating first axes for the figureax1 = fig.add_axes([0.1, 0.1, 0.8, 0.8])   # plotting the graphgraph()  # Creating second axes for the figureax2 = fig.add_axes([0.5, 0.5, 0.3, 0.3])  # plotting the graphgraph()  plt.show()\', \'# importing packages import seaborn as sns import matplotlib.pyplot as plt  # loading dataset data = sns.load_dataset(\"iris\")   def graph():    sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)  # Adding the subplot at the specified# grid positionplt.subplot(121)graph()  # Adding the subplot at the specified# grid positionplt.subplot(122)graph()  plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  def graph():    sns.lineplot(x=\"sepal_length\", y=\"sepal_width\", data=data)  # adding the subplotsaxes1 = plt.subplot2grid (  (7, 1), (0, 0), rowspan = 2,  colspan = 1) graph()  axes2 = plt.subplot2grid (  (7, 1), (2, 0), rowspan = 2, colspan = 1) graph()    axes3 = plt.subplot2grid (  (7, 1), (4, 0), rowspan = 2, colspan = 1)graph()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  plot = sns.FacetGrid(data, col=\"species\")plot.map(plt.plot, \"sepal_width\")  plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"flights\")  plot = sns.PairGrid(data)plot.map(plt.plot)  plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  # creating the relplotsns.relplot(x=\'sepal_width\', y=\'species\', data=data)  plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.scatterplot(x=\'sepal_length\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.lineplot(x=\'sepal_length\', y=\'species\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.barplot(x=\'species\', y=\'sepal_length\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.countplot(x=\'species\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.boxplot(x=\'species\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.violinplot(x=\'species\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.stripplot(x=\'species\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.swarmplot(x=\'species\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.factorplot(x=\'species\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.histplot(x=\'species\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.distplot(data[\'sepal_width\'])plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.jointplot(x=\'species\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.pairplot(data=data, hue=\'species\')plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.rugplot(data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"iris\")  sns.kdeplot(x=\'sepal_length\', y=\'sepal_width\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"tips\")  sns.lmplot(x=\'total_bill\', y=\'tip\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"tips\")  sns.regplot(x=\'total_bill\', y=\'tip\', data=data)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"tips\")  # correlation between the different parameters tc = data.corr()  sns.heatmap(tc)plt.show()\', \'# importing packagesimport seaborn as snsimport matplotlib.pyplot as plt  # loading datasetdata = sns.load_dataset(\"tips\")  # correlation between the different parameters tc = data.corr()  sns.clustermap(tc)plt.show()\']','[\'pip install seaborn\']','[]','[\'Getting Started|||Using Seaborn with Matplotlib|||Customizing Seaborn PlotsChanging Figure AestheticRemoval of SpinesChanging the figure SizeScaling the plotsSetting the Style Temporarily|||Changing Figure Aesthetic|||Removal of Spines|||Changing the figure Size|||Scaling the plots|||Setting the Style Temporarily|||Color PaletteDiverging Color PaletteSequential Color PaletteSetting the default Color Palette|||Diverging Color Palette|||Sequential Color Palette|||Setting the default Color Palette|||Multiple plots with SeabornUsing MatplotlibUsing Seaborn|||Using Matplotlib|||Using Seaborn|||Creating Different Types of PlotsRelational PlotsCategorical PlotsDistribution PlotsRegression Plots|||Relational Plots|||Categorical Plots|||Distribution Plots|||Regression Plots|||More Gaphs in Seaborn|||More Topics on Seaborn&&&Changing Figure Aesthetic|||Removal of Spines|||Changing the figure Size|||Scaling the plots|||Setting the Style Temporarily&&&Diverging Color Palette|||Sequential Color Palette|||Setting the default Color Palette&&&Using Matplotlib|||Using Seaborn&&&Relational Plots|||Categorical Plots|||Distribution Plots|||Regression Plots&&&Python 2.7 or 3.4+|||numpy|||scipy|||pandas|||matplotlib&&&Introduction to Seaborn – Python|||Plotting graph using Seaborn&&&darkgrid|||whitegrid|||dark|||white|||ticks&&&Seaborn | Style And Color&&&Seaborn – Color Palette&&&FacetGrid class helps in visualizing distribution of one variable as well as the relationship between multiple variables separately within subsets of your dataset using multiple panels.|||A FacetGrid can be drawn with up to three dimensions ? row, col, and hue. The first two have obvious correspondence with the resulting array of axes; think of the hue variable as a third dimension along a depth axis, where different levels are plotted with different colors.|||FacetGrid object takes a dataframe as input and the names of the variables that will form the row, column, or hue dimensions of the grid. The variables should be categorical and the data at each level of the variable will be used for a facet along that axis.&&&Subplot grid for plotting pairwise relationships in a dataset.|||This class maps each variable in a dataset onto a column and row in a grid of multiple axes. Different axes-level plotting functions can be used to draw bivariate plots in the upper and lower triangles, and the marginal distribution of each variable can be shown on the diagonal.|||It can also represent an additional level of conventionalization with the hue parameter, which plots different subsets of data in different colors. This uses color to resolve elements on a third dimension, but only draws subsets on top of each other and will not tailor the hue parameter for the specific visualization the way that axes-level functions that accept hue will.&&&Python – seaborn.FacetGrid() method|||Python – seaborn.PairGrid() method&&&Relational plots in Seaborn – Part I|||Relational plots in Seaborn – Part II&&&Scatterplot using Seaborn in Python|||Visualizing Relationship between variables with scatter plots in Seaborn|||How To Make Scatter Plot with Regression Line using Seaborn in Python?|||Scatter Plot with Marginal Histograms in Python with Seaborn&&&seaborn.lineplot() method in Python|||Data Visualization with Seaborn Line Plot|||Creating A Time Series Plot With Seaborn And Pandas|||How to Make a Time Series Plot with Rolling Average in Python?&&&Categorical Plots&&&Seaborn.barplot() method in Python|||Barplot using seaborn in Python|||Seaborn – Sort Bars in Barplot&&&Countplot using seaborn in Python&&&Boxplot using Seaborn in Python|||Horizontal Boxplots with Seaborn in Python|||How To Use Seaborn Color Palette to Color Boxplot?|||Seaborn – Coloring Boxplots with Palettes|||How to Show Mean on Boxplot using Seaborn in Python?|||Sort Boxplot by Mean with Seaborn in Python|||How To Manually Order Boxplot in Seaborn?|||Grouped Boxplots in Python with Seaborn|||Horizontal Boxplots with Points using Seaborn in Python|||How to Make Boxplots with Data Points using Seaborn in Python?|||Box plot visualization with Pandas and Seaborn&&&Violinplot using Seaborn in Python|||How to Make Horizontal Violin Plot with Seaborn in Python?|||Make Violinplot with data points using Seaborn|||How To Make Violinpot with data points in Seaborn?|||How to Make Grouped Violinplot with Seaborn in Python?&&&Stripplot using Seaborn in Python&&&Python – seaborn.swarmplot() method|||Swarmplot using Seaborn in Python&&&Python – seaborn.factorplot() method|||Plotting different types of plots using Factor plot in seaborn&&&Distribution Plots&&&How to Make Histograms with Density Plots with Seaborn histplot?|||How to Add Outline or Edge Color to Histogram in Seaborn?|||Scatter Plot with Marginal Histograms in Python with Seaborn&&&Python – seaborn.jointplot() method&&&Python – seaborn.pairplot() method|||Data visualization with Pairplot Seaborn and Pandas&&&Seaborn Kdeplot – A Comprehensive Guide|||KDE Plot Visualization with Pandas and Seaborn&&&Regression Plots&&&Python – seaborn.lmplot() method&&&Python – seaborn.regplot() method&&&Matrix plots&&&Seaborn Heatmap – A comprehensive guide|||How to create a seaborn correlation heatmap in Python?|||How to create a Triangle Correlation Heatmap in seaborn – Python?|||ColorMaps in Seaborn HeatMaps|||How to change the colorbar size of a seaborn heatmap figure in Python?|||How to add a frame to a seaborn heatmap figure in Python?|||How to increase the size of the annotations of a seaborn heatmap in Python?&&&Hierarchically-clustered Heatmap in Python with Seaborn Clustermap|||Exploring Correlation in Python&&&Seaborn – Bubble Plot|||Python – seaborn.residplot() method|||Python – seaborn.boxenplot() method|||Python – seaborn.pointplot() method|||Python Seaborn – Catplot|||How to Make Countplot or barplot with Seaborn Catplot?|||How To Make Grouped Boxplot with Seaborn Catplot?|||Python Seaborn – Strip plot illustration using Catplot|||How To Make Simple Facet Plots with Seaborn Catplot in Python?|||How To Make Ridgeline plot in Python with Seaborn?&&&Change Axis Labels, Set Title and Figure Size to Plots with Seaborn|||How To Place Legend Outside the Plot with Seaborn in Python?|||How to Plot a Confidence Interval in Python?|||Creating A Time Series Plot With Seaborn And Pandas|||How to Make a Time Series Plot with Rolling Average in Python?|||How To Add Regression Line Per Group with Seaborn in Python?|||Data Visualization with Python Seaborn and Pandas|||Data Visualization in Python using Matplotlib and Seaborn|||Visualizing ML DataSet Through Seaborn Plots and Matplotlib\']'),(266,'[\'Python Plotly tutorial\']','[\'Installation\', \'Package Structure of Plotly\', \'Python3\', \'Getting Started\', \'Python3\', \'Creating Different Types of Charts\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Interacting with the Plots\', \'Python3\', \'Python3\', \'Python3\', \'More Plots using Plotly\', \'More Topics on Plotly\']','[\'Line Chart\', \'Bar Chart\', \'Histograms\', \'Scatter Plot and Bubble charts\', \'Pie Charts\', \'Box Plots\', \'Violin plots\', \'Gantt Charts\', \'Contour Plots\', \'Heatmaps\', \'Error Bars\', \'3D Line Plots\', \'3D Scatter Plot Plotly\', \'3D Surface Plots\', \'Creating Dropdown Menu in Plotly\', \'Adding Buttons to the Plot\', \'Creating Sliders and Selectors to the Plot\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210217185640/PythonPlotlyTutorialmin3.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201145943/plotlyinstall2.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201161642/plotlytutorialpackagestructure.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201163831/plotlytutorialsimplechart.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201173603/plotlytutoriallinechart.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200630214054/pythonbar.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201180633/plotlytutorialhistogram.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201174347/plotlytutorialscatterplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201175608/plotlytutorialbubblechart3.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201181833/plotlytutorialpiechart.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201183133/plotlytutorialboxplots.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210201190948/plotlytutorialviolinplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200629170724/pythongantt1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200902223636/contourplotsplotly1.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210202195636/plotlytutorialheatmap.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210202203633/plotlytutorialerrorbar.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210202210749/poltlytutorial3dline.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200704174415/3dscatterplotplotly.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200824204556/surfaceplotplotly.png\', \'https://media.geeksforgeeks.org/wp-content/cdn-uploads/20210604221456/button-plotly.gif\']','[]','[\'https://www.geeksforgeeks.org/#Installation\', \'https://www.geeksforgeeks.org/#Package\', \'https://www.geeksforgeeks.org/#Getting\', \'https://www.geeksforgeeks.org/#Different\', \'https://www.geeksforgeeks.org/#Line\', \'https://www.geeksforgeeks.org/#Bar\', \'https://www.geeksforgeeks.org/#Histograms\', \'https://www.geeksforgeeks.org/#Scatter\', \'https://www.geeksforgeeks.org/#Pie\', \'https://www.geeksforgeeks.org/#Box\', \'https://www.geeksforgeeks.org/#Violin\', \'https://www.geeksforgeeks.org/#Gantt\', \'https://www.geeksforgeeks.org/#Contour\', \'https://www.geeksforgeeks.org/#Heatmaps\', \'https://www.geeksforgeeks.org/#Error\', \'https://www.geeksforgeeks.org/#3D1\', \'https://www.geeksforgeeks.org/#3D2\', \'https://www.geeksforgeeks.org/#3D3\', \'https://www.geeksforgeeks.org/#Interacting\', \'https://www.geeksforgeeks.org/#Dropdown\', \'https://www.geeksforgeeks.org/#Buttons\', \'https://www.geeksforgeeks.org/#Sliders\', \'https://www.geeksforgeeks.org/#Plots\', \'https://www.geeksforgeeks.org/#Topics\', \'https://www.geeksforgeeks.org/tag/python-plotly/\', \'https://www.geeksforgeeks.org/line-chart-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/plotly-express-line-function-in-python/\', \'https://www.geeksforgeeks.org/line-chart-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/bar-chart-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/bar-chart-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/how-to-create-stacked-bar-chart-in-python-plotly/\', \'https://www.geeksforgeeks.org/how-to-group-bar-charts-in-python-plotly/\', \'https://www.geeksforgeeks.org/histogram-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/histogram-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/histograms-in-plotly-using-graph_objects-class/\', \'https://www.geeksforgeeks.org/how-to-create-a-cumulative-histogram-in-plotly/\', \'https://www.geeksforgeeks.org/scatter-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/bubble-chart-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/plotly-express-scatter-function-in-python/\', \'https://www.geeksforgeeks.org/scatter-plot-in-plotly-using-graph_objects-class/\', \'https://www.geeksforgeeks.org/scatter-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/bubble-chart-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/pie-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/pie-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/understanding-different-box-plot-with-visualization/\', \'https://www.geeksforgeeks.org/box-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/box-plot-in-plotly-using-graph_objects-class/\', \'https://www.geeksforgeeks.org/how-to-create-grouped-box-plot-in-plotly/\', \'https://www.geeksforgeeks.org/violin-plot-for-data-analysis/\', \'https://www.geeksforgeeks.org/short-note-on-gantt-chart/\', \'https://www.geeksforgeeks.org/gantt-chart-in-plotly/\', \'https://www.geeksforgeeks.org/contour-plots/\', \'https://www.geeksforgeeks.org/contour-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/create-heatmaps-using-graph_objects-class-in-plotly/\', \'https://www.geeksforgeeks.org/create-heatmaps-using-graph_objects-class-in-plotly/\', \'https://www.geeksforgeeks.org/annotated-heatmaps-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/create-error-bars-in-plotly-python/\', \'https://www.geeksforgeeks.org/plotly-express-line_3d-function-in-python/\', \'https://www.geeksforgeeks.org/3d-line-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/3d-surface-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/3d-surface-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/3d-scatter-plot-using-graph_objects-class-in-plotly-python/\', \'https://www.geeksforgeeks.org/3d-bubble-chart-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/3d-surface-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/how-to-make-dropdown-menus-in-plotly/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200914223104/Screencast-from-Monday-14-September-2020-102951-IST.webm\', \'https://www.geeksforgeeks.org/how-to-make-custom-buttons-in-plotly/\', \'https://www.geeksforgeeks.org/how-to-make-range-slider-and-selector-in-plotly/\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200914210651/Screencast-from-Monday-14-September-2020-090335-IST.webm\', \'https://www.geeksforgeeks.org/plotly-express-scatter_geo-function-in-python/\', \'https://www.geeksforgeeks.org/plotly-express-scatter_polar-function-in-python/\', \'https://www.geeksforgeeks.org/plotly-express-scatter_ternary-function-in-python/\', \'https://www.geeksforgeeks.org/plotly-express-line_ternary-function-in-python/\', \'https://www.geeksforgeeks.org/filled-area-chart-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/how-to-create-stacked-area-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/sunburst-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/sunburst-plot-using-graph_objects-class-in-plotly/\', \'https://www.geeksforgeeks.org/plotly-figure_factory-create_annotated_heatmap-function-in-python/\', \'https://www.geeksforgeeks.org/plotly-figure_factory-create_2d_density-function-in-python/\', \'https://www.geeksforgeeks.org/ternary-contours-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/how-to-make-log-plots-in-plotly-python/\', \'https://www.geeksforgeeks.org/polar-charts-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/carpet-contour-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/ternary-plots-in-plotly/\', \'https://www.geeksforgeeks.org/how-to-create-a-ternary-overlay-using-plotly/\', \'https://www.geeksforgeeks.org/parallel-coordinates-plot-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/carpet-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/3d-cone-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/3d-volume-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/3d-streamtube-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/3d-mesh-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/how-to-create-tables-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/plotly-figure_factory-create_dendrogram-function-in-python/\', \'https://www.geeksforgeeks.org/define-node-position-in-sankey-diagram-in-plotly/\', \'https://www.geeksforgeeks.org/sankey-diagram-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/quiver-plots-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/treemap-using-plotly-in-python/\', \'https://www.geeksforgeeks.org/treemap-using-graph_objects-class-in-plotly/\', \'https://www.geeksforgeeks.org/plotly-figure_factory-create_candlestick-function-in-python/\', \'https://www.geeksforgeeks.org/plotly-figure_factory-create_choropleth-function-in-python/\', \'https://www.geeksforgeeks.org/plotly-figure_factory-create_bullet-in-python/\', \'https://www.geeksforgeeks.org/streamline-plots-in-plotly-using-python/\', \'https://www.geeksforgeeks.org/how-to-make-wind-rose-and-polar-bar-charts-in-plotly-python/\', \'https://www.geeksforgeeks.org/title-alignment-in-plotly/\', \'https://www.geeksforgeeks.org/change-marker-border-color-in-plotly-python/\', \'https://www.geeksforgeeks.org/plot-live-graphs-using-python-dash-and-plotly/\', \'https://www.geeksforgeeks.org/animated-data-visualization-using-plotly-express/\', \'https://www.geeksforgeeks.org/introduction-to-plotly-online-using-python/\', \'https://www.geeksforgeeks.org/how-to-display-image-using-plotly/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'Table Of Contentxa0\', \'Recent Articles on Plotly !!!xa0\', \'Plotly does not come built-in with Python. To install it type the below command in the terminal.\', \'This may take some time as it will install the dependencies as well.\', \'There are three main modules in Plotly. They are:\', \'Refer to the below articles to get detailed information about the line charts.\', \'Refer to the below articles to get detailed information about the bar chart.\', \'Refer to the below articles to get detailed information about the histograms.\', \'Example 1: Scatter Plot\', \'Example 2: Bubble Plot\', \'Refer to the below articles to get detailed information about the scatter plots and bubble plots.\', \'Refer to the below articles to get detailed information about the pie charts.\', \'Refer to the below articles to get detailed information about box plots.\', \'Refer to the below articles to get detailed information about the violin plots.\', \'Refer to the below articles to get detailed information about the Gantt Charts.\', \'Refer to the below articles to get detailed information about contour plots.\', \'Refer to the below articles to get detailed information about the heatmaps.\', \'Refer to the below articles to get detailed information about the 3D line charts.\', \'Refer to the below articles to get detailed information about the 3D scatter plot.\']','[\'Python Plotly Library is an open-source library that can be used for data visualization and understanding data simply and easily. Plotly supports various types of plots like line charts, scatter plots, histograms, cox plots, etc. So you all must be wondering why Plotly over other visualization tools or libraries? Here’s the answer –\', \'This tutorial aims at providing you the insight about Plotly with the help of the huge dataset explaining the Plotly from basics to advance and covering all the popularly used charts.\', \'plotly.plotly acts as the interface between the local machine and Plotly. It contains functions that require a response from Plotly’s server.\', \'plotly.graph_objects module contains the objects (Figure, layout, data, and the definition of the plots like scatter plot, line chart) that are responsible for creating the plots. xa0The Figure can be represented either as dict or instances of plotly.graph_objects.Figure and these are serialized as JSON before it gets passed to plotly.js. Consider the below example for better understanding.\', \'Note: plotly.express module can create the entire Figure at once. It uses the graph_objects internally and returns the graph_objects.Figure instance.\', \'Figures are represented as trees where the root node has three top layer attributes – data, layout, and frames and the named nodes called ‘attributes’. Consider the above example, layout.legend is a nested dictionary where the legend is the key inside the dictionary whose value is also a dictionary. xa0\', \'plotly.tools module contains various tools in the forms of the functions that can enhance the Plotly experience.xa0\', \'After learning the installation and basic structure of the Plotly, let’s create a simple plot using the pre-defined data sets defined by the plotly.\', \'In the above example, the plotly.express module is imported which returns the Figure instance. We have created a simple line chart by passing the x, y coordinates of the points to be plotted.\', \'With plotly we can create more than 40 charts and every plot can be created using the plotly.express and plotly.graph_objects class. Let’s see some commonly used charts with the help of Plotly.\', \'Line plot in Plotly is much accessible and illustrious annexation to plotly which manage a variety of types of data and assemble easy-to-style statistic. With px.line each data position is represented as a vertex xa0(which location is given by the x and y columns) of a polyline mark in 2D space.\', \'A bar chart is a pictorial representation of data that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent. In other words, it is the pictorial representation of dataset. These data sets contain the numerical values of variables that represent the length or height.\', \'A histogram contains a rectangular area to display the statistical information which is proportional to the frequency of a variable and its width in successive numerical intervals. A graphical representation that manages a group of data points into different specified ranges. It has a special feature that shows no gaps between the bars and similar to a vertical bar graph.\', \'A scatter plot is a set of dotted points to represent individual pieces of data in the horizontal and vertical axis. A graph in which the values of two variables are plotted along X-axis and Y-axis, the pattern of the resulting points reveals a correlation between them.\', \'A bubble plot is a scatter plot with bubbles (color-filled circles). Bubbles have various sizes dependent on another variable in the data. It can be created using the scatter() method of plotly.express.\', \'A pie chart is a circular statistical graphic, which is divided into slices to illustrate numerical proportions. It depicts a special chart that uses “pie slices”, where each sector shows the relative sizes of data. A circular chart cuts in a form of radii into segments describing relative frequencies or magnitude also known as circle graph.\', \'Generalized Activity Normalization Time Table (GANTT) chart is type of chart in which series of horizontal lines are present that show the amount of work done or production completed in given period of time in relation to amount planned for those projects.xa0\', \'Contour plots also called level plots are a tool for doing multivariate analysis and visualizing 3-D plots in 2-D space. If we consider X and Y as our variables we want to plot then the response Z will be plotted as slices on the X-Y plane due to which contours are sometimes referred as Z-slices or iso-response.\', \'A contour plots is used in the case where you want to see the changes in some value (Z) as a function with respect to the two values (X, Y). Consider the below example.\', \'Heatmap is defined as a graphical representation of data using colors to visualize the value of the matrix. In this, to represent more common values or higher activities brighter colors basically reddish colors are used and to represent less common or activity values, darker colors are preferred. Heatmap is also defined by the name of the shading matrix.xa0\', \'For functions representing 2D data points such as px.scatter, px.line, px.bar, etc., error bars are given as a column name which is the value of the error_x (for the error on x position) and error_y (for the error on y position). Error bars are the graphical presentation alternation of data and used on graphs to imply the error or uncertainty in a reported capacity.\', \'Line plot in plotly is much accessible and illustrious annexation to plotly which manage a variety of types of data and assemble easy-to-style statistic. With px.line_3d each data position is represented as a vertex xa0(which location is given by the x, y and z columns) of a polyline mark in 3D space.\', \'Surface plot is those plot which has three-dimensions data which is X, Y, and Z. Rather than showing individual data points, the surface plot has a functional relationship between dependent variable Y and have two independent variables X and Z. This plot is used to distinguish between dependent and independent variables.\', \'Plotly provides various tools for interacting with the plots such as adding dropdowns, buttons, sliders, etc. These can be created using the update menu attribute of the plot layout. Let’s see how to do all such things in detail.\', \'A drop-down menu is a part of the menu-button which is displayed on a screen all the time. Every menu button is associated with a Menu widget that can display the choices for that menu button when clicked on it. In plotly, there are 4 possible methods to modify the charts by using update menu method.\', \'In the above example we have created two graphs for the same data. These plots are accessible using the dropdown menu.\', \'In plotly, actions custom Buttons are used to quickly make actions directly from a record. Custom Buttons can be added to page layouts in CRM, Marketing, and Custom Apps. There are also 4 possible methods that can be applied in custom buttons:\', \'In this example also we are creating two different plots on the same data and both plots are accessible by the buttons.\', \'In plotly, the range slider is a custom range-type input control. It allows selecting a value or a range of values between a specified minimum and maximum range. And the range selector is a tool for selecting ranges to display within the chart. It provides buttons to select pre-configured ranges in the chart. It also provides input boxes where the minimum and maximum dates can be manually input.\']','[\'A Box Plot is also known as Whisker plot is created to display the summary of the set of data values having properties like minimum, first quartile, median, third quartile and maximum. In the box plot, a box is created from the first quartile to the third quartile, a vertical line is also there which goes through the box at the median. Here x-axis denotes the data to be plotted while the y-axis shows the frequency distribution.\', \'Violin Plot is a method to visualize the distribution of numerical data of different variables. It is similar to Box Plot but with a rotated plot on each side, giving more information about the density estimate on the y-axis. The density is mirrored and flipped over and the resulting shape is filled in, creating an image resembling a violin. The advantage of a violin plot is that it can show nuances in the distribution that aren’t perceptible in a boxplot. On the other hand, the boxplot more clearly shows the outliers in the data.\', \'3D Scatter Plot can plot two-dimensional graphics that can be enhanced by mapping up to three additional variables while using the semantics of hue, size, and style parameters. All the parameter control visual semantic which are used to identify the different subsets. Using redundant semantics can be helpful for making graphics more accessible. It can be created using the scatter_3d function of plotly.express class.\']','[\'import plotly.express as px  # Creating the Figure instancefig = px.line(x=[1,2, 3], y=[1, 2, 3]) # printing the figure instanceprint(fig)\', \'import plotly.express as px  # Creating the Figure instancefig = px.line(x=[1, 2, 3], y=[1, 2, 3]) # showing the plotfig.show()\', \'import plotly.express as px # using the iris datasetdf = px.data.iris() # plotting the line chartfig = px.line(df, x=\"species\", y=\"petal_width\") # showing the plotfig.show()\', \'import plotly.express as px # using the iris datasetdf = px.data.iris() # plotting the bar chartfig = px.bar(df, x=\"sepal_width\", y=\"sepal_length\") # showing the plotfig.show()\', \'import plotly.express as px # using the iris datasetdf = px.data.iris() # plotting the histogramfig = px.histogram(df, x=\"sepal_length\", y=\"petal_width\") # showing the plotfig.show()\', \'import plotly.express as px # using the iris datasetdf = px.data.iris() # plotting the scatter chartfig = px.scatter(df, x=\"species\", y=\"petal_width\") # showing the plotfig.show()\', \'import plotly.express as px # using the iris datasetdf = px.data.iris() # plotting the bubble chartfig = px.scatter(df, x=\"species\", y=\"petal_width\",                 size=\"petal_length\", color=\"species\") # showing the plotfig.show()\', \'import plotly.express as px # using the tips datasetdf = px.data.tips() # plotting the pie chartfig = px.pie(df, values=\"total_bill\", names=\"day\") # showing the plotfig.show()\', \'import plotly.express as px # using the tips datasetdf = px.data.tips() # plotting the box chartfig = px.box(df, x=\"day\", y=\"total_bill\") # showing the plotfig.show()\', \'import plotly.express as px # using the tips datasetdf = px.data.tips() # plotting the violin chartfig = px.violin(df, x=\"day\", y=\"total_bill\") # showing the plotfig.show()\', \'import plotly.figure_factory as ff # Data to be plotteddf = [dict(Task=\"A\", Start=\'2020-01-01\', Finish=\'2009-02-02\'),    dict(Task=\"Job B\", Start=\'2020-03-01\', Finish=\'2020-11-11\'),    dict(Task=\"Job C\", Start=\'2020-08-06\', Finish=\'2020-09-21\')] # Creating the plotfig = ff.create_gantt(df)fig.show()\', \'import plotly.graph_objects as go  # Creating the X, Y value that will# change the values of Z as a functionfeature_x = np.arange(0, 50, 2)feature_y = np.arange(0, 50, 3) # Creating 2-D grid of features[X, Y] = np.meshgrid(feature_x, feature_y) Z = np.cos(X / 2) + np.sin(Y / 4) # plotting the figurefig = go.Figure(data =    go.Contour(x = feature_x, y = feature_y, z = Z)) fig.show()\', \'import plotly.graph_objects as go  feature_x = np.arange(0, 50, 2)feature_y = np.arange(0, 50, 3) # Creating 2-D grid of features[X, Y] = np.meshgrid(feature_x, feature_y) Z = np.cos(X / 2) + np.sin(Y / 4) # plotting the figurefig = go.Figure(data =     go.Heatmap(x = feature_x, y = feature_y, z = Z,)) fig.show()\', \'import plotly.express as px # using the iris datasetdf = px.data.iris() # Calculating the error fielddf[\"error\"] = df[\"petal_length\"]/100 # plotting the scatter chartfig = px.scatter(df, x=\"species\", y=\"petal_width\",                error_x=\"error\", error_y=\"error\") # showing the plotfig.show()\', \'import plotly.express as px # data to be plotteddf = px.data.tips() # plotting the figurefig = px.line_3d(df, x=\"sex\", y=\"day\",                 z=\"time\", color=\"sex\") fig.show()\', \"import plotly.express as px # Data to be plotteddf = px.data.iris() # Plotting the figurefig = px.scatter_3d(df, x = \'sepal_width\',                    y = \'sepal_length\',                    z = \'petal_width\',                    color = \'species\') fig.show()\", \'import plotly.graph_objects as goimport numpy as np # Data to be plottedx = np.outer(np.linspace(-2, 2, 30), np.ones(30))y = x.copy().Tz = np.cos(x ** 2 + y ** 2) # plotting the figurefig = go.Figure(data=[go.Surface(x=x, y=y, z=z)]) fig.show()\', \'import plotly.graph_objects as pximport numpy as np  # creating random data through randomint# function of numpy.randomnp.random.seed(42) # Data to be Plottedrandom_x = np.random.randint(1, 101, 100)random_y = np.random.randint(1, 101, 100) plot = px.Figure(data=[px.Scatter(    x=random_x,    y=random_y,    mode=\'markers\',)]) # Add dropdownplot.update_layout(    updatemenus=[        dict(            buttons=list([                dict(                    args=[\"type\", \"scatter\"],                    label=\"Scatter Plot\",                    method=\"restyle\"                ),                dict(                    args=[\"type\", \"bar\"],                    label=\"Bar Chart\",                    method=\"restyle\"                )            ]),            direction=\"down\",        ),    ]) plot.show()\', \'import plotly.graph_objects as pximport pandas as pd # reading the databasedata = pd.read_csv(\"tips.csv\")  plot = px.Figure(data=[px.Scatter(    x=data[\'day\'],    y=data[\'tip\'],    mode=\'markers\',)]) # Add dropdownplot.update_layout(    updatemenus=[        dict(            type=\"buttons\",            direction=\"left\",            buttons=list([                dict(                    args=[\"type\", \"scatter\"],                    label=\"Scatter Plot\",                    method=\"restyle\"                ),                dict(                    args=[\"type\", \"bar\"],                    label=\"Bar Chart\",                    method=\"restyle\"                )            ]),        ),    ]) plot.show()\', \'import plotly.graph_objects as pximport plotly.express as goimport numpy as np df = go.data.tips() x = df[\'total_bill\']y = df[\'day\'] plot = px.Figure(data=[px.Scatter(    x=x,    y=y,    mode=\'lines\',)]) plot.update_layout(    xaxis=dict(        rangeselector=dict(            buttons=list([                dict(count=1,                    step=\"day\",                    stepmode=\"backward\"),            ])        ),        rangeslider=dict(            visible=True        ),    )) plot.show()\']','[\'pip install plotly\']','[]','[\'Plotly has hover tool capabilities that allow us to detect any outliers or anomalies in a large number of data points.|||It is visually attractive that can be accepted by a wide range of audiences.|||It allows us for the endless customization of our graphs that makes our plot more meaningful and understandable for others.&&&Installation|||Package Structure of Plotly|||Getting Started|||Creating Different Types of ChartsLine ChartBar ChartHistogramsScatter Plot and Bubble chartsPie ChartsBox PlotsViolin plotsGantt ChartsContour PlotsHeatmapsError Bars3D Line Plots3D Scatter Plot Plotly3D Surface Plots|||Line Chart|||Bar Chart|||Histograms|||Scatter Plot and Bubble charts|||Pie Charts|||Box Plots|||Violin plots|||Gantt Charts|||Contour Plots|||Heatmaps|||Error Bars|||3D Line Plots|||3D Scatter Plot Plotly|||3D Surface Plots|||Interacting with the PlotsCreating Dropdown Menu in PlotlyAdding Buttons to the PlotCreating Sliders and Selectors to the Plot|||Creating Dropdown Menu in Plotly|||Adding Buttons to the Plot|||Creating Sliders and Selectors to the Plot|||More Plots using Plotly|||More Topics on Plotly&&&Line Chart|||Bar Chart|||Histograms|||Scatter Plot and Bubble charts|||Pie Charts|||Box Plots|||Violin plots|||Gantt Charts|||Contour Plots|||Heatmaps|||Error Bars|||3D Line Plots|||3D Scatter Plot Plotly|||3D Surface Plots&&&Creating Dropdown Menu in Plotly|||Adding Buttons to the Plot|||Creating Sliders and Selectors to the Plot&&&plotly.plotly|||plotly.graph.objects|||plotly.tools&&&plotly.express.line() function in Python|||Line Chart using Plotly in Python&&&Bar chart using Plotly in Python|||How to create Stacked bar chart in Python-Plotly?|||How to group Bar Charts in Python-Plotly?&&&Histogram using Plotly in Python|||Histograms in Plotly using graph_objects class|||How to create a Cumulative Histogram in Plotly?&&&plotly.express.scatter() function in Python|||Scatter plot in Plotly using graph_objects class|||Scatter plot using Plotly in Python|||Bubble chart using Plotly in Python&&&Pie plot using Plotly in Python&&&Box Plot using Plotly in Python|||Box plot in Plotly using graph_objects class|||How to create Grouped box plot in Plotly?&&&Violin Plots using Plotly&&&Gantt Chart in Plotly&&&Contour Plots using Plotly in Python&&&Create Heatmaps using graph_objects class in Plotly|||Annotated Heatmaps using Plotly in Python&&&plotly.express.line_3d() function in Python|||3D Line Plots using Plotly in Python&&&3D scatter plot using Plotly in Python|||3D Scatter Plot using graph_objects Class in Plotly-Python|||3D Bubble chart using Plotly in Python&&&restyle: modify data or data attributes|||relayout: modify layout attributes|||update: modify data and layout attributes|||animate: start or pause an animation&&&restyle: modify data or data attributes|||relayout: modify layout attributes|||update: modify data and layout attributes|||animate: start or pause an animation&&&plotly.express.scatter_geo() function in Python|||plotly.express.scatter_polar() function in Python|||plotly.express.scatter_ternary() function in Python|||plotly.express.line_ternary() function in Python|||Filled area chart using plotly in Python|||How to Create Stacked area plot using Plotly in Python?|||Sunburst Plot using Plotly in Python|||Sunburst Plot using graph_objects class in plotly|||plotly.figure_factory.create_annotated_heatmap() function in Python|||plotly.figure_factory.create_2d_density() function in Python|||Ternary contours Plot using Plotly in Python|||How to make Log Plots in Plotly – Python?|||Polar Charts using Plotly in Python|||Carpet Contour Plot using Plotly in Python|||Ternary Plots in Plotly|||How to create a Ternary Overlay using Plotly?|||Parallel Coordinates Plot using Plotly in Python|||Carpet Plots using Plotly in Python|||3D Cone Plots using Plotly in Python|||3D Volume Plots using Plotly in Python|||3D Streamtube Plots using Plotly in Python|||3D Mesh Plots using Plotly in Python|||How to create Tables using Plotly in Python?|||plotly.figure_factory.create_dendrogram() function in Python|||Define Node position in Sankey Diagram in plotly|||Sankey Diagram using Plotly in Python|||Quiver Plots using Plotly in Python|||Treemap using Plotly in Python|||Treemap using graph_objects class in plotly|||plotly.figure_factory.create_candlestick() function in Python|||plotly.figure_factory.create_choropleth() function in Python|||plotly.figure_factory.create_bullet() in Python|||Streamline Plots in Plotly using Python|||How to make Wind Rose and Polar Bar Charts in Plotly – Python?&&&Title alignment in Plotly|||Change marker border color in Plotly – Python|||Plot Live Graphs using Python Dash and Plotly|||Animated Data Visualization using Plotly Express|||Introduction to Plotly-online using Python|||How to display image using Plotly?\']'),(267,'[\'Python Bokeh tutorial – Interactive Data Visualization with Bokeh\']','[\'Installation\', \'Bokeh Interfaces – Basic Concepts of Bokeh\', \'Getting Started\', \'Python3\', \'Annotations and Legends\', \'Python3\', \'Python3\', \'Plotting Different Types of Plots\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python\', \'Python3\', \'Python3\', \'Creating Different Shapes\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Plotting Multiple Plots\', \'Python3\', \'Python3\', \'Python3\', \'Interactive Data Visualization\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Python3\', \'Creating Different Types of Glyphs\', \'Visualizing Different Types of Data\', \'More Topics on Bokeh\']','[\'Bokeh.models\', \'bokeh.plotting\', \'Customizing Legends\', \'Line Plot\', \'Bar Plot\', \'Scatter Plot\', \'Patch Plot\', \'Area Plot\', \'Pie Chart\', \'Circle\', \'Oval\', \'Triangle\', \'Rectangle\', \'Polygon\', \'Vertical Layouts\', \'Horizontal Layoutxa0\', \'Grid Layout\', \'Configuring Plot Tools\', \'Adjusting the Position of the ToolBar\', \'Interactive Legends\', \'Adding Widgets to the Plot\']','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210219160041/PythonBokehmin.jpg\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210208185539/bokehtutorialsimpleplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210208190521/Bokehtutorialannotationsandlegends.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210163252/bokehtutorialcustomizelegend.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210208192936/bokehtutoriallineplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210208194150/bokehtutorialhbar.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210208194408/bokehtutorialvbar.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209180742/bokehtutorialscatterplot.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209182138/patchplotbokehtutorial.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200618231309/varea.JPG\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200618231307/harea.JPG\', \'https://media.geeksforgeeks.org/wp-content/uploads/20200706011148/bokeh-wedge-default.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209201208/bokehtutorialcircle.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209201718/boekhtutorialoval.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209202809/bokehtutorialtriangle.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209202331/bokehtutorialrectanlge.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209203219/bokehtutorialploygon.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209205340/bokehtutorialcolumn.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209205822/BokehTutorialroe.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209210323/Bokehtutorialgrid.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210209215203/BokehTutorialtoolbar.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210171603/bokehtutorialhidinglegend.gif\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210171452/mutinglegendbokeh.gif\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210175740/bokehtutorialbutton.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210180650/bokehtutorialcheckbox.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210181845/bokehtutorialradiobutton.png\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210182505/bokehtutorialslider.gif\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210190822/bokehtutorialdropdown.gif\', \'https://media.geeksforgeeks.org/wp-content/uploads/20210210191552/bokehtutorialtabs.gif\']','[]','[\'https://www.geeksforgeeks.org/introduction-to-bokeh-in-python/\', \'https://www.geeksforgeeks.org/#Installation\', \'https://www.geeksforgeeks.org/#Interfaces\', \'https://www.geeksforgeeks.org/#Getting\', \'https://www.geeksforgeeks.org/#Annotations\', \'https://www.geeksforgeeks.org/#Legends\', \'https://www.geeksforgeeks.org/#Plotting\', \'https://www.geeksforgeeks.org/#Bar\', \'https://www.geeksforgeeks.org/#Scatter\', \'https://www.geeksforgeeks.org/#Patch\', \'https://www.geeksforgeeks.org/#Area\', \'https://www.geeksforgeeks.org/#Pie\', \'https://www.geeksforgeeks.org/#Creating\', \'https://www.geeksforgeeks.org/#Circle\', \'https://www.geeksforgeeks.org/#Oval\', \'https://www.geeksforgeeks.org/#Triangle\', \'https://www.geeksforgeeks.org/#Rectangle\', \'https://www.geeksforgeeks.org/#Polygon\', \'https://www.geeksforgeeks.org/#Plotting\', \'https://www.geeksforgeeks.org/#Vertical\', \'https://www.geeksforgeeks.org/#Horizontal\', \'https://www.geeksforgeeks.org/#Grid\', \'https://www.geeksforgeeks.org/#Interactive\', \'https://www.geeksforgeeks.org/#Configuring\', \'https://www.geeksforgeeks.org/#Interactive2\', \'https://www.geeksforgeeks.org/#Widgets\', \'https://www.geeksforgeeks.org/#Glyphs\', \'https://www.geeksforgeeks.org/#Data\', \'https://www.geeksforgeeks.org/#More\', \'https://www.geeksforgeeks.org/python-setting-up-the-bokeh-environment/\', \'https://www.geeksforgeeks.org/matplotlib-tutorial/\', \'https://www.geeksforgeeks.org/bokeh-annotations-and-legends/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-a-line-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-a-line-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-multiple-lines-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-horizontal-bar-graphs/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-vertical-bar-graphs/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-a-scatter-plot-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-patches-on-a-graph/\', \'https://www.geeksforgeeks.org/make-an-area-plot-in-python-using-bokeh/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-wedges-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-wedges-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-making-a-pie-chart/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-circle-function-in-python/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-circle_cross-function-in-python/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-circle_x-function-in-python/\', \'https://www.geeksforgeeks.org/make-an-circle-glyphs-in-python-using-bokeh/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-ovals-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-triangles-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-multiple-polygons-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-making-interactive-legends/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-diamond-function-in-python/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-dash-function-in-python/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-cross-function-in-python/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-diamonds-on-a-graph/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-diamond_cross-function-in-python/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-diamond-dots-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-rays-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-triangle-pins-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-triangles-with-dots-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-inverted-triangles-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-pluses-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-quadrilaterals-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-ys-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-xs-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-ovals-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-hexagons-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-hexagon-bins-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-hexagon-dots-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-squares-with-crosses-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-squares-with-dots-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-squares-with-dots-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-ellipses-on-a-graph/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-annulus-function-in-python/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-bezier-function-in-python/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-asterisk-function-in-python/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-annular_wedge-function-in-python/\', \'https://www.geeksforgeeks.org/bokeh-plotting-figure-step-function-in-python/\', \'https://www.geeksforgeeks.org/python-bokeh-visualizing-the-iris-dataset/\', \'https://www.geeksforgeeks.org/python-bokeh-visualizing-stock-data/\', \'https://www.geeksforgeeks.org/interactive-visualization-of-data-using-bokeh/\', \'https://www.geeksforgeeks.org/python-bokeh-colors-class/\', \'https://www.geeksforgeeks.org/how-to-use-color-palettes-in-python-bokeh/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-quadratic-curves-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-line-segments-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-multiple-lines-on-a-graph/\', \'https://www.geeksforgeeks.org/python-bokeh-plotting-glyphs-over-a-google-map/\', \'https://www.geeksforgeeks.org/python-bokeh-plot-for-all-types-of-google-maps-roadmap-satellite-hybrid-terrain/\', \'https://practice.geeksforgeeks.org/contest/job-a-thon-5-hiring-challenge/?utm_source=article&utm_medium=in-article&utm_campaign=in-article\']','[\'Features of Bokeh:\', \'Table Of Contentxa0\', \'1. Required Dependencies\', \'2. Optional Dependencies\', \'Refer to the below article to get detailed information about the installation of Bokeh.\', \'After the installation and learning about the basic concepts of Bokeh let’s create a simple plot.\', \'Refer to the below articles to get detailed information about the annotations and legends\', \'Legends in Bokeh can be customized using the following properties.\', \'line(parameters)\', \'Refer to the below articles to get detailed information about the line plots.\', \'hbar(parameters)\', \'vbar(parameters)\', \'Example 1: Creating horizontal bars.\', \'Example 2: Creating the vertical bars\', \'Refer to the below articles to get detailed information about the bar charts.\', \'Refer to the below articles to get detailed information about the scatter plots.\', \'patch(parameters)\', \'Refer to the below articles to get detailed information about the Patch Plot.\', \'varea(x, y1, y2, **kwargs)\', \'harea(x1, x2, y, **kwargs)\', \'Example 1: Creating vertical area plot\', \'Example 2: Creating horizontal area plot\', \'Refer to the below articles to get detailed information about the area charts\', \'wedge(parameters)\', \'Refer to the below articles to get detailed information about the pie charts.\', \'Bokeh Figure class following methods to draw circle glyphs which are given below:\', \'Refer to the below articles to get detailed information about the circle glyphs\', \'oval() method can be used to plot ovals on the graph.\', \'oval(parameters)\', \'Refer o the below articles to get detailed information about the oval glyphs.\', \'Triangle can be created using the triangle() method.\', \'triangle(parameters)\', \'Refer to the below article to get detailed information about the triangles.\', \'rect(parameters)\', \'multi_polygons(parameters)\', \'Refer to the below articles to get detailed information about the polygon glyphs.\', \'Example 1: Hiding the legend\', \'Example 2: Muting the legend\', \'Button(label, icon, callback)\', \'RadioGroup(labels, active)\', \'Slider(start, end, step, value)\']','[\'Python Bokeh is a Data Visualization library that provides interactive charts and plots. Bokeh renders its plots using HTML and JavaScript that uses modern web browsers for presenting elegant, concise construction of novel graphics with high-level interactivity.xa0\', \'This tutorial aims at providing insight to Bokeh using well-explained concepts and examples with the help of a huge dataset. So let’s dive deep into the Bokeh and learn all it from basic to advance.\', \'Bokeh is supported by CPython 3.6 and older with both standard distribution and anaconda distribution. Bokeh package has the following dependencies.\', \'Bokeh can be installed using both conda package manager and pip. To install it using conda type the below command in the terminal.\', \'This will install all the dependencies. If all the dependencies are installed then you can install the bokeh from PyPI using pip. Type the below command in the terminal.\', \'Bokeh is simple to use as it provides a simple interface to the data scientists who do not want to be distracted by its implementation and also provides a detailed interface to developers and software engineers who may want more control over the Bokeh to create more sophisticated features. To do this Bokeh follows the layered approach.xa0\', \'This class is the Python Library for Bokeh that contains model classes that handle the JSON data created by Bokeh’s JavaScript library (BokehJS). Most of the models are very basic consisting of very few attributes or no methods.\', \'This is the mid-level interface that provides Matplotlib or MATLAB like features for plotting. It deals with the data that is to be plotted and creating the valid axes, grids, and tools. The main class of this interface is the Figure class.\', \'In the above example, we have created a simple Plot with the Title as Bokeh Line Graph. If you are using Jupyter then the output will be created in a new tab in the browser.\', \'Annotations are the supplemental information such as titles, legends, arrows, etc that can be added to the graphs. In the above example, we have already seen how to add the titles to the graph. In this section, we will see about the legends.\', \'Adding legends to your figures can help to properly describe and define them. Hence, giving more clarity. Legends in Bokeh are simple to implement. They can be basic, automatically grouped, manually mentioned, explicitly indexed, and also interactive.\', \'In the above example, we have plotted two different lines with a legend that simply states that which is line 1 and which is line 2. The color in the legends is also differentiated by the color.\', \'Glyphs in Bokeh terminology means the basic building blocks of the Bokeh plots such as lines, rectangles, squares, etc. Bokeh plots are created using the bokeh.plotting interface which uses a default set of tools and styles.\', \'Line charts are used to represent the relation between two data X and Y on a different axis. A line plot can be created using the line() method of the plotting module.\', \'Bar plot or Bar chart is a graph that represents the category of data with rectangular bars with lengths and heights that is proportional to the values which they represent. It can be of two types horizontal bars and vertical bars. Each can be created using the hbar() and vbar() functions of the plotting interface respectively.\', \'A scatter plot is a set of dotted points to represent individual pieces of data in the horizontal and vertical axis. A graph in which the values of two variables are plotted along X-axis and Y-axis, the pattern of the resulting points reveals a correlation between them. It can be plotted using the scatter() method of the plotting module.\', \'Patch Plot shades a region of area to show a group having same properties. It can be created using the patch() method of the plotting module.\', \'Area plots are defined as the filled regions between two series that share a common areas. Bokeh Figure class has two methods which are – varea(), harea()\', \'The Figure class in Bokeh allows us create vectorised glyphs of different shapes such as circle, rectangle, oval, polygon, etc. Let’s discuss them in detail.\', \'Just like circles and ovals rectangle can also be plotted in Bokeh. It can be plotted using the rect() method.\', \'Bokeh can also be used to plot multiple polygons on a graph. Plotting multiple polygons on a graph can be done using the multi_polygons() method of the plotting module.\', \'There are several layouts provided by the Bokeh in order to creat Multiple Plots. These layouts are:\', \'Vertical Layout set all the plots in the vertical fashion and can be created using the column() method.\', \'Horizontal Layout set all the plots in the horizontal fashion. It can be created using the row() method.\', \'gridplot() method can be used to arrange all the plots in the grid fashion. we can also pass None to leave a space empty for a plot.\', \'One of the key feature of Bokeh which differentiate it from other visualizing libraries is adding interaction to the Plot. Let’s see various interactions that can be added to the plot.\', \'In all the above graphs you must have noticed a toolbar that appears mostly at the right of the plot. Bokeh provides us the methods to handle these tools. Tools can be classified into four categories.\', \'We can specify the position of the toolbar according to our own needs. It can be done by passing the toolbar_location parameter to the figure() method. The possible value to this parameter is –xa0\', \'In the section annotations and legends we have seen the list of all the parameters of the legends, however, we have not discussed the click_policy parameter yet. This property makes the legend interactive. There are two types of interactivity –\', \'Bokeh provides GUI features similar to HTML forms like buttons, slider, checkbox, etc. These provide an interactive interface to the plot that allows to change the parameters of the plot, modifying plot data, etc. Let’s see how to use and add some commonly used widgets.xa0\']','[\'Bokeh Does not provide a direct method to plot the Pie Chart. It can be created using the wedge() method. In the wedge() function, the primary parameters are the x and y coordinates of the wedge, the radius, the start_angle and the end_angle of the wedge. In order to plot the wedges in such a way that they look like a pie chart, the x, y, and radius parameters of all the wedges will be the same. We will only adjust the start_angle and the end_angle.\']','[\'# importing the modulesfrom bokeh.plotting import figure, output_file, show # instantiating the figure objectgraph = figure(title = \"Bokeh Line Graph\") # the points to be plottedx = [1, 2, 3, 4, 5]y = [5, 4, 3, 2, 1] # plotting the line graphgraph.line(x, y) # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show # instantiating the figure objectgraph = figure(title=\"Bokeh Line Graph\") # the points to be plottedx = [1, 2, 3, 4, 5]y = [5, 4, 3, 2, 1] # plotting the 1st line graphgraph.line(x, x, legend_label=\"Line 1\") # plotting the 2nd line graph with a# different colorgraph.line(y, x, legend_label=\"Line 2\",           line_color=\"green\") # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show # instantiating the figure objectgraph = figure(title=\"Bokeh Line Graph\") # the points to be plottedx = [1, 2, 3, 4, 5]y = [5, 4, 3, 2, 1] # plotting the 1st line graphgraph.line(x, x, legend_label=\"Line 1\") # plotting the 2nd line graph with a# different colorgraph.line(y, x, legend_label=\"Line 2\",           line_color=\"green\") graph.legend.title = \"Title of the legend\"graph.legend.location =\"top_left\"graph.legend.label_text_font_size = \"17pt\" # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show # instantiating the figure objectgraph = figure(title = \"Bokeh Line Graph\") # the points to be plottedx = [1, 2, 3, 4, 5]y = [5, 4, 3, 2, 1] # plotting the line graphgraph.line(x, y) # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show # instantiating the figure objectgraph = figure(title = \"Bokeh Bar Graph\") # the points to be plottedx = [1, 2, 3, 4, 5]y = [1, 2, 3, 4, 5]  # height / thickness of the plotheight = 0.5 # plotting the bar graphgraph.hbar(x, right = y, height = height) # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show # instantiating the figure objectgraph = figure(title = \"Bokeh Bar Graph\") # the points to be plottedx = [1, 2, 3, 4, 5]y = [1, 2, 3, 4, 5]  # height / thickness of the plotwidth = 0.5 # plotting the bar graphgraph.vbar(x, top = y, width = width) # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, showfrom bokeh.palettes import magmaimport random      # instantiating the figure objectgraph = figure(title = \"Bokeh Scatter Graph\") # points to be plottedx = [n for n in range(256)]y = [random.random() + 1 for n in range(256)]  # plotting the graphgraph.scatter(x, y) # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, showfrom bokeh.palettes import magmaimport random      # instantiating the figure objectgraph = figure(title = \"Bokeh Patch Plo\") # points to be plottedx = [n for n in range(256)]y = [random.random() + 1 for n in range(256)] # plotting the graphgraph.patch(x, y) # displaying the modelshow(graph)\', \'# Implementation of bokeh functionimport numpy as npfrom bokeh.plotting import figure, output_file, show     x = [1, 2, 3, 4, 5]y1 = [2, 4, 5, 2, 4]y2 = [1, 2, 2, 3, 6] p = figure(plot_width=300, plot_height=300) # area plotp.varea(x=x, y1=y1, y2=y2,fill_color=\"green\") show(p)\', \'# Implementation of bokeh function     import numpy as npfrom bokeh.plotting import figure, output_file, show     y = [1, 2, 3, 4, 5]x1 = [2, 4, 5, 2, 4]x2 = [1, 2, 2, 3, 6] p = figure(plot_width=300, plot_height=300) # area plotp.harea(x1=x1, x2=x2, y=y,fill_color=\"green\") show(p)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show         # instantiating the figure objectgraph = figure(title = \"Bokeh Wedge Graph\")     # the points to be plottedx = 0y = 0 # radius of the wedgeradius = 15 # start angle of the wedgestart_angle = 1 # end angle of the wedgeend_angle = 2 # plotting the graphgraph.wedge(x, y, radius = radius,            start_angle = start_angle,            end_angle = end_angle)     # displaying the modelshow(graph)\', \'import numpy as npfrom bokeh.plotting import figure, output_file, show # creating the figure objectplot = figure(plot_width = 300, plot_height = 300) plot.circle(x = [1, 2, 3], y = [3, 7, 5], size = 20) show(plot)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show      # instantiating the figure objectgraph = figure(title = \"Bokeh Oval Graph\")     # the points to be plottedx = [1, 2, 3, 4, 5]y = [i * 2 for i in x] # plotting the graphgraph.oval(x, y,        height = 0.5,        width = 1)     # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show  # instantiating the figure objectgraph = figure(title = \"Bokeh Triangle Graph\")     # the points to be plottedx = 1y = 1 # plotting the graphgraph.triangle(x, y, size = 150)     # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show          # instantiating the figure objectgraph = figure(title = \"Bokeh Rectangle Graph\", match_aspect = True) # the points to be plottedx = 0y = 0width = 10height = 5 # plotting the graphgraph.rect(x, y, width, height)     # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show      # instantiating the figure objectgraph = figure(title = \"Bokeh Multiple Polygons Graph\")     # the points to be plottedxs = [[[[1, 1, 3, 4]]]]ys = [[[[1, 3, 2 ,1]]]]     # plotting the graphgraph.multi_polygons(xs, ys)     # displaying the modelshow(graph)\', \'from bokeh.io import output_file, showfrom bokeh.layouts import columnfrom bokeh.plotting import figure  x = [1, 2, 3, 4, 5, 6]y0 = xy1 = [i * 2 for i in x]y2 = [i ** 2 for i in x] # create a new plots1 = figure(width=200, plot_height=200)s1.circle(x, y0, size=10, alpha=0.5) # create another ones2 = figure(width=200, height=200)s2.triangle(x, y1, size=10, alpha=0.5) # create and anothers3 = figure(width=200, height=200)s3.square(x, y2, size=10, alpha=0.5) # put all the plots in a VBoxp = column(s1, s2, s3) # show the resultsshow(p)\', \'from bokeh.io import output_file, showfrom bokeh.layouts import rowfrom bokeh.plotting import figure  x = [1, 2, 3, 4, 5, 6]y0 = xy1 = [i * 2 for i in x]y2 = [i ** 2 for i in x] # create a new plots1 = figure(width=200, plot_height=200)s1.circle(x, y0, size=10, alpha=0.5) # create another ones2 = figure(width=200, height=200)s2.triangle(x, y1, size=10, alpha=0.5) # create and anothers3 = figure(width=200, height=200)s3.square(x, y2, size=10, alpha=0.5) # put all the plots in a VBoxp = row(s1, s2, s3) # show the resultsshow(p)\', \'from bokeh.io import output_file, showfrom bokeh.layouts import gridplotfrom bokeh.plotting import figure  x = [1, 2, 3, 4, 5, 6]y0 = xy1 = [i * 2 for i in x]y2 = [i ** 2 for i in x] # create a new plots1 = figure()s1.circle(x, y0, size=10, alpha=0.5) # create another ones2 = figure()s2.triangle(x, y1, size=10, alpha=0.5) # create and anothers3 = figure()s3.square(x, y2, size=10, alpha=0.5) # put all the plots in a gridp = gridplot([[s1, None], [s2, s3]], plot_width=200, plot_height=200) # show the resultsshow(p)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show # instantiating the figure objectgraph = figure(title = \"Bokeh ToolBar\", toolbar_location=\"below\") # the points to be plottedx = [1, 2, 3, 4, 5]y = [1, 2, 3, 4, 5]  # height / thickness of the plotwidth = 0.5 # plotting the scatter graphgraph.scatter(x, y) # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show # file to save the modeloutput_file(\"gfg.html\")         # instantiating the figure objectgraph = figure(title = \"Bokeh Hiding Glyphs\") # plotting the graphgraph.vbar(x = 1, top = 5,        width = 1, color = \"violet\",        legend_label = \"Violet Bar\")graph.vbar(x = 2, top = 5,        width = 1, color = \"green\",        legend_label = \"Green Bar\")graph.vbar(x = 3, top = 5,        width = 1, color = \"yellow\",        legend_label = \"Yellow Bar\")graph.vbar(x = 4, top = 5,        width = 1, color = \"red\",        legend_label = \"Red Bar\") # enable hiding of the glyphsgraph.legend.click_policy = \"hide\" # displaying the modelshow(graph)\', \'# importing the modulesfrom bokeh.plotting import figure, output_file, show # file to save the modeloutput_file(\"gfg.html\")         # instantiating the figure objectgraph = figure(title = \"Bokeh Hiding Glyphs\") # plotting the graphgraph.vbar(x = 1, top = 5,        width = 1, color = \"violet\",        legend_label = \"Violet Bar\",        muted_alpha=0.2)graph.vbar(x = 2, top = 5,        width = 1, color = \"green\",        legend_label = \"Green Bar\",        muted_alpha=0.2)graph.vbar(x = 3, top = 5,        width = 1, color = \"yellow\",        legend_label = \"Yellow Bar\",        muted_alpha=0.2)graph.vbar(x = 4, top = 5,        width = 1, color = \"red\",        legend_label = \"Red Bar\",        muted_alpha=0.2) # enable hiding of the glyphsgraph.legend.click_policy = \"mute\" # displaying the modelshow(graph)\', \'from bokeh.io import showfrom bokeh.models import Button, CustomJS button = Button(label=\"GFG\")button.js_on_click(CustomJS(  code=\"console.log(\'button: click!\', this.toString())\")) show(button)\', \'from bokeh.io import showfrom bokeh.models import CheckboxGroup, CustomJS L = [\"First\", \"Second\", \"Third\"] # the active parameter sets checks the selected value# by defaultcheckbox_group = CheckboxGroup(labels=L, active=[0, 2]) checkbox_group.js_on_click(CustomJS(code=\"\"\"    console.log(\'checkbox_group: active=\' + this.active, this.toString())\"\"\")) show(checkbox_group)\', \'from bokeh.io import showfrom bokeh.models import RadioGroup, CustomJS L = [\"First\", \"Second\", \"Third\"] # the active parameter sets checks the selected value# by defaultradio_group = RadioGroup(labels=L, active=1) radio_group.js_on_click(CustomJS(code=\"\"\"    console.log(\'radio_group: active=\' + this.active, this.toString())\"\"\")) show(radio_group)\', \'from bokeh.io import showfrom bokeh.models import CustomJS, Slider slider = Slider(start=1, end=20, value=1, step=2, title=\"Slider\") slider.js_on_change(\"value\", CustomJS(code=\"\"\"    console.log(\'slider: value=\' + this.value, this.toString())\"\"\")) show(slider)\', \'from bokeh.io import showfrom bokeh.models import CustomJS, Dropdown menu = [(\"First\", \"First\"), (\"Second\", \"Second\"), (\"Third\", \"Third\")] dropdown = Dropdown(label=\"Dropdown Menu\", button_type=\"success\", menu=menu) dropdown.js_on_event(\"menu_item_click\", CustomJS(    code=\"console.log(\'dropdown: \' + this.item, this.toString())\")) show(dropdown)\', \'from bokeh.plotting import figure, output_file, showfrom bokeh.models import Panel, Tabsimport numpy as npimport math  fig1 = figure(plot_width=300, plot_height=300) x = [1, 2, 3, 4, 5]y = [5, 4, 3, 2, 1] fig1.line(x, y, line_color=\'green\')tab1 = Panel(child=fig1, title=\"Tab 1\") fig2 = figure(plot_width=300, plot_height=300) fig2.line(y, x, line_color=\'red\')tab2 = Panel(child=fig2, title=\"Tab 2\") all_tabs = Tabs(tabs=[tab1, tab2]) show(all_tabs)\']','[\'conda install bokeh\', \'pip install bokeh\', \'scatter(parameters)\']','[\'legend.label_text_fontxa0|||change default label font to specified font name&&&legend.label_text_font_sizexa0|||font size in points&&&legend.locationxa0|||set the label at specified location.&&&legend.titlexa0|||set title for legend labelxa0&&&legend.orientationxa0|||set to horizontal (default) or vertical&&&legend.clicking_policyxa0|||specify what should happen when legend is clicked\']','[\'Flexibility: Bokeh can be used for common plotting requirements and for custom and complex use-cases.|||Productivity: Its interaction with other popular Pydata tools (such as Pandas and Jupyter notebook) is very easy.|||Interactivity: It creates interactive plots that change with the user interaction.|||Powerful: Generation of visualizations for specialized use-cases can be done by adding JavaScript.|||Shareable: Visual data are shareable. They can also be rendered in Jupyter notebooks.|||Open source: Bokeh is an open-source project.&&&Installation|||Bokeh Interfaces – Basic Concepts of Bokeh|||Getting Started|||Annotations and LegendsCustomizing Legends|||Customizing Legends|||Plotting Different Types of PlotsBar PlotScatter PlotPatch PlotArea PlotPie Chart|||Bar Plot|||Scatter Plot|||Patch Plot|||Area Plot|||Pie Chart|||Creating Different ShapesCircleOvalTriangleRectanglePolygon|||Circle|||Oval|||Triangle|||Rectangle|||Polygon|||Plotting Multiple PlotsVertical LayoutsHorizontal LayoutGrid Layout|||Vertical Layouts|||Horizontal Layout|||Grid Layout|||Interactive Data VisualizationConfiguring Plot ToolsInteractive LegendsAdding Widgets to the Plot|||Configuring Plot Tools|||Interactive Legends|||Adding Widgets to the Plot|||Creating Different Types of Glyphs|||Visualizing Different Types of Data|||More Topics on Bokeh&&&Customizing Legends&&&Bar Plot|||Scatter Plot|||Patch Plot|||Area Plot|||Pie Chart&&&Circle|||Oval|||Triangle|||Rectangle|||Polygon&&&Vertical Layouts|||Horizontal Layout|||Grid Layout&&&Configuring Plot Tools|||Interactive Legends|||Adding Widgets to the Plot&&&PyYAML>=3.10|||python-dateutil>=2.1|||Jinja2>=2.7|||numpy>=1.11.3|||pillow>=4.0|||packaging>=16.8|||tornado>=5|||typing_extensions >=3.7.4&&&Jupyter|||NodeJS|||NetworkX|||Pandas|||psutil|||Selenium, GeckoDriver, Firefox|||Sphinx&&&Python – Setting up the Bokeh Environment&&&Bokeh – Annotations and Legends&&&Python Bokeh – Plotting a Line Graph|||Python Bokeh – Plotting Multiple Lines on a Graph&&&Python Bokeh – Plotting Horizontal Bar Graphs|||Python Bokeh – Plotting Vertical Bar Graphs&&&Python Bokeh – Plotting a Scatter Plot on a Graph&&&Python Bokeh – Plotting Patches on a Graph&&&Make an area plot in Python using Bokeh&&&Python Bokeh – Plotting Wedges on a Graph|||Python Bokeh – Making a Pie Chart&&&circle() method is a used to add a circle glyph to the figure and needs x and y coordinates of its center.|||circle_cross() method is a used to add a circle glyph with a ‘+’ cross through the center to the figure and needs x and y coordinates of its center.|||circle_x() method is a used to add a circle glyph with a ‘X’ cross through the center. to the figure and needs x and y coordinates of its center.&&&Make an Circle Glyphs in Python using Bokeh&&&Python Bokeh – Plotting Ovals on a Graph&&&Python Bokeh – Plotting Triangles on a Graph&&&Python Bokeh – Plotting Multiple Polygons on a Graph&&&Vertical Layout|||Horizontal Layout|||Grid Layout&&&Gestures: These tools handle the gestures such as pan movement. There are three types of gestures:Pan/Drag ToolsClick/Tap ToolsScroll/Pinch Tools|||Pan/Drag Tools|||Click/Tap Tools|||Scroll/Pinch Tools|||Actions: These tools handle when a button is pressed.|||Inspectors: These tools report information or annotate the graph such as HoverTool.|||Edit Tools: These are multi gestures tools that can add, delete glyphs from the graph.&&&Pan/Drag Tools|||Click/Tap Tools|||Scroll/Pinch Tools&&&“above”|||“below”|||“left”|||“right”&&&Hiding: Hides the Glyphs.|||Muting: Hiding the glyph makes it vanish completely, on the other hand, muting the glyph just de-emphasizes the glyph based on the parameters.&&&Buttons: This widget adds a simple button widget to the plot. We have to pass a custom JavaScript function to the CustomJS() method of the models class.&&&CheckboxGroup: Adds a standard check box to the plot. Similarly to buttons we have to pass the custom JavaScript function to the CustomJS() method of the models class.&&&RadioGroup: Adds a simple radio button and accepts a custom JavaScript function.&&&Sliders: Adds a slider to the plot. It also needs a custom JavaScript function.&&&DropDown: Adds a dropdown to the plot and like every other widget it also needs a custom JavaScript function as callback.&&&Tab Widget: Tab Widget adds tabs and each tab show a different plot.&&&Diamond Glyph|||Dash Glyph|||Cross Glyph|||Diamond Glyph|||Diamond Cross Glyph|||Diamond Dot Glyph|||Ray Glyph|||Triangle Pins Glyph|||Triangle with Dots Glyph|||Inverted Triangle Glyph|||Plus Glyph|||Quadrilateral Glyph|||Y Glyph|||X Glyph|||Oval Glyph|||Hexagon Glyph|||Hexagon Tiles Glyph|||Hexagon Dots Glyph|||Square with Cross Glyph|||Square with Dots Glyph|||Square with X’s Glyph|||Ellipse glyph|||Annulus Glyph|||Bezier Glyph|||Asterisk Glyph|||AnnularWedge Glyph|||Step Glyph&&&Python Bokeh – Visualizing the Iris Dataset|||Python Bokeh – Visualizing Stock Data|||Interactive visualization of data using Bokeh&&&Python Bokeh – Colors Class|||How to use Color Palettes in Python-Bokeh?|||Python Bokeh – Plotting Quadratic Curves on a Graph|||Python Bokeh – Plotting Line Segments on a Graph|||Python Bokeh – Plotting Multiple Lines on a Graph|||Python Bokeh – Plotting glyphs over a Google Map|||Python Bokeh – Plot for all Types of Google Maps ( roadmap, satellite, hybrid, terrain)\']'),(268,'[\'Tableau Tutorial\']','[\'Introduction\', \'Tableau Basics\', \'Working with Data Sources\', \'Visualization using Tableau\', \'Tableau Calculations\', \'Sort and Filter with Tableau\', \'Different Charts in Tableau\', \'Working with Dashboards\', \'Advance Tableau Topics\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210122154812/TableauTutorial.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/what-is-tableau-and-its-importance-in-data-visualization/\', \'https://www.geeksforgeeks.org/tableau-installation-guide/\', \'https://www.geeksforgeeks.org/tableau-drivers-download-and-connect/\', \'https://www.geeksforgeeks.org/tableau-data-terminology/\', \'https://www.geeksforgeeks.org/power-bi-vs-tableau-top-5-key-differences-that-you-should-know/\', \'https://www.geeksforgeeks.org/difference-between-google-data-studio-vs-tableau/\', \'https://www.geeksforgeeks.org/tableau-navigation/\', \'https://www.geeksforgeeks.org/start-page-in-tableau/\', \'https://www.geeksforgeeks.org/tableau-design-flow/\', \'https://www.geeksforgeeks.org/tableau-file-system/\', \'https://www.geeksforgeeks.org/tableau-data-types/\', \'https://www.geeksforgeeks.org/how-to-change-data-type-in-tableau/\', \'https://www.geeksforgeeks.org/show-me-in-tableau/\', \'https://www.geeksforgeeks.org/tableau-connect-to-a-data-source/\', \'https://www.geeksforgeeks.org/import-excel-file-in-tableau/\', \'https://www.geeksforgeeks.org/data-cleaning-in-tableau/\', \'https://www.geeksforgeeks.org/tableau-join-databases/\', \'https://www.geeksforgeeks.org/tableau-joining-data-files-with-inconsistent-labels/\', \'https://www.geeksforgeeks.org/data-blending-in-tableau/\', \'https://www.geeksforgeeks.org/replacing-data-source-in-tableau/\', \'https://www.geeksforgeeks.org/tableau-split-the-text-to-columns/\', \'https://www.geeksforgeeks.org/tableau-displaying-data-in-worksheet/\', \'https://www.geeksforgeeks.org/tableau-adding-renaming-and-duplicating-worksheets/\', \'https://www.geeksforgeeks.org/tableau-create-visualization/\', \'https://www.geeksforgeeks.org/tableau-change-the-order-in-visualisation/\', \'https://www.geeksforgeeks.org/tableau-change-the-summary/\', \'https://www.geeksforgeeks.org/tableau-operators/\', \'https://www.geeksforgeeks.org/if-function-in-tableau/\', \'https://www.geeksforgeeks.org/aggregate-functions-in-tableau/\', \'https://www.geeksforgeeks.org/create-calculated-field-in-tableau/\', \'https://www.geeksforgeeks.org/logical-functions-in-tableau/\', \'https://www.geeksforgeeks.org/case-function-in-tableau/\', \'https://www.geeksforgeeks.org/highlight-tables-in-tableau/\', \'https://www.geeksforgeeks.org/quick-table-calculation-in-tableau/\', \'https://www.geeksforgeeks.org/lod-expression-in-tableau/\', \'https://www.geeksforgeeks.org/filtering-in-visualization-in-tableau/\', \'https://www.geeksforgeeks.org/quick-filter-in-tableau/\', \'https://www.geeksforgeeks.org/context-filter-in-tableau/\', \'https://www.geeksforgeeks.org/conditional-filter-in-tableau/\', \'https://www.geeksforgeeks.org/slicing-filter-in-tableau/\', \'https://www.geeksforgeeks.org/grouping-in-visualization-in-tableau/\', \'https://www.geeksforgeeks.org/hierarchy-in-tableau/\', \'https://www.geeksforgeeks.org/set-in-tableau/\', \'https://www.geeksforgeeks.org/combined-set-in-tableau/\', \'https://www.geeksforgeeks.org/parameters-in-tableau/\', \'https://www.geeksforgeeks.org/tableau-bins/\', \'https://www.geeksforgeeks.org/manual-sorting-of-visualization-in-tableau/\', \'https://www.geeksforgeeks.org/sorting-by-data-source-order-in-visualization-in-tableau/\', \'https://www.geeksforgeeks.org/sorting-by-field-in-visualization-in-tableau/\', \'https://www.geeksforgeeks.org/line-graph-in-tableau/\', \'https://www.geeksforgeeks.org/dual-lines-chart-in-tableau/\', \'https://www.geeksforgeeks.org/bar-chart-in-tableau/\', \'https://www.geeksforgeeks.org/side-by-side-bars-in-tableau/\', \'https://www.geeksforgeeks.org/stacked-bars-in-tableau/\', \'https://www.geeksforgeeks.org/histogram-in-tableau/\', \'https://www.geeksforgeeks.org/cumulative-histogram-in-tableau/\', \'https://www.geeksforgeeks.org/scatter-plot-in-tableau/\', \'https://www.geeksforgeeks.org/bubble-chart-in-tableau/\', \'https://www.geeksforgeeks.org/pie-chart-in-tableau/\', \'https://www.geeksforgeeks.org/crosstab-in-tableau/\', \'https://www.geeksforgeeks.org/total-in-a-crosstab-by-column-in-tableau/\', \'https://www.geeksforgeeks.org/box-plot-in-tableau/\', \'https://www.geeksforgeeks.org/bullet-graph-in-tableau/\', \'https://www.geeksforgeeks.org/area-chart-in-tableau/\', \'https://www.geeksforgeeks.org/heat-map-in-tableau/\', \'https://www.geeksforgeeks.org/basic-map-in-tableau/\', \'https://www.geeksforgeeks.org/geographical-plot-in-tableau/\', \'https://www.geeksforgeeks.org/lollipop-chart-in-tableau/\', \'https://www.geeksforgeeks.org/circle-views-in-tableau/\', \'https://www.geeksforgeeks.org/dual-combination-chart-in-tableau/\', \'https://www.geeksforgeeks.org/treemap-in-tableau/\', \'https://www.geeksforgeeks.org/funnel-chart-in-tableau/\', \'https://www.geeksforgeeks.org/traditional-funnel-chart-in-tableau/\', \'https://www.geeksforgeeks.org/waterfall-chart-in-tableau/\', \'https://www.geeksforgeeks.org/gantt-chart-in-tableau/\', \'https://www.geeksforgeeks.org/create-a-dashboard-in-tableau/\', \'https://www.geeksforgeeks.org/text-object-on-dashboard-in-tableau/\', \'https://www.geeksforgeeks.org/image-object-on-dashboard-in-tableau/\', \'https://www.geeksforgeeks.org/tableau-objects-on-dashboard/\', \'https://www.geeksforgeeks.org/tableau-filters-in-dashboard/\', \'https://www.geeksforgeeks.org/tableau-device-preview/\', \'https://www.geeksforgeeks.org/format-dashboard-layout-in-tableau/\', \'https://www.geeksforgeeks.org/forecast-in-tableau/\', \'https://www.geeksforgeeks.org/reference-line-in-tableau/\', \'https://www.geeksforgeeks.org/reference-band-in-tableau/\', \'https://www.geeksforgeeks.org/reference-distribution-band-in-tableau/\', \'https://www.geeksforgeeks.org/trend-lines-in-tableau/\', \'https://www.geeksforgeeks.org/tableau-building-up-a-storyline/\', \'https://www.geeksforgeeks.org/word-cloud-in-tableau/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[]','[\'In this tutorial, we will learn about Tableau from basics to advance using the huge dataset containing topics like Tableau basics, working with different data sources, different charts available in the Tableau, etc.\']','[\'Tableau is a powerful tool used for data analysis, visualization. It allows creating amazing and interactive visualization and that too without coding. It provides the features like cleaning, organizing, and visualizing data. Tableau is very famous as it can take in data and produce the required data visualization output in a very short time. Basically, it can elevate your data into insights that can be used to drive your action in the future. And Tableau can do all this while providing the highest level of security with a guarantee to handle security issues as soon as they arise or are found by users.\']','[]','[]','[]','[\'What is Tableau and its Importance in Data Visualization?|||Tableau Installation Guide|||Tableau Drivers – Download and Connect|||Tableau – Data Terminology|||Power BI vs Tableau – Top 5 Key Differences That You Should Know|||Difference Between Google Data Studio vs Tableau&&&Tableau – Navigation|||Start Page in Tableau|||Tableau – Design Flow|||Tableau – File System|||Tableau – Data Types|||How to change Data type in Tableau?|||Show Me in Tableau&&&Tableau – Connect to a data source|||Import Excel file in Tableau|||Data Cleaning in Tableau|||Tableau – Join databases|||Joining data files with inconsistent labels|||Data Blending|||Replacing Data source|||Tableau – Split the text to columns|||Tableau – Displaying data in Worksheet|||Tableau – Adding, Renaming and duplicating worksheets&&&Create Visualization|||Change the order in visualization|||Change the summary&&&Tableau – Operators|||IF Function in Tableau|||Aggregate Functions in Tableau|||Create Calculated Field in Tableau|||Logical Functions in Tableau|||Case Function in Tableau|||Highlight Tables in Tableau|||Quick Table Calculation in Tableau|||LOD Calculation&&&Filtering in Visualization in Tableau|||Quick Filter in Tableau|||Context Filter in Tableau|||Conditional Filter in Tableau|||Slicing Filter in Tableau|||Grouping in Visualization in Tableau|||Hierarchy in Tableau|||Set in Tableau|||Combined Set in Tableau|||Parameters in Tableau|||Tableau Bins|||Manual Sorting of Visualization in Tableau|||Sorting by Data Source order in Visualization in Tableau|||Sorting by field in Visualization in Tableau&&&Line graph in Tableau|||Dual Lines Chart in Tableau|||Bar Chart in Tableau|||Side-by-Side Bars in Tableau|||Stacked Bars in Tableau|||Histogram in Tableau|||Cumulative Histogram in Tableau|||Scatter plot in Tableau|||Bubble Chart in Tableau|||Pie chart in tableau|||Crosstab in tableau|||Total in a crosstab by column in Tableau|||Box Plot in Tableau|||Bullet Graph in Tableau|||Area Chart in Tableau|||Heat Map in Tableau|||Basic Map in Tableau|||Geographical plot in Tableau|||Lollipop Chart in Tableau|||Circle views in Tableau|||Dual Combination Chart in Tableau|||Treemap in Tableau|||Funnel Chart in Tableau|||Traditional Funnel Chart in Tableau|||Waterfall Chart in Tableau|||Gantt Chart in Tableau&&&Create a Dashboard in Tableau|||Text Object on Dashboard in Tableau|||Image Object on Dashboard in Tableau|||Tableau – Objects on Dashboard|||Tableau – Filters in Dashboard|||Tableau – Device Preview|||Format Dashboard Layout in Tableau&&&Forecast in Tableau|||Reference line in Tableau|||Reference Band in Tableau|||Reference Distribution Band in Tableau|||Trend Lines in Tableau|||Tableau – Building up a storyline|||Word Cloud in Tableau\']'),(269,'[\'Python Exercises, Practice Questions and Solutions\']','[\'Python List Exercises\', \'Python String Exercises\', \'Python Tuple Exercises\', \'Python Dictionary Exercises\', \'Python Set Exercises\', \'Python Matrix Exercises\', \'Python Functions Exercises\', \'Python Lambda Exercises\', \'Python Pattern printing Exercises\', \'Python DateTime Exercises\', \'Python OOPS Exercises\', \'Python Regex Exercises\', \'Python LinkedList Exercises\', \'Python Searching Exercises\', \'Python Sorting Exercises\', \'Python DSA Exercises\', \'Python File Handling Exercises\', \'Python CSV Exercises\', \'Python JSON Exercises\', \'Python OS Module Exercises\', \'Python Tkinter Exercises\', \'NumPy Exercises\', \'Pandas Exercises\', \'Python Web Scraping Exercises\', \'Python Selenium Exercises\', \'Python Projects\']','[]','[\'https://media.geeksforgeeks.org/wp-content/uploads/20210105234135/PythonPracticeExercisesQuestionsandSolutionsmin.png\']','[]','[\'https://www.geeksforgeeks.org/easy/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://www.geeksforgeeks.org/python-programming-language/\', \'https://www.geeksforgeeks.org/python-list-exercise/\', \'https://www.geeksforgeeks.org/python-program-to-interchange-first-and-last-elements-in-a-list/\', \'https://www.geeksforgeeks.org/python-program-to-swap-two-elements-in-a-list/\', \'https://www.geeksforgeeks.org/python-ways-to-find-length-of-list/\', \'https://www.geeksforgeeks.org/maximum-of-two-numbers-in-python/?ref=leftbar-rightbar\', \'https://www.geeksforgeeks.org/minimum-of-two-numbers-in-python/\', \'https://www.geeksforgeeks.org/python-list-exercise/\', \'https://www.geeksforgeeks.org/python-string-exercise/\', \'https://www.geeksforgeeks.org/python-program-to-check-whether-the-string-is-symmetrical-or-palindrome/?ref=leftbar-rightbar\', \'https://www.geeksforgeeks.org/reverse-words-given-string-python/\', \'https://www.geeksforgeeks.org/ways-to-remove-ith-character-from-string-in-python/\', \'https://www.geeksforgeeks.org/find-length-of-a-string-in-python-4-ways/\', \'https://www.geeksforgeeks.org/python-program-to-print-even-length-words-in-a-string/\', \'https://www.geeksforgeeks.org/python-string-exercise/\', \'https://www.geeksforgeeks.org/python-tuple-exercise/\', \'https://www.geeksforgeeks.org/find-the-size-of-a-tuple-in-python/\', \'https://www.geeksforgeeks.org/python-maximum-and-minimum-k-elements-in-tuple/\', \'https://www.geeksforgeeks.org/python-sum-of-tuple-elements/\', \'https://www.geeksforgeeks.org/python-row-wise-element-addition-in-tuple-matrix/\', \'https://www.geeksforgeeks.org/python-program-to-create-a-list-of-tuples-from-given-list-having-number-and-its-cube-in-each-tuple/\', \'https://www.geeksforgeeks.org/python-tuple-exercise/\', \'https://www.geeksforgeeks.org/python-dictionary-exercise/\', \'https://www.geeksforgeeks.org/python-sort-python-dictionaries-by-key-or-value/\', \'https://www.geeksforgeeks.org/handling-missing-keys-python-dictionaries/\', \'https://www.geeksforgeeks.org/python-dictionary-with-keys-having-multiple-inputs/\', \'https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-all-items-in-a-dictionary/\', \'https://www.geeksforgeeks.org/find-the-size-of-a-dictionary-in-python/\', \'https://www.geeksforgeeks.org/python-dictionary-exercise/\', \'https://www.geeksforgeeks.org/python-set-exercise/\', \'https://www.geeksforgeeks.org/find-the-size-of-a-set-in-python/\', \'https://www.geeksforgeeks.org/iterate-over-a-set-in-python/\', \'https://www.geeksforgeeks.org/python-maximum-minimum-set/\', \'https://www.geeksforgeeks.org/python-remove-items-set/\', \'https://www.geeksforgeeks.org/python-check-two-lists-least-one-element-common/\', \'https://www.geeksforgeeks.org/python-set-exercise/\', \'https://www.geeksforgeeks.org/tag/python-matrix-program/\', \'https://www.geeksforgeeks.org/python-assigning-subsequent-rows-to-matrix-first-row-elements/\', \'https://www.geeksforgeeks.org/adding-and-subtracting-matrices-in-python/\', \'https://www.geeksforgeeks.org/python-group-similar-elements-into-matrix/\', \'https://www.geeksforgeeks.org/python-row-wise-element-addition-in-tuple-matrix/\', \'https://www.geeksforgeeks.org/create-an-n-x-n-square-matrix-where-all-the-sub-matrix-have-the-sum-of-opposite-corner-elements-as-even/\', \'https://www.geeksforgeeks.org/tag/python-matrix-program/\', \'https://www.geeksforgeeks.org/tag/python-function-programs/\', \'https://www.geeksforgeeks.org/how-to-get-list-of-parameters-name-from-a-function-in-python/\', \'https://www.geeksforgeeks.org/how-to-print-multiple-arguments-in-python/\', \'https://www.geeksforgeeks.org/python-program-to-find-the-power-of-a-number-using-recursion/\', \'https://www.geeksforgeeks.org/sorting-objects-of-user-defined-class-in-python/\', \'https://www.geeksforgeeks.org/functions-that-accept-variable-length-key-value-pair-as-arguments/\', \'https://www.geeksforgeeks.org/tag/python-function-programs/\', \'https://www.geeksforgeeks.org/tag/python-lambda/\', \'https://www.geeksforgeeks.org/lambda-with-if-but-without-else-in-python/\', \'https://www.geeksforgeeks.org/python-sorting-string-using-order-defined-by-another-string/\', \'https://www.geeksforgeeks.org/python-find-fibonacci-series-upto-n-using-lambda/\', \'https://www.geeksforgeeks.org/python-program-to-count-even-and-odd-numbers-in-a-list/\', \'https://www.geeksforgeeks.org/python-find-number-occurring-odd-number-times-using-lambda-expression-reduce-function/\', \'https://www.geeksforgeeks.org/tag/python-lambda/\', \'https://www.geeksforgeeks.org/tag/python-pattern-printing/\', \'https://www.geeksforgeeks.org/program-to-print-half-diamond-star-pattern/\', \'https://www.geeksforgeeks.org/programs-printing-pyramid-patterns-python/\', \'https://www.geeksforgeeks.org/c-program-print-diamond-shape/\', \'https://www.geeksforgeeks.org/python-print-inverted-star-pattern/\', \'https://www.geeksforgeeks.org/python-program-to-print-digit-pattern/\', \'https://www.geeksforgeeks.org/tag/python-pattern-printing/\', \'https://www.geeksforgeeks.org/tag/python-datetime-program/\', \'https://www.geeksforgeeks.org/python-program-to-get-current-time/\', \'https://www.geeksforgeeks.org/get-yesterdays-date-using-python/\', \'https://www.geeksforgeeks.org/python-program-to-print-current-year-month-and-day/\', \'https://www.geeksforgeeks.org/python-convert-day-number-to-date-in-particular-year/\', \'https://www.geeksforgeeks.org/get-current-time-in-different-timezone-using-python/\', \'https://www.geeksforgeeks.org/tag/python-datetime-program/\', \'https://www.geeksforgeeks.org/tag/python-oops-programs/\', \'https://www.geeksforgeeks.org/python-program-to-build-flashcard-using-class-in-python/\', \'https://www.geeksforgeeks.org/shuffle-a-deck-of-card-with-oops-in-python/\', \'https://www.geeksforgeeks.org/how-to-create-an-empty-class-in-python/\', \'https://www.geeksforgeeks.org/student-management-system-in-python/\', \'https://www.geeksforgeeks.org/tag/python-oops-programs/\', \'https://www.geeksforgeeks.org/tag/python-regex-programs/\', \'https://www.geeksforgeeks.org/python-program-to-find-the-type-of-ip-address-using-regex/\', \'https://www.geeksforgeeks.org/python-program-to-find-indices-of-overlapping-substrings/\', \'https://www.geeksforgeeks.org/python-program-to-extract-strings-between-html-tags/\', \'https://www.geeksforgeeks.org/python-check-if-string-contain-only-defined-characters-using-regex/\', \'https://www.geeksforgeeks.org/python-program-to-find-files-having-a-particular-extension-using-regex/\', \'https://www.geeksforgeeks.org/tag/python-regex-programs/\', \'https://www.geeksforgeeks.org/tag/python-linkedlist-exercises/\', \'https://www.geeksforgeeks.org/python-program-to-search-an-element-in-a-circular-linked-list/\', \'https://www.geeksforgeeks.org/pretty-print-linked-list-in-python/\', \'https://www.geeksforgeeks.org/python-stack-using-doubly-linked-list/\', \'https://www.geeksforgeeks.org/python-queue-using-doubly-linked-list/\', \'https://www.geeksforgeeks.org/python-program-to-find-middle-of-a-linked-list-using-one-traversal/\', \'https://www.geeksforgeeks.org/tag/python-linkedlist-exercises/\', \'https://www.geeksforgeeks.org/tag/python-searching-exercises/\', \'https://www.geeksforgeeks.org/python-program-for-linear-search/\', \'https://www.geeksforgeeks.org/python-program-for-binary-search/\', \'https://www.geeksforgeeks.org/python-program-for-anagram-substring-search-or-search-for-all-permutations/\', \'https://www.geeksforgeeks.org/tag/python-searching-exercises/\', \'https://www.geeksforgeeks.org/tag/python-sorting-exercises/\', \'https://www.geeksforgeeks.org/python-program-for-bubble-sort/\', \'https://www.geeksforgeeks.org/python-program-for-quicksort/\', \'https://www.geeksforgeeks.org/python-program-for-insertion-sort/\', \'https://www.geeksforgeeks.org/python-program-for-selection-sort/\', \'https://www.geeksforgeeks.org/python-program-for-heap-sort/\', \'https://www.geeksforgeeks.org/tag/python-sorting-exercises/\', \'https://www.geeksforgeeks.org/tag/python-dsa-exercises/\', \'https://www.geeksforgeeks.org/python-program-to-reverse-a-stack/\', \'https://www.geeksforgeeks.org/multithreaded-priority-queue-in-python/\', \'https://www.geeksforgeeks.org/check-whether-the-given-string-is-palindrome-using-stack/\', \'https://www.geeksforgeeks.org/program-to-calculate-the-edge-cover-of-a-graph/\', \'https://www.geeksforgeeks.org/python-program-for-n-queen-problem-backtracking-3/\', \'https://www.geeksforgeeks.org/tag/python-dsa-exercises/\', \'https://www.geeksforgeeks.org/tag/python-file-handling-programs/\', \'https://www.geeksforgeeks.org/read-content-from-one-file-and-write-it-into-another-file/\', \'https://www.geeksforgeeks.org/write-a-dictionary-to-a-file-in-python/\', \'https://www.geeksforgeeks.org/how-to-check-file-size-in-python/\', \'https://www.geeksforgeeks.org/find-the-most-repeated-word-in-a-text-file/\', \'https://www.geeksforgeeks.org/how-to-read-specific-lines-from-a-file-in-python/\', \'https://www.geeksforgeeks.org/tag/python-file-handling-programs/\', \'https://www.geeksforgeeks.org/tag/python-csv/\', \'https://www.geeksforgeeks.org/update-column-value-of-csv-in-python/\', \'https://www.geeksforgeeks.org/how-to-add-a-header-to-a-csv-file-in-python/\', \'https://www.geeksforgeeks.org/get-column-names-from-csv-using-python/\', \'https://www.geeksforgeeks.org/writing-data-from-a-python-list-to-csv-row-wise/\', \'https://www.geeksforgeeks.org/convert-multiple-json-files-to-csv-python/\', \'https://www.geeksforgeeks.org/tag/python-csv/\', \'https://www.geeksforgeeks.org/tag/python-json-programs/\', \'https://www.geeksforgeeks.org/convert-class-object-to-json-in-python/\', \'https://www.geeksforgeeks.org/convert-json-data-into-a-custom-python-object/\', \'https://www.geeksforgeeks.org/flattening-json-objects-in-python/\', \'https://www.geeksforgeeks.org/convert-csv-to-json-using-python/\', \'https://www.geeksforgeeks.org/tag/python-json-programs/\', \'https://www.geeksforgeeks.org/tag/python-os-module-programs/\', \'https://www.geeksforgeeks.org/how-to-get-file-creation-and-modification-date-or-time-in-python/\', \'https://www.geeksforgeeks.org/menu-driven-python-program-for-opening-the-required-software-applictaion/\', \'https://www.geeksforgeeks.org/python-script-to-change-name-of-a-file-to-its-timestamp/\', \'https://www.geeksforgeeks.org/kill-a-process-by-name-using-python/\', \'https://www.geeksforgeeks.org/finding-the-largest-file-in-a-directory-using-python/\', \'https://www.geeksforgeeks.org/tag/python-os-module-programs/\', \'https://www.geeksforgeeks.org/tag/python-tkinter-exercises/\', \'https://www.geeksforgeeks.org/python-create-a-gui-marksheet-using-tkinter/\', \'https://www.geeksforgeeks.org/python-todo-gui-application-using-tkinter/\', \'https://www.geeksforgeeks.org/python-gui-calendar-using-tkinter/\', \'https://www.geeksforgeeks.org/file-explorer-in-python-using-tkinter/\', \'https://www.geeksforgeeks.org/visiting-card-scanner-gui-application-using-python/\', \'https://www.geeksforgeeks.org/tag/python-tkinter-exercises/\', \'https://www.geeksforgeeks.org/python-numpy-practice-exercises-questions-and-solutions/\', \'https://www.geeksforgeeks.org/how-to-create-an-empty-and-a-full-numpy-array/\', \'https://www.geeksforgeeks.org/create-a-numpy-array-filled-with-all-zeros-python/\', \'https://www.geeksforgeeks.org/create-a-numpy-array-filled-with-all-ones/\', \'https://www.geeksforgeeks.org/replace-numpy-array-elements-that-doesnt-satisfy-the-given-condition/\', \'https://www.geeksforgeeks.org/python-numpy-matrix-max/\', \'https://www.geeksforgeeks.org/python-numpy-practice-exercises-questions-and-solutions/\', \'https://www.geeksforgeeks.org/pandas-practice-excercises-questions-and-solutions/\', \'https://www.geeksforgeeks.org/make-a-pandas-dataframe-with-two-dimensional-list-python/\', \'https://www.geeksforgeeks.org/how-to-iterate-over-rows-in-pandas-dataframe/\', \'https://www.geeksforgeeks.org/create-a-pandas-column-using-for-loop/\', \'https://www.geeksforgeeks.org/create-a-pandas-series-from-array/\', \'https://www.geeksforgeeks.org/pandas-basic-of-time-series-manipulation/\', \'https://www.geeksforgeeks.org/pandas-practice-excercises-questions-and-solutions/\', \'https://www.geeksforgeeks.org/tag/python-web-scraping-exercises/\', \'https://www.geeksforgeeks.org/how-to-extract-youtube-data-in-python/\', \'https://www.geeksforgeeks.org/how-to-download-all-images-from-a-web-page-in-python/\', \'https://www.geeksforgeeks.org/test-the-given-page-is-found-or-not-on-the-server-using-python/\', \'https://www.geeksforgeeks.org/how-to-extract-wikipedia-data-in-python/\', \'https://www.geeksforgeeks.org/how-to-extract-paragraph-from-a-website-and-save-it-as-a-text-file/\', \'https://www.geeksforgeeks.org/tag/python-web-scraping-exercises/\', \'https://www.geeksforgeeks.org/tag/python-selenium-exercises/\', \'https://www.geeksforgeeks.org/download-file-in-selenium-using-python/\', \'https://www.geeksforgeeks.org/bulk-posting-on-facebook-pages-using-selenium/\', \'https://www.geeksforgeeks.org/google-maps-selenium-automation-using-python/\', \'https://www.geeksforgeeks.org/count-total-number-of-links-in-webpage-using-selenium-in-python/\', \'https://www.geeksforgeeks.org/extract-data-from-justdial-using-selenium/\', \'https://www.geeksforgeeks.org/tag/python-selenium-exercises/\', \'https://www.geeksforgeeks.org/python-projects-beginner-to-advanced/\', \'https://www.geeksforgeeks.org/number-guessing-game-in-python/\', \'https://www.geeksforgeeks.org/2048-game-in-python/\', \'https://www.geeksforgeeks.org/get-live-weather-desktop-notifications-using-python/\', \'https://www.geeksforgeeks.org/8-bit-game-using-pygame/\', \'https://www.geeksforgeeks.org/tic-tac-toe-gui-in-python-using-pygame/\', \'https://www.geeksforgeeks.org/python-projects-beginner-to-advanced/\', \'https://practice.geeksforgeeks.org/contest/step-up-bi-wizard/?utm_source=banner&utm_medium=in-article&utm_campaign=in-article\']','[\'>> More Programs on List\', \'>> More Programs on String\', \'>> More Programs on Tuple\', \'>> More Programs on Dictionary\', \'>> More Programs on Sets\', \'>> More Programs on Matrices\', \'>> More Programs on Functions\', \'>> More Programs on Lambda\', \'>> More Programs on Python Pattern Printing\', \'>> More Programs on DateTime\', \'>> More Programs on Python OOPS\', \'>> More Programs on Python Regex\', \'>> More Programs on Linked Lists\', \'>> More Programs on Python Searching\', \'>> More Programs on Python Sorting\', \'>> More Programs on Python DSA\', \'>> More Programs on Python File Handling\', \'>> More Programs on Python CSV\', \'>> More Programs on Python JSON\', \'>> More Programs on OS Module\', \'>> More Programs on Python Tkinter\', \'>> More Programs on NumPy\', \'>> More Programs on Python Pandas\', \'>> More Programs on Web Scraping\', \'>> More Programs on Python Selenium\', \'>> More Projects in Python\']','[\'Python is a widely used general-purpose high-level language that can be used for many purposes like creating GUI, web Scraping, web development, etc. You might have seen various Python tutorials that explain the concepts in detail but that might not be enough to get hold of this language. The best way to learn is by practicing it more and more.\', \'This Python exercise helps you learn Python using sets of detailed programming Questions from basic to advance. It covers questions on core Python concepts as well as applications of Python on various domains.\']','[]','[]','[]','[]','[\'Python program to interchange first and last elements in a list|||Python program to swap two elements in a list|||Python | Ways to find length of list|||Maximum of two numbers in Python|||Minimum of two numbers in Python&&&Python program to check whether the string is Symmetrical or Palindrome|||Reverse words in a given String in Python|||Ways to remove i’th character from string in Python|||Find length of a string in python (4 ways)|||Python program to print even length words in a string&&&Python program to Find the size of a Tuple|||Python – Maximum and Minimum K elements in Tuple|||Python – Sum of tuple elements|||Python – Row-wise element Addition in Tuple Matrix|||Create a list of tuples from given list having number and its cube in each tuple&&&Python | Sort Python Dictionaries by Key or Value|||Handling missing keys in Python dictionaries|||Python dictionary with keys having multiple inputs|||Python program to find the sum of all items in a dictionary|||Python program to find the size of a Dictionary&&&Find the size of a Set in Python|||Iterate over a set in Python|||Python – Maximum and Minimum in a Set|||Python – Remove items from Set|||Python – Check if two lists have atleast one element common&&&Python – Assigning Subsequent Rows to Matrix first row elements|||Adding and Subtracting Matrices in Python|||Python – Group similar elements into Matrix|||Python – Row-wise element Addition in Tuple Matrix|||Create an n x n square matrix, where all the sub-matrix have the sum of opposite corner elements as even&&&How to get list of parameters name from a function in Python?|||How to Print Multiple Arguments in Python?|||Python program to find the power of a number using recursion|||Sorting objects of user defined class in Python|||Functions that accept variable length key value pair as arguments&&&Lambda with if but without else in Python|||Python | Sorting string using order defined by another string|||Python | Find fibonacci series upto n using lambda|||Python program to count Even and Odd numbers in a List|||Python | Find the Number Occurring Odd Number of Times using Lambda expression and reduce function&&&Program to print half Diamond star pattern|||Programs for printing pyramid patterns in Python|||Program to print the diamond shape|||Python | Print an Inverted Star Pattern|||Python Program to print digit pattern&&&Python program to get Current Time|||Get Yesterday’s date using Python|||Python program to print current year, month and day|||Python – Convert day number to date in particular year|||Get Current Time in different Timezone using Python&&&Python program to build flashcard using class in Python|||Shuffle a deck of card with OOPS in Python|||How to create an empty class in Python?|||Student management system in Python&&&Python program to find the type of IP Address using Regex|||Python program to find Indices of Overlapping Substrings|||Python program to extract Strings between HTML Tags|||Python – Check if String Contain Only Defined Characters using Regex|||Python program to find files having a particular extension using RegEx&&&Python program to Search an Element in a Circular Linked List|||Pretty print Linked List in Python|||Python | Stack using Doubly Linked List|||Python | Queue using Doubly Linked List|||Python program to find middle of a linked list using one traversal&&&Python Program for Linear Search|||Python Program for Binary Search (Recursive and Iterative)|||Python Program for Anagram Substring Search (Or Search for all permutations)&&&Python Program for Bubble Sort|||Python Program for QuickSort|||Python Program for Insertion Sort|||Python Program for Selection Sort|||Python Program for Heap Sort&&&Python program to reverse a stack|||Multithreaded Priority Queue in Python|||Check whether the given string is Palindrome using Stack|||Program to Calculate the Edge Cover of a Graph|||Python Program for N Queen Problem&&&Read content from one file and write it into another file|||Write a dictionary to a file in Python|||How to check file size in Python?|||Find the most repeated word in a text file|||How to read specific lines from a File in Python?&&&Update column value of CSV in Python|||How to add a header to a CSV file in Python?|||Get column names from CSV using Python|||Writing data from a Python List to CSV row-wise|||Convert multiple JSON files to CSV Python&&&Convert class object to JSON in Python|||Convert JSON data Into a Custom Python Object|||Flattening JSON objects in Python|||Convert CSV to JSON using Python&&&How to get file creation and modification date or time in Python?|||Menu Driven Python program for opening the required software Application|||Python Script to change name of a file to its timestamp|||Kill a Process by name using Python|||Finding the largest file in a directory using Python&&&Python | Create a GUI Marksheet using Tkinter|||Python | ToDo GUI Application using Tkinter|||Python | GUI Calendar using Tkinter|||File Explorer in Python using Tkinter|||Visiting Card Scanner GUI Application using Python&&&How to create an empty and a full NumPy array?|||Create a Numpy array filled with all zeros|||Create a Numpy array filled with all ones|||Replace NumPy array elements that doesn’t satisfy the given condition|||Get the maximum value from given matrix&&&Make a Pandas DataFrame with two-dimensional list | Python|||How to iterate over rows in Pandas Dataframe|||Create a pandas column using for loop|||Create a Pandas Series from array|||Pandas | Basic of Time Series Manipulation&&&How to extract youtube data in Python?|||How to Download All Images from a Web Page in Python?|||Test the given page is found or not on the server Using Python|||How to Extract Wikipedia Data in Python?|||How to extract paragraph from a website and save it as a text file?&&&Download File in Selenium Using Python|||Bulk Posting on Facebook Pages using Selenium|||Google Maps Selenium automation using Python|||Count total number of Links In Webpage Using Selenium In Python|||Extract Data From JustDial using Selenium&&&Number guessing game in Python|||2048 Game in Python|||Get Live Weather Desktop Notifications Using Python|||8-bit game using pygame|||Tic Tac Toe GUI In Python using PyGame\']');
/*!40000 ALTER TABLE `geeksforgeeks_python_data` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-01-29  3:22:16
