,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['XML Tutorial'],"['XML tutorial is designed for beginners and professionals. Our XML tutorial provides a detailed knowledge of XML technology like what is xml, features of xml, xml example, xml related technologies, creating xml structure by DTD, creating xml structure by schema (XSD), difference between DTD and schema.']","['https://www.javatpoint.com/what-is-xml', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/pcdata.xml', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/xmlschema1.xml', 'https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/what-is-xml', 'https://www.javatpoint.com/features-and-advantages-of-xml', 'https://www.javatpoint.com/html-vs-xml', 'https://www.javatpoint.com/xml-example', 'https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/xml-attributes', 'https://www.javatpoint.com/xml-comments', 'https://www.javatpoint.com/xml-tree-structure', 'https://www.javatpoint.com/xml-validation', 'https://www.javatpoint.com/xml-dtd', 'https://www.javatpoint.com/xml-css', 'https://www.javatpoint.com/xml-schema', 'https://www.javatpoint.com/dtd-vs-xsd', 'https://www.javatpoint.com/cdata-pcdata', 'https://www.javatpoint.com/xml-parsers', 'https://www.javatpoint.com/xml-dom', 'https://www.javatpoint.com/xml-database', 'https://www.javatpoint.com/xml-namespaces', 'https://www.javatpoint.com/xml-interview-questions', 'https://www.javatpoint.com/xquery-tutorial', 'https://www.javatpoint.com/what-is-xquery', 'https://www.javatpoint.com/xquery-features', 'https://www.javatpoint.com/difference-between-xquery-and-xpath', 'https://www.javatpoint.com/xquery-vs-xslt', 'https://www.javatpoint.com/xquery-environment-setup', 'https://www.javatpoint.com/xquery-first-example', 'https://www.javatpoint.com/xquery-flwor', 'https://www.javatpoint.com/xquery-html-format', 'https://www.javatpoint.com/xquery-xpath', 'https://www.javatpoint.com/xquery-syntax', 'https://www.javatpoint.com/xquery-add', 'https://www.javatpoint.com/xquery-functions', 'https://www.javatpoint.com/xquery-sequences', 'https://www.javatpoint.com/xquery-sequence-functions', 'https://www.javatpoint.com/xquery-string-functions', 'https://www.javatpoint.com/xquery-string-length-function', 'https://www.javatpoint.com/xquery-concat-function', 'https://www.javatpoint.com/xquery-string-join-function', 'https://www.javatpoint.com/xquery-time-and-date-function', 'https://www.javatpoint.com/xquery-current-date-function', 'https://www.javatpoint.com/xquery-current-time-function', 'https://www.javatpoint.com/xquery-current-datetime-function', 'https://www.javatpoint.com/xquery-if-then-else-statement', 'https://www.javatpoint.com/xquery-regular-expressions', 'https://www.javatpoint.com/xslt-tutorial', 'https://www.javatpoint.com/what-is-xslt', 'https://www.javatpoint.com/xslt-syntax', 'https://www.javatpoint.com/xslt-xsl-value-of-element', 'https://www.javatpoint.com/xslt-xsl-for-each-element', 'https://www.javatpoint.com/xslt-xsl-sort-element', 'https://www.javatpoint.com/xslt-xsl-if-element', 'https://www.javatpoint.com/xslt-xsl-choose-element', 'https://www.javatpoint.com/xslt-xsl-key-element', 'https://www.javatpoint.com/xslt-xsl-message-element', 'https://www.javatpoint.com/xslt-xsl-apply-template-element', 'https://www.javatpoint.com/xslt-xsl-import-element', 'https://www.javatpoint.com/xpath-tutorial', 'https://www.javatpoint.com/what-is-xpath', 'https://www.javatpoint.com/xpath-expression', 'https://www.javatpoint.com/xpath-nodes', 'https://www.javatpoint.com/xpath-syntax', 'https://www.javatpoint.com/xpath-absolute-path', 'https://www.javatpoint.com/xpath-relative-path', 'https://www.javatpoint.com/xpath-axes', 'https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-boolean-operators', 'https://www.javatpoint.com/xpath-number-operators-functions', 'https://www.javatpoint.com/xpath-string-functions', 'https://www.javatpoint.com/xpath-node-functions', 'https://www.javatpoint.com/xpath-wildcard', 'https://www.javatpoint.com/xpath-predicate', 'https://www.javatpoint.com/what-is-xml', 'https://www.javatpoint.com/what-is-xml']",['https://static.javatpoint.com/xmlpages/images/xml-tutorial.png'],[],"['XML Validation', 'XML DTD', 'XML Schema', 'XML Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['XML file can be validated by 2 ways:', 'DTD (Document Type Definition) and XSD (XML Schema Definition) are used to define XML structure.', 'In our XML tutorial, you will learn about DTD file, creating xml with DTD, using CSS file, CDATA vs PCDATA and difference between DTD and XML schema.', ""Let's see an example of XML using DTD file."", 'employee.xml', 'A detailed description of XML with DTD is given in next pages.', 'In this XML tutorial, we will provide a detail description of schema file, XML schema validation, XML schema data types and XML parsers.', ""Let's see an example of XML using XSD file."", 'A detailed description of XML with XSD is given in next pages.', 'XML Tutorial', 'XML Validation', 'XML Advance', 'XML Interview', 'XQuery Tutorial', 'XSLT Tutorial', 'XPath Tutorial', 'Before learning XML, you must have the basic knowledge of HTML.', 'Our XML tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this XML tutorial. But if there is any mistake, please post the problem in contact form.']",[],[],"['<?xml version=""1.0""?>', '<!DOCTYPE employee SYSTEM ""employee.dtd"">', '<employee>', '<firstname>vimal</firstname>', '<lastname>jaiswal</lastname>', '<email>vimal@javatpoint.com</email>', '</employee>', '<?xml version=""1.0""?>', '<employee', 'xmlns=""http://www.javatpoint.com""', 'xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""', 'xsi:schemaLocation=""http://www.javatpoint.com employee.xsd"">', '<firstname>vimal</firstname>', '<lastname>jaiswal</lastname>', '<email>vimal@javatpoint.com</email>', '</employee>']",[],[],['|||XML Introduction|||What is XML|||XML Features|||HTML vs XML|||XML Example|||XML Technologies|||XML Attributes|||XML Comments|||XML Tree||||||XML Validation|||XML DTD|||XML CSS|||XML Schema|||DTD vs XSD|||CDATA vs PCDATA||||||XML Parsers|||XML DOM|||XML Database|||XML Namespaces||||||XML Interview Questions||||||XQuery Tutorial|||What is XQuery||| XQuery Features||| XQuery vs XPath||| XQuery vs XSLT|||Environment Setup|||XQuery First Example|||XQuery FLWOR|||XQuery HTML Format|||XQuery XPath|||XQuery Syntax|||XQuery Add|||XQuery Functions|||XQuery Sequences|||XQuery Sequence functions|||XQuery String functions|||1) String-length()|||2) String concat()|||3) String-join()|||XQuery Time & Date|||1) current-date()|||2) current-time()|||3) current-dateTime()|||XQuery If Then Else|||XQuery Regex||||||XSLT Tutorial|||What is XSLT|||XSLT Syntax|||XSLT xsl:value-of|||XSLT xsl:for-each|||XSLT xsl:sort|||XSLT xsl:if|||XSLT xsl:choose|||XSLT xsl:key|||XSLT xsl:message|||XSLT xsl:apply-template|||XSLT xsl:import||||||XPath Tutorial|||What is XPath|||XPath Expression|||XPath Nodes|||XPath Syntax|||XPath Absolute Path|||XPath Relative Path|||XPath Axes|||XPath Operators|||XPath Operators|||1) XPath Comparison|||2) XPath Boolean|||3) XPath Number|||4) XPath String|||5) XPath Node|||XPath Wildcard|||XPath Predicate|||']
1,['What is xml'],['A mark up language is a modern system for highlight or underline a document. '],"['https://www.javatpoint.com/features-and-advantages-of-xml', 'https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/features-and-advantages-of-xml', 'https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/features-and-advantages-of-xml']",[],[],"['What is mark-up language', 'Prerequisite', 'Why xml']",[],"['Note: Self-describing data is the data that describes both its content and structure.\n\n\n\nWhat is mark-up language\nA mark up language is a modern system for highlight or underline a document. \nStudents often underline or highlight a passage to revise easily, same in the sense of modern mark up language highlighting or underlining is replaced by tags.\n\nPrerequisite\nBefore you start to learn xml, you should know basic of HTML & JavaScript.\n\nWhy xml\nPlatform Independent and Language Independent: The main benefit of xml is that you can use it to take data from a program like Microsoft SQL, convert it into XML then share that XML with other programs and platforms. You can communicate between two platforms which are generally very difficult.\nThe main thing which makes XML truly powerful is its international acceptance. Many corporation use XML interfaces for databases, programming, office application mobile phones and more. It is due to its platform independent feature.\n\nNext TopicXML Features and Advantages\n\n\n\n← prev\nnext →\n\n\n', '\n\n\n\nWhat is mark-up language\nA mark up language is a modern system for highlight or underline a document. \nStudents often underline or highlight a passage to revise easily, same in the sense of modern mark up language highlighting or underlining is replaced by tags.\n\nPrerequisite\nBefore you start to learn xml, you should know basic of HTML & JavaScript.\n\nWhy xml\nPlatform Independent and Language Independent: The main benefit of xml is that you can use it to take data from a program like Microsoft SQL, convert it into XML then share that XML with other programs and platforms. You can communicate between two platforms which are generally very difficult.\nThe main thing which makes XML truly powerful is its international acceptance. Many corporation use XML interfaces for databases, programming, office application mobile phones and more. It is due to its platform independent feature.\n\nNext TopicXML Features and Advantages\n\n\n\n← prev\nnext →\n\n\n']","['Before you start to learn xml, you should know basic of HTML & JavaScript.']","['Students often underline or highlight a passage to revise easily, same in the sense of modern mark up language highlighting or underlining is replaced by tags.', 'The main thing which makes XML truly powerful is its international acceptance. Many corporation use XML interfaces for databases, programming, office application mobile phones and more. It is due to its platform independent feature.']","['Platform Independent and Language Independent: The main benefit of xml is that you can use it to take data from a program like Microsoft SQL, convert it into XML then share that XML with other programs and platforms. You can communicate between two platforms which are generally very difficult.']",[],[],[],"['|||Xml (eXtensible Markup Language) is a mark up language.|||XML is designed to store and transport data.|||Xml was released in late 90’s. it was created to provide an easy to use and store self describing data.|||XML became a W3C Recommendation on February 10, 1998.|||XML is not a replacement for HTML.|||XML is designed to be self-descriptive.|||XML is designed to carry data, not to display data.|||XML tags are not predefined. You must define your own tags.|||XML is platform independent and language independent.|||']"
2,['Features and Advantages of XML'],['XML is widely used in the era of web development. It is also used to simplify data storage and data sharing.'],"['https://www.javatpoint.com/xml-example', 'https://www.javatpoint.com/what-is-xml', 'https://www.javatpoint.com/xml-example', 'https://www.javatpoint.com/what-is-xml', 'https://www.javatpoint.com/xml-example']",[],[],[],[],['4) XML simplifies Platform change'],"['The main features or advantages of XML are given below.', 'If you need to display dynamic data in your HTML document, it will take a lot of work to edit the HTML each time the data changes.', 'With a few lines of JavaScript code, you can read an external XML file and update the data content of your web page.', 'In the real world, computer systems and databases contain data in incompatible formats.', 'XML data is stored in plain text format. This provides a software- and hardware-independent way of storing data.', 'This makes it much easier to create data that can be shared by different applications.', 'One of the most time-consuming challenges for developers is to exchange data between incompatible systems over the Internet.', 'Exchanging data as XML greatly reduces this complexity, since the data can be read by different incompatible applications.', 'Different applications can access your data, not only in HTML pages, but also from XML data sources.', 'A lot of new Internet languages are created with XML.', 'Here are some examples:']","['With XML, data can be stored in separate XML files. This way you can focus on using HTML/CSS for display and layout, and be sure that changes in the underlying data will not require any changes to the HTML.', 'Upgrading to new systems (hardware or software platforms), is always time consuming. Large amounts of data must be converted and incompatible data is often lost.', 'XML data is stored in text format. This makes it easier to expand or upgrade to new operating systems, new applications, or new browsers, without losing data.', 'With XML, your data can be available to all kinds of ""reading machines"" (Handheld computers, voice machines, news feeds, etc), and make it more available for blind people, or people with other disabilities.']",[],[],[],[],['|||XHTML|||WSDL for describing available web services|||WAP and WML as markup languages for handheld devices|||RSS languages for news feeds|||RDF and OWL for describing resources and ontology|||SMIL for describing multimedia for the web|||']
3,['HTML vs XML'],['There are many differences between HTML (Hyper Text Markup Language) and XML (eXtensible Markup Language). The important differences are given below:'],"['https://www.javatpoint.com/xml-example', 'https://www.javatpoint.com/features-and-advantages-of-xml', 'https://www.javatpoint.com/xml-example', 'https://www.javatpoint.com/features-and-advantages-of-xml', 'https://www.javatpoint.com/xml-example']",[],[],[],[],[],[],[],[],[],[],"['o.HTMLXM&&&)HTML is used to display data and focuses on how data looks.XML is a software and hardware independent tool used to transport and store data. It focuses on what data is&&&)HTML is a markup language itself.XML provides a framework to define markup languages&&&)HTML is not case sensitive.XML is case sensitive&&&)HTML is a presentation language.XML is neither a presentation language nor a programming language&&&)HTML has its own predefined tags.You can define tags according to your need&&&)In HTML, it is not necessary to use a closing tag.XML makes it mandatory to use a closing tag&&&)HTML is static because it is used to display data.XML is dynamic because it is used to transport data&&&)HTML does not preserve whitespaces.XML preserve whitespaces']",[]
4,['XML Example'],"['XML documents create a hierarchical structure looks like a tree so it is known as XML Tree that starts at ""the root"" and branches to ""the leaves"".']","['https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/features-and-advantages-of-xml', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/books.xml', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/emails.xml', 'https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/features-and-advantages-of-xml', 'https://www.javatpoint.com/xml-related-technologies']",[],[],[],[],[],"['XML documents uses a self-describing and simple syntax:', 'The first line is the XML declaration. It defines the XML version (1.0) and the encoding used (ISO-8859-1 = Latin-1/West European character set).', 'The next line describes the root element of the document (like saying: ""this document is a note""):', 'The next 4 lines describe 4 child elements of the root (to, from, heading, and body).', 'And finally the last line defines the end of the root element.', 'XML documents must contain a root element. This element is ""the parent"" of all other elements.', 'The elements in an XML document form a document tree. The tree starts at the root and branches to the lowest level of the tree.', 'All elements can have sub elements (child elements).', 'All elements can have text content and attributes (just like in HTML).', 'File: books.xml', 'The root element in the example is <bookstore>. All  elements in the document are contained within <bookstore>.', 'The <book> element has 4 children: <title>,< author>, <year> and <price>.', 'File: emails.xml']","['The terms parent, child, and sibling are used to describe the relationships between elements. Parent elements have children. Children on the same level are called siblings (brothers or sisters).']",[],"['<?xml version=""1.0"" encoding=""ISO-8859-1""?>', '<to>Tove</to>', '<from>Jani</from>', '<heading>Reminder</heading>', ""<body>Don't forget me this weekend!</body>"", '<to>Tove</to>', '<from>Jani</from>', '<heading>Reminder</heading>', ""<body>Don't forget me this weekend!</body>"", '<child>', '<subchild>.....</subchild>', '</child>', '<bookstore>', '<book category=""COOKING"">', '<title lang=""en"">Everyday Italian</title>', '<author>Giada De Laurentiis</author>', '<year>2005</year>', '<price>30.00</price>', '</book>', '<book category=""CHILDREN"">', '<title lang=""en"">Harry Potter</title>', '<author>J K. Rowling</author>', '<year>2005</year>', '<price>29.99</price>', '</book>', '<book category=""WEB"">', '<title lang=""en"">Learning XML</title>', '<author>Erik T. Ray</author>', '<year>2003</year>', '<price>39.95</price>', '</book>', '</bookstore>', '<?xml version=""1.0"" encoding=""UTF-8""?>', '<emails>', '<to>Vimal</to>', '<from>Sonoo</from>', '<heading>Hello</heading>', '<body>Hello brother, how are you!</body>', '</email>', '<to>Peter</to>', '<from>Jack</from>', '<heading>Birth day wish</heading>', '<body>Happy birth day Tom!</body>', '</email>', '<to>James</to>', '<from>Jaclin</from>', '<heading>Morning walk</heading>', '<body>Please start morning walk to stay fit!</body>', '</email>', '<to>Kartik</to>', '<from>Kumar</from>', '<heading>Health Tips</heading>', '<body>Smoking is injurious to health!</body>', '</email>', '</emails>']","['<?xml version=""1.0"" encoding=""ISO-8859-1""?>\n<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don\'t forget me this weekend!</body>\n</note>', '<note>', ""<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>"", '</note>', '<root>\n  <child>\n    <subchild>.....</subchild>\n  </child>\n</root>', '<bookstore>\n  <book category=""COOKING"">\n    <title lang=""en"">Everyday Italian</title>\n    <author>Giada De Laurentiis</author>\n    <year>2005</year>\n    <price>30.00</price>\n  </book>\n  <book category=""CHILDREN"">\n    <title lang=""en"">Harry Potter</title>\n    <author>J K. Rowling</author>\n    <year>2005</year>\n    <price>29.99</price>\n  </book>\n  <book category=""WEB"">\n    <title lang=""en"">Learning XML</title>\n    <author>Erik T. Ray</author>\n    <year>2003</year>\n    <price>39.95</price>\n  </book>\n</bookstore>', '<?xml version=""1.0"" encoding=""UTF-8""?>\n<emails>\n<email>\n  <to>Vimal</to>\n  <from>Sonoo</from>\n  <heading>Hello</heading>\n  <body>Hello brother, how are you!</body>\n</email>\n<email>\n  <to>Peter</to>\n  <from>Jack</from>\n  <heading>Birth day wish</heading>\n  <body>Happy birth day Tom!</body>\n</email>\n<email>\n  <to>James</to>\n  <from>Jaclin</from>\n  <heading>Morning walk</heading>\n  <body>Please start morning walk to stay fit!</body>\n</email>\n<email>\n  <to>Kartik</to>\n  <from>Kumar</from>\n  <heading>Health Tips</heading>\n  <body>Smoking is injurious to health!</body>\n</email>\n</emails>']",[],[]
5,['XML Related Technologies'],['Here we have pointed out XML related technologies. There are following XML related technologies:'],"['https://www.javatpoint.com/xml-attributes', 'https://www.javatpoint.com/xml-example', 'https://www.javatpoint.com/xml-attributes', 'https://www.javatpoint.com/xml-example', 'https://www.javatpoint.com/xml-attributes']",[],[],[],[],[],[],[],[],[],[],"['o.|||Technology|||Meaning|||Description &&&1)|||XHTML Extensible html|||It is a|||clearer and stricter version of XML. It belongs to the family of XML markup languages. It was developed to make html more extensible and increase inter-operability with other data.&&&2)|||XML DOM XML document object|||model|||It is a|||standard document model that is used to access and manipulate XML. It defines the XML file in tree structure.&&&3)|||XSL it|||contain three parts:|||i) XSLT (xsl transform)|||ii) XSL|||iii)XPathExtensible style sheet|||language|||i) It transforms XML into other formats, like html.ii) It is used for formatting XML to screen, paper etc.iii) It|||is a language to navigate XML documents.&&&4)|||XQuery XML query language|||It is a|||XML based language which is used to query XML based data.&&&5)|||DTD Document type definition|||It is an standard which is used to define the legal elements in an XML document.&&&6)|||XSD XML schema definition|||It is an|||XML based alternative to dtd. It is used to describe the structure of an XML document.&&&7)|||XLink XML linking language|||xlink stands for XML linking language. This is|||a language for creating hyperlinks (external and internal links) in XML documents.&&&8)|||XPointer XML pointer language|||It is a system for addressing components of XML based internet media. It|||allows the xlink hyperlinks to point to more specific parts in the XML|||document.&&&9)|||SOAP Simple object access|||protocol|||It is an acronym stands simple object access protocol. It is|||XML based protocol to let applications exchange information over http. in simple words you can say that it is protocol used for accessing web services. &&&10)|||WSDL web services description|||languages|||It is an|||XML based language to describe web services. It also describes the functionality offered by a web service.&&&11)|||RDF Resource description|||framework|||RDF is an|||XML based language to describe web resources. It is a standard model for data interchange on the web. It is used to describe the title, author, content and copyright information of a web page.&&&12)|||SVG Scalable vector graphics|||It is an XML based vector image format for two-dimensional images. It|||defines graphics in XML format. It also supports animation.&&&13)|||RSS Really simple syndication|||RSS is a XML-based format to handle web content syndication. It is used for fast browsing for news and updates. It is generally used for news like sites.']",[]
6,['XML Attributes'],['XML elements can have attributes. By the use of attributes we can add the information about the element.'],"['https://www.javatpoint.com/xml-comments', 'https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/xml-comments', 'https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/xml-comments']",[],[],"['Why should we avoid XML attributes', 'Difference between attribute and sub-element']",[],['Note: XML attributes must always be quoted. We can use single or double quote. '],"['XML attributes enhance the properties of the elements.', 'Let us take an example of a book publisher. Here, book is the element and publisher is the attribute.', 'Metadata should be stored as attribute and data should be stored as element.', 'Data can be stored in attributes or in child elements. But there are some limitations in using attributes, over child elements.', 'In the context of documents, attributes are part of markup, while sub elements are part of the basic document contents.', 'In the context of data representation, the difference is unclear and may be confusing.', 'Same information can be represented in two ways:', 'In the first example publisher is used as an attribute and in the second example publisher is an element.', 'Both examples provide the same information but it is good practice to avoid attribute in XML and use elements instead of attributes.']",[],[],"['<book publisher=""Tata McGraw Hill""></book>', ""<book publisher='Tata McGraw Hill'></book>"", '<book category=""computer"">', '<author> A & B </author>', '<book publisher=""Tata McGraw Hill""> </book>', '<publisher> Tata McGraw Hill </publisher>']",[],[],"[""|||Attributes cannot contain multiple values but child elements can have multiple values.|||Attributes cannot contain tree structure but child element can.|||Attributes are not easily expandable. If you want to change in attribute's vales in future, it may be complicated.|||Attributes cannot describe structure but child elements can.|||Attributes are more difficult to be manipulated by program code.|||Attributes values are not easy to test against a DTD, which is used to define the legal elements of an XML document.|||""]"
7,['XML Comments'],['XML comments are just like HTML comments. We know that the comments are used to make codes more understandable other developers.'],"['https://www.javatpoint.com/xml-tree-structure', 'https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/xmlcomments1.xml', 'https://www.javatpoint.com/xml-tree-structure', 'https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/xml-tree-structure']",[],[],"['XML Comments Example', 'Rules for adding XML comments']",[],"['Syntax', 'You cannot nest one XML comment inside the another.']","['An XML comment should be written as:', ""Let's take an example to show the use of comment in an XML example: ""]",['XML Comments add notes or lines for understanding the purpose of an XML code. Although XML is known as self-describing data but sometimes XML comments are necessary.'],[],"['<!-- Write your comment-->', '<?xml version=""1.0"" encoding=""UTF-8"" ?>', '<!--Students marks are uploaded by months-->', '<students>', '<student>', '<name>Ratan</name>', '<marks>70</marks>', '</student>', '<student>', '<name>Aryan</name>', '<marks>60</marks>', '</student>', '</students>']",[],[],"[""|||Don't use a comment before an XML declaration.|||You can use a comment anywhere in XML document except within attribute value.|||Don't nest a comment inside the other comment. |||""]"
8,['XML Tree Structure'],['An XML document has a self descriptive structure. It forms a tree structure which is referred as an XML tree. The tree structure makes easy to describe an XML document. '],"['https://www.javatpoint.com/xml-validation', 'https://www.javatpoint.com/xml-comments', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/xmltree.xml', 'https://www.javatpoint.com/xml-validation', 'https://www.javatpoint.com/xml-comments', 'https://www.javatpoint.com/xml-validation']",['https://static.javatpoint.com/xmlpages/images/xml-tree.png'],[],"['Example of an XML document', 'XML Tree Rules']",[],['Note: DOM parser represents the XML document in Tree structure. '],"[""Let's see the tree-structure representation of the above example."", '<address> branch contains 3 sub-branches named <city>, <state> and <pin>. ', 'These rules are used to figure out the relationship of the elements. It shows if an element is a child or a parent of the other element.']","['A tree structure contains root element (as parent), child element and so on. It is very easy to traverse all succeeding branches and sub-branches and leaf nodes starting from the root.', 'Descendants: If element A is contained by element B, then A is known as descendant of B. In the above example ""College"" is the root element and all the other elements are the descendants of ""College"".', 'Ancestors: The containing element which contains other elements is called ""Ancestor"" of other element. In the above example Root element (College) is ancestor of all other elements.']","['In the above example, first line is the XML declaration. It defines the XML version 1.0. Next line shows the root element (college) of the document. Inside that there is one more element (student). Student element contains five branches named <firstname>, <lastname>, <contact>, <Email> and <address>.']","['<?xml version=""1.0""?>', '<college>', '<student>', '<firstname>Tamanna</firstname>', '<lastname>Bhatia</lastname>', '<contact>09990449935</contact>', '<email>tammanabhatia@abc.com</email>', '<address>', '<city>Ghaziabad</city>', '<state>Uttar Pradesh</state>', '<pin>201007</pin>', '</address>', '</student>', '</college>']",[],[],[]
9,['XML Validation'],['A well formed XML document can be validated against DTD or Schema.'],"['https://www.javatpoint.com/xml-dtd', 'https://www.javatpoint.com/xml-attributes', 'https://www.javatpoint.com/xml-dtd', 'https://www.javatpoint.com/xml-attributes', 'https://www.javatpoint.com/xml-dtd']",['https://static.javatpoint.com/xmlpages/images/xml-validation.jpg'],[],"['Valid XML document', 'Rules for well formed XML', 'XML DTD', 'XML schema']",[],[],"['It must be well formed (satisfy all the basic syntax condition)', 'It should be behave according to predefined DTD or XML schema', 'A DTD defines the legal elements of an XML document', 'In simple words we can say that a DTD defines the document structure with a list of legal elements and attributes.', 'XML schema is a XML based alternative to DTD.', 'Actually DTD and XML schema both are used to form a well formed XML document.', 'We should avoid errors in XML documents because they will stop the XML programs.', 'It is defined as an XML language', 'Uses namespaces to allow for reuses of existing definitions', 'It supports a large number of built in data types and definition of derived data types']",['A well-formed XML document is an XML document with correct syntax. It is very necessary to know about valid XML document before knowing XML validation.'],[],[],[],[],['|||It must begin with the XML declaration.|||It must have one unique root element.|||All start tags of XML documents must match end tags.|||XML tags are case sensitive.|||All elements must be closed.|||All elements must be properly nested.|||All attributes values must be quoted.|||XML entities must be used for special characters.|||']
10,['XML DTD'],['DTD stands for Document Type Definition. It defines the legal building blocks of an XML document. It is used to define document structure with a list of legal elements and attributes. '],"['https://www.javatpoint.com/xml-css', 'https://www.javatpoint.com/xml-validation', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/pcdata.xml', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/author.xml', 'https://www.javatpoint.com/xml-parsers', 'https://www.javatpoint.com/xml-validation', 'https://www.javatpoint.com/xml-css']",[],[],"['What is DTD', 'Purpose of DTD', 'Checking Validation', 'Valid and well-formed XML document with DTD', 'Description of DTD', 'XML DTD with entity declaration']",[],['Note: A single DTD can be used in many XML files.'],"['Its main purpose is to define the structure of an XML document. It contains a list of legal elements and define the structure with the help of them. ', 'Before proceeding with XML DTD, you must check the validation. An XML document is called ""well-formed"" if it contains the correct syntax.', 'A well-formed and valid XML document is one which have been validated against DTD.', 'Visit http://www.xmlvalidation.com to validate the XML file.', ""Let's take an example of well-formed and valid XML document. It follows all the rules of DTD."", 'employee.xml', 'In the above example, the DOCTYPE declaration refers to an external DTD file. The content of the file is shown in below paragraph. ', 'employee.dtd', '<!DOCTYPE employee : It defines that the root element of the document is employee. ', '<!ELEMENT employee: It defines that the employee element contains 3 elements ""firstname, lastname and email"".', '<!ELEMENT firstname: It defines that the firstname element is #PCDATA typed. (parse-able data type).', '<!ELEMENT lastname: It defines that the lastname element is #PCDATA typed. (parse-able data type).', '<!ELEMENT email: It defines that the email element is #PCDATA typed. (parse-able data type).', 'A doctype declaration can also define special strings that can be used in the XML file.', 'An entity has three parts:', 'Syntax to declare entity:', ""Let's see a code to define the ENTITY in doctype declaration."", 'author.xml']","['In the above example, sj is an entity that is used inside the author element. In such case, it will print the value of sj entity that is ""Sonoo Jaiswal"".']",[],"['<?xml version=""1.0""?>', '<!DOCTYPE employee SYSTEM ""employee.dtd"">', '<employee>', '<firstname>vimal</firstname>', '<lastname>jaiswal</lastname>', '<email>vimal@javatpoint.com</email>', '</employee>', '<!ELEMENT employee (firstname,lastname,email)>', '<!ELEMENT firstname (#PCDATA)>', '<!ELEMENT lastname (#PCDATA)>', '<!ELEMENT email (#PCDATA)>', '<!ENTITY entity-name ""entity-value"">', '<?xml version=""1.0"" standalone=""yes"" ?>', '<!DOCTYPE author [', '<!ELEMENT author (#PCDATA)>', '<!ENTITY sj ""Sonoo Jaiswal"">', '<author>&sj</author>']",[],[],[]
11,['XML CSS'],['CSS (Cascading Style Sheets) can be used to add style and display information to an XML document. It can format the whole XML document. '],"['https://www.javatpoint.com/xml-schema', 'https://www.javatpoint.com/xml-dtd', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/xmlcss.xml', 'https://www.javatpoint.com/xml-schema', 'https://www.javatpoint.com/xml-dtd', 'https://www.javatpoint.com/xml-schema']",[],[],"['Purpose of CSS in XML', 'How to link XML file with CSS', 'XML CSS Example']",[],['CSS is not generally used to format XML file. W3C recommends XSLT instead of CSS. '],"['To link XML files with CSS, you should use the following syntax:', ""Let's see the css file."", 'cssemployee.css', ""Let's create the DTD file."", 'employee.dtd', ""Let's see the xml file using CSS and DTD."", 'employee.xml']",[],[],"['<?xml-stylesheet type=""text/css"" href=""cssemployee.css""?>', 'employee', 'background-color: pink;', 'firstname,lastname,email', 'font-size:25px;', 'display:block;', 'color: blue;', 'margin-left: 50px;', '<!ELEMENT employee (firstname,lastname,email)>', '<!ELEMENT firstname (#PCDATA)>', '<!ELEMENT lastname (#PCDATA)>', '<!ELEMENT email (#PCDATA)>', '<?xml version=""1.0""?>', '<?xml-stylesheet type=""text/css"" href=""cssemployee.css""?>', '<!DOCTYPE employee SYSTEM ""employee.dtd"">', '<employee>', '<firstname>vimal</firstname>', '<lastname>jaiswal</lastname>', '<email>vimal@javatpoint.com</email>', '</employee>']",[],[],[]
12,['XML Schema'],['XML schema is a language which is used for expressing constraint about XML documents. There are so many schema languages which are used now a days for example Relax- NG and XSD (XML schema definition).'],"['https://www.javatpoint.com/dtd-vs-xsd', 'https://www.javatpoint.com/xml-css', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/xmlschema.xml', 'https://www.javatpoint.com/dtd-vs-xsd', 'https://www.javatpoint.com/xml-css', 'https://www.javatpoint.com/dtd-vs-xsd']",[],[],"['What is XML schema', 'Checking Validation', 'XML Schema Example', 'Description of XML Schema', 'XML Schema Data types']",[],[],"['An XML schema is used to define the structure of an XML document. It is like DTD but provides more control on XML structure. ', 'Visit http://www.xmlvalidation.com to validate the XML file against schema or DTD.', ""Let's create a schema file."", 'employee.xsd', ""Let's see the xml file using XML schema or XSD file."", 'employee.xml', '<xs:element name=""employee""> : It defines the element name employee. ', ""<xs:complexType> : It defines that the element 'employee' is complex type."", '<xs:sequence> : It defines that the complex type is a sequence of elements. ', '<xs:element name=""firstname"" type=""xs:string""/> : It defines that the element \'firstname\' is of string/text type. ', '<xs:element name=""lastname"" type=""xs:string""/> : It defines that the element \'lastname\' is of string/text type. ', '<xs:element name=""email"" type=""xs:string""/> : It defines that the element \'email\' is of string/text type. ', 'There are two types of data types in XML schema.', 'The simpleType allows you to have text-based elements. It contains less attributes, child elements, and cannot be left empty.', 'The complexType allows you to hold multiple attributes and elements. It can contain additional sub elements and can be left empty.']","['An XML document is called ""well-formed"" if it contains the correct syntax. A well-formed and valid XML document is one which have been validated against Schema.']",[],"['<?xml version=""1.0""?>', '<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""', 'targetNamespace=""http://www.javatpoint.com""', 'xmlns=""http://www.javatpoint.com""', 'elementFormDefault=""qualified"">', '<xs:element name=""employee"">', '<xs:complexType>', '<xs:sequence>', '<xs:element name=""firstname"" type=""xs:string""/>', '<xs:element name=""lastname"" type=""xs:string""/>', '<xs:element name=""email"" type=""xs:string""/>', '</xs:sequence>', '</xs:complexType>', '</xs:element>', '</xs:schema>', '<?xml version=""1.0""?>', '<employee', 'xmlns=""http://www.javatpoint.com""', 'xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""', 'xsi:schemaLocation=""http://www.javatpoint.com employee.xsd"">', '<firstname>vimal</firstname>', '<lastname>jaiswal</lastname>', '<email>vimal@javatpoint.com</email>', '</employee>']",[],[],[]
13,['DTD vs XSD'],"['There are many differences between DTD (Document Type Definition) and XSD (XML Schema Definition). In short, DTD provides less control on XML structure whereas XSD (XML schema) provides more control.']","['https://www.javatpoint.com/cdata-pcdata', 'https://www.javatpoint.com/xml-schema', 'https://www.javatpoint.com/cdata-pcdata', 'https://www.javatpoint.com/xml-schema', 'https://www.javatpoint.com/cdata-pcdata']",[],[],[],[],[],['The important differences are given below:'],[],[],[],[],"[""o.DTDXS&&&)DTD stands for Document Type Definition.XSD stands for XML Schema Definition&&&)DTDs are derived from SGML syntax.XSDs are written in XML&&&)DTD doesn't support datatypes.XSD supports datatypes for elements and attributes&&&)DTD doesn't support namespace.XSD supports namespace&&&)DTD doesn't define order for child elements.XSD defines order for child elements&&&)DTD is not extensible.XSD is extensible&&&)DTD is not simple to learn.XSD is simple to learn because you don't need to learn new language&&&)DTD provides less control on XML structure.XSD provides more control on XML structure""]",[]
14,['CDATA vs PCDATA'],['CDATA: (Unparsed Character data): CDATA contains the text which is not parsed further in an XML document. Tags inside the CDATA text are not treated as markup and entities will not be expanded. '],"['https://www.javatpoint.com/xml-parsers', 'https://www.javatpoint.com/dtd-vs-xsd', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/cdata.xml', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/pcdata.xml', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/xml-parsers', 'https://www.javatpoint.com/dtd-vs-xsd', 'https://www.javatpoint.com/xml-parsers']",[],[],"['CDATA', 'PCDATA']",[],[],"[""Let's take an example for CDATA:"", ' In the above CDATA example, CDATA is used just after the element employee to make the data/text unparsed, so it will give the value of employee:', ""Let's take an example: ""]","[""In other words you can say that a parsed character data means the XML parser examine the data and ensure that it doesn't content entity if it contains that will be replaced. "", ""In the above example, the employee element contains 3 more elements 'firstname', 'lastname', and 'email', so it parses further to get the data/text of firstname, lastname and email to give the value of employee as:""]",['PCDATA: (Parsed Character Data): XML parsers are used to parse all the text in an XML document. PCDATA stands for Parsed Character data. PCDATA is the text that will be parsed by a parser. Tags inside the PCDATA will be treated as markup and entities will be expanded.'],"['<?xml version=""1.0""?>', '<!DOCTYPE employee SYSTEM ""employee.dtd"">', '<employee>', '<![CDATA[', '<firstname>vimal</firstname>', '<lastname>jaiswal</lastname>', '<email>vimal@javatpoint.com</email>', '</employee>', '<?xml version=""1.0""?>', '<!DOCTYPE employee SYSTEM ""employee.dtd"">', '<employee>', '<firstname>vimal</firstname>', '<lastname>jaiswal</lastname>', '<email>vimal@javatpoint.com</email>', '</employee>']","['<firstname>vimal</firstname><lastname>jaiswal</lastname><email>[email\xa0protected]</email>', 'vimal jaiswal [email\xa0protected]']",[],[]
15,['XML Parsers'],['An XML parser is a software library or package that provides interfaces for client applications to work with an XML document. The XML Parser is designed to read the XML and create a way for programs to use XML.'],"['https://www.javatpoint.com/xml-dom', 'https://www.javatpoint.com/cdata-pcdata', 'https://www.javatpoint.com/xml-dom', 'https://www.javatpoint.com/cdata-pcdata', 'https://www.javatpoint.com/xml-dom']",['https://static.javatpoint.com/xmlpages/images/xml-parser.png'],[],"['Types of XML Parsers', 'DOM (Document Object Model)', 'SAX (Simple API for XML)']","['Features of DOM Parser', 'Advantages', 'Disadvantages', 'Features of SAX Parser', 'Advantages', 'Disadvantages']",[],"['XML parser validates the document and check that the document is well formatted.', ""Let's understand the working of XML parser by the figure given below:"", 'These are the two main types of XML Parsers:', 'DOM Parser has a tree based structure.', '1) It supports both read and write operations and the API is very simple to use.', '2) It is preferred when random access to widely separated parts of a document is required. ', '1) It is memory inefficient. (consumes more memory because the whole XML document needs to loaded into memory).', '2) It is comparatively slower than other parsers.', 'A SAX Parser implements SAX API. This API is an event based API and less intuitive. ', 'It does not create any internal structure. ', 'Clients does not know what methods to call, they just overrides the methods of the API and place his own code inside method. ', 'It is an event based parser, it works like an event handler in Java. ', '1) It is simple and memory efficient. ', '2) It is very fast and works for huge documents. ', '1) It is event-based so its API is less intuitive. ', '2) Clients never know the full information because the data is broken into pieces.']","['A DOM document is an object which contains all the information of an XML document. It is composed like a tree structure. The DOM Parser implements a DOM API. This API is very simple to use.', 'A DOM Parser creates an internal structure in memory which is a DOM document object and the client applications get information of the original XML document by invoking methods on this document object. ']",[],[],[],[],[]
16,['XML DOM'],['DOM is an acronym stands for Document Object Model. It defines a standard way to access and manipulate documents. The Document Object Model (DOM) is a programming API for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.'],"['https://www.javatpoint.com/xml-database', 'https://www.javatpoint.com/xml-parsers', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=xmldom1', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=xmldom2', 'https://www.javatpoint.com/xml-database', 'https://www.javatpoint.com/xml-parsers', 'https://www.javatpoint.com/xml-database']",['https://static.javatpoint.com/xmlpages/images/xml-dom.png'],[],"['What is XML DOM', 'What does XML DOM', 'XML DOM Example : Load XML File', 'XML DOM Example : Load XML String']",[],[],"['XML DOM defines a standard way to access and manipulate XML documents.', 'The XML DOM makes a tree-structure view for an XML document.', 'We can access all elements through the DOM tree. ', 'We can modify or delete their content and also create new elements. The elements, their content (text and attributes) are all known as nodes.', 'For example, consider this table, taken from an HTML document:', 'The Document Object Model represents this table like this:', 'Let\'s take an example to show how an XML document (""note.xml"") is parsed into an XML DOM object.', 'This example parses an XML document (note.xml) into an XML DOM object and extracts information from it with JavaScript. ', ""Let's see the XML file that contains message."", ""Let's see the HTML file that extracts the data of XML document using DOM."", 'xmldom.html', 'This example parses an XML string into an XM DOM object and then extracts some information from it with a JavaScript. ', ""Let's see the HTML file that extracts the data of XML string using DOM."", 'xmldom.html']",[],"['As a W3C specification, one important objective for the Document Object Model is to provide a standard programming interface that can be used in a wide variety of environments and applications. The Document Object Model can be used with any programming language.']","['<TABLE>', '<ROWS>', '<TR>', '<TD>A</TD>', '<TD>B</TD>', '</TR>', '<TR>', '<TD>C</TD>', '<TD>D</TD>', '</TR>', '</ROWS>', '</TABLE>', '<?xml version=""1.0"" encoding=""ISO-8859-1""?>', '<note>', '<to>sonoojaiswal@javatpoint.com</to>', '<from>vimal@javatpoint.com</from>', '<body>Hello XML DOM</body>', '</note>', '<!DOCTYPE html>', '<h1>Important Note</h1>', '<b>To:</b> <span id=""to""></span><br>', '<b>From:</b> <span id=""from""></span><br>', '<b>Message:</b> <span id=""message""></span>', '<script>', 'if (window.XMLHttpRequest)', '{// code for IE7+, Firefox, Chrome, Opera, Safari', 'xmlhttp=new XMLHttpRequest();', '{// code for IE6, IE5', 'xmlhttp=new ActiveXObject(""Microsoft.XMLHTTP"");', 'xmlhttp.open(""GET"",""note.xml"",false);', 'xmlhttp.send();', 'xmlDoc=xmlhttp.responseXML;', 'document.getElementById(""to"").innerHTML=', 'xmlDoc.getElementsByTagName(""to"")[0].childNodes[0].nodeValue;', 'document.getElementById(""from"").innerHTML=', 'xmlDoc.getElementsByTagName(""from"")[0].childNodes[0].nodeValue;', 'document.getElementById(""message"").innerHTML=', 'xmlDoc.getElementsByTagName(""body"")[0].childNodes[0].nodeValue;', '</script>', '</html>', '<!DOCTYPE html>', '<h1>Important Note2</h1>', '<b>To:</b> <span id=""to""></span><br>', '<b>From:</b> <span id=""from""></span><br>', '<b>Message:</b> <span id=""message""></span>', '<script>', 'txt1="""";', 'txt2=""Sania Mirza"";', 'txt3=""Serena William"";', 'txt4=""Don\'t forget me this weekend!"";', 'txt5="""";', 'txt=txt1+txt2+txt3+txt4+txt5;', 'if (window.DOMParser)', 'parser=new DOMParser();', 'xmlDoc=parser.parseFromString(txt,""text/xml"");', 'else // Internet Explorer', 'xmlDoc=new ActiveXObject(""Microsoft.XMLDOM"");', 'xmlDoc.async=false;', 'xmlDoc.loadXML(txt);', 'document.getElementById(""to"").innerHTML=', 'xmlDoc.getElementsByTagName(""to"")[0].childNodes[0].nodeValue;', 'document.getElementById(""from"").innerHTML=', 'xmlDoc.getElementsByTagName(""from"")[0].childNodes[0].nodeValue;', 'document.getElementById(""message"").innerHTML=', 'xmlDoc.getElementsByTagName(""body"")[0].childNodes[0].nodeValue;', '</script>']",[],[],[]
17,['XML Database'],['XML database is a data persistence software system used for storing the huge amount of information in XML format. It provides a secure place to store XML documents. '],"['https://www.javatpoint.com/xml-namespaces', 'https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/xml-namespaces', 'https://www.javatpoint.com/xml-related-technologies', 'https://www.javatpoint.com/xml-namespaces']",[],[],"['Types of XML databases', 'XML-enable Database', 'Native XML Database']",[],[],"['There are two types of XML databases.', 'Native XML database is preferred over XML-enable database because it is highly capable to store, maintain and query XML documents. ', ""Let's take an example of XML database: ""]","['You can query your stored data by using XQuery, export and serialize into desired format. XML databases are usually associated with document-oriented databases.', 'XML-enable database works just like a relational database. It is like an extension provided for the conversion of XML documents. In this database, data is stored in table, in the form of rows and columns. ', 'Native XML database is used to store large amount of data. Instead of table format, Native XML database is based on container format. You can query data by XPath expressions. ', 'In the above example, a table named contacts is created and holds the contacts (contact1 and contact2). Each one contains 3 entities name, company and phone.']",[],"['<?xml version=""1.0""?>', '<contact-info>', '<contact1>', '<name>Vimal Jaiswal</name>', '<company>SSSIT.org</company>', '<phone>(0120) 4256464</phone>', '</contact1>', '<contact2>', '<name>Mahesh Sharma </name>', '<company>SSSIT.org</company>', '<phone>09990449935</phone>', '</contact2>', '</contact-info>']",[],[],[]
18,['XML Namespaces'],['XML Namespace is used to avoid element name conflict in XML document. '],"['https://www.javatpoint.com/dtd-vs-xsd', 'https://www.javatpoint.com/xml-css', 'https://www.javatpoint.com/https://www.javatpoint.com/xmlpages/xmlnamespace1.xml', 'https://www.javatpoint.com/dtd-vs-xsd', 'https://www.javatpoint.com/xml-css', 'https://www.javatpoint.com/dtd-vs-xsd']",[],[],"['XML Namespace Declaration', 'How to get rid of name conflict?', 'Uniform Resource Identifier (URI)', 'The Default Namespace']","[' 1) By Using a Prefix', ' 2) By Using xmlns Attribute']","[' Note: In this example, you will get no conflict because both the tables have specific names.', 'Note: The Namespace URI used in the above example is not necessary at all. It is not used by parser to look up information. It is only used to provide a unique name to the Namespace identifier. ', 'Note: If you define a namespace without a prefix, all descendant elements are considered to belong to that namespace. ']","['An XML namespace is declared using the reserved XML attribute. This attribute name must be started with ""xmlns"".', ""Let's see the XML namespace syntax:"", 'Here, namespace starts with keyword ""xmlns"". The word name is a namespace prefix. The URL is a namespace identifier. ', ""Let's see the example of XML file."", 'Namespace Prefix: cont', 'Namespace Identifier: http://sssit.org/contact-us ', 'It specifies that the element name and attribute names with cont prefix belongs to http://sssit.org/contact-us name space.', 'Generally these conflict occurs when we try to mix XML documents from different XML application.', ""Let's take an example with two tables:"", 'Table2: This table carries information about a computer table.', 'You can easily avoid the XML namespace by using a name prefix. ', 'You can use xmlns attribute to define namespace with the following syntax: ', ""Let's see the example:"", 'Uniform Resource Identifier is used to identify the internet resource. It is a string of characters. ', 'The most common URI is URL (Uniform Resource Locator) which identifies an internet domain address. ', ""There is also an URI name URN (Universal Resource Name) but it is not so common. We have used only URL's in all our examples. "", 'The default namespace is used in the XML document to save you from using prefixes in all the child elements. ', 'The only difference between default namespace and a simple namespace is that: There is no need to use a prefix in default namespace. ', 'You can also use multiple namespaces within the same document just define a namespace against a child node. ', 'Example of Default Namespace:', 'You can see that prefix is not used in this example, so it is a default namespace.']","['In XML, elements name are defined by the developer so there is a chance to conflict in name of the elements. To avoid these types of confliction we use XML Namespaces. We can say that XML Namespaces provide a method to avoid element name conflict.', 'If you add these both XML fragments together, there would be a name conflict because both have <table< element. Although they have different name and meaning.', 'In the above example, the <table> element defines a namespace and when a namespace is defined for an element, the child elements with the same prefixes are associated with the same namespace.']",[],"['<element xmlns:name = ""URL"">', '<?xml version=""1.0"" encoding=""UTF-8""?>', '<cont:contact xmlns:cont=""http://sssit.org/contact-us"">', '<cont:name>Vimal Jaiswal</cont:name>', '<cont:company>SSSIT.org</cont:company>', '<cont:phone>(0120) 425-6464</cont:phone>', '</cont:contact>', '<td>Aries</td>', '<td>Bingo</td>', '</table>', '<name>Computer table</name>', '<width>80</width>', '<length>120</length>', '</table>', '<h:table>', '<h:tr>', '<h:td>Aries</h:td>', '<h:td>Bingo</h:td>', '</h:tr>', '</h:table>', '<f:table>', '<f:name>Computer table</f:name>', '<f:width>80</f:width>', '<f:length>120</f:length>', '</f:table>', '<element xmlns:name = ""URL"">', '<h:table xmlns:h=""http://www.abc.com/TR/html4/"">', '<h:tr>', '<h:td>Aries</h:td>', '<h:td>Bingo</h:td>', '</h:tr>', '</h:table>', '<f:table xmlns:f=""http://www.xyz.com/furniture"">', '<f:name>Computer table</f:name>', '<f:width>80</f:width>', '<f:length>120</f:length>', '</f:table>', '</root>', '<root xmlns:h=""http://www.abc.com/TR/html4/""', 'xmlns:f=""http://www.xyz.com/furniture"">', '<h:table>', '<h:tr>', '<h:td>Aries</h:td>', '<h:td>Bingo</h:td>', '</h:tr>', '</h:table>', '<f:table>', '<f:name>Computer table</f:name>', '<f:width>80</f:width>', '<f:length>120</f:length>', '</f:table>', '</root>', '<tutorials xmlns=""http://www.javatpoint.com/java-tutorial"">', '<tutorial>', '<title>Java-tutorial</title>', '<author>Sonoo Jaiswal</author>', '</tutorial>', '</tutorials>']",[],[],[]
19,['XML Interview Questions'],"[""There is given XML interview questions and answers that has been asked in many companies. Let's see the list of top 25 XML interview questions.""]","['https://www.javatpoint.com/what-is-xml', 'https://www.javatpoint.com/xml-schema', 'https://www.javatpoint.com/dtd-vs-xsd', 'https://www.javatpoint.com/cdata-pcdata', 'https://www.javatpoint.com/corejava-interview-questions#corebasicsinterview', 'https://www.javatpoint.com/corejava-interview-questions#oopsinterview', 'https://www.javatpoint.com/java-multithreading-interview-questions', 'https://www.javatpoint.com/corejava-interview-questions-3', 'https://www.javatpoint.com/java-collections-interview-questions', 'https://www.javatpoint.com/jdbc-interview-questions', 'https://www.javatpoint.com/servletinterview', 'https://www.javatpoint.com/jspinterview', 'https://www.javatpoint.com/spring-interview-questions', 'https://www.javatpoint.com/hibernate-interview-questions', 'https://www.javatpoint.com/pl-sql-interview-questions', 'https://www.javatpoint.com/sql-interview-questions', 'https://www.javatpoint.com/oracle-interview-questions', 'https://www.javatpoint.com/android-interview-questions', 'https://www.javatpoint.com/sql-server-interview-questions', 'https://www.javatpoint.com/mysql-interview-questions']","['https://static.javatpoint.com/interview/images/xml-interview-questions.png', 'https://static.javatpoint.com/interview/images/xml_img.PNG']",[],[],"['1) What is XML?', '2) How XML is different from HTML?', '3) What is the meaning of version in XML?', '4) What are the benefits of XML?', '5) What is XML DOM?', '6) What is SAX in XML?', '7) What is XSNL?', '8) What is a well formed XML document? ', '9) What is a valid XML document?', '10) What is DTD?', '11) How can you apply a DTD to an XML document?', '12) What are the basic rules to write XML document?', '13) What is XSL?', '14) What is XPath in XML?', '15) What is XSLT?', '16) What is the difference between XML DTD and XML schema or XSD?', '17) Is XML meant to be a replacement of HTML?', '18) Define element and attribute in an XML document.', '19) What is the difference between simple element and complex element? ', '20) Define the concept of XPOINTER.', '21) What is XML data binding? Why is it used? ', '22) What is XML encoding error?', ""23) What are the different XML API's?"", '24) What is XmlReader class? Explain.', '25) What is the difference between CDATA and PCDATA? ', '26) What is XQuery? ', '27) What is XML Namespace? ', '28) What is SGML? ', '29) Can we use graphics in XML? ', '30) Is XML case sensitive?', '31) Define Structure of XML?']",['Note: A valid XML document may be well-formed but a well-formed XML document may not be valid. '],"['XML technology facilitates you to create your own markup language. ', 'HTML stands for Hyper Text Markup Language while XML stands for eXtensible Markup Language. The key differences between HTML and XML are given below:', 'Version is a tag used to show which version of XML is used.', 'These are the main benefits of using XML.', 'Simplicity: Very easy to read and understand the information coded in XML.', 'Openness: It is a W3C standard, endorsed by software industry market leaders.', 'Extensibility: It is extensible because it has no fixed set of tags. You can define them as you need. ', 'Scalable: XML is not in binary format so you can create and edit files with anything and it is also easy to debug. ', 'Fast access: XML documents are arranged in hierarchical form so it is comparatively faster. ', 'DOM methods and objects can be used with any languages like C#, VB, JavaScript and VB Script.', 'SAX has no formal specification like DOM and consumes less memory. But it can be used to read the XML document only not write. ', 'XSNL is an XML search neutral language. This language acts between the meta search interface and targeted system. ', 'A syntactically correct document is called well formed XML document. A well formed XML document must follow the XML?s basic rules of syntax:', 'DTD stands for Document Type Definition. It defines a leading building block of an XML document. It defines:', 'To apply a DTD to an XML document, you can:', 'You should consider the following rules to write an XML document.', 'As SQL is used to retrieve data from database, XPath is used to retrieve data from XML. ', 'From a start tag to end tag everything you see in a XML document, is XML element. It can contain other elements, attributes and texts.', 'An Attribute is a value that is used to define additional information about the element. ', ""Let's take an example to understand it well: "", 'In the above example, <student> is an element and id is an attribute of the <student> element. ', 'In XML, simple elements are text-based elements. It contains less attributes, child elements, and cannot be left empty. ', 'But, complex elements can hold multiple attributes and elements. It can contain additional sub elements and empty element also. ', 'XPOINTER is used to point data within XML document. It is used to locate the particular part of the XML document. It is a W3C recommendation.', 'In this example, XPOINTER points ""streetnumber = 9"" in ""address.xml"".', 'XML data binding is the process of representing the information in an XML document as an object in computer memory.', 'There are two types of XML encoding errors:', 'Imports System.Xml', 'using System.Xml;', 'CDATA means unparsed character data whereas PCDATA means parsed character data.', 'XQuery is a query language that is used to retrieve data from XML document.', 'A namespace is a qualified name that is associated with the DTD/Schema location .', 'A document may have duplicate elements and attributes. So, the namespace defines a way to compare duplicate elements and attribute names.', 'SGML is a vast and powerful generalized markup language that is used to define descriptions for the structure of several electronic documents.', 'Yes, graphics can be stored in XML file by using XLink and XPointer. It supports graphics like GIF, JPG, TIFF, PNG, CGM, EPS, SVG.', 'Yes, XML is a case sensitive language.']","['Self-descriptive: XML documents do not need special schema set-up like traditional databases to store data. XML documents can be stored without such definitions, because they contain metadata in the form of tags and attributes. ', 'DOM stands for Document Object Model which is used to describe the logical structure of XML document. It is a hierarchical model that provides a way to access and manipulate an XML document.', 'XSL stands for Extensible Stylesheet Language. It is a language for expressing stylesheets. These stylesheets are like CSS which describes how to display an XML document of a given type. ', 'XPath is a technology used in XML. It is used to retrieve elements from XML documents. XPath expressions can be used to locate and retrieve elements, attributes and values from XML files because XML documents are structured. It is similar to SQL.', 'XSL stands for Extensible Stylesheet Language. It is a language for expressing stylesheets. These stylesheets are like CSS which describes how to display an XML document of a given type. ', 'No, both languages have their own specification and used for different purposes. XML is used to describes data while HTML focus on how to display data.', 'XML data binding is used to short your development effort, simplify maintenance, increase reliability. It saves your development time and money. It makes working with XML data very intuitive.', 'These errors occur because XML document can contain non ASCII characters like Norwegian and French. These errors can be avoided by specifying the XML encoding Unicode. ', ""Tree-based API: It compiles an XML document in a tree like structure and loads it into the memory. You can traverse and change the tree structure. Tree based API's are useful for a wide range of applications. Example of tree-based API is DOM parser."", 'Event-based API: An event based API provides the reports to an application about the parsing event. It uses a set of built-in call back functions.\nExample of event-based API is SAX parser.', 'The XmlrReader class represents a reader that provides fast, noncached, forward-only access to XML data. You need to import the following namespaces to work with XmlReader class in .NET.']","['XML stands for eXtensible Markup Language. It is a simple and flexible markup language. It is known as universal language for data on the web because XML documents can be created and used in any language. It is universal standard for information interchange. ', 'SAX stands for Simple API for XML. It is a sequential access parser. It is a simple API for XML which provides a mechanism for reading data from an XML document. It is an alternative of DOM. DOM operates on the documents as whole, SAX parsers operate on each piece of the XML document sequentially. ', 'A structurally correct element is called a valid XML document. It should follow some predefined rules of a specific type of document. These rules determine the type of data that each part of the document can contain. These rules can be written by the author of an XML document or someone other.', 'XSLT is a popular XML technology which is used to transform one XML file to other format like HTML etc. XSLT is like a language which has its own syntax, functions and operator to transform XML documents. XSLT is also used to display data present in XML files as HTML pages. ', 'See this example:\n\naddress.xml#pointer(/ descendant ::streetnumber[@id =9])\n\nIn this example, XPOINTER points ""streetnumber = 9"" in ""address.xml"".\n\n21) What is XML data binding? Why is it used? \nXML data binding is the process of representing the information in an XML document as an object in computer memory.\nXML data binding is used to short your development effort, simplify maintenance, increase reliability. It saves your development time and money. It makes working with XML data very intuitive.\n\n22) What is XML encoding error?\nThere are two types of XML encoding errors:\n\nAn invalid character was found in text content.\nSwitching from current encoding to specified encoding not supported. \n\nThese errors occur because XML document can contain non ASCII characters like Norwegian and French. These errors can be avoided by specifying the XML encoding Unicode. \n\n23) What are the different XML API\'s?\nTree-based API: It compiles an XML document in a tree like structure and loads it into the memory. You can traverse and change the tree structure. Tree based API\'s are useful for a wide range of applications. Example of tree-based API is DOM parser.\n\nEvent-based API: An event based API provides the reports to an application about the parsing event. It uses a set of built-in call back functions.\nExample of event-based API is SAX parser.\n\n24) What is XmlReader class? Explain.\nThe XmlrReader class represents a reader that provides fast, noncached, forward-only access to XML data. You need to import the following namespaces to work with XmlReader class in .NET.\nIn VB: \nImports System.Xml\nIn C#: \nusing System.Xml;\n\n25) What is the difference between CDATA and PCDATA? \nCDATA means unparsed character data whereas PCDATA means parsed character data.\nmore details...\n\n26) What is XQuery? \nXQuery is a query language that is used to retrieve data from XML document.\n\n27) What is XML Namespace? \nA namespace is a qualified name that is associated with the DTD/Schema location .\nA document may have duplicate elements and attributes. So, the namespace defines a way to compare duplicate elements and attribute names.\n\n28) What is SGML? \nSGML is a vast and powerful generalized markup language that is used to define descriptions for the structure of several electronic documents.\n\n29) Can we use graphics in XML? \nYes, graphics can be stored in XML file by using XLink and XPointer. It supports graphics like GIF, JPG, TIFF, PNG, CGM, EPS, SVG.\n\n30) Is XML case sensitive?\nYes, XML is a case sensitive language.\n\n31) Define Structure of XML?\n\n\n\n\nJava Basics Interview Questions\nJava OOPs Interview Questions\nJava Multithreading Interview Questions\nJava String & Exception Interview Questions\nJava Collection Interview Questions\nJDBC Interview Questions\nServlet Interview Questions\nJSP Interview Questions\nSpring Interview QuestionsHibernate Interview Questions\nPL/SQL Interview QuestionsSQL Interview Questions\nOracle Interview QuestionsAndroid Interview Questions\nSQL Server Interview QuestionsMySQL Interview Questions\n\n\n', '\n\naddress.xml#pointer(/ descendant ::streetnumber[@id =9])\n\nIn this example, XPOINTER points ""streetnumber = 9"" in ""address.xml"".\n\n21) What is XML data binding? Why is it used? \nXML data binding is the process of representing the information in an XML document as an object in computer memory.\nXML data binding is used to short your development effort, simplify maintenance, increase reliability. It saves your development time and money. It makes working with XML data very intuitive.\n\n22) What is XML encoding error?\nThere are two types of XML encoding errors:\n\nAn invalid character was found in text content.\nSwitching from current encoding to specified encoding not supported. \n\nThese errors occur because XML document can contain non ASCII characters like Norwegian and French. These errors can be avoided by specifying the XML encoding Unicode. \n\n23) What are the different XML API\'s?\nTree-based API: It compiles an XML document in a tree like structure and loads it into the memory. You can traverse and change the tree structure. Tree based API\'s are useful for a wide range of applications. Example of tree-based API is DOM parser.\n']","['<librarymembers>', '<student id=""001"">', '<name>Vimal</name>', '<age>25</age>', '</student>', '</librarymembers>', 'address.xml#pointer(/ descendant ::streetnumber[@id =9])']",[],"['o.HTMLXM&&&)HTML is used to display data and focuses on how data looks.XML is a software and hardware independent tool used to transport and store data. It focuses on what data is&&&)HTML is a markup language itself.XML provides a framework to define markup languages&&&)HTML is not case sensitive.XML is case sensitive&&&)HTML is a presentation language.XML is neither a presentation language nor a programming language', 'ava Basics Interview Questions|||Java OOPs Interview Question&&&ava Multithreading Interview Questions|||Java String & Exception Interview Question&&&ava Collection Interview Questions|||JDBC Interview Question&&&ervlet Interview Questions|||JSP Interview Question&&&pring Interview QuestionsHibernate Interview Question&&&L/SQL Interview QuestionsSQL Interview Question&&&racle Interview QuestionsAndroid Interview Question&&&QL Server Interview QuestionsMySQL Interview Question']","['|||It must have a closing tag. |||The closing tag must exactly match the open tag: XML is case sensitive. |||All elements should be included within a single root tag.|||Child elements must be closed within parent tag. ||||||Names of elements|||How and where they can be used|||Element attributes|||Proper nesting||||||Use the DTD element definition within the XML document itself.|||Provide a DTD as a separate file and reference its name in XML document.||||||It should have a root element.|||All tags must be closed.|||Spaces are not allowed in tag names.|||All tags must be nested properly.|||XML tags are case sensitive.|||Use the attribute values within quotes.|||Whitespace is preserved in XML. ||||||DTD stands for Document Type Definition whereas XSD stands for XML Schema Definition.|||DTD does not support namespaces. It has its own set of keywords to define a schema whereas XSD uses its own set of namespaces and elements to define the schema.|||DTD is the predecessor of XML schema whereas XML schema is a new technology, some XML parser do not support it yet. |||&&&|||An invalid character was found in text content.|||Switching from current encoding to specified encoding not supported. |||']"
20,['XQuery Tutorial'],['XQuery tutorial provides basic and advanced concepts of XQuery. Our XQuery tutorial is designed for beginners and professionals.'],"['https://www.javatpoint.com/what-is-xquery', 'https://www.javatpoint.com/xquery-tutorial', 'https://www.javatpoint.com/what-is-xquery', 'https://www.javatpoint.com/xquery-features', 'https://www.javatpoint.com/difference-between-xquery-and-xpath', 'https://www.javatpoint.com/xquery-vs-xslt', 'https://www.javatpoint.com/xquery-environment-setup', 'https://www.javatpoint.com/xquery-first-example', 'https://www.javatpoint.com/xquery-flwor', 'https://www.javatpoint.com/xquery-html-format', 'https://www.javatpoint.com/xquery-xpath', 'https://www.javatpoint.com/xquery-syntax', 'https://www.javatpoint.com/xquery-add', 'https://www.javatpoint.com/xquery-functions', 'https://www.javatpoint.com/xquery-sequences', 'https://www.javatpoint.com/xquery-sequence-functions', 'https://www.javatpoint.com/xquery-string-functions', 'https://www.javatpoint.com/xquery-string-length-function', 'https://www.javatpoint.com/xquery-concat-function', 'https://www.javatpoint.com/xquery-string-join-function', 'https://www.javatpoint.com/xquery-time-and-date-function', 'https://www.javatpoint.com/xquery-current-date-function', 'https://www.javatpoint.com/xquery-current-time-function', 'https://www.javatpoint.com/xquery-current-datetime-function', 'https://www.javatpoint.com/xquery-if-then-else-statement', 'https://www.javatpoint.com/xquery-regular-expressions', 'https://www.javatpoint.com/what-is-xquery', 'https://www.javatpoint.com/what-is-xquery']",['https://static.javatpoint.com/xquery/images/xquery.png'],[],"['XQuery Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['XQuery is a functional query language which is built on XPath expressions.', 'XQuery Tutorial', 'Before learning XQuery, you must have the basic knowledge of XML.', 'Our XQuery tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this XQuery tutorial. But if there is any mistake, please post the problem in contact form.']","['Our XQuery tutorial includes all topics of XQuery such as XQuery Syntax, Sequence functions , add, functions, string functions, date functions, regular expressions, if then else, custom functions, etc.']",[],[],[],[],['|||XQuery Tutorial|||What is XQuery||| XQuery Features||| XQuery vs XPath||| XQuery vs XSLT|||Environment Setup|||XQuery First Example|||XQuery FLWOR|||XQuery HTML Format|||XQuery XPath|||XQuery Syntax|||XQuery Add||||||XQuery Functions|||XQuery Sequences|||XQuery Sequence functions|||XQuery String functions|||1) String-length()|||2) String concat()|||3) String-join()|||XQuery Time & Date|||1) current-date()|||2) current-time()|||3) current-dateTime()|||XQuery If Then Else|||XQuery Regex|||']
21,['What is XQuery'],['XQuery is a functional query language used to retrieve information stored in XML format. It is same as for XML what SQL is for databases. It was designed to query XML data.'],"['https://www.javatpoint.com/xquery-features', 'https://www.javatpoint.com/xquery-tutorial', 'https://www.javatpoint.com/xquery-features', 'https://www.javatpoint.com/xquery-tutorial', 'https://www.javatpoint.com/xquery-features']",['https://static.javatpoint.com/xquery/images/what-is-xquery1.png'],[],"['What does it do', 'History']",[],[],"['XQuery is built on XPath expressions. It is a W3C recommendation which is supported by all major databases.', 'The as it is definition of XQuery given by its official documentation is as follows:', 'XQuery is a functional language which is responsible for finding and extracting elements and attributes from XML documents.', 'It can be used for following things:']","['XQuery was designed by W3C and first appeared in 2007. It became the W3C recommendation on January 23, 2007. XQuery 3.0 is a W3C recommendation from April 8, 2014.']","['""XQuery is a standardized language for combining documents, databases, Web pages and almost anything else. It is very widely implemented. It is powerful and easy to learn. XQuery is replacing proprietary middleware languages and Web Application development languages. XQuery is replacing complex Java or C++ programs with a few lines of code. XQuery is simpler to work with and easier to maintain than many other alternatives.""']",[],[],[],['|||To extract information to use in a web service.|||To generates summary reports.|||To transform XML data to XHTML.|||Search Web documents for relevant information.|||']
22,['XQuery Features'],['There are many features of XQuery query language. A list of top features are given below:'],"['https://www.javatpoint.com/difference-between-xquery-and-xpath', 'https://www.javatpoint.com/what-is-xquery', 'https://www.javatpoint.com/difference-between-xquery-and-xpath', 'https://www.javatpoint.com/what-is-xquery', 'https://www.javatpoint.com/difference-between-xquery-and-xpath']",[],[],['Advantages of XQuery'],[],[],[],[],[],[],[],[],"['|||XQuery is a functional language. It is used to retrieve and query XML based data.|||XQuery is expression-oriented programming language with a simple type system.|||XQuery is analogous to SQL. For example: As SQL is query language for databases, same as XQuery is query language for XML.|||XQuery is XPath based and uses XPath expressions to navigate through XML documents.|||XQuery is a W3C standard and universally supported by all major databases.||||||XQuery can be used to retrieve both hierarchal and tabular data.|||XQuery can also be used to query tree and graphical structures. |||XQUery can used to build web pages.|||XQuery can be used to query web pages.|||XQuery is best for XML-based databases and object-based databases. Object databases are much more flexible and powerful than purely tabular databases.|||XQuery can be used to transform XML documents into XHTML documents.|||']"
23,['XQuery vs XPath'],[],"['https://www.javatpoint.com/xquery-vs-xslt', 'https://www.javatpoint.com/xquery-features', 'https://www.javatpoint.com/xquery-vs-xslt', 'https://www.javatpoint.com/xquery-features', 'https://www.javatpoint.com/xquery-vs-xslt']",[],[],[],[],[],[],[],[],[],[],"['Index|||XQuery|||XPath&&&1)|||XQuery is a functional programming and query language that is used to query a group of XML data.|||XPath is a xml path language that is used to select nodes from an xml document using queries. &&&2)|||XQuery is used to extract and manipulate data from either xml documents or relational databases and ms office documents that support an xml data source.|||XPath is used to compute values like strings, numbers and boolean types from another xml documents.&&&3)|||xquery is represented in the form of a tree model with seven nodes, namely processing instructions, elements, document nodes, attributes, namespaces, text nodes, and comments. |||xpath is represented as tree structure, navigate it by selecting different nodes.&&&4)|||xquery supports xpath and extended relational models.|||xpath is still a component of query language.&&&5)|||xquery language helps to create syntax for new xml documents.|||xpath was created to define a common syntax and behavior model for xpointer and xslt.']",[]
24,['XQuery vs XSLT'],[],"['https://www.javatpoint.com/xquery-environment-setup', 'https://www.javatpoint.com/difference-between-xquery-and-xpath', 'https://www.javatpoint.com/xquery-environment-setup', 'https://www.javatpoint.com/difference-between-xquery-and-xpath', 'https://www.javatpoint.com/xquery-environment-setup']",[],[],[],[],[],[],[],[],[],[],[],"['|||XQuery is program driven while XSLT is document-driven.|||XQuery is declarative while XSLT is functional.|||XSLT is written in XML while XQuery is not written in XML.|||XQuery is used only for simple transformations while XSLT is a language that was especially designed to process tree structures.|||XQuery is not as much powerful and sophisticated as XSLT which is still best to retrieve results in tree structure.|||XQuery is good to access XML database and extract the necessary XML nodes while XSLT is used to transform XML documents.|||XQuery is designed for retrieving and interpreting information according to the specification. It is very flexible to query a broad spectrum of XML information sources, like XML databases and XML documents while XSLT is mainly designed for transforming the XML documents.|||XQuery is considered easier to learn while XSLT is comparatively difficult.|||XQuery is shorter, faster and more elegant for huge data jobs while XSLT may be difficult to maintain unless you carefully designed your stylesheet.|||']"
25,['XQuery Environment Setup'],"['Let\'s see how to create a local development environment. Here we are using the jar file of Saxon XQuery processor. The Java-based Saxon XQuery processor is used to test the "".xqy"" file, a file containing XQuery expression against our sample XML document.']","['https://www.javatpoint.com/xquery-first-example', 'https://www.javatpoint.com/xquery-vs-xslt', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/Saxon.zip', 'https://www.javatpoint.com/xquery-first-example', 'https://www.javatpoint.com/xquery-vs-xslt', 'https://www.javatpoint.com/xquery-first-example']",[],[],[],[],[],"['You need to load Saxon XQuery processor jar files to run the java application.', ' Download Saxon Jar Files']","['For eclipse project, add build-path to these jar files. Or, if you are running java using command prompt, you need to set classpath to these jar files or put these jar files inside JRE/lib/ext directory.']",[],[],[],[],[]
26,['XQuery First Example'],"['Here, the XML document is named as courses.xml and xqy file is named as courses.xqy']","['https://www.javatpoint.com/xquery-flwor', 'https://www.javatpoint.com/xquery-environment-setup', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery2.zip', 'https://www.javatpoint.com/xquery-flwor', 'https://www.javatpoint.com/xquery-environment-setup', 'https://www.javatpoint.com/xquery-flwor']",['https://static.javatpoint.com/xquery/images/xquery-first-example1.png'],[],['Execute XQuery against XML'],[],[],"['courses.xml', 'courses.xqy', 'This example will display the title elements of the courses whose fees are greater than 5000.', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester']","['Create a Java based XQuery executor program to read the courses.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'Put the above three files to a same location. We put them on desktop in a folder name XQuery2. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['<?xml version=""1.0"" encoding=""UTF-8""?>', '<courses>', '<course category=""JAVA"">', '<title lang=""en"">Learn Java in 3 Months.</title>', '<trainer>Sonoo Jaiswal</trainer>', '<year>2008</year>', '<fees>10000.00</fees>', '</course>', '<course category=""Dot Net"">', '<title lang=""en"">Learn Dot Net in 3 Months.</title>', '<trainer>Vicky Kaushal</trainer>', '<year>2008</year>', '<fees>10000.00</fees>', '</course>', '<course category=""C"">', '<title lang=""en"">Learn C in 2 Months.</title>', '<trainer>Ramesh Kumar</trainer>', '<year>2014</year>', '<fees>3000.00</fees>', '</course>', '<course category=""XML"">', '<title lang=""en"">Learn XML in 2 Months.</title>', '<trainer>Ajeet Kumar</trainer>', '<year>2015</year>', '<fees>4000.00</fees>', '</course>', '</courses>', 'for $x in doc(""courses.xml"")/courses/course', 'where $x/fees>5000', 'return $x/title', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""courses.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],[]
27,['XQuery FLWOR'],"['FLWOR is an acronym which stands for ""For, Let, Where, Order by, Return"".']","['https://www.javatpoint.com/xquery-html-format', 'https://www.javatpoint.com/xquery-first-example', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery3.zip', 'https://www.javatpoint.com/xquery-html-format', 'https://www.javatpoint.com/xquery-first-example', 'https://www.javatpoint.com/xquery-html-format']",['https://static.javatpoint.com/xquery/images/xquery-flwor1.png'],[],"['XQuery FLWOR Example', 'Execute XQuery against XML']",[],[],"['courses.xml', 'Let\'s take the Xquery document named ""courses.xqy"" that contains the query expression to be executed on the above XML document.', 'courses.xqy', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester']","[""Let's take an XML document having the information on the collection of courses. We will use a FLWOR expression to retrieve the titles of those courses which fees are greater than 2000."", 'Create a Java based XQuery executor program to read the courses.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed. ', 'Put the above three files to a same location. We put them on desktop in a folder name XQuery3. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['<?xml version=""1.0"" encoding=""UTF-8""?>', '<courses>', '<course category=""JAVA"">', '<title lang=""en"">Learn Java in 3 Months.</title>', '<trainer>Sonoo Jaiswal</trainer>', '<year>2008</year>', '<fees>10000.00</fees>', '</course>', '<course category=""Dot Net"">', '<title lang=""en"">Learn Dot Net in 3 Months.</title>', '<trainer>Vicky Kaushal</trainer>', '<year>2008</year>', '<fees>10000.00</fees>', '</course>', '<course category=""C"">', '<title lang=""en"">Learn C in 2 Months.</title>', '<trainer>Ramesh Kumar</trainer>', '<year>2014</year>', '<fees>3000.00</fees>', '</course>', '<course category=""XML"">', '<title lang=""en"">Learn XML in 2 Months.</title>', '<trainer>Ajeet Kumar</trainer>', '<year>2015</year>', '<fees>4000.00</fees>', '</course>', '</courses>', 'let $courses := (doc(""courses.xml"")/courses/course)', 'return <results>', 'for $x in $courses', 'where $x/fees>2000', 'order by $x/fees', 'return $x/title', '</results>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""courses.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],['|||For - It is used to select a sequence of nodes.|||Let - It is used to bind a sequence to a variable.|||Where - It is used to filter the nodes.|||Order by - It is used to sort the nodes.|||Return - It is used to specify what to return (gets evaluated once for every node).|||']
28,['XQuery HTML Format '],['XQuery can also be used to transform an XML document into an HTML page.'],"['https://www.javatpoint.com/xquery-xpath', 'https://www.javatpoint.com/xquery-flwor', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery4.zip', 'https://www.javatpoint.com/xquery-xpath', 'https://www.javatpoint.com/xquery-flwor', 'https://www.javatpoint.com/xquery-xpath']","['https://static.javatpoint.com/xquery/images/xquery-html-format1.png', 'https://static.javatpoint.com/xquery/images/xquery-html-format2.png']",[],"['XQuery HTML Format Example', 'Execute XQuery against XML']",[],[],"[""Let's take an example to see how it works:"", 'Let\'s take an XML file named ""books.xml"", having the following code.', 'XML statement:', 'books.xml:', 'XQuery Expression:', 'books.xqy:', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester', 'If you want to eliminate the title element and show only the data inside the title element, use the following XQuery expression:', 'books.xqy:']","['This example will select all the title elements under the book elements that are under the bookstore element, and return the title elements in alphabetical order.', 'Now, create a Java based XQuery executor program to read the books.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed. ', 'Put the above three files to a same location. We put them on desktop in a folder name XQuery4. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['<bookstore>', '<book category=""web"">', '<title lang=""en"">HTML is Fun.</title>', '<author>Ajeet Kumar</author>', '<year>2012</year>', '<price>200.00</price>', '</book>', '<book category=""children"">', '<title lang=""en"">Harry Potter</title>', '<author>J K. Rowling</author>', '<year>2005</year>', '<price>600.00</price>', '</book>', '<book category=""programming"">', '<title lang=""en"">Learn Java Programming</title>', '<author>James Gowsling</author>', '<author>Peter Brown</author>', '<author>Sri Bala</author>', '<author>James Linn</author>', '<author>Vaidyanathan Nagarajan</author>', '<year>2003</year>', '<price>400.00</price>', '</book>', '<book category=""web"" cover=""paperback"">', '<title lang=""en"">Learning XML</title>', '<author>Aryan Tomar</author>', '<year>2013</year>', '<price>150.00</price>', '</book>', '</bookstore>', 'for $x in doc(""books.xml"")/bookstore/book/title', 'order by $x', 'return <li>{$x}</li>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""books.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}', 'for $x in doc(""books.xml"")/bookstore/book/title', 'order by $x', 'return <li>{data($x)}</li>']",[],[],[]
29,['XQuery XPath'],['XQuery uses XPath expressions to restrict the search results on XML collections.'],"['https://www.javatpoint.com/xquery-syntax', 'https://www.javatpoint.com/xquery-html-format', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery5.zip', 'https://www.javatpoint.com/xquery-syntax', 'https://www.javatpoint.com/xquery-html-format', 'https://www.javatpoint.com/xquery-syntax']","['https://static.javatpoint.com/xquery/images/xquery-xpath1.png', 'https://static.javatpoint.com/xquery/images/xquery-xpath2.png', 'https://static.javatpoint.com/xquery/images/xquery-xpath3.png']",[],"['XQuery XPath Example', 'XQuery Type 1', 'How to run', 'Execute XQuery against XML', 'XQuery Type 2', 'XQuery Type 3']",[],[],"['courses.xml', 'Here, we use three different types of XQuery statement that will display the same result having fees is greater than 2000. ', 'courses.xqy', 'XQueryTester.java', 'javac XQueryTester.java', ' java XQueryTester', ' Follow the same procedure specified above:', ' Follow the same procedure specified above:']","[""Let's take an XML document having the information on the collection of courses. We will use XQuery expression to retrieve the titles of those courses."", 'Create a Java based XQuery executor program to read the courses.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'Put the above three files to a same location. We put them on desktop in a folder name XQuery3. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['<?xml version=""1.0"" encoding=""UTF-8""?>', '<courses>', '<course category=""JAVA"">', '<title lang=""en"">Learn Java in 3 Months.</title>', '<trainer>Sonoo Jaiswal</trainer>', '<year>2008</year>', '<fees>10000.00</fees>', '</course>', '<course category=""Dot Net"">', '<title lang=""en"">Learn Dot Net in 3 Months.</title>', '<trainer>Vicky Kaushal</trainer>', '<year>2008</year>', '<fees>10000.00</fees>', '</course>', '<course category=""C"">', '<title lang=""en"">Learn C in 2 Months.</title>', '<trainer>Ramesh Kumar</trainer>', '<year>2014</year>', '<fees>3000.00</fees>', '</course>', '<course category=""XML"">', '<title lang=""en"">Learn XML in 2 Months.</title>', '<trainer>Ajeet Kumar</trainer>', '<year>2015</year>', '<fees>4000.00</fees>', '</course>', '</courses>', '(: read the entire xml document :)', 'let $courses := doc(""courses.xml"")', 'for $x in $courses/courses/course', 'where $x/fees > 2000', 'return $x/title', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""courses.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}', '(: read all courses :)', 'let $courses := doc(""courses.xml"")/courses/course', 'for $x in $courses', 'where $x/fees > 2000', 'return $x/title', '(: read courses with fees > 2000 :)', 'let $courses := doc(""courses.xml"")/courses/course[fees > 20]', 'for $x in $courses', 'return $x/title']",[],[],[]
30,['XQuery Syntax'],"['XQuery elements, attributes, and variables must be valid XML names and follow case sensitivity. ']","['https://www.javatpoint.com/xquery-add', 'https://www.javatpoint.com/xquery-xpath', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery6.zip', 'https://www.javatpoint.com/xquery-add', 'https://www.javatpoint.com/xquery-xpath', 'https://www.javatpoint.com/xquery-add']",['https://static.javatpoint.com/xquery/images/xquery-syntax1.png'],[],"['XQuery Conditional Expressions', 'How to run', 'Execute XQuery against XML', 'XQuery Comparisons']",['Example'],[],"['XQuery Syntax Rules', ""Let's take an XML file 'books.xml' having the following data:"", 'The ""If-Then-Else"" conditional statement is allowed in XQuery.', 'XQuery statement:', 'XQueryTester.java', 'Put the above three files to a same location. We put them on desktop in a folder name XQuery6.', 'Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.', 'javac XQueryTester.java', 'java XQueryTester', 'There are two types for comparing values in XQuery.', 'Difference between general comparison and value comparison', 'It can be explained by an example. The following expression returns true if any q attributes have a value greater than 100.']","['Create a Java based XQuery executor program to read the books.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'The following expression returns true if there is only one q attribute returned by the expression, and its value is greater than 10. If more than one q is returned, an error occurs:']",[],"['<bookstore>', '<book category=""Romantic"">', '<title lang=""en"">If she loves me</title>', '<author>Ajeet Kumar</author>', '<year>2014</year>', '<price>150</price>', '</book>', '<book category=""children"">', '<title lang=""en"">Harry Potter</title>', '<author>J K. Rowling</author>', '<year>2005</year>', '<price>700</price>', '</book>', '<book category=""programming"">', '<title lang=""en"">Let\'s C</title>', '<author>Yashwant Kanetkar</author>', '<year>2003</year>', '<price>200</price>', '</book>', '</bookstore>', 'for $x in doc(""books.xml"")/bookstore/book', 'return if ($x/@category=""CHILDREN"")', 'then <child>{data($x/title)}</child>', 'else <adult>{data($x/title)}</adult>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""courses.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}', '$bookstore//book/@q > 100', '$bookstore//book/@q gt 100']",[],[],"['|||XQuery follows case-sensitivity.|||XQuery elements, attributes, and variables must be valid XML names.|||An XQuery string value can be in single or double quotes.|||An XQuery variable is defined with a $ followed by a name, for example:. $bookstore|||XQuery comments are delimited by (: and :), e.g. (: XQuery Comment :)|||&&&|||General Comparison: =, !=, <, <=, >, >=|||Value Comparison: eq, ne, lt, le, gt, ge|||']"
31,"['XQuery Add', 'Bookstore']","['XQuery Add is used for adding elements, attributes, HTML elements and text in the results from the input documents.']","['https://www.javatpoint.com/xquery-functions', 'https://www.javatpoint.com/xquery-syntax', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery8.zip', 'https://www.javatpoint.com/xquery-functions', 'https://www.javatpoint.com/xquery-syntax', 'https://www.javatpoint.com/xquery-functions']","['https://static.javatpoint.com/xquery/images/xquery-add.png', 'https://static.javatpoint.com/xquery/images/xquery-add2.png']",[],"['XQuery Add Example', 'XQuery Expression', 'Add HTML Elements and Text']",[],[],"[""Let's understand it by using an example."", 'Take an XML file named books.xml, having the following data.', 'Now this XQuery expression will return the title elements in the same manner as they are described in the input document. ', 'Now you can add your own elements and attributes to the result. ', 'If you want to add some HTML elements to the result, use the XQuery like this:']",[],"['books.xqy\n\r\nfor $x in doc(""books.xml"")/bookstore/book/title\r\norder by $x\r\nreturn $x\r\n\nNow this XQuery expression will return the title elements in the same manner as they are described in the input document. \nOutput:\n\nNow you can add your own elements and attributes to the result. \nAdd HTML Elements and Text\nIf you want to add some HTML elements to the result, use the XQuery like this:\nbook.xqy:\n\r\n\r\n\r\nBookstore\r\n\r\n{\r\nfor $x in doc(""books.xml"")/bookstore/book\r\norder by $x/title\r\nreturn {data($x/title)}. Category: {data($x/@category)}\r\n}\r\n\r\n\r\n\r\n\r\n\n\n\ndownload this example\n\n\nNext TopicXQuery Functions\n\n\n\n← prev\nnext →\n\n\n']","['Immortals of Meluha', 'Harry Potter', 'J K. Rowling', ""Let's C"", 'Yashwant Kanetkar', 'for $x in doc(""books.xml"")/bookstore/book/title', 'order by $x', 'return $x', 'Bookstore', 'for $x in doc(""books.xml"")/bookstore/book', 'order by $x/title', 'return {data($x/title)}. Category: {data($x/@category)}']",[],[],[]
32,['XQuery Functions'],"['XQuery 1.0, XPath 2.0, and XSLT 2.0 share the same functions library. ']","['https://www.javatpoint.com/xquery-sequences', 'https://www.javatpoint.com/xquery-add', 'https://www.javatpoint.com/xquery-sequences', 'https://www.javatpoint.com/xquery-add', 'https://www.javatpoint.com/xquery-sequences']",[],[],"['Accessor Functions', 'Error and Trace Functions\t', 'Numeric Values Functions', 'String Functions', 'Boolean Value Functions', 'Time and Date Function']",[],[],"['A list of different types of XQuery functions:', 'There is a lot of string functions used in XQuery but here we are using the selected one.', 'A list of commonly used string manipulation functions of XQuery:', 'There are a lot of time and date function supported in XQuery but here, we are providing the selected one.', ' A list of some commonly used date and time functions provided by XQuery:']","['Functions are specified with fn: prefix. For example: fn:string(). But fn: is the default prefix of the namespace, so you do not need to be prefix fn when function is called. ']",[],[],[],"['Index|||Name|||Description&&&1)|||fn:node-name(node)|||It is used to return the node-name of the argument node.&&&2)|||fn:nilled(node)|||It is used to return a Boolean value indicating whether the argument node is nil.&&&3)|||fn:data(item.item,...)|||It is used to take a sequence of items and return a sequence of atomic values.&&&4)|||fn:base-uri() fn:base-uri(node)|||It returns the value of the base-uri property of the current or specified node.&&&5)|||fn:document-uri(node)|||It returns the value of the document-uri property for the specified node.', 'Index|||Name|||Description&&&1)|||fn:error()  fn:error(error) fn:error(error,description) fn:error(error,description,error-object)|||Example: error(fn:qname(\'http://example.com/test\', \'err:toohigh\'), \'error: price is too high\')result: returns http://example.com/test#toohigh and the string ""error: price is too high"" to the external processing environment.&&&2)|||fn:trace(value,label)|||it is used to debug queries.', 'Index|||Name|||Description&&&1)|||fn:abs(num)||| It returns the absolute value of the argument.  For example: abs(3.14)Result: 3.14&&&2)|||fn:abs(num)|||It returns the absolute value of the argument For example: abs(3.14)Result: 3.14Example: abs(-3.14)Result: 3.14&&&3)|||fn:ceiling(num)|||It returns the smallest integer that is greater than the number argument For example: ceiling(3.14)Result: 4&&&4)|||fn:floor(num)||| It returns the largest integer that is not greater than the number argument For example: floor(3.14)Result: 3&&&5)|||fn:round(num)|||It is used to round of the number argument to the nearest integer For example: round(3.14)Result: 3&&&6)|||fn:round-half-to-even()|||Example: round-half-to-even(0.5)Result: 0Example: round-half-to-even(1.5)Result: 2Example: round-half-to-even(2.5)Result: 2', 'Index|||Name|||Description&&&1)|||string-length($string as xs:string) as xs:integer|||It returns the length of the string.&&&2)|||concat($input as xs:anyatomictype?) as xs:string|||It returns the concatenated string as output. &&&3)|||string-join($sequence as xs:string*, $delimiter as xs:string) as xs:string|||It returns the combination of items in a sequence separated by a delimiter.', 'Index|||Name|||Description&&&1)|||fn:boolean(arg)|||It is used to return a Boolean value for a number, string, or node-set.&&&2)|||fn:not(arg)|||It specifies that the argument is first reduced to a Boolean value by applying the Boolean() function. It returns true if the Boolean value is false, and false if the Boolean value is true.For example: not(true())Result: false&&&3)|||fn:true()||| It returns the Boolean value trueExample: true()Result: true&&&4)|||fn:false()|||It returns the Boolean value false For example: false()Result: false', 'Index|||Name|||Description&&&1)|||current-date()|||It is used to return the current date.&&&2)|||current-time()|||It is used to return the current time.&&&3)|||current-datetime()|||It is used to return both the current date and the current time.']",['|||Accessor Functions|||Error and Trace Functions|||Numeric Functions |||String Functions |||AnyURI Functions |||Boolean Functions |||Duration/Date/Time Functions|||QName Functions |||Node Functions |||Sequence Functions |||Context Functions|||']
33,['XQuery Sequences'],['XQuery sequences are used to specify an ordered collection of items. These items can be of similar or different types. '],"['https://www.javatpoint.com/xquery-sequence-functions', 'https://www.javatpoint.com/xquery-functions', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery7.zip', 'https://www.javatpoint.com/xquery-sequence-functions', 'https://www.javatpoint.com/xquery-functions', 'https://www.javatpoint.com/xquery-sequence-functions']","['https://static.javatpoint.com/xquery/images/xquery-sequences1.png', 'https://static.javatpoint.com/xquery/images/xquery-sequences2.png']",[],"['Creating a sequence', 'XQuery Expression for Index', 'How to run', 'Execute XQuery against XML', 'XQuery Expression for Index']",[],[],"['There are two ways to create items of sequence iterated one by one. ', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester', 'Follow the same procedure as above:']","['An XQuery sequence is created using parenthesis with strings inside quotes or double quotes or numbers. XML elements can also be used as the items of a sequence.', 'Create a Java based XQuery executor program to read the items.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'Put the above three files to a same location. We put them on desktop in a folder name XQuery7. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['let $items := (\'orange\', <apple/>, <fruit type=""juicy""/>, <vehicle type=""car"">sentro</vehicle>, 1,2,3,\'a\',\'b\',""abc"")', 'let $count := count($items)', '<result>', '<count>{$count}</count>', '<items>', '{', 'for $item in $items', 'return <item>{$item}</item>', '}', '</items>', '</result>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""items.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}', 'let $items := (1,2,3,4,5,6)', 'let $count := count($items)', '<result>', '<count>{$count}</count>', '<items>', '{', 'for $item in $items', 'return <item>{$item}</item>', '}', '</items>', '</result>']",[],[],['|||Using index|||Using values|||']
34,['XQuery Sequence Functions'],"[""Let's see the list of commonly used sequence functions provided by XQuery:""]","['https://www.javatpoint.com/xquery-string-functions', 'https://www.javatpoint.com/xquery-sequences', 'https://www.javatpoint.com/xquery-string-functions', 'https://www.javatpoint.com/xquery-sequences', 'https://www.javatpoint.com/xquery-string-functions']",[],[],[],[],[],[],[],[],[],[],['Index|||Name|||Descriptio'],[]
35,['String Functions'],['There is a lot of string functions used in XQuery but here we are using the selected one.'],"['https://www.javatpoint.com/xquery-string-length-function', 'https://www.javatpoint.com/xquery-sequence-functions', 'https://www.javatpoint.com/xquery-string-length-function', 'https://www.javatpoint.com/xquery-concat-function', 'https://www.javatpoint.com/xquery-string-join-function', 'https://www.javatpoint.com/xquery-string-length-function', 'https://www.javatpoint.com/xquery-sequence-functions', 'https://www.javatpoint.com/xquery-string-length-function']",[],[],[],[],[],['A list of commonly used string manipulation functions of XQuery:'],[],[],[],[],"['Index|||Name|||Description&&&1)|||string-length($string as xs:string) as xs:integer|||It returns the length of the string.&&&2)|||concat($input as xs:anyatomictype?) as xs:string|||It returns the concatenated string as output. &&&3)|||string-join($sequence as xs:string*, $delimiter as xs:string) as xs:string|||It returns the combination of items in a sequence separated by a delimiter.']",[]
36,['XQuery string-length() Function '],['The XQuery string-length function is used to get the length of a string.'],"['https://www.javatpoint.com/xquery-concat-function', 'https://www.javatpoint.com/xquery-string-functions', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery13.zip', 'https://www.javatpoint.com/xquery-concat-function', 'https://www.javatpoint.com/xquery-string-functions', 'https://www.javatpoint.com/xquery-concat-function']",['https://static.javatpoint.com/xquery/images/xquery-string-length-function1.png'],[],"['XQuery string-length Example', 'Execute XQuery against XML']",[],[],"['Parameter explanation:', '$string: It specifies the provided string.', 'XQuery Expression:', 'books.xqy:', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester', 'The above example specifies that the given string-length is 16. Space is treated as length character.']","['Let\'s take an example to demonstrate the usage of XQuery string-length function. Take an XQuery expression named ""books.xqy"", having the following code.', 'Create a Java based XQuery executor program to read the books.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'Put the above both files to a same location. We put them on desktop in a folder name XQuery13. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['string-length($string as xs:string) as xs:integer', 'let $bookTitle := ""Java Programming""', 'let $size := string-length($bookTitle)', '<result>', '<size>{$size}</size>', '</result>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""books.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],[]
37,['XQuery concat() Function'],['The XQuery concat function is used to concatenate various strings.'],"['https://www.javatpoint.com/xquery-string-join-function', 'https://www.javatpoint.com/xquery-string-length-function', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery14.zip', 'https://www.javatpoint.com/xquery-string-join-function', 'https://www.javatpoint.com/xquery-string-length-function', 'https://www.javatpoint.com/xquery-string-join-function']",['https://static.javatpoint.com/xquery/images/xquery-concat-function1.png'],[],"['XQuery concat Example', 'Execute XQuery against XML']",[],[],"['Parameter explanation:', '$input - It specifies one or more inputs separated by comma.', 'XQuery Expression:', 'books.xqy:', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester']","['Let\'s take an example to demonstrate the usage of XQuery concat function. Take an XQuery expression named ""books.xqy"", having the following code. It will concat the title and price from the given XQuery expression. ', 'Create a Java based XQuery executor program to read the books.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'Put the above both files to a same location. We put them on desktop in a folder name XQuery14. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['concat($input as xs:anyAtomicType?) as xs:string', 'let $bookTitle := ""Learn XQuery in 24 hours""', 'let $updatedTitle := concat($bookTitle,"",price: 200$"")', '<result>', '<title>{$updatedTitle}</title>', '</result>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""books.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],[]
38,['XQuery string-join() Function '],['The XQuery string-join function is used to concatenate various sequences separated by a given delimiter.'],"['https://www.javatpoint.com/xquery-time-and-date-function', 'https://www.javatpoint.com/xquery-concat-function', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery15.zip', 'https://www.javatpoint.com/xquery-time-and-date-function', 'https://www.javatpoint.com/xquery-concat-function', 'https://www.javatpoint.com/xquery-time-and-date-function']",['https://static.javatpoint.com/xquery/images/xquery-string-join-function1.png'],[],"['XQuery string-join Example', 'Execute XQuery against XML']",[],[],"['Parameter explanation:', '$sequence - It specifies the sequence of zero or more strings.', '$delimiter - It specifies the delimiter to separate the items of above sequence. ', 'XQuery Expression:', 'courses.xqy:', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester']","['Let\'s take an example to demonstrate the usage of XQuery string-join function. Take an XQuery expression named ""courses.xqy"", having the following code. It will concat all the given courses from the given XQuery expression. ', 'Create a Java based XQuery executor program to read the courses.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'Put the above both files to a same location. We put them on desktop in a folder name XQuery15. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['string-join($sequence as xs:string*, $delimiter as xs:string) as xs:string', 'let $courses :=', '<courses>', '<course>Java</course>', '<course>DotNet</course>', '<course>C/C++</course>', '<course>Oracle</course>', '</courses>', '<results>', '<courses>{', ""string-join($courses/course, ',')"", '}</courses>', '</results>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""courses.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],[]
39,['Time and Date Function'],"['There are a lot of time and date function supported in XQuery but here, we are providing the selected one.']","['https://www.javatpoint.com/xquery-current-date-function', 'https://www.javatpoint.com/xquery-string-join-function', 'https://www.javatpoint.com/xquery-current-date-function', 'https://www.javatpoint.com/xquery-current-time-function', 'https://www.javatpoint.com/xquery-current-datetime-function', 'https://www.javatpoint.com/xquery-current-date-function', 'https://www.javatpoint.com/xquery-string-join-function', 'https://www.javatpoint.com/xquery-current-date-function']",[],[],[],[],[],['A list of some commonly used date and time functions provided by XQuery:'],[],[],[],[],['Index|||Name|||Description&&&1)|||current-date()|||It is used to return the current date.&&&2)|||current-time()|||It is used to return the current time.&&&3)|||current-datetime()|||It is used to return both the current date and the current time.'],[]
40,['XQuery current-date() Function'],['The XQuery current date function is used to retrieve the current date. '],"['https://www.javatpoint.com/xquery-current-time-function', 'https://www.javatpoint.com/xquery-time-and-date-function', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery10.zip', 'https://www.javatpoint.com/xquery-current-time-function', 'https://www.javatpoint.com/xquery-time-and-date-function', 'https://www.javatpoint.com/xquery-current-time-function']",['https://static.javatpoint.com/xquery/images/xquery-current-date-function1.png'],[],"['XQuery current-date() Example', 'Execute XQuery against XML']",[],[],"['Use the following XQuery expression to fetch the current date.', 'current-date.xqy:', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester', 'Here, +5:30 specifies the relative GMT time of the server.']","['Create a Java based XQuery executor program to read the current-date.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed. ', 'Put the above both files to a same location. We put them on desktop in a folder name XQuery10. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['current-date()', 'let $date := current-date()', '{$date}', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""current-date.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],[]
41,['XQuery current-time() Function '],['The XQuery current-time function is used to retrieve the current time.'],"['https://www.javatpoint.com/xquery-current-datetime-function', 'https://www.javatpoint.com/xquery-current-date-function', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery11.zip', 'https://www.javatpoint.com/xquery-current-datetime-function', 'https://www.javatpoint.com/xquery-current-date-function', 'https://www.javatpoint.com/xquery-current-datetime-function']",['https://static.javatpoint.com/xquery/images/xquery-current-time-function1.png'],[],"['XQuery current-time() Example', 'Execute XQuery against XML']",[],[],"['Use the following XQuery expression to fetch the current time.', 'current-time.xqy:', 'XQueryTester.java', 'javac XQueryTester.java', 'java XQueryTester']","['Create a Java based XQuery executor program to read the current-time.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed. ', 'Put the above both files to a same location. We put them on desktop in a folder name XQuery11. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['current-time()', 'let $time := current-time()', '<results>', '<time>{$time}</time>', '</results>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""current-time.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],[]
42,['XQuery current-dateTime() Function '],['The XQuery current-date time() function is used to return the current date and time.'],"['https://www.javatpoint.com/xquery-if-then-else-statement', 'https://www.javatpoint.com/xquery-current-time-function', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery12.zip', 'https://www.javatpoint.com/xquery-if-then-else-statement', 'https://www.javatpoint.com/xquery-current-time-function', 'https://www.javatpoint.com/xquery-if-then-else-statement']",['https://static.javatpoint.com/xquery/images/xquery-current-date-time-function1.png'],[],"['XQuery current-dateTime() Example', 'Execute XQuery against XML']",[],[],"['Use the following XQuery expression to fetch the current date and time.', 'current-datetime.xqy:', 'XQueryTester.java', 'javac XQueryTester.java', ' java XQueryTester', 'The above example shows both date and time.']","['Create a Java based XQuery executor program to read the current-datetime.xqy, passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'Put the above both files to a same location. We put them on desktop in a folder name XQuery12. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.']",[],"['current-dateTime()', 'let $datetime := current-dateTime()', '<results>', '<datetime>{$datetime}</datetime>', '</results>', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""current-datetime.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],[]
43,['XQuery If Then Else Statement '],['The XQuery If Then Else statement is used to check the validity of the passing input values.'],"['https://www.javatpoint.com/xquery-regular-expressions', 'https://www.javatpoint.com/xquery-current-datetime-function', 'https://www.javatpoint.com/https://static.javatpoint.com/xquery/src/XQuery9.zip', 'https://www.javatpoint.com/xquery-regular-expressions', 'https://www.javatpoint.com/xquery-current-datetime-function', 'https://www.javatpoint.com/xquery-regular-expressions']",['https://static.javatpoint.com/xquery/images/xquery-if-then-else-statement1.png'],[],"['XQuery If Then Else Example', 'Execute XQuery against XML']",[],[],"['XML statementM', 'Xquery expression', 'books.xqy:', 'javac XQueryTester.java', 'java XQueryTester']",['Put the above three files to a same location. We put them on desktop in a folder name XQuery9. Compile XQueryTester.java using console. You must have JDK 1.5 or later installed on your computer and classpaths are configured.'],"[""Let's take an example to demonstrate the usage of if-then-else statement in XQuery. Take an XML file named books.xml and apply to it XQuery expression containing an if-then-else construct to retrieve the titles of those books where price is greater than 100.""]","['if (condition) then', '<?xml version=""1.0"" encoding=""UTF-8""?>', '<books>', '<book category=""JAVA"">', '<title lang=""en"">Learn Java Programming</title>', '<author>Sonoo Jaiswal</author>', '<year>2012</year>', '<price>400.00</price>', '</book>', '<book category=""DOTNET"">', '<title lang=""en"">DOTNET Fun</title>', '<author>Balaswamy</author>', '<year>2008</year>', '<price>300.50</price>', '</book>', '<book category=""XML"">', '<title lang=""en"">Learn XQuery in 1 month</title>', '<author>Ajeet Kumar</author>', '<author>Sam Lee</author>', '<year>2013</year>', '<price>250.00</price>', '</book>', '<book category=""XML"">', '<title lang=""en"">Learn XPath in 1 month</title>', '<author>Ajeet Kumar</author>', '<year>2014</year>', '<price>150.50</price>', '</book>', '</books>', '<result>', 'if(not(doc(""books.xml""))) then (', '<error>', '<message>books.xml does not exist</message>', '</error>', 'else (', 'for $x in doc(""books.xml"")/books/book', 'where $x/price>30', 'return $x/title', '</result>', 'Create a Java based XQuery executor program to read the books.xqy,', 'passes it to the XQuery expression processor, and executes the expression. After that the result will be displayed.', 'XQueryTester.java', 'import java.io.File;', 'import java.io.FileInputStream;', 'import java.io.FileNotFoundException;', 'import java.io.InputStream;', 'import javax.xml.xquery.XQConnection;', 'import javax.xml.xquery.XQDataSource;', 'import javax.xml.xquery.XQException;', 'import javax.xml.xquery.XQPreparedExpression;', 'import javax.xml.xquery.XQResultSequence;', 'import com.saxonica.xqj.SaxonXQDataSource;', 'public class XQueryTester {', 'public static void main(String[] args){', 'try {', 'execute();', '}', 'catch (FileNotFoundException e) {', 'e.printStackTrace();', '}', 'catch (XQException e) {', 'e.printStackTrace();', '}', 'private static void execute() throws FileNotFoundException, XQException{', 'InputStream inputStream = new FileInputStream(new File(""books.xqy""));', 'XQDataSource ds = new SaxonXQDataSource();', 'XQConnection conn = ds.getConnection();', 'XQPreparedExpression exp = conn.prepareExpression(inputStream);', 'XQResultSequence result = exp.executeQuery();', 'while (result.next()) {', 'System.out.println(result.getItemAsString(null));', '}']",[],[],[]
44,['XQuery Regular Expressions'],['A list of regular expression functions provided by XQuery:'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/xquery-if-then-else-statement', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/xquery-if-then-else-statement', 'https://www.javatpoint.com/#']",[],[],[],[],[],[],[],[],[],[],"['Index|||Name|||Description&&&1)|||matches($input, $regex)|||It returns true if the input matches with the provided regular expression.&&&2)|||replace($input, $regex, $string)|||It is used to replace the matched input string with given string.&&&3)|||tokenize($input, $regex)|||It is used to return a sequence of items matching the regular expression.']",[]
45,['XSLT Tutorial'],['XSLT tutorial provides basic and advanced concepts of XSLT. Our XSLT tutorial is designed for beginners and professionals.'],"['https://www.javatpoint.com/what-is-xslt', 'https://www.javatpoint.com/xslt-tutorial', 'https://www.javatpoint.com/what-is-xslt', 'https://www.javatpoint.com/xslt-syntax', 'https://www.javatpoint.com/xslt-xsl-value-of-element', 'https://www.javatpoint.com/xslt-xsl-for-each-element', 'https://www.javatpoint.com/xslt-xsl-sort-element', 'https://www.javatpoint.com/xslt-xsl-if-element', 'https://www.javatpoint.com/xslt-xsl-choose-element', 'https://www.javatpoint.com/xslt-xsl-key-element', 'https://www.javatpoint.com/xslt-xsl-message-element', 'https://www.javatpoint.com/xslt-xsl-apply-template-element', 'https://www.javatpoint.com/xslt-xsl-import-element', 'https://www.javatpoint.com/xslt-interview-questions', 'https://www.javatpoint.com/what-is-xslt', 'https://www.javatpoint.com/what-is-xslt']",['https://static.javatpoint.com/xslt/images/xslt-tutorial.png'],[],"['XSLT Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['XSL stands for EXtensible Stylesheet Language. XSLT is for Transformation of XML document to other formats.', 'XSLT Tutorial', 'Interview Questions', 'Before learning XSLT, you must have the basic knowledge of Computer Fundamental and HTML.', 'Our XSLT tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this XSLT tutorial. But if there is any mistake, please post the problem in contact form.']",[],"['Our XSLT tutorial includes all topics of Search Engine Optimization such as black and white XSLT techniques, how search engine works, XSLT market research, content research, On Page Optimization techniques, Off Page Optimization techniques, Social Media Optimization, XSLT Tools etc.']",[],[],[],['|||XSLT Tutorial|||What is XSLT|||XSLT Syntax|||XSLT xsl:value-of|||XSLT xsl:for-each|||XSLT xsl:sort|||XSLT xsl:if||||||XSLT xsl:choose|||XSLT xsl:key|||XSLT xsl:message|||XSLT xsl:apply-template|||XSLT xsl:import||||||XSLT Interview|||']
46,['What is XSLT'],"['Before XSLT, first we should learn about XSL. XSL stands for EXtensible Stylesheet Language. It is a styling language for XML just like CSS is a styling language for HTML.']","['https://www.javatpoint.com/xslt-syntax', 'https://www.javatpoint.com/xslt-tutorial', 'https://www.javatpoint.com/xslt-syntax', 'https://www.javatpoint.com/xslt-tutorial', 'https://www.javatpoint.com/xslt-syntax']",['https://static.javatpoint.com/xslt/images/what-is-xsltl1.png'],[],"['What is XSL', 'Main parts of XSL Document', 'How XSLT Works', 'Advantage of XSLT']",[],[],"['XSLT stands for XSL Transformation. It is used to transform XML documents into other formats (like transforming XML into HTML).', 'An XSL document specifies how a browser should render an XML document.', 'Image representation:', 'A list of advantages of using XSLT: ']","['In HTML documents, tags are predefined but in XML documents, tags are not predefined. World Wide Web Consortium (W3C) developed XSL to understand and style an XML document, which can act as XML based Stylesheet Language.']","['The XSLT stylesheet is written in XML format. It is used to define the transformation rules to be applied on the target XML document. The XSLT processor takes the XSLT stylesheet and applies the transformation rules on the target XML document and then it generates a formatted document in the form of XML, HTML, or text format. At the end it is used by XSLT formatter to generate the actual output and displayed on the end-user.']",[],[],[],"['|||XSLT: It is a language for transforming XML documents into various other types of documents.|||XPath: It is a language for navigating in XML documents.|||XQuery: It is a language for querying XML documents.|||XSL-FO: It is a language for formatting XML documents.||||||XSLT provides an easy way to merge XML data into presentation because it applies user defined transformations to an XML document and the output can be HTML, XML, or any other structured document.|||XSLT provides Xpath to locate elements/attribute within an XML document. So it is more convenient way to traverse an XML document rather than a traditional way, by using scripting language.|||XSLT is template based. So it is more resilient to changes in documents than low level DOM and SAX.|||By using XML and XSLT, the application UI script will look clean and will be easier to maintain.|||XSLT templates are based on XPath pattern which is very powerful in terms of performance to process the XML document.|||XSLT can be used as a validation language as it uses tree-pattern-matching approach.|||You can change the output simply modifying the transformations in XSL files.||||||Next TopicXSLT Syntax||||||||||||← prev|||next →|||||||||']"
47,['XSLT Syntax'],"[""Let's take an example to take a sample XML file and transform it into a well formatted HTML document.""]","['https://www.javatpoint.com/xslt-xsl-value-of-element', 'https://www.javatpoint.com/what-is-xslt', 'https://www.javatpoint.com/xslt-xsl-value-of-element', 'https://www.javatpoint.com/what-is-xslt', 'https://www.javatpoint.com/xslt-xsl-value-of-element']",['https://static.javatpoint.com/xslt/images/xslt-syntax1.png'],[],[],[],[],"['See this example:', 'Create an XML file named employee.xml, having the following code:', 'Employee.xml', 'Define an XSLT stylesheet document for the above XML document. You should follow the criteria give below:', 'Step1: Create XSLT document', 'Create the XSLT document which satisfies the above requirements. Name it as employee.xsl and save it in the same location of employee.xml.', 'Employee.xsl', 'Step2: List the XSLT document to the XML document', 'Update employee.xml document with the following xml-stylesheet tag. Set href value to employee.xsl ', 'Updated ""employee.xml""', 'Step3: View the XML document in Internet Explorer', 'The output will look like this:']",[],[],"['<?xml version = ""1.0""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<!-- xsl stylesheet declaration with xsl namespace:', 'Namespace tells the xlst processor about which', 'element is to be processed and which is used for output purpose only', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<!-- xsl template declaration:', 'template tells the xlst processor about the section of xml', 'document which is to be formatted. It takes an XPath expression.', 'In our case, it is matching document root element and will', 'tell processor to process the entire document with this template.', '<xsl:template match = ""/"">', '<!-- HTML tags', 'Used for formatting purpose. Processor will skip them and browser', 'will simply render them.', '-->', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""#9acd32"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<!-- for-each processing instruction', 'Looks for each element matching the XPath expression', '-->', '<xsl:for-each select=""class/employee"">', '<tr>', '<td>', '<!-- value-of processing instruction', 'process the value of the element matching the XPath expression', '-->', '<xsl:value-of select = ""@id""/>', '</td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '</class>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>']",[],[],"[""|||Page should have a title employee.|||Page should have a table of employee's details.|||Columns should have following headers: id, First Name, Last Name, Nick Name, Salary|||Table must contain details of the employees accordingly.|||""]"
48,['XSLT <xsl:value-of> Element'],"['The XSLT <xsl:value-of> element is used to extract the value of selected node. It puts the value of selected node as per XPath expression, as text.']","['https://www.javatpoint.com/xslt-xsl-for-each-element', 'https://www.javatpoint.com/xslt-xsl-apply-template-element', 'https://www.javatpoint.com/xslt-xsl-for-each-element', 'https://www.javatpoint.com/xslt-xsl-apply-template-element', 'https://www.javatpoint.com/xslt-xsl-for-each-element']",['https://static.javatpoint.com/xslt/images/xslt-xsl-value-of1.png'],[],"['Parameter explanation', 'XSLT <xsl:value-of> Element Example']",[],[],"['Employee.xml', 'Employee.xsl']","['Let\'s take an example to see the usage of XSLT <xsl:value-of> element with its attribute ""id"" and its child <firstname>, <lastname>, <nickname>, and <salary>.']",[],"['<xsl:value-of', 'select = Expression', 'disable-output-escaping = ""yes"" | ""no"">', '</xsl:value-of>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""purple"">', '<th>ID', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<!-- for-each processing instruction', 'Looks for each element matching the XPath expression', '-->', '<xsl:for-each select=""class/employee"">', '<tr>', '<td>', '<!-- value-of processing instruction', 'process the value of the element matching the XPath expression', '-->', '<xsl:value-of select = ""@id""/>', '</td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],"['Index|||Name|||Description&&&1)|||select|||It specifies the XPpath expression to be evaluated in current context.&&&2)|||disable-outputescaping|||Default-""no"". If ""yes"", output text will not escape XML characters from text.']",[]
49,['XSLT <xsl:for-each> Element '],['The XSLT <xsl:for-each> element is used to apply a template repeatedly for each node.'],"['https://www.javatpoint.com/xslt-xsl-sort-element', 'https://www.javatpoint.com/xslt-xsl-value-of-element', 'https://www.javatpoint.com/xslt-xsl-sort-element', 'https://www.javatpoint.com/xslt-xsl-value-of-element', 'https://www.javatpoint.com/xslt-xsl-sort-element']",['https://static.javatpoint.com/xslt/images/xslt-xsl-for-each-element1.png'],[],"['Parameter explanation', 'XSLT  Element Example']",[],[],"['Select: XPath Expression to be evaluated in current context to determine the set of nodes to be iterated.', 'Employee.xml', 'Employee.xsl']","['Let\'s take an example to creates a table of <employee> element with its attribute ""id"" and its child <firstname>,<lastname><nickname> and <salary> by iterating over each employee.']",[],"['<xsl:for-each', 'select = Expression>', '</xsl:for-each>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<!-- for-each processing instruction', 'Looks for each element matching the XPath expression', '-->', '<xsl:for-each select=""class/employee"">', '<tr>', '<td>', '<!-- value-of processing instruction', 'process the value of the element matching the XPath expression', '-->', '<xsl:value-of select = ""@id""/>', '</td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],[],[]
50,['XSLT <xsl:sort> Element'],['The XSLT <xsl:sort> element is used to specify a sort criteria on the nodes. It displays the output in sorted form. '],"['https://www.javatpoint.com/xslt-xsl-if-element', 'https://www.javatpoint.com/xslt-xsl-for-each-element', 'https://www.javatpoint.com/xslt-xsl-if-element', 'https://www.javatpoint.com/xslt-xsl-for-each-element', 'https://www.javatpoint.com/xslt-xsl-if-element']",['https://static.javatpoint.com/xslt/images/xsort.png'],[],"['Parameter explanation', 'XSLT <xsl:sort> Element Example']",[],[],"['The <xml:sort> element is added inside the <xsl:for-each> element in the XSL file, to sort the output. ', 'Employee.xml', 'Employee.xsl', 'Note: The above table is sorted by Last Name.']","['Let\'s take an example to create a table of <employee> element with its attribute ""id"" and its child <firstname> , <lastname> , <nickname> , and <salary> by iterating over each student sort them by last name.']",[],"['<xsl:sort', 'select = string-expression', 'lang = { nmtoken }', 'data-type = { ""text"" | ""number"" | QName }', 'order = { ""ascending"" | ""descending"" }', 'case-order = { ""upper-first"" | ""lower-first"" } >', '</xsl:sort>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<xsl:sort select = ""lastname""/>', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],"['Index|||Name|||Description&&&1)|||select|||It is used for sorting key of the node.&&&2)|||lang|||It specifies language alphabet used to determine sort order.&&&3)|||data-type|||It specifies data-type of the text. &&&4)|||order|||It is used to specify the sorting order. By default sorting order is ascending order.&&&5)|||case-order|||It is used to specify sorting order of string by capitalization. Default is ""upper-first"".']",[]
51,['XSLT <xsl:if> Element'],['The XSLT <xsl:if> element is used to specify a conditional test against the content of the XML file.'],"['https://www.javatpoint.com/xslt-xsl-choose-element', 'https://www.javatpoint.com/xslt-xsl-sort-element', 'https://www.javatpoint.com/xslt-xsl-choose-element', 'https://www.javatpoint.com/xslt-xsl-sort-element', 'https://www.javatpoint.com/xslt-xsl-choose-element']",['https://static.javatpoint.com/xslt/images/xslt-xsl-if-element1.png'],[],"['Parameter explanation', 'XSLT <xsl:if> Element Example']",[],[],"['test: It specifies a condition in xml data to test.', 'Employee.xml', 'Employee.xsl']",[],"['Let\'s take an example to create a table of  element with its attribute ""id"" and its child <firstname>, <lastname>, <nickname>, and <salary> by iterating over each employee. Let\'s take a condition which takes salary to be greater than 15000 and then prints the employee\'s details.']","['<xsl:if test=""expression"">', '...some output if the expression is true...', '</xsl:if>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee </h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<xsl:if test = ""salary > 30000"">', '<tr>>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:if>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],[],[]
52,['XSLT <xsl:choose> Element'],['The XSLT <xsl:choose> element is used to specify a multiple conditional test against the content of nodes with the <xsl:otherwise> and <xsl:when> elements.'],"['https://www.javatpoint.com/xslt-xsl-key-element', 'https://www.javatpoint.com/xslt-xsl-if-element', 'https://www.javatpoint.com/xslt-xsl-key-element', 'https://www.javatpoint.com/xslt-xsl-if-element', 'https://www.javatpoint.com/xslt-xsl-key-element']",['https://static.javatpoint.com/xslt/images/xslt-xsl-choose-element1.png'],[],"['Parameter explanation', 'XSLT <xsl:choose> Element Example']",[],[],"['test: It specifies a condition in xml data to test.', 'Employee.xml', 'Employee.xsl']","['Let\'s take an example to create a table of  element with its attribute ""id"" and its child <firstname>, <lastname>, <nickname>, and <salary> by iterating over each employee. It checks the salary and then prints the grade details.']",[],"['<xsl:choose>', '<xsl:when test=""expression"">', '... some output ...', '</xsl:when>', '<xsl:otherwise>', '... some output ....', '</xsl:otherwise>', '</xsl:choose>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '<th>Grade</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '', '<td>', '<xsl:choose>', '<xsl:when test = ""salary > 50000"">', 'High', '</xsl:when>', '', '<xsl:when test = ""salary > 40000"">', 'Medium', '</xsl:when>', '', '<xsl:otherwise>', 'Low', '</xsl:otherwise>', '</xsl:choose>', '</td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],[],[]
53,['XSLT <xsl:key> Element'],['The XSLT  element is used to specify a named name-value pair assigned to a specific element in an XML document. This key is used with the key() function in XPath expressions to access the assigned elements in an XML document.'],"['https://www.javatpoint.com/xslt-xsl-message-element', 'https://www.javatpoint.com/xslt-xsl-choose-element', 'https://www.javatpoint.com/xslt-xsl-message-element', 'https://www.javatpoint.com/xslt-xsl-choose-element', 'https://www.javatpoint.com/xslt-xsl-message-element']",['https://static.javatpoint.com/xslt/images/xslt-xsl-key-element1.png'],[],"['Parameter explanation', 'XSLT <xsl:key> Element Example']",[],[],"['Employee.xml', 'Employee.xsl']",[],"['Let\'s take an example to create a table of <employee> element with its attribute ""id""and its child <firstname>, <lastname>, <nickname>, and <salary> by iterating over each employee. This example checks key as firstname to be one of the employee\'s name and then prints the employee\'s details.']","['<xsl:key', 'name = QName', 'match = Pattern', 'use = Expression>', '</xsl:key>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>60000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sonam</firstname>', '<lastname>Gupta</lastname>', '<nickname>Vinni</nickname>', '<salary>45000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>20000</salary>', '</employee>', '</class>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:key name = ""firstname-search"" match = ""employee"" use = ""firstname""/>', '<xsl:template match = ""/"">', '<html>', '<body>>', '<h2> Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th> ID</th>', '<th>> First Name</th>', '<th> Last Name</th>', '<th> Nick Name</th>', '<th> Salary</th>', '</tr>>', '<xsl:for-each select = ""key(\'firstname-search\', \'Sonam\')"">', '<tr>', '<td> <xsl:value-of select = ""@id""/> </td>', '<td> <xsl:value-of select = ""firstname""/> </td>', '<td> <xsl:value-of select = ""lastname""/> ></td>', '<td> <xsl:value-of select = ""nickname""/> </td>', '<td> <xsl:value-of select = ""salary""/> </td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],['Index|||Name|||Description&&&1)|||Name|||It specifies the name of the key to be used.&&&2)|||Match|||It specifies that the pattern must be matched to a node that holds this key.&&&3)|||Use|||It specifies XPath expression to identify the value of the nodes of xml document.'],[]
54,['XSLT <xsl:message> Element'],['The XSLT <xsl:message> element is used to display the error message and help to debug the XSLT processing. It is similar to JavaScript alerts. This element buffers a message to XSLT processor which terminates the processing and sends a message to the caller application to show an error message.'],"['https://www.javatpoint.com/xslt-xsl-apply-template-element', 'https://www.javatpoint.com/xslt-xsl-key-element', 'https://www.javatpoint.com/xslt-xsl-apply-template-element', 'https://www.javatpoint.com/xslt-xsl-key-element', 'https://www.javatpoint.com/xslt-xsl-apply-template-element']","['https://static.javatpoint.com/xslt/images/xslt-xsl-message-element1.png', 'https://static.javatpoint.com/xslt/images/xslt-xsl-message-element2.png']",[],"['Parameter explanation', 'XSLT <xsl:message> Element Example']",[],[],"['Employee.xml', 'Employee.xsl', 'Employee.xsl']",[],"['Terminate: It specifies if the transformation should terminate upon executing this instruction or not. When the terminate attribute is set to ""yes"", the content of the element is displayed as the part of the system-level error message, and the transformation terminates. When it is set to ""no"", the transformation proceeds, ignoring the error message.\nBy default value is ?no?.', 'Let\'s take an example to create a <student> element with its attribute ""id"" and its child <firstname>, <lastname>, <nickname>, and <salary> by iterating over each employee. It checks key as firstname to be present and then prints the employee\'s details, otherwise displays an error message.']","['<xsl:message', 'terminate = ""yes"" | ""no"">', '</xsl:message>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname></firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<xsl:if test = ""firstname = \'\'"">', '<xsl:message terminate = ""yes"">A first name field is empty.', '</xsl:message>', '</xsl:if>', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<xsl:if test = ""firstname = \'\'"">', '<xsl:message terminate = ""no"">A first name field is empty.', '</xsl:message>', '</xsl:if>', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],[],[]
55,['XSLT <xsl:apply-template> Element'],['The XSLT <xsl:apply-template> element is used to tell XSLT processor to find the appropriate template to apply according to the type and context of each selected node. '],"['https://www.javatpoint.com/xslt-xsl-import-element', 'https://www.javatpoint.com/xslt-xsl-message-element', 'https://www.javatpoint.com/xslt-xsl-import-element', 'https://www.javatpoint.com/xslt-xsl-message-element', 'https://www.javatpoint.com/xslt-xsl-import-element']",['https://static.javatpoint.com/xslt/images/xslt-xsl-apply-template-element1.png'],[],"['Parameter explanation', 'XSLT <xsl:apply-template> Element Example']",[],[],"['Employee.xml', 'Employee.xsl']","['Let\'s take an example to create a list of <employee> element with its attribute ""id"" and its child <firstname>, <lastname>, <nickname>, and <salary> by iterating over each employee.']",[],"['<xsl:apply-template', 'select = Expression', 'mode = QName>', '</xsl:apply-template>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employees</h2>', '<xsl:apply-templates select = ""class/employee"" />', '</body>', '</html>', '</xsl:template>', '<xsl:template match = ""class/employee"">', '<xsl:apply-templates select = ""@id"" />', '<xsl:apply-templates select = ""firstname"" />', '<xsl:apply-templates select = ""lastname"" />', '<xsl:apply-templates select = ""nickname"" />', '<xsl:apply-templates select = ""salary"" />', '<br />', '</xsl:template>', '<xsl:template match = ""@id"">', '<span style = ""font-size = 25px;"">', '<xsl:value-of select = ""."" />', '</span>', '</xsl:template>', '<xsl:template match = ""firstname"">', 'First Name:<span style = ""color:brown;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '</xsl:template>', '<xsl:template match = ""lastname"">', 'Last Name:<span style = ""color:green;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '<</xsl:template>', '<xsl:template match = ""nickname"">', 'Nick Name:<span style = ""color:blue;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '</xsl:template>', '<xsl:template match = ""salary"">', 'Marks:<span style = ""color:red;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '</xsl:template>', '</xsl:stylesheet>']",[],"['Index|||Name|||Description&&&1)|||select|||It is used to process nodes selected by XPath expressions from the list of all nodes and its children.&&&2)|||mode|||It is used to allow an element as specified by its qualified names to be processed multiple times, each time producing a different result.']",[]
56,['XSLT <xsl:import> Element '],['The XSLT <xsl:import> element is used to import the content of one stylesheet to another stylesheet. The importing stylesheet has higher precedence over imported stylesheet.'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/xslt-xsl-apply-template-element', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/xslt-xsl-apply-template-element', 'https://www.javatpoint.com/3']",['https://static.javatpoint.com/xslt/images/xslt-xsl-import-element1.png'],[],"['Parameter explanation', 'XSLT <xsl:import> Element Example']",[],[],"['href: It is used to provide the path of xslt stylesheet to be imported.', 'Employee.xml', 'Employee.xsl', 'Employee_import.xsl:']",[],"['Let\'s take an example to create a list of <employee> element with its attribute ""id"" and its child <firstname>, <lastname>, <nickname>, and <salary> iterating over each employee. In this example, we have created two xsl stylesheets where employee_import.xsl stylesheet imports employee.xsl and employee.xml is linked to employee_import.xsl.']","['<xsl:import href = ""uri"">', '</xsl:import>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee_import.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:import href = ""employee.xsl""/>', '<xsl:template match = ""/"">', '<xsl:apply-imports/>', '</xsl:template>', '</xsl:stylesheet>']",[],[],[]
57,['XPath Tutorial'],['XPath tutorial provides basic and advanced concepts of XPath. Our XPath tutorial is designed for beginners and professionals.'],"['https://www.javatpoint.com/what-is-xpath', 'https://www.javatpoint.com/xpath-tutorial', 'https://www.javatpoint.com/what-is-xpath', 'https://www.javatpoint.com/xpath-expression', 'https://www.javatpoint.com/xpath-nodes', 'https://www.javatpoint.com/xpath-syntax', 'https://www.javatpoint.com/xpath-absolute-path', 'https://www.javatpoint.com/xpath-relative-path', 'https://www.javatpoint.com/xpath-axes', 'https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-boolean-operators', 'https://www.javatpoint.com/xpath-number-operators-functions', 'https://www.javatpoint.com/xpath-string-functions', 'https://www.javatpoint.com/xpath-node-functions', 'https://www.javatpoint.com/xpath-wildcard', 'https://www.javatpoint.com/xpath-predicate', 'https://www.javatpoint.com/xpath-interview-questions', 'https://www.javatpoint.com/what-is-xpath', 'https://www.javatpoint.com/what-is-xpath']",['https://static.javatpoint.com/xpath/images/what-is-xpath1.png'],[],"['XPath Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['XPath is a component of XSLT standard provided by W3C. It is used to traverse the elements and attributes of an XML document.', 'Our XPath tutorial includes all topics of XPath such as XPath syntax, expression, nodes, operators, axes, absolute path, relative path, wildcard etc.', 'XPath Tutorial', 'Interview Questions', 'Before learning XPath, you must have the basic knowledge of XML.', 'Our XPath tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this XPath tutorial. But if there is any mistake, please post the problem in contact form.']",[],[],[],[],[],['|||XPath Tutorial|||What is XPath|||XPath Expression|||XPath Nodes|||XPath Syntax|||XPath Absolute Path|||XPath Relative Path|||XPath Axes||||||XPath Operators|||1) XPath Comparison|||2) XPath Boolean|||3) XPath Number|||4) XPath String|||5) XPath Node|||XPath Wildcard|||XPath Predicate||||||XPath Interview|||']
58,['What is XPath'],['XPath is an important and core component of XSLT standard. It is used to traverse the elements and attributes in an XML document.'],"['https://www.javatpoint.com/xpath-expression', 'https://www.javatpoint.com/xpath-tutorial', 'https://www.javatpoint.com/xpath-expression', 'https://www.javatpoint.com/xpath-tutorial', 'https://www.javatpoint.com/xpath-expression']",['https://static.javatpoint.com/xpath/images/what-is-xpath1.png'],[],['Important features of XPath'],[],[],[],['XPath is a W3C recommendation. XPath provides different types of expressions to retrieve relevant information from the XML document. It is syntax for defining parts of an XML document.'],[],[],[],[],"['|||XPath defines structure: XPath is used to define the parts of an XML document i.e. element, attributes, text, namespace, processing-instruction, comment, and document nodes.|||XPath provides path expression: XPath provides powerful path expressions, select nodes, or list of nodes in XML documents.|||XPath is a core component of XSLT: XPath is a major element in XSLT standard and must be followed to work with XSLT documents.|||XPath is a standard function: XPath provides a rich library of standard functions to manipulate string values, numeric values, date and time comparison, node and QName manipulation, sequence manipulation, Boolean values etc.|||Path is W3C recommendation.|||']"
59,['XPath Expression'],['XPath defines a pattern or path expression to select nodes or node sets in an XML document. These patterns are used by XSLT to perform transformations. The path expressions look like very similar to the general expressions we used in traditional file system. '],"['https://www.javatpoint.com/xpath-nodes', 'https://www.javatpoint.com/what-is-xpath', 'https://www.javatpoint.com/xpath-nodes', 'https://www.javatpoint.com/what-is-xpath', 'https://www.javatpoint.com/xpath-nodes']","['https://static.javatpoint.com/xpath/images/xpath-expression1.png', 'https://static.javatpoint.com/xpath/images/xpath expression.png']",[],['XPath Expression Example'],[],[],"['XPath specifies seven types of nodes that can be output of the execution of the XPath expression.', 'We know that XPath uses a path expression to select node or a list of nodes from an XML document.', 'A list of useful paths and expression to select any node/ list of nodes from an XML document:', 'Employee.xml', 'Employee.xsl']",[],"['Let\'s take an example to see the usage of XPath expression. Here, we use an xml file ""employee.xml"" and a stylesheet for that xml file named ""employee.xsl"". The XSL file uses the XPath expressions under select attribute of various XSL tags to fetchvalues of id, firstname, lastname, nickname andsalary of each employee node.']","['<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Aryan</firstname>', '<lastname>Gupta</lastname>', '<nickname>Raju</nickname>', '<salary>30000</salary>', '</employee>', '<employee id = ""024"">', '<firstname>Sara</firstname>', '<lastname>Khan</lastname>', '<nickname>Zoya</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""056"">', '<firstname>Peter</firstname>', '<lastname>Symon</lastname>', '<nickname>John</nickname>', '<salary>10000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0"">', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2> Employees</h2>', '<table border = ""1>', '<tr bgcolor = ""pink"">', '<th> ID</th>', '<th> First Name</th>', '<th> Last Name</th>', '<th> Nick Name</th>', '<th> Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<tr>', '<td> <xsl:value-of select = ""@id""/> </td>', '<td> <xsl:value-of select = ""firstname""/> </td>', '<td> <xsl:value-of select = ""lastname""/> </td>', '<td> <xsl:value-of select = ""nickname""/> </td>', '<td> <xsl:value-of select = ""salary""/> </td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],"['Index|||Expression|||Description&&&1)|||node-name|||It is used to select all nodes with the given name ""nodename""&&&2)|||/|||It specifies that selection starts from the root node.&&&3)|||//|||It specifies that selection starts from the current node that match the selection.&&&4)|||.|||Select the current node.&&&5)|||..|||Select the parent of the current node.&&&6)|||@|||Selects attributes.&&&7)|||student|||Example - selects all nodes with the name ""student"".&&&8)|||class/student|||Example - selects all student elements that are children of class&&&9)|||//student|||Selects all student elements no matter where they are in the document']",['|||Root|||Element|||Text|||Attribute|||Comment|||Processing Instruction|||Namespace|||']
60,['XPath Nodes'],['There are seven kinds of nodes in XPath:'],"['https://www.javatpoint.com/xpath-syntax', 'https://www.javatpoint.com/xpath-expression', 'https://www.javatpoint.com/xpath-syntax', 'https://www.javatpoint.com/xpath-expression', 'https://www.javatpoint.com/xpath-syntax']",['https://static.javatpoint.com/xpath/images/xpath-nodes1.png'],[],"['Atomic values', 'Relationship of Nodes']",[],[],"['An XML document can be specified as a tree of nodes. The topmost element of the tree is called the root element.', ""Let's take an example of XML document to understand the different terminology of XPath nodes."", 'An XML document:', 'Nodes in the above XML document:', 'Atomic values are used to specify the nodes with no children or parent. For example: In the above XML document, following are the atomic values:', 'Chetan Bhagat', 'Parent Node', 'Each element and attribute has a parent which is a top element of the respective element or attribute.', 'See this example:', 'In this example, the book element is the parent of the title, author, year, and price.', 'Children Nodes', 'Siblings Nodes', 'The nodes having the same parent are known as siblings. In this example, the title, author, year, and price elements are all siblings.', 'Descendants']","['The children nodes can have zero, one or more children. In this example, the title, author, year, and price elements are all children of the book element.', ""A node's parent or parent's parent is specified as ancestor. In this example, the ancestors of the title element are the book element and the library element."", ""A descendent is specified as a node's children or children's children. In this example, descendants of the library element are the book, title, author, year, and price elements.""]",[],"['<?xml version=""1.0"" encoding=""UTF-8""?>', '<Library>', '<book>', '<title lang=""en"">Three Mistakes of My Life</title>', '<author>Chetan Bhagat</author>', '<year>2008</year>', '<price>110</price>', '</book>', '</Library>', '<library> (root element node)', '<author>Chetan Bhagat</author> (element node)', 'lang=""en"" (attribute node)', '<title lang=""en"">Three Mistakes of My Life</title>', '<author>Chetan Bhagat</author>', '<year>2008</year>', '<price>110</price>', '</book>', '<title lang=""en"">Three Mistakes of My Life</title>', '<author>Chetan Bhagat</author>', '<year>2008</year>', '<price>110</price>', '</book>', '<title lang=""en"">Three Mistakes of My Life</title>', '<author>Chetan Bhagat</author>', '<year>2008</year>', '<price>110</price>', '</book>', '<Library>', '<book>', '<title lang=""en"">Three Mistakes of My Life</title>', '<author>Chetan Bhagat</author>', '<year>2008</year>', '<price>110</price>', '</book>', '</Library>', '<Library>', '<book>', '<title lang=""en"">Three Mistakes of My Life</title>', '<author>Chetan Bhagat</author>', '<year>2008</year>', '<price>110</price>', '</book>', '</Library>']",[],[],['|||Element|||Attribute|||Text|||Namespace|||Processing-instruction|||Comment|||Document nodes.|||']
61,['XPath Syntax'],"['The XPath expression uses a path notation like URLs, for addressing parts of an XML document. The expression is evaluated to yield an object of the node-set, Boolean, number, or string type. For example, the expression book/author will return a node-set of the <author> elements contained in the <book> elements, if such elements are declared in the source XML document.']","['https://www.javatpoint.com/xpath-absolute-path', 'https://www.javatpoint.com/xpath-nodes', 'https://www.javatpoint.com/xpath-absolute-path', 'https://www.javatpoint.com/xpath-nodes', 'https://www.javatpoint.com/xpath-absolute-path']",[],[],"['Selecting Nodes', 'Predicates', 'Selecting Unknown Nodes', 'Selecting Several Paths']",[],[],"['In XPath, path expression is used to select nodes or node-sets in an XML document. The node is selected by following a path or steps. ', ""Let's take an example to see the syntax of XPath. Here, we take an XML document."", 'Path expressions used for selecting nodes are:', 'See the path expressions and their details in the above example:', 'Predicates are used to find a specific node or a node that contains a specific value.', 'Predicates are always embedded in square brackets.', 'In the table below we have listed some path expressions with predicates and the result of the expressions:', 'XPath wildcards are used to select unknown XML nodes. ', 'See this in above example:']","['The | operator is used in XPath expression to select several paths. From the above example, we have listed some path expressions and result of the expressions. ']",[],"['<?xml version=""1.0"" encoding=""UTF-8""?>', '<bookstore>', '<title lang=""en"">Three Mistakes of My Life</title>', '<price>110</price>', '</book>', '<title lang=""en"">Immortals of Meluha</title>', '<price>200</price>', '</book>', '</bookstore>']",[],"['Index|||Expression|||Description&&&1)|||nodename|||Selects all nodes with the name ""nodename""&&&2)|||/|||Selects from the root node.&&&3)|||//|||Selects nodes in the document from the current node that match the selection no matter where they are.&&&4)|||.|||Selects the current node&&&5)|||..|||Selects the parent of the current node&&&6)|||@|||Selects attributes', 'Path Expression|||Result&&&bookstore|||Selects all nodes with the name ""bookstore""&&&/bookstore|||Selects the root element bookstore. Note: if the path starts with a slash ( / ) it always represents an absolute path to an element!&&&bookstore/book|||Selects all book elements that are children of bookstore.&&&//book|||Selects all book elements no matter where they are in the document.&&&bookstore//book|||Selects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element.&&&//@lang|||Selects all attributes that are named lang.', 'Path Expression|||Result&&&/bookstore/book[1]|||Selects the first book element that is the child of the bookstore element. Note: In IE 5,6,7,8,9 first node is[0], but according to W3C, it is [1]. To solve this problem in IE, set the selectionlanguage to XPath:in JavaScript: xml.setProperty(""SelectionLanguage"",""XPath"");&&&/bookstore/book[last()]|||Selects the last book element that is the child of the bookstore element.&&&/bookstore/book[last()-1]|||Selects the last but one book element that is the child of the bookstore element.&&&/bookstore/book[position()<3]|||Selects the first two book elements that are children of the bookstore element.&&&//title[@lang]|||Selects all the title elements that have an attribute named lang.&&&//title[@lang=\'en\']|||Selects all the title elements that have a ""lang"" attribute with a value of ""en"".&&&/bookstore/book[price>100]|||Selects all the book elements of the bookstore element that have a price element with a value greater than 100&&&/bookstore/book[price>100]/title|||Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 100', 'Wildcard|||Description&&&*|||Matches any element node&&&@*|||Matches any attribute node&&&node()|||Matches any node of any kind', 'Path Expression|||Result&&&/bookstore/*|||Selects all the child element nodes of the bookstore element&&&//*|||Selects all elements in the document&&&//title[@*]|||Selects all title elements which have at least one attribute of any kind', 'Path Expression|||Result&&&//book/title | //book/price|||Selects all the title and price elements of all book elements&&&//title | //price|||Selects all the title and price elements in the document&&&/bookstore/book/title | //price|||Selects all the title elements of the book element of the bookstore element and all the price elements in the document']",[]
62,['XPath Absolute Path'],['There are two types of location paths used to specify the location of node in XML documents. These paths are absolute or relative path.'],"['https://www.javatpoint.com/xpath-relative-path', 'https://www.javatpoint.com/xpath-syntax', 'https://www.javatpoint.com/xpath-relative-path', 'https://www.javatpoint.com/xpath-syntax', 'https://www.javatpoint.com/xpath-relative-path']",['https://static.javatpoint.com/xpath/images/xpath-absolute-path1.png'],[],['XPath Absolute Path Example'],[],[],"[""An absolute path starts with root node or with '/'."", '/company/employee- It will select employee nodes within class root node.', '/company/employee/firstname? It will select firstname of an employee node within class root node.', 'Employee.xml', 'Employee.xsl']","[""Let's take an example locating the elements using absolute path. Create an XML document employee.xml and its stylesheet document employee.xsl which uses the XPath expressions.""]",[],"['<xsl:for-each select = ""/class/employee"">', '<p><xsl:value-of select = ""/class/employee/firstname""/></p>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0"">', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"" >', '<html>', '<body>', '<h3>Details of each Employee. </h3>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<tr>', '<td><xsl:value-of select = ""/class/employee[1]/@id""/></td>', '<td><xsl:value-of select = ""/class/employee[1]/firstname""/></td>', '<td><xsl:value-of select = ""/class/employee[1]/lastname""/></td>', '<td><xsl:value-of select = ""/class/employee[1]/nickname""/></td>', '<td><xsl:value-of select = ""/class/employee[1]/salary""/></td>', '</tr>', '<tr>', '<td><xsl:value-of select = ""/class/employee[2]/@id""/></td>', '<td><xsl:value-of select = ""/class/employee[2]/firstname""/></td>', '<td><xsl:value-of select = ""/class/employee[2]/lastname""/></td>', '<td><xsl:value-of select = ""/class/employee[2]/nickname""/></td>', '<td><xsl:value-of select = ""/class/employee[2]/salary""/></td>', '</tr>', '<tr>', '<td><xsl:value-of select = ""/class/employee[3]/@id""/></td>', '<td><xsl:value-of select = ""/class/employee[3]/firstname""/></td>', '<td><xsl:value-of select = ""/class/employee[3]/lastname""/></td>', '<td><xsl:value-of select = ""/class/employee[3]/nickname""/></td>', '<td><xsl:value-of select = ""/class/employee[3]/salary""/></td>', '</tr>', '<tr>', '<td><xsl:value-of select = ""/class/employee[4]/@id""/></td>', '<td><xsl:value-of select = ""/class/employee[4]/firstname""/></td>', '<td><xsl:value-of select = ""/class/employee[4]/lastname""/></td>', '<td><xsl:value-of select = ""/class/employee[4]/nickname""/></td>', '<td><xsl:value-of select = ""/class/employee[4]/salary""/></td>', '</tr>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],[],[]
63,['XPath Relative Path'],"[""A path is called relative path if it is started with the node that we've selected.""]","['https://www.javatpoint.com/xpath-axes', 'https://www.javatpoint.com/xpath-absolute-path', 'https://www.javatpoint.com/xpath-axes', 'https://www.javatpoint.com/xpath-absolute-path', 'https://www.javatpoint.com/xpath-axes']",['https://static.javatpoint.com/xpath/images/xpath-relative-path1.png'],[],['XPath Relative Path Example'],[],[],"['See this syntax which specifies locating the elements using relative path to employee node. ', 'Employee.xml', 'Employee.xsl']","[""Let's take an example locating the elements using absolute path. Create an XML document employee.xml and its stylesheet document employee.xsl which uses the XPath expressions.""]",[],"['<p><xsl:value-of select = ""firstname""/></p>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0"">', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h3>Details of each Employee.  </h3>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID </th>', '<th>First Name </th>', '<th>Last Name </th>', '<th>Nick Name </th>', '<th>Salary </th>', '</tr>', '<xsl:for-each select = ""/class/employee"">', '<tr>', '<td><xsl:value-of select = ""@id""/> </td>', '<td><xsl:value-of select = ""firstname""/> </td>', '<td><xsl:value-of select = ""lastname""/> </td>', '<td><xsl:value-of select = ""nickname""/> </td>', '<td><xsl:value-of select = ""salary""/> </td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],[],[]
64,['XPath Axes'],"['As we know that path defines the location of a node using absolute or relative path. In the same manner XPath axes are used to identify elements by their relationship like parent, child, sibling, etc. Axes refer to axis on which elements are lying relative to an element.']","['https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-relative-path', 'https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-relative-path', 'https://www.javatpoint.com/xpath-operators']",['https://static.javatpoint.com/xpath/images/xpath-axes1.png'],[],['XPath Axes Example'],[],[],"['A list of various Axis values:', 'Here the firstname is related to employee node of the XML document named employee.xml', 'Let\'s create an XML document named ""employee.xml"" and its stylesheet document named ""employee.xsl"" which uses the XPath expression.', 'Employee.xml', 'Employee.xsl']",[],[],"['<p><xsl:value-of select = ""firstname""/></p>', '<xsl:value-of select = ""/class/student/preceding-sibling::comment()""/>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0"">', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"" >', '<html>', '<body>', '<xsl:value-of select = ""/class/employee/preceding-sibling::comment()""/>', '<br/>', '<xsl:text>First Employee: </xsl:text>', '<xsl:value-of select = ""/class/employee/child::firstname"" />', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],"[""Index|||Axis|||Description&&&1)|||ancestor |||It specifies the ancestors of the current nodes which include the parents up to the root node.&&&2)|||ancestor-or-self|||It specifies the current node and its ancestors.&&&3)|||attribute|||It specifies the attributes of the current node.&&&4)|||child|||It specifies the children of the current node.&&&5)|||descendant|||It specifies the descendants of the current node i.e. the node's children up to the leaf node(no more children).&&&6)|||descendant-or-self|||It specifies the current node and it's descendants.&&&7)|||following|||It specifies all nodes that come after the current node.&&&8)|||following-sibling|||It specifies the following siblings of the context node. Siblings are at the same level as the current node and share it's parent.&&&9)|||namespace|||It specifies the namespace of the current node.&&&10)|||parent|||It specifies the parent of the current node.&&&11)|||preceding|||It specifies all nodes that come before the current node (i.e. before it's opening tag).&&&12)|||self|||It specifies the current node.""]",[]
65,['XPath Operators'],"['XPath defines operators and functions on nodes. An XPath expression returns either a node-set, a string, a Boolean, or a number. ']","['https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-axes', 'https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-boolean-operators', 'https://www.javatpoint.com/xpath-number-operators-functions', 'https://www.javatpoint.com/xpath-string-functions', 'https://www.javatpoint.com/xpath-node-functions', 'https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-axes', 'https://www.javatpoint.com/xpath-comparison-operators']",[],[],['Categorization of XPath Operators'],[],[],"['A list of operators used in XPath expression:', 'XPath operators can be categorized in different category according to their property. Following are the different types of XPath operators:']",[],[],[],[],"['Operator|||Description&&&||||It is used to computes two node-sets.&&&+|||Addition Operator&&&-|||Subtraction Operator&&&*|||Multiplication Operator&&&div|||Division Operator&&&=|||Equal Operator&&&!=|||Not Equal Operator &&&<|||Less than Operator&&&<=|||Less than or Equal to Operator&&&>|||Greater than Operator&&&>=|||Greater than or Equal to Operator&&&or|||Or Operator&&&and|||And Operator&&&mod|||Modulus (Division Remainder)', ""Index|||Operators/Functions|||Description&&&1)|||Comparison Operators|||Comparison operators are used to compare values.&&&2)|||Boolean Operators|||Boolean operators are used to check 'and', 'or' & 'not' functionalities.&&&3)|||Number Functions/Operators|||Operators/Functions on Numbers.&&&4)|||String Functions|||It specifies various string functions.&&&5)|||Node Functions/Operators|||It specifies various functions and operators acting on nodes.""]",[]
66,['XPath Operators'],"['XPath defines operators and functions on nodes. An XPath expression returns either a node-set, a string, a Boolean, or a number. ']","['https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-axes', 'https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-boolean-operators', 'https://www.javatpoint.com/xpath-number-operators-functions', 'https://www.javatpoint.com/xpath-string-functions', 'https://www.javatpoint.com/xpath-node-functions', 'https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-axes', 'https://www.javatpoint.com/xpath-comparison-operators']",[],[],['Categorization of XPath Operators'],[],[],"['A list of operators used in XPath expression:', 'XPath operators can be categorized in different category according to their property. Following are the different types of XPath operators:']",[],[],[],[],"['Operator|||Description&&&||||It is used to computes two node-sets.&&&+|||Addition Operator&&&-|||Subtraction Operator&&&*|||Multiplication Operator&&&div|||Division Operator&&&=|||Equal Operator&&&!=|||Not Equal Operator &&&<|||Less than Operator&&&<=|||Less than or Equal to Operator&&&>|||Greater than Operator&&&>=|||Greater than or Equal to Operator&&&or|||Or Operator&&&and|||And Operator&&&mod|||Modulus (Division Remainder)', ""Index|||Operators/Functions|||Description&&&1)|||Comparison Operators|||Comparison operators are used to compare values.&&&2)|||Boolean Operators|||Boolean operators are used to check 'and', 'or' & 'not' functionalities.&&&3)|||Number Functions/Operators|||Operators/Functions on Numbers.&&&4)|||String Functions|||It specifies various string functions.&&&5)|||Node Functions/Operators|||It specifies various functions and operators acting on nodes.""]",[]
67,['XPath Comparison Operators'],['A list of comparison operators used in XPath:'],"['https://www.javatpoint.com/xpath-boolean-operators', 'https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-boolean-operators', 'https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-boolean-operators']",['https://static.javatpoint.com/xpath/images/xpath-comparison-operators1.png'],[],['XPath Comparison Operator Example'],[],[],"['Employee.xml', 'Employee.xsl']",[],"[""Let's take an example to demonstrate the usage of comparison operator. Here, we create a table of  element with its attribute id and its child <firstname>,<lastname> <nickname> and <salary> by iterating over each employee. It checks salary to be greater than (>) 25000 and then prints the detail.""]","['<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<xsl:if test = ""salary > 25000"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:if>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],['Index|||Operator|||Description&&&1)|||=|||It specifies equals to&&&2)|||!=|||It specifies not equals to&&&3)|||<|||It specifies less than&&&4)|||>|||It specifies greater than&&&5)|||<=|||It specifies less than or equals to&&&6)|||>=|||It specifies greater than or equals to'],[]
68,['XPath Boolean Operators'],['A list of Boolean operators used in XPath expression.'],"['https://www.javatpoint.com/xpath-number-operators-functions', 'https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-number-operators-functions', 'https://www.javatpoint.com/xpath-comparison-operators', 'https://www.javatpoint.com/xpath-number-operators-functions']",['https://static.javatpoint.com/xpath/images/xpath-boolean-operators1.png'],[],['XPath Boolean Operator Example'],[],[],"['Employee.xml', 'Employee.xsl']","[""Let's take an example to create a table of  element with its attribute id and its child <firstname>,<lastname> <nickname> and <salary> . In this example, it checks id to be either 001 or 003 and then prints the details.""]",[],"['<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee[(@id = 001) or ((@id  =  003))]"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],['Index|||Operator|||Description&&&1)|||and|||It specifies that both conditions must be satisfied.&&&2)|||or|||It specifies that any one of the condition must be satisfied.&&&3)|||not()|||It specifies function to check condition not to be satisfied.'],[]
69,['XPath Number Operators/ Functions'],['A list of number operators that are used with XPath expressions:'],"['https://www.javatpoint.com/xpath-string-functions', 'https://www.javatpoint.com/xpath-boolean-operators', 'https://www.javatpoint.com/xpath-string-functions', 'https://www.javatpoint.com/xpath-boolean-operators', 'https://www.javatpoint.com/xpath-string-functions']",['https://static.javatpoint.com/xpath/images/xpath-number-operators-functions1.png'],[],['XPath Number Operators/ Functions Example'],[],[],"['A list of functions on numbers that are used with XPath expressions:', 'Employee.xml', 'Employee.xsl']","[""Let's take an example to create a table of <employee> element with its attribute id and its child <firstname>,<lastname> <nickname> and <salary>. It calculates salary of the employees and then displays the result.""]",[],"['<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '<th>Grade</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '<td>', '<xsl:choose>', '<xsl:when test = ""salary div 25000 > 1"">', 'High', '</xsl:when>', '<xsl:when test = ""salary div 20000 > 1"">', 'Medium', '</xsl:when>', '<xsl:otherwise>', 'Low', '</xsl:otherwise>', '</xsl:choose>', '</td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],"['Index|||Operator|||Description&&&1)|||+|||It is used for addition operation.&&&2)|||-|||It is used for subtraction operation.&&&3)|||*|||It is used for multiplication operation.&&&4)|||div|||It is used for division operation.&&&5)|||mod|||It is used for modulo operation', 'Index|||Function|||Description&&&1)|||ceiling()|||It is used to return the smallest integer larger than the value provided.&&&2)|||floor()||| It is used to return the largest integer smaller than the value provided.&&&3)|||round()||| It is used to return the rounded value to nearest integer.&&&4)|||sum()||| It is used to return the sum of two numbers.']",[]
70,['XPath String Functions'],['A list of XPath string functions:'],"['https://www.javatpoint.com/xpath-node-functions', 'https://www.javatpoint.com/xpath-number-operators-functions', 'https://www.javatpoint.com/xpath-node-functions', 'https://www.javatpoint.com/xpath-number-operators-functions', 'https://www.javatpoint.com/xpath-node-functions']",['https://static.javatpoint.com/xpath/images/xpath-string-function1.png'],[],['XPath String Function Example'],[],[],"['Example.xml', 'Example.xsl']",[],"[""Let's take an example to create a table of <employee> element with their names and length of names, by iterating over each employee. It calculates length of the employee name after concatenating firstname and lastname and then displays the employee details.""]","['<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>Name</th>', '<th>Length of Name</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<tr>', '<td><xsl:value-of select = ""concat(firstname,\' \',lastname)""/></td>', '<td><xsl:value-of select = ""string-length(concat(firstname,\' \',lastname))""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],"['Index|||Function|||Description&&&1)|||starts-with(string1, string2)|||It returns true when first string starts with the second string.&&&2)|||contains(string1, string2)|||It returns true when the first string contains the second string.&&&3)|||substring(string, offset, length?)|||It returns a section of the string. The section starts at offset up to the length provided.&&&4)|||substring-before(string1, string2)|||It returns the part of string1 up before the first occurrence of string2.&&&5)|||substring-after(string1, string2)|||It returns the part of string1 after the first occurrence of string2.&&&6)|||string-length(string)|||It returns the length of string in terms of characters.&&&7)|||normalize-space(string)|||It trims the leading and trailing space from string.&&&8)|||translate(string1, string2, string3)|||It returns string1 after any matching characters in string2 have been replaced by the characters in string3.&&&9)|||concat(string1, string2, ...)|||It is used to concatenate all strings.&&&10)|||format-number(number1, string1, string2)|||It returns a formatted version of number1 after applying string1 as a format string. String2 is an optional locale string.']",[]
71,['XPath Node Functions'],['A list of operators on nodes to be used with the XPath expression:'],"['https://www.javatpoint.com/xpath-wildcard', 'https://www.javatpoint.com/xpath-string-functions', 'https://www.javatpoint.com/xpath-wildcard', 'https://www.javatpoint.com/xpath-string-functions', 'https://www.javatpoint.com/xpath-wildcard']",['https://static.javatpoint.com/xpath/images/xpath-nodes-function1.png'],[],['XPath Node Function Example'],[],[],"['A list of functions on nodes to be used with the XPath expression:', 'Employee.xml:', 'Employee.xsl:']","[""Let's take an example to create a table of <employee> element with their details, by iterating over each employee. It calculates the position of the student node then displays details of the employee with serial number.""]",[],"['<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<class>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>Serial No</th>', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""class/employee"">', '<tr>', '<td><xsl:value-of select = ""position()""/></td>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],"['Index|||Operator|||Description&&&1)|||/|||It is used to select node under a specific node.&&&2)|||//|||It is used to select node from root node.&&&3)|||[...]|||It is used to check node value.&&&4)|||||||It is used for union of two node sets.', 'Index|||Function|||Description&&&1)|||node()|||It is used to select all kinds of nodes.&&&2)|||processing-instruction()||| It is used to select nodes which are processing instruction.&&&3)|||text()||| It is used to select a text node.&&&4)|||name()||| It is used to provide the name of the node.&&&5)|||position()||| It is used to provide the position of the node.&&&6)|||last()||| It is used to select the last node relative to current node;&&&7)|||comment()||| It is used to select nodes which are comments.']",[]
72,['XPath Wildcard'],['A list of XPath wildcards which are used with the XPath expressions.'],"['https://www.javatpoint.com/xpath-predicate', 'https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-predicate', 'https://www.javatpoint.com/xpath-operators', 'https://www.javatpoint.com/xpath-predicate']",['https://static.javatpoint.com/xpath/images/xpath-wildcard1.png'],[],['XPath Wildcard Example'],[],[],"[""Let's take an example to create a table of <employee> element with their detail, by iterating over each employee. "", 'Employee.xml', 'Employee.xsl']",[],[],"['<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0"">', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee </h2>', '<xsl:apply-templates select = ""class/*"" />', '</body>', '</html>', '</xsl:template>', '<xsl:template match = ""class/*"">', '<xsl:apply-templates select = ""@id"" />', '<xsl:apply-templates select = ""firstname"" />', '<xsl:apply-templates select = ""lastname"" />', '<xsl:apply-templates select = ""nickname"" />', '<xsl:apply-templates select = ""salary"" />', '<br />', '</xsl:template>', '<xsl:template match = ""@id"">', '<span style = ""font-size = 22px;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '</xsl:template>', '<xsl:template match = ""firstname"">', 'First Name: <span style = ""color:blue;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '</xsl:template>', '<xsl:template match = ""lastname"">', 'Last Name: <span style = ""color:green;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '</xsl:template>', '<xsl:template match = ""nickname"">', 'Nick Name: <span style = ""color:red;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '</xsl:template>', '<xsl:template match = ""salary"">', 'Salary: <span style = ""color:brown;"">', '<xsl:value-of select = ""."" />', '</span>', '<br />', '</xsl:template>', '</xsl:stylesheet>']",[],['Index|||Wildcard|||Expression&&&1)|||*|||It is used to match any node.&&&2)|||.|||It is used to match the current node in context.&&&3)|||@*|||It is used to match any attribute.&&&4)|||node()|||It is used to match node of any type.'],[]
73,['XPath Predicate'],"['Predicate specifies XPath expressions written in square bracket. It is used to restrict the selected nodes in a node set for some conditions. See the use of predicate in the ""employee"" example.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/xpath-wildcard', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/xpath-wildcard', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/xpath/images/xpath-predicate1.png'],[],['XPath Predicate Example'],[],[],"['Employee.xml', 'Employee.xml', 'Employee.xsl', 'Note:In the above example, you can see that all four queries are fetched.']","[""Let's take an example to create a table of <employee> element with their details, by iterating over each employee. This example uses predicate to calculate the position of the employee node and then print the employee details.""]",[],"['<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0""?>', '<?xml-stylesheet type = ""text/xsl"" href = ""employee.xsl""?>', '<employee id = ""001"">', '<firstname>Abhiram</firstname>', '<lastname>Kushwaha</lastname>', '<nickname>Manoj</nickname>', '<salary>15000</salary>', '</employee>', '<employee id = ""002"">', '<firstname>Akash</firstname>', '<lastname>Singh</lastname>', '<nickname>Bunty</nickname>', '<salary>25000</salary>', '</employee>', '<employee id = ""003"">', '<firstname>Brijesh</firstname>', '<lastname>Kaushik</lastname>', '<nickname>Ballu</nickname>', '<salary>20000</salary>', '</employee>', '<employee id = ""004"">', '<firstname>Zoya</firstname>', '<lastname>Mansoori</lastname>', '<nickname>Sonam</nickname>', '<salary>30000</salary>', '</employee>', '</class>', '<?xml version = ""1.0"" encoding = ""UTF-8""?>', '<xsl:stylesheet version = ""1.0""', 'xmlns:xsl = ""http://www.w3.org/1999/XSL/Transform"">', '<xsl:template match = ""/"">', '<html>', '<body>', '<h2>Employee</h2>', '<table border = ""1"">', '<tr bgcolor = ""pink"">', '<th>ID</th>', '<th>First Name</th>', '<th>Last Name</th>', '<th>Nick Name</th>', '<th>Salary</th>', '</tr>', '<xsl:for-each select = ""/class/employee[1]"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '<xsl:for-each select = ""/class/employee[last()]"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '<xsl:for-each select = ""/class/employee[@id = 002]"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '<xsl:for-each select = ""/class/employee[salary > 10000]"">', '<tr>', '<td><xsl:value-of select = ""@id""/></td>', '<td><xsl:value-of select = ""firstname""/></td>', '<td><xsl:value-of select = ""lastname""/></td>', '<td><xsl:value-of select = ""nickname""/></td>', '<td><xsl:value-of select = ""salary""/></td>', '</tr>', '</xsl:for-each>', '</table>', '</body>', '</html>', '</xsl:template>', '</xsl:stylesheet>']",[],['Index|||Predicate|||Description&&&1)|||/class/employee[1]|||It will select first employee element which is child of the class element.&&&2)|||/class/employee[last()]|||It will select last employee element which is child of the class element.&&&3)|||/class/employee[@id = 002]|||It will select employee element where id is 002.&&&4)|||/class/salary[salary > 10000]|||It will select employee element where salary is greater than 10000.'],[]
