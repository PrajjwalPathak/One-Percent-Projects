,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['Go Language Tutorial'],['Go tutorial provides basic and advanced concepts of Go programming. Our Go language tutorial is designed for beginners and professionals both.'],"['https://www.javatpoint.com/go-installation', 'https://www.javatpoint.com/go-tutorial', 'https://www.javatpoint.com/go-installation', 'https://www.javatpoint.com/go-hello-world-example', 'https://www.javatpoint.com/go-data-types', 'https://www.javatpoint.com/go-package-import-visibility', 'https://www.javatpoint.com/go-if-else', 'https://www.javatpoint.com/go-switch', 'https://www.javatpoint.com/go-for', 'https://www.javatpoint.com/go-for-range', 'https://www.javatpoint.com/go-goto', 'https://www.javatpoint.com/go-break', 'https://www.javatpoint.com/go-continue', 'https://www.javatpoint.com/go-comments', 'https://www.javatpoint.com/go-constants', 'https://www.javatpoint.com/go-type-casting', 'https://www.javatpoint.com/go-functions', 'https://www.javatpoint.com/go-recursion', 'https://www.javatpoint.com/go-closure', 'https://www.javatpoint.com/go-array', 'https://www.javatpoint.com/go-slice', 'https://www.javatpoint.com/go-command-line-arguments', 'https://www.javatpoint.com/go-string', 'https://www.javatpoint.com/go-regex', 'https://www.javatpoint.com/go-struct', 'https://www.javatpoint.com/go-interface', 'https://www.javatpoint.com/go-pointer', 'https://www.javatpoint.com/go-reflect', 'https://www.javatpoint.com/go-rune', 'https://www.javatpoint.com/go-map', 'https://www.javatpoint.com/go-error', 'https://www.javatpoint.com/go-recover', 'https://www.javatpoint.com/go-defer', 'https://www.javatpoint.com/go-panic', 'https://www.javatpoint.com/go-concurrency', 'https://www.javatpoint.com/go-race', 'https://www.javatpoint.com/go-mutex', 'https://www.javatpoint.com/go-atomic-variable', 'https://www.javatpoint.com/go-channel', 'https://www.javatpoint.com/go-worker-pools', 'https://www.javatpoint.com/go-time', 'https://www.javatpoint.com/go-epoch', 'https://www.javatpoint.com/go-tickers', 'https://www.javatpoint.com/go-file-io', 'https://www.javatpoint.com/go-http-server', 'https://www.javatpoint.com/go-url-parsing', 'https://www.javatpoint.com/go-rest-api', 'https://www.javatpoint.com/go-base64-encoding', 'https://www.javatpoint.com/go-random-number', 'https://www.javatpoint.com/go-sorting', 'https://www.javatpoint.com/go-json', 'https://www.javatpoint.com/go-programming-interview-questions', 'https://www.javatpoint.com/go-installation', 'https://www.javatpoint.com/go-installation']",['https://static.javatpoint.com/go/images/go-tutorial.jpg'],[],"['Go Language Introduction', 'Go Example', 'Go Language Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['Go is a programming language which is developed by Google with the vision of fast development and high performance. ', 'The basic structure of a Go programs consists of following parts:-', ""Let's see a simple example of Go programming language."", 'A complete explanation of ""Go Hello World example"" is given in next pages.', 'Go Language', 'Go Controls', 'Go Functions', 'Go Strings', 'Go Concurrency', 'Interview Questions', 'To learn Go, you must have the basic knowledge of C programming.', 'Our Go Tutorial is designed to help beginners and professionals both.', 'You will not find any problem in this Go tutorial. However, if there is any mistake, please post the problem in the contact form.']",[],"['Our Go Tutorial includes all topics of Go language such as what is go, how to install go, go if-else, go for, go for-range, go break, go continue, go struct, go interface, go ruin, go map, go string, go array, go http server, go rest api, go mutex etc.', 'Go is a programming language which is developed by Google in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson. Go is a statically-typed language. Go has a similar syntax to C. It is developed with the vision of high performance and fast development. Go provides type safety, garbage collection, dynamic-typing capability, many advanced built-in types such as variable length arrays and key-value maps etc.']","['package main', 'import ""fmt""', 'func main() {', 'fmt.Println(""Hello, World"")']","['Hello, World']",[],"['||| Go is modern, fast and comes with a powerful standard library.|||Go has built-in concurrency.|||Go uses interfaces as the building blocks of code reusability.||||||Package Declaration|||Import Packages|||Variables|||Statements and Expressions|||Functions|||Comments||||||Go Tutorial|||Go Installation|||Go Hello World|||Go Data Types|||Go Package||||||Go if-else|||Go Switch|||Go For|||Go For Range|||Go Goto|||Go Break|||Go Continue|||Go Comments|||Go Constants|||Go Type Casting||||||Go Functions|||Go Recursion|||Go Closure||||||Go Array|||Go Slice|||Go Command Args||||||Go String|||Go Regex||||||Go Struct|||Go Interface|||Go Pointer|||Go Reflect|||Go Rune||||||Go Map||||||Go Error|||Go Recover|||Go Defer|||Go Panic||||||Go Concurrency|||Go Race|||Go Mutex|||Go Atomic Variable|||Go Channel|||Go Worker Pools||||||Go Time|||Go Epoch|||Go Tickers||||||Go File I/O|||Go HTTP Server|||Go URL Parsing|||Go Rest API|||Go Base64 Encoding|||Go Random Number|||Go Sorting|||Go JSON||||||Go Interview Questions|||']"
1,['Go Installation'],"['You can install Go programming on different operating systems like Windows, Linux, Mac etc. This is a link of binary distribution of the Go programming for FreeBSD (release 8-STABLE and above), Linux, Mac OS X (10.8 and above), and Windows operating systems for the 32-bit (386) and 64-bit (amd64) architectures.']","['https://www.javatpoint.com/go-hello-world-example', 'https://www.javatpoint.com/what-is-go', 'https://www.javatpoint.com/go-hello-world-example', 'https://www.javatpoint.com/what-is-go', 'https://www.javatpoint.com/go-hello-world-example']","['https://static.javatpoint.com/go/images/go-installation1.png', 'https://static.javatpoint.com/go/images/go-installation2.png', 'https://static.javatpoint.com/go/images/go-installation3.png', 'https://static.javatpoint.com/go/images/go-installation4.png', 'https://static.javatpoint.com/go/images/go-installation5.png']",[],[],"['In Linux', 'In Windows', 'In Mac OS X ']",[],"['If you do not found configuration of your combination, try installing from source or installing gccgo instead of gc.', 'Go Installation in Ubuntu', 'Step 1: Run the command sudo apt-get install golang', ""Step 2: Press 'y' when you asked"", 'Now, Go installation is done, You can check the version by the command: go version.']",[],[],"['tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz', 'export PATH=$PATH:/usr/local/go/bin']",[],[],"['|||We should choose the required archive file for installation. For Example, if we are installing Go version 1.6.1 for 64-bit x86 on Linux, the archive would be go1.2.1.linux-amd64.tar.gz.|||Now download the archive and extract it in /usr/local directory. We need to create a Go tree in /usr/local/go directory through following command:||||||To set path, add /usr/local/go/bin to the PATH environment variable. We can do this by adding following line to the command line:||||||Choose the required archive file for Windows installation.|||Download zip file and extract it into the directory (Like c:\\Go).|||If you have choosed a different directory other than c:\\Go, you must set the GOROOT environment variable to your chosen path.|||Add the bin subdirectory of your Go root (for example, c:\\Go\\bin) to your PATH environment variable.||||||Choose the required archive file for Mac installation.|||Open the downloaded package file, and follow the prompts to install the Go tools. The package installs the Go distribution to /usr/local/go.|||The package should locate the /usr/local/go/bin directory to your PATH environment variable. You may need to restart the opened terminal sessions to make the change.|||']"
2,['Go Hello World Example'],['Output:'],"['https://www.javatpoint.com/go-data-types', 'https://www.javatpoint.com/go-installation', 'https://www.javatpoint.com/go-data-types', 'https://www.javatpoint.com/go-installation', 'https://www.javatpoint.com/go-data-types']",[],[],[],['How to run Go program:'],[],"['The First line is the package deceleration, here the name of the package is main. Package deceleration is mandatory for all the go programs.', 'The next line is an import statement, here we are importing ""fmt"". The compiler will include the files of the package fmt.', 'The next line is a main() function, all execution begins with the main function.', 'The next line fmt.Println(...) is a function available in Go. This function will print the message ""Hello, World"" on the screen.', 'We have saved the program as Hello.go. To run the program, open the command prompt and write:']",[],[],"['package main', 'import ""fmt""', 'func main() {', 'fmt.Println(""Hello, World"")', 'go run Hello.go']","['Hello, World', 'Hello, World']",[],[]
3,['Go Data Types'],"['Variables can be of different types like int, float, struct, slice or it can be of the interface.']","['https://www.javatpoint.com/go-package-import-visibility', 'https://www.javatpoint.com/go-hello-world-example', 'https://www.javatpoint.com/go-package-import-visibility', 'https://www.javatpoint.com/go-hello-world-example', 'https://www.javatpoint.com/go-package-import-visibility']",[],[],['Go Construct and Data Types'],[],[],"['The general form for declaring a variable uses the keyword var:', 'GO Simple Data Type Example', 'Go file has a name or an identifier which is case sensitive like C. ', 'For example: a, ax123, i etc.', 'The _ identifier is special. It is called blank identifier. It may be used in variable declarations.', 'It is like normal identifiers but its value is discarded, so it cannot be used anymore in the code.', 'It may happen that the variable, type, or function has no name and even enhance flexibility so it is called anonymous. ', 'These are the 25 keywords for Go-code:', 'Programs consist of keywords, constants, variables, operators, types and functions.', 'The following delimiters are used in constructs such as parentheses ( ), brackets [ ] and braces { }.', 'The following punctuation characters . , ; : and ... are used.']","['when a variable is declared with var it automatically initializes it to the zero-value defined for its type. A type defines the set of values and the set of operations that can take place on those values.', 'The Go source code is stored in .go file. The name of the file consists of lowercase letters. If the file name has several parts, it should be separated by underscore ""_"" .']",[],"['var identifier type', 'var a int', 'var b bool', 'var str string', 'package main', 'import ""fmt""', 'func main() {', 'var i int', 'var f float64', 'var b bool', 'var s string', 'fmt.Printf(""%T %T %T %T\\n"",i,f,b,s) // Prints type of the variable', 'fmt.Printf(""%v   %v      %v  %q     \\n"", i, f, b, s) //prints initial value of the variable']","['int float64 bool string\n0   0           false  """"']","['break|||default|||func|||interface|||select&&&case|||defer|||go|||map|||struct&&&chan|||else|||goto|||package|||switch&&&const|||fallthrough|||If|||range|||type&&&continue|||for|||import|||return|||var', 'append|||bool|||byte|||cap|||close|||complex|||complex64|||complex128|||uint16&&&copy|||false|||float32|||float64|||imag|||int|||int8|||int16|||uint32&&&int32|||int64|||iota|||len|||make|||new|||nil|||panic|||uint64&&&print|||println|||real|||recover|||string|||true|||uint|||uint8|||Uintptr']",[]
4,"['Go Package, import and visibility']","['Packages are used to categorize our program so that it can be easy to maintain. Every go-file belongs to some package. Each Go application must have ""main"" package so that it can be compiled. ']","['https://www.javatpoint.com/go-if-else', 'https://www.javatpoint.com/go-data-types', 'https://www.javatpoint.com/go-if-else', 'https://www.javatpoint.com/go-data-types', 'https://www.javatpoint.com/go-if-else']",[],[],"['Packages', 'Import', 'Visibility']",[],[],"['An application can consist of different packages. Many different .go file can belong to one main package. ', 'We can save Go program by any name but it must have main package. The package name should be written in lowercase letters.', 'If a package is changed and recompiled, all the client programs that use this package must be recompiled too!', 'A Go program is linked to different packages through the import keyword.', 'We can import multiple packages by a separate statement like:', 'We can also use shorter way like : ', 'It can be even shorter:', 'An identifier can be variable, constant, function, type or struct field. We can declare identifier in lowercase or uppercase letters. ', 'The dot . Operator is used to access the identifier e.g. pack.Age where pack is the package name and Age is the identifier.']","['The package names are enclosed within double quotes """". Import loads the public declarations from the compiled package, it does not insert the source code.', 'If we declare identifier in lowercase letter, it will be visible within the package only. But if we declare package in uppercase letter, it will be visible within and outside the package which is also known as exported.']",[],"['import ""fmt""', 'import ""os""', 'import ""fmt""; import ""os""', 'import (', '""fmt""', 'import(""fmt""; ""os""']",[],[],[]
5,['Go If'],"['The if statement in Go is used to test the condition. If it evaluates to true, the body of the statement is executed. If it evaluates to false, if block is skipped.']","['https://www.javatpoint.com/go-switch', 'https://www.javatpoint.com/go-package-import-visibility', 'https://www.javatpoint.com/go-switch', 'https://www.javatpoint.com/go-package-import-visibility', 'https://www.javatpoint.com/go-switch']",[],[],"['Go if-else', 'Go If else-if chain', 'Go Nested if-else']",[],[],"['Go if example', 'The if-else is used to test the condition. If condition is true, if block is executed otherwise else block is executed.', 'Go if-else example', 'Go If-else example: with input from user', 'The Go if else-if chain is used to execute one statement from multiple conditions. ', 'We can have N numbers of if-else statement. It has no limit. ', 'Go If else-if chain Example', 'We can also nest the if-else statement to execute one statement from multiple conditions.', 'nested if-else example']",['The curly braces{ } are mandatory in if-else statement even if you have one statement in it. The else-if and else keyword must be on the same line after the closing curly brace }.'],[],"['if(boolean_expression) {', '/* statement(s) got executed only if the expression results in true */', 'package main', 'import ""fmt""', 'func main() {', '/* local variable definition */', 'var a int = 10', '/* check the boolean condition using if statement */', 'if( a % 2==0 ) {      /* if condition is true then print the following', '*/ fmt.Printf(""a is even number"" )', 'if(boolean_expression) {', '/* statement(s) got executed only if the expression results in true */', '} else {', '/* statement(s) got executed only if the expression results in false */', 'package main', 'import ""fmt""', 'func main() {', '/* local variable definition */', 'var a int = 10;', '/* check the boolean condition */', 'if ( a%2 == 0 ) {', '/* if condition is true then print the following */', 'fmt.Printf(""a is even\\n"");', '} else {', '/* if condition is false then print the following */', 'fmt.Printf(""a is odd\\n"");', 'fmt.Printf(""value of a is : %d\\n"", a);', 'func main() {', 'fmt.Print(""Enter number: "")', 'var input int', 'fmt.Scanln(&input)', 'fmt.Print(input)', '/* check the boolean condition */', 'if( input % 2==0 ) {', '/* if condition is true then print the following */', 'fmt.Printf("" is even\\n"" );', '} else {', '/* if condition is false then print the following */', 'fmt.Printf("" is odd\\n"" );', 'package main', 'import ""fmt""', 'func main() {', 'fmt.Print(""Enter text: "")', 'var input int', 'fmt.Scanln(&input)', 'if (input < 0 || input > 100) {', 'fmt.Print(""Please enter valid no"")', '} else if (input >= 0 && input < 50  ) {', 'fmt.Print("" Fail"")', '} else if (input >= 50 && input < 60) {', 'fmt.Print("" D Grade"")', '} else if (input >= 60 && input < 70  ) {', 'fmt.Print("" C Grade"")', '} else if (input >= 70 && input < 80) {', 'fmt.Print("" B Grade"")', '} else if (input >= 80 && input < 90  ) {', 'fmt.Print("" A Grade"")', '} else if (input >= 90 && input <= 100) {', 'fmt.Print("" A+ Grade"")', 'if( boolean_expression 1) {', '/* statement(s) got executed only if the expression 1 results in true */', 'if(boolean_expression 2) {', '/* statement(s) got executed only if the expression 2 results in true */', 'package main', 'import ""fmt""', 'func main() {', '/* local variable definition */', 'var x int = 10', 'var y int = 20', '/* check the boolean condition */', 'if( x >=10 ) {', '/* if condition is true then check the following */', 'if( y >= 10 )  {', '/* if condition is true then print the following */', 'fmt.Printf(""Inside nested If Statement \\n"" );', 'fmt.Printf(""Value of x is : %d\\n"", x );', 'fmt.Printf(""Value of y is : %d\\n"", y );']","['a is even number', 'a is even\nvalue of a is : 10', 'Enter number: 10\n10 is even', 'Enter text: 84\n A Grade', 'Inside nested If Statement \nValue of x is : 10\nValue of y is : 20']",[],[]
6,['Go switch'],['The Go switch statement executes one statement from multiple conditions. It is similar to if-else-if chain statement.'],"['https://www.javatpoint.com/go-for', 'https://www.javatpoint.com/go-if-else', 'https://www.javatpoint.com/go-for', 'https://www.javatpoint.com/go-if-else', 'https://www.javatpoint.com/go-for']",[],[],[],[],[],"['In switch statement, more than one values can be tested in a case, the values are presented in a comma separated list', 'like: case val1, val2, val3:', 'For fall-through in Go switch statement, use the keyword ""fallthrough"" at the end of the branch.', 'Go Switch Example:', 'Go switch fallthrough example']","['The switch statement in Go is more flexible. In the above syntax, var1 is a variable which can be of any type, and val1, val2, ... are possible values of var1.', 'If any case is matched, the corresponding case statement is executed. Here, the break keyword is implicit. So automatic fall-through is not the default behavior in Go switch statement. ']",[],"['switch  var1 {', 'case val1:', 'case val2', 'default:', 'package main', 'import ""fmt""', 'func main() {', 'fmt.Print(""Enter Number: "")', 'var input int', 'fmt.Scanln(&input)', 'switch (input) {', 'case 10:', 'fmt.Print(""the value is 10"")', 'case 20:', 'fmt.Print(""the value is 20"")', 'case 30:', 'fmt.Print(""the value is 30"")', 'case 40:', 'fmt.Print(""the value is 40"")', 'default:', 'fmt.Print("" It is not 10,20,30,40 "")', 'import ""fmt""', 'func main() {', 'k := 30', 'switch k {', 'case 10:', 'fmt.Println(""was <= 10""); fallthrough;', 'case 20:', 'fmt.Println(""was <= 20""); fallthrough;', 'case 30:', 'fmt.Println(""was <= 30""); fallthrough;', 'case 40:', 'fmt.Println(""was <= 40""); fallthrough;', 'case 50:', 'fmt.Println(""was <= 50""); fallthrough;', 'case 60:', 'fmt.Println(""was <= 60""); fallthrough;', 'default:', 'fmt.Println(""default case"")']","['Enter Number: 20', 'the value is 20', 'Enter Number: 35', 'It is not 10,20,30,40', 'was <= 30', 'was <= 40', 'was <= 50', 'was <= 60', 'default case']",[],[]
7,['Go For Loop'],['The Go for statement is used for repeating a set of statements number of times. It is the only loop in go language.'],"['https://www.javatpoint.com/go-for-range', 'https://www.javatpoint.com/go-switch', 'https://www.javatpoint.com/go-for-range', 'https://www.javatpoint.com/go-switch', 'https://www.javatpoint.com/go-for-range']",[],[],[],[],[],"['There are two variants of for loop in Go: Counter-controlled iteration and Condition-controlled iteration.', 'When the execution of the loop is over, the objects created inside the loop gets destroyed.', 'Go For Loop counter-controlled iteration example:', 'Go Nested For Loop Example:', 'Go Infinitive For Loop', 'In infinite for loop, the conditional statement is absent like: ', 'Go Infinitive For Loop Example:', 'Go For - Condition-controlled iteration', 'The for loop which has no header is used for condition-controlled iteration. It is similar to while-loop in other languages.', 'For Loop Example in while fashion:']",[],"['As you can see in the above example, loop begins with the initialization stage, variable for i (i:= 0); This is done only once. It is followed by a conditional check i (i < 10). Conditional check is performed in every iteration. The for loop stops when the condition becomes false.']","['package main', 'import ""fmt""', 'func main() {', 'for a := 0; a < 11; a++ {', 'fmt.Print(a,""\\n"")', 'package main', 'import ""fmt""', 'func main() {', 'for a := 0; a < 3; a++ {', 'for b := 3;b > 0; b-- {', 'fmt.Print(a,"" "",b,""\\n"")', '}', 'for i:=0; ; i++', 'for { }', 'package main', 'import ""fmt""', 'func main() {', 'for true  {', 'fmt.Printf(""This loop will run forever.\\n"");', 'for condition { }', 'package main', 'import ""fmt""', 'func main() {', 'sum := 1', 'for sum < 100 {', 'sum += sum', 'fmt.Println(sum)']","['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '0 3', '0 2', '0 1', '1 3', '1 2', '1 1', '2 3', '2 2', '2 1', 'This loop will run forever.', 'This loop will run forever.', 'This loop will run forever.', 'This loop will run forever.', 'This loop will run forever.', 'This loop will run forever.', 'This loop will run forever.', '2', '4', '8', '16', '32', '64', '128']",[],[]
8,['Go for range construct'],"['The for range construct is useful in many context. It can be used to traverse every item in a collection. It is similar to foreach in other languages. But, we still have the index at each iteration in for range construct.']","['https://www.javatpoint.com/go-goto', 'https://www.javatpoint.com/go-for', 'https://www.javatpoint.com/go-goto', 'https://www.javatpoint.com/go-for', 'https://www.javatpoint.com/go-goto']",[],[],[],[],[],['Go For Range Example'],[],[],"['for ix, val := range coll { }', 'import ""fmt""', 'func main() {', 'nums := []int{2, 3, 4}', 'sum := 0', 'for _, value := range nums {// ""_ "" is to ignore the index', 'sum += value', 'fmt.Println(""sum:"", sum)', 'for i, num := range nums {', 'if num == 3 {', 'fmt.Println(""index:"", I)', '}', 'kvs := map[string]string{""1"":""mango"",""2"":""apple"",""3"":""banana""}', 'for k, v := range kvs {', 'fmt.Printf(""%s -> %s\\n"", k, v)', 'for k := range kvs {', 'fmt.Println(""key:"", k)', 'for i, c := range ""Hi"" {', 'fmt.Println(i, c)']","['sum: 60', '1 -> mango', '2 -> apple', '3 -> banana', 'key: 1', 'key: 2', 'key: 3', '0 72', '1 105']",[],[]
9,['Go Goto Statement'],['The Go goto statement is a jump statement which is used to transfer the control to other parts of the program. '],"['https://www.javatpoint.com/go-break', 'https://www.javatpoint.com/go-for-range', 'https://www.javatpoint.com/go-break', 'https://www.javatpoint.com/go-for-range', 'https://www.javatpoint.com/go-break']",[],[],[],[],[],"['In goto statement, there must be a label. We use label to transfer the control of the program.', 'Go Goto Statement Example:']",[],[],"['package main', 'import (', '""fmt""', 'func main() {', 'var input int', 'fmt.Print(""You are not eligible to vote "")', 'fmt.Print(""Enter your age "")', 'fmt.Scanln(&input)', 'if (input <= 17) {', 'goto Loop', '} else {', 'fmt.Print(""You can vote "")']","['You are not eligible to vote', 'Enter your age 15', 'You are not eligible to vote', 'Enter your age 18', 'You can vote']",[],[]
10,['Go Break Statement'],"['A break statement is used to break out of the innermost structure in which it occurs. It can be used in for-loop (counter, condition,etc.), and also in a switch. Execution is continued after the ending } of that structure.']","['https://www.javatpoint.com/go-continue', 'https://www.javatpoint.com/go-goto', 'https://www.javatpoint.com/go-continue', 'https://www.javatpoint.com/go-goto', 'https://www.javatpoint.com/go-continue']",[],[],[],[],[],"['Go Break Statement Example:', 'Break statement can also be applied in the inner loop, and the control flow break out to the outer loop.', 'Go Break Statement with Inner Loop:']",[],[],"['package main', 'import ""fmt""', 'func main() {', 'var  a int = 1', 'for a < 10{', 'fmt.Print(""Value of a is "",a,""\\n"")', 'a++;', 'if a > 5{', '/* terminate the loop using break statement */', 'break;', '}', 'package main', 'import ""fmt""', 'func main() {', 'var a int', 'var b int', 'for a = 1; a <= 3; a++ {', 'for b = 1; b <= 3; b++ {', 'if (a == 2 && b == 2) {', 'break;', '}', 'fmt.Print(a, "" "", b, ""\\n"")']","['Value of a is 1', 'Value of a is 2', 'Value of a is 3', 'Value of a is 4', 'Value of a is 5', '1 1', '1 2', '1 3', '2 1', '3 1', '3 2', '3 3']",[],[]
11,['Go Continue Statement'],"['The continue is used to skip the remaining part of the loop, and then continues with the next iteration of the loop after checking the condition.']","['https://www.javatpoint.com/go-comments', 'https://www.javatpoint.com/go-break', 'https://www.javatpoint.com/go-comments', 'https://www.javatpoint.com/go-break', 'https://www.javatpoint.com/go-comments']",[],[],[],[],[],"['Or we can do like ', 'Go Continue Statement Example:', 'Continue can be also be applied in the inner loop ', 'Go Continue Statement with Inner Loop example:']",[],[],"['continue;', 'continue:x', 'package main', 'import ""fmt""', 'func main() {', '/* local variable definition */', 'var a int = 1', '/* do loop execution */', 'for a < 10 {', 'if a == 5 {', '/* skip the iteration */', 'a = a + 1;', 'continue;', '}', 'fmt.Printf(""value of a: %d\\n"", a);', 'a++;', 'package main', 'import ""fmt""', 'func main() {', '/* local variable definition */', 'var a int = 1', 'var b int = 1', '/* do loop execution */', 'for a = 1; a < 3; a++ {', 'for b = 1; b < 3; b++ {', 'if a == 2 && b == 2 {', '/* skip the iteration */', 'continue;', '}', 'fmt.Printf(""value of a and b is %d %d\\n"", a, b);', '}', 'fmt.Printf(""value of a and b is %d %d\\n"", a, b);']","['value of a: 1', 'value of a: 2', 'value of a: 3', 'value of a: 4', 'value of a: 6', 'value of a: 7', 'value of a: 8', 'value of a: 9', 'value of a and b is 1 1', 'value of a and b is 1 2', 'value of a and b is 1 3', 'value of a and b is 2 1', 'value of a and b is 2 3']",[],[]
12,['Go Comments'],"['The Go comments are not executed by the compiler and interpreter. The comments are used to provide information or explanation about the method, variable, class or any statement. It can also be used to hide program code for specific time.']","['https://www.javatpoint.com/go-constants', 'https://www.javatpoint.com/go-continue', 'https://www.javatpoint.com/go-constants', 'https://www.javatpoint.com/go-continue', 'https://www.javatpoint.com/go-constants']",[],[],"['Go Single Line Comment ', 'Go Multi Line Comment']",[],[],"['The double forward slash ""//"" is used for the single-line comment.', 'Go Single Line Comment Example:', 'A multi-line or block-comment starts with /* and ends with */. Here, nesting is not allowed.', 'Go Multi Line Comment Example:']",[],[],"['package main', 'import ""fmt""', 'func main() {', 'var x int = 10 //It is a variable', 'fmt.Print(x)', 'package main', 'import ""fmt""', 'func main() {', 'var a int = 10', ""/* Let's declare and"", 'print variable in Go*/', 'fmt.Printf(""value of a is %d \\n"", a);']","['10', '10']",[],[]
13,['Go Constants'],"['A constant const contains data which is not changed. This data can only be of type boolean, number (integer, float or complex) or string.']","['https://www.javatpoint.com/go-type-casting', 'https://www.javatpoint.com/go-comments', 'https://www.javatpoint.com/go-type-casting', 'https://www.javatpoint.com/go-comments', 'https://www.javatpoint.com/go-type-casting']",[],[],[],['Go Constant Example'],[],"['The type specifier [type] is optional, the compiler can implicitly derive the type from the value.', 'Explicit Typing Example:', 'Implicit Typing Example:']",[],[],"['const identifier [type] = value', 'const PI = 3.14159', 'const b string = ""abc""', 'const b = ""abc""', 'package main', 'import ""fmt""', 'func main() {', 'const HEIGHT int = 100', 'const WIDTH int = 200', 'var area int', 'area = HEIGHT * WIDTH', 'fmt.Printf(""value of area : %d"", area)']",['value of area : 20000'],[],[]
14,['Go Type Casting'],['Type casting means conversion of a variable from one data type to another. The value may be lost when large type is converted to a smaller type.'],"['https://www.javatpoint.com/go-functions', 'https://www.javatpoint.com/go-constants', 'https://www.javatpoint.com/go-functions', 'https://www.javatpoint.com/go-constants', 'https://www.javatpoint.com/go-functions']",[],[],[],[],[],['Go Type Conversion Example'],[],[],"['package main', 'import (', '""fmt""', '""strconv""', 'func main() {', 'var i int = 10', 'var f float64 = 6.44', 'var str1 string = ""101""', 'var str2 string = ""10.123""', 'fmt.Println(float64(i))', 'fmt.Println(int(f))', 'newInt, _ := strconv.ParseInt(str1, 0, 64)', 'fmt.Println(newInt)', 'newfloat, _ := strconv.ParseFloat(str2, 64)', 'fmt.Println(newfloat)']",['10\n6\n101\n10.123'],[],[]
15,['Go Functions'],"['In Go, functions are the basic building blocks. A function is used to break a large problem into smaller tasks. We can invoke a function several times, hence functions promote code reusability. There are 3 types of functions in Go:']","['https://www.javatpoint.com/go-recursion', 'https://www.javatpoint.com/go-type-casting', 'https://www.javatpoint.com/go-recursion', 'https://www.javatpoint.com/go-type-casting', 'https://www.javatpoint.com/go-recursion']",[],[],[],"['Go Function Example', 'Go Function with Return', 'Go Function with Multiple Return']",[],"['Function parameters, return values, together with types, is called function signature.', 'Function cannot be declared inside another function. If we want to achieve this, we can do this by anonymous function.', ""Let's see an example of function with return value."", 'Go function multiple return example']","[""Let's see an example of a function which takes n number of type int as argument and returns two int values. The return values are filled in the calling function in a parallel assignment.""]",[],"['package main', 'import ""fmt""', 'type Employee struct {', 'fname string', 'lname string', 'func (emp Employee) fullname(){', 'fmt.Println(emp.fname+"" ""+emp.lname)', 'func main() {', 'e1 := Employee{ ""John"",""Ponting""}', 'e1.fullname()', 'package main', 'import (', '""fmt""', 'func fun() int {', 'return 123456789', 'func main() {', 'x := fun()', 'fmt.Println(x)', 'package main', 'import (', '""fmt""', 'func main() {', 'fmt.Println(addAll(10,15,20,25,30))', 'func addAll(args ... int)(int,int)  {', 'finalAddValue:=0', 'finalSubValue:=0', 'for _,value  := range args{', 'finalAddValue += value', 'finalSubValue -= value', 'return finalAddValue,finalSubValue']","['John Ponting', '123', '100 -100']",[],['|||Normal functions with an identifier|||Anonymous or lambda functions|||Method (A function with a receiver)|||']
16,['Go Recursion '],"['In Go programming, calling same function from within the function is known as recursion. It is always a good idea to break a problem into multiple tasks. Let us see a program to calculate factorial value in Go programming using recursion.']","['https://www.javatpoint.com/go-closure', 'https://www.javatpoint.com/go-functions', 'https://www.javatpoint.com/go-closure', 'https://www.javatpoint.com/go-functions', 'https://www.javatpoint.com/go-closure']",[],[],[],['Go Recursion Example: Factorial Number'],[],[],[],[],"['package main', 'import (', '""fmt""', 'func main() {', 'fmt.Println(factorial(5))', 'func factorial(num int ) int{', 'if num == 0{', 'return 1', 'return num*factorial(num-1)']",['120'],[],[]
17,['Go Closure'],"['Here, we create an anonymous function which acts as a function closure. A function which has no name is called anonymous function.']","['https://www.javatpoint.com/go-array', 'https://www.javatpoint.com/go-recursion', 'https://www.javatpoint.com/go-array', 'https://www.javatpoint.com/go-recursion', 'https://www.javatpoint.com/go-array']",[],[],[],['Go Closure Example'],[],['A closure is a function which refers reference variable from outside its body. The function may access and assign to the referenced variables. '],[],[],"['package main', 'import (', '""fmt""', 'func main() {', 'number := 10', 'squareNum := func() (int){', 'number *= number', 'return number', 'fmt.Println(squareNum())', 'fmt.Println(squareNum())']",['100\n10000'],[],[]
18,['Go Array'],"['In Go, an array is a homogeneous data structure (Fix type) and has a fixed-length. The type can be anything like integers, string or self-defined type. ']","['https://www.javatpoint.com/go-slice', 'https://www.javatpoint.com/go-closure', 'https://www.javatpoint.com/go-slice', 'https://www.javatpoint.com/go-closure', 'https://www.javatpoint.com/go-slice']",[],[],"['Go Multi Dimensional Arrays', 'Go Multi-Dimensional Array Example']",['Go Array Example'],[],"['Multi dimensional arrays is simply a list of one-dimensional arrays.', 'Initializing Two-Dimensional Arrays', 'Accessing Two-Dimensional Arrays']","['The items in the array can be accessed through their index, It starts with zero. The number of items in the array is called the length or size of an array. It is fixed and must be declared in the declaration of an array variable. ']",[],"['var identifier [len]type', 'var arr_name [5]int', 'package main', 'import ""fmt""', 'func main() {', 'var x [5]int', 'var i, j int', 'for i = 0; i < 5; i++ {', 'x[i] = i + 10', 'for j = 0; j < 5; j++ {', 'fmt.Printf(""Element[%d] = %d\\n"", j, x[j])', 'var arrayName [ x ][ y ] variable_type', 'a = [3][4]int', 'a = [2][3]int{', '{2, 4, 6} ,   /*  initializers for row indexed by 0 */', '{8, 10, 12} ,   /*  initializers for row indexed by 1 */', 'int val = a[1][2]', 'package main', 'import ""fmt""', 'func main() {', '/* an array with 3 rows and 3 columns*/', 'var a = [3][3]int{ {1,2,3}, {4,5,6}, {7,8,9}}', 'var i, j int', ""/* output each array element's value */"", 'for  i = 0; i < 3; i++ {', 'for j = 0; j < 3; j++ {', 'fmt.Print(a[i][j] )', 'fmt.Println()']","['Element[0] = 10\nElement[1] = 11\nElement[2] = 12\nElement[3] = 13\nElement[4] = 14', '123\n456\n789']",[],[]
19,['Go Slice'],"['In Go, slice is a dynamically-sized, segmented view of an underlying array. This segment can be the entire array or a subset of an array. We define the subset of an array by indicating the start and end index. Slices provide a dynamic window onto the underlying array.']","['https://www.javatpoint.com/go-command-line-arguments', 'https://www.javatpoint.com/go-array', 'https://www.javatpoint.com/go-command-line-arguments', 'https://www.javatpoint.com/go-array', 'https://www.javatpoint.com/go-command-line-arguments']",[],[],[],"['Slice Literal', 'Omit Lower or Upper Bonds', 'Slice Length and Capacity', 'Slice Make Function']",[],"['Slice Data Type Example:', 'Slice is like array reference. An example of slice is given below: ', 'Slice literal is like an array literal without any length. An example of slice without length is given below:', 'In slice, we can omit the lower bond or the upper bonds. Zero is the default value of the lower or the upper bond. ', 'To get the length, we use len(slice) function and to get the capacity, we use cap(slice) function.', 'We can also create slice with the help of make function. The make function creates a zero sized array and returns slice of the array.']","['Slice is like reference to an array. Slice does not store any data. If we change the elements of an array, it will also modify the underlying array. If other slice is referencing the same underlying array, their value will also be changed.', 'A slice has length and capacity. The length is the number of stored elements and the capacity is the number of elements of the underlying array counting from the beginning of the slice.']",[],"['package main', 'import (', '""fmt""', 'func main() {', 'odd := [6]int{2, 4, 6, 8, 10, 12}', 'var s []int = odd[1:4]', 'fmt.Println(s)', 'package main', 'import ""fmt""', 'func main() {', 'names := [4]string{', '""John"",', '""Jim"",', '""Jack"",', '""jen"",', 'fmt.Println(names)', 'slice1 := names[0:2]', 'slice2 := names[1:3]', 'fmt.Println(slice1, slice2)', 'slice2[0] = ""ZZZ""', 'fmt.Println(slice1, slice2)', 'fmt.Println(names)', 'package main', 'import ""fmt""', 'func main() {', 's := []struct {', 'i int', 'b bool', '{1, true},', '{2, false},', '{3,true},', '{4, true},', '{5, false},', '{6, true},', 'fmt.Println(s)', 'package main', 'import ""fmt""', 'func main() {', 'slice1 := []int{2,4,8,10,12,14}', 'slice2 := slice1[2:4]', 'fmt.Println(slice2)', 'slice3 := slice1[:3]', 'fmt.Println(slice3)', 'slice4 := slice1[2:]', 'fmt.Println(slice4)', 'fmt.Println(slice1)', 'package main', 'import ""fmt""', 'func main() {', 'slice1 := []int{2,4,6,8,10,12,14}', 'printSlice(slice1)', 'slice2 := slice1[:0]', 'printSlice(slice2)', 'slice3 := slice1[:4]', 'printSlice(slice3)', 'slice4 := slice1[2:]', 'printSlice(slice4)', 'func printSlice(s []int) {', 'fmt.Printf(""length =%d capacity=%d %v\\n"", len(s), cap(s), s)', 'package main', 'import ""fmt""', 'func main() {', 'slice := make([]int, 10)', 'printSlice(""slice"", slice)', 'slice1 := make([]int, 0, 10)', 'printSlice(""slice1"", slice1)', 'slice2 := slice1[:5]', 'printSlice(""slice2"", slice2)', 'slice3 := slice2[2:5]', 'printSlice(""slice3"", slice3)', 'func printSlice(s string, x []int) {', 'fmt.Printf(""%s length=%d capacity=%d %v\\n"",', 's, len(x), cap(x), x)']","['[4 6 8]', '[John Jim Jack jen]\n[John Jim] [Jim Jack]\n[John ZZZ] [ZZZ Jack]\n[John ZZZ Jack jen]', '[{1 true} {2 false} {3 true} {4 true} {5 false} {6 true}]', '[8 10]\n[2 4 8]\n[8 10 12 14]\n[2 4 8 10 12 14]', 'length =7 capacity=7 [2 4 6 8 10 12 14]\nlength =0 capacity=7 []\nlength =4 capacity=7 [2 4 6 8]\nlength =5 capacity=5 [6 8 10 12 14]', 'slice length=10 capacity=10 [0 0 0 0 0 0 0 0 0 0]\nslice1 length=0 capacity=10 []\nslice2 length=5 capacity=10 [0 0 0 0 0]\nslice3 length=3 capacity=8 [0 0 0]']",[],[]
20,['Go Command Line Arguments'],"['When we need to execute a program with some arguments, we generally use command line argument. The arguments passed from the console can be received by the Go program and it can be used as an input.']","['https://www.javatpoint.com/go-string', 'https://www.javatpoint.com/go-slice', 'https://www.javatpoint.com/go-string', 'https://www.javatpoint.com/go-slice', 'https://www.javatpoint.com/go-string']",[],[],[],[],[],"['The os.Args is used to get the arguments. The index 0 of os.Args contains the path of the program.', 'The os.Args[1:] holds provided arguments.', 'Command to run the program:']",[],[],"['package main', 'import (', 'func main() {', 'var s, arg string', 'for i := 1; i < len(os.Args); i++ {', 's += arg + os.Args[i]+"" ""', 'fmt.Println(s)', 'go build ProgramName.go', './ProgramName Tom Dick Harry', 'package main', 'import ""os""', 'import ""fmt""', 'func main() {', 'arumentWithPath := os.Args //returns all arguments including path', 'arumentSlice:= os.Args[1:] //returns all elements after path', 'arumentAt2 := os.Args[2] //returns specified argument only', 'fmt.Println(arumentWithPath)', 'fmt.Println(arumentSlice)', 'fmt.Println(arumentAt2)']",['[/private/var/folders/by/w452m9913bj8_rmgzgjsvw9w0000gn/T/___cmd_go Tom Dick Harry]\n[Tom Dick Harry]\nDick'],[],[]
21,['Go Strings'],['The Go string is a sequence of variable-width characters. '],"['https://www.javatpoint.com/go-regex', 'https://www.javatpoint.com/go-slice', 'https://www.javatpoint.com/go-regex', 'https://www.javatpoint.com/go-slice', 'https://www.javatpoint.com/go-regex']",[],[],[],"['Go String Example', 'Go String len() Example', 'Go Print ASCII Example', 'Go String ToUpper() Example', 'Go String ToLower() Example', 'Go String HasPrefix() Example', 'Go String HasSuffix() Example', 'Go String Join() Example', 'Go String Repeat() Example', 'Go String Contains() Example', 'Go String Index() Example', 'Go String Count() Example', 'Go String Replace() Example', 'Go String Split() Example', 'Go String Split() Example 2', 'Go String Compare() Example', 'Go String Trim() Example', 'Go String ContainsAny() Example']",[],"[""Go strings and text files occupy less memory or disk space. Since, UTF-8 is the standard, Go doesn't need to encode and decode strings. ""]","['Go Strings are value types and immutable. It means if you create a string, you cannot modify the contents of the string. The initial value of a string is empty """" by default.']",[],"['package main', 'import (""fmt""', '""reflect""', 'func main()  {', 'var x string = ""Hello World""', 'fmt.Println(x)', 'fmt.Println(reflect.TypeOf(x))', 'package main', 'import ""fmt""', 'func main() {', 'str := ""I love my country""', 'fmt.Println(len(str))', 'package main', 'import ""fmt""', 'func main() {', 'fmt.Println(""Ascii value of A is "",""A""[0])', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'str := ""india""', 'fmt.Println(strings.ToUpper(str))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'str := ""INDIA""', 'fmt.Println(strings.ToLower(str))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 's := ""INDIA""', 'fmt.Println(strings.HasPrefix(s,""IN""))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 's := ""INDIA""', 'fmt.Println(strings.HasSuffix(s,""IA""))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'var arr = []string{""a"",""b"",""c"",""d""}', 'fmt.Println(strings.Join(arr,""*""))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'var str = ""New ""', 'fmt.Println(strings.Repeat(str,4))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'str:= ""Hi...there""', 'fmt.Println(strings.Contains(str,""th""))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'str:= ""Hi...there""', 'fmt.Println(strings.Index(str,""th""))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'str:= ""Hi...there""', 'fmt.Println(strings.Count(str,""e""))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'str:= ""Hi...there""', 'fmt.Println(strings.Replace(str,""e"",""Z"",2))', 'package main', 'import ""fmt""', 'import ""strings""', 'func main() {', 'str := ""I,love,my,country""', 'var arr []string = strings.Split(str, "","")', 'fmt.Println(len(arr))', 'for i, v := range arr {', 'fmt.Println(""Index : "", i, ""value : "", v)', 'package main', 'import (', '""fmt""', '""strings""', 'func main() {', 'fmt.Printf(""%q\\n"", strings.Split(""x,y,z"", "",""))', 'fmt.Printf(""%q\\n"", strings.Split("" John and Jack and Johnny and Jinn "", ""and""))', 'fmt.Printf(""%q\\n"", strings.Split("" abc "", """"))', 'fmt.Printf(""%q\\n"", strings.Split("""", ""Hello""))', 'package main', 'import (', '""fmt""', '""strings""', 'func main() {', 'fmt.Println(strings.Compare(""a"", ""b""))', 'fmt.Println(strings.Compare(""a"", ""a""))', 'fmt.Println(strings.Compare(""b"", ""a""))', 'package main', 'import (', '""fmt""', '""strings""', 'func main() {', 'fmt.Println(strings.TrimSpace("" \\t\\n I love my country  \\n\\t\\r\\n""))', 'package main', 'import (', '""fmt""', '""strings""', 'func main() {', 'fmt.Println(strings.ContainsAny(""Hello"", ""A""))', 'fmt.Println(strings.ContainsAny(""Hello"", ""o & e""))', 'fmt.Println(strings.ContainsAny(""Hello"", """"))', 'fmt.Println(strings.ContainsAny("""", """"))']","['Hello World\nstring', '17', 'Ascii value of A is  65', 'INDIA', 'india', 'true', 'true', 'a*b*c*d', 'New New New New', 'true', '5', '2', 'Hi...thZrZ', '4\nIndex :  0 value :  I\nIndex :  1 value :  love\nIndex :  2 value :  my\nIndex :  3 value :  country', '[""x"" ""y"" ""z""]\n["" John "" "" Jack "" "" Johnny "" "" Jinn""]\n["" "" ""a"" ""b"" ""c"" "" ""]\n[""""]', '-1\n0\n1', 'I love my country', 'false\ntrue\nfalse\nfalse']",[],[]
22,['Go Regex'],"['Go Regex package is used for searching string. To search a string, we need to provide a pattern of the string. ']","['https://www.javatpoint.com/go-struct', 'https://www.javatpoint.com/go-string', 'https://www.javatpoint.com/go-struct', 'https://www.javatpoint.com/go-string', 'https://www.javatpoint.com/go-struct']",[],[],[],"['Go Regex Example 1', 'Go Regex Example 2', 'Go Regex Example 3']",[],"['We need to compile the pattern into the regex object so that we can invoke methods through it. ', 'The FindString() method returns a string having the text of the left most match. If no match is found, empty string is returned.']","['The regex object can be retrieved by using compile() and mustcompile() functions. Now we can use functions to find strings such as FindString(), FindStringSubmatch(), FindStringIndex() etc.', 'we can also use FindStringSubmatch() method which returns a slice of strings having the text of the leftmost match and the matches. If no match is found, the return value is an empty string.']",[],"['package main', 'import (', '""regexp""', 'func main() {', 're := regexp.MustCompile("".com"")', 'fmt.Println(re.FindString(""google.com""))', 'fmt.Println(re.FindString(""abc.org""))', 'fmt.Println(re.FindString(""fb.com""))', 'package main', 'import (', '""regexp""', 'func main() {', 're := regexp.MustCompile("".com"")', 'fmt.Println(re.FindStringIndex(""google.com""))', 'fmt.Println(re.FindStringIndex(""abc.org""))', 'fmt.Println(re.FindStringIndex(""fb.com""))', 'package main', 'import (', '""regexp""', 'func main() {', 're := regexp.MustCompile(""f([a-z]+)ing"")', 'fmt.Println(re.FindStringSubmatch(""flying""))', 'fmt.Println(re.FindStringSubmatch(""abcfloatingxyz""))']","['.com\n\n.com', '[6 10]\n[]\n[2 6]', '[flying ly]\n[floating loat]\n\nProcess finished with exit code 0']",[],[]
23,['Go Struct'],"['In Go, Struct can be used to create user-defined types.']","['https://www.javatpoint.com/go-interface', 'https://www.javatpoint.com/go-string', 'https://www.javatpoint.com/go-interface', 'https://www.javatpoint.com/go-string', 'https://www.javatpoint.com/go-interface']",[],[],['Go Embedded Struct'],[],[],"['Struct is a composite type means it can have different properties and each property can have their own type and value.', 'Struct is a data type and can be used as an anonymous field (having only the type). One struct can be inserted or ""embedded"" into other struct.', ""It is a simple 'inheritance' which can be used to implement implementations from other type or types.""]",['Struct can represent real-world entity with these properties. We can access a property data as a single entity. It is also valued types and can be constructed with the new() function.'],[],"['package main', 'import (', '""fmt""', 'type person struct {', 'firstName string', 'lastName  string', 'age       int', 'func main() {', 'x := person{age: 30, firstName: ""John"", lastName: ""Anderson"", }', 'fmt.Println(x)', 'fmt.Println(x.firstName)', 'package main', 'import (', '""fmt""', 'type person struct {', 'fname string', 'lname string}', 'type employee struct {', 'person', 'empId int', 'func (p person) details() {', 'fmt.Println(p, "" ""+"" I am a person"")', 'func (e employee) details() {', 'fmt.Println(e, "" ""+""I am a employee"")', 'func main() {', 'p1 := person{""Raj"", ""Kumar""}', 'p1.details()', 'e1 := employee{person:person{""John"", ""Ponting""}, empId: 11}', 'e1.details()']","['{John Anderson 30}\nJohn', '{Raj Kumar}   I am a person\n{{John Ponting} 11}  I am a employee']",[],[]
24,['Go Interface'],['Go has different approaches to implement the concepts of object-orientation. Go does not have classes and inheritance. Go fulfill these requirements through its powerful interface.'],"['https://www.javatpoint.com/go-pointer', 'https://www.javatpoint.com/go-struct', 'https://www.javatpoint.com/go-pointer', 'https://www.javatpoint.com/go-struct', 'https://www.javatpoint.com/go-pointer']",[],[],[],['Go Interface Example'],[],"['Interfaces provide behavior to an object: if something can do this, then it can be used here.', 'An interface defines a set of abstract methods and does not contain any variable.', 'where Namer is an interface type.', 'Generally, the name of an interface is formed by the method name plus the [e]r suffix, such as Printer, Reader, Writer, Logger, Converter, etc.']",[],[],"['type Namer interface {', 'Method1(param_list) return_type', 'Method2(param_list) return_type', 'package main', 'import (', '""fmt""', 'type vehicle interface {', 'accelerate()', 'func foo(v vehicle)  {', 'fmt.Println(v)', 'type car struct {', 'model string', 'color string', 'func (c car) accelerate()  {', 'fmt.Println(""Accelrating?"")', 'type toyota struct {', 'model string', 'color string', 'speed int', 'func (t toyota) accelerate(){', 'fmt.Println(""I am toyota, I accelerate fast?"")', 'func main() {', 'c1 := car{""suzuki"",""blue""}', 't1:= toyota{""Toyota"",""Red"", 100}', 'c1.accelerate()', 't1.accelerate()', 'foo(c1)', 'foo(t1)']","['Accelrating...\nI am toyota, I accelerate fast...\n{suzuki blue}\n{Toyota Red 100}']",[],"[""|||A type doesn't have to state explicitly that it implements an interface: interfaces are satisfied implicitly. Multiple types can implement the same interface.|||A type that implements an interface can also have other functions.|||A type can implement many interfaces.|||An interface type can contain a reference to an instance of any of the types that implement the interface|||""]"
25,['Go Pointer'],['A pointer is a variable that stores the address of another variable. The general form of a pointer variable declaration is:'],"['https://www.javatpoint.com/go-reflect', 'https://www.javatpoint.com/go-interface', 'https://www.javatpoint.com/go-reflect', 'https://www.javatpoint.com/go-interface', 'https://www.javatpoint.com/go-reflect']",[],[],[],"['Go Pointer Example 1', 'Go Pointer Example 2']",[],"['A newly declared pointer which has not been assigned to a variable has the nil value.', 'The address-of operator &, when placed before a variable gives us the memory address of the variable. ']","['With pointers, we can pass a reference to a variable (for example, as a parameter to a function), instead of passing a copy of the variable which can reduce memory usage and increase efficiency.']",[],"['var var_name *var-type', 'package main', 'import (', '""fmt""', 'func main() {', 'x:=10', 'changeX(&x)', 'fmt.Println(x)', 'func changeX(x *int){', 'package main', 'import (', '""fmt""', 'func main() {', 'ptr := new(int)', 'fmt.Println(""Before change ptr"",*ptr)', 'changePtr(ptr)', 'fmt.Println(""After change ptr"",*ptr)', 'func changePtr(ptr *int)  {', '*ptr = 10']","['x = 0', 'Before change ptr 0\nAfter change ptr 10']",[],[]
26,['Go Reflect'],"[""Go Reflection is the ability of a program to examine its own structure, particularly through the types; it's a form of meta-programming.""]","['https://www.javatpoint.com/go-rune', 'https://www.javatpoint.com/go-pointer', 'https://www.javatpoint.com/go-rune', 'https://www.javatpoint.com/go-pointer', 'https://www.javatpoint.com/go-rune']",[],[],[],[],[],"[""Reflect can be used to investigate types and variables at runtime, e.g. its size, its methods, and it can also call these methods 'dynamically'."", 'Go Reflect example']",[],[],"['package main', '""fmt""', '""reflect""', 'func main()  {', 'age := 27.5', 'fmt.Printf(""%T\\n"" ,age)', 'fmt.Println(reflect.TypeOf(age))']",['float64\nfloat64'],[],[]
27,['Go Rune Type'],['The type rune is an alias for type int32. The rune literals are an integer value.'],"['https://www.javatpoint.com/go-map', 'https://www.javatpoint.com/go-reflect', 'https://www.javatpoint.com/go-map', 'https://www.javatpoint.com/go-reflect', 'https://www.javatpoint.com/go-map']",[],[],[],[],[],"[""If you store string value in rune literal, it will provide the ASCII value of the character. For example, the rune literal of 'A' will be 65."", 'Go Rune Type Example']",[],[],"['package main', 'import(', '""fmt""', '""reflect""', 'func main(){', ""rune := 'A'"", 'fmt.Printf(""%d \\n"", rune)', 'fmt.Println(reflect.TypeOf(rune))']",['65\nint32'],[],[]
28,['Go Map'],"['In Go, Maps is an unordered collection of key and its associated value. They are very good for looking up values fast. The key type must have the operations == and != defined, like string, int, float.']","['https://www.javatpoint.com/go-error', 'https://www.javatpoint.com/go-rune', 'https://www.javatpoint.com/go-error', 'https://www.javatpoint.com/go-rune', 'https://www.javatpoint.com/go-error']",[],[],"['Go Map Example', 'Go Map Insert and Update operation', 'Go Map Delete operation', 'Go Map Retrieve Element', 'Go Map of Struct']",[],[],"['Hence arrays, slices and structs cannot be used as key type, but pointers and interface types can.', 'A map is a reference type and declared in general as:', 'You can delete an element in Go Map using delete() function.', 'We can also test if a key is present in the table with two value example', 'If key is not present, then the value of elem is the default value of element type.', 'If the type of elem is int then value of elem is zero.', 'In Go, Maps are like struct, but it requires keys']","[""structs can be used as a key when we provide Key() or Hash() method, so that a unique numeric or string key can be calculated from the struct's fields."", 'Update and insert operation are similar in go map. If the map does not contain the provided key the insert operation will takes place and if the key is present in the map then update operation takes place.']",[],"['var map1 map[keytype]valuetype', 'var map1 map[int]string', 'package main', 'import ""fmt""', 'func main ()  {', 'x := map[string]int{""Kate"":28,""John"":37, ""Raj"":20}', 'fmt.Print(x)', 'fmt.Println(""\\n"",x[""Raj""])', 'package main', 'import ""fmt""', 'func main() {', 'm := make(map[string]int)', 'fmt.Println(m)', 'm[""Key1""] = 10', 'm[""Key2""] = 20', 'm[""Key3""] = 30', 'fmt.Println(m)', 'm[""Key2""] = 555', 'fmt.Println(m)', 'delete(map, key)', 'package main', 'import ""fmt""', 'func main() {', 'm := make(map[string]int)', 'm[""Key1""] = 10', 'm[""Key2""] = 20', 'm[""Key3""] = 30', 'fmt.Println(m)', 'delete(m, ""Key3"")', 'fmt.Println(m)', 'elem = m[key]', 'package main', 'import ""fmt""', 'func main() {', 'm := make(map[string]int)', 'm[""Key1""] = 10', 'm[""Key2""] = 20', 'm[""Key3""] = 30', 'fmt.Println(m)', 'fmt.Println(""The value:"", m[""Key2""])', 'elem, ok = m[key]', 'package main', 'import ""fmt""', 'func main() {', 'm := make(map[string]int)', 'm[""Key1""] = 10', 'm[""Key2""] = 20', 'm[""Key3""] = 30', 'fmt.Println(m)', 'v, ok := m[""Key2""]', 'fmt.Println(""The value:"", v, ""Present?"", ok)', 'i, j := m[""Key4""]', 'fmt.Println(""The value:"", i, ""Present?"", j)', 'package main', 'import ""fmt""', 'type Vertex struct {', 'Latitude, Longitude float64', 'var m = map[string]Vertex{', '""JavaTpoint"": Vertex{     40.68433, -74.39967,   },', '""SSS-IT"": Vertex{     37.42202, -122.08408,  },', 'func main() {', 'fmt.Println(m)']","['map[John:37 Raj:20 Kate:28]\n 20', 'map[]\nmap[Key3:30 Key1:10 Key2:20]\nmap[Key1:10 Key2:555 Key3:30]', 'map[Key1:10 Key2:20 Key3:30]\nmap[Key2:20 Key1:10]', 'map[Key1:10 Key2:20 Key3:30]\nThe value: 20', 'map[Key1:10 Key2:20 Key3:30]\nThe value: 20 Present? true\nThe value: 0 Present? false', 'map[JavaTpoint:{40.68433 -74.39967} SSS-IT:{37.42202 -122.08408}]']",[],[]
29,['Go Error'],"['Go does not have an exception mechanism like try/catch in Java, we cannot throw an exception in Go.']","['https://www.javatpoint.com/go-recover', 'https://www.javatpoint.com/go-map', 'https://www.javatpoint.com/go-recover', 'https://www.javatpoint.com/go-map', 'https://www.javatpoint.com/go-recover']",[],[],[],['Go Error Example'],[],"['Go uses a different mechanism which is known as defer-panic-and-recover mechanism.', 'We should always check the error at the calling statement, if we receive any of it or not.', 'We should never ignore errors, it may lead to program crashes.', 'The way go detect and report the error condition is', 'Go has predefined error interface type', 'We can define error type by using error.New from the error package and provide an appropriate error message like:']","['Go handles simple errors for function, methods by returning an error object. The error object may be the only or the last return value. The error object is nil if there is no error in the function.']",[],"['type error interface {', 'Error() string', 'err := errors.New(""math - square root of negative number"")', 'package main', 'import ""errors""', 'import ""fmt""', 'import ""math""', 'func Sqrt(value float64) (float64, error) {', 'if (value < 0) {', 'return 0, errors.New(""Math: negative number passed to Sqrt"")', 'return math.Sqrt(value), nil', 'func main() {', 'result, err := Sqrt(-64)', 'if err != nil {', 'fmt.Println(err)', '} else {', 'fmt.Println(result)', 'result, err = Sqrt(64)', 'if err != nil {', 'fmt.Println(err)', '} else {', 'fmt.Println(result)']",['Math: negative number passed to Sqrt\n8'],[],"['|||A function which can result in an error returns two variables: a value and an error-code which is nil in case of success, and != nil in case of an error-condition.|||The error is checked, after the function call . In case of an error ( if error != nil), the execution of the actual function (or if necessary the entire program) is stopped.|||']"
30,['Go Recover'],"['Recover is used to regain control of a program from panic or error-condition. It stops the terminating sequence and resumes the normal execution. It is called from the deferred function. It retrieves the error value passed through the call of panic. Normally, it returns nil which has no other effect. ']","['https://www.javatpoint.com/go-defer', 'https://www.javatpoint.com/go-error', 'https://www.javatpoint.com/go-defer', 'https://www.javatpoint.com/go-error', 'https://www.javatpoint.com/go-defer']",[],[],[],['Go recover() Example'],[],[],[],[],"['package main', 'import (', '""fmt""', 'func main() {', 'fmt.Println(SaveDivide(10, 0))', 'fmt.Println(SaveDivide(10, 10))', 'func SaveDivide(num1, num2 int) int {', 'defer func() {', 'fmt.Println(recover())', 'quotient := num1 / num2', 'return quotient']",['runtime error: integer divide by zero\n0\n<nil>\n1'],[],[]
31,['Go defer keyword'],['The defer keyword is generally used for cleaning purpose. The defer keyword postpones the execution of a function or statement until the end of the calling function. '],"['https://www.javatpoint.com/go-panic', 'https://www.javatpoint.com/go-recover', 'https://www.javatpoint.com/go-panic', 'https://www.javatpoint.com/go-recover', 'https://www.javatpoint.com/go-panic']",[],[],[],['Go defer Example'],[],[],['It executes code (a function or expression) when the enclosing function returns before the closing curly brace }. It is also executed if an error occurs during the execution of the enclosing function. '],[],"['package main', 'import (', '""fmt""', 'func main() {', 'defer print1(""Hi..."")', 'print2(""there"")', 'func  print1(s string)  {', 'fmt.Println(s)', 'func print2(s string)  {', 'fmt.Println(s)']",['there\nHi...'],[],[]
32,['Go Panic'],"['Go panic is a mechanism by which we handle error situations. Panic can be used to abort a function execution. When a function calls panic, its execution stops and the control flows to the associated deferred function. ']","['https://www.javatpoint.com/go-concurrency', 'https://www.javatpoint.com/go-defer', 'https://www.javatpoint.com/go-concurrency', 'https://www.javatpoint.com/go-defer', 'https://www.javatpoint.com/go-concurrency']",[],[],[],"['Go Panic Example 1:', 'Go Panic Example 2']",[],['This termination sequences is called panicking and can be controlled by the built-in function recover.'],"[""The caller of this function also gets terminated and caller's deferred function gets executed (if present any). This process continues till the program terminates. Now the error condition is reported.""]",[],"['package main', 'import ""os""', 'func main() {', 'panic(""Error Situation"")', '_, err := os.Open(""/tmp/file"")', 'if err != nil {', 'panic(err)', 'package main', 'import ""fmt""', 'func main() {', 'fmt.Println(""Calling x from main."")', 'fmt.Println(""Returned from x."")', 'func x() {', 'defer func() {', 'if r := recover(); r != nil {', 'fmt.Println(""Recovered in x"", r)', 'fmt.Println(""Executing x..."")', 'fmt.Println(""Calling y."")', 'fmt.Println(""Returned normally from y."")', 'func y(i int) {', 'fmt.Println(""Executing y...."")', 'if i > 2 {', 'fmt.Println(""Panicking!"")', 'panic(fmt.Sprintf(""%v"" , i))', 'defer fmt.Println(""Defer in y"", i)', 'fmt.Println(""Printing in y"", i)', 'y(i + 1)']","['panic: Error Situation\n\ngoroutine 1 [running]:\nmain.main()\n/Users/pro/GoglandProjects/Panic/panic example1.go:6 +0x39', 'Calling x from main.\nExecuting x...\nCalling y.\nExecuting y....\nPrinting in y 0\nExecuting y....\nPrinting in y 1\nExecuting y....\nPrinting in y 2\nExecuting y....\nPanicking!\nDefer in y 2\nDefer in y 1\nDefer in y 0\nRecovered in x 3\nReturned from x.']",[],[]
33,['Go Concurrency'],['Large programs are divided into smaller sub-programs. Programs which run their smaller components at the same time is known as concurrency. '],"['https://www.javatpoint.com/go-race', 'https://www.javatpoint.com/go-defer', 'https://www.javatpoint.com/go-race', 'https://www.javatpoint.com/go-defer', 'https://www.javatpoint.com/go-race']",[],[],"['Goroutines', 'Go Concurrency Example']",[],[],['The parts of an application that run concurrently are called goroutines. Goroutines and channels are used for structuring concurrent programs.'],"['A process is an independently executing entity running in a machine which runs in its own address space in memory. A process has threads which are simultaneously executing entities. Threads share the same address space of the process. ', 'Goroutines are lightweight, much lighter than a thread. Goroutines run in the same address space, so access to shared memory must be synchronized; This can be done by sync package, but it is recommended to use channels to synchronize goroutines.', ""A goroutine is implemented as a function or method. It is called (invoked) with the 'go' keyword. When the goroutine finishes, nothing is returned to the caller function.""]",[],"['package main', 'import (', '""fmt""', '""time""', '""sync""', 'var wg = sync.WaitGroup{}', 'func main() {', 'wg.Add(2)', 'go fun1()', 'go fun2()', 'wg.Wait()', 'func fun1(){', 'for  i:=0;i<10;i++{', 'fmt.Println(""fun1,  ->"",i)', 'time.Sleep(time.Duration(5*time.Millisecond))', 'wg.Done()', 'func fun2(){', 'for i:=0;i<10;i++{', 'fmt.Println(""fun2,  ->"",i)', 'time.Sleep(time.Duration(10*time.Millisecond))', 'wg.Done()']","['fun2,  -> 0\nfun1,  -> 0\nfun1,  -> 1\nfun2,  -> 1\nfun1,  -> 2\nfun1,  -> 3\nfun2,  -> 2\nfun1,  -> 4\nfun1,  -> 5\nfun2,  -> 3\nfun1,  -> 6\nfun1,  -> 7\nfun2,  -> 4\nfun1,  -> 8\nfun1,  -> 9\nfun2,  -> 5\nfun2,  -> 6\nfun2,  -> 7\nfun2,  -> 8\nfun2,  -> 9']",[],[]
34,['Go Race'],['A race condition occurs in Go when two or more goroutines try to access the same resource. It may happen when a variable attempts to read and write the resource without any regard to other routines. '],"['https://www.javatpoint.com/go-mutex', 'https://www.javatpoint.com/go-concurrency', 'https://www.javatpoint.com/go-mutex', 'https://www.javatpoint.com/go-concurrency', 'https://www.javatpoint.com/go-mutex']",[],[],[],[],[],[],"['As you can see in the above example, the count resource is accessed by 2 go routines. Each routine iterates to 10 times. In such case, the count variable should be 20 at last. But it is not so because it is simulating race condition.']",[],"['package main', 'import (', '""sync""', '""time""', '""math/rand""', '""fmt""', 'var wait sync.WaitGroup', 'var count int', 'func  increment(s string)  {', 'for i :=0;i<10;i++ {', 'x := count', 'x++;', 'time.Sleep(time.Duration(rand.Intn(4))*time.Millisecond)', 'count = x;', 'fmt.Println(s, i,""Count: "",count)', 'wait.Done()', 'func main(){', 'wait.Add(2)', 'go increment(""foo: "")', 'go increment(""bar: "")', 'wait.Wait()', 'fmt.Println(""last count value "" ,count)']",['foo:  0 Count:  1\nbar:  0 Count:  1\nfoo:  1 Count:  2\nfoo:  2 Count:  3\nfoo:  3 Count:  4\nbar:  1 Count:  2\nfoo:  4 Count:  5\nfoo:  5 Count:  6\nfoo:  6 Count:  7\nbar:  2 Count:  3\nbar:  3 Count:  4\nbar:  4 Count:  5\nfoo:  7 Count:  8\nfoo:  8 Count:  9\nbar:  5 Count:  6\nbar:  6 Count:  7\nfoo:  9 Count:  10\nbar:  7 Count:  8\nbar:  8 Count:  9\nbar:  9 Count:  10\nlast count value  10'],[],[]
35,['Go Mutex'],"['Mutual Exclusion locks, or mutexes can be used to synchronize access to state and safely access data across many goroutines. It acts as a guard to the entrance of the critical section of code so that only one thread can enter the critical section at a time.']","['https://www.javatpoint.com/go-atomic-variable', 'https://www.javatpoint.com/go-race', 'https://www.javatpoint.com/go-atomic-variable', 'https://www.javatpoint.com/go-race', 'https://www.javatpoint.com/go-atomic-variable']",[],[],[],[],[],['Go Mutex Example'],[],"['We set a lock around particular lines of code with it. While one Goroutine holds the lock, all other Goroutines are prevented from executing any lines of code protected by the same mutex, and are forced to wait until the lock is yielded before they can proceed.']","['package main', 'import (', '""sync""', '""time""', '""math/rand""', '""fmt""', 'var wait sync.WaitGroup', 'var count int', 'var mutex sync.Mutex', 'func  increment(s string)  {', 'for i :=0;i<10;i++ {', 'mutex.Lock()', 'x := count', 'x++;', 'time.Sleep(time.Duration(rand.Intn(10))*time.Millisecond)', 'count = x;', 'fmt.Println(s, i,""Count: "",count)', 'mutex.Unlock()', 'wait.Done()', 'func main(){', 'wait.Add(2)', 'go increment(""foo: "")', 'go increment(""bar: "")', 'wait.Wait()', 'fmt.Println(""last count value "" ,count)']","['bar:  0 Count:  1', 'bar:  1 Count:  2', 'bar:  2 Count:  3', 'bar:  3 Count:  4', 'bar:  4 Count:  5', 'bar:  5 Count:  6', 'bar:  6 Count:  7', 'bar:  7 Count:  8', 'bar:  8 Count:  9', 'bar:  9 Count:  10', 'foo:  0 Count:  11', 'foo:  1 Count:  12', 'foo:  2 Count:  13', 'foo:  3 Count:  14', 'foo:  4 Count:  15', 'foo:  5 Count:  16', 'foo:  6 Count:  17', 'foo:  7 Count:  18', 'foo:  8 Count:  19', 'foo:  9 Count:  20', 'last count value  20']",[],[]
36,['Go Atomic Variable'],"['Atomic variables are used to manage state, though sync/atomic package and avoid race conditions. Atomic counters can be accessed by multiple go routines.']","['https://www.javatpoint.com/go-channel', 'https://www.javatpoint.com/go-mutex', 'https://www.javatpoint.com/go-channel', 'https://www.javatpoint.com/go-mutex', 'https://www.javatpoint.com/go-channel']",[],[],[],['Go Atomic Variable Example'],[],[],[],[],"['package main', 'import (', '""sync""', '""time""', '""math/rand""', '""fmt""', '""sync/atomic""', 'var wait sync.WaitGroup', 'var count int64', 'func  increment(s string)  {', 'for i :=0;i<10;i++ {', 'time.Sleep(time.Duration((rand.Intn(3)))*time.Millisecond)', 'atomic.AddInt64(&count,1)', 'fmt.Println(s,i,""Count ->"",count)', 'wait.Done()', 'func main(){', 'wait.Add(2)', 'go increment(""foo: "")', 'go increment(""bar: "")', 'wait.Wait()', 'fmt.Println(""last count value "" ,count)']",['foo:  0 Count -> 1\nfoo:  1 Count -> 2\nbar:  0 Count -> 3\nbar:  1 Count -> 4\nbar:  2 Count -> 5\nfoo:  2 Count -> 6\nbar:  3 Count -> 7\nbar:  4 Count -> 8\nbar:  5 Count -> 9\nfoo:  3 Count -> 10\nbar:  6 Count -> 11\nbar:  7 Count -> 12\nfoo:  4 Count -> 13\nfoo:  5 Count -> 14\nbar:  8 Count -> 15\nbar:  9 Count -> 16\nfoo:  6 Count -> 17\nfoo:  7 Count -> 18\nfoo:  8 Count -> 19\nfoo:  9 Count -> 20\nlast count value  20'],[],[]
37,['Go Channel'],"['The channel acts as a pipe by which we send typed values from one Goroutine to another. It guarantees synchronization since only one Goroutine has access to a data item at any given time. The ownership of the data is passed between different Goroutine. Hence, By design it avoids the pitfalls of shared memory and prevent race condition.']","['https://www.javatpoint.com/go-worker-pools', 'https://www.javatpoint.com/go-atomic-variable', 'https://www.javatpoint.com/go-worker-pools', 'https://www.javatpoint.com/go-atomic-variable', 'https://www.javatpoint.com/go-worker-pools']",[],[],[],['Go Channel Example'],[],[],[],[],"['package main', 'import ""fmt""', 'import ""time""', 'func worker(done chan bool) {', 'fmt.Print(""working..."")', 'time.Sleep(time.Second)', 'fmt.Println(""done"")', 'done <- true', 'func main() {', 'done := make(chan bool, 1)', 'go worker(done)', '<-done']",['working...done'],[],[]
38,['Go Worker Pools'],['Worker pools is a design in which a fixed number of m workers (Go goroutines) works on n tasks in a work queue (Go channel). The work resides in a queue until a worker finish its current task and pull a new one.'],"['https://www.javatpoint.com/go-time', 'https://www.javatpoint.com/go-channel', 'https://www.javatpoint.com/go-time', 'https://www.javatpoint.com/go-channel', 'https://www.javatpoint.com/go-time']",[],[],[],[],[],"[""Let's See it by an example""]",[],"[""In this example, 2 workers are started and 9 work items are in put onto a job channel. Workers have a work loop with a time.Sleep so that each ends up working 2 jobs. close is used on the channel after all the work's been put onto it, which signals to all 2 workers that they can exit their work loop by dropping them out of their loop on range.""]","['package main', 'import (', 'func worker(id int, jobs <-chan int, results chan<- int) {', 'for j := range jobs {', 'fmt.Println(""worker"", id, ""processing job"", j)', 'time.Sleep(time.Second)', 'results <- j * 2', 'func main() {', 'job := make(chan int, 10)', 'result := make(chan int, 10)', 'for w := 1; w <= 2; w++ {', 'go worker(w, job, result)', 'for j := 1; j <= 9; j++ {', 'job <- j', 'close(job)', 'for a := 1; a <= 9; a++ {', '<-result']",['worker 2 processing job 1\nworker 1 processing job 2\nworker 2 processing job 3\nworker 1 processing job 4\nworker 1 processing job 5\nworker 2 processing job 6\nworker 1 processing job 7\nworker 2 processing job 8'],[],[]
39,['Go Time'],['Go has very good support for the time manipulations. Unix epoch time is used as reference for time manipulations.'],"['https://www.javatpoint.com/go-epoch', 'https://www.javatpoint.com/go-worker-pools', 'https://www.javatpoint.com/go-epoch', 'https://www.javatpoint.com/go-worker-pools', 'https://www.javatpoint.com/go-epoch']",[],[],[],[],[],['We invoke these methods by using time object.'],"['we can built a time object by using Date method provided in the time package. The package contains methods like year(), month(), day(), location() etc.']",[],"['package main', 'import ""fmt""', 'import ""time""', 'func main() {', 'p := fmt.Println', 'present := time.Now()// current time', 'p(present)', 'DOB := time.Date(1993, 02, 28, 9,04,39,213 ,time.Local)', 'fmt.Println(DOB)', 'fmt.Println(DOB.Year())', 'fmt.Println(DOB.Month())', 'fmt.Println(DOB.Day())', 'fmt.Println(DOB.Hour())', 'fmt.Println(DOB.Minute())', 'fmt.Println(DOB.Second())', 'fmt.Println(DOB.Nanosecond())', 'fmt.Println(DOB.Location())', 'fmt.Println(DOB.Weekday())', 'fmt.Println(DOB.Before(present))', 'fmt.Println(DOB.After(present))', 'fmt.Println(DOB.Equal(present))', 'diff := present.Sub(DOB)', 'fmt.Println(diff)', 'fmt.Println(diff.Hours())', 'fmt.Println(diff.Minutes())', 'fmt.Println(diff.Seconds())', 'fmt.Println(diff.Nanoseconds())', 'fmt.Println(DOB.Add(diff))', 'fmt.Println(DOB.Add(-diff))', 'package main', 'import (', 'func main() {', 'present := time.Now()', 'fmt.Println(""Today : "", present.Format(""Mon, Jan 2, 2006 at 3:04pm""))', 'someTime := time.Date(2017, time.March, 30, 11, 30, 55, 123456, time.Local)', 'sameTime := someTime.Equal(present)', 'fmt.Println(""someTime equals to now ? : "", sameTime)', 'diff := present.Sub(someTime)', 'days := int(diff.Hours() / 24)', 'fmt.Printf(""30th March 2017 was %d days ago \\n"", days)']","['2017-10-04 17:10:13.474931994 +0530 IST m=+0.000334969\n1993-02-28 09:04:39.000000213 +0530 IST\n1993\nFebruary\n28\n9\n4\n39\n213\nLocal\nSunday\ntrue\nfalse\nfalse\n215624h5m34.474931781s\n215624.09290970326\n1.2937445574582197e+07\n7.762467344749318e+08\n776246734474931781\n2017-10-04 17:10:13.474931994 +0530 IST\n1968-07-25 00:59:04.525068432 +0530 IST\n\nProcess finished with exit code 0', 'Today :  Wed, Oct 4, 2017 at 5:15pm\nsomeTime equals to now ? :  false\n30th March 2017 was 188 days ago']",[],[]
40,['GO Epoch'],"['In Go, We can produce the time in seconds, milliseconds, nanosecond . The time package has the required methods like secs, nanos etc which help us.']","['https://www.javatpoint.com/go-tickers', 'https://www.javatpoint.com/go-time', 'https://www.javatpoint.com/go-tickers', 'https://www.javatpoint.com/go-time', 'https://www.javatpoint.com/go-tickers']",[],[],[],[],[],['The reference time is the unix epoch. We may also convert nanoseconds or milliseconds into time format.'],[],[],"['package main', 'import ""fmt""', 'import ""time""', 'func main() {', 'p := fmt.Println', 'current_time := time.Now()', 'secs := current_time.Unix()', 'nanos := current_time.UnixNano()', 'fmt.Println(current_time)', 'millis := nanos / 1000000', 'p(secs)', 'p(millis)', 'p(nanos)', 'p(time.Unix(secs, 0))', 'p(time.Unix(0, nanos))']",['2017-10-06 17:34:13.971527666 +0530 IST m=+0.000334769\n1507291453\n1507291453971\n1507291453971527666\n2017-10-06 17:34:13 +0530 IST\n2017-10-06 17:34:13.971527666 +0530 IST'],[],[]
41,['Go Tickers'],['Go Tickers are used when we want to some work at regular interval of time. Tickers can be stopped like timers using the Stop() method.'],"['https://www.javatpoint.com/go-file-io', 'https://www.javatpoint.com/go-epoch', 'https://www.javatpoint.com/go-file-io', 'https://www.javatpoint.com/go-epoch', 'https://www.javatpoint.com/go-file-io']",[],[],[],"['Go Tickers Example', 'Go Ticker Example 2']",[],[],"['The NewTicker() method returns a new Ticker having a channel which send the time according to the duration argument. The duration must be larger than zero, if not, the ticker will panic.', ""The Tick() is a wrapper for NewTicker which provides access to the ticking channel. The Tick() method is useful for clients who don't want to shutdown the Ticker.""]",[],"['package main', 'import ""time""', 'import ""fmt""', 'func main() {', 'tickerValue := time.NewTicker(time.Millisecond * 100)', 'go func() {', 'for t := range tickerValue.C {', 'fmt.Println(""Tick at"", t)', 'time.Sleep(time.Millisecond * 500)', 'tickerValue.Stop()', 'fmt.Println(""Ticker stopped"")', 'package main', 'import (', 'func haveFun(s string) {', 'log.Printf(""\\tA: Let\'s have fun: %v"", s)', 'func doPolling() {', 'for _ = range time.Tick(2 * time.Second) {', 'haveFun(""\\t B : Okay!"")', 'func main() {', 'go doPolling()', 'select {} //The select statement lets a goroutine wait on multiple communication operations.']","['Tick at 2017-10-07 17:26:35.946279716 +0530 IST m=+0.101345812\nTick at 2017-10-07 17:26:36.046371811 +0530 IST m=+0.201437907\nTick at 2017-10-07 17:26:36.146417657 +0530 IST m=+0.301483753\nTick at 2017-10-07 17:26:36.24851386 +0530 IST m=+0.403579956\nTick at 2017-10-07 17:26:36.346476978 +0530 IST m=+0.501543074\nTicker stopped', ""2017/10/07 18:15:15 \tA: Let's have fun: \t B : Okay!\n2017/10/07 18:15:17 \tA: Let's have fun: \t B : Okay!\n2017/10/07 18:15:19 \tA: Let's have fun: \t B : Okay!\n2017/10/07 18:15:21 \tA: Let's have fun: \t B : Okay!\n2017/10/07 18:15:23 \tA: Let's have fun: \t B : Okay!\n2017/10/07 18:15:25 \tA: Let's have fun: \t B : Okay!""]",[],[]
42,['Go File I/O'],['In go os.file objects are used for file manipulations. os.File objects are also called filehandles.'],"['https://www.javatpoint.com/go-http-server', 'https://www.javatpoint.com/go-channel', 'https://www.javatpoint.com/go-http-server', 'https://www.javatpoint.com/go-channel', 'https://www.javatpoint.com/go-http-server']",[],[],[],[],[],"['inputFile, inputError = os.Open(""input.dat"") results in an error. ', 'Go File I/O Example']","['open function which is in os package is used to open files in Go. ReadFile() in the io/ioutil package is used to read the file. This method returns []byte array of read bytes. file.WriteString method can be used to write to the file.', 'We use defer file.close() right after opening the file to make sure that the file is closed as soon as the function completes. If a file does not exists or the program has not the sufficient rights to open the file then ']",[],"['package main', 'import (', '""os""', '""log""', '""io/ioutil""', '""fmt""', 'func main() {', 'file, err := os.Create(""file.txt"")', 'if err != nil {', 'log.Fatal(err)', 'file.WriteString(""Hi... there"")', 'file.Close()', 'stream, err:= ioutil.ReadFile(""file.txt"")', 'if err != nil {', 'log.Fatal(err)', 'readString := string(stream)', 'fmt.Println(readString)']",['Hi... there'],[],[]
43,['Go HTTP Server'],['Go can be also used to create web applications. Net/http is a library package used to build web applications. It has HandelFunc() function which routes the incoming request to its corresponding function. The ListenAndServe function is used to create a resource server which listens to the provided port. The function someFunc has the http.ResponceWriter and http.Request type parameter. It is responsible to take the incoming request and after processing the return response.'],"['https://www.javatpoint.com/go-rest-api', 'https://www.javatpoint.com/go-file-io', 'https://www.javatpoint.com/go-rest-api', 'https://www.javatpoint.com/go-file-io', 'https://www.javatpoint.com/go-rest-api']",['https://static.javatpoint.com/go/images/go-http-server1.png'],[],[],[],[],['Go http server example'],[],[],"['package main', 'import (', '""fmt""', '""net/http""', 'func main() {', 'http.HandleFunc(""/"",MyHandler1)', 'http.HandleFunc(""/John"",MyHandler2)', 'http.ListenAndServe("":8080"",nil)', 'func MyHandler1(w http.ResponseWriter,r *http.Request){', 'fmt.Fprint(w,""Hello World\\n"")', 'func MyHandler2(w http.ResponseWriter,r *http.Request){', 'fmt.Fprint(w,""Hello John\\n"")']",[],[],[]
44,['Go URL Parsing'],"['Go has good support for url parsing. URL contains a scheme, authentication info, host, port, path, query params, and query fragment. we can parse URL and deduce what are the parameter is coming to the server and then process the request accordingly. ']","['https://www.javatpoint.com/html-aside-tag', 'https://www.javatpoint.com/html-figcaption-tag', 'https://www.javatpoint.com/http://localhost:8080/company?name=Tom&age=27', 'https://www.javatpoint.com/html-aside-tag', 'https://www.javatpoint.com/html-figcaption-tag', 'https://www.javatpoint.com/html-aside-tag']",['https://static.javatpoint.com/go/images/go-url-passing1.png'],[],[],"['Go URL Parsing Example 1', 'Go URL Parsing Example 2']",[],"['The net/url package has the required functions like Scheme, User, Host, Path, RawQuery etc.', 'Enter the url in browser: http://localhost:8080/company?name=Tom&age=27']",[],[],"['package main', 'import ""fmt""', 'import ""net""', 'import ""net/url""', 'func main() {', 'p := fmt.Println', 's := ""Mysql://admin:password@serverhost.com:8081/server/page1?key=value&key2=value2#X""', 'u, err := url.Parse(s)', 'if err != nil {', 'panic(err)', 'p(u.Scheme)\t//prints Schema of the URL', 'p(u.User)\t// prints the parsed user and password', ""p(u.User.Username())\t//prints user's name"", 'pass, _ := u.User.Password()', 'p(pass)\t\t//prints user password', 'p(u.Host) \t\t//prints host and port', 'host, port, _ := net.SplitHostPort(u.Host)\t\t //splits host name and port', 'p(host)\t\t//prints host', 'p(port)\t\t//prints port', 'p(u.Path)\t\t//prints the path', 'p(u.Fragment)\t\t//prints fragment path value', 'p(u.RawQuery)\t\t//prints query param name and value as provided', 'm, _ := url.ParseQuery(u.RawQuery)\t\t//parse query param into map', 'p(m)\t\t//prints param map', 'p(m[""key2""][0])\t\t//prints specific key value', 'package main', 'import (', '""net/http""', 'func main() {', 'http.HandleFunc(""/company"", func(res http.ResponseWriter, req *http.Request) {', 'displayParameter(res, req)', 'println(""Enter the url in browser:  http://localhost:8080/company?name=Tom&age=27"")', 'http.ListenAndServe("":8080"", nil)', 'func displayParameter(res http.ResponseWriter, req *http.Request) {', 'io.WriteString(res, ""name: ""+req.FormValue(""name""))', 'io.WriteString(res, ""\\nage: ""+req.FormValue(""age""))']","['mysql', 'admin:password', 'admin', 'password', 'serverhost.com:8081', 'serverhost.com', '8081', '/server/page1', 'X', 'key=value&key2=value2', 'map[key:[value] key2:[value2]]', 'value2']",[],[]
45,['Go REST API Example'],['Output:'],"['https://www.javatpoint.com/go-base64-encoding', 'https://www.javatpoint.com/go-http-server', 'https://www.javatpoint.com/go-base64-encoding', 'https://www.javatpoint.com/go-http-server', 'https://www.javatpoint.com/go-base64-encoding']",[],[],[],[],[],"['Method --> Get,', 'Method --> GET,', 'Method --> POST,', 'Method --> DELETE,']",[],[],"['package main', 'import (', '""encoding/json""', '""log""', '""net/http""', '""github.com/gorilla/mux""', 'type Employee struct {', 'ID        string   \'json:""id,omitempty""\'', 'Firstname string   \'json:""firstname,omitempty""\'', 'Lastname  string   \'json:""lastname,omitempty""\'', 'Address   *Address \'json:""address,omitempty""\'', 'type Address struct {', 'City  string \'json:""city,omitempty""\'', 'State string \'json:""state,omitempty""\'', 'var emp []Employee', 'func GetEmpIdEndpoint(w http.ResponseWriter, req *http.Request) {', 'params := mux.Vars(req)', 'for _, item := range emp {', 'if item.ID == params[""id""] {', 'json.NewEncoder(w).Encode(item)', 'return', 'json.NewEncoder(w).Encode(&Employee{})', 'func GetEmployeeEndpoint(w http.ResponseWriter, req *http.Request) {', 'json.NewEncoder(w).Encode(emp)', 'func CreateEmployeeEndpoint(w http.ResponseWriter, req *http.Request) {', 'params := mux.Vars(req)', 'var person Employee', '_ = json.NewDecoder(req.Body).Decode(&person)', 'person.ID = params[""id""]', 'emp = append(emp, person)', 'json.NewEncoder(w).Encode(emp)', 'func DeleteEmployeeEndpoint(w http.ResponseWriter, req *http.Request) {', 'params := mux.Vars(req)', 'for index, item := range emp {', 'if item.ID == params[""id""] {', 'emp = append(emp[:index], emp[index+1:]...)', 'break', 'json.NewEncoder(w).Encode(emp)', 'func main() {', 'router := mux.NewRouter()', 'emp = append(emp, Employee{ID: ""1"", Firstname: ""Nic"", Lastname: ""Raboy"",', 'Address: &Address{City: ""Dublin"", State: ""CA""}})', 'emp = append(emp, Employee{ID: ""2"", Firstname: ""Maria"", Lastname: ""Raboy""})', 'router.HandleFunc(""/employee"", GetEmployeeEndpoint).Methods(""GET"")', 'router.HandleFunc(""/employee/{id}"", GetEmpIdEndpoint).Methods(""GET"")', 'router.HandleFunc(""/employee/{id}"", CreateEmployeeEndpoint).Methods(""POST"")', 'router.HandleFunc(""/employee/{id}"", DeleteEmployeeEndpoint).Methods(""DELETE"")', 'log.Fatal(http.ListenAndServe("":12345"", router))', 'url -->http://localhost:8080/employee', 'Response :', '[{""id"":""1"",""firstname"":""James"",""lastname"":""Johnson"",""address"":{""city"":""Hoseynabad"",""state"":""Kavir""}}', ',{""id"":""2"",""firstname"":""Sarah"",""lastname"":""Taylor"",""address"":{""city"":""Kamenka"",""state"":""Vyborgsky""}}]', 'url -->http://localhost:8080/employee/1', 'Response :', '{""id"":""1"",""firstname"":""James"",""lastname"":""Johnson"",""address"":', '""city"":""Hoseynabad"",""state"":""Kavir""}}', 'url -->http://localhost:8080/employee/3', 'Response :', '[{""id"":""1"",""firstname"":""James"",""lastname"":""Johnson"",""address"":{""city"":""Hoseynabad"",""state"":""Kavir""}},', '{""id"":""2"",""firstname"":""Sarah"",""lastname"":""Taylor"",""address"":{""city"":""Kamenka"",""state"":""Vyborgsky""}},', '{""id"":""3"",""firstname"":""Roger"",""lastname"":""Ponting"",""address"":{""city"":""San Pedro"",""state"":""LA""}}]', 'url -->http://localhost:8080/employee/2', 'Response :', '[{""id"":""1"",""firstname"":""James"",""lastname"":""Johnson"",""address"":{""city"":""Hoseynabad"",""state"":""Kavir""}},', '{""id"":""3"",""firstname"":""Roger"",""lastname"":""Ponting"",""address"":{""city"":""San Pedro"",""state"":""LA""}}]']",['You can check the output by installing postman extension for chrome browser'],[],[]
46,['Go Base64 Encoding'],['we can encode String and url in Go. Go has Encoder which takes byte array and convert into string encoding.'],"['https://www.javatpoint.com/go-random-number', 'https://www.javatpoint.com/go-rest-api', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/go-random-number', 'https://www.javatpoint.com/go-rest-api', 'https://www.javatpoint.com/go-random-number']",[],[],[],['Go Base64 Example'],[],['The Decoder takes the encoded value and covert it to the original string.'],[],[],"['package main', 'import ""fmt""', 'import b64 ""encoding/base64""', 'func main() {', 'data := ""JavaTpoint@12345!@#$%^&*()""', 'strEncode :=b64.StdEncoding.EncodeToString([]byte(data))', 'fmt.Println(""value to be encode  ""+data)', 'fmt.Println(""Encoden value:  ""+strEncode)', 'fmt.Println()', 'fmt.Print(""Value to be decode  ""+strEncode)', 'strDecode, _ := b64.StdEncoding.DecodeString(strEncode)', 'fmt.Println(""Decoded value  ""+string( strDecode))', 'fmt.Println()', 'url := ""https://golang.org/ref/spec""', 'fmt.Println(""url to be encode  ""+url)', 'urlEncode := b64.URLEncoding.EncodeToString([]byte(url))', 'fmt.Println(""Encoded url  ""+urlEncode)', 'fmt.Println(""value to be decode  ""+urlEncode)', 'strDecode2,_ := b64.URLEncoding.DecodeString(urlEncode)', 'fmt.Println(""Decoded value  ""+string(strDecode2))']",['value to be encode  [email\xa0protected][email\xa0protected]#$%^&*()\nEncoden value:  SmF2YVRwb2ludEAxMjM0NSFAIyQlXiYqKCk=\n\nValue to be decode  SmF2YVRwb2ludEAxMjM0NSFAIyQlXiYqKCk=Decoded value  [email\xa0protected][email\xa0protected]#$%^&*()\n\nurl to be encode  https://golang.org/ref/spec\nEncoded url  aHR0cHM6Ly9nb2xhbmcub3JnL3JlZi9zcGVj\nvalue to be decode  aHR0cHM6Ly9nb2xhbmcub3JnL3JlZi9zcGVj\nDecoded value  https://golang.org/ref/spec\n\nProcess finished with exit code 0'],[],[]
47,['Go Random Number Generation'],['We can generate random number using rand object. We should provide some seeding to rand object so that the number generated are different. If we does not provide the seeding then the compiler always produce the same result.'],"['https://www.javatpoint.com/go-sorting', 'https://www.javatpoint.com/go-base64-encoding', 'https://www.javatpoint.com/go-sorting', 'https://www.javatpoint.com/go-base64-encoding', 'https://www.javatpoint.com/go-sorting']",[],[],[],['Go Random Number Generation'],[],[],[],[],"['package main', 'import ""fmt""', 'import (', '""math/rand""', 'func main() {', 'fmt.Print(rand.Intn(100))  //will produce random integer between 0 to 100', 'fmt.Println()', 'fmt.Print(rand.Float64())\t// will produce random number between 0 to 1', 'fmt.Println()', 'rand.Seed(time.Now().Unix())  // seeding do that random number will produced', 'myrand := random(1, 20)', 'fmt.Println(myrand)', 'func random(min, max int) int {', 'return rand.Intn(max - min) + min']",['81\n0.9405090880450124\n17'],[],[]
48,['Go Sorting'],['Go has sort package which can be used for sorting the built-in as well as user defined data types.'],"['https://www.javatpoint.com/go-json', 'https://www.javatpoint.com/go-random-number', 'https://www.javatpoint.com/go-json', 'https://www.javatpoint.com/go-random-number', 'https://www.javatpoint.com/go-json']",[],[],[],['Go Sort Example'],[],"['The sort package has different methods to sort different data types like Ints(), Float64s(), Strings() etc.', 'We can check if the values are sort or not by using the AreSorted() methods like Float64sAreSorted(), IntsAreSorted() etc. ', 'Then we have to cast our array into the implemented type.']","['We can also implement our own sorting schema, suppose we want to sort an array of string according to its length. In order to do that we have to implement our own Less, Len and Swap methods defined in the sort Interface.']",[],"['package main', 'import (', 'func main() {', 'intValue := []int{10, 20, 5, 8}', 'sort.Ints(intValue)', 'fmt.Println(""Ints:   "", intValue)', 'floatValue := []float64{10.5, 20.5, 5.5, 8.5}', 'sort.Float64s(floatValue)', 'fmt.Println(""floatValue:   "", floatValue)', 'stringValue := []string{""Raj"", ""Mohan"", ""Roy""}', 'sort.Strings(stringValue)', 'fmt.Println(""Strings:"", stringValue)', 'str := sort.Float64sAreSorted(floatValue)', 'fmt.Println(""Sorted: "", str)', 'package main', 'import ""sort""', 'import ""fmt""', 'type  OrderByLengthDesc []string', 'func (s OrderByLengthDesc) Len() int {', 'return len(s)', 'func (str OrderByLengthDesc) Swap(i, j int) {', 'str[i], str[j] = str[j], str[i]', 'func (s OrderByLengthDesc) Less(i, j int) bool {', 'return len(s[i]) > len(s[j])', 'func main() {', 'city := []string{""New York"", ""London"",""Washington"",""Delhi""}', 'sort.Sort(OrderByLengthDesc(city))', 'fmt.Println(city)']","['Ints:    [5 8 10 20]\nfloatValue:    [5.5 8.5 10.5 20.5]\nStrings: [Mohan Raj Roy]\nSorted:  true', '[Washington New York London Delhi]']",[],[]
49,['Go JSON'],['Go has built-in support for JSON encoding and decoding. it also supports custom datatypes.'],"['https://www.javatpoint.com/go-programming-interview-questions', 'https://www.javatpoint.com/go-sorting', 'https://www.javatpoint.com/go-programming-interview-questions', 'https://www.javatpoint.com/go-sorting', 'https://www.javatpoint.com/go-programming-interview-questions']",[],[],[],"['Go JSON Example 1', 'Go JSON Example 2 (User Defined Data Type)']",[],"['The Marshal function is used to convert go data types into JSON format. ', 'Marshal returns the JSON encoding of v. ', 'The decoding of JSON is done using Unmarshal function. ']","[""Boolean is converted to JSON booleans. Floating point, integer, and Number are converted to JSON numbers. The map's key type must either be a string, an integer type, or implement encoding.TextMarshaler."", 'Unmarshal decodes JSON-encoded value and stores the result in the value pointed to by v. If v is nil or not a pointer, Unmarshal returns an InvalidUnmarshalError.']","['Marshal function syntax is:\n\n""func Marshal(v interface{}) ([]byte, error)""\n\nMarshal returns the JSON encoding of v. \nBoolean is converted to JSON booleans. Floating point, integer, and Number are converted to JSON numbers. The map\'s key type must either be a string, an integer type, or implement encoding.TextMarshaler.\nThe decoding of JSON is done using Unmarshal function. \nUnmarshal function syntax is:\n\n""func Unmarshal(data []byte, v interface{}) error""\n\nUnmarshal decodes JSON-encoded value and stores the result in the value pointed to by v. If v is nil or not a pointer, Unmarshal returns an InvalidUnmarshalError.\nWe can also customize the fields stored under the ""json"" key in the struct field\'s tag. we can have name of the field, followed by a comma-separated list of options. Like\n\nField int \'json:""myName""\' // The appears in JSON as key ""myName"".\nField int \'json:""myName,omitempty?\'// The field is omitted from the object if its value is empty,\nField int \'json:""-""\' //// Field is ignored by this package.\n\nGo JSON Example 1\n\npackage main\nimport ""encoding/json""\nimport ""fmt""\n\nfunc main() {\n\tbolType, _ := json.Marshal(false) //boolean Value\n\tfmt.Println(string(bolType))\n\tintType, _ := json.Marshal(10) // integer value\n\tfmt.Println(string(intType))\n\tfltType, _ := json.Marshal(3.14) //float value\n\tfmt.Println(string(fltType))\n\tstrType, _ := json.Marshal(""JavaTpoint"") // string value\n\tfmt.Println(string(strType))\n\tslcA := []string{""sun"", ""moon"", ""star""} //slice value\n\tslcB, _ := json.Marshal(slcA)\n\tfmt.Println(string(slcB))\n\tmapA := map[string]int{""sun"": 1, ""moon"": 2} //map value\n\tmapB, _ := json.Marshal(mapA)\n\tfmt.Println(string(mapB))\n}\n\nOutput:\nfalse\n10\n3.14\n""JavaTpoint""\n[""sun"",""moon"",""star""]\n{""moon"":2,""sun"":1}\n\nGo JSON Example 2 (User Defined Data Type)\n\npackage main\n\nimport (\n\t""encoding/json""\n\t""fmt""\n\t""os""\n)\n\ntype Response1 struct {\n\tPosition   int\n\tPlanet []string\n}\ntype Response2 struct {\n\tPosition   int      \'json:""position""\'\n\tPlanet []string \'json:""planet""\'\n}\n\nfunc main()  {\n\tres1A := &Response1{\n\t\tPosition:   1,\n\t\tPlanet: []string{""mercury"", ""venus"", ""earth""}}\n\tres1B, _ := json.Marshal(res1A)\n\tfmt.Println(string(res1B))\n\n\tres2D := &Response2{\n\t\tPosition:   1,\n\t\tPlanet: []string{""mercury"", ""venus"", ""earth""}}\n\tres2B, _ := json.Marshal(res2D)\n\tfmt.Println(string(res2B))\n\n\n\tbyt := []byte(\'{""pi"":6.13,""place"":[""New York"",""New Delhi""]}`)\n\tvar dat map[string]interface{}\n\tif err := json.Unmarshal(byt, &dat); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(dat)\n\tnum := dat[""pi""].(float64)\n\tfmt.Println(num)\n\tstrs := dat[""place""].([]interface{})\n\tstr1 := strs[0].(string)\n\tfmt.Println(str1)\n\t\n\t\n\tstr := `{""Position"": 1, ""Planet"": [""mercury"", ""venus""]}`\n\tres := Response2{}\n\tjson.Unmarshal([]byte(str), &res)\n\tfmt.Println(res)\n\tfmt.Println(res.Planet[1])\n\tenc := json.NewEncoder(os.Stdout)\n\td := map[string]string{""1"":""mercury"" , ""2"": ""venus""}\n\tenc.Encode(d)\n\n}\n\nOutput:\n{""Position"":1,""Planet"":[""mercury"",""venus"",""earth""]}\n{""position"":1,""planet"":[""mercury"",""venus"",""earth""]}\nmap[pi:6.13 place:[New York New Delhi]]\n6.13\nNew York\n{1 [mercury venus]}\nvenus\n{""1"":""mercury"",""2"":""venus""}\n\n\n\nNext TopicGo Programming Interview Questions\n\n\n\n← prev\nnext →\n\n\n', 'Unmarshal function syntax is:\n\n""func Unmarshal(data []byte, v interface{}) error""\n\nUnmarshal decodes JSON-encoded value and stores the result in the value pointed to by v. If v is nil or not a pointer, Unmarshal returns an InvalidUnmarshalError.\nWe can also customize the fields stored under the ""json"" key in the struct field\'s tag. we can have name of the field, followed by a comma-separated list of options. Like\n\nField int \'json:""myName""\' // The appears in JSON as key ""myName"".\nField int \'json:""myName,omitempty?\'// The field is omitted from the object if its value is empty,\nField int \'json:""-""\' //// Field is ignored by this package.\n\nGo JSON Example 1\n\npackage main\nimport ""encoding/json""\nimport ""fmt""\n\nfunc main() {\n\tbolType, _ := json.Marshal(false) //boolean Value\n\tfmt.Println(string(bolType))\n\tintType, _ := json.Marshal(10) // integer value\n\tfmt.Println(string(intType))\n\tfltType, _ := json.Marshal(3.14) //float value\n\tfmt.Println(string(fltType))\n\tstrType, _ := json.Marshal(""JavaTpoint"") // string value\n\tfmt.Println(string(strType))\n\tslcA := []string{""sun"", ""moon"", ""star""} //slice value\n\tslcB, _ := json.Marshal(slcA)\n\tfmt.Println(string(slcB))\n\tmapA := map[string]int{""sun"": 1, ""moon"": 2} //map value\n\tmapB, _ := json.Marshal(mapA)\n\tfmt.Println(string(mapB))\n}\n\nOutput:\nfalse\n10\n3.14\n""JavaTpoint""\n[""sun"",""moon"",""star""]\n{""moon"":2,""sun"":1}\n\nGo JSON Example 2 (User Defined Data Type)\n\npackage main\n\nimport (\n\t""encoding/json""\n\t""fmt""\n\t""os""\n)\n\ntype Response1 struct {\n\tPosition   int\n\tPlanet []string\n}\ntype Response2 struct {\n\tPosition   int      \'json:""position""\'\n\tPlanet []string \'json:""planet""\'\n}\n\nfunc main()  {\n\tres1A := &Response1{\n\t\tPosition:   1,\n\t\tPlanet: []string{""mercury"", ""venus"", ""earth""}}\n\tres1B, _ := json.Marshal(res1A)\n\tfmt.Println(string(res1B))\n\n\tres2D := &Response2{\n\t\tPosition:   1,\n\t\tPlanet: []string{""mercury"", ""venus"", ""earth""}}\n\tres2B, _ := json.Marshal(res2D)\n\tfmt.Println(string(res2B))\n\n\n\tbyt := []byte(\'{""pi"":6.13,""place"":[""New York"",""New Delhi""]}`)\n\tvar dat map[string]interface{}\n\tif err := json.Unmarshal(byt, &dat); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(dat)\n\tnum := dat[""pi""].(float64)\n\tfmt.Println(num)\n\tstrs := dat[""place""].([]interface{})\n\tstr1 := strs[0].(string)\n\tfmt.Println(str1)\n\t\n\t\n\tstr := `{""Position"": 1, ""Planet"": [""mercury"", ""venus""]}`\n\tres := Response2{}\n\tjson.Unmarshal([]byte(str), &res)\n\tfmt.Println(res)\n\tfmt.Println(res.Planet[1])\n\tenc := json.NewEncoder(os.Stdout)\n\td := map[string]string{""1"":""mercury"" , ""2"": ""venus""}\n\tenc.Encode(d)\n\n}\n\nOutput:\n{""Position"":1,""Planet"":[""mercury"",""venus"",""earth""]}\n{""position"":1,""planet"":[""mercury"",""venus"",""earth""]}\nmap[pi:6.13 place:[New York New Delhi]]\n6.13\nNew York\n{1 [mercury venus]}\nvenus\n{""1"":""mercury"",""2"":""venus""}\n\n\n\nNext TopicGo Programming Interview Questions\n\n\n\n← prev\nnext →\n\n\n', 'We can also customize the fields stored under the ""json"" key in the struct field\'s tag. we can have name of the field, followed by a comma-separated list of options. Like\n\nField int \'json:""myName""\' // The appears in JSON as key ""myName"".\nField int \'json:""myName,omitempty?\'// The field is omitted from the object if its value is empty,\nField int \'json:""-""\' //// Field is ignored by this package.\n\nGo JSON Example 1\n\npackage main\nimport ""encoding/json""\nimport ""fmt""\n\nfunc main() {\n\tbolType, _ := json.Marshal(false) //boolean Value\n\tfmt.Println(string(bolType))\n\tintType, _ := json.Marshal(10) // integer value\n\tfmt.Println(string(intType))\n\tfltType, _ := json.Marshal(3.14) //float value\n\tfmt.Println(string(fltType))\n\tstrType, _ := json.Marshal(""JavaTpoint"") // string value\n\tfmt.Println(string(strType))\n\tslcA := []string{""sun"", ""moon"", ""star""} //slice value\n\tslcB, _ := json.Marshal(slcA)\n\tfmt.Println(string(slcB))\n\tmapA := map[string]int{""sun"": 1, ""moon"": 2} //map value\n\tmapB, _ := json.Marshal(mapA)\n\tfmt.Println(string(mapB))\n}\n\nOutput:\nfalse\n10\n3.14\n""JavaTpoint""\n[""sun"",""moon"",""star""]\n{""moon"":2,""sun"":1}\n\nGo JSON Example 2 (User Defined Data Type)\n\npackage main\n\nimport (\n\t""encoding/json""\n\t""fmt""\n\t""os""\n)\n\ntype Response1 struct {\n\tPosition   int\n\tPlanet []string\n}\ntype Response2 struct {\n\tPosition   int      \'json:""position""\'\n\tPlanet []string \'json:""planet""\'\n}\n\nfunc main()  {\n\tres1A := &Response1{\n\t\tPosition:   1,\n\t\tPlanet: []string{""mercury"", ""venus"", ""earth""}}\n\tres1B, _ := json.Marshal(res1A)\n\tfmt.Println(string(res1B))\n\n\tres2D := &Response2{\n\t\tPosition:   1,\n\t\tPlanet: []string{""mercury"", ""venus"", ""earth""}}\n\tres2B, _ := json.Marshal(res2D)\n\tfmt.Println(string(res2B))\n\n\n\tbyt := []byte(\'{""pi"":6.13,""place"":[""New York"",""New Delhi""]}`)\n\tvar dat map[string]interface{}\n\tif err := json.Unmarshal(byt, &dat); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(dat)\n\tnum := dat[""pi""].(float64)\n\tfmt.Println(num)\n\tstrs := dat[""place""].([]interface{})\n\tstr1 := strs[0].(string)\n\tfmt.Println(str1)\n\t\n\t\n\tstr := `{""Position"": 1, ""Planet"": [""mercury"", ""venus""]}`\n\tres := Response2{}\n\tjson.Unmarshal([]byte(str), &res)\n\tfmt.Println(res)\n\tfmt.Println(res.Planet[1])\n\tenc := json.NewEncoder(os.Stdout)\n\td := map[string]string{""1"":""mercury"" , ""2"": ""venus""}\n\tenc.Encode(d)\n\n}\n\nOutput:\n{""Position"":1,""Planet"":[""mercury"",""venus"",""earth""]}\n{""position"":1,""planet"":[""mercury"",""venus"",""earth""]}\nmap[pi:6.13 place:[New York New Delhi]]\n6.13\nNew York\n{1 [mercury venus]}\nvenus\n{""1"":""mercury"",""2"":""venus""}\n\n\n\nNext TopicGo Programming Interview Questions\n\n\n\n← prev\nnext →\n\n\n']","['""func Marshal(v interface{}) ([]byte, error)""', '""func Unmarshal(data []byte, v interface{}) error""', 'Field int \'json:""myName""\' // The appears in JSON as key ""myName"".', 'Field int \'json:""myName,omitempty?\'// The field is omitted from the object if its value is empty,', 'Field int \'json:""-""\' //// Field is ignored by this package.', 'package main', 'import ""encoding/json""', 'import ""fmt""', 'func main() {', 'bolType, _ := json.Marshal(false) //boolean Value', 'fmt.Println(string(bolType))', 'intType, _ := json.Marshal(10) // integer value', 'fmt.Println(string(intType))', 'fltType, _ := json.Marshal(3.14) //float value', 'fmt.Println(string(fltType))', 'strType, _ := json.Marshal(""JavaTpoint"") // string value', 'fmt.Println(string(strType))', 'slcA := []string{""sun"", ""moon"", ""star""} //slice value', 'slcB, _ := json.Marshal(slcA)', 'fmt.Println(string(slcB))', 'mapA := map[string]int{""sun"": 1, ""moon"": 2} //map value', 'mapB, _ := json.Marshal(mapA)', 'fmt.Println(string(mapB))', 'package main', 'import (', '""encoding/json""', 'type Response1 struct {', 'Position   int', 'Planet []string', 'type Response2 struct {', 'Position   int      \'json:""position""\'', 'Planet []string \'json:""planet""\'', 'func main()  {', 'res1A := &Response1{', 'Position:   1,', 'Planet: []string{""mercury"", ""venus"", ""earth""}}', 'res1B, _ := json.Marshal(res1A)', 'fmt.Println(string(res1B))', 'res2D := &Response2{', 'Position:   1,', 'Planet: []string{""mercury"", ""venus"", ""earth""}}', 'res2B, _ := json.Marshal(res2D)', 'fmt.Println(string(res2B))', 'byt := []byte(\'{""pi"":6.13,""place"":[""New York"",""New Delhi""]}`)', 'var dat map[string]interface{}', 'if err := json.Unmarshal(byt, &dat); err != nil {', 'panic(err)', 'fmt.Println(dat)', 'num := dat[""pi""].(float64)', 'fmt.Println(num)', 'strs := dat[""place""].([]interface{})', 'str1 := strs[0].(string)', 'fmt.Println(str1)', 'str := `{""Position"": 1, ""Planet"": [""mercury"", ""venus""]}`', 'res := Response2{}', 'json.Unmarshal([]byte(str), &res)', 'fmt.Println(res)', 'fmt.Println(res.Planet[1])', 'enc := json.NewEncoder(os.Stdout)', 'd := map[string]string{""1"":""mercury"" , ""2"": ""venus""}', 'enc.Encode(d)']","['false\n10\n3.14\n""JavaTpoint""\n[""sun"",""moon"",""star""]\n{""moon"":2,""sun"":1}', '{""Position"":1,""Planet"":[""mercury"",""venus"",""earth""]}\n{""position"":1,""planet"":[""mercury"",""venus"",""earth""]}\nmap[pi:6.13 place:[New York New Delhi]]\n6.13\nNew York\n{1 [mercury venus]}\nvenus\n{""1"":""mercury"",""2"":""venus""}']",[],[]
