,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['Dart Programming Language'],"['Dart is a general-purpose, high-level modern programming language which is originally developed by Google. It is the new programming language which is emerged in 2011, but its stable version was released in June 2017. Dart is not so popular at that time, but It gains popularity when it is used by the Flutter.']","['https://www.javatpoint.com/dart-features', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/iot-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/dart-features', 'https://www.javatpoint.com/dart-features']",['https://static.javatpoint.com/tutorial/dart/images/dart-programming.png'],[],"['What is Dart?', 'History', 'Why Dart?', 'Key Points to Remember', 'Prerequisite', 'Audience', 'Problem']",[],[],"['The first version 1.0 of Dart was released on November 14th, 2013, intended as a replacement of JavaScript.', 'In July 2014, the first edition of Dart language was approved by Ecma International approved at its 107th General Assembly.', 'The first version was criticized due to a malfunction on the web and this plan was dropped in 2015 with the 1.9 release of Dart.', 'The second version of Dart 2.0 was released in August, including a sound type system.', 'The recent version Dart 2.7 is supplemented with the extension method, which enables us to add any type of functionality.', 'We define the characteristics of Dart in the following point.', 'Before learning the Dart, we should keep these concepts in mind. These concepts are given below.', 'We assure you that you will not find any problem with our Dart tutorial. But, if you find any mistake, you can post it in our comment section.']","['Dart was revealed for the first time in the GOTO conference in the month of 10th - 12th October 2011 at Aarhus, Denmark. It is initially designed by the Lars bark and Kespar and developed by Google.']","['Dart is a dynamic, class-based, object-oriented programming language with closure and lexical scope. Syntactically, it is quite similar to Java, C, and JavaScript. If you know any of these programming languages, you can easily learn the Dart programming language.', 'Dart is an open-source programming language which is widely used to develop the mobile application, modern web-applications, desktop application, and the Internet of Things (IoT) using by Flutter framework. It also supports a few advance concepts such as interfaces, mixins, abstract classes, refield generics, and type interface. It is a compiled language and supports two types of compilation techniques.', ""You don't need specific knowledge to learn Dart programming language even the absolute beginners can learn it. The syntax of Dart is similar to Java, C#, Java, JavaScript, etc. If you know any of these programming, then you can learn easily and faster."", 'We have developed this tutorial for beginners and professionals both who want to build a career around web-development or seamlessly learn the precepts of Flutter. There are a lot of topics available that will help you to learn the dart programming language easily.']",[],[],[],"[""|||AOT (Ahead of Time) - It converts the Dart code in the optimized JavaScript code with the help of the dar2js compiler and runs on all modern web-browser. It compiles the code at build time.|||JOT (Just-In-Time) - It converts the byte code in the machine code (native code), but only code that is necessary.||||||Dart is a platform-independent language and supports all operating systems such as Windows, Mac, Linux, etc.|||It is an open-source language, which means it available free for everyone. It comes with a BSD license and recognized by the ECMA standard.|||It is an object-oriented programming language and supports all features of oops such as inheritance, interfaces, and optional type features.|||Dart is very useful in building real-time applications because of its stability.|||Dart comes with the dar2js compiler which transmits the Dart code into JavaScript code that runs on all modern web browser.|||The stand-alone Dart VM permits Dart code to run in a command-line interface environment.||||||Everything in Dart is treated as an object including, numbers, Boolean, function, etc. like Python. All objects inherit from the Object class.|||Dart tools can report two types of problems while coding, warnings and errors. Warnings are the indication that your code may have some problem, but it doesn't interrupt the code's execution, whereas error can prevent the execution of code.|||Dart supports sound typing. We will learn about this in the next tutorial.|||Dart supports generic types, like List<int>(a list of integers) or List<dynamic> (a list of objects of any type).|||""]"
1,['Dart Features'],"['The Dart is an object-oriented, open-source programming language which contains many useful features. It is the new programming language and supports an extensive range of programming utilities such as interface, collections, classes, dynamic and optional typing. It is developed for the server as well as the browser. Below is the list of the important Dart features.']","['https://www.javatpoint.com/dart-installation', 'https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/math', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/kotlin-tutorial', 'https://www.javatpoint.com/dart-installation', 'https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-installation']",['https://static.javatpoint.com/tutorial/dart/images/dart-features.png'],[],[],"['Open Source', 'Platform Independent', 'Object-Oriented', 'Concurrency', 'Extensive Libraries', 'Easy to learn', 'Flexible Compilation', 'Type Safe', 'Objects', 'Browser Support', 'Community']",[],['Here we have discussed essential features of the Dart language. We will more concepts of Dart language in upcoming tutorials.'],"['Dart is an open-source programming language, which means it is freely available. It is developed by Google, approved by the ECMA standard, and comes with a BSD license.', 'Dart supports all primary operating systems such as Windows, Linux, Macintosh, etc. The Dart has its own Virtual Machine which known as Dart VM, that allows us to run the Dart code in every operating system.', ""As we discussed in the previous section, learning the Dart is not the Hercules task as we know that Dart's syntax is similar to Java, C#, JavaScript, kotlin, etc. if you know any of these languages then you can learn easily the Dart."", ""The Dart is the type safe language, which means it uses both static type checking and runtime checks to confirm that a variable's value always matches the variable's static type, sometimes it known as the sound typing."", 'The Dart treats everything as an object. The value which assigns to the variable is an object. The functions, numbers, and strings are also an object in Dart. All objects inherit from Object class.', 'The Dart supports all modern web-browser. It comes with the dart2js compiler that converts the Dart code into optimized JavaScript code that is suitable for all type of web-browser.', ""Dart has a large community across the world. So if you face problem while coding then it is easy to find help. The dedicated developers' team is working towards enhancing its functionality.""]","['Dart is an object-oriented programming language and supports all oops concepts such as classes, inheritance, interfaces and optional typing features. It also supports advance concepts like mixin, abstract, classes, reified generic, and robust type system.', ""Dart is an asynchronous programming language, which means it supports multithreading using Isolates. The isolates are the independent entities that are related to threads but don't share memory and establish the communication between the processes by the message passing. The message should be serialized to make effective communication. The serialization of the message is done by using a snapshot that is generated by the given object and then transmits to another isolate for desterilizing."", 'Dart consists of many useful inbuilt libraries including SDK (Software Development Kit), core, math, async, math, convert, html, IO, etc. It also provides the facility to organize the Dart code into libraries with proper namespacing. It can reuse by the import statement.', 'Dart provides the flexibility to compile the code and fast as well. It supports two types of compilation processes, AOT (Ahead of Time) and JIT (Just-in-Time). The Dart code is transmitted in the other language that can run in the modern web-brewers.', 'Although types are required, type annotations are optional because of type interference. This makes it code more readable. The other advantage to being type-safe language is, when we change the part of code, the system warns us about that modification that we have modified earlier.']",[],[],[],[]
2,['Dart Installation'],"['To learn the Dart, we need to set up the Dart programming environment to our local machine. We are describing the following instructions to install the Dart SDK (Software Development Kit) in various operating systems. If you have already installed it, then you can skip this part.']","['https://www.javatpoint.com/dart-first-program', 'https://www.javatpoint.com/dart-features', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/http://www.gekorm.com/dart-windows/', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/https://dartpad.dev/', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/intellij-idea-tutorial', 'https://www.javatpoint.com/https://www.jetbrains.com/webstorm/download/#section=windows-version', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/dart-first-program', 'https://www.javatpoint.com/dart-features', 'https://www.javatpoint.com/dart-first-program']","['https://static.javatpoint.com/tutorial/dart/images/dart-installation1.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-installation2.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-installation3.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-installation4.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-installation5.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-installation6.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-installation7.png']",[],"['Install the Dart SDK on Windows', 'Install the Dart SDK on Linux', 'Install the Dark SDK on Mac', 'Online Dart Editor', 'Dart IED Support', 'The dart2js Tool']","['Installation using apt-get', 'Installation a Debian Package']",[],"['Follow the below instructions to install Dark SDK in Windows.', 'Step -1: Go to the browser and type the following link to download the SDK.', 'http://www.gekorm.com/dart-windows/', 'It will open the given page. Click on the following link.', 'Step - 2: Run the Dart installer(It is the .exe file that we downloaded in the previous step) and click on the Next button.', 'Step - 3: It provides the option to select the Dart installation path. After the path is selected, click on the Next button.', 'Step - 4: After the download is completed, set the PATH environment variable to ""C:\\Program Files\\Dart\\dart-sdk\\bin"" in advance system properties.', 'Step - 5: Now open the terminal and verify the Dart installation by typing dart.', 'If it is successfully installed then it looks like the above image.', 'The steps of Dart installation on Linux is given below.', 'Step -1: Type the following commands for a one-time setup.', 'Step - 2: Type the following command in terminal to install the Dart SDK using apt-get option.', 'It will successfully download the Dart SDK.', 'To change the PATH for upcoming terminal sessions, use a below command:', 'Step -2: To verify which version we have installed, use the following command.', 'Use the following command in the terminal to compile the Dart code into JavaScript code.', 'The above command will create a file that contains the JavaScript code corresponding to the Dart code.']","['Before installing the Dart, if you are Debian/Ubuntu on AMD64(64-bit Intel) in your local machine, you can install the Dart through one of the following options.', 'We can download Dart SDK as a Debian package in the .deb package format. To make all Dart binaries accessible, we have to change the PATH by typing the following command.', ""Step -1: We should have Homebrew package manager, but if we don't have it then install the Homebrew and run the following command. It will successfully download the Dart on the Mac."", 'The Eclipse, IntelliJ, and WebStorm are the IDEs from the Jet brains that support the Dart Programming, but WebStorm is more popular than others. We can download it from https://www.jetbrains.com/webstorm/download/#section=windows-version.', 'The Dark SDK comes with the dart2js tool, which transmits the Dart code into runnable JavaScript code. It is necessary because few web browsers do not support the Dart VM.']","['We have discussed Dark installation on the various operating systems so far, but if we do not want to install Dart then there is an online Dark editor (Known as DartPad) is available to run the Dark programs. The online DartPad is provided at https://dartpad.dev/. The DartPad offers to execute the dart scripts and display HTML and also console output. The online DartPad looks like the below image.']","['$sudo apt-get update', '$ sudo apt-get install apt-transport-https', ""$ sudo sh -c 'wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'"", ""$ sudo sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'"", '$sudo apt-get update', '$ sudo apt-get install dart', 'export PATH=""$PATH:/usr/lib/dart/bin""', '$ echo \'export PATH=""$PATH:/usr/lib/dart/bin""\' >> ~/.profile', '$brew tap dart-lang/dart', '$ brew install dart', '$brew info dart', 'dart2js - - out = <output_file>.js\xa0 <dart_script>.dart']",[],[],['|||Install using apt-get|||Install a Debian package|||']
3,['Dart First Program'],"['As we have discussed earlier, Dart is easy to learn if you know any of Java, C++, JavaScript, etc. The simplest ""Hello World"" program gives the idea of the basic syntax of the programming language. It is the way of testing the system and working environment. In this tutorial, we will give the basic idea of Dart\'s syntax. There are several ways to run the first program, which is given below:']","['https://www.javatpoint.com/dart-basic-syntax', 'https://www.javatpoint.com/dart-installation', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://dartpad.dartlang.org/', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/dart-basic-syntax', 'https://www.javatpoint.com/dart-installation', 'https://www.javatpoint.com/dart-basic-syntax']","['https://static.javatpoint.com/tutorial/dart/images/dart-first-program.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-first-program2.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-first-program3.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-first-program4.png']",[],"['Using Command Line', 'Running on Browser', 'Using IDE']",[],[],"['Type dart on the terminal if it is showing dart runtime then Dart is successfully installed.', 'Open a text editor and create a file called ""helloword.dart"". The file extension should be .dart that specifies; it is a Dart program file.', 'Open the command line; compile the program run the Dart program by typing dart helloworld.dart. It will show Hello World on the screen.', 'We recommend running the Dart code using the command line or IDE. ']","[""Before running the first program, it must ensure that we have installed the Dart SDK properly. We have discussed the complete installation guide in our previous tutorial. Let's run our first program."", 'There are various IDEs that support Dart, such as Visual Studio Code, WebStorm, IntelliJ, etc. For the visual studio code, download the dart extension and run the code.']","[""Dart provides an online editor which is known as DartPad available at https://dartpad.dartlang.org/. On the left side, we can write the code and the output displays on the right side of the screen. We can add HTML and CSS with the Dart Code. Dart also provides some sample programs to learn. Let's have a look at the following image.""]",[],[],[],"['|||Using Command Line|||Running on Browser|||Using IDE||||||main() - The main() function indicates that it is the beginning of our program. It is an essential function where the program starts its execution.|||print() - This function is used to display the output on the console. It is similar to C, JavaScript, or any other language. The curly brackets and semicolons are necessary to use appropriately.|||']"
4,['Dart Basic Syntax'],"['In this tutorial, we will learn the basic syntax of the Dart programming language.']","['https://www.javatpoint.com/dart-comments', 'https://www.javatpoint.com/dart-first-program', 'https://www.javatpoint.com/dart-comments', 'https://www.javatpoint.com/dart-first-program', 'https://www.javatpoint.com/dart-comments']",[],[],"['Dart Identifiers', 'Dart Printing and String Interpolation', 'Semicolon in Dart', 'Dart Whitespace and Line Breaks', 'Block in Dart', 'Dart Command-Line Options', 'Enable Checked Mode']",[],[],"['Below is the table of valid and invalid identifiers.', 'The print() function is used to print output on the console, and $expression is used for the string interpolation. Below is an example.', 'The Dart command-line options are used to modify Dart script execution. The standard command-line options are given below.', 'Generally, the Dart program runs in two modes which are given below.', 'Now activate the checked mode by typing dart -c or --checked mode', 'The Dart VM will through the following error.']","['The block is the collection of the statement enclosed in the curly braces. In Dart, we use curly braces to group all of the statements in the block. Consider the following syntax.', 'Production Mode - The Dart script runs in the production mode. It provides assurance of performance enhancement while running the script. Consider the following example.']","['Identifiers are the name which is used to define variables, methods, class, and function, etc. An Identifier is a sequence of the letters([A to Z],[a to z]), digits([0-9]) and underscore(_), but remember that the first character should not be a numeric. There are a few rules to define identifiers which are given below.', 'The semicolon is used to terminate the statement that means, it indicates the statement is ended here. It is mandatory that each statement should be terminated with a semicolon(;). We can write multiple statements in a single line by using a semicolon as a delimiter. The compiler will generate an error if it is not use properly.', 'The Dart compiler ignores whitespaces. It is used to specify space, tabs, and newline characters in our program. It separates one part of any statement from another part of the statement. We can also use space and tabs in our program to define indentation and provide the proper format for the program. It makes code easy to understand and readable.', 'Checked Mode - The checked mode enables various checks in the Dart code, such as type-checking. It warns or throws errors while developing processes. To start the checked mode, type -c or --checked option in the command prompt before the dart script-file name. By default, the Dart VM runs in the checked mode.']","['void main()', 'var name = ""Peter"";', 'var roll_no = 24;', 'print(""My name is ${name} My roll number is ${roll_no}"");', 'My name is Peter My roll number is 24', 'var msg1 = ""Hello World!"";', 'var msg2 = ""How are you?""', '{ //start of the block', '}// end of the block', 'void main() {', 'int var = ""hello"";', 'print(var);', 'dart -c mode.dart', 'Unhandled exception:', ""type 'String' is not a subtype of type 'int' of 'n' where"", 'String is from dart:core', 'int is from dart:core']",['My name is Peter My roll number is 24'],"['Valid Identifiers|||Invalid Identifiers&&&firstname|||__firstname&&&firstName|||first name&&&var1|||V5ar&&&$count|||first-name&&&_firstname|||1result&&&First_name|||@var', 'Sr.|||Command-line Options|||Descriptions&&&1.|||-c or -c|||It allows both assertion and type checks.&&&2.|||--version|||It shows VM version information.&&&3.|||--package<path>|||It indicates the path to the package resolution configuration file.&&&4.|||-p <path>|||It indicates where to find the libraries.&&&5.|||-h or -help|||It is used to seek help.']",['|||The first character should not be a digit.|||Special characters are not allowed except underscore (_) or a dollar sign ($).|||Two successive underscores (__) are not allowed.|||The first character must be alphabet(uppercase or lowercase) or underscore.|||Identifiers must be unique and cannot contain whitespace.|||They are case sensitive. The variable name Joseph and joseph will be treated differently.||||||Checked Mode|||Production Mode|||']
5,['Dart Comments'],"['Comments are the set of statements that are ignored by the Dart compiler during the program execution. It is used to enhance the readability of the source code. Generally, comments give a brief idea of code that what is happening in the code. We can describe the working of variables, functions, classes, or any statement that exists in the code. Programmers should use the comment for better practice. There are three types of comments in the Dart.']","['https://www.javatpoint.com/dart-keywords', 'https://www.javatpoint.com/dart-basic-syntax', 'https://www.javatpoint.com/dart-keywords', 'https://www.javatpoint.com/dart-basic-syntax', 'https://www.javatpoint.com/dart-keywords']",[],[],['Types of Comments'],"['Single-line Comment', 'Multi-line Comment', 'Dart Documentation Comment']",[],"['Dart provides three kinds of comments', 'We can apply comments on a single line by using the // (double-slash). The single-line comments can be applied until a line break.', 'The // (double-slash) statement is completely ignored by the Dart compiler and retuned the output.']","[""Sometimes we need to apply comments on multiple lines; then, it can be done by using /*…..*/. The compiler ignores anything that written inside the /*…*/, but it cannot be nested with the multi-line comments. Let's see the following example.""]","['The document comments are used to generate documentation or reference for a project/software package. It can be a single-line or multi-line comment that starts with /// or /*. We can use /// on consecutive lines, which is the same as the multiline comment. These lines ignore by the Dart compiler expect those which are written inside the curly brackets. We can define classes, functions, parameters, and variables. Consider the following example.']","['void main(){', 'print(""Welcome to JavaTpoint"");', 'Welcome to JavaTpoint', 'void main(){', '/* This is the example of multi-line comment', 'This will print the given statement on screen */', 'print(""Welcome to JavaTpoint"");', 'Welcome to JavaTpoint', 'void main(){', 'print(""Welcome to JavaTpoint"");', 'Welcome to JavaTpoint']","['Welcome to JavaTpoint', 'Welcome to JavaTpoint', 'Welcome to JavaTpoint']",[],['|||Single-line Comments|||Multi-line Comments|||Documentation Comments|||']
6,['Dart Keywords'],"['Dart Keywords are the reserve words that have special meaning for the compiler. It cannot be used as the variable name, class name, or function name. Keywords are case sensitive; they must be written as they are defined. \xa0There are 61 keywords in the Dart. Some of them are common, you may be already familiar and few are different. Below is the list of the given Dart keywords.']","['https://www.javatpoint.com/dart-data-types', 'https://www.javatpoint.com/dart-comments', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-data-types', 'https://www.javatpoint.com/dart-comments', 'https://www.javatpoint.com/dart-data-types']",[],[],[],[],[],['We will explain these keywords in detail in the upcoming tutorials.'],"['In the above list of keywords, we have a few keywords which are marked with the superscript(1,2 and 3). Following, we are defining the reason for superscript.']",[],[],[],['abstract2|||else|||import2|||super&&&as2|||enum|||in|||switch&&&assert|||export2|||interface2|||sync1&&&async1|||extends|||is|||this&&&await3|||extension2|||library2|||throw&&&break|||external2|||mixin2|||true&&&case|||factory|||new|||try&&&catch|||false|||null|||typedef2&&&class|||final|||on1|||var&&&const|||finally|||operator2|||void&&&continue|||for|||part2|||while&&&covarient2|||Function2|||rethrow|||with&&&default|||get2|||return|||yield3&&&deffered2|||hide1|||set2|||&&&do|||if|||show1|||&&&dynamic2|||implements2|||static2|||'],"['|||Subscript 1 - These keywords are called contextual keywords. They have special meaning and used in particular places.|||Subscript 2 - These keywords are called built-in identifiers. These types of keywords are used to porting of JavaScript code for Dart, these keywords are treated as a valid identifier, but they cannot be used in the class name function name, or import prefixes.|||Subscript 3 - These are newly added keyword related to the asynchrony|||']"
7,['Dart Data Types'],"['The data types are the most important fundamental features of programing language. In Dart, the data type of the variable is defined by its value. The variables are used to store values and reserve the memory location. The data-type specifies what type of value will be stored by the variable. Each variable has its data-type. The Dart is a static type of language, which means that the variables cannot modify.']","['https://www.javatpoint.com/dart-variable', 'https://www.javatpoint.com/dart-keywords', 'https://www.javatpoint.com/dart-variable', 'https://www.javatpoint.com/dart-keywords', 'https://www.javatpoint.com/dart-variable']",[],[],[],"['Dart Number', 'Dart Strings', 'Dart Boolean', 'Dart Lists', 'Dart Maps', 'Dart Runes', 'Dart Symbols', 'Dart Dynamic Type']",['Note - Dart is static typed and types annotations language. Dart can infer a type and types annotations are optional.'],"['Dart supports the following built-in Data types.', 'The Darts Number is used to store the numeric values. The number can be two types - integer and double.']","['A string is the sequence of the character. If we store the data like - name, address, special character, etc. It is signified by using either single quotes or double quotes. A Dart string is a sequence of UTF-16 code units.', 'The Boolean type represents the two values - true and false. The bool keyword uses to denote Boolean Type. The numeric values 1 and 0 cannot be used to represent the true or false value.', 'The Dart Symbols are the objects which are used to refer an operator or identifier that declare in a Dart program. It is commonly used in APIs that refers to identifiers by name because an identifier name can changes but not identifier symbols.', 'Dart is an optionally typed language. If the variable type is not specified explicitly, then the variable type is dynamic. The dynamic keyword is used for type annotation explicitly.']","['In Dart, The list is a collection of the ordered objects (value). The concept of list is similar to an array. An array is defined as a collection of the multiple elements in a single variable. The elements in the list are separated by the comma enclosed in the square bracket[]. The sample list is given below.', 'The maps type is used to store values in key-value pairs. Each key is associated with its value. The key and value can be any type. In Map, the key must be unique, but a value can occur multiple times. The Map is defined by using curly braces ({}), and comma separates each pair.', 'As we know that, the strings are the sequence of Unicode UTF-16 code units. Unicode is a technique which is used to describe a unique numeric value for each digit, letter, and symbol. Since Dart Runes are the special string of Unicode UTF-32 units. It is used to represent the special syntax.', 'For example - The special heart character ♥ is equivalent to Unicode code \\u2665, where \\u means Unicode, and the numbers are hexadecimal integer. If the hex value is less or greater than 4 digits, it places in a curly bracket ({}). For example - An emoji 😀 is represented as \\u{1f600}. The example is given below.']","['int marks = 80;', 'double pi = 3.14;', 'var msg = ""Welcome to JavaTpoint"";', 'bool isValid = true;', 'var list = [1,2,3]', ""var student = {'name': 'Joseph',  'age':25, 'Branch': 'Computer Science'}"", 'void main(){', ""var heart_symbol = '\\u2665';"", ""var laugh_symbol = '\\u{1f600}';"", 'print(heart_symbol);', 'print(laugh_symbol);']","['♥', '😀']",[],['|||Number|||Strings|||Boolean|||Lists|||Maps|||Runes|||Symbols||||||Integer - Integer values represent the whole number or non-fractional values. An integer data type represents the 64-bit non-decimal numbers between -263 to 263. A variable can store an unsigned or signed integer value. The example is given below -||||||Double - Double value represents the 64-bit of information (double-precision) for floating number or number with the large decimal points. The double keyword is used to declare the double type variable.|||']
8,['Dart Variable'],"['Variable is used to store the value and refer the memory location in computer memory. When we create a variable, the Dart compiler allocates some space in memory. The size of the memory block of memory is depended upon the type of variable. To create a variable, we should follow certain rules. Here is an example of a creating variable and assigning value to it.']","['https://www.javatpoint.com/splface', 'https://www.javatpoint.com/dart-data-types', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/splface', 'https://www.javatpoint.com/dart-data-types', 'https://www.javatpoint.com/splface']",[],[],"['Rule to Create Variable', 'How to Declare Variable in Dart', 'Type Annotations', 'Declaring the variable with Multiple Values', 'Default Value', 'Final and const']",[],[],"['In the above example, we have declared a variable named age which will store the integer data. The variable named msg stored the string type data.', 'Example - ', 'If we try to change these values then it will throw an error.', 'The const keyword is also used to create a constant value that cannot be changed after its creation.', 'If we try to change it, then it will throw an error.', 'We will learn more about const in upcoming tutorials.']","[""Here the variable called name that holds 'Devansh' string value. In Dart, the variables store references. The above variable stores reference to a String with a value of Devansh."", 'Creating a variable with a proper name is an essential task in any programming language. The Dart has some rules to define a variable. These rules are given below.', 'In the above example, the variable name has allocated some space in the memory. The semicolon(;) is necessary to use because it separates program statement to another.', 'Dart provides the facility to declare multiple values of the same type to the variables. We can do this in a single statement, and each value is separated by commas. The syntax is given below.', ""While declaring the variable without initializing the value then the Dart compiler provides default value (Null) to the variable. Even the numeric type variables are initially assigned with the null value. Let's consider the following example."", 'The const is used to create compile-time constants. We can declare a value to compile-time constant such as number, string literal, a const variable, etc.']","['We need to declare a variable before using it in a program. In Dart, The var keyword is used to declare a variable. The Dart compiler automatically knows the type of data based on the assigned to the variable because Dart is an infer type language. The syntax is given below.', ""As we had pointed out, The Dart is an infer language but it also provides a type annotation. While declaring the variable, it suggests the type of the value that variable can store. In the type annotation, we add the data type as a prefix before the variable's name that ensures that the variable can store specific data type. The syntax is given below."", 'When we do not want to change a variable in the future then we use final and const. It can be used in place of var or in addition to a type. A final variable can be set only one time where the variable is a compile-time constant. The example of creating a final variable is given below.']","[""var name = 'Devansh';"", 'var <variable_name>  = <value>;', 'var <variable_name>;', ""var name = 'Andrew'"", '<type> <variable_name>;', '<type> <name> = <expression>;', 'int age;', 'String msg = ""Welcome to JavaTpoint"";', '<type> <var1,var2....varN>;', 'int i,j,k;', 'int count;', 'assert(count == null);', ""final name = 'Ricky';                               // final variable without type annotation."", ""final String msg = 'How are you?';     // final variable with type annotation."", ""name = 'Roger';                                 // Error: Final variable can't be changed."", 'const a = 1000;', 'var f = const[];', 'f = [12];    //Error, The const variable cannot be change']",[],[],"['|||The variable cannot contain special characters such as whitespace, mathematical symbol, runes, Unicode character, and keywords.|||The first character of the variable should be an alphabet([A to Z],[a to z]). Digits are not allowed as the first character.|||Variables are case sensitive. For example, - variable age and AGE are treated differently.|||The special character such as #, @, ^, &, * are not allowed expect the underscore(_) and the dollar sign($).|||The variable name should be retable to the program and readable.|||']"
9,['Dart Operators'],"['An operator is a symbol that is used to manipulating the values or performs operations on its operand. The given expression: 5+4, in this expression, 5 and 4 are operands and ""+"" is the operator.']","['https://www.javatpoint.com/dart-constants', 'https://www.javatpoint.com/dart-variable', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/dart-constants', 'https://www.javatpoint.com/dart-variable', 'https://www.javatpoint.com/dart-constants']",['https://static.javatpoint.com/tutorial/dart/images/dart-operators.png'],[],['Types of Operators'],"['Dart Arithmetic Operators', 'Assignment Operator', 'Relational Operator', 'Dart Type Test Operators', 'Dart Logical Operators', 'Dart Bitwise Operators', 'Dart Conditional Operators (?:)', 'Dart Cascade notation Operators']",[],"['Dart supports the following types of operators.', ""Let's understand the following example -"", ""Let's understand the following example -"", ""Let's understand the following example -"", 'The Type Test Operators are used to testing the types of expressions at runtime. Consider the following table.', ""Let's understand the following example."", 'The Logical Operators are used to evaluate the expressions and make the decision. Dart supports the following logical operators.', ""Let's understand the following example."", 'The Bitwise operators perform operation bit by bit on the value of the two operands. Following is the table of bitwise operators.', ""Let's understand the following example."", ""Let's understand the following example -"", 'Syntax 1 -', 'If the given condition is TRUE then it returns exp1 otherwise exp2.', 'Syntax 2 -', ""If the exp1 is not-null, returns its value, otherwise returns the exp2's value."", ""Let's understand the following example."", 'Example - 1', ""Let's have a look at another scenario."", 'Example -2']","[""Arithmetic Operators are the most common operators that are used to perform addition, subtraction, multiplication, divide, etc. Let's take variable a holds 20 and variable b hold 10, then -"", 'In Java, there are ++ and -- operators are known as increment and decrement operators and also known as unary operators, respectively. Unary operators, operate on single operand where ++ adds 1 to operands and -- subtract 1 to operand respectively.', 'The unary operators can be used in two ways - postfix and prefix. If ++ is used as a postfix(like x++), it returns the value of operand first then increments the value of x. If -- is used as a prefix(like ++x), it increases the value of x.', 'Assignment operators are used to assigning value to the variables. We can also use it combined with the arithmetic operators. The list of assignment operators is given below. Suppose a holds value 20 and b holds 10.', 'The Conditional Operator is same as if-else statement and provides similar functionality as conditional statement. It is the second form of if-else statement. It is also identified as ""Ternary Operator"". The syntax is given below.', ""The Cascade notation Operators (..) is used to evaluate a series of operation on the same object. It is an identical as the method chaining that avoids several of steps, and we don't need store results in temporary variables.""]","['Dart provides an extensive set of built-in operators to accomplish various types of operations. Operators can be unary or binary, which means unary take only on operand and binary take two operands with operators. There are several types of operators. Following is the list of Dart Operators.', 'Relational operators or Comparison operators are used to making a comparison between two expressions and operands. The comparison of two expressions returns the Boolean true and false. Suppose a holds 20 and b hold 10 then consider the following table.']","['void main(){', 'print(""Example of Assignment operators"");', 'var n1 = 10;', 'var n2 = 5;', 'print(""n1+n2 = ${n1+n2}"");', 'print(""n1-n2 = ${n1-n2}"");', 'print(""n1*n2 = ${n1*n2}"");', 'print(""n1/=n2 = ${n1/n2}"");', 'print(""n1%n2 = ${n1%n2}"");', 'Example of Arithmetic operators', 'n1+n2 = 15', 'n1-n2 = 5', 'n1*n2 = 50', 'n1/=n2 = 2', 'n1%n2 = 0', 'void main() {', 'var x = 30;', 'print(x++);                  //The postfix value', 'var y = 25;', 'print(++y);                 //The prefix value,', '', 'var z = 10;', 'print(--z);                  //The prefix value', 'var u = 12;', 'print(u--);    }           //The postfix value', 'void main(){', 'print(""Example of Assignment operators"");', 'var n1 = 10;', 'var n2 = 5;', 'n1+=n2;', 'print(""n1+=n2 = ${n1}"");', 'n1-=n2;', 'print(""n1-=n2 = ${n1}"");', 'n1*=n2;', 'print(""n1*=n2 = ${n1}"");', 'n1~/=n2;', 'print(""n1~/=n2 = ${n1}"");', 'n1%=n2;', 'print(""n1%=n2 = ${n1}"");', 'Example of Assignment operators', 'n1+=n2 = 15', 'n1-=n2 = 10', 'n1*=n2 = 50', 'n1~/=n2 = 10', 'n1%=n2 = 0', 'void main() {', 'var a = 30;', 'var b = 20;', 'print(""The example of Relational Operator"");', 'var res = a>b;', 'print(""a is greater than b: ""+res. toString());  // We will learn the toString in next tutorial', 'var res0 = a=b;', 'print(""a is greater than or equal to b: ""+res1. toString());', 'var res2 = a<=b;', 'print(""a is less than and equal to b: ""+res2. toString());', 'var res3 = a!= b;', 'print(""a is not equal to  b: ""+res3. toString());', 'var res4 = a==b;', 'print(""a is  equal to  b: ""+res4. toString());', 'The example of Relational Operator', 'a is greater than b: true', 'a is less than b: false', 'a is greater than or equal to b: true', 'a is less than and equal to b: false', 'a is not equal to  b: true', 'a is  equal to  b: false', 'void main()', 'var num = 10;', 'var name = ""JavaTpoint"";', 'print(num is int);', 'print(name is! String );', 'void main(){', 'bool bool_val1 = true, bool_val2 = false;', 'print(""Example of the logical operators"");', 'var val1 = bool_val1 && bool_val2;', 'print(val1);', 'var val2 = bool_val1 || bool_val2;', 'print(val2);', 'var val3 = !(bool_val1 || bool_val2);', 'print(val3);', 'Example of the logical operators', 'If a = 7', 'then binary(a) = 0111', 'binary(b) = 0011', 'Hence a & b = 0011, a|b = 0111 and a^b = 0100', 'void main(){', 'print(""Example of Bitwise operators"");', 'var a  = 25;', 'var b = 20;', 'var c = 0;', 'print(""a & b = ${a&b}"");', 'print(""a | b = ${a|b}"");', 'print(""a ^ b = ${a^b}"");', 'print(""~a = ${(~a)}"");', 'c = a <<2;', 'print(""c<<1= ${c}"");', 'c = a >>2;', 'print(""c>>1= ${c}"");', 'Example of Bitwise operators', 'a & b = 16', 'a | b = 29', 'a ^ b = 13', '~a = 4294967270', 'c<<1= 100', 'c>>1= 6', 'condition ? exp1 : exp2', 'exp1 ?? expr2', 'void main() {', 'var x = null;', 'var y = 20;', 'var val = x ?? y;', 'print(val);', 'void main() {', 'var a = 30;', 'var output = a > 42 ? ""value greater than 10"":""value lesser than equal to 30"";', 'print(output);', 'value lesser than or equal to 30']","['Example of Arithmetic operators', 'n1+n2 = 15', 'n1-n2 = 5', 'n1*n2 = 50', 'n1/=n2 = 2', 'n1%n2 = 0', '30', '26', '9', '12', 'Example of Assignment operators', 'n1+=n2 = 15', 'n1-=n2 = 10', 'n1*=n2 = 50', 'n1~/=n2 = 10', 'n1%=n2 = 0', 'The example of Relational Operator', 'a is greater than b: true', 'a is less than b: false', 'a is greater than or equal to b: true', 'a is less than and equal to b: false', 'a is not equal to  b: true', 'a is  equal to  b: false', 'true', 'false', 'Example of the logical operators', 'false', 'true', 'false', 'Example of Bitwise operators', 'a & b = 16', 'a | b = 29', 'a ^ b = 13', '~a = 4294967270', 'c<<1= 100', 'c>>1= 6', '20', 'value lesser than or equal to 30']","['Sr.|||Operator Name|||Description|||Example&&&1.|||Addition(+)|||It adds the left operand to the right operand.|||a+b will return 30&&&2.|||Subtraction(-)|||It subtracts the right operand from the left operand.|||a-b will return 10&&&3|||Divide(/)|||It divides the first operand by the second operand and returns quotient.|||a/b will return 2.0&&&4.|||Multiplication(*)|||It multiplies the one operand to another operand.|||a*b will return 200&&&5.|||Modulus(%)|||It returns a reminder after dividing one operand to another.|||a%b will return 0&&&6.|||Division(~/)|||It divides the first operand by the second operand and returns integer quotient.|||a/b will return 2&&&7.|||Unary Minus(-expr)|||It is used with a single operand changes the sign of it.|||-(a-b) will return -10', 'Sr.|||Operator Name|||Description|||Example&&&1.|||++(Prefix)|||It increment the value of operand.|||++x&&&2.|||++(Postfix)|||It returns the actual value of operand before increment.|||x++&&&3.|||--(Prefix)|||It decrement the value of the operand.|||--x&&&4.|||--(Postfix)|||It returns the actual value of operand before decrement.|||x--', 'Operators|||Name|||Description&&&= (Assignment Operator)|||It assigns the right expression to the left operand.&&&+=(Add and Assign)|||It adds right operand value to the left operand and resultant assign back to the left operand. For example - a+=b → a = a+b → 30&&&-=(Subtract and Assign)|||It subtracts right operand value from left operand and resultant assign back to the left operand. For example - a-=b → a = a-b → 10&&&*=(Multiply and Assign)|||It multiplies the operands and resultant assign back to the left operand. For example - a*=b → a = a*b → 200&&&/=(Divide and Assign)|||It divides the left operand value by the right operand and resultant assign back to the left operand. For example - a%=b → a = a%b → 2.0&&&~/=(Divide and Assign)|||It divides the left operand value by the right operand and integer remainder quotient back to the left operand. For example - a%=b → a = a%b → 2&&&%=(Mod and Assign)|||It divides the left operand value by the right operand and remainder assign back to the left operand. For example - a%=b → a = a%b → 0&&&<<=(Left shift AND assign)|||The expression a<<=3 is equal to a = a<<3&&&>>=(Right shift AND assign)|||The expression a>>=3 is equal to a = a>>3&&&&=(Bitwise AND assign)|||The expression a&=3 is equal to a = a&3&&&^=(Bitwise exclusive OR and assign)|||The expression a^=3 is equal to a = a^3&&&|=(Bitwise inclusive OR and assign)|||The expression a|=3 is equal to a = a|3', 'Sr.|||Operator|||Description&&&1.|||>(greater than)|||a>b will return TRUE.&&&2.|||<(less than)|||a<b will return FALSE.&&&3.|||>=(greater than or equal to)|||a>=b will return TRUE.&&&4.|||<=(less than or equal to)|||a<=b will return FALSE.&&&5.|||==(is equal to)|||a==b will return FALSE.&&&6.|||!=(not equal to)|||a!=b will return TRUE.', 'Sr.|||Operator|||Description&&&1.|||as|||It is used for typecast.&&&2.|||is|||It returns TRUE if the object has specified type.&&&3.|||is!|||It returns TRUE if the object has not specified type.', 'Sr.|||Operator|||Description&&&1.|||&&(Logical AND)|||It returns if all expressions are true.&&&2.|||||(Logical OR)|||It returns TRUE if any expression is true.&&&3.|||!(Logical NOT)|||It returns the complement of expression.', 'Sr.|||Operators|||Description&&&1.|||&(Binary AND)|||It returns 1 if both bits are 1.&&&2.||||(Binary OR)|||It returns 1 if any of bit is 1.&&&3.|||^(Binary XOR)|||It returns 1 if both bits are different.&&&4.|||~(Ones Compliment)|||It returns the reverse of the bit. If bit is 0 then the compliment will be 1.&&&5.|||<<(Shift left)|||The value of left operand moves left by the number of bits present in the right operand.&&&6.|||>>(Shift right)|||The value of right operand moves left by the number of bits present in the left operand.']",['|||Arithmetic Operators|||Assignment Operators|||Relational Operators|||Type test Operators|||Logical Operators|||Bitwise Operator|||Conditional Operators|||Casecade notation(..) Operators||||||Dart Unary Operators (post and pre)|||']
10,['Dart Constants'],"[""Dart Constant is defined as an immutable object, which means it can't be changed or modified during the execution of the program. Once we initialize the value to the constant variable, it cannot be reassigned later.""]","['https://www.javatpoint.com/dart-number', 'https://www.javatpoint.com/dart-operators', 'https://www.javatpoint.com/dart-number', 'https://www.javatpoint.com/dart-operators', 'https://www.javatpoint.com/dart-number']",[],[],['Defining/Initializing Constant in Dart'],"['Define Constant Using final Keyword', 'Define Constants Using const Keyword']",[],"['The Dart constant can be defined in the following two ways.', 'A const keyword represents the compile-time constant, and the final variable can be set only once.', 'We can define the constant by using the final keyword. The syntax is given below.', ""Let's understand the following example."", 'We can define constant using the const keyword. The syntax is given below.', ""Let's understand the following example.""]",[],['It is beneficial when we want to keep the value unchanged in the whole program. The keywords final and const are used to create a constant variable. Both keywords final and const are used as a conjunction with the data-type. Dart will throw an exception if we try to modify the constant variable.'],"['final const_name;', 'final data_type const_name', 'void main () {', 'final a = 10;', 'final b = 20;', 'print(a);', 'print(b);', 'const const_name', 'const data_type const_name', 'void main() {', 'const name= ""Peter"";', 'print(name);']","['10', '20', 'Peter']",[],['|||Using the final keyword|||Using the const keyword|||']
11,['Dart Number'],"['The Number is the data type that is used to hold the numeric value. In Dart, It can be two types -']","['https://www.javatpoint.com/dart-string', 'https://www.javatpoint.com/dart-constants', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-string', 'https://www.javatpoint.com/dart-constants', 'https://www.javatpoint.com/dart-string']",['https://static.javatpoint.com/tutorial/dart/images/dart-number.png'],[],"['Number Properties', 'Number Methods']","['Rules for the integer value', 'Dart parse() function']",[],"[""Let's have a look at following example -"", 'The parse() function converts the numeric string to the number. Consider the following example -', 'Explanation -', 'The commonly used methods of number are given below.']","['Dart Double - The Double number are the numbers that can be written with floating-point numbers or number with larger decimal points. The double keyword is used to declare Double value in Dart.', 'In the above example, we converted the numeric strings into the numbers by using parse() method then stored in the variables. After the successful conversion, we performed add operation and printed the output to the screen.']","['Dart integer - Integer numbers are the whole numbers means that can be written without a fractional component. For example - 20, 30, -3215, 0, etc. An integer number can be signed or unsigned. The representation of the integer value is in between -263 to 263 non-decimal numbers. The int keyword is used to declare integer value in Dart.']","['int id = 501;', 'double root = 1.41234;', 'double rupees  = 100000;', 'void main(){', 'int r = 5;', 'double pi = 3.14;', 'double res = 4*pi*r*r;', 'print(""The area of sphere = ${(res)}"");', 'The area of sphere 314', 'void main(){', 'var a = num.parse(""20.56"");', 'var b = num.parse(""15.63"");', 'var c = a+b;', 'print(""The sum is = ${c}"");', 'The sum is = 36.19']","['The area of sphere 314', 'The sum is = 36.19']","['Properties|||Description&&&hashcode|||It returns the hash code of the given number.&&&isFinite|||If the given number is finite, then it returns true.&&&isInfinite|||If the number infinite it returns true.&&&isNan|||If the number is non-negative then it returns true.&&&isNegative|||If the number is negative then it returns true.&&&sign|||It returns -1, 0, or 1 depending upon the sign of the given number.&&&isEven|||If the given number is an even then it returns true.&&&isOdd|||If the given number is odd then it returns true.', 'Method|||Description&&&abs()|||It gives the absolute value of the given number.&&&ceil()|||It gives the ceiling value of the given number.&&&floor()|||It gives the floor value of the given number.&&&compareTo()|||It compares the value with other number.&&&remainder()|||It gives the truncated remainder after dividing the two numbers.&&&round()|||It returns the round of the number.&&&toDouble()|||It gives the double equivalent representation of the number.&&&toInt()|||Returns the integer equivalent representation of the number.&&&toString()|||Returns the String equivalent representation of the number&&&truncate()|||Returns the integer after discarding fraction digits.']","['|||Integer|||Double||||||An integer value must be a digit.|||The decimal points should not include in an integer number.|||Unsigned numbers are always a positive number. Numbers can be either negative or positive.|||The size of the integer value depends upon the platform, but integer value should no longer than 64 bit.|||']"
12,['Dart String'],['Dart String is a sequence of the character or UTF-16 code units. It is used to store the text value. The string can be created using single quotes or double-quotes. The multiline string can be created using the triple-quotes. Strings are immutable; it means you cannot modify it after creation.'],"['https://www.javatpoint.com/dart-lists', 'https://www.javatpoint.com/dart-number', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-lists', 'https://www.javatpoint.com/dart-number', 'https://www.javatpoint.com/dart-lists']",[],[],"['Printing String', 'String Concatenation', 'String Interpolation', 'String Properties', 'String Methods']",['Syntax:'],[],"['In Dart, The String keyword can be used to declare the string. The syntax of the string declaration is given below.', 'The + or += operator is used to merge the two string. The example is given below.', 'Explanation -', 'In the above code, we have declared two strings variable, created a new string after concatenation, and printed the result.', 'We have created two variables that hold integer value then performed the mod operation and we printed the result using the string interpolation.', 'We can use the string interpolation as a placeholder, as we have shown in the above example.', 'The Dart provides the following string properties.', 'The Dart provides an extensive range of methods. The list of a few essential methods is given below.']",[],"[""The print() function is used to print the string on the screen. The string can be formatted message, any expression, and any other object. Dart provides ${expression}, which is used to put the value inside a string. Let' have at look at the following example."", ""The string interpolation is a technique to manipulate the string and create the new string by adding another value. It can be used to evaluate the string including placeholders, variables, and interpolated expression. The ${expression} is used for string interpolation. The expressions are replaced with their corresponding values. Let's understand by the following example.""]","[""String msg = 'Welcome to JavaTpoint';"", 'String msg1 = ""This is double-quoted string example."";', ""String msg2 = ' ' ' line1"", ""line3'''"", 'void main() {', ""String str1 = 'this is an example of a single-line string';"", 'String str2 = ""this is an example of a double-quotes multiline line string"";', 'String str3 = """"""this is a multiline line', 'string using the triple-quotes"""""";', 'var  a = 10;', 'var b = 20;', 'print(str1);', 'print(str2);', 'print(str3);', 'print(""The sum is  = ${a+b}"");', 'this is an example of a single-line string', 'this is an example of a double-quotes multiline line string', 'this is a multiline line', 'string using the triple-quotes', 'The sum is  = 30', 'void main() {', ""String str1 = 'Welcome To ';"", 'String str2 = ""JavaTpoint"";', 'String str3 = str1+str2;', 'print(str3);', 'Welcome To JavaTpoint', 'void main() {', ""String str1 = 'Hello ';"", 'String str2 = ""World!"";', 'String str3 = str1+str2;', 'print(str3);', 'var x = 26;', 'var y = 10;', 'print(""The result is  = ${x%y}"");', 'var name = ""Peter"";', 'var roll_nu = 101;', 'print(""My name is ${name}, my roll number is ${roll_nu}"");', 'Hello World!', 'The result is = 6', 'My name is Peter, my roll number is 101']","['this is an example of a single-line string', 'this is an example of a double-quotes multiline line string', 'this is a multiline line', 'string using the triple-quotes', 'The sum is  = 30', 'Welcome To JavaTpoint', 'Hello World!', 'The result is = 6', 'My name is Peter, my roll number is 101']","['Property|||Description&&&codeUnits|||It returns an unmodified list of the UTF-16 code units of this string.&&&isEmpty|||If the string is empty, it returns true.&&&Length|||It returns the length of the string including whitespace.']",[]
13,['Dart Lists'],"['Dart List is similar to an array, which is the ordered collection of the objects. The array is the most popular and commonly used collection in any other programming language. The Dart list looks like the JavaScript array literals. The syntax of declaring the list is given below.']","['https://www.javatpoint.com/dart-sets', 'https://www.javatpoint.com/dart-string', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-sets', 'https://www.javatpoint.com/dart-string', 'https://www.javatpoint.com/dart-sets']",['https://static.javatpoint.com/tutorial/dart/images/dart-lists.png'],[],"['Types of Lists', 'List Properties', 'Inserting Element into List', 'Updating List', 'Removing List Elements', 'Dart Iterating List elements']","['Fixed Length List', 'Growable List', 'The add() Method', 'The addAll() Method', 'The insert() Method', 'The insertAll() Method ', 'The remove() Method', 'The removeAt() Method', 'The removeLast() Method', 'The removeRange() Method']",['Note - We will learn forEach method in our loop in Dart section.'],"['The Dart list is defined by storing all elements inside the square bracket ([]) and separated by commas (,).', ""Let's understand the graphical representation of the list -"", 'list1 - It is the list variable that refers to the list object.', 'Elements - The List elements refers to the actual value or dart object stored in the given list.', 'The Dart list can be categorized into two types -', 'The fixed-length lists are defined with the specified length. We cannot change the size at runtime. The syntax is given below.', 'Syntax - Create the list of fixed-size', 'The syntax of initializing the fixed-size list element is given below.', 'Syntax - Initialize the fixed size list element', ""Let's understand the following example."", 'Explaination -', 'Syntax - Declaring a List', 'Syntax - Initializing a List', 'Consider the following example -', 'Example - 1', 'Example - 2', 'Below are the properties of the list.', 'Dart provides four methods which are used to insert the elements into the lists. These methods are given below.', 'Explanation -', ""Let's understand the following example -"", 'Explaination -', ""Let's understand the following example - "", 'Explanation -', ""Let's understand the following example -"", 'Explanation -', ""Let's understand the following example -"", 'Explanation -', ""Let's understand the following example -"", 'Explanation -', 'The Dart provides following functions to remove the list elements.', ""Let's understand the following example -"", 'Explanation -', 'It removes an element from the specified index position and returns it. The syntax is given below.', 'Explanation -', 'In the above example, we passed the 3rd index position as an argument to the removeAt() function and it removed the element 13 from the list.', 'The removeLast() method is used to remove the last element from the given list. The syntax is given below.', ""Let's understand the following example."", 'In the above example, we called the removeLast() method, which removed and returned the last element 80 from the given list.', 'Explanation -', ""The Dart List can be iterated using the forEach method. Let's have a look at the following example.""]","['The above syntax is used to create the list of the fixed size. We cannot add or delete an element at runtime. It will throw an exception if any try to modify its size.', 'In the above example, we have created a variable list1 that refers the list of fixed size. The size of the list is five and we inserted the elements corresponding to its index position where 0th index holds 10, 1st index holds 12, and so on.', 'The list is declared without specifying size is known as a Growable list. The size of the Growable list can be modified at the runtime. The syntax of the declaring Growable list is given below.', 'In the following example, we are creating a list using the empty list or List() constructor. The add() method is used to add element dynamically in the given list.', ""This method is used to insert the specified value at the end of the list. It can add one element at a time and returns the modified list object. Let's understand the following example -"", 'In the above example, we have a list named odd_list, which holds odd numbers. We inserted a new element 11 using add() function. The add() function appended the element at the end of the list and returned the modified list.', 'This method is used to insert the multiple values to the given list. Each value is separated by the commas and enclosed with a square bracket ([]). The syntax is given below.', ""In the above example, we don't need to call the add() function multiple times. The addAll() appended the multiple values at once and returned the modified list object."", 'The insert() method provides the facility to insert an element at specified index position. We can specify the index position for the value to be inserted in the list. The syntax is given below.', 'In the above example, we have a list of the random numbers. We called the insert() function and passed the index 2nd value 10 as an argument. It appended the value at the 2nd index and returned the modified list object.', 'The insertAll() function is used to insert the multiple value at the specified index position. It accepts index position and list of values as an argument. The syntax is given below.', 'In the above example, we have appended the list of values at the 0th index position using the insertAll() function. It returned the modified list object.', 'The Dart provides the facility to update the list and we can modify the list by simply accessing its element and assign it a new value. The syntax is given below.', 'In the above example, we have accessed the 3rd index and assigned the new value 55 then printed the result. The previous list updated with the new value 55.', 'replaceRange() - The Dart provides replaceRange() function which is used to update within the given range of list items. It updates the value of the elements with the specified range. The syntax is given below.', 'It removes one element at a time from the given list. It accepts element as an argument. It removes the first occurrence of the specified element in the list if there are multiple same elements. The syntax is given below.', 'In the above example, we called the remove() function to the list and passed the value 20 as an argument. It removed the 20 from the given list and returned the new modified list.', 'This method removes the item within the specified range. It accepts two arguments - start index and end index. It eliminates all element which lies in between the specified range. The syntax is given below.', 'In the above example, we called the removeRange() method and passed start index position 1 and end index position 3 as an arguments. It removed all elements which were belonging in between the specified position.']","['Index - Each element has its index number that tells the element position in the list. The index number is used to access the particular element from the list, such as list_name[index]. The list indexing starts from 0 to length-1 where length denotes the numbers of the element present in the list. For example, - The length of the above list is 4.', 'In the above example, we called the replaceRange() to the list which accepts the three arguments. We passed the starting index 0th, end index 4 and the list of the elements to be replaced as a third arguments. It returned the new list with the replaced element from the given range.']","['var list1 = [10, 15, 20,25,25]', 'var list_name = new List(size)', 'list_name[index] = value;', 'void main() {', 'var list1 = new List(5);', 'list1[0] = 10;', 'list1[1] = 11;', 'list1[2] = 12;', 'list1[3] = 13;', 'list1[4] = 14;', 'print(list1);', '[10, 11, 12, 13, 14]', 'var list_name = [val1, val2, val3]', 'var list_name = new List()', 'list_name[index] = value;', 'void main() {', 'var list1 = [10,11,12,13,14,15];', 'print(list1);', '[10, 11, 12, 13, 14, 15]', 'void main() {', 'var list1 = new List();', 'list1.add(10);', 'list1.add(11);', 'list1.add(12);', 'list1.add(13);', 'print(list1);', '[10, 11, 12, 13]', 'list_name.add(element);', 'void main() {', 'var odd_list = [1,3,5,7,9];', 'print(odd_list);', 'odd_list.add(11);', 'print(odd_list);', '[1, 3, 5, 7, 9]', '[1, 3, 5, 7, 9, 11]', 'list_name.addAll([val1,val2,val3,?..valN]);', 'void main() {', 'var odd_list = [1,3,5,7,9]', 'print(odd_list);', 'odd_list.addAll([11,13,14]);', 'print(odd_list);', '[1, 3, 5, 7, 9]', '[1, 3, 5, 7, 9, 11, 13, 14]', 'list_name.insert(index,value);', 'void main(){', 'List lst = [3,4,2,5];', 'print(lst);', 'lst.insert(2,10);', 'print(lst);', '[3, 4, 2, 5]', '[3, 4, 10, 2, 5]', 'list_name.insertAll(index, iterable_list_of_value)', 'void main(){', 'List lst = [3,4,2,5];', 'print(lst);', 'lst.insertAll(0,[6,7,10,9]);', 'print(lst);', '[3, 4, 2, 5]', '[6, 7, 10, 9, 3, 4, 2, 5]', 'list_name[index] = new_value;', 'void main(){', 'var list1 = [10,15,20,25,30];', 'print(""List before updation: ${list1}"");', 'list1[3] = 55;', 'print(""List after updation:${list1}"");', 'List before updation: [10, 15, 20, 25, 30]', 'List after updation: [10, 15, 20, 55, 30]', 'list_name.replaceRange(int start_val, int end_val, iterable);', 'void main(){', 'var list1 = [10,15,20,25,30];', 'print(""List before updation: ${list1}"");', 'list1.replaceRange(0,4,[1,2,3,4]) ;', 'print(""List after updation using replaceAll() function : ${list1}"");', 'List before updation: [10, 15, 20, 25, 30]', 'List after updation using replaceAll() function : [1, 2, 3, 4, 30]', 'list_name.remove(value)', 'void main(){', 'var list1 = [10,15,20,25,30];', 'print(""List before remove element : ${list1}"");', 'list1.remove(20) ;', 'print(""List after removing element : ${list1}"");', 'List before remove element : [10, 15, 20, 25, 30]', 'List after removing element : [10, 15, 25, 30]', 'list_name.removeAt(int index)', 'void main(){', 'var list1 = [10,11,12,13,14];', 'print(""List before remove element : ${list1}"");', 'list1.removeAt(3) ;', 'print(""List after removing element : ${list1}"");', 'List before remove element : [10, 11, 12, 13, 14]', 'List after removing element : [10, 11, 12, 14]', 'list_name.removeLast()', 'void main(){', 'var list1 = [12,34,65,76,80];', 'print(""List before removing element:${list1}"");', 'list1.removeLast();', 'print(""List after removed element:${list1}"");', 'List before removing element:[12, 34, 65, 76, 80]', 'List after removed element:[12, 34, 65, 76]', 'list_name. removeRange();', 'void main(){', 'var list1 = [12,34,65,76,80];', 'print(""List before removing element:${list1}"");', 'list1.removeRange(1,3);', 'print(""List after removed element:${list1}"");', 'List before removing element:[12, 34, 65, 76, 80]', 'List after removed element:[12, 76, 80]', 'void main(){', 'var list1 = [""Smith"",""Peter"",""Handscomb"",""Devansh"",""Cruise""];', 'print(""Iterating the List Element"");', 'list1.forEach((item){', 'print(""${list1.indexOf(item)}: $item"");', 'Iterating the List Element', '0: Smith', '1: Peter', '2: Handscomb', '3: Devansh', '4: Cruise']","['[10, 11, 12, 13, 14]', '[10, 11, 12, 13, 14, 15]', '[10, 11, 12, 13]', '[1, 3, 5, 7, 9]', '[1, 3, 5, 7, 9, 11]', '[1, 3, 5, 7, 9]', '[1, 3, 5, 7, 9, 11, 13, 14]', '[3, 4, 2, 5]', '[3, 4, 10, 2, 5]', '[3, 4, 2, 5]', '[6, 7, 10, 9, 3, 4, 2, 5]', 'List before updation: [10, 15, 20, 25, 30]', 'List after updation: [10, 15, 20, 55, 30]', 'List before updation: [10, 15, 20, 25, 30]', 'List after updation using replaceAll() function : [1, 2, 3, 4, 30]', 'List before remove element : [10, 15, 20, 25, 30]', 'List after removing element : [10, 15, 25, 30]', 'List before remove element : [10, 11, 12, 13, 14]', 'List after removing element : [10, 11, 12, 14]', 'List before removing element:[12, 34, 65, 76, 80]', 'List after removed element:[12, 34, 65, 76]', 'List before removing element:[12, 34, 65, 76, 80]', 'List after removed element:[12, 76, 80]', 'Iterating the List Element', '0: Smith', '1: Peter', '2: Handscomb', '3: Devansh', '4: Cruise']",['Property|||Description&&&first|||It returns the first element case.&&&isEmpty|||It returns true if the list is empty.&&&isNotEmpty|||It returns true if the list has at least one element.&&&length|||It returns the length of the list.&&&last|||It returns the last element of the list. &&&reversed|||It returns a list in reverse order.&&&Single|||It checks if the list has only one element and returns it.'],['|||Fixed Length List|||Growable List||||||add()|||addAll()|||insert()|||insertAll()||||||remove()|||removeAt()|||removeLast()|||removeRange()|||']
14,['Dart Sets'],"[""The Dart Set is the unordered collection of the different values of the same type. It has much functionality, which is the same as an array, but it is unordered. Set doesn't allow storing the duplicate values. The set must contain unique values.""]","['https://www.javatpoint.com/splface', 'https://www.javatpoint.com/dart-lists', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/splface', 'https://www.javatpoint.com/dart-lists', 'https://www.javatpoint.com/splface']",[],[],"['Dart Initializing Set', 'Add Element into Set', 'Access the Set Element', 'Dart Finding Element in Set', 'Dart Remove Set Element', 'Dart Iterating Over a Set Element', 'Dart Remove All Set Element', 'TypeCast Set to List', 'Dart Set Operations', 'Dart Set Properties']",[],"[""Note - It should be remembered that the syntax of the set is much similar to the map literals. If we forget to define the type annotation with {} or with the variable it's assigned to; then, Dart compiler will create Map object instead of Set."", 'Note - We will learn conditional statement in the next section.', 'Note - The type of List must be the same as the type of Set.']","['The setname refers to the name of the set variable, and type refers to the data type of the set.', ""Let's have a look at the following example of set declaration -"", 'Consider the following example -', 'Explanation -', 'Consider the following example.', 'Explanation -', 'Explanation -', 'Explanation -', 'In the above program, we removed the ""Peter"" from the given set by using the remove() method. It returned the newly modified set object.', 'In Dart, the set element can be iterated using the forEach method as following -', 'The Set object can convert into the List Object using the toList() method. The syntax is as follows.', 'Dart Set provides the facility to perform following set operations. These operations are given below.', 'Union - The union is set to combine the value of the two given sets a and b.', 'Intersection - The intersection of the two set a and b returns all elements, which is common in both sets.', 'Subtracting - The subtracting of two sets a and b (a-b) is the element of set b is not present in the set a.', ""Let's understand the following example."", 'The few properties of the Dart set as follows.']","['It plays an essential role when we want to store the distinct data of the same type into the single variable. Once we declare the type of the Set, then we can have an only value of the same type. The set cannot keep the order of the elements.', 'Dart provides the two methods to declare/initialize an empty set. The set can be declared by using the {} curly braces proceeded by a type argument, or declare the variable type Set with curly braces {}. The syntax of declaring set is given below.', 'In the above example, we have set names. We applied the elementAt() method and passed index position 3 as an argument. We created a variable x, which holds the assessed value, and then we printed the result.', 'The remove() method is used to eliminate or remove an element from the given set. It takes the value as an argument; the value is to be removed in the given set. The syntax is given below.', 'We can remove entire set element by using the clear() methods. It deletes or removes all elements to the given set and returns an empty set. The syntax is as follow-']","['The Dart provides the two methods add() and addAll() to insert an element into the given set. The add() method is used to add the single item into the given set. It can add one at a time when the addAll() method is used to add the multiple elements to an existing set. The syntax is given below.', 'We have declared two sets of names and emp. The set names consisted of few elements, while emp is an empty set. We added the single element ""Jonathan"" by using the add() method then; we called the addAll() method and passed another set names as an argument. It added the multiple values to the emp set.', 'Dart provides the elementAt() method, which is used to access the item by passing its specified index position. The set indexing starts from the 0 and goes up to size - 1, where size is the number of the element exist in the Set. It will throw an error if we enter the bigger index number than its size. The syntax is given below.', 'Dart provides the contains() method, which is used to find an element in the set. It accepts the single item as an argument ad return the result in Boolean type. If the given element present in the set, it returns true otherwise false. The syntax is given below.', 'In the above program, to find the element in the given set, we called contains() method and passed value ""Ricky"" as an argument. We used the conditional statement to find out whether an element belongs to the given set or not. The given element present in the set then condition became true, it printed if block statement.']","['var setName = <type>{};', 'Set<type> setname = {};', 'void main(){', 'print(""Initializing the Set"");', 'var names = <String>{""James"",""Ricky"", ""Devansh"",""Adam""};', 'print(names);', 'Initializing the Set', '{James, Ricky, Devansh, Adam}', 'Set_name.add(<value>);', 'Set_name.addAll(val1,val2....valN)', 'void main(){', 'print(""Insert element into the Set"");', 'var names = {""James"",""Ricky"",""Devansh"",""Adam""};', 'var emp = <String>{};', 'emp.add(""Jonathan"");', 'print(emp);', 'emp.addAll(names);', 'print(emp);', 'Insert element into the Set', '{Jonathan}', '{Jonathan, James, Ricky, Devansh, Adam}', 'Set_name.elementAt(index)', 'void main(){', 'print(""Access element from the Set"");', 'var names = {""James"",""Ricky"",""Devansh"",""Adam""};', 'print(names);', 'var x = names.elementAt(3);', 'print(x);', 'Access element from the Set', '{James, Ricky, Devansh, Adam}', 'set_name.contains(value);', 'void main()  {', 'print(""Example - Find Element in the given Set"");', 'var names = <String>{""Peter"",""John"",""Ricky"",""Devansh"",""Finch""};', 'if(names.contains(""Ricky"")){', 'print(""Element Found"");', 'else {', 'print(""Element not found"");', 'Example - Find Element in the given Set', 'Element Found', 'set_names.contains(value)', 'void main()  {', 'print(""Example - Remove Element in the given Set"");', 'var names = <String>{""Peter"", ""John"", ""Ricky"", ""Devansh"", ""Finch""};', 'print(""Before remove : ${names}"");', 'names.remove(""Peter"");', 'print(""After remove  :  ${names}"");', 'Example - Remove Element in the given Set', 'Before remove : {Peter, John, Ricky, Devansh, Finch}', 'After remove  :  {John, Ricky, Devansh, Finch}', 'void main()  {', 'print(""Example - Remove Element in the given Set"");', 'var names = <String>{""Peter"",""John"",""Ricky"",""Devansh"",""Finch""};', 'names.forEach((value) {', ""print('Value:  $value');"", '});', 'Example - Remove Element in the given Set', 'Value:  Peter', 'Value:  John', 'Value:  Ricky', 'Value:  Devansh', 'Value:  Finch', 'set_name.clear();', 'void main()  {', 'print(""Example - Remove All Element to the given Set"");', 'var names = <String>{""Peter"",""John"",""Ricky"",""Devansh"",""Finch""};', 'names.clear();', 'print(names);', 'Example - Remove All Element to the given Set', '{Peter, John, Ricky, Devansh, Finch}', 'List<type> <list_name> = <set_name>. toList();', 'void main()  {', 'var x = <int>{10,11,12,13,14,15};', 'var y = <int>{12,18,29,43};', 'var z = <int>{2,5,10,11,32};', 'print(""Example - Set Operations"");', 'print(""x union y is -"");', 'print(x.union(y));', 'print(""x intersection y is - "");', 'print(x.intersection(y));', 'print(""y difference z is - "");', 'print(y.difference(z));', 'Example - Set Operations', 'x union y is -', '{10, 11, 12, 13, 14, 15, 18, 29, 43}', 'x intersection y is -', 'y difference z is -', '{12, 18, 29, 43}']","['Initializing the Set', '{James, Ricky, Devansh, Adam}', 'Insert element into the Set', '{Jonathan}', '{Jonathan, James, Ricky, Devansh, Adam}', 'Access element from the Set', '{James, Ricky, Devansh, Adam}', 'Adam', 'Example - Find Element in the given Set', 'Element Found', 'Example - Remove Element in the given Set', 'Before remove : {Peter, John, Ricky, Devansh, Finch}', 'After remove  :  {John, Ricky, Devansh, Finch}', 'Example - Remove Element in the given Set', 'Value:  Peter', 'Value:  John', 'Value:  Ricky', 'Value:  Devansh', 'Value:  Finch', 'Example - Remove All Element to the given Set', '{Peter, John, Ricky, Devansh, Finch}', '{}', 'Example - Set Operations', 'x union y is -', '{10, 11, 12, 13, 14, 15, 18, 29, 43}', 'x intersection y is -', '{12}', 'y difference z is -', '{12, 18, 29, 43}']","['Properties|||Explanations&&&first|||It is used to get the first element in the given set.&&&isEmpty|||If the set does not contain any element, it returns true.&&&isNotEmpty|||If the set contains at least one element, it returns true&&&length|||It returns the length of the given set. &&&last|||It is used to get the last element in the given set.&&&hashcode|||It is used to get the hash code for the corresponding object.&&&Single|||It is used to check whether a set contains only one element.']",[]
15,['Dart Map'],"['Dart Map is an object that stores data in the form of a key-value pair. Each value is associated with its key, and it is used to access its corresponding value. Both keys and values can be any type. In Dart Map, each key must be unique, but the same value can occur multiple times. The Map representation is quite similar to Python Dictionary. The Map can be declared by using curly braces {} ,and each key-value pair is separated by the commas(,). The value of the key can be accessed by using a square bracket([]).']","['https://www.javatpoint.com/dart-symbol', 'https://www.javatpoint.com/dart-sets', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/dart-symbol', 'https://www.javatpoint.com/dart-sets', 'https://www.javatpoint.com/dart-symbol']",[],[],"['Declaring a Dart Map', 'Map Properties', 'Map Methods']","['Using Map Literals', 'Using Map Constructor']",['Note - A map value can be any object including NULL.'],"['Dart Map can be defined in two methods.', 'The syntax of declaring Dart Map is given below.', 'Example - 1:', 'Example - 2: Adding value at runtime', 'Explanation -', 'After that, initialize the values.', 'Example - 1: Map constructor', 'The dart:core:package has Map class which defines following properties.', 'The commonly used methods are given below.', 'addAll() - It adds multiple key-value pairs of other. The syntax is given below.', 'Parameter:', ""Let's understand the following example."", 'remove() - It eliminates all pairs from the map. The syntax is given below.', ""Let's have a look at following example."", 'remove() - It removes the key and its associated value if it exists in the given map. The syntax is given below.', 'Parameter -', ""Let's understand the following example."", ""forEach() - It is used to iterate the Map's entries. The syntax is given below."", 'Parameter -', ""Let's understand the following example.""]","['To declare a Map using map literal, the key-value pairs are enclosed within the curly braces ""{}"" and separated by the commas. The syntax is given below.', 'In the above example, we declared a Map of a student name. We added the value at runtime by using a square bracket and passed the new key as a course associated with its value.', 'To declare the Dart Map using map constructor can be done in two ways. First, declare a map using map() constructor. Second, initialize the map. The syntax is given below.']",[],"['var map_name = {key1:value1, key2:value2 [.......,key_n: value_n]}', 'void main() {', ""var student = {'name':'Tom','age':'23'};"", 'print(student);', '{name: Tom, age: 23}', 'void main() {', ""var student = {'name':' tom', 'age':23};"", ""student['course'] = 'B.tech';"", 'print(student);', '{name: tom, age: 23, course: B.tech}', 'var map_name = new map()', 'map_name[key] = value', 'void main() {', 'var student = new Map();', ""student['name'] = 'Tom';"", ""student['age'] = 23;"", ""student['course'] = 'B.tech';"", ""student['Branch'] = 'Computer Science';"", 'print(student);', '{name: Tom, age: 23, course: B.tech, Branch: Computer Science}', 'void main() {', 'var student = new Map();', ""student['name'] = 'Tom';"", ""student['age'] = 23;"", ""student['course'] = 'B.tech';"", ""student['Branch'] = 'Computer Science';"", 'print(student);', 'print(""The keys are : ${student.keys}"");', 'print(""The values are : ${student.values}"");', 'print(""The length is : ${student.length}"");', 'print(student.isEmpty);', 'print(student.isNotEmpty);', '{name: Tom, age: 23, course: B.tech, Branch: Computer Science}', 'The keys are : (name, age, course, Branch)', 'The values are : (Tom, 23, B.tech, Computer Science)', 'The length is : 4', 'Map.addAll(Map<Key, Value> other)', 'void main() {', ""Map student = {'name':'Tom','age': 23};"", ""print('Map :${student}');"", ""student.addAll({'dept':'Civil','email':'tom@xyz.com'});"", ""print('Map after adding  key-values :${student}');"", 'Map :{name: Tom, age: 23}', 'Map after adding  key-values :{name: Tom, age: 23, dept: Civil, email: [email\xa0protected]}', 'Map.clear()', 'void main() {', ""Map student = {'name':'Tom','age': 23};"", ""print('Map :${student}');"", 'student.clear();', ""print('Map after removing all key-values :${student}');"", 'Map :{name: Tom, age: 23}', 'Map after removing all key-values :{}', 'Map.remove(Object key)', 'void main() {', ""Map student = {'name':'Tom','age': 23};"", ""print('Map :${student}');"", ""student.remove('age');"", ""print('Map after removing given key :${student}');"", 'Map :{name: Tom, age: 23}', 'Map after removing given key :{name: Tom}', 'Map.forEach(void f(K key, V value));', 'void main() {', ""Map student = {'name':'Tom','age': 23};"", ""print('Map :${student}');"", ""student.forEach((k,v) => print('${k}: ${v}'));"", 'Map :{name: Tom, age: 23}', 'name: Tom', 'age: 23']","['{name: Tom, age: 23}', '{name: tom, age: 23, course: B.tech}', '{name: Tom, age: 23, course: B.tech, Branch: Computer Science}', '{name: Tom, age: 23, course: B.tech, Branch: Computer Science}', 'The keys are : (name, age, course, Branch)', 'The values are : (Tom, 23, B.tech, Computer Science)', 'The length is : 4', 'false', 'true', 'Map :{name: Tom, age: 23}', 'Map after adding  key-values :{name: Tom, age: 23, dept: Civil, email: [email\xa0protected]}', 'Map :{name: Tom, age: 23}', 'Map after removing all key-values :{}', 'Map :{name: Tom, age: 23}', 'Map after removing given key :{name: Tom}', 'Map :{name: Tom, age: 23}', 'name: Tom', 'age: 23']","['Properties|||Explanation&&&Keys|||It is used to get all keys as an iterable object.&&&values|||It is used to get all values as an iterable object.&&&Length|||It returns the length of the Map object.&&&isEmpty|||If the Map object contains no value, it returns true.&&&isNotEmpty|||If the Map object contains at least one value, it returns true.']","['|||Using Map Literal|||Using Map Constructor||||||other - It denotes a key-value pair. It returns a void type.||||||Keys - It deletes the given entries. It returns the value associated with the specified key.||||||f(K key, V value) - It denotes the key-value pair of the map.|||']"
16,['Dart Symbol'],"['Symbol object is used to specify an operator or identifier declared in a Dart programming language. Generally, we do not need to use symbols while Dart programming, but they are helpful for APIs. It usually refers to identifiers by name, because identifier names can vary but not identifier symbols.']","['https://www.javatpoint.com/dart-runes', 'https://www.javatpoint.com/dart-map', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-runes', 'https://www.javatpoint.com/dart-map', 'https://www.javatpoint.com/dart-runes']",[],[],['Dart Convert Symbol to String'],['FoolSystem.dart'],[],"['The dart:mirrors library has all of the reflection related classes. It can be used with the command-line applications as well as web applications.', 'The hash(#) symbol, followed by the name is used to define Symbol in Dart. The syntax is given below.', 'Here, the valid identifier such as function, valid class, public member name, or library name can be used in place of name value.', ""Let's understand the following example."", 'Now, we are creating new file FooSymbol.dart and run the following code.', 'The above code will show the following output.', 'Example - 2 : Print the number of instance methods of class', 'In the following example, The Dart provides predefine class ClassMirror which helps us to display the number of instance methods of class.']","['Dart symbols are dynamic string name that is used to derive the metadata from a library. It mainly accumulates the connection between human-readable strings that are enhanced to be used by computers.', 'Symbols have a term which is called Reflection; it is a technique that used to the metadata of at run-time, for example - the number of methods used in class, a number of constructors in a class, or numbers of arguments in a function.', 'In the above code, we have declared a class Foo in a library foo_lib. The class contains the methods m1, m2, and m3. We save the above file as foo.dart.', ""We can convert the Dart symbol into the string by using a built-in class MirrorClass, which is provided by the dart:mirror package. Let's understand the following example.""]",[],"['Symbol obj = new Symbol(""name"")', 'library foo_lib;', 'class Foo {', 'm1() {', 'print(""Inside m1"");', 'm2() {', 'print(""Inside m2"");', 'm3() {', 'print(""Inside m3"");', ""import 'dart:core';"", ""import 'dart:mirrors';"", ""import 'Foo.dart';"", 'main() {', 'Symbol lib = new Symbol(""foo_lib"");', 'Symbol clsToSearch = new Symbol(""Foo"");', 'if(checkIf_classAvailableInlibrary(lib, clsToSearch))', 'print(""class found.."");', 'bool checkIf_classAvailableInlibrary(Symbol libraryName, Symbol className) {', 'MirrorSystem mirrorSystem = currentMirrorSystem();', 'LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);', 'if (libMirror != null) {', 'print(""Found Library"");', 'print(""checkng...class details.."");', 'print(""No of classes found is : ${libMirror.declarations.length}"");', 'libMirror.declarations.forEach((s, d) => print(s));', '', 'if (libMirror.declarations.containsKey(className)) return true;', 'return false;', 'Found Library', 'checkng...class details..', 'No of classes found is : 1', 'Symbol(""Foo"") // Displays the class name', 'class found..', ""import 'dart:core';"", ""import 'dart:mirrors';"", ""import 'Foo.dart';"", 'main() {', 'Symbol lib = new Symbol(""foo_lib"");', 'Symbol clsToSearch = new Symbol(""Foo"");', 'reflect_InstanceMethods(lib, clsToSearch);', 'void reflect_InstanceMethods(Symbol libraryName, Symbol className) {', 'MirrorSystem mirrorSystem = currentMirrorSystem();', 'LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);', 'if (libMirror != null) {', 'print(""Found Library"");', 'print(""checkng...class details.."");', 'print(""No of classes found is : ${libMirror.declarations.length}"");', 'libMirror.declarations.forEach((s, d) => print(s));', 'if (libMirror.declarations.containsKey(className)) print(""found class"");', 'ClassMirror classMirror = libMirror.declarations[className];', 'print(""No of instance methods found is ${classMirror.instanceMembers.length}"");', 'classMirror.instanceMembers.forEach((s, v) => print(s));', 'Found Library', 'checkng...class details..', 'No of classes found is : 1', 'Symbol(""Foo"")', 'found class', 'No of instance methods found is 8', 'Symbol(""=="")', 'Symbol(""hashCode"")', 'Symbol(""toString"")', 'Symbol(""noSuchMethod"")', 'Symbol(""runtimeType"")', 'Symbol(""m1"")', 'Symbol(""m2"")', 'Symbol(""m3"")', ""import 'dart:mirrors';"", 'void main(){', 'Symbol lib = new Symbol(""foo_lib"");', 'String name_of_lib = MirrorSystem.getName(lib);', 'print(lib);', 'print(name_of_lib);', 'Symbol(""foo_lib"")', 'foo_lib']","['Found Library', 'checkng...class details..', 'No of classes found is : 1', 'Symbol(""Foo"") // Displays the class name', 'class found..', 'Found Library', 'checkng...class details..', 'No of classes found is : 1', 'Symbol(""Foo"")', 'found class', 'No of instance methods found is 8', 'Symbol(""=="")', 'Symbol(""hashCode"")', 'Symbol(""toString"")', 'Symbol(""noSuchMethod"")', 'Symbol(""runtimeType"")', 'Symbol(""m1"")', 'Symbol(""m2"")', 'Symbol(""m3"")', 'Symbol(""foo_lib"")', 'foo_lib']",[],[]
17,['Dart Runes'],"[""As we discussed earlier, Dart String is a sequence of characters, letters, numbers, and unique characters. It is the sequence of UTF - 16 Unicode characters where Dart Runes are the sequence UTF - 32 Unicode code points. It is a UTF-32 string which is used to print the special symbol. For example - The theta (Θ) symbol is signified by using the corresponding Unicode equivalent \\u0398; here '\\u' refers to Unicode, and the numbers are in the hexadecimal. Sometimes the hex digits are the more than 4 digits then it should be placed in curly brackets ({}). Let's understand it by the following example.""]","['https://www.javatpoint.com/dart-enumeration', 'https://www.javatpoint.com/dart-symbol', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-enumeration', 'https://www.javatpoint.com/dart-symbol', 'https://www.javatpoint.com/dart-enumeration']",[],[],"['String.codeUnitAt() Method', 'String.codeUnits Property', 'String.runes Property']",[],[],"['The Dart provides the dart: core library which has the Dart Runes. The String code unit can be retrieved in the following three methods.', 'Explanation -', 'The codeUnits property returns UTF-16 code units for given string in the form of a list. The syntax is given below.', ""Let's have a look at following example -"", 'Explanation -', 'The codeUnits returned the list of the code unit corresponding to the given character.', 'The runes property is used to iterate the given string though the UTF-16 code unit. The Syntax is given below.', 'Consider the following example.']","['In the above code, the variable str holds string value ""JavaTpoint"". We called the codeuUnitAt() function and passed index position. It returned the code unit of 0th index character.']","[""We can access the character's code unit in the given string by using the codeUnitAt() method. It accepts the index position as an argument and returns the 16-bit UTF-16 code unit at the passed index position of the string. The syntax is the given below.""]","['void main() {', ""var heart_rune = '\\u2665';"", ""var theta_rune = '\\u{1f600}';"", 'print(heart_rune);', 'print(theta_rune);', 'void main() {', ""String str = 'JavaTpoint';"", 'print(""Welcome to JavaTpoint"");', 'print(str.codeUnitAt(0));', 'Welcome to JavaTpoint', 'String.codeUnits;', 'void main() {', ""String str = 'JavaTpoint';"", 'print(""Welcome to JavaTpoint"");', 'print(str.codeUnits);', 'Welcome to JavaTpoint', '[74, 97, 118, 97, 84, 112, 111, 105, 110, 116]', 'String.runes', 'void main(){', '""JavaTpoint"".runes.forEach((int rune) {', 'var character=new String.fromCharCode(rune);', 'print(character);', '});']","['♥', 'Θ', 'Welcome to JavaTpoint', '74', 'Welcome to JavaTpoint', '[74, 97, 118, 97, 84, 112, 111, 105, 110, 116]', 'J', 'a', 'v', 'a', 'T', 'p', 'o', 'i', 'n', 't']",[],['|||Using String.codeUnitAt() Method|||Using String.codeUnits property|||Using String.runes property|||']
18,['Dart Enumeratio'],"['An enumeration is a set of values called as elements, members, etc. This is essential when we carried out the operation with the limited set of values available for variable. For example - you can think of the days of the month can only be one of the seven days - Sun, Mon, Tue, Wed, Thur, Fri, Sat.']","['https://www.javatpoint.com/dart-control-flow-statement', 'https://www.javatpoint.com/dart-runes', 'https://www.javatpoint.com/dart-control-flow-statement', 'https://www.javatpoint.com/dart-runes', 'https://www.javatpoint.com/dart-control-flow-statement']",[],[],['Initializing an Enumeration'],[],[],"['Here, the enum_name denotes the enum type name and list of the identifiers enclosed within the curly bracket.', ""Let's define an enumeration for months of the year."", ""Let's say programming example -"", 'Example - 2']","['The enumeration is declared using the enum keyword, followed by the comma-separated list of the valid identifiers. This list is enclosed within the curly braces {}. The syntax is given below.', 'Each of the identifier in the enumeration list has its index position. The index of the first enumeration is 0; the second enumeration is 1, and so on.']",[],"['enum <enum_name> {', 'const1,', 'const2,', '....., constN', 'enum EnumofYear {', 'January,', 'February,', 'August,', 'September,', 'October,', 'November,', 'December,', 'enum EnumofYear {', 'January,', 'February,', 'August,', 'September,', 'October,', 'November,', 'December,', 'void main() {', 'print(""JavaTpoint - Dart Enumeration"" );', 'print(EnumofYear.values);', ""EnumofWeek.values.forEach((v) => print('value: $v, index: ${v.index}'));"", 'JavaTpoint - Dart Enumeration', '[EnumofYear.January, EnumofYear.February, EnumofYear.March, EnumofYear.April, EnumofYear.May, EnumofYear.June, EnumofYear.July, EnumofYear.August, EnumofYear.September, EnumofYear.October, EnumofYear.November, EnumofYear.December]', 'value: EnumofYear.January, index: 0', 'value: EnumofYear.February, index: 1', 'value: EnumofYear.March, index: 2', 'value: EnumofYear.April, index: 3', 'value: EnumofYear.May, index: 4', 'value: EnumofYear.June, index: 5', 'value: EnumofYear.July, index: 6', 'value: EnumofYear.August, index: 7', 'value: EnumofYear.September, index: 8', 'value: EnumofYear.October, index: 9', 'value: EnumofYear.November, index: 10', 'value: EnumofYear.December, index: 11', 'enum Process_Status {', 'none,', 'running,', 'stopped,', 'paused', 'void main() {', 'print(Process_Status.values);', ""Process_Status.values.forEach((v) => print('value: $v, index: ${v.index}'));"", ""print('running: ${Process_Status.running}, ${Process_Status.running.index}');"", ""print('running index: ${Process_Status.values[1]}');"", '[Process_Status.none, Process_Status.running, Process_Status.stopped, Process_Status.paused]', 'value: Process_Status.none, index: 0', 'value: Process_Status.running, index: 1', 'value: Process_Status.stopped, index: 2', 'value: Process_Status.paused, index: 3', 'running: Process_Status.running, 1', 'running index: Process_Status.running']","['JavaTpoint - Dart Enumeration', '[EnumofYear.January, EnumofYear.February, EnumofYear.March, EnumofYear.April, EnumofYear.May, EnumofYear.June, EnumofYear.July, EnumofYear.August, EnumofYear.September, EnumofYear.October, EnumofYear.November, EnumofYear.December]', 'value: EnumofYear.January, index: 0', 'value: EnumofYear.February, index: 1', 'value: EnumofYear.March, index: 2', 'value: EnumofYear.April, index: 3', 'value: EnumofYear.May, index: 4', 'value: EnumofYear.June, index: 5', 'value: EnumofYear.July, index: 6', 'value: EnumofYear.August, index: 7', 'value: EnumofYear.September, index: 8', 'value: EnumofYear.October, index: 9', 'value: EnumofYear.November, index: 10', 'value: EnumofYear.December, index: 11', '[Process_Status.none, Process_Status.running, Process_Status.stopped, Process_Status.paused]', 'value: Process_Status.none, index: 0', 'value: Process_Status.running, index: 1', 'value: Process_Status.stopped, index: 2', 'value: Process_Status.paused, index: 3', 'running: Process_Status.running, 1', 'running index: Process_Status.running']",[],[]
19,['Dart Control Flow Statement'],"['The control statements or flow of control statements are used to control the flow of Dart program. These statements are very important in any programming languages to decide whether other statement will be executed or not. The code statement generally runs in the sequential manner. We may require executing or skipping some group of statements based on the given condition, jumps to another statement, or repeat the execution of the statements.']","['https://www.javatpoint.com/dart-if-statements', 'https://www.javatpoint.com/dart-enumeration', 'https://www.javatpoint.com/dart-if-statements', 'https://www.javatpoint.com/dart-enumeration', 'https://www.javatpoint.com/dart-if-statements']",['https://static.javatpoint.com/tutorial/dart/images/dart-control-flow-statement.png'],[],['Categories of Flow Statement'],"['Dart Decision-Making Statements', 'Dart Looping Statements', 'Dart Jump Statements']",[],"['In Dart, Control flow statement can be categorized mainly in three following ways.', 'Dart provides following types of Decision-making statement.', 'Dart provides following types of the looping statements.', 'Dart provides following types of jump statements -', 'The above jump statements behave differently.']","['In Dart, control statement allows to smooth flow of the program. By using the control flow statements, a Dart program can be altered, redirected, or repeated based on the application logic.', 'Dart looping statements are used to execute the block of code multiple-times for the given number of time until it matches the given condition. These statements are also called Iteration statement.', 'Jump statements are used to jump from another statement, or we can say that it transfers the execution to another statement from the current statement.']","['The Decision-making statements allow us to determine which statement to execute based on the test expression at runtime. Decision-making statements are also known as the Selection statements. In Dart program, single or multiple test expression (or condition) can be existed, which evaluates Boolean TRUE and FALSE. These results of the expression/condition helps to decide which block of statement (s) will execute if the given condition is TRUE or FALSE.']",[],[],[],['|||Decision-making statements|||Looping statements|||Jump statements||||||If Statement|||If-else Statements|||If else if Statement|||Switch Case Statement||||||Dart for loop|||Dart for….in loop|||Dart while loop|||Dart do while loop||||||Dart Break Statement|||Dart Continue Statement|||']
20,['Dart if Statements'],"['If statement allows us to a block of code execute when the given condition returns true. In Dart programming, we have a scenario where we want to execute a block of code when it satisfies the given condition. The condition evaluates Boolean values TRUE or FALSE and the decision is made based on these Boolean values.']","['https://www.javatpoint.com/dart-if-else-statement', 'https://www.javatpoint.com/dart-control-flow-statement', 'https://www.javatpoint.com/dart-if-else-statement', 'https://www.javatpoint.com/dart-control-flow-statement', 'https://www.javatpoint.com/dart-if-else-statement']",[],[],['Dart If Statement Flow Diagram'],[],[],"['The syntax of if statement is given below.', ""Let's understand the following example."", 'Example - 1', 'Explanation -', 'Example - 2']","['The given condition is if statement will evaluate either TRUE or FALSE, if it evaluates true then statement inside if body is executed, if it evaluates false then statement outside if block is executed.', 'In the above program, we declared an integer variable n. We specified the condition in if statement. Is the given number is smaller than 40 or not? The if statement evaluated the true, it executed the if body and printed the result.', 'In the above program, we can see that the if condition evaluated the false then execution skipped the if body and executed the outside statement of if block.']",[],"['If (condition) {', 'void main () {', 'var n = 35;', 'if (n<40){', 'print(""The number is smaller than 40"")', 'The number is smaller than 40', 'void main () {', 'var age = 16;', 'if (age>18){', 'print(""You are eligible for voting"");', 'print(""You are not eligible for voting"");', 'You are not eligible for voting']","['The number is smaller than 40', 'You are not eligible for voting']",[],[]
21,['Dart if-else Statement'],"['In Dart, if-block is executed when the given condition is true. If the given condition is false, else-block is executed. The else block is associated with the if-block.']","['https://www.javatpoint.com/dart-if-else-if-statement', 'https://www.javatpoint.com/dart-if-statements', 'https://www.javatpoint.com/dart-if-else-if-statement', 'https://www.javatpoint.com/dart-if-statements', 'https://www.javatpoint.com/dart-if-else-if-statement']",['https://static.javatpoint.com/tutorial/dart/images/dart-if-else-statement.png'],[],[],['Dart if…else Statement Flow Diagram'],[],"[""Let's understand the following example."", 'Explanation -', 'In the above code, we have two variables which stored integer value. The given condition evaluated false then it printed the else-block.', 'Example -2 Write a program to find the given number is even or odd.', 'Explanation -']","['Here, if -else statement is used for either types of result TRUE or False. If the given condition evaluates true, then if body is executed and if the given condition evaluates false; then, the else body is executed.']","['In the above example, we have an integer variable num which stored 20 and we used the if-else statement to check whether a given number is even of odd. The given condition evaluated true because modulus of 20 is equal to 0 then it printed the given number is even on the screen.']","['if(condition) {', '} else {', 'void main() {', 'var x = 20;', 'var y = 30;', 'print(""if-else statement example"");', 'if(x > y){', 'print(""x is greater than y"");', '} else {', 'print(""y is greater than x"");', 'if-else statement example', 'y is greater than x', 'void main() {', 'var num = 20;', 'print(""if-else statement example"");', 'if(num%2 == 0){', 'print(""The given number is even"");', '} else {', 'print(""The given number is odd"");', 'If-else statement example', 'The given number is even']","['if-else statement example', 'y is greater than x', 'If-else statement example', 'The given number is even']",[],[]
22,['Dart if else-if Statement'],['Dart if else-if statement provides the facility to check a set of test expressions and execute the different statements. It is used when we have to make a decision from more than two possibilities.'],"['https://www.javatpoint.com/dart-switch-case-statement', 'https://www.javatpoint.com/dart-if-else-statement', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-switch-case-statement', 'https://www.javatpoint.com/dart-if-else-statement', 'https://www.javatpoint.com/dart-switch-case-statement']",['https://static.javatpoint.com/tutorial/dart/images/dart-if-else-if-statement.png'],[],['Nested If else Statement'],"['Dart if else if Statement Flow Diagram', 'Syntax', ""Example - Write a program to print the result based on the student's marks."", 'Example - Write a program to find the greatest number.']",[],"[""Let's understand the following example."", 'Explanation -', 'The marks will be checked with the first condition since it is false, and then it moved to check the second condition.', 'It compared with the second condition and found true, then it printed the output on the screen.', 'You should modify the above value and notice the result.']","['The above program prints the result based on the marks scored in the test. We have used if else if to print the result. We have initialized the marks variable with the integer value 74. We have checked the multiple conditions in the program.', 'This process will continue until all expression is evaluated; otherwise the control will transfer out of the else if ladder and default statement is printed.', ""Dart nested if else statement means one if-else inside another one. It is beneficial when we need a series of decisions. Let's understand the following example."", 'In the inner block we have another condition that checks if variable a is greater than c. If the condition is evaluated true then the inner block will be executed.', 'Our program returned the false in first condition, and then it skipped the inner block check another condition. If satisfied the condition and printed the output on the screen.']","['Here, this type of structure is also known as the else….if ladder. The condition is evaluated from top to bottom. Whenever it found the true condition, statement associated with that condition is executed. When all the given condition evaluates false, then the else block is executed.', 'In the above program, we have declared three variables a, b, and c with the values 10, 20, and 30. In the outer if-else we provided the condition it checks if a is greater than b. If the condition is true then it will execute the inner block otherwise the outer block will be executed.']","['if (condition1) {', 'else if(condition2) {', 'else if (conditionN) {', 'void main() {', 'var marks = 74;', 'if(marks > 85)', 'print(""Excellent"");', 'else if(marks>75)', 'print(""Very Good"");', 'else if(marks>65)', 'print(""Good"");', 'print(""Average"");', 'Average', 'void main() {', 'var a = 10;', 'var b = 20;', 'var c = 30;', 'if (a>b){', 'if(a>c){', 'print(""a is greater"");', '}', 'else{', 'print(""c is greater"");', '}', 'else if (b>c){', 'print(""b is greater"");', 'print(""c is greater"");', 'C is greater']","['Average', 'C is greater']",[],[]
23,['Dart Switch Case Statement'],"['Dart Switch case statement is used to avoid the long chain of the if-else statement. It is the simplified form of nested if-else statement. The value of the variable compares with the multiple cases, and if a match is found, then it executes a block of statement associated with that particular case.']","['https://www.javatpoint.com/dart-loops', 'https://www.javatpoint.com/dart-if-else-if-statement', 'https://www.javatpoint.com/dart-loops', 'https://www.javatpoint.com/dart-if-else-if-statement', 'https://www.javatpoint.com/dart-loops']",['https://static.javatpoint.com/tutorial/dart/images/dart-switch-case-statement.png'],[],['Benefit of Switch case'],"['Dart Switch Case Statement Flowchart', 'Syntax:']",[],"['The assigned value is compared with each case until the match is found. Once the match found, it identifies the block of code to be executed.', 'The syntax is given below.', 'The labels must be unique because same name label will create the problem while running the program.', 'A block is associated with the case label. Block is nothing but a group of multiple statements for a particular case.', ""Let's understand the following example."", 'Explanation -', ""Let's have a look at another scenario."", 'Explanation -']","['Here, the expression can be integer expression or character expression. The value 1, 2, n represents the case labels and they are used to identify each case particularly. Each label must be ended with the colon(:).', 'Once the switch expression is evaluated, the expression value is compared with all cases which we have defined inside the switch case. Suppose the value of the expression is 2, then compared with each case until it found the label 2 in the program.', 'Sometimes the value of the expression is not matched with any of the cases; then the default case will be executed. It is optional to write in the program.']","['The break statement is essential to use at the end of each case. If we do not put the break statement, then even the specific case is found, it will execute all the cases until the program end is reached. The break keyword is used to declare the break statement.', 'In the above program, we have initialized the variable n with value 3. We constructed the switch case with the expression, which is used to compare the each case with the variable n. Since the value is 3 then it will execute the case-label 3. If found successfully case-label 3, and printed the result on the screen.', 'In the above program, we have initialized the variable Roll_num with the value of 90014. The switch test-expression checked all cases which are declared inside the switch statement. The test-expression did not found the match in cases; then it printed the default case statement.', 'As we discussed above, the switch case is a simplified form of if nested if-else statement. The problem with the nested if-else, it creates complexity in the program when the multiple paths increase. The switch case reduces the complexity of the program. It enhances the readability of the program.']","['switch( expression )', 'case value-1:{', 'Block-1;', '}', 'break;', 'case value-2:{', 'Block-2;', '}', 'break;', 'case value-N:{', 'Block-N;', '}', 'break;', 'default:    {', '}', 'void main() {', 'int n = 3;', 'switch (n) {', 'case 1:', 'print(""Value is 1"");', 'break;', 'case 2:', 'print(""Value is 2"");', 'break;', 'case 3:', 'print(""Value is 3"");', 'break;', 'case 4:', 'print(""Value is 4"");', 'break;', 'default:', 'print(""Out of range"");', 'break;', '}', 'Value is 3', 'void main()', 'int Roll_num =  90014;', 'switch (Roll_num) {', 'case 90009:', 'print(""My name is Joseph"");', 'break;', 'case 90010:', 'print(""My name is Peter"");', 'break;', 'case 090011:', 'print(""My name is Devansh"");', 'break;', 'default:', 'print(""Roll number is not found"");', 'Roll number is not found']","['Value is 3', 'Roll number is not found']",[],[]
24,['Dart Loops'],"['Dart Loop is used to run a block of code repetitively for a given number of times or until matches the specified condition. Loops are essential tools for any programming language. It is used to iterate the Dart iterable such as list, map, etc. and perform operations for multiple times. A loop can have two parts - a body of the loop and control statements. The main objective of the loop is to run the code multiple times. Dart supports the following type of loops.']","['https://www.javatpoint.com/dart-for-loop', 'https://www.javatpoint.com/dart-switch-case-statement', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/dart-for-loop', 'https://www.javatpoint.com/dart-switch-case-statement', 'https://www.javatpoint.com/dart-for-loop']",[],[],"['Dart for loop', 'Dart for… in Loop', 'Dart while loop', 'Dart do…while Loop', 'Selection of the loop']",[],[],"['We describe a brief introduction to the dart loops as follows.', 'The for loop is used when we know how many times a block of code will execute. It is quite same as the C for loop. The syntax is given below.', 'The loop iteration starts from the initial value. It executes only once.', 'The condition is a test-expression and it is checked after each iteration. The for loop will execute until false returned by the given condition.', 'The incr/decr is the counter to increase or decrease the value.', ""Let's understand the following example."", 'We need to declare the iterator variable to get the element from the iterator.', ""Let's understand the following example.""]","[""The while loop executes a block of code until the given expression is false. It is more beneficial when we don't know the number of execution. The syntax is given below."", 'The do…while loop is similar to the while loop but only difference is that, it executes the loop statement and then check the given condition. The syntax is given below.', 'The selection of a loop is a little bit difficult task to the programmer. It is hard to decide which loop will be more suitable to perform a specific task. We can determine the loop based on the following points.']","['The for…in loop is slightly different from the for loop. It only takes dart object or expression as an iterator and iterates the element one at a time. The value of the element is bound to var, which is and valid and available for the loop body. The loop will execute until no element left in the iterator. The syntax is given below.']","['for(Initialization; condition; incr/decr) {', 'void main()', 'int num = 1;', 'for(num; num<=10; num++)\t          //for loop to print 1-10 numbers', 'print(num);\t\t//to print the number', 'for (var in expression) {', 'void main()', 'var list1 = [10,20,30,40,50];', 'for(var i in list1)\t          //for..in loop to print list element', 'print(i);\t\t//to print the number', 'while(condition) {', 'void main()', 'var a = 1;', 'var maxnum = 10;', 'while(a', '} while(condition);', 'void main()', 'var a = 1;', 'var maxnum = 10;', '{', 'print(""The value is: ${a}"");', 'a = a+1;', '}while(a<maxnum);', 'The value is: 1', 'The value is: 2', 'The value is: 3', 'The value is: 4', 'The value is: 5', 'The value is: 6', 'The value is: 7', 'The value is: 8', 'The value is: 9']","['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '10', '20', '30', '40', '50', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'The value is: 1', 'The value is: 2', 'The value is: 3', 'The value is: 4', 'The value is: 5', 'The value is: 6', 'The value is: 7', 'The value is: 8', 'The value is: 9']",[],"['|||Dart for loop|||Dart for…in loop|||Dart while loop|||Dart do-while loop||||||Analyze the problem and observe that whether you need a pre-test loop or post-test loop. A pre-test loop is that, the condition is tested before entering the loop. In the post-test loop, the condition is tested after entering the loop.|||If we require a pre-test loop, then select the while or for loop.|||If we require a post-test loop, then select the do-while loop.|||']"
25,['Dart for Loop'],"['Dart for loop is used when we familiar with the number of execution of a block of code. It is similar to the C, C++, and Java for loop. It takes an initial variable to start the loop execution. It executes a block of code until it matches the specified condition. When the loop is executed, the value of iterator is updated each iteration, and then the test-expression is evaluated. This process will continue until the given test-expression is true. Once the test-expression is false, the for loop is terminated.']","['https://www.javatpoint.com/dart-for-in-loop', 'https://www.javatpoint.com/dart-loops', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/dart-for-in-loop', 'https://www.javatpoint.com/dart-loops', 'https://www.javatpoint.com/dart-for-in-loop']",['https://static.javatpoint.com/tutorial/dart/images/dart-for-loop.png'],[],['Nested for Loop'],['Dart for Loop Flowchart'],[],"[""Let's understand the following example."", 'Example 1:', 'Explanation:', 'We can skip the initial value from the for loop. Consider the following example.', 'It will give the same output as previous code.', 'Also, we can skip the condition, increment, or decrement by using a semicolon.', ""Let's understand the working of nested for loop."", 'Example - 2 Understand the inner loop cycle', 'Observe the above code, we have defined the working of the inner loop. The inner loop will be repeated for each iteration of the outer loop.']",[],"['In the above example, we have initialized an integer variable i as initial value. We have assigned 1 to the variable and in the conditional part, we have defined the loop executed until value of i is smaller or equal to 10. Each time the loop will be iterated it will be increased value by 1.', 'In the first iteration of a loop, the value of i is incremented by 1 and it will become 2. Now the condition is rechecked if condition is true, then the loop will be moved on next iteration. The iteration of the loop will continued until the value becomes 10.', 'The nested for loop means, ""the for loop inside another for loop"". A for inside another loop is called an inner loop and outside loop is called the outer loop. In each iteration of the outer loop, the inner loop will iterate to entire its cycle. Let\'s understand the following example of nested for loop.']","['for(initialization, condition, incr/decr)', 'void main() {', 'for(int i = 1; i < =10;i++)', 'print(i);', 'void main() {', 'var i = 1;', 'for(; i < =10;i++)', 'print(i);', 'void main()', 'int i, j;', 'int table_no = 2;', 'int max_no = 10;', 'for (i = 1; i <= table_no; i++) { // outer loop', 'for (j = 0; j <= max_no; j++) { // inner loop', 'print(""${i} * ${j} = ${i*j}"");', '1 * 0 = 0', '1 * 1 = 1', '1 * 2 = 2', '1 * 3 = 3', '1 * 4 = 4', '1 * 5 = 5', '2 * 0 = 0', '2 * 1 = 2', '2 * 2 = 4', '2 * 3 = 6', '2 * 4 = 8', '2 * 5 = 10', 'void main(){', 'for(int i = 1; i <=5; i++) {', '', 'print(""Outer loop iteration : ${i}"" );', 'for (int j = 1; j <= i; ++j) {', 'print(""i = ${i} j = ${j}"");', '}', '', '}', 'Outer loop iteration : 1', 'i = 1 j = 1', 'Outer loop iteration : 2', 'i = 2 j = 1', 'i = 2 j = 2', 'Outer loop iteration : 3', 'i = 3 j = 1', 'i = 3 j = 2', 'i = 3 j = 3', 'Outer loop iteration : 4', 'i = 4 j = 1', 'i = 4 j = 2', 'i = 4 j = 3', 'i = 4 j = 4', 'Outer loop iteration: 5', 'i = 5 j = 1', 'i = 5 j = 2', 'i = 5 j = 3', 'i = 5 j = 4', 'i = 5 j = 5']","['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1 * 0 = 0', '1 * 1 = 1', '1 * 2 = 2', '1 * 3 = 3', '1 * 4 = 4', '1 * 5 = 5', '2 * 0 = 0', '2 * 1 = 2', '2 * 2 = 4', '2 * 3 = 6', '2 * 4 = 8', '2 * 5 = 10', 'Outer loop iteration : 1', 'i = 1 j = 1', 'Outer loop iteration : 2', 'i = 2 j = 1', 'i = 2 j = 2', 'Outer loop iteration : 3', 'i = 3 j = 1', 'i = 3 j = 2', 'i = 3 j = 3', 'Outer loop iteration : 4', 'i = 4 j = 1', 'i = 4 j = 2', 'i = 4 j = 3', 'i = 4 j = 4', 'Outer loop iteration: 5', 'i = 5 j = 1', 'i = 5 j = 2', 'i = 5 j = 3', 'i = 5 j = 4', 'i = 5 j = 5']",[],"['|||The initialization is used as an initial value in a loop, and it executes only once.|||A condition or test-expression returns Boolean values - True or False. The for loop will execute until the condition is true.|||Once the condition evaluates false, the loop is ended.|||The incr/decr is counter to increase or decrease the variable.|||']"
26,['Dart for..in Loop'],"[""The for..in loop is similar to for loop but different in its syntax. It iterates through an object's properties. The Dart for..in loop accepts an expression as iterator and iterates through the elements one at a time in sequence. The variable var holds the values of the iteration. The for…in will execute until elements remain in iterators.""]","['https://www.javatpoint.com/dart-while-loop', 'https://www.javatpoint.com/dart-for-loop', 'https://www.javatpoint.com/dart-while-loop', 'https://www.javatpoint.com/dart-for-loop', 'https://www.javatpoint.com/dart-while-loop']",['https://static.javatpoint.com/tutorial/dart/images/dart-for-in-loop.png'],[],[],['Dart For In Loop Flow Diagram'],[],"['The syntax is given below.', ""Let's understand the following example."", 'Explanation:', ""Let's understand another example."", 'Explanation:']","['The for..in loop is suitable to iterate over the Dart object such as list, map, and set, where for loop is more effective to iterate along with the specified condition.', 'In the above example, we have declared a variable sum with value 0. We have a for..in loop with the iterator list, and each element of list added to the sum variable after each iteration.', 'In the first iteration, the value of the sum is equal to 10. In the next iteration, the value of sum became 30 after added 20 to it. After complete the iteration, it returned the sum of all elements of the list.']","['In the above program, we have iterator list1 and variable i. In the first iteration of the loop, the first element of the list assigned to the variable i. This process happened again, and the second element of the list assigned to i. It will be continued until there is no element left in the list. It printed the all element of the list to the console.']","['for (var in expression) {', 'void main() {', 'var list1 = [10,20,30,40,50];', 'print(""Dart for..in loop Example"");', 'for(var i in list1) {', 'print(i);', 'Dart for..in loop Example', 'void main() {', 'var list1 = [10,20,30,40,50];', 'int sum = 0;', 'print(""Dart for..in loop Example"");', 'for(var i in list1) {', 'sum = i+ sum;', 'print(""The sum is : ${sum}"");', 'Dart for..in loop Example', 'The sum is : 150']","['Dart for..in loop Example', '10', '20', '30', '40', '50', 'Dart for..in loop Example', 'The sum is : 150']",[],[]
27,['Dart While Loop'],['The while loop is used when the number of execution of a block of code is not known. It will execute as long as the condition is true. It initially checks the given condition then executes the statements that are inside the while loop. The while loop is mostly used to create an infinite loop.'],"['https://www.javatpoint.com/dart-do-while-loop', 'https://www.javatpoint.com/dart-for-in-loop', 'https://www.javatpoint.com/dart-do-while-loop', 'https://www.javatpoint.com/dart-for-in-loop', 'https://www.javatpoint.com/dart-do-while-loop']",['https://static.javatpoint.com/tutorial/dart/images/dart-while-loop.png'],[],"['Infinite While Loop', 'Logical Operator while loop']",['Dart While Loop Flowchart'],[],"['The syntax is given below.', ""Let's understand the following example."", 'Example - 1', 'Explanation:', 'If the condition returns true then while loop body is executed and the condition is rechecked. It will be continued until the condition is false.', 'After that, the value of i is 6 that violated the condition; then, the loop is terminated. It printed the sequence of 1 to 5 on the console.', ""When the while loop executes an endless time is called infinite while loop. Let's have a look at the infinite loop example."", 'Example - 2', 'It will print the given statement for infinite time. When we declare Boolean true in while loop, then it automatically became an infinite loop.', 'Consider the following example.', 'Explanation:']","['Here, if the condition returns the true, then the loop body is executed and condition is evaluated again. If the condition returns false then the loop is terminated and the control transfer to out of the loop.', 'Above example, we initialized the integer variable i with value 1 respectively, in the next statement we have defined while loop, that check the condition that, the value of i is smaller or greater than 5 in each iteration.', 'We have made only one change in above code. We reduced the value of i for each iteration of while loop. So it will never match with the specified condition and became an infinite loop.', ""Sometimes we need to check the multiple conditions in a while loop. We can do this by using logical operators such as (||, &&, and !). Let's see the following concepts."", 'In the above code, we have assigned two variables n1 and n2 with the value 1 in both. Now we checked multiple conditions in the while loop where n1 is less than or equal to 4 and n2 is less than or equal to 3.']","['In the first iteration, it checked both values and printed the result. At one point, when the value of n1 and n2 is equal to 4. The n1 satisfied the condition one, but n2 did not meet the second condition, so the loop is terminated and printed the result to the screen.']","['while(condition){', 'void main()', 'int i = 1;', 'while (i <= 5)', 'print( i);', '++i;', 'void main()', 'int i = 1;', 'while (i <= 5)', 'print( i);', '--i;', 'void main()', 'while (true)', 'print(""Welcome to JavaTpoint"");', 'void main() {', 'int n1=1;', 'int n2=1;', 'while (n1 <= 4 && n2 <= 3)', 'print(""n1 : ${n1}, n2: ${n2}"");', 'n1 : 1, n2: 1', 'n1 : 2, n2: 2', 'n1 : 3, n2: 3']","['1', '2', '3', '4', '5', 'n1 : 1, n2: 1', 'n1 : 2, n2: 2', 'n1 : 3, n2: 3']",[],['|||while (n1<5 && n2>10) - It will execute if both conditions are true.|||while (n1<5 || n2>10) - It will execute if one of the condition is true.|||while(!n1 = 10) - It will execute if n1 is not equal to 10.|||']
28,['Dart do while Loop'],"['Dart do while loop executes a block of the statement first and then checks the condition. If the condition returns true, then the loop continues its iteration. It is similar to Dart while loop but the only difference is, in the do-while loop a block of statements inside the body of loop will execute at least once.']","['https://www.javatpoint.com/dart-boolean', 'https://www.javatpoint.com/dart-while-loop', 'https://www.javatpoint.com/dart-boolean', 'https://www.javatpoint.com/dart-while-loop', 'https://www.javatpoint.com/dart-boolean']",['https://static.javatpoint.com/tutorial/dart/images/dart-do-while-loop.png'],[],[],['Dart do-while loop Flowchart'],[],"['The syntax is given below.', 'Here, the block of statement which is inside the do while body will executes first then evaluates the given condition.', ""Let's understand the following example."", 'Explanation -', 'In the above code, we have initialized the variable i with value 10. In do-while loop body, we defined two statements.']","['A condition is evaluated either Boolean true or false. If it returns true, then the statements are executed again, and the condition is rechecked. If it returns false, the loop is ended, and control transfers to out of the loop.', 'In the first iteration, the statement printed the initial value of i and increased by 1. Now the value of i becomes 11 and then we checked the condition.', 'The condition is, the value of i must be less than or greater than the 20. It matched with the condition and loop moved to the next iteration. It printed the series of numbers 10 to 20 until the condition returned false.']",[],"['}while(condition);', 'void main() {', 'int i = 10;', 'print(""Dart do-while loop example"");', '', '', 'print(i);', 'i++;', '}while(i<=20);', 'print(""The loop is terminated"");', 'Dart do-while loop example', 'The value of i: 10', 'The value of i: 11', 'The value of i: 12', 'The value of i: 13', 'The value of i: 14', 'The value of i: 15', 'The value of i: 16', 'The value of i: 17', 'The value of i: 18', 'The value of i: 19', 'The value of i: 20', 'The loop is terminated']","['Dart do-while loop example', 'The value of i: 10', 'The value of i: 11', 'The value of i: 12', 'The value of i: 13', 'The value of i: 14', 'The value of i: 15', 'The value of i: 16', 'The value of i: 17', 'The value of i: 18', 'The value of i: 19', 'The value of i: 20', 'The loop is terminated']",[],[]
29,['Dart Boolean'],"['Dart Boolean data type is used to check whether a given statement true or false. The true and false are the two values of the Boolean type, which are both compile-time constants. In Dart, The numeric value 1 or 0 cannot be used to specify the true or false. The bool keyword is used to represent the Boolean value. The syntax of declaring the Boolean variable is given below.']","['https://www.javatpoint.com/dart-function', 'https://www.javatpoint.com/dart-do-while-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-function', 'https://www.javatpoint.com/dart-do-while-loop', 'https://www.javatpoint.com/dart-function']",[],[],[],[],[],"['Consider the following example.', 'Explaination -']",['We have declared the bool variable check that will use to verify the given expression. The expression 20>12 returned the true and we printed the result.'],[],"['bool var_name = true;', 'bool var_name = false;', 'void main() {', 'bool check;', 'check = 20>10;', 'print(""The statement is = ${check}"");']",['true'],[],[]
30,['Dart Function'],['Dart function is a set of codes that together perform a specific task. It is used to break the large code into smaller modules and reuse it when needed. Functions make the program more readable and easy to debug. It improves the modular approach and enhances the code reusability.'],"['https://www.javatpoint.com/dart-anonymous-function', 'https://www.javatpoint.com/dart-boolean', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-main-function', 'https://www.javatpoint.com/dart-anonymous-function', 'https://www.javatpoint.com/dart-boolean', 'https://www.javatpoint.com/dart-anonymous-function']",['https://static.javatpoint.com/tutorial/dart/images/dart-function.png'],[],"['Advantages of Functions', 'Defining a Function', 'Calling a Function', 'Passing Arguments to Function', 'Return a Value from Function', 'Function Examples']","['Dart Function with parameter and return value', 'Dart Function with No Parameter and Return Value', 'Dart Function with No Parameter and without a Return Value', 'Dart Function with Parameter and without a Return Value']",['Note - Calling function must be ended with semicolon (;).'],"['The few benefits of the Dart function is given below.', ""Let's understand the basic concept of functions."", ""Let's understand the general syntax of the defining function."", ""Let's understand the following example."", 'Example - 1', 'Actual Parameter - A parameter which is passed during a function definition is called the actual parameter.', 'Formal Parameter - A parameter which is passed during a function call is called the formal parameter.', 'We will learn more about the parameter in the next tutorial.', ""Let's understand the functions by using a program of adding two numbers using functions."", 'In the following example, we are creating a sum() function to add two number.', 'Example - 1', 'Explanation:', ""Let's understand the following example."", 'Example - 2', 'Explanation:', 'We can declare a function without parameter and no return value. The syntax is given below.', 'In the above general syntax-', 'void - It represents the function has no return type.', 'fun_name - It represents the function name.', ""Let's understand the following example."", 'Example - 3', 'Explanation:', ""We are creating a function to find the given number is even or odd. Let's understand the following example."", 'Example - 4']","['The function provides the flexibility to run a code several times with different values. A function can be called anytime as its parameter and returns some value to where it called.', 'A function can be defined by providing the name of the function with the appropriate parameter and return type. A function contains a set of statements which are called function body. The syntax is given below.', 'After creating a function, we can call or invoke the defined function inside the main() function body. A function is invoked simply by its name with a parameter list, if any. The syntax is given below.', 'When we call a function, the control is transferred to the called function. Then the called function executes all defined statements and returns the result to the calling function. The control returns to the main() function..', 'A function always returns some value as a result to the point where it is called. The return keyword is used to return a value. The return statement is optional. A function can have only one return statement. The syntax is given below.', 'In the above example, we declared a function named sum() and passed two integer variables as actual parameters. In the function body, we declared a result variable to store the sum of two numbers and returned the result.', 'In order to add two values, we called a function with the same name, passed formal parameters 30 and 20. The sum() returned a value which we stored in the variable c and printed the sum on the console.', 'As we discussed earlier, the parameters are optional to pass while defining a function. We can create a function without parameter return value. The syntax is given below.', 'In the above example, we created a function named greetings() without argument and returned the string value to the calling function. Then, we called the greeting() function inside the print statement and printed the result to the console.', 'In the above example, we created a function called greeting() outside the main() function and writing the print statement. Inside the main() function, we called the defined function and printed the output to console.']","[""Suppose, we write a simple calculator program where we need to perform operations number of times when the user enters the values. We can create different functions for each calculator operator. By using the functions, we don't need to write code for adding, subtracting, multiplying, and divide again and again. We can use the functions multiple times by calling."", 'When a function is called, it may have some information as per the function prototype is known as a parameter (argument). The number of parameters passed and data type while the function call must be matched with the number of parameters during function declaration. Otherwise, it will throw an error. Parameter passing is also optional, which means it is not compulsory to pass during function declaration. The parameter can be two types.']","['return_type func_name (parameter_list):', 'return value;', 'int mul(int a, int b){', 'int c;', 'c = a+b;', 'print(""The sum is:${c}"");', 'fun_name(<argument_list>);', 'variable = function_name(argument);', 'mul(10,20);', 'return', 'return result;', 'void main() {', 'print(""Example of add two number using the function"");', 'int sum(int a, int b){', 'int result;', 'result = a+b;', 'return result;', 'var c = sum(30,20);', 'print(""The sum of two numbers is: ${c}"");', 'return_type func_name()', 'return value;', 'void main(){', 'String greetings(){', 'return ""Welcome to JavaTpoint"";', 'print(greetings());', 'func_name() {', 'void fun_name() {', 'void greetings()', 'print(""Welcome to JavaTpoint"");', 'void main() {', 'print(""The example of Dart Function"");', 'greetings();', 'void main()', 'void number(int n){', 'if (n%2 ==0){', 'print(""The given number is even"");', '}', 'else {', 'print(""The given number is odd"");', '}', 'number(20);']","['Example of add two number using the function', 'The sum of two numbers is: 50', 'Welcome to JavaTpoint', 'The example of Dart Function', 'Welcome to JavaTpoint', 'The given number is even']",[],"['|||It increases the module approach to solve the problems.|||It enhances the re-usability of the program.|||We can do the coupling of the programs.|||It optimizes the code.|||It makes debugging easier.|||It makes development easy and creates less complexity.||||||return_type - It can be any data type such as void, integer, float, etc. The return type must be matched with the returned value of the function.|||func_name - It should be an appropriate and valid identifier.|||parameter_list - It denotes the list of the parameters, which is necessary when we called a function.|||return value - A function returns a value after complete its execution.|||']"
31,['Dart Anonymous Function'],"['We have learned the Dart Function, which is defined by using a user-define name. Dart also provides the facility to specify a nameless function or function without a name. This type of function is known as an anonymous function, lambda, or closure. An anonymous function behaves the same as a regular function, but it does not have a name with it. It can have zero or any number of arguments with an optional type annotation.']","['https://www.javatpoint.com/dart-main-function', 'https://www.javatpoint.com/dart-function', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-main-function', 'https://www.javatpoint.com/dart-function', 'https://www.javatpoint.com/dart-main-function']",[],[],"['Lexical Scope', 'Lexical Closure']","['Syntax:', 'Example -', 'Explanation:', 'Example -', 'Example -', 'Explanation:']",[],"['We can assign the anonymous function to a variable, and then we can retrieve or access the value of the closure based on our requirement.', ""Let's consider the following example."", 'If the function consists of one statement, then we can also write the above code in the following way.', 'It is equivalent to the previous code. You can verify it by paste in your dart pad and run.', 'Observe the above code, the nestedFunction() used the variables of the previous function.']","['An Anonymous function contains an independent block of the code, and that can be passed around in our code as function parameters. The syntax is as follows.', 'In the above example, we defined an anonymous function with an untype argument item. The function called for each item in the list and printed the strings with its specified index value.', 'In the above code, the initial() function created a local variable called name and function called disp_Name(). The disp_Name() function defined inside the initial() function and hence disp_Name() function has no local variable its own.', 'The inner function can access the variable of the outer functions. The function disp_Name() can access the name variable which is declared in the outer function, initial().']","[""As we have discussed in the Dart introduction, it is a lexical scope language which means the variable's scope is decided at compile-time. The scope of the variable is determined when code is compiled. The variable behaves differently if they defined in the different curly braces. Let's understand the following example."", ""A lexical closure is referred to as a closure, is a function object that has access to variables in its lexical scope even when the function is used of its original scope. In other words, it provides access to an outer function's scope from inner function. Let's understand the following example.""]","['(parameter_list) {', 'statement(s)', 'void main() {', 'var list = [""James"",""Patrick"",""Mathew"",""Tom""];', 'print(""Example of anonymous function"");', 'list.forEach((item) {', ""print('${list.indexOf(item)}: $item');"", 'list.forEach(', '(item) => print(""${list.indexOf(item)}: $item""));', 'bool topVariable = true;', 'void main() {', 'var inside_Main = true;', 'void myFunction() {', 'var inside_Function = true;', 'void nestedFunction() {', 'var inside_NestedFunction = true;', 'assert(topVariable);', 'assert(inside_Main);', 'assert(inside_Function);', 'assert(inside_NestedFunction);', 'void main() {', 'String initial() {', ""var name = 'Will Smith'; // name is a local variable created by init"", 'void disp_Name() { // displayName() is the inner function, a closure', 'print(name); // use variable declared in the parent function', 'disp_Name();', 'init();']","['Example of anonymous function', '0: James', '1: Patrick', '2: Mathew', '3: Tom', 'Will Smith']",[],[]
32,['The main() function'],['The main() function is the top-level function of the Dart. It is the most important and vital function of the Dart programming language. The execution of the programming starts with the main() function. The main() function can be used only once in a program.'],"['https://www.javatpoint.com/dart-recursion', 'https://www.javatpoint.com/dart-anonymous-function', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-recursion', 'https://www.javatpoint.com/dart-anonymous-function', 'https://www.javatpoint.com/dart-recursion']",[],[],"['Dart Return Value', 'Dart value with Return Value']",[],[],"['Example - 1', 'Below is given syntax of return value.', 'Here is the description of the above syntax.', 'function_name - It represents the function name, which can be any valid identifier.', ""Let's understand the following example -""]",['return type - It denotes the return type of the function. It can be any valid data type. The return must be matched with the return type of the function.'],"['It is responsible for all types of execution such as user-defined statements, functions, and libraries function. The program begins with main() function and we declares variable, and user defined executable statements inside it. The main function returns void and can have an optional List<String> parameter as arguments. The general syntax of the main() function is given below.', 'Sometimes the function returns a value after evaluating the function statements to the point where it is called from. The return statement holds the result of the function, and it is transferred to the function call. The return keyword is used to represent the return statement. If the return statement not specified, then the function returns null. The return statement is optional to specify in function, but there can be only one return statement in a function.']","['void main() {', 'void main()', 'print(""Welcome To JavaTpoint"");', 'return <expression/value>;', 'return_type function_name()', 'return value;', 'void main() {', 'int mul(int a, int b){', 'int c = a*b;', 'return c;', 'print(""The multiplication of two numbers: ${mul(10,20)}"");']","['Welcome To JavaTpoint', 'The multiplication of two numbers: 200']",[],[]
33,['What is Recursion?'],"['Dart Recursion is the method where a function calls itself as its subroutine. It is used to solve the complex problem by dividing it into sub-part. A function which is called itself again and again or recursively, then this process is called recursion.']","['https://www.javatpoint.com/dart-object-oriented-concepts', 'https://www.javatpoint.com/dart-main-function', 'https://www.javatpoint.com/dart-object-oriented-concepts', 'https://www.javatpoint.com/dart-main-function', 'https://www.javatpoint.com/dart-object-oriented-concepts']",['https://static.javatpoint.com/tutorial/dart/images/dart-recursion.png'],[],"['Dart Recursive Function', 'How does recursion works?', 'Characteristics of Recursive Function', 'Disadvantage of Recursion']",[],"['Note - The base case or valid terminating condition is required in recursion function; otherwise, it will turn into an infinite loop.']","['Recursion makes many calls to the same function; however, there should be a base case to terminate the recursion.', 'Recursion uses the divide and conquers technique to solve a complex mathematical computation task. It divides the large task into small chunks.', 'The characteristics of the recursive function are given below.', ""Let's have a look at recursion syntax:"", ""Let's understand the following example."", 'Example - 1', 'Explanation:', 'The recursion is ended when the number reduced to 1, and it is the base condition of recursion.', 'A recursion function must have a base condition to avoid to infinite call.']","['In the above example, the base case is defined as n<=1, and a larger value of a number can be solved by changing to a lesser one till the base case is matched.', ""Let's understand the concept of the recursion of the example of a factorial of a given number. In the following example, we will evaluate the factorial of n numbers. It is the series of the multiplication as follows."", 'In the above example, the factorial() is a recursive function as it call itself. When we called the factorial() function by passing the integer value 5, it will recursively call itself by decreasing the number.', 'The factorial() function will be called every time until it matched the base condition, or it is equal to one. It multiplied the number with factorial of the number. Consider the following explanation of the recursive call.']","['The iterators can be an option to solve problems, but recursion is recommended to the programmers to deal with complex problems because it is an effective approach of problem-solving technique. It requires less time and code to evaluate the same complex task.', 'Recursion is not recommended to solve all types of problems. However, it is best for a few questions such as searching, sorting, Inorder/Preorder/Postorder, Tree Traversal, and DFS of Graph algorithms. But, while using recursion, it must be implemented carefully; otherwise, it turns into the infinite loop.', 'Recursive functions are quite similar to the other functions, but difference is to calling itself recursively. A recursive function repeats multiple times until it returns the final output. It allows programmers to solve complex problems with minimal code.']","['void main() {', 'int factorial(int num){', 'if(num<=1) { // base case', 'return 1;', 'else{', 'return n*fact(n-1);', 'Factorial of n (n!) = n*(n-1)*(n-2)........1', 'void recurse() {', 'recurse();', 'void main(){', 'recurse();', 'int factorial(int num){', 'if(num<=1) { // base case', 'return 1;', 'else{', 'return num*factorial(num-1);    //function call itself.', 'void main() {', 'var num = 5;', 'var fact = factorial(num);', 'print(""Factorial Of 5 is: ${fact}"");', 'factorial(5)              # 1st call with 5', '5 * factorial(4)          # 2nd call with 4', '5 * 4 * factorial(3)      # 3rd call with 3', '5 * 4 * 3 * factorial(2)  # 4th call with 2', '5 * 4 * 3 * 2 * 1         # return from 2nd call', '120                    # return from 1st call']",['Factorial Of 10 is: 120'],[],"[""|||A recursive function is a unique form of a function where function calls itself.|||A valid base case is required to terminate the recursive function.|||It is slower than the iteration because of stack overheads.||||||The recursive calls consume a lot of memory; that's why these are inefficient.|||The recursive functions are difficult to debug.|||Sometimes, It is hard to follow the logic behind the recursion.|||""]"
34,['Dart Object-Oriented Concepts'],"['Dart is an object-oriented programming language, and it supports all the concepts of object-oriented programming such as classes, object, inheritance, mixin, and abstract classes. As the name suggests, it focuses on the object and objects are the real-life entities. The Object-oriented programming approach is used to implement the concept like polymorphism, data-hiding, etc. The main goal of oops is to reduce programming complexity and do several tasks simultaneously. The oops concepts are given below.']","['https://www.javatpoint.com/dart-classes-and-object', 'https://www.javatpoint.com/dart-anonymous-function', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-classes-and-object', 'https://www.javatpoint.com/dart-anonymous-function', 'https://www.javatpoint.com/dart-classes-and-object']",[],[],"['Class', 'Object', 'Inheritance', 'Polymorphism', 'Interfaces', 'Abstract Class']",[],[],"['Below is the brief introduction of these oops concepts.', 'The above introductions give the basic idea of oops concepts. We will have a detailed discussion in upcoming tutorials.']","['We can access the class properties by creating an object of that class. In Dart, The object can be created by using a new keyword followed by class name. The syntax is given below.', 'A class that contains one or more abstract method is called an abstract class. We can declare the abstract class using the abstract keyword followed by class declaration. The syntax is given below.']","['Dart classes are defined as the blueprint of the associated objects. A Class is a user-defined data type that describes the characteristics and behavior of it. To get all properties of the class, we must create an object of that class. The syntax of the class is given below.', ""An object is a real-life entity such as a table, human, car, etc. The object has two characteristics - state and behavior. Let's take an example of a car which has a name, model name, price and behavior moving, stopping, etc. The object-oriented programming offers to identify the state and behavior of the object."", 'Dart supports inheritance, which is used to create new classes from an existing class. The class that to be extended is called parent /superclass, and the newly created class is called child/subclass. Dart provides extends keyword to inherit the properties of parent class in child class. The syntax is given below.', 'Polymorphism is an object-oriented programming concept where one thing has many forms. It can be two types - Runtime polymorphism and Compile time polymorphism. For example - A function has the same name but with a different behavior or class. Another example is the shape() class, and all the class inherited from the Rectangle, Triangle, and circle.', 'The interface is defined as a blueprint of the class. We can declare methods and variables inside the interface just like the class but in interface only abstract declaration of methods is provided. We can only define the function signature but not its body. Another class can implement the interface. It is basically used for data-hiding.']","['class ClassName {', '<fields>', '<getter/setter>', '<constructor>', '<functions>', 'var objectName = new ClassName(<constructor_arguments>)', 'class child_class_name extends parent_class_name', 'abstract class ClassName {']",[],[],['|||Class|||Object|||Inheritance|||Polymorphism|||Interfaces|||Abstract class|||']
35,['Dart Classes and Object'],"['Dart classes are the blueprint of the object, or it can be called object constructors. A class can contain fields, functions, constructors, etc. It is a wrapper that binds/encapsulates the data and functions together; that can be accessed by creating an object. A class can refer to as user-define data type which defines characteristics by its all objects.']","['https://www.javatpoint.com/dart-constructor', 'https://www.javatpoint.com/dart-object-oriented-concepts', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-constructor', 'https://www.javatpoint.com/dart-object-oriented-concepts', 'https://www.javatpoint.com/dart-constructor']",[],[],"['Defining a Class in Dart', 'Dart Object', 'Creating Class Objects in Dart', 'Assessing Instance Variable and Function']",['Benefit of Objects'],"['Note - According to the naming convention rule of identifiers, the first letter of the class name must be capital and use no separators.']","[""Let's understand the following example."", ""The fields of the classes are stored as object states, whereas the method represents an object's behavior."", ""Let's understand the following example."", ""Let's understand the following example."", 'Explanation:', 'There are various benefits of using object-oriented programming. Below are the few benefits.']","['Dart provides class keyword followed by a class name is used to define a class; all fields and functions are enclosed by the pair of curly braces ({}). The syntax is given below.', 'Here, the ClassName represents the actual name of the class, which is defined by the user. In curly braces, we provide a class definition. A class can consist of fields, constructors, getters setters, and methods.', 'Here, object_name and class_name signifies as the actual object name and class name respectively. If the class constructor is parameterized then constructor arguments must be passed value.', 'We have created the object called std of the class Student but only creating an object not enough. We have to access the properties by using the newly created object.', 'After creating an object, we can access the fields and methods of the class. The class property name is separated by the (.) operator with the instance name. The syntax is given below.', 'In the above example, we created a class called Student, which consisted of the student name, age, roll number, and showStdInfo() function to show the student details.', 'Then, we created a Student class object and assigned the values to each field by using the (.) operator. We called the showStdInfo() function that displayed the details as an output to screen.']","['We can assume a class as a sketch (prototype) or a car. It contains all the details about model name, year, features, price, etc. Based on these properties of the car, we can build the car. Here the car is an object. There can be many cars so we can create many objects of cars to access all the properties.', 'In the above example of class, we declared a class called Student. This class has three fields stdName, stdAge, and stdRoll_nu. The showStdInfo() is a class function which prints the fields of class. To access the properties of the class, we need to create its object.', ""Dart is object-oriented programming, and everything is treated as an object in Dart. An object is a variable or instance of the class used to access the class's properties. Objects have two features - state and behavior. Suppose a man is an object with a state (name, age, health) and behavior (walking, running, and sleeping). Programming objects are theoretically similar to the real-life objects; they also have state and behavior. An object is created from a template which is known as class."", 'After creating the class, we can create an instance or object of that class which we want to access its fields and functions. The new keyword is used to declare class followed by the class name. The general syntax of creating an object of a class is given below.']","['class ClassName {', '<fields>', '<getters/setters>', '<constructor>', '<functions>', 'void main() {', 'class Student {', 'var stdName;', 'var stdAge;', 'var stdRoll_nu;', 'showStdInfo() {', 'print(""Student Name is : ${stdName}"");', 'print(""Student Age is : ${stdAge}"");', 'print(""Student Roll Number is : ${stdRoll_nu}"")', 'var object_name  = new class_name(<constructor_arguments>);', 'class Student {', 'var stdName;', 'var stdAge;', 'var stdRoll_nu;', 'showStdInfo() {', 'print(""Student Name is : ${stdName}"");', 'print(""Student Age is : ${stdAge}"");', 'print(""Student Roll Number is : ${stdRoll_nu}"")', 'void main () {', 'var std = new Student();', 'objectName.propName or objectName.methoName()', 'class Student {', 'var stdName;', 'var stdAge;', 'var stdRoll_nu;', 'showStdInfo() {', 'print(""Student Name is : ${stdName}"");', 'print(""Student Age is : ${stdAge}"");', 'print(""Student Roll Number is : ${stdRoll_nu}"");', '}', 'void main () {', 'var std = new Student();', 'std.stdName = ""Peter"";', 'std.stdAge =24;', 'std.stdRoll_nu = 90001;', 'std.showStdInfo();']","['Student Name is: Peter', 'Student Age is: 24', 'Student Roll Number is: 90001']",[],"[""|||Modularity: The source code of an object can be maintained individually and can hide from the other object's source code.|||Data - hiding: Using oops programming, the details of the internal functionality of code are hidden from the others. For example - Users only interact with the application, but they don't familiar with the internal implementation.|||Reusability - We don't need to write the same code again and again. We can use the object of class multiple times in our program.|||Pluggability and debugging easy - If any object is creating a problem in our program, and then we can replace it in our program and plug the new object as its replacement. The oops code can be easy to debug.|||""]"
36,['What is constructor?'],"['A constructor is a different type of function which is created with same name as its class name. The constructor is used to initialize an object when it is created. When we create the object of class, then constructor is automatically called. It is quite similar to class function but it has no explicit return type. The generative constructor is the most general form of the constructor, which is used to create a new instance of a class.']","['https://www.javatpoint.com/dart-this-keyword', 'https://www.javatpoint.com/dart-classes-and-object', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-this-keyword', 'https://www.javatpoint.com/dart-classes-and-object', 'https://www.javatpoint.com/dart-this-keyword']",[],[],"['Creating Constructor in Dart', 'Types of Constructors', 'Default Constructor or no-arg Constructor', 'Parameterized Constructor', 'Named Constructors']",[],[],"['Suppose we have a class name Student and we will create an object of it as follow.', 'It invoked the default constructor of the Student class.', 'We must remember the following two rules while creating a constructor.', ""Let's understand the following example."", 'Explanation:', 'There are three types of constructors in Dart as given below.', ""Let's understand the following example."", ""Let's understand the following example."", 'Explanation -', 'The named constructors are used to declare the multiple constructors in single class. The syntax is given below.', ""Let's understand the following example.""]","[""As we have mentioned, a constructor has the same name as its class name and it doesn't return any value. Suppose if we have class Student then the constructor name should be also Student.""]","[""It is option to declare within the class. All class have own constructor but if we don't declare or forget then Dart compiler will create default constructor automatically by passing the default value to the member variable. If we declare own constructor, then default constructor will be ignored."", 'In the above example, we created a constructor function Student() which is same as the class name. We passed two passed parameter in the constructor and when we instantiated an object of Student class and passed value it automatically called the constructor then printed the result.', ""A Constructor which has no parameter is called default constructor or no-arg constructor. It is automatically created (with no argument) by Dart compiler if we don't declare in the class. The Dart compiler ignores the default constructor if we create a constructor with argument or no argument. The syntax is given below."", 'We can also pass the parameters to a constructor that type of constructor is called parameterized constructor. It is used to initialize instance variables. Sometimes, we need a constructor which accepts single or multiple parameters. The parameterized constructors are mainly used to initialize instance variable with own values. The syntax is given below.', 'In the above example, we declared a parameterized constructor which has two parameter name and age. We created an object of the Student class and passed the appropriate value to the constructor. It printed the name and age as an output to the screen.']","['Student std = new Student()', 'class ClassName {', 'ClassName() {', 'void main() {', 'Student std = new Student(""Jones"",26);', 'class Student{', 'Student(String str, int age){', 'print(""The name is: ${str}"");', 'print(""The age is: ${age}"");', '}', 'class ClassName {', 'ClassName() {', 'void main() {', 'Student std = new Student();', 'class Student{', 'Student(){', 'print(""The example of the default constructor"");', '}', 'class ClassName {', 'ClassName(parameter_list)', 'void main() {', 'Student std = new Student(""Jones"",26);', 'class Student{', 'Student(String str, int age){', 'print(""The name is: ${str}"");', 'print(""The age is: ${age}"");', '}', 'className.constructor_name(param_list)', 'void main() {', 'Student std1 = new Student();  // object for Default constructor', 'Student std2 = new Student.namedConst(""Computer Science"");  // object for parameterized constructor', 'class Student{', 'Student(){', 'print(""The example of the named constructor"");', '}', 'Student.namedConst(String branch){', 'print(""The branch is: ${branch}"");', '}']","['The name is: Jones', 'The age is: 26', 'The example of the default constructor', 'The name is: Jones', 'The age is: 26', 'The example of the named constructor', 'The branch is: Computer Science']",[],"[""|||The constructor name should be same as the class name.|||The constructor doesn't have explicit return type.||||||Default Constructor or no-arg Constructor|||Parameter Constructor|||Named Constructor|||""]"
37,['Dart this Keyword'],"['The this keyword is used to refer the current class object. It indicates the current instance of the class, methods, or constructor. It can be also used to call the current class methods or constructors. It eliminates the uncertainty between class attributes and the parameter names are the same. If we declare the class attributes same as the parameter name, that situation will create ambiguity in the program, then the this keyword can remove the ambiguity by prefixing the class attributes. It can be passed as an argument in the class method or constructors.']","['https://www.javatpoint.com/dart-static-keyword', 'https://www.javatpoint.com/dart-constructor', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-static-keyword', 'https://www.javatpoint.com/dart-constructor', 'https://www.javatpoint.com/dart-static-keyword']",[],[],"['Local Variable', 'Class Variable', 'Instance Variable', 'Difference Between Class Variable and Instance Variable']","['Example - Without using this keyword', 'Explanation:', 'Example - 2: Using this keyword', 'Explanation:', 'Points to Remember']",[],"[""Let's understand the following example of how this keyword works."", 'The above example is the same as the previous program, but the only difference of this keyword.', 'We have used the this keyword to the different instance or class variable from the local variable.', 'The following are the difference between the class variable and instance variable']","['In the above program, we created a class called Mobile, which has two attributes modelname and man_year. Then, we created a constructor and passed parameters the same as the class attributes name.', ""The Dart compiler might get confused if there are a number of the same name parameters. The result is the compiler will create ambiguity. That's why we use the this keyword to refer the current class object."", 'Local variables are defined in the methods, constructors, or blocks. It is created when we create a method or constructor, and it has scope only inside them. We cannot use a local variable outside the method, constructor, or block.', 'Instance variable is also known as the non-static, variable which is used to declare without the static keyword. The instance variables are specific by an object. These variables can be accessed using the instance of that class.']","['In the constructor body, the class variables (attributes) on the left side are assigned by the constructor parameters with the same name. When we create the instance of a class, the constructor automatically called the constructor and printed the result.', 'Class variable is also known as the static member variable, which is used to declare using the static keyword. It is declared in the class, but outside a constructor, method or a block. All instances share one copy of the class variable or we can say that class variables are common to all instances of that class.']","['class Mobile {', 'String modelname;', 'int man_year;', 'Mobile(modelname, man_year){', 'modelname = modelname;', 'man_year = 2020;', 'print(""Mobile\'s model name is: ${modelname}, and the manufacture year is: ${man_year}"");', '}', '}', 'void main(){', 'Mobile mob = new Mobile(""iPhone 11 "",2020);', '}', 'class Mobile {', 'String modelname;', 'int man_year;', 'Mobile(modelname, man_year){', 'this.modelname = modelname;', 'this.man_year = 2020;', 'print(""Mobile\'s model name is: ${modelname}, and the manufacture year is: ${man_year}"");', '}', '}', 'void main(){', 'Mobile mob = new Mobile(""IPhone 11"",2020);', '}', 'this.modelname = modelname;', 'this.man_year = 2020;']","[""Mobile's model name is: iPhone 11 , and the manufacture year is: 2020"", ""Mobile's model name is: IPhone 11, and the manufacture year is: 2020"", 'ClassName.variableName', 'ObjectRefernce.variableName']","['Sr.|||Class Variable|||Instance Variable&&&1.|||The class variable is declared using the static keyword in a class, but not in method and constructor.|||The instance variable is declared in a class without using the static keyword. &&&2.|||The class variable can be accessed using the class name.|||Syntax:|||ClassName.variableName|||The instance variable can be accessed using the instance of that class.|||Syntax:|||ObjectRefernce.variableName&&&3|||The class variables are common to all instances of that class. All instances of the class share one copy of the static variable.|||The instance variables are not common to all instance of class. Each object of particular will preserve its own copy of the instance variables.&&&4|||These are created when the program is started and destroys when the program is terminated.|||The instance variables are created when an object of the particular class created using the new() keyword and destroys when the object is destroyed.']",['|||The this keyword is used to point the current class object.|||It can be used to refer to the present class variables.|||We can instantiate or invoke the current class constructor using this keyword.|||We can pass this keyword as a parameter in the constructor call.|||We can pass this keyword as a parameter in the method call.|||It removes the ambiguity or naming conflict in the constructor or method of our instance/object.|||It can be used to return the current class instance.|||']
38,['Dart static Keyword'],"['The static keyword is used to declare the class variable and method. It generally manages the memory for the global data variable. The static variables and methods are the member of the class instead of an individual instance. The static variable or methods are the same for every instance of the class, so if we declare the data member as static then we can access it without creating an object. The class object is not required to access the static method or variable we can access it by putting the class name before the static variable or method. Using the class name, we can call the class method from the other classes.']","['https://www.javatpoint.com/dart-super-keyword', 'https://www.javatpoint.com/dart-this-keyword', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/dart-super-keyword', 'https://www.javatpoint.com/dart-this-keyword', 'https://www.javatpoint.com/dart-super-keyword']",[],[],"['Dart Static Variable', 'Declaring Static Variable', 'Accessing Static Variable', 'Dart Static Method', 'Declaring Static Methods', 'Calling Static Method']",[],[],"['Point to Remember -', 'We can access the static variable by using the class name itself instead of creating an object of it. The syntax is given below.', 'Points to Remember', 'We can declare the static method by using the static keyword followed by the method name with the return type. The syntax is given below.', 'The static methods can be called by using the class name, which they belong to instead of creating an object.', ""Let's understand the following example."", 'Explanation:']","['Dart provides the static keyword to declare the static variable. It is declared by using the static keyword followed by the variable name. The syntax is given below.', 'In the above code, we declared the class called Student, which has three fields including static variable stdBranch and one method showStdInfo(). We created two instances of class Student and assigned values to the class variables.', 'The static variable stdBranch accessed by using the class name and assigned value. Then, we called the showStdInfo() function by objects std1 and stu2. It printed details of the student as an output.']","['A variable which is declared using the static keyword inside the class is called Dart static keyword. These are the member of the class instead of a specific instance. The static variables are treated the same for all instances of the class; it means a single copy of the static variable is shared among all instances of classes. It allocates memory once and at the class loading and uses throughout the program.', ""The concept of the static method is also similar to static variable. The static methods are the member of the class instead of the class instance. The static methods can use only static variables and can invoke the static method of the class. We don't need to create an instance of class the access it. The static method is useful when we want to use it in other classes.""]","['static [data_type] [variable_name];', 'ClassName.staticVariableName;', 'static return_type method_name() {', 'className.staticMethod();', 'class Student {', 'static String stdBranch;  // Declaring static variable', 'String stdName;', 'int roll_num;', 'showStdInfo() {', 'print(""Student\'s name is: ${empName}"");', 'print(""Student\'s salary is: ${roll_num}"");', 'print(""Student\'s branch name is: ${stdBranch}"");', '}', 'void main() {', 'Student std1 = new Student();  // Creating instances of student class', 'Student std2 = new Student();', 'Student.stdBranch = ""Computer Science"";', 'std1.stdName = ""Ben Cutting"";', 'std1.roll_num = 90013', 'std1.showStdInfo();', 'std2.stdName = ""Peter Handscomb"";', 'std2.roll_num = 90014', 'std2.showStdInfo();']","[""Student's name is: Ben Cutting"", ""Student's salary is: 90013"", ""Student's branch name is: Computer Science"", ""Student's name is: Peter Handscomb"", ""Student's salary is: 90014"", ""Student's branch name is: Computer Science""]",[],"[""|||The static variable is also identified as a class variable.|||Single copy of the static variable is shared among the instance of a class.|||It can be accessed using the class name. We don't need to create an object of that class they belong to.|||The static variables can be accessed directly in the static methods.||||||The static methods are the member class instead of its object.|||Static methods are also identifies as class methods.|||We can access static methods using the class name.|||A particular copy of the static method is distributed among all the instances of a class.|||""]"
39,['Dart super Keyword'],"[""The super keyword is used to denote the instant parent class object of the current child class. It is used to invoke superclass methods, superclass constructor in its child class. The super keyword's main objective is to remove the confusion between parent class and subclass with the same method name. It is also used to refer to the superclass properties and methods.""]","['https://www.javatpoint.com/dart-inheritance', 'https://www.javatpoint.com/dart-static-keyword', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/dart-inheritance', 'https://www.javatpoint.com/dart-static-keyword', 'https://www.javatpoint.com/dart-inheritance']",[],[],"['Usage of static Keyword', 'Using a super keyword with variables', 'Using the super keyword with parent class method', 'Using super keyword with constructor']",[],"[""Note - The super can be used only if the subclass method overrides the superclass method. If it doesn't then we don't require using super keyword.""]","['We can more understand by the following example.', 'Explanation:', 'In the above code, we defined the superclass as Car, which has a speed variable, and then it inherited by the subclass Bike.', 'If we use the print(speed) instead of print(super.speed), it will print the value the subclass variable.', ""Let's understand the following example"", 'Explanation -', ""Let's understand the following example."", 'Explanation']","['The sub class also has variable speed, so we used the super keyword to access the parent class variable. We created the object of child class b and called a display method that printed the value of superclass variable.', 'You can copy the above code, paste it into your dartpad or notepad, and print the value without using the super keyword. You can see the difference between both results.', 'In the above code, we created the function with the same name in both parent class and child class. The display() method is present in both parent class and child class that means It is a situation of method overriding.', 'We can also use the super keyword to access the parent class constructor. The super keyword can call both parameterized and non-parameterized constructors depending on the situation. The syntax is given below.', 'The syntax of Dart language is too close to C# language. We called the parent class constructor using the super keyword, which is separated by : (colon). The delegate a superclass constructor, we should put the superclass as an initializer.']","['This situation arises when the child class has the same name variables as superclass variables. So there is a chance of ambiguity for Dart compiler. Then super keyword can access the superclass variables in its child class. The syntax is given below.', 'As discussed earlier, the super keyword is used to access the parent class method in child class. If the child class and parent class consist of the same name, then we can use the super keyword to use the parent class method in child class. The syntax is given below.', 'So we created a message() method in the child class, inside it, we called parent class method using the super keyword, and then created the object of the child class. Using the object, we called the message() method that printed both display() methods statements to the screen.']","['Super.varName', 'class Car', 'int speed = 180;', 'class Bike extends Car', 'int speed = 110;', 'void display()', 'print(""The speed of car: ${super.speed}"");', 'void main() {', 'Bike b = new Bike();', 'b.display();', 'super.methodName;', 'class Super', 'void display()', 'print(""This is the super class method"");', 'class Child extends Super', 'void display()', 'print(""This is the child class"");', 'void message()', 'display();', 'super.display();', 'void main() {', 'Child c = new Child();', 'c.message();', ':super();', 'class Parent', 'Parent()', 'print(""This is the super class constructor"");', 'class Child extends Parent', '{', 'Child():super()   // Calling super class constructor', '{', 'print(""This is the sub class constructor"");', 'void main() {', 'Child c = new Child();']","['The speed of car: 180', 'This is the child class method', 'This is the super class method', 'This is the super class constructor', 'This is the sub class constructor']",[],"['|||When parent class and child class have members with the same name, then super keyword can be accessed data members of parent class in child class.|||It is used to access the parent class constructor in the child class.|||Using the super keyword, we can access the superclass method that is overridden by the subclass.|||']"
40,['Dart Inheritance'],['Dart inheritance is defined as the process of deriving the properties and characteristics of another class. It provides the ability to create a new class from an existing class. It is the most essential concept of the oops(Object-Oriented programming approach). We can reuse the all the behavior and characteristics of the previous class in the new class.'],"['https://www.javatpoint.com/dart-super-constructor', 'https://www.javatpoint.com/dart-super-keyword', 'https://www.javatpoint.com/dart-super-constructor', 'https://www.javatpoint.com/dart-super-keyword', 'https://www.javatpoint.com/dart-super-constructor']","['https://static.javatpoint.com/tutorial/dart/images/dart-inheritance.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-inheritance2.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-inheritance3.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-inheritance4.png', 'https://static.javatpoint.com/tutorial/dart/images/dart-inheritance5.png']",[],['Types of Inheritance'],"['Single Level Inheritance', 'Multilevel Inheritance', 'Hierarchical Inheritance']","[""Note - Dart doesn't support multiple inheritance because it creates complexity in the program.""]","['The syntax is given below.', 'The inheritance can be mainly four types. These are given below.', ""Let's understand the following example."", 'Explanation:', 'Explanation:']","['As you can see in the above figure, if we create class Car and write the common function in each of the classes. Then, it will increase duplication and data redundancy in the program. The inheritance is used to avoid this type of situation.', 'The child class inherits functions and variables, or properties of parent class using the extends keyword. It cannot inherit the parent class constructor; we will discuss this concept later.', 'In the single inheritance, a class is inherited by a single class or subclass is inherited by one parent class. In the following example, we create Person which inherits Human class.', 'Now the child class has two functions fly() and speak(). So we created the object of child class and access both functions. It printed the result to the console.', ""In the multiple inheritance, a subclass is inherited by another subclass or creates the chaining of inheritance. Let's understand the following example."", 'In the hierarchical inherence, two or more classes inherit a single class. In the following example, the two-child classes Peter and James inherit the Person class.']","[""Suppose we have a fleet of cars, and we create three classes as Duster, Maruti, and Jaguar. The methods modelName(), milage(), and man_year() will be same for all of the three classes. By using the inheritance, we don't need to write these functions in each of the three classes."", ""We can avoid data redundancy by defining the class Car with these functions in it and inheriting in the other classes from the Car class. It enhances the re-usability of code. We just need to write function one time instead of multiple times. Let's have a look at the following image."", ""In the above code, we create parent class Bird and declared the fly() function in it. Then, we created the child class called Parrot, which inherited the parent class's property using the extends keyword. The child class has its own function speak()."", 'In the above example, we created another new class Eagle and inherited the Parrot class. Now the parrot is the parent class of Eagle, and class Eagle acquired all functions of both parent classes. We created the object of the child class and accessed all properties. It printed the output to the screen.']","['class child_class extends parent_class {', 'class Bird{', 'void fly()', '{', 'print(""The bird can fly"");', '}', 'class Parrot extends Bird{', 'void speak(){', 'print(""The parrot can speak"");', '}', 'void main() {', 'Parrot p=new Parrot();', 'p.speak();', 'p.fly();', 'class Bird{', 'void fly()', '{', 'print(""The bird can fly"");', '}', 'class Parrot extends Bird{', 'void speak(){', 'print(""The parrot can speak"");', '}', '', 'class Eagle extends Parrot {', 'void vision(){', 'print(""The eagle has a sharp vision"");', '}', 'void main() {', 'Eagle e=new Eagle();', 'e.speak();', 'e.fly();', 'e.vision();', 'class Person {', 'void dispName(String name) {', 'print(name);', 'void dispAge(int age) {', 'print(age);', 'class Peter extends Person {', 'void dispBranch(String nationality) {', 'print(nationality);', 'class James extends Person {', 'void result(String result){', 'print(result);', 'void main() {', 'James j = new James();', 'j.dispName(""James"");', 'j.dispAge(24);', 'j.result(""Passed"");', 'Peter p = new Peter();', 'p.dispName(""Peter"");', 'p.dispAge(21);', 'p.dispBranch(""Computer Science"");']","['The parrot can speak', 'The bird can fly', 'The parrot can speak', 'The bird can fly', 'The eagle has a sharp vision', 'James', '24', 'Passed', 'Peter', '21', 'Computer Science']",[],['|||Parent Class - A class which is inherited by the other class is called superclass or parent class. It is also known as a base class.|||Child Class - A class which inherits properties from other class is called the child class. It is also known as the derived class or subclass.||||||Single Inheritance|||Multiple Inheritance|||Multilevel Inheritance|||Hierarchical Inheritance|||']
41,['Dart Super Constructor'],"['The child class can inherit all properties (methods, variables) and behavior of parent expect parent class constructor.& The superclass constructor can be invoke in sub class by using the super() constructor. We can access both non-parameterized and parameterized constructor of superclass. Accessing the constructor of superclass is slightly different in the Dart. The syntax is given below.']","['https://www.javatpoint.com/dart-methods', 'https://www.javatpoint.com/dart-inheritance', 'https://www.javatpoint.com/dart-methods', 'https://www.javatpoint.com/dart-inheritance', 'https://www.javatpoint.com/dart-methods']",[],[],"['Implicit super', 'Explicit super']","['Syntax:', 'Example -', 'Example -', 'Example - 2']",[],[],"[""If the superclass constructor consists of parameters then we require to call super() constructor with argument in to invoke superclass constructor in subclass explicitly. Let's understand the following example.""]","[""As we know that the constructor is automatically called when we instantiate a class. When we create the object of sub class, it invokes the constructor of sub class which implicitly invokes the parent class's default(non-parameterized) constructor. We can use super() constructor in our subclass to invoke superclass constructor. Let's understand the following example.""]","['SubClassConstructor():super() {', 'class Superclass {', 'Superclass(){', 'print(""This is a superclass constructor"");', '}', 'class Subclass extends Superclass', 'Subclass(){', 'print(""This is a subclass constructor"");', '}', 'display(){', 'print(""Welcome to javatpoint"");', 'void main(){', 'print(""Dart Implicit Superclass constructor call"");', 'Subclass s = new Subclass();', 's.display();', 'class Superclass {', 'Superclass(String msg){', 'print(""This is a superclass constructor"");', 'print(msg);', '}', 'class Subclass extends Superclass', 'Subclass():super(""We are calling superclass constructor explicitly ""){', 'print(""This is a subclass constructor"");', '', '}', 'display(){', 'print(""Welcome to javatpoint"");', 'void main(){', 'print(""Dart Implicit Superclass constructor example"");', 'Subclass s = new Subclass();', 's.display();']","['Dart Implicit Superclass constructor example', 'This is a superclass constructor', 'This is a subclass constructor', 'Welcome to javatpoint', 'Dart explicit Superclass constructor example', 'This is a parameterized superclass constructor', 'We are calling superclass constructor explicitly', 'This is a subclass constructor', 'Welcome to javatpoint']",[],[]
42,['Dart Methods'],"['A Dart method is the collection of statements that consists of some characteristics to class object. It provides the facility to perform some operation and it can be invoked by using its name when we need in the program. Methods divide the large task into small chunks and perform the specific operation of that program. This process increases the code reusability and enhances the modular approach of program. The methods can be defined with parameters that are passed as information to complete the specific task, after that it can return value to where it called or return nothing. Methods that define in the class either instance method or class methods.']","['https://www.javatpoint.com/dart-method-overriding', 'https://www.javatpoint.com/dart-super-constructor', 'https://www.javatpoint.com/dart-method-overriding', 'https://www.javatpoint.com/dart-super-constructor', 'https://www.javatpoint.com/dart-method-overriding']",[],[],['Instance Methods'],"['Creating Instance Methods', 'Syntax:', 'Calling instance Method', 'Syntax:', 'Class Methods', 'Creating Class Methods', 'Syntax:', 'Calling Class Method', 'Syntax:']",[],"['An instance method is defined by a name and valid return type. It may have list of parameters. The syntax is given below.', 'Instance methods can be accessed by using the class object, thus we required to create object to use it. The syntax is given below.', 'A static method is declared by using static keyword followed by method name with return type. The syntax is given below.', 'The class method can be called directly by using the class name instead of class object. The syntax is given below.']",['A method that can be accessed by using the instance of class is called instance methods. The instance methods can be no arguments or with arguments. The instance method can access by instance variable this keyword.'],['The class method is declared with the static keyword. It can be accessed by using the class name instead of the class object. These methods are common to all instances of that individual class. The static methods only can access the static variables.'],"['return_type method_name(<list of arguments>)', 'ClassName objName = new ClassName()', 'objName.methodName()', 'static return_type method_name(){', 'ClassName.classMethod()']",[],[],[]
43,['Dart Method Overriding'],"['The polymorphism is a combination of the two Greek words poly, which means many and morph means morphing into different forms or shapes. Together, polymorphism means the same entity can be used in various forms. In the programming aspect, the same method can be used in different classes. This technique makes programming more intuitive and more accessible.']","['https://www.javatpoint.com/dart-getters-and-setters', 'https://www.javatpoint.com/dart-methods', 'https://www.javatpoint.com/dart-getters-and-setters', 'https://www.javatpoint.com/dart-methods', 'https://www.javatpoint.com/dart-getters-and-setters']",[],[],"['Method Overriding', 'Method Overriding Example', 'Method Overriding using super Keyword', 'Advantage of method overriding', 'Rules of Method overriding in Dart']","['What is Polymorphism?', 'Example -', 'Explanation:', 'Example - 2', 'Explanation:', 'Example -', 'Explanation:']","['Note - When we created the child class object and invoked the method, it executes the parent class (if accessed by super keyword) method first, then the child class method.']","['If we create the object of a parent class, then it will be always invoked the parent class method.', 'Now, the College superclass is inherited by the Student subclass and the stu_details() method is overridden in the subclass.', 'Same as we created the object of College superclass object invoked its methods and printed the different results.', 'The few rules of method overriding are given below. These points must be kept in mind while declaring the same method in subclass.']","['For example - We have Shape class to define the shape of the object. The shape can be the circle, rectangle, square, straight line, etc. So here the goal is common, but the approach is different.', ""Let's take another example where we create two Classes called College and Student with common method void student_details(). Let's have a look at the following code snippet."", 'In the above example, we create two classes - College as a parent class and Student as a child class. The method stu_details defined in both classes with the same parameters and same return types.', 'We created the object of Student and to invoked the stu_details() with suitable arguments. It executed the subclass method, and then it printed the result.']","[""The method overriding is a technique to achieve polymorphism. Sometimes, we want a subclass object to give different results for the same method when subclass object invokes it. This can be done by defining the same method again in subclass. The method has the same name, same arguments, and the same return type. When that method is called, the subclass's method is executed instead of the method defined in the superclass."", ""When we declare the same method in the subclass, which is previously defined in the superclass is known as the method overriding. The subclass can define the same method by providing its own implementation, which is already exists in the superclass. The method in the superclass is called method overridden, and method in the subclass is called method overriding. Let's understand the method overriding in the following example."", ""We define two classes; first, is a subclass called Human, and the second is a superclass Boy. The Boy subclass inherits the Human superclass. The same method void showInfo() in both classes is defined with the different implementation. The subclass has its own definition of the void showInfo(). Let's have a look at the following code snippet."", 'In the above example, we defined a method with the same name in both, subclass and superclass. The purpose of method overriding is to give the own implementation of subclass method. When we created the object of the Boy subclass, it executed the subclass method and printed the Man is running instead of Human is running.', ""We can invoke the parent class method without creating its object. It can be done by using the super keyword in the subclass. The parent class data member can be accessed in the subclass by using the super keyword. Let's understand the following example."", ""In the above program, we accessed the Human class method in child class using the super keyword. Now, we don't need to instantiate the parent class. We only created the object of subclass, which invoked the run() method of child class and parent class."", 'The main benefit of the method overriding is that the subclass can provide its own implementation to the same method as per requirement without making any changes in the superclass method. This technique is much when we want to subclass method to behave differently also with the same name.']","['class Human{', 'void run()', 'print(""Human is running"");', 'class Man extends Human{', 'void run(){', 'print(""Boy is running"");', 'void main(){', 'Man m = new Man();', 'm.run();', 'class College{', 'String name;', 'int rollno;', 'void stu_details(name,rollno){', 'this.name = name;', 'this.rollno = rollno;', '', 'void display(){', 'print(""The student name:${name}"");', 'print(""The student rollno: ${rollno}"");', 'print(""The result is passed"");', '}', 'class Student extends College{', 'void stu_details(name,rollno){', 'this.name = name;', 'this.rollno = rollno;', 'void show(){', 'print(""The student name:${name}"");', 'print(""The student rollno: ${rollno}"");', 'print(""The result is failed"");', 'void main(){', 'Student  st = new Student();', 'st.stu_details(""Joseph"",101);', 'st.show();', 'College cg = new College();', 'cg.stu_details(""Jason"",102);', 'cg.display();', 'class Human{', 'void run()', 'print(""Human is running"");', 'class Man extends Human{', 'void run(){', 'super.run();', 'print(""Boy is running"");', 'void main(){', 'Man m = new Man();', 'm.run();']","['Boy is running', 'The student name: Joseph', 'The student rollno: 101', 'The result is failed', 'The student name:Peter', 'The student rollno: 102', 'The result is passed', 'Human is running', 'Boy is running']",[],"['|||The overriding method (the child class method) must be declared with the same configuration as the overridden method (the superclass method). The return type, list of arguments and its sequence must be the same as the parent class method.|||The overriding method must be defined in the subclass, not in the same class.|||The static and final method cannot be inherited in the subclass as they are accessible in their own class|||The constructor of the superclass cannot be inherited in a subclass.|||A method that cannot be inherited, then it cannot be overridden.|||']"
44,['Dart Getters and Setters'],"[""Getters and setters are the special class method that is used to read and write access to an object's properties. The getter method is used to reads the value of the variable or retrieve the value and setter method is used to set or initialize respective class fields. By default, all classes are associated with getter and setter method. However, we can override the default methods by defining getter and setter method explicitly.""]","['https://www.javatpoint.com/dart-abstract-classes', 'https://www.javatpoint.com/dart-method-overriding', 'https://www.javatpoint.com/dart-abstract-classes', 'https://www.javatpoint.com/dart-method-overriding', 'https://www.javatpoint.com/dart-abstract-classes']",[],[],"['Defining a getter', 'Defining a setter']","['Syntax:', 'Syntax:', 'Example:', 'Example - 2', 'Explanation:']",[],"['We can define the getters method by using the get keyword with no parameter a valid return type.', 'We can declare the setter method using the set keyword with one parameter and without return type.', ""We can also place the getter and setter method just after the. Now, let's understand the following example:"", 'In the above code, we defined the getter and setter methods before the constructor.']",[],[],"['return_type get field_name{', 'set field_name {', 'class Student {', 'String stdName;', 'String branch;', 'int stdAge;', 'String get std_name', '{', 'return stdName;', '}', 'void set std_name(String name)', '{', 'this.stdName = name;', '}', 'void set std_age(int age) {', 'if(age> = 20){', 'print(""Student age should be greater than 20"")', '}else{', 'this.stdAge = age;', '}', '}', '}', 'int get std_age{', 'return stdAge;', 'void set std_branch(String branch_name) {', 'this.branch = branch_name;', 'int get std_branch{', 'return branch;', 'void main(){', 'Student std = new Student();', ""std.std_name = 'John';"", 'std.std_age = 24;', ""std.std_branch = 'Computer Science';"", 'print(""Student name is: ${std_name}"");', 'print(""Student age is: ${std_age}"");', 'print(""Student branch is: ${std_branch}"");', 'class Car {', 'String makedate;', 'String modelname;', 'int manufactureYear;', 'int carAge;', 'String color;', 'int get age {', 'return carAge;', 'void set age(int currentYear) {', 'carAge = currentYear - manufactureYear;', 'Car({this.makedate,this.modelname,this.manufactureYear,this.color,});', 'void main() {', 'Car c =', 'Car(makedate:""Renault 20/03/2010"",modelname:""Duster"",manufactureYear:2010,color:""White"");', 'print(""The car company is: ${c.makedate}"");', 'print(""The modelname is: ${c.modelname}"");', 'print(""The color is:${c.color}"");', 'c.age = 2020;', 'print(c.age);']","['Student name is: John', 'Student age is: 24', 'Student Branch is: Computer Science', 'The car company is: Honda 20/03/2010', 'The modelname is: City', 'The color is: White', '10']",[],[]
45,['Dart Abstract Classes'],['Abstract classes are the classes in Dart that has one or more abstract method. Abstraction is a part of the data encapsulation where the actual internal working of the function hides from the users. They interact only with external functionality. We can declare the abstract class by using the abstract keyword. There is a possibility that an abstract class may or may not have abstract methods.'],"['https://www.javatpoint.com/dart-interfaces', 'https://www.javatpoint.com/dart-getters-and-setters', 'https://www.javatpoint.com/dart-interfaces', 'https://www.javatpoint.com/dart-getters-and-setters', 'https://www.javatpoint.com/dart-interfaces']",['https://static.javatpoint.com/tutorial/dart/images/dart-abstract-classes.png'],[],"['Declaring Abstract Class', 'Usage of Abstract class']","['Rules for Abstract classes:', 'Syntax:', 'Example -', 'Explanation:']",[],"['The rules of the abstract are given below.', ""Let's understand the above scenario through the following code.""]","['An abstract keyword followed by a class name is used to declare the abstract class. An abstract class mostly used to offer a base for the subclass to extends and implement the abstract method.', ""As we can see that in the above code, we implemented the abstract method in two subclasses according to its requirement and then we called the displayInfo() method using the object of the both class's object.""]","['Abstract methods are those methods, which are declared without implementation. The concrete methods or normal methods are declared with implementation. An abstract class can contain both types of methods, but a normal class is not allowed to have abstract methods.', ""We cannot create the instance of an abstract class that means it can't be instantiated. It can only be extended by the subclass, and the subclass must be provided the implantation to the abstract methods which are present in the present class. Then it is necessary to declare abstract subclass."", ""Let's suppose we have a class Person that has method displayInfo(), and we have to sub classes of it Boy and Girl. Each of the person information varies from the other person, so there is no benefit to implementing the displayInfo() in the parent class. Because every subclass must override the parent class method by provides its own implementation. Thus, we can force the subclass to provide implementation to that method, so that is the benefit to make method abstract. We don't require the give implementation in the parent class.""]","['abstract class ClassName {', 'abstract class Person {', 'void displayInfo();  //abstract method', 'class Boy extends Person', 'void displayInfo() {', 'print(""My name is Johnathon"");', '}', 'class Girl extends Person', 'void displayInfo() {', 'print(""My name is Grecia"");', '}', 'void main() {', 'Boy b = new Boy();  // Creating Object of Boy class', 'Girl g = new Girl();  // Creating Object of Girl class', 'b.displayInfo();', 'g.displayInfo();']","['My name is Johnathon', 'My name is Grecia']",[],"['|||An abstract class can have an abstract method (method without implementation), or not.|||If there is at least one abstract method, then the class must be declared abstract.|||The object of the abstract class cannot be created, but it can be extended.|||An abstract keyword is used to declare the abstract class.|||An abstract class can also include normal or concrete (method with the body) methods.|||All abstract methods of parent class must be implemented in the subclass.|||']"
46,['Dart Interfaces'],['An interface defines the syntax that any entity must adhere to. Dart does not have any separate syntax to define interfaces. An Interface defines the same as the class where any set of methods can be accessed by an object. The Class declaration can interface itself.'],"['https://www.javatpoint.com/dart-exceptions', 'https://www.javatpoint.com/dart-abstract-classes', 'https://www.javatpoint.com/dart-exceptions', 'https://www.javatpoint.com/dart-abstract-classes', 'https://www.javatpoint.com/dart-exceptions']",[],[],['Implementing Multiple Inheritance'],"['Declaring an Interface', 'Implementing an Interface', 'Syntax:', 'Example -', 'Explanation', 'Syntax:', 'Example -', 'Explanation:', 'Rules for Implementing Interfaces']",[],"[""Let's understand the following example.""]","[""Dart doesn't provide syntax for declaring interface directly. Implicitly, a class declaration itself an interface containing the entire instance member of the class and of any interfaces it implements."", ""In the following example, we are declaring a class Employee. Implicit, the Engineer class implements the interface declaration for the Employee class. Let's understand the above example by the following code snippet."", 'We have discussed previously that the multiple inheritance is not supported by the Dart, but we can apply the multiple interfaces. We can say that, using multiple interfaces, we can achieve multiple inheritance in Dart. The syntax is given below.']","['The keyword implement is needed to be writing, followed by class name to be able to use the interface. Implementing class must provide a complete definition of all the functions of the implemented interface. We can say that a class must define every function with the body in the interface that we want to achieve.', 'To work with interface methods, the interface must be implemented by another class using the implements keyword. A class which is implemented the interface must provide a full implementation of all the methods that belongs to the interface. Following is the syntax of the implementing interface.', 'In the above example, we defined a class Engineer as an interface implementing the Engineer class. Then, we defined the same method display() in both classes. This method override in class Engineer, so we created the object of the Engineer class in a main() function invoked the display() function. It printed the output to the screen.', 'In the above example, we implemented multiple interfaces in class College. Each data member of Student and Faculty class is overriding in class College. We created the object of College class and invoked the overriding functions. It printed the result.']","['class ClassName implements InterfaceName', 'class Employee', 'void display() {', 'print(""I am working as an engineer"");', '}', 'class Engineer implements Employee', 'void display() {', 'print(""I am an engineer in this company"");', 'void main()', 'Engineer eng = new Engineer();', 'eng.display();', 'class ClassName implements interface1, interface2,…interface n', 'class Student', 'String name;', 'int age;', 'void displayName() {', 'print(""I am ${name}"");', '}', 'void displayAge() {', 'print(""My age is ${age}"");', '}', 'class Faculty', 'String dep_name;', 'int salary;', 'void displayDepartment() {', 'print(""I am a professor of ${dep_name}"");', '}', 'void displaySalary() {', 'print(""My salary is ${salary}"");', '}', 'class College implements Student,Faculty', 'String name;', 'int age;', 'void displayName() {', 'print(""I am ${name}"");', '}', 'void displayAge() {', 'print(""My age is ${age}"");', '}', 'String dep_name;', 'int salary;', 'void displayDepartment() {', 'print(""I am a proffesor of ${dep_name}"");', '}', 'void displaySalary() {', 'print(""My salary is ${salary}"");', 'void main()', 'College cg = new College();', 'cg.name = ""Handscomb"";', 'cg.age = 25;', 'cg.dep_name = ""Data Structure"";', 'cg.salary = 50000;', 'cg.displayName();', 'cg.displayAge();', 'cg.displayDepartment();', 'cg.displaySalary();']","['I am working as engineer', 'I am Handscomb', 'My age is 25', 'I am a professor of Data Structure', 'My salary is 50000']",[],"[""|||A class that implements the interface must override every method and instance variable of an interface.|||Dart doesn't provide syntax to declare the interface directly. The class declaration can consider as the interface itself.|||An interface class must provide the full implementation of all the methods belong to the interfaces.|||We can implement one or more interfaces simultaneously.|||Using the interface, we can achieve multiple inheritance.|||""]"
47,['Dart Exceptions'],"[""Dart Exceptions are the run-time error. It is raised when the program gets execution. The program doesn't report the error at compile time when the program runs internally and if Dart compiler found something not appropriate. Then, it reports run-time error and the execution of program is terminated abnormally. This type of error is called Exceptions. For example - A given number is divided by the zero or we try to access the elements from the empty list.""]","['https://www.javatpoint.com/dart-typedef', 'https://www.javatpoint.com/dart-interfaces', 'https://www.javatpoint.com/dart-typedef', 'https://www.javatpoint.com/dart-interfaces', 'https://www.javatpoint.com/dart-typedef']",[],[],"['The Finally Block', 'Throwing an Exception']","['The try/on/catch Blocks', 'Syntax:', 'Example - Using the on block', 'Example - Using the catch Block', 'Example 3: on…catch block', 'Syntax -', 'Example -', 'Syntax:', 'Example -', 'Custom Exceptions', 'Syntax: Defining the Exception', 'Example -', 'Explanation:']",[],"['Dart supports the following types of built-in exceptions.', 'The syntax of exceptional handling is the given below.', 'One should remember the following points.', 'Explanation:', ""Let's understand the following example using the catch block."", 'Now look at the example of on…catch block together', 'The finally block always executes whether there is exception occur or not. It executes unconditionally after the try/on/catch.', 'The syntax of finally block is given below.', ""Let's understand the following example of finally block."", ""Let's understand the following example."", ""Let's understand the following code.""]","['The try block is used to hold the block of code that might be thrown an exception. The on block is used to when we require specifying the exceptions. The catch block is used to when handler needs the exception object.', 'If the try block finds the error, it throws to the catch block and the catch block has the code to handle the error. The try block must be followed by the exactly one block either on/ catch or one finally block.', ""In the following example, the variable x is divided by the y variable respectively. The code is thrown when it tries to divide by the zero. The on block consists of the code to handle the exception. Let's understand the following code."", 'We can raise an exception explicitly or forcefully. The explicitly raised exception should be handled to avoid the program from existing sharply. The syntax is given below.', 'As we discussed above, each of the exception in dart is the subtype of the built-in class Exception. Dart provide the flexibility to create custom exception by extending the existing exception class. The syntax is given below.', 'In the above example, we created a custom exception, AmtException. The code raised the exception if the entered amount is not within the excepted range and we enclosed the function invocation in the try…catch block.']","['The main objective of the exception is to handle the run-time error and prevent the program from terminating abruptly. Every exception in the Dart is a subtype of the pre-defined class Exception. Dart provides the following techniques to handle the exceptions.', 'In the above code, we declared the three variable x, y and res in main () function. We written the suspect code in try block divided the x by the 0 that might be thrown an exception. The try block found the error the control transferred to the on block that has the code to handle the error. By using this, the program did not stop its execution.']","['void main() {', 'int x = 12;', 'int y = 0;', 'int res;', 'try {', 'res = x ~/ y;', 'on IntegerDivisionByZeroException {', ""print('Cannot divide by zero');"", 'void main() {', 'int x = 12;', 'int y = 0;', 'int res;', 'try {', 'res = x ~/ y;', 'catch(E) {', 'print(E);', 'void main() {', 'int x = 12;', 'int y = 0;', 'int res;', 'try {', 'res = x ~/ y;', 'on IntegerDivisionByZeroException catch(E) {', 'print(E);', 'on Exception1 {', 'catch Exception2 {', 'finally {', 'finally { void main() {', 'int x = 12;', 'int y = 0;', 'int res;', 'try {', 'res = x ~/ y;', 'on IntegerDivisionByZeroException {', ""print('Cannot divide by zero');"", ""print('Finally block always executed');"", 'throw new Exception_name()', 'main() {', 'try {', 'check_marks(-10);', 'catch(e) {', ""print('The marks cannot be negative');"", 'void check_marks(int marks) {', 'if(marks<0) {', 'throw new FormatException();  // Raising explanation externally', 'class Custom_exception_Name implements Exception {', 'class AmtException implements Exception {', ""String expMsg() => 'Entered Amount should be greater than zero';"", 'void main() {', 'try {', 'withdraw_amt(-1);', 'catch(E) {', 'print(E.expMsg());', 'finally {', ""print('Ending requested operation.....');"", 'void withdraw_amt(int amt) {', 'if (amt <= 0) {', 'throw new AmtException();']","['try {', '// code that might throw an exception', '}', 'on Exception1 {', '// Specify the exception', '}', 'Catch Exception2 {', '// code for handling exception', '}', 'Cannot divide by zero', 'IntegerDivisionByZeroException', 'IntegerDivisionByZeroException', 'Cannot divide by zero', 'Finally block executed', 'The marks cannot be negative', 'Entered Amount should be greater than zero', 'Ending requested operation.....']",['Sr.|||Exceptions|||Description&&&1.|||DefferedLoadException|||It is thrown when a deferred library fails to load.&&&2.|||FromatException|||It is the exception which is thrown&&&3.|||IntegerDivisionByZeroException|||It is thrown when number is divided by zero.&&&4.|||IOEException|||It is the base class of input-output related exception.&&&5.|||IsolateSpawnException|||It is thrown when an isolated cannot be created.&&&6.|||Timeout|||It is thrown when a schedule timeout happens while waiting for an async result.'],['|||We can handle the multiple exceptions using the more than one catch block.|||The on block and the catch block is mutually inclusive that means we can associate the both - the on block and catch block with the try block.|||']
48,['Dart Typedef'],"['In Dart, the typedef is used to generate an alias for function type that we can use it as type annotation for declaring variables and return types of that function type. An alias of function type can be used as type annotation in variable declaration or function return type. A typedef stores the type information when we assigned the function type to a variable.']","['https://www.javatpoint.com/dart-metadata', 'https://www.javatpoint.com/dart-exceptions', 'https://www.javatpoint.com/dart-metadata', 'https://www.javatpoint.com/dart-exceptions', 'https://www.javatpoint.com/dart-metadata']",['https://static.javatpoint.com/tutorial/dart/images/dart-typedef.png'],[],"['Declaring a typedef', 'Assigning typedef Variable', 'Calling Function with typedef', 'Complete Program using typedef', 'Typedef as Parameter', 'Dart Debugging', 'What are Breakpoints?', 'How to add Breakpoints in WebStorm?']","['Syntax:', 'Example -', 'Syntax:', 'Syntax:', 'Example:', 'Explanation:', 'Example -']",[],"[""Let's create an alias of MultiOperation(int n1, int n2) that contains two parameters of the integer type."", 'We can assign any function with the same parameter to the typedef variable. The syntax is given below.', ""Let's understand the following example, where we define the two functions with the same signature as the MultiOperation."", 'We can invoke function by passing the same parameter by using the typdef variable. The syntax is given below.', ""Let's have a look at the following example.""]","['A typedef keyword is used to create an alias for function that will be the same as the actual functions. We can also create a function prototype with a list of parameters. The syntax is given below.', 'The mp is a typedef variable, which can be used to refer any method that accepts two integer parameters. The function reference can be switched at runtime by using the typedefs.', 'In the above code, we created the alias of the MultiOperation() function using the typedef keyword. We defined two more functions Sum() and Sub(), which have same signature as the typedef function.', 'Then, we assigned the typedef variable mp that referred to both functions Sum() function and Sub() function. Now, we invoked the function by passing the required argument, and it printed the result to the screen.', 'Debugging becomes easier if you are using the IDE for the Dart program. Here we are assuming that you have installed the most common and suitable IDE WebStorme in your system. The WebStorm Editor allows us to step by step debugging.', 'Breakpoints are the checkpoint of the program to break the program at a specific point to checks its behavior. We can add the breakpoints in the program to check the bugs within that specific area.']","['We can use the typedef method as a parameter. In the following example, we are creating an additional function to the above program NumericOperaion(int n1, int n2, MultiOperation mp) with the two integer variables and typedef ManyOperation mp as its parameter.', ""In the above code, we didn't need to create a typedef variable to the refer to each method; we just called the NumericOperation() function by passing the required value and typedef variable mp. It performed the given operations and printed the result."", 'Debugging is the process of identifying and eliminating of existing and possible errors in the Dart program that can cause ambiguity and uncertainty during the program execution. Debugging is essential to detect and fixes the bugs to run the program smoothly or without interruption.', 'We can add the breakpoints in WebStorm by simply click on a line number in the left bar to add a breakpoint. After adding the breakpoints, run the program in the debug mode, it will give the Debugger window where we can verify that how the breakpoint works. We can also change the values and see the difference in the watches window.']","['typedef function_name(parameters)', 'typedef MultiOperation(int n1, int n2);   // function signature', 'type_def var_name = function_name;', 'Sum(int n1, int n2) {', 'print(""Sum of the two number:${n1+n2}"");', 'Sub(int n1, intn2 ) {', 'print(""Subtraction of the two number:${n1-n2}"");', 'var_name(parameter);', 'MultiOperation mp;', 'mp = Sum;', 'mp(20,10);', 'mp = Sub;', 'mp(30,20);', 'typedef MultiOperation(int num1, int num2);  // typedef function signature', 'Sum(int n1, int n2) {', 'print(""Sum of the two number:${n1+n2}"");', 'Sub(int n1, int n2 ) {', 'print(""Subtraction of the two number:${n1-n2}"");', 'void main() {', 'MultiOperation mp = Sum;', 'print(""JavaTpoint - Dart typedef Example"");', 'mp(20,10);', 'mp = Sub;', 'mp(30,20);', 'typedef MultiOperation(int num1, int num2);  // typedef function signature', 'Sum(int n1, int n2) {', 'print(""Sum of the two number:${n1+n2}"");', 'Sub(int n1, int n2 ) {', 'print(""Subtraction of the two number:${n1-n2}"");', 'NumericOperation(int n1, int n2, MultiOperation mp){', 'print(""Inside Operation"");', 'mp(n1,n2);', '}', 'void main() {', 'print(""JavaTpoint - Dart typedef Example"");', 'NumericOperation(20, 10, Sum);', 'NumericOperation(20, 10, Sub);']","['JavaTpoint - Dart typedef Example', 'Sum of the two numbers: 30', 'Subtraction of the two numbers: 10', 'JavaTpoint - Dart typedef Example', 'Inside Operation', 'Sum of the two number: 30', 'Inside Operation', 'Subtraction of the two number: 10']",[],[]
49,['Dart Metadata'],"['The Dart Metadata is used to specify the Dart program with additional information. It usually starts with @ symbol, followed by either a reference of the compile-time constant or a call to a constant constructor.']","['https://www.javatpoint.com/dart-collection', 'https://www.javatpoint.com/dart-typedef', 'https://www.javatpoint.com/dart-collection', 'https://www.javatpoint.com/dart-typedef', 'https://www.javatpoint.com/dart-collection']",[],[],['Creating Metadata Annotation'],"['Example -', 'Example -']",[],"['In Dart, we can define our own metadata annotations.', ""Let's understand the following example -"", ""Here's an example of defining a @student annotation that takes two arguments -"", 'And, here is the following example we are using @student annotation.', ""Let's understand the following example."", 'In the above code, we have provided the addition information to the both parent class and child class functions.']",[],"['In Dart, metadata generally define just before a library name, class, typedef, field, type parameter, factory, function, constructor, parameter, or variable declaration and before an import or export directive. We can retrieve the metadata using reflection in runtime.']","['library student;', 'Class Student {', 'final String studentName;', 'final String rollno;', 'const Student(this.studentName, this.code);', ""import 'student.dart' ;"", ""@Student('studentName', 'rollno')"", 'void greetHii() {', 'print(""Hii Welcome to Javatpoint"");', 'class Human{', '@Overridden method', 'void run()', 'print(""Human is running"");', 'class Man extends Human{', '@Overriding method', 'void run(){', 'print(""Boy is running"");', 'void main(){', 'Man m = new Man();', 'm.run();']",['Boy is running'],[],[]
50,['Dart Collection'],"[""Dart doesn't support the array to store the data, unlike the other programming language. We can use the Dart collection in place of array data structure. We can enable the other classes of the collection in our Dart script by using the dart::core library.""]","['https://www.javatpoint.com/dart-generics', 'https://www.javatpoint.com/dart-metadata', 'https://www.javatpoint.com/dart-generics', 'https://www.javatpoint.com/dart-metadata', 'https://www.javatpoint.com/dart-generics']",[],[],"['Iterating Collections', 'HashMap <K, V Class>']",['Explanation:'],[],['Dart collection can be classified as follows.'],"['In the above code, the moveNext() function returned the Boolean value that indicating whether there is a subsequent entry. The current property of the returns the object of that iterator currently points to.']","[""The dart::core library provides the iterator class, which enables the easy collection traversal. As we know that, every collection contains an iterator property. This property returns an iterator that point to the objects in the collection. Let's understand the following example."", 'The HashMap class is based on the implementation of the Map. As we discussed earlier, the key must be unique and must have consistent Object == (equal to operator) and Object.hashCode implementations. We can also use null as a key. The elements in the Map may in any order. The iteration order only changes if the map is modified. If we iterate the map, the value of the map is iterated in the same order as their associated key.']","[""import 'dart:collection';"", 'void main() {', 'Queue que = new Queue();', 'que.addAll([10,20,30]);', 'Iterator i= que.iterator;', 'while(i.moveNext()) {', 'print(i.current);']","['10', '20', '30']","[""Dart Collection|||Description&&&List|||A list is the collection of the ordered group of collection. The dart::core library offers the list class that allows us to create and modify the list. It provides the following types of lists.||||||Fixed Length List - We cannot change the list's length at runtime.|||Growable List - We can change the length of the list at run-time.|||&&&Set|||A set is the collection of the objects in which each object can be declared at once. The dart::core library offers the Set class to use its facilities.&&&Maps|||The maps are the collection of the key-value pair of data. Each value is stored with a particular key. The key and value can be any type in the dart. A Map is a dynamic collection. We can say that map can be modified at the run-time. The dart::core library makes available the Map class to work with it.&&&Queue|||A queue is the collection of the where data stores in the first-in-first-out format. It can be manipulated at both ends. Simply, we can enter the element from one end and delete it from another end.""]","[""|||Fixed Length List - We cannot change the list's length at runtime.|||Growable List - We can change the length of the list at run-time.|||""]"
51,['Dart Generics'],"['Dart Generics are the same as the Dart collections, which are used to store the homogenous data. As we discussed in the Dart features, it is an optionally typed language.']","['https://www.javatpoint.com/dart-packages', 'https://www.javatpoint.com/dart-collection', 'https://www.javatpoint.com/dart-packages', 'https://www.javatpoint.com/dart-collection', 'https://www.javatpoint.com/dart-packages']",[],[],[],"['Syntax -', 'Example - Generics List', 'Explanation:', 'Example - 2', 'Example - Generic Set', 'Example - Generics Queue', 'Generic Map', 'Syntax:', 'Example -']",[],"['Type safety is a unique feature of the Dart programming, which makes sure that a memory block can only contain the data of a specific data type.', 'We created a list that holds the string type-safe and used the add element into it by using add() function.', ""If we try to insert the other than the specified value then it will through a compilation error. Let's understand the following example -"", ""Let's understand another example -"", 'As we know that declaring map require the key and value. The syntax is given below.']","['By default, Dart Collections are the heterogeneous type. In other words, a single Dart collection can hold the values of several data types. However, a Dart collection can be also stored the homogenous values or same type values.', 'The Dart Generics provides the facility to enforce a limit on the data type of the values that can be stored by the collection. These collections can be referred to as the type-safe collections.', 'We can do the type-safe implementation of various Dart objects such as List, Queue, Map, and Set. It is also supported by all implementation of the above define collection types. The syntax is given below.']",['The generics are a way to support type-safety implementation for all Dart collections. The pair of the angular bracket is used to declare the type-safe collection. The angular bracket consists of the data-types of the collection. The syntax is given below.'],"['Collection_name <data_type> identifier = new Collection_name<data_type>', 'void main() {', 'List <String> logStr = new List <String>();', 'logStr.add(""CHECK"");', 'logStr.add(""ERROR"");', 'logStr.add(""INFO"");', 'for (String i in logStr) {', 'print(i);', 'void main() {', 'List <String> logStr = new List <String>();', 'logStr.add(511);   // Add integer value', 'logStr.add(""ERROR"");', 'logStr.add(""INFO"");', 'for (String i in logTypes) {', 'print(i);', 'void main() {', 'Set <int>numberSet = new  Set<int>();', 'numberSet.add(10);', 'numberSet.add(20);', 'numberSet.add(30);', 'numberSet.add(40);', 'numberSet.add(50);', 'print(""Default implementation  :${numberSet.runtimeType}"");', 'for(var i in numberSet) {', 'print(i);', ""import 'dart:collection';"", 'void main() {', 'Queue<int> queue = new Queue<int>();', 'print(""Default implementation ${queue.runtimeType}"");', 'queue.addLast(100);', 'queue.addLast(205);', 'queue.addLast(315);', 'queue.addLast(470);', 'queue.removeFirst();', 'for(int i in queue){', 'print(i);', 'Map <Key_type, value_type>', 'void main() {', ""Map <String, String>m={'name':'Joseph','Rollno':'Std1001'};"", ""print('Map :${m}');""]","['CHECK', 'ERROR', 'INFO', ""generics.dart:3:17: Error: The argument type 'int' can't be assigned to the parameter type 'String'."", 'logTypes.add(511);', '10', '20', '30', '40', '50', 'Default implementation ListQueue<int>', '205', '315', '470', 'Map :{name: Joseph, Rollno: Std1001}']",[],[]
52,['Dart Packages'],"['Dart package is the collection of a well-organized, independent, and reusable code unit. Applications might be needed to implement third-party libraries or packages. The package generally contains a set of classes, functions, or unit of code for specific tasks along with the compiled program and sample data. Dart provides an extensive set of default packages that load automatically when the dart console starts. However, if we need packages other than the default packages then its need to installed and loaded explicitly in order to use. When a package is loaded, it can be used in the whole Dart environment.']","['https://www.javatpoint.com/dart-libraries', 'https://www.javatpoint.com/dart-generics', 'https://www.javatpoint.com/dart-libraries', 'https://www.javatpoint.com/dart-generics', 'https://www.javatpoint.com/dart-libraries']",[],[],"['Dart Package Manager', 'Installing a Package']","['Example -', 'Read XML String', 'Example - Parsing XML String Input']",[],"['The following steps are defining the installation of the package in the project.', 'The above command will download the package under the packages folder in the application directory.', 'We have added the xml to the project dependencies. Now we can use Dart XML package in the project by importing it. It can be imported as follows.', 'We can read XML string and authenticate the input; Dart XML provides a parse() method to read the string input. The syntax is given below.', ""Let's have a look at the following example:"", 'In the following example, we display the parsing XML string input.']","[""The Dart IDE's provides the inbuilt support for using the pub that consist of creating, downloading, updating, and publishing packages, Otherwise we can use the pub command line. The following is the list of the few important pub commands."", ""Step - 1: Write the package name in the dependencies section of project's pubspec.yaml file. Then run the below command to find the package installed in project.""]","['Every language provides the functionality for handling the external packages such as Nuget for .NET, Gradle or Maven for Java, npm for Node.js, etc. Dart has the inbuilt package manager, which is called a pub. It is basically used to organize, manage the third-party libraries, tools, dependencies, and also used to install the packages in the repository. Every Dart application consists of a pubspec.yaml file which includes the metadata of the file. The metadata of the package holds the author, version, application name, and description. The full form of the yaml is a Yet Another Markup Language. The pubspec.yaml is used to download the various libraries that application needs during programming. The pubspec.yaml file must look like as follows.']","[""name: 'vector_victor'"", 'version: 0.0.1', 'description: An absolute bare-bones web app.', ""dependencies: browser: '>=0.10.0 <0.11.0'"", 'pub get', 'name: TestApp', 'version: 0.0.1', 'description: A simple dart application', 'dependencies:', ""import 'package:xml/xml.dart' as xml;"", 'xml. parse(String input):', ""import 'package:xml/xml.dart' as xml;"", 'void main(){', 'print(""xml"");', 'var bookstoreXml = \'\'\'<?xml version = ""1.0""?>', '<bookstore>', '<book>', '<title lang = ""English"">Who will cry when you die </title>', '<price>150.00</price>', '</book>', '<book>', '<title lang = ""English"">The Alchemist </title>', '<price>90.00</price>', '</book>', '<price>200.00</price>', ""</bookstore>''';"", 'var document = xml.parse(bookstoreXml);', 'print(document.toString());']","['xml', '', '', 'Who will cry when you die', '150.00', '', '', 'The Alchemist', '90.00', '', '200.00']","['Sr. No|||Description&&&pub get|||It is used to get all packages of application dependent on.&&&pub upgrade|||It is used to upgrade all application dependencies to the modern version.&&&pub build|||It is used to construct your web application, and it will create a build folder, with all related scripts in it.&&&pub help|||It is used to get help related to all pub commands or when we stuck while programming.']",[]
53,['Dart Libraries'],"['In Dart, the library is the collection of the routine or set of programming instructions. Dart consists of many sets of built-in libraries that are beneficial to hold routines (functions, set of classes, etc.), and regularly used. A Dart library contains constants, functions, properties, exceptions, and typedefs, and set of classes.']","['https://www.javatpoint.com/dart-generators', 'https://www.javatpoint.com/dart-packages', 'https://www.javatpoint.com/dart-generators', 'https://www.javatpoint.com/dart-packages', 'https://www.javatpoint.com/dart-generators']",[],[],"['Importing a library', 'Encapsulation in Libraries', 'Creating Custom Libraries (User-defined Library)', 'Name Alias of Library']","['Example - Importing and using a Library', 'Explanation:', 'Syntax:', 'Example -', 'Syntax:', 'Example - Custom Library', 'Syntax:', 'Example -']",['Note - The custom library must be imported by its saved file name such as we imported it in the current working file with the calculator_simple name.'],"['We are describing some commonly used libraries below.', ""Let's understand the following example of importing and using a library function."", 'We define a library called Greetings that has a private function.', 'The above file saves as greetings.dart, now we import the library.', 'After running the above code, it throws an error because we have declared the library with the private method and try to access it in other file.', 'Step - 1: Declaring a Library', 'The library statement is used to create a library explicitly. The syntax is given below.', 'Step - 2: Connecting a Library', 'We can connect a library in two ways.', ""Let's understand the following example -"", ""Now we import the above custom file in current file called 'library.dart'."", 'Copy the above code and paste it into your dart editor and observe the result.', ""Let's understand the following example -"", 'First, we define a library: greeting.dart', 'Next, we define the new library: hellogreetings.dart', 'Now, we import the above libraries with the as prefix.']","['To work with the library, we must import it into the current program. The Dart provides the import keyword, which is used to make the library available in the current file. We can use multiple libraries in a single file.', 'We can also use our own code as a library and import it when needed. This type of library is called a custom library. Below are the steps to create a custom library.']","['For example - Dart built-in library URIs is used as dart scheme to refer to a library. Other libraries can use a file system path or the package: scheme to specify its URIs. The package manager pub in Dart provides the libraries and uses the package scheme.', ""In the above code, we imported the built-in library 'dart:math'. It provides the many built-in mathematical function, here we used the sqrt() function with number. It takes a number as an argument that we want to find its square root of. We passed an integer number 25 in sqrt() function, and it retuned an output as 5."", ""Dart provides the facility to encapsulate or restrict access the content of the dart library. It can be done by using the _(underscore), followed by the identifier. The _(underscore) symbol makes the library's content completely private. The syntax is given below."", 'Dart allows us to import multiple libraries into the current working file, but if we create the same function name within the different libraries, it will create conflict while accessing these functions. The Dart compiler might be confused to identify the particular function in different library. To overcome this scenario, Dart provides the as keyword for specifying the prefix. The syntax is given below.']","[""import 'dart:math';   // Importing built-in library"", 'void main() {', 'print(""Square root of 36 is: ${sqrt(36)}"");', '_identifier', 'library Greetings;', 'void _sayHi(msg) {', 'print(""We will access this method in another program:${msg}"");', ""import 'greetings.dart' as w;"", 'void main() {', 'w._sayHi(""Hello Javatpoint"");', 'library library_name', ""import 'library_name'"", ""import 'dir/library_name'"", 'library calculator_simple;', ""import 'dart:math';"", 'int add(int num1,int num2){', 'print(""inside add method of calculator_simple Library "") ;', 'return num1+num2;', 'int multiplication(int num1,int num2){', 'print(""inside multiplication method of calculator_simple Library "") ;', 'return num1*num2;', 'int subtraction(int num1,int num2){', 'print(""inside subtraction  method of calculator_simple Library "") ;', 'return num1-num2;', 'int modulus(int num1,int num2){', 'print(""inside modulus  method of calculator_simple Library "") ;', 'return num1%num2;', ""import 'calculator.dart';"", 'void main() {', 'var n1 = 30;', 'var n2 = 10;', 'var sum = add(n1,n2);', 'var mod = modulus(n1,n2);', 'var mul = multiplication(n1,n2);', 'var div = divide(n1,n2);', 'var sub = subtraction(n1,n2);', 'print(""$n1 + $n2 = $sum"");', 'print(""$n1 %  $n2= $mod"");', 'print(""$n1 + $n2 = $mul"");', 'print(""$n1 - $n2 = $sub"");', ""import 'library_uri' as prefix"", 'library greetings;', 'void sayHi(msg){', 'print(""Learn the Dart with ${msg}"");', 'library hellogreetings;', 'void sayHi(msg){', 'print(""${msg} provides the tutorial on all technical retated topic"");', ""import 'greetings.dart';"", ""import 'hellogreetings.dart' as gret;"", 'void main(){', 'sayHi(""JavaTpoint"");', 'gret.sayHi(""JavaTpoint"");   // To eliminate the name confliction']","['Square root of 25 is: 5.0', 'Unhandled exception:', ""No top-level method 'w._sayHi' declared."", ""NoSuchMethodError: method not found: 'w._sayHi'"", 'Receiver: top-level', 'Arguments: [...]', '#0 NoSuchMethodError._throwNew (dart:core-patch/errors_patch.dart:184)', '#1 main (file:///C:/Users/Administrator/WebstormProjects/untitled/Assertion.dart:6:3)', '#2 _startIsolate.<anonymous closure> (dart:isolate-patch/isolate_patch.dart:261)', '#3 _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:148)', 'inside add method of calculator_simple Library', 'inside modulus  method of calculator_simple Library', 'inside multiplication method of calculator_simple Library', 'inside subtraction  method of calculator_simple Library', '30 + 10 = 40', '30 %  10= 0', '30 + 10 = 300', '30 - 10 = 20', 'Learn the Dart with JavaTpoint', 'JavaTpoint provides the tutorial on all technical related topic']","[""Sr.|||Library|||Description&&&1.|||dart:io|||This library consists of File, HTTP, socket, and other I/O support for server applications. This library is not suitable for browser-based applications. We don't need to import explicitly because it is imported by default.&&&2.|||Dart:core|||This library consists of Collection, built-in types, and other core functionality for each dart program. It is imported by default.&&&3.|||Dart: math|||This library consists of the rich mathematical functions, constant, and random number generator.&&&4.|||Dart: convert|||It is used to Encoders and decoders for converting the different data representations such as JSON and UTF&&&5.|||Dart: typed_data|||It represents the lists that store the fixed-sized data efficiently (for example - unsigned 8-byte integer).""]",['|||Within the same directory||||||From a different directory|||']
54,['Dart Generators'],['Dart Generator is a unique function that allows us to produce a sequence of values. Generators return values on demand; it means the value is generated when we try to iterate over the iterators. Dart provides built-in support for two types of generator functions.'],"['https://www.javatpoint.com/dart-callable-classes', 'https://www.javatpoint.com/dart-libraries', 'https://www.javatpoint.com/dart-callable-classes', 'https://www.javatpoint.com/dart-libraries', 'https://www.javatpoint.com/dart-callable-classes']",[],[],"['Synchronous Generator', 'Asynchronous Generators']","['Example -', 'Explanation:', 'Example -', 'Explanation:', 'The yield Keyword', 'The sync* Keyword -', 'Example -', 'Explanation -', 'The async* Keyword', 'Example -']",['Note - Copy above code and paste it in your dart editor. You can clearly see the difference between the synchronous generators and asynchronous generators.'],"[""Let's understand the following example of a synchronous generator."", ""Let's understand the following example -"", ""Let's understand the following concepts related to the generator function."", 'The above generator function generated the value when we iterate over the iterator.', ""The async keyword is used to declare the asynchronous generators. It returns the stream object. Let's understand the following example -""]","['It returns an iterable object which carries value synchronously. The yield keyword is used along with marking the synchronous generator function body as sync* to generator values.', 'In the above program, we declared an oddNumber(10) function with the foreach loop without its body. The foreach loop will iterate the function. Now, we created oddNumber(10) function as synchronous generator function.', 'In the function body, we initialized a new variable k, which assigns the argument n. Then, we applied while loop to iterate the function, and the loop body is iterated until the value of k is less than or equal to 0.', 'It returns a stream object which carries value asynchronously. The yield keyword is used along with marking the asynchronous generator function body as async* to generator values.', 'The yield returns the single value to the sequence at a time but does not stop the execution of the generator function completely. It returns a value for each execution of the generator function.', ""The sync* keyword is used to declare the synchronize generator function. It returns the value when we try to iterator the value not when it was created. Let's have a look at the following example -""]","[""We did modulus operation on k to find the odd numbers from the generators. We used the yield statement, which suspends the function's execution and returns the value at a time. It will return the value of each execution of the generator function. When the while loop's condition becomes false, then the loop terminated and prints the odd numbers."", 'The above code generated values asynchronously. The asyncNaturalsTo(int num) function returns a stream objects in each execution of function body. Here, the yield keyword behaved the same as the previous example; it stopped the execution of the function, returned the value, and resumed the execution for the next iteration. It will happen again and again until the function body is terminated.']","['main()  {', 'print(""Dart Synchronous Generator Example."");', 'oddNumber(10).forEach(print);', 'Iterable<int> oddNumber(int num) sync* {', 'int k = num;', 'while(k >= 0) {', 'if(k%2 == 1) {', 'yield k;', '}', 'main()  {', 'print(""Dart Asynchronous Generator Example."");', 'asyncNaturalsTo(10).forEach(print);', 'Stream<int> asyncNaturalsTo(int num) async* {', 'int k = 0;', 'while(k < num) {', 'yield k++;', '}', 'void main() {', ""print('creating iterator');"", 'Iterable<int> numbers = getNumbers(4);  // Here we are creating iterator', ""print('Iteration starts...');"", 'for (int i in numbers) {', ""print('$i');        // Iterate over the iterator"", ""print('end of main function');"", 'Iterable<int> getNumbers(int n) sync* {            // define generator synchronously', ""print('generator started');"", 'for (int i = 0; i < n; i++) {', 'yield i;', ""print('generator function ended');"", 'void main() {', ""print('creating iterator');"", 'Stream<int> numbers = getNumbers(4);', ""print('starting to listen...');"", 'numbers.listen((int k) {', ""print('$k');"", ""print('end of the main function');"", 'Stream<int> getNumbers(int number) async* {   // declaring asynchronous generator function', ""print('waiting inside generator a 3 seconds :)');"", 'await new Future.delayed(new Duration(seconds: 3)); //sleep 3s', ""print('started generating values...');"", 'for (int i = 0; i < number; i++) {', 'await new Future.delayed(new Duration(seconds: 1)); //sleep 1s', 'yield i;', ""print('ended generating values...');""]","['Dart Synchronous Generator Example.', '9', '7', '5', '3', '1', 'Dart Asynchronous Generator Example.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'creating iterator', 'Iteration starts...', 'generator started', '0', '1', '2', '3', 'generator function ended', 'end of main function', 'creating iterator', 'starting to listen...', 'end of the main function', 'waiting inside generator a 3 seconds :)', 'started generating values...', '0', '1', '2', '3', 'ended generating values...']",[],['|||Synchronous Generators|||Asynchronous Generators |||']
55,['Dart Callable Classes'],"[""Dart provides the facility to call class instances like a function. To make callable class, we need to implement a call() method in it. Let's understand the following example -""]","['https://www.javatpoint.com/dart-isolates', 'https://www.javatpoint.com/dart-generators', 'https://www.javatpoint.com/dart-isolates', 'https://www.javatpoint.com/dart-generators', 'https://www.javatpoint.com/dart-isolates']",[],[],[],"['Example - 1', 'Explanation:', 'Example - 2 Multiple callable class', 'Explanation:']",[],"[""Let's have a look at another example -""]","['In the above code, We defined a call() function in the class Student that takes two arguments String name, integer age and return a message with this information. Then, we have created the object of class Student and called it like a function.', 'In the above code, we defined two callable functions in class Student and class Employee. The Employee class call() function accepts two parameters as String empid and int age. We called instances of both classes as callable functions.']",[],"['class Student {', 'String call(String name, int age) {', ""return('Student name is $name and Age is $age');"", '}', 'void main() {', 'Student stu = new Student();', ""var msg = stu('Sharma',18);     // Class instance called like a function."", ""print('Dart Callable class');"", 'print(msg);', ""var msg = stu('Sharma',18);"", 'class Student {', 'String call(String name, int age) {', ""return('Student name is $name and Age is $age');"", '}', 'class Employee {', 'int call(int empid, int age) {', ""return('Employee id is ${empid} and Age is ${age}');"", '}', 'void main() {', 'Student stu = new Student();', 'Employee emp = new Employee();', ""var msg = stu('peter',18);  // Class instance called like a function."", 'var msg2 = emp(101,32);   // Class instance called like a function.', ""print('Dart Callable class');"", 'print(msg);', 'print(msg2);', ""var msg = stu('peter',18);"", 'var msg2 = emp(101,32);']","['Dart Callable class', 'Student name is Sharma and Age is 18', 'Dart Callable class', 'Student name is peter and Age is 18', 'Employee id is 101 and Age is 32']",[],[]
56,['Dart Isolates'],"['Dart allows us to asynchronous programming which runs our program without getting blocked. The asynchronous programming is used to achieve concurrency. Dart isolate is a version of the thread. But there is key difference between the common implementation of ""Thread"" or ""Isolates"". The isolate works differently in comparison of Thread. The isolates are independent workers that do not share memory, but instead interconnect by passing message over channels. Since isolates completes its task by passing message thus it need a way to serialize a message.']","['https://www.javatpoint.com/dart-async', 'https://www.javatpoint.com/dart-callable-classes', 'https://www.javatpoint.com/dart-async', 'https://www.javatpoint.com/dart-callable-classes', 'https://www.javatpoint.com/dart-async']",[],[],['Create and Start an Isolate'],"['Example -', 'Explanation:', 'Example - 2', 'Explanation:', 'Stop an Isolate', 'Explanation:', 'Complete Program']",['Note - We can also pass NULL value if there is no object to pass in spawned function.'],"[""Let's understand the following example -"", 'In the above program, the spawn method of the isolate class executed a function sayhii in parallel of remaining code. It takes two parameters.', ""Let's understand the another example -"", 'The dart: isolates package provides the kill() method which is used to stop a running isolate.', ""Let's understand the following example.""]","['The communication between the isolates is done by the message passing as a client and server. It helps the program to take advantage of multicore microprocessor out of the box.', 'Dart provides the dart:isolate package to apply the isolate in our program. It provides the solution to taking single-threaded Dart code and allowing application to make greater use of the hardware available.', ""Dart provides the spawn() method to create an isolate. It must be declared with an 'entry point' with a single parameter. This parameter displays a port which isolate use to refer back notification message."", 'We have two functions sayhii() and main() function might not run in the same order each time. If you run the above program, then the output will be different each time as we can see in second output.', 'The runTimer() method begins a timer that fires every second in order to update a counter. It sends a notification message via the port which it received when the isolate was spawned.', 'In the above example, we have declared a stop() method that will destroy the running isolate and sets its reference to null. We defined the priority of isolate: immediate that will terminate the isolate as soon as.']","['In the above code, we created an asynchronous method start() which creates a port and spawn an isolate. We signified the start method as async because of wan can await the response from the spawning of the isolates and to store a reference to the new isolate. It is essential when we want to kill the running isolates. We passed the two parameters in the spawn() method, the first parameter runTimer method, that is a callback function to execute runTimer() and second parameter sendPort which is a callback function and it will used to send message back to the caller. The start() method starts listening the receiverPort for message from isolate. Once it will receive the message then it will print as a console output.']","[""import 'dart:isolate';"", 'void sayhii(var msg){', ""print('execution from sayhii ... the message is :${msg}');"", 'void main(){', ""Isolate.spawn(sayhii,'Hello!!');"", ""Isolate.spawn(sayhii,'Whats up!!');"", ""Isolate.spawn(sayhii,'Welcome!!');"", ""print('execution from main1');"", ""print('execution from main2');"", ""print('execution from main3');"", 'void start() async {', 'ReceivePort  receiverPort = ReceiverPort();   // Port for isolate to receive message.', 'isolate = await Isolate.spawn(runTimer, receiverPort.sendPort);', 'receivePort.listen((data){', ""stdout.write('Receiving: '+ data + ', ');"", '});', 'void runTimer(SendPort, sendPort) {', 'int coun = 0;', 'Timer.periodic(new Duration(seconds: 1), (Timer t) {', 'count++;', ""String msg = 'notification ' + count.toString();"", ""stdout.write('Sending: ' + msg + ' -');"", 'sendPort.send(msg);', 'void stop() {', 'If (isolate != null) {', ""stdout.writeln('Stopping Isolate');"", 'isolate.kill(priority: Isolate.immediate);', 'isolate = null;', '}', ""import 'dart:io';"", ""import 'dart:async';"", ""import 'dart:isolate';"", 'Isolate isolate;', 'void start() async {', 'ReceivePort  receiverPort = ReceiverPort();   // Port for isolate to receive message.', 'isolate = await Isolate.spawn(runTimer, receiverPort.sendPort);', 'receivePort.listen((data){', ""stdout.write('Receiving: '+ data + ', ');"", '});', 'void runTimer(SendPort, sendPort) {', 'int coun = 0;', 'Timer.periodic(new Duration(seconds: 1), (Timer t) {', 'count++;', ""String msg = 'notification ' + count.toString();"", ""stdout.write('Sending: ' + msg + ' -');"", 'sendPort.send(msg);', 'void stop() {', 'if (isolate != null) {', ""stdout.writeln('Stopping Isolate.....');"", 'isolate.kill(priority:Isolate.immediate);', 'isolate = null;', 'void main() async {', ""stdout.writeln('Starting Isolate...');"", 'await start();', ""std.writeln('Hit enter key to quit');"", 'await stdin.first;', 'stop();', ""stdout.writeln('Bye!');"", 'exit(0);']","['execution from main1', 'execution from main2', 'execution from main3', 'execution from sayhii ... the message is :Whats up!!', 'execution from sayhii ... the message is :Hello!!', 'execution from main1', 'execution from main2', 'execution from main3', 'execution from sayhii ... the message is :Hello!!', 'execution from sayhii ... the message is :Welcome!!', 'Stating Isolate', 'Hit enter key to quit', 'Sending: notification 1 - Receiving: notification 1, Sending: notification 2 - Receiving: notification 2,', 'Stopping Isolate']",[],['|||The function that we want to spawned and the string that will be passed to the spawned function.|||']
57,['Dart Async'],"[""Dart Async is related to asynchronous programming. It executes the asynchronous operation in a thread. It ensures that the critical functions to be executed until completion. The asynchronous operation is executed, separately the main application thread. In Dart, one operation cannot interrupt the other operation; it means one operation can execute at a time no other part of the program can avert it. Let's understand the following example - ""]","['https://www.javatpoint.com/dart-concurrency', 'https://www.javatpoint.com/dart-isolates', 'https://www.javatpoint.com/dart-concurrency', 'https://www.javatpoint.com/dart-isolates', 'https://www.javatpoint.com/dart-concurrency']",[],[],"['Difference between Asynchronous and Synchronous', 'Dart Future', 'Dart async and await', 'Dart await Keyword']","['Example -', 'Explanation:', 'Example -', 'Syntax:', 'Syntax:', 'Example - 1', 'Explanation:']",['Note - The caller function and called function must use the async keyword to use await.'],"['The stdin.readLineSync () executes nothing until it gets the input from the user. It waits for the user input for further execution.', ""Let's understand the difference between synchronous and asynchronous."", 'The web server should accept the request from the other user before executing the previous requests.', 'Consider the following code.', ""Let's understand the following example -""]","[""In the above code, we used the readLineSync(), which is synchronous method. It means; the execution of all instructions that follow the readLineSync() method call will be blocked until the readLineSync() method doesn't complete its execution."", ""This is the main problem of the synchronous approach. A part of the program may require executing before the current part, but the synchronous approach doesn't allow it."", 'This is not suitable for the webservers, where request must be independent of the others. It means, the webserver does not wait to finish the execution of the current request, it responds to the request from the other users.', 'This approach is called asynchronous programming. The asynchronous programming generally focuses on no waiting or non-blocking programming model. The dart: async is facilitated to implement the asynchronous programming block in a Dart script.', 'We create a file with the few names and save this file as names.txt and write a program to read this file without delaying the other part of the code.', 'The async and await keywords are allowed to implement asynchronous programming without using the Future API. The async keyword is necessary to run function asynchronously; we need to add async after the function name. The syntax is given below:', 'Here, e is an asynchronous expression, and it is expected to evaluate to a Future. The await expression evaluates e, and then suspends the currently running function until the result is ready.', 'Here, we have declared the main() function asynchronous using the async keyword because we call the hii() method asynchronously. Then, we used await modifier to call hii() that executed asynchronously.']","['In computer science, if we say a particular program is synchronous, that means it waits for an event to execute further. This approach is driven with a demerit, if a part of the code takes much time to execute, the succeeding blocks through an unrelated block will be blocked from executing.', 'The Dart Future is defined as getting a result sometime in the future. The Future object uses to facilitate asynchronous programming. Future objects are a tool to denote values returned by an expression whose execution will complete at a later point in time (In Future). In order to work with the future, we can use either async and await or the Future API.', 'When an async function is invoked, the Future object instantly returns and that indicates the async function will execute later. Once the body of the async function is executed, the function call returned the Future object. The function call will be completed with its result.', 'The await keyword is also used to execute function asynchronously. It suspends the currently running function until the result is ready. When it returns the result, then it continues on to the next line of code. The await keyword can only be used with async functions. The syntax is given below.']","[""import 'dart:io';"", 'void main() {', 'print(""Enter your favorite car :"");', 'String car = stdin.readLineSync();', 'print(""The car is  ${car}"");', 'print(""End of main"");', '1, Peter', '2, John', '4, Johnson', 'import ""dart:async"";', 'import ""dart:io"";', 'void main(){', 'File file1 = new File(""C:\\Users\\DEVANSH SHARMA\\Desktop\\contact.txt"");', 'Future<String> fs = file1.readAsString();', 'fs.then((data)=>print(data));', 'print(""End of main"");', 'func_name() async {', 'await e;', 'void hii() async {', 'print(""Hii Javatpoint"");', 'void main() async {', 'await hii();            // Using await keyword', 'print(""Task Complete"");']","['Enter your favorite car :', 'Renault Duster', 'The car is Renault Duster', 'End of main', 'End of main', '1, Peter', '2, John', '3, Tom', '4,  Johnson', 'Hii JavaTpoint', 'Task Complete']",[],[]
58,['What is Concurrency?'],['The Dart concurrency allows us to run multiple programs or multiple parts of a program simultaneously. It executes the several instructions at the same time. Dart provides the Isolates as a tool for doing works for parallel. The concurrency makes the program highly effective and throughput by utilizing the unused capabilities of essential operating system and machine hardware.'],"['https://www.javatpoint.com/dart-unit-testing', 'https://www.javatpoint.com/dart-async', 'https://www.javatpoint.com/dart-unit-testing', 'https://www.javatpoint.com/dart-async', 'https://www.javatpoint.com/dart-unit-testing']",[],[],['How to achieve concurrency?'],['Example -'],[],"[""Let's understand the following example -"", 'The concept of the above code is similar to the dart isolates. If we run the above program multiple times, then output will be varied every time.']","['The communication between the isolates is done by the message passing as a client and server. It helps the program to take advantage of multicore microprocessor out of the box.', 'Dart provides the dart:isolate package to apply the isolate in our program. It provides the solution to taking single-threaded Dart code and allowing application to make greater use of the hardware available.']","['In Dart, we can achieve concurrency by using the Isolates. We have discussed Dart isolates in previous tutorial. Here we will understand the brief introduction of it. Dart isolate is a version of the thread. But there is key difference between the common implementation of ""Thread"" or ""Isolates"". The isolate works differently in comparison of Thread. The isolates are independent workers that do not share memory, but instead interconnect by passing message over channels. Since isolates completes its task by passing message thus it need a way to serialize a message.']","[""import 'dart:isolate';"", 'void sayhii(var msg){', ""print('execution from sayhii ... the message is :${msg}');"", 'void main(){', ""Isolate.spawn(sayhii,'Hello!!');"", ""Isolate.spawn(sayhii,'Whats up!!');"", ""Isolate.spawn(sayhii,'Welcome!!');"", ""print('execution from main1');"", ""print('execution from main2');"", ""print('execution from main3');""]","['execution from main1', 'execution from main2', 'execution from main3', 'execution from sayhii ... the message is :Whats up!!', 'execution from sayhii ... the message is :Hello!!', 'execution from main1', 'execution from main2', 'execution from main3', 'execution from sayhii ... the message is :Hello!!', 'execution from sayhii ... the message is :Welcome!!']",[],[]
59,['What is Unit Testing?'],"['Unit testing is a part of the software development process where particular unit/components of an application are tested. Unit testing of each component is necessary to enhance the application performance. We can say that a unit is the smallest testable chunk of a program that can be logically isolated in a system. In various programming languages, the individual program, a subroutine, a function, a method, or a class can be represented as a Unit. There can be many individual units within the module. In object-oriented programming, the method that belongs to base class/superclass, an abstract class can be represented as smaller units. Below image displays the type of testing.']","['https://www.javatpoint.com/dart-html-dom', 'https://www.javatpoint.com/dart-concurrency', 'https://www.javatpoint.com/dart-html-dom', 'https://www.javatpoint.com/dart-concurrency', 'https://www.javatpoint.com/dart-html-dom']","['https://static.javatpoint.com/tutorial/dart/images/dart-unit-testing.jpg', 'https://static.javatpoint.com/tutorial/dart/images/dart-unit-testing2.jpg']",[],"['Unit Testing Task', 'Advantage of Unit Testing', 'Dart Unit Testing', 'Group of Test Cases', 'Grouping Test Cases']","['Syntax:', 'Example - 1(Passing Test)', 'Example - 2 A unsuccessful Test', 'Example -']",[],"['The unit testing task is given below.', 'Few advantages of unit testing are given below.', 'Step - 1: Installing ""test"" package', 'Now, right-click on pubspec.yaml file and click on Pub: get dependencies. This will install the ""test"" package in our project.', 'We can also install it by using the following command.', 'Step - 2: Importing ""test"" package', 'Type the following line to import the ""test"" package in your project.', 'Step - 3: Writing Test Cases', 'The syntax is given below.', 'Step - 1: We import the test package.', 'Step -2: We define the test using the test() function and it uses the expert() function to impose an assertion.', ""We define the sub() method which has a logical mistake. Let's have a following example."", 'In the above example, the add() function is tested successfully but the sub() function failed the unit test due to logical error.', ""Let's understand the following example -""]","['In Dart, we required to include an external library named ""test"", which facilitates a standard way of writing and running individual unit test. Unit testing can be achieved using the following steps.', 'To include the unit testing in our project, we must install a third-party packages ""test"" in our current working project. Let\'s open the pubspec.yaml in the our project and type the following statement.', 'The top-level test() function is added by the Test cases. In the test() function, we make the test assertion using the expect() function. The expert() function takes two arguments actualValue and MatchValue.', ""We can create a group of multiple test cases using the group() function. It helps grouping of test cases based on some criteria. The description of each group is specified in the beginning of its test's description."", 'Here is the example where we define an add() method for unit test. It accepts two parameters as an integer values and returns an integer representing the sum. To test the add() method, understand the following example -', 'We can write the multiple test cases in the form of group. The group() is used to grouped together these methods. It helps to write much cleaner code.', 'In the following example, we are writing a test case for the split() function and the trim() function. We grouped together these function and name it String.']",[],"['dependencies:', 'pub get', 'import ""package:test/test.dart"";', 'test(""Test Description"", () {', 'expert(actualValue, matchingValue)', 'group(""Test_Group_Name"", () {', 'test(""test_case_name_1"", () {', 'expect(actual, equals(exptected));', '});', 'test(""test_case_name_2"", () {', 'expect(actual, equals(expected));', '});', ""import 'package:test/test.dart';"", 'int add(int x,int y)', 'return x+y;', 'void main() {', 'test(""test to check add method"",(){', 'var expected = 30;', 'var actual = add(10,20);', 'expect(actual,expected);', '});', ""import 'package:test/test.dart';"", 'int add(int x,int y){', 'return x+y;', 'int sub(int x,int y){', 'return x-y-1;', 'void main(){', ""test('test to check sub',(){"", 'var expected = 10;', 'var actual = sub(30,20);', 'expect(actual,expected);', '});', 'test(""test to check add method"",(){', 'var expected = 30;', 'var actual = add(10,20);', 'expect(actual,expected);', '});', 'import ""package:test/test.dart"";', 'void main() {', 'group(""String"", () {', 'test(""testing on split() method of string class"", () {', 'var string = ""Hii,Hello,Hey"";', 'expect(string.split("",""), equals([""Hii"", ""Hello"", ""Hey""]));', '});', 'test(""testing on trim() method of string class"", () {', 'var string = ""  Hii "";', 'expect(string.trim(), equals(""Hii""));', '});', '});']","['00:00 +0: test to check add method', '00:00 +1: All tests passed!', '00:00 +0: test to check sub', '00:00 +0 -1: test to check sub', 'Expected: <10>', 'Actual: <9>', 'package:test  expect', 'bin\\Test123.dart 18:5  main.<fn>', '', '00:00 +0 -1: test to check add method', '00:00 +1 -1: Some tests failed.', 'Unhandled exception:', 'Dummy exception to set exit code.', '#0  _rootHandleUncaughtError.<anonymous closure> (dart:async/zone.dart:938)', '#1  _microtaskLoop (dart:async/schedule_microtask.dart:41)', '#2  _startMicrotaskLoop (dart:async/schedule_microtask.dart:50)', '#3  _Timer._runTimers (dart:isolate-patch/timer_impl.dart:394)', '#4  _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:414)', '#5  _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:148)', '00:00 +0: String testing on split() method of string class', '00:00 +1: String testing on trim() method of string class', '00:00 +2: All tests passed']",[],"['|||Unit Test Plan|||Prepare|||Review|||Rework|||Baseline|||Unit Test Cases/Scripts|||Prepare|||Review|||Rework|||Baseline|||Unit Test|||Perform|||&&&|||We can maintain code easily|||It makes code more reusable.|||It makes development faster.|||The code can be easily debugged.|||It detects the cost of testing and fixing defects, because any error is captured in the early stage.|||']"
60,['Dart HTML DOM'],['Every webpage can be considered as object and it exists inside a browser window. We can access the webpage using the web browser and it needed connected to the internet. The DOM is the acronyms of Document object model. A Document object denotes the HTML document that is displayed in that window. The document object model consists of several properties that refer to the other objects which give the facility to modify the document content.'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/dart-unit-testing', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/dart-unit-testing', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/tutorial/dart/images/dart-html-dom.jpg'],[],"['Finding DOM Elements', 'Event Handling']","['Example -', 'Main.dart']",[],"['Below is the hierarchy of the few important DOM objects.', ""Let's understand the DOM operation in the following section."", ""The querySelector() function returns the first element that matches the specified group of the selector. Let's understand the."", 'following syntax.', ""Let's understand the following example."", 'We create a HTML file name index.html and also create a dart file.', 'The dart:html library provides the onClick event for DOM Elements. The syntax shows how an element could handle a stream of click events.', 'Let us now take an example to understand the concept of Event Handling in Dart.', 'TestEvent.html', 'TestEvent.dart']","['The process that a content of document is accessed is called the Document Object Model, or DOM. The Objects are organized in a hierarchy. The hierarchical structure uses to the organization of objects in a web document.', 'We can manipulate the objects and element in the DOM by using the dart:html library. Console-based application cannot use the dart:html library. In work with the HTML library in the web application, we need to import the dart:html.', 'A document can contain many attributes sometime we need to search particular attribute. The dart:html library provides the querySelector function to search element in the DOM.', 'The querySelector() function returns the element from the given DOM and onClick.listen() will take an eventHandler method which will be invoked when a click event is raised. The syntax of eventHandler is given below ?']",[],"[""import 'dart.html';"", 'Element querySelector(String selector);', ""var element1 = document.querySelector('.className');"", ""var element2 = document.querySelector('#id');"", '<!DOCTYPE html>', '<html>', '<head>', '<meta charset = ""utf-8"">', '<meta http-equiv = ""X-UA-Compatible"" content = ""IE = edge"">', '<meta name = ""viewport"" content = ""width = device-width, initial-scale = 1.0"">', '<meta name = ""scaffolded-by"" content = ""https://github.com/google/stagehand"">', '<title>DemoWebApp</title>', '<link rel = ""stylesheet"" href = ""styles.css"">', '<script defer src = ""main.dart"" type = ""application/dart""></script>', '<script defer src = ""packages/browser/dart.js""></script>', '</head>', '<body>', '<h1>', '<div id = ""output""></div>', '</h1>', '</body>', '</html>', ""import 'dart:html';"", 'void main() {', ""querySelector('#output').text = 'Your Dart web dom app is running!!!.';"", ""querySelector('#Id').onClick.listen(eventHanlderFunction);"", 'void eventHanlderFunction (MouseEvent event){ }', '<!DOCTYPE html>', '<html>', '<head>', '<meta charset = ""utf-8"">', '<meta http-equiv = ""X-UA-Compatible"" content = ""IE = edge"">', '<meta name = ""viewport"" content = ""width = device-width, initial-scale = 1.0"">', '<meta name = ""scaffolded-by"" content =""https://github.com/google/stagehand"">', '<title>DemoWebApp</title>', '<link rel = ""stylesheet"" href = ""styles.css"">', '<script defer src = ""TestEvent.dart"" type=""application/dart""></script>', '<script defer src = ""packages/browser/dart.js""></script>', '</head>', '<body>', '<div id = ""output""></div>', '<h1>', '<div>', 'Enter you name : <input type = ""text"" id = ""txtName"">', '<input type = ""button"" id = ""btnWish"" value=""Wish"">', '</div>', '</h1>', '<h2 id = ""display""></h2>', ""import 'dart:html';"", 'void main() {', ""querySelector('#btnWish').onClick.listen(wishHandler);"", 'void wishHandler(MouseEvent event){', ""String name = (querySelector('#txtName')  as InputElement).value;"", ""querySelector('#display').text = 'Hello Mr.'+ name;""]",[],[],"['|||Window - It is the first in the hierarchy. It the outmost element of the object hierarchy.|||Document - When a HTML document loads into a window that it becomes a window object. The document includes the contents of the page.|||Elements - It denotes the content on the webpage. For example - Title, text box etc.|||Nodes - These are often elements, but they also be attributes, comments, text and other DOM types.|||']"
