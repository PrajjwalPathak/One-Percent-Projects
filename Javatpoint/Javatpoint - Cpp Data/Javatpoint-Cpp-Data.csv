,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['C++ Tutorial'],['C++ tutorial provides basic and advanced concepts of C++. Our C++ tutorial is designed for beginners and professionals.'],"['https://www.javatpoint.com/c-vs-cpp', 'https://www.javatpoint.com/https://training.javatpoint.com/c-cpp-training.jsp', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/cpp-inheritance', 'https://www.javatpoint.com/cpp-constructor', 'https://www.javatpoint.com/cpp-oops-concepts', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/what-is-cpp', 'https://www.javatpoint.com/c-vs-cpp', 'https://www.javatpoint.com/cpp-history', 'https://www.javatpoint.com/cpp-features', 'https://www.javatpoint.com/cpp-installation', 'https://www.javatpoint.com/cpp-program', 'https://www.javatpoint.com/cpp-basic-input-output', 'https://www.javatpoint.com/cpp-variable', 'https://www.javatpoint.com/cpp-data-types', 'https://www.javatpoint.com/cpp-keywords', 'https://www.javatpoint.com/cpp-operators', 'https://www.javatpoint.com/cpp-if-else', 'https://www.javatpoint.com/cpp-switch', 'https://www.javatpoint.com/cpp-for-loop', 'https://www.javatpoint.com/cpp-while-loop', 'https://www.javatpoint.com/cpp-do-while-loop', 'https://www.javatpoint.com/cpp-break-statement', 'https://www.javatpoint.com/cpp-continue-statement', 'https://www.javatpoint.com/cpp-goto-statement', 'https://www.javatpoint.com/cpp-comments', 'https://www.javatpoint.com/cpp-functions', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-cpp', 'https://www.javatpoint.com/cpp-recursion', 'https://www.javatpoint.com/cpp-storage-classes', 'https://www.javatpoint.com/cpp-arrays', 'https://www.javatpoint.com/cpp-passing-array-to-function', 'https://www.javatpoint.com/cpp-multidimensional-array', 'https://www.javatpoint.com/cpp-pointers', 'https://www.javatpoint.com/cpp-oops-concepts', 'https://www.javatpoint.com/cpp-object-and-class', 'https://www.javatpoint.com/cpp-constructor', 'https://www.javatpoint.com/cpp-destructor', 'https://www.javatpoint.com/cpp-this-pointer', 'https://www.javatpoint.com/cpp-static', 'https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-enumeration', 'https://www.javatpoint.com/cpp-friend-function', 'https://www.javatpoint.com/cpp-inheritance', 'https://www.javatpoint.com/cpp-aggregation', 'https://www.javatpoint.com/cpp-polymorphism', 'https://www.javatpoint.com/cpp-overloading', 'https://www.javatpoint.com/cpp-function-overriding', 'https://www.javatpoint.com/cpp-virtual-function', 'https://www.javatpoint.com/interfaces-in-cpp', 'https://www.javatpoint.com/data-abstraction-in-cpp', 'https://www.javatpoint.com/cpp-namespaces', 'https://www.javatpoint.com/cpp-templates', 'https://www.javatpoint.com/cpp-strings', 'https://www.javatpoint.com/cpp-exception-handling', 'https://www.javatpoint.com/cpp-try-catch', 'https://www.javatpoint.com/cpp-user-defined-exceptions', 'https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/cpp-programs', 'https://www.javatpoint.com/fibonacci-series-in-cpp', 'https://www.javatpoint.com/prime-number-program-in-cpp', 'https://www.javatpoint.com/palindrome-program-in-cpp', 'https://www.javatpoint.com/factorial-program-in-cpp', 'https://www.javatpoint.com/armstrong-number-in-cpp', 'https://www.javatpoint.com/sum-of-digits-program-in-cpp', 'https://www.javatpoint.com/cpp-program-to-reverse-number', 'https://www.javatpoint.com/cpp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/matrix-multiplication-in-cpp', 'https://www.javatpoint.com/cpp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/cpp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/cpp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/cpp-program-to-print-number-triangle', 'https://www.javatpoint.com/cpp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/cpp-algorithm', 'https://www.javatpoint.com/cpp-algorithm-adjacent_find-function', 'https://www.javatpoint.com/cpp-algorithm-any_of-function', 'https://www.javatpoint.com/cpp-algorithm-copy-function', 'https://www.javatpoint.com/cpp-algorithm-copy_if-function', 'https://www.javatpoint.com/cpp-algorithm-count-function', 'https://www.javatpoint.com/cpp-algorithm-count_if-function', 'https://www.javatpoint.com/cpp-algorithm-equal-function', 'https://www.javatpoint.com/cpp-algorithm-find-function', 'https://www.javatpoint.com/cpp-algorithm-find_end-function', 'https://www.javatpoint.com/cpp-algorithm-find_first_of-function', 'https://www.javatpoint.com/cpp-algorithm-find_if-function', 'https://www.javatpoint.com/cpp-algorithm-find_if_not-function', 'https://www.javatpoint.com/cpp-algorithm-for_each-function', 'https://www.javatpoint.com/cpp-algorithm-move-function', 'https://www.javatpoint.com/cpp-algorithm-all_of-function', 'https://www.javatpoint.com/cpp-algorithm-copy_backward-function', 'https://www.javatpoint.com/cpp-algorithm-copy_n-function', 'https://www.javatpoint.com/cpp-algorithm-search-function', 'https://www.javatpoint.com/cpp-algorithm-is_permutation-function', 'https://www.javatpoint.com/cpp-algorithm-mismatch-function', 'https://www.javatpoint.com/cpp-algorithm-move_backward-function', 'https://www.javatpoint.com/cpp-algorithm-none_of-function', 'https://www.javatpoint.com/cpp-algorithm-search_n-function', 'https://www.javatpoint.com/cpp-algorithm-swap-function', 'https://www.javatpoint.com/cpp-algorithm-fill-function', 'https://www.javatpoint.com/cpp-algorithm-iter_swap-function', 'https://www.javatpoint.com/cpp-algorithm-replace_copy_if-function', 'https://www.javatpoint.com/cpp-algorithm-replace_copy-function', 'https://www.javatpoint.com/cpp-algorithm-replace_if-function', 'https://www.javatpoint.com/cpp-algorithm-replace-function', 'https://www.javatpoint.com/cpp-algorithm-swap_ranges-function', 'https://www.javatpoint.com/cpp-algorithm-transform-function', 'https://www.javatpoint.com/cpp-algorithm-fill_n-function', 'https://www.javatpoint.com/cpp-algorithm-generate_n-function', 'https://www.javatpoint.com/cpp-algorithm-generate-function', 'https://www.javatpoint.com/cpp-algorithm-remove-function', 'https://www.javatpoint.com/cpp-algorithm-is_partitioned-function', 'https://www.javatpoint.com/cpp-algorithm-random_shuffle-function', 'https://www.javatpoint.com/cpp-algorithm-remove_copy_if-function', 'https://www.javatpoint.com/cpp-algorithm-remove_copy-function', 'https://www.javatpoint.com/cpp-algorithm-partition_copy-function', 'https://www.javatpoint.com/cpp-algorithm-partition_point-function', 'https://www.javatpoint.com/cpp-algorithm-partition-function', 'https://www.javatpoint.com/cpp-algorithm-remove_if-function', 'https://www.javatpoint.com/cpp-algorithm-reverse_copy-function', 'https://www.javatpoint.com/cpp-algorithm-reverse-function', 'https://www.javatpoint.com/cpp-algorithm-rotate_copy-function', 'https://www.javatpoint.com/cpp-algorithm-rotate-function', 'https://www.javatpoint.com/cpp-algorithm-shuffle-function', 'https://www.javatpoint.com/cpp-algorithm-stable_partition-function', 'https://www.javatpoint.com/cpp-algorithm-unique_copy-function', 'https://www.javatpoint.com/cpp-algorithm-unique-function', 'https://www.javatpoint.com/cpp-algorithm-is_sorted_until-function', 'https://www.javatpoint.com/cpp-algorithm-is_sorted-function', 'https://www.javatpoint.com/cpp-algorithm-lower_bound-function', 'https://www.javatpoint.com/cpp-algorithm-nth_element-function', 'https://www.javatpoint.com/cpp-algorithm-partial_sort_copy-function', 'https://www.javatpoint.com/cpp-algorithm-partial_sort-function', 'https://www.javatpoint.com/cpp-algorithm-sort-function', 'https://www.javatpoint.com/cpp-algorithm-stable_sort-function', 'https://www.javatpoint.com/cpp-algorithm-binary_search-function', 'https://www.javatpoint.com/cpp-algorithm-equal_range-function', 'https://www.javatpoint.com/cpp-algorithm-includes-function', 'https://www.javatpoint.com/cpp-algorithm-inplace_merge-function', 'https://www.javatpoint.com/cpp-algorithm-merge-function', 'https://www.javatpoint.com/cpp-algorithm-set_union-function', 'https://www.javatpoint.com/cpp-algorithm-upper_bound-function', 'https://www.javatpoint.com/post/cpp-bitset', 'https://www.javatpoint.com/post/cpp-bitset-all-function', 'https://www.javatpoint.com/post/cpp-bitset-any-function', 'https://www.javatpoint.com/post/cpp-bitset-count-function', 'https://www.javatpoint.com/post/cpp-bitset-flip-function', 'https://www.javatpoint.com/post/cpp-bitset-none-function', 'https://www.javatpoint.com/post/cpp-bitset-operator[]-function', 'https://www.javatpoint.com/post/cpp-bitset-reset-function', 'https://www.javatpoint.com/post/cpp-bitset-set-function', 'https://www.javatpoint.com/post/cpp-bitset-size-function', 'https://www.javatpoint.com/post/cpp-bitset-test-function', 'https://www.javatpoint.com/post/cpp-bitset-to_string-function', 'https://www.javatpoint.com/post/cpp-bitset-to_ullong-function', 'https://www.javatpoint.com/post/cpp-bitset-to_ulong-function', 'https://www.javatpoint.com/post/cpp-deque', 'https://www.javatpoint.com/post/cpp-deque-assign-function', 'https://www.javatpoint.com/post/cpp-deque-emplace-function', 'https://www.javatpoint.com/post/cpp-deque-emplace_back-function', 'https://www.javatpoint.com/post/cpp-deque-emplace_front-function', 'https://www.javatpoint.com/post/cpp-deque-insert-function', 'https://www.javatpoint.com/post/cpp-deque-push_back-function', 'https://www.javatpoint.com/post/cpp-deque-push_front-function', 'https://www.javatpoint.com/post/cpp-deque-pop_back-function', 'https://www.javatpoint.com/post/cpp-deque-pop_front-function', 'https://www.javatpoint.com/post/cpp-deque-swap-function', 'https://www.javatpoint.com/post/cpp-deque-clear-function', 'https://www.javatpoint.com/post/cpp-deque-empty-function', 'https://www.javatpoint.com/post/cpp-deque-erase-function', 'https://www.javatpoint.com/post/cpp-deque-max_size-function', 'https://www.javatpoint.com/post/cpp-deque-resize-function', 'https://www.javatpoint.com/post/cpp-deque-shrink_to_fit-function', 'https://www.javatpoint.com/post/cpp-deque-size-function', 'https://www.javatpoint.com/post/cpp-deque-at-function', 'https://www.javatpoint.com/post/cpp-deque-operator[]()-function', 'https://www.javatpoint.com/post/cpp-deque-operator=()-function', 'https://www.javatpoint.com/post/cpp-deque-back-function', 'https://www.javatpoint.com/post/cpp-deque-begin-function', 'https://www.javatpoint.com/post/cpp-deque-cbegin-function', 'https://www.javatpoint.com/post/cpp-deque-end-function', 'https://www.javatpoint.com/post/cpp-deque-cend-function', 'https://www.javatpoint.com/post/cpp-deque-rbegin-function', 'https://www.javatpoint.com/post/cpp-deque-crbegin-function', 'https://www.javatpoint.com/post/cpp-deque-rend-function', 'https://www.javatpoint.com/post/cpp-deque-crend-function', 'https://www.javatpoint.com/post/cpp-list', 'https://www.javatpoint.com/post/cpp-list-insert-function', 'https://www.javatpoint.com/post/cpp-list-push_back-function', 'https://www.javatpoint.com/post/cpp-list-push_front-function', 'https://www.javatpoint.com/post/cpp-list-pop_back-function', 'https://www.javatpoint.com/post/cpp-list-pop_front-function', 'https://www.javatpoint.com/post/cpp-list-empty-function', 'https://www.javatpoint.com/post/cpp-list-size-function', 'https://www.javatpoint.com/post/cpp-list-max_size-function', 'https://www.javatpoint.com/post/cpp-list-front-function', 'https://www.javatpoint.com/post/cpp-list-back-function', 'https://www.javatpoint.com/post/cpp-list-swap-function', 'https://www.javatpoint.com/post/cpp-list-reverse-function', 'https://www.javatpoint.com/post/cpp-list-sort-function', 'https://www.javatpoint.com/post/cpp-list-merge-function', 'https://www.javatpoint.com/post/cpp-list-splice-function', 'https://www.javatpoint.com/post/cpp-list-unique-function', 'https://www.javatpoint.com/post/cpp-list-resize-function', 'https://www.javatpoint.com/post/cpp-list-assign-function', 'https://www.javatpoint.com/post/cpp-list-emplace-function', 'https://www.javatpoint.com/post/cpp-list-emplace_back-function', 'https://www.javatpoint.com/post/cpp-list-emplace_front-function', 'https://www.javatpoint.com/post/cpp-map', 'https://www.javatpoint.com/post/cpp-map-at-function', 'https://www.javatpoint.com/post/cpp-map-begin-function', 'https://www.javatpoint.com/post/cpp-map-cbegin-function', 'https://www.javatpoint.com/post/cpp-map-cend-function', 'https://www.javatpoint.com/post/cpp-map-crbegin-function', 'https://www.javatpoint.com/post/cpp-map-crend-function', 'https://www.javatpoint.com/post/cpp-map-empty-function', 'https://www.javatpoint.com/post/cpp-map-end-function', 'https://www.javatpoint.com/post/cpp-map-max_size-function', 'https://www.javatpoint.com/post/cpp-map-operator[]-function', 'https://www.javatpoint.com/post/cpp-map-rbegin-function', 'https://www.javatpoint.com/post/cpp-map-rend-function', 'https://www.javatpoint.com/post/cpp-map-size-function', 'https://www.javatpoint.com/post/cpp-map-clear-function', 'https://www.javatpoint.com/post/cpp-map-emplace-function', 'https://www.javatpoint.com/post/cpp-map-emplace_hint-function', 'https://www.javatpoint.com/post/cpp-map-erase-function', 'https://www.javatpoint.com/post/cpp-map-find-function', 'https://www.javatpoint.com/post/cpp-map-insert-function', 'https://www.javatpoint.com/post/cpp-map-operator=()-function', 'https://www.javatpoint.com/post/cpp-map-swap-function', 'https://www.javatpoint.com/cpp-math-cos-function', 'https://www.javatpoint.com/cpp-math-sin-function', 'https://www.javatpoint.com/cpp-math-tan-function', 'https://www.javatpoint.com/cpp-math-acos-function', 'https://www.javatpoint.com/cpp-math-asin-function', 'https://www.javatpoint.com/cpp-math-atan-function', 'https://www.javatpoint.com/cpp-math-atan2-function', 'https://www.javatpoint.com/cpp-math-cosh-function', 'https://www.javatpoint.com/cpp-math-sinh-function', 'https://www.javatpoint.com/cpp-math-tanh-function', 'https://www.javatpoint.com/cpp-math-acosh-function', 'https://www.javatpoint.com/cpp-math-asinh-function', 'https://www.javatpoint.com/cpp-math-atanh-function', 'https://www.javatpoint.com/cpp-math-exp-function', 'https://www.javatpoint.com/cpp-math-frexp-function', 'https://www.javatpoint.com/cpp-math-idexp-function', 'https://www.javatpoint.com/cpp-math-log-function', 'https://www.javatpoint.com/cpp-math-log10-function', 'https://www.javatpoint.com/cpp-math-modf-function', 'https://www.javatpoint.com/cpp-math-exp2-function', 'https://www.javatpoint.com/cpp-math-expm1-function', 'https://www.javatpoint.com/cpp-math-log1p-function', 'https://www.javatpoint.com/cpp-math-log2-function', 'https://www.javatpoint.com/cpp-math-logb-function', 'https://www.javatpoint.com/cpp-math-scalbn-function', 'https://www.javatpoint.com/cpp-math-scalbln-function', 'https://www.javatpoint.com/cpp-math-ilogb-function', 'https://www.javatpoint.com/cpp-math-copysign-function', 'https://www.javatpoint.com/cpp-math-nextafter-function', 'https://www.javatpoint.com/cpp-math-nexttoward-function', 'https://www.javatpoint.com/cpp-math-fdim-function', 'https://www.javatpoint.com/cpp-math-fmax-function', 'https://www.javatpoint.com/cpp-math-fmin-function', 'https://www.javatpoint.com/cpp-math-pow-function', 'https://www.javatpoint.com/cpp-math-sqrt-function', 'https://www.javatpoint.com/cpp-math-cbrt-function', 'https://www.javatpoint.com/cpp-math-hypot-function', 'https://www.javatpoint.com/cpp-math-ceil-function', 'https://www.javatpoint.com/cpp-math-floor-function', 'https://www.javatpoint.com/cpp-math-round-function', 'https://www.javatpoint.com/cpp-math-lround-function', 'https://www.javatpoint.com/cpp-math-llround-function', 'https://www.javatpoint.com/cpp-math-fmod-function', 'https://www.javatpoint.com/cpp-math-trunc-function', 'https://www.javatpoint.com/cpp-math-rint-function', 'https://www.javatpoint.com/cpp-math-lrint-function', 'https://www.javatpoint.com/cpp-math-llrint-function', 'https://www.javatpoint.com/cpp-math-nearbyint-function', 'https://www.javatpoint.com/cpp-math-remainder-function', 'https://www.javatpoint.com/cpp-math-remquo-function', 'https://www.javatpoint.com/cpp-math-fabs-function', 'https://www.javatpoint.com/cpp-math-abs-function', 'https://www.javatpoint.com/cpp-math-fma-function', 'https://www.javatpoint.com/cpp-math-fpclassify-function', 'https://www.javatpoint.com/cpp-math-isfinite-function', 'https://www.javatpoint.com/cpp-math-isinf-function', 'https://www.javatpoint.com/cpp-math-isnan-function', 'https://www.javatpoint.com/cpp-math-isnormal-function', 'https://www.javatpoint.com/cpp-math-signbit-function', 'https://www.javatpoint.com/cpp-math-isgreater-function', 'https://www.javatpoint.com/cpp-math-isgreaterequal-function', 'https://www.javatpoint.com/cpp-math-less-function', 'https://www.javatpoint.com/cpp-math-islessequal-function', 'https://www.javatpoint.com/cpp-math-islessgreater-function', 'https://www.javatpoint.com/cpp-math-isunordered-function', 'https://www.javatpoint.com/cpp-math-erf-function', 'https://www.javatpoint.com/cpp-math-erfc-function', 'https://www.javatpoint.com/cpp-math-tgamma-function', 'https://www.javatpoint.com/cpp-math-lgamma-function', 'https://www.javatpoint.com/post/cpp-priority_queue', 'https://www.javatpoint.com/post/cpp-priority_queue-emplace-function', 'https://www.javatpoint.com/post/cpp-priority_queue-empty-function', 'https://www.javatpoint.com/post/cpp-priority_queue-pop-function', 'https://www.javatpoint.com/post/cpp-prioriy_queue-push-function', 'https://www.javatpoint.com/post/cpp-priority_queue-size-function', 'https://www.javatpoint.com/post/cpp-priority_queue-swap-function', 'https://www.javatpoint.com/post/cpp-priority_queue-top-function', 'https://www.javatpoint.com/cpp-stack', 'https://www.javatpoint.com/cpp-stack-emplace-function', 'https://www.javatpoint.com/cpp-stack-empty-function', 'https://www.javatpoint.com/cpp-stack-pop-function', 'https://www.javatpoint.com/cpp-stack-push-function', 'https://www.javatpoint.com/cpp-stack-size-function', 'https://www.javatpoint.com/cpp-stack-top-function', 'https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue-back-function', 'https://www.javatpoint.com/cpp-queue-emplace-function', 'https://www.javatpoint.com/cpp-queue-empty-function', 'https://www.javatpoint.com/cpp-queue-front-function', 'https://www.javatpoint.com/cpp-queue-pop-function', 'https://www.javatpoint.com/cpp-queue-push-function', 'https://www.javatpoint.com/cpp-queue-size-function', 'https://www.javatpoint.com/cpp-multiset', 'https://www.javatpoint.com/cpp-multiset-constructor', 'https://www.javatpoint.com/cpp-multiset-destructor', 'https://www.javatpoint.com/cpp-multiset-begin-function', 'https://www.javatpoint.com/cpp-multiset-end-function', 'https://www.javatpoint.com/cpp-multiset-operator=-function', 'https://www.javatpoint.com/cpp-multiset-rbegin-function', 'https://www.javatpoint.com/cpp-multiset-rend-function', 'https://www.javatpoint.com/cpp-multiset-cbegin-function', 'https://www.javatpoint.com/cpp-multiset-cend-function', 'https://www.javatpoint.com/cpp-multiset-max_size-function', 'https://www.javatpoint.com/cpp-multiset-size-function', 'https://www.javatpoint.com/cpp-multiset-crbegin-function', 'https://www.javatpoint.com/cpp-multiset-crend-function', 'https://www.javatpoint.com/cpp-multiset-empty-function', 'https://www.javatpoint.com/cpp-multiset-insert-function', 'https://www.javatpoint.com/cpp-multiset-clear-function', 'https://www.javatpoint.com/cpp-multiset-emplace-function', 'https://www.javatpoint.com/cpp-multiset-erase-function', 'https://www.javatpoint.com/cpp-multiset-swap-function', 'https://www.javatpoint.com/cpp-multiset-emplace_hint-function', 'https://www.javatpoint.com/cpp-multiset-find-function', 'https://www.javatpoint.com/cpp-multiset-key_comp-function', 'https://www.javatpoint.com/cpp-multiset-value_comp-function', 'https://www.javatpoint.com/cpp-multiset-count-function', 'https://www.javatpoint.com/cpp-multiset-equal_range-function', 'https://www.javatpoint.com/cpp-multiset-lower_bound-function', 'https://www.javatpoint.com/cpp-multiset-upper_bound-function', 'https://www.javatpoint.com/cpp-multiset-get_allocator-function', 'https://www.javatpoint.com/cpp-multiset-non-member-operator==', 'https://www.javatpoint.com/cpp-multiset-non-member-operator!=', 'https://www.javatpoint.com/cpp-multiset-non-member-operator-less-than', 'https://www.javatpoint.com/cpp-multiset-non-member-operator-less-than=', 'https://www.javatpoint.com/cpp-multiset-non-member-operator-greater-than', 'https://www.javatpoint.com/cpp-multiset-non-member-operator-greater-than=', 'https://www.javatpoint.com/cpp-multiset-non-member-swap-function', 'https://www.javatpoint.com/post/cpp-multimap', 'https://www.javatpoint.com/post/cpp-multimap-crbegin-function', 'https://www.javatpoint.com/post/cpp-multimap-crend-function', 'https://www.javatpoint.com/post/cpp-multimap-begin-function', 'https://www.javatpoint.com/post/cpp-multimap-cbegin-function', 'https://www.javatpoint.com/post/cpp-multimap-cend-function', 'https://www.javatpoint.com/post/cpp-multimap-end-function', 'https://www.javatpoint.com/post/cpp-multimap-rbegin-function', 'https://www.javatpoint.com/post/cpp-multimap-rend-function', 'https://www.javatpoint.com/post/cpp-multimap-clear-function', 'https://www.javatpoint.com/post/cpp-multimap-emplace-function', 'https://www.javatpoint.com/post/cpp-multimap-empty-function', 'https://www.javatpoint.com/post/cpp-multimap-erase-function', 'https://www.javatpoint.com/post/cpp-multimap-insert-function', 'https://www.javatpoint.com/post/cpp-multimap-swap-function', 'https://www.javatpoint.com/post/cpp-multimap-equal_range-function', 'https://www.javatpoint.com/post/cpp-multimap-non-member-operator==-function', 'https://www.javatpoint.com/post/cpp-multimap-non-member-operator!=-function', 'https://www.javatpoint.com/post/cpp-multimap-non-member-operator<-function', 'https://www.javatpoint.com/post/cpp-multimap-non-member-operator<=-function', 'https://www.javatpoint.com/post/cpp-multimap-non-member-operator>-function', 'https://www.javatpoint.com/post/cpp-multimap-non-member-operator>=-function', 'https://www.javatpoint.com/post/cpp-multimap-non-member-swap-function', 'https://www.javatpoint.com/cpp-set', 'https://www.javatpoint.com/cpp-set-constructor', 'https://www.javatpoint.com/cpp-set-destructor', 'https://www.javatpoint.com/cpp-set-operator=()-function', 'https://www.javatpoint.com/cpp-set-begin-function', 'https://www.javatpoint.com/cpp-set-cbegin-function', 'https://www.javatpoint.com/cpp-set-end-function', 'https://www.javatpoint.com/cpp-set-cend-function', 'https://www.javatpoint.com/cpp-set-rbegin-function', 'https://www.javatpoint.com/cpp-set-rend-function', 'https://www.javatpoint.com/cpp-set-crbegin-function', 'https://www.javatpoint.com/cpp-set-crend-function', 'https://www.javatpoint.com/cpp-set-empty-function', 'https://www.javatpoint.com/cpp-set-size-function', 'https://www.javatpoint.com/cpp-set-max_size-function', 'https://www.javatpoint.com/cpp-set-insert-function', 'https://www.javatpoint.com/cpp-set-erase-function', 'https://www.javatpoint.com/cpp-set-swap-function', 'https://www.javatpoint.com/cpp-set-clear-function', 'https://www.javatpoint.com/cpp-set-emplace-function', 'https://www.javatpoint.com/cpp-set-emplace_hint-function', 'https://www.javatpoint.com/cpp-set-key_comp-function', 'https://www.javatpoint.com/cpp-set-value_comp-function', 'https://www.javatpoint.com/cpp-set-find-function', 'https://www.javatpoint.com/cpp-set-count-function', 'https://www.javatpoint.com/cpp-set-lower_bound-function', 'https://www.javatpoint.com/cpp-set-upper_bound-function', 'https://www.javatpoint.com/cpp-set-equal_range-function', 'https://www.javatpoint.com/cpp-set-get_allocator-function', 'https://www.javatpoint.com/cpp-set-non-member-operator==', 'https://www.javatpoint.com/cpp-set-non-member-operator!=', 'https://www.javatpoint.com/cpp-set-non-member-operator-less-than', 'https://www.javatpoint.com/cpp-set-non-member-operator-less-than=', 'https://www.javatpoint.com/cpp-set-non-member-operator-greater-than', 'https://www.javatpoint.com/cpp-set-non-member-operator-greater-than=', 'https://www.javatpoint.com/cpp-set-non-member-swap-function', 'https://www.javatpoint.com/cpp-string-compare-function', 'https://www.javatpoint.com/cpp-string-length-function', 'https://www.javatpoint.com/cpp-string-swap-function', 'https://www.javatpoint.com/cpp-string-size-function', 'https://www.javatpoint.com/cpp-string-resize-function', 'https://www.javatpoint.com/cpp-string-replace-function', 'https://www.javatpoint.com/cpp-string-append-function', 'https://www.javatpoint.com/cpp-string-at-function', 'https://www.javatpoint.com/cpp-string-find-function', 'https://www.javatpoint.com/cpp-string-find-first-of-function', 'https://www.javatpoint.com/cpp-string-find-first-not-of-function', 'https://www.javatpoint.com/cpp-string-find-last-of-function', 'https://www.javatpoint.com/cpp-string-find-last-not-of-function', 'https://www.javatpoint.com/cpp-string-insert-function', 'https://www.javatpoint.com/cpp-string-max-size-function', 'https://www.javatpoint.com/cpp-string-push-back-function', 'https://www.javatpoint.com/cpp-string-pop-back-function', 'https://www.javatpoint.com/cpp-string-assign-function', 'https://www.javatpoint.com/cpp-string-copy-function', 'https://www.javatpoint.com/cpp-string-back-function', 'https://www.javatpoint.com/cpp-string-begin-function', 'https://www.javatpoint.com/cpp-string-capacity-function', 'https://www.javatpoint.com/cpp-string-cbegin-function', 'https://www.javatpoint.com/cpp-string-cend-function', 'https://www.javatpoint.com/cpp-string-clear-function', 'https://www.javatpoint.com/cpp-string-crbegin-function', 'https://www.javatpoint.com/cpp-string-data-function', 'https://www.javatpoint.com/cpp-string-empty-function', 'https://www.javatpoint.com/cpp-string-erase-function', 'https://www.javatpoint.com/cpp-string-front-function', 'https://www.javatpoint.com/cpp-string-operator+=()-function', 'https://www.javatpoint.com/cpp-string-operator=()-function', 'https://www.javatpoint.com/cpp-string-operator[]()-function', 'https://www.javatpoint.com/cpp-string-rfind-function', 'https://www.javatpoint.com/cpp-string-end-function', 'https://www.javatpoint.com/cpp-string-rend-function', 'https://www.javatpoint.com/cpp-string-shrink-to-fit-function', 'https://www.javatpoint.com/cpp-string-c-str-function', 'https://www.javatpoint.com/cpp-string-crend-function', 'https://www.javatpoint.com/cpp-string-rbegin-function', 'https://www.javatpoint.com/cpp-string-reserve-function', 'https://www.javatpoint.com/cpp-vector', 'https://www.javatpoint.com/cpp-vector-at-function', 'https://www.javatpoint.com/cpp-vector-back-function', 'https://www.javatpoint.com/cpp-vector-front-function', 'https://www.javatpoint.com/cpp-vector-swap-function', 'https://www.javatpoint.com/cpp-vector-push-back-function', 'https://www.javatpoint.com/cpp-vector-pop-back-function', 'https://www.javatpoint.com/cpp-vector-empty-function', 'https://www.javatpoint.com/cpp-vector-insert-function', 'https://www.javatpoint.com/cpp-vector-erase-function', 'https://www.javatpoint.com/cpp-vector-resize-function', 'https://www.javatpoint.com/cpp-vector-clear-function', 'https://www.javatpoint.com/cpp-vector-size-function', 'https://www.javatpoint.com/cpp-vector-capacity-function', 'https://www.javatpoint.com/cpp-vector-assign-function', 'https://www.javatpoint.com/cpp-vector-operator=()-function', 'https://www.javatpoint.com/cpp-vector-operator[]()-function', 'https://www.javatpoint.com/cpp-vector-end-function', 'https://www.javatpoint.com/cpp-vector-emplace-function', 'https://www.javatpoint.com/cpp-vector-emplace-back-function', 'https://www.javatpoint.com/cpp-vector-rend-function', 'https://www.javatpoint.com/cpp-vector-rbegin-function', 'https://www.javatpoint.com/cpp-vector-begin-function', 'https://www.javatpoint.com/cpp-vector-max-size-function', 'https://www.javatpoint.com/cpp-vector-cend-function', 'https://www.javatpoint.com/cpp-vector-cbegin-function', 'https://www.javatpoint.com/cpp-vector-crbegin-function', 'https://www.javatpoint.com/cpp-vector-crend-function', 'https://www.javatpoint.com/cpp-vector-data-function', 'https://www.javatpoint.com/cpp-vector-shrink-to-fit-function', 'https://www.javatpoint.com/cpp-interview-questions', 'https://www.javatpoint.com/c-vs-cpp', 'https://www.javatpoint.com/c-vs-cpp']",['https://www.javatpoint.com/corebasic/images/cpp-training.png'],[],"[' What is C++', 'Object-Oriented Programming (OOPs)', 'C++ Standard Libraries', 'Usage of C++', 'C++ Program', 'C++ Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['C++ is an object-oriented programming language. It is an extension to C programming.', 'C++ is a general purpose, case-sensitive, free-form programming language that supports object-oriented, procedural and generic programming.', 'C++ is a middle-level language, as it encapsulates both high and low level language features.', 'C++ supports the object-oriented programming, the four major pillar of object-oriented programming (OOPs) used in C++ are:', 'Standard C++ programming is divided into three important parts:', 'By the help of C++ programming language, we can develop different types of secured and robust applications:', 'In this tutorial, all C++ programs are given with C++ compiler so that you can easily change the C++ program code.', 'File: main.cpp', 'A detailed explanation of first C++ program is given in next chapters.', 'C++ Tutorial', 'C++ Control Statement', 'C++ Functions', 'C++ Arrays', 'C++ Pointers', 'C++ Object Class', 'C++ Inheritance', 'C++ Polymorphism', 'C++ Abstraction', 'C++ Namespaces', 'C++ Templates', 'C++ Strings', 'C++ Exceptions', 'C++ File & Stream', 'C++ Programs', 'C++ STL Tutorial', 'C++ STL Bitset', 'C++ STL Deque', 'C++ STL List', 'C++ STL Map', 'C++ STL Math', 'C++ STL priority_queue', 'C++ STL Stack', 'C++ STL Queue', 'C++ STL Multiset', 'C++ STL Multimap', 'C++ STL Set', 'C++ STD Strings', 'C++ STL Vector', 'Interview Questions', 'Before learning C++, you must have the basic knowledge of C.', 'Our C++ tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this C++ tutorial. But if there is any mistake, please post the problem in contact form.']",[],"['Our C++ tutorial includes all topics of C++ such as first example, control statements, objects and classes, inheritance, constructor, destructor, this, static, polymorphism, abstraction, abstract class, interface, namespace, encapsulation, arrays, strings, exception handling, File IO, etc.']","['#include', 'using namespace std;', 'int main() {', 'cout << ""Hello C++ Programming"";', 'return 0;']",[],[],"['|||The core library includes the data types, variables and literals, etc.|||The standard library includes the set of functions manipulating strings, files, etc.|||The Standard Template Library (STL) includes the set of methods manipulating a data structure.||||||Window application|||Client-Server application|||Device drivers|||Embedded firmware etc||||||C++ Tutorial|||What is C++|||C vs C++|||C++ History|||C++ Features|||C++ Installation |||C++ Program|||C++ cout, cin, endl|||C++ Variable|||C++ Data types|||C++ Keywords|||C++ Operators||||||C++ if-else|||C++ switch|||C++ For Loop|||C++ While Loop|||C++ Do-While Loop|||C++ Break Statement|||C++ Continue Statement|||C++ Goto Statement|||C++ Comments||||||C++ Functions|||Call by value & reference|||C++ Recursion|||C++ Storage Classes||||||C++ Arrays|||C++ Array to Function|||Multidimensional Arrays||||||C++ Pointers||||||C++ OOPs Concepts|||C++ Object Class|||C++ Constructor|||C++ Destructor|||C++ this Pointer|||C++ static|||C++ Structs|||C++ Enumeration|||C++ Friend Function||||||C++ Inheritance|||C++ Aggregation||||||C++ Polymorphism|||C++ Overloading|||C++ Overriding|||C++ Virtual Function||||||C++ Interfaces|||C++ Data Abstraction||||||C++ Namespaces||||||C++ Templates||||||C++ Strings||||||C++ Exception Handling|||C++ try/catch|||C++ User-Defined||||||C++ File & Stream||||||C++Programs|||Fibonacci Series|||Prime Number|||Palindrome Number|||Factorial|||Armstrong Number|||Sum of digits|||Reverse Number|||Swap Number|||Matrix Multiplication|||Decimal to Binary|||Number in Characters|||Alphabet Triangle|||Number Triangle|||Fibonacci Triangle||||||C++ STL Algorithm|||algorithm adjacent_find() function|||algorithm any_of() function|||algorithm copy() function|||algorithm copy_if() function|||algorithm count() function|||algorithm count_if() function|||algorithm equal() function|||algorithm find() function|||algorithm find_end() function|||algorithm find_first_of() function|||algorithm find_if() function|||algorithm find_if_not() function|||algorithm for_each() function|||algorithm move() function|||algorithm all_of() function|||algorithm copy_backward() function|||algorithm copy_n() function|||algorithm search() function|||algorithm is_permutation() function|||algorithm mismatch() function|||algorithm move_backward() function|||algorithm none_of() function|||algorithm search_n() function|||algorithm swap() function|||algorithm fill() function|||algorithm iter_swap() function|||algorithm replace_copy_if() function|||algorithm replace_copy() function|||algorithm replace_if() function|||algorithm replace() function|||algorithm swap_ranges() function|||algorithm transform() function|||algorithm fill_n() function|||algorithm generate_n() function|||algorithm generate() function|||algorithm remove() function|||algorithm is_partitioned() function|||algorithm random_shuffle() function|||algorithm remove_copy_if() function|||algorithm remove_copy() function|||algorithm partition_copy() function|||algorithm partition_point() function|||algorithm partition() function|||algorithm remove_if() function|||algorithm reverse_copy() function|||algorithm reverse() function|||algorithm rotate_copy() function|||algorithm rotate() function|||algorithm shuffle() function|||algorithm stable_partition() function|||algorithm unique_copy() function|||algorithm unique() function|||algorithm is_sorted_until() function|||algorithm is_sorted() function|||algorithm lower_bound() function|||algorithm nth_element() function|||algorithm partial_sort_copy() function|||algorithm partial_sort() function|||algorithm sort() function|||algorithm stable_sort() function|||algorithm binary_search() function|||algorithm equal_range() function|||algorithm includes() function|||algorithm inplace_merge() function|||algorithm merge() function|||algorithm set_union() function|||algorithm upper_bound() function||||||C++ Bitset|||bitset all() function|||bitset any() function|||bitset count() function|||bitset flip() function|||bitset none() function|||bitset operator[]|||bitset reset() function|||bitset set() function|||bitset size() function|||bitset test() function|||bitset to_string() function|||bitset to_ullong() function|||bitset to_ulong() function||||||C++ Deque|||Deque assign() function|||Deque emplace() function|||Deque emplace_back() function|||Deque emplace_front() function|||Deque insert() function|||Deque push_back() function|||Deque push_front() function|||Deque pop_back() function|||Deque pop_front() function|||Deque swap() function|||Deque clear() function|||Deque empty() function|||Deque erase() function|||Deque max_size() function|||Deque resize() function|||Deque shrink_to_fit() function|||Deque size() function|||Deque at() function|||Deque operator[]() function|||Deque operator=() function|||Deque back() function|||Deque begin() function|||Deque cbegin() function|||Deque end() function|||Deque cend() function|||Deque rbegin() function|||Deque crbegin() function|||Deque rend() function|||Deque crend() function||||||C++ List|||List insert() function|||List push_back() function|||List push_front() function|||List pop_back() function|||List pop_front() function|||List empty() function|||List size() function|||List max_size() function|||List front() function|||List back() function|||List swap() function|||List reverse() function|||List sort() function|||List merge() function|||List splice() function|||List unique() function|||List resize() function|||List assign() function|||List emplace() function|||List emplace_back() function|||List emplace_front() function||||||C++ Map|||map at() function|||map begin() function|||map cbegin() function|||map cend() function|||map crbegin() function|||map crend() function|||map empty() function|||map end() function|||map max_size() function|||map operator[]|||map rbegin() function|||map rend() function|||map size() function|||map clear() function|||map emplace() function|||map emplace_hint() function|||map erase() function|||map find() function|||map insert() function|||map operator=()|||map swap() function||||||math cos() function|||math sin() function|||math tan() function|||math acos() function|||math asin() function|||math atan() function|||math atan2() function|||math cosh() function|||math sinh() function|||math tanh() function|||math acosh() function|||math asinh() function|||math atanh() function|||math exp() function|||math frexp() function|||math Idexp() function|||math log() function|||math log10() function|||math modf() function|||math exp2() function|||math expm1() function|||math log1p() function|||math log2() function|||math logb() function|||math scalbn() function|||math scalbln() function|||math ilogb() function|||math copysign() function|||math nextafter() function|||math nexttoward() function|||math fdim() function|||math fmax() function|||math fmin() function|||math pow() function|||math sqrt() function|||math cbrt() function|||math hypot() function|||math ceil() function|||math floor() function|||math round() function|||math lround() function|||math llround() function|||math fmod() function|||math trunc() function|||math rint() function|||math lrint() function|||math llrint() function|||math nearbyint() function|||math remainder() function|||math remquo() function|||math fabs() function|||math abs() function|||math fma() function|||math fpclassify() function|||math isfinite() function|||math isinf() function|||math isnan() function|||math isnormal() function|||math signbit() function|||math isgreater() function|||math isgreaterequal() function|||math less() function|||math islessequal() function|||math islessgreater() function|||math isunordered() function|||math erf() function|||math erfc() function|||math tgamma() function|||math lgamma() function||||||C++ priority_queue|||priority_queue emplace() function|||priority_queue empty() function|||priority_queue pop() function|||priority_queue push() function|||priority_queue size() function|||priority_queue swap() function|||priority_queue top() function||||||C++ Stack|||stack emplace() function|||stack empty() function|||stack pop() function|||stack push() function|||stack size() function|||stack top() function||||||C++ Queue|||queue back() function|||queue emplace() function|||queue empty() function|||queue front() function|||queue pop() function|||queue push() function|||queue size() function||||||C++ multiset|||multiset constructor|||multiset destructor|||multiset begin() function|||multiset end() function|||multiset operator=|||multiset rbegin() function|||multiset rend() function|||multiset cbegin() function|||multiset cend() function|||multiset max_size() function|||multiset size() function|||multiset crbegin() function|||multiset crend() function|||multiset empty() function|||multiset insert() function|||multiset clear() function|||multiset emplace() function|||multiset erase() function|||multiset swap() function|||multiset emplace_hint() function|||multiset find() function|||multiset key_comp() function|||multiset value_comp() function|||multiset count() function|||multiset equal_range() function|||multiset lower_bound() function|||multiset upper_bound() function|||multiset get_allocator() function|||multiset operator==|||multiset operator!=|||multiset operator<|||multiset operator<=|||multiset operator>|||multiset operator>=|||multiset swap() function||||||C++ Multimap|||multimap crbegin() function|||multimap crend() function|||multimap begin() function|||multimap cbegin() function|||multimap cend() function|||multimap end() function|||multimap rbegin() function|||multimap rend() function|||multimap clear() function|||multimap emplace() function|||multimap empty() function|||multimap erase() function|||multimap insert() function|||multimap swap() function|||multimap equal_range() function|||multimap operator==|||multimap operator!=|||multimap operator<|||multimap operator<=|||multimap operator>|||multimap operator>=|||multimap swap() function||||||C++ Set|||set constructor|||set destructor|||set operator=() function|||set begin() function|||set cbegin() function|||set end() function|||set cend() function|||set rbegin() function|||set rend() function|||set crbegin() function|||set crend() function|||set empty() function|||set Size() function|||set max_size() function|||set insert() function|||set erase() function|||set Swap() function|||set clear() function|||set emplace() function|||set emplace_hint() function|||set key_comp() function|||set value_comp() function|||set find() function|||set count() function|||set lower_bound() function|||set upper_bound() function|||set equal_range() function|||set get_allocator() function|||set operator==|||set operator!=|||set operator<|||set operator<=|||set operator>|||set operator>=|||set swap() function||||||string compare() function|||string length() function|||string swap() function|||string substr() function|||string size() function|||string resize() function|||string replace() function|||string append() function|||string at() function|||string find() function|||string find_first_of() function|||string find_first_not_of() function|||string find_last_of() function|||string find_last_not_of() function|||string insert() function|||string max_size() function|||string push_back() function|||string pop_back() function|||sstring assign() function|||string copy() function|||string back() function|||string begin() function|||string capacity() function|||string cbegin() function|||string cend() function|||string clear() function|||string crbegin() function|||string data() function|||string empty() function|||string erase() function|||string front() function|||string operator+=()|||string operator=()|||string operator[]()|||string rfind() function|||string end() function|||string rend() function|||string shrink_to_fit() function|||string c_str() function|||string crend() function|||string rbegin() function|||string reserve() function|||string get_allocator() function||||||C++ Vector|||Vector at() function|||Vector back() function|||Vector front() function|||Vector swap() function|||Vector push_back() function|||Vector pop_back() function|||Vector empty() function|||Vector insert() function|||Vector erase() function|||Vector resize() function|||Vector clear() function|||Vector size() function|||Vector capacity() function|||Vector assign() function|||Vector operator=() function|||Vector operator[]() function|||Vector end() function|||Vector emplace() function|||Vector emplace_back() function|||Vector rend() function|||Vector rbegin() function|||Vector begin() function|||Vector max_size() function|||Vector cend() function|||Vector cbegin() function|||Vector crbegin() function|||Vector crend() function|||Vector data() function|||Vector shrink_to_fit() function||||||Interview Questions|||&&&|||Inheritance|||Polymorphism|||Encapsulation|||Abstraction|||']"
1,['C vs. C++'],['C is a structural or procedural oriented programming language which is machine-independent and extensively used in various applications. '],"['https://www.javatpoint.com/cpp-history', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-history', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-history']",['https://static.javatpoint.com/cpages/images/c-vs-cpp.png'],[],"['What is C?', 'What is C++?']",[],[],"[""Let's understand the differences between C and C++."", 'The following are the differences between C and C++:', ""Let's summarize the above differences in a tabular form.""]",[],"[""C is the basic programming language that can be used to develop from the operating systems (like Windows) to complex programs like Oracle database, Git, Python interpreter, and many more. C programming language can be called a god's programming language as it forms the base for other programming languages. If we know the C language, then we can easily learn other programming languages. C language was developed by the great computer scientist Dennis Ritchie at the Bell Laboratories. It contains some additional features that make it unique from other programming languages. "", 'C++ is a special-purpose programming language developed by Bjarne Stroustrup at Bell Labs circa 1980. C++ language is very similar to C language, and it is so compatible with C that it can run 99% of C programs without changing any source of code though C++ is an object-oriented programming language, so it is safer and well-structured programming language than C.']",[],[],"[""No.|||C|||C++&&&1)|||C follows the procedural style programming.|||C++ is multi-paradigm. It supports both procedural and object oriented.&&&2)|||Data is less secured in C.|||In C++, you can use modifiers for class members to make it inaccessible for outside users.&&&3)|||C follows the top-down approach.|||C++ follows the bottom-up approach.&&&4)|||C does not support function overloading.|||C++ supports function overloading.&&&5)|||In C, you can't use functions in structure.|||In C++, you can use functions in structure.&&&6)|||C does not support reference variables.|||C++ supports reference variables.&&&7)|||In C, scanf() and printf() are mainly used for input/output.|||C++ mainly uses stream cin and cout to perform input and output operations.&&&8)|||Operator overloading is not possible in C.|||Operator overloading is possible in C++.&&&9)|||C programs are divided into procedures and modules|||C++ programs are divided into functions and classes.&&&10)|||C does not provide the feature of namespace.|||C++ supports the feature of namespace.&&&11)|||Exception handling is not easy in C. It has to perform using other functions.|||C++ provides exception handling using Try and Catch block.&&&12)|||C does not support the inheritance.|||C++ supports inheritance.""]","['|||Definition|||C is a structural programming language, and it does not support classes and objects, while C++ is an object-oriented programming language that supports the concept of classes and objects.|||Type of programming language|||C supports the structural programming language where the code is checked line by line, while C++ is an object-oriented programming language that supports the concept of classes and objects.|||Developer of the language|||Dennis Ritchie developed C language at Bell Laboratories while Bjarne Stroustrup developed the C++ language at Bell Labs circa 1980.|||Subset|||C++ is a superset of C programming language. C++ can run 99% of C code but C language cannot run C++ code.|||Type of approach|||C follows the top-down approach, while C++ follows the bottom-up approach. The top-down approach breaks the main modules into tasks; these tasks are broken into sub-tasks, and so on. The bottom-down approach develops the lower level modules first and then the next level modules.|||Security|||In C, the data can be easily manipulated by the outsiders as it does not support the encapsulation and information hiding while C++ is a very secure language, i.e., no outsiders can manipulate its data as it supports both encapsulation and data hiding. In C language, functions and data are the free entities, and in C++ language, all the functions and data are encapsulated in the form of objects.|||Function Overloading|||Function overloading is a feature that allows you to have more than one function with the same name but varies in the parameters. C does not support the function overloading, while C++ supports the function overloading.|||Function Overriding|||Function overriding is a feature that provides the specific implementation to the function, which is already defined in the base class. C does not support the function overriding, while C++ supports the function overriding.|||Reference variables|||C does not support the reference variables, while C++ supports the reference variables.|||Keywords|||C contains 32 keywords, and C++ supports 52 keywords.|||Namespace feature|||A namespace is a feature that groups the entities like classes, objects, and functions under some specific name. C does not contain the namespace feature, while C++ supports the namespace feature that avoids the name collisions.|||Exception handling|||C does not provide direct support to the exception handling; it needs to use functions that support exception handling. C++ provides direct support to exception handling by using a try-catch block.|||Input/Output functions|||In C, scanf and printf functions are used for input and output operations, respectively, while in C++, cin and cout are used for input and output operations, respectively.|||Memory allocation and de-allocation|||C supports calloc() and malloc() functions for the memory allocation, and free() function for the memory de-allocation. C++ supports a new operator for the memory allocation and delete operator for the memory de-allocation.|||Inheritance|||Inheritance is a feature that allows the child class to reuse the properties of the parent class. C language does not support the inheritance while C++ supports the inheritance.|||Header file|||C program uses <stdio.h> header file while C++ program uses <iostream.h> header file.|||']"
2,['C++ history'],['History of C++ language is interesting to know. Here we are going to discuss brief history of C++ language.'],"['https://www.javatpoint.com/cpp-features', 'https://www.javatpoint.com/what-is-cpp', 'https://www.javatpoint.com/cpp-features', 'https://www.javatpoint.com/what-is-cpp', 'https://www.javatpoint.com/cpp-features']",['https://static.javatpoint.com/cpp/images/cpp-history1.png'],[],[],[],[],"['C++ programming language was developed in 1980 by Bjarne Stroustrup at bell laboratories of AT&T (American Telephone & Telegraph), located in U.S.A.', 'Bjarne Stroustrup is known as the founder of C++ language.', 'It was develop for adding a feature of OOP (Object Oriented Programming) in C without significantly changing the C component.', 'C++ programming is ""relative"" (called a superset) of C, it means any valid C program is also a valid C++ program.', ""Let's see the programming languages that were developed before C++ language.""]",[],[],[],[],['Language|||Year|||Developed By&&&Algol|||1960|||International Group&&&BCPL|||1967|||Martin Richard&&&B|||1970|||Ken Thompson&&&Traditional C|||1972|||Dennis Ritchie&&&K & R C|||1978|||Kernighan & Dennis Ritchie&&&C++|||1980|||Bjarne Stroustrup'],[]
3,['C++ Features'],['C++ is a widely used programming language.'],"['https://www.javatpoint.com/cpp-installation', 'https://www.javatpoint.com/cpp-history', 'https://www.javatpoint.com/cpp-installation', 'https://www.javatpoint.com/cpp-history', 'https://www.javatpoint.com/cpp-installation']",['https://static.javatpoint.com/cpp/images/cpp-features1.png'],[],[],"['1) Simple', '2) Abstract Data types', '3) Portable', '4) Mid-level / Intermediate programming language', '5) Structured programming language', '6) Rich Library', '7) Memory Management', '8) Quicker Compilation', '9) Pointer', '10) Recursion', '11) Extensible', '12) Object-Oriented', '13) Compiler based', '14) Reusability', '15) National Standards', '16) Errors are easily detected', '17) Power and Flexibility', '18) Strongly typed language', '19) Redefine Existing Operators', '20) Modelling real-world problems', '21) Clarity']",[],"['It provides a lot of features that are given below.', 'In C++, complex data types called Abstract Data Types (ADT) can be created using classes.', 'C++ is a portable language and programs made in it can be run on different machines.', 'C++ is a structured programming language. In this we can divide the program into several parts using functions.', 'C++ provides a lot of inbuilt functions that make the development fast. Following are the libraries used in C++ programming are:', 'C++ programs tend to be compact and run quickly. Hence the compilation and execution time of the C++ language is fast.', 'In C++, we can call the function within the function. It provides code reusability for every function.', 'C++ programs can easily be extended as it is very easy to add new features into the existing program.', 'C++ has national standards such as ANSI.', 'The programs written in C++ are well suited for real-world modeling problems as close as possible to the user perspective.', 'The keywords and library functions used in C++ resemble common English words.']","['C++ is a simple language because it provides a structured approach (to break the problem into parts), a rich set of library functions, data types, etc.', 'C++ includes both low-level programming and high-level language so it is known as a mid-level and intermediate programming language. It is used to develop system applications such as kernel, driver, etc.', 'C++ provides the feature of pointers. We can use pointers for memory, structures, functions, array, etc. We can directly interact with the memory by using the pointers.', 'In C++, object-oriented concepts like data hiding, encapsulation, and data abstraction can easily be implemented using keyword class, private, public, and protected access specifiers. Object-oriented makes development and maintenance easier.', 'It is easier to maintain a C++ programs as errors can be easily located and rectified. It also provides a feature called exception handling to support error handling in your program.', 'C++ allows the programmer to redefine the meaning of existing operators such as +, -. For Example, The ""+"" operator can be used for adding two numbers and concatenating two strings.']","[""C++ provides very efficient management techniques. The various memory management operators help save the memory and improve the program's efficiency. These operators allocate and deallocate memory at run time. Some common memory management operators available C++ are new, delete etc."", 'C++ is a compiler-based programming language, which means no C++ program can be executed without compilation. C++ compiler is easily available, and it requires very little space for storage. First, we need to compile our program using a compiler, and then we can execute our program.', 'With the use of inheritance of functions programs written in C++ can be reused in any other program of C++. You can save program parts into library files and invoke them in your next programming projects simply by including the library files. New programs can be developed in lesser time as the existing code can be reused. It is also possible to define several functions with same name that perform different task. For Example: abs () is used to calculate the absolute value of integer, float and long integer.', 'C++ is a powerful and flexible language because of most of the powerful flexible and modern UNIX operating system is written in C++. Many compilers and interpreters for other languages such as FORTRAN, PERL, Python, PASCAL, BASIC, LISP, etc., have been written in C++. C++ programs have been used for solving physics and engineering problems and even for animated special effects for movies.', 'The list of arguments of every function call is typed checked during compilation. If there is a type mismatch between actual and formal arguments, implicit conversion is applied if possible. A compile-time occurs if an implicit conversion is not possible or if the number of arguments is incorrect.']",[],[],[],['|||<iostream>|||<cmath>|||<cstdlib>|||<fstream>|||&&&|||Simple|||Abstract Data types|||Machine Independent or Portable|||Mid-level programming language|||Structured programming language|||Rich Library|||Memory Management|||Quicker Compilation|||Pointers|||Recursion|||Extensible|||Object-Oriented|||Compiler based|||Reusability|||National Standards|||Errors are easily detected|||Power and Flexibility|||Strongly typed language|||Redefine Existing Operators|||Modeling Real-World Problems|||Clarity|||']
4,['Turbo C++ - Download & Installation '],"['There are many compilers available for C++. You need to download any one. Here, we are going to use Turbo C++. It will work for both C and C++. To install the Turbo C++ software, you need to follow following steps.']","['https://www.javatpoint.com/cpp-program', 'https://www.javatpoint.com/cpp-features', 'https://www.javatpoint.com/cpp/software/tc3.zip', 'https://www.javatpoint.com/cpp-program', 'https://www.javatpoint.com/cpp-features', 'https://www.javatpoint.com/cpp-program']","['https://static.javatpoint.com/cpp/images/cpp-installation1.png', 'https://static.javatpoint.com/cpp/images/cpp-installation2.png', 'https://static.javatpoint.com/cpp/images/cpp-installation3.png', 'https://static.javatpoint.com/cpp/images/cpp-installation4.png', 'https://static.javatpoint.com/cpp/images/cpp-installation5.png', 'https://static.javatpoint.com/cpp/images/cpp-installation6.png', 'https://static.javatpoint.com/cpp/images/cpp-installation7.png', 'https://static.javatpoint.com/cpp/images/cpp-installation8.png']",[],[],"['1) Download Turbo C++ software', '2) Create turboc directory in c drive and extract the tc3.zip', '3) Double click on the install.exe file and follow steps', '4) Click on the tc application located inside c:\\TC\\BIN']",[],"['You can download turbo C++ from many sites. download Turbo c++', 'Now, you need to create a new directory turboc inside the c: drive. Now extract the tc3.zip file in c:\\turboc directory.', 'Now, click on the install icon located inside the c:\\turboc', 'It will ask you to install c or not, press enter to install.', 'Change your drive to c, press c.', 'Press enter, it will look inside the c:\\turboc directory for the required files.', 'Select Start installation by the down arrow key then press enter.', 'Now C is installed, press enter to read documentation or close the software.', 'Now double click on the tc icon located in c:\\TC\\BIN directory to write the c program.', 'Now it will showing following console.']","['In windows 7 or window 8, it will show a dialog block to ignore and close the application because full screen mode is not supported. Click on Ignore button.']",[],[],[],[],['|||Download Turbo C++|||Create turboc directory inside c drive and extract the tc3.zip inside c:\\turboc|||Double click on install.exe file|||Click on the tc application file located inside c:\\TC\\BIN to write the c program|||']
5,['C++ Program'],"['Before starting the abcd of C++ language, you need to learn how to write, compile and run the first C++ program.']","['https://www.javatpoint.com/cpp-basic-input-output', 'https://www.javatpoint.com/cpp-installation', 'https://www.javatpoint.com/cpp-basic-input-output', 'https://www.javatpoint.com/cpp-installation', 'https://www.javatpoint.com/cpp-basic-input-output']","['https://static.javatpoint.com/cpp/images/cpp-program1.png', 'https://static.javatpoint.com/cpp/images/cpp-program2.png']",[],['How to compile and run the C++ program'],[],[],"['To write the first C++ program, open the C++ console and write the following code:', '#include <conio.h> includes the console input output library functions. The getch() function is defined in conio.h file.', 'void main() The main() function is the entry point of every program in C++ language. The void keyword specifies that it returns no value.', 'cout << ""Welcome to C++ Programming."" is used to print the data ""Welcome to C++ Programming."" on the console.', 'getch() The getch() function asks for a single character. Until you press any key, it blocks the screen.', 'There are 2 ways to compile and run the C++ program, by menu and by shortcut.', 'Now click on the compile menu then compile sub menu to compile the c++ program.', 'Then click on the run menu then run sub menu to run the c++ program.', 'By shortcut', 'Or, press ctrl+f9 keys compile and run the program directly.', 'You will see the following output on user screen.', 'You can view the user screen any time by pressing the alt+f5 keys.', 'Now press Esc to return to the turbo c++ console.']",['#include<iostream.h> includes the standard input output library functions. It provides cin and cout methods for reading from input and writing to output respectively.'],[],"['#include <iostream.h>', '#include<conio.h>', 'void main() {', 'clrscr();', 'cout << ""Welcome to C++ Programming."";', 'getch();']",[],[],[]
6,['C++ Basic Input/Output'],['C++ I/O operation is using the stream concept. Stream is the sequence of bytes or flow of data. It makes the performance fast.'],"['https://www.javatpoint.com/cpp-variable', 'https://www.javatpoint.com/cpp-program', 'https://www.javatpoint.com/cpp-variable', 'https://www.javatpoint.com/cpp-program', 'https://www.javatpoint.com/cpp-variable']",[],[],"['I/O Library Header Files', 'Standard output stream (cout)', 'Standard input stream (cin)', 'Standard end line (endl)']",[],[],"['If bytes flow from main memory to device like printer, display screen, or a network connection, etc, this is called as output operation.', 'If bytes flow from device like printer, display screen, or a network connection, etc to main memory, this is called as input operation.', 'Let us see the common header files used in C++ programming are:', ""Let's see the simple example of standard output stream (cout):"", ""Let's see the simple example of standard input stream (cin):"", 'The endl is a predefined object of ostream class. It is used to insert a new line characters and flushes the stream.', ""Let's see the simple example of standard end line (endl):""]","['The cout is a predefined object of ostream class. It is connected with the standard output device, which is usually a display screen. The cout is used in conjunction with stream insertion operator (<<) to display the output on a console', 'The cin is a predefined object of istream class. It is connected with the standard input device, which is usually a keyboard. The cin is used in conjunction with stream extraction operator (>>) to read the input from a console.']",[],"['#include <iostream>', 'using namespace std;', 'int main( ) {', 'char ary[] = ""Welcome to C++ tutorial"";', 'cout << ""Value of ary is: "" << ary << endl;', '#include <iostream>', 'using namespace std;', 'int main( ) {', 'int age;', 'cout << ""Enter your age: "";', 'cin >> age;', 'cout << ""Your age is: "" << age << endl;', '#include <iostream>', 'using namespace std;', 'int main( ) {', 'cout << ""C++ Tutorial"";', 'cout << "" Javatpoint""<<endl;', 'cout << ""End of line""<<endl;']","['Value of ary is: Welcome to C++ tutorial', 'Enter your age: 22\nYour age is: 22', 'C++ Tutorial Javatpoint \nEnd of line']","['Header File|||Function and Description&&&<iostream>|||It is used to define the cout, cin and cerr objects, which correspond to standard output stream, standard input stream and standard error stream, respectively.&&&<iomanip>|||It is used to declare services useful for performing formatted I/O, such as setprecision and setw.&&&<fstream>|||It is used to declare services for user-controlled file processing.']",[]
7,['C++ Variable'],['A variable is a name of memory location. It is used to store data. Its value can be changed and it can be reused many times.'],"['https://www.javatpoint.com/cpp-data-types', 'https://www.javatpoint.com/cpp-program', 'https://www.javatpoint.com/cpp-data-types', 'https://www.javatpoint.com/cpp-program', 'https://www.javatpoint.com/cpp-data-types']",[],[],['Rules for defining variables'],[],[],"['It is a way to represent memory location through symbol so that it can be easily identified.', ""Let's see the syntax to declare a variable:"", 'The example of declaring variable is given below:', 'Here, x, y, z are variables and int, float, char are data types.', 'We can also provide values while declaring the variables as given below:', 'A variable can have alphabets, digits and underscore.', ""A variable name can start with alphabet and underscore only. It can't start with digit."", 'No white space is allowed within variable name.', 'A variable name must not be any reserved word or keyword e.g. char, float etc.', 'Valid variable names:', 'Invalid variable names:']",[],[],"['type variable_list;', 'int x;', 'float y;', 'char z;', 'int x=5,b=10;  //declaring 2 variable of integer type', 'float f=30.8;', ""char c='A';"", 'int a;', 'int _ab;', 'int a30;', 'int 4;', 'int x y;', 'int double;']",[],[],[]
8,['C++ Data Types'],"['A data type specifies the type of data that a variable can store such as integer, floating, character etc.']","['https://www.javatpoint.com/cpp-keywords', 'https://www.javatpoint.com/cpp-variable', 'https://www.javatpoint.com/cpp-keywords', 'https://www.javatpoint.com/cpp-variable', 'https://www.javatpoint.com/cpp-keywords']",['https://static.javatpoint.com/cpp/images/cpp-data-types1.png'],[],['Basic Data Types'],[],[],"['There are 4 types of data types in C++ language.', 'The basic data types are integer-based and floating-point based. C++ language supports both signed and unsigned literals.', 'The memory size of basic data types may change according to 32 or 64 bit operating system.', ""Let's see the basic data types. It size is given according to 32 bit OS.""]",[],[],[],[],"['Types|||Data Types&&&Basic Data Type|||int, char, float, double, etc&&&Derived Data Type|||array, pointer, etc&&&Enumeration Data Type|||enum&&&User Defined Data Type|||structure', 'Data Types|||Memory Size|||Range&&&char|||1 byte|||-128 to 127&&&signed char|||1 byte|||-128 to 127&&&unsigned char|||1 byte|||0 to 127&&&short|||2 byte|||-32,768 to 32,767&&&signed short|||2 byte|||-32,768 to 32,767&&&unsigned short|||2 byte|||0 to 32,767&&&int|||2 byte|||-32,768 to 32,767&&&signed int|||2 byte|||-32,768 to 32,767&&&unsigned int|||2 byte|||0 to 32,767&&&short int|||2 byte|||-32,768 to 32,767&&&signed short int|||2 byte|||-32,768 to 32,767&&&unsigned short int|||2 byte|||0 to 32,767&&&long int|||4 byte&&&signed long int|||4 byte&&&unsigned long int|||4 byte&&&float|||4 byte&&&double|||8 byte&&&long double|||10 byte']",[]
9,['C++ Keywords'],"['A keyword is a reserved word. You cannot use it as a variable name, constant name etc. A list of 32 Keywords in C++ Language which are also available in C language are given below.']","['https://www.javatpoint.com/cpp-operators', 'https://www.javatpoint.com/cpp-data-types', 'https://www.javatpoint.com/cpp-operators', 'https://www.javatpoint.com/cpp-data-types', 'https://www.javatpoint.com/cpp-operators']",[],[],[],[],[],['A list of 30 Keywords in C++ Language which are not available in C language are given below.'],[],[],[],[],"['auto|||break|||case|||char|||const|||continue|||default|||do&&&double|||else|||enum|||extern|||float|||for|||goto|||if&&&int|||long|||register|||return|||short|||signed|||sizeof|||static&&&struct|||switch|||typedef|||union|||unsigned|||void|||volatile|||while', 'asm|||dynamic_cast|||namespace|||reinterpret_cast|||bool&&&explicit|||new|||static_cast|||false|||catch&&&operator|||template|||friend|||private|||class&&&this|||inline|||public|||throw|||const_cast&&&delete|||mutable|||protected|||true|||try&&&typeid|||typename|||using|||virtual|||wchar_t']",[]
10,['C++ Operators'],"['An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, logical, bitwise etc.']","['https://www.javatpoint.com/cpp-identifiers', 'https://www.javatpoint.com/cpp-keywords', 'https://www.javatpoint.com/cpp-identifiers', 'https://www.javatpoint.com/cpp-keywords', 'https://www.javatpoint.com/cpp-identifiers']",['https://static.javatpoint.com/cpp/images/cpp-operaters1.png'],[],['Precedence of Operators in C++'],[],[],"['There are following types of operators to perform different types of operations in C language.', ""Let's understand the precedence by the example given below:"", 'The ""data"" variable will contain 105 because * (multiplicative operator) is evaluated before + (additive operator).', 'The precedence and associativity of C++ operators is given below:']","['The precedence of operator species that which operator will be evaluated first and next. The associativity specifies the operators direction to be evaluated, it may be left to right or right to left.']",[],['int data=5+10*10;'],[],"['Category|||Operator|||Associativity&&&Postfix|||() [] -> . ++ - -|||Left to right&&&Unary|||+ - ! ~ ++ - - (type)* & sizeof|||Right to left&&&Multiplicative|||* / %|||Left to right&&&Additive|||+ -|||Right to left&&&Shift|||<< >>|||Left to right&&&Relational|||< <= > >=|||Left to right&&&Equality|||== !=/td>|||Right to left&&&Bitwise AND|||&|||Left to right&&&Bitwise XOR|||^|||Left to right&&&Bitwise OR|||||||Right to left&&&Logical AND|||&&|||Left to right&&&Logical OR||||||||Left to right&&&Conditional|||?:|||Right to left&&&Assignment|||= += -= *= /= %=>>= <<= &= ^= |=|||Right to left&&&Comma|||,|||Left to right']",['|||Arithmetic Operators|||Relational Operators|||Logical Operators|||Bitwise Operators|||Assignment Operator|||Unary operator|||Ternary or Conditional Operator|||Misc Operator|||']
11,['C++ Identifiers'],"['C++ identifiers in a program are used to refer to the name of the variables, functions, arrays, or other user-defined data types created by the programmer. They are the basic requirement of any language. Every language has its own rules for naming the identifiers.']","['https://www.javatpoint.com/cpp-expression', 'https://www.javatpoint.com/cpp-operators', 'https://www.javatpoint.com/cpp-expression', 'https://www.javatpoint.com/cpp-operators', 'https://www.javatpoint.com/cpp-expression']",['https://static.javatpoint.com/cpp/images/cpp-identifiers.png'],[],[],"['Valid Identifiers', 'Invalid Identifiers', 'What are the keywords?']","['Note: Identifiers cannot be used as the keywords. It may not conflict with the keywords, but it is highly recommended that the keywords should not be used as the identifier name. You should always use a consistent way to name the identifiers so that your code will be more readable and maintainable.']","['In short, we can say that the C++ identifiers represent the essential elements in a program which are given below:', 'Some naming rules are common in both C and C++. They are as follows:', 'The following are the examples of valid identifiers are:', 'The following are the examples of invalid identifiers:', ""Let's look at a simple example to understand the concept of identifiers."", 'Differences between Identifiers and Keywords', 'The following is the list of differences between identifiers and keywords:']","['The major difference between C and C++ is the limit on the length of the name of the variable. ANSI C considers only the first 32 characters in a name while ANSI C++ imposes no limit on the length of the name.', ""In the above code, we declare two variables 'a' and 'A'. Both the letters are same but they will behave as different identifiers. As we know that the identifiers are the case-sensitive so both the identifiers will have different memory locations.""]","[""For example, suppose we have two identifiers, named as 'FirstName', and 'Firstname'. Both the identifiers will be different as the letter 'N' in the first case in uppercase while lowercase in second. Therefore, it proves that identifiers are case-sensitive."", 'Constants are the identifiers that refer to the fixed value, which do not change during the execution of a program. Both C and C++ support various kinds of literal constants, and they do have any memory location. For example, 123, 12.34, 037, 0X2, etc. are the literal constants.', ""Keywords are the reserved words that have a special meaning to the compiler. They are reserved for a special purpose, which cannot be used as the identifiers. For example, 'for', 'break', 'while', 'if', 'else', etc. are the predefined words where predefined words are those words whose meaning is already known by the compiler. Whereas, the identifiers are the names which are defined by the programmer to the program elements such as variables, functions, arrays, objects, classes.""]","[""Sum-1   // containing special character '-'."", '2data    // the first letter is a digit.', 'break    // use of a keyword.', '#include <iostream>', 'using namespace std;', 'int main()', 'int a;', 'int A;', 'cout<<""Enter the values of \'a\' and \'A\'"";', 'cin>>a;', 'cin>>A;', 'cout<<""\\nThe values that you have entered are : ""<<a<<"" , ""<<A;', 'return 0;']",[],"[""Identifiers|||Keywords&&&Identifiers are the names defined by the programmer to the basic elements of a program.|||Keywords are the reserved words whose meaning is known by the compiler.&&&It is used to identify the name of the variable.|||It is used to specify the type of entity.&&&It can consist of letters, digits, and underscore.|||It contains only letters.&&&It can use both lowercase and uppercase letters.|||It uses only lowercase letters.&&&No special character can be used except the underscore.|||It cannot contain any special character.&&&The starting letter of identifiers can be lowercase, uppercase or underscore.|||It can be started only with the lowercase letter.&&&It can be classified as internal and external identifiers.|||It cannot be further classified.&&&Examples are test, result, sum, power, etc.|||Examples are 'for', 'if', 'else', 'break', etc.""]","['|||Constants|||Variables|||Functions|||Labels|||Defined data types||||||Only alphabetic characters, digits, and underscores are allowed.|||The identifier name cannot start with a digit, i.e., the first letter should be alphabetical. After the first letter, we can use letters, digits, or underscores.|||In C++, uppercase and lowercase letters are distinct. Therefore, we can say that C++ identifiers are case-sensitive. |||A declared keyword cannot be used as a variable name.|||']"
12,['C++ Expression'],"['C++ expression consists of operators, constants, and variables which are arranged according to the rules of the language. It can also contain function calls which return values. An expression can consist of one or more operands, zero or more operators to compute a value. Every expression produces some value which is assigned to the variable with the help of an assignment operator. ']","['https://www.javatpoint.com/cpp-if-else', 'https://www.javatpoint.com/cpp-identifiers', 'https://www.javatpoint.com/cpp-if-else', 'https://www.javatpoint.com/cpp-identifiers', 'https://www.javatpoint.com/cpp-if-else']","['https://static.javatpoint.com/cpp/images/cpp-expression.png', 'https://static.javatpoint.com/cpp/images/cpp-expression2.png']",[],[],"['An expression can be of following types:', 'Constant expressions', 'Integral Expressions', 'Float Expressions', 'Pointer Expressions', 'Relational Expressions', 'Logical Expressions', 'Bitwise Expressions', 'Special Assignment Expressions']","['Note: Using chained assignment expression, the value cannot be assigned to the variable at the time of declaration. For example, int a=b=c=90 is an invalid statement.']","['Examples of C++ expression:', 'If the expression is a combination of the above expressions, such expressions are known as compound expressions.', 'Constants are used in the following situations:', 'The following table shows the expression containing constant value:', ""Let's see a simple program containing constant expression:"", 'An integer expression is an expression that produces the integer value as output after performing all the explicit and implicit conversions.', 'Following are the examples of integral expression:', ""Let's see a simple example of integral expression:"", ""Let's see another example of integral expression."", ""In the above code, we declare two variables, i.e., x and y. We store the value of expression (y+int(10.0)) in a 'x' variable."", 'A float expression is an expression that produces floating-point value as output after performing all the explicit and implicit conversions.', 'The following are the examples of float expressions:', ""Let's understand through an example."", ""Let's see another example of float expression."", ""In the above code, we have declared two variables, i.e., x and y. After declaration, we store the value of expression (x+float(10)) in variable 'y'."", 'A pointer expression is an expression that produces address value as an output. ', 'The following are the examples of pointer expression:', ""Let's understand through an example."", 'The following are the examples of the relational expression:', ""Let's understand through an example"", ""Let's see another example."", ""In the above code, we have declared four variables, i.e., 'a', 'b', 'x' and 'y'. Then, we apply the relational operator (>=) between these variables."", 'The following are some examples of logical expressions:', ""Let's see a simple example of logical expression."", 'A bitwise expression is an expression which is used to manipulate the data at a bit level. They are basically used to shift the bits.', 'For example:', 'x>>3 // This statement means that we are shifting the three-bit position to the right.', ""Let's see a simple example."", ""Let's look at another example."", 'Special assignment expressions are the expressions which can be further classified depending upon the value assigned to the variable.', 'Chained assignment expression is an expression in which the same value is assigned to more than one variable by using single statement.', 'For example:', ""Let's understand through an example."", 'An embedded assignment expression is an assignment expression in which assignment expression is enclosed within another assignment expression.', ""Let's understand through an example."", ""In the above code, we have declared two variables, i.e., 'a' and 'b'. Then, we applied embedded assignment expression (a=10+(b=90))."", 'A compound assignment expression is an expression which is a combination of an assignment operator and binary operator.', 'For example,', ""In the above statement, 'a' is a variable and '+=' is a compound statement."", ""Let's understand through an example.""]","['In the above scenarios, the constant expression can have integer, character, and enumeration constants. We can use the static and extern keyword with the constants to define the function-scope.', ""In the above code, we have first declared the 'x' variable of integer type. After declaration, we assign the simple constant expression to the 'x' variable."", ""In the above code, we have declared three variables, i.e., x, y, and z. After declaration, we take the user input for the values of 'x' and 'y'. Then, we add the values of 'x' and 'y' and stores their result in 'z' variable."", ""In the above code, we have declared two variables, i.e., 'a' and 'b'. After declaration, we have applied the relational operator between the variables to check whether 'a' is greater than 'b' or not."", ""A logical expression is an expression that combines two or more relational expressions and produces a bool type value. The logical operators are '&&' and '||' that combines two or more relational expressions."", ""In the above example, the value of 'x' is 3 and its binary value is 0011. We are shifting the value of 'x' by three-bit position to the right. Let's understand through the diagrammatic representation."", ""In the above code, we have declared a variable 'x'. After declaration, we applied the bitwise operator, i.e., right shift operator to shift one-bit position to right."", ""In the above code, we have declared a variable 'x'. After declaration, we applied the left shift operator to variable 'x' to shift the three-bit position to the left."", ""In the above code, we have declared two variables, i.e., 'a' and 'b'. Then, we have assigned the same value to both the variables using chained assignment expression."", ""In the above code, we have declared a variable 'a' and assigns 10 value to this variable. Then, we applied compound assignment operator (+=) to 'a' variable, i.e., a+=10 which is equal to (a=a+10). This statement increments the value of 'a' by 10.""]","['A constant expression is an expression that consists of only constant values. It is an expression whose value is determined at the compile-time but evaluated at the run-time. It can be composed of integer, character, floating-point, and enumeration constants.', ""In the above code, we declare the array and a pointer ptr. We assign the base address to the variable 'ptr'. After assigning the address, we increment the value of pointer 'ptr'. When pointer is incremented then 'ptr' will be pointing to the second element of the array."", 'A relational expression is an expression that produces a value of type bool, which can be either true or false. It is also known as a boolean expression. When arithmetic expressions are used on both sides of the relational operator, arithmetic expressions are evaluated first, and then their results are compared.']","['(a+b) - c', '(x/y) -z', '4a2 - 5b +c', '(a+b) * (x+y)', '#include <iostream>', 'using namespace std;', 'int main()', 'int x;        // variable declaration.', 'x=(3/2) + 2;  // constant expression', 'cout<<""Value of x is : ""<<x;  // displaying the value of x.', 'return 0;', '(x * y) -5', 'x + int(9.0)', 'where x and y are the integers.', '#include <iostream>', 'using namespace std;', 'int main()', 'int x;  // variable declaration.', 'int y;  // variable declaration', 'int z;  // variable declaration', 'cout<<""Enter the values of x and y"";', 'cin>>x>>y;', 'z=x+y;', 'cout<<""\\n""<<""Value of z is :""<<z; //  displaying the value of z.', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int x;   // variable declaration', 'int y=9;    // variable initialization', 'x=y+int(10.0);    // integral expression', 'cout<<""Value of x : ""<<x;   // displaying the value of x.', 'return 0;', '(x/10) + y', 'x+float(10)', '#include <iostream>', 'using namespace std;', 'int main()', 'float x=8.9;      // variable initialization', 'float y=5.6;      // variable initialization', 'float z;             // variable declaration', 'z=x+y;', 'std::cout <<""value of z is :""  << z<<std::endl;  // displaying the value of z.', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'float x=6.7;    // variable initialization', 'float y;      // variable declaration', 'y=x+float(10);   // float expression', 'std::cout <<""value of y is :""  << y<<std::endl;  // displaying the value of y', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a[]={1,2,3,4,5};  // array initialization', 'int *ptr;       // pointer declaration', 'ptr=a;    // assigning base address of array to the pointer ptr', 'ptr=ptr+1;   // incrementing the value of pointer', 'std::cout <<""value of second element of an array : ""  << *ptr<<std::endl;', 'return 0;', 'a-b >= x-y', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=45;    // variable declaration', 'int b=78;    // variable declaration', 'bool y= a>b;   // relational expression', 'cout<<""Value of y is :""<<y;  // displaying the value of y.', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=4;     // variable declaration', 'int b=5;     // variable declaration', 'int x=3;     // variable declaration', 'int y=6;    // variable declaration', 'cout<<((a+b)>=(x+y));   // relational expression', 'return 0;', 'a>b && x>y', 'a>10 || b==5', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=2;', 'int b=7;', 'int c=4;', 'cout<<((a>b)||(a>c));', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int x=5;   // variable declaration', 'std::cout << (x>>1) << std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int x=7;   // variable declaration', 'std::cout << (x<<3) << std::endl;', 'return 0;', 'a=b=20', '(a=b) = 20', '#include <iostream>', 'using namespace std;', 'int main()', 'int a;   // variable declaration', 'int b;   // variable declaration', 'a=b=80;  // chained assignment', 'std::cout <<""Values of \'a\' and \'b\' are : "" <<a<<"",""<<b<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a;  // variable declaration', 'int b;  // variable declaration', 'a=10+(b=90);  // embedded assignment expression', 'std::cout <<""Values of \'a\' is "" <<a<< std::endl;', 'return 0;', 'a+=10;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=10;   // variable declaration', 'a+=10;    // compound assignment', 'std::cout << ""Value of a is :"" <<a<< std::endl; // displaying the value of a.', 'return 0;']","['Value of x is : 3', 'Enter the values of x and y', '8', '9', 'Value of z is :17', 'Value of x : 19', 'value of z is :14.5', 'value of y is :16.7', 'value of second element of an array : 2', 'Value of y is :0', '1', '0', '2', '56', ""Values of 'a' and 'b' are : 80,80"", ""Values of 'a' is 100"", 'Value of a is :20']",['Expression containing constant|||Constant value&&&x = (2/3) * 4|||(2/3) * 4&&&extern int y = 67|||67&&&int z = 43|||43&&&static int a = 56|||56'],['|||Constant expressions|||Integral expressions|||Float expressions|||Pointer expressions|||Relational expressions|||Logical expressions|||Bitwise expressions|||Special assignment expressions||||||Chained Assignment||||||Embedded Assignment Expression||||||Compound Assignment|||']
13,['C++ if-else'],"['In C++ programming, if statement is used to test the condition. There are various types of if statements in C++.']","['https://www.javatpoint.com/cpp-switch', 'https://www.javatpoint.com/cpp-expression', 'https://www.javatpoint.com/cpp-switch', 'https://www.javatpoint.com/cpp-expression', 'https://www.javatpoint.com/cpp-switch']","['https://static.javatpoint.com/cpp/images/cpp-if-else1.png', 'https://static.javatpoint.com/cpp/images/cpp-if-else2.png', 'https://static.javatpoint.com/cpp/images/cpp-if-else3.png']",[],"['C++ IF Statement', 'C++ If Example', 'C++ IF-else Statement', 'C++ If-else Example', 'C++ If-else Example: with input from user', 'C++ IF-else-if ladder Statement', 'C++ If else-if Example']",[],[],"['The C++ if statement tests the condition. It is executed if condition is true.', 'The C++ if-else statement also tests the condition. It executes if block if condition is true otherwise else block is executed.', 'The C++ if-else-if ladder statement executes one condition from multiple statements.']",[],"['Output:/p>\nIt is even number\n\n\nC++ IF-else Statement\nThe C++ if-else statement also tests the condition. It executes if block if condition is true otherwise else block is executed.\n\nif(condition){  \n//code if condition is true  \n}else{  \n//code if condition is false  \n}  \n\n\n\nC++ If-else Example\n\n#include <iostream>\nusing namespace std;\nint main () {\n   int num = 11;  \n            if (num % 2 == 0)  \n            {  \n                cout<<""It is even number"";  \n            } \n            else\n            {  \n                cout<<""It is odd number"";  \n            }\n   return 0;\n}\n\nOutput:\nIt is odd number\n\n\nC++ If-else Example: with input from user\n\n#include \nusing namespace std;\nint main () {\n    int num;\n    cout<<""Enter a Number: "";\n    cin>>num;\n            if (num % 2 == 0)  \n            {  \n                cout<<""It is even number""<<endl;  \n            } \n            else\n            {  \n                cout<<""It is odd number""<<endl;  \n            }\n   return 0;\n}\n\nOutput:\nEnter a number:11\nIt is odd number\n\nOutput:\nEnter a number:12\nIt is even number\n\n\nC++ IF-else-if ladder Statement\nThe C++ if-else-if ladder statement executes one condition from multiple statements.\n\nif(condition1){  \n//code to be executed if condition1 is true  \n}else if(condition2){  \n//code to be executed if condition2 is true  \n}  \nelse if(condition3){  \n//code to be executed if condition3 is true  \n}  \n...  \nelse{  \n//code to be executed if all the conditions are false  \n}  \n\n\n\nC++ If else-if Example\n\n#include <iostream>\nusing namespace std;\nint main () {\n       int num;\n       cout<<""Enter a number to check grade:"";  \n       cin>>num;\n            if (num <0 || num >100)  \n            {  \n                cout<<""wrong number"";  \n            }  \n            else if(num >= 0 && num < 50){  \n                cout<<""Fail"";  \n            }  \n            else if (num >= 50 && num < 60)  \n            {  \n                cout<<""D Grade"";  \n            }  \n            else if (num >= 60 && num < 70)  \n            {  \n                cout<<""C Grade"";  \n            }  \n            else if (num >= 70 && num < 80)  \n            {  \n                cout<<""B Grade"";  \n            }  \n            else if (num >= 80 && num < 90)  \n            {  \n                cout<<""A Grade"";  \n            }  \n            else if (num >= 90 && num <= 100)  \n            {  \n                cout<<""A+ Grade"";\n            }  \n    }  \n\n\nOutput:\nEnter a number to check grade:66\nC Grade\n\nOutput:\nEnter a number to check grade:-2\nwrong number\n\n\n\nNext TopicC++ switch\n\n\n\n← prev\nnext →\n\n\n']","['if(condition){', '#include <iostream>', 'using namespace std;', 'int main () {', 'int num = 10;', 'if (num % 2 == 0)', '{', 'cout<<""It is even number"";', '}', 'return 0;', 'if(condition){', '}else{', '#include <iostream>', 'using namespace std;', 'int main () {', 'int num = 11;', 'if (num % 2 == 0)', '{', 'cout<<""It is even number"";', '}', 'else', '{', 'cout<<""It is odd number"";', '}', 'return 0;', '#include', 'using namespace std;', 'int main () {', 'int num;', 'cout<<""Enter a Number: "";', 'cin>>num;', 'if (num % 2 == 0)', '{', 'cout<<""It is even number""<<endl;', '}', 'else', '{', 'cout<<""It is odd number""<<endl;', '}', 'return 0;', 'if(condition1){', '}else if(condition2){', 'else if(condition3){', '#include <iostream>', 'using namespace std;', 'int main () {', 'int num;', 'cout<<""Enter a number to check grade:"";', 'cin>>num;', 'if (num <0 || num >100)', '{', 'cout<<""wrong number"";', '}', 'else if(num >= 0 && num < 50){', 'cout<<""Fail"";', '}', 'else if (num >= 50 && num < 60)', '{', 'cout<<""D Grade"";', '}', 'else if (num >= 60 && num < 70)', '{', 'cout<<""C Grade"";', '}', 'else if (num >= 70 && num < 80)', '{', 'cout<<""B Grade"";', '}', 'else if (num >= 80 && num < 90)', '{', 'cout<<""A Grade"";', '}', 'else if (num >= 90 && num <= 100)', '{', 'cout<<""A+ Grade"";', '}']","['It is even number', 'It is odd number', 'Enter a number:11\nIt is odd number', 'Enter a number:12\nIt is even number', 'Enter a number to check grade:66\nC Grade', 'Enter a number to check grade:-2\nwrong number']",[],['|||if statement|||if-else statement|||nested if statement|||if-else-if ladder|||']
14,['C++ switch'],['The C++ switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement in C++.'],"['https://www.javatpoint.com/cpp-for-loop', 'https://www.javatpoint.com/cpp-if-else', 'https://www.javatpoint.com/cpp-for-loop', 'https://www.javatpoint.com/cpp-if-else', 'https://www.javatpoint.com/cpp-for-loop']",['https://static.javatpoint.com/cpp/images/cpp-switch1.png'],[],['C++ Switch Example'],[],[],[],[],[],"['switch(expression){', 'case value1:', 'break;', 'case value2:', 'break;', '......', 'default:', 'break;', '#include <iostream>', 'using namespace std;', 'int main () {', 'int num;', 'cout<<""Enter a number to check grade:"";', 'cin>>num;', 'switch (num)', '{', 'case 10: cout<<""It is 10""; break;', 'case 20: cout<<""It is 20""; break;', 'case 30: cout<<""It is 30""; break;', 'default: cout<<""Not 10, 20 or 30""; break;', '}']","['Enter a number:\n10\nIt is 10', 'Enter a number:\n55\nNot 10, 20 or 30']",[],[]
15,['C++ For Loop'],"['The C++ for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop than while or do-while loops.']","['https://www.javatpoint.com/cpp-while-loop', 'https://www.javatpoint.com/cpp-switch', 'https://www.javatpoint.com/cpp-while-loop', 'https://www.javatpoint.com/cpp-switch', 'https://www.javatpoint.com/cpp-while-loop']",['https://static.javatpoint.com/cpp/images/cpp-for-loop1.png'],[],"['C++ For Loop Example', 'C++ Nested For Loop', 'C++ Nested For Loop Example', 'C++ Infinite For Loop']",[],[],"['The C++ for loop is same as C/C#. We can initialize variable, check condition and increment/decrement value.', 'Flowchart:', ""Let's see a simple example of nested for loop in C++."", ""If we use double semicolon in for loop, it will be executed infinite times. Let's see a simple example of infinite for loop in C++.""]",[],"['In C++, we can use for loop inside another for loop, it is known as nested for loop. The inner loop is executed fully when outer loop is executed one time. So if outer loop and inner loop are executed 4 times, inner loop will be executed 4 times for each outer loop i.e. total 16 times.']","['for(initialization; condition; incr/decr){', '#include <iostream>', 'using namespace std;', 'int main() {', 'for(int i=1;i<=10;i++){', 'cout<<i <<""\\n"";', '}', '#include <iostream>', 'using namespace std;', 'int main () {', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'cout<<i<<"" ""<<j<<""\\n"";', '}', '}', '#include', 'using namespace std;', 'int main () {', 'for (; ;)', '{', 'cout<<""Infinitive For Loop"";', '}']","['1\n2\n3\n4\n5\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3', 'Infinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nctrl+c']",[],[]
16,['C++ While loop'],"['In C++, while loop is used to iterate a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop than for loop.']","['https://www.javatpoint.com/cpp-do-while-loop', 'https://www.javatpoint.com/cpp-for-loop', 'https://www.javatpoint.com/cpp-do-while-loop', 'https://www.javatpoint.com/cpp-for-loop', 'https://www.javatpoint.com/cpp-do-while-loop']",['https://static.javatpoint.com/cpp/images/cpp-while-loop1.png'],[],"['C++ While Loop Example', 'C++ Nested While Loop Example', 'C++ Infinitive While Loop Example:']",[],[],"['Flowchart:', ""Let's see a simple example of while loop to print table of 1."", ""Let's see a simple example of nested while loop in C++ programming language."", 'We can also create infinite while loop by passing true as the test condition.']","['In C++, we can use while loop inside another while loop, it is known as nested while loop. The nested while loop is executed fully when outer loop is executed once.']",[],"['while(condition){', '#include <iostream>', 'using namespace std;', 'int main() {', 'int i=1;', 'while(i<=10)', '{', 'cout<<i <<""\\n"";', 'i++;', '}', '#include <iostream>', 'using namespace std;', 'int main () {', 'int i=1;', 'while(i<=3)', '{', 'int j = 1;', 'while (j <= 3)', 'cout<<i<<"" ""<<j<<""\\n"";', 'j++;', '}', 'i++;', '}', '#include <iostream>', 'using namespace std;', 'int main () {', 'while(true)', '{', 'cout<<""Infinitive While Loop"";', '}']","['1\n2\n3\n4\n5\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3', 'Infinitive While Loop \nInfinitive While Loop\nInfinitive While Loop\nInfinitive While Loop\nInfinitive While Loop\nctrl+c']",[],[]
17,['C++ Do-While Loop'],"['The C++ do-while loop is used to iterate a part of the program several times. If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use do-while loop.']","['https://www.javatpoint.com/cpp-break-statement', 'https://www.javatpoint.com/cpp-while-loop', 'https://www.javatpoint.com/cpp-break-statement', 'https://www.javatpoint.com/cpp-while-loop', 'https://www.javatpoint.com/cpp-break-statement']",['https://static.javatpoint.com/cpp/images/cpp-do-while-loop1.png'],[],"['C++ do-while Loop Example', 'C++ Infinitive do-while Loop', 'C++ Infinitive do-while Loop Example']",[],[],"['The C++ do-while loop is executed at least once because condition is checked after loop body.', 'Flowchart:', ""Let's see a simple example of C++ do-while loop to print the table of 1."", ""Let's see a simple example of nested do-while loop in C++."", 'In C++, if you pass true in the do-while loop, it will be infinitive do-while loop.']","['In C++, if you use do-while loop inside another do-while loop, it is known as nested do-while loop. The nested do-while loop is executed fully for each outer do-while loop.']",[],"['}while(condition);', '#include <iostream>', 'using namespace std;', 'int main() {', 'int i = 1;', 'do{', 'cout<<i<<""\\n"";', 'i++;', '} while (i <= 10) ;', '#include <iostream>', 'using namespace std;', 'int main() {', 'int i = 1;', 'do{', 'int j = 1;', 'do{', 'cout<<i<<""\\n"";', 'j++;', '} while (j <= 3) ;', 'i++;', '} while (i <= 3) ;', '}while(true);', '#include <iostream>', 'using namespace std;', 'int main() {', 'do{', 'cout<<""Infinitive do-while Loop"";', '} while(true);']","['1\n2\n3\n4\n5\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3', 'Infinitive do-while Loop \nInfinitive do-while Loop\nInfinitive do-while Loop\nInfinitive do-while Loop\nInfinitive do-while Loop\nctrl+c']",[],[]
18,['C++ Break Statement'],"['The C++ break is used to break loop or switch statement. It breaks the current flow of the program at the given condition. In case of inner loop, it breaks only inner loop.']","['https://www.javatpoint.com/cpp-continue-statement', 'https://www.javatpoint.com/cpp-do-while-loop', 'https://www.javatpoint.com/cpp-continue-statement', 'https://www.javatpoint.com/cpp-do-while-loop', 'https://www.javatpoint.com/cpp-continue-statement']",['https://static.javatpoint.com/cpp/images/cpp-break-statement1.png'],[],"['C++ Break Statement Example', 'C++ Break Statement with Inner Loop']",[],[],"['Flowchart:', ""Let's see a simple example of C++ break statement which is used inside the loop."", 'The C++ break statement breaks inner loop only if you use break statement inside the inner loop.', ""Let's see the example code:""]",[],[],"['jump-statement;', '#include <iostream>', 'using namespace std;', 'int main() {', 'for (int i = 1; i <= 10; i++)', '{', 'if (i == 5)', '{', 'break;', '}', 'cout<<i<<""\\n"";', '}', '#include <iostream>', 'using namespace std;', 'int main()', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'break;', '}', 'cout<<i<<"" ""<<j<<""\\n"";', '}', '}']","['1\n2\n3\n4', '1 1\n1 2\n1 3\n2 1\n3 1\n3 2\n3 3']",[],[]
19,['C++ Continue Statement'],"['The C++ continue statement is used to continue loop. It continues the current flow of the program and skips the remaining code at specified condition. In case of inner loop, it continues only inner loop.']","['https://www.javatpoint.com/cpp-goto-statement', 'https://www.javatpoint.com/cpp-break-statement', 'https://www.javatpoint.com/cpp-goto-statement', 'https://www.javatpoint.com/cpp-break-statement', 'https://www.javatpoint.com/cpp-goto-statement']",[],[],"['C++ Continue Statement Example', 'C++ Continue Statement with Inner Loop']",[],[],['C++ Continue Statement continues inner loop only if you use continue statement inside the inner loop.'],[],[],"['jump-statement;', 'continue;', '#include <iostream>', 'using namespace std;', 'int main()', 'for(int i=1;i<=10;i++){', 'if(i==5){', 'continue;', '}', 'cout<<i<<""\\n"";', '}', '#include <iostream>', 'using namespace std;', 'int main()', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'continue;', '}', 'cout<<i<<"" ""<<j<<""\\n"";', '}', '}']","['1\n2\n3\n4\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 3\n3 1\n3 2\n3 3']",[],[]
20,['C++ Goto Statement'],['The C++ goto statement is also known as jump statement. It is used to transfer control to the other part of the program. It unconditionally jumps to the specified label.'],"['https://www.javatpoint.com/cpp-comments', 'https://www.javatpoint.com/cpp-continue-statement', 'https://www.javatpoint.com/cpp-comments', 'https://www.javatpoint.com/cpp-continue-statement', 'https://www.javatpoint.com/cpp-comments']",[],[],['C++ Goto Statement Example'],[],[],"['It can be used to transfer control from deeply nested loop or switch case label.', ""Let's see the simple example of goto statement in C++.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'ineligible:', 'cout<<""You are not eligible to vote!\\n"";', 'cout<<""Enter your age:\\n"";', 'int age;', 'cin>>age;', 'if (age < 18){', 'goto ineligible;', '}', 'else', '{', 'cout<<""You are eligible to vote!"";', '}']",['You are not eligible to vote!\nEnter your age:\n16\nYou are not eligible to vote!\nEnter your age:\n7\nYou are not eligible to vote!\nEnter your age:\n22\nYou are eligible to vote!'],[],[]
21,['C++ Comments'],"['The C++ comments are statements that are not executed by the compiler. The comments in C++ programming can be used to provide explanation of the code, variable, method or class. By the help of comments, you can hide the program code also.']","['https://www.javatpoint.com/cpp-arrays', 'https://www.javatpoint.com/cpp-goto-statement', 'https://www.javatpoint.com/cpp-arrays', 'https://www.javatpoint.com/cpp-goto-statement', 'https://www.javatpoint.com/cpp-arrays']",[],[],"['C++ Single Line Comment', 'C++ Multi Line Comment']",[],[],"['There are two types of comments in C++.', ""The single line comment starts with // (double slash). Let's see an example of single line comment in C++.""]","[""The C++ multi line comment is used to comment multiple lines of code. It is surrounded by slash and asterisk (/∗ ..... ∗/). Let's see an example of multi line comment in C++.""]",[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int x = 11; // x is a variable', 'cout<<x<<""\\n"";', '#include <ostream>', 'using namespace std;', 'int main()', '/* declare and', 'print variable in C++. */', 'int x = 35;', 'cout<<x<<""\\n"";']","['11', '35']",[],['|||Single Line comment|||Multi Line comment|||']
22,['C++ Functions'],['The function in C++ language is also known as procedure or subroutine in other programming languages.'],"['https://www.javatpoint.com/call-by-value-and-call-by-reference-in-cpp', 'https://www.javatpoint.com/cpp-comments', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-cpp', 'https://www.javatpoint.com/cpp-comments', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-cpp']",['https://static.javatpoint.com/cpp/images/cpp-functions1.png'],[],"['Advantage of functions in C', 'Types of Functions', 'Declaration of a function', 'C++ Function Example']",[],[],"['To perform any task, we can create function. A function can be called many times. It provides modularity and code reusability.', 'There are many advantages of functions.', '1) Code Reusability', ""By creating functions in C++, you can call it many times. So we don't need to write the same code again and again."", '2) Code optimization', ""It makes the code optimized, we don't need to write much code."", 'But if you use functions, you need to write the logic only once and you can reuse it several times.', 'There are two types of functions in C programming:', '1. Library Functions: are the functions which are declared in the C++ header files such as ceil(x), cos(x), exp(x), etc.', 'The syntax of creating function in C++ language is given below:', ""Let's see the simple example of C++ function.""]","['Suppose, you have to check 3 numbers (531, 883 and 781) whether it is prime number or not. Without using function, you need to write the prime number logic 3 times. So, there is repetition of code.', '2. User-defined functions: are the functions which are created by the C++ programmer, so that he/she can use it many times. It reduces complexity of a big program and optimizes the code.']",[],"['return_type function_name(data_type parameter...)', '#include <iostream>', 'using namespace std;', 'void func() {', 'static int i=0; //static variable', 'int j=0; //local variable', 'i++;', 'j++;', 'cout<<""i="" << i<<"" and j="" <<j<<endl;', 'int main()', 'func();', 'func();', 'func();']",['i= 1 and j= 1\ni= 2 and j= 1\ni= 3 and j= 1'],[],[]
23,['Call by value and call by reference in C++'],['There are two ways to pass value or data to function in C language: call by value and call by reference. Original value is not modified in call by value but it is modified in call by reference.'],"['https://www.javatpoint.com/cpp-recursion', 'https://www.javatpoint.com/cpp-functions', 'https://www.javatpoint.com/cpp-recursion', 'https://www.javatpoint.com/cpp-functions', 'https://www.javatpoint.com/cpp-recursion']",['https://static.javatpoint.com/cpp/images/call-by-value-and-call-by-reference-in-cpp1.png'],[],"['Call by value in C++', 'Call by reference in C++', 'Difference between call by value and call by reference in C++']",[],[],"[""Let's understand call by value and call by reference in C++ language one by one."", 'In call by value, original value is not modified.', ""Let's try to understand the concept of call by value in C++ language by the example given below:"", 'In call by reference, original value is modified because we pass reference (address).', 'Note: To understand the call by reference, you must have the basic knowledge of pointers.', ""Let's try to understand the concept of call by reference in C++ language by the example given below:""]","['Here, address of the value is passed in the function, so actual and formal arguments share the same address space. Hence, value changed inside the function, is reflected inside as well as outside the function.']","['In call by value, value being passed to the function is locally stored by the function parameter in stack memory location. If you change the value of function parameter, it is changed for the current function only. It will not change the value of variable inside the caller method such as main().']","['#include <iostream>', 'using namespace std;', 'void change(int data);', 'int main()', 'int data = 3;', 'change(data);', 'cout << ""Value of the data is: "" << data<< endl;', 'return 0;', 'void change(int data)', 'data = 5;', '#include<iostream>', 'using namespace std;', 'void swap(int *x, int *y)', 'int swap;', 'swap=*x;', '*y=swap;', 'int main()', 'int x=500, y=100;', 'swap(&x, &y);  // passing value to function', 'cout<<""Value of x is: ""<<x<<endl;', 'cout<<""Value of y is: ""<<y<<endl;', 'return 0;']","['Value of the data is: 3', 'Value of x is: 100\nValue of y is: 500']",['No.|||Call by value|||Call by reference&&&1|||A copy of value is passed to the function|||An address of value is passed to the function&&&2|||Changes made inside the function is not reflected on other functions|||Changes made inside the function is reflected outside the function also&&&3|||Actual and formal arguments will be created in different memory location|||Actual and formal arguments will be created in same memory location'],[]
24,['C++ Recursion'],"['When function is called within the same function, it is known as recursion in C++. The function which calls the same function, is known as recursive function.']","['https://www.javatpoint.com/cpp-storage-classes', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-cpp', 'https://www.javatpoint.com/cpp-storage-classes', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-cpp', 'https://www.javatpoint.com/cpp-storage-classes']",['https://static.javatpoint.com/cpp/images/cpp-recursion1.png'],[],['C++ Recursion Example'],[],[],"[""Let's see a simple example of recursion."", ""Let's see an example to print factorial number using recursion in C++ language."", 'We can understand the above program of recursive method call by the figure given below:']","[""A function that calls itself, and doesn't perform any task after function call, is known as tail recursion. In tail recursion, we generally call the same function with return statement.""]",[],"['recursionfunction(){', 'recursionfunction(); //calling self function', '#include<iostream>', 'using namespace std;', 'int main()', 'int factorial(int);', 'int fact,value;', 'cout<<""Enter any number: "";', 'cin>>value;', 'fact=factorial(value);', 'cout<<""Factorial of a number is: ""<<fact<<endl;', 'return 0;', 'int factorial(int n)', 'return(-1); /*Wrong value*/', 'if(n==0)', 'return(1);  /*Terminating condition*/', 'return(n*factorial(n-1));']",['Enter any number: 5\nFactorial of a number is: 120'],[],[]
25,['C++ Storage Classes'],['Storage class is used to define the lifetime and visibility of a variable and/or function within a C++ program.'],"['https://www.javatpoint.com/cpp-arrays', 'https://www.javatpoint.com/cpp-recursion', 'https://www.javatpoint.com/cpp-arrays', 'https://www.javatpoint.com/cpp-recursion', 'https://www.javatpoint.com/cpp-arrays']",[],[],"['Automatic Storage Class', 'Register Storage Class', 'Static Storage Class', 'External Storage Class']",[],[],"['There are five types of storage classes, which can be used in a C++ program', 'It is the default storage class for all local variables. The auto keyword is applied to all local variables automatically.', 'The above example defines two variables with a same storage class, auto can only be used within functions.', 'The register variable allocates memory in register than RAM. Its size is same of register size. It has a faster access than other variables.', 'It is recommended to use register variable only for quick access such as in counter.', ""Note: We can't get the address of register variable."", 'The static variable is initialized only once and exists till the end of a program. It retains its value between multiple functions call.', 'The static variable has the default value 0 which is provided by compiler.', 'The extern variable is visible to all the programs. It is used if two or more files are sharing same variable or function.']",['Lifetime refers to the period during which the variable remains active and visibility refers to the module of a program in which the variable is accessible.'],[],"['auto int y;', 'float y = 3.45;', 'register int counter=0;', '#include <iostream>', 'using namespace std;', 'void func() {', 'static int i=0; //static variable', 'int j=0; //local variable', 'i++;', 'j++;', 'cout<<""i="" << i<<"" and j="" <<j<<endl;', 'int main()', 'func();', 'func();', 'func();', 'extern int counter=0;']",['i= 1 and j= 1\ni= 2 and j= 1\ni= 3 and j= 1'],['Storage Class|||Keyword|||Lifetime|||Visibility|||Initial Value&&&Automatic|||auto|||Function Block|||Local|||Garbage&&&Register|||register|||Function Block|||Local|||Garbage&&&Mutable|||mutable|||Class|||Local|||Garbage&&&External|||extern|||Whole Program|||Global|||Zero&&&Static|||static|||Whole Program|||Local|||Zero'],['|||Automatic|||Register|||Static|||External|||Mutable|||']
26,['C++ Arrays'],"['Like other programming languages, array in C++ is a group of similar types of elements that have contiguous memory location.']","['https://www.javatpoint.com/cpp-passing-array-to-function', 'https://www.javatpoint.com/cpp-comments', 'https://www.javatpoint.com/cpp-passing-array-to-function', 'https://www.javatpoint.com/cpp-comments', 'https://www.javatpoint.com/cpp-passing-array-to-function']",['https://static.javatpoint.com/cpp/images/c-array1.png'],[],"['Advantages of C++ Array', 'Disadvantages of C++ Array', 'C++ Array Types', 'C++ Single Dimensional Array', 'C++ Array Example: Traversal using foreach loop']",[],[],"['There are 2 types of arrays in C++ programming:', ""Let's see a simple example of C++ array, where we are going to create, initialize and traverse array."", 'We can also traverse the array elements using foreach loop. It returns array element one by one.']","['In C++ std::array is a container that encapsulates fixed size arrays. In C++, array index starts from 0. We can store only fixed set of elements in C++ array.']","['Output:/p>\n10\n0\n20\n0\n30\n\n\nC++ Array Example: Traversal using foreach loop\nWe can also traverse the array elements using foreach loop. It returns array element one by one.\n\n#include <iostream>\nusing namespace std;\nint main()\n{\n int arr[5]={10, 0, 20, 0, 30}; //creating and initializing array  \n        //traversing array  \n       for (int i: arr)   \n        {  \n            cout<<i<<""\\n"";  \n        }  \n}\n\nOutput:\n10\n20\n30\n40\n50\n\n\nNext TopicC++ Passing Array to Function\n\n\n\n← prev\nnext →\n\n\n']","['#include <iostream>', 'using namespace std;', 'int main()', 'int arr[5]={10, 0, 20, 0, 30};  //creating and initializing array', 'for (int i = 0; i < 5; i++)', '{', 'cout<<arr[i]<<""\\n"";', '}', '#include <iostream>', 'using namespace std;', 'int main()', 'int arr[5]={10, 0, 20, 0, 30}; //creating and initializing array', 'for (int i: arr)', '{', 'cout<<i<<""\\n"";', '}']","['10\n0\n20\n0\n30', '10\n20\n30\n40\n50']",[],['|||Code Optimization (less code)|||Random Access|||Easy to traverse data|||Easy to manipulate data|||Easy to sort data etc.||||||Fixed size|||&&&|||Single Dimensional Array|||Multidimensional Array|||']
27,['C++ Passing Array to Function'],"['In C++, to reuse the array logic, we can create function. To pass array to function in C++, we need to provide only array name.']","['https://www.javatpoint.com/cpp-multidimensional-array', 'https://www.javatpoint.com/cpp-arrays', 'https://www.javatpoint.com/cpp-multidimensional-array', 'https://www.javatpoint.com/cpp-arrays', 'https://www.javatpoint.com/cpp-multidimensional-array']",[],[],"['C++ Passing Array to Function Example: print array elements', 'C++ Passing Array to Function Example: Print minimum number', 'C++ Passing Array to Function Example: Print maximum number']",[],[],"[""Let's see an example of C++ function which prints the array elements."", ""Let's see an example of C++ array which prints minimum number in an array using function."", ""Let's see an example of C++ array which prints maximum number in an array using function.""]",[],[],"['functionname(arrayname); //passing array to function', '#include <iostream>', 'using namespace std;', 'void printArray(int arr[5]);', 'int main()', 'int arr1[5] = { 10, 20, 30, 40, 50 };', 'int arr2[5] = { 5, 15, 25, 35, 45 };', 'printArray(arr1); //passing array to function', 'printArray(arr2);', 'void printArray(int arr[5])', 'cout << ""Printing array elements:""<< endl;', 'for (int i = 0; i < 5; i++)', 'cout<<arr[i]<<""\\n"";', '#include', 'using namespace std;', 'void  printMin(int arr[5]);', 'int main()', 'int arr1[5] = { 30, 10, 20, 40, 50 };', 'int arr2[5] = { 5, 15, 25, 35, 45 };', 'printMin(arr1);//passing array to function', 'printMin(arr2);', 'void  printMin(int arr[5])', 'int min = arr[0];', 'for (int i = 0; i > 5; i++)', '{', 'if (min > arr[i])', '{', 'min = arr[i];', '}', '}', 'cout<< ""Minimum element is: ""<< min <<""\\n"";', '#include <iostream>', 'using namespace std;', 'void  printMax(int arr[5]);', 'int main()', 'int arr1[5] = { 25, 10, 54, 15, 40 };', 'int arr2[5] = { 12, 23, 44, 67, 54 };', 'printMax(arr1); //Passing array to function', 'printMax(arr2);', 'void  printMax(int arr[5])', 'int max = arr[0];', 'for (int i = 0; i < 5; i++)', '{', 'if (max < arr[i])', '{', 'max = arr[i];', '}', '}', 'cout<< ""Maximum element is: ""<< max <<""\\n"";']","['Printing array elements:                                                              \n10                                                                                    \n20                                                                                    \n30                                                                                    \n40                                                                                    \n50                                                                                    \nPrinting array elements:                                                              \n5                                                                                     \n15                                                                                    \n25                                                                                    \n35                                                                                    \n45', 'Minimum element is: 10                                                                \nMinimum element is: 5', 'Maximum element is: 54\nMaximum element is: 67']",[],[]
28,['C++ Multidimensional Arrays'],['The multidimensional array is also known as rectangular arrays in C++. It can be two dimensional or three dimensional. The data is stored in tabular form (row ∗ column) which is also known as matrix.'],"['https://www.javatpoint.com/cpp-pointers', 'https://www.javatpoint.com/cpp-passing-array-to-function', 'https://www.javatpoint.com/cpp-pointers', 'https://www.javatpoint.com/cpp-passing-array-to-function', 'https://www.javatpoint.com/cpp-pointers']",[],[],"['C++ Multidimensional Array Example', 'C++ Multidimensional Array Example: Declaration and initialization at same time']",[],[],"[""Let's see a simple example of multidimensional array in C++ which declares, initializes and traverse two dimensional arrays."", ""Let's see a simple example of multidimensional array which initializes array at the time of declaration.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int test[3][3];  //declaration of 2D array', 'test[0][0]=5;  //initialization', 'test[0][1]=10;', 'test[1][1]=15;', 'test[1][2]=20;', 'test[2][0]=30;', 'test[2][2]=10;', 'for(int i = 0; i < 3; ++i)', 'for(int j = 0; j < 3; ++j)', '{', 'cout<< test[i][j]<<"" "";', '}', 'cout<<""\\n""; //new line at each row', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int test[3][3] =', '{2, 5, 5},', '{4, 0, 3},', '{9, 1, 8}  };  //declaration and initialization', 'for(int i = 0; i < 3; ++i)', 'for(int j = 0; j < 3; ++j)', '{', 'cout<< test[i][j]<<"" "";', '}', 'cout<<""\\n""; //new line at each row', 'return 0;']","['5 10 0 \n0 15 20 \n30 0 10', '2 5 5 \n4 0 3 \n9 1 8']",[],[]
29,['C++ Pointers'],"['The pointer in C++ language is a variable, it is also known as locator or indicator that points to an address of a value.']","['https://www.javatpoint.com/sizeof-operator-in-cpp', 'https://www.javatpoint.com/cpp-multidimensional-array', 'https://www.javatpoint.com/sizeof-operator-in-cpp', 'https://www.javatpoint.com/cpp-multidimensional-array', 'https://www.javatpoint.com/sizeof-operator-in-cpp']",['https://static.javatpoint.com/cpp/images/cpp-pointers1.png'],[],"['Symbols used in pointer', 'Declaring a pointer', 'Pointer Example', 'Pointer Program to swap 2 numbers without using 3rd variable']",[],[],"['Advantage of pointer', '2) We can return multiple values from function using pointer.', ""3) It makes you able to access any memory location in the computer's memory."", 'Usage of pointer', 'There are many usage of pointers in C++ language.', '1) Dynamic memory allocation', 'In c language, we can dynamically allocate memory using malloc() and calloc() functions where pointer is used.', '2) Arrays, Functions and Structures', 'Pointers in c language are widely used in arrays, functions and structures. It reduces the code and improves the performance.', 'The pointer in C++ language can be declared using ∗ (asterisk symbol).', ""Let's see the simple example of using pointers printing the address and value.""]","['1) Pointer reduces the code and improves the performance, it is used to retrieving strings, trees etc. and used with\narrays, structures and functions.']",[],"['int ∗\ta; //pointer to int', 'char ∗\tc; //pointer to char', '#include <iostream>', 'using namespace std;', 'int main()', 'int number=30;', 'int ∗\tp;', 'p=&number//stores the address of number variable', 'cout<<""Address of number variable is:""<<&number<<endl;', 'cout<<""Address of p variable is:""<<p<<endl;', 'cout<<""Value of p variable is:""<<*p<<endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=20,b=10,∗p1=&a,∗p2=&b', 'cout<<""Before swap: ∗p1=""<<∗p1<<"" ∗p2=""<<∗p2<<endl;', '∗p1=∗p1+∗p2;', '∗p2=∗p1-∗p2;', '∗p1=∗p1-∗p2;', 'cout<<""After swap: ∗p1=""<<∗p1<<"" ∗p2=""<<∗p2<<endl;', 'return 0;']","['Address of number variable is:0x7ffccc8724c4\nAddress of p variable is:0x7ffccc8724c4\nValue of p variable is:30', 'Before swap: ∗p1=20 ∗p2=10\nAfter swap: ∗p1=10 ∗p2=20']",['Symbol|||Name|||Description&&&& (ampersand sign)|||Address operator|||Determine the address of a variable.&&&∗ (asterisk sign)|||Indirection operator|||Access the value of an address.'],[]
30,['sizeof() operator in C++'],"['The sizeof() is an operator that evaluates the size of data type, constants, variable. It is a compile-time operator as it returns the size of any variable or a constant at the compilation time.']","['https://www.javatpoint.com/cpp-array-of-pointers', 'https://www.javatpoint.com/cpp-pointers', 'https://www.javatpoint.com/cpp-array-of-pointers', 'https://www.javatpoint.com/cpp-pointers', 'https://www.javatpoint.com/cpp-array-of-pointers']","['https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp1.png', 'https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp3.png', 'https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp4.png', 'https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp5.png', 'https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp6.png', 'https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp7.png', 'https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp8.png']",[],[],[],[],"['The size, which is calculated by the sizeof() operator, is the amount of RAM occupied in the computer.', 'Syntax of the sizeof() operator is given below:', 'In the above syntax, the data_type can be the data type of the data, variables, constants, unions, structures, or any other user-defined data type.', 'The sizeof () operator can be applied to the following operand types:', 'If the parameter of a sizeof() operator contains the data type of a variable, then the sizeof() operator will return the size of the data type.', ""Let's understand this scenario through an example."", 'If we add one more integer variable in a class, then the code would look like:', 'If we add a char variable in the above code, then the code would look like:', ""Let's consider another scenario of an array.""]","['In the above program, we have evaluated the size of the class, which is having a single integer variable. The output would be 4 bytes as int variable occupies 4 bytes.', 'In the above code, we have added one more integer variable. In this case, the size of the class would be 8 bytes as int variable occupies 4 bytes, so two integer variables occupy 8 bytes.', 'In the above code, the class has two integer variables, and one char variable. According to our calculation, the size of the class would be equal to 9 bytes (int+int+char), but this is wrong due to the concept of structure padding.']","['In the above program, we have evaluated the size of the in-built data types by using the sizeof() operator. As we know that int occupies 4 bytes, float occupies 4 bytes, double occupies 8 bytes, and char occupies 1 byte, and the same result is shown by the sizeof() operator as we can observe in the following output.', 'In the above program, we have declared an array of integer type which contains five elements. We have evaluated the size of the array by using sizeof() operator. According to our calculation, the size of the array should be 20 bytes as int data type occupies 4 bytes, and array contains 5 elements, so total memory space occupied by this array is 5*4 = 20 bytes. The same result has been shown by the sizeof() operator as we can observe in the following output.', ""In the above program, we have tried to print the size of the array using the function. In this case, we have created an array of type integer, and we pass the 'arr' to the function fun(). The fun() would return the size of the integer pointer, i.e., int*, and the size of the int* is 8 bytes in the 64-bit operating system."", ""In the above program, we have determined the size of pointers. The size of pointers would remain same for all the data types. If the computer has 32bit operating system, then the size of the pointer would be 4 bytes. If the computer has 64-bit operating system, then the size of the pointer would be 8 bytes. I am running this program on 64-bit, so the output would be 8 bytes. Now, if we provide the '*' symbol to the pointer, then the output depends on the data type, for example, *ptr1 is of integer type means the sizeof() operator will return 4 bytes as int data type occupies 4 bytes."", 'In the above program, we have declared two variables num1 and num2 of type int and double, respectively. The size of the int is 4 bytes, while the size of double is 8 bytes. The result would be the variable, which is of double type occupying 8 bytes.']","['sizeof(data_type);', '#include <iostream>', 'using namespace std;', 'int main()', 'std::cout << ""Size of integer data type : "" <<sizeof(int)<< std::endl;', 'std::cout << ""Size of float data type : "" <<sizeof(float)<< std::endl;', 'std::cout << ""Size of double data type : "" <<sizeof(double)<< std::endl;', 'std::cout << ""Size of char data type : "" <<sizeof(char)<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Base', 'int main()', 'Base b;', 'std::cout << ""Size of class base is : ""<<sizeof(b) << std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Base', 'int a;', 'int d;', 'int main()', 'Base b;', 'std::cout << ""Size of class base is : ""<<sizeof(b) << std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Base', 'int a;', 'int d;', 'char ch;', 'int main()', 'Base b;', 'std::cout << ""Size of class base is : ""<<sizeof(b) << std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int arr[]={10,20,30,40,50};', 'std::cout << ""Size of the array \'arr\' is : ""<<sizeof(arr) << std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'void fun(int arr[])', 'std::cout << ""Size of array is : "" <<sizeof(arr)<< std::endl;', 'int main()', 'int arr[]={10,20,30,40,50};', 'fun(arr);', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int *ptr1=new int(10);', 'std::cout << ""size of ptr1 : "" <<sizeof(ptr1)<< std::endl;', 'std::cout << ""size of *ptr1 : "" <<sizeof(*ptr1)<< std::endl;', ""char *ptr2=new char('a');"", 'std::cout <<""size of ptr2 : "" <<sizeof(ptr2)<< std::endl;', 'std::cout <<""size of *ptr2 : ""<<sizeof(*ptr2)<< std::endl;', 'double *ptr3=new double(12.78);', 'std::cout <<""size of ptr3 : "" <<sizeof(ptr3)<< std::endl;', 'std::cout <<""size of *ptr3 : ""<<sizeof(*ptr3)<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int num1;', 'double num2;', 'cout << sizeof(num1+num2);', 'return 0;']",[],[],['|||When an operand is of data type||||||When an operand is of Class type.||||||When an operand is of array type.||||||When an operand is of pointer type.||||||When an operand is an expression.|||']
31,['C++ Array of Pointers'],"['Array and pointers are closely related to each other. In C++, the name of an array is considered às a pointer, i.e., the name of an array contains the address of an element. C++ considers the array name as the address of the first element. For example, if we create an array, i.e., marks which hold the 20 values of integer type, then marks will contain the address of first element, i.e., marks[0]. Therefore, we can say that array name (marks) is a pointer which is holding the address of the first element of an array.']","['https://www.javatpoint.com/cpp-void-pointer', 'https://www.javatpoint.com/sizeof-operator-in-cpp', 'https://www.javatpoint.com/cpp-void-pointer', 'https://www.javatpoint.com/sizeof-operator-in-cpp', 'https://www.javatpoint.com/cpp-void-pointer']","['https://static.javatpoint.com/cpp/images/cpp-array-of-pointers.png', 'https://static.javatpoint.com/cpp/images/cpp-array-of-pointers2.png', 'https://static.javatpoint.com/cpp/images/cpp-array-of-pointers3.png']",[],[],"['Array of Pointers', 'Array of Pointer to Strings']",[],"[""Let's understand this scenario through an example."", 'In the above declaration, we declare an array of pointer named as ptr, and it allocates 5 integer pointers in memory.', ""In the above code, we are assigning the address of 'a' variable to the third element of an array 'ptr'."", ""We can also retrieve the value of 'a' be dereferencing the pointer."", ""Let's understand through an example."", 'Till now, we have learnt the array of pointers to an integer. Now, we will see how to create the array of pointers to strings.', 'The following are the differences between an array of pointers to string and two-dimensional array of characters:', ""Let's see how to declare the array of pointers to string."", 'First, we declare the array of pointer to string:', ""Let's create a simple example.""]","[""The element of an array of a pointer can also be initialized by assigning the address of some other element. Let's observe this case through an example."", 'An array of pointer to strings is an array of character pointers that holds the address of the first character of a string or we can say the base address of a string.', 'In the above code, we have declared an array of char pointer holding 5 string literals, and the first character of each string is holding the base address of the string.']","[""In the above code, we declare an integer pointer and an array of integer type. We assign the address of marks to the ptr by using the statement ptr=marks; it means that both the variables 'marks' and 'ptr' point to the same element, i.e., marks[0]. When we try to print the values of *ptr and *marks, then it comes out to be same. Hence, it is proved that the array name stores the address of the first element of an array."", 'An array of pointers is an array that consists of variables of pointer type, which means that the variable is a pointer addressing to some other element. Suppose we create an array of pointer holding 5 integer pointers; then its declaration would look like:', ""In the above code, we declare an array of integer type and an array of integer pointers. We have defined the 'for' loop, which iterates through the elements of an array 'ptr1', and on each iteration, the address of element of ptr1 at index 'i' gets stored in the ptr2 at index 'i'."", ""In the above code, we declared an array of pointer names as 'names' of size 5. In the above case, we have done the initialization at the time of declaration, so we do not need to mention the size of the array of a pointer. The above code can be re-written as:"", 'In the above case, each element of the \'names\' array is a string literal, and each string literal would hold the base address of the first character of a string. For example, names[0] contains the base address of ""john"", names[1] contains the base address of ""Peter"", and so on. It is not guaranteed that all the string literals will be stored in the contiguous memory location, but the characters of a string literal are stored in a contiguous memory location.']","['#include <iostream>', 'using namespace std;', 'int main()', 'int *ptr;  // integer pointer declaration', 'int marks[10]; // marks array declaration', 'std::cout << ""Enter the elements of an array :"" << std::endl;', 'for(int i=0;i<10;i++)', 'cin>>marks[i];', 'ptr=marks; // both marks and ptr pointing to the same element..', 'std::cout << ""The value of *ptr is :"" <<*ptr<< std::endl;', 'std::cout << ""The value of *marks is :"" <<*marks<<std::endl;', 'int *ptr[5];         // array of 5 integer pointer.', 'int a; // variable declaration.', 'ptr[2] = &a', '*ptr[2];', '#include <iostream>', 'using namespace std;', 'int main()', 'int ptr1[5]; // integer array declaration', 'int *ptr2[5]; // integer array of pointer declaration', 'std::cout << ""Enter five numbers :"" << std::endl;', 'for(int i=0;i<5;i++)', 'std::cin >> ptr1[i];', 'for(int i=0;i<5;i++)', 'ptr2[i]=&ptr1[i];', 'std::cout << ""The values are"" << std::endl;', 'for(int i=0;i<5;i++)', 'std::cout << *ptr2[i] << std::endl;', 'char *names[5] = {""john"",', '""Peter"",', '""Marco"",', '""Devin"",', '""Ronan""};', 'char *names[ ] = {""john"",', '""Peter"",', '""Marco"",', '""Devin"",', '""Ronan""};', '#include <iostream>', 'using namespace std;', 'int main()', 'char *names[5] = {""john"",', '""Peter"",', '""Marco"",', '""Devin"",', '""Ronan""};', 'for(int i=0;i<5;i++)', 'std::cout << names[i] << std::endl;', 'return 0;']",[],[],"['|||An array of pointers to string is more efficient than the two-dimensional array of characters in case of memory consumption because an array of pointer to strings consumes less memory than the two-dimensional array of characters to store the strings.|||In an array of pointers, the manipulation of strings is comparatively easier than in the case of 2d array. We can also easily change the position of the strings by using the pointers.|||']"
32,['C++ Void Pointer'],"['A void pointer is a general-purpose pointer that can hold the address of any data type, but it is not associated with any data type.']","['https://www.javatpoint.com/cpp-references', 'https://www.javatpoint.com/cpp-array-of-pointers', 'https://www.javatpoint.com/cpp-references', 'https://www.javatpoint.com/cpp-array-of-pointers', 'https://www.javatpoint.com/cpp-references']","['https://static.javatpoint.com/cpp/images/cpp-void-pointer.png', 'https://static.javatpoint.com/cpp/images/cpp-void-pointer2.png', 'https://static.javatpoint.com/cpp/images/cpp-void-pointer3.png', 'https://static.javatpoint.com/cpp/images/cpp-void-pointer4.png']",[],[],"['Syntax of void pointer', 'Difference between void pointer in C and C++']",[],"['In C++, we cannot assign the address of a variable to the variable of a different data type. Consider the following example:', ""Let's understand through a simple example."", 'C++ has overcome the above problem by using the C++ void pointer as a void pointer can hold the address of any data type.', ""Let's look at a simple example of void pointer."", 'In the above program, we declare a void pointer variable and an integer variable where the void pointer contains the address of an integer variable.', ""Let's understand through a simple example.""]","['In the above program, we declare a pointer of integer type and variable of float type. An integer pointer variable cannot point to the float variable, but it can point to an only integer variable.', 'In C, we can assign the void pointer to any other pointer type without any typecasting, whereas in C++, we need to typecast when we assign the void pointer type to any other pointer type.']","[""In the above example, we declare a pointer of type integer, i.e., ptr and a float variable, i.e., 'a'. After declaration, we try to store the address of 'a' variable in 'ptr', but this is not possible in C++ as the variable cannot hold the address of different data types."", ""In the above program, we declare two pointers 'ptr' and 'ptr1' of type void and integer, respectively. We also declare the integer type variable, i.e., 'a'. After declaration, we assign the address of 'a' variable to the pointer 'ptr'. Then, we assign the void pointer to the integer pointer, i.e., ptr1 without any typecasting because in C, we do not need to typecast while assigning the void pointer to any other type of pointer."", ""In the above program, we declare two pointer variables of type void and int type respectively. We also create another integer type variable, i.e., 'data'. After declaration, we store the address of variable 'data' in a void pointer variable, i.e., ptr. Now, we want to assign the void pointer to integer pointer, in order to do this, we need to apply the cast operator, i.e., (int *) to the void pointer variable. This cast operator tells the compiler which type of value void pointer is holding. For casting, we have to type the data type and * in a bracket like (char *) or (int *).""]","['void *ptr;', 'int *ptr;  // integer pointer declaration', 'float a=10.2; // floating variable initialization', 'ptr= &a  // This statement throws an error.', '#include <iostream.h>', 'using namespace std;', 'int main()', 'int *ptr;', 'float f=10.3;', 'ptr = &f // error', 'std::cout << ""The value of *ptr is : "" <<*ptr<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'void *ptr;   // void pointer declaration', 'int a=9;   // integer variable initialization', ""ptr=&a   // storing the address of 'a' variable in a void pointer variable."", 'std::cout << &a << std::endl;', 'std::cout << ptr << std::endl;', 'return 0;', '#include <stdio.h>', 'int main()', 'void *ptr; // void pointer declaration', 'int *ptr1;  // integer pointer declaration', 'int a =90;  // integer variable initialization', ""ptr=&a // storing the address of 'a' in ptr"", 'ptr1=ptr; // assigning void pointer to integer pointer type.', 'printf(""The value of *ptr1 : %d"",*ptr1);', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'void *ptr; // void pointer declaration', 'int *ptr1; // integer pointer declaration', 'int data=10; // integer variable initialization', 'ptr=&data  // storing the address of data variable in void pointer variable', 'ptr1=(int *)ptr; // assigning void pointer to integer pointer', 'std::cout << ""The value of *ptr1 is : "" <<*ptr1<< std::endl;', 'return 0;']",[],[],[]
33,['C++ References'],"['Till now, we have read that C++ supports two types of variables:']","['https://www.javatpoint.com/cpp-reference-vs-pointer', 'https://www.javatpoint.com/cpp-void-pointer', 'https://www.javatpoint.com/cpp-reference-vs-pointer', 'https://www.javatpoint.com/cpp-void-pointer', 'https://www.javatpoint.com/cpp-reference-vs-pointer']",[],[],[],[],[],"['Now, we create the reference variable of the above variable.', ""The above statement means that 'ref' is a reference variable of 'a', i.e., we can use the 'ref' variable in place of 'a' variable. "", 'References to non-const values', 'It can be declared by using & operator with the reference type variable.', 'References as aliases', 'References as aliases is another name of the variable which is being referenced.', 'For example,', ""Let's look at a simple example."", 'The following are the properties of references:', 'Initializátion', 'It must be initialized at the time of the declaration.', ""The above code will throw a compile-time error as 'a' is not assigned at the time of declaration."", 'Reassignment', 'It cannot be reassigned means that the reference variable cannot be modified.', 'Compile-time error ', 'Function Parameters', ""Let's understand through a simple example."", 'References as shortcuts', 'With the help of references, we can easily access the nested data.']","[""In the above code, we have created a reference variable, i.e., 'b'. At the time of declaration, 'a' variable is assigned to 'b'. If we do not assign at the time of declaration, then the code would look like:"", ""In the above code, 'y' reference variable is referring to 'x' variable, and then 'z' is assigned to 'y'. But this reassignment is not possible with the reference variable, so it throws a compile-time error."", 'References can also be passed as a function parameter. It does not create a copy of the argument and behaves as an alias for a parameter. It enhances the performance as it does not create a copy of the argument. ']","['Reference can be created by simply using an ampersand (&) operator. When we create a variable, then it occupies some memory location. We can create a reference of the variable; therefore, we can access the original variable by using either name of the variable or reference. For example,', ""In the above code, we create a variable 'a' which contains a value '70'. We have declared two reference variables, i.e., b and c, and both are referring to the same variable 'a'. Therefore, we can say that 'a' variable can be accessed by 'b' and 'c' variable."", ""In the above code, we are swapping the values of 'a' and 'b'. We have passed the variables 'a' and 'b' to the swap() function. In swap() function, 'p' is referring to 'a' and 'q' is referring to 'b'. When we swap the values of 'p' and 'q' means that the values of 'a' and 'b' are also swapped."", ""In the above code, we are trying to access the 'id' of the profile struct of the employee. We generally access this member by using the statement e.p.id, but this would be a tedious task if we have multiple access to this member. To avoid this situation, we create a reference variable, i.e., ref, which is another name of 'e.p.id'.""]","['int a=10;', 'int &ref=a;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=10;', 'int &value=a;', 'std::cout << value << std::endl;', 'return 0;', ""int a=10;   // 'a' is a variable."", ""int &b=a; // 'b' reference to a."", ""int &c=a; // 'c' reference to a."", '#include <iostream>', 'using namespace std;', 'int main()', 'int a=70; // variable initialization', 'int &b=a;', 'int &c=a;', 'std::cout << ""Value of a is :"" <<a<< std::endl;', 'std::cout << ""Value of b is :"" <<b<< std::endl;', 'std::cout << ""Value of c is :"" <<c<< std::endl;', 'return 0;}', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=10; // variable initialization', 'int &b=a; // b reference to a', 'std::cout << ""value of a is "" <<b<< std::endl;', 'return 0;', '&b=a;', '#include <iostream>', 'using namespace std;', 'int main()', 'int x=11; // variable initialization', 'int z=67;', 'int &y=x; // y reference to x', 'int &y=z; // y reference to z, but throws a compile-time error.', 'return 0;}', ""main.cpp: In function 'int main()':"", ""main.cpp:18:9: error: redeclaration of 'int& y'"", 'int &y=z; // y reference to z, but throws a compile-time error.', ""main.cpp:17:9: note: 'int& y' previously declared here"", 'int &y=x; // y reference to x', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=9; // variable initialization', 'int b=10; // variable initialization', 'swap(a, b); // function calling', 'std::cout << ""value of a is :"" <<a<< std::endl;', 'std::cout << ""value of b is :"" <<b<< std::endl;', 'return 0;', 'void swap(int &p, int &q) // function definition', 'int temp; // variable declaration', 'temp=p;', 'q=temp;', '#include <iostream>', 'using namespace std;', 'struct profile', 'int id;', 'struct employee', 'profile p;', 'int main()', 'employee e;', 'int &ref=e.p.id;', 'ref=34;', 'std::cout << e.p.id << std::endl;']","['10', 'Value of a is :70', 'Value of b is :70', 'Value of c is :70', 'value of a is 10', 'value of a is :10', 'value of b is :9', '34']",[],"['|||An ordinary variable is a variable that contains the value of some type. For example, we create a variable of type int, which means that the variable can hold the value of type integer.|||A pointer is a variable that stores the address of another variable. It can be dereferenced to retrieve the value to which this pointer points to.|||There is another variable that C++ supports, i.e., references. It is a variable that behaves as an alias for another variable.||||||References to non-const values|||References as aliases|||']"
34,['C++ Reference vs Pointer'],"['C++ reference and pointer seem to be similar, but there are some differences that exist between them. A reference is a variable which is another name of the existing variable, while the pointer is variable that stores the address of another variable. ']","['https://www.javatpoint.com/function-pointer-in-cpp', 'https://www.javatpoint.com/cpp-references', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-variable', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-operators', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-pointers', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-program', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/function-pointer-in-cpp', 'https://www.javatpoint.com/cpp-references', 'https://www.javatpoint.com/function-pointer-in-cpp']",[],[],"['What is Reference?', 'What is Pointer?', 'Differences between Reference and Pointer']",[],[],"['Example of reference:', ""In the above declaration, 'a' is an alias name for 'i' variable. We can also refer to the 'i' variable through 'a' variable also."", ""Let's understand through an example."", 'The following are the differences between reference and pointer:', ""Let's understand through a simple example."", ""Before using a pointer variable, we should declare a pointer variable, and this variable is created by adding a '*' operator before a variable."", 'We cannot reassign the reference variable. Now, we take a simple example as given below:', 'Whereas, the pointers can be re-assigned. This reassignment is useful when we are working with the data structures such as linked list, trees, etc.', ""Let's understand this scenario through an example."", 'The above output shows that both the reference variable and the actual variable have the same address.', 'We cannot assign the NULL value to the reference variable, but the pointer variable can be assigned with a NULL value.', 'Pointers can have pointer to pointer offering more than one level of indirection.', 'In the case of References, reference to reference is not possible. If we try to do c++ program will throw a compile-time error', ""Let's understand this scenario through an example."", ""Let's see a simple example of Pointers."", ""Let's understand the references through an example."", 'The above code will throw a compile-time error as arithmetic operations are not allowed with references.']","['A reference is a variable that is referred to as another name for an already existing variable. The reference of a variable is created by storing the address of another variable.', 'A reference variable can be considered as a constant pointer with automatic indirection. Here, automatic indirection means that the compiler automatically applies the indirection operator (*).', ""In the above code, we have created a reference variable, i.e., 'a' for 'i' variable. After creating a reference variable, we can access the value of 'i' with the help of 'a' variable."", 'A pointer is a variable that contains the address of another variable. It can be dereferenced with the help of (*) operator to access the memory location to which the pointer points.', 'Whereas, Pointer is a variable that stores the address of another variable. It makes the programming easier as it holds the memory address of some variable.', ""We can declare a reference variable by adding a '&' symbol before a variable. If this symbol is used in the expression, then it will be treated as an address operator."", 'The above code shows the error that multiple declarations of int &a are not allowed. Therefore, the above program concludes that reassignment operation is not valid for the reference variable.', 'In the case of reference, both the reference and actual variable refer to the same address. The new variable will not be assigned to the reference variable until the actual variable is either deleted or goes out of the scope.', ""In the case of pointers, both the pointer variable and the actual variable will have different memory addresses. Let's understand this through an example."", 'As we know that arithmetic operations can be applied to the pointers named as ""Pointer Arithmetic"", but arithmetic operations cannot be applied on the references. There is no word, i.e., Reference Arithmetic exists in C++.']","[""A reference variable is another name for an already existing variable. It is mainly used in 'pass by reference' where the reference variable is passed as a parameter to the function and the function to which this variable is passed works on the original copy of the variable."", ""In the above code, the pointer 'p' is pointing to variable 'a' while 'q' is a double pointer which is pointing to 'p'. Therefore, we can say that the value of 'p' would be the address of 'a' variable and the value of 'q' variable would be the address of 'p' variable.""]","['int &a = i;', '#include <iostream>', 'using namespace std;', 'int main()', 'int i=8;    // variable initialization', 'int &a=i; // creating a reference variable', 'cout<<""The value of \'i\' variable is :""<<a;', 'return 0;', '#include <iostream>', 'using namespace std;', 'void func(int &);', 'int main()', 'int a=10;', 'std::cout <<""Value of \'a\' is :"" <<a<< std::endl;', 'func(a);', 'std::cout << ""Now value of \'a\' is :"" <<a<< std::endl;', 'return 0;', 'void func(int &m)', 'm=8;', '#include <iostream>', 'using namespace std;', 'void func(int &);', 'int main()', 'int i;    // variable declaration', 'int k;    // variable declaration', 'int &a=i;', 'int &a=k; // error', 'return 0;', '#include <iostream>', 'using namespace std;', 'void func(int &);', 'int main()', 'int i;', 'int &a=i;', 'std::cout << ""The address of \'a\' variable is : "" <<&a<< std::endl;', 'std::cout << ""The address of \'i\' variable is : "" <<&i<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int k;', 'int *p;', 'p=&k', 'cout<<""The memory address of p variable is :""<<&p', 'cout<<""\\nThe memory address of k variable is :""<<&k', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int *p;', 'int a=8;', 'int **q;', 'std::cout << ""The value of q is : "" <<*q<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=8; // variable initialization', 'int &p=a; // creating a reference variable for ?a? variable.', 'int &&q=p;  // reference to reference is not valid, it throws an error.', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a[]={1,2,3,4,5}; // array initialization', 'int *ptr;  // pointer declaration', 'ptr=a; assigning base address to pointer ptr.', 'cout<<""The value of *ptr is :""<<*ptr;', 'ptr=ptr+1;  // incrementing the value of ptr by 1.', 'std::cout << ""\\nThe value of *ptr is: "" <<*ptr<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int value=90;  // variable declaration', 'int &a=value;   // assigning value to the reference', '&a=&a+5 // arithmetic operation is not possible with reference variable, it throws an error.', 'return 0;']","[""Value of 'a' is :10"", ""Now value of 'a' is :8"", ""The address of 'a' variable is : 0x7fff078e7e44                                                                        The address of 'i' variable is : 0x7fff078e7e4"", 'The memory address of p variable is :0x7ffcc5c164b8                                                           The memory address of k variable is :0x7ffcc5c164b4', 'The value of q is : 0x7ffd104891dc', ""main.cpp: In function 'int main()':"", ""main.cpp:18:10: error: cannot bind 'int' lvalue to 'int&&'"", 'int &&q=p;', 'The value of *ptr is :1', 'The value of *ptr is: 2']",[],['|||Definition||||||Declaration||||||Reassignment||||||Memory Address||||||NULL value||||||Indirection||||||Arithmetic Operations|||']
35,['Function Pointer in C++'],"['As we know that pointers are used to point some variables; similarly, the function pointer is a pointer used to point functions. It is basically used to store the address of a function. We can call the function by using the function pointer, or we can also pass the pointer to another function as a parameter.']","['https://www.javatpoint.com/cpp-memory-management', 'https://www.javatpoint.com/cpp-reference-vs-pointer', 'https://www.javatpoint.com/cpp-memory-management', 'https://www.javatpoint.com/cpp-reference-vs-pointer', 'https://www.javatpoint.com/cpp-memory-management']","['https://static.javatpoint.com/cpp/images/function-pointer-in-cpp.png', 'https://static.javatpoint.com/cpp/images/function-pointer-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/function-pointer-in-cpp3.png', 'https://static.javatpoint.com/cpp/images/function-pointer-in-cpp4.png']",[],[],"['What is the address of a function?', 'Syntax for Declaration', 'Address of a function', 'Calling a function indirectly', 'Passing a function pointer as a parameter']",[],"['They are mainly useful for event-driven applications, callbacks, and even for storing the functions in arrays.', 'The following is the syntax for the declaration of a function pointer:', 'We can get the address of a function very easily. We just need to mention the name of the function, we do not need to call the function.', ""Let's illustrate through an example."", 'We can use the alternate way to print the address of a function, i.e., &main.', ""Let's understand this scenario through an example."", ""Let's look at another example of function pointer."", 'The function pointer can be passed as a parameter to another function.', ""Let's understand through an example.""]","['All the functions and machine code instructions are data. This data is a bunch of bytes, and all these bytes have some address in RAM. The function pointer contains RAM address of the first instruction of a function.', 'We can call the function with the help of a function pointer by simply using the name of the function pointer. The syntax of calling the function through the function pointer would be similar as we do the calling of the function normally.', 'In the above code, the func2() function takes the function pointer as a parameter. The main() method calls the func2() function in which the address of func1() is passed. In this way, the func2() function is calling the func1() indirectly.']","['Computer only understands the low-level language, i.e., binary form. The program we write in C++ is always in high-level language, so to convert the program into binary form, we use compiler. Compiler is a program that converts source code into an executable file. This executable file gets stored in RAM. The CPU starts the execution from the main() method, and it reads the copy in RAM but not the original file.', 'The above syntax is the function declaration. As functions are not simple as variables, but C++ is a type safe, so function pointers have return type and parameter list. In the above syntax, we first supply the return type, and then the name of the pointer, i.e., FuncPtr which is surrounded by the brackets and preceded by the pointer symbol, i.e., (*). After this, we have supplied the parameter list (int,int). The above function pointer can point to any function which takes two integer parameters and returns integer type value.', 'In the above program, we are displaying the address of a main() function. To print the address of a main() function, we have just mentioned the name of the function, there is no bracket not parameters. Therefore, the name of the function by itself without any brackets or parameters means the address of a function.', 'In the above program, we declare the function pointer, i.e., int (*funcptr)(int,int) and then we store the address of add() function in funcptr. This implies that funcptr contains the address of add() function. Now, we can call the add() function by using funcptr. The statement funcptr(5,5) calls the add() function, and the result of add() function gets stored in sum variable.', 'In the above program, we define the function printname() which contains the char pointer as a parameter. We declare the function pointer, i.e., void (*ptr)(char*). The statement ptr=printname means that we are assigning the address of printname() function to ptr. Now, we can call the printname() function by using the statement ptr(s).']","['int (*FuncPtr) (int,int);', '#include <iostream>', 'using namespace std;', 'int main()', 'std::cout << ""Address of a main() function is : "" <<&main<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int add(int a , int b)', 'return a+b;', 'int main()', 'int (*funcptr)(int,int);  // function pointer declaration', 'funcptr=add; // funcptr is pointing to the add function', 'int sum=funcptr(5,5);', 'std::cout << ""value of sum is :"" <<sum<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'void printname(char *name)', 'std::cout << ""Name is :"" <<name<< std::endl;', 'int main()', 'char s[20];  // array declaration', 'void (*ptr)(char*);  // function pointer declaration', 'ptr=printname;  // storing the address of printname in ptr.', 'std::cout << ""Enter the name of the person: "" << std::endl;', 'cin>>s;', 'cout<<s;', 'ptr(s);  // calling printname() function', 'return 0;', '#include <iostream>', 'using namespace std;', 'void func1()', 'cout<<""func1 is called"";', 'void func2(void (*funcptr)())', 'funcptr();', 'int main()', 'func2(func1);', 'return 0;']",[],[],[]
36,['What is Memory Management?'],"['Memory management is a process of managing computer memory, assigning the memory space to the programs to improve the overall system performance.']","['https://www.javatpoint.com/malloc-vs-new-in-cpp', 'https://www.javatpoint.com/function-pointer-in-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/malloc-vs-new-in-cpp', 'https://www.javatpoint.com/function-pointer-in-cpp', 'https://www.javatpoint.com/malloc-vs-new-in-cpp']",['https://static.javatpoint.com/cpp/images/cpp-memory-management.png'],[],"['Why is memory management required?', 'Memory Management Operators']","['New operator', 'Assigning a value to the newly created object', 'How to create a single dimensional array', 'Examples:', 'Delete operator', 'Advantages of the new operator']",[],"['Example 1:', ""In the above example, 'p' is a pointer of type int."", 'Example 2:', ""In the above example, 'q' is a pointer of type float."", 'In the above case, the declaration of pointers and their assignments are done separately. We can also combine these two statements as follows:', 'Two ways of assigning values to the newly created object:', 'We assign 45 to the newly created int object and 9.8 to the newly created float object.', ""Let's look at some examples."", ""In the above statement, 'delete' is the operator used to delete the existing object, and 'pointer_variable' is the name of the pointer variable."", ""In the previous case, we have created two pointers 'p' and 'q' by using the new operator, and can be deleted by using the following statements:"", 'The dynamically allocated array can also be removed from the memory space by using the following syntax:', ""Let's understand through a simple example:"", 'The following are the advantages of the new operator over malloc() function:']","[""The above syntax is used to create the object using the new operator. In the above syntax, 'pointer_variable' is the name of the pointer variable, 'new' is the operator, and 'data-type' defines the type of the data."", 'As we know that new operator is used to create memory space for any data-type or even user-defined data type such as an array, structures, unions, etc., so the syntax for creating a one-dimensional array is given below:', 'In the above statement, we have created an array of type int having a size equal to 8 where p[0] refers first element, p[1] refers the first element, and so on.', 'When memory is no longer required, then it needs to be deallocated so that the memory can be used for another purpose. This can be achieved by using the delete operator, as shown below:']","['As we know that arrays store the homogeneous data, so most of the time, memory is allocated to the array at the declaration time. Sometimes the situation arises when the exact memory is not determined until runtime. To avoid such a situation, we declare an array with a maximum size, but some memory will be unused. To avoid the wastage of memory, we use the new operator to allocate the memory dynamically at the run time.', 'In C language, we use the malloc() or calloc() functions to allocate the memory dynamically at run time, and free() function is used to deallocate the dynamically allocated memory. C++ also supports these functions, but C++ also defines unary operators such as new and delete to perform the same tasks, i.e., allocating and freeing the memory.', 'A new operator is used to create the object while a delete operator is used to delete the object. When the object is created by using the new operator, then the object will exist until we explicitly use the delete operator to delete the object. Therefore, we can say that the lifetime of the object is not related to the block structure of the program.', 'In the above statement, we need to specify the size that defines the number of elements that are required to be freed. The drawback of this syntax is that we need to remember the size of the array. But, in recent versions of C++, we do not need to mention the size as follows:', 'In the above code, we have created an array using the new operator. The above program will take the user input for the size of an array at the run time. When the program completes all the operations, then it deletes the object by using the statement delete arr.']","['pointer_variable = new data-type', 'int *p;', 'p = new int;', 'float *q;', 'q = new float;', 'int *p = new int;', 'float *q =   new float;', '*p = 45;', '*q = 9.8;', 'pointer_variable = new data-type(value);', 'int *p = new int(45);', 'float *p = new float(9.8);', 'pointer-variable = new data-type[size];', 'int *a1 = new int[8];', 'delete pointer_variable;', 'delete p;', 'delete q;', 'delete [size] pointer_variable;', 'delete [ ] pointer_variable;', '#include <iostream>', 'using namespace std', 'int main()', 'int size;  // variable declaration', 'int *arr = new int[size];   // creating an array', 'cout<<""Enter the size of the array : "";', 'std::cin >> size;    //', 'cout<<""\\nEnter the element : "";', 'for(int i=0;i<size;i++)   // for loop', 'cin>>arr[i];', 'cout<<""\\nThe elements that you have entered are :"";', 'for(int i=0;i<size;i++)    // for loop', 'cout<<arr[i]<<"","";', 'delete arr;  // deleting an existing array.', 'return 0;']",[],[],"[""|||We can assign the value to the newly created object by simply using the assignment operator. In the above case, we have created two pointers 'p' and 'q' of type int and float, respectively. Now, we assign the values as follows:||||||We can also assign the values by using new operator which can be done as follows:||||||It does not use the sizeof() operator as it automatically computes the size of the data object.|||It automatically returns the correct data type pointer, so it does not need to use the typecasting.|||Like other operators, the new and delete operator can also be overloaded.|||It also allows you to initialize the data object while creating the memory space for the object.|||""]"
37,['malloc() vs new in C++'],"['Both the malloc() and new in C++ are used for the same purpose. They are used for allocating memory at the runtime. But, malloc() and new have different syntax. The main difference between the malloc() and new is that the new is an operator while malloc() is a standard library function that is predefined in a stdlib header file.']","['https://www.javatpoint.com/free-vs-delete-in-cpp', 'https://www.javatpoint.com/cpp-memory-management', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-operators', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/free-vs-delete-in-cpp', 'https://www.javatpoint.com/cpp-memory-management', 'https://www.javatpoint.com/free-vs-delete-in-cpp']","['https://static.javatpoint.com/cpp/images/malloc-vs-new-in-cpp.png', 'https://static.javatpoint.com/cpp/images/malloc-vs-new-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/malloc-vs-new-in-cpp3.png']",[],[],"['What is new?', 'What is malloc()?', 'Differences between the malloc() and new']","['Note: The malloc() function returns the void pointer, so typecasting is required to assign a different type to the pointer. The sizeof() operator is required in the malloc() function as the malloc() function returns the raw memory, so the sizeof() operator will tell the malloc() function how much memory is required for the allocation.']","['Syntax of new operator', 'In the above syntax', 'type: It defines the datatype of the variable for which the memory is allocated by the new operator.', 'variable: It is the name of the variable that points to the memory.', 'parameter_list: It is the list of values that are initialized to a variable.', ""Let's understand the new operator through an example."", 'The syntax of the malloc() function is given below:', 'type: it is the datatype of the variable for which the memory has to be allocated.', 'variable_name: It defines the name of the variable that points to the memory.', '(type*): It is used for typecasting so that we can get the pointer of a specified type that points to the memory.', 'sizeof(): The sizeof() operator is used in the malloc() function to obtain the memory size required for the allocation.', ""Let's understand through an example."", 'Syntax of new operator', 'type: It defines the data type of the reference variable.', 'reference_variable: It is the name of the pointer variable.', 'new: It is an operator used for allocating the memory.', 'type name: It can be any basic data type.', 'For example,', 'In the above statements, we are declaring an integer pointer variable. The statement p = new int; allocates the memory space for an integer variable.', 'Syntax of malloc() is given below:', 'ptr: It is a pointer variable.', 'data_type: It can be any basic data type.', 'For example,', ""The above statement will allocate the memory for an integer variable in a heap, and then stores the address of the reserved memory in 'p' variable.""]","[""If we do not use the free() function at the correct place, then it can lead to the cause of the dangling pointer. Let's understand this scenario through an example."", 'Till now, we get to know about the new operator and the malloc() function. Now, we will see the differences between the new operator and the malloc() function.']","['The new is a memory allocation operator, which is used to allocate the memory at the runtime. The memory initialized by the new operator is allocated in a heap. It returns the starting address of the memory, which gets assigned to the variable. The functionality of the new operator in C++ is similar to the malloc() function, which was used in the C programming language. C++ is compatible with the malloc() function also, but the new operator is mostly used because of its advantages.', 'The new operator does not use the sizeof() operator to allocate the memory. It also does not use the resize as the new operator allocates sufficient memory for an object. It is a construct that calls the constructor at the time of declaration to initialize an object.', 'As we know that the new operator allocates the memory in a heap; if the memory is not available in a heap and the new operator tries to allocate the memory, then the exception is thrown. If our code is not able to handle the exception, then the program will be terminated abnormally.', 'A malloc() is a function that allocates memory at the runtime. This function returns the void pointer, which means that it can be assigned to any pointer type. This void pointer can be further typecast to get the pointer that points to the memory of a specified type.', 'If the sufficient memory is not available, then the memory can be resized using realloc() function. As we know that all the dynamic memory requirements are fulfilled using heap memory, so malloc() function also allocates the memory in a heap and returns the pointer to it. The heap memory is very limited, so when our code starts execution, it marks the memory in use, and when our code completes its task, then it frees the memory by using the free() function. If the sufficient memory is not available, and our code tries to access the memory, then the malloc() function returns the NULL pointer. The memory which is allocated by the malloc() function can be deallocated by using the free() function.', 'In the above code, we are calling the func() function. The func() function returns the integer pointer. Inside the func() function, we have declared a *p pointer, and the memory is allocated to this pointer variable using malloc() function. In this case, we are returning the pointer whose memory is already released. The ptr is a dangling pointer as it is pointing to the released memory location. Or we can say ptr is referring to that memory which is not pointed by the pointer.']","['type variable = new type(parameter_list);', '#include <iostream>', 'using namespace std;', 'int main()', 'int *ptr;  // integer pointer variable declaration', 'ptr=new int; // allocating memory to the pointer variable ptr.', 'std::cout << ""Enter the number : "" << std::endl;', 'std::cin >>*ptr;', 'std::cout << ""Entered number is "" <<*ptr<< std::endl;', 'return 0;', 'type variable_name = (type *)malloc(sizeof(type));', '#include <iostream>', '#include<stdlib.h>', 'using namespace std;', 'int main()', 'int len;   // variable declaration', 'std::cout << ""Enter the count of numbers :"" << std::endl;', 'std::cin >> len;', 'int *ptr; // pointer variable declaration', 'ptr=(int*) malloc(sizeof(int)*len);  // allocating memory to  the poiner variable', 'for(int i=0;i<len;i++)', 'std::cout << ""Enter a number : "" << std::endl;', 'std::cin >> *(ptr+i);', 'std::cout << ""Entered elements are : "" << std::endl;', 'for(int i=0;i<len;i++)', 'std::cout << *(ptr+i) << std::endl;', 'free(ptr);', 'return 0;', '#include <iostream>', '#include<stdlib.h>', 'using namespace std;', 'int *func()', 'int *p;', 'p=(int*) malloc(sizeof(int));', 'free(p);', 'return p;', 'int main()', 'int *ptr;', 'ptr=func();', 'free(ptr);', 'return 0;', 'type reference_variable = new type name;', 'int *p;', 'p = new int;', 'int *ptr = (data_type*) malloc(sizeof(data_type));', 'int *p;', 'p = (int *) malloc(sizeof(int))']",[],[],"['|||The new operator constructs an object, i.e., it calls the constructor to initialize an object while malloc() function does not call the constructor. The new operator invokes the constructor, and the delete operator invokes the destructor to destroy the object. This is the biggest difference between the malloc() and new.|||The new is an operator, while malloc() is a predefined function in the stdlib header file.|||The operator new can be overloaded while the malloc() function cannot be overloaded.|||If the sufficient memory is not available in a heap, then the new operator will throw an exception while the malloc() function returns a NULL pointer.|||In the new operator, we need to specify the number of objects to be allocated while in malloc() function, we need to specify the number of bytes to be allocated.|||In the case of a new operator, we have to use the delete operator to deallocate the memory. But in the case of malloc() function, we have to use the free() function to deallocate the memory.||||||On the other hand, the memory allocated using malloc() function can be deallocated using the free() function.|||Once the memory is allocated using the new operator, then it cannot be resized. On the other hand, the memory is allocated using malloc() function; then, it can be reallocated using realloc() function.|||The execution time of new is less than the malloc() function as new is a construct, and malloc is a function.|||The new operator does not return the separate pointer variable; it returns the address of the newly created object. On the other hand, the malloc() function returns the void pointer which can be further typecast in a specified type.|||']"
38,['free vs delete in C++'],"['In this topic, we are going to learn about the free() function and delete operator in C++.']","['https://www.javatpoint.com/cpp-oops-concepts', 'https://www.javatpoint.com/malloc-vs-new-in-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-oops-concepts', 'https://www.javatpoint.com/malloc-vs-new-in-cpp', 'https://www.javatpoint.com/cpp-oops-concepts']","['https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp1.png', 'https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp3.png', 'https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp4.png', 'https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp5.png']",[],[],"['free() function', 'Syntax of free() function', 'free() parameters', 'free() Return Value', 'Delete operator', 'Syntax', 'Differences between delete and free()']",[],"[""Suppose we have declared a pointer 'ptr', and now, we want to de-allocate its memory:"", ""The above syntax would de-allocate the memory of the pointer variable 'ptr'."", 'The free() function does not return any value. Its main function is to free the memory.', ""Let's understand through an example."", ""Let's see how free() function works with a calloc."", ""Let's look at another example."", 'To delete the array, we use the statement as given below:', 'Some important points related to delete operator are:', ""Let's look at the simple example of a delete operator."", ""Let's see how delete works with an array of objects."", 'The following are the differences between delete and free() in C++ are:']","['In the above example, we can observe that free() function works with a calloc(). We use the calloc() function to allocate the memory block to the float pointer ptr. We have assigned a memory block to the ptr that can have a single float type value.', 'It is an operator used in C++ programming language, and it is used to de-allocate the memory dynamically. This operator is mainly used either for those pointers which are allocated using a new operator or NULL pointer.', 'For example, if we allocate the memory to the pointer using the new operator, and now we want to delete it. To delete the pointer, we use the following statement:', 'In the above code, we use the new operator to allocate the memory, so we use the delete ptr operator to destroy the memory block, which is pointed by the pointer ptr.']","['The free() function is used in C++ to de-allocate the memory dynamically. It is basically a library function used in C++, and it is defined in stdlib.h header file. This library function is used when the pointers either pointing to the memory allocated using malloc() function or Null pointer.', 'In the above syntax, ptr is a parameter inside the free() function. The ptr is a pointer pointing to the memory block allocated using malloc(), calloc() or realloc function. This pointer can also be null or a pointer allocated using malloc but not pointing to any other memory block.', 'The above code shows how free() function works with malloc(). First, we declare integer pointer *ptr, and then we allocate the memory to this pointer variable by using malloc() function. Now, ptr is pointing to the uninitialized memory block of 5 integers. After allocating the memory, we use the free() function to destroy this allocated memory. When we try to print the value, which is pointed by the ptr, we get a garbage value, which means that memory is de-allocated.', 'The above code shows how free() function works with a NULL pointer. We have declared two pointers, i.e., ptr1 and ptr2. We assign a NULL value to the pointer ptr1 and the address of x variable to pointer ptr2. When we apply the free(ptr1) function to the ptr1, then the memory block assigned to the ptr is successfully freed. The statement free(ptr2) shows a runtime error as the memory block assigned to the ptr2 is not allocated using malloc or calloc function.']","['free(ptr);', '#include <iostream>', '#include <cstdlib>', 'using namespace std;', 'int main()', 'int *ptr;', 'ptr = (int*) malloc(5*sizeof(int));', 'cout << ""Enter 5 integer"" << endl;', 'for (int i=0; i<5; i++)', 'cin >>ptr[i];', 'cout << endl << ""User entered value""<< endl;', 'for (int i=0; i<5; i++)', 'cout <<*(ptr+i)  << "" "";', 'free(ptr);', '/* prints a garbage value after ptr is free */', 'cout << ""Garbage Value"" << endl;', 'for (int i=0; i<5; i++)', 'cout << *(ptr+i)<< "" "";', 'return 0;', '#include <iostream>', '#include <cstdlib>', 'using namespace std;', 'int main()', 'float *ptr; // float pointer declaration', 'ptr=(float*)calloc(1,sizeof(float));', '*ptr=6.7;', 'std::cout << ""The value of *ptr before applying the free() function : "" <<*ptr<< std::endl;', 'free(ptr);', 'std::cout << ""The value of *ptr after applying the free() function :"" <<*ptr<< std::endl;', 'return 0;', '#include <iostream>', '#include <cstdlib>', 'using namespace std;', 'int main()', 'int *ptr1=NULL;', 'int *ptr2;', 'int x=9;', 'ptr2=&x', 'if(ptr1)', 'std::cout << ""Pointer is not Null"" << std::endl;', 'cout<<""Ponter is NULL"";', 'free(ptr1);', 'return 0;', 'delete pointer_name', 'delete p;', 'delete [] p;', '#include <iostream>', '#include <cstdlib>', 'using namespace std;', 'int main()', 'int *ptr;', 'ptr=new int;', '*ptr=68;', 'std::cout << ""The value of p is : "" <<*ptr<< std::endl;', 'delete ptr;', 'std::cout <<""The value after delete is : ""  <<*ptr<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int *ptr=new int[5];  // memory allocation using new operator.', 'std::cout << ""Enter 5 integers:"" << std::endl;', 'for(int i=1;i<=5;i++)', 'cin>>ptr[i];', 'std::cout << ""Entered values are:"" << std::endl;', 'for(int i=1;i<=5;i++)', 'cout<<*(ptr+i)<<endl;', 'delete[] ptr; // deleting the memory block pointed by the ptr.', 'std::cout << ""After delete, the garbage value:"" << std::endl;', 'for(int i=1;i<=5;i++)', 'cout<<*(ptr+i)<<endl;', 'return 0;']",[],[],"['|||If the pointer is null, then the free() function will not do anything.|||If the pointer is allocated using malloc, calloc, or realloc, but not pointing to any memory block then this function will cause undefined behavior.||||||It is either used to delete the array or non-array objects which are allocated by using the new keyword.|||To delete the array or non-array object, we use delete[] and delete operator, respectively.|||The new keyword allocated the memory in a heap; therefore, we can say that the delete operator always de-allocates the memory from the heap|||It does not destroy the pointer, but the value or the memory block, which is pointed by the pointer is destroyed.||||||The delete is an operator that de-allocates the memory dynamically while the free() is a function that destroys the memory at the runtime.|||The delete operator is used to delete the pointer, which is either allocated using new operator or a NULL pointer, whereas the free() function is used to delete the pointer that is either allocated using malloc(), calloc() or realloc() function or NULL pointer.|||When the delete operator destroys the allocated memory, then it calls the destructor of the class in C++, whereas the free() function does not call the destructor; it only frees the memory from the heap.|||The delete() operator is faster than the free() function.|||']"
39,['C++ OOPs Concepts'],['The major purpose of C++ programming is to introduce the concept of object orientation to the C programming language.'],"['https://www.javatpoint.com/cpp-object-and-class', 'https://www.javatpoint.com/cpp-memory-management', 'https://www.javatpoint.com/cpp-object-and-class', 'https://www.javatpoint.com/cpp-memory-management', 'https://www.javatpoint.com/cpp-object-and-class']",['https://static.javatpoint.com/cpp/images/oops-concept1.png'],[],"['OOPs (Object Oriented Programming System)', 'Advantage of OOPs over Procedure-oriented programming language']","['Object', 'Class', 'Inheritance', 'Polymorphism', 'Abstraction', 'Encapsulation']",[],"['Object Oriented Programming is a paradigm that provides many concepts such as inheritance, data binding, polymorphism etc.', 'Any entity that has state and behavior is known as an object. For example: chair, pen, table, keyboard, bike etc. It can be physical and logical.', 'Collection of objects is called class. It is a logical entity.', 'In C++, we use Function overloading and Function overriding to achieve polymorphism.', ""Hiding internal details and showing functionality is known as abstraction. For example: phone call, we don't know the internal processing."", 'In C++, we use abstract class and interface to achieve abstraction.']","['The programming paradigm where everything is represented as an object is known as truly object-oriented programming language. Smalltalk is considered as the first truly object-oriented programming language.', 'Object means a real word entity such as pen, chair, table etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies the software development and maintenance by providing some concepts:', 'When one object acquires all the properties and behaviours of parent object i.e. known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.', 'When one task is performed by different ways i.e. known as polymorphism. For example: to convince the customer differently, to draw something e.g. shape or rectangle etc.', 'Binding (or wrapping) code and data together into a single unit is known as encapsulation. For example: capsule, it is wrapped with different medicines.']",[],[],[],[],['|||Object|||Class|||Inheritance|||Polymorphism|||Abstraction|||Encapsulation|||&&&|||OOPs makes development and maintenance easier where as in Procedure-oriented programming language it is not easy to manage if code grows as project size grows.|||OOPs provide data hiding whereas in Procedure-oriented programming language a global data can be accessed from anywhere.|||OOPs provide ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.|||']
40,['C++ Object and Class'],"['Since C++ is an object-oriented language, program is designed using objects and classes in C++.']","['https://www.javatpoint.com/cpp-constructor', 'https://www.javatpoint.com/cpp-multidimensional-array', 'https://www.javatpoint.com/cpp-constructor', 'https://www.javatpoint.com/cpp-multidimensional-array', 'https://www.javatpoint.com/cpp-constructor']",[],[],"['C++ Object', 'C++ Class', 'C++ Object and Class Example', 'C++ Class Example: Initialize and Display data through method', 'C++ Class Example: Store and Display Employee Information']",[],[],"['In C++, Object is a real world entity, for example, chair, car, pen, mobile, laptop etc.', 'In other words, object is an entity that has state and behavior. Here, state means data and behavior means functionality.', 'Object is a runtime entity, it is created at runtime.', 'Object is an instance of a class. All the members of the class can be accessed through object.', ""Let's see an example to create object of student class using s1 as the reference variable."", 'In this example, Student is the type and s1 is the reference variable that refers to the instance of Student class.', 'In C++, class is a group of similar objects. It is a template from which objects are created. It can have fields, methods, constructors etc.', ""Let's see an example of C++ class that has three fields only."", ""Let's see an example of class that has two fields: id and name. It creates instance of the class, initializes the object and prints the object value."", ""Let's see another example of C++ class where we are initializing and displaying object through method."", ""Let's see another example of C++ class where we are storing and displaying employee information using method.""]",[],[],"['Student s1;  //creating an object of Student', 'class Student', 'public:', 'int id;  //field or data member', 'float salary; //field or data member', 'String name;//field or data member', '#include <iostream>', 'using namespace std;', 'class Student {', 'public:', 'int id;//data member (also instance variable)', 'string name;//data member(also instance variable)', 'int main() {', 'Student s1; //creating an object of Student', 's1.id = 201;', 's1.name = ""Sonoo Jaiswal"";', 'cout<<s1.id<<endl;', 'cout<<s1.name<<endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Student {', 'public:', 'int id;//data member (also instance variable)', 'string name;//data member(also instance variable)', 'void insert(int i, string n)', '{', 'id = i;', 'name = n;', '}', 'void display()', '{', 'cout<<id<<""  ""<<name<<endl;', '}', 'int main(void) {', 'Student s1; //creating an object of Student', 'Student s2; //creating an object of Student', 's1.insert(201, ""Sonoo"");', 's2.insert(202, ""Nakul"");', 's1.display();', 's2.display();', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Employee {', 'public:', 'int id;//data member (also instance variable)', 'string name;//data member(also instance variable)', 'float salary;', 'void insert(int i, string n, float s)', '{', 'id = i;', 'name = n;', 'salary = s;', '}', 'void display()', '{', 'cout<<id<<""  ""<<name<<""  ""<<salary<<endl;', '}', 'int main(void) {', 'Employee e1; //creating an object of Employee', 'Employee e2; //creating an object of Employee', 'e1.insert(201, ""Sonoo"",990000);', 'e2.insert(202, ""Nakul"", 29000);', 'e1.display();', 'e2.display();', 'return 0;']","['201\nSonoo Jaiswal', '201  Sonoo\n202  Nakul', '201  Sonoo  990000\n202  Nakul  29000']",[],[]
41,['C++ Constructor'],"['In C++, constructor is a special method which is invoked automatically at the time of object creation. It is used to initialize the data members of new object generally. The constructor in C++ has the same name as class or structure.']","['https://www.javatpoint.com/cpp-destructor', 'https://www.javatpoint.com/cpp-object-and-class', 'https://www.javatpoint.com/cpp-destructor', 'https://www.javatpoint.com/cpp-object-and-class', 'https://www.javatpoint.com/cpp-destructor']",[],[],"['C++ Default Constructor', 'C++ Parameterized Constructor']",[],[],"['There can be two types of constructors in C++.', 'A constructor which has no argument is known as default constructor. It is invoked at the time of creating object.', ""Let's see the simple example of C++ default Constructor."", 'A constructor which has parameters is called parameterized constructor. It is used to provide different values to distinct objects.', ""Let's see the simple example of C++ Parameterized Constructor.""]",[],[],"['#include <iostream>', 'using namespace std;', 'class Employee', 'public:', 'Employee()', '{', 'cout<<""Default Constructor Invoked""<<endl;', '}', 'int main(void)', 'Employee e1; //creating an object of Employee', 'Employee e2;', 'return 0;']","['Default Constructor Invoked \nDefault Constructor Invoked', '#include <iostream>\nusing namespace std;\nclass Employee {\n   public:\n       int id;//data member (also instance variable)    \n       string name;//data member(also instance variable)\n       float salary;\n       Employee(int i, string n, float s)  \n        {  \n            id = i;  \n            name = n;  \n            salary = s;\n        }  \n       void display()  \n        {  \n            cout<<id<<""  ""<<name<<""  ""<<salary<<endl;  \n        }  \n};\nint main(void) {\n    Employee e1 =Employee(101, ""Sonoo"", 890000); //creating an object of Employee \n    Employee e2=Employee(102, ""Nakul"", 59000); \n    e1.display();  \n    e2.display();  \n    return 0;\n}', '101  Sonoo  890000\n102  Nakul  59000']",[],['|||Default constructor|||Parameterized constructor|||']
42,['C++ Copy Constructor'],['A Copy constructor is an overloaded constructor used to declare and initialize an object from another object.'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#']","['https://static.javatpoint.com/cpp/images/cpp-copy-constructor1.png', 'https://static.javatpoint.com/cpp/images/cpp-copy-constructor2.png', 'https://static.javatpoint.com/cpp/images/cpp-copy-constructor3.png', 'https://static.javatpoint.com/cpp/images/cpp-copy-constructor4.png']",[],"['Copy Constructor is of two types:', 'Syntax Of User-defined Copy Constructor:', 'When Copy Constructor is called', 'Two types of copies are produced by the constructor:', 'Shallow Copy', 'Deep copy', 'Differences b/w Copy constructor and Assignment operator(=)']",[],[],"['Consider the following situation:', 'In the above case, copy constructor can be called in the following ways:', ""Let's see a simple example of the copy constructor."", '// program of the copy constructor.', 'Copy Constructor is called in the following scenarios:', ""Let's understand this through a simple example:"", ""Let's understand this through a simple example.""]",[],"['In the above case, a programmer has not defined any constructor, therefore, the statement Demo d2 = d1; calls the default constructor defined by the compiler. The default constructor creates the exact copy or shallow copy of the existing object. Thus, the pointer p of both the objects point to the same memory location. Therefore, when the memory of a field is freed, the memory of another field is also automatically freed as both the fields point to the same memory location. This problem is solved by the user-defined constructor that creates the Deep copy.', 'Deep copy dynamically allocates the memory for the copy and then copies the actual value, both the source and copy have distinct memory locations. In this way, both the source and copy are distinct and will not share the same memory location. Deep copy requires us to write the user-defined constructor.', 'In the above case, a programmer has defined its own constructor, therefore the statement Demo d2 = d1; calls the copy constructor defined by the user. It creates the exact copy of the value types data and the object pointed by the pointer p. Deep copy does not create the copy of a reference type variable.']","['Class_name(const class_name &old_object);', 'A(A &x) //  copy constructor.', '#include <iostream>', 'using namespace std;', 'public:', 'int x;', 'A(int a)                // parameterized constructor.', 'x=a;', 'A(A &i)               // copy constructor', 'x = i.x;', 'int main()', 'A a1(20);               // Calling the parameterized constructor.', 'A a2(a1);                //  Calling the copy constructor.', 'cout<<a2.x;', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Demo', 'int a;', 'int b;', 'int *p;', 'public:', 'Demo()', 'p=new int;', 'void setdata(int x,int y,int z)', 'a=x;', 'b=y;', '*p=z;', 'void showdata()', 'std::cout << ""value of a is : "" <<a<< std::endl;', 'std::cout << ""value of b is : "" <<b<< std::endl;', 'std::cout << ""value of *p is : "" <<*p<< std::endl;', 'int main()', 'Demo d1;', 'd1.setdata(4,5,7);', 'Demo d2 = d1;', 'd2.showdata();', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Demo', 'public:', 'int a;', 'int b;', 'int *p;', 'Demo()', 'p=new int;', 'Demo(Demo &d)', 'a = d.a;', 'b = d.b;', 'p = new int;', '*p = *(d.p);', 'void setdata(int x,int y,int z)', 'a=x;', 'b=y;', '*p=z;', 'void showdata()', 'std::cout << ""value of a is : "" <<a<< std::endl;', 'std::cout << ""value of b is : "" <<b<< std::endl;', 'std::cout << ""value of *p is : "" <<*p<< std::endl;', 'int main()', 'Demo d1;', 'd1.setdata(4,5,7);', 'Demo d2 = d1;', 'd2.showdata();', 'return 0;']","['20', 'value of a is : 4   \nvalue of b is : 5  \nvalue of *p is : 7', 'value of a is : 4   \nvalue of b is : 5   \nvalue of *p is : 7']","['Copy Constructor|||Assignment Operator&&&It is an overloaded constructor.|||It is a bitwise operator.&&&It initializes the new object with the existing object.|||It assigns the value of one object to another object.&&&Syntax of copy constructor:|||Class_name(const class_name &object_name)|||{|||// body of the constructor.|||}|||Syntax of Assignment operator:|||Class_name a,b;|||b = a;&&&|||The copy constructor is invoked when the new object is initialized with the existing object.|||The object is passed as an argument to the function.|||It returns the object.||||||The assignment operator is invoked when we assign the existing object to a new object.&&&Both the existing object and new object shares the different memory locations.|||Both the existing object and new object shares the same memory location.&&&If a programmer does not define the copy constructor, the compiler will automatically generate the implicit default copy constructor.\t|||If we do not overload the ""="" operator, the bitwise copy will occur.']","['|||Default Copy constructor: The compiler defines the default copy constructor. If the user defines no copy constructor, compiler supplies its constructor.|||User Defined constructor: The programmer defines the user-defined constructor.||||||When we initialize the object with another existing object of the same class type. For example, Student s1 = s2, where Student is the class.|||When the object of the same class type is passed by value as an argument.|||When the function returns the object of the same class type by value.||||||Shallow copy|||Deep copy||||||The default copy constructor can only produce the shallow copy.|||A Shallow copy is defined as the process of creating the copy of an object by copying data of all the member variables as it is.||||||The copy constructor is invoked when the new object is initialized with the existing object.|||The object is passed as an argument to the function.|||It returns the object.|||']"
43,['C++ Destructor'],"['A destructor works opposite to constructor; it destructs the objects of classes. It can be defined only once in a class. Like constructors, it is invoked automatically.']","['https://www.javatpoint.com/cpp-this-pointer', 'https://www.javatpoint.com/cpp-constructor', 'https://www.javatpoint.com/cpp-this-pointer', 'https://www.javatpoint.com/cpp-constructor', 'https://www.javatpoint.com/cpp-this-pointer']",[],[],['C++ Constructor and Destructor Example'],[],"[""Note: C++ destructor cannot have parameters. Moreover, modifiers can't be applied on destructors.""]","['A destructor is defined like constructor. It must have same name as class. But it is prefixed with a tilde sign (~).', ""Let's see an example of constructor and destructor in C++ which is called automatically.""]",[],[],"['#include <iostream>', 'using namespace std;', 'class Employee', 'public:', 'Employee()', '{', 'cout<<""Constructor Invoked""<<endl;', '}', '~Employee()', '{', 'cout<<""Destructor Invoked""<<endl;', '}', 'int main(void)', 'Employee e1; //creating an object of Employee', 'Employee e2; //creating an object of Employee', 'return 0;']",['Constructor Invoked\nConstructor Invoked\nDestructor Invoked\nDestructor Invoked'],[],[]
44,['C++ this Pointer'],"['In C++ programming, this is a keyword that refers to the current instance of the class. There can be 3 main usage of this keyword in C++.']","['https://www.javatpoint.com/cpp-static', 'https://www.javatpoint.com/cpp-destructor', 'https://www.javatpoint.com/cpp-static', 'https://www.javatpoint.com/cpp-destructor', 'https://www.javatpoint.com/cpp-static']",[],[],['C++ this Pointer Example'],[],[],"[""Let's see the example of this keyword in C++ that refers to the fields of current class.""]",[],[],"['#include <iostream>', 'using namespace std;', 'class Employee {', 'public:', 'int id; //data member (also instance variable)', 'string name; //data member(also instance variable)', 'float salary;', 'Employee(int id, string name, float salary)', '{', 'this->id = id;', 'this->name = name;', 'this->salary = salary;', '}', 'void display()', '{', 'cout<<id<<""  ""<<name<<""  ""<<salary<<endl;', '}', 'int main(void) {', 'Employee e1 =Employee(101, ""Sonoo"", 890000); //creating an object of Employee', 'Employee e2=Employee(102, ""Nakul"", 59000); //creating an object of Employee', 'e1.display();', 'e2.display();', 'return 0;']",['101  Sonoo  890000\n102  Nakul  59000'],[],['|||It can be used to pass current object as a parameter to another method.|||It can be used to refer current class instance variable.|||It can be used to declare indexers.|||']
45,['C++ static'],"['In C++, static is a keyword or modifier that belongs to the type not instance. So instance is not required to access the static members. In C++, static can be field, method, constructor, class, properties, operator and event.']","['https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-this-pointer', 'https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-this-pointer', 'https://www.javatpoint.com/cpp-structs']",[],[],"['Advantage of C++ static keyword', 'C++ Static Field', 'C++ static field example', 'C++ static field example: Counting Objects']",[],[],"['It is used to refer the common property of all objects such as rateOfInterest in case of Account, companyName in case of Employee etc.', ""Let's see the simple example of static field in C++."", ""Let's see another example of static keyword in C++ which counts the objects.""]","[""Memory efficient: Now we don't need to create instance for accessing the static members, so it saves memory. Moreover, it belongs to the type, so it will not get memory each time when instance is created."", 'A field which is declared as static is called static field. Unlike instance field which gets memory each time whenever you create object, there is only one copy of static field created in the memory. It is shared to all the objects.']",[],"['#include <iostream>', 'using namespace std;', 'class Account {', 'public:', 'int accno; //data member (also instance variable)', 'string name; //data member(also instance variable)', 'static float rateOfInterest;', 'Account(int accno, string name)', '{', 'this->accno = accno;', 'this->name = name;', '}', 'void display()', '{', 'cout<<accno<< ""<<name<< "" ""<<rateOfInterest<<endl;', '}', 'float Account::rateOfInterest=6.5;', 'int main(void) {', 'Account a1 =Account(201, ""Sanjay""); //creating an object of Employee', 'Account a2=Account(202, ""Nakul""); //creating an object of Employee', 'a1.display();', 'a2.display();', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Account {', 'public:', 'int accno; //data member (also instance variable)', 'string name;', 'static int count;', 'Account(int accno, string name)', '{', 'this->accno = accno;', 'this->name = name;', 'count++;', '}', 'void display()', '{', 'cout<<accno<<"" ""<<name<<endl;', '}', 'int Account::count=0;', 'int main(void) {', 'Account a1 =Account(201, ""Sanjay""); //creating an object of Account', 'Account a2=Account(202, ""Nakul"");', 'Account a3=Account(203, ""Ranjana"");', 'a1.display();', 'a2.display();', 'a3.display();', 'cout<<""Total Objects are: ""<<Account::count;', 'return 0;']","['201 Sanjay 6.5\n202 Nakul 6.5', '201 Sanjay\n202 Nakul\n203 Ranjana\nTotal Objects are: 3']",[],[]
46,['C++ Structs'],"['In C++, classes and structs are blueprints that are used to create the instance of a class. Structs are used for lightweight objects such as Rectangle, color, Point, etc.']","['https://www.javatpoint.com/cpp-enumeration', 'https://www.javatpoint.com/cpp-static', 'https://www.javatpoint.com/cpp-enumeration', 'https://www.javatpoint.com/cpp-static', 'https://www.javatpoint.com/cpp-enumeration']",[],[],"['C++ Struct Example', 'C++ Struct Example: Using Constructor and Method']",[],[],"['C++ Structure is a collection of different data types. It is similar to the class that holds different types of data.', 'Structure variable can be defined as:', 'Student s;', 'For example:', 'In the above statement, we are accessing the id field of the structure Student by using the dot(.) operator and assigns the value 4 to the id field.', ""Let's see a simple example of struct Rectangle which has two data members width and height."", ""Let's see another example of struct where we are using the constructor to initialize data and method to calculate the area of rectangle."", 'Structure v/s Class']","['Unlike class, structs in C++ are value type than reference type. It is useful if you have data that is not intended to be modified after creation of struct.', 'In the above declaration, a structure is declared by preceding the struct keyword followed by the identifier(structure name). Inside the curly braces, we can declare the member variables of different types. Consider the following situation:', ""In the above case, Student is a structure contains three variables name, id, and age. When the structure is declared, no memory is allocated. When the variable of a structure is created, then the memory is allocated. Let's understand this scenario."", 'The variable of the structure can be accessed by simply using the instance of the structure followed by the dot (.) operator and then the field of the structure.']","['Here, s is a structure variable of type Student. When the structure variable is created, the memory will be allocated. Student structure contains one char variable and two integer variable. Therefore, the memory for one char variable is 1 byte and two ints will be 2*4 = 8. The total memory occupied by the s variable is 9 byte.']","['struct structure_name', 'struct Student', 'char name[20];', 'int id;', 'int age;', 's.id = 4;', '#include <iostream>', 'using namespace std;', 'struct Rectangle', 'int width, height;', 'int main(void) {', 'struct Rectangle rec;', 'rec.width=8;', 'rec.height=5;', 'cout<<""Area of Rectangle is: ""<<(rec.width * rec.height)<<endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'struct Rectangle    {', 'int width, height;', 'Rectangle(int w, int h)', '{', 'width = w;', 'height = h;', '}', 'void areaOfRectangle() {', 'cout<<""Area of Rectangle is: ""<<(width*height); }', 'int main(void) {', 'struct Rectangle rec=Rectangle(4,6);', 'rec.areaOfRectangle();', 'return 0;']","['Area of Rectangle is: 40', 'Area of Rectangle is: 24']","['Structure|||Class&&&If access specifier is not declared explicitly, then by default access specifier will be public.\t|||If access specifier is not declared explicitly, then by default access specifier will be private.&&&Syntax of Structure:||||||struct structure_name|||{|||// body of the structure.|||}|||Syntax of Class:||||||class class_name |||{|||// body of the class.|||}&&&The instance of the structure is known as ""Structure variable"".\t|||The instance of the class is known as ""Object of the class"".']",[]
47,['C++ Enumeration'],['Enum in C++ is a data type that contains fixed set of constants.'],"['https://www.javatpoint.com/cpp-friend-function', 'https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-friend-function', 'https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-friend-function']",[],[],"['Points to remember for C++ Enum', 'C++ Enumeration Example']",[],[],"['C++ Enums can be thought of as classes that have fixed set of constants.', ""Let's see the simple example of enum data type used in C++ program.""]","['It can be used for days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY and SATURDAY) , directions (NORTH, SOUTH, EAST and WEST) etc. The C++ enum constants are static and final implicitly.']",[],"['#include <iostream>', 'using namespace std;', 'enum week { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday };', 'int main()', 'week day;', 'day = Friday;', 'cout << ""Day: "" << day+1<<endl;', 'return 0;']",['Day: 5'],[],"['|||enum improves type safety|||enum can be easily used in switch|||enum can be traversed|||enum can have fields, constructors and methods|||enum may implement many interfaces but cannot extend any class because it internally extends Enum class|||']"
48,['C++ Friend function'],"['If a function is defined as a friend function in C++, then the protected and private data of a class can be accessed using the function.']","['https://www.javatpoint.com/cpp-inheritance', 'https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-inheritance', 'https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-inheritance']",[],[],"['Declaration of friend function in C++', 'C++ friend function Example']",['C++ Friend class'],[],"['By using the keyword friend compiler knows the given function is a friend function.', 'For accessing the data, the declaration of a friend function should be done inside the body of a class starting with the keyword friend.', 'Characteristics of a Friend function:', ""Let's see the simple example of C++ friend function used to print the length of a box."", ""Let's see a simple example when the function is friendly to two classes."", 'In the above example, min() function is friendly to two classes, i.e., the min() function can access the private members of both the classes A and B.', 'A friend class can access both private and protected members of the class in which it has been declared as friend.', ""Let's see a simple example of a friend class.""]","['In the above example, class B is declared as a friend inside the class A. Therefore, B is a friend of class A. Class B can access the private members of class A.']","['In the above declaration, the friend function is preceded by the keyword friend. The function can be defined anywhere in the program like a normal C++ function. The function definition does not use either the keyword friend or scope resolution operator.']","['class class_name', 'friend data_type function_name(argument/s);            // syntax of friend function.', '#include <iostream>', 'using namespace std;', 'class Box', 'private:', 'int length;', 'public:', 'Box(): length(0) { }', 'friend int printLength(Box); //friend function', 'int printLength(Box b)', 'b.length += 10;', 'return b.length;', 'int main()', 'Box b;', 'cout<<""Length of box: ""<< printLength(b)<<endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'class B;          // forward declarartion.', 'int x;', 'public:', 'void setdata(int i)', 'x=i;', 'friend void min(A,B);         // friend function.', 'int y;', 'public:', 'void setdata(int i)', 'y=i;', 'friend void min(A,B);                    // friend function', 'void min(A a,B b)', 'if(a.x<=b.y)', 'std::cout << a.x << std::endl;', 'else', 'std::cout << b.y << std::endl;', 'int main()', 'a.setdata(10);', 'b.setdata(20);', 'min(a,b);', 'return 0;', '#include <iostream>', 'using namespace std;', 'int x =5;', 'friend class B;           // friend class.', 'public:', 'void display(A &a)', 'cout<<""value of x is : ""<<a.x;', 'int main()', 'A a;', 'B b;', 'b.display(a);', 'return 0;']","['Length of box: 10', '10', 'value of x is : 5']",[],['|||The function is not in the scope of the class to which it has been declared as a friend.|||It cannot be called using the object as it is not in the scope of that class.|||It can be invoked like a normal function without using the object.|||It cannot access the member names directly and has to use an object name and dot membership operator with the member name.|||It can be declared either in the private or the public part.|||']
49,['C++ Math Functions'],['C++ offers some basic math functions and the required header file to use these functions is <math.h>'],"['https://www.javatpoint.com/cpp-math-functions', 'https://www.javatpoint.com/cpp-math-functions', 'https://www.javatpoint.com/cpp-math-cos-function', 'https://www.javatpoint.com/cpp-math-sin-function', 'https://www.javatpoint.com/cpp-math-tan-function', 'https://www.javatpoint.com/cpp-math-acos-function', 'https://www.javatpoint.com/cpp-math-asin-function', 'https://www.javatpoint.com/cpp-math-atan-function', 'https://www.javatpoint.com/cpp-math-atan2-function', 'https://www.javatpoint.com/cpp-math-cosh-function', 'https://www.javatpoint.com/cpp-math-sinh-function', 'https://www.javatpoint.com/cpp-math-tanh-function', 'https://www.javatpoint.com/cpp-math-acosh-function', 'https://www.javatpoint.com/cpp-math-asinh-function', 'https://www.javatpoint.com/cpp-math-atanh-function', 'https://www.javatpoint.com/cpp-math-exp-function', 'https://www.javatpoint.com/cpp-math-frexp-function', 'https://www.javatpoint.com/cpp-math-idexp-function', 'https://www.javatpoint.com/cpp-math-log-function', 'https://www.javatpoint.com/cpp-math-log10-function', 'https://www.javatpoint.com/cpp-math-modf-function', 'https://www.javatpoint.com/cpp-math-exp2-function', 'https://www.javatpoint.com/cpp-math-expm1-function', 'https://www.javatpoint.com/cpp-math-log1p-function', 'https://www.javatpoint.com/cpp-math-log2-function', 'https://www.javatpoint.com/cpp-math-logb-function', 'https://www.javatpoint.com/cpp-math-scalbn-function', 'https://www.javatpoint.com/cpp-math-scalbln-function', 'https://www.javatpoint.com/cpp-math-ilogb-function', 'https://www.javatpoint.com/cpp-math-copysign-function', 'https://www.javatpoint.com/cpp-math-nextafter-function', 'https://www.javatpoint.com/cpp-math-nexttoward-function', 'https://www.javatpoint.com/cpp-math-fdim-function', 'https://www.javatpoint.com/cpp-math-fmax-function', 'https://www.javatpoint.com/cpp-math-fmin-function', 'https://www.javatpoint.com/cpp-math-pow-function', 'https://www.javatpoint.com/cpp-math-sqrt-function', 'https://www.javatpoint.com/cpp-math-cbrt-function', 'https://www.javatpoint.com/cpp-math-hypot-function', 'https://www.javatpoint.com/cpp-math-ceil-function', 'https://www.javatpoint.com/cpp-math-floor-function', 'https://www.javatpoint.com/cpp-math-round-function', 'https://www.javatpoint.com/cpp-math-lround-function', 'https://www.javatpoint.com/cpp-math-llround-function', 'https://www.javatpoint.com/cpp-math-fmod-function', 'https://www.javatpoint.com/cpp-math-trunc-function', 'https://www.javatpoint.com/cpp-math-rint-function', 'https://www.javatpoint.com/cpp-math-lrint-function', 'https://www.javatpoint.com/cpp-math-llrint-function', 'https://www.javatpoint.com/cpp-math-nearbyint-function', 'https://www.javatpoint.com/cpp-math-remainder-function', 'https://www.javatpoint.com/cpp-math-remquo-function', 'https://www.javatpoint.com/cpp-math-fabs-function', 'https://www.javatpoint.com/cpp-math-abs-function', 'https://www.javatpoint.com/cpp-math-fma-function', 'https://www.javatpoint.com/cpp-math-fpclassify-function', 'https://www.javatpoint.com/cpp-math-isfinite-function', 'https://www.javatpoint.com/cpp-math-isinf-function', 'https://www.javatpoint.com/cpp-math-isnan-function', 'https://www.javatpoint.com/cpp-math-isnormal-function', 'https://www.javatpoint.com/cpp-math-signbit-function', 'https://www.javatpoint.com/cpp-math-isgreater-function', 'https://www.javatpoint.com/cpp-math-isgreaterequal-function', 'https://www.javatpoint.com/cpp-math-less-function', 'https://www.javatpoint.com/cpp-math-islessequal-function', 'https://www.javatpoint.com/cpp-math-islessgreater-function', 'https://www.javatpoint.com/cpp-math-isunordered-function', 'https://www.javatpoint.com/cpp-math-erf-function', 'https://www.javatpoint.com/cpp-math-erfc-function', 'https://www.javatpoint.com/cpp-math-tgamma-function', 'https://www.javatpoint.com/cpp-math-lgamma-function', 'https://www.javatpoint.com/cpp-math-functions', 'https://www.javatpoint.com/cpp-math-functions', 'https://www.javatpoint.com/cpp-math-functions']",[],[],"['Trignometric functions', 'Hyperbolic functions', 'Exponential functions', 'Floating point manipulation functions', 'Maximum,Minimum and Difference functions', 'Power functions', 'Nearest integer operations', 'Other functions', 'Macro functions', 'Comparison macro functions', 'Error and gamma functions']",[],[],[],[],[],[],[],"['Method|||Description&&&cos(x)|||It computes the cosine of x.&&&sin(x)|||It computes the sine of x.&&&tan(x)|||It computes the tangent of x.&&&acos(x)|||It finds the inverse cosine of x.&&&asin(x)|||It finds the inverse sine of x.&&&atan(x)|||It finds the inverse tangent of x.&&&atan2(x,y)|||It finds the inverse tangent of a coordinate x and y.', 'Method|||Description&&&cosh(x)|||It computes the hyperbolic cosine of x.&&&sinh(x)|||It computes the hyperbolic sine of x.&&&tanh(x)|||It computes the hyperbolic tangent of x.&&&acosh(x)|||It finds the arc hyperbolic cosine of x.&&&asinh(x)|||It finds the arc hyperbolic sine of x.&&&atanh(x)|||It finds the arc hyperbolic tangent of x.', 'Method|||Description&&&exp(x)|||It computes the exponential e raised to the power x.&&&frexp(value_type x,int* exp)|||It breaks a number into significand and 2 raised to the power exponent.&&&Idexp(float x, int e)|||It computes the product of x and 2 raised to the power e.&&&log(x)|||It computes the natural logarithm of x.&&&log10(x)|||It computes the common logarithm of x. &&&modf()|||It breaks a number into an integer and fractional part.&&&exp2(x)|||It computes the base 2 exponential of x.&&&expm1(x)|||It computes the exponential raised to the power x minus one.&&&log1p(x)|||It computes the natural logarithm of x plus one.&&&log2(x)|||It computes the base 2 logarithm of x.&&&logb(x)|||It computes the logarithm of x.&&&scalbn( x, n)|||It computes the product of x and FLT_RADX raised to the power n.&&&scalbln( x, n)|||It computes the product of x and FLT_RADX raised to the power n.&&&ilogb(x)|||It returns the exponent part of x.', 'Method|||Description&&&copysign(x,y)|||It returns the magnitude of x with the sign of y.&&&nextafter(x,y)|||It represents the next representable value of x in the direction of y.&&&nexttoward(x,y)|||It represents the next representable value of x in the direction of y.', 'Method|||Description&&&fdim(x,y)|||It calculates the positive difference between x and y.&&&fmax(x,y)|||It returns the larger number among two numbers x and y.&&&fmin()|||It returns the smaller number among two numbers x and y .', 'Method|||Description&&&pow(x,y)|||It computes x raised to the power y.&&&sqrt(x)|||It computes the square root of x.&&&cbrt(x)|||It computes the cube root of x.&&&hypot(x,y)|||It finds the hypotenuse of a right angled triangle.', 'Method|||Description&&&ceil(x)|||It rounds up the value of x.&&&floor(x)|||It rounds down the value of x.&&&round(x)|||It rounds off the value of x.&&&lround(x)|||It rounds off the value of x and cast to long integer.&&&llround(x)|||It rounds off the value of x and cast to long long integer.&&&fmod(n,d)|||It computes the remainder of division n/d.&&&trunc(x)|||It rounds off the value x towards zero.&&&rint(x)|||It rounds off the value of x using rounding mode.&&&lrint(x)|||It rounds off the value of x using rounding mode and cast to long integer.&&&llrint(x)|||It rounds off the value x and cast to long long integer.&&&nearbyint(x)|||It rounds off the value x to a nearby integral value.&&&remainder(n,d)|||It computes the remainder of n/d.&&&remquo()|||It computes remainder and quotient both.', 'Method|||Description&&&fabs(x)|||It computes the absolute value of x.&&&abs(x)|||It computes the absolute value of x.&&&fma(x,y,z)|||It computes the expression x*y+z.', 'Method|||Description&&&fpclassify(x)|||It returns the value of type that matches one of the macro constants.&&&isfinite(x)|||It checks whether x is finite or not.&&&isinf()|||It checks whether x is infinite or not.&&&isnan()|||It checks whether x is nan or not.&&&isnormal(x)|||It checks whether x is normal or not.&&&signbit(x)|||It checks whether the sign of x is negative or not.', 'Method|||Description&&&isgreater(x,y)|||It determines whether x is greater than y or not.&&&isgreaterequal(x,y)|||It determines whether x is greater than or equal to y or not.&&&less(x,y)|||It determines whether x is less than y or not.&&&islessequal(x,y)|||It determines whether x is less than or equal to y.&&&islessgreater(x,y)|||It determines whether x is less or greater than y or not.&&&isunordered(x,y)|||It checks whether x can be meaningfully compared or not. ', 'Method|||Description&&&erf(x)|||It computes the error function value of x.&&&erfc(x)|||It computes the complementary error function value of x.&&&tgamma(x)|||It computes the gamma function value of x.&&&lgamma(x)|||It computes the logarithm of a gamma function of x.']",[]
50,['C++ Inheritance'],"['In C++, inheritance is a process in which one object acquires all the properties and behaviors of its parent object automatically. In such way, you can reuse, extend or modify the attributes and behaviors which are defined in other class.']","['https://www.javatpoint.com/cpp-aggregation', 'https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-aggregation', 'https://www.javatpoint.com/cpp-structs', 'https://www.javatpoint.com/cpp-aggregation']","['https://static.javatpoint.com/cpp/images/cpp-inheritance.png', 'https://static.javatpoint.com/cpp/images/cpp-inheritance2.png', 'https://static.javatpoint.com/cpp/images/cpp-inheritance3.png', 'https://static.javatpoint.com/cpp/images/cpp-inheritance4.png', 'https://static.javatpoint.com/cpp/images/cpp-inheritance5.png', 'https://static.javatpoint.com/cpp/images/cpp-inheritance6.png', 'https://static.javatpoint.com/cpp/images/cpp-inheritance7.png']",[],"['Advantage of C++ Inheritance', 'Types Of Inheritance', 'Derived Classes', 'C++ Single Inheritance', 'C++ Single Level Inheritance Example: Inheriting Fields', 'C++ Single Level Inheritance Example: Inheriting Methods', 'How to make a Private Member Inheritable', 'Visibility of Inherited Members', 'C++ Multilevel Inheritance', 'C++ Multi Level Inheritance Example', 'C++ Multiple Inheritance', 'Ambiquity Resolution in Inheritance', 'C++ Hybrid Inheritance', 'C++ Hierarchical Inheritance']",['Note:'],[],"['C++ supports five types of inheritance:', 'A Derived class is defined as the class derived from the base class.', 'The Syntax of Derived class:', 'derived_class_name: It is the name of the derived class.', 'base_class_name: It is the name of the base class.', 'Single inheritance is defined as the inheritance in which a derived class is inherited from the only one base class.', ""Where 'A' is the base class, and 'B' is the derived class."", 'In the above example, Employee is the base class and Programmer is the derived class.', ""Let's see another example of inheritance in C++ which inherits methods only."", ""Let's see a simple example."", 'The private member is not inheritable. If we modify the visibility mode by making it public, but this takes away the advantage of data hiding.', 'Visibility modes can be classified into three categories:', 'Multilevel inheritance is a process of deriving a class from another derived class.', ""Let's see the example of multi level inheritance in C++."", 'Multiple inheritance is the process of deriving a new class that inherits the attributes from two or more classes.', 'Syntax of the Derived class:', ""Let's see a simple example of multiple inheritance."", ""In the above example, class 'C' inherits two base classes 'A' and 'B' in a public mode."", 'Ambiguity can be occurred in using the multiple inheritance when a function with the same name occurs in more than one base class.', ""Let's understand this through an example:"", 'An ambiguity can also occur in single inheritance.', 'Consider the following situation:', 'Hybrid inheritance is a combination of more than one type of inheritance.', ""Let's see a simple example:"", 'Hierarchical inheritance is defined as the process of deriving more than one class from a base class.', 'Syntax of Hierarchical inheritance:', ""Let's see a simple example:""]","['In C++, the class which inherits the members of another class is called derived class and the class whose members are inherited is called base class. The derived class is the specialized class for the base class.', 'Code reusability: Now you can reuse the members of your parent class. So, there is no need to define the member again. So less code is required in the class.', 'visibility mode: The visibility mode specifies whether the features of the base class are publicly inherited or privately inherited. It can be public or private.', ""When one class inherits another class, it is known as single level inheritance. Let's see the example of single level inheritance which inherits the fields only."", ""In the above example, class A is privately inherited. Therefore, the mul() function of class 'A' cannot be accessed by the object of class B. It can only be accessed by the member function of class B."", 'C++ introduces a third visibility modifier, i.e., protected. The member which is declared as protected will be accessible to all the member functions within the class as well as the class immediately derived from it.', 'When one class inherits another class which is further inherited by another class, it is known as multi level inheritance in C++. Inheritance is transitive so the last derived class acquires all the members of all its base classes.']","['In the above case, the function of the derived class overrides the method of the base class. Therefore, call to the display() function will simply call the function defined in the derived class. If we want to invoke the base class function, we can use the class resolution operator.']","['class derived_class_name :: visibility-mode base_class_name', '#include <iostream>', 'using namespace std;', 'class Account {', 'public:', 'float salary = 60000;', 'class Programmer: public Account {', 'public:', 'float bonus = 5000;', '};', 'int main(void) {', 'Programmer p1;', 'cout<<""Salary: ""<<p1.salary<<endl;', 'cout<<""Bonus: ""<<p1.bonus<<endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Animal {', 'public:', 'void eat() {', 'cout<<""Eating...""<<endl;', 'class Dog: public Animal', 'public:', 'void bark(){', 'cout<<""Barking..."";', '}', 'int main(void) {', 'Dog d1;', 'd1.eat();', 'd1.bark();', 'return 0;', '#include <iostream>', 'using namespace std;', 'int a = 4;', 'int b = 5;', 'public:', 'int mul()', 'int c = a*b;', 'return c;', '}', 'class B : private A', 'public:', 'void display()', 'int result = mul();', 'std::cout <<""Multiplication of a and b is : ""<<result<< std::endl;', 'int main()', 'b.display();', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Animal {', 'public:', 'void eat() {', 'cout<<""Eating...""<<endl;', 'class Dog: public Animal', 'public:', 'void bark(){', 'cout<<""Barking...""<<endl;', '}', 'class BabyDog: public Dog', 'public:', 'void weep() {', 'cout<<""Weeping..."";', '}', 'int main(void) {', 'BabyDog d1;', 'd1.eat();', 'd1.bark();', 'd1.weep();', 'return 0;', 'class D : visibility B-1, visibility B-2, ?', '#include <iostream>', 'using namespace std;', 'protected:', 'int a;', 'public:', 'void get_a(int n)', 'a = n;', 'protected:', 'int b;', 'public:', 'void get_b(int n)', 'b = n;', 'class C : public A,public B', 'public:', 'void display()', 'std::cout << ""The value of a is : "" <<a<< std::endl;', 'std::cout << ""The value of b is : "" <<b<< std::endl;', 'cout<<""Addition of a and b is : ""<<a+b;', 'int main()', 'c.get_a(10);', 'c.get_b(20);', 'c.display();', 'return 0;', '#include <iostream>', 'using namespace std;', 'public:', 'void display()', 'std::cout << ""Class A"" << std::endl;', 'public:', 'void display()', 'std::cout << ""Class B"" << std::endl;', 'class C : public A, public B', 'void view()', 'display();', 'int main()', 'C c;', 'c.display();', 'return 0;', 'class C : public A, public B', 'void view()', 'A :: display();         // Calling the display() function of class A.', 'B :: display();         // Calling the display() function of class B.', 'public:', 'void display()', 'cout<<?Class A?;', 'public:', 'void display()', 'cout<<?Class B?;', 'int main()', 'B b;', 'b.display();               // Calling the display() function of B class.', 'b.B :: display();       // Calling the display() function defined in B class.', '#include <iostream>', 'using namespace std;', 'protected:', 'int a;', 'public:', 'void get_a()', 'std::cout << ""Enter the value of \'a\' : "" << std::endl;', 'cin>>a;', 'class B : public A', 'protected:', 'int b;', 'public:', 'void get_b()', 'std::cout << ""Enter the value of \'b\' : "" << std::endl;', 'cin>>b;', 'class C', 'protected:', 'int c;', 'public:', 'void get_c()', 'std::cout << ""Enter the value of c is : "" << std::endl;', 'cin>>c;', 'class D : public B, public C', 'protected:', 'int d;', 'public:', 'void mul()', 'get_a();', 'get_b();', 'get_c();', 'std::cout << ""Multiplication of a,b,c is : "" <<a*b*c<< std::endl;', 'int main()', 'D d;', 'd.mul();', 'return 0;', 'class B : public A', 'class C : public A', 'class D : public A', '#include <iostream>', 'using namespace std;', 'class Shape                 // Declaration of base class.', 'public:', 'int a;', 'int b;', 'void get_data(int n,int m)', 'a= n;', 'b = m;', 'class Rectangle : public Shape  // inheriting Shape class', 'public:', 'int rect_area()', 'int result = a*b;', 'return result;', 'class Triangle : public Shape    // inheriting Shape class', 'public:', 'int triangle_area()', 'float result = 0.5*a*b;', 'return result;', 'int main()', 'Rectangle r;', 'Triangle t;', 'int length,breadth,base,height;', 'std::cout << ""Enter the length and breadth of a rectangle: "" << std::endl;', 'cin>>length>>breadth;', 'r.get_data(length,breadth);', 'int m = r.rect_area();', 'std::cout << ""Area of the rectangle is : "" <<m<< std::endl;', 'std::cout << ""Enter the base and height of the triangle: "" << std::endl;', 'cin>>base>>height;', 't.get_data(base,height);', 'float n = t.triangle_area();', 'std::cout <<""Area of the triangle is : ""  << n<<std::endl;', 'return 0;']","['Salary: 60000\nBonus: 5000', 'Eating...\nBarking...', 'Multiplication of a and b is : 20', 'Eating...\nBarking...\nWeeping...', 'The value of a is : 10\nThe value of b is : 20\nAddition of a and b is : 30', ""error: reference to 'display' is ambiguous\n        display();"", ""Enter the value of 'a' :\n10              \nEnter the value of 'b' :    \n20      \nEnter the value of c is :   \n30  \nMultiplication of a,b,c is : 6000"", 'Enter the length and breadth of a rectangle:\n23  \n20  \nArea of the rectangle is : 460          \nEnter the base and height of the triangle:  \n2   \n5\nArea of the triangle is : 5']",['Base class visibility|||Derived class visibility&&&Public|||Private|||Protected&&&Private|||Not Inherited|||Not Inherited|||Not Inherited&&&Protected|||Protected|||Private|||Protected&&&Public|||Public|||Private|||Protected'],"['|||Single inheritance|||Multiple inheritance|||Hierarchical inheritance|||Multilevel inheritance|||Hybrid inheritance||||||When the base class is privately inherited by the derived class, public members of the base class becomes the private members of the derived class. Therefore, the public members of the base class are not accessible by the objects of the derived class only by the member functions of the derived class.|||When the base class is publicly inherited by the derived class, public members of the base class also become the public members of the derived class. Therefore, the public members of the base class are accessible by the objects of the derived class as well as by the member functions of the base class.||||||In C++, the default mode of visibility is private. |||The private members of the base class are never inherited.||||||Public: When the member is declared as public, it is accessible to all the functions of the program.|||Private: When the member is declared as private, it is accessible within the class only.|||Protected: When the member is declared as protected, it is accessible within its own class as well as the class immediately derived from it.||||||The above issue can be resolved by using the class resolution operator with the function. In the above example, the derived class code can be rewritten as:|||']"
51,['C++ Aggregation (HAS-A Relationship)'],"['In C++, aggregation is a process in which one class defines another class as any entity reference. It is another way to reuse the class. It is a form of association that represents HAS-A relationship.']","['https://www.javatpoint.com/cpp-polymorphism', 'https://www.javatpoint.com/cpp-inheritance', 'https://www.javatpoint.com/cpp-polymorphism', 'https://www.javatpoint.com/cpp-inheritance', 'https://www.javatpoint.com/cpp-polymorphism']",[],[],['C++ Aggregation Example'],[],[],[],"[""Let's see an example of aggregation where Employee class has the reference of Address class as data member. In such way, it can reuse the members of Address class.""]",[],"['#include <iostream>', 'using namespace std;', 'class Address {', 'public:', 'string addressLine, city, state;', 'Address(string addressLine, string city, string state)', 'this->addressLine = addressLine;', 'this->city = city;', 'this->state = state;', 'class Employee', 'private:', 'Address* address;  //Employee HAS-A Address', 'public:', 'int id;', 'string name;', 'Employee(int id, string name, Address* address)', '{', 'this->id = id;', 'this->name = name;', 'this->address = address;', '}', 'void display()', '{', 'cout<<id <<"" ""<<name<< "" ""<<', 'address->addressLine<< "" ""<< address->city<< "" ""<<address->state<<endl;', '}', 'int main(void) {', 'Address a1= Address(""C-146, Sec-15"",""Noida"",""UP"");', 'Employee e1 = Employee(101,""Nakul"",&a1);', 'e1.display();', 'return 0;']","['101 Nakul C-146, Sec-15 Noida UP']",[],[]
52,['C++ Polymorphism'],"['The term ""Polymorphism"" is the combination of ""poly"" + ""morphs"" which means many forms. It is a greek word. In object-oriented programming, we use 3 main concepts: inheritance, encapsulation, and polymorphism.']","['https://www.javatpoint.com/cpp-overloading', 'https://www.javatpoint.com/cpp-aggregation', 'https://www.javatpoint.com/cpp-overloading', 'https://www.javatpoint.com/cpp-aggregation', 'https://www.javatpoint.com/cpp-overloading']",['https://static.javatpoint.com/cpp/images/cpp-polymorphism.png'],[],"['Real Life Example Of Polymorphism', 'Differences b/w compile time and run time polymorphism.', 'C++ Runtime Polymorphism Example', 'C++ Run time Polymorphism Example: By using two derived class', 'Runtime Polymorphism with Data Members']",[],[],"['There are two types of polymorphism in C++:', ""Let's see a simple example of run time polymorphism in C++."", '// an example without the virtual keyword.', ""Let's see another example of run time polymorphism in C++ where we are having two derived classes."", '// an example with virtual keyword.']","[""Let's consider a real-life example of polymorphism. A lady behaves like a teacher in a classroom, mother or daughter in a home and customer in a market. Here, a single person is behaving differently according to the situations."", ""Runtime Polymorphism can be achieved by data members in C++. Let's see an example where we are accessing the field by reference variable which refers to the instance of derived class.""]","['In the above case, the prototype of display() function is the same in both the base and derived class. Therefore, the static binding cannot be applied. It would be great if the appropriate function is selected at the run time. This is known as run time polymorphism.']","['class A                                  //  base class declaration.', 'int a;', 'public:', 'void display()', '{', 'cout<< ""Class A "";', '}', 'class B : public A                       //  derived class declaration.', 'int b;', 'public:', 'void display()', 'cout<<""Class B"";', '#include <iostream>', 'using namespace std;', 'class Animal {', 'public:', 'void eat(){', 'cout<<""Eating..."";', '}', 'class Dog: public Animal', 'public:', 'void eat()', '{           cout<<""Eating bread..."";', '}', 'int main(void) {', 'Dog d = Dog();', 'd.eat();', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Shape {                                        //  base class', 'public:', 'virtual void draw(){                             // virtual function', 'cout<<""drawing...""<<endl;', '}', 'class Rectangle: public Shape                  //  inheriting Shape class.', 'public:', 'void draw()', '{', 'cout<<""drawing rectangle...""<<endl;', '}', 'class Circle: public Shape                        //  inheriting Shape class.', 'public:', 'void draw()', '{', 'cout<<""drawing circle...""<<endl;', '}', 'int main(void) {', 'Shape *s;                               //  base class pointer.', 'Shape sh;                               // base class object.', 'Rectangle rec;', 'Circle cir;', 's=&sh', 's->draw();', 's=&rec', 's->draw();', 's=?', 's->draw();', '#include <iostream>', 'using namespace std;', 'class Animal {                                          //  base class declaration.', 'public:', 'string color = ""Black"";', 'class Dog: public Animal                       // inheriting Animal class.', 'public:', 'string color = ""Grey"";', 'int main(void) {', 'Animal d= Dog();', 'cout<<d.color;']","['Eating bread...', 'drawing...\ndrawing rectangle...\ndrawing circle...', 'Black']","['Compile time polymorphism|||Run time polymorphism&&&The function to be invoked is known at the compile time.|||The function to be invoked is known at the run time.&&&It is also known as overloading, early binding and static binding.|||It is also known as overriding, Dynamic binding and late binding.&&&Overloading is a compile time polymorphism where more than one method is having the same name but with the different number of parameters or the type of the parameters.|||Overriding is a run time polymorphism where more than one method is having the same name, number of parameters and the type of the parameters.&&&It is achieved by function overloading and operator overloading.|||It is achieved by virtual functions and pointers.&&&It provides fast execution as it is known at the compile time.|||It provides slow execution as it is known at the run time.&&&It is less flexible as mainly all the things execute at the compile time.|||It is more flexible as all the things execute at the run time.']","[""|||Compile time polymorphism: The overloaded functions are invoked by matching the type and number of arguments. This information is available at the compile time and, therefore, compiler selects the appropriate function at the compile time. It is achieved by function overloading and operator overloading which is also known as static binding or early binding. Now, let's consider the case where function name and prototype is same.||||||Run time polymorphism: Run time polymorphism is achieved when the object's method is invoked at the run time instead of compile time. It is achieved by method overriding which is also known as dynamic binding or late binding.|||""]"
53,['C++ Overloading (Function and Operator)'],"['If we create two or more members having the same name but different in number or type of parameter, it is known as C++ overloading. In C++, we can overload:']","['https://www.javatpoint.com/cpp-function-overriding', 'https://www.javatpoint.com/cpp-polymorphism', 'https://www.javatpoint.com/cpp-function-overriding', 'https://www.javatpoint.com/cpp-polymorphism', 'https://www.javatpoint.com/cpp-function-overriding']","['https://static.javatpoint.com/cpp/images/cpp-overloading.png', 'https://static.javatpoint.com/cpp/images/cpp-overloading2.png']",[],['Types of overloading in C++ are:'],[],[],"['It is because these members have parameters only.', ""Let's see the simple example of function overloading where we are changing number of arguments of add() method."", '// program of function overloading when number of arguments vary.', ""Let's see the simple example when the type of the arguments vary."", '// Program of function overloading with different types of arguments.', 'When the compiler is unable to decide which function is to be invoked among the overloaded function, this situation is known as function overloading.', 'When the compiler shows the ambiguity error, the compiler does not run the program.', 'Causes of Function Overloading:', ""Let's see a simple example."", ""Let's see a simple example."", ""Let's see a simple example."", 'The advantage of Operators overloading is to perform different operations on the same operand.', 'Operator that cannot be overloaded are as follows:', 'class_name is the name of the class.', 'operator op is an operator function where op is the operator being overloaded, and the operator is the keyword.', ""Let's see the simple example of operator overloading in C++. In this example, void operator ++ () operator function is defined (inside Test class)."", '// program to overload the unary operator ++.', ""Let's see a simple example of overloading the binary operators."", '// program to overload the binary operators.']","[""The advantage of Function overloading is that it increases the readability of the program because you don't need to use different names for the same action.""]","['Function Overloading is defined as the process of having two or more function with the same name, but different in parameters is known as function overloading in C++. In function overloading, the function is redefined by using either different types of arguments or a different number of arguments. It is only through these differences compiler can differentiate between the functions.', 'The above example shows an error ""call of overloaded \'fun(double)\' is ambiguous"". The fun(10) will call the first function. The fun(1.2) calls the second function according to our prediction. But, this does not refer to any function as in C++, all the floating point constants are treated as double not as a float. If we replace float to double, the program works. Therefore, this is a type conversion from float to double.', 'The above example shows an error ""call of overloaded \'fun(int)\' is ambiguous"". The fun(int a, int b=9) can be called in two ways: first is by calling the function with one argument, i.e., fun(12) and another way is calling the function with two arguments, i.e., fun(4,5). The fun(int i) function is invoked with one argument. Therefore, the compiler could not be able to select among fun(int i) and fun(int a,int b=9).', 'The above example shows an error ""call of overloaded \'fun(int&)\' is ambiguous"". The first function takes one integer argument and the second function takes a reference parameter as an argument. In this case, the compiler does not know which function is needed by the user as there is no syntactical difference between the fun(int) and fun(int &).', 'Operator overloading is a compile-time polymorphism in which the operator is overloaded to provide the special meaning to the user-defined data type. Operator overloading is used to overload or redefines most of the operators available in C++. It is used to perform the operation on the user-defined data type. For example, C++ provides the ability to add the variables of the user-defined data type that is applied to the built-in data types.', 'Where the return type is the type of value returned by the function.\nclass_name is the name of the class.\noperator op is an operator function where op is the operator being overloaded, and the operator is the keyword.\nRules for Operator Overloading\n\nExisting operators can only be overloaded, but the new operators cannot be overloaded.\nThe overloaded operator contains atleast one operand of the user-defined data type.\nWe cannot use friend function to overload certain operators. However, the member function can be used to overload those operators.\nWhen unary operators are overloaded through a member function take no explicit arguments, but, if they are overloaded by a friend function, takes one argument.\nWhen binary operators are overloaded through a member function takes one explicit argument, and if they are overloaded through a friend function takes two explicit arguments. \n\nC++ Operators Overloading Example\nLet\'s see the simple example of operator overloading in C++. In this example, void operator ++ () operator function is defined (inside Test class).\n// program to overload the unary operator ++.\n\n#include <iostream>  \nusing namespace std;  \nclass Test  \n{  \n   private:  \n      int num;  \n   public:  \n       Test(): num(8){}  \n       void operator ++()         {   \n          num = num+2;   \n       }  \n       void Print() {   \n           cout<<""The Count is: ""<<num;   \n       }  \n};  \nint main()  \n{  \n    Test tt;  \n    ++tt;  // calling of a function ""void operator ++()""  \n    tt.Print();  \n    return 0;  \n}  \n\nOutput:\nThe Count is: 10\n\nLet\'s see a simple example of overloading the binary operators.\n// program to overload the binary operators.\n\n#include <iostream>\nusing namespace std;\nclass A\n{\n  \n    int x;\n      public:\n      A(){}\n    A(int i)\n    {\n       x=i;\n    }\n    void operator+(A);\n    void display();\n};\n\nvoid A :: operator+(A a)\n{\n   \n    int m = x+a.x;\n    cout<<""The result of the addition of two objects is : ""<<m;\n\n}\nint main()\n{\n    A a1(5);\n    A a2(4);\n    a1+a2;\n    return 0;\n}\n\nOutput:\nThe result of the addition of two objects is : 9 \n\n\nNext TopicC++ Function Overriding\n\n\n\n← prev\nnext →\n\n\n']","['#include <iostream>', 'using namespace std;', 'class Cal {', 'public:', 'static int add(int a,int b){', 'return a + b;', '}', 'static int add(int a, int b, int c)', '{', 'return a + b + c;', '}', 'int main(void) {', 'Cal C;                                                    //     class object declaration.', 'cout<<C.add(10, 20)<<endl;', 'cout<<C.add(12, 20, 23);', 'return 0;', '#include<iostream>', 'using namespace std;', 'int mul(int,int);', 'float mul(float,int);', 'int mul(int a,int b)', 'return a*b;', 'float mul(double x, int y)', 'return x*y;', 'int main()', 'int r1 = mul(6,7);', 'float r2 = mul(0.2,3);', 'std::cout << ""r1 is : "" <<r1<< std::endl;', 'std::cout <<""r2 is : ""  <<r2<< std::endl;', 'return 0;', '#include<iostream>', 'using namespace std;', 'void fun(int);', 'void fun(float);', 'void fun(int i)', 'std::cout << ""Value of i is : "" <<i<< std::endl;', 'void fun(float j)', 'std::cout << ""Value of j is : "" <<j<< std::endl;', 'int main()', 'fun(12);', 'fun(1.2);', 'return 0;', '#include<iostream>', 'using namespace std;', 'void fun(int);', 'void fun(int,int);', 'void fun(int i)', 'std::cout << ""Value of i is : "" <<i<< std::endl;', 'void fun(int a,int b=9)', 'std::cout << ""Value of a is : "" <<a<< std::endl;', 'std::cout << ""Value of b is : "" <<b<< std::endl;', 'int main()', 'fun(12);', 'return 0;', '#include <iostream>', 'using namespace std;', 'void fun(int);', 'void fun(int &);', 'int main()', 'int a=10;', 'fun(a); // error, which f()?', 'return 0;', 'void fun(int x)', 'std::cout << ""Value of x is : "" <<x<< std::endl;', 'void fun(int &b)', 'std::cout << ""Value of b is : "" <<b<< std::endl;', 'return_type class_name  : : operator op(argument_list)', '#include <iostream>', 'using namespace std;', 'class Test', 'private:', 'int num;', 'public:', 'Test(): num(8){}', 'void operator ++()         {', 'num = num+2;', '}', 'void Print() {', 'cout<<""The Count is: ""<<num;', '}', 'int main()', 'Test tt;', '++tt;  // calling of a function ""void operator ++()""', 'tt.Print();', 'return 0;', '#include <iostream>', 'using namespace std;', 'int x;', 'public:', 'A(){}', 'A(int i)', 'x=i;', 'void operator+(A);', 'void display();', 'void A :: operator+(A a)', 'int m = x+a.x;', 'cout<<""The result of the addition of two objects is : ""<<m;', 'int main()', 'A a1(5);', 'A a2(4);', 'a1+a2;', 'return 0;']","['30\n55', 'r1 is : 42\nr2 is : 0.6', 'The Count is: 10', 'The result of the addition of two objects is : 9']",[],"['|||methods,|||constructors, and|||indexed properties||||||Function overloading|||Operator overloading||||||Type Conversion.|||Function with default arguments.|||Function with pass by reference.||||||Type Conversion:||||||Function with Default Arguments||||||Function with pass by reference||||||Scope operator (::)|||Sizeof|||member selector(.)|||member pointer selector(*)|||ternary operator(?:) ||||||Existing operators can only be overloaded, but the new operators cannot be overloaded.|||The overloaded operator contains atleast one operand of the user-defined data type.|||We cannot use friend function to overload certain operators. However, the member function can be used to overload those operators.|||When unary operators are overloaded through a member function take no explicit arguments, but, if they are overloaded by a friend function, takes one argument.|||When binary operators are overloaded through a member function takes one explicit argument, and if they are overloaded through a friend function takes two explicit arguments. |||']"
54,['C++ Function Overriding'],"['If derived class defines same function as defined in its base class, it is known as function overriding in C++. It is used to achieve runtime polymorphism. It enables you to provide specific implementation of the function which is already provided by its base class.']","['https://www.javatpoint.com/cpp-virtual-function', 'https://www.javatpoint.com/cpp-overloading', 'https://www.javatpoint.com/cpp-virtual-function', 'https://www.javatpoint.com/cpp-overloading', 'https://www.javatpoint.com/cpp-virtual-function']",[],[],['C++ Function Overriding Example'],[],[],"[""Let's see a simple example of Function overriding in C++. In this example, we are overriding the eat() function.""]",[],[],"['#include', 'using namespace std;', 'class Animal {', 'public:', 'void eat(){', 'cout<<""Eating..."";', '}', 'class Dog: public Animal', 'public:', 'void eat()', 'cout<<""Eating bread..."";', 'int main(void) {', 'Dog d = Dog();', 'd.eat();', 'return 0;']",['Eating bread...'],[],[]
55,['C++ virtual function'],"['In late binding function call is resolved during runtime. Therefore compiler determines the type of object at runtime, and then binds the function call.']","['https://www.javatpoint.com/interfaces-in-cpp', 'https://www.javatpoint.com/html-figcaption-tag', 'https://www.javatpoint.com/interfaces-in-cpp', 'https://www.javatpoint.com/html-figcaption-tag', 'https://www.javatpoint.com/interfaces-in-cpp']",[],[],"['Late binding or Dynamic linkage', 'Pure Virtual Function']",[],[],"['Rules of Virtual Function', ""Let's see the simple example of C++ virtual function used to invoked the derived class in a program."", 'Pure virtual function can be defined as:', ""Let's see a simple example:""]","['In the above example, the base class contains the pure virtual function. Therefore, the base class is an abstract base class. We cannot create the object of the base class.']","['In the above example, * a is the base class pointer. The pointer can only access the base class members but not the members of the derived class. Although C++ permits the base pointer to point to any object derived from the base class, it cannot directly access the members of the derived class. Therefore, there is a need for virtual function which allows the base pointer to access the members of the derived class.']","['#include <iostream>', 'using namespace std;', 'int x=5;', 'public:', 'void display()', 'std::cout << ""Value of x is : "" << x<<std::endl;', 'class B: public A', 'int y = 10;', 'public:', 'void display()', 'std::cout << ""Value of y is : "" <<y<< std::endl;', 'int main()', 'A *a;', 'B b;', 'a = &b', 'a->display();', 'return 0;', '#include <iostream>', 'public:', 'virtual void display()', 'cout << ""Base class is invoked""<<endl;', 'class B:public A', 'public:', 'void display()', 'cout << ""Derived Class is invoked""<<endl;', 'int main()', 'A* a;    //pointer of base class', 'B b;     //object of derived class', 'a = &b', 'a->display();   //Late Binding occurs', 'virtual void display() = 0;', '#include <iostream>', 'using namespace std;', 'class Base', 'public:', 'virtual void show() = 0;', 'class Derived : public Base', 'public:', 'void show()', 'std::cout << ""Derived class is derived from the base class."" << std::endl;', 'int main()', 'Base *bptr;', 'Derived d;', 'bptr = &d', 'bptr->show();', 'return 0;']","['Value of x is : 5', 'Derived Class is invoked', 'Derived class is derived from the base class.']",[],"['|||A C++ virtual function is a member function in the base class that you redefine in a derived class. It is declared using the virtual keyword.|||It is used to tell the compiler to perform dynamic linkage or late binding on the function.|||There is a necessity to use the single pointer to refer to all the objects of the different classes. So, we create the pointer to the base class that refers to all the derived objects. But, when base class pointer contains the address of the derived class object, always executes the base class function. This issue can only be resolved by using the \'virtual\' function.|||A \'virtual\' is a keyword preceding the normal declaration of a function.|||When the function is made virtual, C++ determines which function is to be invoked at the runtime based on the type of the object pointed by the base class pointer.||||||Virtual functions must be members of some class.|||Virtual functions cannot be static members.|||They are accessed through object pointers.|||They can be a friend of another class.|||A virtual function must be defined in the base class, even though it is not used.|||The prototypes of a virtual function of the base class and all the derived classes must be identical. If the two functions with the same name but different prototypes, C++ will consider them as the overloaded functions.|||We cannot have a virtual constructor, but we can have a virtual destructor|||Consider the situation when we don\'t use the virtual keyword.||||||A virtual function is not used for performing any task. It only serves as a placeholder.|||When the function has no definition, such function is known as ""do-nothing"" function.|||The ""do-nothing"" function is known as a pure virtual function. A pure virtual function is a function declared in the base class that has no definition relative to the base class.|||A class containing the pure virtual function cannot be used to declare the objects of its own, such classes are known as abstract base classes.|||The main objective of the base class is to provide the traits to the derived classes and to create the base pointer used for achieving the runtime polymorphism. |||']"
56,['Interfaces in C++ (Abstract Classes)'],['Abstract classes are the way to achieve abstraction in C++. Abstraction in C++ is the process to hide the internal details and showing functionality only. Abstraction can be achieved by two ways:'],"['https://www.javatpoint.com/data-abstraction-in-cpp', 'https://www.javatpoint.com/cpp-function-overriding', 'https://www.javatpoint.com/data-abstraction-in-cpp', 'https://www.javatpoint.com/cpp-function-overriding', 'https://www.javatpoint.com/data-abstraction-in-cpp']",[],[],['C++ Abstract class'],[],[],['Abstract class and interface both can have abstract methods which are necessary for abstraction.'],"['In C++ class is made abstract by declaring at least one of its functions as <>strong>pure virtual function. A pure virtual function is specified by placing ""= 0"" in its declaration. Its implementation must be provided by derived classes.', ""Let's see an example of abstract class in C++ which has one abstract method draw(). Its implementation is provided by derived classes: Rectangle and Circle. Both classes have different implementation.""]",[],"['#include <iostream>', 'using namespace std;', 'class Shape', 'public:', 'virtual void draw()=0;', 'class Rectangle : Shape', 'public:', 'void draw()', 'cout < <""drawing rectangle..."" < <endl;', 'class Circle : Shape', 'public:', 'void draw()', 'cout <<""drawing circle..."" < <endl;', 'int main( ) {', 'Rectangle rec;', 'Circle cir;', 'rec.draw();', 'cir.draw();', 'return 0;']",['drawing rectangle...\ndrawing circle...'],[],['|||Abstract class|||Interface|||']
57,['Data Abstraction in C++'],['In C++ program if we implement class with private and public members then it is an example of data abstraction.'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/cpp/images/cpp-data-abstraction.png'],[],['Advantages Of Abstraction:'],[],[],"['Data Abstraction can be achieved in two ways:', 'Access Specifiers Implement Abstraction:', ""Let's see a simple example of abstraction in header files."", '// program to calculate the power of a number.', ""Let's see a simple example of data abstraction using classes.""]","['In the above example, pow() function is used to calculate 4 raised to the power 3. The pow() function is present in the math.h header file in which all the implementation details of the pow() function is hidden.', ""In the above example, abstraction is achieved using classes. A class 'Sum' contains the private members x, y and z are only accessible by the member functions of the class.""]","['Abstraction using classes: An abstraction can be achieved using classes. A class is used to group all the data members and member functions into a single unit by using the access specifiers. A class has the responsibility to determine which data member is to be visible outside and which is not.', 'Abstraction in header files: An another type of abstraction is header file. For example, pow() function available is used to calculate the power of a number without actually knowing which algorithm function uses to calculate the power. Thus, we can say that header files hides all the implementation details from the user.']","['#include <iostream>', '#include<math.h>', 'using namespace std;', 'int main()', 'int n = 4;', 'int power = 3;', 'int result = pow(n,power);         // pow(n,power) is the  power function', 'std::cout << ""Cube of n is : "" <<result<< std::endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'class Sum', 'private: int x, y, z; // private variables', 'public:', 'void add()', 'cout<<""Enter two numbers: "";', 'cin>>x>>y;', 'z= x+y;', 'cout<<""Sum of two number is: ""<<z<<endl;', 'int main()', 'Sum sm;', 'sm.add();', 'return 0;']","['Cube of n is : 64', 'Enter two numbers:', '3', '6', 'Sum of two number is: 9']",[],"[""|||Data Abstraction is a process of providing only the essential details to the outside world and hiding the internal details, i.e., representing only the essential details in the program.|||Data Abstraction is a programming technique that depends on the seperation of the interface and implementation details of the program.|||Let's take a real life example of AC, which can be turned ON or OFF, change the temperature, change the mode, and other external components such as fan, swing. But, we don't know the internal details of the AC, i.e., how it works internally. Thus, we can say that AC seperates the implementation details from the external interface.|||C++ provides a great level of abstraction. For example, pow() function is used to calculate the power of a number without knowing the algorithm the function follows.||||||Abstraction using classes|||Abstraction in header files.||||||Public specifier: When the members are declared as public, members can be accessed anywhere from the program.|||Private specifier: When the members are declared as private, members can only be accessed only by the member functions of the class.||||||Implementation details of the class are protected from the inadvertent user level errors.|||A programmer does not need to write the low level code.|||Data Abstraction avoids the code duplication, i.e., programmer does not have to undergo the same tasks every time to perform the similar operation.|||The main aim of the data abstraction is to reuse the code and the proper partitioning of the code across the classes.|||Internal implementation can be changed without affecting the user level code.|||""]"
58,['C++ Namespaces'],['Namespaces in C++ are used to organize too many classes so that it can be easy to handle the application.'],"['https://www.javatpoint.com/cpp-strings', 'https://www.javatpoint.com/data-abstraction-in-cpp', 'https://www.javatpoint.com/cpp-strings', 'https://www.javatpoint.com/data-abstraction-in-cpp', 'https://www.javatpoint.com/cpp-strings']",[],[],"['C++ namespace Example', 'C++ namespace example: by using keyword']",[],[],"['In C++, global namespace is the root namespace. The global::std will always refer to the namespace ""std"" of C++ Framework.', ""Let's see the simple example of namespace which include variable and functions.""]","[""For accessing the class of a namespace, we need to use namespacename::classname. We can use using keyword so that we don't have to use complete name all the time."", 'Let\'s see another example of namespace where we are using ""using"" keyword so that we don\'t have to use complete name for accessing a namespace program.']",[],"['#include <iostream>', 'using namespace std;', 'namespace First {', 'void sayHello() {', 'cout<<""Hello First Namespace""<<endl;', 'namespace Second  {', 'void sayHello() {', 'cout<<""Hello Second Namespace""<<endl;', '}', 'int main()', 'First::sayHello();', 'Second::sayHello();', 'return 0;', '#include <iostream>', 'using namespace std;', 'namespace First{', 'void sayHello(){', 'cout << ""Hello First Namespace"" << endl;', 'namespace Second{', 'void sayHello(){', 'cout << ""Hello Second Namespace"" << endl;', 'using namespace First;', 'int main () {', 'sayHello();', 'return 0;']","['Hello First Namespace\nHello Second Namespace', 'Hello First Namespace']",[],[]
59,['C++ Strings'],"['In C++, string is an object of std::string class that represents sequence of characters.\nWe can perform many operations on strings such as concatenation, comparison, conversion etc.']","['https://www.javatpoint.com/cpp-exception-handling', 'https://www.javatpoint.com/cpp-namespaces', 'https://www.javatpoint.com/cpp-string-compare-function', 'https://www.javatpoint.com/cpp-string-length-function', 'https://www.javatpoint.com/cpp-string-swap-function', 'https://www.javatpoint.com/cpp-string-size-function', 'https://www.javatpoint.com/cpp-string-resize-function', 'https://www.javatpoint.com/cpp-string-replace-function', 'https://www.javatpoint.com/cpp-string-append-function', 'https://www.javatpoint.com/cpp-string-at-function', 'https://www.javatpoint.com/cpp-string-find-function', 'https://www.javatpoint.com/cpp-string-find-first-of-function', 'https://www.javatpoint.com/cpp-string-find-first-not-of-function', 'https://www.javatpoint.com/cpp-string-find-last-of-function', 'https://www.javatpoint.com/cpp-string-find-last-not-of-function', 'https://www.javatpoint.com/cpp-string-insert-function', 'https://www.javatpoint.com/cpp-string-max-size-function', 'https://www.javatpoint.com/cpp-string-push-back-function', 'https://www.javatpoint.com/cpp-string-pop-back-function', 'https://www.javatpoint.com/cpp-string-assign-function', 'https://www.javatpoint.com/cpp-string-copy-function', 'https://www.javatpoint.com/cpp-string-back-function', 'https://www.javatpoint.com/cpp-string-begin-function', 'https://www.javatpoint.com/cpp-string-capacity-function', 'https://www.javatpoint.com/cpp-string-front-function', 'https://www.javatpoint.com/cpp-string-operator+=()-function', 'https://www.javatpoint.com/cpp-string-operator=()-function', 'https://www.javatpoint.com/cpp-string-rfind-function', 'https://www.javatpoint.com/cpp-string-end-function', 'https://www.javatpoint.com/cpp-string-rend-function', 'https://www.javatpoint.com/cpp-string-shrink-to-fit-function', 'https://www.javatpoint.com/cpp-string-c-str-function', 'https://www.javatpoint.com/cpp-string-crend-function', 'https://www.javatpoint.com/cpp-string-rbegin-function', 'https://www.javatpoint.com/cpp-exception-handling', 'https://www.javatpoint.com/cpp-namespaces', 'https://www.javatpoint.com/cpp-exception-handling']",[],[],"['C++ String Example', 'C++ String Compare Example', 'C++ String Concat Example', 'C++ String Copy Example', 'C++ String Length Example', 'C++ String Functions']",[],[],"[""Let's see the simple example of C++ string."", ""Let's see the simple example of string comparison using strcmp() function."", ""Let's see the simple example of string concatenation using strcat() function."", ""Let's see the simple example of copy the string using strcpy() function."", ""Let's see the simple example of finding the string length using strlen() function.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main( ) {', 'string s1 = ""Hello"";', ""char ch[] = { 'C', '+', '+'};"", 'string s2 = string(ch);', 'cout<<s1<<endl;', 'cout<<s2<<endl;', '#include', '#include <cstring>', 'using namespace std;', 'int main ()', 'char key[] = ""mango"";', 'char buffer[50];', 'cout<<""What is my favourite fruit? "";', 'cin>>buffer;', '} while (strcmp (key,buffer) != 0);', 'cout<<""Answer is correct!!""<<endl;', 'return 0;', '#include <iostream>', '#include <cstring>', 'using namespace std;', 'int main()', 'char key[25], buffer[25];', 'cout << ""Enter the key string: "";', 'cin.getline(key, 25);', 'cout << ""Enter the buffer string: "";', 'cin.getline(buffer, 25);', 'strcat(key, buffer);', 'cout << ""Key = "" << key << endl;', 'cout << ""Buffer = "" << buffer<<endl;', 'return 0;', '#include <iostream>', '#include <cstring>', 'using namespace std;', 'int main()', 'char key[25], buffer[25];', 'cout << ""Enter the key string: "";', 'cin.getline(key, 25);', 'strcpy(buffer, key);', 'cout << ""Key = ""<< key << endl;', 'cout << ""Buffer = ""<< buffer<<endl;', 'return 0;', '#include <iostream>', '#include <cstring>', 'using namespace std;', 'int main()', 'char ary[] = ""Welcome to C++ Programming"";', 'cout << ""Length of String = "" << strlen(ary)<<endl;', 'return 0;']","['Hello\nC++', 'What is my favourite fruit? apple\nWhat is my favourite fruit? banana\nWhat is my favourite fruit? mango\nAnswer is correct!!', 'Enter the key string: Welcome to\nEnter the buffer string:  C++ Programming.\nKey = Welcome to C++ Programming.\nBuffer =  C++ Programming.', 'Enter the key string: C++ Tutorial\nKey = C++ Tutorial\nBuffer = C++ Tutorial', 'Length of String = 26']","['Function|||Description&&&int compare(const string& str)|||It is used to compare two string objects.&&&int length()|||It is used to find the length of the string.&&&void swap(string& str)|||It is used to swap the values of two string objects.&&&string substr(int pos,int n)|||It creates a new string object of n characters.&&&int size()|||It returns the length of the string in terms of bytes.&&&void resize(int n)|||It is used to resize the length of the string up to n characters.&&&string& replace(int pos,int len,string& str)|||It replaces portion of the string that begins at character position pos and spans len characters.&&&string& append(const string& str)|||It adds new characters at the end of another string object.&&&char& at(int pos)|||It is used to access an individual character at specified position pos.&&&int find(string& str,int pos,int n)|||It is used to find the string specified in the parameter.&&&int find_first_of(string& str,int pos,int n)|||It is used to find the first occurrence of the specified sequence.&&&int find_first_not_of(string& str,int pos,int n )|||It is used to search the string for the first character that does not match with any of the characters specified in the string.&&&int find_last_of(string& str,int pos,int n)|||It is used to search the string for the last character of specified sequence.&&&int find_last_not_of(string& str,int pos)|||It searches for the last character that does not match with the specified sequence.&&&string& insert()|||It inserts a new character before the character indicated by the position pos.&&&int max_size()|||It finds the maximum length of the string.&&&void push_back(char ch)|||It adds a new character ch at the end of the string.&&&void pop_back()|||It removes a last character of the string.&&&string& assign()|||It assigns new value to the string.&&&int copy(string& str)|||It copies the contents of string into another.&&&char& back()|||It returns the reference of last character.&&&Iterator begin()|||It returns the reference of first character.&&&int capacity()|||It returns the allocated space for the string.&&&const_iterator cbegin()|||It points to the first element of the string.&&&const_iterator cend()|||It points to the last element of the string.&&&void clear()|||It removes all the elements from the string.&&&const_reverse_iterator crbegin()|||It points to the last character of the string.&&&const_char* data()|||It copies the characters of string into an array.&&&bool empty()|||It checks whether the string is empty or not.&&&string& erase()|||It removes the characters as specified.&&&char& front()|||It returns a reference of the first character.&&&string&\xa0 operator+=()|||It appends a new character at the end of the string.&&&string& operator=()|||It assigns a new value to the string.&&&char operator[](pos)|||It retrieves a character at specified position pos.&&&int rfind()|||It searches for the last occurrence of the string.&&&iterator end()|||It references the last character of the string.&&&reverse_iterator rend()|||It points to the first character of the string.&&&void shrink_to_fit()|||It reduces the capacity and makes it equal to the size of the string.&&&char* c_str()|||It returns pointer to an array that contains null terminated sequence of characters.&&&const_reverse_iterator crend()|||It references the first character of the string.&&&reverse_iterator rbegin()|||It reference the last character of the string.&&&void reserve(inr len)|||It requests a change in capacity.&&&allocator_type get_allocator();|||It returns the allocated object associated with the string.']",[]
60,['C++ Exception Handling'],['Exception Handling in C++ is a process to handle runtime errors. We perform exception handling so the normal flow of the application can be maintained even after runtime errors.'],"['https://www.javatpoint.com/cpp-try-catch', 'https://www.javatpoint.com/cpp-strings', 'https://www.javatpoint.com/cpp-try-catch', 'https://www.javatpoint.com/cpp-strings', 'https://www.javatpoint.com/cpp-try-catch']",['https://static.javatpoint.com/cpp/images/cpp-exception-handling1.png'],[],"['Advantage', 'C++ Exception Classes', 'C++ Exception Handling Keywords']",[],[],"['It maintains the normal flow of the application. In such case, rest of the code is executed even after exception.', ""All the exception classes in C++ are derived from std::exception class. Let's see the list of C++ common exception classes."", 'In C++, we use 3 keywords to perform exception handling:', 'Moreover, we can create user-defined exception which we will learn in next chapters.']",['In C++ standard exceptions are defined in <exception> class that we can use inside our programs. The arrangement of parent-child class hierarchy is shown below:'],"[""In C++, exception is an event or object which is thrown at runtime. All exceptions are derived from std::exception class. It is a runtime error which can be handled. If we don't handle the exception, it prints exception message and terminates the program.""]",[],[],['Exception|||Description&&&std::exception|||It is an exception and parent class of all standard C++ exceptions.&&&std::logic_failure|||It is an exception that can be detected by reading a code.&&&std::runtime_error|||It is an exception that cannot be detected by reading a code.&&&std::bad_exception|||It is used to handle the unexpected exceptions in a c++ program.&&&std::bad_cast|||This exception is generally be thrown by dynamic_cast.&&&std::bad_typeid|||This exception is generally be thrown by typeid.&&&std::bad_alloc|||This exception is generally be thrown by new.'],"['|||try|||catch, and|||throw|||']"
61,['C++ try/catch'],"['In C++ programming, exception handling is performed using try/catch statement. The C++ try block is used to place the code that may occur exception. The catch block is used to handle the exception.']","['https://www.javatpoint.com/cpp-user-defined-exceptions', 'https://www.javatpoint.com/cpp-exception-handling', 'https://www.javatpoint.com/cpp-user-defined-exceptions', 'https://www.javatpoint.com/cpp-exception-handling', 'https://www.javatpoint.com/cpp-user-defined-exceptions']",[],[],"['C++ example without try/catch', 'C++ try/catch example']",[],[],[],[],[],"['#include <iostream>', 'using namespace std;', 'float division(int x, int y) {', 'return (x/y);', 'int main () {', 'int i = 50;', 'int j = 0;', 'float k = 0;', 'k = division(i, j);', 'cout << k << endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'float division(int x, int y) {', 'if( y == 0 ) {', 'throw ""Attempted to divide by zero!"";', 'return (x/y);', 'int main () {', 'int i = 25;', 'int j = 0;', 'float k = 0;', 'try {', 'k = division(i, j);', 'cout << k << endl;', '}catch (const char* e) {', 'cerr << e << endl;', 'return 0;']","['Floating point exception (core dumped)', 'Attempted to divide by zero!']",[],[]
62,['C++ User-Defined Exceptions'],['The new exception can be defined by overriding and inheriting exception\nclass functionality.'],"['https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/cpp-try-catch', 'https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/cpp-try-catch', 'https://www.javatpoint.com/cpp-files-and-streams']",[],[],['C++ user-defined exception example'],[],[],"[""Let's see the simple example of user-defined exception in which \nstd::exception class is used to define the exception."", 'Note: In above example what() is a public method provided by the exception class. It is used to return the cause of an exception.']",[],[],"['#include <iostream>', '#include <exception>', 'using namespace std;', 'class MyException : public exception{', 'public:', 'const char * what() const throw()', '{', 'return ""Attempted to divide by zero!\\n"";', '}', 'int main()', 'int x, y;', 'cout << ""Enter the two numbers : \\n"";', 'cin >> x >> y;', 'if (y == 0)', '{', 'MyException z;', 'throw z;', '}', 'else', '{', 'cout << ""x / y = "" << x/y << endl;', '}', 'catch(exception& e)', 'cout << e.what();']","['Enter the two numbers :\n10\n2\nx / y = 5', 'Enter the two numbers :\n10\n0\nAttempted to divide by zero!']",[],[]
63,['C++ Templates'],['A C++ template is a powerful feature added to C++. It allows you to define the generic classes and generic functions and thus provides support for generic programming. Generic programming is a technique where generic types are used as parameters in algorithms so that they can work for a variety of data types.'],"['https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial']",['https://static.javatpoint.com/cpp/images/cpp-templates.png'],[],"['Function Template', 'CLASS TEMPLATE']","['Syntax of Function Template', 'Function Templates with Multiple Parameters', 'Overloading a Function Template', 'Restrictions of Generic Functions', 'CLASS TEMPLATE WITH MULTIPLE PARAMETERS', 'Nontype Template Arguments']",[],"['Templates can be represented in two ways:', 'Function Templates:', 'Class Template:', 'class: A class keyword is used to specify a generic type in a template declaration.', ""Let's see a simple example of a function template:"", 'In the above example, we create the function template which can perform the addition operation on any type either it can be integer, float or double.', 'We can use more than one generic type in the template function by using the comma to separate the list.', 'In the above syntax, we have seen that the template function can accept any number of arguments of a different type.', ""Let's see a simple example:"", 'In the above example, we use two generic types in the template function, i.e., X and Y.', 'We can overload the generic function means that the overloaded template functions can differ in the parameter list.', ""Let's understand this through a simple example:"", 'In the above example, template of fun() function is overloaded.', ""Let's understand this through a simple example:"", 'Now, we create an instance of a class', 'where class_name: It is the name of the class.', 'type: It is the type of the data that the class is operating on.', 'ob: It is the name of the object.', ""Let's see a simple example:"", ""In the above example, we create a template for class A. Inside the main() method, we create the instance of class A named as, 'd'."", 'We can use more than one generic data type in a class template, and each generic data type is separated by the comma.', ""Let's see a simple example when class template contains two generic data types."", 'In the above case, the nontype template argument is size and therefore, template supplies the size of the array as an argument.', 'Arguments are specified when the objects of a class are created:', ""Let's see a simple example of nontype template arguments."", 'Points to Remember']","['We can define a template for a function. For example, if we have an add() function, we can create versions of the add function for adding the int, float or double type values.', 'We can define a template for a class. For example, a class template can be created for the array class that can accept the array of various types such as int array, float array or double array.', 'Where Ttype: It is a placeholder name for a data type used by the function. It is used within the function definition. It is only a placeholder that the compiler will automatically replace this placeholder with the actual data type.', 'Class Template can also be defined similarly to the Function Template. When a class uses the concept of Template, then the class is known as generic class.', 'Ttype is a placeholder name which will be determined when the class is instantiated. We can define more than one generic data type using a comma-separated list. The Ttype can be used inside the class body.', ""In the above example, the class template is created which contains the nontype template argument, i.e., size. It is specified when the object of class 'A' is created.""]","[""Generic functions perform the same operation for all the versions of a function except the data type differs. Let's see a simple example of an overloaded function which cannot be replaced by the generic function as both the functions have different functionalities."", 'In the above example, we overload the ordinary functions. We cannot overload the generic functions as both the functions have different functionalities. First one is displaying the value and the second one determines whether the number is even or not.', ""The template can contain multiple arguments, and we can also use the non-type arguments In addition to the type T argument, we can also use other types of arguments such as strings, function names, constant expression and built-in types. Let' s see the following example:""]","['template < class Ttype> ret_type func_name(parameter_list)', '#include <iostream>', 'using namespace std;', 'template<class T> T add(T &a,T &b)', 'T result = a+b;', 'return result;', 'int main()', 'int i =2;', 'int j =3;', 'float m = 2.3;', 'float n = 1.2;', 'cout<<""Addition of i and j is :""<<add(i,j);', ""cout<<'\\n';"", 'cout<<""Addition of m and n is :""<<add(m,n);', 'return 0;', 'template<class T1, class T2,.....>', 'return_type function_name (arguments of type T1, T2....)', '#include <iostream>', 'using namespace std;', 'template<class X,class Y> void fun(X a,Y b)', 'std::cout << ""Value of a is : "" <<a<< std::endl;', 'std::cout << ""Value of b is : "" <<b<< std::endl;', 'int main()', 'fun(15,12.3);', 'return 0;', '#include <iostream>', 'using namespace std;', 'template<class X> void fun(X a)', 'std::cout << ""Value of a is : "" <<a<< std::endl;', 'template<class X,class Y> void fun(X b ,Y c)', 'std::cout << ""Value of b is : "" <<b<< std::endl;', 'std::cout << ""Value of c is : "" <<c<< std::endl;', 'int main()', 'fun(10);', 'fun(20,30.5);', 'return 0;', '#include <iostream>', 'using namespace std;', 'void fun(double a)', 'cout<<""value of a is : ""<<a<<\'\\n\';', 'void fun(int b)', 'if(b%2==0)', 'cout<<""Number is even"";', 'else', 'cout<<""Number is odd"";', 'int main()', 'fun(4.6);', 'fun(6);', 'return 0;', 'template<class Ttype>', 'class class_name', 'class_name<type> ob;', '#include <iostream>', 'using namespace std;', 'template<class T>', 'class A', 'public:', 'T num1 = 5;', 'T num2 = 6;', 'void add()', 'std::cout << ""Addition of num1 and num2 : "" << num1+num2<<std::endl;', 'int main()', 'A<int> d;', 'd.add();', 'return 0;', 'template<class T1, class T2, ......>', 'class class_name', '#include <iostream>', 'using namespace std;', 'template<class T1, class T2>', 'class A', 'T1 a;', 'T2 b;', 'public:', 'A(T1 x,T2 y)', '{', 'a = x;', 'b = y;', '}', 'void display()', '{', 'std::cout << ""Values of a and b are : "" << a<<"" ,""<<b<<std::endl;', '}', '};', 'int main()', 'A<int,float> d(5,6.5);', 'd.display();', 'return 0;', 'template<class T, int size>', 'class array', 'T arr[size];           // automatic array initialization.', 'array<int, 15> t1;                        // array of 15 integers.', 'array<float, 10> t2;                    // array of 10 floats.', 'array<char, 4> t3;                      // array of 4 chars.', '#include <iostream>', 'using namespace std;', 'template<class T, int size>', 'class A', 'public:', 'T arr[size];', 'void insert()', 'int i =1;', 'for (int j=0;j<size;j++)', '{', 'arr[j] = i;', 'i++;', '}', 'void display()', 'for(int i=0;i<size;i++)', '{', 'std::cout << arr[i] << "" "";', '}', 'int main()', 'A<int,10> t1;', 't1.insert();', 't1.display();', 'return 0;']","['Addition of i and j is :5', 'Addition of m and n is :3.5', 'Value of a is : 15', 'Value of b is : 12.3', 'Value of a is : 10', 'Value of b is : 20', 'Value of c is : 30.5', 'value of a is : 4.6', 'Number is even', 'Addition of num1 and num2 : 11', 'Values of a and b are : 5,6.5', '1 2 3 4 5 6 7 8 9 10']",[],"['|||Function templates|||Class templates||||||Generic functions use the concept of a function template. Generic functions define a set of operations that can be applied to the various types of data.|||The type of the data that the function will operate on depends on the type of the data passed as a parameter.|||For example, Quick sorting algorithm is implemented using a generic function, it can be implemented to an array of integers or array of floats.|||A Generic function is created by using the keyword template. The template defines what function will do.||||||C++ supports a powerful feature known as a template to implement the concept of generic programming.|||A template allows us to create a family of classes or family of functions to handle different data types.|||Template classes and functions eliminate the code duplication of different data types and thus makes the development easier and faster.|||Multiple parameters can be used in both class and function template.|||Template functions can also be overloaded.|||We can also use nontype arguments such as built-in or derived data types as template arguments.|||']"
64,['C++ Signal Handling'],['There are signals which cannot be caught by the program but there is a following list of signals which you can catch in your program and can take appropriate actions based on the signal. '],"['https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/cpp-templates', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/os-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/cpp-templates', 'https://www.javatpoint.com/cpp-files-and-streams']",[],[],"['The signal() Function', 'The raise() Function']","['Syntax', 'Parameters', 'Return value', 'Data Races', 'Exceptions', 'Example 1', 'Example 2', 'Syntax', 'Parameters', 'Return value', 'Data Races', 'Exceptions', 'Example 1', 'Example 2', 'Example 3', 'Example 4', 'Example 5']",['Note: The signal handling function should be of the void type.'],"['These signals are defined in <csingnal> header file.', 'Here are the list of signals along with their description and working capability:', 'C++ signal-handling library provides function signal to trap unexpected interrupts or events.', 'This function is set to handle the signal.', 'It specifies a way to handle the signals number specified by sig.', 'Parameter func specifies one of the three ways in which a signal can be handled by a program.', 'The return type of this function is the same as the type of parameter func.', 'Data race is undefined. If you call this function in a multi- threaded program then it will cause undefined behavior.', 'This function never throws exception.', ""Let's see a simple example to demonstrate the use of signal() function:"", ""Let's see another simple example:"", 'The C++ signal raise() function is used to send signals to the current executing program.', '<csignal> header file declared the function raise() to handle a particular signal.', 'sig: The signal number to be sent for handling. It can take one of the following values:', 'On success, it returns 0 and on failure, a non-zero is returned. ', 'Concurrently calling this function is safe, causing no data races.', 'This function never throws exceptions, if no function handlers have been defined with signal to handle the raised signal.', ""Let's see a simple example to illustrate the use of raise() function when SIGABRT is passed:"", ""Let's see a simple example to illustrate the use of raise() function when SIGINT is passed:"", ""Let's see a simple example to illustrate the use of raise() function when SIGTERM is passed:"", ""Let's see a simple example to illustrate the use of raise() function when SIGSEGV is passed:"", ""Let's see a simple example to illustrate the use of raise() function when SIGFPE is passed:""]","['We must keep in mind that the signal that we would like to catch must be registered using a signal function and it must be associated with a signal handling function. ', 'If the request of this function is successful, the function returns a pointer to the particular handler function which was in charge of handling this signal before the call, if any.']",[],"['void (*signal (int sig, void (*func)(int)))(int);', '#include <iostream>', '#include <csignal>', 'using namespace std;', 'sig_atomic_t signalled = 0;', 'void handler(int sig)', 'signalled = 1;', 'int main()', 'signal(SIGINT, handler);', 'raise(SIGINT);', 'if (signalled)', 'cout << ""Signal is handled"";', 'else', 'cout << ""Signal is not handled"";', 'return 0;', '#include <csignal>', '#include <iostream>', 'namespace', 'volatile std::sig_atomic_t gSignalStatus;', 'void signal_handler(int signal)', 'gSignalStatus = signal;', 'int main()', 'std::signal(SIGINT, signal_handler);', 'std::cout << ""SignalValue: "" << gSignalStatus << \'\\n\';', 'std::cout << ""Sending signal "" << SIGINT << \'\\n\';', 'std::raise(SIGINT);', 'std::cout << ""SignalValue: "" << gSignalStatus << \'\\n\';', 'int raise (int sig);', '#include <iostream>', '#include <csignal>', 'using namespace std;', 'sig_atomic_t sig_value = 0;', 'void handler(int sig)', 'sig_value = sig;', 'int main()', 'signal(SIGABRT, handler);', 'cout << ""Before signal handler is called"" << endl;', 'cout << ""Signal = "" << sig_value << endl;', 'raise(SIGABRT);', 'cout << ""After signal handler is called"" << endl;', 'cout << ""Signal = "" << sig_value << endl;', 'return 0;', '#include <csignal>', '#include <iostream>', 'using namespace std;', 'sig_atomic_t s_value = 0;', 'void handle(int signal_)', 's_value = signal_;', 'int main()', 'signal(SIGINT, handle);', 'cout << ""Before called Signal = "" << s_value << endl;', 'raise(SIGINT);', 'cout << ""After called Signal = "" << s_value << endl;', 'return 0;', '#include <csignal>', '#include <iostream>', 'using namespace std;', 'sig_atomic_t s_value = 0;', 'void handle(int signal_)', 's_value = signal_;', 'int main()', 'signal(SIGTERM, handle);', 'cout << ""Before called Signal = "" << s_value << endl;', 'raise(SIGTERM);', 'cout << ""After called Signal = "" << s_value << endl;', 'return 0;', '#include <csignal>', '#include <iostream>', 'using namespace std;', 'sig_atomic_t s_value = 0;', 'void handle(int signal_)', 's_value = signal_;', 'int main()', 'signal(SIGSEGV, handle);', 'cout << ""Before called Signal = "" << s_value << endl;', 'raise(SIGSEGV);', 'cout << ""After called Signal = "" << s_value << endl;', 'return 0;', '#include <csignal>', '#include <iostream>', 'using namespace std;', 'sig_atomic_t s_value = 0;', 'void handle(int signal_)', 's_value = signal_;', 'int main()', 'signal(SIGFPE, handle);', 'cout << ""Before called Signal = "" << s_value << endl;', 'raise(SIGFPE);', 'cout << ""After called Signal = "" << s_value << endl;', 'return 0;']","['Signal is handled', 'SignalValue: 0', 'Sending signal 2', 'SignalValue: 2', 'Before signal handler is called', 'Signal = 0', 'After signal handler is called', 'Signal = 6', 'Before called Signal = 0', 'After called Signal = 2', 'Before called Signal = 0', 'After called Signal = 15', 'Before called Signal = 0', 'After called Signal = 11', 'Before called Signal = 0', 'After called Signal = 8']","[""Signals|||Description&&&SIGABRT|||(Signal Abort) Abnormal termination of the program, such as a call to abort.&&&SIGFPE|||(Signal floating- point exception) An erroneous arithmetic operation, such as a divide by zero or an operation resulting in overflow.&&&SIGILL|||(Signal Illegal Instruction) It is used for detecting an illegal instruction.&&&SIGINT|||(Signal Interrupt) It is used to receipt an interactive program interrupt signal.&&&SIGSEGV|||(Signal segmentation Violation) An invalid access to storage.&&&SIGTERM|||(Signal Termination) A termination request sent to the program.&&&SIGHUP|||(Signal Hang up) Hang Up (POSIX), its report that user's terminal is disconnected. It is used to report the termination of the controlling process.&&&SIGQUIT|||Used to terminate a process and generate a core dump.&&&SIGTRAP|||Trace trap.&&&SIGBUS|||This is a BUS error which indicates an access to an invalid address.&&&SIGUSR1|||User defined signal 1. &&&SIGUSR2|||User defined signal 2.&&&SIGALRM|||Alarm clock, which indicates an access to an invalid address.&&&SIGTERM|||Used for termination. This signal can be blocked, handled, and ignored. Generated by kill command.&&&SIGCOUNT|||This signal sent to process to make it continue.&&&SIGSTOP|||Stop, unblockable. This signal is used to stop a process. This signal cannot be handled, ignored or blocked.""]","['|||Signals are the interrupts which are delivered to a process by the operating system to stop its ongoing task and attend the task for which the interrupt has been generated. |||Signals can also be generated by the operating system on the basis of system or error condition.|||You can generate interrupts by pressing Ctrl+ C on Linux, UNIX, Mac OS X, or Windows system.||||||SIGINT|||SIGABRT|||SIGFPE|||SIGILL|||SIGSEGV|||SIGTERM|||SIGHUP|||']"
65,[' C++ Files and Streams'],"['In C++ programming we are using the iostream standard library, it provides cin and cout methods for reading from input and writing to output respectively.']","['https://www.javatpoint.com/cpp-getline', 'https://www.javatpoint.com/cpp-signal-handling', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-getline', 'https://www.javatpoint.com/cpp-signal-handling', 'https://www.javatpoint.com/cpp-getline']",[],[],"['C++ FileStream example: writing to a file', 'C++ FileStream example: reading from a file', 'C++ Read and Write Example']",[],"['Note: Before running the code a text file named as ""testout.txt"" is need to be created and the content of a text file is given below:\nWelcome to javaTpoint.\nC++ Tutorial.']","['To read and write from a file we are using the standard C++ library called fstream. Let us see the data types define in fstream library is:', ""Let's see the simple example of writing to a text file testout.txt using C++ FileStream programming."", ""Let's see the simple example of reading from a text file testout.txt using C++ FileStream programming."", ""Let's see the simple example of writing the data to a text file testout.txt and then reading the data from the file using C++ FileStream programming.""]",[],[],"['#include <iostream>', '#include <fstream>', 'using namespace std;', 'int main () {', 'ofstream filestream(""testout.txt"");', 'if (filestream.is_open())', 'filestream << ""Welcome to javaTpoint.\\n"";', 'filestream << ""C++ Tutorial.\\n"";', 'filestream.close();', 'else cout <<""File opening is fail."";', 'return 0;', '#include <iostream>', '#include <fstream>', 'using namespace std;', 'int main () {', 'string srg;', 'ifstream filestream(""testout.txt"");', 'if (filestream.is_open())', 'while ( getline (filestream,srg) )', 'cout << srg <<endl;', 'filestream.close();', 'else {', 'cout << ""File opening is fail.""<<endl;', 'return 0;', '#include <fstream>', '#include <iostream>', 'using namespace std;', 'int main () {', 'char input[75];', 'ofstream os;', 'os.open(""testout.txt"");', 'cout <<""Writing to a text file:"" << endl;', 'cout << ""Please Enter your name: "";', 'cin.getline(input, 100);', 'os << input << endl;', 'cout << ""Please Enter your age: "";', 'cin >> input;', 'cin.ignore();', 'os << input << endl;', 'os.close();', 'ifstream is;', 'string line;', 'is.open(""testout.txt"");', 'cout << ""Reading from a text file:"" << endl;', 'while (getline (is,line))', 'cout << line << endl;', 'is.close();', 'return 0;']","['The content of a text file testout.txt is set with the data:\nWelcome to javaTpoint.\nC++ Tutorial.', 'Welcome to javaTpoint.\nC++ Tutorial.', 'Writing to a text file:  \n Please Enter your name: Nakul Jain    \nPlease Enter your age: 22  \n Reading from a text file:   Nakul Jain  \n 22']","['Data Type|||Description&&&fstream|||It is used to create files, write information to files, and read information from files.&&&ifstream|||It is used to read information from files.&&&ofstream|||It is used to create files and write information to the files.']",[]
66,['C++ getline()'],"['The cin is an object which is used to take input from the user but does not allow to take the input in multiple lines. To accept the multiple lines, we use the getline() function. It is a pre-defined function defined in a <string.h> header file used to accept a line or a string from the input stream until the delimiting character is encountered.']","['https://www.javatpoint.com/cpp-vs-csharp', 'https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/cpp-vs-csharp', 'https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/cpp-vs-csharp']",[],[],[],"['Syntax of getline() function: ', 'Getline Character Array']",[],"['There are two ways of representing a function:', 'The above syntax contains three parameters, i.e., is, str, and delim.', 'is: It is an object of the istream class that defines from where to read the input stream.', 'str: It is a string object in which string is stored.', 'Return value', 'This function returns the input stream object, which is passed as a parameter to the function.', 'is: It is an object of the istream class that defines from where to read the input stream.', 'str: It is a string object in which string is stored.', 'Return value', 'This function also returns the input stream, which is passed as a parameter to the function.', ""Let's understand through an example."", 'First, we will look at an example where we take the user input without using getline() function.', 'In the above code, we take the user input by using the statement cin>>name, i.e., we have not used the getline() function.', ""Let's resolve the above problem by using getline() function."", 'In the above code, we have used the getline() function to accept the character even when the space character is encountered.', 'When we do not want to read the character after space then we use the following code:', 'We can also define the getline() function for character array, but its syntax is different from the previous one.', 'In the above syntax, there are two parameters; one is char*, and the other is size.', 'char*: It is a character pointer that points to the array.', 'Size: It acts as a delimiter that defines the size of the array means input cannot cross this size.', ""Let's understand through an example.""]","['The above syntax contains two parameters, i.e., is and str. This syntax is almost similar to the above syntax; the only difference is that it does not have any delimiting character.', ""In the above output, we gave the name 'John Miller' as user input, but only 'John' was displayed. Therefore, we conclude that cin does not consider the character when the space character is encountered."", 'In the above output, we can observe that both the words, i.e., John and Miller, are displayed, which means that the getline() function considers the character after the space character also.']","[""In the above code, we take the user input by using getline() function, but this time we also add the delimiting character('') in a third parameter. Here, delimiting character is a space character, means the character that appears after space will not be considered.""]","['istream& getline( istream& is, string& str, char delim );', 'istream& getline( istream& is, string& str );', '#include <iostream>', '#include<string.h>', 'using namespace std;', 'int main()', 'string name; // variable declaration', 'std::cout << ""Enter your name :"" << std::endl;', 'cin>>name;', 'cout<<""\\nHello ""<<name;', 'return 0;', '#include <iostream>', '#include<string.h>', 'using namespace std;', 'int main()', 'string name; // variable declaration.', 'std::cout << ""Enter your name :"" << std::endl;', 'getline(cin,name); // implementing a getline() function', 'cout<<""\\nHello ""<<name;', 'return 0;}', '#include <iostream>', '#include<string.h>', 'using namespace std;', 'int main()', 'string profile; // variable declaration', 'std::cout << ""Enter your profile :"" << std::endl;', ""getline(cin,profile,' '); // implementing getline() function with a delimiting character."", 'cout<<""\\nProfile is :""<<profile;', 'istream& getline(char* , int size);', '#include <iostream>', '#include<string.h>', 'using namespace std;', 'int main()', 'char fruits[50]; // array declaration', 'cout<< ""Enter your favorite fruit: "";', 'cin.getline(fruits, 50); // implementing getline() function', 'std::cout << ""\\nYour favorite fruit is :""<<fruits << std::endl;', 'return 0;']","['Enter your name :', 'John Miller', 'Hello John', 'Enter your name :', 'John Miller', 'Hello John Miller', 'Enter your profile :', 'Software Developer', 'Profile is: Software', 'Enter your favorite fruit: Watermelon', 'Your favorite fruit is: Watermelon']",[],['|||The first way of declaring is to pass three parameters.||||||The second way of declaring is to pass two parameters.|||']
67,['C++ vs C#'],['The following are the differences between C++ and C#:'],"['https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial']",['https://static.javatpoint.com/cpp/images/cpp-vs-c-sharp.png'],[],[],[],[],[],[],[],[],[],[],"['|||Type of language|||C++ is a low-level language, while C# is a high-level language.|||Lightweight language|||C++ is a lightweight language as compared to C# language as the libraries of C# language need to be included before compilation due to which size of binaries in C# language is more than C++ language.|||Performance|||C++ code runs faster than the C# code and makes a better solution for those applications that require higher performance. |||Garbage Collection|||C# provides the automatic garbage collection while C++ does not provide the automatic garbage collection, i.e., the objects are allocated or deallocated manually.|||Platform dependency|||C# language is a standardized language so it works only on Windows operating system while C++ supports all the platforms such as Windows, Unix, Linux, Mac, etc.|||Types of projects|||C++ language mainly works on those applications that communicate directly with the hardware while C# language is mainly used for mobile, web, desktop or gaming applications.|||Compiler warnings|||C++ allows you to do everything if the syntax is correct, but sometimes cause real damage to the operating system. C# language is a much-protected language as compiler gives errors and warnings without allowing you to create serious damage.|||Compilation|||C++ code is compiled to machine code C# code compiles to CLR(Common Language Runtime) which is interpreted by the JIT(Just In Time) compiler.|||Multiple Inheritance|||C++ language supports multiple inheritances, while C# language does not support the multiple inheritances.|||Level of Difficulty|||C++ language contains more complex features than C# language while C# language is a simple hierarchy which is quite easy to understand.|||Default access specifier|||In C++, the default access specifier is public while in C#, the default access specifier is private.|||Object Oriented|||C++ language is not a complete object-oriented language while C# language is a pure object-oriented programming language.|||Bound checking|||C++ language does not support the bound checking for arrays while C# language supports the bound checking for arrays.|||For each loop|||C++ language does not support the for each loop while C# language supports the for each loop.|||Use of pointers|||In C++, we can use the pointers anywhere in the program while in C# language, pointers are used in the unsafe area.|||Switch statement In C++, string variable cannot be passed in the switch statement, but in C# language, string variable can be passed in the switch statement.|||Standalone applications|||C++ language can be used to develop standalone applications, but C# language cannot be used to develop standalone applications.|||']"
68,['C++ int to string'],['There are three ways of converting an integer into a string:'],"['https://www.javatpoint.com/cpp-vs-python', 'https://www.javatpoint.com/cpp-vs-csharp', 'https://www.javatpoint.com/cpp-vs-python', 'https://www.javatpoint.com/cpp-vs-csharp', 'https://www.javatpoint.com/cpp-vs-python']","['https://static.javatpoint.com/cpp/images/cpp-int-to-string.png', 'https://static.javatpoint.com/cpp/images/cpp-int-to-string2.png', 'https://static.javatpoint.com/cpp/images/cpp-int-to-string3.png', 'https://static.javatpoint.com/cpp/images/cpp-int-to-string4.png', 'https://static.javatpoint.com/cpp/images/cpp-int-to-string5.png', 'https://static.javatpoint.com/cpp/images/cpp-int-to-string6.png']",[],[],"['Conversion of an integer into a string by using stringstream class.', 'Conversion of an integer into a string by using to_string() method.', 'Conversion of an integer into a string by using a boost.lexical cast.']",[],"['The following are the operators used to insert or extract the data:', ""Let's understand the concept of operators through an example."", ""Let's understand through an example."", ""Let's understand the concept of conversion of string into number through an example."", 'The to_string() method accepts a single integer and converts the integer value or other data type value into a string.', ""Let's understand through an example:"", ""Let's understand the conversion of integer into string through an example."", ""In the above example, we have converted the value of 'i' variable into a string value by using lexical_cast() function."", ""Let's understand the conversion of string into integer through an example."", 'In the above example, we have converted the string value into an integer value by using lexical_cast() function.']","['The stringstream class is a stream class defined in the  header file. It is a stream class used to perform the input-output operations on string-based streams. ', 'The boost.lexical cast provides a cast operator, i.e., boost.lexical_cast which converts the string value into an integer value or other data type value vice versa.']","['In the above example, we created the k variable, and want to convert the value of k into a string value. We have used the stringstream class, which is used to convert the k integer value into a string value. We can also achieve in vice versa, i.e., conversion of string into an integer value is also possible through the use of stringstream class only.']","['#include <iostream>', '#include<sstream>', 'using namespace std;', 'int main() {', 'int k;', 'cout<<""Enter an integer value"";', 'cin>>k;', 'stringstream ss;', 'ss<<k;', 'string s;', 'ss>>s;', 'cout<<""\\n""<<""An integer value is : ""<<k<<""\\n"";', 'cout<<""String representation of an integer value is : ""<<s;', '#include <iostream>', '#include<sstream>', 'using namespace std;', 'int main()', 'string number =""100"";', 'stringstream ss;', 'ss<<number;', 'int i;', 'ss>>i;', 'cout<<""The value of the string is : ""<<number<<""\\n"";', 'cout<<""Integer value of the string is : ""<<i;', '#include <iostream>', '#include<string>', 'using namespace std;', 'int main()', 'int i=11;', 'float f=12.3;', 'string str= to_string(i);', 'string str1= to_string(f);', 'cout<<""string value of integer i is :""<<str<<""\\n"";', 'cout<<""string value of f is : ""<< str1;', '#include <iostream>', '#include <boost/lexical_cast.hpp>', 'using namespace std;', 'int main()', 'int i=11;', 'string str = boost::lexical_cast<string>(i);', 'cout<<""string value of integer i is :""<<str<<""\\n"";', '#include <iostream>', '#include <boost/lexical_cast.hpp>', 'using namespace std;', 'int main()', 'string s=""1234"";', 'int k = boost::lexical_cast<int>(s);', 'cout<<""Integer value of string s is : ""<<k<<""\\n"";']",[],[],"[""|||By using stringstream class|||By using to_string() method|||By using boost.lexical cast||||||Operator >>: It extracts the data from the stream.|||Operator <<: It inserts the data into the stream.||||||In the below statement, the << insertion operator inserts the 100 into the stream. |||\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 stream1 << 100;|||In the below statement, the >> extraction operator extracts the data out of the stream and stores it in 'i' variable.|||\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 stream1 >> i;|||""]"
69,['C++ vs Python'],"['C++ is a high-level and general-purpose programming language developed by Bjarne Stroustrup in 1979. It is an extension C programming language, i.e., C with classes. The concept of object-oriented programming was first introduced in the C++ language. C++ is also known as an object-oriented programming language.']","['https://www.javatpoint.com/structure-vs-class-in-cpp', 'https://www.javatpoint.com/cpp-int-to-string', 'https://www.javatpoint.com/structure-vs-class-in-cpp', 'https://www.javatpoint.com/cpp-int-to-string', 'https://www.javatpoint.com/structure-vs-class-in-cpp']",['https://static.javatpoint.com/cpp/images/cpp-vs-python.gif'],[],[],"['What is C++?', 'What is Python?', 'Differences b/w C++ and Python', 'Definition', 'Ease of Learning', 'Speed', 'Memory Management', 'Compilation', 'Readability', 'Variable declaration', 'Functions']",[],"['Python is an interpreted, high-level, and general-purpose programming language used to develop all types of projects.', 'C++ Program', 'Python Program', ""Let's summarize the above differences in a tabular form.""]","[""It is declared as a top language in IEEE's 2018 Top Programming Languages. Due to its popularity and simplicity makes python more powerful in the industry."", 'C++ is a high-level and object-oriented programming language that allows you to do procedural programming, which is very close to CPU and provides full control over the hardware.', 'Python is an interpreted programming language, so it requires an interpreter at the time of compilation. On the other hand, C++ is a pre-compiled programming language, so it does not need any interpreter at the time of compilation.', 'In the above two programs, the output would be 20. The difference in the above two programs is that in C++, we need to declare the variable with its type, while in python, we do not need to declare the variables.']","['It was designed for system programming and embedded system, but later on, it was used in developing various applications such as desktop applications, video games, servers such as e-commerce, Web search or SQL servers and performance-critical applications such as telephone switches.', 'Python is a general-purpose and high-level programming language developed by Guido van Rossum in 1991. The main aim of developing python language was its simplicity. It contains features like indentation, which makes the code more readable, and it also contains library functions that make this language more powerful.', 'One of the major factors for beginners is the ease of learning. If the programming language is hard, then it becomes difficult for the programmer to learn. The syntax of python is similar to English. Therefore, it is very easy to learn. On the other hand, C++ is based on the object-oriented concepts that deal with the memory allocation, if we write the wrong program in C++, then that can destroy the system also.', 'C++ is faster than the python programming language. Python is written in the C programming language, so memory management is very difficult in python. In C++, we can allocate the memory to the variables and can deallocate the memory when the variable is no longer used in the code.', 'In C++, we need to allocate the memory to the new variables and deallocate the memory whenever the variable is no longer required. If we do not do so, then it can lead to a memory leak. Therefore, we can say that C++ does not provide inbuilt garbage collection and dynamic memory management. On the other hand, python provides the inbuilt garbage collection and dynamic memory management mechanism, i.e., it allocates and deallocates the memory on its own.', 'C++ has a complex syntax, which is difficult to read and write. It follows the programming rules like we need to use the curly brackets and semicolon at the end of the statement. On the other hand, python does not follow these programming rules. It uses the indentation rules, which are similar to the English; this indentation allows the programmer to understand the code more easily.', 'In C++, we need to declare the variable by mentioning the type and name of the variable before using it. Therefore, C++ is a statically typed programming language. On the other hand, python is a dynamically typed programming language, which means that we do not need to declare the variable before using that variable.', 'In C++, the function accepts and returns the type of value according to the definition, which is pre-defined. For example, suppose we have a function int add(int a, int b), then this function will accept only integer values as an argument and returns the integer type value. On the other hand, in python, there is no limitation on the type of the argument and type of its return value.']","['#include <iostream>', 'using namespace std;', 'int main()', 'int a=20;', 'std::cout << ""value of a is : "" <<a<< std::endl;', 'return 0;', '# python program', '#integer assignment', 'print(a)']",[],"['C++|||Python&&&It is a high-level and pre-compiled programming language that allows you to do procedural programming.|||It is a high-level and interpreted programming language used to develop all types of projects.&&&It is not easy to learn because of its complex syntax.|||It is easy to learn, as it does not follow any programming rules. It follows the indentation rules, which is very much similar to English.&&&It does not contain a garbage collector.|||It contains the garbage collector.&&&It is a pre-compiled programming language, so it does not require an interpreter during compilation.|||It is an interpreted programming language, so it requires an interpreter to run the program.&&&It is a statically typed programming language.|||It is a dynamically typed programming language.&&&Variable is declared by mentioning the type of the variable.|||It does not require the declaration of a variable.&&&The function that accepts the value as an argument and returns the type of the value will depend on the definition of the function.|||The function does not have any restriction on the type of the parameter and the return type.&&&Installation is easy.|||It is not easy to install the python on Windows.&&&Variables inside the loop are not accessible outside the loop.|||Variables inside the loop are also accessible outside the loop.&&&It has long lines of code as compared to Python.|||It contains fewer lines of code compared to C++.&&&It supports both procedural and object-oriented programming.|||It supports procedural, object-oriented, and functional programming.&&&It contains 52 keywords.|||It contains 33 keywords.&&&In C++, the programmer needs to manually allocate the new variable and deallocate when no longer required.|||Python performs the allocation.']",[]
70,['Difference between Structure and Class in C++'],"['In C++, the structure is the same as the class with some differences. Security is the most important thing for both structure and class. A structure is not safe because it could not hide its implementation details from the end-user, whereas a class is secure as it may hide its programming and design details. In this article, we are going to discuss the difference between a structure and class in C++. But before discussing the differences, we will know about the structure and class in C++.']","['https://www.javatpoint.com/virtual-destructor-in-cpp', 'https://www.javatpoint.com/cpp-vs-python', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-data-types', 'https://www.javatpoint.com/virtual-destructor-in-cpp', 'https://www.javatpoint.com/cpp-vs-python', 'https://www.javatpoint.com/virtual-destructor-in-cpp']",[],[],"['What is the structure in C++?', 'What is Class in C++?', 'Main differences between the structure and class', 'Head-to-head comparison between the structure and class', 'Similarities', 'Conclusion']","['Syntax:', 'Syntax:']",[],"['The syntax of the structure is as follows:', 'The structure and the class are syntactically similar. The syntax of class in C++ is as follows:', 'Here, we are going to discuss the main differences between the structure and class. Some of them are as follows:', 'Here, we are going to discuss a head-to-head comparison between the structure and class. Some of them are as follows:', 'The following are similarities between the structure and class:']","['A structure is a grouping of variables of various data types referenced by the same name. A structure declaration serves as a template for creating an instance of the structure.', 'The ""struct"" keyword indicates to the compiler that a structure has been declared. The ""structurename"" defines the name of the structure. Since the structure declaration is treated as a statement, so it is often ended by a semicolon.', ""Structure in C has some limitations, such as the inability to hide data, the inability to treat 'struct' data as built-in types, and the lack of inheritance support. The C++ structure overcame these drawbacks."", 'The extended version of the structure in C++ is called a class. The programmer makes it easy to use the class to hold both the data and functions, whereas the structure only holds data.']","[""A class in C++ is similar to a C structure in that it consists of a list of data members and a set of operations performed on the class. In other words, a class is the building block of Object-Oriented programming. It is a user-defined object type with its own set of data members and member functions that can be accessed and used by creating a class instance. A C++ class is similar to an object's blueprint."", 'In this syntax, the class is a keyword to indicate the compiler that a class has been declared. OOP\'s main function is data hiding, which is achieved by having three access specifiers: ""public"", ""private"", and ""safe"". If no access specifier is specified in the class when declaring data members or member functions, they are all considered private by default.', ""The public access specifier allows others to access program functions or data. A member of that class may reach only the class's private members. During inheritance, the safe access specifier is used. If the access specifier is declared, it cannot be changed again in the program.""]","['Struct Structurename', 'Struct_member1;', 'Struct_member2;', 'Struct_member3;', 'Struct_memberN;', 'class class_name', 'Access specifier;', 'Data member;', 'Member functions (member list){ . . }']","['struct structure_name{', 'type struct_member 1;', 'type struct_member 2;', 'type struct_member 3;', '.', 'type struct_memberN;', '};', 'class class_name{', 'data member;', 'member function;', '};']","[""Features|||Structure|||Class&&&Definition|||A structure is a grouping of variables of various data types referenced by the same name.|||In C++, a class is defined as a collection of related variables and functions contained within a single structure.&&&Basic|||If no access specifier is specified, all members are set to 'public'.|||If no access specifier is defined, all members are set to 'private'.&&&Declaration|||struct structure_name{\r|||type struct_member 1;\r|||type struct_member 2;\r|||type struct_member 3;\r|||.\r|||type struct_memberN;\r|||};|||class class_name{\r|||data member;\r|||member function;\r|||};&&&Instance|||Structure instance is called the 'structure variable'.|||A class instance is called 'object'.&&&Inheritance|||It does not support inheritance.|||It supports inheritance.&&&Memory Allocated|||Memory is allocated on the stack.|||Memory is allocated on the heap.&&&Nature|||Value Type|||Reference Type&&&Purpose|||Grouping of data|||Data abstraction and further inheritance.&&&Usage|||It is used for smaller amounts of data.|||It is used for a huge amount of data.&&&Null values|||Not possible|||It may have null values.&&&Requires constructor and destructor|||It may have only parameterized constructor.|||It may have all the types of constructors and destructors.""]","[""|||By default, all the members of the structure are public. In contrast, all members of the class are private.|||The structure will automatically initialize its members. In contrast, constructors and destructors are used to initialize the class members.|||When a structure is implemented, memory allocates on a stack. In contrast, memory is allocated on the heap in class.|||Variables in a structure cannot be initialized during the declaration, but they can be done in a class.|||There can be no null values in any structure member. On the other hand, the class variables may have null values.|||A structure is a value type, while a class is a reference type.|||Operators to work on the new data form can be described using a special method.||||||Both class and structure may declare any of their members private.|||Both class and structure support inheritance mechanisms.|||Both class and structure are syntactically identical in C++.|||A class's or structure's name may be used as a stand-alone type.|||""]"
71,['Virtual Destructor in C++'],"['A destructor in C++ is a member function of a class used to free the space occupied by or delete an object of the class that goes out of scope. A destructor has the same name as the name of the constructor function in a class, but the destructor uses a tilde (~) sign before its function name.']","['https://www.javatpoint.com/constructor-vs-destructor-in-cpp', 'https://www.javatpoint.com/structure-vs-class-in-cpp', 'https://www.javatpoint.com/constructor-vs-destructor-in-cpp', 'https://www.javatpoint.com/structure-vs-class-in-cpp', 'https://www.javatpoint.com/constructor-vs-destructor-in-cpp']","['https://static.javatpoint.com/cpp/images/virtual-destructor-in-cpp.png', 'https://static.javatpoint.com/cpp/images/virtual-destructor-in-cpp2.png']",[],['Virtual Destructor'],"['Why we use virtual destructor in C++?', ""Write a program to display a class destructor's undefined behaviour without using a virtual destructor in C ++."", ""Write a program to display a class destructor's behavior using a virtual destructor in C ++.""]","['Note: If the base class destructor does not use a virtual keyword, only the base class destructor will be called or deleted its occupied space because the pointer object is pointing to the base class. So it does not call the derived class destructor to free the memory used by the derived class, which leads to memory leak for the derived class.']",[],"[""In the above program, we have used a virtual destructor inside the base class that calls the derived class' destructor before calling the base class' destructor and release the spaces or resolve the memory leak issue in the program.""]","['A virtual destructor is used to free up the memory space allocated by the derived class object or instance while deleting instances of the derived class using a base class pointer object. A base or parent class destructor use the virtual keyword that ensures both base class and the derived class destructor will be called at run time, but it called the derived class first and then base class to release the space occupied by both destructors.', ""When an object in the class goes out of scope or the execution of the main() function is about to end, a destructor is automatically called into the program to free up the space occupied by the class' destructor function. When a pointer object of the base class is deleted that points to the derived class, only the parent class destructor is called due to the early bind by the compiler. In this way, it skips calling the derived class' destructor, which leads to memory leaks issue in the program. And when we use virtual keyword preceded by the destructor tilde (~) sign inside the base class, it guarantees that first the derived class' destructor is called. Then the base class' destructor is called to release the space occupied by both destructors in the inheritance class."", ""As we can see in the above output, when the compiler compiles the code, it calls a pointer object in the main function that refers to the base class. So, it executes the base class' constructor() function and then moves to the derived class' constructor() function. After that, it deletes the pointer object occupied by the base class' destructor and the derived class' destructor. The base class pointer only removes the base class's destructor without calling the derived class' destructor in the program. Hence, it leaks the memory in the program.""]","['#include<iostream>', 'using namespace std;', 'class Base', '{', 'public: /* A public access specifier defines Constructor and Destructor function to call by any object in the class. */', 'Base() // Constructor function.', 'cout<< ""\\n Constructor Base class"";', '~Base() // Destructor function', 'cout<< ""\\n Destructor Base class"";', 'class Derived: public Base', 'public: /* A public access specifier defines Constructor and Destructor function to call by any object in the class. */', 'Derived() // Constructor function', 'cout << ""\\n Constructor Derived class"" ;', '~Derived() // Destructor function', 'cout << ""\\n Destructor Derived class"" ; /* Destructor function is not called to release its space. */', 'int main()', 'Base *bptr = new Derived; // Create a base class pointer object', 'delete bptr; /* Here pointer object is called to delete the space occupied by the destructor.*/', '#include<iostream>', 'using namespace std;', 'class Base', 'public:', 'Base() // Constructor member function.', 'cout << ""\\n Constructor Base class"";  // It prints first.', 'virtual ~Base() // Define the virtual destructor function to call the Destructor Derived function.', 'cout << ""\\n Destructor Base class"";  /', 'class Derived: public Base', 'public:', 'Derived() // Constructor function.', 'cout << ""\\n Constructor Derived class"" ; /* After print the Constructor Base, now it will prints. */', '~Derived() // Destructor function', 'cout << ""\\n Destructor Derived class""; /* The virtual Base Class? Destructor calls it before calling the Base Class Destructor. */', 'int main()', 'Base *bptr = new Derived; // A pointer object reference the Base class.', 'delete bptr; // Delete the pointer object.']",[],[],[]
72,['Difference between Constructor and Destructor in C++?'],"['In this article, we will see the comparisons between the constructors and destructors in the C++ programming language. The first thing that we will learn from this article is the basic idea of constructors and destructors. After that, we will learn the various comparisons of constructors and destructors in C++ programming.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/virtual-destructor-in-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/programming-language', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-constructor', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-destructor', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/virtual-destructor-in-cpp', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/cpp/images/constructor-vs-destructor-in-cpp.png'],[],"['What is C++?', 'Constructor in C++?', 'Destructor in C++?', 'Difference between Constructor and Destructor in C++ programming']","['Syntax:', 'Example of Constructor:', 'Syntax:', 'Example of Destructor:']",[],"['The syntax of the constructor in C++ are given below.', ""In the above-given syntax, class_name is the constructor's name, the public is an access specifier, and the parameter list is optional."", 'There are four types of constructors used in C++. ', 'Following is the syntax of the default constructor:', 'In this type of constructor, there are no arguments and parameter lists.', ""If no constructor is defined in the class, the compiler automatically creates the class's default constructor."", 'The default constructor for a class student is given below:', 'Syntax of the Parameterised constructor is given below.', 'Here, we can define the parameter list of the constructor.', 'Syntax of the copy constructor is given below.', 'In the above syntax, the object refers to a thing used to initialize another object.', 'The syntax of destructor in C++ are given below.', 'Here, we use the tilde symbol for defining the destructor in C++ programming.', 'The Destructor has no argument and does not return any value, so it cannot be overloaded.', 'Following table shows the various differences between constructor and destructor in the C++ programming language:']","['A constructor is a particular member function having the same name as the class name. It calls automatically whenever the object of the class is created.', 'Default Constructor: A constructor is a class which accepts no parameter and is called a default constructor. If there is no constructor for a class, the compiler implicitly creates a default constructor.', 'Parameterised Constructor: A constructor is a class that can take parameters and is called a parameterized constructor. It is used to initialize objects with a different set of values.', 'Copy Constructor: A particular constructor used for the creation of an existing object. The copy constructor is used to initialize the thing from another of the same type.', 'Dynamic Constructor: This type of constructor can be used to allocate the memory while creating the objects. The data members of an object after creation can be initialized, called dynamic initialization.', 'Destructors have the same class name preceded by (~) tilde symbol. It removes and destroys the memory of the object, which the constructor allocated during the creation of an object.']","['C++ is a superset of C because it supports both procedural-oriented and object-oriented programming languages. It is a middle-level language. It has various features such as encapsulation, inheritance, abstraction, data hiding, constructor, and destructor.']","['class class_name', 'class_name ([parameter list])', '……………….', '#include <iostream.h>', '#include <conio.h>', 'using namespace std;', 'class hello {     // The class', 'public:           // Access specifier', 'hello () {     // Constructor', 'cout << ""Hello World! Program in C++ by using Constructor"";', 'void display() {', 'cout <<""Hello World!"" <<endl;', 'int main() {', 'hello myObj;   /', 'return 0;', 'class class_name {', 'private:', 'public:', 'class_name ()', 'class student {', 'private:', 'public:', 'student ()', 'Class classname', 'Public:', 'Class name (parameter list)', 'Class (classname, &object)', 'class class_name', '…………….;', '…………….;', 'public:', 'xyz();            //constructor', '~xyz();           //destructor', '#include <iostream.h>', '#include <conio.h>', 'using namespace std;', 'class Hello {', 'public:', 'Hello () {', 'cout<< ""Constructor function is called"" <<endl;', '~Hello () {', 'cout << ""Destructor function is called"" <<endl;', 'void display() {', 'cout <<""Hello World!"" <<endl;', 'int main(){', 'Hello obj;', 'obj.display();', 'return 0;']","['hello::hello()', 'class class_name', '{', '……….', 'public', 'class_name ([parameter list])', '{', '……………….', '}', '};', 'class class_name', '{', '…………….;', '…………….;', 'public:', '~xyz();', '{', '…………', '};']","[""Basis|||Constructor|||Destructor&&&Purpose of use|||To allocate memory to the object, we used a constructor in C++.|||To deallocate the memory that the constructor allocated to an object for this purpose, we use the concept of destructor in C++.&&&Arguments|||It may or may not contain arguments.|||It cannot contain the arguments.&&&Calling|||It is called automatically whenever the object of the class is created.|||It is called automatically whenever the program terminates.&&&Memory|||Constructor occupies memory.|||The Destructor releases memory.&&&Return type|||It has return types.|||It doesn't have any return type.&&&Special symbol|||While declaring constructor in the C++ programming language, there is no requirement of the special symbol.|||While declaring a destructor in C++ programming language, a particular symbol is required, i.e., tilde symbol.&&&In numbers|||We can use more than one constructor in our program.|||We cannot use more than one destructor in the program.&&&Inheritance|||It can be inherited.|||It cannot be inherited.&&&Overloading|||It can be overloaded.|||It cannot be overloaded.&&&Execution Order|||They are executed in successive order.|||They are executed in the constructor's reverse order; basically, they are the inverse of the constructors.&&&Types|||Constructor has four types:||||||Default constructor|||Copy constructor|||Parameterized constructor|||Dynamic constructor||||||Destructors have no classes.&&&Declaration|||The following declaration is used for creating a constructor:|||class class_name\r|||{\r|||……….\r|||public\r|||class_name ([parameter list])\r|||{\r|||……………….\r|||}\r|||};\r||||||The following declaration is used for creating a destructor:|||class class_name\r|||{\r|||…………….;\r|||…………….;\r|||public:\r|||~xyz();  \r|||{\r|||…………         \r|||};\r|||""]",['|||Default constructor|||Dynamic constructor|||Parameterized constructor|||Copy constructor||||||Default constructor|||Copy constructor|||Parameterized constructor|||Dynamic constructor|||']
73,['Bit manipulation C++'],"['The computer does not understand the high-level language in which we communicate. For these reasons, there was a standard method by which any instruction given to the computer was understood. At an elementary level, each instruction was sent into some digital information known as bits. The series of bits indicates that it is a particular instruction.']","['https://www.javatpoint.com/what-is-a-reference-variable', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/what-is-a-reference-variable', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/what-is-a-reference-variable']","['https://static.javatpoint.com/cpp/images/bit-manipulation-cpp.jpg', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp2.png', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp3.png', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp4.png', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp5.png', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp6.png', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp7.png', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp8.png', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp9.png', 'https://static.javatpoint.com/cpp/images/bit-manipulation-cpp10.png']",[],"['Bit', 'Bit manipulation']",[],[],"['A bit is defined as the basic unit which stores the data in digital notation.', 'Two values represent it as follows -', '1 - It indicates the signal is present or True', '0 - It indicates the signal is absent or False', 'So after understanding the basics of bit, let us understand its manipulation in C++.', 'With that, let us get into the basics of bit manipulation in C++.', 'Logical AND takes two operands and returns true if both of them are true. The sign is &&.', 'Let us look at the truth table of the AND operator.', 'In the last row, A and B are high, resulting in a high output.', 'C++ Program', 'Logical OR gives us high output if either of the input of the two operands is high. The symbol is ||', 'Let us look at the truth table of the OR operator.', 'Here we can see the first row. Both inputs A and B are low, which results in 0(a low output).', 'C++ Program ', 'Logical NOT is taking only one operand and reverts it. If the operand is low, it makes it high and vice versa. The symbol is !.', 'Let us look at the truth table of the NOT operator.', 'C++ Program', 'The left shift operator takes an operand and the value of the left operand is moved left by the number of bits specified by the right operand.', 'It is denoted by <<.', 'C++ Program', 'The right shift operator takes an operand and the value of the right operand is moved right by the number of bits specified by the right operand.', 'It is denoted by >>.', 'C++ Program ']","['Bits represent the logical state of any instruction. The series of bits have a base which is 2. Thus if we say if we have a series of binary digits, it is read from left to right, and the power of 2 increases.', 'Bit manipulation is defined as performing some basic operations on bit level of n number of digits. It is a speedy and primitive method as it directly works at the machine end.']",[],"['#include', 'using namespace std;', 'int main() {', 'int a = 5;', 'int b = 9;', 'cout << ((a == 0) && (a > b)) << endl;', 'cout << ((a == 0) && (a < b)) << endl;', 'cout << ((a == 5) && (a > b)) << endl;', 'cout << ((a == 5) && (a < b)) << endl;', 'return 0;', '#include', 'using namespace std;', 'int main() {', 'int a = 5;', 'int b = 9;', 'cout << ((a == 0) || (a > b)) << endl;', 'cout << ((a == 0) || (a < b)) << endl;', 'cout << ((a == 5) || (a > b)) << endl;', 'cout << ((a == 5) || (a < b)) << endl;', 'return 0;', '#include', 'using namespace std;', 'int main() {', 'int a = 5;', 'cout << !(a == 0) << endl;', 'cout << !(a == 5) << endl;', 'return 0;', '#include', 'using namespace std;', 'int main()', 'unsigned char a = 5, b = 9;', 'cout << ""a<<1: ""<<  (a<<1) << ""\\n"";', 'cout << ""b<<1: "" <<  (b<<1);', 'return 0;', '#include', 'using namespace std;', 'int main()', 'unsigned char a = 5, b = 9;', 'cout<< ""a>>1: "" <<  (a >> 1) << ""\\n"";', 'cout<< ""b>>1: "" <<  (b >> 1);', 'return 0;']",[],[],['|||Logical AND ||||||Logical OR||||||Logical NOT||||||Left shift operator ||||||Right shift operator|||']
74,['What is a reference variable?'],"['A reference is defined as an alias for another variable. In short, it is like giving a different name to a pre-existing variable. Once a reference is initialized to the variable, we can use either the reference name or the variable to refer to that variable.']","['https://www.javatpoint.com/friend-function-in-cpp', 'https://www.javatpoint.com/bit-manipulation-cpp', 'https://www.javatpoint.com/friend-function-in-cpp', 'https://www.javatpoint.com/bit-manipulation-cpp', 'https://www.javatpoint.com/friend-function-in-cpp']",['https://static.javatpoint.com/cpp/images/what-is-a-reference-variable.png'],[],"['Creating references in C++', 'Difference between Reference and Pointers']",['C++ code'],[],"['The basic syntax to create a reference is -', 'Data type& new variable = previous variable', 'The newly created variable will now refer to the previous variable.', 'For example -', 'int i = 17 // The variable i is declared as 17', 'Creating the reference of i will be as -', 'int& x = i // Here x will be called as the integer variable initialised to r']",[],[],"['#include', 'using namespace std;', 'int main () {', 'int    i; // Declare variable I as int', 'double d; // Declare variable d as double type', 'int&    r = i;// r is reference to i', 'double& s = d;// s is reference to d', 'i = 5;', 'cout << ""Value of i : "" << i << endl;', 'cout << ""Value of i reference : "" << r  << endl;', 'd = 11.7;', 'cout << ""Value of d : "" << d << endl;', 'cout << ""Value of d reference : "" << s  << endl;', 'return 0;']",[],"['References|||Pointers&&&We cannot have a NULL reference.|||The concept of NULL pointers is allowed.&&&A reference assigned to a particular object cant be changed.|||Pointers, on the other hand, can point to different objects at any time.&&&A reference is also initialized at the time of its creation.|||Pointers can be initialized at any time.']",[]
75,['Friend Function in C++'],"['As we already know that in an object-oriented programming language, the members of the class can only access the data and functions of the class but outside functions cannot access the data of the class. There might be situation that the outside functions need to access the private members of the class so in that case, friend function comes into the picture.']","['https://www.javatpoint.com/snake-code-in-cpp', 'https://www.javatpoint.com/what-is-a-reference-variable', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/snake-code-in-cpp', 'https://www.javatpoint.com/what-is-a-reference-variable', 'https://www.javatpoint.com/snake-code-in-cpp']","['https://static.javatpoint.com/cpp/images/friend-function-in-cpp.png', 'https://static.javatpoint.com/cpp/images/friend-function-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/friend-function-in-cpp3.png']",[],"['What is a friend function?', 'Characteristics of a Friend function:', 'Why do we need a friend function in C++?', 'Friend class in C++']",[],[],"['The friend functions appear in the class definition but friends are the member functions.', 'Characteristics of a Friend function', 'Syntax for the declaration of a friend function.', ""Let's understand the friend function through an example."", 'Friend function can also be useful when we are working on objects of two different classes.', ""Let's understand through an example."", 'We can also create a friend class with the help of friend keyword.', 'In the above declaration, Class1 is declared as a friend class of Class2. All the members of Class2 can be accessed in Class1.', ""Let's understand through an example.""]","['A friend function is a function of the class defined outside the class scope but it has the right to access all the private and protected members of the class.', 'As we can observe in the above code that the friend function in ClassA is also using ClassB without prior declaration of ClassB. So, in this case, we need to provide the forward declaration of ClassB.']","['In the above declaration, the friend function is preceded by the keyword friend. The function can be defined anywhere in the program like a normal C++ function. The function definition does not use either the keyword friend or scope resolution operator.', ""In the above code, Distance is the class that contains private field named as 'meters'. The Distance() is the constructor method that initializes the 'meters' value with 0. The display_data() is a method that displays the 'meters' value. The addvalue() is a friend function of Distance class that modifies the value of 'meters'. Inside the main() method, d1 is an object of a Distance class."", ""In the above code, we have defined two classes named as ClassA and ClassB. Both these classes contain the friend function 'multiply()'. The friend function can access the data members of both the classes, i.e., ClassA and ClassB. The multiply() function accesses the num1 and num2 of ClassA and ClassB respectively. In the above code, we have created object1 and object2 of ClassA and ClassB respectively. The multiply() function multiplies the num1 and num2 and returns the result."", 'In the above code, we have created two classes named as ClassA and ClassB. Since ClassA is declared as friend of ClassB, so ClassA can access all the data members of ClassB. In ClassB, we have defined a function add() that returns the sum of num1 and num2. Since ClassB is declared as friend of ClassA, so we can create the objects of ClassA in ClassB.']","['class class_name', 'friend data_type function_name(argument/s);            // syntax of friend function', '#include', 'using namespace std;', 'class Distance', 'private:', 'int meters;', 'public:', 'Distance()', 'meters = 0;', 'void display_data()', 'std::cout << ""Meters value : "" << meters<', '#include', 'using namespace std;', 'class ClassB;', 'class ClassA {', 'public:', 'ClassA()', '{', 'num1 =12;', '', '}', '', 'private:', 'int num1;  // declaration of integer variable', '', 'friend int multiply(ClassA, ClassB);', 'class ClassB {', 'public:', 'ClassB()', '{', 'num2 = 2;', '}', 'private:', 'int num2;  // declaration of integer variable', 'friend int multiply(ClassA, ClassB);', 'int multiply(ClassA object1, ClassB object2)', 'return (object1.num1 * object2.num2);', 'int main() {', 'ClassA object1;   // declaration of object of ClassA', 'ClassB object2;   // declaration of object of ClassB', 'cout << ""Result after multiplication of two numbers is : "" << multiply(object1, object2);', 'return 0;', 'class Class1;', 'class Class2', 'friend class Class1;', '.. .....', 'class Class1', '....', '#include', 'using namespace std;', 'class ClassB;', 'class ClassA {', 'private:', 'int num1;', 'friend class ClassB;', 'public:', 'ClassA()', '{', 'num1 = 10;', '}', 'class ClassB {', 'private:', 'int num2;', 'public:', 'ClassB()', '{', 'num2 = 1;', '}', 'int add() {', 'ClassA objectA;', 'return objectA.num1 + num2;', 'int main() {', 'ClassB objectB;', 'cout << ""Sum: "" << objectB.add();', 'return 0;']",[],[],"[""|||The function is not in the scope of the class to which it has been declared as a friend.|||It cannot be called using the object as it is not in the scope of that class.|||It can be invoked like a normal function without using the object.|||It cannot access the member names directly and has to use an object name and dot membership operator with the member name.|||It can be declared either in the private or the public part.||||||Friend function in C++ is used when the class private data needs to be accessed directly without using object of that class.|||Friend functions are also used to perform operator overloading. As we already know about the function overloading, operators can also be overloaded with the help of operator overloading.||||||The friend function is declared using friend keyword.|||It is not a member of the class but it is a friend of the class.|||As it is not a member of the class so it can be defined like a normal function.|||Friend functions do not access the class data members directly but they pass an object as an argument.|||It is like a normal function.|||If we want to share the multiple class's data in a function then we can use the friend function.|||""]"
76,['Snake Code in C++'],"['In this article, we will create a snake game with the help of C++ and graphics functions. In this, we will use the concept of c++ classes and computer graphics functions.']","['https://www.javatpoint.com/inline-function-in-cpp', 'https://www.javatpoint.com/friend-function-in-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://en.wikipedia.org/wiki/General-purpose_programming_language', 'https://www.javatpoint.com/https://www.geeksforgeeks.org/design-snake-game/', 'https://www.javatpoint.com/inline-function-in-cpp', 'https://www.javatpoint.com/friend-function-in-cpp', 'https://www.javatpoint.com/inline-function-in-cpp']",['https://static.javatpoint.com/cpp/images/snake-code-in-cpp.png'],[],[],"['What do you mean by the Snake game?', 'What do you mean by C++?', 'What do you mean by Computer Graphics?', 'Graphics primitives in C++', 'Example 1:']",[],"['The term computer graphics is the information displayed on a visual display unit or a computer printout in diagrams, graphics, pictures, and symbols.', 'The following functions are used to create graphics in the snake game:', 'Initgraph():', 'To initialize the graphics function, we must use the initgraph () function.', 'void Intergraph(int *graph driver, int *graph mode, char *path);', 'Initgraph function uses three-parameter:', 'closegraph():', 'It is used to close the graphics function.', 'void closegraph();', 'Outputting text:', 'In C graphics, text can be outputted using the function outtext() and outtextxy().', 'outtext():', 'It is used to display the text at the current position.', 'void outtext(char *str);', 'outtextxy():', 'It is used to display the text at the specified position.', 'void outtextxy(int x, int y, char *str);', ""Let's take the example of the snake game in C++."", 'Explanation:', 'In the above example, we have implemented a basic Snake Game. In this, we have used the concept of classes and some computer graphics functions.', 'The basic functionalities of this game are given below.', 'Following is the output of this example:']",['C++ is an object-oriented programming language. It is also called c++ with classes. It is a cross-platform language that can be used to create high-level applications. It gives programmers a high level of control over system resources and memory.'],"['Snake game is one of the most famous games available on all types of device and works on every operating system. Snakes can move in every direction in this game, e.g., left, right, up, and down; after taking the food, the length of the snake increases. Food of the Snake will be generated at a given interval of time.', 'A graphics primitive is an essential non divisible graphical element for input or output within a computer graphics system. We need a header file called <graphics.h> to draw and create any graphics on the screen. It can also be defined as how a computer displays the data pictorially and manipulates it. Apart from drawing figures of various shapes, all animations and multimedia mainly work in the graphics platform.']","['#include', '#include', '#include', '#include', '#include', '#include', '#include', '#include', 'class Snake', 'int p1,p2,v1,v2,v3,e1,e2,prev,now,n,colr,dsp,cnt,dly,m;', 'int stp, egGen;', 'int xr, yr;', 'void caught();', 'public:', 'long scr;', 'int strtX,strtY,endX,endY;', 'int pos[100][2];', 'void show();', 'void init();', 'void egg();', 'void transpose();', 'void gnrtCond();', 'void gnrtUnCond();', 'void check();', 'void checkEgg();', 'void move();', 'void chngDir();', 'void sndEt();', 'void sndCgt();', 'int test();', 'void score();', 'Snake();', 'Snake(Snake*);', '~Snake();', 'Snake::Snake()', 'Snake::~Snake()', 'void Snake::checkEgg()', 'if((e1 == p1) && (e2 == p2))', '{ sndEt();', 'egg();', 'dly--;', 'score();', 'void Snake::sndEt()', '{ nosound();', 'sound(2500);', 'delay(2);', 'nosound();', 'void Snake::sndCgt()', '{ nosound();', 'for(int x=1000;x>0;x--)', '{ sound(x);', 'delay(1);', 'nosound();', 'void Snake::score()', '{ char *p;', 'ltoa(scr,p,10);', 'settextstyle(8,0,1);', 'setcolor(0);', 'outtextxy(585,40,p);', 'if(egGen != 1){', 'scr = scr + dly / 10;', 'ltoa(scr,p,10);', 'setcolor(10);', 'outtextxy(585,40,p);', 'void Snake::gnrtCond()', '{ if(n < 367)', '{ if(now == 8 && (prev != 8 && prev != 2))', '{ pos[0][0] = p1;', 'pos[0][1] = p2 - dsp;', 'prev = now;', 'if(now == 4 && (prev != 4 && prev != 1))', '{ pos[0][0] = p1 + dsp;', 'pos[0][1] = p2;', 'prev = now;', 'if(now == 2 && (prev != 8 && prev != 2))', '{ pos[0][0] = p1;', 'pos[0][1] = p2 + dsp;', 'prev = now;', 'if(now == 1 && (prev != 1 && prev != 4))', '{pos[0][0] = p1 - dsp;', 'pos[0][1] = p2;', 'prev = now;', 'void Snake::gnrtUnCond()', 'if( prev == 8 )', '{ pos[0][0] = p1;', 'pos[0][1] = p2 - dsp;', 'if( prev == 4 )', '{pos[0][0] = p1 + dsp;', 'pos[0][1] = p2;', 'if( prev == 2 )', '{ pos[0][0] = p1;', 'pos[0][1] = p2 + dsp;', 'if( prev == 1 )', '{pos[0][0] = p1 - dsp;', 'pos[0][1] = p2;', 'p1 = pos[0][0];', 'p2 = pos[0][1];', 'void Snake::check()', 'if(p1 > endX)', '{p1 = strtX;}', 'else if(p1 < strtX)', '{ p1 = endX;}', 'if(p2 > endY)', '{ p2 = strtY;}', 'else if(p2 < strtY)', '{ p2 = endY;}', 'pos[0][0] = p1;', 'pos[0][1] = p2;', 'for(int i = 1;i < n;i++)', '{ if(p1 == pos[i][0] && p2 == pos[i][1])', '{ caught();', 'break;', 'void Snake::show()', 'int x = getcolor();', 'if(egGen != 1)', 'setcolor(getbkcolor());', 'setfillstyle(1,getbkcolor());', 'fillellipse(v1,v2,yr,yr);', 'egGen = 0;', 'if(egGen == 2)', 'egGen--;', 'setcolor(colr);', 'setfillstyle(1,9);', 'if(now == 8 || now == 2)', 'fillellipse(pos[0][0],pos[0][1],xr,yr);', 'else if(now == 4 || now == 1)', 'fillellipse(pos[0][0],pos[0][1],yr,xr);', 'setcolor(x);', 'void Snake::transpose()', '{ int i,j,x,y;', 'p1 = pos[0][0];', 'p2 = pos[0][1];', 'if(!egGen){', 'v1 = pos[n-1][0];', 'v2 = pos[n-1][1];', 'else', 'egGen = 0;', 'for(i = n-1;i >= 1;i--)', '{pos[i][0] = pos[i-1][0];', 'pos[i][1] = pos[i-1][1];', 'void Snake::move()', '{ int st = 0;', 'if(!kbhit())', '{ checkEgg();', 'if(!st)', 'show();', 'else', 'st = 0;', 'delay(dly/4);', 'transpose();', 'delay(dly/4);', 'gnrtUnCond();', 'delay(dly/4);', 'check();', 'delay(dly/4);', 'else if(stp){', 'chngDir();', 'gnrtCond();', 'check();', 'show();', 'st = 1;', '} while(stp);', 'void Snake::init()', '{time_t tm;', 'srand(time(&tm));', 'dsp = 20;', 'n = 5;', 'prev = 4;', 'for(int i = 4;i >= 0;i--)', '{ pos[i][0] = 201 + (n - i - 1) * dsp;', 'pos[i][1] = 301;', 'strtX = 21;', 'strtY = 21;', 'endX = 481;', 'endY = 361;', 'colr = 14;', 'now = prev;', 'dsp = 20;', 'stp = 111;', 'cnt = -1;', 'scr = 0;', 'dly = 150;', 'xr = 3;', 'yr = 9;', 'egg();', 'egGen = 1;', 'score();', 'int x = getcolor();', 'setlinestyle(0,1,3);', 'setcolor(15);', 'rectangle(strtX-15,strtY-15,endX+15,endY+15);', 'rectangle(endX+25,strtY-15,getmaxx()-15,endY+15);', 'rectangle(strtX-15,endY+25,getmaxx()-15,getmaxy()-5);', 'line(endX+25,strtY+75,getmaxx()-15,strtY+75);', 'line(endX+25,strtY+200,getmaxx()-15,strtY+200);', 'line(endX+25,strtY+275,getmaxx()-15,strtY+275);', 'setlinestyle(0,1,1);', 'settextstyle(8,0,1);', 'setcolor(11);', 'outtextxy(514,40,""SCORE"");', 'setcolor(14);', 'settextstyle(11,0,5);', 'outtextxy(524,110,"" CONTROLS "");', 'outtextxy(522,135,""p = PAUSE"");', 'outtextxy(522,155,""g = RESUME"");', 'outtextxy(522,175,""e = EXIT"");', 'outtextxy(513,195,""ARROWS"");', 'outtextxy(512,205,""    -MOVEMENT"");', 'setcolor(14);', 'settextstyle(4,0,9);', 'outtextxy(getmaxx()-500,getmaxy()-110,""SNAKE"");', 'settextstyle(8,0,1);', 'setcolor(x);', 'void Snake::caught()', 'stp = 0;', 'sndCgt();', 'for(int i=0;i<=7;i++)', '{ if(i%2)', '{ setcolor(10);', 'outtextxy(512,250,""GAME OVER"");', 'delay(900);', '{setcolor(0);', 'outtextxy(512,250,""GAME OVER"");', 'delay(500);', 'sleep(1);', 'void Snake::chngDir()', '{ int clr;', 'fillsettingstype *p;', 'char x = getch();', 'if(x == 72)', 'now = 8;', 'else if(x == 77)', 'now = 4;', 'else if(x == 80)', 'now = 2;', 'else if(x == 75)', 'now = 1;', ""else if(x == 'e')"", 'caught();', ""else if(x == 'p')"", '{ //int y = getcolor();', 'int twnkl = 1;', 'settextstyle(11,0,9);', 'while(1)', '{if(kbhit())', '{ int c = getch();', ""if(c == 'g')"", '{ clr = getcolor();', 'setcolor(0);', 'rectangle(endX+40,endY-10,getmaxx()-35,getmaxy()-160);', 'outtextxy(endX+60,endY-29,""PAUSE"");', 'break;', 'else', '{ if(twnkl%2)', '{ clr = getcolor();', 'setcolor(10);', 'rectangle(endX+40,endY-10,getmaxx()-35,getmaxy()-160);', 'outtextxy(endX+60,endY-29,""PAUSE"");', 'setcolor(clr);', 'delay(1000);', 'else', 'clr = getcolor();', 'setcolor(0);', 'rectangle(endX+40,endY-10,getmaxx()-35,getmaxy()-160);', 'outtextxy(endX+60,endY-29,""PAUSE"");', 'delay(1000);', 'twnkl++;', 'settextstyle(8,0,1);', 'Snake::Snake(Snake *p)', '*p=NULL;', 'void Snake::egg()', '{ e1 = (rand() % 100) * dsp + strtX;', 'e2 = (rand() % 100) * dsp + strtY;', '} while(test());', 'int x = getcolor();', 'setcolor(7);', 'setfillstyle(1,random(15)+1);', 'fillellipse(e1,e2,xr+2,xr+2);', 'setcolor(x);', 'egGen = 2;', 'int Snake::test()', 'for(int i=0;i= endX+1) || (e2 >= endY+1))', 'break;', 'if(i != n)', 'return 1;', 'return 0;', 'void main()', 'Snake snk;', 'int gd=DETECT,gm,i,j,k,x,y;', 'clrscr();', 'initgraph(&gd,&gm,""C:\\\\Turboc3\\\\bgi"");', 'snk.init();', 'snk.move();', 'closegraph();', 'restorecrtmode();']",[],[],"['|||gd: It is used for the graphics driver.|||gm: It is used for the graphics mode.|||path: It specifies the path where the graphic file is located.||||||The Snake is created with the help of a graphics function.|||The fruit of the Snake is generated by the rand() function of computer graphics.|||The Snake can be moved in any direction with the help of the keyboard ( Right, up, and down keys).|||When the Snake eats a fruit, the score will increase by 14 points.|||In this game, we can create basic controls:||||||p control is used to pause the game. We can click a p character from the keyword to pause the game.|||g control is used to resume the game. We can click a g character from the keyword to resume the game.|||e control is used to exit from the game. We can click an e character from the keyword to exit from the game.|||||||||p control is used to pause the game. We can click a p character from the keyword to pause the game.|||g control is used to resume the game. We can click a g character from the keyword to resume the game.|||e control is used to exit from the game. We can click an e character from the keyword to exit from the game.|||']"
77,['Inline function in C++'],"['If make a function as inline, then the compiler replaces the function calling location with the definition of the inline function at compile time.']","['https://www.javatpoint.com/virtual-function-vs-pure-virtual-function-in-cpp', 'https://www.javatpoint.com/snake-code-in-cpp', 'https://www.javatpoint.com/virtual-function-vs-pure-virtual-function-in-cpp', 'https://www.javatpoint.com/snake-code-in-cpp', 'https://www.javatpoint.com/virtual-function-vs-pure-virtual-function-in-cpp']",[],[],[],"['Advantages of inline function', 'Disadvantages of inline function']",[],"['Syntax for an inline function:', ""Let's understand the difference between the normal function and the inline function."", ""Let's understand through an example."", 'Once the compilation is done, the code would be like as shown as below:', 'Why do we need an inline function in C++?', 'We cannot provide the inlining to the functions in the following circumstances:', 'When do we require an inline function?', 'An inline function can be used in the following scenarios:', 'The following are the disadvantages of an inline function:']","['Any changes made to an inline function will require the inline function to be recompiled again because the compiler would need to replace all the code with a new code; otherwise, it will execute the old functionality.', 'When the inline function is encountered, then the definition of the function is copied to it. In this case, there is no control transfer which saves a lot of time and also decreases the overhead.']","['Inside the main() method, when the function fun1() is called, the control is transferred to the definition of the called function. The addresses from where the function is called and the definition of the function are different. This control transfer takes a lot of time and increases the overhead.', 'The main use of the inline function in C++ is to save memory space. Whenever the function is called, then it takes a lot of time to execute the tasks, such as moving to the calling function. If the length of the function is small, then the substantial amount of execution time is spent in such overheads, and sometimes time taken required for moving to the calling function will be greater than the time taken required to execute that function.', 'The solution to this problem is to use macro definitions known as macros. The preprocessor macros are widely used in C, but the major drawback with the macros is that these are not normal functions which means the error checking process will not be done during the compilation.', 'C++ has provided one solution to this problem. In the case of function calling, the time for calling such small functions is huge, so to overcome such a problem, a new concept was introduced known as an inline function. When the function is encountered inside the main() method, it is expanded with its definition thus saving time.']","['inline return_type function_name(parameters)', '#include', 'using namespace std;', 'inline int add(int a, int b)', 'return(a+b);', 'int main()', 'cout<<""Addition of \'a\' and \'b\' is:""<', '#include', 'using namespace std;', 'inline int add(int a, int b)', 'return(a+b);', 'int main()', 'cout<<""Addition of \'a\' and \'b\' is:""<']",[],[],"['|||If a function is recursive.|||If a function contains a loop like for, while, do-while loop.|||If a function contains static variables.|||If a function contains a switch or go to statement||||||An inline function can be used when the performance is required.|||It can be used over the macros.|||We can use the inline function outside the class so that we can hide the internal implementation of the function.||||||In the inline function, we do not need to call a function, so it does not cause any overhead.|||It also saves the overhead of the return statement from a function.|||It does not require any stack on which we can push or pop the variables as it does not perform any function calling.|||An inline function is mainly beneficial for the embedded systems as it yields less code than a normal function.||||||The variables that are created inside the inline function will consume additional registers. If the variables increase, then the use of registers also increases, which may increase the overhead on register variable resource utilization. It means that when the function call is replaced with an inline function body, then the number of variables also increases, leading to an increase in the number of registers. This causes an overhead on resource utilization.|||If we use many inline functions, then the binary executable file also becomes large.|||The use of so many inline functions can reduce the instruction cache hit rate, reducing the speed of instruction fetch from the cache memory to that of the primary memory.|||It also increases the compile-time overhead because whenever the changes are made inside the inline function, then the code needs to be recompiled again to reflect the changes; otherwise, it will execute the old functionality.|||Sometimes inline functions are not useful for many embedded systems because, in some cases, the size of the embedded is considered more important than the speed.|||It can also cause thrashing due to the increase in the size of the binary executable file. If the thrashing occurs in the memory, then it leads to the degradation in the performance of the computer.|||']"
78,['Virtual function vs Pure virtual function in C++'],"['Before understanding the differences between the virtual function and pure virtual function in C++, we should know about the virtual function and pure virtual function in C++.']","['https://www.javatpoint.com/how-to-split-strings-in-cpp', 'https://www.javatpoint.com/inline-function-in-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-virtual-function', 'https://www.javatpoint.com/how-to-split-strings-in-cpp', 'https://www.javatpoint.com/inline-function-in-cpp', 'https://www.javatpoint.com/how-to-split-strings-in-cpp']",['https://static.javatpoint.com/cpp/images/virtual-function-vs-pure-virtual-function-in-cpp.png'],[],"['What is virtual function?', 'What is pure virtual function?']",['Differences between the virtual function and pure virtual function'],[],"['Virtual function is a member function that is declared within the base class and can be redefined by the derived class.', ""Let's understand through an example."", 'Once the above changes are made, the output would be:', 'Important points:', 'Characteristics of a pure virtual function', 'There are two ways of creating a virtual function:', ""Let's understand through an example.""]","[""A pure virtual function is a virtual function that has no definition within the class. Let's understand the concept of pure virtual function through an example.""]","[""In the above code, we have not used the virtual method. We have created a base class that contains the show() function. The two classes are also created named as 'derived1' and 'derived2' that are inheriting the properties of the base class. Both 'derived1' and 'derived2' classes have redefined the show() function. Inside the main() method, pointer variable 'b' of class base is declared. The objects of classes derived1 and derived2 are d1 and d2 respectively. Although the 'b' contains the addresses of d1 and d2, but when calling the show() method; it always calls the show() method of the base class rather than calling the functions of the derived1 and derived2 class."", 'To overcome the above problem, we need to make the method as virtual in the base class. Here, virtual means that the method exists in appearance but not in reality. We can make the method as virtual by simply adding the virtual keyword preceeding to the function. In the above program, we need to add the virtual keyword that precedes to the show() function in the base class shown as below:', 'In the above pictorial representation, shape is the base class while rectangle, square and circle are the derived class. Since we are not providing any definition to the virtual function, so it will automatically be converted into a pure virtual function.']","['#include', 'using namespace std;', 'class base', 'public:', 'void show()', 'std::cout << ""Base class"" << std::endl;', 'class derived1 : public base', 'public:', 'void show()', 'std::cout << ""Derived class 1"" << std::endl;', 'class derived2 : public base', 'public:', 'void show()', 'std::cout << ""Derived class 2"" << std::endl;', 'int main()', 'base *b;', 'derived1 d1;', 'derived2 d2;', 'b=&d1', 'b->show();', 'b=&d2', 'b->show();', 'return 0;', 'virtual void show()', 'std::cout << ""Base class"" << std::endl;', 'virtual void display() = 0;', 'virtual void display() {}', '#include', 'using namespace std;', 'class Shape', 'public:', 'virtual float calculateArea() = 0; // pure virtual function.', 'class Square : public Shape', 'float a;', 'public:', 'Square(float l)', 'a = l;', 'float calculateArea()', 'return a*a;', 'class Circle : public Shape', 'float r;', 'public:', 'Circle(float x)', 'r = x;', 'float calculateArea()', 'return 3.14*r*r ;', 'class Rectangle : public Shape', 'float l;', 'float b;', 'public:', 'Rectangle(float x, float y)', 'l=x;', 'b=y;', 'float calculateArea()', 'return l*b;', 'int main()', 'Shape *shape;', 'Square s(3.4);', 'Rectangle r(5,6);', 'Circle c(7.8);', 'shape =&s', 'int a1 =shape->calculateArea();', 'shape = &r', 'int a2 = shape->calculateArea();', 'shape = &c', 'int a3 = shape->calculateArea();', 'std::cout << ""Area of the square is "" <']",[],"['Virtual function|||Pure virtual function&&&A virtual function is a member function in a base class that can be redefined in a derived class.|||A pure virtual function is a member function in a base class whose declaration is provided in a base class and implemented in a derived class.&&&The classes which are containing virtual functions are not abstract classes.|||The classes which are containing pure virtual function are the abstract classes.&&&In case of a virtual function, definition of a function is provided in the base class.|||In case of a pure virtual function, definition of a function is not provided in the base class.&&&The base class that contains a virtual function can be instantiated.|||The base class that contains a pure virtual function becomes an abstract class, and that cannot be instantiated.&&&If the derived class will not redefine the virtual function of the base class, then there will be no effect on the compilation.|||If the derived class does not define the pure virtual function; it will not throw any error but the derived class becomes an abstract class.&&&All the derived classes may or may not redefine the virtual function.|||All the derived classes must define the pure virtual function.']","['|||It is a run-time polymorphism.|||Both the base class and the derived class have the same function name, and the base class is assigned with an address of the derived class object then also pointer will execute the base class function.|||If the function is made virtual, then the compiler will determine which function is to execute at the run time on the basis of the assigned address to the pointer of the base class.||||||A pure virtual function is a ""do nothing"" function. Here ""do nothing"" means that it just provides the template, and derived class implements the function.|||It can be considered as an empty function means that the pure virtual function does not have any definition relative to the base class.|||Programmers need to redefine the pure virtual function in the derived class as it has no definition in the base class.|||A class having pure virtual function cannot be used to create direct objects of its own. It means that the class is containing any pure virtual function then we cannot create the object of that class. This type of class is known as an abstract class.|||']"
79,['How to Split strings in C++?'],"['This topic will discuss how we can split given strings into a single word in the C++ programming language. When we divide a group of words or string collections into single words, it is termed the split or division of the string. However, splitting strings is only possible with some delimiters like white space ( ), comma (,), a hyphen (-), etc., making the words an individual. Furthermore, there is no predefined split function to divide the collection of strings into an individual string. So, here we will learn the different methods to split strings into a single one in C++.']","['https://www.javatpoint.com/range-based-for-loop-in-cpp', 'https://www.javatpoint.com/virtual-function-vs-pure-virtual-function-in-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/range-based-for-loop-in-cpp', 'https://www.javatpoint.com/virtual-function-vs-pure-virtual-function-in-cpp', 'https://www.javatpoint.com/range-based-for-loop-in-cpp']",['https://static.javatpoint.com/cpp/images/how-to-split-strings-in-cpp.png'],[],['Different method to achieve the splitting of strings in C++'],"['Use strtok() function to split strings', 'Program to split strings using strtok() function', 'Program to use custom split() function to split strings', 'Use std::getline() function to split string', 'Program to use getline() function to split strings', 'Program to split the given string using the getline() function', 'Use find() and substr() function to split strings']","[""Note: A strtok() function modifies the original string and puts a NULL character ('\\0') on the delimiter position on each call of the strtok() function. In this way, it can easily track the status of the token.""]","['strtok(): A strtok() function is used to split the original string into pieces or tokens based on the delimiter passed.', 'In the above syntax, a strtok() has two parameters, the str, and the delim.', 'str: A str is an original string from which strtok() function split strings.', 'delim: It is a character that is used to split a string. For example, comma (,), space ( ), hyphen (-), etc.', 'Return: It returns a pointer that references the next character tokens. Initially, it points to the first token of the strings.', ""Let's consider an example to split string in C++ using strtok() function."", 'Program.cpp', ""Let's write a program to split sequences of strings in C++ using a custom split() function."", 'Program2.cpp', 'It has three parameters:', 'str: A str is a variable that stores original string.', 'token: It stores the string tokens extracted from original string.', 'delim: It is a character that are used to split the string. For example, comma (,), space ( ), hyphen (-), etc.', ""Let's consider an example to split strings using the getline() function in C++."", 'Program3.cpp', ""Let's consider an example to split a given string in C++ using the getline() function."", 'Program4.cpp', ""Let's write a program to use find() function and substr() function to split given strings in C++."", 'Program4.cpp']",[],"['A getline() function is a standard library function of C++ used to read the string from an input stream and put them into the vector string until delimiter characters are found. We can use std::getline() function by importing the <string> header file.', 'In the above program, we use a find() function inside the loop to repeatedly find the occurrence of the delimiter in the given string and then split it into tokens when the delimiter occurs. And the substr() function stores the sub-string to be printed. On the other hand, an erase() function stores the current position of the string and moves to the next token, and this process continues until we have got all the split strings.']","['char *ptr = strtok( str, delim)', '#include', '#include', 'using namespace std;', 'int main()', 'char str[100]; // declare the size of string', 'cout << "" Enter a string: "" <', '#include', '#include', '#define max 8 // define the max string', 'using namespace std;', 'string strings[max]; // define max string', 'int len(string str)', 'int length = 0;', ""for (int i = 0; str[i] != '\\0'; i++)"", 'length++;', 'return length;', 'void split (string str, char seperator)', 'int currIndex = 0, i = 0;', 'int startIndex = 0, endIndex = 0;', 'while (i <= len(str))', 'if (str[i] == seperator || i == len(str))', 'endIndex = i;', 'string subStr = """";', 'subStr.append(str, startIndex, endIndex - startIndex);', 'strings[currIndex] = subStr;', 'currIndex += 1;', 'startIndex = endIndex + 1;', 'int main()', 'string str = ""Program to split strings using custom split function."";', ""char seperator = ' '; // space"", 'split(str, seperator);', 'cout <<"" The split string is: "";', 'for (int i = 0; i < max; i++)', 'cout << ""\\n i : "" << i << "" "" << strings[i];', 'return 0;', 'getline(str, token, delim);', '#include', '#include', '#include', '#include', 'using namespace std;', 'int main()', 'string S, T;  // declare string variables', 'getline(cin, S); // use getline() function to read a line of string and store into S variable.', 'stringstream X(S); // X is an object of stringstream that references the S string', ""while (getline(X, T, ' ')) {"", '/* X represents to read the string from stringstream, T use for store the token string and,', ""' ' whitespace represents to split the string where whitespace is found. */"", 'cout << T << endl; // print split string', 'return 0;', '#include', '#include', '#include', '#include', 'void split_str( std::string const &str, const char delim,', 'std::vector  &out )', 'std::stringstream s(str);', 'std::string s2;', 'while (std:: getline (s, s2, delim) )', 'out.push_back(s2); // store the string in s2', 'int main()', 'std:: string s2 = ""Learn How to split a string in C++"";', ""const char delim = ' '; /* define the delimiter like space (' '), comma (,), hyphen (-), etc. */"", 'std::cout << ""Your given string is: "" << s2;', 'std::vector  out; // store the string in vector', 'split_str (s2, delim, out); // call function to split the string', 'for (const auto &s2: out)', 'std::cout << ""\\n"" << s2;', 'return 0;', '#include', '#include', 'using namespace std;', 'int main()', 'string given_str = ""How_to_split_a_string_using_find()_and_substr()_function_in_C++"";', 'string delim = ""_""; // delimiter', 'cout << "" Your string with delimiter is: "" << given_str << endl;', 'size_t pos = 0;', 'string token1; // define a string variable', 'while (( pos = given_str.find (delim)) != std::string::npos)', 'token1 = given_str.substr(0, pos); // store the substring', 'cout << token1 << endl;', 'given_str.erase(0, pos + delim.length());  /* erase() function store the current positon and move to next token. */', 'cout << given_str << endl; // it print last token of the string.']","['Enter a string:', 'Learn how to split a string in C++ using the strtok() function.', 'Split string using strtok() function:', 'Learn', 'how', 'to', 'split', 'a', 'string', 'in', 'C++', 'Using', 'the', 'strtok()', 'function.', 'The split string is:', 'i : 0 Program', 'i : 1 to', 'i : 2 split', 'i : 3 strings', 'i : 4 using', 'i : 5 custom', 'i : 6 split', 'i : 7 function.', 'Welcome to the JavaTpoint and Learn C++ Programming Language.', 'Welcome', 'to', 'the', 'JavaTpoint', 'and', 'Learn', 'C++', 'Programming', 'Language.', 'Your given string is: Learn How to split a string in C++', 'Learn', 'How', 'to', 'split', 'a', 'string', 'in', 'C++', 'Your string with delimiter is: How_to_split_a_string_using_find()_and_substr()_function_in_C++', 'How', 'to', 'split', 'a', 'string', 'using', 'find()', 'and', 'substr()', 'function', 'in', 'C++']",[],['|||Use strtok() function to split strings|||Use custom split() function to split strings|||Use std::getline() function to split string|||Use find() and substr() function to split string|||']
80,['Range-based for loop in C++'],"['In this topic, we will discuss the range-based for loop in the C++ programming language. The C++ language introduced a new concept of the range-based for loop in C++11 and later versions, which is much better than the regular For loop. A range-based for loop does not require large coding to implement for loop iteration. It is a sequential iterator that iterated each element of the container over a range (from beginning to end).']","['https://www.javatpoint.com/type-conversion-in-cpp', 'https://www.javatpoint.com/how-to-split-strings-in-cpp', 'https://www.javatpoint.com/type-conversion-in-cpp', 'https://www.javatpoint.com/how-to-split-strings-in-cpp', 'https://www.javatpoint.com/type-conversion-in-cpp']",['https://static.javatpoint.com/cpp/images/range-based-for-loop-in-cpp.png'],[],['Nested range-based for loop'],"['Program to print each element of the array using-range based for loop', 'Program to demonstrate the vector in range based for loop', 'Program to print the arrays using Range based for loop in C++ with reference', 'Program to print the nested range-based for loop in C++', 'What is the difference between traditional for loop and range-based for loop?', 'Advantages of the range-based for loop', 'Disadvantage of the range-based for loop']","[""Note: If we don't know the data type of the container elements, we can use the auto keyword that automatically identifies the data type of the range_expression.""]","[""Let's consider an example to print the int and double array using the range-based for loop in C++."", 'program.cpp', ""Let's write a simple program to implement the vector in range based for loop."", 'Program2.cpp', ""Let's consider an example to print the array elements using range based for loop in C++."", 'Program3.cpp', 'In the above syntax, we define one range-based for loop inside another loop. Here we call inner and outer range-based for loop in C++.', 'Consider an example to demonstrate the nested range based for loop in C++ programming language.', 'Range-based loop']","['When a loop is defined inside the body of another loop, the loop is called a nested for loop. Similarly, when we define a range in a loop inside another range-based loop, the technique is known as a nested range-based for loop.', 'On the other hand, we have a new range-based for loop available in the C++ 11 and later version. It has two parameters, range declaration, and the range_ expression. It is also used to repeatedly execute the block of code over a range.']","['A traditional for loop is used to repeatedly execute the block of code till the specified condition is true. A traditional for loop has three parameters, initialization of the variable, specify the condition, and the last one is counter that is incremented by one if the condition remains true.', 'The range_declaration is used to declare the type of variable related to the range_expression (container). The range_expression: It is just like a container that holds the same types of elements in a sequential manner. The loop_statement defines the statement which is executed inside for loop.']","['for (range_declaration : range_expression ) loop statement', '#include', 'using namespace std;', 'int main ()', 'int arr1 [5] = { 10, 20, 30, 40, 50};', 'double darr [5] = { 2.4, 4.5, 1.5, 3.5, 4.0 };', 'for ( const auto &var : arr1 )', 'cout << var << "" "" ;', 'for ( const auto &var : darr )', 'cout << var << "" "" ;', 'return 0;', '#include', '#include', 'using namespace std;', 'int main()', 'int x; // declare integer variable', 'vector  vect = {5, 10 , 25, 20, 25};', 'for ( int x : vect)', 'cout << x << "" "";', 'return 0;', '#include', '#include', '#include', 'using namespace std;', 'int main(){', 'array data = {1, 3, -2, 4, 6, 7, 9};', 'cout << "" Before updating the elements: "" << endl;', 'for (int x : data){', 'cout << x << "" "";', 'for (int &itemRef : data){', 'itemRef *= 3;', 'cout << endl << "" After modification of the elements: "" << endl;', 'for (int x : data){', 'cout << x << "" "";', 'cout << endl;', 'return 0;', 'for ( int x : range_expression) // outer loop', 'for ( int y : range_expression) // inner loop', '#include', 'using namespace std;', 'int main ()', 'int arr1[4]  = { 0, 1, 2, 3 };', 'int arr2[5] = { 1, 2, 3, 4, 5 };', 'for ( int x : arr1 )', 'for ( int y : arr2 )', 'cout << "" x = "" << x << "" and j = "" << y << endl;', 'return 0;', 'for ( variable_initialization; specify_condition; updated_counter)', 'for ( range_declaration : range_ expression )', 'loop _statement;']","['10 20 30 40 50', '2.4 4.5 1.5 3.5 4.0', '5 10 25 20 25', 'Before updating the elements:', '1 3 -2 4 6 7 9', 'After modification of the elements:', '3 9 -6 12 18 21 27', 'x = 0 and j = 1', 'x = 0 and j = 2', 'x = 0 and j = 3', 'x = 0 and j = 4', 'x = 0 and j = 5', 'x = 1 and j = 1', 'x = 1 and j = 2', 'x = 1 and j = 3', 'x = 1 and j = 4', 'x = 1 and j = 5', 'x = 2 and j = 1', 'x = 2 and j = 2', 'x = 2 and j = 3', 'x = 2 and j = 4', 'x = 2 and j = 5', 'x = 3 and j = 1', 'x = 3 and j = 2', 'x = 3 and j = 3', 'x = 3 and j = 4', 'x = 3 and j = 5']",[],"['|||range_declaration: It is used to declare a variable whose type is the same as the types of the collected elements represented by the range_expression or reference to that type.|||range_expression: It defines an expression that represents the suitable sequence of elements.|||loop statement: It defines the body of the range-based for loop that contains one or more statements to be repeatedly executed till the end of the range- expression.||||||It is easy to use, and its syntax is also simple.|||A range-based for loop does not require the calculation of the number of elements in a containers|||It recognizes the starting and ending elements of the containers.|||We can easily modify the size and elements of the container.|||It does not create any copy of the elements.|||It is much faster than the traditional for loop.|||It usually uses the auto keyword to recognize the data type of the container elements.||||||It cannot traverse a part of a list.|||It cannot be used to traverse in reverse order|||It cannot be used in pointers.|||It does not offer to index of the current elements.|||']"
81,['Type Conversion in C++'],"['In this topic, we will discuss the conversion of one data type into another in the C++ programming language. Type conversion is the process that converts the predefined data type of one variable into an appropriate data type. The main idea behind type conversion is to convert two different data type variables into a single data type to solve mathematical and logical expressions easily without any data loss.']","['https://www.javatpoint.com/lcm-of-two-numbers-in-cpp', 'https://www.javatpoint.com/range-based-for-loop-in-cpp', 'https://www.javatpoint.com/lcm-of-two-numbers-in-cpp', 'https://www.javatpoint.com/range-based-for-loop-in-cpp', 'https://www.javatpoint.com/lcm-of-two-numbers-in-cpp']",['https://static.javatpoint.com/cpp/images/type-conversion-in-cpp.png'],[],[],"['Implicit Type Conversion', 'Order of the typecast in implicit conversion', 'Program to convert int to float type using implicit type conversion', 'Program to convert double to int data type using implicit type conversion', 'Explicit type conversion', 'Program to convert float value into int type using the cast operator', 'Program to convert one data type into another using the assignment operator']",[],"['For example:', 'The following is the correct order of data types from lower rank to higher rank:', ""Let's create a program to convert smaller rank data types into higher types using implicit type conversion."", 'Program1.cpp', ""Let's create a program to convert the higher data type into lower type using implicit type conversion."", 'Program2.cpp', 'The explicit type conversion is divided into two ways:', 'Cast operator: In C++ language, a cast operator is a unary operator who forcefully converts one type into another type.', ""Let's consider an example to convert the float data type into int type using the cast operator of the explicit conversion in C++ language."", 'Program3.cpp', ""Let's consider an example to convert the data type of one variable into another using the assignment operator in the C++ program."", 'Program4.cpp']","['For example, we are adding two numbers, where one variable is of int type and another of float type; we need to convert or typecast the int variable into a float to make them both float data types to add them.']","[""Type conversion can be done in two ways in C++, one is implicit type conversion, and the second is explicit type conversion. Those conversions are done by the compiler itself, called the implicit type or automatic type conversion. The conversion, which is done by the user or requires user interferences called the explicit or user define type conversion. Let's discuss the implicit and explicit type conversion in C++."", 'The implicit type conversion is the type of conversion done automatically by the compiler without any human effort. It means an implicit conversion automatically converts one data type into another type based on some predefined rules of the C++ compiler. Hence, it is also known as the automatic type conversion.', 'In the above example, there are two different data type variables, x, and y, where x is an int type, and the y is of short int data type. And the resultant variable z is also an integer type that stores x and y variables. But the C++ compiler automatically converts the lower rank data type (short int) value into higher type (int) before resulting the sum of two numbers. Thus, it avoids the data loss, overflow, or sign loss in implicit type conversion of C++.', 'In the above program, we have declared num as an integer type and num2 as the double data type variable and then assigned num2 as 15.25. After this, we assign num2 value to num variable using the assignment operator. So, a C++ compiler automatically converts the double data value to the integer type before assigning it to the num variable and print the truncate value as 15.', 'Conversions that require user intervention to change the data type of one variable to another, is called the explicit type conversion. In other words, an explicit conversion allows the programmer to manually changes or typecasts the data type from one variable to another type. Hence, it is also known as typecasting. Generally, we force the explicit type conversion to convert data from one type to another because it does not follow the implicit conversion rule.']","['int x = 20;', 'short int y = 5;', 'int z = x + y;', 'bool -> char -> short int -> int -> unsigned int -> long int -> unsigned long int -> long  long int -> float -> double -> long double', '#include', 'using namespace std;', 'int main ()', 'int num1 = 25;', 'float num2;', 'num2 = num1;', 'cout <<  "" The value of num1 is: "" << num1 << endl;', 'cout <<  "" The value of num2 is: "" << num2 << endl;', 'return 0;', '#include', 'using namespace std;', 'int main()', 'int num; // declare int type variable', 'double num2 = 15.25; // declare and assign the double variable', 'num = num2;', 'cout << "" The value of the int variable is: "" << num << endl;', 'cout << "" The value of the double variable is: "" << num2 << endl;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'float f2 = 6.7;', 'int x = static_cast  (f2);', 'cout << "" The value of x is: "" << x;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'float num2;', 'int num1 = 25;', 'num2 = (float) num1;', 'cout << "" The value of int num1 is: "" << num1 << endl;', 'cout << "" The value of float num2 is: "" << num2 << endl;', 'return 0;']","['The value of num1 is: 25', 'The value of num2 is: 25', 'The value of the int variable is: 15', 'The value of the double variable is: 15.25', 'The value of x is: 6', 'The value of int num1 is: 25', 'The value of float num2 is: 25.0']",[],['|||Explicit conversion using the cast operator|||Explicit conversion using the assignment operator|||']
82,['LCM of two numbers in C++'],"['The LCM stands for Least Common Multiple, which is used to get the smallest common multiple of two numbers (n1 and n2), and the common multiple should be divisible by the given numbers. A common multiple is a number that is common in both numbers. The representation of the LCM of two numbers, as LCM (a, b) or lcm (a, b).']","['https://www.javatpoint.com/convert-string-to-integer-in-cpp', 'https://www.javatpoint.com/type-conversion-in-cpp', 'https://www.javatpoint.com/convert-string-to-integer-in-cpp', 'https://www.javatpoint.com/type-conversion-in-cpp', 'https://www.javatpoint.com/convert-string-to-integer-in-cpp']",['https://static.javatpoint.com/cpp/images/lcm-of-two-numbers-in-cpp.png'],[],[],"['Algorithm of the LCM of two numbers', 'Program to get LCM of two numbers using if statement and while loop', 'Program to get the LCM of two numbers using while loop', 'Program to get the LCM of two numbers using GCD', 'Program to get the LCM of two numbers using recursive function', 'Program to get the LCM of multiple array elements using function and while loop']",[],"['Step 1: Take two inputs from the user n1 and n2', 'Step 2: Store the smallest common multiple of n1 and n2 into the max variable.', 'Step 3: Validate whether the max variable is divisible by n1 and n2, print the max as the LCM of two numbers.', 'Step 4: Otherwise, the max value is updated by 1 on every iteration, and jump to step 3 to check the divisibility of the max variable.', 'Step 5: Terminate the program.', 'Program1.cpp', 'Program2.cpp', 'Program3.cpp', 'Program 4.cpp', 'Program5.cpp']","['For example, LCM of two positive numbers, as LCM (12, 24) is 24. Because both numbers 12 and 24 divides 24 without leaving any remainder. Similarly, the LCM of 3 and 4 is 12 because the smallest common multiple of both numbers is 12.']",[],"['#include', 'using namespace std;', 'int main()', 'int n1, n2, max_num, flag = 1;', 'cout << "" Enter two numbers: \\n"";', 'cin >> n1 >> n2;', 'max_num = (n1 > n2) ? n1 : n2;', 'while (flag)', 'if(max_num % n1 == 0 && max_num % n2 == 0)', 'cout << "" The LCM of "" <', '#include', 'using namespace std;', 'int main()', 'int num1, num2, lcm, gcd, temp;', 'cout <<"" Enter the first number: "";', 'cin >> num1;', 'cout <<"" Enter the second number: "";', 'cin >> num2;', 'int a = num1;', 'int b = num2;', 'while (num2 != 0)', 'temp = num2;', 'num2 = num1 % num2;', 'num1 = temp;', 'gcd = num1;', 'lcm = (a * b) / gcd;', 'cout << ""\\n LCM of "" << a << "" and "" << b << "" = "" << lcm;', 'return 0;', '#include', 'using namespace std;', 'int getGCD( int n1, int n2)', 'if ( n1 == 0 || n2 == 0)', 'return 0;', 'if (n1 == n2)', 'return n1;', 'if ( n1 > n2)', 'return getGCD (n1 - n2, n2);', 'return getGCD (n1, n2 - n1);', 'int getLCM (int n1, int n2)', '/* divide the multiplication of n1 and n2 by getGCD() function to return LCM. */', 'return (n1 * n2) / getGCD (n1,n2);', 'int main()', 'int n1, n2;', 'cout << "" Enter two positive numbers: "";', 'cin >> n1 >> n2; // get numbers from user', 'cout << "" \\n LCM of "" <', '# include', 'using namespace std;', 'int getGCD( int n1, int n2)', 'if (n1 == 0)', 'return n2;', 'return getGCD(n2 % n1, n1);', 'int getLCM( int n1, int n2)', 'return (n1 / getGCD(n1, n2)) * n2;', 'int main()', 'int num1, num2;', 'cout << "" Enter two numbers: "" <> num1 >> num2;', 'cout << "" LCM of two numbers "" <', '#include', 'using namespace std;', 'int lcm_num (int n1, int n2)', 'int max;', 'max = (n1 > n2) ? n1 : n2;', 'while (true)', 'if (max % n1 == 0 && max % n2 ==0)', 'return max;', 'max++;', 'int lcm_array (int arr[], int num)', 'int i;', 'int lcm = lcm_num( arr[0], arr[1]);', 'for (i = 2; i < num; i++)', 'lcm = lcm_num(lcm , arr[i]);', 'return lcm;', 'int main()', 'int arr[] = {10, 5, 15, 30};', 'int num = sizeof(arr) / sizeof(arr[0]); // get the number of elements', 'cout << "" LCM of multiple array elements is: "" << lcm_array(arr, num);']","['Enter two numbers:', '30', '50', 'The LCM of 30 and 50 is 150', 'Enter the first number: 15', 'Enter the second number: 10', 'LCM of 15 and 10 = 30', 'Enter two positive numbers: 50', '60', 'LCM of 50 and 60 is 300', 'Enter two numbers:', '12', '36', 'LCM of two numbers 12 and 36 is 36', 'LCM of multiple array elements is: 30']",[],[]
83,['Convert string to integer in C++'],"['This section will discuss the different methods to convert the given string data into an integer using the C++ programming language. There are some situations or instances where we need to convert a certain data to another type, and one such situation is to convert string to int data in programming.']","['https://www.javatpoint.com/delete-operator-in-cpp', 'https://www.javatpoint.com/lcm-of-two-numbers-in-cpp', 'https://www.javatpoint.com/delete-operator-in-cpp', 'https://www.javatpoint.com/lcm-of-two-numbers-in-cpp', 'https://www.javatpoint.com/delete-operator-in-cpp']",['https://static.javatpoint.com/cpp/images/convert-string-to-integer-in-cpp.png'],[],[],"['Using the stringstream class', 'Using the sscanf() function', 'Using the stoi() function', 'Using the atoi() function']",[],"['Different methods to convert the string data into integers in the C++ programming language.', ""Let's create a program to demonstrate the stringstream class for converting the string data into an integer in the C++ programming language."", 'Program1.cpp', 'A sscanf() function converts a given string into a specified data type like an integer.', 'Algorithm of the sscanf() function', ""Let's consider an example to use the sscanf() function to convert the string into numeric number in C++."", 'Program2.cpp', 'The stoi() function converts a string data to an integer type by passing the string as a parameter to return an integer value.', 'The stoi() function contains an str argument. The str string is passed inside the stoi() function to convert string data into an integer value.', 'Algorithm of the stoi() function', ""Let's create a program to use the stoi() function to convert the string value into the integer type in the C++ programming language."", 'Program3.cpp', 'Algorithm of the atoi() function', ""Let's create a program to use the atoi() function to convert the string value into the integer type in the C++ programming language."", 'Program4.cpp']","['The sscanf() function has three arguments to specify the char string (str), data specifier (%d), and the integer variable (&intvar) to store the converted string.', 'An atoi() function is used to convert the character string into an integer value. An atoi() function passes the character type string to return the integer data.']","['For example, we have a numeric string as ""143"", and we want to convert it to a numeric type. We need to use a function that converts a string to an integer and returns the numeric data as 143. Now, we will learn each method that helps convert string data into integers in the C++ programming language.', 'The stringstream is a class used to convert a numeric string to an int type. The stringstream class declares a stream object to insert a string as a stream object and then extracts the converted integer data based on the streams. The stringstream class has ""<<"" and "">>"" operators, which are used to fetch data from (<<) operator and insert data by passing stream to (>>) left operator.', 'In the above program, we use the stringstream class to create an obj object, and it helps to convert string data into an integer. We then use the ""<<"" operator to insert string characters into the obj object, and then we use the "">>"" operator to extract the converted string from obj into numeric data.']","['#include', '#include  // use stringstream class', 'using namespace std;', 'int main()', 'string str1 = ""143""; // declare a string', 'int intdata; // declare integer variable', '/* use stringstream class to declare a stream object to insert a string and then fetch as integer type data. */', 'stringstream obj;', 'obj << str1; // insert data into obj', 'obj >> intdata; // fetch integer type data', 'cout << "" The string value is: "" << str1 << endl;', 'cout << "" The representation of the string to integer type data is: "" << intdata << endl;', 'return 0;', 'sccanf ( str, %d, &intvar);', '#include', '#include  // use stringstream class', 'using namespace std;', 'int main ()', 'const char *str1 = ""555"";', 'const char *str2 = ""143"";', 'const char *str3 = ""101"";', 'int numdata1;', 'int numdata2;', 'int numdata3;', '/* use sscanf() function and to pass the character string str1,', 'and an integer variable to hold the string. */', 'sscanf (str1, ""%d"", &numdata1);', 'cout <<"" The value of the character string is: "" << str1;', 'cout << ""\\n The representation of string to int value of numdata1 is: "" << numdata1 <', 'stoi(str);', '#include', '#include', 'using namespace std;', 'int main ()', 'string strdata1 = ""108"";', 'string strdata2 = ""56.78"";', 'string strdata3 = ""578 Welcome"";', 'int intdata1 = stoi (strdata1);', 'int intdata2 = stoi (strdata2);', 'int intdata3 = stoi (strdata3);', 'cout << "" The conversion of string to an integer using stoi(\\"""" << strdata1 << ""\\"") is "" << intdata1 <', 'atoi (const char *str);', '#include', '#include', 'using namespace std;', 'int main ()', 'const char *strdata1 = ""256"";', 'const char *strdata2 = ""16.18"";', 'const char *strdata3 = ""1088 Good Bye"";', 'int intdata1 = atoi (strdata1);', 'int intdata2 = atoi (strdata2);', 'int intdata3 = atoi (strdata3);', 'cout << "" The conversion of string to an integer value using atoi(\\"""" << strdata1 << ""\\"") is "" << intdata1 <']","['The string value is: 143', 'The representation of the string to integer type data is: 143', 'The value of the character string is: 555', 'The representation of string to int value of numdata is: 555', 'The value of the character string is: 143', 'The representation of string to int value of numdata is: 143', 'The value of the character string is: 101', 'The representation of string to int value of numdata is: 101', 'The conversion of string to an integer using stoi(""108"") is 108', 'The conversion of string to an integer using stoi(""56.78"") is 56', 'The conversion of string to an integer using stoi(""578 Welcome"") is 578', 'The conversion of string to an integer value using atoi(""256"") is 256', 'The conversion of string to an integer value using atoi(""16.18"") is 16', 'The conversion of string to an integer value using atoi(""1088 Good Bye"") is 1088']",[],"['|||Using the stringstream class|||Using the stoi() function|||Using the atoi() function|||Using the sscanf() function||||||The sscanf() function belongs to the stringstream class, so we need to import the class into our program.|||Initialize a constant character string str.|||Create an integer variable to hold the converted string to integer values.|||Pass the string variable into the sscanf() function, and assign the sscanf() function to the integer variable to store the integer value generated by the function.|||Print the integer values.||||||Initialize the string variable to store string values.|||After that, it creates an integer type variable that stores the conversion of string into integer type data using the stoi() function.|||Print the integer variable value.||||||Initialize a pointer-type character array to store a string.|||After that, it creates an integer type variable that stores the conversion of string into integer type data using the atoi() function.|||Print the integer variable value.|||']"
84,['COMPONENTS OF STL'],"['Containers can be described as the objects that hold the data of the same type. Containers are used to implement different data structures for example arrays, list, trees, etc.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#']","['https://static.javatpoint.com/cpp/images/stl-components.png', 'https://static.javatpoint.com/cpp/images/stl-components2.png', 'https://static.javatpoint.com/cpp/images/stl-components3.png', 'https://static.javatpoint.com/cpp/images/stl-components4.png', 'https://static.javatpoint.com/cpp/images/stl-components5.png']",[],"['CONTAINERS', 'ITERATOR', 'Iterator Categories', 'FUNCTION OBJECTS']",[],['Note : Each container class contains a set of functions that can be used to manipulate the contents.'],"['Following are the containers that give the details of all the containers as well as the header file and the type of iterator associated with them :', 'Classification of containers :', 'begin(): The member function begin() returns an iterator to the first element of the vector.', 'end(): The member function end() returns an iterator to the past-the-last element of a container.', 'Iterators are mainly divided into five categories:', 'Operations supported by iterators', 'Algorithms are the functions used across a variety of containers for processing its contents.', 'Points to Remember:', 'STL algorithms can be categorized as:', 'Following are the advantages of function objects over a regular function:', ""Suppose 'd' is an object of a class, operator() function can be called as:"", ""Let's see a simple example:""]","[""In the above example, 'f' is an object of a function_object class which contains the definition of operator() function. Therefore, 'f' can be used as an ordinary function to call the operator() function.""]","['A Function object is a function wrapped in a class so that it looks like an object. A function object extends the characteristics of a regular function by using the feature of aN object oriented such as generic programming. Therefore, we can say that the function object is a smart pointer that has many advantages over the normal function.', ""A function object is also known as a 'functor'. A function object is an object that contains atleast one definition of operator() function. It means that if we declare the object 'd' of a class in which operator() function is defined, we can use the object 'd' as a regular function.""]","['which is same as:', 'd.operator() ( );', '#include <iostream>', 'using namespace std;', 'class function_object', 'public:', 'int operator()(int a, int b)', '{', 'return a+b;', '}', 'int main()', 'function_object f;', 'int result = f(5,5);', 'cout<<""Addition of a and b is : ""<<result;', 'return 0;']",['Addition of a and b is : 10'],"['Container|||Description|||Header file|||iterator&&&vector|||vector is a class that creates a dynamic array allowing insertions and deletions at the back.|||<vector>|||Random access&&&list|||list is the sequence containers that allow the insertions and deletions from anywhere.|||<list>|||Bidirectional&&&deque|||deque is the double ended queue that allows the insertion and deletion from both the ends.|||<deque>|||Random access&&&set|||set is an associate container for storing unique sets.|||<set>|||Bidirectional&&&multiset|||Multiset is an associate container for storing non- unique sets.|||<set>|||Bidirectional&&&map|||Map is an associate container for storing unique key-value pairs, i.e. each key is associated with only one value(one to one mapping).|||<map>|||Bidirectional&&&multimap|||multimap is an associate container for storing key- value pair, and each key can be associated with more than one value.|||<map>|||Bidirectional&&&stack|||It follows last in first out(LIFO).|||<stack>|||No iterator&&&queue|||It follows first in first out(FIFO).|||<queue>|||No iterator&&&Priority-queue|||First element out is always the highest priority element.|||<queue>|||No iterator', 'iterator|||Element access|||Read|||Write|||Increment operation|||Comparison&&&input|||->|||v = *p||||||++|||==,!=&&&output|||||||||*p = v|||++|||&&&forward|||->|||v = *p|||*p = v|||++|||==,!=&&&Bidirectional|||->|||v = *p|||*p = v|||++,--|||==,!=&&&Random access|||->,[ ]|||v = *p|||*p = v|||++,--,+,-,+=,--=|||==,!=,<,>,<=,>=']","['|||Sequence containers|||Associative containers|||Derived containers||||||Iterators are pointer-like entities used to access the individual elements in a container.|||Iterators are moved sequentially from one element to another element. This process is known as iterating through a container.||||||Iterator contains mainly two functions:||||||An Input iterator is an iterator that allows the program to read the values from the container.|||Dereferencing the input iterator allows us to read a value from the container, but it does not alter the value.|||An Input iterator is a one way iterator.|||An Input iterator can be incremented, but it cannot be decremented.||||||An output iterator is similar to the input iterator, except that it allows the program to modify a value of the container, but it does not allow to read it.|||It is a one-way iterator.|||It is a write only iterator.||||||Forward iterator uses the ++ operator to navigate through the container.|||Forward iterator goes through each element of a container and one element at a time.||||||A Bidirectional iterator is similar to the forward iterator, except that it also moves in the backward direction.|||It is a two way iterator.|||It can be incremented as well as decremented.||||||Random access iterator can be used to access the random element of a container.|||Random access iterator has all the features of a bidirectional iterator, and it also has one more additional feature, i.e., pointer addition. By using the pointer addition operation, we can access the random element of a container.||||||Algorithms provide approx 60 algorithm functions to perform the complex operations.|||Standard algorithms allow us to work with two different types of the container at the same time.|||Algorithms are not the member functions of a container, but they are the standalone template functions.|||Algorithms save a lot of time and effort.|||If we want to access the STL algorithms, we must include the <algorithm> header file in our program.||||||Nonmutating algorithms: Nonmutating algorithms are the algorithms that do not alter any value of a container object nor do they change the order of the elements in which they appear. These algorithms can be used for all the container objects, and they make use of the forward iterators.|||Mutating algorithms: Mutating algorithms are the algorithms that can be used to alter the value of a container. They can also be used to change the order of the elements in which they appear.|||Sorting algorithms: Sorting algorithms are the modifying algorithms used to sort the elements in a container.|||Set algorithms: Set algorithms are also known as sorted range algorithm. This algorithm is used to perform some function on a container that greatly improves the efficiency of a program.|||Relational algorithms: Relational algorithms are the algorithms used to work on the numerical data. They are mainly designed to perform the mathematical operations to all the elements in a container.||||||Function objects can have member functions as well as member attributes.|||Function objects can be initialized before their usage.|||Regular functions can have different types only when the signature differs. Function objects can have different types even when the signature is the same.|||Function objects are faster than the regular function.|||&&&|||Input iterator:||||||An Input iterator is an iterator that allows the program to read the values from the container.|||Dereferencing the input iterator allows us to read a value from the container, but it does not alter the value.|||An Input iterator is a one way iterator.|||An Input iterator can be incremented, but it cannot be decremented.|||||||||Output iterator:||||||An output iterator is similar to the input iterator, except that it allows the program to modify a value of the container, but it does not allow to read it.|||It is a one-way iterator.|||It is a write only iterator.|||||||||Forward iterator:||||||Forward iterator uses the ++ operator to navigate through the container.|||Forward iterator goes through each element of a container and one element at a time.||||||Bidirectional iterator:||||||A Bidirectional iterator is similar to the forward iterator, except that it also moves in the backward direction.|||It is a two way iterator.|||It can be incremented as well as decremented.|||||||||Random Access Iterator:||||||Random access iterator can be used to access the random element of a container.|||Random access iterator has all the features of a bidirectional iterator, and it also has one more additional feature, i.e., pointer addition. By using the pointer addition operation, we can access the random element of a container.|||||||||']"
85,['C++ Vector'],"['A vector is a sequence container class that implements dynamic array, means size automatically changes when appending elements. A vector stores the elements in contiguous memory locations and allocates the memory as needed at run time.']","['https://www.javatpoint.com/cpp-vector-at-function', 'https://www.javatpoint.com/cpp-vector', 'https://www.javatpoint.com/cpp-vector-at-function', 'https://www.javatpoint.com/cpp-vector-back-function', 'https://www.javatpoint.com/cpp-vector-front-function', 'https://www.javatpoint.com/cpp-vector-swap-function', 'https://www.javatpoint.com/cpp-vector-push-back-function', 'https://www.javatpoint.com/cpp-vector-pop-back-function', 'https://www.javatpoint.com/cpp-vector-empty-function', 'https://www.javatpoint.com/cpp-vector-insert-function', 'https://www.javatpoint.com/cpp-vector-erase-function', 'https://www.javatpoint.com/cpp-vector-resize-function', 'https://www.javatpoint.com/cpp-vector-clear-function', 'https://www.javatpoint.com/cpp-vector-size-function', 'https://www.javatpoint.com/cpp-vector-capacity-function', 'https://www.javatpoint.com/cpp-vector-assign-function', 'https://www.javatpoint.com/cpp-vector-operator=()-function', 'https://www.javatpoint.com/cpp-vector-operator[]()-function', 'https://www.javatpoint.com/cpp-vector-end-function', 'https://www.javatpoint.com/cpp-vector-emplace-function', 'https://www.javatpoint.com/cpp-vector-emplace-back-function', 'https://www.javatpoint.com/cpp-vector-rend-function', 'https://www.javatpoint.com/cpp-vector-rbegin-function', 'https://www.javatpoint.com/cpp-vector-begin-function', 'https://www.javatpoint.com/cpp-vector-max-size-function', 'https://www.javatpoint.com/cpp-vector-cend-function', 'https://www.javatpoint.com/cpp-vector-cbegin-function', 'https://www.javatpoint.com/cpp-vector-crbegin-function', 'https://www.javatpoint.com/cpp-vector-crend-function', 'https://www.javatpoint.com/cpp-vector-data-function', 'https://www.javatpoint.com/cpp-vector-shrink-to-fit-function', 'https://www.javatpoint.com/cpp-vector-at-function', 'https://www.javatpoint.com/cpp-vector', 'https://www.javatpoint.com/cpp-vector-at-function']",[],[],"['Difference between vector and array', 'C++ Vector Functions']",[],[],"[""Consider a vector 'v1'. Syntax would be:"", ""Let's see a simple example."", 'In this example, vector class has been used to display the string.']","['An array follows static approach, means its size cannot be changed during run time while vector implements dynamic array means it automatically resizes itself when appending elements.']",[],"['vector<object_type> v1;', '#include<iostream>', '#include<vector>', 'using namespace std;', 'int main()', 'vector<string> v1;', 'v1.push_back(""javaTpoint "");', 'v1.push_back(""tutorial"");', 'for(vector<string>::iterator itr=v1.begin();itr!=v1.end();++itr)', 'cout<<*itr;', 'return 0;']",['javaTpoint tutorial'],['Function|||Description&&&at()|||It provides a reference to an element.&&&back()|||It gives a reference to the last element.&&&front()|||It gives a reference to the first element.&&&swap()|||It exchanges the elements between two vectors.&&&push_back()|||It adds a new element at the end.&&&pop_back()|||It removes a last element from the vector.&&&empty()|||It determines whether the vector is empty or not.&&&insert()|||It inserts new element at the specified position.&&&erase()|||It deletes the specified element.&&&resize()|||It modifies the size of the vector.&&&clear()|||It removes all the elements from the vector.&&&size()|||It determines a number of elements in the vector.&&&capacity()|||It determines the current capacity of the vector.&&&assign()|||It assigns new values to the vector.&&&operator=()|||It assigns new values to the vector container.&&&operator[]()|||It access a specified element.&&&end()|||It refers to the past-lats-element in the vector.&&&emplace()|||It inserts a new element just before the position pos.&&&emplace_back()|||It inserts a new element at the end.&&&rend()|||It points the element preceding the first element of the vector.&&&rbegin()|||It points the last element of the vector.&&&begin()|||It points the first element of the vector.&&&max_size()|||It determines the maximum size that vector can hold.&&&cend()|||It refers to the past-last-element in the vector.&&&cbegin()|||It refers to the first element of the vector.&&&crbegin()|||It refers to the last character of the vector.&&&crend()|||It refers to the element preceding the first element of the vector.&&&data()|||It writes the data of the vector into an array.&&&shrink_to_fit()|||It reduces the capacity and makes it equal to the size of the vector.'],[]
86,['Initialize Vector in C++'],"[""A vector can store multiple data values like arrays, but they can only store object references and not primitive data types. They store an object's reference means that they point to the objects that contain the data, instead of storing them. Unlike an array, vectors need not be initialized with size. They have the flexibility to adjust according to the number of object references, which is possible because their storage is handled automatically by the container. The container will keep an internal copy of alloc, which is used to allocate storage for lifetime. Vectors can be located and traversed using iterators, so they are placed in contiguous storage. Vector has safety features also, which saves programs from crashing, unlike Array. We can give reserve space to vector, but not to arrays. An array is not a class, but a vector is a class. In vector, elements can be deleted, but not in arrays.""]","['https://www.javatpoint.com/post/cpp-deque', 'https://www.javatpoint.com/cpp-vector', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-vector', 'https://www.javatpoint.com/post/cpp-deque', 'https://www.javatpoint.com/cpp-vector', 'https://www.javatpoint.com/post/cpp-deque']",['https://static.javatpoint.com/cpp/images/initialize-vector-in-cpp.png'],[],[],"['By entering the values one-by-one -', 'Using an overloaded constructor -', 'By the help of arrays -', 'Using another initialized vector -']",[],"['There are four ways of initializing a vector in C++:', ""All the elements in a vector can be inserted one-by-one using the vector class method 'push_back.'"", 'When a vector has multiple elements with the same values, then we use this method.', 'By using an overloaded constructor of the vector class -', 'This method is mainly used when a vector is filled with multiple elements with the same value.', 'We pass an array to the constructor of the vector class. The Array contains the elements which will fill the vector.', 'Algorithm -', 'Algorithm -']","['Here, we have to pass the begin() and end() iterators of an initialized vector to a vector class constructor. Then we initialize a new vector and fill it with the old vector.']","[""With the parent 'Collection class,' vector is sent in the form of a template class. The array is the lower level data structure with their specific properties. Vectors have functions & constructors; they are not index-based. They are the opposite of Arrays, which are index-based data structures. Here, the lowest address is provided to the first element, and the highest address is provided to the last element. Vector is used for insertion and deletion of an object, whereas Arrays used for frequent access of objects. Arrays are memory saving data structures, while Vector utilizes much more memory in exchange to manage storage and grow dynamically. Vector takes more time to access the elements, but this not the case with Arrays.""]","['Begin', 'Declare v of vector type.', 'Then we call push_back() function. This is done to insert values into vector v.', 'Then we print ""Vector elements: \\n"".', '"" for (int a: v)', 'print all the elements of variable a.""', '#include <iostream>', '#include <vector>', 'using namespace std;', 'int main()', 'vector<int> vec;', 'vec.push_back(1);', 'vec.push_back(2);', 'vec.push_back(3);', 'vec.push_back(4);', 'vec.push_back(5);', 'vec.push_back(6);', 'vec.push_back(7);', 'vec.push_back(8);', 'vec.push_back(9);', 'vec.push_back(101);', 'for (int i = 0; i < vec.size(); i++)', 'cout << vec[i] << "" "";', 'return 0;', ""First, we initialize a variable say 's'."", ""Then we have to create a vector say 'v' with size's'."", 'Then we initialize vector v1.', 'Then initialize v2 by v1.', 'Then we print the elements.', '#include <iostream>', '#include <vector>', 'using namespace std;', 'int main()', 'int elements = 12;', 'vector<int> vec(elements, 8);', 'for (int i = 0; i < vec.size(); i++)', 'cout << vec[i] << "" \\n"";', 'return 0;', 'First, we create a vector say v.', 'Then, we initialize the vector.', 'In the end, print the elements.', '#include <iostream>', '#include <vector>', 'using namespace std;', 'int main()', 'vector<int> vectr{9,8,7,6,5,4,3,2,1,0};', 'for (int i = 0; i < vectr.size(); i++)', 'cout << vectr[i] << "" \\n"";', 'return 0;', 'First, we have to create a vector v1.', 'Then, we have to initialize vector v1 by an array.', 'Then we initialize vector v2 by v1.', 'We have to print the elements.', '#include <iostream>', '#include <vector>', 'using namespace std;', 'int main()', 'vector<int> vec_1{1,2,3,4,5,6,7,8};', 'vector<int> vec_2(vec_1.begin(), vec_1.end());', 'for (int i = 0; i < vec_2.size(); i++)', 'cout << vec_2[i] << "" \\n"";', 'return 0;']","['8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '9', '8', '7', '6', '5', '4', '3', '2', '1', '0', '1', '2', '3', '4', '5', '6', '7', '8']",[],['|||By entering the values one-by-one|||By using an overloaded constructor of the vector class|||By the help of arrays|||By using another initialized vector|||']
87,['C++ Deque'],['Deque stands for double ended queue. It generalizes the queue data structure i.e insertion and deletion can be performed from both the ends either front or back.'],"['https://www.javatpoint.com/cpp-deque', 'https://www.javatpoint.com/cpp-deque', 'https://www.javatpoint.com/cpp-deque-assign-function', 'https://www.javatpoint.com/cpp-deque-emplace-function', 'https://www.javatpoint.com/cpp-deque-emplace_back-function', 'https://www.javatpoint.com/cpp-deque-emplace_front-function', 'https://www.javatpoint.com/cpp-deque-insert-function', 'https://www.javatpoint.com/cpp-deque-push_back-function', 'https://www.javatpoint.com/cpp-deque-push_front-function', 'https://www.javatpoint.com/cpp-deque-pop_back-function', 'https://www.javatpoint.com/cpp-deque-pop_front-function', 'https://www.javatpoint.com/cpp-deque-swap-function', 'https://www.javatpoint.com/cpp-deque-clear-function', 'https://www.javatpoint.com/cpp-deque-empty-function', 'https://www.javatpoint.com/cpp-deque-erase-function', 'https://www.javatpoint.com/cpp-deque-max_size-function', 'https://www.javatpoint.com/cpp-deque-resize-function', 'https://www.javatpoint.com/cpp-deque-shrink_to_fit-function', 'https://www.javatpoint.com/cpp-deque-size-function', 'https://www.javatpoint.com/cpp-deque-at-function', 'https://www.javatpoint.com/cpp-deque-operator[]()-function', 'https://www.javatpoint.com/cpp-deque-operator=()-function', 'https://www.javatpoint.com/cpp-deque-back-function', 'https://www.javatpoint.com/cpp-deque-begin-function', 'https://www.javatpoint.com/cpp-deque-cbegin-function', 'https://www.javatpoint.com/cpp-deque-end-function', 'https://www.javatpoint.com/cpp-deque-cend-function', 'https://www.javatpoint.com/cpp-deque-rbegin-function', 'https://www.javatpoint.com/cpp-deque-crbegin-function', 'https://www.javatpoint.com/cpp-deque-rend-function', 'https://www.javatpoint.com/cpp-deque-crend-function', 'https://www.javatpoint.com/cpp-deque', 'https://www.javatpoint.com/cpp-deque', 'https://www.javatpoint.com/cpp-deque']",['https://www.javatpoint.com//post/resources/article-images/c++-deque/cpp-deque.png'],[],['C++ Deque Functions'],[],[],[],[],[],['deque deque_name;'],[],['Method|||Description&&&assign()|||It assigns new content and replacing the old one.&&&emplace()|||It adds a new element at a specified position.&&&emplace_back()|||It adds a new element at the end.&&&emplace_front()|||It adds a new element in the beginning of a deque.&&&insert()|||It adds a new element just before the specified position.&&&push_back()|||It adds a new element at the end of the container.&&&push_front()|||It adds a new element at the beginning of the container.&&&pop_back()|||It deletes the last element from the deque.&&&pop_front()|||It deletes the first element from the deque.&&&swap()|||It exchanges the contents of two deques.&&&clear()|||It removes all the contents of the deque.&&&empty()|||It checks whether the container is empty or not.&&&erase()|||It removes the elements.&&&max_size()|||It determines the maximum size of the deque.&&&resize()|||It changes the size of the deque.&&&shrink_to_fit()|||It reduces the memory to fit the size of the deque.&&&size()|||It returns the number of elements. &&&at()|||It access the element at position pos.&&&operator[]()|||It access the element at position pos. &&&operator=()|||It assigns new contents to the container.&&&back()|||It access the last element.&&&begin()|||It returns an iterator to the beginning of the deque.&&&cbegin()|||It returns a constant iterator to the beginning of the deque.&&&end()|||It returns an iterator to the end.&&&cend()|||It returns a constant iterator to the end.&&&rbegin()|||It returns a reverse iterator to the beginning.&&&crbegin()|||It returns a constant reverse iterator to the beginning.&&&rend()|||It returns a reverse iterator to the end.&&&crend()|||It returns a constant reverse iterator to the end.&&&front()|||It access the last element.'],[]
88,['C++ List'],['It creates an empty list of integer type values.'],"['https://www.javatpoint.com/cpp-list-insert-function', 'https://www.javatpoint.com/cpp-list-insert-function', 'https://www.javatpoint.com/cpp-list-push_back-function', 'https://www.javatpoint.com/cpp-list-push_front-function', 'https://www.javatpoint.com/cpp-list-pop_back-function', 'https://www.javatpoint.com/cpp-list-pop_front-function', 'https://www.javatpoint.com/cpp-list-empty-function', 'https://www.javatpoint.com/cpp-list-size-function', 'https://www.javatpoint.com/cpp-list-max_size-function', 'https://www.javatpoint.com/cpp-list-front-function', 'https://www.javatpoint.com/cpp-list-back-function', 'https://www.javatpoint.com/cpp-list-swap-function', 'https://www.javatpoint.com/cpp-list-reverse-function', 'https://www.javatpoint.com/cpp-list-sort-function', 'https://www.javatpoint.com/cpp-list-merge-function', 'https://www.javatpoint.com/cpp-list-splice-function', 'https://www.javatpoint.com/cpp-list-unique-function', 'https://www.javatpoint.com/cpp-list-resize-function', 'https://www.javatpoint.com/cpp-list-assign-function', 'https://www.javatpoint.com/cpp-list-emplace-function', 'https://www.javatpoint.com/cpp-list-emplace_back-function', 'https://www.javatpoint.com/cpp-list-emplace_front-function', 'https://www.javatpoint.com/cpp-list-insert-function', 'https://www.javatpoint.com/cpp-list-insert-function']",[],[],"['Template for list', 'C++ List Functions']",[],[],"['List can also be initalised with the parameters.', 'List can be initialised in two ways.', 'Following are the member functions of the list:']",[],[],"['#include<iostream>', '#include<list>', 'using namespace std;', 'int main()', 'list<int> l;', '#include<iostream>', '#include<list>', 'using namespace std;', 'int main()', 'list<int> l{1,2,3,4};', 'list<int>  new_list{1,2,3,4};', 'list<int> new_list = {1,2,3,4};']",[],['Method|||Description&&&insert()|||It inserts the new element before the position pointed by the iterator.&&&push_back()|||It adds a new element at the end of the vector.&&&push_front()|||It adds a new element to the front.&&&pop_back()|||It deletes the last element.&&&pop_front()|||It deletes the first element.&&&empty()|||It checks whether the list is empty or not.&&&size()|||It finds the number of elements present in the list.&&&max_size()|||It finds the maximum size of the list.&&&front()|||It returns the first element of the list. &&&back()|||It returns the last element of the list.&&&swap()|||It swaps two list when the type of both the list are same.&&&reverse()|||It reverses the elements of the list.&&&sort()|||It sorts the elements of the list in an increasing order.&&&merge()|||It merges the two sorted list.&&&splice()|||It inserts a new list into the invoking list.&&&unique()|||It removes all the duplicate elements from the list.&&&resize()|||It changes the size of the list container.&&&assign()|||It assigns a new element to the list container.&&&emplace()|||It inserts a new element at a specified position.&&&emplace_back()|||It inserts a new element at the end of the vector.&&&emplace_front()|||It inserts a new element at the beginning of the list.'],['|||List is a contiguous container while vector is a non-contiguous container i.e list stores the elements on a contiguous memory and vector stores on a non-contiguous memory.|||Insertion and deletion in the middle of the vector is very costly as it takes lot of time in shifting all the elements. Linklist overcome this problem and it is implemented using list container.|||List supports a bidirectional and provides an efficient way for insertion and deletion operations.|||Traversal is slow in list as list elements are accessed sequentially while vector supports a random access.|||']
89,['C++ STL Set'],"['Sets are part of the C++ STL (Standard Template Library). Sets are the associative containers that stores sorted key, in which each key is unique and it can be inserted or deleted but cannot be altered. ']","['https://www.javatpoint.com/cpp-set-constructor', 'https://www.javatpoint.com/cpp-set-constructor', 'https://www.javatpoint.com/cpp-set-destructor', 'https://www.javatpoint.com/cpp-set-operator=()-function', 'https://www.javatpoint.com/cpp-set-begin-function', 'https://www.javatpoint.com/cpp-set-cbegin-function', 'https://www.javatpoint.com/cpp-set-end-function', 'https://www.javatpoint.com/cpp-set-cend-function', 'https://www.javatpoint.com/cpp-set-rbegin-function', 'https://www.javatpoint.com/cpp-set-rend-function', 'https://www.javatpoint.com/cpp-set-crbegin-function', 'https://www.javatpoint.com/cpp-set-crend-function', 'https://www.javatpoint.com/cpp-set-empty-function', 'https://www.javatpoint.com/cpp-set-size-function', 'https://www.javatpoint.com/cpp-set-max_size-function', 'https://www.javatpoint.com/cpp-set-insert-function', 'https://www.javatpoint.com/cpp-set-erase-function', 'https://www.javatpoint.com/cpp-set-swap-function', 'https://www.javatpoint.com/cpp-set-clear-function', 'https://www.javatpoint.com/cpp-set-emplace-function', 'https://www.javatpoint.com/cpp-set-emplace_hint-function', 'https://www.javatpoint.com/cpp-set-key_comp-function', 'https://www.javatpoint.com/cpp-set-value_comp-function', 'https://www.javatpoint.com/cpp-set-find-function', 'https://www.javatpoint.com/cpp-set-count-function', 'https://www.javatpoint.com/cpp-set-lower_bound-function', 'https://www.javatpoint.com/cpp-set-upper_bound-function', 'https://www.javatpoint.com/cpp-set-equal_range-function', 'https://www.javatpoint.com/cpp-set-get_allocator-function', 'https://www.javatpoint.com/cpp-set-non-member-operator==', 'https://www.javatpoint.com/cpp-set-non-member-operator!=', 'https://www.javatpoint.com/cpp-set-non-member-operator-less-than', 'https://www.javatpoint.com/cpp-set-non-member-operator-less-than=', 'https://www.javatpoint.com/cpp-set-non-member-operator-greater-than', 'https://www.javatpoint.com/cpp-set-non-member-operator-greater-than=', 'https://www.javatpoint.com/cpp-set-non-member-swap-function', 'https://www.javatpoint.com/cpp-set-constructor', 'https://www.javatpoint.com/cpp-set-constructor']",[],[],['Member Functions'],"['Constructor/Destructor', 'Iterators', 'Capacity', 'Modifiers', 'Observers', 'Operations', 'Allocator']",[],"['T: Type of element stored in the container set.', 'Alloc: Type of the allocator object which is used to define the storage allocation model.', 'Below is the list of all member functions of set:']","['Compare: A comparison class that takes two arguments of the same type bool and returns a value. This argument is optional and the binary predicate less<T>, is the default value.']",[],"['template < class T,                             // set::key_type/value_type', 'class Compare = less<T>,        // set::key_compare/value_compare', 'class Alloc = allocator<T>         // set::allocator_type', '> class set;']",[],"['Functions|||Description&&&(constructor)|||Construct set&&&(destructor)|||Set destructor&&&operator=|||Copy elements of the set to another set.', 'Functions|||Description&&&Begin|||Returns an iterator pointing to the first element in the set.&&&cbegin|||Returns a const iterator pointing to the first element in the set.&&&End|||Returns an iterator pointing to the past-end.&&&Cend|||Returns a constant iterator pointing to the past-end.&&&rbegin|||Returns a reverse iterator pointing to the end.&&&Rend|||Returns a reverse iterator pointing to the beginning.&&&crbegin|||Returns a constant reverse iterator pointing to the end.&&&Crend|||Returns a constant reverse iterator pointing to the beginning.', 'Functions|||Description&&&empty|||Returns true if set is empty.&&&Size|||Returns the number of elements in the set.&&&max_size|||Returns the maximum size of the set.', 'Functions|||Description&&&insert|||Insert element in the set.&&&Erase|||Erase elements from the set.&&&Swap|||Exchange the content of the set.&&&Clear|||Delete all the elements of the set.&&&emplace|||Construct and insert the new elements into the set.&&&emplace_hint|||Construct and insert new elements into the set by hint.', 'Functions|||Description&&&key_comp|||Return a copy of key comparison object.&&&value_comp|||Return a copy of value comparison object.', 'Functions|||Description&&&Find|||Search for an element with given key.&&&count|||Gets the number of elements matching with given key.&&&lower_bound|||Returns an iterator to lower bound.&&&upper_bound|||Returns an iterator to upper bound.&&&equal_range|||Returns the range of elements matches with given key.', 'Functions|||Description&&&get_allocator|||Returns an allocator object that is used to construct the set.', 'Functions|||Description&&&operator==|||Checks whether the two sets are equal or not.&&&operator!=|||Checks whether the two sets are equal or not.&&&operator<|||Checks whether the first set is less than other or not.&&&operator<=|||Checks whether the first set is less than or equal to other or not.&&&operator>|||Checks whether the first set is greater than other or not.&&&operator>=|||Checks whether the first set is greater than equal to other or not.&&&swap()|||Exchanges the element of two sets.']",[]
90,['C++ stack'],"[""In computer science we go for working on a large variety of programs. Each of them has their own domain and utility. Based on the purpose and environment of the program creation, we have a large number of data structures available to choose from. One of them is 'stack'. Before discussing about this data type let us take a look at its syntax.""]","['https://www.javatpoint.com/cpp-stack', 'https://www.javatpoint.com/cpp-stack', 'https://www.javatpoint.com/cpp-stack-empty-function', 'https://www.javatpoint.com/cpp-stack-size-function', 'https://www.javatpoint.com/cpp-stack-top-function', 'https://www.javatpoint.com/cpp-stack-push-function', 'https://www.javatpoint.com/cpp-stack-pop-function', 'https://www.javatpoint.com/cpp-stack-emplace-function', 'https://www.javatpoint.com/cpp-stack', 'https://www.javatpoint.com/cpp-stack', 'https://www.javatpoint.com/cpp-stack']",[],[],[],['Example: A simple program to show the use of basic stack functions. '],[],"['Stacks in the application areas are implied as the container adaptors. ', 'The containers should have a support for the following list of operations:', 'T: The argument specifies the type of the element which the container adaptor will be holding.', 'Container: The argument specifies an internal object of container where the elements of the stack are hold.', 'Given below is a list of the stack member types with a short description of the same.']","['With the help of functions, an object or variable can be played with in the field of programming. Stacks provide a large number of functions that can be used or embedded in the programs. A list of the same is given below:']","[""This data structure works on the LIFO technique, where LIFO stands for Last In First Out. The element which was first inserted will be extracted at the end and so on. There is an element called as 'top' which is the element at the upper most position. All the insertion and deletion operations are made at the top element itself in the stack. ""]","['template<class T, class Container = deque<T> > class stack;', '#include <iostream>', '#include <stack>', 'using namespace std;', 'void newstack(stack <int> ss)', 'stack <int> sg = ss;', 'while (!sg.empty())', ""cout << '\\t' << sg.top();"", 'sg.pop();', ""cout << '\\n';"", 'int main ()', 'stack <int> newst;', 'newst.push(55);', 'newst.push(44);', 'newst.push(33);', 'newst.push(22);', 'newst.push(11);', 'cout << ""The stack newst is : "";', 'newstack(newst);', 'cout << ""\\n newst.size() : "" << newst.size();', 'cout << ""\\n newst.top() : "" << newst.top();', 'cout << ""\\n newst.pop() : "";', 'newst.pop();', 'newstack(newst);', 'return 0;']","['The stack newst is : \t11\t22\t33\t44\t55', 'newst.size() : 5', 'newst.top() : 11', 'newst.pop() : \t22\t33\t44\t55']","['Member Types|||Description&&&value_type|||Element type is specified.&&&container_type|||Underlying container type is specified.&&&size_type|||It specifies the size range of the elements.', 'Function|||Description&&&(constructor)|||The function is used for the construction of a stack container.&&&empty|||The function is used to test for the emptiness of a stack. If the stack is empty the function returns true else false.&&&size|||The function returns the size of the stack container, which is a measure of the number of elements stored in the stack.&&&top|||The function is used to access the top element of the stack. The element plays a very important role as all the insertion and deletion operations are performed at the top element.&&&push|||The function is used for the insertion of a new element at the top of the stack.&&&pop|||The function is used for the deletion of element, the element in the stack is deleted from the top.&&&emplace|||The function is used for insertion of new elements in the stack above the current top element.&&&swap|||The function is used for interchanging the contents of two containers in reference.&&&relational operators|||The non member function specifies the relational operators that are needed for the stacks.&&&uses allocator<stack>|||As the name suggests the non member function uses the allocator for the stacks.']",['|||empty|||size|||back|||push_back|||pop_back|||']
91,['C++ queue'],"[""In computer science we go for working on a large variety of programs. Each of them has their own domain and utility. Based on the purpose and environment of the program creation, we have a large number of data structures available to choose from. One of them is 'queues. Before discussing about this data type let us take a look at its syntax.""]","['https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue-empty-function', 'https://www.javatpoint.com/cpp-queue-size-function', 'https://www.javatpoint.com/cpp-queue-front-function', 'https://www.javatpoint.com/cpp-queue-back-function', 'https://www.javatpoint.com/cpp-queue-push-function', 'https://www.javatpoint.com/cpp-queue-pop-function', 'https://www.javatpoint.com/cpp-queue-emplace-function', 'https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue']",[],[],[],[' Example: A simple program to show the use of basic queue functions.'],[],"['Queues in the application areas are implied as the container adaptors. ', 'The containers should have a support for the following list of operations:', 'T: The argument specifies the type of the element which the container adaptor will be holding.', 'Container: The argument specifies an internal object of container where the elements of the queues are held.', 'Given below is a list of the queue member types with a short description of the same.']","['With the help of functions, an object or variable can be played with in the field of programming. Queues provide a large number of functions that can be used or embedded in the programs. A list of the same is given below:']","[""This data structure works on the FIFO technique, where FIFO stands for First In First Out. The element which was first inserted will be extracted at the first and so on. There is an element called as 'front' which is the element at the front most position or say the first position, also there is an element called as 'rear' which is the element at the last position. In normal queues insertion of elements take at the rear end and the deletion is done from the front. ""]","['template<class T, class Container = deque<T> > class queue;', '#include <iostream>', '#include <queue>', 'using namespace std;', 'void showsg(queue <int> sg)', 'queue <int> ss = sg;', 'while (!ss.empty())', ""cout << '\\t' << ss.front();"", 'ss.pop();', ""cout << '\\n';"", 'int main()', 'queue <int> fquiz;', 'fquiz.push(10);', 'fquiz.push(20);', 'fquiz.push(30);', 'cout << ""The queue fquiz is : "";', 'showsg(fquiz);', 'cout << ""\\nfquiz.size() : "" << fquiz.size();', 'cout << ""\\nfquiz.front() : "" << fquiz.front();', 'cout << ""\\nfquiz.back() : "" << fquiz.back();', 'cout << ""\\nfquiz.pop() : "";', 'fquiz.pop();', 'showsg(fquiz);', 'return 0;']","['The queue fquiz is : \t10\t20\t30', 'fquiz.size() : 3', 'fquiz.front() : 10', 'fquiz.back() : 30', 'fquiz.pop() : \t20\t30']","['Member Types|||Description&&&value_type|||Element type is specified.&&&container_type|||Underlying container type is specified.&&&size_type|||It specifies the size range of the elements.&&&reference|||It is a reference type of a container.&&&const_reference\t|||It is a reference type of a constant container.', 'Function|||Description&&&(constructor)|||The function is used for the construction of a queue container.&&&empty|||The function is used to test for the emptiness of a queue. If the queue is empty the function returns true else false.&&&size|||The function returns the size of the queue container, which is a measure of the number of elements stored in the queue.&&&front|||The function is used to access the front element of the queue. The element plays a very important role as all the deletion operations are performed at the front element.&&&back|||The function is used to access the rear element of the queue. The element plays a very important role as all the insertion operations are performed at the rear element.&&&push|||The function is used for the insertion of a new element at the rear end of the queue.&&&pop|||The function is used for the deletion of element; the element in the queue is deleted from the front end.&&&emplace|||The function is used for insertion of new elements in the queue above the current rear element.&&&swap|||The function is used for interchanging the contents of two containers in reference. &&&relational operators|||The non member function specifies the relational operators that are needed for the queues.&&&uses allocator<queue>|||As the name suggests the non member function uses the allocator for the queues.']",['|||empty|||size|||push_back|||pop_front|||front|||back|||']
92,['Priority Queue in C++'],"['The priority queue in C++ is a derived container in STL that considers only the highest priority element. The queue follows the FIFO policy while priority queue pops the elements based on the priority, i.e., the highest priority element is popped first.']","['https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue', 'https://www.javatpoint.com/cpp-queue']",['https://static.javatpoint.com/cpp/images/priority-queue-in-cpp.png'],[],[],['Syntax of Priority Queue'],['Note: The priority queue is the extended version of a normal queue except that the element with the highest priority will be removed first from the priority queue.'],"['It is similar to the ordinary queue in certain aspects but differs in the following ways:', ""Let's understand the priority queue through a simple example."", ""Let's create a simple program of priority queue."", ""Let's see another example of a priority queue.""]","['In the above code, we have created a priority queue in which we insert three elements, i.e., 10, 30, 20. After inserting the elements, we display all the elements of a priority queue by using a while loop.']","['In the above illustration, we have inserted the elements by using a push() function, and the insert operation is identical to the normal queue. But when we delete the element from the queue by using a pop() function, then the element with the highest priority will be deleted first.', ""In the above code, we have declared two priority queues, i.e., p and q. We inserted four elements in 'p' priority queue and four in 'q' priority queue. After inserting the elements, we swap the elements of 'p' queue with 'q' queue by using a swap() function.""]","['priority_queue<int> variable_name;', '#include <iostream>', '#include<queue>', 'using namespace std;', 'int main()', 'priority_queue<int> p;  // variable declaration.', 'p.push(10); // inserting 10 in a queue, top=10', 'p.push(30); // inserting 30 in a queue, top=30', 'p.push(20); // inserting 20 in a queue, top=20', 'cout<<""Number of elements available in \'p\' :""<<p.size()<<endl;', 'while(!p.empty())', 'std::cout << p.top() << std::endl;', 'p.pop();', 'return 0;', '#include <iostream>', '#include<queue>', 'using namespace std;', 'int main()', 'priority_queue<int> p;  // priority queue declaration', 'priority_queue<int> q;  // priority queue declaration', ""p.push(1); // inserting element '1' in p."", ""p.push(2); // inserting element '2' in p."", ""p.push(3); // inserting element '3' in p."", ""p.push(4); // inserting element '4' in p."", ""q.push(5); // inserting element '5' in q."", ""q.push(6); // inserting element '6' in q."", ""q.push(7); // inserting element '7' in q."", ""q.push(8); // inserting element '8' in q."", 'p.swap(q);', 'std::cout << ""Elements of p are : "" << std::endl;', 'while(!p.empty())', 'std::cout << p.top() << std::endl;', 'p.pop();', 'std::cout << ""Elements of q are :"" << std::endl;', 'while(!q.empty())', 'std::cout << q.top() << std::endl;', 'q.pop();', 'return 0;']","[""Number of elements available in 'p' :3"", '30', '20', '10 zzzzz/', 'Elements of p are :', '8', '7', '6', '5', 'Elements of q are :', '4', '3', '2', '1']","['Function|||Description&&&push()|||It inserts a new element in a priority queue.&&&pop()|||It removes the top element from the queue, which has the highest priority.&&&top()|||This function is used to address the topmost element of a priority queue.&&&size()|||It determines the size of a priority queue.&&&empty()|||It verifies whether the queue is empty or not. Based on the verification, it returns the status.&&&swap()|||It swaps the elements of a priority queue with another queue having the same type and size.&&&emplace()|||It inserts a new element at the top of the priority queue.']","['|||In a priority queue, every element in the queue is associated with some priority, but priority does not exist in a queue data structure.|||The element with the highest priority in a priority queue will be removed first while queue follows the FIFO(First-In-First-Out) policy means the element which is inserted first will be deleted first.|||If more than one element exists with the same priority, then the order of the element in a queue will be taken into consideration.|||']"
93,['C++ map function'],"['Maps are part of the C++ STL (Standard Template Library). Maps are the associative containers that store sorted key-value pair, in which each key is unique and it can be inserted or deleted but cannot be altered. Values associated with keys can be changed.']","['https://www.javatpoint.com/cpp-map', 'https://www.javatpoint.com/cpp-map', 'https://www.javatpoint.com/cpp-map-operator=()-function', 'https://www.javatpoint.com/cpp-map-begin-function', 'https://www.javatpoint.com/cpp-map-cbegin-function', 'https://www.javatpoint.com/cpp-map-end-function', 'https://www.javatpoint.com/cpp-map-cend-function', 'https://www.javatpoint.com/cpp-map-rbegin-function', 'https://www.javatpoint.com/cpp-map-rend-function', 'https://www.javatpoint.com/cpp-map-crbegin-function', 'https://www.javatpoint.com/cpp-map-crend-function', 'https://www.javatpoint.com/cpp-map-empty-function', 'https://www.javatpoint.com/cpp-map-size-function', 'https://www.javatpoint.com/cpp-map-max_size-function', 'https://www.javatpoint.com/cpp-map-operator[]-function', 'https://www.javatpoint.com/cpp-map-at-function', 'https://www.javatpoint.com/cpp-map-insert-function', 'https://www.javatpoint.com/cpp-map-erase-function', 'https://www.javatpoint.com/cpp-map-swap-function', 'https://www.javatpoint.com/cpp-map-clear-function', 'https://www.javatpoint.com/cpp-map-emplace-function', 'https://www.javatpoint.com/cpp-map-emplace_hint-function', 'https://www.javatpoint.com/cpp-map-find-function', 'https://www.javatpoint.com/cpp-map-swap-function', 'https://www.javatpoint.com/cpp-map', 'https://www.javatpoint.com/cpp-map', 'https://www.javatpoint.com/cpp-map']",[],[],"['Syntax', 'Member Functions']","['Constructor/Destructor', 'Iterators', 'Capacity', 'Element Access', 'Modifiers', 'Observers', 'Operations', 'Allocator', 'Non-Member Overloaded Functions']",[],"['For example: A map of Employees where employee ID is the key and name is the value can be represented as:', 'key: The key data type to be stored in the map.', 'type: The data type of value to be stored in the map.', 'alloc: Type of the allocator object. This argument is optional and the default value is allocator .', 'Maps can easily be created using the following statement:', 'Below is the list of all member functions of map:']","['compare: A comparison class that takes two arguments of the same type bool and returns a value. This argument is optional and the binary predicate less<""key""> is the default value.', 'The above form will use to create a map with key of type Key type and value of type value type. One important thing is that key of a map and corresponding values are always inserted as a pair, you cannot insert only key or just a value in a map.']",[],"['template < class Key,                                             // map::key_type', 'class T,                                                     // map::mapped_type', 'class Compare = less,                        // map::key_compare', 'class Alloc = allocator >    // map::allocator_type', '> class map;', 'typedef pair value_type;', '#include', '#include', '#include', '#include', 'using namespace std;', 'int main()', 'map Employees;', 'Employees[101] = ""Nikita"";', 'Employees[105] = ""John"";', 'Employees[103] = ""Dolly"";', 'Employees[104] = ""Deep"";', 'Employees[102] = ""Aman"";', 'cout << ""Employees[104]="" << Employees[104] << endl << endl;', 'cout << ""Map size: "" << Employees.size() << endl;', 'cout << endl << ""Natural Order:"" << endl;', 'for( map::iterator ii=Employees.begin(); ii!=Employees.end(); ++ii)', 'cout << (*ii).first << "": "" << (*ii).second << endl;', 'cout << endl << ""Reverse Order:"" << endl;', 'for( map::reverse_iterator ii=Employees.rbegin(); ii!=Employees.rend(); ++ii)', 'cout << (*ii).first << "": "" << (*ii).second << endl;']","['Employees[104]=Deep', 'Map size: 5', 'Natural Order:', '101: Nikita', '102: Aman', '103: Dolly', '104: Deep', '105: John', 'Reverse Order:', '105: John', '104: Deep', '103: Dolly', '102: Aman', '101: Nikita']","['Keys|||Values&&&101|||Nikita&&&102|||Robin&&&103|||Deep&&&104|||John', 'Functions|||Description&&&constructors|||Construct map&&&destructors|||Map destructor&&&operator=|||Copy elements of the map to another map.', 'Functions|||Description&&&begin|||Returns an iterator pointing to the first element in the map.&&&cbegin|||Returns a const iterator pointing to the first element in the map.&&&end|||Returns an iterator pointing to the past-end.&&&cend|||Returns a constant iterator pointing to the past-end.&&&rbegin|||Returns a reverse iterator pointing to the end.&&&rend|||Returns a reverse iterator pointing to the beginning.&&&crbegin|||Returns a constant reverse iterator pointing to the end.&&&crend|||Returns a constant reverse iterator pointing to the beginning.', 'Functions|||Description&&&empty|||Returns true if map is empty.&&&size|||Returns the number of elements in the map.&&&max_size|||Returns the maximum size of the map.', 'Functions|||Description&&&operator[]|||Retrieve the element with given key.&&&at|||Retrieve the element with given key.', 'Functions|||Description&&&insert|||Insert element in the map.&&&erase|||Erase elements from the map.&&&swap|||Exchange the content of the map.&&&clear|||Delete all the elements of the map.&&&emplace|||Construct and insert the new elements into the map.&&&emplace_hint|||Construct and insert new elements into the map by hint.', 'Functions|||Description&&&key_comp|||Return a copy of key comparison object.&&&value_comp|||Return a copy of value comparison object.', 'Functions|||Description&&&find|||Search for an element with given key.&&&count|||Gets the number of elements matching with given key.&&&lower_bound|||Returns an iterator to lower bound.&&&upper_bound|||Returns an iterator to upper bound.&&&equal_range|||Returns the range of elements matches with given key.', 'Functions|||Description&&&get_allocator|||Returns an allocator object that is used to construct the map.', 'Functions|||Description&&&operator==|||Checks whether the two maps are equal or not.&&&operator!=|||Checks whether the two maps are equal or not.&&&operator<|||Checks whether the first map is less than other or not.&&&operator<=|||Checks whether the first map is less than or equal to other or not.&&&operator>|||Checks whether the first map is greater than other or not.&&&operator>=|||Checks whether the first map is greater than equal to other or not.&&&swap()|||Exchanges the element of two maps.']",[]
94,['C++ multimap'],"['Multimaps are part of the C++ STL (Standard Template Library). Multimaps are the associative containers like map that stores sorted key-value pair, but unlike maps which store only unique keys, multimap can have duplicate keys. By default it uses < operator to compare the keys.']","['https://www.javatpoint.com/cpp-multimap', 'https://www.javatpoint.com/cpp-multimap', 'https://www.javatpoint.com/cpp-multimap-begin-function', 'https://www.javatpoint.com/cpp-multimap-cbegin-function', 'https://www.javatpoint.com/cpp-multimap-end-function', 'https://www.javatpoint.com/cpp-multimap-cend-function', 'https://www.javatpoint.com/cpp-multimap-rbegin-function', 'https://www.javatpoint.com/cpp-multimap-rend-function', 'https://www.javatpoint.com/cpp-multimap-crbegin-function', 'https://www.javatpoint.com/cpp-multimap-crend-function', 'https://www.javatpoint.com/cpp-multimap-empty-function', 'https://www.javatpoint.com/cpp-multimap-insert-function', 'https://www.javatpoint.com/cpp-multimap-erase-function', 'https://www.javatpoint.com/cpp-multimap-swap-function', 'https://www.javatpoint.com/cpp-multimap-clear-function', 'https://www.javatpoint.com/cpp-multimap-emplace-function', 'https://www.javatpoint.com/cpp-multimap-equal_range-function', 'https://www.javatpoint.com/cpp-multimap-non-member-operator==-function', 'https://www.javatpoint.com/cpp-multimap-non-member-operator!=-function', 'https://www.javatpoint.com/cpp-multimap-non-member-operator<-function', 'https://www.javatpoint.com/cpp-multimap-non-member-operator<=-function', 'https://www.javatpoint.com/cpp-multimap-non-member-operator>-function', 'https://www.javatpoint.com/cpp-multimap-non-member-operator>=-function', 'https://www.javatpoint.com/cpp-multimap-non-member-swap-function', 'https://www.javatpoint.com/cpp-multimap', 'https://www.javatpoint.com/cpp-multimap', 'https://www.javatpoint.com/cpp-multimap']",[],[],"['Member Functions', 'Non-Member Overloaded Functions']","['Constructor/Destructor', 'Iterators', 'Capacity', 'Modifiers', 'Observers', 'Operations', 'Allocator']",[],"['For example: A multimap of Employees where employee age is the key and name is the value can be represented as:', 'Multimap employee has duplicate keys age.', 'key: The key data type to be stored in the multimap.', 'type: The data type of value to be stored in the multimap.', 'alloc: Type of the allocator object. This argument is optional and the default value is allocator .', 'Multimaps can easily be created using the following statement:', 'Below is the list of all member functions of multimap:']","['compare: A comparison class that takes two arguments of the same type bool and returns a value. This argument is optional and the binary predicate less<""key""> is the default value.']","['The above form will use to create a multimap with key of type Key_type and value of type value_type. One important thing is that key of a multimap and corresponding values are always inserted as a pair, you cannot insert only key or just a value in a multimap.']","['template < class Key,                                     // multimap::key_type', 'class T,                                                     // multimap::mapped_type', 'class Compare = less,                        // multimap::key_compare', 'class Alloc = allocator >    // multimap::allocator_type', '> class multimap;', 'typedef pair value_type;', '#include', '#include', '#include', 'using namespace std;', 'int main()', 'multimap m = {', '{""India"",""New Delhi""},', '{""India"", ""Hyderabad""},', '{""United Kingdom"", ""London""},', '{""United States"", ""Washington D.C""}', 'cout << ""Size of map m: "" << m.size() <::iterator it = m.begin(); it != m.end(); ++it)', 'cout << ""  ["" << (*it).first << "", "" << (*it).second << ""]"" << endl;', 'return 0;']","['Size of map m: 4', 'Elements in m:', '[India, New Delhi]', '[India, Hyderabad]', '[United Kingdom, London]', '[United States, Washington D.C]']","['Keys|||Values&&&23|||Nikita&&&28|||Robin&&&25|||Deep&&&25|||Aman', 'Functions|||Description&&&constructor|||Construct multimap&&&destructor|||Multimap destructor&&&operator=|||Copy elements of the multimap to another multimap.', 'Functions|||Description&&&begin|||Returns an iterator pointing to the first element in the multimap.&&&cbegin|||Returns a const_iterator pointing to the first element in the multimap.&&&end|||Returns an iterator pointing to the past-end.&&&cend|||Returns a constant iterator pointing to the past-end.&&&rbegin|||Returns a reverse iterator pointing to the end.&&&rend|||Returns a reverse iterator pointing to the beginning.&&&crbegin|||Returns a constant reverse iterator pointing to the end.&&&crend|||Returns a constant reverse iterator pointing to the beginning.', 'Functions|||Description&&&empty|||Return true if multimap is empty.&&&size|||Returns the number of elements in the multimap.&&&max_size|||Returns the maximum size of the multimap.', 'Functions|||Description&&&insert|||Insert element in the multimap.&&&erase|||Erase elements from the multimap.&&&swap|||Exchange the content of the multimap.&&&clear|||Delete all the elements of the multimap.&&&emplace|||Construct and insert the new elements into the multimap.&&&emplace_hint|||Construct and insert new elements into the multimap by hint.', 'Functions|||Description&&&key_comp|||Return a copy of key comparison object.&&&value_comp|||Return a copy of value comparison object.', 'Functions|||Description&&&find|||Search for an element with given key.&&&count|||Gets the number of elements matching with given key.&&&lower_bound|||Returns an iterator to lower bound.&&&upper_bound|||Returns an iterator to upper bound.&&&equal_range()|||Returns the range of elements matches with given key.', 'Functions|||Description&&&get_allocator|||Returns an allocator object that is used to construct the multimap.', 'Functions|||Description&&&operator==|||Checks whether the two multimaps are equal or not.&&&operator!=|||Checks whether the two multimaps are equal or not.&&&operator<|||Checks whether the first multimap is less than other or not.&&&operator<=|||Checks whether the first multimap is less than or equal to other or not.&&&operator>|||Checks whether the first multimap is greater than other or not.&&&operator>=|||Checks whether the first multimap is greater than equal to other or not.&&&swap()|||Exchanges the element of two multimaps.']",[]
95,['C++ map function'],"['Maps are part of the C++ STL (Standard Template Library). Maps are the associative containers that store sorted key-value pair, in which each key is unique and it can be inserted or deleted but cannot be altered. Values associated with keys can be changed.']","['https://www.javatpoint.com/cpp-map', 'https://www.javatpoint.com/cpp-map', 'https://www.javatpoint.com/cpp-map-operator=()-function', 'https://www.javatpoint.com/cpp-map-begin-function', 'https://www.javatpoint.com/cpp-map-cbegin-function', 'https://www.javatpoint.com/cpp-map-end-function', 'https://www.javatpoint.com/cpp-map-cend-function', 'https://www.javatpoint.com/cpp-map-rbegin-function', 'https://www.javatpoint.com/cpp-map-rend-function', 'https://www.javatpoint.com/cpp-map-crbegin-function', 'https://www.javatpoint.com/cpp-map-crend-function', 'https://www.javatpoint.com/cpp-map-empty-function', 'https://www.javatpoint.com/cpp-map-size-function', 'https://www.javatpoint.com/cpp-map-max_size-function', 'https://www.javatpoint.com/cpp-map-operator[]-function', 'https://www.javatpoint.com/cpp-map-at-function', 'https://www.javatpoint.com/cpp-map-insert-function', 'https://www.javatpoint.com/cpp-map-erase-function', 'https://www.javatpoint.com/cpp-map-swap-function', 'https://www.javatpoint.com/cpp-map-clear-function', 'https://www.javatpoint.com/cpp-map-emplace-function', 'https://www.javatpoint.com/cpp-map-emplace_hint-function', 'https://www.javatpoint.com/cpp-map-find-function', 'https://www.javatpoint.com/cpp-map-swap-function', 'https://www.javatpoint.com/cpp-map', 'https://www.javatpoint.com/cpp-map', 'https://www.javatpoint.com/cpp-map']",[],[],"['Syntax', 'Member Functions']","['Constructor/Destructor', 'Iterators', 'Capacity', 'Element Access', 'Modifiers', 'Observers', 'Operations', 'Allocator', 'Non-Member Overloaded Functions']",[],"['For example: A map of Employees where employee ID is the key and name is the value can be represented as:', 'key: The key data type to be stored in the map.', 'type: The data type of value to be stored in the map.', 'alloc: Type of the allocator object. This argument is optional and the default value is allocator .', 'Maps can easily be created using the following statement:', 'Below is the list of all member functions of map:']","['compare: A comparison class that takes two arguments of the same type bool and returns a value. This argument is optional and the binary predicate less<""key""> is the default value.', 'The above form will use to create a map with key of type Key type and value of type value type. One important thing is that key of a map and corresponding values are always inserted as a pair, you cannot insert only key or just a value in a map.']",[],"['template < class Key,                                             // map::key_type', 'class T,                                                     // map::mapped_type', 'class Compare = less,                        // map::key_compare', 'class Alloc = allocator >    // map::allocator_type', '> class map;', 'typedef pair value_type;', '#include', '#include', '#include', '#include', 'using namespace std;', 'int main()', 'map Employees;', 'Employees[101] = ""Nikita"";', 'Employees[105] = ""John"";', 'Employees[103] = ""Dolly"";', 'Employees[104] = ""Deep"";', 'Employees[102] = ""Aman"";', 'cout << ""Employees[104]="" << Employees[104] << endl << endl;', 'cout << ""Map size: "" << Employees.size() << endl;', 'cout << endl << ""Natural Order:"" << endl;', 'for( map::iterator ii=Employees.begin(); ii!=Employees.end(); ++ii)', 'cout << (*ii).first << "": "" << (*ii).second << endl;', 'cout << endl << ""Reverse Order:"" << endl;', 'for( map::reverse_iterator ii=Employees.rbegin(); ii!=Employees.rend(); ++ii)', 'cout << (*ii).first << "": "" << (*ii).second << endl;']","['Employees[104]=Deep', 'Map size: 5', 'Natural Order:', '101: Nikita', '102: Aman', '103: Dolly', '104: Deep', '105: John', 'Reverse Order:', '105: John', '104: Deep', '103: Dolly', '102: Aman', '101: Nikita']","['Keys|||Values&&&101|||Nikita&&&102|||Robin&&&103|||Deep&&&104|||John', 'Functions|||Description&&&constructors|||Construct map&&&destructors|||Map destructor&&&operator=|||Copy elements of the map to another map.', 'Functions|||Description&&&begin|||Returns an iterator pointing to the first element in the map.&&&cbegin|||Returns a const iterator pointing to the first element in the map.&&&end|||Returns an iterator pointing to the past-end.&&&cend|||Returns a constant iterator pointing to the past-end.&&&rbegin|||Returns a reverse iterator pointing to the end.&&&rend|||Returns a reverse iterator pointing to the beginning.&&&crbegin|||Returns a constant reverse iterator pointing to the end.&&&crend|||Returns a constant reverse iterator pointing to the beginning.', 'Functions|||Description&&&empty|||Returns true if map is empty.&&&size|||Returns the number of elements in the map.&&&max_size|||Returns the maximum size of the map.', 'Functions|||Description&&&operator[]|||Retrieve the element with given key.&&&at|||Retrieve the element with given key.', 'Functions|||Description&&&insert|||Insert element in the map.&&&erase|||Erase elements from the map.&&&swap|||Exchange the content of the map.&&&clear|||Delete all the elements of the map.&&&emplace|||Construct and insert the new elements into the map.&&&emplace_hint|||Construct and insert new elements into the map by hint.', 'Functions|||Description&&&key_comp|||Return a copy of key comparison object.&&&value_comp|||Return a copy of value comparison object.', 'Functions|||Description&&&find|||Search for an element with given key.&&&count|||Gets the number of elements matching with given key.&&&lower_bound|||Returns an iterator to lower bound.&&&upper_bound|||Returns an iterator to upper bound.&&&equal_range|||Returns the range of elements matches with given key.', 'Functions|||Description&&&get_allocator|||Returns an allocator object that is used to construct the map.', 'Functions|||Description&&&operator==|||Checks whether the two maps are equal or not.&&&operator!=|||Checks whether the two maps are equal or not.&&&operator<|||Checks whether the first map is less than other or not.&&&operator<=|||Checks whether the first map is less than or equal to other or not.&&&operator>|||Checks whether the first map is greater than other or not.&&&operator>=|||Checks whether the first map is greater than equal to other or not.&&&swap()|||Exchanges the element of two maps.']",[]
96,[],['The various C++ bitset functions are as follows:'],"['https://www.javatpoint.com/cpp-bitset', 'https://www.javatpoint.com/cpp-bitset', 'https://www.javatpoint.com/cpp-bitset-all-function', 'https://www.javatpoint.com/cpp-bitset-any-function', 'https://www.javatpoint.com/cpp-bitset-count-function', 'https://www.javatpoint.com/cpp-bitset-flip-function', 'https://www.javatpoint.com/cpp-bitset-none-function', 'https://www.javatpoint.com/cpp-bitset-operator[]-function', 'https://www.javatpoint.com/cpp-bitset-reset-function', 'https://www.javatpoint.com/cpp-bitset-set-function', 'https://www.javatpoint.com/cpp-bitset-size-function', 'https://www.javatpoint.com/cpp-bitset-test-function', 'https://www.javatpoint.com/cpp-bitset-to_string-function', 'https://www.javatpoint.com/cpp-bitset-to_ullong-function', 'https://www.javatpoint.com/cpp-bitset-to_ulong()-function', 'https://www.javatpoint.com/cpp-bitset', 'https://www.javatpoint.com/cpp-bitset', 'https://www.javatpoint.com/cpp-bitset']",[],[],['C++ bitset Functions'],[],[],[],[],[],[],[],['Function&&&all()&&&any()&&&count()&&&flip()&&&none()&&&operator[]&&&reset()&&&set()&&&size()&&&test()&&&to_string()&&&to_ullong()&&&to_ulong()()'],[]
97,['C++ Algorithm Functions'],"[""The library defines a large number of functions that are specially suited to be used on a large number of elements at a time or say a range. Now let's straightway take a look at these functions.""]","['https://www.javatpoint.com/cpp-algorithm-adjacent_find-function', 'https://www.javatpoint.com/cpp-algorithm-all_of-function', 'https://www.javatpoint.com/cpp-algorithm-any_of-function', 'https://www.javatpoint.com/cpp-algorithm-none_of-function', 'https://www.javatpoint.com/cpp-algorithm-for_each-function', 'https://www.javatpoint.com/cpp-algorithm-find-function', 'https://www.javatpoint.com/cpp-algorithm-find_if-function', 'https://www.javatpoint.com/cpp-algorithm-find_if_not-function', 'https://www.javatpoint.com/cpp-algorithm-find_end-function', 'https://www.javatpoint.com/cpp-algorithm-find_first_of-function', 'https://www.javatpoint.com/cpp-algorithm-adjacent_find-function', 'https://www.javatpoint.com/cpp-algorithm-count-function', 'https://www.javatpoint.com/cpp-algorithm-count_if-function', 'https://www.javatpoint.com/cpp-algorithm-mismatch-function', 'https://www.javatpoint.com/cpp-algorithm-equal-function', 'https://www.javatpoint.com/cpp-algorithm-is_permutation-function', 'https://www.javatpoint.com/cpp-algorithm-search-function', 'https://www.javatpoint.com/cpp-algorithm-search_n-function', 'https://www.javatpoint.com/cpp-algorithm-copy-function', 'https://www.javatpoint.com/cpp-algorithm-copy_n-function', 'https://www.javatpoint.com/cpp-algorithm-copy_if-function', 'https://www.javatpoint.com/cpp-algorithm-copy_backward-function', 'https://www.javatpoint.com/cpp-algorithm-move-function', 'https://www.javatpoint.com/cpp-algorithm-move_backward-function', 'https://www.javatpoint.com/cpp-algorithm-swap-function', 'https://www.javatpoint.com/cpp-algorithm-swap_ranges-function', 'https://www.javatpoint.com/cpp-algorithm-iter_swap-function', 'https://www.javatpoint.com/cpp-algorithm-transform-function', 'https://www.javatpoint.com/cpp-algorithm-replace-function', 'https://www.javatpoint.com/cpp-algorithm-replace_if-function', 'https://www.javatpoint.com/cpp-algorithm-replace_copy-function', 'https://www.javatpoint.com/cpp-algorithm-replace_copy_if-function', 'https://www.javatpoint.com/cpp-algorithm-fill-function', 'https://www.javatpoint.com/cpp-algorithm-fill_n-function', 'https://www.javatpoint.com/cpp-algorithm-generate-function', 'https://www.javatpoint.com/cpp-algorithm-generate_n-function', 'https://www.javatpoint.com/cpp-algorithm-remove-function', 'https://www.javatpoint.com/cpp-algorithm-remove_if-function', 'https://www.javatpoint.com/cpp-algorithm-remove_copy-function', 'https://www.javatpoint.com/cpp-algorithm-remove_copy_if-function', 'https://www.javatpoint.com/cpp-algorithm-unique-function', 'https://www.javatpoint.com/cpp-algorithm-unique_copy-function', 'https://www.javatpoint.com/cpp-algorithm-reverse-function', 'https://www.javatpoint.com/cpp-algorithm-reverse_copy-function', 'https://www.javatpoint.com/cpp-algorithm-rotate-function', 'https://www.javatpoint.com/cpp-algorithm-rotate_copy-function', 'https://www.javatpoint.com/cpp-algorithm-random_shuffle-function', 'https://www.javatpoint.com/cpp-algorithm-shuffle-function', 'https://www.javatpoint.com/cpp-algorithm-is_partitioned-function', 'https://www.javatpoint.com/cpp-algorithm-partition-function', 'https://www.javatpoint.com/cpp-algorithm-stable_partition-function', 'https://www.javatpoint.com/cpp-algorithm-partition_copy-function', 'https://www.javatpoint.com/cpp-algorithm-partition_point-function', 'https://www.javatpoint.com/cpp-algorithm-sort-function', 'https://www.javatpoint.com/cpp-algorithm-stable_sort-function', 'https://www.javatpoint.com/cpp-algorithm-partial_sort-function', 'https://www.javatpoint.com/cpp-algorithm-partial_sort_copy-function', 'https://www.javatpoint.com/cpp-algorithm-is_sorted-function', 'https://www.javatpoint.com/cpp-algorithm-is_sorted_until-function', 'https://www.javatpoint.com/cpp-algorithm-nth_element-function', 'https://www.javatpoint.com/cpp-algorithm-lower_bound-function', 'https://www.javatpoint.com/cpp-algorithm-upper_bound-function', 'https://www.javatpoint.com/cpp-algorithm-equal_range-function', 'https://www.javatpoint.com/cpp-algorithm-binary_search-function', 'https://www.javatpoint.com/cpp-algorithm-merge-function', 'https://www.javatpoint.com/cpp-algorithm-inplace_merge-function', 'https://www.javatpoint.com/cpp-algorithm-includes-function', 'https://www.javatpoint.com/cpp-algorithm-set_union-function', 'https://www.javatpoint.com/cpp-algorithm-adjacent_find-function', 'https://www.javatpoint.com/cpp-algorithm-adjacent_find-function']",[],[],[],[],[],[],[],[],[],[],"['Function|||Description&&&all_of|||The following function tests a condition to all the elements of the range.&&&any_of|||The following function tests a condition to some or any of the elements of the range&&&none_of|||The following function checks if none of the elements follow the condition or not.&&&for_each|||The function applies an operation to all the elements of the range.&&&find|||The function finds a value in the range.&&&find_if|||The function finds for an element in the range.&&&find_if_not|||The function finds an element in the range but in the opposite way as the above one.&&&find_end|||The function is used to return the last element of the range.&&&find_first_of|||The function finds for the element that satisfies a condition and occurs at the first.&&&adjacent_find|||The function makes a search for finding the equal and adjacent elements in a range.&&&count|||The function returns the count of a value in the range.&&&count_if|||The function returns the count of values that satisfies a condition.&&&mismatch|||The function returns the value in sequence which is the first mismatch.&&&equal|||The function is used to check if the two ranges have all elements equal.&&&is_permutation|||The function checks whether the range in reference is a permutation of some other range.&&&search|||The function searches for the subsequence in a range.&&&search_n|||The function searches the range for the occurrence of an element.', 'Function|||Description&&&copy|||The function copies the range of elements.&&&copy_n|||The function copies n elements of the range&&&copy_if|||The function copies the elements of the range if a certain condition is fulfilled.&&&copy_backward|||The function copies the elements in a backward order&&&move|||The function moves the ranges of elements.&&&move_backward|||The function moves the range of elements in the backward order&&&swap|||The function swaps the value of two objects.&&&swap_ranges|||The function swaps the value of two ranges.&&&iter_swap|||The function swaps the values of two iterators under reference. &&&transform|||The function transforms all the values in a range.&&&replace|||The function replaces the values in the range with a specific value.&&&replace_if|||The function replaces the value of the range if a certain condition is fulfilled.&&&replace_copy|||The function copies the range of values by replacing with an element.&&&replace_copy_if|||The function copies the range of values by replacing with an element if a certain condition is fulfilled.&&&fill|||The function fills the values in the range with a value.&&&fill_n|||The function fills the values in the sequence.&&&generate|||The function is used for the generation of values of the range.&&&generate_n|||The function is used for the generation of values of the sequence.&&&remove|||The function removes the values from the range.&&&remove_if|||The function removes the values of the range if a condition is fulfilled.&&&remove_copy|||The function copies the values of the range by removing them.&&&remove_copy_if|||The function copies the values of the range by removing them if a condition is fulfilled.&&&unique|||The function identifies the unique element of the range.&&&unique_copy|||The function copies the unique elements of the range.&&&reverse|||The function reverses the range.&&&reverse_copy|||The function copies the range by reversing values.&&&rotate|||The function rotates the elements of the range in left direction.&&&rotate_copy|||The function copies the elements of the range which is rotated left.&&&random_shuffle|||The function shuffles the range randomly.&&&shuffle|||The function shuffles the range randomly with the help of a generator.', 'Function|||Description&&&is_partitioned|||The function is used to deduce whether the range is partitioned or not.&&&partition|||The function is used to partition the range.&&&stable_partition|||The function partitions the range in two stable halves.&&&partition_copy|||The function copies the range after partition.&&&partition_point|||The function returns the partition point for a range.', 'Function|||Description&&&sort|||The function sorts all the elements in a range.&&&stable_sort|||The function sorts the elements in the range maintaining the relative equivalent order.&&&partial_sort|||The function partially sorts the elements of the range.&&&partial_sort_copy|||The function copies the elements of the range after sorting it.&&&is_sorted|||The function checks whether the range is sorted or not.&&&is_sorted_until|||The function checks till which element a range is sorted.&&&nth_element|||The functions sorts the elements in the range.', 'Function|||Description&&&lower_bound|||Returns the lower bound element of the range.&&&upper_bound|||Returns the upper bound element of the range.&&&equal_range|||The function returns the subrange for the equal elements.&&&binary_search|||The function tests if the values in the range exists in a sorted sequence or not.', 'Function|||Description&&&merge|||The function merges two ranges that are in a sorted order.&&&inplace_merge|||The function merges two consecutive ranges that are sorted.&&&includes|||The function searches whether the sorted range includes another range or not.&&&set_union|||The function returns the union of two ranges that is sorted.&&&set_intersection|||The function returns the intersection of two ranges that is sorted.&&&set_difference|||The function returns the difference of two ranges that is sorted.&&&set_symmetric_difference|||The function returns the symmetric difference of two ranges that is sorted.', 'Function|||Description&&&push_heap|||The function pushes new elements in the heap.&&&pop_heap|||The function pops new elements in the heap.&&&make_heap|||The function is used for the creation of a heap.&&&sort_heap|||The function sorts the heap.&&&is_heap|||The function checks whether the range is a heap.&&&is_heap_until|||The function checks till which position a range is a heap.', 'Function|||Description', 'Function|||Description&&&next_permutation|||The function is used for the transformation of range into the next permutation.&&&perv_permutation|||The function is used for the transformation of range into the previous permutation.']",[]
98,['C++ Iterators'],['Iterators are just like pointers used to access the container elements.'],"['https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-tutorial']","['https://static.javatpoint.com/cpp/images/cpp-iterators.png', 'https://static.javatpoint.com/cpp/images/cpp-iterators2.png', 'https://static.javatpoint.com/cpp/images/cpp-iterators3.png']",[],"['Important Points:', 'Operations Performed on the Iterators:', 'Iterator Categories', 'Providers Of Iterators', 'Iterators and their Characteristics', 'Disadvantages of iterator', 'Advantages of iterator', 'Difference b/w Random Access Iterator and Other Iterators']",[],[],"['The container classes provide two basic member functions that allow to iterate or move through the elements of a container:', ""Let's see a simple example:"", 'An iterator can be categorized in the following ways:', 'Input Iterator: An input iterator is an iterator used to access the elements from the container, but it does not modify the value of a container.', 'Operators used for an input iterator are:', 'Operators used for an output iterator are:', 'Forward Iterator: A forward iterator is an iterator used to read and write to a container. It is a multi-pass iterator.', 'Operators used for a Forward iterator are:', 'Operators used for a Bidirectional iterator are:', 'Following are the advantages of an iterator:', ""Let's see a simple example:"", ""Let's see a simple example:"", 'In the above example, we insert a new element at the second position by using insert() function and all other elements are shifted by one.']","['Iterators can be smart pointers which allow to iterate over the complex data structures. A Container provides its iterator type. Therefore, we can say that the iterators have the common interface with different container type.', 'Output Iterator: An output iterator is an iterator used to modify the value of a container, but it does not read the value from a container. Therefore, we can say that an output iterator is a write-only iterator.', 'Bidirectional iterator: A bidirectional iterator is an iterator supports all the features of a forward iterator plus it adds one more feature, i.e., decrement operator(--). We can move backward by decrementing an iterator.', 'In the above example, we observe that if we traverse the elements of a vector without using an iterator, then we need to keep track of the number of elements added in the container.', ""The most important difference between the Random access iterator and other iterators is that random access iterator requires '1' step to access an element while other iterators require 'n' steps.""]","['Random Access Iterator: A Random Access iterator is an iterator provides random access of an element at an arbitrary location. It has all the features of a bidirectional iterator plus it adds one more feature, i.e., pointer addition and pointer subtraction to provide random access to an element.']","['<ContainerType> :: iterator;', '<ContainerType> :: const_iterator;', '#include <iostream>', '#include<iterator>', '#include<vector>', 'using namespace std;', 'int main()', 'std::vector<int> v{1,2,3,4,5};', 'vector<int>::iterator itr;', 'for(itr=v.begin();itr!=v.end();itr++)', 'std::cout << *itr <<"" "";', 'return 0;', '#include <iostream>', '#include<vector>', '#include<iterator>', 'using namespace std;', 'int main()', 'vector<int> v{1,2,3,4,5};', 'vector<int>::iterator itr;', 'for(int i=0;i<5;i++)           // Traversal without using an iterator.', 'cout<<v[i]<<"" "";', ""cout<<'\\n';"", 'for(itr=v.begin();itr!=v.end();itr++)  // Traversal by using an iterator.', 'cout<<*itr<<"" "";', 'v.push_back(10);', ""cout<<'\\n';"", 'for(int i=0;i<6;i++)', 'cout<<v[i]<<"" "";', ""cout<<'\\n';"", 'for(itr=v.begin();itr!=v.end();itr++)', 'cout<<*itr<<"" "";', 'return 0;', '#include <iostream>', '#include<vector>', '#include<iterator>', 'using namespace std;', 'int main()', 'vector<int> v{1,2,3,4,5};  // vector declaration', 'vector<int>::iterator itr;', 'v.insert(v.begin()+1,10);', 'for(itr=v.begin();itr!=v.end();itr++)', 'cout<<*itr<<"" "";', 'return 0;']","['1 2 3 4 5', '1 2 3 4 5', '1 2 3 4 5', '1 2 3 4 5 10', '1 2 3 4 5 10', '1 10 2 3 4 5']","['Iterator categories|||Provider&&&Input iterator|||istream&&&Output iterator|||ostream&&&Forward iterator|||&&&Bidirectional iterator|||List, set, multiset, map, multimap&&&Random access iterator|||Vector, deque, array', 'Iterator|||Access method|||Direction of movement|||I/O capability&&&Input|||Linear|||Forward only|||Read-only&&&Output|||Linear|||Forward only|||Write-only&&&Forward|||Linear|||Forward only|||Read/Write&&&Bidirectional|||Linear|||Forward & backward|||Read/Write&&&Random|||Random|||Forward & backward|||Read/Write']","[""|||Iterators are used to traverse from one element to another element, a process is known as iterating through the container. |||The main advantage of an iterator is to provide a common interface for all the containers type.|||Iterators make the algorithm independent of the type of the container used.|||Iterators provide a generic approach to navigate through the elements of a container.||||||Operator (*) : The '*' operator returns the element of the current position pointed by the iterator.|||Operator (++) : The '++' operator increments the iterator by one. Therefore, an iterator points to the next element of the container.|||Operator (==) and Operator (!=) : Both these operators determine whether the two iterators point to the same position or not.|||Operator (=) : The '=' operator assigns the iterator.||||||begin(): The begin() function returns an iterator pointing to the first element of the container.|||end(): The end() function returns an iterator pointing to the past-the-last element of the container.||||||Input Iterator|||Output Iterator|||Forward Iterator|||Bidirectional Iterator|||Random Access Iterator||||||Increment operator(++)|||Equal operator(==)|||Not equal operator(!=)|||Dereference operator(*)||||||Increment operator(++)|||Assignment operator(=)||||||Increment operator(++)|||Assignment operator(=)|||Equal operator(=)|||Not equal operator(!=)||||||Increment operator(++)|||Assignment operator(=)|||Equal operator(=)|||Not equal operator(!=)|||Decrement operator(--)||||||If we want to move from one data structure to another at the same time, iterators won't work.|||If we want to update the structure which is being iterated, an iterator won?t allow us to do because of the way it stores the position.|||If we want to backtrack while processing through a list, the iterator will not work in this case.||||||Ease in programming: It is convenient to use iterators rather than using a subscript operator[] to access the elements of a container. If we use subscript operator[] to access the elements, then we need to keep the track of the number of elements added at the runtime, but this would not happen in the case of an iterator.||||||Code Reusability: A code can be reused if we use iterators. In the above example, if we replace vector with the list, and then the subscript operator[] would not work to access the elements as the list does not support the random access. However, we use iterators to access the elements, then we can also access the list elements.|||Dynamic Processing: C++ iterators provide the facility to add or delete the data dynamically.|||""]"
99,['C++ Bidirectional iterator'],['Suppose x and y are the two iterators:'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/cpp/images/cpp-bidirectional-iterator.png'],[],[],[],[],"[""In the above table, 'A' is of bidirectional type, x and y are the objects of an iterator type, and 't' is an object pointed by the iterator."", ""Let's see a simple example:"", ""Suppose 'A' and 'B' are the two iterators:"", ""Suppose 'A' is an iterator and 't' is an integer variable:"", ""Suppose 'A' and 'B' are the two iterators:""]",[],[],"['#include <iostream>', '#include<iterator>', '#include<vector>', 'using namespace std;', 'int main()', 'vector<int> v{1,2,3,4,5};                       // vector declaration', 'vector<int> ::iterator itr;                        // iterator declaration', 'vector<int> :: reverse_iterator ritr;         // reverse iterator declaration', 'for(itr = v.begin();itr!=v.end();itr++)', 'cout<<*itr<<"" "";', ""cout<<'\\n';"", 'for(ritr = v.rbegin();ritr!= v.rend();ritr++)', 'cout<<*ritr<<"" "";', 'return 0;', 't = *A', 'A==B;           // valid', 'A<=B;           // invalid', 'A+2;              // invalid', 'A+1;              // invalid']",['1 2 3 4 5\n5 4 3 2 1'],"['Property|||Expressions&&&A Bidirectional iterator is a default-constructible, copy-assignable and destructible.|||A x;|||A y(x);|||y=x;&&&It can be compared by using equality or inequality operator.|||x==y|||x!=y&&&It can be dereferenced means we can retrieve the value by using a dereference operator(*).|||*x&&&A mutable iterator can be dereferenced as an lvalue.|||*x = t&&&A Bidirectional iterator can be incremented.|||x++|||++x&&&A Bidirectional iterator can also be decremented.|||x--|||--x']","['|||A Bidirectional iterator supports all the features of a forward iterator, and it also supports the two decrement operators (prefix and postfix).|||Bidirectional iterators are the iterators used to access the elements in both the directions, i.e., towards the end and towards the beginning.|||A random access iterator is also a valid bidirectional iterator.|||Many containers implement the bidirectional iterator such as list, set, multiset, map, multimap.|||C++ provides two non-const iterators that move in both the directions are iterator and reverse iterator.|||C++ Bidirectional iterator has the same features like the forward iterator, with the only difference is that the bidirectional iterator can also be decremented.||||||Equality/Inequality operator: A bidirectional iterator can be compared by using an equality or inequality operator. The two iterators are equal only when both the iterators point to the same position.||||||Dereferencing: A bidirectional iterator can also be dereferenced both as an lvalue and rvalue.||||||Incrementable: A bidirectional iterator can be incremented by using an operator++() function.||||||Decrementable: A bidirectional iterator can also be decremented by using an Operator --() function.||||||Relational operator: An equality or inequality operator can be used with the bidirectional iterator, but the other iterators cannot be applied on the bidirectional iterator.||||||Arithmetic operator: An arithmetic operator cannot be used with the bidirectional iterator as it accesses the data sequentially.||||||Offset dereference operator: A Bidirectional iterator does not support the offset dereference operator or subscript operator [] for the random access of an element.|||']"
100,['C++ Forward Iterator'],"[""Where 'A' is a forward iterator type, and x and y are the objects of a forward iterator type, and t is an object pointed by the iterator type object. ""]","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/cpp/images/cpp-forward-iterator.png'],[],[],[],[],"[""Let's see a simple example:"", ""Suppose 'A' and 'B' are the two iterators:"", ""Suppose 'A' is an iterator and 't' is an integer variable:"", ""Suppose 'A' is an iterator:"", ""Suppose 'A' is an iterator:"", ""Suppose 'A' and 'B' are the two iterators:""]",[],[],"['#include <iostream>', '#include <fstream>', '#include <iterator>', '#include <vector>', 'using namespace std;', 'template<class ForwardIterator>                                       // function template', 'void display(ForwardIterator first, ForwardIterator last)            // display function', 'while(first!=last)', 'cout<<*first<<"" "";', 'first++;', 'int main()', 'vector<int> a;                          // declaration of vector.', 'for(int i=1;i<=10;i++)', 'a.push_back(i);', 'display(a.begin(),a.end());                // calling display() function.', 'return 0;', 'A==B;           // equality operator', 'A!=B;            // inequality operator', 't = *A;', 'A--;          // invalid', 'A==B;        // valid', 'A>=B;        // invalid', 'A+2;         // invalid', 'A+3;         // invalid']",['1 2 3 4 5 6 7 8 9 10'],['Properties|||Valid Expressions&&&It is default constructible.|||A x;&&&It is a copy-constructible.|||A x(y);&&&It is a copy-assignable.|||y = x;&&&It can be compared either by using an equality or inequality operator.|||a==b;|||a!=b;&&&It can be incremented.|||a++;|||++a;&&&It can be dereferenced as an rvalue.|||*a;&&&It can also be dereferenced as an lvalue.|||*a = t;'],"['|||Forward Iterator is a combination of Bidirectional and Random Access iterator. Therefore, we can say that the forward iterator can be used to read and write to a container.|||Forward iterators are used to read the contents from the beginning to the end of a container.|||Forward iterator use only increments operator (++) to move through all the elements of a container. Therefore, we can say that the forward iterator can only move forward.|||A Forward iterator is a multi-pass iterator.||||||Equality/Inequality operator: A forward iterator can be compared by using equality or an inequality operator.||||||Dereferencing: We can dereference the forward iterator as an rvalue as well as an lvalue. Therefore, we can access the output iterator and can also assign the value to the output iterator.||||||Incrementable: A forward iterator can be incremented but cannot be decremented.||||||Decrementable: A forward iterator cannot be decremented as it moves only in the forward direction.||||||Relational Operators: A forward iterator can be used with the equality operator, but no other relational operators can be applied on the forward iterator.||||||Arithmetic Operators: An arithmetic operators cannot be used with the forward iterator.||||||Random Access: A forward iterator does not provide the random access of an element. It can only iterate through the elements of a container.|||']"
101,['C++ Input Iterator'],"[""Where 'X' is of input iterator type while 'a' and 'b' are the objects of an iterator type.""]","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#']",[],[],[],[],[],"[""Let's see a simple example:"", ""Let's see a simple example:"", ""Let's see a simple example:"", ""In the above example, 'it' and 'it1' iterators are swapped by using an object of a third iterator, i.e., temp.""]","[""In the above example, 'it' is an iterator object pointing to the first element of a vector 'v'. A dereferencing an iterator *it returns the value pointed by the iterator 'it'.""]","['In the above example, itr and itr1 are the two iterators. Both these iterators are of vector type. The \'itr\' is an iterator object pointing to the first position of the vector and \'itr1\' is an iterator object pointing to the second position of the vector. Therefore, both the iterators point to the same location, so the condition itr1!=itr returns true value and prints ""Both the iterators are not equal"".']","['A ==B;   // equality operator', 'A!=B;   // inequality operator', '#include <iostream>', '#include<vector>', '#include<iterator>', 'using namespace std;', 'int main()', 'vector<int> v{1,2,3,4,5};', 'vector<int>::iterator itr,itr1;', 'itr=v.begin();', 'itr1=v.begin()+1;', 'if(itr==itr1)', 'std::cout << ""Both the iterators are equal"" << std::endl;', 'if(itr!=itr1)', 'std::cout << ""Both the iterators are not equal"" << std::endl;', 'return 0;', ""*A     //  Dereferencing 'A' iterator by using *."", '#include <iostream>', '#include<vector>', '#include<iterator>', 'using namespace std;', 'int main()', '{', 'vector<int> v{11,22,33,44};', 'vector<int>::iterator it;', 'it = v.begin();', 'cout<<*it;', 'return 0;', '#include <iostream>', '#include<vector>', '#include<iterator>', 'using namespace std;', 'int main()', 'vector<int> v{11,22,33,44};', 'vector<int>::iterator it,it1,temp;', 'it = v.begin();', 'it1 = v.begin()+1;', 'temp=it;', 'it=it1;', 'it1=temp;', 'cout<<*it<<"" "";', 'cout<<*it1;', 'return 0;']","['Both the iterators are not equal', '11', '22 11']","['Property|||Valid Expressions&&&An input iterator is a copy-constructible, copy-assignable and destructible.|||X b(a);|||b= a;&&&It can be compared by using a equality or inequality operator.|||a==b;|||a!=b;&&&It can be dereferenced.|||*a;&&&It can be incremented.|||++a;']","[""|||Input Iterator is an iterator used to read the values from the container.|||Dereferencing an input iterator allows us to retrieve the value from the container.|||It does not alter the value of a container.|||It is a one-way iterator.|||It can be incremented, but cannot be decremented.|||Operators which can be used for an input iterator are increment operator(++), decrement operator(--), dereference operator(*), not equal operator(!=) and equal operator(==).|||An input Iterator is produced by the Istream.|||A Forward iterator, bidirectional iterator, and random access iterator are all valid input iterators.||||||Equality/Inequality operator: An input iterator can be compared by using an equality or inequality operator. The two iterators are equal only when both the iterators point to the same location otherwise not. Suppose 'A' and 'B' are the two iterators:||||||Dereferencing an iterator: We can dereference an iterator by using a dereference operator(*). Suppose 'A' is an iterator:||||||Swappable: The two iterators pointing two different locations can be swapped.|||""]"
102,['C++ Output Iterator'],['x: It is the container on which the new element is to be inserted.'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/cpp/images/cpp-output-iterator.png'],[],[],[],[],"['it: It is an iterator object pointing to the position which is to be modified.', ""Let's see a simple example:"", 'Member functions of Ostream Iterator class', ""Let's see a simple example:"", ""In the above example, out is an object of the ostream_iterator used to add the delimiter ',' between the vector elements."", ""Let's see another simple example of ostream iterator:"", ""Suppose 'A' is an output iterator type and 'x' is a integer variable:"", ""Suppose 'A' is an output iterator type:"", ""Suppose 'A' and 'B' are the two iterators:"", ""Suppose 'A' is an output iterator:""]","['In the above example, insert_iterator is applied on the copy algorithm to insert the elements of the vector v2 into the vector v1 at a specified position pointed by it.']",[],"['template<class Container, class Iterator>', 'insert_iterator<container> inserter(Container &x,Iterator it);', '#include <iostream>     // std::cout', '#include <iterator>     // std::front_inserter', '#include <vector>         // std::list', '#include <algorithm>    // std::copy', 'using namespace std;', 'int main () {', 'vector<int> v1,v2;', 'for (int i=1; i<=5; i++)', 'v1.push_back(i);', 'v2.push_back(i+2);', 'vector<int>::iterator it = v1.begin();', 'advance (it,3);', 'copy (v2.begin(),v2.end(),inserter(v1,it));', 'cout<<""Elements of v1 are :"";', 'for (  it = v1.begin(); it!= v1.end(); ++it )', ""cout << ' ' << *it;"", ""cout << '\\n';"", 'return 0;', 'template<class T, class charT=char, class traits=char_traits<charT>>', 'class ostream_iterator;', 'Ostream_iterator<T, charT, traits>& operator=(const T& value);', 'Ostream_iterator<T, charT, traits>& operator*();', 'Ostream_iterator<T, charT, traits>& operator++();', 'Ostream_iterator<T, charT, traits>& operator++(int);', '#include <iostream>', '#include<iterator>', '#include<vector>', '#include<algorithm>', 'using namespace std;', 'int main()', 'vector<int> v;', 'for(int i=1;i<=5;i++)', 'v.push_back(i*10);', 'ostream_iterator<int> out(cout,"","");', 'copy(v.begin(),v.end(),out);', 'return 0;', '#include <iostream>', '#include<iterator>', '#include<vector>', '#include<algorithm>', 'using namespace std;', 'int main()', 'ostream_iterator<int> out(cout,"","");', '*out = 5;', 'out++;', '*out = 10;', 'out++;', '*out = 15;', 'return 0;', 'X==Y;  invalid', 'X!=Y;   invalid', '*A = x;                   // valid', 'x = *A;                 // invalid', 'A++;            // not valid', '++A;            // not valid', 'A = =B;        // not valid', 'A = =B;        // not valid', 'A + 2;               // invalid', 'A + 5;               // invalid']","['Elements of v1 are : 1 2 3 3 4 5 6 7 4 5', '10,20,30,40,50', '5,10,15,']",[],"['|||Output Iterator is an iterator used to modify the value in the container.|||Dereferencing an output iterator allows us to alter the value of the container.|||It does not allow us to read the value from the container.|||It is a one-way and write-only iterator.|||It can be incremented, but cannot be decremented.|||Operators that can be used for an output iterator are increment operator(++), decrement operator(--) and assignment operator(=).|||There are two main subclasses of an Output Iterator are:||||||insert iterator|||ostream iterator|||||||||insert iterator|||ostream iterator||||||An insert iterator is an iterator used to insert the element in a specified position.|||An assignment operator on the insert_iterator inserts the new element at the current position.||||||An ostream iterators are the output iterators used to write to the output stream such as cout successively.|||An ostream iterator is created using a basic_ostream object.|||When an assigenment operator is used on the ostream iterator, it inserts a new element into the output stream.||||||T: It is the type of elements to be inserted into the container.|||charT: The type of elements that ostream can handle, for example, char ostream.|||traits: These are the character traits that the stream handles for the elements.||||||Equality/Inequality Operator: Output iterators cannot be compared either by using equality or inequality operator. Suppose X and Y are the two iterators:||||||Dereferencing: An output iterator can be dereferenced as an lvalue.||||||Incrementable: An output iterator can be incremented by using operator++() function.||||||Assigning but no accessing: We can assign an output iterator as an lvalue, but we cannot access them as an rvalue.||||||It cannot be decremented: We can increment the output iterator by using operator++() function, but we cannot decrement the output iterator.||||||Multi-pass algorithm: An output iterator cannot be used as a multi-pass algorithm. Since an output iterator is unidirectional and can move only forward. Therefore, it cannot be used to move through the container multiple times||||||Relational Operators: An output iterator cannot be compared by using any of the relational operators.||||||Arithmetic Operators: An output iterator cannot be used with the arithmetic operators. Therefore, we can say that the output iterator only moves forward in a sequential manner.|||']"
103,['C++ Programs'],"[""C++ programs are frequently asked in the interview. These programs can be asked from basics, array, string, pointer, linked list, file handling etc. Let's see the list of top c++ programs.""]","['https://www.javatpoint.com/fibonacci-series-in-cpp', 'https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/fibonacci-series-in-cpp', 'https://www.javatpoint.com/prime-number-program-in-cpp', 'https://www.javatpoint.com/palindrome-program-in-cpp', 'https://www.javatpoint.com/factorial-program-in-cpp', 'https://www.javatpoint.com/armstrong-number-in-cpp', 'https://www.javatpoint.com/sum-of-digits-program-in-cpp', 'https://www.javatpoint.com/cpp-program-to-reverse-number', 'https://www.javatpoint.com/cpp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/matrix-multiplication-in-cpp', 'https://www.javatpoint.com/cpp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/cpp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/cpp-program-to-print-number-triangle', 'https://www.javatpoint.com/cpp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/cpp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/fibonacci-series-in-cpp', 'https://www.javatpoint.com/cpp-files-and-streams', 'https://www.javatpoint.com/fibonacci-series-in-cpp']",[],[],[],[],[],"['Write a c++ program to print fibonacci series without using recursion and using recursion.', 'Output: 0 1 1 2 3 5 8 13 21 34', 'Write a c++ program to check prime number.', 'Output: not prime number', 'Output: prime number', 'Write a c++ program to check palindrome number.', 'Input: 121', 'Output: not palindrome number', 'Input: 113', 'Output: palindrome number', 'Write a c++ program to print factorial of a number.', 'Output: 120', 'Output: 720', 'Write a c++ program to check armstrong number.', 'Input: 371', 'Output: armstrong', 'Input: 342', 'Output: not armstrong', 'Write a c++ program to print sum of digits.', 'Input: 624', 'Output: 12', 'Write a c++ program to reverse given number.', 'Input: 234', 'Output: 432', 'Write a c++ program to swap two numbers without using third variable.', 'Input: a=5 b=10', 'Output: a=10 b=5', 'Write a c++ program to print multiplication of 2 matrices.', 'Write a c++ program to convert decimal number to binary.', 'Output: 1001', 'Output: 10100', 'Write a c++ program to print alphabet triangle.', 'Write a c++ program to print number triangle.', 'Write a c++ program to generate fibonacci triangle.', 'Write a c++ program to convert number in characters.', 'Input: 74254', 'Output:Seven Four Two Five Four', 'Input: 203', 'Output: two zero three']",[],[],[],"['first matrix elements:\n1 2 3\n1 2 3\n1 2 3\nsecond matrix elements\n1 1 1\n2 1 2\n3 2 1', 'multiplication of the matrix:\n14 9 8\n14 9 8\n14 9 8', 'A\n    ABA\n   ABCBA\n  ABCDCBA\n ABCDEDCBA', 'enter the range= 6\n      1\n     121\n    12321\n   1234321\n  123454321\n 12345654321', '1\n1\t1\t\n1\t1\t2\t\n1\t1\t2\t3\t\n1\t1\t2\t3\t5']",[],[]
104,['Fibonacci Series in C++'],"['Fibonacci Series in C++: In case of fibonacci series, next number is the sum of\nprevious two numbers for example 0, 1, 1, 2, 3, 5, 8, 13, 21 etc. The first two numbers of fibonacci series are 0 and 1.']","['https://www.javatpoint.com/prime-number-program-in-cpp', 'https://www.javatpoint.com/cpp-programs', 'https://www.javatpoint.com/prime-number-program-in-cpp', 'https://www.javatpoint.com/cpp-programs', 'https://www.javatpoint.com/prime-number-program-in-cpp']",[],[],"['Fibonaccci Series in C++ without Recursion', 'Fibonnaci series using recursion in C++']",[],[],"['There are two ways to write the fibonacci series program:', ""Let's see the fibonacci series program in C++ without recursion."", ""Let's see the fibonacci series program in C++ using recursion.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main() {', 'int n1=0,n2=1,n3,i,number;', 'cout<<""Enter the number of elements: "";', 'cin>>number;', 'cout<<n1<<"" ""<<n2<<"" ""; //printing 0 and 1', 'for(i=2;i<number;++i) //loop starts from 2 because 0 and 1 are already printed', 'n3=n1+n2;', 'cout<<n3<<"" "";', 'n1=n2;', 'n2=n3;', 'return 0;', '#include<iostream>', 'using namespace std;', 'void printFibonacci(int n){', 'static int n1=0, n2=1, n3;', 'if(n>0){', 'n3 = n1 + n2;', 'n1 = n2;', 'n2 = n3;', 'cout<<n3<<"" "";', 'printFibonacci(n-1);', 'int main(){', 'int n;', 'cout<<""Enter the number of elements: "";', 'cin>>n;', 'cout<<""Fibonacci Series: "";', 'cout<<""0 ""<<""1 "";', 'printFibonacci(n-2);  //n-2 because 2 numbers are already printed', 'return 0;']","['Enter the number of elements: 10\n0 1 1 2 3 5 8 13 21 34', 'Enter the number of elements: 15 \n Fibonacci Series: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377']",[],['|||Fibonacci Series without recursion|||Fibonacci Series using recursion|||']
105,['Prime Number Program in C++'],"[""Prime number is a number that is greater than 1 and divided by 1 or itself. In other words, prime numbers can't be divided by other numbers than itself or 1. For example 2, 3, 5, 7, 11, 13, 17, 19, 23.... are the prime numbers.""]","['https://www.javatpoint.com/palindrome-program-in-cpp', 'https://www.javatpoint.com/fibonacci-series-in-cpp', 'https://www.javatpoint.com/palindrome-program-in-cpp', 'https://www.javatpoint.com/fibonacci-series-in-cpp', 'https://www.javatpoint.com/palindrome-program-in-cpp']",[],[],[],[],[],"[""Let's see the prime number program in C++. In this C++ program, we will take an input from the user and check whether the number is prime or not.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int n, i, m=0, flag=0;', 'cout << ""Enter the Number to check Prime: "";', 'cin >> n;', 'm=n/2;', 'for(i = 2; i <= m; i++)', 'if(n % i == 0)', 'cout<<""Number is not Prime.""<<endl;', 'flag=1;', 'break;', 'if (flag==0)', 'cout << ""Number is Prime.""<<endl;', 'return 0;']","['Enter the Number to check Prime: 17  \n Number is Prime.', 'Enter the Number to check Prime: 57  \nNumber is not Prime.']",[],[]
106,['Palindrome program in C++'],"['A palindrome number is a number that is same after reverse. For example 121, 34543, 343, 131, 48984 are the palindrome numbers.']","['https://www.javatpoint.com/factorial-program-in-cpp', 'https://www.javatpoint.com/prime-number-program-in-cpp', 'https://www.javatpoint.com/factorial-program-in-cpp', 'https://www.javatpoint.com/prime-number-program-in-cpp', 'https://www.javatpoint.com/factorial-program-in-cpp']",[],[],['Palindrome number algorithm'],[],[],"[""Let's see the palindrome program in C++. In this program, we will get an input from the user and check whether number is palindrome or not.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int n,r,sum=0,temp;', 'cout<<""Enter the Number="";', 'cin>>n;', 'temp=n;', 'while(n>0)', 'r=n%10;', 'sum=(sum*10)+r;', 'n=n/10;', 'if(temp==sum)', 'cout<<""Number is Palindrome."";', 'cout<<""Number is not Palindrome."";', 'return 0;']","['Enter the Number=121   \n Number is Palindrome.', 'Enter the number=113  \nNumber is not Palindrome.']",[],"['|||Get the number from user|||Hold the number in temporary variable|||Reverse the number|||Compare the temporary number with reversed number|||If both numbers are same, print palindrome number|||Else print not palindrome number|||']"
107,['Factorial program in C++'],['Factorial Program in C++: Factorial of n is the product of all positive descending integers. Factorial of n is denoted by n!. For example:'],"['https://www.javatpoint.com/armstrong-number-in-cpp', 'https://www.javatpoint.com/palindrome-program-in-cpp', 'https://www.javatpoint.com/armstrong-number-in-cpp', 'https://www.javatpoint.com/palindrome-program-in-cpp', 'https://www.javatpoint.com/armstrong-number-in-cpp']",[],[],"['Factorial Program using Loop', 'Factorial Program using Recursion']",[],[],"['Here, 4! is pronounced as ""4 factorial"", it is also called ""4 bang"" or ""4 shriek"".', 'The factorial is normally used in Combinations and Permutations (mathematics).', ""There are many ways to write the factorial program in C++ language. Let's see the 2 ways to write the factorial program."", ""Let's see the factorial Program in C++ using loop."", ""Let's see the factorial program in C++ using recursion.""]",[],[],"['4! = 4*3*2*1 = 24', '6! = 6*5*4*3*2*1 = 720', '#include <iostream>', 'using namespace std;', 'int main()', 'int i,fact=1,number;', 'cout<<""Enter any Number: "";', 'cin>>number;', 'for(i=1;i<=number;i++){', 'fact=fact*i;', 'cout<<""Factorial of "" <<number<<"" is: ""<<fact<<endl;', 'return 0;', '#include<iostream>', 'using namespace std;', 'int main()', 'int factorial(int);', 'int fact,value;', 'cout<<""Enter any number: "";', 'cin>>value;', 'fact=factorial(value);', 'cout<<""Factorial of a number is: ""<<fact<<endl;', 'return 0;', 'int factorial(int n)', 'if(n<0)', 'return(-1); /*Wrong value*/', 'if(n==0)', 'return(1);  /*Terminating condition*/', 'return(n*factorial(n-1));']","['Enter any Number: 5  \n Factorial of 5 is: 120', 'Enter any number: 6   \nFactorial of a number is: 720']",[],['|||Factorial Program using loop|||Factorial Program using recursion|||']
108,['Armstrong Number in C++'],"[""Before going to write the C++ program to check whether the number is Armstrong or not, let's understand what is Armstrong number.""]","['https://www.javatpoint.com/sum-of-digits-program-in-cpp', 'https://www.javatpoint.com/factorial-program-in-cpp', 'https://www.javatpoint.com/sum-of-digits-program-in-cpp', 'https://www.javatpoint.com/factorial-program-in-cpp', 'https://www.javatpoint.com/sum-of-digits-program-in-cpp']",[],[],[],[],[],"['Armstrong number is a number that is equal to the sum of cubes of its digits. For example 0, 1, 153, 370, 371 and 407 are the Armstrong numbers.', ""Let's try to understand why 371 is an Armstrong number."", ""Let's see the C++ program to check Armstrong Number.""]",[],[],"['371 = (3*3*3)+(7*7*7)+(1*1*1)', 'where:', '(3*3*3)=27', '(7*7*7)=343', '(1*1*1)=1', '27+343+1=371', '#include <iostream>', 'using namespace std;', 'int main()', 'int n,r,sum=0,temp;', 'cout<<""Enter the Number=  "";', 'cin>>n;', 'temp=n;', 'while(n>0)', 'r=n%10;', 'sum=sum+(r*r*r);', 'n=n/10;', 'if(temp==sum)', 'cout<<""Armstrong Number.""<<endl;', 'cout<<""Not Armstrong Number.""<<endl;', 'return 0;']","['Enter the Number= 371\nArmstrong Number.', 'Enter the Number= 342   \nNot Armstrong Number.']",[],[]
109,['Sum of digits program in C++'],['We can write the sum of digits program in C++ language by the help of loop and mathematical operation only.'],"['https://www.javatpoint.com/cpp-program-to-reverse-number', 'https://www.javatpoint.com/armstrong-number-in-cpp', 'https://www.javatpoint.com/cpp-program-to-reverse-number', 'https://www.javatpoint.com/armstrong-number-in-cpp', 'https://www.javatpoint.com/cpp-program-to-reverse-number']",[],[],['Sum of digits algorithm'],[],[],"['To get sum of each digit by C++ program, use the following algorithm:', ""Let's see the sum of digits program in C++.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int n,sum=0,m;', 'cout<<""Enter a number: "";', 'cin>>n;', 'while(n>0)', 'm=n%10;', 'sum=sum+m;', 'n=n/10;', 'cout<<""Sum is= ""<<sum<<endl;', 'return 0;']","['Enter a number: 23  \n Sum is= 5', 'Enter a number: 624       \nSum is= 12']",[],['|||Step 1: Get number by user|||Step 2: Get the modulus/remainder of the number|||Step 3: sum the remainder of the number|||Step 4: Divide the number by 10|||Step 5: Repeat the step 2 while number is greater than 0.|||']
110,['C++ Program to reverse number'],"['We can reverse a number in C++ using loop and arithmetic operators. In this program, we are getting number as input from the user and reversing that number. ']","['https://www.javatpoint.com/cpp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/sum-of-digits-program-in-cpp', 'https://www.javatpoint.com/cpp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/sum-of-digits-program-in-cpp', 'https://www.javatpoint.com/cpp-program-to-swap-two-numbers-without-third-variable']",[],[],[],[],[],"[""Let's see a simple C++ example to reverse a given number.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int n, reverse=0, rem;', 'cout<<""Enter a number: "";', 'cin>>n;', 'while(n!=0)', 'rem=n%10;', 'reverse=reverse*10+rem;', 'n/=10;', 'cout<<""Reversed Number: ""<<reverse<<endl;', 'return 0;']",['Enter a number: 234  \n Reversed Number: 432'],[],[]
111,['C++ Program to swap two numbers without third variable'],['We can swap two numbers without using third variable. There are two common ways to swap two numbers without using third variable:'],"['https://www.javatpoint.com/matrix-multiplication-in-cpp', 'https://www.javatpoint.com/cpp-program-to-reverse-number', 'https://www.javatpoint.com/matrix-multiplication-in-cpp', 'https://www.javatpoint.com/cpp-program-to-reverse-number', 'https://www.javatpoint.com/matrix-multiplication-in-cpp']",[],[],"['Program 1: Using * and /', 'Program 2: Using + and -']",[],[],"[""Let's see a simple C++ example to swap two numbers without using third variable."", ""Let's see another example to swap two numbers using + and -.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int a=5, b=10;', 'cout<<""Before swap a= ""<<a<<"" b= ""<<b<<endl;', 'a=a*b; //a=50 (5*10)', 'b=a/b; //b=5 (50/10)', 'a=a/b; //a=10 (50/5)', 'cout<<""After swap a= ""<<a<<"" b= ""<<b<<endl;', 'return 0;', '#include <iostream>', 'using namespace std;', 'int main()', 'int a=5, b=10;', 'cout<<""Before swap a= ""<<a<<"" b= ""<<b<<endl;', 'a=a+b; //a=15 (5+10)', 'b=a-b; //b=5 (15-10)', 'a=a-b; //a=10 (15-5)', 'cout<<""After swap a= ""<<a<<"" b= ""<<b<<endl;', 'return 0;']","['Before swap a= 5 b= 10     \nAfter swap a= 10 b= 5', 'Before swap a= 5 b= 10  \n After swap a= 10 b= 5']",[],['|||By + and -|||By * and /|||']
112,['Matrix multiplication in C++'],"['We can add, subtract, multiply and divide 2 matrices. To do so, we are taking input from the user for row number, column number, first matrix elements and second matrix elements. Then we are performing multiplication on the matrices entered by the user.']","['https://www.javatpoint.com/cpp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/cpp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/cpp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/cpp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/cpp-program-to-convert-decimal-to-binary']",['https://static.javatpoint.com/cpp/images/matrix-multiplication-in-cpp1.png'],[],[],[],[],"['In matrix multiplication first matrix one row element is multiplied by second matrix all column elements.', ""Let's try to understand the matrix multiplication of 3*3 and 3*3 matrices by the figure given below:"", ""Let's see the program of matrix multiplication in C++.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int a[10][10],b[10][10],mul[10][10],r,c,i,j,k;', 'cout<<""enter the number of row="";', 'cin>>r;', 'cout<<""enter the number of column="";', 'cin>>c;', 'cout<<""enter the first matrix element=\\n"";', 'for(i=0;i<r;i++)', 'for(j=0;j<c;j++)', 'cin>>a[i][j];', 'cout<<""enter the second matrix element=\\n"";', 'for(i=0;i<r;i++)', 'for(j=0;j<c;j++)', 'cin>>b[i][j];', 'cout<<""multiply of the matrix=\\n"";', 'for(i=0;i<r;i++)', 'for(j=0;j<c;j++)', 'mul[i][j]=0;', 'for(k=0;k<c;k++)', 'mul[i][j]+=a[i][k]*b[k][j];', 'for(i=0;i<r;i++)', 'for(j=0;j<c;j++)', 'cout<<mul[i][j]<<"" "";', 'cout<<""\\n"";', 'return 0;']",['enter the number of row=3  \nenter the number of column=3  \nenter the first matrix element= \n1 2 3\n1 2 3  \n1 2 3       \nenter the second matrix element= \n1 1 1  \n2 1 2   \n3 2 1    \n multiply of the matrix=  \n14 9 8      \n14 9 8  \n14 9 8'],[],[]
113,['C++ Program to convert Decimal to Binary'],['We can convert any decimal number (base-10 (0 to 9)) into binary number (base-2 (0 or 1)) by C++ program.'],"['https://www.javatpoint.com/cpp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/matrix-multiplication-in-cpp', 'https://www.javatpoint.com/cpp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/matrix-multiplication-in-cpp', 'https://www.javatpoint.com/cpp-program-to-convert-number-in-characters']",[],[],"['Decimal Number', 'Binary Number', 'Decimal to Binary Conversion Algorithm']",[],[],"['Binary number is a base 2 number because it is either 0 or 1. Any combination of 0 and 1 is binary number such as 1001, 101, 11111, 101010 etc.', ""Let's see the some binary numbers for the decimal number."", 'Step 1: Divide the number by 2 through % (modulus operator) and store the remainder in array', 'Step 2: Divide the number by 2 through / (division operator)', 'Step 3: Repeat the step 2 until the number is greater than zero', ""Let's see the C++ example to convert decimal to binary.""]","['Decimal number is a base 10 number because it ranges from 0 to 9, there are total 10 digits between 0 to 9. Any combination of digits is decimal number such as 223, 585, 192, 0, 7 etc.']",[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int a[10], n, i;', 'cout<<""Enter the number to convert: "";', 'cin>>n;', 'for(i=0; n>0; i++)', 'a[i]=n%2;', 'cout<<""Binary of the given number= "";', 'for(i=i-1 ;i>=0 ;i--)', 'cout<<a[i];']",['Enter the number to convert: 9\nBinary of the given number= 1001'],['Decimal|||Binary&&&1|||0&&&2|||10&&&3|||11&&&4|||100&&&5|||101&&&6|||110&&&7|||111&&&8|||1000&&&9|||1001&&&10|||1010'],[]
114,['C++ Program to Convert Number in Characters'],"['In C++ language, we can easily convert number in characters by the help of loop and switch case. In this program, we are taking input from the user and iterating this number until it is 0. While iteration, we are dividing it by 10 and the remainder is passed in switch case to get the word for the number.']","['https://www.javatpoint.com/cpp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/cpp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/cpp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/cpp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/cpp-program-to-print-alphabet-triangle']",[],[],[],[],[],"[""Let's see the C++ program to convert number in characters.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'long int n,sum=0,r;', 'cout<<""Enter the Number= "";', 'cin>>n;', 'while(n>0)', 'r=n%10;', 'sum=sum*10+r;', 'n=n/10;', 'n=sum;', 'while(n>0)', 'r=n%10;', 'switch(r)', 'case 1:', 'cout<<""one "";', 'break;', 'case 2:', 'cout<<""two "";', 'break;', 'case 3:', 'cout<<""three "";', 'break;', 'case 4:', 'cout<<""four "";', 'break;', 'case 5:', 'cout<<""five "";', 'break;', 'case 6:', 'cout<<""six "";', 'break;', 'cout<<""seven "";', 'case 8:', 'cout<<""eight "";', 'break;', 'case 9:', 'cout<<""nine "";', 'break;', 'case 0:', 'cout<<""zero "";', 'break;', 'default:', 'cout<<""tttt "";', 'break;', 'n=n/10;']",['Enter the Number= 74254\nseven four two five four'],[],[]
115,['C++ Program to Print Alphabet Triangle'],"['There are different triangles that can be printed. Triangles can be generated by alphabets or numbers. In this C++ program, we are going to print alphabet triangles.']","['https://www.javatpoint.com/cpp-program-to-print-number-triangle', 'https://www.javatpoint.com/cpp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/cpp-program-to-print-number-triangle', 'https://www.javatpoint.com/cpp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/cpp-program-to-print-number-triangle']",[],[],[],[],[],"[""Let's see the C++ example to print alphabet triangle.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', ""char ch='A';"", 'int i, j, k, m;', 'for(i=1;i<=5;i++)', 'for(j=5;j>=i;j--)', 'cout<<"" "";', 'for(k=1;k<=i;k++)', 'cout<<ch++;', 'ch--;', 'for(m=1;m<i;m++)', 'cout<<--ch;', 'cout<<""\\n"";', ""ch='A';"", 'return 0;']",['A\n    ABA\n   ABCBA\n  ABCDCBA\n ABCDEDCBA'],[],[]
116,['C++ Program to print Number Triangle'],"['Like alphabet triangle, we can write the C++ program to print the number triangle. The number triangle can be printed in different ways.']","['https://www.javatpoint.com/cpp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/cpp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/cpp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/cpp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/cpp-program-to-generate-fibonacci-triangle']",[],[],[],[],[],"[""Let's see the C++ example to print number triangle.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int i,j,k,l,n;', 'cout<<""Enter the Range="";', 'cin>>n;', 'for(i=1;i<=n;i++)', 'for(j=1;j<=n-i;j++)', 'cout<<"" "";', 'for(k=1;k<=i;k++)', 'cout<<k;', 'for(l=i-1;l>=1;l--)', 'cout<<l;', 'cout<<""\\n"";', 'return 0;']","['Enter the Range=5\n     1\n    121\n   12321\n  1234321\n 123454321', 'Enter the Range=6\n      1\n     121\n    2321\n   1234321 \n  123454321\n 12345654321']",[],[]
117,['C++ Program to generate Fibonacci Triangle'],"['In this program, we are getting input from the user for the limit for fibonacci triangle, and printing the fibonacci series for the given number of times (limit).']","['https://www.javatpoint.com/char-array-to-string-in-cpp', 'https://www.javatpoint.com/cpp-program-to-print-number-triangle', 'https://www.javatpoint.com/char-array-to-string-in-cpp', 'https://www.javatpoint.com/cpp-program-to-print-number-triangle', 'https://www.javatpoint.com/char-array-to-string-in-cpp']",[],[],[],[],[],"[""Let's see the C++ example to generate fibonacci triangle.""]",[],[],"['#include <iostream>', 'using namespace std;', 'int main()', 'int a=0,b=1,i,c,n,j;', 'cout<<""Enter the limit: "";', 'cin>>n;', 'for(i=1; i<=n; i++)', 'a=0;', 'b=1;', 'cout<<b<<""\\t"";', 'for(j=1; j<i; j++)', '{', 'c=a+b;', 'cout<<c<<""\\t"";', 'a=b;', 'b=c;', '}', 'cout<<""\\n"";', 'return 0;']",['Enter the limit: 10 \n  1 \n  1       1\n  1       1       2  \n  1       1       2       3 \n  1       1       2       3       5 \n  1       1       2       3       5       8\n  1       1       2       3       5       8       13\n  1       1       2       3       5       8       13      21 \n  1       1       2       3       5       8       13      21      34  \n  1       1       2       3       5       8       13      21      34      55'],[],[]
118,['Char array to string in C++'],"['""Char"" data type or a character data type is used to store letters, unlike numbers and integers, which are stored in integer and floating-point or true-false value in Booleans.']","['https://www.javatpoint.com/calculator-program-in-cpp', 'https://www.javatpoint.com/cpp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-while-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-for-loop', 'https://www.javatpoint.com/calculator-program-in-cpp', 'https://www.javatpoint.com/cpp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/calculator-program-in-cpp']","['https://static.javatpoint.com/cpp/images/char-array-to-string-in-cpp.png', 'https://static.javatpoint.com/cpp/images/char-array-to-string-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/char-array-to-string-in-cpp3.png', 'https://static.javatpoint.com/cpp/images/char-array-to-string-in-cpp4.png', 'https://static.javatpoint.com/cpp/images/char-array-to-string-in-cpp5.png', 'https://static.javatpoint.com/cpp/images/char-array-to-string-in-cpp6.png']",[],[],"['Code:-', 'Code:-', 'Code:-', 'Code:-', 'Code -', 'CODE -']",[],"['We can initialize char variables using -', 'char ch2{ \'a\' }; To print character ""a"".', 'char ch1{ 97 }; To print the value at code 97.', 'char ch{\'5\'}; To print number character ""5"".', 'C++ provides us with the following techniques to convert a char array to a string:', ""Syntax for using 'c_str()' and 'strcpy()' function is given below:"", 'where, c_str() converts the contents of a string as C-style, non-terminated string. It gives direct access to the internal string buffer.', ""We can convert character to a string using 'for' a loop by -"", ""We can convert char to a string using 'while' loop by -"", 'To convert character to a string using std::string constructor, we simply pass the array to string constructor. ', ""To convert a character array into a string using the '=' operator and string class, we have to pass character array to string variable.""]",['The last method to convert char to string is achieved by using std::stringstream. We use this function to insert the input character into a buffer and then take the character from the buffer as a string using std::string.'],"['Characters are integer type in nature, their size is 1-byte and printable characters are (space), !, "" , #, $, %, &, \', (, ), *, +, ,, -, ., /, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, :, ;, <, =, >, ?, @, A, a, B, b, C, c, D, d, E, e, F, f, G, g, H, h, I, i, J, j, K, k, L, l, M, m, N, n, O, o, P, p, Q, q, R, r, S, s, T, t, U, u, V, v, W, w, X, x, Y, y, Z, z, [, \\, ], ^, _, `, {, |, }, ~ and DEL (delete).', ""First, declaring the Character Array and then assigning the size of the Array. Then, we declare two variables, one string type, and another int type. After this, we can use the 'for' loop by assigning 0 to the int variable where the int variable will have less value than array_size and we increase int variable value by one at every iteration. We have to store the value in the string variable on every iteration before displaying the string variable."", ""First declaring the Character Array and then assigning the size of the Array. Then, we declare two variables, one string type, and another int type with value 0. We use 'while' loop to check int variable less than array_size on every iteration and store the value in a string variable before displaying the string variable."", ""To convert character to a string using custom functions, we have to create a custom function with two parameters. Inside the custom function, we have to declare two variables string and integer. Then we use the 'for' loop, where we assign 0 to an int variable, int variable's size to be less than array_size, and int variable's value increasing by one at each iteration. The function will return the string. For the primary function, we declare the character array and its size, then we pass character array and its size to the custom function. At last, we print the string variable which stores the returned value of the custom function.""]","['""string-name.c_str();"".', '#include <iostream>', 'using namespace std;', 'int main()', ""char char_array[] = {'J','A','V','A','T','P','O','I','N','T'};"", 'int array_size = sizeof(char_array) /', 'sizeof(char);', 'string j = """";', 'int i;', 'for(i = 0; i < array_size; i++)', ""/** retrieving and merging the value of character array on position 'i'*/"", 'j = j + char_array[i];', 'cout << j <<endl;', '#include <iostream>', 'using namespace std;', 'int main()', ""char char_array[] = {'J','A','V','A','T','P','O','I','N','T'};"", 'int array_size = sizeof(char_array) / sizeof(char);', 'string j = """";', 'int i = 0;', 'while(i < array_size)', '/**retrieving and merging the value of character array on position `i`*/', 'j = j + char_array[i];', 'i++;', 'cout << j <<endl;', '#include <iostream>', 'using namespace std;', 'int main()', ""char char_array[] = {'J','A','V','A','T','P','O','I','N','T'};"", 'string j(char_array);', 'cout << j <<endl;', '#include <iostream>', 'using namespace std;', 'int main()', ""char char_array[] = {'J','A','V','A','T','P','O','I','N','T'};"", 'string j = char_array;', 'cout << j <<endl;', '#include <iostream>', 'using namespace std;', 'string charToString(char* arr_char, int arr_size)', 'int i;', 'string j = """";', 'for(i = 0; i < arr_size; i++)', 'j = j + arr_char[i];', 'return j;', 'int main() {', ""char char_array[] = {'J','A','V','A','T','P','O','I','N','T'};"", 'int array_size = sizeof(char_array) / sizeof(char);', 'string jtp = """";', 'jtp = charToString(char_array, array_size);', 'cout << jtp <<endl;', 'return 0;', '#include <iostream>', '#include <sstream>', 'int main()', ""char char_array[] = {'J','A','V','A','T','P','O','I','N','T'};"", 'std::string jtp;', 'std::stringstream strStream;', 'strStream << char_array;', 'strStream >> jtp;', 'std::cout << jtp;', 'return 0;']",[],[],"[""|||Using 'c_str()' and 'strcpy()' function|||using a 'for' loop|||'while' loop,|||'=' operator from the string class|||using custom function.|||""]"
119,['Calculator Program in C++'],"['A calculator is a portable device that helps to perform simple mathematical calculations in our daily lives such as addition, subtraction, division, multiplication, etc. Some of the scientific calculators are used to perform complex calculation more easily like square root, function, exponential operations, logarithm, trigonometric function and hyperbolic function, etc. In this section, we will create calculator program in C++ using function and do-while loop.']","['https://www.javatpoint.com/program-to-convert-infix-to-postfix-expression-in-cpp-using-the-stack-data-structure', 'https://www.javatpoint.com/char-array-to-string-in-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-functions', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-switch', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-do-while-loop', 'https://www.javatpoint.com/program-to-convert-infix-to-postfix-expression-in-cpp-using-the-stack-data-structure', 'https://www.javatpoint.com/char-array-to-string-in-cpp', 'https://www.javatpoint.com/program-to-convert-infix-to-postfix-expression-in-cpp-using-the-stack-data-structure']","['https://static.javatpoint.com/cpp/images/calculator-program-in-cpp.png', 'https://static.javatpoint.com/cpp/images/calculator-program-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/calculator-program-in-cpp3.png']",[],[],"['Using Function', 'Using do-while Loop']",[],"[""Lets' create a calculator program in C++ using the function and Switch statement."", 'Write a Calculator Program in the C++ using the do while and Switch Statement.']",[],[],"['#include<iostream.h>', '#include<stdio.h>', '#include<conio.h>', '#include<math.h>', '#include<stdlib.h>', 'void add();', 'void sub();', 'void multi();', 'void division();', 'void sqr();', 'void srt();', 'void exit();', 'void main()', 'clrscr();', 'int opr;', 'cout << ""Select any operation from the C++ Calculator""', '""\\n1 = Addition""', '""\\n2 = Subtraction""', '""\\n3 = Multiplication""', '""\\n4 = Division""', '""\\n5 = Square""', '""\\n6 = Square Root""', '""\\n7 = Exit""', '""\\n \\n Make a choice: "";', 'cin >> opr;', 'switch (opr)', 'case 1:', 'add();   // call add() function to find the Addition', 'break;', 'case 2:', 'sub();   // call sub() function to find the subtraction', 'break;', 'case 3:', 'multi(); // call multi() function to find the multiplication', 'break;', 'case 4:', 'division(); // call division() function to find the division', 'break;', 'case 5:', 'sqr(); // call sqr() function to find the square of a number', 'break;', 'case 6:', 'srt(); // call srt() function to find the Square Root of the given number', 'break;', 'case 7:', 'exit(0);   // terminate the program', 'break;', 'default:', 'cout <<""Something is wrong..!!"";', 'break;', 'cout <<"" \\n------------------------------\\n"";', '}while(opr != 7);', 'getch();', 'void add()', 'int n, sum = 0, i, number;', 'cout <<""How many numbers you want to add: "";', 'cin >> n;', 'cout << ""Please enter the number one by one: \\n"";', 'for (i = 1; i <= n; i++)', 'cin >> number;', 'sum = sum + number;', 'cout << ""\\n Sum of the numbers = ""<< sum;', 'void sub()', 'int num1, num2, z;', 'cout <<"" \\n Enter the First number = "";', 'cin >> num1;', 'cout << ""\\n Enter the Second number = "";', 'cin >> num2;', 'z = num1 - num2;', 'cout <<""\\n Subtraction of the number = "" << z;', 'void multi()', 'int num1, num2, mul;', 'cout <<"" \\n Enter the First number = "";', 'cin >> num1;', 'cout << ""\\n Enter the Second number = "";', 'cin >> num2;', 'mul = num1 * num2;', 'cout <<""\\n Multiplication of two numbers = "" << mul;', 'void division()', 'int num1, num2, div = 0;', 'cout <<"" \\n Enter the First number = "";', 'cin >> num1;', 'cout << ""\\n Enter the Second number = "";', 'cin >> num2;', 'while ( num2 == 0)', 'cout << ""\\n Divisor canot be zero""', '""\\n Please enter the divisor once again: "";', 'cin >> num2;', '}', 'div = num1 / num2;', 'cout <<""\\n Division of two numbers = "" << div;', 'void sqr()', 'int num1;', 'float sq;', 'cout <<"" \\n Enter a number to find the Square: "";', 'cin >> num1;', 'sq = num1 * num1;', 'cout <<"" \\n Square of "" << num1<< "" is : ""<< sq;', 'void srt()', 'float q;', 'int num1;', 'cout << ""\\n Enter the number to find the Square Root:"";', 'cin >> num1;', 'q = sqrt(num1);', 'cout <<"" \\n Square Root of "" << num1<< "" is : ""<< q;', '#include<iostream.h>', '#include<stdio.h>', '#include<conio.h>', '#include<stdlib.h>', 'void main()', 'clrscr();', 'int opr;', 'int num1, num2, x;', 'cout << ""Select an operation to perform a simple calculation in C++ Calculator""', '""\\n1 = Addition""', '""\\n2 = Subtraction""', '""\\n3 = Multiplication""', '""\\n4 = Division""', '""\\n5 = Square""', '""\\n6 = Exit""', '""\\n \\n Make a choice: "";', 'cin >> opr;', 'switch (opr)', 'case 1:', 'cout << ""You have selected the Addition Operation."";', 'cout << ""\\n Please enter the two number: \\n"";', 'cin >> num1 >> num2;', 'x = num1 + num2;', 'cout << ""Sum of two number = "" << x;', 'break;', 'case 2:', 'cout << ""You have selected the Subtraction Operation."";', 'cout << ""\\n Please enter the two number: \\n"";', 'cin >> num1 >> num2;', 'x = num1 - num2;', 'cout << ""Subtraction of two number = "" << x;', 'break;', 'case 3:', 'cout << ""You have selected the Multiplication Operation."";', 'cout << ""\\n Please enter the two number: \\n"";', 'cin >> num1 >> num2;', 'x = num1 * num2;', 'cout << ""Product of two number = "" << x;', 'break;', 'case 4:', 'cout << ""You have selected the Division Operation."";', 'cout << ""\\n Please enter the two number; \\n"";', 'cin >> num1 >> num2;', 'while ( num2 == 0)', 'cout << ""\\n Divisor cannot be zero""', '""\\n Please enter the divisor once again: "";', 'cin >> num2;', '}', 'x = num1 / num2;', 'cout << ""\\n Quotient = "" << x;', 'break;', 'case 5:', 'cout << ""You have selected the Square Operation."";', 'cout << ""\\n Please enter any number: \\n"";', 'cin >> num1;', 'x = num1 * num1;', 'cout << ""Square is = "" << x;', 'break;', 'case 6: exit(0);  // terminate the program', 'break;', 'default: cout << ""\\n Something went wrong..!!"";', 'break;', 'cout << ""\\n----------------------------------------- \\n"";', '} while(opr != 6);', 'getch();']",[],[],[]
120,['Program to convert infix to postfix expression in C++ using the Stack Data Structure'],"['An infix expression is an expression in which operators (+, -, *, /) are written between the two operands. For example, consider the following expressions:']","['https://www.javatpoint.com/cpp-program-to-merge-two-unsorted-arrays', 'https://www.javatpoint.com/calculator-program-in-cpp', 'https://www.javatpoint.com/cpp-program-to-merge-two-unsorted-arrays', 'https://www.javatpoint.com/calculator-program-in-cpp', 'https://www.javatpoint.com/cpp-program-to-merge-two-unsorted-arrays']",['https://static.javatpoint.com/cpp/images/program-to-convert-infix-to-postfix-expression-in-cpp-using-the-stack-data-structure.png'],[],[],"['Infix expression', 'Postfix Expression', 'Algorithm to Convert Infix to Postfix Expression Using Stack', 'Program to convert infix expression to postfix expression']",[],"[""Here we have written '+' operator between the operands A and B, and the - operator in between the C and D operand."", 'Following is the algorithm to convert infix expression into Reverse Polish notation.', ""Let's translate an infix expression into postfix expression in the stack:"", 'Here, we have infix expression (( A * (B + D)/E) - F * (G + H / K))) to convert into its equivalent postfix expression:', ""Let's create a C++ program that converts infix expression to the postfix expression""]","['The postfix operator also contains operator and operands. In the postfix expression, the operator is written after the operand. It is also known as Reverse Polish Notation. For example, consider the following expressions:']",[],"['A + B - C', '(A + B) + (C - D)', 'A B +', 'A B + C -', 'A B C * +', 'A B + C * D -', '#include<iostream>', '#include<stack>', 'using namespace std;', 'bool IsOperator(char);', 'bool IsOperand(char);', 'bool eqlOrhigher(char, char);', 'string convert(string);', 'int main()', 'string infix_expression, postfix_expression;', 'int ch;', 'cout << "" Enter an infix expression: "";', 'cin >> infix_expression;', 'postfix_expression = convert(infix_expression);', 'cout << ""\\n Your Infix expression is: "" << infix_expression;', 'cout << ""\\n Postfix expression is: "" << postfix_expression;', 'cout << ""\\n \\t Do you want to enter infix expression (1/ 0)?"";', 'cin >> ch;', '} while(ch == 1);', 'return 0;', '/* If the symbol is operator, it returns true, otherwise false. */', 'bool IsOperator(char c)', ""if(c == '+' || c == '-' || c == '*' || c == '/' || c == '^' )"", 'return true;', 'return false;', 'bool IsOperand(char c)', ""if( c >= 'A' && c <= 'Z')  /* Define the character in between A to Z. If not, it returns False.*/"", 'return true;', ""if (c >= 'a' && c <= 'z')  // Define the character in between a to z. If not, it returns False. */"", 'return true;', ""if(c >= '0' && c <= '9')   // Define the character in between 0 to 9. If not, it returns False. */"", 'return true;', 'return false;', 'int precedence(char op)', ""if(op == '+' || op == '-')                   /* it defines the lowest precedence */"", 'return 1;', ""if (op == '*' || op == '/')"", 'return 2;', ""if(op == '^')                                  /* exponent operator has the highest precedence *"", 'return 3;', 'return 0;', '/* The eqlOrhigher() function is used to check the higher or equal precedence of the two operators in infix expression. */', 'bool eqlOrhigher (char op1, char op2)', 'int p1 = precedence(op1);', 'int p2 = precedence(op2);', 'if (p1 == p2)', ""if (op1 == '^' )"", 'return false;', 'return true;', 'return  (p1>p2 ? true : false);', '/* string convert() function is used to convert the infix expression to the postfix expression of the Stack */', 'string convert(string infix)', 'stack <char> S;', 'string postfix ="""";', 'char ch;', ""S.push( '(' );"", ""infix += ')';"", 'for(int i = 0; i<infix.length(); i++)', 'ch = infix[i];', ""if(ch == ' ')"", 'continue;', ""else if(ch == '(')"", 'S.push(ch);', 'else if(IsOperand(ch))', 'postfix += ch;', 'else if(IsOperator(ch))', 'while(!S.empty() && eqlOrhigher(S.top(), ch))', 'postfix += S.top();', 'S.pop();', 'S.push(ch);', ""else if(ch == ')')"", ""while(!S.empty() && S.top() != '(')"", 'postfix += S.top();', 'S.pop();', 'S.pop();', 'return postfix;']",[],['Label No.|||Symbol Scanned|||Stack|||Expression&&&1|||(|||(|||&&&2|||(|||((|||&&&3|||A|||((|||A&&&4|||*|||((*|||A&&&5|||(|||((*(|||A&&&6|||B|||((*(|||AB&&&7|||+|||((*(+|||AB&&&8|||D|||((*(+|||ABD&&&9|||)|||((*|||ABD+&&&10|||/|||((*/|||ABD+&&&11|||E|||((*/|||ABD+E&&&12|||)|||(|||ABD+E/*&&&13|||-|||(-|||ABD+E/*&&&14|||(|||(-(|||ABD+E/*&&&15|||F|||(-(|||ABD+E/*F&&&16|||*|||(-(*|||ABD+E/*F&&&17|||(|||(-(*(|||ABD+E/*F&&&18|||G|||(-(*(|||ABD+E/*FG&&&19|||+|||(-(*(+|||ABD+E/*FG&&&20|||H|||(-(*(+|||ABD+E/*FGH&&&21|||/|||(-(*(+/|||ABD+E/*FGH&&&22|||K|||(-(*(+/|||ABD+E/*FGHK&&&23|||)|||(-(*|||ABD+E/*FGHK/+&&&24|||)|||(-|||ABD+E/*FGHK/+*&&&25|||)||||||ABD+E/*FGHK/+*-'],"[""|||Initialize the Stack.|||Scan the operator from left to right in the infix expression.|||If the leftmost character is an operand, set it as the current output to the Postfix string.|||And if the scanned character is the operator and the Stack is empty or contains the '(', ')' symbol, push the operator into the Stack.|||If the scanned operator has higher precedence than the existing precedence operator in the Stack or if the Stack is empty, put it on the Stack.|||If the scanned operator has lower precedence than the existing operator in the Stack, pop all the Stack operators. After that, push the scanned operator into the Stack.|||If the scanned character is a left bracket '(', push it into the Stack.|||If we encountered right bracket ')', pop the Stack and print all output string character until '(' is encountered and discard both the bracket.|||Repeat all steps from 2 to 8 until the infix expression is scanned.|||Print the Stack output.|||Pop and output all characters, including the operator, from the Stack until it is not empty.|||""]"
121,['C++ program to merge two unsorted arrays'],"['In this article, we will write a program to merge two unsorted arrays. The output is the sorted array in ascending order.']","['https://www.javatpoint.com/cpp-coin-change-program', 'https://www.javatpoint.com/program-to-convert-infix-to-postfix-expression-in-cpp-using-the-stack-data-structure', 'https://www.javatpoint.com/cpp-coin-change-program', 'https://www.javatpoint.com/program-to-convert-infix-to-postfix-expression-in-cpp-using-the-stack-data-structure', 'https://www.javatpoint.com/cpp-coin-change-program']",[],[],[],[],[],"['Input : a[] = {10, 5, 15}', 'b[] = {20, 3, 2}', 'Output : The merged array in sorted order {2, 3, 5, 10, 15, 20}', 'Input : a[] = {1, 10, 5, 15}', 'b[] = {20, 0, 2}', 'Output : The merged array in sorted order {0, 1, 2, 5, 10, 15, 20}', 'Approach 1', 'Time complexity ', 'O((n+m)log(n+m), where n and m are the sizes of the arrays', 'Space complexity ', 'Approach 2', 'Time Complexity:', 'O (nlogn + mlogm + (n + m)) // which is far better than approach 1', 'Space Complexity:', 'O ( (n + m) ) It remains same as the approach 1']",['The above approach can be optimised when we use the idea of first sorting then merging it to the third array. Sort both the arrays separately and merge them into the resultant array.'],"['The first approach that can be used here is to concatenate both the arrays and sort the concatenated array. We create a third array of the size of the first two arrays and then transfer all the elements of both the arrays into the resultant array. After the append operation, we sort the resultant array.']","['#include', 'using namespace std;', 'void sortedMerge(int a[], int b[], int res[],', 'int n, int m) // Merge two arrays in unsorted manner', 'int i = 0, j = 0, k = 0;', 'while (i < n) { // iterate in first array', 'res[k] = a[i]; // put each element in res array', 'i += 1;', 'k += 1;', 'while (j < m) { // iterate in the second array', 'res[k] = b[j]; // put each element in res array', 'j += 1;', 'k += 1;', 'sort(res, res + n + m); // sort the res array to get the sorted Concatenate', 'int main()', 'int a[] = { 10, 5, 15, 22, 100 };', 'int b[] = { 20, 3, 2, 12, 1, 7 };', 'int n = sizeof(a) / sizeof(a[0]); // find the size of array a', 'int m = sizeof(b) / sizeof(b[0]); // find the size of array b', 'int res[n + m]; // create res array to Concatenate both the array', 'sortedMerge(a, b, res, n, m); // call function to append and sort', 'cout << ""The sorted array is: "";', 'for (int i = 0; i < n + m; i++)', 'cout << "" "" << res[i];', 'cout << ""\\n"";', 'return 0;', '#include', 'using namespace std;', 'void sortedMerge(int a[], int b[], int res[],', 'int n, int m) // Merge two arrays in unsorted manner', 'sort(a, a + n); // Sort the array a', 'sort(b, b + m); // sort the array b', 'int i = 0, j = 0, k = 0;', 'while (i < n && j < m) { // After the array are sorted compare and merge to third array', 'if (a[i] <= b[j]) { // if element of a is less than b', 'res[k] = a[i]; // put element of a into the res and increment i', 'i += 1;', 'k += 1;', '} else {', 'res[k] = b[j]; // otherwise put the element  of b into the  res array and increment j', 'j += 1;', 'k += 1;', 'while (i < n) { // If array a elements are left in the array put in res', 'res[k] = a[i];', 'i += 1;', 'k += 1;', 'while (j < m) { // If array a elements are left in the array put in res', 'res[k] = b[j];', 'j += 1;', 'k += 1;', 'int main()', 'int a[] = { 10, 5, 15, 22, 100 };', 'int b[] = { 20, 3, 2, 12, 1, 7 };', 'int n = sizeof(a) / sizeof(a[0]); // find the size of array a', 'int m = sizeof(b) / sizeof(b[0]); // find the size of array b', 'int res[n + m]; // create res array to Concatenate both the array', 'sortedMerge(a, b, res, n, m); // call function to append and sort', 'cout << ""The sorted array is: "";', 'for (int i = 0; i < n + m; i++)', 'cout << "" "" << res[i];', 'cout << ""\\n"";', 'return 0;']","['The sorted array is:  1 2 3 5 7 10 12 15 20 22 100', 'The sorted array is:  1 2 3 5 7 10 12 15 20 22 100']",[],[]
122,['C++ coin change program'],"['In this article, we will see the most asked interview problem. The coin change problem is a good example of a dynamic programming approach. Now let us understand the problem statement.']","['https://www.javatpoint.com/cpp-program-to-add-two-complex-numbers-using-class', 'https://www.javatpoint.com/cpp-program-to-merge-two-unsorted-arrays', 'https://www.javatpoint.com/cpp-program-to-add-two-complex-numbers-using-class', 'https://www.javatpoint.com/cpp-program-to-merge-two-unsorted-arrays', 'https://www.javatpoint.com/cpp-program-to-add-two-complex-numbers-using-class']",[],[],[],[],[],"['Problem statement', 'Let us take a input array coins[] = {10, 25, 5}, total coins = 3', 'We have N = 30.', 'The output is two as we can use one 25 rupee coin and a 5 rupee coin to make 30. (25 + 5 = 30)', 'Similarly, coins[] = {1, 9, 6, 5}, total coins = 4', 'The output is three as we need two 6 rupees coins and one 1 rupee coin. (6 + 6 + 1 = 13)', 'Approach 1', 'The above solution does not work for more significant inputs. In this case, the recursive approach fails.', 'Now let us look at an optimized approach.', 'Approach 2', 'This approach uses the idea of bottom-up dynamic programming.']",['The time complexity of the code is O(total_coins + sum). This is a much-optimized approach because of storing the results at each stage and utilizing it on the other iterations.'],"['Given N and an array(say coins[]) that contains some numbers(coins in rupees). N is a coin, and the array contains various coins. The task is to make the change of N using the coins of the array. Make a change in such a way that a minimum number of coins are used.', 'The approach uses a recursive method. We start with N, and in each iteration, we divide the problem into smaller subproblems. This is done by taking every coin from the coins array and decrease it from N. The case where N comes to zero gives us the required solution. For an optimal answer, we return the minimum of all combinations.', 'Since subproblems are computed, again and again, there is a condition of overlapping subproblems. The problem of recomputation can be solved using the property of memoization, i.e., create a dp[] array that stores the computed values at a particular stage. At each stage calculate all the possible combinations. After all the combinations, the last value in the dp[] array gives us the answer.']","['#include', 'using namespace std;', 'int minCoins(int coins[], int total_coins, int N) // Function to return the minimum // coins needed', 'if (N == 0) // If we have a combination then', 'return 0;', 'int result = INT_MAX; // Currently result is initialised as INT_MAX', 'for (int i = 0; i < total_coins; i++) // run until availability of coins', 'if (coins[i] <= N) { // Add to the list of counting', 'int sub_res = 1 + minCoins(coins, total_coins, N - coins[i]); // add 1 due to the coin inclusion', 'if (sub_res < result)', 'result = sub_res;', '}', 'return result;', 'int main()', 'int coins[] = { 10, 25, 5 };', 'int sum = 30; // the money to convert', 'int total_coins = 3; // total availability of coins', 'cout << ""Minmum coins needed are "" << minCoins(coins, total_coins, sum);', '#include <bits/stdc++.h>', 'using namespace std;', 'int coins[] = { 10, 25, 5 }; // coins array', 'int dp[1000] = { 0 }; // array for memoisation', 'int minCoins(int N, int M) // N is the sum , M is total_coins', 'for (int i = 0; i <= N; i++)', 'dp[i] = INT_MAX; // Initialise all dp[] value to INT_MAX', 'dp[0] = 0; // Base case if sum becomes zero min rupees = 0', 'for (int i = 1; i <= N; i++) {', 'for (int j = 0; j < M; j++) {', 'if (coins[j] <= i) {', 'dp[i] = min(dp[i], 1 + dp[i - coins[j]]);', '}', '}', 'return dp[N];', 'int main()', 'int sum = 30; // the money to convert', 'int total_coins = 3; // total availability of coins', 'cout << ""Minimum coins needed are "" << minCoins(sum, total_coins);']","['Minimum coins needed are 2', 'Minimum coins needed are 2']",[],[]
123,['C++ program to add two complex numbers using class'],"['In this article, we will write a program to add two complex numbers (a1 + ib1) and (a2 + ib2) using class.']","['https://www.javatpoint.com/cpp-program-to-find-the-gcd-of-two-numbers', 'https://www.javatpoint.com/cpp-coin-change-program', 'https://www.javatpoint.com/cpp-program-to-find-the-gcd-of-two-numbers', 'https://www.javatpoint.com/cpp-coin-change-program', 'https://www.javatpoint.com/cpp-program-to-find-the-gcd-of-two-numbers']",[],[],"['Class construction', 'Constructors', 'Algorithm']",[],[],"['For example', 'Input: 4 + i5 and 8 + i9', 'Here a1= 4 and a2 = 8. On adding a1 and a2, we get (8 + 4) = 12', 'Further, b1 = 5 and b2 = 9. On adding b1 and b2, we get (5 + 9) = 14', 'Output: 9 + i14', 'Input: 2 + i7 and 10 + i6', 'Here a1= 2 and a2 = 10. On adding a1 and a2, we get (2 + 10) = 12', 'Further, b1 = 7 and b2 =6. On adding b1 and b2, we get (7 + 6) = 13', 'Output: 12 + i13', 'We need two data members to represent the complex numbers. ', 'Below is the class structure:', 'Two constructors will be made to initialize the data members of the class Complex.', 'We need a non - parameterized constructor to initialize the default values of the data members to zero.', 'Below is the structure of non-parameterized constructor', 'We need a non-parameterized constructor to initialize the data members to the value passed by the main function.', 'Below is the structure of parameterized constructor']","['At first, we will create a class for complex numbers. The observation shows that there is a real number(a1) and an imaginary number(b1) in a complex number.', 'For adding two complex numbers, we will make two objects of the Complex class and initialize them with the values. After that, we will make a third object that will store the result.']",[],"['class Complex', 'public:', 'int real; // To store real part of complex number', 'int imaginary; // To store imaginary part of complex number', 'Complex()', 'real = 0;', 'imaginary = 0;', 'Complex(int r, int i)', 'real = r; // r is initialized during object creation', 'imaginary = i; // i is initialized during object creation', '#include', 'using namespace std;', 'class Complex {', 'public:', 'int real; // To store real part of complex number', 'int imaginary; // To store imaginary part of complex number', 'Complex()', 'real = 0;', 'imaginary = 0;', 'Complex(int r, int i)', 'real = r; // r is initialized during object creation', 'imaginary = i; // i is initialized during object creation', 'Complex addComplexNumber(Complex C1, Complex C2)', 'Complex res; // result object of complex class', 'res.real = C1.real + C2.real;', 'res.imaginary = C1.imaginary + C2.imaginary;', 'return res;', 'int main()', 'Complex C1(4, 5);', 'cout << ""Complex number 1 : "" << C1.real', '<< "" + i"" << C1.imaginary << endl;', 'Complex C2(8, 9);', 'cout << ""Complex number 2 : "" << C2.real', '<< "" + i"" << C2.imaginary << endl;', 'Complex C3;', 'C3 = C3.addComplexNumber(C1, C2);', 'cout << ""Sum of complex number : ""', '<< C3.real << "" + i""', '<< C3.imaginary;', 'cout << endl', '<< endl;', 'Complex A(2, 7);', 'cout << ""Complex number 1 : "" << A.real', '<< "" + i"" << A.imaginary << endl;', 'Complex B(10, 6);', 'cout << ""Complex number 2 : "" << B.real', '<< "" + i"" << B.imaginary << endl;', 'Complex C;', 'C = C.addComplexNumber(A, B);', 'cout << ""Sum of complex number : ""', '<< C.real << "" + i""', '<< C.imaginary;']","['Complex number 1 : 4 + i5', 'Complex number 2 : 8 + i9', 'Sum of complex number : 12 + i14', 'Complex number 1 : 2 + i7', 'Complex number 2 : 10 + i6', 'Sum of complex number : 12 + i13', 'Time complexity', 'The time complexity is O(1) as we have to call the function addComplexNumber() to add the two complex numbers.']",[],['|||Non - Parameterized constructor||||||Parameterized constructor|||']
124,['C++ program to find the GCD of two numbers'],"['In this tutorial, we will write a c++ program to find the GCD of two numbers.']","['https://www.javatpoint.com/cpp-program-to-find-greatest-of-four-numbers', 'https://www.javatpoint.com/cpp-program-to-add-two-complex-numbers-using-class', 'https://www.javatpoint.com/cpp-program-to-find-greatest-of-four-numbers', 'https://www.javatpoint.com/cpp-program-to-add-two-complex-numbers-using-class', 'https://www.javatpoint.com/cpp-program-to-find-greatest-of-four-numbers']",[],[],[],[],[],"['GCD (Greatest common divisor) is also known as HCF (Highest Common Factor).', 'For example', '36 = 2 * 2 * 3 * 3', '60 = 2 * 2 * 3 * 5', 'The highest common factor of the two numbers is 2, 2, and 3.', 'So, the HCF of two numbers is 2 * 2 * 3 = 12', '20 = 2 * 2 * 5', '28 = 2 * 2 * 7', 'The highest common factor of the two numbers is 2 and 2.', 'So, the HCF of two numbers is 2 * 2 = 4.', 'Approach 1', 'The problem can be solved by finding all the prime factors of the two numbers and then find common factors and return their product.', 'Approach 2', 'Approach 3', 'Approach two can be optimized further to use a modulo operator instead of subtraction.']",['Approach 1 can be solved in an efficient way using the Euclidean algorithm. This algorithm follows the idea that GCD does not change if the smaller number gets subtracted from the larger one.'],[],"['#include', '#define MAXFACTORS 1024 // Let us consider max factors can be 1024', 'using namespace std;', 'typedef struct', 'int size;', 'int factor[MAXFACTORS + 1];', 'int exponent[MAXFACTORS + 1];', '} FACTORIZATION;', 'void FindFactorization(int x, FACTORIZATION* factorization)', 'int i, j = 1;', 'int n = x, c = 0;', 'int k = 1;', 'factorization->factor[0] = 1;', 'factorization->exponent[0] = 1;', 'for (i = 2; i <= n; i++) {', 'c = 0;', 'while (n % i == 0) {', 'c++;', 'n = n / i;', 'if (c > 0) {', 'factorization->exponent[k] = c;', 'factorization->factor[k] = i;', 'k++;', 'factorization->size = k - 1;', 'int gcdMiddleSchoolProcedure(int m, int n)', 'FACTORIZATION mFactorization, nFactorization;', 'int r, mi, ni, i, k, x = 1, j;', 'FindFactorization(m, &mFactorization);', 'FindFactorization(n, &nFactorization);', 'int min;', 'i = 1;', 'j = 1;', 'while (i <= mFactorization.size && j <= nFactorization.size) {', 'if (mFactorization.factor[i] < nFactorization.factor[j])', 'i++;', 'else if (nFactorization.factor[j] < mFactorization.factor[i])', 'j++;', 'else /* if arr1[i] == arr2[j] */', 'min = mFactorization.exponent[i] > nFactorization.exponent[j]', '? nFactorization.exponent[j]', ': mFactorization.exponent[i];', 'x = x * mFactorization.factor[i] * min;', 'i++;', 'j++;', 'return x;', 'int main()', 'int m = 36, n = 60;', 'cout << ""GCD of "" << m << "" and "" << n << "" is ""', '<< gcdMiddleSchoolProcedure(m, n);', 'return (0);', '#include <iostream>', 'using namespace std;', 'int gcd(int a, int b) // The function runs recursive in nature to return GCD', 'if (a == 0) // If a becomes zero', 'return b; // b is the GCD', 'if (b == 0)// If b becomes zero', 'return a;// a is the GCD', 'if (a == b) // The case of equal numbers', 'return a; // return any one of them', 'if (a > b) // if a is greater subtract b', 'return gcd(a-b, b);', 'return gcd(a, b-a); //otherwise subtract a', 'int main()', 'int a = 36, b = 60;', 'cout<<""GCD of ""<<a<<"" and ""<<b<<"" is ""<<gcd(a, b);', 'return 0;', '#include <iostream>', 'using namespace std;', 'int gcd(int a, int b) // The function runs recursive in nature to return GCD', 'if (b == 0) // if b becomes 0 return a', 'return a;', 'return gcd(b, a % b); // divide to a by b to make smaller number', 'int main()', 'int a = 60, b = 36;', 'cout<<""GCD of ""<<a<<"" and ""<<b<<"" is ""<<gcd(a, b);', 'return 0;']","['GCD of 36 and 60 is 12', 'GCD of 36 and 60 is 12', 'GCD of 60 and 36 is 12']",[],['|||Find the factors of the first number|||Find the factors of the second number|||Find common factors of both numbers|||Multiply them to get GCD|||']
125,['C++ program to find greatest of four numbers'],"['In this tutorial, we will write a C++ program to find the greatest of four numbers.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/cpp-program-to-find-the-gcd-of-two-numbers', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/cpp-program-to-find-the-gcd-of-two-numbers', 'https://www.javatpoint.com/#']",[],[],[],[],[],"['For example', 'a = 10, b = 50, c = 20, d = 25', 'The greatest number is b 50', 'a = 35, b = 50, c = 99, d = 2', 'The greatest number is c 99', 'Approach 1', 'Approach 2', 'This approach uses the inbuilt max function.', 'Here is the syntax of max function', 'template constexpr const T& max (const T& a, const T& b);', 'Here, a and b are the numbers to be compared.', 'Return: Larger of the two values.', 'For example', 'std :: max(2,5) will return 5', 'So, to find out the maximum of 4 numbers, we can use chaining of a max function as follows -', 'int x = max(a, max(b, max(c, d)));']","['The approach is the traditional way of searching for the greatest among four numbers. The if condition checks whether a is greater and then use if-else to check for b, another if-else to check for c, and the last else to print d as the greatest.']",[],"['#include', 'using namespace std;', 'void find_greatest(int a, int b, int c, int d)', 'if (a > b) {', 'if (a > c) {', 'if (a > d) {', 'cout << ""a is greatest"";', '}', 'else {', 'cout << ""d is greatest"";', '}', '}', 'else if (b > c) {', 'if (b > d) {', 'cout << ""b is greatest"";', '}', 'else {', 'cout << ""d is greatest"";', '}', 'else if (c > d) {', 'cout << ""c is greatest"";', 'else {', 'cout << ""d is greatest"";', 'int main()', 'int a = 10, b = 50, c = 20, d = 25;', 'cout << ""a="" << a << "" b="" << b << "" c="" << c << "" d="" << d;', 'cout << ""\\n"";', 'find_greatest(a, b, c, d);', 'a = 35, b = 50, c = 99, d = 2;', 'cout << ""\\n"";', 'cout << ""a="" << a << "" b="" << b << "" c="" << c << "" d="" << d;', 'cout << ""\\n"";', 'find_greatest(a, b, c, d);', 'return 0;', '#include', 'using namespace std;', 'void find_greatest(int a, int b, int c, int d)', 'int x = max(a, max(b, max(c, d)));', 'if (x == a)', 'cout << ""a is greatest"";', 'if (x == b)', 'cout << ""b is greatest"";', 'if (x == c)', 'cout << ""c is greatest"";', 'if (x == d)', 'cout << ""d is greatest"";', 'int main()', 'int a = 10, b = 50, c = 20, d = 25;', 'cout << ""a="" << a << "" b="" << b << "" c="" << c << "" d="" << d;', 'cout << ""\\n"";', 'find_greatest(a, b, c, d);', 'a = 35, b = 50, c = 99, d = 2;', 'cout << ""\\n"";', 'cout << ""a="" << a << "" b="" << b << "" c="" << c << "" d="" << d;', 'cout << ""\\n"";', 'find_greatest(a, b, c, d);', 'return 0;']","['a=10 b=50 c=20 d=25', 'b is greatest', 'a=35 b=50 c=99 d=2', 'c is greatest', 'a=10 b=50 c=20 d=25', 'b is greatest', 'a=35 b=50 c=99 d=2', 'c is greatest']",[],"['|||START|||INPUT FOUR NUMBERS A, B, C, D|||IF A > B THEN|||IF A > C THEN|||IF A > D THEN|||A IS THE GREATEST|||ELSE|||D IS THE GREATEST|||ELSE IF B > C THEN|||IF B > D THEN|||B IS THE GREATEST|||ELSE|||D IS THE GREATEST|||ELSE IF C > D THEN|||C IS THE GREATEST|||ELSE|||D IS THE GREATEST|||']"
126,['Delete Operator in C++'],"['A delete operator is used to deallocate memory space that is dynamically created using the new operator, calloc and malloc() function, etc., at the run time of a program in C++ language. In other words, a delete operator is used to release array and non-array (pointer) objects from the heap, which the new operator dynamically allocates to put variables on heap memory. We can use either the delete operator or delete [ ] operator in our program to delete the deallocated space. A delete operator has a void return type, and hence, it does not return a value. ']","['https://www.javatpoint.com/how-to-concatenate-two-strings-in-cpp', 'https://www.javatpoint.com/convert-string-to-integer-in-cpp', 'https://www.javatpoint.com/how-to-concatenate-two-strings-in-cpp', 'https://www.javatpoint.com/convert-string-to-integer-in-cpp', 'https://www.javatpoint.com/how-to-concatenate-two-strings-in-cpp']",['https://static.javatpoint.com/cpp/images/delete-operator-in-cpp.png'],[],[],"['Syntax of delete operator', 'Program to deallocate memory location of each variable using the delete operator', 'Program to delete the array object using the delete [] operator', 'Program to delete NULL pointer using delete operator', 'Delete a pointer with or without value using the delete operator', 'Program to allocate dynamic memory using the malloc function and then delete using the delete operator', 'Program to delete variables of user defined data types', 'Program to delete a void pointer using the delete operator']",[],"['We can delete a specific element or variable using the delete operator, as shown:', 'Similarly, we can delete the block of allocated memory space using the delete [] operator.', ""Let's consider an example to delete the allocated memory space of each variable from the heap memory using the delete operator."", 'Program1.cpp', ""Let's create a program to delete the dynamically created memory space for an array object using the delete [] operator in C++."", 'Program2.cpp', ""Let's consider a program to delete NULL pointer using the delete operator in C++ programming language."", 'Program3.cpp', ""Let's consider an example to delete a pointer variable with or without a value using the delete operator in C++."", 'Program4.cpp', 'Program6.cpp', ""Let's write a program to demonstrate the deletion of user defined object using the delete operator."", 'Program7.cpp', ""Let's create a program to release the memory space of the void pointer using the delete operator in C++."", 'Program8.cpp']","[""Let's consider an example of creating dynamic memory using the malloc function and then using the delete operator to delete allocated memory in the C++ programming language.""]",[],"['delete pointer_variable;', 'delete [ ] pointer_variable;', '#include', 'using namespace std;', 'int main ()', 'int *ptr1, *ptr2, sum;', 'ptr1 = new int;', 'ptr2 = new int;', 'cout << "" Enter first number: "";', 'cin >> *ptr1;', 'cout << "" Enter second number: "";', 'cin >> *ptr2;', 'sum = *ptr1 + *ptr2;', 'cout << "" Sum of pointer variables = "" << sum;', 'delete ptr1;', 'delete ptr2;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'int *arr, max_num, i;', 'cout << "" Enter total number of elements to be entered : "";', 'cin >>max_num;', 'arr = new int [max_num];', 'cout << "" Enter the numbers: \\n"";', 'for (i = 0; i< max_num; i++)  // input array from user', 'cout << "" Number "" << i+1 << "" is "";', 'cin >> arr[i];', 'cout <<"" Numbers are : "";', 'for (i = 0; i < max_num; i++)', 'cout << arr[i] << ""\\t"";', 'delete [ ] arr;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'int *ptr = NULL;', 'delete ptr;', 'cout << "" The NULL pointer is deleted."";', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'int *ptr = new int;', 'int *ptr2 = new int (10);', 'cout << "" The value of ptr is: ""<< *ptr << "" \\n "";', 'cout << "" The value of ptr2 is: ""<< *ptr2 << "" \\n "";', 'delete ptr;', 'delete ptr2;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'char *str = (char *) malloc (sizeof (char));', 'cout << "" Dynamic memory is deleted using the delete operator. "" << endl;', 'delete str; // use delete operator to delete the referencing pointer', 'return 0;', '#include', 'using namespace std;', 'struct Ptr', 'static void operator delete (void *ptr1, std::size_t sz)', 'cout << "" Custom deletion of size "" << sz <', '#include', 'using namespace std;', 'int main ()', 'void *str;', 'cout << "" The void pointer is deleted using the delete operator. "" <']","['Enter first number: 5', 'Enter second number: 8', 'Sum of pointer variables = 13', 'Enter total number of elements to be entered : 7', 'Enter the numbers:', 'Number 1 is 45', 'Number 2 is 600', 'Number 3 is 78', 'Number 4 is 93', 'Number 5 is 29', 'Number 6 is 128', 'Number 7 is 32', 'Numbers are : 45       600     78      93      29      128     32', 'The NULL pointer is deleted.', 'The value of ptr is: 1415071048', 'The value of ptr2 is: 10', 'Dynamic memory is deleted using the delete operator.', 'Custom deletion of size 1', 'Custom deletion of size 24', 'The void pointer is deleted using the delete operator.']",[],[]
127,['How to concatenate two strings in c++?'],"['This section will discuss the concatenation of two or more strings in the C++ programming language. The concatenation of the string means the group of characters that combines two more strings to return a concatenated single string. While concatenating the strings, the second string is added at the end of the first string to make a single string.']","['https://www.javatpoint.com/upcasting-and-downcasting-in-cpp', 'https://www.javatpoint.com/delete-operator-in-cpp', 'https://www.javatpoint.com/upcasting-and-downcasting-in-cpp', 'https://www.javatpoint.com/delete-operator-in-cpp', 'https://www.javatpoint.com/upcasting-and-downcasting-in-cpp']",['https://static.javatpoint.com/cpp/images/how-to-concatenate-two-strings-in-cpp.png'],[],[],"['Program to concatenate two strings using for loop', 'Program to concatenate two strings using while loop', 'Program to concatenate two strings using the + operator in C++', 'Program to concatenate two strings using the strcat() method', 'Program to concatenate two strings using the append function', 'Program to concatenate two string using the inheritance of the class', 'Program to concatenate two strings using the friend function and strcat() function']",[],"[""For example, we have two strings, 'Java' and 'Tpoint', and we want to concatenate to make a single string as Java + Tpoint = JavaTpoint."", ""Let's discuss the different ways to concatenate the given string in the C++ programming language. "", ""Let's consider an example to combine two strings using for loop in the C++ programming."", 'Program.cpp', ""Let's consider an example to combine two strings using a while loop in C++ programming."", 'Program2.cpp', ""+ Operator: It is an arithmetic '+'operator that simply adds two strings to return a new concatenated string."", ""Let's consider an example to combine two strings using the + operator in C++ programming."", 'Program3.cpp', 'strcat() function: The strcat is an inbuilt function of the string class, which adds two character strings to return a concatenated string.', 'There are two character arrays in the above syntax, arr1 and arr2, which passed inside the strcat() function to return a concatenated string.', ""Let's consider an example to combine two strings using strcat() function in the C++ programming."", 'Program4.cpp', 'In the above syntax, the str2 is a second string to pass in the append() function that inserts the str2 string at the end of the str1 string.', ""Let's consider an example to combine two strings using append() function in the C++ programming."", 'Program5.cpp', ""Let's consider an example to combine two strings using inheritance in the C++ programming."", 'Program6.cpp', ""Let's consider an example to combine two strings using friend function and strcat() function in the C++ programming."", 'Program7.cpp']",['append() function: An append() function is a predefined library function used to insert or add a second string at the end of the first string to return a single string.'],[],"['#include', 'using namespace std;', 'int main ()', 'string str1, str2, result; // declare string variables', 'cout <<""  Enter the first string: "";', 'cin >> str1; // take string', 'cout << ""  Enter the second string: "";', 'cin >> str2; // take second string', 'for ( i = 0; i < str1.size(); i++)', 'result = result + str1[i]; // add character of the str1 into result', 'for ( i = 0; i < str2.size(); i++)', 'result = result + str2[i]; // add character of the str2 into result', 'cout << "" The Concatenation of the string "" << str1 << "" and "" << str2 << "" is "" <', '#include', 'using namespace std;', 'int main ()', 'char str1[100] = "" We Love"";', 'char str2[100] = "" C++ Programming Language"";', 'int i, j; // declare variable', 'cout << "" The first string is: "" << str1 << endl;', 'cout << "" The second string is: ""<< str2 <', '#include', 'using namespace std;', 'int main ()', 'string str1, str2; // declare string variables', 'cout << "" Enter the first string: "";', 'cin >> str1;', 'cout << ""\\n Enter the second string: "";', 'cin >> str2;', 'string result = str1 + str2;', 'cout << "" The concatenated string "" << str1 << "" and "" << str2 <<"" is: "" << result;', 'return 0;', 'strcat ( char *arr1, char *arr2)', '#include', '#include', 'using namespace std;', 'int main()', 'char str1[] = "" We love"";', 'char str2[] = "" C++ Programming"";', 'cout << "" String 1: "" <', 'str1.append(str2);', '#include', 'using namespace std;', 'int main ()', 'string str1, str2, result; // declare string variables', 'cout <<""  Enter the first string: "";', 'cin >> str1; // take string', 'cout << ""  Enter the second string: "";', 'cin >> str2; // take second string', 'str1.append(str2);', 'cout << "" \\n The concatenation of the string is: ""<< str1;', 'return 0;', '#include', '#include', 'using namespace std;', 'class base', 'protected:', 'virtual string concatenate(string &str1, string &str2) = 0;', 'class derive: protected base {', 'public:', 'string concatenate (string &str1, string &str2) {', 'string temp;', 'temp = str1 + str2;', 'return temp;', 'int main()', 'string str1, str2;', 'cout <<"" Enter first string: "";', 'cin >>str1;', 'cout <<"" \\n Enter second string: "";', 'cin >>str2;', 'derive obj;', 'cout <<"" \\n The concatenated string is: "" << obj.concatenate (str1, str2);', 'return 0;', '#include', '#include', 'using namespace std;', 'class Base {', 'private:', 'char st[100], st2[100];', 'public:', 'void inp()', 'cout <<"" Enter the first string: "";', 'cin.getline (st, 100); // take a line of string with limit 100', 'cout <<"" Enter the second string: "";', 'cin.getline (st2, 100); // take a line of string with limit 100', 'friend void myfun(Base b);', 'void myfun (Base b)', 'strcat (b.st, b.st2); // pass parameter to concatenate', 'cout <<"" The concatenated string: "" <']","['Enter the first string: Java', 'Enter the second string: Tpoint', 'The Concatenation of the string Java and Tpoint is JavaTpoint', 'The first string is:  We Love', 'The second string is:  C++ Programming Language', 'The concatenated string is:  We Love C++ Programming Language', 'Enter the first string: Java', 'Enter the second string: Tpoint', 'The concatenated string Java and Tpoint is: JavaTpoint', 'String 1:  We love', 'String 2: C++ Programming', 'The concatenated string is:  We love C++ Programming', 'Enter the first string: Hello', 'Enter the second string: Friends!', 'The concatenation of the string is: HelloFriends!', 'Enter first string: C++', 'Enter second string: Programming', 'The concatenated string is: C++Programming', 'Enter the first string: javatpoint', 'Enter the second string: .com', 'The concatenated string: javatpoint.com']",[],['|||Concatenate two strings using for loop|||Concatenate two strings using while loop|||Concatenate two strings using the + operator|||Concatenate two strings using the strcat() function|||Concatenate two strings using the append() function|||Concatenate two strings using inheritance|||Concatenate two strings using friend function and strcat() function|||']
128,['Upcasting and Downcasting in C++'],"['This section will discuss Upcasting and Downcasting with an example in the C++ programming language. When we convert one data type into another type, the process is called typecasting. But the, Upcasting and downcasting are the types of object typecasting. Suppose the Parent and Child class has two types of object, parent_obj and child_obj, which can be cast into the Parent to Child and Child to Parent using the Upcasting and Downcasting in C++ programming.']","['https://www.javatpoint.com/cpp-dijkstra-algorithm-using-priority-queue', 'https://www.javatpoint.com/how-to-concatenate-two-strings-in-cpp', 'https://www.javatpoint.com/cpp-dijkstra-algorithm-using-priority-queue', 'https://www.javatpoint.com/how-to-concatenate-two-strings-in-cpp', 'https://www.javatpoint.com/cpp-dijkstra-algorithm-using-priority-queue']",['https://static.javatpoint.com/cpp/images/upcasting-and-downcasting-in-cpp.png'],[],"['Upcasting', 'Downcasting']","['Program to demonstrate the Upcasting in C++', 'Program to demonstrate the downcasting in C++', 'Program to demonstrate the upcasting and the downcasting in C++']",[],"[""Let's consider an example to convert the derived class's pointer to the base class's pointer in the C++ programming language."", 'Program1.cpp', ""Let's create an example to downcast the base class's object to the derived class in the C++ programming language."", 'Program2.cpp', 'Program3.cpp']","['The derived class can inherit all the base class properties that include data members and the member function to execute the function using the derived class object, as we do with a base object.', ""Let's consider an example to use the downcasting and the upcasting in C++ to convert the base class to derive and the derived class's object to the base class.""]","[""It is the process to create the derived class's pointer or reference from the base class's pointer or reference, and the process is called Upcasting. It means the upcasting used to convert the reference or pointer of the derived class to a base class. Upcasting is safe casting as compare to downcasting. It allows the public inheritance that implicitly cast the reference from one class to another without an explicit typecast. By default, the upcasting create is-a relationship between the base and derived classes."", ""The Downcasting is an opposite process to the upcasting, which converts the base class's pointer or reference to the derived class's pointer or reference. It manually cast the base class's object to the derived class's object, so we must specify the explicit typecast. The downcasting does not follow the is- a relation in most of the cases. It is not safe as upcasting. Furthermore, the derived class can add new functionality such as; new data members and class member's functions that use these data members. Still, these functionalities could not apply to the base class.""]","['Base *ptr = &derived_obj;', '#include', 'using namespace std;', 'class Base', 'public:', 'void disp()', 'cout << "" It is the Super function of the Base class "";', 'class derive : public Base', 'public:', 'void disp()', 'cout << ""\\n It is the derive class function "";', 'int main ()', 'Base *ptr;', 'derive obj; // create object of derive class', 'ptr = &obj // assign the obj address to ptr variable', 'Base &ref = obj;', 'ptr->disp();', 'return 0;', 'Derived *d_ptr = &b_obj;', '#include', 'using namespace std;', 'class Parent', 'public:', 'void base()', 'cout << "" It is the function of the Parent class ""<< endl;', 'class Child : public Parent', 'public:', 'void derive()', 'cout << "" it is the function of the Child class "" < derive();', 'return 0;', '#include', 'using namespace std;', 'class Parent {', 'private:', 'int id;', 'public:', 'void showid ()', 'cout << "" I am in the Parent class "" << endl;', 'class Myson : public Parent {', 'public:', 'void disp ()', 'cout << "" I am in the Myson class "" << endl;', 'int main ( int argc, char * argv[])', 'Parent par_obj;', 'Myson my_obj;', ""Parent *ptr1 = &my_obj; // base class's reference the derive class's object"", 'Myson *ptr2 = (Myson *) ∥_obj;', 'ptr1->showid();', 'ptr2->showid();', 'ptr2->disp();', 'getchar();', 'return 0;']","['It is the Super function of the Base class', 'It is the function of the Child class', 'I am in the Parent class', 'I am in the Parent class', 'I am in the Myson class']",[],[]
129,['C++ Dijkstra Algorithm using the priority queue'],"['In this article, we will see the implementation of the Dijkstra algorithm using the priority queue of C++ STL. Dijkstra algorithm is used to find the shortest path from the source to the destination in an undirected graph.']","['https://www.javatpoint.com/constructor-overloading-in-cpp', 'https://www.javatpoint.com/upcasting-and-downcasting-in-cpp', 'https://www.javatpoint.com/constructor-overloading-in-cpp', 'https://www.javatpoint.com/upcasting-and-downcasting-in-cpp', 'https://www.javatpoint.com/constructor-overloading-in-cpp']",['https://static.javatpoint.com/cpp/images/cpp-dijkstra-algorithm-using-the-priority-queue.png'],[],"['Create graph structure', 'How to add an edge to the graph?', 'Algorithm', 'C++ code']",[],[],"['A graph having weight on the edges is given as below:', 'Let us consider a source vertex 0, we have to find the shortest path from the source vertex to all the vertices in the graph.', 'Source vertex = 0', 'We will create a class Graph with data members as', 'list> *adj;', 'Constructors:', 'We need a constructor to allocate the memory of the adjacency list.', 'The list of pairs created has two arguments. One will contain the vertex, and the other will contain the weight associated with it.', 'As the graph is bidirectional, we can add the same weight to the opposite vertex.']",[],[],"['Graph(int vertex)', 'this->V = vertex; // Allocate the number of vertices', 'adj = list [vertex]; // Allocate memory for adjacency list', 'void addanEdge(int u, int v, int w)', 'adj[u].push_back(make_pair(v,w)); // add v to w', 'adj[v].push_back(make_pair(u,w)); add w to v', '#include', 'using namespace std;', '#define INF 0x3f3f3f3f // The distance to other vertices is initialized as infinite', 'typedef pair iPair;', 'class Graph // Graph structure', 'int V; // No. of vertices in the graph', 'list>* adj; // the list of pair to store vertex and its weight', 'public:', 'Graph(int V) // allocate the vertex memory', 'this->V = V; // assign the vertex', 'adj = new list[V]; // allocate space for vertices', 'void addEdge(int u, int v, int w); // add edges in the graph', 'void shortestPathingraph(int s); // pass source vertex', 'void Graph::addEdge(int u, int v, int w) // add an edge', 'adj[u].push_back(make_pair(v, w)); // make a pair of vertex and weight and // add it to the list', 'adj[v].push_back(make_pair(u, w)); // add oppositely by making a pair of weight and vertex', 'void Graph::shortestPathingraph(int src) // src is the source vertex', 'priority_queue, greater> pq;', 'vector dist(V, INF); // All distance from source are infinite', 'pq.push(make_pair(0, src)); // push spurce node into the queue', 'dist[src] = 0; // distance of source will be always 0', 'while (!pq.empty()) { // While queue is not empty', 'int u = pq.top().second;', 'pq.pop();', 'list>::iterator i;', 'for (i = adj[u].begin(); i != adj[u].end(); ++i) {', 'int v = (*i).first;', 'int weight = (*i).second;', 'if (dist[v] > dist[u] + weight) {', 'dist[v] = dist[u] + weight;', 'pq.push(make_pair(dist[v], v));', '}', '}', 'printf(""Vertex \\tDistance from Source\\n""); // Print the result', 'for (int i = 0; i < V; ++i)', 'printf(""%d \\t\\t %d\\n"", i, dist[i]); // The shortest distance from source', 'int main()', 'int V = 9; // vertices in given graph are 9', 'Graph g(V); //  call Constructor by creating an object of graph', 'g.addEdge(0, 1, 4); // add root node with neighour vertex and weight', 'g.addEdge(0, 7, 8);', 'g.addEdge(1, 2, 8);', 'g.addEdge(1, 7, 11);', 'g.addEdge(2, 3, 7);', 'g.addEdge(2, 8, 2);', 'g.addEdge(2, 5, 4);', 'g.addEdge(3, 4, 9);', 'g.addEdge(3, 5, 14);', 'g.addEdge(4, 5, 10);', 'g.addEdge(5, 6, 2);', 'g.addEdge(6, 7, 1);', 'g.addEdge(6, 8, 6);', 'g.addEdge(7, 8, 7);', 'g.shortestPathingraph(0); // call the function to find shortest path of graph', 'return 0; // end of main function()']","['Vertex   Distance from Source', '0 \t\t   0', '1 \t\t   4', '2 \t\t  12', '3 \t\t  19', '4 \t\t  21', '5 \t\t  11', '6 \t\t   9', '7 \t           8', '8 \t\t  14']",['Vertex|||Distance from source&&&0||||||0|||Same source and destination|||&&&1||||||4|||Directly goes to 1|||&&&2||||||12|||Path: 0 ->1 -> 2|||(8 + 4 = 12)|||&&&3||||||19|||Path: 0 ->1 -> 2 -> 3|||(8 + 4 + 7 = 19)|||&&&4||||||21|||Path: 0 -> 7 -> 6 -> 5 -> 4|||(8 + 1 + 2 + 10 = 21)|||&&&5||||||11|||Path: 0 -> 7 -> 6 -> 5|||(8 + 1 + 2 = 11)|||&&&6||||||9|||Path: 0 -> 7 -> 6|||(8 + 1 = 9)|||&&&7||||||8|||Path: 0 -> 7|||&&&8||||||14|||Path: 0 -> 1 -> 2 -> 8|||(4 + 8 + 2 = 14)|||'],"['|||int v - To store the number of vertices in the graph|||List of pairs - To store the vertex and the weight associated with a particular vertex.|||&&&|||Mark initial distance from the source is infinite.|||Create an empty priority_queue PQ. Every item of PQ is a pair (weight, vertex). Weight (or distance) is used as the first item of pair as the first item is by default used to compare two pairs.|||Insert source vertex into PQ and make its distance as 0.||||||Until the priority queue defined as PQ does not become empty. Perform the operations a and b.||||||Extract minimum distance vertex from PQ and let it be u.||||||Loop through all adjacent of u and do|||Following for every vertex v.|||// If there is a shorter path to v|||// through u. |||If dist[v] > dist[u] + weight(u, v) // distance of ( v) > distance of (u) and weight from u to v|||||||||Update distance of v, i.e., do|||dist[v] = dist[u] + weight(u, v)|||||||||Insert v into the pq (Even if v is|||already there)||||||||||||||||||Loop through the dist[] array to print the shortest paths from source to all the vertices.|||||||||Update distance of v, i.e., do|||dist[v] = dist[u] + weight(u, v)|||||||||Insert v into the pq (Even if v is|||already there)||||||']"
130,['Constructor overloading in C++'],['Constructor is a member function of a class that is used to initialize the objects of the class. Constructors do not have any return type and are automatically called when the object is created.'],"['https://www.javatpoint.com/default-arguments-in-cpp', 'https://www.javatpoint.com/cpp-dijkstra-algorithm-using-priority-queue', 'https://www.javatpoint.com/default-arguments-in-cpp', 'https://www.javatpoint.com/cpp-dijkstra-algorithm-using-priority-queue', 'https://www.javatpoint.com/default-arguments-in-cpp']",[],[],"['Characteristics of constructors', 'Types of constructors', 'Constructor overloading in C++']",[],[],"['There are three types of constructors -', 'Explanation', 'class_name(constclassname&old_object).', 'The declaration is the same as the class name but as they are constructors, there is no return type.', 'The criteria to overload a constructor is to differ the number of arguments or the type of arguments.', 'Explanation']","['As there is a concept of function overloading, similarly constructor overloading is applied. When we overload a constructor more than a purpose it is called constructor overloading.', 'In the above program, we have created a class Person with one data member(age). There are two constructors in the class that are overloaded. We have overloaded the second constructor by providing one argument and making it parameterized.']","['Create a class point with two data members x and y. A parameterized constructor is created with the points x1 and y1 as parameters and the value of x and y are assigned using x1 and y1. In the main function, we create a parameterized constructor with the values (10, 15). Using the getter functions, we get the values of the data members.', 'So, in the main function when the object person1 is created, it calls the non-parameterized constructor and when person2 is created, it calls the parameterized constructor and performs the required operation of initializing the age. Hence, when object person1 age is printed it gives 20 that was set by default and person2 age gives 45 as it was passed by the object to the parameterized constructor.']","['#include', 'using namespace std;', 'class construct // create a class construct', 'public:', 'int a, b; // initialise two data members', 'construct() // this is how default constructor is created', 'a = 10; // intialise a with some value', 'b = 20; // initialise b with some value', 'int main()', 'construct c; // creating an object of construct calls defualt constructor', 'cout<< ""a:"" <', '#include', 'using namespace std;', 'class Point // create point class', 'private:', 'int x, y; // the two data members of class Point', 'public:', 'Point(int x1, int y1) // create paramterised Constructor and initialise data member', 'x = x1; // x1 is now intialised to x', 'y = y1; // y1 is now intialised to y', 'intgetX()', 'return x; // to get the value of x', 'intgetY()', 'return y; // to get the value of y', 'int main()', 'Point p1(10, 15); // created object for paramterised constructor', 'cout<< ""p1.x = "" << p1.getX() << "", p1.y = "" << p1.getY(); // print x and y', 'return 0;', '#include', 'using namespace std;', 'class Point // create point class', 'private:', 'int x, y; // data members of the class', 'public:', 'Point(int x1, int y1)', 'x = x1;', 'y = y1;', '} // parameterised constructor', 'Point(const Point& p1) // initialisation according to syntax', 'x = p1.x;', 'y = p1.y;', 'intgetX() { return x; } // return value of x', 'intgetY() { return y; } // return valur of y', 'int main()', 'Point p1(10, 15); // call parameterised constructor', 'Point p2 = p1; // call Copy constructor', 'cout<< ""p1.x = "" << p1.getX() << "", p1.y = "" << p1.getY();', 'cout<< ""\\np2.x = "" << p2.getX() << "", p2.y = "" << p2.getY();', 'return 0;', '#include', 'using namespace std;', 'class Person { // create person class', 'private:', 'int age; // data member', 'public:', 'Person()', 'age = 20; // when object is created the age will be 20', 'Person(int a)', '{ // when parameterised Constructor is called with a value the', 'age = a;', 'intgetAge()', '{ // getter to return the age', 'return age;', 'int main()', 'Person person1, person2(45); // called the object of person class in differnt way', 'cout<< ""Person1 Age = "" << person1.getAge() <Person1 Age = 20', 'Person2 Age = 45']","['a:10', 'b:20', 'p1.x = 10, p1.y = 15', 'p1.x = 10, p1.y = 15', 'p2.x = 10, p2.y = 15', 'Person1 Age = 20', 'Person2 Age = 45']",[],"['|||The name of the constructor is the same as the class name|||No return type is there for constructors|||Called automatically when the object is created|||Always placed in the public scope of the class|||If a constructor is not created, the default constructor is created automatically and initializes the data member as zero|||Declaration of constructor name is case-sensitive|||A constructor is not implicitly inherited||||||Default constructor - A default constructor is one that does not have function parameters. It is used to initialize data members with a value. The default constructor is called when the object is created.||||||Parameterized constructor - A non-parameterized constructor does have the constructor arguments and the value passed in the argument is initialized to its data members. Parameterized constructors are used in constructor overloading.||||||Copy constructor - Copy constructor initializes an object using another object of the same class.|||']"
131,['Default arguments in C++'],"['In a function, arguments are defined as the values passed when a function is called. Values passed are the source, and the receiving function is the destination.']","['https://www.javatpoint.com/dynamic-binding-in-cpp', 'https://www.javatpoint.com/constructor-overloading-in-cpp', 'https://www.javatpoint.com/dynamic-binding-in-cpp', 'https://www.javatpoint.com/constructor-overloading-in-cpp', 'https://www.javatpoint.com/dynamic-binding-in-cpp']",['https://static.javatpoint.com/cpp/images/default-arguments-in-cpp.png'],[],[],[],"['Note If the function is overloaded with different data types that also contain the default arguments, it may result in an ambiguous match, which results in an error.']","['Now let us understand the concept of default arguments in detail.', 'Definition', 'Characteristics for defining the default arguments', 'Following are the rules of declaring default arguments -', 'Explanation', 'In the above program, we have called the sum function three times.', 'Explanation']","['A default argument is a value in the function declaration automatically assigned by the compiler if the calling function does not pass any value to that argument.', 'Here when we call the sum function with all the parameters(x, y, z, w) or either any one parameter value of z or w, the compiler gets confused about which function to execute. Thus, it creates an ambiguity which results in the error.']",[],"['#include', 'using namespace std;', 'int sum(int x, int y, int z=0, int w=0) // Here there are two values in the default arguments', '{ // Both z and w are initialised to zero', 'return (x + y + z + w); // return sum of all parameter values', 'int main()', 'cout << sum(10, 15) << endl; // x = 10, y = 15, z = 0, w = 0', 'cout << sum(10, 15, 25) << endl; // x = 10, y = 15, z = 25, w = 0', 'cout << sum(10, 15, 25, 30) << endl; // x = 10, y = 15, z = 25, w = 30', 'return 0;', '#include', 'using namespace std;', 'int sum(int x, int y, int z=0, int w=0) // Here there are two values in the default arguments', '{ // Both z and w are initialised to zero', 'return (x + y + z + w); // return sum of all parameter values', 'int sum(int x, int y, float z=0, float w=0) // Here sum is overloaded with two float parameter values', '{ // This results in ambiguity', 'return (x + y + z + w);', 'int main()', 'cout << sum(10, 15) << endl; // x = 10, y = 15, z = 0, w = 0', 'cout << sum(10, 15, 25) << endl; // x = 10, y = 15, z = 25, w = 0', 'cout << sum(10, 15, 25, 30) << endl; // x = 10, y = 15, z = 25, w = 30', 'return 0;']","['25', '50', '80', ""prog.cpp: In function 'int main()':"", ""prog.cpp:15:20: error: call of overloaded 'sum(int, int)' is ambiguous"", 'cout << sum(10, 15) << endl; // x = 10, y = 15, z = 0, w = 0', '^', 'prog.cpp:4:5: note: candidate: int sum(int, int, int, int)', 'int sum(int x, int y, int z=0, int w=0) // Here there are two values in the default arguments', '^', 'prog.cpp:9:5: note: candidate: int sum(int, int, float, float)', 'int sum(int x, int y, float z=0, float w=0) // Here sum is overloaded with two float parameter values']",[],"['|||The values passed in the default arguments are not constant. These values can be overwritten if the value is passed to the function. If not, the previously declared value retains.|||During the calling of function, the values are copied from left to right.|||All the values that will be given default value will be on the right.|||||||||void function(int x, int y, int z = 0)|||Explanation - The above function is valid. Here z is the value that is predefined as a part of the default argument.|||||||||Void function(int x, int z = 0, int y)|||Explanation - The above function is invalid. Here z is the value defined in between, and it is not accepted.||||||||||||Sum(10,15)|||When this function is called, it reaches the definition of the sum. There it initializes x to 10 y to 15, and the rest values are zero by default as no value is passed. And all the values after sum give 25 as output.|||||||||Sum(10, 15, 25)|||When this function is called, x remains 10, y remains 15, the third parameter z that is passed is initialized to 25 instead of zero. And the last value remains 0. The sum of x, y, z, w, is 50 which is returned as output.|||||||||Sum(10, 15, 25, 30)|||In this function call, there are four parameter values passed into the function with x as 10, y as 15, z is 25, and w as 30. All the values are then summed up to give 80 as the output.||||||']"
132,['Dynamic binding in C++'],"['The binding which can be resolved by the compiler using runtime is known as static binding. For example, all the final, static, and private methods are bound at run time. All the overloaded methods are binded using static binding.']","['https://www.javatpoint.com/dynamic-memory-allocation-in-cpp', 'https://www.javatpoint.com/default-arguments-in-cpp', 'https://www.javatpoint.com/dynamic-memory-allocation-in-cpp', 'https://www.javatpoint.com/default-arguments-in-cpp', 'https://www.javatpoint.com/dynamic-memory-allocation-in-cpp']",['https://static.javatpoint.com/cpp/images/dynamic-binding-in-cpp.png'],[],[],[],[],"['The concept of dynamic binding removed the problems of static binding.', 'Dynamic binding', 'Use of dynamic binding', 'How to implement dynamic binding?', 'The concept of dynamic programming is implemented with virtual functions.', 'Virtual functions', 'Characteristics', 'Now let us see the following problem that occurs without virtual keywords.', 'Let us take a class A with a function final_print(), and class B inherits A publicly. B also has its final_print() function.', 'Now let us solve this problem using virtual function.', 'Hence, dynamic binding links the function call with function definition with the help of virtual functions.']","['The general meaning of binding is linking something to a thing. Here linking of objects is done. In a programming sense, we can describe binding as linking function definition with the function call.', 'So the term dynamic binding means to select a particular function to run until the runtime. Based on the type of object, the respective function will be called.', 'As dynamic binding provides flexibility, it avoids the problem of static binding as it happened at compile time and thus linked the function call with the function definition.', 'On that note, dynamic binding also helps us to handle different objects using a single function name. It also reduces the complexity and helps the developer to debug the code and errors.', 'If we make an object of A and call final_print(), it will run of base class whereas, if we make an object of B and call final_print(), it will run of base only.']","[""A function declared in the base class and overridden(redefined) in the child class is called a virtual function. When we refer derived class object using a pointer or reference to the base, we can call a virtual function for that object and execute the derived class's version of the function.""]","['#include', 'using namespace std;', 'class A {', 'public:', 'void final_print() // function that call display', 'display();', 'void display() // the display function', 'cout<< ""Printing from the base class"" <', '#include', 'using namespace std;', 'class A {', 'public:', 'void final_print() // function that call display', 'display();', 'virtual  void display() // the display function', 'cout<< ""Printing from the base class"" <']","['Printing from the base class', 'Printing from the base class', 'Printing from the base class', 'Printing from the derived class']",[],['|||Run time function resolving|||Used to achieve runtime polymorphism|||All virtual functions are declared in the base class|||Assurance of calling correct function for an object regardless of the pointer(reference) used for function call.|||A virtual function cannot be declared as static|||No virtual constructor exists but a virtual destructor can be made.|||Virtual function definition should be the same in the base as well as the derived class.|||A virtual function can be a friend of another class.|||The definition is always in the base class and overrides in the derived class|||']
133,['Dynamic memory allocation in C++'],"['There are times where the data to be entered is allocated at the time of execution. For example, a list of employees increases as the new employees are hired in the organization and similarly reduces when a person leaves the organization. This is called managing the memory. So now, let us discuss the concept of dynamic memory allocation.']","['https://www.javatpoint.com/fast-input-and-output-in-cpp', 'https://www.javatpoint.com/dynamic-binding-in-cpp', 'https://www.javatpoint.com/fast-input-and-output-in-cpp', 'https://www.javatpoint.com/dynamic-binding-in-cpp', 'https://www.javatpoint.com/fast-input-and-output-in-cpp']",['https://static.javatpoint.com/cpp/images/dynamic-memory-allocation-in-cpp.png'],[],[],[],[],"['Memory allocation', 'Reserving or providing space to a variable is called memory allocation. For storing the data, memory allocation can be done in two ways -', 'Why Dynamic memory allocation?', 'Similarly, we do memory de-allocation for the variables in the memory.', 'In C++, memory is divided into two parts -', 'Dynamic memory allocation using the new operator', 'Pointer_variable = new data_type;', 'The pointer_varible is of pointer data_type. The data type can be int, float, string, char, etc.', 'int *m = NULL // Initially we have a NULL pointer', 'm = new int // memory is requested to the variable', 'It can be directly declared by putting the following statement in a line -', 'int *m = new int', 'Initialize memory', 'We can also initialize memory using new operator.', 'For example', 'int *m = new int(20);', 'Float *d = new float(21.01);', 'Allocate a block of memory', 'We can also use a new operator to allocate a block(array) of a particular data type.', 'For example', 'int *arr = new int[10]', 'Now as we have allocated the memory dynamically. Let us learn how to delete it.', 'Delete operator', 'We delete the allocated space in C++ using the delete operator.', 'delete pointer_variable_name', 'delete m; // free m that is a variable', 'delete [] arr; // Release a block of memory', 'Example to demonstrate dynamic memory allocation']","['Dynamically we can allocate storage while the program is in a running state, but variables cannot be created ""on the fly"". Thus, there are two criteria for dynamic memory allocation -', 'To allocate the space dynamically, the operator new is used. It means creating a request for memory allocation on the free store. If memory is available, memory is initialized, and the address of that space is returned to a pointer variable.', 'Here we have dynamically allocated memory for ten integers which also returns a pointer to the first element of the array. Hence, arr[0] is the first element and so on.']",[],"['int *m = new(nonthrow) int;', 'if(!m) // check if memory is available', 'cout<< ""No memory allocated"";', '#include', 'using namespace std;', 'int main ()', 'int* m = NULL;', 'm = new(nothrow) int;', 'if (!m)', 'cout<< ""allocation of memory failed\\n"";', '*m=29;', 'cout<< ""Value of m: "" << *m <']","['Value of m: 29', 'Value of f: 75.25', 'Value store in block of memory: 1 2 3 4 5']",[],"['|||Static allocation or compile-time allocation - Static memory allocation means providing space for the variable. The size and data type of the variable is known, and it remains constant throughout the program.|||Dynamic allocation or run-time allocation - The allocation in which memory is allocated dynamically. In this type of allocation, the exact size of the variable is not known in advance. Pointers play a major role in dynamic memory allocation.||||||A dynamic space in the memory is needed.|||Storing the address to access the variable from the memory||||||Stack - All the variables that are declared inside any function take memory from the stack.|||Heap - It is unused memory in the program that is generally used for dynamic memory allocation.||||||The difference between creating a normal array and allocating a block using new normal arrays is deallocated by the compiler. Whereas the block is created dynamically until the programmer deletes it or if the program terminates.|||If there is no space in the heap memory, the new request results in a failure throwing an exception(std::bad_alloc) until we use nonthrow with the new operator. Thus, the best practice is to first check for the pointer variable.|||']"
134,['Fast input and output in C++'],"['In competitive programming fast execution, input and outputs matter a lot. Sometimes we need to enter only five numbers in the array and the other time there can be 10,000. These are the cases where fast I/O comes into the picture.']","['https://www.javatpoint.com/hierarchical-inheritance-in-cpp', 'https://www.javatpoint.com/dynamic-memory-allocation-in-cpp', 'https://www.javatpoint.com/hierarchical-inheritance-in-cpp', 'https://www.javatpoint.com/dynamic-memory-allocation-in-cpp', 'https://www.javatpoint.com/hierarchical-inheritance-in-cpp']",['https://static.javatpoint.com/cpp/images/fast-input-and-output-in-cpp.png'],[],[],[],[],"[' Now let us discuss some useful tips beneficial to avoid the TLE -', 'Differences between ""\\n"" and endl']",[],[],"['#include  // GNU header', 'using namespace std;', 'int main()', 'ios_base::sync_with_stdio(false);', 'cin.tie(NULL); // flushes cout', 'return 0;']",[],"[""endl|||\\n&&&Manipulator|||Character&&&Does not occupy memory|||Occupy memory of 1 byte&&&endl is a keyword. So it won't give meaning when stored in a string|||\\n can be stored in a string&&&Supported only by C++|||Supported by both""]","['||||||For taking a value as input, the general format in C++ is -|||std::cin>>x; // x the value to be input|||The cin works better for a range of inputs but it is convenient to use -|||scanf(\'%d"",&x); // x is the value to be input|||Similarly, for printing on the console we use - |||Std::cout<<x ; // x is the value to be printed|||The cout also works fine for limited numbers. The best practice is using-|||printf(""%d"", x); // x is the value to be printed|||||||||To gain the same speed of scanf/printf with cin/cout. Add the below lines in the main function -|||ios_base::sync_with_stdio(false) - It toggles all the synchronization of all C++ with their respective C streams when called before cin/cout in a program. We make this function false(which is true earlier) to avoid any synchronization.|||cin. tie(NULL) - The function helps to flush all the std::cout before any input is taken. It is beneficial in interactive console programs in which the console is updated regularly but also slows down the program for larger values. NULL refers to returning a null pointer.|||||||||Include a header file that contains all the others libraries. It is a standard header for the GNU C++ library. Including the below header file saves time and the effort to add a particular library for a data structure. For example, for declaring a map we need a  header file. This extra effort is reduced which is also time saving.|||#include|||This is how a common C++ program template looks on applying the tips:||||||||||||It is advised to use ""\\n"" for coming to the new line instead of endl.|||""\\n"" - Enters a new line|||endl - Enters a new line and flushes the stream|||Therefore, |||cout<<endl = cout<< ""\\n"" << flush||||||']"
135,['Hierarchical inheritance in C++'],"[""The concept of inheritance is very similar to the real world. Just like a son inherits the properties (characteristics and behavior) of his father and father himself inherits the properties of the son's grandfather. In programming norms, inheritance occurs when one class inherits the properties of another class(base).""]","['https://www.javatpoint.com/hybrid-inheritance-in-cpp', 'https://www.javatpoint.com/fast-input-and-output-in-cpp', 'https://www.javatpoint.com/hybrid-inheritance-in-cpp', 'https://www.javatpoint.com/fast-input-and-output-in-cpp', 'https://www.javatpoint.com/hybrid-inheritance-in-cpp']","['https://static.javatpoint.com/cpp/images/hierarchical-inheritance-in-cpp1.png', 'https://static.javatpoint.com/cpp/images/hierarchical-inheritance-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/hierarchical-inheritance-in-cpp3.png']",[],[],[],[],"['Now let us understand the concept of hierarchical inheritance.', 'Definition', 'Here class A is the base class. Class B and Class C are the derived classes of A.', 'Class D and Class E are derived classes of B. Class F and Class G are derived classes of C. Thus forming the structure of hierarchical inheritance.', 'Where hierarchical inheritance does is used?', 'Code example', 'Explanation', 'Class C also calls the getdata() of base and performs the product of x and y using the inherited data members.']","['As the name defines, it is the hierarchy of classes. There is a single base class and multiple derived classes. Furthermore, the derived classes are also inherited by some other classes. Thus a tree-like structure is formed of hierarchy.', 'We have class A as our base class which has two data members x and y. It also inputs the values of the data members using the function getdata(). Class B inherits class A and performs the products using the inherited data members x and y. ']","['It is used in the following cases where hierarchy is to be maintained. For instance, the database of an organization is stored in the hierarchical format. There are different sections of an organization such as IT, computer science, Civil, Mechanical, etc. Each organization has the same attributes such as student name, roll number, year, etc. which comes under a class Student. Hence all the sections inherit the student properties and thus following the format of hierarchical inheritance.', 'Class Parent is the base class and Derived1 and Derived2 are the class that inherit Parent class. Further, newderived1 is the class that inherits Dervied1, and newderived2 is the class that inherits the Derived2 class. There can be any number of base classes that are inherited by n number of derived classes.']","['Class Parent', 'statement(s);', 'Class Derived1: public Parent', 'statement(s);', 'Class Derived2: public Parent', 'statement(s);', 'class newderived1: public Derived1', 'statement(s);', 'class newderived2: public Derived2', 'statement(s);', '#include <iostream>', 'using namespace std;', 'class A // Base class', 'public:', 'int x, y; // data members', 'voidgetdata() // to input x and y', 'cout<< ""Enter value of x and y:\\n"";', 'cin>> x >> y;', 'class B : public A //B is derived from class base', 'public:', 'void product()', 'cout<< ""\\nProduct= "" << x * y <<endl; // Perform product', 'class C : public A //C is also derived from class base', 'public:', 'void sum()', 'cout<< ""\\nSum= "" << x + y; // Perform sum', 'int main()', 'B obj1; //object of derived class B', 'C obj2; //object of derived class C', 'obj1.getdata(); // input x and y', 'obj1.product();', 'obj2.getdata();', 'obj2.sum();', 'return 0;']",[],[],[]
136,['Hybrid inheritance in C++'],"[""Inheritance is defined as the process in which one class inherits the property of another class. The class whose property is inherited is called as Base class or the parent of that class. The class that inherits the base class's properties (parent class) is the derived class.""]","['https://www.javatpoint.com/multiple-inheritance-in-cpp', 'https://www.javatpoint.com/hierarchical-inheritance-in-cpp', 'https://www.javatpoint.com/multiple-inheritance-in-cpp', 'https://www.javatpoint.com/hierarchical-inheritance-in-cpp', 'https://www.javatpoint.com/multiple-inheritance-in-cpp']","['https://static.javatpoint.com/cpp/images/hybrid-inheritance-in-cpp1.png', 'https://static.javatpoint.com/cpp/images/hybrid-inheritance-in-cpp2.png', 'https://static.javatpoint.com/cpp/images/hybrid-inheritance-in-cpp3.png', 'https://static.javatpoint.com/cpp/images/hybrid-inheritance-in-cpp4.png']",[],"['Definition', 'Example']",[],[],"['For example, A son inherits the properties of his father. This article will give you a brief introduction to hybrid inheritance and its examples.', 'Combining various types of inheritance like multiple, simple, and hierarchical inheritance is known as hybrid inheritance.', 'The diagram shows the hybrid inheritance that is a combination of single inheritance and multiple inheritance.', 'Single inheritance - Class B inherits class A. Thus an example of single inheritance.', 'Multiple inheritance - Class D is inherited from multiple classes( B and C shown above D). Thus an example of multiple inheritance.', 'Syntax code of the above example', 'This example shows the combination of multilevel and single inheritance.', 'Single inheritance - From the above diagram, Class D inherits class B. Thus, it is an example of single inheritance.', 'Syntax code for the above example', 'A real-life example of hybrid inheritance', 'In a real-world scenario, we all drive a Car. So Car is a class that comes under vehicle class. Thus an instance of single inheritance.', 'Hence, the above example is a single and multiple inheritance. It is a perfect example of hybrid inheritance (single + multiple).']","['In hybrid inheritance, there is a combination of one or more inheritance types. For instance, the combination of single and hierarchical inheritance. Therefore, hybrid inheritance is also known as multipath inheritance.', 'Multilevel inheritance - As seen from the above diagram, Class B inherits class A and class C inherits class B. Thus, it is an example of multilevel inheritance.', 'If we talk about the Ferrari, that is a combination of the racing car and a normal car. So class Ferrari is derived from the class Car and Class Racing.']","['In simple inheritance, one class is derived from a single class which is its base. In multiple inheritances, a class is derived from two classes, where one of the parents is also a derived class. In hierarchical inheritance, more than one derived class is created from a single base class.']","['Class A', 'statement(s)', 'Class B: public A', 'statement(s);', 'Class C', 'statement(s);', 'Class D: public B, public C', 'statement(s);', 'Class A', 'statement(s);', 'Class B: public A', 'statement(s);', 'Class C: public B', 'statement(s);', 'Class D: public B', 'statement(s);', '#include', 'using namespace std;', 'class vehicle', 'public:', 'vehicle()', 'cout<< ""This is a vehicle\\n"";', 'class Car: public vehicle', 'public:', 'cout<< ""This is a car\\n"";', 'class Racing', 'public:', 'Racing()', 'cout<< ""This is for Racing\\n"";', 'class Ferrari: public Car, public Racing', 'public:', 'Ferrari()', 'cout<< ""Ferrari is a Racing Car\\n"";', 'int main() {', 'Ferrari f;', 'return 0;']","['This is a vehicle', 'This is a car', 'This is for Racing', 'Ferrari is a Racing Car']",[],[]
137,['Multiple Inheritance in C++'],"['This section will discuss the Multiple Inheritances in the C++ programming language. When we acquire the features and functionalities of one class to another class, the process is called Inheritance. In this way, we can reuse, extend or modify all the attributes and behaviour of the parent class using the derived class object. It is the most important feature of object-oriented programming that reduces the length of the program.']","['https://www.javatpoint.com/cpp-bitwise-xor-operator', 'https://www.javatpoint.com/hybrid-inheritance-in-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-bitwise-xor-operator', 'https://www.javatpoint.com/hybrid-inheritance-in-cpp', 'https://www.javatpoint.com/cpp-bitwise-xor-operator']","['https://static.javatpoint.com/cpp/images/multiple-inheritance-in-cpp.png', 'https://static.javatpoint.com/cpp/images/multiple-inheritance-in-cpp2.png']",[],[],"['Diagram of the Multiple Inheritance', 'Syntax of the Multiple Inheritance', 'Example 1: Program to use the Multiple Inheritance', 'Example 2: Use Multiple Inheritance to perform the arithmetic operation', 'Example 3: Get the average marks of six subjects using the Multiple Inheritance', 'Ambiguity Problem in Multiple Inheritance', 'Program to demonstrate the Ambiguity Problem in Multiple Inheritance']",[],"['Following is the diagram of the Multiple Inheritances in the C++ programming language.', 'In the above syntax, class A and class B are two base classes, and class C is the child class that inherits some features of the parent classes.', 'Program1.cpp', ""Let's create a derived class to inherit the member functions from multiple base classes in C++ programming."", 'Program2.cpp', ""Let's create another program to print the average marks of six subjects using the multiple Inheritance in the C++ programming language."", 'Program3.cpp', ""Let's write a simple to invoke the same member function of the parent class using derived class in C++ programming."", 'Program4.cpp', 'Syntax of the Ambiguity Resolution', 'For example,', 'After making some changes, now we again execute the above program that returns the given below Output.']","['A class that inherits all member functions and functionality from another or parent class is called the derived class. And the class from which derive class acquires some features is called the base or parent class.', ""Let's write the various program of Multiple Inheritance to inherit the member functions and functionality from more than one base class using the derived class."", ""In the above program, we created two base classes and one child class. The child_class invoke member function display() and display2() from both parent classes Base_class and Base_class2 with the help of child class's object ch.""]","['Multiple Inheritance is the concept of the Inheritance in C++ that allows a child class to inherit properties or behaviour from multiple base classes. Therefore, we can say it is the process that enables a derived class to acquire member functions, properties, characteristics from more than one base class.', 'In the above diagram, there are two-parent classes: Base Class 1 and Base Class 2, whereas there is only one Child Class. The Child Class acquires all features from both Base class 1 and Base class 2. Therefore, we termed the type of Inheritance as Multiple Inheritance.', 'In Multiple Inheritance, when a single class is derived from two or more base or parent classes. So, it might be possible that both the parent class have the same-named member functions, and it shows ambiguity when the child class object invokes one of the same-named member functions. Hence, we can say, the C++ compiler is confused in selecting the member function of a class for the execution of a program.', ""When the above program is compiled, it throws the show() member function is ambiguous. Because of both the base class A and B, defining the same member function show(), and when the derived class's object call the shows() function, it shows ambiguity in multiple inheritances."", 'Therefore, we need to resolve the ambiguous problem in multiple Inheritance. The ambiguity problem can be resolved by defining the class name and scope resolution (::) operator to specify the class from which the member function is invoked in the child class.']","['class A', 'class B', 'class C: public A, public B (access modifier class_name)', '#include', 'using namespace std;', 'class Base_class', 'public:', 'void display()', 'cout << "" It is the first function of the Base class "" << endl;', 'class Base_class2', 'public:', 'void display2()', 'cout << "" It is the second function of the Base class "" << endl;', '/* create a child_class to inherit features of Base_class and Base_class2 with access specifier. */', 'class child_class: public Base_class, public Base_class2', 'public:', 'void display3()\t// It is a member function of derive class', 'cout << "" It is the function of the derived class "" << endl;', 'int main ()', 'child_class ch;', 'ch.display(); // call member function of Base_class1', 'ch.display2(); // call member function of Base_class2', 'ch.display3(); // call member function of child_class', '#include <iostream>', 'using namespace std;', 'class add', 'public:', 'int x = 20;', 'int y = 30;', 'void sum()', 'cout << "" The sum of "" << x << "" and "" << y << "" is "" <<x+y << endl;', 'class Mul', 'public:', 'int a = 20;', 'int b = 30;', 'void mul()', 'cout << "" The Multiplication of "" << a << "" and "" << b << "" is "" <<a*b << endl;', 'class Sub', 'public:', 'int a = 50;', 'int b = 30;', 'void sub()', 'cout << "" The Subtraction of "" << a << "" and "" << b << "" is "" <<a-b << endl;', 'class Div', 'public:', 'int a = 150;', 'int b = 30;', 'void div()', 'cout << "" The Division of "" << a << "" and "" << b << "" is "" <<a/b << endl;', 'class derived: public add, public Div, public Sub, public Mul', 'public:', 'int p = 12;', 'int q = 5;', 'void mod()', 'cout << ""The Modulus of "" << p << "" and "" <<q << "" is "" << p % q << endl;', 'int main ()', 'derived dr;', 'dr.mod(); // call derive class member function', 'dr.sum();', 'dr.mul();', 'dr.div();', 'dr.sub();', '#include', 'using namespace std;', 'class student_detail', 'protected:', 'int rno, sum = 0, i, marks[5];', 'public:', 'void detail()', 'cout << "" Enter the Roll No: "" << endl;', 'cin >> rno;', 'cout << "" Enter the marks of five subjects "" << endl;', 'for (i = 0; i < 5; i++)', 'cin >> marks[i];', 'for ( i = 0; i < 5; i++)', 'sum = sum + marks[i];', 'class sports_mark', 'protected:', 'int s_mark;', 'public:', 'void get_mark()', 'cout << ""\\n Enter the sports mark: "";', 'cin >> s_mark;', '/* create a result as the child class to inherit functions of the parent class: student_detail and sports_mark.*/', 'class result: public student_detail, public sports_mark', 'int tot, avg;', 'public:', 'void disp ()', 'tot = sum + s_mark;', 'avg = tot / 6; // total marks of six subject / 6', 'cout << "" \\n \\n \\t Roll No: "" << rno << "" \\n \\t Total: "" << tot << endl;', 'cout << "" \\n \\t Average Marks: "" << avg;', 'int main ()', 'result obj; // create an object of the derived class', 'obj.detail();', 'obj.get_mark();', 'obj.disp();', '#include', '#include', 'using namespace std;', 'class A', 'public:', 'void show()', 'cout << "" It is the member function of class A "" << endl;', 'class B', 'public:', 'void show()', 'cout << "" It is the member function of class B "" << endl;', 'class child: public A, public B', 'public:', 'void disp()', 'cout << "" It is the member function of the child class "" << endl;', 'int main ()', 'child ch;', 'ch.show(); // It causes ambiguity', 'ch.disp();', 'return 0;', 'Derived_obj_name.parent_class_name : : same_named_memberFunction ( [parameter] );', 'ch.A:: show(); // class_name and scope resolution operator with member function', 'ch.B::show();', 'It is the member function of the child class', 'It is the member function of class A', 'It is the member function of class B']","['It is the first function of the Base class', 'It is the second function of the Base class', 'It is the function of the derived class', 'The Modulus of 12 and 5 is 2', 'The sum of 20 and 30 is 50', 'The Multiplication of 20 and 30 is 600', 'The Division of 150 and 30 is 5', 'The Subtraction of 50 and 30 is 20', 'Enter the Roll No:', '25', 'Enter the marks of five subjects', '90', '85', '98', '80', '75', 'Enter the sports mark: 99', 'Roll No: 25', 'Total: 527', 'Average Marks: 87']",[],[]
138,['C++ Bitwise XOR Operator'],"['Let there are two operands; the First one is A and the second one is B, the total combinations of input formed by these two operands will be 4. By using the following XOR truth table, we will determine the corresponding output. The result will be captured in C, here C = A ^ B.']","['https://www.javatpoint.com/different-ways-to-compare-strings-in-cpp', 'https://www.javatpoint.com/multiple-inheritance-in-cpp', 'https://www.javatpoint.com/different-ways-to-compare-strings-in-cpp', 'https://www.javatpoint.com/multiple-inheritance-in-cpp', 'https://www.javatpoint.com/different-ways-to-compare-strings-in-cpp']","['https://static.javatpoint.com/cpp/images/cpp-bitwise-xor-operator.png', 'https://static.javatpoint.com/cpp/images/cpp-bitwise-xor-operator2.png', 'https://static.javatpoint.com/cpp/images/cpp-bitwise-xor-operator3.png', 'https://static.javatpoint.com/cpp/images/cpp-bitwise-xor-operator4.png']",[],"['Truth Table of Exclusive OR (XOR) operator', 'Execution of Bitwise Exclusive OR (XOR) operation in C++']","['Steps to solve any given problem -', 'Example 1: Find the exclusive OR of integer values; 10 and 14. Also, explain it and write the code of execution in C++.', 'Example 2: Find the exclusive OR of integer values; 3 and 15. Also, explain it and write the code of execution in C++.']","['NOTE: By using the above XOR truth table, the output of corresponding bits are generated.', 'NOTE: By using the above XOR truth table, the output of corresponding bits are generated.']","['Similarly, in this way, we can draw the truth table for Boolean values -', 'From the tables above, we observe that T ( True ) is denoted by one and F ( False ) is denoted by 0.', 'Let us understand in more detail about the execution of the XOR operation in C++ with the help of examples -', ""Solution: Let us consider two variables,' a ' and ' b ', to store the corresponding two operands given in the above question, i.e., 10 and 14."", 'Here, a = 10 and b = 14.', 'We will follow the below steps to find out the exclusive OR of the given two operands.', 'Explanation: ', 'a = 10 ( In Decimal form )', 'b = 14 ( In Decimal form )', 'Now, for an XOR b, we need to convert a and b in binary form -', 'a = 1010 ( In Binary form )', 'b = 1110 ( In Binary form )', 'Now, applying XOR operation on a and b -', '---------------', 'a ^ b = 0100 ( In Binary form )', 'The result of a ^ b is 0100, which is in binary form.', 'Now converting the result in decimal form, which is 4.', '10 ^ 14 = 4', 'We will now apply the bitwise XOR operation on 10 and 14 in C++ language and get the result, i.e., 4.', 'C++ code for above example:', ""Solution: Let us consider two variables,' a ' and ' b ', to store the corresponding two operands given in the above question, i.e., 3 and 15."", 'Here, a = 3 and b = 15.', 'We will follow the below steps to find out the exclusive OR of the given two operands.', 'Explanation: ', 'a = 3 ( In Decimal form )', 'b = 15 ( In Decimal form )', 'Now, for an XOR b, we need to convert a and b in binary form -', 'a = 0011 ( In Binary form )', 'b = 1111 ( In Binary form )', 'Now, applying XOR operation on a and b -', '---------------', 'a ^ b = 1100 ( In Binary form )', 'The result of a ^ b is 1100, which is in binary form.', 'Now converting the result in decimal form, which is 12.', '3 ^ 15 = 12', 'We will now apply the bitwise XOR operation on 3 and 15 in C++ language and get the result, i.e., 12.', 'C++ code for above example:']","['In this truth table, we are taking input in the form of bits, i.e., 0 and 1, and the output will also be generated in the form of bits, i.e., 0 and 1.', 'In this truth table, we are taking input in the form of Truth values, i.e., True ( T ) and False ( F ). The output will also be generated in the form of True values, i.e., T and F.']","['Here, in the above XOR Truth table, we observe that when the values of operands A and B are different, i.e., ( 0, 1 ), ( 1, 0 ), the result that comes out will always be 1. And when the values of operands A and B are the same, i.e., ( 0, 0 ), ( 1, 1 ), the result that comes out will always be 0.', 'Let there are two operands; the First one is A and the second one is B. The total combinations of input formed by these two operands will be 4. By using the following XOR truth table, we will determine the corresponding output. The result will be captured in C, here C = A ^ B.', 'Here, in the above XOR Truth table, we observe that, when the values of operands A and B are different, i.e., ( F, T ), ( T, F ), the result comes out will always be T. And when the values of operands A and B are same, i.e., ( F, F ), ( T, T ), the result comes out will always be F.']","['#include', 'using namespace std;', 'int main ()', 'int a, b, c ;                     // Initializing integer variables to store data values', 'cout << ""Enter values of a and b -> "" << endl ;', 'cout << ""a: "" ;', 'cin >> a ;                       // taking a as input from user', 'cout << ""b: "" ;', 'cin >> b ;                         // taking b as input from user', 'c = a ^ b ;                      // storing XOR result of a and b in c', 'cout << ""Applying XOR operation on a and b: ""<< endl ;', 'cout << ""a ^ b = "" << c << endl ;                    // Printing the output', '#include', 'using namespace std;', 'int main ()', 'int a, b, c ;                     // Initializing integer variables to store data values', 'cout << ""Enter values of a and b -> "" << endl ;', 'cout << ""a: "" ;', 'cin >> a ;                       // taking a as input from user', 'cout << ""b: "" ;', 'cin >> b ;                         // taking b as input from user', 'c = a ^ b ;                      // storing XOR result of a and b in c', 'cout << ""Applying XOR operation on a and b: ""<< endl ;', 'cout << ""a ^ b = "" << c << endl ;                    // Printing the output']",[],[],"[""|||Bitwise XOR operator is also known as Exclusive OR|||It is denoted by using the '^'|||As the name depicts, it works on the bit level of the operands.|||Bitwise XOR operator has come under the category of Bitwise operators.|||In the bitwise exclusive OR operator (XOR), two operands are required, and these two operands are separated by the XOR symbol, i.e., '^'.|||To determine the output or result that comes out after applying the XOR operator on two operands, we need to follow the Logical truth table of the XOR operator.|||XOR Truth Table is the mathematical table constructed using the proper logic of the XOR operator.|||The logic used behind the XOR operator is; whenever XOR operation is applied on the two different bits of two operands, then the result will always produce '1', and if the XOR operation is applied on the two same bits of two operands then the result produces output '0'.|||&&&|||The operands given in the problem will always be in the decimal value.|||Firstly, we need to convert the values of operands into binary|||After converting the values of operands in binary numbers, put both operands one over each other.|||Remember that before applying exclusive OR (XOR) operation on them, kindly check the number of digits in them.|||If the count of digits does not match, the extra 0's at the left end of the small operand balances the counts of digits.|||Finally, with the help of the above truth table, apply the XOR operation on the operands one by one, taking one bit at a time for applying the XOR operation.|||At last, the result is produced in the form of output.|||The output is produced will be in binary form, now convert the binary form into decimal form and note down the result value.||||||We know that 10 and 14 are in decimal form, and for applying bitwise XOR operation, it is necessary to convert it into binary form.|||Binary form ' a ', i.e., 10 is ' 1010 ' and Binary form of ' b ', i.e., 14 is ' 1110 '.|||Here we observe that the count of binary digits present in a is four and the count of binary digits present in b is also 4; hence the number of binary digits present in both the variables are the same and already balanced, we do not need to add more number of 0's to balance it.|||Now, putting the binary digits present in 'b' down to the binary digits present in 'a'.|||Finally, applying the XOR operation one by one on the corresponding bits matches and note down the output.|||The output generated at last will be in binary form, as the above question given in the decimal form, so we need to convert the result in decimal form.||||||We know that 3 and 15 are in decimal form, and for applying bitwise XOR operation, it is necessary to convert it into binary form.|||Binary form ' a ', i.e., 3 is '11' and Binary form of ' b ', i.e., 15 is '1111'.|||Here we will observe that the count of binary digits present in a is two and the count of binary digits present in b is four; hence the number of binary digits present in both the variables are not the same. Thus, unbalanced, we do need to add more number of 0's on the left side of the lower binary number, i.e., a, which is '11', to balance it.|||After balancing, the value of a is ' 0011 ', and b is ' 1111 '.|||Now, putting the binary digits present in ' b ' down to the binary digits present in ' a '.|||Finally, applying the XOR operation one by one on the corresponding bits matches and note down the output.|||The output generated at last will be in binary form, as the above question given in the decimal form, so we need to convert the result in decimal form.|||""]"
139,['Different Ways to Compare Strings in C++'],['This section will discuss the different ways to compare the given strings in the C++ programming language. The comparison of the string determines whether the first string is equal to another string or not. Example: HELLO and Hello are two different strings.'],"['https://www.javatpoint.com/reverse-an-array-in-cpp', 'https://www.javatpoint.com/cpp-bitwise-xor-operator', 'https://www.javatpoint.com/reverse-an-array-in-cpp', 'https://www.javatpoint.com/cpp-bitwise-xor-operator', 'https://www.javatpoint.com/reverse-an-array-in-cpp']",['https://static.javatpoint.com/cpp/images/different-ways-to-compare-strings-in-cpp.png'],[],[],"['strcmp() function', 'compare() function', 'Relational Operator', 'Compare two strings using the Equal to (==) operator in C++', 'Compare two strings using the Not Equal To (!=) Relational Operator', 'Compare two strings using for loop and if statement in C++', 'Compare two strings using the User-defined function in C++']",[],"['There are different ways to compare the strings in the C++ programming language, as follows:', 'Parameters:', 'leftstr: It defines the characters of the left string.', 'rightstr: It defines the characters of the right string.', ""Let's create a program to compare strings using the strcmp() function in C++."", 'Program1.cpp', ""Let's create a simple program to compare two strings using the compare() function in C++."", 'Program2.cpp', 'Equal To (==) operator: It is used to check the equality of the first string with the second string.', ""Let's create a program to compare strings using the double equal to (==) operator in C++."", 'Program3.cpp', '2nd Execution:', ""Let's create a program to compare whether the strings are equal or not using the Not Equal To (!=) operator in C++."", 'Program4.cpp', 'Program5.cpp', ""Let's create a simple program to compare the first string with another string using the user-defined function in C++."", 'Program6.cpp']","['The leftstr string compares each character with the second string from the left side till the end of both strings. And, if both the strings are equal, the strcmp() function returns strings are equal. Else, the strings are not equal.', 'The compare() function is a pre-defined library function of the C++ language. The compare() function compares two given strings and returns the following results based on the matching cases:']","['The strcmp() is a pre-defined library function of the string.h header file. The strcmp() function compares two strings on a lexicographical basis. This means that the strcmp() function starts comparing the first string with the second string, character by character until all characters in both strings are the same or a NULL character is encountered.', ""It is the operator used to compare two strings or numerical values in C++. C++ has different types of relational operators such as '==', '!=', >, < operator. But here, we use only two operators such as '==' equal to and '!=' not equal to a relational operator to compare the string easily.""]","['int strcmp ( const char *leftstr, const char *rightstr );', '#include', 'using namespace std;', '#include', 'int main ()', 'const char *str1 = "" Welcome to JavaTpoint"";', 'const char *str2 = "" Welcome to JavaTpoint"";', 'const char *str3 = "" JavaTpoint"";', 'const char *str4 = "" Javatpoint"";', 'cout << "" String 1: "" << str1 << endl;', 'cout << "" String 2: "" << str2 << endl;', 'if (strcmp (str1, str2) == 0)', 'cout << "" \\n Both strings are equal. "" << endl;', 'cout << "" The strings are not equal. "" << endl;', 'cout << "" \\n String 3: "" << str3 << endl;', 'cout << "" String 4: "" << str4 << endl;', 'if (strcmp (str3, str4) == 0)', 'cout << "" \\n Both strings are equal. "" << endl;', 'cout << "" \\n The strings are not equal. "";', 'return 0;', 'int compare (const string &str) const;', '#include', 'using namespace std;', 'int main ()', 'string str1, str2; // declare string variable', 'cout << "" Enter the string 1: "";', 'cin >> str1;', 'cout << "" Enter the string 2: "";', 'cin >> str2;', 'int i = str1.compare(str2);', 'if ( i < 0)', 'cout << str1 << "" is smaller than "" << str2 << "" string"" << endl;', 'else if ( i > 0)', 'cout << str2 << "" is greater than "" << str1 << "" string."" << endl;', 'else // i == 0;', 'cout << "" Both strings are equal."";', 'return 0;', 'String1 == string2  // here, we use double equal to operator', 'String1 != string2 // here, we use not equal to operator', '#include', 'using namespace std;', 'int main ()', 'string str1;', 'string str2;', 'cout << "" Enter the String 1: "" << endl;', 'cin >> str1;', 'cout << "" Enter the String 2: "" << endl;', 'cin >> str2;', 'if ( str1 == str2)', 'cout << "" String is equal."" << endl;', 'cout << "" String is not equal."" << endl;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'string str1;', 'string str2;', 'cout << "" Enter the String 1: "" << endl;', 'cin >> str1;', 'cout << "" Enter the String 2: "" << endl;', 'cin >> str2;', 'if ( str1 != str2)', 'cout << "" String is not equal."" << endl;', 'cout << "" String is equal."" << endl;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'char s1[50], s2[50]; // declare character array', 'int i, disp;', 'cout << "" Enter the String 1: "" << endl;', 'cin >> s1;', 'cout << "" Enter the String 2: "" << endl;', 'cin >> s2;', ""for (i = 0; s1[i] == s2[i] && s1[i] == '\\0'; i++);"", 'if (s1[i] < s2[i])', 'cout << "" String 1 is less than String 2"";', 'else if (s1[i] > s2[i])', 'cout << "" String 2 is less than String 1"";', 'cout << "" String 1 is equal to String 2"";', 'return 0;', '#include', 'using namespace std;', 'void RelationalCompare ( string str1, string str2)', 'if ( str1 != str2)', 'cout << str1 << "" is not equal to "" << str2 << "" string. "" << endl;', 'if (str1 > str2)', 'cout << str1 << "" is greater than "" << str2 << "" string."" << endl;', 'cout << str2 << "" is greater than "" << str1 << "" string."" << endl;', 'cout << str1 << "" is equal to "" << str2 << "" string."" << endl;', 'int main ()', 'string str1 ( ""JavaT"");', 'string str2 ( ""Tpoint"");', 'RelationalCompare (str1, str2);', 'string str3 (""JavaTpoint"");', 'string str4 (""JavaTpoint"");', 'RelationalCompare (str3, str4);', 'return 0;']","['String 1:  Welcome to JavaTpoint', 'String 2:  Welcome to JavaTpoint', 'Both strings are equal.', 'String 3:  JavaTpoint', 'String 4:  Javatpoint', 'The strings are not equal.', '1st Run:', 'Enter the string 1: Program', 'Enter the string 2: program', 'Program is smaller than program string', '2nd Run:', 'Enter the string 1: APPLE', 'Enter the string 2: APPLE', 'Both strings are equal.', 'Enter the String 1:', 'JavaTpoint', 'Enter the String 2:', 'javatpoint', 'String is not equal.', 'Enter the String 1:', 'Program', 'Enter the String 2:', 'Program', 'String is equal.', 'Enter the String 1:', 'JAVATpoint', 'Enter the String 2:', 'JavaTPOINT', 'String is not equal.', 'Enter the String 1:', 'HELLO', 'Enter the String 2:', 'HELLO', 'String is equal.', 'Enter the String 1:', 'WELCOME', 'Enter the String 2:', 'WELCOME', 'String 1 is equal to String 2', 'JavaT is not equal to Tpoint string.', 'Tpoint is greater than JavaT string.', 'JavaTpoint is equal to JavaTpoint string.']",[],"['|||Using strcmp() function|||Using compare() function|||Using Relational Operator|||Using For loop and If statement|||Using user-defined function||||||If both the strings are the same, the function returns 0.|||If the character value of the first string is smaller than the second string, the function returns < 0.|||If the second string is greater than the first string, the function returns greater than 0 or >0.|||']"
140,['Reverse an Array in C++'],"[""This section will discuss the different ways to reverse an array in the C++ programming language. The reverse of an array means to change the order of the given array's elements. This technique reverses the last element of the array into the first one, and the first element becomes the last. However, the process continues until all characters or elements of the array are completely reversed.""]","['https://www.javatpoint.com/cpp-date-and-time', 'https://www.javatpoint.com/different-ways-to-compare-strings-in-cpp', 'https://www.javatpoint.com/cpp-date-and-time', 'https://www.javatpoint.com/different-ways-to-compare-strings-in-cpp', 'https://www.javatpoint.com/cpp-date-and-time']",['https://static.javatpoint.com/cpp/images/reverse-an-array-in-cpp.png'],[],['Different ways to reverse an array'],"['Program to reverse an array using the for loop', 'Program to reverse an array using the reverse() function', 'Program to reverse an array using the user-defined function', 'Program to reverse an array using the pointer', 'Reverse an array using the Recursion function']",[],"['Following are the various ways to get the reverse array in the C++ programming language.', ""Let's create a program to reverse the elements of the array using for loop in C++."", 'Program1.cpp', ""Let's consider an example to print the reverse of an array using the reverse () function in C++."", 'Program2.cpp', ""Let's consider an example to display the reverse of array elements using the user-defined in C++."", 'Program3.cpp', ""Let's consider an example to demonstrate the reversing of the array elements using the pointers in C++."", 'Program4.cpp', ""Let's create a program to reverse the array elements using the recursion function in C++."", 'Program5.cpp']","[""For example, the array contains elements like 'H', 'E', 'L', 'L', 'O', and when we reverse all the elements of an array, it returns the inverted array as 'O', 'L', 'L', 'E', 'H'. So, this way, all the characters in the array are reversed.""]",[],"['#include', 'using namespace std;', 'int main ()', 'int arr[50], num, temp, i, j;', 'cout << "" Please, enter the total no. you want to enter: "";', 'cin >> num;', 'for (i = 0; i < num; i++)', 'cout << "" Enter the element "" << i+1 << "": "";', 'cin >> arr[i];', 'for ( i = 0, j = num - 1; i < num/2; i++, j--)', 'temp = arr[i];', 'arr[i] = arr[j];', 'arr[j] = temp;', 'cout << ""\\n Reverse all elements of the array: "" << endl;', 'for ( i = 0; i < num; i++)', 'cout << arr[i] << "" "";', 'return 0;', '#include', '#include', 'using namespace std;', 'void disp(int arr1[], int num)', 'int i;', 'for ( i = 0; i < num; i++)', 'cout << arr1[i] << "" "";', 'void reverse(int arr1[], int num)', 'reverse(arr1, arr1 + num);', 'int main ()', 'int arr1[] = {34, 78, 21, 90, 5, 2};', 'int num = sizeof(arr1)/sizeof(arr1[0]);', 'reverse(arr1, num);', 'disp(arr1, num); /* call disp() function to print the revrse array. */', 'return 0;', '#include', 'using namespace std;', 'void ArrRev ( int [], int);', 'int main ()', 'int arr[50], num, i, j, temp;', 'cout << "" Number of elements to be entered: "" << endl;', 'cin >> num;', 'cout << "" Enter the array elements: "" << endl;', 'for ( i = 0; i < num; i++)', 'cin >> arr[i];', 'cout << "" Elements are: \\n"";', 'for ( i = 0; i < num; i++)', 'cout << arr[i] << "" "";', 'ArrRev (arr, num); // call function', 'cout << "" \\n The reverse of the given array is: \\n"";', 'for ( i = 0; i < num ; i++)', 'cout << arr[i] << "" "";', 'cout << endl;', 'return 0;', 'void ArrRev ( int ar[], int a2)', 'int i, j, temp;', 'j = a2 - 1;', 'for ( i = 0; i < j; i++, j--)', 'temp = ar[i];', 'ar[i] = ar[j];', 'ar[j] = temp;', '#include', 'using namespace std;', 'int main ()', 'int arr[50], arr2[50];', 'int *ptr, i, num;', 'cout <<"" No. of array elements to be entered: ""<< endl;', 'cin >> num;', 'cout <<"" Enter the elements: "";', 'for (i = 0; i < num; i++)', 'cin >> arr[i];', 'ptr = &arr[0];', 'cout <<"" Entered elements of the array are: \\n"" <', '#include', 'using namespace std;', 'int arr[] = { 20, 34, 5, 8, 1, 78};', 'int size = sizeof( arr) / sizeof (arr[0]);', 'void reverseArr ( int arr[] , int num)', 'if ( num == size)', 'return;', 'int elem = arr [ num];', 'reverseArr ( arr, num + 1);', 'arr [ size - num - 1] = elem;', 'int main ()', 'int i;', 'cout << "" Original elements of the arrays "" << endl;', 'for ( int i = 0; i < size; i++)', 'cout << arr[i] << "" "";', 'reverseArr (arr, 0);', 'cout << "" \\n Reverse elements of the array are: "" << endl;', 'for ( int i = 0; i < size; i++)', 'cout << arr[i] << "" "";', 'return 0;']","['Please, enter the total no. you want to enter: 6', 'Enter the element 1: 78', 'Enter the element 2: 12', 'Enter the element 3: 54', 'Enter the element 4: 24', 'Enter the element 5: 7', 'Enter the element 6: 90', 'Reverse all elements of the array:', '90 7 24 54 12 78', '2 5 90 21 78 34', 'Number of elements to be entered:', '7', 'Enter the array elements:', '45', '32', '89', '21', '78', '34', '65', 'Elements are:', '45 32 89 21 78 34 65', 'The reverse of the given array is:', '65 34 78 21 89 32 45', 'No. of array elements to be entered:', '6', 'Enter the elements: 45', '32', '89', '63', '4', '6', 'Entered elements of the array are:', '45      32      89      63      4       6', 'The reversed array elements are:', '6', '4', '63', '89', '32', '45', 'Original elements of the arrays', '20 34 5 8 1 78', 'Reverse elements of the array are:', '78 1 8 5 34 20']",[],['|||Reverse an array using for loop|||Reverse an array using the reverse() function|||Reverse an array using the user-defined function|||Reverse an array using the pointers|||Reverse an array using the Recursion function|||']
141,['C++ date and time'],"['In this article, we will learn about the date and time formats in C++. There is no complete format in C++ for date and time so we inherit it from the c language. To use date and time in c++, <ctime> header file is added in the program.']","['https://www.javatpoint.com/copy-elision-in-cpp', 'https://www.javatpoint.com/reverse-an-array-in-cpp', 'https://www.javatpoint.com/copy-elision-in-cpp', 'https://www.javatpoint.com/reverse-an-array-in-cpp', 'https://www.javatpoint.com/copy-elision-in-cpp']",[],[],"['<ctime>', 'Date and time functions in c++']",['Example to print current date and time'],[],"['This header file has four time-related types as follows -', 'Below is the example to print the current date and time in the UTC format.', 'The below code tells how to break the tm structure and to print each attribute independently with the use of -> operator.']",[],[],"['struct tm {', 'int tm_sec; // seconds of minutes from 0 to 61', 'int tm_min; // minutes of hour from 0 to 59', 'int tm_hour; // hours of day from 0 to 24', 'int tm_mday; // day of month from 1 to 31', 'int tm_mon; // month of year from 0 to 11', 'int tm_year; // year since 1900', 'int tm_wday; // days since sunday', 'int tm_yday; // days since January 1st', 'int tm_isdst; // hours of daylight savings time', '#include', '#include', 'using namespace std;', 'int main()', 'time_t now = time(0); // get current dat/time with respect to system', 'char* dt = ctime(&now); // convert it into string', 'cout << ""The local date and time is: "" << dt << endl; // print local date and time', 'tm* gmtm = gmtime(&now); // for getting time to UTC convert to struct', 'dt = asctime(gmtm);', 'cout << ""The UTC date and time is:"" << dt << endl; // print UTC date and time', '#include', '#include', 'using namespace std;', 'int main()', 'time_t now = time(0); // get current date and time', 'cout << ""Number of seconds since January 1,2021 is:: "" << now << endl;', 'tm* ltm = localtime(&now);', 'cout << ""Year:"" << 1900 + ltm->tm_year << endl; // print the year', 'cout << ""Month: "" << 1 + ltm->tm_mon << endl; // print month number', 'cout << ""Day: "" << ltm->tm_mday << endl; // print the day', 'cout << ""Time: "" << 5 + ltm->tm_hour << "":"";', 'cout << 30 + ltm->tm_min << "":"";', 'cout << ltm->tm_sec << endl;']","['The local date and time is: Wed Sep 22 16:31:40 2021', 'The UTC date and time is: Wed Sep 22 16:31:40 2021', 'Number of seconds since January 1,2021 is:: 1632328553', 'Year:2021', 'Month: 9', 'Day: 22', 'Time: 21:65:53']","['Name of the function|||Prototype of the function|||Description About the function&&&mktime|||time_t mktime(struct tm *time);|||This function converts mktime to time_t or calendar date and time.&&&ctime|||char *ctime(const time_t *time);|||It returns the pointer to a string of the format - day month year hours: minutes: seconds year.&&&difftime|||double difftime ( time_t time2, time_t time1 );|||It returns the difference of two-time objects t1 and t2.&&&gmtime|||struct tm *gmtime(const time_t *time);|||This function returns the pointer of the time in the format of a structure. The time is in UTC.&&&clock|||clock_t clock(void);|||It returns an approximated value for the amount of time the calling program is being run. The value .1 is returned if not available.&&&localtime|||struct tm *localtime(const time_t *time);|||This function returns the pointer to the tm structure representing local time.&&&time|||time_t time(time_t *time);|||It represents current time.&&&strftime|||size_t strftime();|||With the help of this function, we can format date and time in a specific manner. &&&asctime|||char * asctime ( const struct tm * time );|||The function converts the type object of tm to string and returns the pointer to that string.']",['|||Clock_t - It stands for clock type which is an alias of arithmetic type. It represents clock tick counts(units of a time of a constant with system-specific length). Clock_t is the type returned by clock()/. |||Time_t - It stands for time_type. It represents the time that is returned by function time(). It outputs an integral value as the number of seconds elapsed when time passes by 00:00 hours.|||Size_t - It is an alias for an unsigned integer type and represents the size of any object in bytes. Size_t is the result of the sizeof() operator which prints sizes and counts.|||tm - The tm structure holds date and time in the C structure. It is defined as follows -|||']
142,['Copy elision in C++'],"['Copy elision is defined as an optimisation technique that is used to avoid the unnecessary copying of objects. Generally, all the compilers use the technique of copy elision. The optimisation technique is not available to a temporary object that is bound to a reference.']","['https://www.javatpoint.com/array-of-sets-in-cpp', 'https://www.javatpoint.com/cpp-date-and-time', 'https://www.javatpoint.com/array-of-sets-in-cpp', 'https://www.javatpoint.com/cpp-date-and-time', 'https://www.javatpoint.com/array-of-sets-in-cpp']",[],[],[],"['Observations', 'How to avoid unnecessary overheads?']",[],"['It is also known as copy omission.', 'Let us understand the need for copy elision with the help of an example.', 'This is how the statement -', 'A a1 = ""copy me""', 'Is converted to', 'A a1(""copy me"")', 'This problem of overhead is avoided by many compilers.', 'The modern compilers break down the statement of copy initialisation', 'A a1 = ""copy me""', 'The statement of direct initialisation.', 'A a1(""copy me"")', 'which in turn calls the copy constructor.']",['The program outputs the Default constructor. It happened because when we created object a1 one argument constructor is converted to copy me to a temp object and that temp object is copied to object a1.'],[],"['#include', 'using namespace std;', 'class A', 'public:', 'A(const char* str = ""\\0"") //default constructor', 'cout << "" Default Constructor called"" << endl;', 'A(const A &a) //copy constructor', 'cout << ""Copy constructor called"" << endl;', 'int main()', 'A a1 = ""copy me""; // Create object of class A', 'return 0;']",['Default Constructor called'],[],[]
143,['Array of sets in C++'],['An array is defined as the collection of data items stored in a contiguous manner. An array stores different variables of the same type. It becomes easier to access the variables as they are stored at continuous locations.'],"['https://www.javatpoint.com/smart-pointers-in-cpp', 'https://www.javatpoint.com/copy-elision-in-cpp', 'https://www.javatpoint.com/smart-pointers-in-cpp', 'https://www.javatpoint.com/copy-elision-in-cpp', 'https://www.javatpoint.com/smart-pointers-in-cpp']","['https://static.javatpoint.com/cpp/images/array-of-sets-in-cpp.png', 'https://static.javatpoint.com/cpp/images/array-of-sets-in-cpp2.png']",[],"['Sets', 'Array of sets', 'Deletion operation in an array of sets', 'Traversal operation in an array of sets']",['Insertion operation in the array of sets'],[],"['For example', 'Arr[0] = 10', 'Arr[1] = 20', 'Arr[2] = 30', 'Arr[3] = 40', 'Arr[4] = 50', 'Arr[5] = 60', 'set<int> s ----- A set of integer values', 'set<char> c ---- A set of character values', 'When we say an array of sets, it is a two-dimensional array with a fixed number of rows. Each row can have variable lengths.', 'In an array of sets, each array index stores a set. The set is accessible via iterators. \\', 'set<int> s[3] ----> A array of set of int type with size 3', 'Insertion will happen with the insert() function as each row is a set here. So, we insert using an array of sets using -', 'set_variable[row_number].insert(element)', 's[0].insert(10) ----> Inserts 10 in row 1', 's[1].insert(20) ----> Inserts 20 in row 2', 'When we say deletion of an element here, we are removing the element from the set. The function to remove an element from the set is erase().', 'In this example, we have removed one element from set 3 and one element from set 2. Remember, the set index is i-1 as the array index starts at 0.', 'In the below example, we create an array of sets having two rows. Row one has three elements in the set, and row 2 has two elements in the set.', 'To traverse an array of sets, we run an outer loop for the rows. In the inner loop, we use iterators to print each set.']","[""This is an array that contains six elements. Let's say the array name is arr[]. Now, if we want to access the elements, they can access the indices 0 to n-1. Here, n is the size of the array."", 'When we traverse an array of sets, we iterate through each set and print all the elements in that set. Iterators are used to traverse the set elements.']","['A set is an associative container in which the elements are unique. Unlike an array, the value entered in a set cannot be modified after adding it. However, if we want to update the value in the set, we can remove it first and then enter the modified value.']","['set<data_type> variable_name', 'set<data_type> variable_name[size_of_array]', '#include', 'using namespace std;', '#define ROW 3', '#define COL 4', 'int main()', 'set s[ROW]; // Create an array of sets', 'int num = 10; // Initial element to be inserted', 'for (int i = 0; i < ROW; i++) { // iterate in row', 'for (int j = 0; j < COL; j++) {', 's[i].insert(num);', 'num += 10;', '}', 'for (int i = 0; i < ROW; i++) {', 'cout << ""Row "" << i + 1 << "" = ""', '<< ""Elements at index "" << i << "": "";', 'for (auto x : s[i])', 'cout << x << "" "";', 'cout << endl;', 'return 0;', '#include', 'using namespace std;', '#define ROW 3', '#define COL 4', 'int main()', 'set s[ROW]; // Create array of set', 'int num = 10;', 'for (int i = 0; i < ROW; i++) {', 'for (int j = 0; j < COL; j++) {', 's[i].insert(num);', 'num += 10;', '}', 'cout << ""Before removal elements are:""', '<< endl;', 'for (int i = 0; i < ROW; i++) {', 'cout << ""Elements at index ""', '<< i << "": "";', 'for (auto x : s[i])', 'cout << x << "" "";', 'cout << endl;', 's[2].erase(100); // Erase 100 from row 3 which means set 3', 's[1].erase(50); // Erase 50 from row 2 which means set 2', 'cout << endl', '<< ""After removal elements are:"" << endl;', 'for (int i = 0; i < ROW; i++) {', 'cout << ""Elements at index "" << i << "": "";', 'for (auto x : s[i])', 'cout << x << "" "";', 'cout << endl;', 'return 0;', '#include', 'using namespace std;', '#define ROW 2 // Making a set of 2 rows', 'int main()', 'set s[ROW]; // create an array of sets with 2 rows', 's[0].insert(10); // insertion in column 1', 's[0].insert(15); // insertion in column 2', 's[0].insert(35); // insertion in column 3', 's[1].insert(20); // insertion in column 1', 's[1].insert(30); // insertion in column 2', 'for (int i = 0; i < ROW; i++) { // Iterate in the row', 'cout << ""Elements at index "" << i << "": "";', 'for (auto it = s[i].begin(); it != s[i].end(); it++) {', ""cout << *it << ' ';"", '}', 'cout << endl;', 'return 0;']","['Row 1 = Elements at index 0: 10 20 30 40', 'Row 2 = Elements at index 1: 50 60 70 80', 'Row 3 = Elements at index 2: 90 100 110 120', 'Before removal elements are:', 'Elements at index 0: 10 20 30 40', 'Elements at index 1: 50 60 70 80', 'Elements at index 2: 90 100 110 120', 'After removal elements are:', 'Elements at index 0: 10 20 30 40', 'Elements at index 1: 60 70 80', 'Elements at index 2: 90 110 120', 'Elements at index 0: 10 15 35', 'Elements at index 1: 20 30']",[],[]
144,['Smart pointers in C++'],"['A pointer is used to store the address of another variable. In other words, a pointer extracts the information of a resource that is outside the program (heap memory).']","['https://www.javatpoint.com/types-of-polymorphism-in-cpp', 'https://www.javatpoint.com/array-of-sets-in-cpp', 'https://www.javatpoint.com/types-of-polymorphism-in-cpp', 'https://www.javatpoint.com/array-of-sets-in-cpp', 'https://www.javatpoint.com/types-of-polymorphism-in-cpp']",[],[],"['Smart pointers', 'Types of smart pointers']",['Problems faced with normal pointers'],"['Note - The languages such as JAVA, C# has their garbage collectors that smartly deallocate unused memory resource.']","['Below is an example that depicts the problem with normal pointers.', 'Created a class Rectangle with two data members (length and breadth). A function fun() dynamically creates an object of Rectangle.', 'We will implement smart pointers such that they will release the memory of unused resources.', 'Create a class with a pointer, overloaded operators(->, *) and destructors.', 'The above example works only for int. We will create a template that will work for every data type.', 'This type of object stores only a single object. To assign a different object, current object is deallocated.']","['We use a copy of the resource, and to make a change, it is done in the copied version. To change the content of the original resource, smart pointers are used.', 'When the function fun() ends, the object p gets destroyed. Since we did not delete p, the memory remains allocated, and this allocated resource will not be available to other variables.', 'In the main(), we execute an infinite loop that will keep creating p objects and allocate resources. This problem turns out into a memory leak to which smart pointers is a solution.', 'The destructor will be automatically called when its object goes out of the scope, and automatically the dynamically allocated memory will be deleted.', 'In shared_ptr, more than one object can point to a single pointer at the same instance of time. A reference counter is maintained for denoting the object using the use_count() method.']",['Weak_ptr is similar to the shared pointer. The difference is that it does not maintain a reference counter and there is no strong hold of the object on the pointer. This property may result in a deadlock as different objects will try to hold the pointer.'],"['#include', 'using namespace std;', 'class Rectangle { // created a class Rectangle', 'private:', 'int length; // data member as length of rectangle', 'int breadth; // data member as breadth of rectangle', 'void fun() // the function to indicate the problem with normal pointer', 'Rectangle* p = new Rectangle(); // Create a dynamic object p', 'int main()', 'while (1) { // Run an infinite loop that will allocate p', 'fun();', '#include', 'using namespace std;', 'class SmartPtr { // Create the class to implement smart Pointer', 'int* ptr; // Actual pointer', 'public:', 'explicit SmartPtr(int* p = NULL) { ptr = p; }', '~SmartPtr() { delete (ptr); }', 'int& operator*() { return *ptr; }', 'int main()', 'SmartPtr ptr(new int());', '*ptr = 100;', 'cout << *ptr;', 'return 0;', '#include', 'using namespace std;', 'template  // Create a template class', 'class SmartPtr {', 'T* ptr; // Actual pointer', 'public:', 'explicit SmartPtr(T* p = NULL) { ptr = p; }', '~SmartPtr() { delete (ptr); }', 'T& operator*() { return *ptr; }', 'T* operator->() { return ptr; }', 'int main()', 'SmartPtr ptr(new int());', '*ptr = 100;', 'cout << *ptr;', 'return 0;', '#include', '#include', 'using namespace std;', 'class Rectangle { // Create the class', 'int length; // length of rectangle', 'int breadth; // breadth of rectangle', 'public:', 'Rectangle(int l, int b)', '{ // parameterised constructor', 'length = l;', 'breadth = b;', 'int area()', '{ // calculate area', 'return length * breadth; // return the area', 'int main()', 'unique_ptr P1(new Rectangle(20, 5));', ""cout << P1->area() << endl; // This'll print 100"", 'unique_ptr P2;', 'P2 = move(P1);', 'cout << P2->area() << endl;', 'return 0;', '#include', '#include', 'using namespace std;', 'class Rectangle { // Create the class', 'int length; // length of rectangle', 'int breadth; // breadth of rectangle', 'public:', 'Rectangle(int l, int b)', '{ // parameterised constructor', 'length = l;', 'breadth = b;', 'int area()', '{ // calculate area of rectangle', 'return length * breadth; // return area', 'int main()', 'shared_ptr P1(new Rectangle(20, 5)); // create shared //ptr P1', 'cout << P1->area() << endl;', 'shared_ptr P2;', 'P2 = P1;', 'cout << P2->area() << endl;', 'cout << P1->area() << endl; // prints 100', 'cout << P1.use_count() << endl; // prints 2', 'return 0;']","['100', '100', '100', '100', '100', '100', '100', '2']",[],['|||Unique_ptr||||||Shared_ptr||||||Weak_ptr|||']
145,['Types of polymorphism in C++'],"['Polymorphism is defined as the process of using a function or an operator for more than one purpose. In other words, we can also say that an operator or a function can serve us in different ways.']","['https://www.javatpoint.com/implementing-the-sets-without-cpp-stl-containers', 'https://www.javatpoint.com/smart-pointers-in-cpp', 'https://www.javatpoint.com/implementing-the-sets-without-cpp-stl-containers', 'https://www.javatpoint.com/smart-pointers-in-cpp', 'https://www.javatpoint.com/implementing-the-sets-without-cpp-stl-containers']",[],[],"['Compile-time polymorphism', 'Operator Overloading', 'Run-time polymorphism']","['Examples of compile-time polymorphism', 'Example', 'Function overriding']",[],"['For example', ""Let us say an operator '+' is used to add two integer numbers and it is also used to concatenate two strings."", ""Hence the '+' operator serves two purposes - adding and concatenation."", 'Now let us learn about types of polymorphism in C++.', '1) Function overloading', 'The function ADD(int X, int Y) adds two integers and the function ADD() with no arguments performs string concatenation.', 'Operator overloading is defined as using an operator for an addition operation besides the original one.', 'The operators , :: ?: sizeof cant be overloaded.', ""In the below example, we have overloaded '+' to add two strings."", 'An operator is overloaded by using the operator keyword with the operator to be overloaded.', 'The run-time polymorphism is defined as the process in which the function is called at the time of program execution.', 'An example of runtime polymorphism is function overriding.']","['It is defined as the polymorphism in which the function is called at the compile time. This type of process is also called as early or static binding.', 'In the below code, we have taken a class Addition that performs the addition of two numbers and concatenates two strings. It has a function ADD() that is overloaded two times.']","['Function overloading is defined as using one function for different purposes. Here, one function performs many tasks by changing the function signature(number of arguments and types of arguments). It is an example of compile-time polymorphism because what function is to be called is decided at the time of compilation.', ""The concept of operator overloading is used as it provides special meanings to the user-defined data types. The benefit of operator overloading is we can use the same operand to serve two different operations. The basic operator overloading example is the '+' operator as it is used to add numbers and strings."", 'When we say a function is overridden it means that a new definition of that function is given in the derived class. Thus, in function overriding, we have two definitions of one in the base class and the other in the derived class. The decision of choosing a function is decided at the run time.', 'In the below example, a class animal has a function f() which is also in the derived class Man. When we call the function f() with the base object, it prints the contents of the base and with the derived object the content of the derived. Thus, choosing the function f() is decided on runtime.']","['#include', 'using namespace std;', 'class Addition { // Create Addition class', 'public:', 'int ADD(int X, int Y) // Add function add two numbers', 'return X + Y; // return the Addition of two numbers', 'int ADD()', '{ // this ADD function concatenates two strings', 'string a = ""HELLO"";', 'string b = "" JAVATPOINT"";', 'string c = a + b; // concatenate two strings', 'cout << c << endl; // print result', 'int main(void)', 'Addition obj; // Object is created  of Addition class', 'cout << obj.ADD(120, 105) << endl; //first method is called to add two integers', 'obj.ADD(); // second method is called to concatenate two strings', 'return 0;', '#include', 'using namespace std;', 'class A // Create a class A', 'string x; // private data member x', 'public:', 'A() {}', 'A(string i)', 'x = i; // Assign the data member', 'void operator+(A); // operator overloading', 'void A::operator+(A a) // concetenate the strings and print output', 'string m = x + a.x;', 'cout << ""The result of the addition of two objects is: "" << m;', 'int main()', 'A a1(""Welcome ""); // string 1', 'A a2(""to javatpoint""); // string 2', 'a1 + a2; // concetenate two strings using operator overloading', 'return 0;', '#include', 'using namespace std;', 'class Animal { // Create a new class', 'public:', 'void f()', '{ // the function f will be overriden in the class Man', 'cout << ""Eating..."" << endl;', 'class Man : public Animal // Base class inheriting derived class', 'public:', 'void f() // The function f being overriden', 'cout << ""Walking ..."" << endl;', 'int main(void)', 'Animal A = Animal();', 'A.f(); //parent class object', 'Man m = Man();', 'm.f(); // child class object', 'return 0;']","['225', 'HELLO JAVATPOINT', 'The result of the addition of two objects is: Welcome to javatpoint', 'Eating...', 'Walking ...']",[],[]
146,['Implementing the sets without C++ STL containers'],"['A set is defined as a collection of elements where each element is unique. It is different from arrays as sets can have variable lengths. The element added to a set once cannot be changed. If we want to add the same modified number, delete the number and add the modified one in the set.']","['https://www.javatpoint.com/scope-resolution-operator-in-cpp', 'https://www.javatpoint.com/types-of-polymorphism-in-cpp', 'https://www.javatpoint.com/scope-resolution-operator-in-cpp', 'https://www.javatpoint.com/types-of-polymorphism-in-cpp', 'https://www.javatpoint.com/scope-resolution-operator-in-cpp']",[],[],['Implementation of sets using BST'],[],[],"['Following are the operations that can be performed on a set -', 'In a tree, we have three members - the data of the node and the left and right pointers to the node. It is given as below -', 'The Function containsNode() used are for checking whether a node is present in the tree or not.', 'The function inorder() is used to print the inorder traversal of the BST.', 'The Set class has a default constructor to initialize the root of BST as NULL and a copy constructor to copy a set into another set.', 'The function contains() checks if a particular element is present in the set or not. It internally calls containsNode() in the BST.', 'The function displaySet() is used to print the set elements. It internally calls the inorder() function of the BST.', 'The function getSize() returns the size of the set.']","['The set data structure internally implements BST (Binary Search Tree) data structure. Hence, we will add the elements in the tree and use this tree template to implement the Set.', 'After creating a tree, we insert the nodes in the tree using the insert() function. In a BST, the data that is less than root lies on the left side of the tree and the greater one lies on the right side of the tree.', 'After we have created the BST for the internal working of the set, a set template is created to implement the BST. It has a root pointer node to store the data and the size variable returns the size of the set.', 'The function add() is used to add values in the set. It does not add the duplicate data in the set by calling the function containsNode(). If there is a new element it adds to the set.']",[],"['template', 'struct Node { // Create a node of BST', 'T data; // Node value', 'Node* left; // Pointer to the left child', 'Node* right; // Pointer to the right child', 'template', 'class Set { // Create class set', 'Node* root; // Root to store the data', 'int size; // It indicates the size of the set', '};', '#include', '#include', '#include', '#include', '#include', 'using namespace std;', 'template', 'struct Node { // Create a node of BST', 'T data; // Node value', 'Node* left; // Pointer to the left child', 'Node* right; // Pointer to the right child', 'public:', 'void inorder(Node* r)', 'if (r == NULL) { // If we  reach last level', 'return;', '}', 'inorder(r->left); // print left child', 'cout << r->data << "" ""; // print the node value', 'inorder(r->right); // print the right child', 'Function to check if BST contains a node', 'with the given data', 'r pointer to the root node', 'd the data to search in the BST', 'The function returns 1 if the node is present in the BST else 0', 'int containsNode(Node* r, T d)', 'if (r == NULL) { // If we reach last level or tree is empty', 'return 0;', '}', 'int x = r->data == d ? 1 : 0; // Check for duplicacy', 'return x | containsNode(r->left, d) | containsNode(r->right, d);', 'Function to insert a node with', 'given data into the BST', 'r pointer to the root node in the BST', 'd the data to insert in the BST', 'return pointer to the root of the resultant BST', 'Node* insert(Node* r, T d)', 'if (r == NULL) { // Add where NULL is encountered which means space is present', 'Node* tmp = new Node; // Create a new node in BST', 'tmp->data = d; // insert the data in the BST', 'tmp->left = tmp->right = NULL; // Allocate left and right pointers a NULL', 'return tmp; // return current node', '}', 'if (d < r->data) {', 'r->left = insert(r->left, d);', 'return r;', '}', 'else if (d > r->data) {', 'r->right = insert(r->right, d);', 'return r;', '}', 'else', 'return r;', 'template  // create a class template for implementing a set in BST', 'class Set { // Create class set', 'Node* root; // Root to store the data', 'int size; // It indicates the size of the set', 'public:', 'Set() // If no value passed', 'root = NULL; // It points to NULL', 'size = 0; // size becomes zero', 'Set(const Set& s) // Copy constructor', 'root = s.root;', 'size = s.size;', 'void add(const T data) // It add an element to the set', 'if (!root->containsNode(root, data)) { // Check if it is the first element', 'root = root->insert(root, data); // Insert  the data into the set', 'size++; // Increment the size of the set', '}', 'bool contains(T data)', 'return root->containsNode(root, data) ? true : false;', 'void displaySet()', 'cout << ""{ "";', 'root->inorder(root);', 'cout << ""}"" << endl;', 'Function to return the current size of the Set', '', '@return size of set', 'int getSize()', 'return size;', 'int main()', 'Set A;', 'A.add(1);', 'A.add(2);', 'A.add(3);', 'A.add(2);', 'cout << ""A = "";', 'A.displaySet();', 'cout << ""A "" << (A.contains(3) ? ""contains""', ': ""does not contain"")', '<< "" 3"" << endl;', 'cout << ""A "" << (A.contains(4) ? ""contains""', ': ""does not contain"")', '<< "" 4"" << endl;', 'cout << endl;', 'return 0;']","['A = { 1 2 3 }', 'A contains 3', 'A does not contain 4']",[],['|||add(value) - This function adds an element in the set|||intersectionSet(S) - Return the intersection of two sets in the set S|||toArray() - Converts a set into an array of elements|||contains(s) - Returns the set if an element to be searched is present in the set|||displaySet() - Print the set from beginning to end|||getSize() - To get the size of the set|||unionSet(s) - To display the union of two sets with set s||||||Create a template of BST||||||Implement the BST template in the Set class|||']
147,['Scope Resolution Operator in C++'],"['This section will discuss the scope resolution operator and its various uses in the C++ programming language. The scope resolution operator is used to reference the global variable or member function that is out of scope. Therefore, we use the scope resolution operator to access the hidden variable or function of a program. The operator is represented as the double colon (::) symbol.']","['https://www.javatpoint.com/static-member-function-in-cpp', 'https://www.javatpoint.com/implementing-the-sets-without-cpp-stl-containers', 'https://www.javatpoint.com/static-member-function-in-cpp', 'https://www.javatpoint.com/implementing-the-sets-without-cpp-stl-containers', 'https://www.javatpoint.com/static-member-function-in-cpp']",['https://static.javatpoint.com/cpp/images/scope-resolution-operator-in-cpp.png'],[],[],"['Uses of the scope resolution Operator', 'Program to access the hidden value using the scope resolution (::) operator', 'Program to define the member function outside of the class using the scope resolution (::) operator', 'Program to demonstrate the standard namespace using the scope resolution (::) operator', 'Program to access the static variable using the scope resolution (::) operator', 'Program to access the static member function using the scope resolution (::) operator', 'Program to override the member function using the scope resolution (::) operator']",[],"['Program1.cpp', 'Program2.cpp', 'Program3.cpp', 'Program4.cpp', 'Program5.cpp', 'Program5.cpp']",[],"[""For example, when the global and local variable or function has the same name in a program, and when we call the variable, by default it only accesses the inner or local variable without calling the global variable. In this way, it hides the global variable or function. To overcome this situation, we use the scope resolution operator to fetch a program's hidden variable or function.""]","['#include', 'using namespace std;', 'int num = 50;', 'int main ()', 'int num = 100;', 'cout << "" The value of the local variable num: "" << num;', 'cout << ""\\n The value of the global variable num: "" << ::num;', 'return 0;', '#include', 'using namespace std;', 'class Operate', 'public:', 'void fun();', 'void Operate::fun()   /* return_type Class_Name::function_name */', 'cout << "" It is the member function of the class. "";', 'int main ()', 'Operate op;', 'op.fun();', 'return 0;', '#include', 'int main ()', 'int num = 0;', 'std :: cout << "" Enter the value of num: "";', 'std::cin >> num;', 'std:: cout << "" The value of num is: "" << num;', '#include', 'using namespace std;', 'class Parent', 'static int n1;', 'public:', 'static int n2;', 'void fun1 ( int n1)', 'cout << "" The value of the static integer n1: "" << Parent::n1;', 'cout << "" \\n The value of the local variable n1: "" << n1;', 'int Parent::n1 = 5; // declare the value of the variable n1', 'int Parent::n2 = 10;', 'int main ()', 'Parent b;', 'int n1 = 15;', 'b.fun1 (n1);', 'cout << "" \\n The value of the Base::n2 = "" << Parent::n2;', 'return 0;', '#include', 'using namespace std;', 'class ABC', 'public:', 'static int fun()', 'cout << "" \\n Use scope resolution operator to access the static member. "";', 'int main ()', 'ABC :: fun ();', 'return 0;', '#include', 'using namespace std;', 'class ABC', 'public:', 'void test ()', 'cout << "" \\n It is the test() function of the ABC class. "";', 'class child : public ABC', 'public:', 'void test()', 'ABC::test();', 'cout << "" \\n It is the test() function of the child class. "";', 'int main ()', 'child ch;', 'ch.test();', 'return 0;']","['The value of the local variable num: 100', 'The value of the global variable num: 50', 'It is the member function of the class.', 'Enter the value of num: 50', 'The value of num is: 50', 'The value of the static integer n1: 5', 'The value of the local variable n1: 15', 'The value of the Base::n2 = 10', 'Use scope resolution operator to access the static member.', 'It is the test() function of the ABC class.', 'It is the test() function of the child class.']",[],['|||It is used to access the hidden variables or member functions of a program.|||It defines the member function outside of the class using the scope resolution.|||It is used to access the static variable and static function of a class.|||The scope resolution operator is used to override function in the Inheritance.|||']
148,['Static Member Function in C++'],"[""The static is a keyword in the C and C++ programming language. We use the static keyword to define the static data member or static member function inside and outside of the class. Let's understand the static data member and static member function using the programs.""]","['https://www.javatpoint.com/const-keyword-in-cpp', 'https://www.javatpoint.com/scope-resolution-operator-in-cpp', 'https://www.javatpoint.com/const-keyword-in-cpp', 'https://www.javatpoint.com/scope-resolution-operator-in-cpp', 'https://www.javatpoint.com/const-keyword-in-cpp']",['https://static.javatpoint.com/cpp/images/static-member-function-in-cpp.png'],[],['Static data member'],['Static Member Functions'],[],"['Here, the static is a keyword of the predefined library.', 'The data_type is the variable type in C++, such as int, float, string, etc.', 'The data_member is the name of the static data.', ""Example 1: Let's create a simple program to access the static data members in the C++ programming language."", 'Here, the class_name is the name of the class.', 'function_name: The function name is the name of the static member function.', 'parameter: It defines the name of the pass arguments to the static member function.', ""Example 2: Let's create another program to access the static member function using the class name in the C++ programming language."", ""Example 3: Let's create another program to access the static member function using the class' object in the C++ programming language."", ""Example 4: Let's consider an example to access the static member function using the object and class in the C++ programming language.""]",[],"['When we define the data member of a class using the static keyword, the data members are called the static data member. A static data member is similar to the static member function because the static data can only be accessed using the static data member or static member function. And, all the objects of the class share the same copy of the static member to access the static data.', ""The static member functions are special functions used to access the static data members or other static member functions. A member function is defined using the static keyword. A static member function shares the single copy of the member function to any number of the class' objects. We can access the static member function using the class name or class' objects. If the static member function accesses any non-static data member or non-static member function, it throws an error.""]","['static data_type data_member;', '#include', '#include', 'using namespace std;', 'class Car', 'private:', 'int car_id;', 'char car_name[20];', 'int marks;', 'public:', 'static int static_member;', 'static_member++;', 'void inp()', 'cout << "" \\n\\n Enter the Id of the Car: "" << endl;', 'cin >> car_id; // input the id', 'cout << "" Enter the name of the Car: "" << endl;', 'cin  >> car_name;', 'cout << "" Number of the Marks (1 - 10): "" << endl;', 'cin >> marks;', 'void disp ()', 'cout << "" \\n Id of the Car: "" << car_id;', 'cout << ""\\n Name of the Car: "" << car_name;', 'cout << "" \\n Marks: "" << marks;', 'int Car::static_member = 0;', 'int main ()', 'Car c1;', 'c1. inp ();', 'c1. disp();', 'Car c2;', 'c2. inp ();', 'c2. disp();', 'cout << "" \\n No. of objects created in the class: "" << Car :: static_member <', 'class_name::function_name (parameter);', '#include', 'using namespace std;', 'class Note', 'static int num;', 'public:', 'static int func ()', 'return num;', 'int Note :: num = 5;', 'int main ()', 'cout << "" The value of the num is: "" << Note:: func () << endl;', 'return 0;', '#include', 'using namespace std;', 'class Note', 'static int num;', 'public:', 'static int func ()', 'cout << "" The value of the num is: "" << num << endl;', 'int Note :: num = 15;', 'int main ()', 'Note n;', 'n.func();', 'return 0;', '#include', 'using namespace std;', 'class Member', 'private:', 'static int A;', 'static int B;', 'static int C;', 'public:', 'static void disp ()', 'cout << "" The value of the A is: "" << A << endl;', 'cout << "" The value of the B is: "" << B << endl;', 'cout << "" The value of the C is: "" << C << endl;', 'int Member :: A = 20;', 'int Member :: B = 30;', 'int Member :: C = 40;', 'int main ()', 'Member mb;', 'cout << "" Print the static member through object name: "" << endl;', 'mb. disp();', 'cout << "" Print the static member through the class name: "" << endl;', 'Member::disp();', 'return 0;']","['Enter the Id of the Car:', '101', 'Enter the name of the Car:', 'Ferrari', 'Number of the Marks (1 - 10):', '10', 'Id of the Car: 101', 'Name of the Car: Ferrari', 'Marks: 10', 'Enter the Id of the Car:', '205', 'Enter the name of the Car:', 'Mercedes', 'Number of the Marks (1 - 10):', '9', 'Id of the Car: 205', 'Name of the Car: Mercedes', 'Marks: 9', 'No. of objects created in the class: 2', 'The value of the num is: 5', 'The value of the num is: 15', 'Print the static member through object name:', 'The value of the A is: 20', 'The value of the B is: 30', 'The value of the C is: 40', 'Print the static member through the class name:', 'The value of the A is: 20', 'The value of the B is: 30', 'The value of the C is: 40']",[],[]
149,['Const keyword in C++'],"[""This section will discuss the const keyword in the C++ programming language. It is the const keywords used to define the constant value that cannot change during program execution. It means once we declare a variable as the constant in a program, the variable's value will be fixed and never be changed. If we try to change the value of the const type variable, it shows an error message in the program.""]","['https://www.javatpoint.com/memset-in-cpp', 'https://www.javatpoint.com/static-member-function-in-cpp', 'https://www.javatpoint.com/memset-in-cpp', 'https://www.javatpoint.com/static-member-function-in-cpp', 'https://www.javatpoint.com/memset-in-cpp']",['https://static.javatpoint.com/cpp/images/const-keyword-in-cpp.png'],[],[],"['1. Const variable', '2. Constant pointer', '3. Pointer to constant variable', '4. Constant function Arguments', '5. Const Member function of class', '6. Constant Data Members of class', '7. Constant Objects', 'Program to find the area of a circle using the const keyword']","['Note: While the declaration of the const variable in the C++ programming, we need to assign the value of the defined variables at the same time; else, it shows the compile-time error. ']","['Use const keywords with different parameters:', 'Example: Program to use the const keyword in C++', ""Let's create a program to demonstrate the use of the const keyword in the C++ programming language."", 'It shows the compile-time error because we update the assigned value of the num 25 by 10.', ""Example: Let's create a simple program to demonstrate the use of the const keyword in the C++ programming language."", 'Example: Program to demonstrate the constant pointer using the const keyword', ""Let's consider an example to use the const keyword with the constant pointer in the C++ programming language."", 'It means the pointer points to the value of a const variable that cannot change.', 'Declaration of the pointer to the constant variable:', 'Here, x is a pointer that point to a const integer type variable, and we can also declare a pointer to the constant variable as,', 'In this case, y is a pointer to point a char type const variable.', 'Example: Program to use the const keyword with a pointer to constant variable ', 'In the above program, pointer ptr points to the const int (x) variable, and the value of the int (x) variable can never change.', ""Example: Let's consider an example to use the const keyword with function arguments in the C++ programming language."", 'Example: Program to use the const keyword with the member function of class', ""Let's consider an example to define the const keyword with the member function of the class."", 'Example: Program to use the const keyword with the Data members of the class', ""The const is a keyword used before the class' object's name in the above syntax to make it a constant object."", ""Example: Let's create a program to use the constant objects in the C++ programming language."", ""Let's consider an example to print the area of a circle using the const keyword in the C++ programming language.""]","['It is a const variable used to define the variable values that never be changed during the execution of a program. And if we try to modify the value, it throws an error.', ""In the above program, we declared and assigned the const variables x and y at initial. And then, store the result of two const variables to the 'z' variable to print the sum."", ""In the above program, pointer ptr pointing to the address of int variable 'x' and ptr variable cannot be changed their address once it initialized, but the pointer ptr can change the value of x."", 'We can declare the function arguments as the constant argument using the const keyword. And if the value of function arguments is declared const, it does not allow changing its value.', 'In the above syntax, return_type is represented whether the function will return a value or not. The fun_name() function contains a const argument whose value can never be changed once it defines in the program.', 'In the above program, the num is a constant argument, and we cannot update the num value. If we update the value of the num variable, it returns the compile-time error.', 'In the above syntax, mem_fun() is a member function of a class, and the const keyword is used after the name of the member function to make it constant.', ""The above code throws a compilation error because the fun() function is a const member function of class ABC, and we are trying to assign a value to its data member 'x' that returns an error."", 'When we create an object using the const keyword, the value of data members can never change till the life of the object in a program. The const objects are also known as the read-only objects.', 'In the above program, we assign the value of A is 10, the compiler prints ""The value of A: 10"", and when we assign the value of A to 20, the object of the class returns the compile time error in the program.']","[""To create a const pointer, we need to use the const keyword before the pointer's name. We cannot change the address of the const pointer after its initialization, which means the pointer will always point to the same address once the pointer is initialized as the const pointer."", 'Data members are like the variable that is declared inside a class, but once the data member is initialized, it never changes, not even in the constructor or destructor. The constant data member is initialized using the const keyword before the data type inside the class. The const data members cannot be assigned the values during its declaration; however, they can assign the constructor values.', ""In the above program, the object obj of the ABC class invokes the ABC constructor to print the value of y, and then it prints the value of the const data member 'A' is 10. But when the 'obj.A' assigns a new value of 'A' data member, it shows a compile-time error because A's value is constant and cannot be changed.""]","['const data_type variable_name;', '#include', '#include', 'using namespace std;', 'int main ()', 'const int num = 25;', 'num = num + 10;', 'return 0;', '/* create a program to use the const keyword with different data types in the C++. */', '#include', '#include', 'using namespace std;', 'int main ()', 'const int x = 20;', 'const int y = 25;', 'z = x + y;', 'cout << "" The sum of the x and y is: "" << z << endl;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'int x = 10, y = 20;', 'int* const ptr = &x //  const integer ptr variable point address to the variable x', '*ptr = 15; // ptr can only change the value', 'cout << "" The value of x: "" << x << endl;', 'cout << "" The value of ptr: "" << *ptr << endl;', 'return 0;', 'const int* x;', 'char const* y;', '#include', 'using namespace std;', 'int main ()', 'int x = 7, y = 10;', 'const int *ptr = &x // here x become constant variable', 'cout << "" \\n The initial value of ptr:"" << *ptr;', 'cout << "" \\n The value of x: "" <', 'return_type fun_name (const int x)', '#include', 'using namespace std;', 'int Test (const int num)', 'cout << "" The value of num: "" << num << endl;', 'return 0;', 'int main ()', 'Test(5);', 'return_type mem_fun() const', 'class ABC', 'public:', 'void fun () const', 'A = 0; // it shows compile time error', 'int main ()', 'ABC obj;', 'obj.fun();', 'return 0;', '/* create a program to demonstrate the data member using the const keyword in C++. */', '#include', 'using namespace std;', 'class ABC', 'public:', 'const int A;', 'ABC ( int y) : A(y)', 'cout << "" The value of y: "" << y << endl;', 'int main ()', ""ABC obj( 10); // here 'obj' is the object of class ABC"", 'cout << "" The value of constant data member \'A\' is: "" << obj.A << endl;', 'return 0;', 'const class_name obj_name;', '#include', 'using namespace std;', 'class ABC', 'public:', 'A = 10; // define a value to A', 'int main ()', 'const ABC obj;', 'cout << "" The value of A: "" << obj.A << endl;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'const double PI = 3.14;', 'double result;', 'cout << "" Input the radius of a circle: "" << endl;', 'cin >> r;', 'result = PI * r * r;', 'cout << "" The area of a circle is: "" << result;']","['The sum of the x and y is: 42', 'The value of x: 15', 'The value of ptr: 15', 'The initial value of ptr: 7', 'The value of x: 7', 'The value of y: 10', 'The value of ptr: 10', 'The value of num: 5', 'The value of y: 10', ""The value of constant data member 'A' is: 10"", 'The value of A: 10', 'Input the radius of a circle:', '5', 'The area of a circle is: 78.5']",[],"['|||Use const variable|||Use const with pointers|||Use const pointer with variables|||Use const with function arguments|||Use const with class member functions|||Use const with class data members|||Use const with class objects|||&&&|||A const is a constant member function of a class that never changes any class data members, and it also does not call any non-const function.|||It is also known as the read-only function.|||We can create a constant member function of a class by adding the const keyword after the name of the member function.|||']"
150,['Memset in C++'],"['In the C++ programming language, memset ( ) is a function used to fill memory blocks.']","['https://www.javatpoint.com/type-casting-in-cpp', 'https://www.javatpoint.com/const-keyword-in-cpp', 'https://www.javatpoint.com/type-casting-in-cpp', 'https://www.javatpoint.com/const-keyword-in-cpp', 'https://www.javatpoint.com/type-casting-in-cpp']","['https://static.javatpoint.com/cpp/images/memset-in-cpp.png', 'https://static.javatpoint.com/cpp/images/memset-in-cpp2.png']",[],[],"['Syntax of memset ( ) function:', 'Advantages of memset ( ) function of C++', 'Implementation of memset ( ) in C++', 'Example 1:', 'Example 2:']",[],"['Now, let us discuss the terminologies which are used here.', 'The output of the above program:', 'The output of the above program:']","['As we have already seen the concept of the memset ( ) function of C++ and its working, let us understand it in more detail with the help of an example.', ""In this above example, we have seen how each of the characters of the string 'JavaTpoint' has been converted into the single alphabet passed by a user. Here the space is also considered as a single character.""]","[""In this above example, we have seen how each of the characters of the string 'JavaTpoints' has been converted into the integer value passed by a user. Here the space is also considered as a single character. Here the integer value only 0 and -1 is considerable, which implies that each character of the string is converted into the 0's and -1's only, instead of using other integer values, will result in a garbage value, which implies that if you have entered 2, then all the characters of the string has been replaced by a garbage value.""]","['void* memset ( void* st , int ch , size_t n ) ;', '#include', '#include              // header file that contains the memset ( ) function, without it            // we cannot able to access the use of memset ( ) function', 'using namespace std ;', 'int main()', 'char st [ ] = "" JavaTpoint "" ;', 'char ch ;', 'cout << "" Printing the given string : "" << st << endl ;', 'cout << "" Enter an alphabet from which you want to replace the each charater of the given string : "" ;', 'cin >> ch ;', 'memset ( st , ch , sizeof ( st ) ) ;', 'cout << "" Printing the string after replacing the each character of the string with the given substitute : "" << endl ;', 'cout << "" "" << st ;', 'return 0 ;', '#include < iostream >', '#include < cstring >             // header file that contains the memset ( ) function, without it //we cannot able to access the use of memset ( ) function', 'using namespace std ;', 'int main()', 'int arr [100] ;', 'int n , i , p ;', 'cout << "" Enter size of an integer array: "" ;', 'cin >> n ;', 'cout << "" Enter an array elements: "" << endl ;', 'for ( i = 0 ; i < n ; i++ )', 'cin >> arr [ i ] ;', 'cout << "" Printing the given array : "" << endl ;', 'for ( i = 0 ; i < n ; i++ )', 'cout << "" "" << arr [ i ] << endl ;', 'cout << "" Enter an integer value from which you want to replace the each charater of the given string : "" ;', 'cin >> p ;', 'memset ( arr , p , sizeof( arr ) ) ;', 'cout << "" Printing the array after replacing the each value of the array with the given substitute : "" << endl ;', 'for ( i = 0 ; i < n ; i++ )', 'cout << "" "" << arr [ i ] << endl ;', 'return 0 ;']",[],[],"[""|||Initially, it converts the value of 'ch' to the unsigned character. Here 'ch' refers to the character to be filled with another value passed in the memset ( ) function.|||After then it copies the character 'ch' into each of the first 'n' characters of the object pointed by the st [ ].|||Here the 'n' is referred to as the size of the block, which is mentioned in the memset ( ), and it must be equal or smaller with the size of the object pointed by st [ ].|||If the value of n is greater than the size of the object pointed by the st [ ], it will generate error hence undefined.|||If sometimes, a case arises where the object is not copyable, then also it will generate an error, and the behavior of the function is the same as in the previous case, i.e., undefined.|||In the C++ programming language, the memset ( ) function is present in the < cstring > header file; without mentioning this header file, you would not be able to access the use of the memset ( ) function.|||Here, the object which is not copy-able is as follows: array, C-compatible struct, scalar, and so on; hence the behavior of memset ( ) function is undefined in this case.|||The only difference between the memset ( ) function and the memcpy ( ) function is that in memset ( ) function not only copies the value but replace it with the other substitute, e.g., if we want to replace each character of a particular string-like, ' cool ', with the alphabet ' f ', then; as a result, and it would be looking at final is; ' ffff '. But in memcpy ( ) function, it only copies the value from one place to another or copies a block of content from a particular place and puts it on another block of content.||||||Increase readability: The memset ( ) function in C++ is mainly used to convert every character of the whole string into a particular int value which is passed as an input into the memset ( ) function. It is a one-line code; hence very short and ultimately increases the readability.|||Reduce line of code: Instead of using unnecessary use of loops to assign and convert the value of each character present in the string with the int value, which is only passed as an input in this memset ( ) function, and the same task has been performed easily as compared with the lengthy method.|||It is more Faster: Using the memset ( ) function is faster to convert each character of the given string into the value passed through an input, maybe of int type or any other, depending on the programmer. Its working is very fast rather than applying loops and while statements for performing the same task.|||Useful in getting rid of Misalignment Problem: The memset ( ) function in C++ helps the programmer to get rid of misalignment problem. Sometimes, the case occurs where you find that you are dealing with the problem of misalignment of data in the processor, which leads to the error in the program. In this case, the memset ( ) and memcpy ( ) functions in C++ are the ultimate solutions of it.|||&&&|||st [ ]: st [ ] represents the pointer to the memory required to be filled. It is a pointer to the object, where the character ' ch ' has been copied. As per the programmer's choice, they can change the name from st to some other, depending on their need and work.|||ch: ' ch ' here refers to the character, which is needed to be filled. It also varies from programmer to programmer choice, and they can rename it accordingly. It is converted to the unsigned char, whenever required and also it is converted into int format, but int acceptable values are only 0 and -1.|||n: It denotes the size of the block, or can say it the numeric value which specifies the number of times the character ' ch ' needed to be copied and converted into the value passed in the memset ( ) function.|||""]"
151,['Type Casting in C++'],['This section will discuss the type casting of the variables in the C++ programming language. Type casting refers to the conversion of one data type to another in a program. Typecasting can be done in two ways: automatically by the compiler and manually by the programmer or user. Type Casting is also known as Type Conversion.'],"['https://www.javatpoint.com/binary-operator-overloading-in-cpp', 'https://www.javatpoint.com/memset-in-cpp', 'https://www.javatpoint.com/binary-operator-overloading-in-cpp', 'https://www.javatpoint.com/memset-in-cpp', 'https://www.javatpoint.com/binary-operator-overloading-in-cpp']",['https://static.javatpoint.com/cpp/images/type-casting-in-cpp.png'],[],[],[],"['Note: Implicit Type Casting should be done from low to higher data types. Otherwise, it affects the fundamental data type, which may lose precision or data, and the compiler might flash a warning to this effect.']","['2nd example:', 'Type Casting is divided into two types: Implicit conversion or Implicit Type Casting and Explicit Type Conversion or Explicit Type Casting.', 'Implicit Type Casting or Implicit Type Conversion', 'Program to use the implicit type casting in C++', ""Let's create an example to demonstrate the casting of one variable to another using the implicit type casting in C++."", 'Explicit Type Casting or Explicit Type Conversion', 'Syntax of the explicit type casting', 'type: It represents the user-defined data that converts the given expression.', 'expression: It represents the constant value, variable, or an expression whose data type is converted.', 'For example, we have a floating pointing number is 4.534, and to convert an integer value, the statement as:', 'Program to demonstrate the use of the explicit type casting in C++', ""Let's create a simple program to cast one type variable into another type using the explicit type casting in the C++ programming language."", 'Program to cast double data into int and float type using the cast operator', ""Let's consider an example to get the area of the rectangle by casting double data into float and int type in C++ programming."", 'Some different types of the Type Casting', 'Static Cast: ', 'Syntax of the Static Cast', 'Program to demonstrate the use of the Static Cast', ""Let's create a simple example to use the static cast of the type casting in C++ programming."", 'Dynamic Cast', 'Program to demonstrate the use of the Dynamic Cast in C++', ""Let's create a simple program to perform the dynamic_cast in the C++ programming language."", 'Reinterpret Cast Type', 'Syntax of the reinterpret_cast type', 'Program to use the Reinterpret Cast in C++', ""Let's write a program to demonstrate the conversion of a pointer using the reinterpret in C++ language."", 'Const Cast', 'Syntax of the Const Cast type', 'Program to use the Const Cast in C++', ""Let's write a program to cast a source pointer to a non-cast pointer using the const_cast in C++.""]","['For example, suppose the given data is an integer type, and we want to convert it into float type. So, we need to manually cast int data to the float type, and this type of casting is called the Type Casting in C++. ', 'In the above program, we declared a short data type variable x is 200 and an integer variable y. After that, we assign x value to the y, and then the compiler automatically converts short data value x to the y, which returns y is 200.', 'In the above program, we take two integer variables, a and b, whose values are 21 and 2. And then, divide a by b (21/2) that returns a 4 int type value.', 'In the second expression, we declare a float type variable res that stores the results of a and b without losing any data using the cast operator in the explicit type cast method.', ""In type cast, there is a cast operator that forces one data type to be converted into another data type according to the program's needs. C++ has four different types of the cast operator:"", 'The const_cast is used to change or manipulate the const behavior of the source pointer. It means we can perform the const in two ways: setting a const pointer to a non-const pointer or deleting or removing the const from a const pointer.']","[""In the next expressions, we declared an int type variable num is 20, and the character type variable ch is 'a', which is equivalent to an integer value of 97. And then, we add these two variables to perform the implicit conversion, which returns the result of the expression is 117."", 'Similarly, in the third expression, we add the integer variable num is 20, and the character variable ch is 65, and then assign the result to the float variable val. Thus the result of the expression is automatically converted to the float type by the compiler.', 'When the above statements are executed, the floating-point value will be cast into an integer data type using the cast () operator. And the float value is assigned to an integer num that truncates the decimal portion and displays only 4 as the integer value.', 'The static_cast is a simple compile-time cast that converts or cast one data type to another. It means it does not check the data type at runtime whether the cast performed is valid or not. Thus the programmer or user has the responsibility to ensure that the conversion was safe and valid.', 'The static_cast is capable enough that can perform all the conversions carried out by the implicit cast. And it also performs the conversions between pointers of classes related to each other (upcast - > from derived to base class or downcast - > from base to derived class).', 'The dynamic_cast is a runtime cast operator used to perform conversion of one type variable to another only on class pointers and references. It means it checks the valid casting of the variables at the run time, and if the casting fails, it returns a NULL value. Dynamic casting is based on RTTI (Runtime Type Identification) mechanism.', 'The reinterpret_cast type casting is used to cast a pointer to any other type of pointer whether the given pointer belongs to each other or not. It means it does not check whether the pointer or the data pointed to by the pointer is the same or not. And it also cast a pointer to an integer type or vice versa.']","['int num = 5;', 'float x;', 'x = float(num);', 'x = 5.0', 'float num = 5.25;', 'x = int(num);', 'Output: 5', 'char - sort int -> int -> unsigned int -> long int -> float -> double -> long double, etc.', '#include', 'using namespace std;', 'int main ()', 'short x = 200;', 'int y;', 'y = x;', 'cout << "" Implicit Type Casting "" << endl;', 'cout << "" The value of x: "" << x << endl;', 'cout << "" The value of y: "" << y << endl;', 'int num = 20;', ""char ch = 'a';"", ""int res = 20 + 'a';"", 'cout << "" Type casting char to int data type (\'a\' to 20): "" << res << endl;', ""float val = num + 'A';"", 'cout << "" Type casting from int data to float type: "" << val << endl;', 'return 0;', '(type) expression;', 'int num;', 'num = (int) 4.534; // cast into int data type', 'cout << num;', '#include', 'using namespace std;', 'int main ()', 'int a, b;', 'float res;', 'a = 21;', 'b = 5;', 'cout << "" Implicit Type Casting: "" << endl;', 'cout << "" Result: "" << a / b << endl; // it loses some information', 'cout << "" \\n Explicit Type Casting: "" << endl;', 'res = (float) 21 / 5;', 'cout << "" The value of float variable (res): "" << res << endl;', 'return 0;', '#include', 'using namespace std;', 'int main ()', 'double l, b;', 'int area;', 'cout << "" The length of the rectangle is: "" << endl;', 'cin >> l;', 'cout << "" The breadth of the rectangle is: "" << endl;', 'cin >> b;', 'area = (int) l * b; // cast into int type', 'cout << "" The area of the rectangle is: "" << area << endl;', 'float res;', 'cout << "" \\n \\n The length of the rectangle is: "" << l << endl;', 'cout << "" The breadth of the rectangle is: "" << b << endl;', 'res = (float) l * b; // cast into float type', 'cout << "" The area of the rectangle is: "" << res;', 'return 0;', 'static_cast < new_data_type> (expression);', '#include', 'using namespace std;', 'int main ()', 'double l;', 'l = 2.5 * 3.5 * 4.5;', 'int tot;', 'cout << "" Before using the static cast:"" << endl;', 'cout << "" The value of l = "" << l << endl;', 'tot = static_cast < int > (l);', 'cout << "" After using the static cast: "" << endl;', 'cout << "" The value of tot = "" << tot << endl;', 'return 0;', '#include', 'using namespace std;', 'class parent', 'public: virtual void print()', 'class derived: public parent', 'int main ()', 'parent *ptr = new derived;', 'derived* d = dynamic_cast  (ptr);', 'if ( d != NULL)', 'cout << "" Dynamic casting is done successfully"";', 'cout << "" Dynamic casting is not done successfully"";', 'reinterpret_cast <type> expression;', '#include <iostream>', 'using namespace std;', 'int main ()', 'int *pt = new int (65);', 'char *ch = reinterpret_cast <char *> (pt);', 'cout << "" The value of pt: "" << pt << endl;', 'cout << "" The value of ch: "" << ch << endl;', 'cout << "" The value of *ptr: "" << *pt << endl;', 'cout << "" The value of *ch: "" << *ch << endl;', 'return 0;', 'const_cast <type> exp;', '#include', 'using namespace std;', 'int disp(int *pt)', 'return (*pt * 10);', 'int main ()', 'const int num = 50;', 'const int *pt = # // get the address of num', 'int *ptr = const_cast  (pt);', 'cout << "" The value of ptr cast: "" << disp(ptr);', 'return 0;']","['Implicit Type Casting', 'The value of x: 200', 'The value of y: 200', ""Type casting char to int data type ('a' to 20): 117"", 'Type casting from int data to float type: 85', 'Implicit Type Casting:', 'Result: 4', 'Explicit Type Casting:', 'The value of float variable (res): 4.2', 'The length of the rectangle is:', '57.3456', 'The breadth of the rectangle is:', '12.9874', 'The area of the rectangle is: 740', 'The length of the rectangle is: 57.3456', 'The breadth of the rectangle is: 12.9874', 'The area of the rectangle is: 744.77', 'Before using the static cast:', 'The value of l = 39.375', 'After using the static cast:', 'The value of tot = 39', 'Dynamic casting is done successfully.', 'The value of pt: 0x5cfed0', 'The value of ch: A', 'The value of *ptr: 65', 'The value of *ch: A', 'The value of ptr cast: 500']",[],"['|||It is known as the automatic type casting.|||It automatically converted from one data type to another without any external intervention such as programmer or user. It means the compiler automatically converts one data type to another.|||All data type is automatically upgraded to the largest type without losing any information.|||It can only apply in a program if both variables are compatible with each other.||||||It is also known as the manual type casting in a program.|||It is manually cast by the programmer or user to change from one data type to another type in a program. It means a user can easily cast one data to another according to the requirement in a program.|||It does not require checking the compatibility of the variables.|||In this casting, we can upgrade or downgrade the data type of one variable to another in a program.|||It uses the cast () operator to change the type of a variable.|||&&&|||Static_cast|||dynamic_cast|||const_cast|||reinterpret_cast|||']"
152,['Binary Operator Overloading in C++'],"['This section will discuss the Binary Operator Overloading in the C++ programming language. An operator which contains two operands to perform a mathematical operation is called the Binary Operator Overloading. It is a polymorphic compile technique where a single operator can perform various functionalities by taking two operands from the programmer or user. There are multiple binary operators like +, -, *, /, etc., that can directly manipulate or overload the object of a class.']","['https://www.javatpoint.com/binary-search-in-cpp', 'https://www.javatpoint.com/type-casting-in-cpp', 'https://www.javatpoint.com/binary-search-in-cpp', 'https://www.javatpoint.com/type-casting-in-cpp', 'https://www.javatpoint.com/binary-search-in-cpp']",['https://static.javatpoint.com/cpp/images/binary-operator-overloading-in-cpp.png'],[],[],"['Syntax of the Binary Operator Overloading', 'Steps to Overload the Binary Operator to Get the Sum of Two Complex Numbers']",[],"['Following is the Binary Operator Overloading syntax in the C++ Programming language.', 'return_type: It defines the return type of the function.', 'operator: It is a keyword of the function overloading.', 'binary_operator_symbol: It represents the binary operator symbol that overloads a function to perform the calculation.', 'arg: It defines the argument passed to the function.', 'Step 1: Start the program.', 'Step 2: Declare the class.', 'Step 3: Declare the variables and their member function.', 'Step 4: Take two numbers using the user-defined inp()function.', 'Step 6: Similarly, define the binary (-) operator to subtract two numbers.', 'Step 7: Call the print() function to display the entered numbers.', 'Step 8: Declare the class objects x1, y1, sum, and sub.', 'Step 9: Now call the print() function using the x1 and y1 objects.', ""Step 10: After that, get the object sum and sub result by adding and subtracting the objects using the '+' and '-' operators."", 'Step 11: Finally, call the print() and print2() function using the x1, y1, sum, and sub.', 'Step 12: Display the addition and subtraction of the complex numbers.', 'Step 13: Stop or terminate the program.', 'Example 1: Program to perform the addition and subtraction of two complex numbers using the binary (+) and (-) operator', 'Example 2: Program to add two numbers using the binary operator overloading', ""Let's create a program to calculate the sum of two numbers in a class by overloading the binary plus(+) operator in the C++ programming language."", 'Example 3: Program to perform the arithmetic operation by overloading the multiple binary operators', ""Let's create a program to overload multiple binary operators in a class to perform the arithmetic operations.""]","[""Let's create a program to calculate the addition and subtraction of two complex numbers by overloading the '+' and '-' binary operators in the C++ programming language."", ""In the above program, we take two numbers from the user, and then use the binary operator to overload the '+' and '-' operators to add and subtract two complex numbers in a class."", 'In the above program, we take two numbers, 5 and 6, from the user and then overload the binary plus (+) operator to perform the addition that returns the sum of two numbers is 11.', 'In the above program, we declare the value of variable num is 20 and then overload the binary plus (+), minus (-), multiply (*), and division (/) operator to perform the various arithmetic operations in the Arith_num class.']","['For example, suppose we have two numbers, 5 and 6; and overload the binary (+) operator. So, the binary (+) operator adds the numbers 5 and 6 and returns 11. Furthermore, we can also perform subtraction, multiplication, and division operation to use the binary operator for various calculations.']","['return_type :: operator binary_operator_symbol (arg)', '/* use binary (+) operator to add two complex numbers. */', '#include <iostream>', 'using namespace std;', 'class Complex_num', 'int x, y;', 'public:', 'void inp()', 'cout << "" Input two complex number: "" << endl;', 'cin >> x >> y;', 'Complex_num operator + (Complex_num obj)', 'Complex_num A;', 'A.x = x + obj.x;', 'A.y = y + obj.y;', 'return (A);', 'Complex_num operator - (Complex_num obj)', 'Complex_num A;', 'A.x = x - obj.x;', 'A.y = y - obj.y;', 'return (A);', 'void print()', 'cout << x << "" + "" << y << ""i"" << ""\\n"";', 'void print2()', 'cout << x << "" - "" << y << ""i"" << ""\\n"";', 'int main ()', 'Complex_num x1, y1, sum, sub; // here we created object of class Addition i.e x1 and y1', 'x1.inp();', 'y1.inp();', 'sum = x1 + y1;', 'sub = x1 - y1; // subtract the complex number', 'cout << ""\\n Entered values are: \\n"";', 'cout << "" \\t"";', 'x1.print();', 'cout << "" \\t"";', 'y1.print();', 'cout << ""\\n The addition of two complex (real and imaginary) numbers: "";', 'sum.print(); // call print function to display the result of addition', 'cout << ""\\n The subtraction of two complex (real and imaginary) numbers: "";', 'sub.print2(); // call print2 function to display the result of subtraction', 'return 0;', '/* use binary (+) operator to perform the addition of two numbers. */', '#include <iostream>', 'using namespace std;', 'class Arith_num', 'int x, y;', 'public:', 'void input()', 'cout << "" Enter the first number: "";', 'cin >> x;', 'void input2()', 'cout << "" Enter the second number: "";', 'cin >> y;', 'Arith_num operator + (Arith_num &ob)', 'Arith_num A;', 'A.x = x + ob.x;', 'return (A);', 'void print()', 'cout << ""The sum of two numbers is: "" <<x;', 'int main ()', 'Arith_num x1, y1, res; // here we create object of the class Arith_num i.e x1 and y1', 'x1.input();', 'y1.input();', 'res = x1 + y1;', 'res.print();', 'return 0;', '/* use binary operator to perform the arithmetic operations in C++. */', '#include <iostream>', 'using namespace std;', 'class Arith_num', 'int num;', 'public:', 'void input()', 'num = 20; //define value to num variable', 'Arith_num operator + (Arith_num &ob)', 'Arith_num A;', 'A.num = num + ob.num;', 'return (A);', 'Arith_num operator - (Arith_num &ob)', 'Arith_num A;', 'A.num = num - ob.num;', 'return (A);', 'Arith_num operator * (Arith_num &ob)', 'Arith_num A;', 'A.num = num * ob.num;', 'return (A);', 'Arith_num operator / (Arith_num &ob)', 'Arith_num A;', 'A.num = num / ob.num;', 'return (A);', 'void print()', 'cout << num;', 'int main ()', 'Arith_num x1, y1, res; // here we created object of class Addition i.e x1 and y1', 'x1.input();', 'y1.input();', 'res = x1 + y1;', 'cout << "" Addition : "" ;', 'res.print();', 'res = x1 - y1; // subtract the complex number', 'cout << "" \\n \\n Subtraction : "" ;', 'res.print();', 'res = x1 * y1;', 'cout << "" \\n \\n Multiplication : "" ;', 'res.print();', 'res = x1 / y1;', 'cout << "" \\n \\n Division : "" ;', 'res.print();', 'return 0;']","['Input two complex numbers:', '5', '7', 'Input two complex numbers:', '3', '5', 'Entered values are:', '5 + 7i', '3 + 5i', 'The addition of two complex (real and imaginary) numbers: 8 + 12i', 'The subtraction of two complex (real and imaginary) numbers: 2 - 2i', 'Enter the first number: 5', 'Enter the second number: 6', 'The sum of two numbers is: 11', 'Addition : 40', 'Subtraction : 0', 'Multiplication : 400', 'Division : 1']",[],[]
153,['Binary Search in C++'],['We will discuss the binary search in the C++ programming language. Binary search is a mechanism used to find the given elements from the sorted array by continuously halving the array and then searching specified elements from a half array. And the process goes on till the match is found. It works only the sorted data structures. The time complexity of the binary search algorithm is O (log n).'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/binary-operator-overloading-in-cpp', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/binary-operator-overloading-in-cpp', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/cpp/images/binary-search-in-cpp.png'],[],[],"['Algorithm of the binary search in C++', 'Steps to perform the binary search in C++']","['Note: To perform a binary search technique in C++, a programmer or user should ensure the given array must be sorted either be in ascending or descending order.']","['Following is the algorithm to perform the binary search in C++', 'Step 1: Declare the variables and input all elements of an array in sorted order (ascending or descending).', 'Step 2: Divide the lists of array elements into halves.', 'Step 4: If the target element is less than the middle element, we search the elements into the lower half of an array.', 'Step 5: If the target element is larger than the middle element, we need to search the element into the greater half of the array.', 'Step 6: We will continuously repeat steps 4, 5, and 6 till the specified element is not found in the sorted array.', 'Example 1: Program to find the specified number from the sorted array using the binary search', ""Let's write a program to find the specified number from a sorted array using the binary search in the C++ programming language."", 'Example 2: Program to perform the binary search using the user-defined function', 'Example 3: Program to find the specified element using the recursion function', ""Let's create an example to check whether the specified element is found in the sorted array using the binary search inside the recursion function.""]","[""Step 3: Now compare the target elements with the middle element of the array. And if the value of the target element is matched with the middle element, return the middle element's position and end the search process.""]","['In the above program, we declared an array arr[] = {5, 10, 15, 20, 25, 30, 35, 40); and then we specified number \'25\' to which search from the sorted array using the binary search method. Therefore, we create a user-defined function bin_search() that searches the given number and returns the statement ""Element is found at position 5"". If the number is not defined in the array, the bin_search() function shows "" Element is not found in the array."" ', ""In the above program, we input all elements of an array in ascending order and then define a number as the target element is '12', which is searched from a sorted array using the binary search method. So, we create a user-defined function binary_search() that searches the defined element's position from an array and returns the particular element available at this position. And if the element is not available in the sorted array, it returns 0. ""]","['beg = 0;', 'end = size - 1;', 'while ( beg <= end)', 'mid = (beg + end) / 2;', '/* if the specified element is found at mid index, terminate the process and return the index. */', 'If (aarr[mid] == num)', 'return mid + 1;', 'else if (arr[mid] > num)', 'End = mid - 1;', 'Else if (arr [mid] < num)', 'Beg = mid + 1;', 'Return -1;', '#include <iostream>', '#include <conio.h>', 'using namespace std;', 'int main ()', 'int arr[100], st, mid, end, i, num, tgt;', 'cout << "" Define the size of the array: "" << endl;', 'cin >> num; // get size', 'cout << "" Enter the values in sorted array either ascending or descending order: "" << endl;', 'for (i = 0; i < num; i++)', 'cout << "" arr ["" << i << ""] = "";', 'cin >> arr[i];', 'st = 0;', 'end = num - 1; // size of array (num) - 1', 'cout << "" Define a value to be searched from sorted array: "" << endl;', 'cin >> tgt;', 'while ( st <= end)', 'mid = ( st + end ) / 2;', '/* if we get the target value at mid index, print the position and exit from the program. */', 'if (arr[mid] == tgt)', 'cout << "" Element is found at index "" << (mid + 1);', 'exit (0); // use for exit program the program', 'else if ( tgt > arr[mid])', 'st = mid + 1; // set the new value for st variable', 'else if ( tgt < arr[mid])', 'end = mid - 1; // set the new value for end variable', 'cout << "" Number is not found. "" << endl;', 'return 0;', '/* program to find the specified element from the sorted array using the binary search in C++. */', '#include <iostream>', 'using namespace std;', '/* create user-defined function and pass different parameters:', 'arr[] - it represents the sorted array;', 'num variable represents the size of an array;', 'tgt variable represents the target or specified variable to be searched in the sorted array. */', 'int bin_search (int arr[], int num, int tgt)', 'int beg = 0, end = num - 1;', 'while (beg <= end)', '/* get the mid value of sorted array and then compares with target element. */', 'int mid = (beg + end) /2;', 'if (tgt == arr[mid])', 'return mid; // when mid is equal to tgt value', 'else if (tgt < arr[mid])', 'end = mid - 1;', 'else {', 'beg = mid + 1;', 'return -1;', 'int main ()', 'int arr[] = { 5, 10, 15, 20, 25, 30, 37, 40};', 'int tgt = 25; // specified the target element', 'int num = sizeof (arr) / sizeof (arr[0]);', 'int pos = bin_search (arr, num, tgt);', 'if (pos != 1)', 'cout << "" Element is found at position "" << (pos + 1)<< endl;', 'cout << "" Element is not found in the array"" << endl;', 'return 0;', '/* find the specified number using the binary search technique inside the recursion method. */', '#include <iostream>', 'using namespace std;', 'int binary_search (int [], int, int, int);', 'int main ()', 'int i, arr[100], tgt, num, ind, st, end;', 'cout << "" Define the size of an array: "";', 'cin >> num;', 'cout << "" Enter "" << num << "" elements in ascending order: "" << endl;', 'for ( i = 0; i < num; i++)', 'cout << "" arr ["" << i << ""] = "";', 'cin >> arr[i];', 'cout << "" \\n Enter an element to be searched in ascending array: "";', 'cin >> tgt;', 'ind = binary_search (arr, 0, num - 1, tgt);', 'if (ind == 0)', 'cout << tgt << "" is not available in the array-list"";', 'cout << tgt << "" is available at position "" << ind << endl;', 'return 0;', 'int binary_search (int arr[], int st, int end, int tgt)', 'int mid;', 'if (st > end)', 'return 0;', 'mid = (st + end) / 2; // get middle value of the sorted array', 'if (arr[mid] == tgt)', 'return (mid + 1);', 'else if (arr[mid] > tgt)', 'binary_search (arr, st, mid - 1, tgt);', 'else if (arr [mid] < tgt)', 'binary_search (arr, mid + 1, end, tgt);']","['Define the size of the array:', '10', 'Enter the values in sorted array either ascending or descending order:', 'Arr [0]  = 12', 'Arr [1]  = 24', 'Arr [2]  = 36', 'Arr [3]  = 48', 'Arr [4]  = 50', 'Arr [5]  = 54', 'Arr [6]  = 58', 'Arr [7]  = 60', 'Arr [8]  = 72', 'Arr [9]  = 84', 'Define a value to be searched from sorted array:', '50', 'Element is found at index 5', 'Element is found at position 5', 'Define the size of an array: 10', 'Arr [0] = 2', 'Arr [1] = 4', 'Arr [2] = 5', 'Arr [3] = 8', 'Arr [4] = 12', 'Arr [5] = 13', 'Arr [6] = 27', 'Arr [7] = 36', 'Arr [8] = 49', 'Arr [9] = 51', 'Enter an element to be searched in ascending array: 12', '12 is available at position 6.']",[],[]
