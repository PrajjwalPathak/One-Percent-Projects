,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['.NET Framework'],['.NET is a framework to develop software applications. It is designed and developed by Microsoft and the first beta version released in 2000.'],"['https://www.javatpoint.com/net-common-language-runtime', 'https://www.javatpoint.com/https://training.javatpoint.com/dot-net-training.jsp', 'https://www.javatpoint.com/net-framework', 'https://www.javatpoint.com/net-common-language-runtime', 'https://www.javatpoint.com/net-framework-class-library', 'https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/what-is-c-sharp', 'https://www.javatpoint.com/cpp-vs-csharp', 'https://www.javatpoint.com/java-vs-csharp', 'https://www.javatpoint.com/csharp-history', 'https://www.javatpoint.com/csharp-features', 'https://www.javatpoint.com/c-sharp-example', 'https://www.javatpoint.com/csharp-variables', 'https://www.javatpoint.com/csharp-data-types', 'https://www.javatpoint.com/csharp-operators', 'https://www.javatpoint.com/csharp-keywords', 'https://www.javatpoint.com/c-sharp-if-else', 'https://www.javatpoint.com/c-sharp-switch', 'https://www.javatpoint.com/c-sharp-for-loop', 'https://www.javatpoint.com/c-sharp-while-loop', 'https://www.javatpoint.com/c-sharp-do-while-loop', 'https://www.javatpoint.com/c-sharp-break-statement', 'https://www.javatpoint.com/c-sharp-continue-statement', 'https://www.javatpoint.com/c-sharp-goto-statement', 'https://www.javatpoint.com/c-sharp-comments', 'https://www.javatpoint.com/c-sharp-function', 'https://www.javatpoint.com/c-sharp-call-by-value', 'https://www.javatpoint.com/c-sharp-call-by-reference', 'https://www.javatpoint.com/c-sharp-out-parameter', 'https://www.javatpoint.com/c-sharp-arrays', 'https://www.javatpoint.com/c-sharp-passing-array-to-function', 'https://www.javatpoint.com/c-sharp-multidimensional-array', 'https://www.javatpoint.com/c-sharp-jagged-array', 'https://www.javatpoint.com/c-sharp-params', 'https://www.javatpoint.com/c-sharp-array-class', 'https://www.javatpoint.com/c-sharp-command-line-arguments', 'https://www.javatpoint.com/c-sharp-object-and-class', 'https://www.javatpoint.com/c-sharp-constructor', 'https://www.javatpoint.com/c-sharp-destructor', 'https://www.javatpoint.com/c-sharp-this', 'https://www.javatpoint.com/c-sharp-static', 'https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/c-sharp-static-constructor', 'https://www.javatpoint.com/c-sharp-structs', 'https://www.javatpoint.com/c-sharp-enum', 'https://www.javatpoint.com/c-sharp-properties', 'https://www.javatpoint.com/c-sharp-inheritance', 'https://www.javatpoint.com/c-sharp-aggregation', 'https://www.javatpoint.com/c-sharp-member-overloading', 'https://www.javatpoint.com/c-sharp-method-overriding', 'https://www.javatpoint.com/c-sharp-base', 'https://www.javatpoint.com/c-sharp-polymorphism', 'https://www.javatpoint.com/c-sharp-sealed', 'https://www.javatpoint.com/c-sharp-abstract', 'https://www.javatpoint.com/c-sharp-interface', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/c-sharp-access-modifiers', 'https://www.javatpoint.com/c-sharp-encapsulation', 'https://www.javatpoint.com/c-sharp-strings', 'https://www.javatpoint.com/csharp-string-clone', 'https://www.javatpoint.com/csharp-string-compare', 'https://www.javatpoint.com/csharp-string-compareordinal', 'https://www.javatpoint.com/csharp-string-compareto', 'https://www.javatpoint.com/csharp-string-concat', 'https://www.javatpoint.com/csharp-string-contains', 'https://www.javatpoint.com/csharp-string-copy', 'https://www.javatpoint.com/csharp-string-copyto', 'https://www.javatpoint.com/csharp-string-endswith', 'https://www.javatpoint.com/csharp-string-equals', 'https://www.javatpoint.com/csharp-string-format', 'https://www.javatpoint.com/csharp-string-getenumerator', 'https://www.javatpoint.com/csharp-string-gethashcode', 'https://www.javatpoint.com/csharp-string-gettype', 'https://www.javatpoint.com/csharp-string-gettypecode', 'https://www.javatpoint.com/csharp-string-indexof', 'https://www.javatpoint.com/csharp-string-insert', 'https://www.javatpoint.com/csharp-string-intern', 'https://www.javatpoint.com/csharp-string-isinterned', 'https://www.javatpoint.com/csharp-string-isnormalized', 'https://www.javatpoint.com/csharp-string-normalize', 'https://www.javatpoint.com/csharp-string-isnullorempty', 'https://www.javatpoint.com/csharp-string-isnullorwhitespace', 'https://www.javatpoint.com/csharp-string-join', 'https://www.javatpoint.com/csharp-string-lastindexof', 'https://www.javatpoint.com/csharp-string-lastindexofany', 'https://www.javatpoint.com/csharp-string-padleft', 'https://www.javatpoint.com/csharp-string-padright', 'https://www.javatpoint.com/csharp-string-remove', 'https://www.javatpoint.com/csharp-string-replace', 'https://www.javatpoint.com/csharp-string-split', 'https://www.javatpoint.com/csharp-string-startswith', 'https://www.javatpoint.com/csharp-string-substring', 'https://www.javatpoint.com/csharp-string-tochararray', 'https://www.javatpoint.com/csharp-string-tolower', 'https://www.javatpoint.com/csharp-string-tolowerinvariant', 'https://www.javatpoint.com/csharp-string-tostring', 'https://www.javatpoint.com/csharp-string-toupper', 'https://www.javatpoint.com/csharp-string-toupperinvariant', 'https://www.javatpoint.com/csharp-string-trim', 'https://www.javatpoint.com/csharp-string-trimend', 'https://www.javatpoint.com/csharp-string-trimstart', 'https://www.javatpoint.com/c-sharp-exception-handling', 'https://www.javatpoint.com/c-sharp-try-catch', 'https://www.javatpoint.com/c-sharp-finally', 'https://www.javatpoint.com/c-sharp-user-defined-exceptions', 'https://www.javatpoint.com/c-sharp-checked-and-unchecked', 'https://www.javatpoint.com/c-sharp-systemexception', 'https://www.javatpoint.com/c-sharp-filestream', 'https://www.javatpoint.com/c-sharp-streamwriter', 'https://www.javatpoint.com/c-sharp-streamreader', 'https://www.javatpoint.com/c-sharp-textwriter', 'https://www.javatpoint.com/c-sharp-textreader', 'https://www.javatpoint.com/c-sharp-binarywriter', 'https://www.javatpoint.com/c-sharp-binaryreader', 'https://www.javatpoint.com/c-sharp-stringwriter', 'https://www.javatpoint.com/c-sharp-stringreader', 'https://www.javatpoint.com/c-sharp-fileinfo', 'https://www.javatpoint.com/c-sharp-directoryinfo', 'https://www.javatpoint.com/c-sharp-serialization', 'https://www.javatpoint.com/c-sharp-deserialization', 'https://www.javatpoint.com/c-sharp-system-io', 'https://www.javatpoint.com/c-sharp-collections', 'https://www.javatpoint.com/c-sharp-list', 'https://www.javatpoint.com/c-sharp-hashset', 'https://www.javatpoint.com/c-sharp-sortedset', 'https://www.javatpoint.com/c-sharp-stack', 'https://www.javatpoint.com/c-sharp-queue', 'https://www.javatpoint.com/c-sharp-linkedlist', 'https://www.javatpoint.com/c-sharp-dictionary', 'https://www.javatpoint.com/c-sharp-sorteddictionary', 'https://www.javatpoint.com/c-sharp-sortedlist', 'https://www.javatpoint.com/c-sharp-generics', 'https://www.javatpoint.com/c-sharp-delegates', 'https://www.javatpoint.com/c-sharp-reflection', 'https://www.javatpoint.com/c-sharp-anonymous-function', 'https://www.javatpoint.com/c-sharp-multithreading', 'https://www.javatpoint.com/c-sharp-thread-life-cycle', 'https://www.javatpoint.com/c-sharp-thread-class', 'https://www.javatpoint.com/c-sharp-main-thread', 'https://www.javatpoint.com/c-sharp-threading-example', 'https://www.javatpoint.com/c-sharp-thread-sleep', 'https://www.javatpoint.com/c-sharp-thread-abort', 'https://www.javatpoint.com/c-sharp-thread-join', 'https://www.javatpoint.com/c-sharp-thread-name', 'https://www.javatpoint.com/c-sharp-threadpriority', 'https://www.javatpoint.com/c-sharp-thread-synchronization', 'https://www.javatpoint.com/csharp-new-features', 'https://www.javatpoint.com/csharp-partial-types', 'https://www.javatpoint.com/csharp-iterators', 'https://www.javatpoint.com/csharp-nullable', 'https://www.javatpoint.com/csharp-delegate-covariance', 'https://www.javatpoint.com/csharp-delegate-inference', 'https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/csharp-anonymous-types', 'https://www.javatpoint.com/csharp-extension-methods', 'https://www.javatpoint.com/csharp-query-expression', 'https://www.javatpoint.com/csharp-partial-method', 'https://www.javatpoint.com/csharp-implicitly-typed-local-variable', 'https://www.javatpoint.com/csharp-object-and-collection-initializer', 'https://www.javatpoint.com/csharp-auto-implemented-properties', 'https://www.javatpoint.com/csharp-dynamic-binding', 'https://www.javatpoint.com/csharp-named-and-optional-arguments', 'https://www.javatpoint.com/csharp-asynchronous-methods', 'https://www.javatpoint.com/csharp-caller-info-attributes', 'https://www.javatpoint.com/csharp-using-static-directive', 'https://www.javatpoint.com/csharp-exception-filters', 'https://www.javatpoint.com/csharp-await-in-catch-finally-blocks', 'https://www.javatpoint.com/cshrap-auto-initialize-property', 'https://www.javatpoint.com/csharp-default-values-for-getter-only-properties', 'https://www.javatpoint.com/csharp-expression-bodied-members', 'https://www.javatpoint.com/csharp-null-propagator', 'https://www.javatpoint.com/csharp-string-interpolation', 'https://www.javatpoint.com/csharp-nameof-operator', 'https://www.javatpoint.com/csharp-dictionary-initializer', 'https://www.javatpoint.com/csharp-pattern-matching', 'https://www.javatpoint.com/csharp-tuples', 'https://www.javatpoint.com/csharp-deconstruction', 'https://www.javatpoint.com/csharp-local-functions', 'https://www.javatpoint.com/csharp-digit-separator', 'https://www.javatpoint.com/csharp-binary-literals', 'https://www.javatpoint.com/csharp-ref-keyword', 'https://www.javatpoint.com/csharp-expression-bodied-constructors-and-finalizers', 'https://www.javatpoint.com/csharp-expression-bodied-getters-and-setters', 'https://www.javatpoint.com/c-sharp-out-parameter', 'https://www.javatpoint.com/csharp-async-main', 'https://www.javatpoint.com/csharp-default-expression', 'https://www.javatpoint.com/csharp-programs', 'https://www.javatpoint.com/fibonacci-series-in-csharp', 'https://www.javatpoint.com/prime-number-program-in-csharp', 'https://www.javatpoint.com/palindrome-program-in-csharp', 'https://www.javatpoint.com/factorial-program-in-csharp', 'https://www.javatpoint.com/armstrong-number-in-csharp', 'https://www.javatpoint.com/sum-of-digits-program-in-csharp', 'https://www.javatpoint.com/csharp-program-to-reverse-number', 'https://www.javatpoint.com/csharp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/csharp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/csharp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/csharp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/csharp-program-to-print-number-triangle', 'https://www.javatpoint.com/csharp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/c-sharp-interview-questions', 'https://www.javatpoint.com/ado-net-tutorial', 'https://www.javatpoint.com/ado-net-introduction', 'https://www.javatpoint.com/ado-net-data-providers', 'https://www.javatpoint.com/ado-net-sql-server-connectivity', 'https://www.javatpoint.com/ado-net-connection', 'https://www.javatpoint.com/ado-net-command', 'https://www.javatpoint.com/ado-net-datareader', 'https://www.javatpoint.com/ado-net-dataset', 'https://www.javatpoint.com/ado-net-dataadapter', 'https://www.javatpoint.com/ado-net-datatables', 'https://www.javatpoint.com/ado-net-web-form-example', 'https://www.javatpoint.com/ado-net-mvc-example', 'https://www.javatpoint.com/ado-dot-net-interview-questions', 'https://www.javatpoint.com/asp-net-tutorial', 'https://www.javatpoint.com/asp-net-introduction', 'https://www.javatpoint.com/asp-net-life-cycle', 'https://www.javatpoint.com/asp-net-web-form-introduction', 'https://www.javatpoint.com/asp-net-web-form-features', 'https://www.javatpoint.com/asp-net-web-form-project', 'https://www.javatpoint.com/asp-net-web-form-example', 'https://www.javatpoint.com/asp-net-server-controls', 'https://www.javatpoint.com/asp-net-label', 'https://www.javatpoint.com/asp-net-textbox', 'https://www.javatpoint.com/asp-net-button', 'https://www.javatpoint.com/asp-net-hyperlink', 'https://www.javatpoint.com/asp-net-radiobutton', 'https://www.javatpoint.com/asp-net-calender', 'https://www.javatpoint.com/asp-net-checkbox', 'https://www.javatpoint.com/asp-net-linkbutton', 'https://www.javatpoint.com/asp-net-fileupload', 'https://www.javatpoint.com/asp-net-upload-multiple-files', 'https://www.javatpoint.com/asp-net-download-file', 'https://www.javatpoint.com/asp-net-cookie', 'https://www.javatpoint.com/asp-net-session', 'https://www.javatpoint.com/asp-net-dropdownlist', 'https://www.javatpoint.com/asp-net-datalist', 'https://www.javatpoint.com/asp-net-datagrid', 'https://www.javatpoint.com/asp-net-web-form-user-registration', 'https://www.javatpoint.com/asp-net-web-form-events-handling', 'https://www.javatpoint.com/asp-net-web-form-authentication', 'https://www.javatpoint.com/asp-net-web-form-model-binding', 'https://www.javatpoint.com/asp-net-html-server-controls', 'https://www.javatpoint.com/asp-net-web-form-comparevalidator', 'https://www.javatpoint.com/asp-net-web-form-rangevalidator', 'https://www.javatpoint.com/asp-net-web-form-regular-expression-validator', 'https://www.javatpoint.com/asp-net-web-form-required-field-validator', 'https://www.javatpoint.com/asp-net-web-form-validation-summary', 'https://www.javatpoint.com/asp-net-mvc-introduction', 'https://www.javatpoint.com/asp-net-mvc-project', 'https://www.javatpoint.com/asp-net-mvc-controller', 'https://www.javatpoint.com/asp-net-mvc-actions', 'https://www.javatpoint.com/asp-net-mvc-action-selectors', 'https://www.javatpoint.com/asp-net-mvc-action-filters', 'https://www.javatpoint.com/asp-net-mvc-model', 'https://www.javatpoint.com/asp-net-mvc-model-binding', 'https://www.javatpoint.com/asp-net-mvc-view', 'https://www.javatpoint.com/asp-net-mvc-validation', 'https://www.javatpoint.com/asp-net-mvc-entity-framework', 'https://www.javatpoint.com/asp-net-mvc-authentication', 'https://www.javatpoint.com/asp-net-mvc-bootstrap', 'https://www.javatpoint.com/asp-net-mvc-routing', 'https://www.javatpoint.com/asp-net-mvc-scaffolding', 'https://www.javatpoint.com/asp-net-mvc-viewbag', 'https://www.javatpoint.com/asp-net-razor', 'https://www.javatpoint.com/asp-net-razor-code-expressions', 'https://www.javatpoint.com/asp-net-razor-code-blocks', 'https://www.javatpoint.com/asp-net-razor-control-structures', 'https://www.javatpoint.com/asp-net-razor-html-helpers', 'https://www.javatpoint.com/asp-net-razor-partial-views', 'https://www.javatpoint.com/asp-dot-net-interview-questions', 'https://www.javatpoint.com/net-common-language-runtime', 'https://www.javatpoint.com/net-common-language-runtime']","['https://www.javatpoint.com/corebasic/images/dot-net.jpg', 'https://static.javatpoint.com/csharp/net/images/net-framework.png', 'https://static.javatpoint.com/csharp/net/images/net-common-language-runtime.png', 'https://static.javatpoint.com/csharp/net/images/net-framework-base-class-library.png']",[],"['CLR (Common Language Runtime)', 'FCL (Framework Class Library)', 'WinForms', 'ASP.NET', 'ADO.NET', 'WPF (Windows Presentation Foundation)', 'WCF (Windows Communication Foundation)', 'WF (Workflow Foundation)', 'LINQ (Language Integrated Query)', 'Entity Framework', 'Parallel LINQ', '.NET Framework Index']",[],[],"['It is used to develop applications for web, Windows, phone. Moreover, it provides a broad range of functionalities and support.', 'This framework provides various services like memory management, networking, security, memory management, and type-safety.', 'Following is the .NET framework Stack that shows the modules and components of the Framework.', 'The .NET Framework is composed of four main components:', 'It can improve and provide fast speed to execute the LINQ query by using all available computer capabilities.', 'Apart from the above features and libraries, .NET includes other APIs and Model to improve and enhance the .NET framework.', 'In 2015, Task parallel and Task parallel libraries were added. In .NET 4.5, a task-based asynchronous model was added.', '.Net Framework', 'C# Control Statements', 'C# Functions', 'C# Objects and Classes', 'C# Properties', 'C# Inheritance', 'C# Polymorphism', 'C# Abstraction', 'C# Namespace', 'C# Strings', 'C# String Functions', 'C# Exceptions', 'C# File I/O', 'C# Collections', 'C# Generics', 'C# Delegates', 'C# Reflection', 'C# Anonymous Functions', 'C# Multithreading', 'C# Synchronization', 'C# New Features', 'C# Programs List', 'C# Interview Questions', 'ADO.NET Tutorial', 'ADO.NET Interview Questions', 'ASP.NET Tutorial', 'ASP.NET Web Forms', 'ASP.NET Validation', 'ASP.NET MVC', 'ASP.NET Razor', 'ASP.NET Interview Questions']","['The .Net Framework supports more than 60 programming languages such as C#, F#, VB.NET, J#, VC++, JScript.NET, APL, COBOL, Perl, Oberon, ML, Pascal, Eiffel, Smalltalk, Python, Cobra, ADA, etc.', 'It is a standard library that is a collection of thousands of classes and used to build an application. The BCL (Base Class Library) is the core of the FCL and provides basic functionalities.', 'Windows Forms is a smart client technology for the .NET Framework, a set of managed libraries that simplify common application tasks such as reading and writing to the file system.', 'ASP.NET is a web framework designed and developed by Microsoft. It is used to develop websites, web applications, and web services. It provides a fantastic integration of HTML, CSS, and JavaScript. It was first released in January 2002.', 'It is a framework for building service-oriented applications. Using WCF, you can send data as asynchronous messages from one service endpoint to another.', 'Windows Workflow Foundation (WF) is a Microsoft technology that provides an API, an in-process workflow engine, and a rehostable designer to implement long-running processes as workflows within .NET applications. ', 'It is a query language, introduced in .NET 3.5 framework. It is used to make the query for data sources with C# or Visual Basics programming languages.', ""It is an ORM based open source framework which is used to work with a database using .NET objects. It eliminates a lot of developers effort to handle the database. It is Microsoft's recommended technology to deal with the database."", 'Parallel LINQ or PLINQ is a parallel implementation of LINQ to objects. It combines the simplicity and readability of LINQ and provides the power of parallel programming.']","['This framework contains a large number of class libraries known as Framework Class Library (FCL). The software programs written in .NET are executed in the execution environment, which is called CLR (Common Language Runtime). These are the core and essential parts of the .NET framework.', 'It is a program execution engine that loads and executes the program. It converts the program into native code. It acts as an interface between the framework and operating system. It does exception handling, memory management, and garbage collection. Moreover, it provides security, type-safety, interoperability, and portablility. A list of CLR components are given below:', 'ADO.NET is a module of .Net Framework, which is used to establish a connection between application and data sources. Data sources can be such as SQL Server and XML. ADO .NET consists of classes that can be used to connect, retrieve, insert, and delete data.', 'Windows Presentation Foundation (WPF) is a graphical subsystem by Microsoft for rendering user interfaces in Windows-based applications. WPF, previously known as ""Avalon"", was initially released as part of .NET Framework 3.0 in 2006. WPF uses DirectX.']",[],[],[],"['|||.NET Framework|||CLR|||FCL||||||C# Tutorial|||What is C#|||C++ vs C#|||Java vs C#|||C# History|||C# Features|||C# Example|||C# Variables|||C# Data Types|||C# Operators|||C# Keywords||||||C# if-else|||C# switch|||C# For Loop|||C# While Loop|||C# Do-While Loop|||C# Break|||C# Continue|||C# Goto|||C# Comments||||||C# Function|||C# Call By Value|||C# Call By Reference|||C# Out Parameter||||||C# Arrays|||C# Array to Function|||C# Multidimensional Array|||C# Jagged Arrays|||C# Params|||C# Array class|||C# Command Line Args||||||C# Object and Class|||C# Constructor|||C# Destructor|||C# this|||C# static|||C# static class|||C# static constructor|||C# Structs|||C# Enum||||||C# Properties||||||C# Inheritance|||C# Aggregation||||||C# Member Overloading|||C# Method Overriding|||C# Base|||C# Polymorphism|||C# Sealed||||||C# Abstract|||C# Interface||||||C# Namespaces|||C# Access Modifiers|||C# Encapsulation||||||C# Strings||||||String Clone()|||String Compare()|||String CompareOrdinal()|||String CompareTo()|||String Concat()|||String Contains()|||String Copy()|||String CopyTo()|||String EndsWith()|||String Equals()|||String Format()|||String GetEnumerator()|||String GetHashCode()|||String GetType()|||String GetTypeCode()|||String IndexOf()|||String Insert()|||String Intern()|||String IsInterned()|||String IsNormalized()|||String Normalize()|||String IsNullOrEmpty()|||IsNullOrWhiteSpace()|||String Join()|||String LastIndexOf()|||String LastIndexOfAny()|||String PadLeft()|||String PadRight()|||String Remove() |||String Replace()|||String Split() |||String StartsWith()|||String SubString()|||String ToCharArray()|||String ToLower()|||String ToLowerInvariant() |||String ToString()|||String ToUpper()|||String ToUpperInvariant()|||String Trim()|||String TrimEnd()|||String TrimStart()||||||C# Exception Handling|||C# try/catch|||C# finally|||C# Custom Exception|||C# checked unchecked|||C# SystemException||||||C# FileStream|||C# StreamWriter|||C# StreamReader|||C# TextWriter|||C# TextReader|||C# BinaryWriter|||C# BinaryReader|||C# StringWriter|||C# StringReader|||C# FileInfo|||C# DirectoryInfo|||C# Serialization|||C# Deserialization|||C# System.IO||||||C# Collections|||C# List<T>|||C# HashSet<T>|||C# SortedSet<T>|||C# Stack<T>|||C# Queue<T>|||C# LinkedList<T>|||C# Dictionary<K,V>|||C# SortedDictionary<K,V>|||C# SortedList<K,V>||||||C# Generics||||||C# Delegates||||||C# Reflection||||||Anonymous Function||||||C# Multithreading|||C# Thread Life Cycle|||C# Thread class|||C# Main Thread|||C# Thread Example|||C# Thread Sleep|||C# Thread Abort|||C# Thread Join|||C# Thread Name|||C# ThreadPriority||||||C# Synchronization||||||C# New Features (40+)||||||Partial types|||Iterators|||Nullable types|||Delegate Covariance|||Delegate inference|||Static classes|||Method group conversions (delegates)||||||Anonymous types|||Extension methods|||Query expression|||Partial method|||Implicitly typed local variables|||Object and collection initializers|||Auto-Implemented properties|||Lambda expression|||Expression trees||||||Dynamic binding|||Named and optional arguments|||Generic co and contravariance|||Embedded interop types (""NoPIA"")||||||Asynchronous methods|||Caller info attributes||||||Using static directive|||Exception filters|||Await in catch/finally blocks|||Auto property initializers|||Default values for getter-only properties|||Expression-bodied members|||Null propagator|||String interpolation|||Nameof operator|||Dictionary initializer|||Compiler-as-a-service (Roslyn)||||||Pattern matching|||Tuples|||Deconstruction|||Local functions|||Digit separator|||Binary literals|||Ref returns and locals|||Expression bodied constructors and finalizers|||Expression bodied getters and setters|||Out variables|||Generalized async return types||||||Async main|||Default expressions||||||C# Programs|||Fibonacci Series|||Prime Number|||Palindrome Number|||Factorial|||Armstrong Number|||Sum of digits|||Reverse Number|||Swap Number|||Decimal to Binary|||Number in Characters|||Alphabet Triangle|||Number Triangle|||Fibonacci Triangle||||||C# Interview Questions||||||ADO.NET Tutorial|||ADO.NET Introduction|||ADO.NET Data Providers|||ADO.NET SQL Server|||ADO.NET Connection|||ADO.NET Command|||ADO.NET DataReader|||ADO.NET DataSet|||ADO.NET DataAdapter|||ADO.NET DataTables|||ADO.NET WF Example|||ADO.NET MVC Example||||||ADO.NET Interview Questions||||||ASP .NET Tutorial|||ASP .NET Introduction|||ASP.NET Life Cycle||||||ASP.NET WF Introduction|||ASP.NET WF Features|||ASP.NET WF Project|||ASP.NET WF Example|||ASP.NET Server Controls|||ASP.NET Label|||ASP.NET TextBox|||ASP.NET Button|||ASP.NET HyperLink|||ASP.NET RadioButton|||ASP.NET Calender|||ASP.NET CheckBox|||ASP.NET LinkButton|||ASP.NET FileUpload|||Multiple FileUpload|||ASP.NET Download File|||ASP.NET Cookie|||ASP.NET Session|||ASP.NET DropDownList|||ASP.NET DataList|||ASP.NET DataGrid|||WF User Registration|||WF Events Handling|||WF Authentication|||WF Model Binding|||HTML Server Controls||||||CompareValidator|||RangeValidator|||RegularExpressionValidator|||RequiredFieldValidator|||ValidationSummary||||||ASP.NET MVC|||MVC Project|||MVC Controller|||MVC Actions|||MVC Action Selectors|||MVC Action Filters|||MVC Model|||MVC Model Binding|||MVC View|||MVC Validation|||MVC Entity Framework|||MVC Authentication|||MVC Bootstrap|||MVC Routing|||MVC Scaffolding|||MVC ViewBag||||||ASP.NET Razor|||Razor Code Expressions|||Razor Code Blocks|||Razor Control Structures|||Razor HTML Helpers|||Razor Partial Views||||||ASP.NET Interview|||&&&|||Common Language Runtime (CLR)|||Framework Class Library (FCL),|||Core Languages (WinForms, ASP.NET, and ADO.NET), and|||Other Modules (WCF, WPF, WF, Card Space, LINQ, Entity Framework, Parallel LINQ, Task Parallel Library, etc.)|||']"
1,['.NET Common Language Runtime (CLR)'],['.NET CLR is a run-time environment that manages and executes the code written in any .NET programming language.'],"['https://www.javatpoint.com/net-framework-class-library', 'https://www.javatpoint.com/net-framework', 'https://www.javatpoint.com/net-framework-class-library', 'https://www.javatpoint.com/net-framework', 'https://www.javatpoint.com/net-framework-class-library']",['https://static.javatpoint.com/csharp/net/images/net-common-language-runtime.png'],[],"['.NET CLR Functions', '.NET CLR Versions', '.NET CLR Structure']",[],[],"['It converts code into native code which further can be executed by the CPU.', 'Following are the functions of the CLR.', 'The CLR updates itself time to time to provide better performance.', 'Following is the component structure of Common Language Runtime.', 'Base Class Library Support', 'It is a class library that provides support of classes to the .NET application.', 'Thread Support', 'It manages the parallel execution of the multi-threaded application.', 'COM Marshaler', 'It provides communication between the COM objects and the application.', 'Type Checker', 'It checks types used in the application and verifies that they match to the standards provided by the CLR.', 'Code Manager', 'It manages code at execution run-time.', 'Garbage Collector', 'It releases the unused memory and allocates it to a new application.', 'Exception Handler', 'It handles the exception at runtime to avoid application failure.', 'ClassLoader', 'It is used to load all classes at run time.']",[],[],[],[],['.NET version|||CLR version&&&1.0|||1.0&&&1.1|||1.1&&&2.0|||2.0&&&3.0|||2.0&&&3.5|||2.0&&&4|||4&&&4.5|||4&&&4.6|||4&&&4.6|||4'],"['|||It converts the program into native code.|||Handles Exceptions|||Provides type-safety|||Memory management|||Provides security|||Improved performance|||Language independent|||Platform independent|||Garbage collection|||Provides language features such as inheritance, interfaces, and overloading for object-oriented programmings.|||']"
2,['.NET Framework Class Library'],"['.NET Framework Class Library is the collection of classes, namespaces, interfaces and value types that are used for .NET applications.']","['https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/net-common-language-runtime', 'https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/net-common-language-runtime', 'https://www.javatpoint.com/c-sharp-tutorial']",['https://static.javatpoint.com/csharp/net/images/net-framework-base-class-library.png'],[],"['.NET Framework Class Library Namespaces', '.NET Framework Base Class Library']",[],[],"['It contains thousands of classes that supports the following functions.', 'Following are the commonly used namespaces that contains useful classes and interfaces and defined in Framework Class Library.']",['.NET Base Class Library is the sub part of the Framework that provides library support to Common Language Runtime to work properly. It includes the System namespace and core types of the .NET framework.'],[],[],[],"['Namespaces|||Description&&&System|||It includes all common datatypes, string values, arrays and methods for data conversion.&&&System.Data, System.Data.Common, System.Data.OleDb, System.Data.SqlClient, System.Data.SqlTypes|||These are used to access a database, perform commands on a database and retrieve database.&&&System.IO, System.DirectoryServices, System.IO.IsolatedStorage|||These are used to access, read and write files.&&&System.Diagnostics|||It is used to debug and trace the execution of an application.&&&System.Net, System.Net.Sockets|||These are used to communicate over the Internet when creating peer-to-peer applications.&&&System.Windows.Forms, System.Windows.Forms.Design|||These namespaces are used to create Windows-based applications using Windows user interface components.&&&System.Web, System.WebCaching, System.Web.UI, System.Web.UI.Design, System.Web.UI.WebControls, System.Web.UI.HtmlControls, System.Web.Configuration, System.Web.Hosting, System.Web.Mail, System.Web.SessionState|||These are used to create ASP. NET Web applications that run over the web.&&&System.Web.Services, System.Web.Services.Description, System.Web.Services.Configuration, System.Web.Services.Discovery, System.Web.Services.Protocols|||These are used to create XML Web services and components that can be published over the web.&&&System.Security, System.Security.Permissions, System.Security.Policy, System.WebSecurity, System.Security.Cryptography|||These are used for authentication, authorization, and encryption purpose.&&&System.Xml, System.Xml.Schema, System.Xml.Serialization, System.Xml.XPath, System.Xml.Xsl|||These namespaces are used to create and access XML files.']",['|||Base and user-defined data types|||Support for exceptions handling|||input/output and stream operations|||Communications with the underlying system|||Access to data|||Ability to create Windows-based GUI applications|||Ability to create web-client and server applications|||Support for creating web services|||']
3,['C# Tutorial'],['C# tutorial provides basic and advanced concepts of C#. Our C# tutorial is designed for beginners and professionals.'],"['https://www.javatpoint.com/java-vs-csharp', 'https://www.javatpoint.com/net-framework', 'https://www.javatpoint.com/net-common-language-runtime', 'https://www.javatpoint.com/net-framework-class-library', 'https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/what-is-c-sharp', 'https://www.javatpoint.com/cpp-vs-csharp', 'https://www.javatpoint.com/java-vs-csharp', 'https://www.javatpoint.com/csharp-history', 'https://www.javatpoint.com/csharp-features', 'https://www.javatpoint.com/c-sharp-example', 'https://www.javatpoint.com/csharp-variables', 'https://www.javatpoint.com/csharp-data-types', 'https://www.javatpoint.com/csharp-operators', 'https://www.javatpoint.com/csharp-keywords', 'https://www.javatpoint.com/c-sharp-if-else', 'https://www.javatpoint.com/c-sharp-switch', 'https://www.javatpoint.com/c-sharp-for-loop', 'https://www.javatpoint.com/c-sharp-while-loop', 'https://www.javatpoint.com/c-sharp-do-while-loop', 'https://www.javatpoint.com/c-sharp-break-statement', 'https://www.javatpoint.com/c-sharp-continue-statement', 'https://www.javatpoint.com/c-sharp-goto-statement', 'https://www.javatpoint.com/c-sharp-comments', 'https://www.javatpoint.com/c-sharp-function', 'https://www.javatpoint.com/c-sharp-call-by-value', 'https://www.javatpoint.com/c-sharp-call-by-reference', 'https://www.javatpoint.com/c-sharp-out-parameter', 'https://www.javatpoint.com/c-sharp-arrays', 'https://www.javatpoint.com/c-sharp-passing-array-to-function', 'https://www.javatpoint.com/c-sharp-multidimensional-array', 'https://www.javatpoint.com/c-sharp-jagged-array', 'https://www.javatpoint.com/c-sharp-params', 'https://www.javatpoint.com/c-sharp-array-class', 'https://www.javatpoint.com/c-sharp-command-line-arguments', 'https://www.javatpoint.com/c-sharp-object-and-class', 'https://www.javatpoint.com/c-sharp-constructor', 'https://www.javatpoint.com/c-sharp-destructor', 'https://www.javatpoint.com/c-sharp-this', 'https://www.javatpoint.com/c-sharp-static', 'https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/c-sharp-static-constructor', 'https://www.javatpoint.com/c-sharp-structs', 'https://www.javatpoint.com/c-sharp-enum', 'https://www.javatpoint.com/c-sharp-properties', 'https://www.javatpoint.com/c-sharp-inheritance', 'https://www.javatpoint.com/c-sharp-aggregation', 'https://www.javatpoint.com/c-sharp-member-overloading', 'https://www.javatpoint.com/c-sharp-method-overriding', 'https://www.javatpoint.com/c-sharp-base', 'https://www.javatpoint.com/c-sharp-polymorphism', 'https://www.javatpoint.com/c-sharp-sealed', 'https://www.javatpoint.com/c-sharp-abstract', 'https://www.javatpoint.com/c-sharp-interface', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/c-sharp-access-modifiers', 'https://www.javatpoint.com/c-sharp-encapsulation', 'https://www.javatpoint.com/c-sharp-strings', 'https://www.javatpoint.com/csharp-string-clone', 'https://www.javatpoint.com/csharp-string-compare', 'https://www.javatpoint.com/csharp-string-compareordinal', 'https://www.javatpoint.com/csharp-string-compareto', 'https://www.javatpoint.com/csharp-string-concat', 'https://www.javatpoint.com/csharp-string-contains', 'https://www.javatpoint.com/csharp-string-copy', 'https://www.javatpoint.com/csharp-string-copyto', 'https://www.javatpoint.com/csharp-string-endswith', 'https://www.javatpoint.com/csharp-string-equals', 'https://www.javatpoint.com/csharp-string-format', 'https://www.javatpoint.com/csharp-string-getenumerator', 'https://www.javatpoint.com/csharp-string-gethashcode', 'https://www.javatpoint.com/csharp-string-gettype', 'https://www.javatpoint.com/csharp-string-gettypecode', 'https://www.javatpoint.com/csharp-string-indexof', 'https://www.javatpoint.com/csharp-string-insert', 'https://www.javatpoint.com/csharp-string-intern', 'https://www.javatpoint.com/csharp-string-isinterned', 'https://www.javatpoint.com/csharp-string-isnormalized', 'https://www.javatpoint.com/csharp-string-normalize', 'https://www.javatpoint.com/csharp-string-isnullorempty', 'https://www.javatpoint.com/csharp-string-isnullorwhitespace', 'https://www.javatpoint.com/csharp-string-join', 'https://www.javatpoint.com/csharp-string-lastindexof', 'https://www.javatpoint.com/csharp-string-lastindexofany', 'https://www.javatpoint.com/csharp-string-padleft', 'https://www.javatpoint.com/csharp-string-padright', 'https://www.javatpoint.com/csharp-string-remove', 'https://www.javatpoint.com/csharp-string-replace', 'https://www.javatpoint.com/csharp-string-split', 'https://www.javatpoint.com/csharp-string-startswith', 'https://www.javatpoint.com/csharp-string-substring', 'https://www.javatpoint.com/csharp-string-tochararray', 'https://www.javatpoint.com/csharp-string-tolower', 'https://www.javatpoint.com/csharp-string-tolowerinvariant', 'https://www.javatpoint.com/csharp-string-tostring', 'https://www.javatpoint.com/csharp-string-toupper', 'https://www.javatpoint.com/csharp-string-toupperinvariant', 'https://www.javatpoint.com/csharp-string-trim', 'https://www.javatpoint.com/csharp-string-trimend', 'https://www.javatpoint.com/csharp-string-trimstart', 'https://www.javatpoint.com/c-sharp-exception-handling', 'https://www.javatpoint.com/c-sharp-try-catch', 'https://www.javatpoint.com/c-sharp-finally', 'https://www.javatpoint.com/c-sharp-user-defined-exceptions', 'https://www.javatpoint.com/c-sharp-checked-and-unchecked', 'https://www.javatpoint.com/c-sharp-systemexception', 'https://www.javatpoint.com/c-sharp-filestream', 'https://www.javatpoint.com/c-sharp-streamwriter', 'https://www.javatpoint.com/c-sharp-streamreader', 'https://www.javatpoint.com/c-sharp-textwriter', 'https://www.javatpoint.com/c-sharp-textreader', 'https://www.javatpoint.com/c-sharp-binarywriter', 'https://www.javatpoint.com/c-sharp-binaryreader', 'https://www.javatpoint.com/c-sharp-stringwriter', 'https://www.javatpoint.com/c-sharp-stringreader', 'https://www.javatpoint.com/c-sharp-fileinfo', 'https://www.javatpoint.com/c-sharp-directoryinfo', 'https://www.javatpoint.com/c-sharp-serialization', 'https://www.javatpoint.com/c-sharp-deserialization', 'https://www.javatpoint.com/c-sharp-system-io', 'https://www.javatpoint.com/c-sharp-collections', 'https://www.javatpoint.com/c-sharp-list', 'https://www.javatpoint.com/c-sharp-hashset', 'https://www.javatpoint.com/c-sharp-sortedset', 'https://www.javatpoint.com/c-sharp-stack', 'https://www.javatpoint.com/c-sharp-queue', 'https://www.javatpoint.com/c-sharp-linkedlist', 'https://www.javatpoint.com/c-sharp-dictionary', 'https://www.javatpoint.com/c-sharp-sorteddictionary', 'https://www.javatpoint.com/c-sharp-sortedlist', 'https://www.javatpoint.com/c-sharp-generics', 'https://www.javatpoint.com/c-sharp-delegates', 'https://www.javatpoint.com/c-sharp-reflection', 'https://www.javatpoint.com/c-sharp-anonymous-function', 'https://www.javatpoint.com/c-sharp-multithreading', 'https://www.javatpoint.com/c-sharp-thread-life-cycle', 'https://www.javatpoint.com/c-sharp-thread-class', 'https://www.javatpoint.com/c-sharp-main-thread', 'https://www.javatpoint.com/c-sharp-threading-example', 'https://www.javatpoint.com/c-sharp-thread-sleep', 'https://www.javatpoint.com/c-sharp-thread-abort', 'https://www.javatpoint.com/c-sharp-thread-join', 'https://www.javatpoint.com/c-sharp-thread-name', 'https://www.javatpoint.com/c-sharp-threadpriority', 'https://www.javatpoint.com/c-sharp-thread-synchronization', 'https://www.javatpoint.com/csharp-new-features', 'https://www.javatpoint.com/csharp-partial-types', 'https://www.javatpoint.com/csharp-iterators', 'https://www.javatpoint.com/csharp-nullable', 'https://www.javatpoint.com/csharp-delegate-covariance', 'https://www.javatpoint.com/csharp-delegate-inference', 'https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/csharp-anonymous-types', 'https://www.javatpoint.com/csharp-extension-methods', 'https://www.javatpoint.com/csharp-query-expression', 'https://www.javatpoint.com/csharp-partial-method', 'https://www.javatpoint.com/csharp-implicitly-typed-local-variable', 'https://www.javatpoint.com/csharp-object-and-collection-initializer', 'https://www.javatpoint.com/csharp-auto-implemented-properties', 'https://www.javatpoint.com/csharp-dynamic-binding', 'https://www.javatpoint.com/csharp-named-and-optional-arguments', 'https://www.javatpoint.com/csharp-asynchronous-methods', 'https://www.javatpoint.com/csharp-caller-info-attributes', 'https://www.javatpoint.com/csharp-using-static-directive', 'https://www.javatpoint.com/csharp-exception-filters', 'https://www.javatpoint.com/csharp-await-in-catch-finally-blocks', 'https://www.javatpoint.com/cshrap-auto-initialize-property', 'https://www.javatpoint.com/csharp-default-values-for-getter-only-properties', 'https://www.javatpoint.com/csharp-expression-bodied-members', 'https://www.javatpoint.com/csharp-null-propagator', 'https://www.javatpoint.com/csharp-string-interpolation', 'https://www.javatpoint.com/csharp-nameof-operator', 'https://www.javatpoint.com/csharp-dictionary-initializer', 'https://www.javatpoint.com/csharp-pattern-matching', 'https://www.javatpoint.com/csharp-tuples', 'https://www.javatpoint.com/csharp-deconstruction', 'https://www.javatpoint.com/csharp-local-functions', 'https://www.javatpoint.com/csharp-digit-separator', 'https://www.javatpoint.com/csharp-binary-literals', 'https://www.javatpoint.com/csharp-ref-keyword', 'https://www.javatpoint.com/csharp-expression-bodied-constructors-and-finalizers', 'https://www.javatpoint.com/csharp-expression-bodied-getters-and-setters', 'https://www.javatpoint.com/c-sharp-out-parameter', 'https://www.javatpoint.com/csharp-async-main', 'https://www.javatpoint.com/csharp-default-expression', 'https://www.javatpoint.com/csharp-programs', 'https://www.javatpoint.com/fibonacci-series-in-csharp', 'https://www.javatpoint.com/prime-number-program-in-csharp', 'https://www.javatpoint.com/palindrome-program-in-csharp', 'https://www.javatpoint.com/factorial-program-in-csharp', 'https://www.javatpoint.com/armstrong-number-in-csharp', 'https://www.javatpoint.com/sum-of-digits-program-in-csharp', 'https://www.javatpoint.com/csharp-program-to-reverse-number', 'https://www.javatpoint.com/csharp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/csharp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/csharp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/csharp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/csharp-program-to-print-number-triangle', 'https://www.javatpoint.com/csharp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/java-vs-csharp', 'https://www.javatpoint.com/java-vs-csharp']",['https://static.javatpoint.com/csharp/images/c-sharp.png'],[],"['What is C#', 'C# Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['C# is a programming language of .Net Framework.', 'C# is pronounced as ""C-Sharp"". It is an object-oriented programming language provided by Microsoft that runs on .Net Framework.', 'By the help of C# programming language, we can develop different types of secured and robust applications:', 'C# programming language is influenced by C++, Java, Eiffel, Modula-3, Pascal etc. languages.', '.Net Framework', 'C# Control Statements', 'C# Functions', 'C# Objects and Classes', 'C# Properties', 'C# Inheritance', 'C# Polymorphism', 'C# Abstraction', 'C# Namespace', 'C# Strings', 'C# String Functions', 'C# Exceptions', 'C# File I/O', 'C# Collections', 'C# Generics', 'C# Delegates', 'C# Reflection', 'C# Anonymous Functions', 'C# Multithreading', 'C# Synchronization', 'C# New Features', 'C# Programs List', 'Before learning C#, you must have the basic knowledge of C Programming Language.', 'Our C# tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this C# tutorial. But if there is any mistake, please post the problem in contact form.']",['C# is approved as a standard by ECMA and ISO. C# is designed for CLI (Common Language Infrastructure). CLI is a specification that describes executable code and runtime environment.'],"['Our C# tutorial includes all topics of C# such as first example, control statements, objects and classes, inheritance, constructor, destructor, this, static, sealed, polymorphism, abstraction, abstract class, interface, namespace, encapsulation, properties, indexer, arrays, strings, regex, exception handling, multithreading, File IO, Collections etc.']",[],[],[],"['|||Window applications|||Web applications|||Distributed applications|||Web service applications|||Database applications etc.||||||.NET Framework|||CLR|||FCL||||||C# Tutorial|||What is C#|||C++ vs C#|||Java vs C#|||C# History|||C# Features|||C# Example|||C# Variables|||C# Data Types|||C# Operators|||C# Keywords||||||C# if-else|||C# switch|||C# For Loop|||C# While Loop|||C# Do-While Loop|||C# Break|||C# Continue|||C# Goto|||C# Comments||||||C# Function|||C# Call By Value|||C# Call By Reference|||C# Out Parameter||||||C# Arrays|||C# Array to Function|||C# Multidimensional Array|||C# Jagged Arrays|||C# Params|||C# Array class|||C# Command Line Args||||||C# Object and Class|||C# Constructor|||C# Destructor|||C# this|||C# static|||C# static class|||C# static constructor|||C# Structs|||C# Enum||||||C# Properties||||||C# Inheritance|||C# Aggregation||||||C# Member Overloading|||C# Method Overriding|||C# Base|||C# Polymorphism|||C# Sealed||||||C# Abstract|||C# Interface||||||C# Namespaces|||C# Access Modifiers|||C# Encapsulation||||||C# Strings||||||String Clone()|||String Compare()|||String CompareOrdinal()|||String CompareTo()|||String Concat()|||String Contains()|||String Copy()|||String CopyTo()|||String EndsWith()|||String Equals()|||String Format()|||String GetEnumerator()|||String GetHashCode()|||String GetType()|||String GetTypeCode()|||String IndexOf()|||String Insert()|||String Intern()|||String IsInterned()|||String IsNormalized()|||String Normalize()|||String IsNullOrEmpty()|||IsNullOrWhiteSpace()|||String Join()|||String LastIndexOf()|||String LastIndexOfAny()|||String PadLeft()|||String PadRight()|||String Remove() |||String Replace()|||String Split() |||String StartsWith()|||String SubString()|||String ToCharArray()|||String ToLower()|||String ToLowerInvariant() |||String ToString()|||String ToUpper()|||String ToUpperInvariant()|||String Trim()|||String TrimEnd()|||String TrimStart()||||||C# Exception Handling|||C# try/catch|||C# finally|||C# Custom Exception|||C# checked unchecked|||C# SystemException||||||C# FileStream|||C# StreamWriter|||C# StreamReader|||C# TextWriter|||C# TextReader|||C# BinaryWriter|||C# BinaryReader|||C# StringWriter|||C# StringReader|||C# FileInfo|||C# DirectoryInfo|||C# Serialization|||C# Deserialization|||C# System.IO||||||C# Collections|||C# List<T>|||C# HashSet<T>|||C# SortedSet<T>|||C# Stack<T>|||C# Queue<T>|||C# LinkedList<T>|||C# Dictionary<K,V>|||C# SortedDictionary<K,V>|||C# SortedList<K,V>||||||C# Generics||||||C# Delegates||||||C# Reflection||||||Anonymous Function||||||C# Multithreading|||C# Thread Life Cycle|||C# Thread class|||C# Main Thread|||C# Thread Example|||C# Thread Sleep|||C# Thread Abort|||C# Thread Join|||C# Thread Name|||C# ThreadPriority||||||C# Synchronization||||||C# New Features||||||Partial types|||Iterators|||Nullable types|||Delegate Covariance|||Delegate inference|||Static classes|||Method group conversions (delegates)||||||Anonymous types|||Extension methods|||Query expression|||Partial method|||Implicitly typed local variables|||Object and collection initializers|||Auto-Implemented properties|||Lambda expression|||Expression trees||||||Dynamic binding|||Named and optional arguments|||Generic co and contravariance|||Embedded interop types (""NoPIA"")||||||Asynchronous methods|||Caller info attributes||||||Using static directive|||Exception filters|||Await in catch/finally blocks|||Auto property initializers|||Default values for getter-only properties|||Expression-bodied members|||Null propagator|||String interpolation|||Nameof operator|||Dictionary initializer|||Compiler-as-a-service (Roslyn)||||||Pattern matching|||Tuples|||Deconstruction|||Local functions|||Digit separator|||Binary literals|||Ref returns and locals|||Expression bodied constructors and finalizers|||Expression bodied getters and setters|||Out variables|||Generalized async return types||||||Async main|||Default expressions||||||C# Programs|||Fibonacci Series|||Prime Number|||Palindrome Number|||Factorial|||Armstrong Number|||Sum of digits|||Reverse Number|||Swap Number|||Decimal to Binary|||Number in Characters|||Alphabet Triangle|||Number Triangle|||Fibonacci Triangle|||']"
4,['Java vs C#'],['There are many differences and similarities between Java and C#. A list of top differences between Java and C# are given below:'],"['https://www.javatpoint.com/csharp-history', 'https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/csharp-history', 'https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/csharp-history']",[],[],[],[],[],[],[],[],[],[],"[""No.|||Java|||C#&&&1)|||Java is a high level, robust, secured and object-oriented programming language developed by Oracle.|||C# is an object-oriented programming language developed by Microsoft that runs on .Net Framework.&&&2)|||Java programming language is designed to be run on a Java platform, by the help of Java Runtime Environment (JRE).|||C# programming language is designed to be run on the Common Language Runtime (CLR).&&&3)|||Java type safety is safe.|||C# type safety is unsafe.&&&4)|||In java, built-in data types that are passed by value are called primitive types.|||In C#, built-in data types that are passed by value are called simple types.&&&5)|||Arrays in Java are direct specialization of Object.|||Arrays in C# are specialization of System.&&&6)|||Java does not support conditional compilation.|||C# supports conditional compilation using preprocessor directives.&&&7)|||Java doesn't support goto statement.|||C# supports goto statement.&&&8)|||Java doesn't support structures and unions.|||C# supports structures and unions.&&&9)|||Java supports checked exception and unchecked exception.|||C# supports unchecked exception.""]",[]
5,['C# History'],['History of C# language is interesting to know. Here we are going to discuss brief history of C# language.'],"['https://www.javatpoint.com/csharp-features', 'https://www.javatpoint.com/java-vs-csharp', 'https://www.javatpoint.com/csharp-features', 'https://www.javatpoint.com/java-vs-csharp', 'https://www.javatpoint.com/csharp-features']","['https://static.javatpoint.com/csharp/images/Anders_Hejlsberg.jpg', 'https://static.javatpoint.com/csharp/images/csharp-history2.png']",[],[],[],[],"['C# is pronounced as ""C-Sharp"". It is an object-oriented programming language provided by Microsoft that runs on .Net Framework.', 'Anders Hejlsberg is known as the founder of C# language.', 'It is based on C++ and Java, but it has many additional extensions used to perform component oriented programming approach.', 'C# has evolved much since their first release in the year 2002. It was introduced with .NET Framework 1.0 and the current version of C# is 5.0.', ""Let's see the important features introduced in each version of C# are given below.""]",[],[],[],[],[],[]
6,['C# Features'],['C# is object oriented programming language. It provides a lot of features that are given below.'],"['https://www.javatpoint.com/c-sharp-example', 'https://www.javatpoint.com/csharp-history', 'https://www.javatpoint.com/c-sharp-example', 'https://www.javatpoint.com/csharp-history', 'https://www.javatpoint.com/c-sharp-example']",['https://static.javatpoint.com/csharp/images/csharp-features1.png'],[],[],"['1) Simple', '2) Modern Programming Language', '3) Object Oriented', '4) Type Safe', '5) Interoperability', '6) Scalable and Updateable', '7) Component Oriented', '8) Structured Programming Language', '9) Rich Library', '10) Fast Speed']",[],"['C# programming is based upon the current trend and it is very powerful and simple for building scalable, interoperable and robust applications.', 'C# type safe code can only access the memory location that it has permission to execute. Therefore it improves a security of the program.', 'Interoperability process enables the C# programs to do almost anything that a native C++ application can do.', 'C# is automatic scalable and updateable programming language. For updating our application we delete the old files and update them with new ones. ', 'C# provides a lot of inbuilt functions that makes the development fast.', 'The compilation and execution time of C# language is fast.']","['C# is a simple language in the sense that it provides structured approach (to break the problem into parts), rich set of library functions, data types etc.', 'C# is object oriented programming language. OOPs makes development and maintenance easier where as in Procedure-oriented programming language it is not easy to manage if code grows as project size grow.', 'C# is component oriented programming language. It is the predominant software development methodology used to develop more robust and highly scalable applications.', 'C# is a structured programming language in the sense that we can break the program into parts using functions. So, it is easy to understand and modify.']",[],[],[],[],['|||Simple|||Modern programming language|||Object oriented|||Type safe|||Interoperability|||Scalable and Updateable|||Component oriented|||Structured programming language|||Rich Library|||Fast speed|||']
7,['C# Example: Hello World'],"['In C# programming language, a simple ""hello world"" program can be written by multiple ways. Let\'s see the top 4 ways to create a simple C# example:']","['https://www.javatpoint.com/csharp-variables', 'https://www.javatpoint.com/csharp-features', 'https://www.javatpoint.com/csharp-variables', 'https://www.javatpoint.com/csharp-features', 'https://www.javatpoint.com/csharp-variables']",[],[],"['C# Simple Example', 'C# Example: Using System', 'C# Example: Using public modifier', 'C# Example: Using namespace']",['Description'],[],"['class: is a keyword which is used to define class.', 'static: is a keyword which means object is not required to access static members. So it saves memory.', ""void: is the return type of the method. It does't return any value. In such case, return statement is not required."", 'We can also specify public modifier before class and Main() method. Now, it can be accessed from outside the class also.', 'We can create classes inside the namespace. It is used to group related classes. It is used to categorize classes so that it can be easy to maintain.']","['Program: is the class name. A class is a blueprint or template from which objects are created. It can have data members and methods. Here, it has only Main method.', 'Main: is the method name. It is the entry point for any C# program. Whenever we run the C# program, Main() method is invoked first before any other method. It represents start up of the program.', 'string[] args: is used for command line arguments in C#. While running the C# program, we can pass values. These values are known as arguments which we can use in the program.', 'System.Console.WriteLine(""Hello World!""): Here, System is the namespace. Console is the class defined in System namespace. The WriteLine() is the static method of Console class which is used to write the text on the console.', ""If we write using System before the class, it means we don't need to specify System namespace for accessing any class of this namespace. Here, we are using Console class without specifying System.Console.""]",[],"['class Program', 'static void Main(string[] args)', '{', 'System.Console.WriteLine(""Hello World!"");', '}', 'using System;', 'class Program', 'static void Main(string[] args)', '{', 'Console.WriteLine(""Hello World!"");', '}', 'using System;', 'public class Program', 'public static void Main(string[] args)', '{', 'Console.WriteLine(""Hello World!"");', '}', 'using System;', 'namespace ConsoleApplication1', 'public class Program', 'public static void Main(string[] args)', '{', 'Console.WriteLine(""Hello World!"");', '}']","['Hello World!', 'Hello World!', 'Hello World!', 'Hello World!']",[],['|||Simple Example|||Using System|||Using public modifier|||Using namespace|||']
8,['C# Variable'],['A variable is a name of memory location. It is used to store data. Its value can be changed and it can be reused many times.'],"['https://www.javatpoint.com/csharp-data-types', 'https://www.javatpoint.com/c-sharp-example', 'https://www.javatpoint.com/csharp-data-types', 'https://www.javatpoint.com/c-sharp-example', 'https://www.javatpoint.com/csharp-data-types']",[],[],[],['Rules for defining variables'],[],"['It is a way to represent memory location through symbol so that it can be easily identified.', 'The basic variable type available in C# can be categorized as:', ""Let's see the syntax to declare a variable:"", 'The example of declaring variable is given below:', 'Here, i, j, d, f, ch are variables and int, double, float, char are data types.', 'We can also provide values while declaring the variables as given below:', 'A variable can have alphabets, digits and underscore.', ""A variable name can start with alphabet and underscore only. It can't start with digit."", 'No white space is allowed within variable name.', 'A variable name must not be any reserved word or keyword e.g. char, float etc.', 'Valid variable names:', 'Invalid variable names:']",[],[],"['type variable_list;', 'int i, j;', 'double d;', 'float f;', 'char ch;', 'int i=2,j=4;  //declaring 2 variable of integer type', 'float f=40.2;', ""char ch='B';"", 'int x;', 'int _x;', 'int k20;', 'int 4;', 'int x y;', 'int double;']",[],"['Variable Type|||Example&&&Decimal types|||decimal&&&Boolean types|||True or false value, as assigned&&&Integral types|||int, char, byte, short, long&&&Floating point types|||float and double&&&Nullable types|||Nullable data types']",[]
9,['C# Data Types'],"['A data type specifies the type of data that a variable can store such as integer, floating, character etc.']","['https://www.javatpoint.com/csharp-operators', 'https://www.javatpoint.com/csharp-variables', 'https://www.javatpoint.com/csharp-operators', 'https://www.javatpoint.com/csharp-variables', 'https://www.javatpoint.com/csharp-operators']","['https://static.javatpoint.com/csharp/images/csharp-data-type1.png', 'https://static.javatpoint.com/csharp/images/csharp-data-type2.png']",[],"['Value Data Type', 'Reference Data Type', 'Pointer Data Type', 'Symbols used in pointer', 'Declaring a pointer']",[],[],"['There are 3 types of data types in C# language.', 'The value data types are integer-based and floating-point based. C# language supports both signed and unsigned literals.', 'There are 2 types of value data type in C# language.', '1) Predefined Data Types - such as Integer, Boolean, Float, etc.', '2) User defined Data Types - such as Structure, Enumerations, etc.', 'The memory size of data types may change according to 32 or 64 bit operating system.', ""Let's see the value data types. It size is given according to 32 bit OS."", 'The reference data types do not contain the actual data stored in a variable, but they contain a reference to the variables.', 'If the data is changed by one of the variables, the other variable automatically reflects this change in value.', 'There are 2 types of reference data type in C# language.', '1) Predefined Types - such as Objects, String.', '2) User defined Types - such as Classes, Interface.', 'The pointer in C# language is a variable, it is also known as locator or indicator that points to an address of a value.', 'The pointer in C# language can be declared using * (asterisk symbol).']",[],[],"['int * a;  //pointer to int', 'char * c; //pointer to char']",[],"['Types|||Data Types&&&Value Data Type|||short, int, char, float, double etc&&&Reference Data Type|||String, Class, Object and Interface&&&Pointer Data Type|||Pointers', 'Data Types|||Memory Size|||Range&&&char|||1 byte|||-128 to 127&&&signed char|||1 byte|||-128 to 127&&&unsigned char|||1 byte|||0 to 127&&&short|||2 byte|||-32,768 to 32,767&&&signed short|||2 byte|||-32,768 to 32,767&&&unsigned short|||2 byte|||0 to 65,535&&&int|||4 byte|||-2,147,483,648 to -2,147,483,647&&&signed int|||4 byte|||-2,147,483,648 to -2,147,483,647&&&unsigned int|||4 byte|||0 to 4,294,967,295&&&long|||8 byte|||?9,223,372,036,854,775,808 to 9,223,372,036,854,775,807&&&signed long|||8 byte|||?9,223,372,036,854,775,808 to 9,223,372,036,854,775,807&&&unsigned long|||8 byte|||0 - 18,446,744,073,709,551,615&&&float|||4 byte|||1.5 * 10-45 - 3.4 * 1038, 7-digit precision&&&double|||8 byte|||5.0 * 10-324 - 1.7 * 10308, 15-digit precision&&&decimal|||16 byte|||at least -7.9 * 10?28 - 7.9 * 1028, with at least 28-digit precision', 'Symbol|||Name|||Description&&&& (ampersand sign)|||Address operator|||Determine the address of a variable.&&&* (asterisk sign)|||Indirection operator|||Access the value of an address.']",[]
10,['C# operators'],"['An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, logical, bitwise etc.']","['https://www.javatpoint.com/csharp-keywords', 'https://www.javatpoint.com/csharp-data-types', 'https://www.javatpoint.com/csharp-keywords', 'https://www.javatpoint.com/csharp-data-types', 'https://www.javatpoint.com/csharp-keywords']",['https://static.javatpoint.com/csharp/images/csharp-operators1.png'],[],['Precedence of Operators in C#'],[],[],"['There are following types of operators to perform different types of operations in C# language.', ""Let's understand the precedence by the example given below:"", 'The ""data"" variable will contain 35 because * (multiplicative operator) is evaluated before + (additive operator).', 'The precedence and associativity of C# operators is given below:']","['The precedence of operator specifies that which operator will be evaluated first and next. The associativity specifies the operators direction to be evaluated, it may be left to right or right to left.']",[],['int data= 10+ 5*5'],[],['Category (By Precedence)|||Operator(s)|||Associativity&&&Unary|||+ - ! ~ ++ -- (type)* & sizeof|||Right to Left&&&Additive|||+ -|||Left to Right&&&Multiplicative||| % / *|||Left to Right&&&Relational|||< > <= >= |||Left to Right&&&Shift|||<< >>|||Left to Right&&&Equality|||== !=|||Right to Left&&&Logical AND|||&|||Left to Right&&&Logical OR|||||||Left to Right&&&Logical XOR|||^|||Left to Right&&&Conditional OR||||||||Left to Right&&&Conditional AND|||&&|||Left to Right&&&Null Coalescing|||??|||Left to Right&&&Ternary|||?:|||Right to Left&&&Assignment|||= *= /= %= += - = <<= >>= &= ^= |= =>|||Right to Left'],['|||Arithmetic Operators|||Relational Operators|||Logical Operators|||Bitwise Operators|||Assignment Operators|||Unary Operators|||Ternary Operators|||Misc Operators|||']
11,['C# Keywords'],"['A keyword is a reserved word. You cannot use it as a variable name, constant name etc.']","['https://www.javatpoint.com/c-sharp-if-else', 'https://www.javatpoint.com/csharp-operators', 'https://www.javatpoint.com/c-sharp-if-else', 'https://www.javatpoint.com/csharp-operators', 'https://www.javatpoint.com/c-sharp-if-else']",[],[],[],[],[],"['In C# keywords cannot be used as identifiers. However, if we want to use the keywords as identifiers, we may prefix the keyword with @ character.', 'A list of Reserved Keywords available in C# programming language is given below:', 'Some identifiers which have special meaning in context of code are called as Contextual Keywords.', ' A list of Contextual Keywords available in C# programming language is given below:']",[],[],[],[],"['abstract|||base|||as|||bool|||break|||catch|||case&&&byte|||char|||checked|||class|||const|||continue|||decimal&&&private|||protected|||public|||return|||readonly|||ref|||sbyte&&&explicit|||extern|||false|||finally|||fixed|||float|||for&&&foreach|||goto|||if|||implicit|||in|||in (generic modifier)|||int&&&ulong|||ushort|||unchecked|||using|||unsafe|||virtual|||void&&&null|||object|||operator|||out|||out (generic modifier)|||override|||params&&&default|||delegate|||do|||double|||else|||enum|||event&&&sealed|||short|||sizeof|||stackalloc|||static|||string|||struct&&&switch|||this|||throw|||true|||try|||typeof|||uint&&&abstract|||base|||as|||bool|||break|||catch|||case&&&volatile|||while|||||||||||||||', 'add|||group|||ascending|||descending|||dynamic|||from|||get&&&global|||alias|||into|||join|||let|||select|||set&&&partial (type)|||partial(method)|||remove|||orderby|||||||||']",[]
12,['C# if-else'],"['In C# programming, the if statement is used to test the condition. There are various types of if statements in C#.']","['https://www.javatpoint.com/c-sharp-switch', 'https://www.javatpoint.com/c-sharp-example', 'https://www.javatpoint.com/c-sharp-switch', 'https://www.javatpoint.com/c-sharp-example', 'https://www.javatpoint.com/c-sharp-switch']","['https://static.javatpoint.com/images/core/if1.png', 'https://static.javatpoint.com/images/core/if2.png', 'https://static.javatpoint.com/cpages/images/elseifladder.png']",[],"['C# IF Statement', 'C# IF-else Statement', 'C# If-else Example: with input from user', 'C# IF-else-if ladder Statement']","['C# If Example', 'C# If-else Example', 'C# If else-if Example']",[],"['The C# if statement tests the condition. It is executed if condition is true.', 'The C# if-else statement also tests the condition. It executes the if block if condition is true otherwise else block is executed.', 'The C# if-else-if ladder statement executes one condition from multiple statements.']","['In this example, we are getting input from the user using Console.ReadLine() method. It returns string. For numeric value, you need to convert it into int using Convert.ToInt32() method.']",[],"['if(condition){', 'using System;', 'public class IfExample', 'public static void Main(string[] args)', '{', 'int num = 10;', 'if (num % 2 == 0)', '{', 'Console.WriteLine(""It is even number"");', '}', '', '}', 'if(condition){', 'using System;', 'public class IfExample', 'public static void Main(string[] args)', '{', 'int num = 11;', 'if (num % 2 == 0)', '{', 'Console.WriteLine(""It is even number"");', '}', 'else', '{', 'Console.WriteLine(""It is odd number"");', '}', '', '}', 'using System;', 'public class IfExample', 'public static void Main(string[] args)', '{', 'Console.WriteLine(""Enter a number:"");', 'int num = Convert.ToInt32(Console.ReadLine());', 'if (num % 2 == 0)', '{', 'Console.WriteLine(""It is even number"");', '}', 'else', '{', 'Console.WriteLine(""It is odd number"");', '}', '', '}', 'if(condition1){', '}else if(condition2){', 'else if(condition3){', 'using System;', 'public class IfExample', 'public static void Main(string[] args)', '{', 'Console.WriteLine(""Enter a number to check grade:"");', 'int num = Convert.ToInt32(Console.ReadLine());', 'if (num <0 || num >100)', '{', 'Console.WriteLine(""wrong number"");', '}', 'else if(num >= 0 && num < 50){', 'Console.WriteLine(""Fail"");', '}', 'else if (num >= 50 && num < 60)', '{', 'Console.WriteLine(""D Grade"");', '}', 'else if (num >= 60 && num < 70)', '{', 'Console.WriteLine(""C Grade"");', '}', 'else if (num >= 70 && num < 80)', '{', 'Console.WriteLine(""B Grade"");', '}', 'else if (num >= 80 && num < 90)', '{', 'Console.WriteLine(""A Grade"");', '}', 'else if (num >= 90 && num <= 100)', '{', 'Console.WriteLine(""A+ Grade"");', '}', '}']","['It is even number', 'It is odd number', 'Enter a number:11\nIt is odd number', 'Enter a number:12\nIt is even number', 'Enter a number to check grade:66\nC Grade', 'Enter a number to check grade:-2\nwrong number']",[],['|||if statement|||if-else statement|||nested if statement|||if-else-if ladder|||']
13,['C# switch'],['The C# switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement in C#.'],"['https://www.javatpoint.com/c-sharp-for-loop', 'https://www.javatpoint.com/c-sharp-if-else', 'https://www.javatpoint.com/c-sharp-for-loop', 'https://www.javatpoint.com/c-sharp-if-else', 'https://www.javatpoint.com/c-sharp-for-loop']",['https://static.javatpoint.com/cpages/images/cswitch.png'],[],[],['C# Switch Example'],"['Note: In C#, break statement is must in switch cases.']",[],[],[],"['switch(expression){', 'case value1:', 'case value2:', '......', 'default:', 'using System;', 'public class SwitchExample', 'public static void Main(string[] args)', 'Console.WriteLine(""Enter a number:"");', 'int num = Convert.ToInt32(Console.ReadLine());', 'switch (num)', '{', 'case 10: Console.WriteLine(""It is 10""); break;', 'case 20: Console.WriteLine(""It is 20""); break;', 'case 30: Console.WriteLine(""It is 30""); break;', 'default: Console.WriteLine(""Not 10, 20 or 30""); break;', '}']","['Enter a number:\n10\nIt is 10', 'Enter a number:\n55\nNot 10, 20 or 30']",[],[]
14,['C# For Loop'],"['The C# for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop than while or do-while loops.']","['https://www.javatpoint.com/c-sharp-while-loop', 'https://www.javatpoint.com/c-sharp-switch', 'https://www.javatpoint.com/c-sharp-while-loop', 'https://www.javatpoint.com/c-sharp-switch', 'https://www.javatpoint.com/c-sharp-while-loop']",['https://static.javatpoint.com/cpages/images/forloop.png'],[],"['C# Nested For Loop', 'C# Infinite For Loop']",['C# For Loop Example'],[],"['The C# for loop is same as C/C++. We can initialize variable, check condition and increment/decrement value.', 'Flowchart:', ""Let's see a simple example of nested for loop in C#."", ""If we use double semicolon in for loop, it will be executed infinite times. Let's see a simple example of infinite for loop in C#.""]",[],"['In C#, we can use for loop inside another for loop, it is known as nested for loop. The inner loop is executed fully when outer loop is executed one time. So if outer loop and inner loop are executed 3 times, inner loop will be executed 3 times for each outer loop i.e. total 9 times.']","['for(initialization; condition; incr/decr){', 'using System;', 'public class ForExample', 'public static void Main(string[] args)', 'for(int i=1;i<=10;i++){', 'Console.WriteLine(i);', '}', 'using System;', 'public class ForExample', 'public static void Main(string[] args)', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'Console.WriteLine(i+"" ""+j);', '}', '}', 'using System;', 'public class ForExample', 'public static void Main(string[] args)', 'for (; ;)', '{', 'Console.WriteLine(""Infinitive For Loop"");', '}']","['1\n2\n3\n4\n5\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3', 'Infinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nctrl+c']",[],[]
15,['C# While Loop'],"['In C#, while loop is used to iterate a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop than for loop.']","['https://www.javatpoint.com/c-sharp-do-while-loop', 'https://www.javatpoint.com/c-sharp-for-loop', 'https://www.javatpoint.com/c-sharp-do-while-loop', 'https://www.javatpoint.com/c-sharp-for-loop', 'https://www.javatpoint.com/c-sharp-do-while-loop']",['https://static.javatpoint.com/cpages/images/while.png'],[],[],"['C# While Loop Example', 'C# Nested While Loop Example:', 'C# Infinitive While Loop Example:']",[],"['Flowchart:', ""Let's see a simple example of while loop to print table of 1."", ""Let's see a simple example of nested while loop in C# programming language."", 'We can also create infinite while loop by passing true as the test condition.']","['In C#, we can use while loop inside another while loop, it is known as nested while loop. The nested while loop is executed fully when outer loop is executed once.']",[],"['while(condition){', 'using System;', 'public class WhileExample', 'public static void Main(string[] args)', 'int i=1;', 'while(i<=10)', '{', 'Console.WriteLine(i);', 'i++;', '}', 'using System;', 'public class WhileExample', 'public static void Main(string[] args)', 'int i=1;', 'while(i<=3)', '{', 'int j = 1;', 'while (j <= 3)', '{', 'Console.WriteLine(i+"" ""+j);', 'j++;', '}', 'i++;', '}', 'using System;', 'public class WhileExample', 'public static void Main(string[] args)', 'while(true)', '{', 'Console.WriteLine(""Infinitive While Loop"");', '}']","['1\n2\n3\n4\n5\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3', 'Infinitive While Loop \nInfinitive While Loop\nInfinitive While Loop\nInfinitive While Loop\nInfinitive While Loop\nctrl+c']",[],[]
16,['C# Do-While Loop'],"['The C# do-while loop is used to iterate a part of the program several times. If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use do-while loop.']","['https://www.javatpoint.com/c-sharp-break-statement', 'https://www.javatpoint.com/c-sharp-while-loop', 'https://www.javatpoint.com/c-sharp-break-statement', 'https://www.javatpoint.com/c-sharp-while-loop', 'https://www.javatpoint.com/c-sharp-break-statement']",['https://static.javatpoint.com/cpages/images/dowhile.png'],[],"['C# Nested do-while Loop', 'C# Infinitive do-while Loop']","['C# do-while Loop Example', 'C# Infinitive do-while Loop Example']",[],"['The C# do-while loop is executed at least once because condition is checked after loop body.', ""Let's see a simple example of C# do-while loop to print the table of 1."", ""Let's see a simple example of nested do-while loop in C#."", 'In C#, if you pass true in the do-while loop, it will be infinitive do-while loop.']","['In C#, if you use do-while loop inside another do-while loop, it is known as nested do-while loop. The nested do-while loop is executed fully for each outer do-while loop.']",[],"['}while(condition);', 'using System;', 'public class DoWhileExample', 'public static void Main(string[] args)', 'int i = 1;', '', 'do{', 'Console.WriteLine(i);', 'i++;', '} while (i <= 10) ;', 'using System;', 'public class DoWhileExample', 'public static void Main(string[] args)', 'int i=1;', '', 'do{', 'int j = 1;', '', 'do{', 'Console.WriteLine(i+"" ""+j);', 'j++;', '} while (j <= 3) ;', 'i++;', '} while (i <= 3) ;', '}while(true);', 'using System;', 'public class WhileExample', 'public static void Main(string[] args)', '', 'do{', 'Console.WriteLine(""Infinitive do-while Loop"");', '} while(true);']","['1\n2\n3\n4\n5\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3', 'Infinitive do-while Loop \nInfinitive do-while Loop\nInfinitive do-while Loop\nInfinitive do-while Loop\nInfinitive do-while Loop\nctrl+c']",[],[]
17,['C# Break Statement'],"['The C# break is used to break loop or switch statement. It breaks the current flow of the program at the given condition. In case of inner loop, it breaks only inner loop.']","['https://www.javatpoint.com/c-sharp-continue-statement', 'https://www.javatpoint.com/c-sharp-do-while-loop', 'https://www.javatpoint.com/c-sharp-continue-statement', 'https://www.javatpoint.com/c-sharp-do-while-loop', 'https://www.javatpoint.com/c-sharp-continue-statement']",['https://static.javatpoint.com/cpages/images/break.png'],[],[],"['C# Break Statement Example', 'C# Break Statement with Inner Loop']",[],"['Flowchart:', ""Let's see a simple example of C# break statement which is used inside the loop."", ""The C# break statement breaks inner loop only if you use break statement inside the inner loop. Let's see the example code:""]",[],[],"['jump-statement;', 'using System;', 'public class BreakExample', 'public static void Main(string[] args)', 'for (int i = 1; i <= 10; i++)', '{', 'if (i == 5)', '{', 'break;', '}', 'Console.WriteLine(i);', '}', 'using System;', 'public class BreakExample', 'public static void Main(string[] args)', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'break;', '}', 'Console.WriteLine(i+"" ""+j);', '}', '}']","['1\n2\n3\n4', '1 1\n1 2\n1 3\n2 1\n3 1\n3 2\n3 3']",[],[]
18,['C# Continue Statement'],"['The C# continue statement is used to continue loop. It continues the current flow of the program and skips the remaining code at specified condition. In case of inner loop, it continues only inner loop.']","['https://www.javatpoint.com/c-sharp-goto-statement', 'https://www.javatpoint.com/c-sharp-break-statement', 'https://www.javatpoint.com/c-sharp-goto-statement', 'https://www.javatpoint.com/c-sharp-break-statement', 'https://www.javatpoint.com/c-sharp-goto-statement']",[],[],[],"['C# Continue Statement Example', 'C# Continue Statement with Inner Loop']",[],['C# Continue Statement continues inner loop only if you use continue statement inside the inner loop.'],[],[],"['jump-statement;', 'continue;', 'using System;', 'public class ContinueExample', 'public static void Main(string[] args)', 'for(int i=1;i<=10;i++){', 'if(i==5){', 'continue;', '}', 'Console.WriteLine(i);', '}', 'using System;', 'public class ContinueExample', 'public static void Main(string[] args)', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'continue;', '}', 'Console.WriteLine(i+"" ""+j);', '}', '}']","['1\n2\n3\n4\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 3\n3 1\n3 2\n3 3']",[],[]
19,['C# Goto Statement'],['The C# goto statement is also known jump statement. It is used to transfer control to the other part of the program. It unconditionally jumps to the specified label.'],"['https://www.javatpoint.com/c-sharp-comments', 'https://www.javatpoint.com/c-sharp-continue-statement', 'https://www.javatpoint.com/c-sharp-comments', 'https://www.javatpoint.com/c-sharp-continue-statement', 'https://www.javatpoint.com/c-sharp-comments']",[],[],[],['C# Goto Statement Example'],[],"['It can be used to transfer control from deeply nested loop or switch case label.', 'Currently, it is avoided to use goto statement in C# because it makes the program complex.', ""Let's see the simple example of goto statement in C#.""]",[],[],"['using System;', 'public class GotoExample', 'public static void Main(string[] args)', 'ineligible:', 'Console.WriteLine(""You are not eligible to vote!"");', 'Console.WriteLine(""Enter your age:\\n"");', 'int age = Convert.ToInt32(Console.ReadLine());', 'if (age < 18){', 'goto ineligible;', 'else', 'Console.WriteLine(""You are eligible to vote!"");']",['You are not eligible to vote!\nEnter your age:\n11\nYou are not eligible to vote!\nEnter your age:\n5\nYou are not eligible to vote!\nEnter your age:\n26\nYou are eligible to vote!'],[],[]
20,['C# Comments'],"['The C# comments are statements that are not executed by the compiler. The comments in C# programming can be used to provide explanation of the code, variable, method or class. By the help of comments, you can hide the program code also.']","['https://www.javatpoint.com/c-sharp-function', 'https://www.javatpoint.com/c-sharp-goto-statement', 'https://www.javatpoint.com/c-sharp-function', 'https://www.javatpoint.com/c-sharp-goto-statement', 'https://www.javatpoint.com/c-sharp-function']",[],[],[],"['C# Single Line Comment', 'C# Multi Line Comment']",[],"['There are two types of comments in C#.', ""The single line comment starts with // (double slash). Let's see an example of single line comment in C#.""]","[""The C# multi line comment is used to comment multiple lines of code. It is surrounded by slash and asterisk (/* ..... */). Let's see an example of multi line comment in C#.""]",[],"['using System;', 'public class CommentExample', 'public static void Main(string[] args)', '{', 'int x = 10;//Here, x is a variable', 'Console.WriteLine(x);', '}', 'using System;', 'public class CommentExample', 'public static void Main(string[] args)', '{', ""/* Let's declare and"", 'print variable in C#. */', 'int x=20;', 'Console.WriteLine(x);', '}']","['10', '20']",[],['|||Single Line comment|||Multi Line comment|||']
21,['C# Function'],['Function is a block of code that has a signature. Function is used to execute statements specified in the code block. A function consists of the following components:'],"['https://www.javatpoint.com/c-sharp-call-by-value', 'https://www.javatpoint.com/c-sharp-comments', 'https://www.javatpoint.com/c-sharp-call-by-value', 'https://www.javatpoint.com/c-sharp-comments', 'https://www.javatpoint.com/c-sharp-call-by-value']",[],[],[],"['C# Function Syntax', 'C# Function: using no parameter and return type', 'C# Function: using parameter but no return type', 'C# Function: using parameter and return type']",[],"['Function name: It is a unique name that is used to make Function call.', 'Return type: It is used to specify the data type of function return value.', 'Body: It is a block that contains executable statements. ', 'Access specifier: It is used to specify function accessibility in the application.', 'Parameters: It is a list of arguments that we can pass to the function during call.', 'Access-specifier, parameters and return statement are optional.', ""Let's see an example in which we have created a function that returns a string value and takes a string parameter."", 'A function that does not return any value specifies void type as a return type. In the following example, a function is created without return type.']","['A function can have zero or any number of parameters to get data. In the following example, a function is created without parameters. A function without parameter is also known as non-parameterized function.']",[],"['FunctionName()', 'using System;', 'namespace FunctionExample', 'class Program', 'public void Show() // No Parameter', '{', 'Console.WriteLine(""This is non parameterized function"");', '}', 'static void Main(string[] args)', '{', 'Program program = new Program(); // Creating Object', 'program.Show(); // Calling Function', '}', 'using System;', 'namespace FunctionExample', 'class Program', 'public void Show(string message)', '{', 'Console.WriteLine(""Hello "" + message);', '}', 'static void Main(string[] args)', '{', 'Program program = new Program(); // Creating Object', 'program.Show(""Rahul Kumar""); // Calling Function', '}', 'using System;', 'namespace FunctionExample', 'class Program', 'public string Show(string message)', '{', 'Console.WriteLine(""Inside Show Function"");', 'return message;', '}', 'static void Main(string[] args)', '{', 'Program program = new Program();', 'string message = program.Show(""Rahul Kumar"");', 'Console.WriteLine(""Hello ""+message);', '}', 'Inside Show Function', 'Hello Rahul Kumar']","['This is non parameterized function', 'Hello Rahul Kumar', 'Inside Show Function\nHello Rahul Kumar']",[],[]
22,['C# Call By Value'],"['In C#, value-type parameters are that pass a copy of original value to the function rather than reference. It does not modify the original value. A change made in passed value does not alter the actual value. In the following example, we have pass value during function call.']","['https://www.javatpoint.com/c-sharp-call-by-reference', 'https://www.javatpoint.com/c-sharp-function', 'https://www.javatpoint.com/c-sharp-call-by-reference', 'https://www.javatpoint.com/c-sharp-function', 'https://www.javatpoint.com/c-sharp-call-by-reference']",[],[],[],['C# Call By Value Example'],[],[],[],[],"['using System;', 'namespace CallByValue', 'class Program', 'public void Show(int val)', '{', 'val *= val; // Manipulating value', 'Console.WriteLine(""Value inside the show function ""+val);', '}', 'static void Main(string[] args)', '{', 'int val = 50;', 'Program program = new Program(); // Creating Object', 'Console.WriteLine(""Value before calling the function ""+val);', 'program.Show(val); // Calling Function by passing value', 'Console.WriteLine(""Value after calling the function "" + val);', '}']",['Value before calling the function 50\nValue inside the show function 2500\nValue after calling the function 50'],[],[]
23,['C# Call By Reference'],['C# provides a ref keyword to pass argument as reference-type. It passes reference of arguments to the function rather than copy of original value. The changes in passed values are permanent and modify the original variable value.'],"['https://www.javatpoint.com/c-sharp-out-parameter', 'https://www.javatpoint.com/c-sharp-call-by-value', 'https://www.javatpoint.com/c-sharp-out-parameter', 'https://www.javatpoint.com/c-sharp-call-by-value', 'https://www.javatpoint.com/c-sharp-out-parameter']",[],[],[],['C# Call By Reference Example'],[],[],[],[],"['using System;', 'namespace CallByReference', 'class Program', 'public void Show(ref int val)', '{', 'val *= val; // Manipulating value', 'Console.WriteLine(""Value inside the show function ""+val);', '}', 'static void Main(string[] args)', '{', 'int val = 50;', 'Program program = new Program(); // Creating Object', 'Console.WriteLine(""Value before calling the function ""+val);', 'program.Show(ref val); // Calling Function by passing reference', 'Console.WriteLine(""Value after calling the function "" + val);', '}']",['Value before calling the function 50\nValue inside the show function 2500\nValue after calling the function 2500'],[],[]
24,['C# Out Parameter'],"['C# provides out keyword to pass arguments as out-type. It is like reference-type, except that it does not require variable to initialize before passing. We must use out keyword to pass argument as out-type. It is useful when we want a function to return multiple values. ']","['https://www.javatpoint.com/c-sharp-arrays', 'https://www.javatpoint.com/c-sharp-call-by-reference', 'https://www.javatpoint.com/c-sharp-arrays', 'https://www.javatpoint.com/c-sharp-call-by-reference', 'https://www.javatpoint.com/c-sharp-arrays']",[],[],[],"['C# Out Parameter Example 1', 'C# Out Parameter Example 2']",[],['The following example demonstrates that how a function can return multiple values.'],[],[],"['using System;', 'namespace OutParameter', 'class Program', 'public void Show(out int val) // Out parameter', '{', 'int square = 5;', 'val = square;', 'val *= val; // Manipulating value', '}', 'static void Main(string[] args)', '{', 'int val = 50;', 'Program program = new Program(); // Creating Object', 'Console.WriteLine(""Value before passing out variable "" + val);', 'program.Show(out val); // Passing out argument', 'Console.WriteLine(""Value after recieving the out variable "" + val);', '}', 'using System;', 'namespace OutParameter', 'class Program', 'public void Show(out int a, out int b) // Out parameter', '{', 'int square = 5;', 'a = square;', 'b = square;', 'a *= a;', 'b *= b;', '}', 'static void Main(string[] args)', '{', 'int val1 = 50, val2 = 100;', 'Program program = new Program(); // Creating Object', 'Console.WriteLine(""Value before passing \\n val1 = "" + val1+"" \\n val2 = ""+val2);', 'program.Show(out val1, out val2); // Passing out argument', 'Console.WriteLine(""Value after passing \\n val1 = "" + val1 + "" \\n val2 = "" + val2);', '}']","['Value before passing out variable 50\nValue after receiving the out variable 25', 'Value before passing\n val1 = 50\n val2 = 100\nValue after passing\n val1 = 25\n val2 = 25']",[],[]
25,['C# Arrays'],"['Like other programming languages, array in C# is a group of similar types of elements that have contiguous memory location. In C#, array is an object of base type System.Array. In C#, array index starts from 0. We can store only fixed set of elements in C# array.']","['https://www.javatpoint.com/c-sharp-passing-array-to-function', 'https://www.javatpoint.com/c-sharp-comments', 'https://www.javatpoint.com/c-sharp-passing-array-to-function', 'https://www.javatpoint.com/c-sharp-comments', 'https://www.javatpoint.com/c-sharp-passing-array-to-function']",['https://static.javatpoint.com/csharp/images/c-sharp-arrays.png'],[],['C# Array Types'],"['Advantages of C# Array', 'Disadvantages of C# Array', 'C# Single Dimensional Array', 'C# Array Example: Declaration and Initialization at same time', 'C# Array Example: Traversal using foreach loop']",[],"['There are 3 types of arrays in C# programming:', 'To create single dimensional array, you need to use square brackets [] after the type.', 'You cannot place square brackets after the identifier.', ""Let's see a simple example of C# array, where we are going to declare, initialize and traverse array."", 'There are 3 ways to initialize array at the time of declaration.', 'We can omit the size of array.', 'We can omit the new operator also.', ""Let's see the example of array where we are declaring and initializing array at the same time."", 'We can also traverse the array elements using foreach loop. It returns array element one by one.']",[],[],"['int[] arr = new int[5];//creating array', 'int arr[] = new int[5];//compile time error', 'using System;', 'public class ArrayExample', 'public static void Main(string[] args)', 'int[] arr = new int[5];//creating array', 'arr[0] = 10;//initializing array', 'arr[2] = 20;', 'arr[4] = 30;', 'for (int i = 0; i < arr.Length; i++)', '{', 'Console.WriteLine(arr[i]);', '}', 'int[] arr = new int[5]{ 10, 20, 30, 40, 50 };', 'int[] arr = new int[]{ 10, 20, 30, 40, 50 };', 'int[] arr = { 10, 20, 30, 40, 50 };', 'using System;', 'public class ArrayExample', 'public static void Main(string[] args)', 'int[] arr = { 10, 20, 30, 40, 50 };//Declaration and Initialization of array', 'for (int i = 0; i < arr.Length; i++)', '{', 'Console.WriteLine(arr[i]);', '}', 'using System;', 'public class ArrayExample', 'public static void Main(string[] args)', 'int[] arr = { 10, 20, 30, 40, 50 };//creating and initializing array', 'foreach (int i in arr)', '{', 'Console.WriteLine(i);', '}']","['10\n0\n20\n0\n30', '10\n20\n30\n40\n50', '10\n20\n30\n40\n50']",[],['|||Code Optimization (less code)|||Random Access|||Easy to traverse data|||Easy to manipulate data|||Easy to sort data etc.||||||Fixed size|||&&&|||Single Dimensional Array|||Multidimensional Array|||Jagged Array|||']
26,['C# Passing Array to Function'],"['In C#, to reuse the array logic, we can create function. To pass array to function in C#, we need to provide only array name.']","['https://www.javatpoint.com/c-sharp-multidimensional-array', 'https://www.javatpoint.com/c-sharp-arrays', 'https://www.javatpoint.com/c-sharp-multidimensional-array', 'https://www.javatpoint.com/c-sharp-arrays', 'https://www.javatpoint.com/c-sharp-multidimensional-array']",[],[],[],"['C# Passing Array to Function Example: print array elements', 'C# Passing Array to Function Example: Print minimum number', 'C# Passing Array to Function Example: Print maximum number']",[],"[""Let's see an example of C# function which prints the array elements."", ""Let's see an example of C# array which prints minimum number in an array using function."", ""Let's see an example of C# array which prints maximum number in an array using function.""]",[],[],"['functionname(arrayname);//passing array', 'using System;', 'public class ArrayExample', 'static void printArray(int[] arr)', 'Console.WriteLine(""Printing array elements:"");', 'for (int i = 0; i < arr.Length; i++)', '{', 'Console.WriteLine(arr[i]);', '}', 'public static void Main(string[] args)', 'int[] arr1 = { 25, 10, 20, 15, 40, 50 };', 'int[] arr2 = { 12, 23, 44, 11, 54 };', 'printArray(arr1);//passing array to function', 'printArray(arr2);', 'using System;', 'public class ArrayExample', 'static void printMin(int[] arr)', 'int min = arr[0];', 'for (int i = 1; i < arr.Length; i++)', '{', 'if (min > arr[i])', '{', 'min = arr[i];', '}', '}', 'Console.WriteLine(""Minimum element is: "" + min);', 'public static void Main(string[] args)', 'int[] arr1 = { 25, 10, 20, 15, 40, 50 };', 'int[] arr2 = { 12, 23, 44, 11, 54 };', 'printMin(arr1);//passing array to function', 'printMin(arr2);', 'using System;', 'public class ArrayExample', 'static void printMax(int[] arr)', 'int max = arr[0];', 'for (int i = 1; i < arr.Length; i++)', '{', 'if (max < arr[i])', '{', 'max = arr[i];', '}', '}', 'Console.WriteLine(""Maximum element is: "" + max);', 'public static void Main(string[] args)', 'int[] arr1 = { 25, 10, 20, 15, 40, 50 };', 'int[] arr2 = { 12, 23, 64, 11, 54 };', 'printMax(arr1);//passing array to function', 'printMax(arr2);']","['Printing array elements:\n25\n10\n20\n15\n40\n50\nPrinting array elements:\n12\n23\n44\n11\n54', 'Minimum element is: 10\nMinimum element is: 11', 'Maximum element is: 50\nMaximum element is: 64']",[],[]
27,['C# Multidimensional Arrays'],['The multidimensional array is also known as rectangular arrays in C#. It can be two dimensional or three dimensional. The data is stored in tabular form (row * column) which is also known as matrix.'],"['https://www.javatpoint.com/c-sharp-jagged-array', 'https://www.javatpoint.com/c-sharp-passing-array-to-function', 'https://www.javatpoint.com/c-sharp-jagged-array', 'https://www.javatpoint.com/c-sharp-passing-array-to-function', 'https://www.javatpoint.com/c-sharp-jagged-array']",[],[],[],"['C# Multidimensional Array Example', 'C# Multidimensional Array Example: Declaration and initialization at same time']",[],"['To create multidimensional array, we need to use comma inside the square brackets. For example:', ""Let's see a simple example of multidimensional array in C# which declares, initializes and traverse two dimensional array."", 'There are 3 ways to initialize multidimensional array in C# while declaration.', 'We can omit the array size.', 'We can omit the new operator also.', ""Let's see a simple example of multidimensional array which initializes array at the time of declaration.""]",[],[],"['int[,] arr=new int[3,3];//declaration of 2D array', 'int[,,] arr=new int[3,3,3];//declaration of 3D array', 'using System;', 'public class MultiArrayExample', 'public static void Main(string[] args)', 'int[,] arr=new int[3,3];//declaration of 2D array', 'arr[0,1]=10;//initialization', 'arr[1,2]=20;', 'arr[2,0]=30;', 'for(int i=0;i<3;i++){', 'for(int j=0;j<3;j++){', 'Console.Write(arr[i,j]+"" "");', '}', 'Console.WriteLine();//new line at each row', '}', 'int[,] arr = new int[3,3]= { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };', 'int[,] arr = new int[,]{ { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };', 'int[,] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };', 'using System;', 'public class MultiArrayExample', 'public static void Main(string[] args)', 'int[,] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };//declaration and initialization', 'for(int i=0;i<3;i++){', 'for(int j=0;j<3;j++){', 'Console.Write(arr[i,j]+"" "");', '}', 'Console.WriteLine();//new line at each row', '}']","['0 10 0\n0 0 20\n30 0 0', '1 2 3\n4 5 6\n7 8 9']",[],[]
28,['C# Jagged Arrays'],"['In C#, jagged array is also known as ""array of arrays"" because its elements are arrays. The element size of jagged array can be different. ']","['https://www.javatpoint.com/c-sharp-params', 'https://www.javatpoint.com/c-sharp-multidimensional-array', 'https://www.javatpoint.com/c-sharp-params', 'https://www.javatpoint.com/c-sharp-multidimensional-array', 'https://www.javatpoint.com/c-sharp-params']",[],[],[],"['Declaration of Jagged array', 'Initialization of Jagged array', 'Initialization and filling elements in Jagged array', 'C# Jagged Array Example', 'Initialization of Jagged array upon Declaration', 'C# Jagged Array Example 2']",[],"[""Let's see an example to declare jagged array that has two elements."", ""Let's see an example to initialize jagged array. The size of elements can be different."", ""Let's see an example to initialize and fill elements in jagged array."", 'Here, size of elements in jagged array is optional. So, you can write above code as given below:', ""Let's see a simple example of jagged array in C# which declares, initializes and traverse jagged arrays."", ""Let's see an example to initialize the jagged array while declaration."", ""Let's see a simple example of jagged array which initializes the jagged arrays upon declaration.""]",[],[],"['int[][] arr = new int[2][];', 'arr[0] = new int[4];', 'arr[1] = new int[6];', 'arr[0] = new int[4] { 11, 21, 56, 78 };', 'arr[1] = new int[6] { 42, 61, 37, 41, 59, 63 };', 'arr[0] = new int[] { 11, 21, 56, 78 };', 'arr[1] = new int[] { 42, 61, 37, 41, 59, 63 };', 'public class JaggedArrayTest', 'public static void Main()', 'int[][] arr = new int[2][];// Declare the array', 'arr[0] = new int[] { 11, 21, 56, 78 };// Initialize the array', 'arr[1] = new int[] { 42, 61, 37, 41, 59, 63 };', 'for (int i = 0; i < arr.Length; i++)', '{', 'for (int j = 0; j < arr[i].Length; j++)', '{', 'System.Console.Write(arr[i][j]+"" "");', '}', 'System.Console.WriteLine();', '}', 'int[][] arr = new int[3][]{', 'new int[] { 11, 21, 56, 78 },', 'new int[] { 2, 5, 6, 7, 98, 5 },', 'new int[] { 2, 5 }', '};', 'public class JaggedArrayTest', 'public static void Main()', 'int[][] arr = new int[3][]{', 'new int[] { 11, 21, 56, 78 },', 'new int[] { 2, 5, 6, 7, 98, 5 },', 'new int[] { 2, 5 }', '};', 'for (int i = 0; i < arr.Length; i++)', '{', 'for (int j = 0; j < arr[i].Length; j++)', '{', 'System.Console.Write(arr[i][j]+"" "");', '}', 'System.Console.WriteLine();', '}']","['11 21 56 78\n42 61 37 41 59 63', '11 21 56 78\n2 5 6 7 98 5\n2 5']",[],[]
29,['C# Params'],"[""In C#, params is a keyword which is used to specify a parameter that takes variable number of arguments. It is useful when we don't know the number of arguments prior. Only one params keyword is allowed and no additional parameter is permitted after params keyword in a function declaration.""]","['https://www.javatpoint.com/c-sharp-array-class', 'https://www.javatpoint.com/c-sharp-jagged-array', 'https://www.javatpoint.com/c-sharp-array-class', 'https://www.javatpoint.com/c-sharp-jagged-array', 'https://www.javatpoint.com/c-sharp-array-class']",[],[],[],"['C# Params Example 1', 'C# Params Example 2']",[],"['In this example, we are using object type params that allow entering any number of inputs of any type.']",[],[],"['using System;', 'namespace AccessSpecifiers', 'class Program', 'public void Show(params int[] val) // Params Paramater', '{', 'for (int i=0; i', 'using System;', 'namespace AccessSpecifiers', 'class Program', 'public void Show(params object[] items) // Params Paramater', '{', 'for (int i = 0; i < items.Length; i++)', '{', 'Console.WriteLine(items[i]);', '}', '}', 'static void Main(string[] args)', '{', 'Program program = new Program(); // Creating Object', 'program.Show(""Ramakrishnan Ayyer"",""Ramesh"",101, 20.50,""Peter"", \'A\'); // Passing arguments of variable length', '}']","['2\n4\n6\n8\n10\n12\n14', 'Ramakrishnan Ayyer\nRamesh\n101\n20.5\nPeter\nA']",[],[]
30,['C# Array class'],"['C# provides an Array class to deal with array related operations. It provides methods for creating, manipulating, searching, and sorting elements of an array. This class works as the base class for all arrays in the .NET programming environment.']","['https://www.javatpoint.com/c-sharp-command-line-arguments', 'https://www.javatpoint.com/c-sharp-array-class', 'https://www.javatpoint.com/c-sharp-command-line-arguments', 'https://www.javatpoint.com/c-sharp-array-class', 'https://www.javatpoint.com/c-sharp-command-line-arguments']",[],[],[],"['C# Array class Signature', 'C# Array Properties', 'C# Array Methods', 'C# Array Example']","['Note: In C#, Array is not part of collection but considered as collection because it is based on the IList interface. ']",[],[],[],"['[SerializableAttribute]', '[ComVisibleAttribute(true)]', 'public abstract class Array : ICloneable, IList, ICollection,', 'IEnumerable, IStructuralComparable, IStructuralEquatable', 'using System;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'int[] arr = new int[6] { 5, 8, 9, 25, 0, 7 };', 'int[] arr2 = new int[6];', 'Console.WriteLine(""length of first array: ""+arr.Length);', 'Array.Sort(arr);', 'Console.Write(""First array elements: "");', 'PrintArray(arr);', 'Console.WriteLine(""\\nIndex position of 25 is ""+Array.IndexOf(arr,25));', 'Array.Copy(arr, arr2, arr.Length);', 'Console.Write(""Second array elements: "");', 'PrintArray(arr2);', 'Array.Reverse(arr);', 'Console.Write(""\\nFirst Array elements in reverse order: "");', 'PrintArray(arr);', '}', 'static void PrintArray(int[] arr)', '{', 'foreach (Object elem in arr)', '{', 'Console.Write(elem+"" "");', '}', '}']",['length of first array: 6\nFirst array elements: 0 5 7 8 9 25\nIndex position of 25 is 5\nSecond array elements: 0 5 7 8 9 25\nFirst Array elements in reverse order: 25 9 8 7 5 0'],"['Property|||Description&&&IsFixedSize|||It is used to get a value indicating whether the Array has a fixed size or not.&&&IsReadOnly|||It is used to check that the Array is read-only or not.&&&IsSynchronized|||It is used to check that access to the Array is synchronized or not.&&&Length|||It is used to get the total number of elements in all the dimensions of the Array.&&&LongLength|||It is used to get a 64-bit integer that represents the total number of elements in all the dimensions of the Array.&&&Rank|||It is used to get the rank (number of dimensions) of the Array.&&&SyncRoot|||It is used to get an object that can be used to synchronize access to the Array.', 'Method|||Description&&&AsReadOnly<T>(T[])|||It returns a read-only wrapper for the specified array.&&&BinarySearch(Array,Int32,Int32,Object)|||It is used to search a range of elements in a one-dimensional sorted array for a value.&&&BinarySearch(Array,Object)|||It is used to search an entire one-dimensional sorted array for a specific element.&&&Clear(Array,Int32,Int32)|||It is used to set a range of elements in an array to the default value.&&&Clone()|||It is used to create a shallow copy of the Array.&&&Copy(Array,Array,Int32)|||It is used to copy elements of an array into another array by specifying starting index. &&&CopyTo(Array,Int32)|||It copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index&&&CreateInstance(Type,Int32)|||It is used to create a one-dimensional Array of the specified Type and length. &&&Empty<T>()|||It is used to return an empty array.&&&Finalize()|||It is used to free resources and perform cleanup operations. &&&Find<T>(T[],Predicate<T>)|||It is used to search for an element that matches the conditions defined by the specified predicate.&&&IndexOf(Array,Object)|||It is used to search for the specified object and returns the index of its first occurrence in a one-dimensional array.&&&Initialize()|||It is used to initialize every element of the value-type Array by calling the default constructor of the value type.&&&Reverse(Array)|||It is used to reverse the sequence of the elements in the entire one-dimensional Array.&&&Sort(Array)|||It is used to sort the elements in an entire one-dimensional Array. &&&ToString()|||It is used to return a string that represents the current object. ']",[]
31,['C# Command Line Arguments '],['Arguments that are passed by command line known as command line arguments. We can send arguments to the Main method while executing the code. The string args variable contains all the values passed from the command line.'],"['https://www.javatpoint.com/c-sharp-object-and-class', 'https://www.javatpoint.com/c-sharp-array-class', 'https://www.javatpoint.com/c-sharp-object-and-class', 'https://www.javatpoint.com/c-sharp-array-class', 'https://www.javatpoint.com/c-sharp-object-and-class']",[],[],[],['C# Command Line Arguments Example'],[],"['In the following example, we are passing command line arguments during execution of program.', 'Compile and execute this program by using following commands.', 'Compile: csc Program.cs', 'Execute: Program.exe Hi there, how are you?', 'After executing the code, it produces the following output to the console.']",[],[],"['using System;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args) // string type parameters', '{', 'Console.WriteLine(""Argument length: ""+args.Length);', 'Console.WriteLine(""Supplied Arguments are:"");', 'foreach (Object obj in args)', '{', 'Console.WriteLine(obj);', '}', '}']","['Argument length: 5\nSupplied Arguments are:\nHi\nthere,\nhow\nare\nyou?']",[],[]
32,['C# Object and Class'],"['Since C# is an object-oriented language, program is designed using objects and classes in C#.']","['https://www.javatpoint.com/c-sharp-constructor', 'https://www.javatpoint.com/c-sharp-multidimensional-array', 'https://www.javatpoint.com/c-sharp-constructor', 'https://www.javatpoint.com/c-sharp-multidimensional-array', 'https://www.javatpoint.com/c-sharp-constructor']",[],[],['C# Object and Class Example'],"['C# Object', 'C# Class', 'C# Class Example 2: Having Main() in another class', 'C# Class Example 3: Initialize and Display data through method', 'C# Class Example 4: Store and Display Employee Information']",[],"['In C#, Object is a real world entity, for example, chair, car, pen, mobile, laptop etc.', 'In other words, object is an entity that has state and behavior. Here, state means data and behavior means functionality.', 'Object is a runtime entity, it is created at runtime.', 'Object is an instance of a class. All the members of the class can be accessed through object.', ""Let's see an example to create object using new keyword."", 'In C#, class is a group of similar objects. It is a template from which objects are created. It can have fields, methods, constructors etc.', ""Let's see an example of C# class that has two fields only."", ""Let's see an example of class that has two fields: id and name. It creates instance of the class, initializes the object and prints the object value."", ""Let's see another example of class where we are having Main() method in another class. In such case, class must be public."", ""Let's see another example of C# class where we are initializing and displaying object through method.""]","['In this example, Student is the type and s1 is the reference variable that refers to the instance of Student class. The new keyword allocates memory at runtime.']",[],"['Student s1 = new Student();//creating an object of Student', 'public class Student', 'int id;//field or data member', 'String name;//field or data member', 'using System;', 'public class Student', 'int id;//data member (also instance variable)', 'String name;//data member(also instance variable)', 'public static void Main(string[] args)', '{', 'Student s1 = new Student();//creating an object of Student', 's1.id = 101;', 's1.name = ""Sonoo Jaiswal"";', 'Console.WriteLine(s1.id);', 'Console.WriteLine(s1.name);', '}', 'using System;', 'public class Student', 'public int id;', 'public String name;', 'class TestStudent{', 'public static void Main(string[] args)', '{', 'Student s1 = new Student();', 's1.id = 101;', 's1.name = ""Sonoo Jaiswal"";', 'Console.WriteLine(s1.id);', 'Console.WriteLine(s1.name);', '}', 'using System;', 'public class Student', 'public int id;', 'public String name;', 'public void insert(int i, String n)', '{', 'id = i;', 'name = n;', '}', 'public void display()', '{', 'Console.WriteLine(id + "" "" + name);', '}', 'class TestStudent{', 'public static void Main(string[] args)', '{', 'Student s1 = new Student();', 'Student s2 = new Student();', 's1.insert(101, ""Ajeet"");', 's2.insert(102, ""Tom"");', 's1.display();', 's2.display();', '}', 'using System;', 'public class Employee', 'public int id;', 'public String name;', 'public float salary;', 'public void insert(int i, String n,float s)', '{', 'id = i;', 'name = n;', 'salary = s;', '}', 'public void display()', '{', 'Console.WriteLine(id + "" "" + name+"" ""+salary);', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee();', 'Employee e2 = new Employee();', 'e1.insert(101, ""Sonoo"",890000f);', 'e2.insert(102, ""Mahesh"", 490000f);', 'e1.display();', 'e2.display();', '}']","['101\nSonoo Jaiswal', '101\nSonoo Jaiswal', '101 Ajeet\n102 Tom', '101 Sonoo 890000\n102 Mahesh 490000']",[],[]
33,['C# Constructor'],"['In C#, constructor is a special method which is invoked automatically at the time of object creation. It is used to initialize the data members of new object generally. The constructor in C# has the same name as class or struct.']","['https://www.javatpoint.com/c-sharp-destructor', 'https://www.javatpoint.com/c-sharp-object-and-class', 'https://www.javatpoint.com/c-sharp-destructor', 'https://www.javatpoint.com/c-sharp-object-and-class', 'https://www.javatpoint.com/c-sharp-destructor']",[],[],"['C# Default Constructor', 'C# Parameterized Constructor']","['C# Default Constructor Example: Having Main() within class', 'C# Default Constructor Example: Having Main() in another class']",[],"['There can be two types of constructors in C#.', 'A constructor which has no argument is known as default constructor. It is invoked at the time of creating object.', ""Let's see another example of default constructor where we are having Main() method in another class."", 'A constructor which has parameters is called parameterized constructor. It is used to provide different values to distinct objects.']",[],[],"['using System;', 'public class Employee', 'public Employee()', '{', 'Console.WriteLine(""Default Constructor Invoked"");', '}', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee();', 'Employee e2 = new Employee();', '}', 'using System;', 'public class Employee', 'public Employee()', '{', 'Console.WriteLine(""Default Constructor Invoked"");', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee();', 'Employee e2 = new Employee();', '}', 'using System;', 'public class Employee', 'public int id;', 'public String name;', 'public float salary;', 'public Employee(int i, String n,float s)', '{', 'id = i;', 'name = n;', 'salary = s;', '}', 'public void display()', '{', 'Console.WriteLine(id + "" "" + name+"" ""+salary);', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee(101, ""Sonoo"", 890000f);', 'Employee e2 = new Employee(102, ""Mahesh"", 490000f);', 'e1.display();', 'e2.display();', '}']","['Default Constructor Invoked \nDefault Constructor Invoked', 'Default Constructor Invoked \nDefault Constructor Invoked', '101 Sonoo 890000\n102 Mahesh 490000']",[],['|||Default constructor|||Parameterized constructor|||']
34,['C# Destructor'],"['A destructor works opposite to constructor, It destructs the objects of classes. It can be defined only once in a class. Like constructors, it is invoked automatically.']","['https://www.javatpoint.com/c-sharp-this', 'https://www.javatpoint.com/c-sharp-constructor', 'https://www.javatpoint.com/c-sharp-this', 'https://www.javatpoint.com/c-sharp-constructor', 'https://www.javatpoint.com/c-sharp-this']",[],[],[],['C# Constructor and Destructor Example'],"[""Note: C# destructor cannot have parameters. Moreover, modifiers can't be applied on destructors."", ""Note: Destructor can't be public. We can't apply any modifier on destructors.""]","[""Let's see an example of constructor and destructor in C# which is called automatically.""]",[],[],"['using System;', 'public class Employee', 'public Employee()', '{', 'Console.WriteLine(""Constructor Invoked"");', '}', '~Employee()', '{', 'Console.WriteLine(""Destructor Invoked"");', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee();', 'Employee e2 = new Employee();', '}']",['Constructor Invoked\nConstructor Invoked\nDestructor Invoked\nDestructor Invoked'],[],[]
35,['C# this'],"['In c# programming, this is a keyword that refers to the current instance of the class. There can be 3 main usage of this keyword in C#.']","['https://www.javatpoint.com/c-sharp-static', 'https://www.javatpoint.com/c-sharp-destructor', 'https://www.javatpoint.com/c-sharp-static', 'https://www.javatpoint.com/c-sharp-destructor', 'https://www.javatpoint.com/c-sharp-static']",[],[],[],['C# this example'],[],"[""Let's see the example of this keyword in C# that refers to the fields of current class."", 'We will learn about other usage of this keyword in next chapters.']",[],[],"['using System;', 'public class Employee', 'public int id;', 'public String name;', 'public float salary;', 'public Employee(int id, String name,float salary)', '{', 'this.id = id;', 'this.name = name;', 'this.salary = salary;', '}', 'public void display()', '{', 'Console.WriteLine(id + "" "" + name+"" ""+salary);', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee(101, ""Sonoo"", 890000f);', 'Employee e2 = new Employee(102, ""Mahesh"", 490000f);', 'e1.display();', 'e2.display();', '}']",['101 Sonoo 890000\n102 Mahesh 490000'],[],"['|||It can be used to refer current class instance variable. It is used if field names (instance variables) and parameter names are same, that is why both can be distinguish easily.|||It can be used to pass current object as a parameter to another method.|||It can be used to declare indexers.|||']"
36,['C# static'],"['In C#, static is a keyword or modifier that belongs to the type not instance. So instance is not required to access the static members. In C#, static can be field, method, constructor, class, properties, operator and event.']","['https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/c-sharp-this', 'https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/c-sharp-this', 'https://www.javatpoint.com/c-sharp-static-class']",[],[],['C# Static Field'],"['Advantage of C# static keyword', 'C# static field example', 'C# static field example 2: changing static field', 'C# static field example 3: Counting Objects']","['Note: Indexers and destructors cannot be static.\nAdvantage of C# static keyword\nMemory efficient: Now we don\'t need to create instance for accessing the static members, so it saves memory. Moreover, it belongs to the type, so it will not get memory each time when instance is created.\nC# Static Field\nA field which is declared as static, is called static field. Unlike instance field which gets memory each time whenever you create object, there is only one copy of static field created in the memory. It is shared to all the objects.\nIt is used to refer the common property of all objects such as rateOfInterest in case of Account, companyName in case of Employee etc.\nC# static field example\nLet\'s see the simple example of static field in C#.\n\nusing System;\n   public class Account\n    {\n        public int accno; \n        public String name;\n        public static float rateOfInterest=8.8f;\n        public Account(int accno, String name)\n        {\n            this.accno = accno;\n            this.name = name;\n        }\n        \n        public void display()\n        {\n            Console.WriteLine(accno + "" "" + name + "" "" + rateOfInterest);\n        }\n   }\n   class TestAccount{\n       public static void Main(string[] args)\n        {\n\t     Account a1 = new Account(101, ""Sonoo"");\n            Account a2 = new Account(102, ""Mahesh"");\n            a1.display();\n            a2.display();\n\n        }\n    }\n\nOutput:\n101 Sonoo 8.8\n102 Mahesh 8.8\n\n\n\n\nC# static field example 2: changing static field\nIf you change the value of static field, it will be applied to all the objects.\n\nusing System;\n   public class Account\n    {\n        public int accno; \n        public String name;\n        public static float rateOfInterest=8.8f;\n        public Account(int accno, String name)\n        {\n            this.accno = accno;\n            this.name = name;\n        }\n        \n        public void display()\n        {\n            Console.WriteLine(accno + "" "" + name + "" "" + rateOfInterest);\n        }\n   }\n   class TestAccount{\n       public static void Main(string[] args)\n        {\n            Account.rateOfInterest = 10.5f;//changing value\n            Account a1 = new Account(101, ""Sonoo"");\n            Account a2 = new Account(102, ""Mahesh"");\n            a1.display();\n            a2.display();\n\n        }\n    }\n\nOutput:\n101 Sonoo 10.5\n102 Mahesh 10.5\n\nC# static field example 3: Counting Objects\nLet\'s see another example of static keyword in C# which counts the objects.\n\nusing System;\n   public class Account\n    {\n        public int accno; \n        public String name;\n        public static int count=0;\n        public Account(int accno, String name)\n        {\n            this.accno = accno;\n            this.name = name;\n            count++;\n        }\n        \n        public void display()\n        {\n            Console.WriteLine(accno + "" "" + name);\n        }\n   }\n   class TestAccount{\n       public static void Main(string[] args)\n        {\n            Account a1 = new Account(101, ""Sonoo"");\n            Account a2 = new Account(102, ""Mahesh"");\n            Account a3 = new Account(103, ""Ajeet"");\n            a1.display();\n            a2.display();\n            a3.display();\n            Console.WriteLine(""Total Objects are: ""+Account.count);\n        }\n    }\n\nOutput:\n101 Sonoo \n102 Mahesh \n103 Ajeet\nTotal Objects are: 3\n\n\nNext TopicC# static class\n\n\n\n← prev\nnext →\n\n\n']","['It is used to refer the common property of all objects such as rateOfInterest in case of Account, companyName in case of Employee etc.', ""Let's see the simple example of static field in C#."", 'If you change the value of static field, it will be applied to all the objects.', ""Let's see another example of static keyword in C# which counts the objects.""]","[""Memory efficient: Now we don't need to create instance for accessing the static members, so it saves memory. Moreover, it belongs to the type, so it will not get memory each time when instance is created."", 'A field which is declared as static, is called static field. Unlike instance field which gets memory each time whenever you create object, there is only one copy of static field created in the memory. It is shared to all the objects.']",[],"['using System;', 'public class Account', 'public int accno;', 'public String name;', 'public static float rateOfInterest=8.8f;', 'public Account(int accno, String name)', '{', 'this.accno = accno;', 'this.name = name;', '}', '', 'public void display()', '{', 'Console.WriteLine(accno + "" "" + name + "" "" + rateOfInterest);', '}', 'class TestAccount{', 'public static void Main(string[] args)', '{', 'Account a1 = new Account(101, ""Sonoo"");', 'Account a2 = new Account(102, ""Mahesh"");', 'a1.display();', 'a2.display();', '}', 'using System;', 'public class Account', 'public int accno;', 'public String name;', 'public static float rateOfInterest=8.8f;', 'public Account(int accno, String name)', '{', 'this.accno = accno;', 'this.name = name;', '}', '', 'public void display()', '{', 'Console.WriteLine(accno + "" "" + name + "" "" + rateOfInterest);', '}', 'class TestAccount{', 'public static void Main(string[] args)', '{', 'Account.rateOfInterest = 10.5f;//changing value', 'Account a1 = new Account(101, ""Sonoo"");', 'Account a2 = new Account(102, ""Mahesh"");', 'a1.display();', 'a2.display();', '}', 'using System;', 'public class Account', 'public int accno;', 'public String name;', 'public static int count=0;', 'public Account(int accno, String name)', '{', 'this.accno = accno;', 'this.name = name;', 'count++;', '}', '', 'public void display()', '{', 'Console.WriteLine(accno + "" "" + name);', '}', 'class TestAccount{', 'public static void Main(string[] args)', '{', 'Account a1 = new Account(101, ""Sonoo"");', 'Account a2 = new Account(102, ""Mahesh"");', 'Account a3 = new Account(103, ""Ajeet"");', 'a1.display();', 'a2.display();', 'a3.display();', 'Console.WriteLine(""Total Objects are: ""+Account.count);', '}']","['101 Sonoo 8.8\n102 Mahesh 8.8', '101 Sonoo 10.5\n102 Mahesh 10.5', '101 Sonoo \n102 Mahesh \n103 Ajeet\nTotal Objects are: 3']",[],[]
37,['C# static class'],['The C# static class is like the normal class but it cannot be instantiated. It can have only static members. The advantage of static class is that it provides you guarantee that instance of static class cannot be created.'],"['https://www.javatpoint.com/c-sharp-static-constructor', 'https://www.javatpoint.com/c-sharp-static', 'https://www.javatpoint.com/c-sharp-static-constructor', 'https://www.javatpoint.com/c-sharp-static', 'https://www.javatpoint.com/c-sharp-static-constructor']",[],[],['C# static class example'],['Points to remember for C# static class'],[],"[""Let's see the example of static class that contains static field and static method.""]",[],[],"['using System;', 'public static class MyMath', 'public static float PI=3.14f;', 'public static int cube(int n){return n*n*n;}', 'class TestMyMath{', 'public static void Main(string[] args)', '{', 'Console.WriteLine(""Value of PI is: ""+MyMath.PI);', 'Console.WriteLine(""Cube of 3 is: "" + MyMath.cube(3));', '}']",['Value of PI is: 3.14\nCube of 3 is: 27'],[],['|||C# static class contains only static members.|||C# static class cannot be instantiated.|||C# static class is sealed.|||C# static class cannot contain instance constructors.|||']
38,['C# static constructor'],['C# static constructor is used to initialize static fields. It can also be used to perform any action that is to be performed only once. It is invoked automatically before first instance is created or any static member is referenced.'],"['https://www.javatpoint.com/c-sharp-structs', 'https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/c-sharp-structs', 'https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/c-sharp-structs']",[],[],['C# Static Constructor example'],['Points to remember for C# Static Constructor'],[],"[""Let's see the example of static constructor which initializes the static field rateOfInterest in Account class.""]",[],[],"['using System;', 'public class Account', 'public int id;', 'public String name;', 'public static float rateOfInterest;', 'public Account(int id, String name)', '{', 'this.id = id;', 'this.name = name;', '}', 'static Account()', '{', 'rateOfInterest = 9.5f;', '}', 'public void display()', '{', 'Console.WriteLine(id + "" "" + name+"" ""+rateOfInterest);', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Account a1 = new Account(101, ""Sonoo"");', 'Account a2 = new Account(102, ""Mahesh"");', 'a1.display();', 'a2.display();', '}']",['101 Sonoo 9.5\n102 Mahesh 9.5'],[],"[""|||C# static constructor cannot have any modifier or parameter.|||C# static constructor is invoked implicitly. It can't be called explicitly.|||""]"
39,['C# Structs'],"['In C#, classes and structs are blueprints that are used to create instance of a class. Structs are used for lightweight objects such as Color, Rectangle, Point etc.']","['https://www.javatpoint.com/c-sharp-enum', 'https://www.javatpoint.com/c-sharp-static-constructor', 'https://www.javatpoint.com/c-sharp-enum', 'https://www.javatpoint.com/c-sharp-static-constructor', 'https://www.javatpoint.com/c-sharp-enum']",[],[],[],"['C# Struct Example', 'C# Struct Example: Using Constructor and Method']","[""Note: Struct doesn't support inheritance. But it can implement interfaces.""]","[""Let's see a simple example of struct Rectangle which has two data members width and height."", ""Let's see another example of struct where we are using constructor to initialize data and method to calculate area of rectangle.""]","['Unlike class, structs in C# are value type than reference type. It is useful if you have data that is not intended to be modified after creation of struct. ']",[],"['using System;', 'public struct Rectangle', 'public int width, height;', 'public class TestStructs', 'public static void Main()', 'Rectangle r = new Rectangle();', 'r.width = 4;', 'r.height = 5;', 'Console.WriteLine(""Area of Rectangle is: "" + (r.width * r.height));', 'using System;', 'public struct Rectangle', 'public int width, height;', 'public Rectangle(int w, int h)', 'width = w;', 'height = h;', 'public void areaOfRectangle() {', 'Console.WriteLine(""Area of Rectangle is: ""+(width*height)); }', 'public class TestStructs', 'public static void Main()', 'Rectangle r = new Rectangle(5, 6);', 'r.areaOfRectangle();']","['Area of Rectangle is: 20', 'Area of Rectangle is: 30']",[],[]
40,['C# Enum'],"['Enum in C# is also known as enumeration. It is used to store a set of named constants such as season, days, month, size etc. The enum constants are also known as enumerators. Enum in C# can be declared within or outside class and structs.']","['https://www.javatpoint.com/c-sharp-properties', 'https://www.javatpoint.com/c-sharp-structs', 'https://www.javatpoint.com/c-sharp-properties', 'https://www.javatpoint.com/c-sharp-structs', 'https://www.javatpoint.com/c-sharp-properties']",[],[],[],"['Points to remember', 'C# Enum Example', 'C# enum example changing start index', 'C# enum example for Days', 'C# enum example: traversing all values using getNames()', 'C# enum example: traversing all values using getValues()']",[],"['Enum constants has default values which starts from 0 and incremented to one by one. But we can change the default value.', ""Let's see a simple example of C# enum.""]",[],[],"['using System;', 'public class EnumExample', 'public enum Season { WINTER, SPRING, SUMMER, FALL }', 'public static void Main()', 'int x = (int)Season.WINTER;', 'int y = (int)Season.SUMMER;', 'Console.WriteLine(""WINTER = {0}"", x);', 'Console.WriteLine(""SUMMER = {0}"", y);', 'using System;', 'public class EnumExample', 'public enum Season { WINTER=10, SPRING, SUMMER, FALL }', 'public static void Main()', 'int x = (int)Season.WINTER;', 'int y = (int)Season.SUMMER;', 'Console.WriteLine(""WINTER = {0}"", x);', 'Console.WriteLine(""SUMMER = {0}"", y);', 'using System;', 'public class EnumExample', 'public enum Days { Sun, Mon, Tue, Wed, Thu, Fri, Sat };', 'public static void Main()', 'int x = (int)Days.Sun;', 'int y = (int)Days.Mon;', 'int z = (int)Days.Sat;', 'Console.WriteLine(""Sun = {0}"", x);', 'Console.WriteLine(""Mon = {0}"", y);', 'Console.WriteLine(""Sat = {0}"", z);', 'using System;', 'public class EnumExample', 'public enum Days { Sun, Mon, Tue, Wed, Thu, Fri, Sat };', 'public static void Main()', 'foreach (string s in Enum.GetNames(typeof(Days)))', '{', 'Console.WriteLine(s);', '}', 'using System;', 'public class EnumExample', 'public enum Days { Sun, Mon, Tue, Wed, Thu, Fri, Sat };', 'public static void Main()', 'foreach (Days d in Enum.GetValues(typeof(Days)))', '{', 'Console.WriteLine(d);', '}']","['WINTER = 0\nSUMMER = 2', 'WINTER = 10\nSUMMER = 12', 'Sun = 0\nMon = 1\nSat = 6', 'Sun\nMon\nTue\nWed\nThu\nFri\nSat', 'Sun\nMon\nTue\nWed\nThu\nFri\nSat']",[],['|||enum has fixed set of constants|||enum improves type safety|||enum can be traversed|||']
41,['C# Properties'],"[""C# Properites doesn't have storage location. C# Properites are extension of fields and accessed like fields.""]","['https://www.javatpoint.com/c-sharp-inheritance', 'https://www.javatpoint.com/c-sharp-structs', 'https://www.javatpoint.com/c-sharp-inheritance', 'https://www.javatpoint.com/c-sharp-structs', 'https://www.javatpoint.com/c-sharp-inheritance']",[],[],['Usage of C# Properties'],"['C# Properties Example', 'C# Properties Example 2: having logic while setting value', 'C# Properties Example 3: read-only property']",[],"['The Properties have accessors that are used to set, get or compute their values.']",[],[],"['using System;', 'public class Employee', 'private string name;', 'public string Name', '{', 'get', '{', 'return name;', '}', 'set', '{', 'name = value;', '}', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee();', 'e1.Name = ""Sonoo Jaiswal"";', 'Console.WriteLine(""Employee Name: "" + e1.Name);', '}', 'using System;', 'public class Employee', 'private string name;', 'public string Name', '{', 'get', '{', 'return name;', '}', 'set', '{', 'name = value+"" JavaTpoint"";', '', '}', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee();', 'e1.Name = ""Sonoo"";', 'Console.WriteLine(""Employee Name: "" + e1.Name);', '}', 'using System;', 'public class Employee', 'private static int counter;', 'public Employee()', '{', 'counter++;', '}', 'public static int Counter', '{', 'get', '{', 'return counter;', '}', '}', 'class TestEmployee{', 'public static void Main(string[] args)', '{', 'Employee e1 = new Employee();', 'Employee e2 = new Employee();', 'Employee e3 = new Employee();', 'Console.WriteLine(""No. of Employees: "" + Employee.Counter);', '}']","['Employee Name: Sonoo Jaiswal', 'Employee Name: Sonoo JavaTpoint', 'No. of Employees: 3']",[],"[""|||C# Properties can be read-only or write-only.|||We can have logic while setting values in the C# Properties.|||We make fields of the class private, so that fields can't be accessed from outside the class directly. Now we are forced to use C# properties for setting or getting values.|||""]"
42,['C# Inheritance'],"['In C#, inheritance is a process in which one object acquires all the properties and behaviors of its parent object automatically. In such way, you can reuse, extend or modify the attributes and behaviors which is defined in other class.']","['https://www.javatpoint.com/c-sharp-aggregation', 'https://www.javatpoint.com/c-sharp-properties', 'https://www.javatpoint.com/c-sharp-aggregation', 'https://www.javatpoint.com/c-sharp-properties', 'https://www.javatpoint.com/c-sharp-aggregation']",[],[],"['C# Single Level Inheritance Example: Inheriting Fields', 'C# Single Level Inheritance Example: Inheriting Methods', 'C# Multi Level Inheritance Example']",['Advantage of C# Inheritance'],['Note: Multiple inheritance is not supported in C# through class.'],"['In the above example, Employee is the base class and Programmer is the derived class.', ""Let's see another example of inheritance in C# which inherits methods only."", ""Let's see the example of multi level inheritance in C#.""]","['In C#, the class which inherits the members of another class is called derived class and the class whose members are inherited is called base class. The derived class is the specialized class for the base class.', 'Code reusability: Now you can reuse the members of your parent class. So, there is no need to define the member again. So less code is required in the class.', ""When one class inherits another class, it is known as single level inheritance. Let's see the example of single level inheritance which inherits the fields only."", 'When one class inherits another class which is further inherited by another class, it is known as multi level inheritance in C#. Inheritance is transitive so the last derived class acquires all the members of all its base classes.']",[],"['using System;', 'public class Employee', 'public float salary = 40000;', 'public class Programmer: Employee', 'public float bonus = 10000;', 'class TestInheritance{', 'public static void Main(string[] args)', '{', 'Programmer p1 = new Programmer();', 'Console.WriteLine(""Salary: "" + p1.salary);', 'Console.WriteLine(""Bonus: "" + p1.bonus);', '}', 'using System;', 'public class Animal', 'public void eat() { Console.WriteLine(""Eating...""); }', 'public class Dog: Animal', 'public void bark() { Console.WriteLine(""Barking...""); }', 'class TestInheritance2{', 'public static void Main(string[] args)', '{', 'Dog d1 = new Dog();', 'd1.eat();', 'd1.bark();', '}', 'using System;', 'public class Animal', 'public void eat() { Console.WriteLine(""Eating...""); }', 'public class Dog: Animal', 'public void bark() { Console.WriteLine(""Barking...""); }', 'public class BabyDog : Dog', 'public void weep() { Console.WriteLine(""Weeping...""); }', 'class TestInheritance2{', 'public static void Main(string[] args)', '{', 'BabyDog d1 = new BabyDog();', 'd1.eat();', 'd1.bark();', 'd1.weep();', '}']","['Salary: 40000\nBonus: 10000', 'Eating...\nBarking...', 'Eating...\nBarking...\nWeeping...']",[],[]
43,['C# Aggregation (HAS-A Relationship)'],"['In C#, aggregation is a process in which one class defines another class as any entity reference. It is another way to reuse the class. It is a form of association that represents HAS-A relationship.']","['https://www.javatpoint.com/c-sharp-member-overloading', 'https://www.javatpoint.com/c-sharp-inheritance', 'https://www.javatpoint.com/c-sharp-member-overloading', 'https://www.javatpoint.com/c-sharp-inheritance', 'https://www.javatpoint.com/c-sharp-member-overloading']",[],[],[],['C# Aggregation Example'],[],[],"[""Let's see an example of aggregation where Employee class has the reference of Address class as data member. In such way, it can reuse the members of Address class.""]",[],"['using System;', 'public class Address', 'public string addressLine, city, state;', 'public Address(string addressLine, string city, string state)', 'this.addressLine = addressLine;', 'this.city = city;', 'this.state = state;', 'public class Employee', 'public int id;', 'public string name;', 'public Address address;//Employee HAS-A Address', 'public Employee(int id, string name, Address address)', '{', 'this.id = id;', 'this.name = name;', 'this.address = address;', '}', 'public void display()', '{', 'Console.WriteLine(id + "" "" + name + "" "" +', 'address.addressLine + "" "" + address.city + "" "" + address.state);', '}', 'public class TestAggregation', 'public static void Main(string[] args)', '{', 'Address a1=new Address(""G-13, Sec-3"",""Noida"",""UP"");', 'Employee e1 = new Employee(1,""Sonoo"",a1);', 'e1.display();', '}']",['1 Sonoo G-13 Sec-3 Noida UP'],[],[]
44,['C# Member Overloading'],"[""If we create two or more members having same name but different in number or type of parameter, it is known as member overloading. In C#, we can overload:\n\nmethods, \nconstructors, and\nindexed properties\n\nIt is because these members have parameters only.\nC# Method Overloading\nHaving two or more methods with same name but different in parameters, is known as method overloading in C#.\nThe advantage of method overloading is that it increases the readability of the program because you don't need to use different names for same action.\nYou can perform method overloading in C# by two ways:\n\nBy changing number of arguments\nBy changing data type of the arguments\n\nC# Method Overloading Example: By changing no. of arguments\nLet's see the simple example of method overloading where we are changing number of arguments of add() method.\n\nusing System;\npublic class Cal{\n    public static int add(int a,int b){\n        return a + b;\n    }\n    public static int add(int a, int b, int c)\n    {\n        return a + b + c;\n    }\n}\npublic class TestMemberOverloading\n{\n    public static void Main()\n    {\n        Console.WriteLine(Cal.add(12, 23));\n        Console.WriteLine(Cal.add(12, 23, 25));\n    }\n}\n\nOutput:\n35\n60\n\n\n\n\nC# Member Overloading Example: By changing data type of arguments\nLet's see the another example of method overloading where we are changing data type of arguments.\n\nusing System;\npublic class Cal{\n    public static int add(int a, int b){\n        return a + b;\n    }\n    public static float add(float a, float b)\n    {\n        return a + b;\n    }\n}\npublic class TestMemberOverloading\n{\n    public static void Main()\n    {\n        Console.WriteLine(Cal.add(12, 23));\n        Console.WriteLine(Cal.add(12.4f,21.3f));\n    }\n}\n\nOutput:\n35\n33.7\n\n\nNext TopicC# Method Overriding\n\n\n\n← prev\nnext →\n\n\n""]","['https://www.javatpoint.com/c-sharp-method-overriding', 'https://www.javatpoint.com/c-sharp-aggregation', 'https://www.javatpoint.com/c-sharp-method-overriding', 'https://www.javatpoint.com/c-sharp-aggregation', 'https://www.javatpoint.com/c-sharp-method-overriding']",[],[],['C# Method Overloading'],"['C# Method Overloading Example: By changing no. of arguments', 'C# Member Overloading Example: By changing data type of arguments']",[],"['It is because these members have parameters only.', 'Having two or more methods with same name but different in parameters, is known as method overloading in C#.', 'You can perform method overloading in C# by two ways:', ""Let's see the simple example of method overloading where we are changing number of arguments of add() method."", ""Let's see the another example of method overloading where we are changing data type of arguments.""]","[""The advantage of method overloading is that it increases the readability of the program because you don't need to use different names for same action.""]",[],"['using System;', 'public class Cal{', 'public static int add(int a,int b){', 'return a + b;', 'public static int add(int a, int b, int c)', 'return a + b + c;', 'public class TestMemberOverloading', 'public static void Main()', 'Console.WriteLine(Cal.add(12, 23));', 'Console.WriteLine(Cal.add(12, 23, 25));', 'using System;', 'public class Cal{', 'public static int add(int a, int b){', 'return a + b;', 'public static float add(float a, float b)', 'return a + b;', 'public class TestMemberOverloading', 'public static void Main()', 'Console.WriteLine(Cal.add(12, 23));', 'Console.WriteLine(Cal.add(12.4f,21.3f));']","['35\n60', '35\n33.7']",[],"['|||methods, |||constructors, and|||indexed properties|||&&&|||By changing number of arguments|||By changing data type of the arguments|||']"
45,['C# Method Overriding'],"['If derived class defines same method as defined in its base class, it is known as method overriding in C#. It is used to achieve runtime polymorphism. It enables you to provide specific implementation of the method which is already provided by its base class.']","['https://www.javatpoint.com/c-sharp-base', 'https://www.javatpoint.com/c-sharp-member-overloading', 'https://www.javatpoint.com/c-sharp-base', 'https://www.javatpoint.com/c-sharp-member-overloading', 'https://www.javatpoint.com/c-sharp-base']",[],[],['C# Method Overriding Example'],[],[],"['To perform method overriding in C#, you need to use virtual keyword with base class method and override keyword with derived class method.', ""Let's see a simple example of method overriding in C#. In this example, we are overriding the eat() method by the help of override keyword.""]",[],[],"['using System;', 'public class Animal{', 'public virtual void eat(){', 'Console.WriteLine(""Eating..."");', 'public class Dog: Animal', 'public override void eat()', 'Console.WriteLine(""Eating bread..."");', 'public class TestOverriding', 'public static void Main()', 'Dog d = new Dog();', 'd.eat();']",['Eating bread...'],[],[]
46,['C# Base'],"['In C#, base keyword is used to access fields, constructors and methods of base class.']","['https://www.javatpoint.com/c-sharp-polymorphism', 'https://www.javatpoint.com/c-sharp-method-overriding', 'https://www.javatpoint.com/c-sharp-polymorphism', 'https://www.javatpoint.com/c-sharp-method-overriding', 'https://www.javatpoint.com/c-sharp-polymorphism']",[],[],"['C# base keyword: accessing base class field', 'C# base keyword example: calling base class method', 'C# inheritance: calling base class constructor internally']",[],[],"[""You can use base keyword within instance method, constructor or instance property accessor only. You can't use it inside the static method."", ""Let's see the simple example of base keyword in C# which accesses the field of base class."", ""Let's see the simple example of base keyword which calls the method of base class."", ""Whenever you inherit the base class, base class constructor is internally invoked. Let's see the example of calling base constructor.""]",[],"[""We can use the base keyword to access the fields of the base class within derived class. It is useful if base and derived classes have the same fields. If derived class doesn't define same field, there is no need to use base keyword. Base class field can be directly accessed by the derived class."", ""By the help of base keyword, we can call the base class method also. It is useful if base and derived classes defines same method. In other words, if method is overridden. If derived class doesn't define same method, there is no need to use base keyword. Base class method can be directly called by the derived class method.""]","['using System;', 'public class Animal{', 'public string color = ""white"";', 'public class Dog: Animal', 'string color = ""black"";', 'public void showColor()', 'Console.WriteLine(base.color);', 'Console.WriteLine(color);', 'public class TestBase', 'public static void Main()', 'Dog d = new Dog();', 'd.showColor();', 'using System;', 'public class Animal{', 'public virtual void eat(){', 'Console.WriteLine(""eating..."");', 'public class Dog: Animal', 'public override void eat()', 'base.eat();', 'Console.WriteLine(""eating bread..."");', 'public class TestBase', 'public static void Main()', 'Dog d = new Dog();', 'd.eat();', 'using System;', 'public class Animal{', 'public Animal(){', 'Console.WriteLine(""animal..."");', 'public class Dog: Animal', 'public Dog()', 'Console.WriteLine(""dog..."");', 'public class TestOverriding', 'public static void Main()', 'Dog d = new Dog();', '']","['white\nblack', 'eating...\neating bread...', 'animal...\ndog...']",[],[]
47,['C# Polymorphism'],"['The term ""Polymorphism"" is the combination of ""poly"" + ""morphs"" which means many forms. It is a greek word. In object-oriented programming, we use 3 main concepts: inheritance, encapsulation and polymorphism.']","['https://www.javatpoint.com/c-sharp-sealed', 'https://www.javatpoint.com/c-sharp-base', 'https://www.javatpoint.com/c-sharp-sealed', 'https://www.javatpoint.com/c-sharp-base', 'https://www.javatpoint.com/c-sharp-sealed']",[],[],['Runtime Polymorphism with Data Members'],"['C# Runtime Polymorphism Example', 'C# Runtime Polymorphism Example 2']",[],"[""Let's see a simple example of runtime polymorphism in C#."", ""Let's see a another example of runtime polymorphism in C# where we are having two derived classes.""]","[""Runtime Polymorphism can't be achieved by data members in C#. Let's see an example where we are accessing the field by reference variable which refers to the instance of derived class.""]",['There are two types of polymorphism in C#: compile time polymorphism and runtime polymorphism. Compile time polymorphism is achieved by method overloading and operator overloading in C#. It is also known as static binding or early binding. Runtime polymorphism in achieved by method overriding which is also known as dynamic binding or late binding.'],"['using System;', 'public class Animal{', 'public virtual void eat(){', 'Console.WriteLine(""eating..."");', 'public class Dog: Animal', 'public override void eat()', 'Console.WriteLine(""eating bread..."");', 'public class TestPolymorphism', 'public static void Main()', 'Animal a= new Dog();', 'a.eat();', 'using System;', 'public class Shape{', 'public virtual void draw(){', 'Console.WriteLine(""drawing..."");', 'public class Rectangle: Shape', 'public override void draw()', 'Console.WriteLine(""drawing rectangle..."");', 'public class Circle : Shape', 'public override void draw()', 'Console.WriteLine(""drawing circle..."");', 'public class TestPolymorphism', 'public static void Main()', 'Shape s;', 's = new Shape();', 's.draw();', 's = new Rectangle();', 's.draw();', 's = new Circle();', 's.draw();', 'using System;', 'public class Animal{', 'public string color = ""white"";', 'public class Dog: Animal', 'public string color = ""black"";', 'public class TestSealed', 'public static void Main()', 'Animal d = new Dog();', 'Console.WriteLine(d.color);']","['eating bread...', 'drawing...\ndrawing rectangle...\ndrawing circle...', 'white']",[],[]
48,['C# Sealed'],"['C# sealed keyword applies restrictions on the class and method. If you create a sealed class, it cannot be derived. If you create a sealed method, it cannot be overridden.']","['https://www.javatpoint.com/c-sharp-abstract', 'https://www.javatpoint.com/c-sharp-polymorphism', 'https://www.javatpoint.com/c-sharp-abstract', 'https://www.javatpoint.com/c-sharp-polymorphism', 'https://www.javatpoint.com/c-sharp-abstract']",[],[],"['C# Sealed class', 'C# Sealed method']",[],"[""Note: Structs are implicitly sealed therefore they can't be inherited."", ""Note: Local variables can't be sealed.""]","[""C# sealed class cannot be derived by any class. Let's see an example of sealed class in C#."", 'The sealed method in C# cannot be overridden further. It must be used with override keyword in method.', ""Let's see an example of sealed method in C#.""]",[],[],"['using System;', 'sealed public class Animal{', 'public void eat() { Console.WriteLine(""eating...""); }', 'public class Dog: Animal', 'public void bark() { Console.WriteLine(""barking...""); }', 'public class TestSealed', 'public static void Main()', 'Dog d = new Dog();', 'd.eat();', 'd.bark();', 'using System;', 'public class Animal{', 'public virtual void eat() { Console.WriteLine(""eating...""); }', 'public virtual void run() { Console.WriteLine(""running...""); }', 'public class Dog: Animal', 'public override void eat() { Console.WriteLine(""eating bread...""); }', 'public sealed override void run() {', 'Console.WriteLine(""running very fast..."");', 'public class BabyDog : Dog', 'public override void eat() { Console.WriteLine(""eating biscuits...""); }', 'public override void run() { Console.WriteLine(""running slowly...""); }', 'public class TestSealed', 'public static void Main()', 'BabyDog d = new BabyDog();', 'd.eat();', 'd.run();', 'using System;', 'public class TestSealed', 'public static void Main()', 'sealed int x = 10;', 'x++;', 'Console.WriteLine(x);']","[""Compile Time Error: 'Dog': cannot derive from sealed type 'Animal'"", ""Compile Time Error: 'BabyDog.run()': cannot override inherited member 'Dog.run()' because it is sealed"", ""Compile Time Error: Invalid expression term 'sealed'""]",[],[]
49,['C# Abstract'],['Abstract classes are the way to achieve abstraction in C#. Abstraction in C# is the process to hide the internal details and showing functionality only. Abstraction can be achieved by two ways:'],"['https://www.javatpoint.com/c-sharp-interface', 'https://www.javatpoint.com/c-sharp-sealed', 'https://www.javatpoint.com/c-sharp-interface', 'https://www.javatpoint.com/c-sharp-sealed', 'https://www.javatpoint.com/c-sharp-interface']",[],[],"['Abstract Method', 'C# Abstract class']",[],['An abstract method in C# is internally a virtual method so it can be overridden by the derived class.'],"['Abstract class and interface both can have abstract methods which are necessary for abstraction.', ""You can't use static and virtual modifiers in abstract method declaration.""]","['A method which is declared abstract and has no body is called abstract method. It can be declared inside the abstract class only. Its implementation must be provided by derived classes. For example:', ""Let's see an example of abstract class in C# which has one abstract method draw(). Its implementation is provided by derived classes: Rectangle and Circle. Both classes have different implementation.""]","['In C#, abstract class is a class which is declared abstract. It can have abstract and non-abstract methods. It cannot be instantiated. Its implementation must be provided by derived classes. Here, derived class is forced to provide the implementation of all the abstract methods.']","['public abstract void draw();', 'using System;', 'public abstract class Shape', 'public abstract void draw();', 'public class Rectangle : Shape', 'public override void draw()', 'Console.WriteLine(""drawing rectangle..."");', 'public class Circle : Shape', 'public override void draw()', 'Console.WriteLine(""drawing circle..."");', 'public class TestAbstract', 'public static void Main()', 'Shape s;', 's = new Rectangle();', 's.draw();', 's = new Circle();', 's.draw();']",['drawing ractangle...\ndrawing circle...'],[],['|||Abstract class|||Interface|||']
50,['C# Interface'],['Interface in C# is a blueprint of a class. It is like abstract class because all the methods which are declared inside the interface are abstract methods. It cannot have method body and cannot be instantiated.'],"['https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/c-sharp-abstract', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/c-sharp-abstract', 'https://www.javatpoint.com/c-sharp-namespaces']",[],[],[],['C# interface example'],['Note: Interface methods are public and abstract by default. You cannot explicitly use public and abstract keywords for an interface method.'],"[""Let's see the example of interface in C# which has draw() method. Its implementation is provided by two classes: Rectangle and Circle.""]","[""It is used to achieve multiple inheritance which can't be achieved by class. It is used to achieve fully abstraction because it cannot have method body."", 'Its implementation must be provided by class or struct. The class or struct which implements the interface, must provide the implementation of all the methods declared inside the interface.']",[],"['using System;', 'public interface Drawable', 'void draw();', 'public class Rectangle : Drawable', 'public void draw()', 'Console.WriteLine(""drawing rectangle..."");', 'public class Circle : Drawable', 'public void draw()', 'Console.WriteLine(""drawing circle..."");', 'public class TestInterface', 'public static void Main()', 'Drawable d;', 'd = new Rectangle();', 'd.draw();', 'd = new Circle();', 'd.draw();', 'using System;', 'public interface Drawable', 'public abstract void draw();//Compile Time Error']",['drawing ractangle...\ndrawing circle...'],[],[]
51,['C# Namespaces'],['Namespaces in C# are used to organize too many classes so that it can be easy to handle the application.'],"['https://www.javatpoint.com/c-sharp-access-modifiers', 'https://www.javatpoint.com/c-sharp-interface', 'https://www.javatpoint.com/c-sharp-access-modifiers', 'https://www.javatpoint.com/c-sharp-interface', 'https://www.javatpoint.com/c-sharp-access-modifiers']",[],[],[],"['C# namespace example', 'C# namespace example: by fully qualified name', 'C# namespace example: by using keyword']",[],"['In C#, global namespace is the root namespace. The global::System will always refer to the namespace ""System"" of .Net Framework.', 'Let\'s see a simple example of namespace which contains one class ""Program"".', ""Let's see another example of namespace in C# where one namespace program accesses another namespace program.""]","['Let\'s see another example of namespace where we are using ""using"" keyword so that we don\'t have to use complete name for accessing a namespace program.']","[""In a simple C# program, we use System.Console where System is the namespace and Console is the class. To access the class of a namespace, we need to use namespacename.classname. We can use using keyword so that we don't have to use complete name all the time.""]","['using System;', 'namespace ConsoleApplication1', 'class Program', 'static void Main(string[] args)', '{', 'Console.WriteLine(""Hello Namespace!"");', '}', 'using System;', 'namespace First {', 'public class Hello', 'public void sayHello() { Console.WriteLine(""Hello First Namespace""); }', 'namespace Second', 'public class Hello', 'public void sayHello() { Console.WriteLine(""Hello Second Namespace""); }', 'public class TestNamespace', 'public static void Main()', 'First.Hello h1 = new First.Hello();', 'Second.Hello h2 = new Second.Hello();', 'h1.sayHello();', 'h2.sayHello();', 'using System;', 'using First;', 'using Second;', 'namespace First {', 'public class Hello', 'public void sayHello() { Console.WriteLine(""Hello Namespace""); }', 'namespace Second', 'public class Welcome', 'public void sayWelcome() { Console.WriteLine(""Welcome Namespace""); }', 'public class TestNamespace', 'public static void Main()', 'Hello h1 = new Hello();', 'Welcome w1 = new Welcome();', 'h1.sayHello();', 'w1.sayWelcome();']","['Hello Namespace!', 'Hello First Namespace\nHello Second Namespace', 'Hello Namespace\nWelcome Namespace']",[],[]
52,['C# Access Modifiers / Specifiers'],['C# Access modifiers or specifiers are the keywords that are used to specify accessibility or scope of variables and functions in the C# application.'],"['https://www.javatpoint.com/c-sharp-encapsulation', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/c-sharp-encapsulation', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/c-sharp-encapsulation']",[],[],"['1) C# Public Access Specifier', '2) C# Protected Access Specifier', '3) C# Internal Access Specifier', '4) C# Protected Internal Access Specifier', '5) C# Private Access Specifier']","['Example', 'Example', 'Example', 'Example', 'Example', 'C# Private Specifier Example 2']",[],"['C# provides five types of access specifiers.', ""Now, let's create examples to check accessibility of each access specifier."", 'It makes data accessible publicly. It does not restrict data to the declared block. ', 'It is accessible within the class and has limited scope. It is also accessible within sub class or child class, in case of inheritance.', 'Here, we are accessing protected members within child class by inheritance.']","['We can choose any of these to protect our data. Public is not restricted and Private is most restricted. The following table describes about the accessibility of each.', 'The internal keyword is used to specify the internal access specifier for the variables and functions. This specifier is accessible only within files in the same assembly.', 'Variable or function declared protected internal can be accessed in the assembly in which it is declared. It can also be accessed within a derived class in another assembly.', 'Private Access Specifier is used to specify private accessibility to the variable or function. It is most restrictive and accessible only within the body of class in which it is declared.']",[],"['using System;', 'namespace AccessSpecifiers', 'class PublicTest', 'public string name = ""Shantosh Kumar"";', 'public void Msg(string msg)', '{', 'Console.WriteLine(""Hello "" + msg);', '}', 'class Program', 'static void Main(string[] args)', '{', 'PublicTest publicTest = new PublicTest();', 'Console.WriteLine(""Hello "" + publicTest.name);', 'publicTest.Msg(""Peter Decosta"");', '}', 'using System;', 'namespace AccessSpecifiers', 'class ProtectedTest', 'protected string name = ""Shashikant"";', 'protected void Msg(string msg)', '{', 'Console.WriteLine(""Hello "" + msg);', '}', 'class Program', 'static void Main(string[] args)', '{', 'ProtectedTest protectedTest = new ProtectedTest();', 'Console.WriteLine(""Hello ""+ protectedTest.name);', 'protectedTest.Msg(""Swami Ayyer"");', '}', 'using System;', 'namespace AccessSpecifiers', 'class ProtectedTest', 'protected string name = ""Shashikant"";', 'protected void Msg(string msg)', '{', 'Console.WriteLine(""Hello "" + msg);', '}', 'class Program : ProtectedTest', 'static void Main(string[] args)', '{', 'Program program = new Program();', 'Console.WriteLine(""Hello "" + program.name);', 'program.Msg(""Swami Ayyer"");', '}', '}', 'using System;', 'namespace AccessSpecifiers', 'class InternalTest', 'internal string name = ""Shantosh Kumar"";', 'internal void Msg(string msg)', '{', 'Console.WriteLine(""Hello "" + msg);', '}', 'class Program', 'static void Main(string[] args)', '{', 'InternalTest internalTest = new InternalTest();', 'Console.WriteLine(""Hello "" + internalTest.name);', 'internalTest.Msg(""Peter Decosta"");', '}', 'using System;', 'namespace AccessSpecifiers', 'class InternalTest', 'protected internal string name = ""Shantosh Kumar"";', 'protected internal void Msg(string msg)', '{', 'Console.WriteLine(""Hello "" + msg);', '}', 'class Program', 'static void Main(string[] args)', '{', 'InternalTest internalTest = new InternalTest();', 'Console.WriteLine(""Hello "" + internalTest.name);', 'internalTest.Msg(""Peter Decosta"");', '}', 'using System;', 'namespace AccessSpecifiers', 'class PrivateTest', 'private string name = ""Shantosh Kumar"";', 'private void Msg(string msg)', '{', 'Console.WriteLine(""Hello "" + msg);', '}', 'class Program', 'static void Main(string[] args)', '{', 'PrivateTest privateTest = new PrivateTest();', 'Console.WriteLine(""Hello "" + privateTest.name);', 'privateTest.Msg(""Peter Decosta"");', '}', 'using System;', 'namespace AccessSpecifiers', 'class Program', 'private string name = ""Shantosh Kumar"";', 'private void Msg(string msg)', '{', 'Console.WriteLine(""Hello "" + msg);', '}', 'static void Main(string[] args)', '{', 'Program program = new Program();', 'Console.WriteLine(""Hello "" + program.name);', 'program.Msg(""Peter Decosta"");', '}']","['Hello Shantosh Kumar\nHello Peter Decosta', ""Compile time error\n'ProtectedTest.name' is inaccessible due to its protection level."", 'Hello Shashikant\nHello Swami Ayyer', 'Hello Shantosh Kumar\nHello Peter Decosta', 'Hello Shantosh Kumar\nHello Peter Decosta', ""Compile time error\n'PrivateTest.name' is inaccessible due to its protection level."", 'Hello Shantosh Kumar\nHello Peter Decosta']",['Access Specifier|||Description&&&Public|||It specifies that access is not restricted.&&&Protected|||It specifies that access is limited to the containing class or in derived class.&&&Internal|||It specifies that access is limited to the current assembly.&&&protected internal|||It specifies that access is limited to the current assembly or types derived from the containing class.&&&Private|||It specifies that access is limited to the containing type.'],['|||Public|||Protected|||Internal|||Protected internal|||Private|||']
53,['C# Encapsulation'],['Encapsulation is the concept of wrapping data into a single unit. It collects data members and member functions into a single unit called class. The purpose of encapsulation is to prevent alteration of data from outside. This data can only be accessed by getter functions of the class.'],"['https://www.javatpoint.com/c-sharp-strings', 'https://www.javatpoint.com/c-sharp-access-modifiers', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/c-sharp-strings', 'https://www.javatpoint.com/c-sharp-access-modifiers', 'https://www.javatpoint.com/c-sharp-strings']",[],[],[],['Example'],[],"['A fully encapsulated class has getter and setter functions that are used to read and write data. This class does not allow data access directly.', 'Here, we are creating an example in which we have a class that encapsulates properties and provides getter and setter functions.']",[],[],"['namespace AccessSpecifiers', 'class Student', 'public string ID { get; set; }', 'public string Name { get; set; }', 'public string Email { get; set; }', 'using System;', 'namespace AccessSpecifiers', 'class Program', 'static void Main(string[] args)', '{', 'Student student = new Student();', 'student.ID = ""101"";', 'student.Name = ""Mohan Ram"";', 'student.Email = ""mohan@example.com"";', 'Console.WriteLine(""ID = ""+student.ID);', 'Console.WriteLine(""Name = ""+student.Name);', 'Console.WriteLine(""Email = ""+student.Email);', '}']",['ID = 101\nName = Mohan Ram\nEmail = [email\xa0protected]'],[],[]
54,"['C# Strings', 'C# String methods']","['In C#, string is an object of System.String class that represent sequence of characters. We can perform many operations on strings such as concatenation, comparision, getting substring, search, trim, replacement etc.']","['https://www.javatpoint.com/csharp-string-clone', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/csharp-string-clone', 'https://www.javatpoint.com/csharp-string-compare', 'https://www.javatpoint.com/csharp-string-compareordinal', 'https://www.javatpoint.com/csharp-string-compareto', 'https://www.javatpoint.com/csharp-string-concat', 'https://www.javatpoint.com/csharp-string-contains', 'https://www.javatpoint.com/csharp-string-copy', 'https://www.javatpoint.com/csharp-string-copyto', 'https://www.javatpoint.com/csharp-string-endswith', 'https://www.javatpoint.com/csharp-string-equals', 'https://www.javatpoint.com/csharp-string-format', 'https://www.javatpoint.com/csharp-string-getenumerator', 'https://www.javatpoint.com/csharp-string-gethashcode', 'https://www.javatpoint.com/csharp-string-gettype', 'https://www.javatpoint.com/csharp-string-gettypecode', 'https://www.javatpoint.com/csharp-string-indexof', 'https://www.javatpoint.com/csharp-string-insert', 'https://www.javatpoint.com/csharp-string-intern', 'https://www.javatpoint.com/csharp-string-isinterned', 'https://www.javatpoint.com/csharp-string-isnormallize', 'https://www.javatpoint.com/csharp-string-isnullorempty', 'https://www.javatpoint.com/csharp-string-isnullorwhitespace', 'https://www.javatpoint.com/csharp-string-join', 'https://www.javatpoint.com/csharp-string-lastindexof', 'https://www.javatpoint.com/csharp-string-lastindexofany', 'https://www.javatpoint.com/csharp-string-normalize', 'https://www.javatpoint.com/csharp-string-padleft', 'https://www.javatpoint.com/csharp-string-padright', 'https://www.javatpoint.com/csharp-string-remove', 'https://www.javatpoint.com/csharp-string-replace', 'https://www.javatpoint.com/csharp-string-split', 'https://www.javatpoint.com/csharp-string-startswith', 'https://www.javatpoint.com/csharp-string-substring', 'https://www.javatpoint.com/csharp-string-tochararray', 'https://www.javatpoint.com/csharp-string-tolower', 'https://www.javatpoint.com/csharp-string-tolowerinvariant', 'https://www.javatpoint.com/csharp-string-tostring', 'https://www.javatpoint.com/csharp-string-toupper', 'https://www.javatpoint.com/csharp-string-trim', 'https://www.javatpoint.com/csharp-string-trimend', 'https://www.javatpoint.com/csharp-string-trimstart', 'https://www.javatpoint.com/csharp-string-clone', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/csharp-string-clone']",[],[],"['string vs String', 'C# String Example']",[],[],[],"['In C#, string is keyword which is an alias for System.String class. That is why string and String are equivalent. We are free to use any naming convention.']",[],"['string s1 = ""hello"";//creating string using string keyword', 'String s2 = ""welcome"";//creating string using String class', 'using System;', 'public class StringExample', 'public static void Main(string[] args)', 'string s1 = ""hello"";', ""char[] ch = { 'c', 's', 'h', 'a', 'r', 'p' };"", 'string s2 = new string(ch);', 'Console.WriteLine(s1);', 'Console.WriteLine(s2);']",['hello \ncsharp'],"[""Method Name|||Description&&&Clone()|||It is used to return a reference to this instance of String.&&&Compare(String, String)|||It is used to compares two specified String objects. It returns an integer that indicates their relative position in the sort order.&&&CompareOrdinal(String, String)|||It is used to compare two specified String objects by evaluating the numeric values of the corresponding Char objects in each string..&&&CompareTo(String)|||It is used to compare this instance with a specified String object. It indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.&&&Concat(String, String)|||It is used to concatenate two specified instances of String.&&&Contains(String)|||It is used to return a value indicating whether a specified substring occurs within this string.&&&Copy(String)|||It is used to create a new instance of String with the same value as a specified String.&&&CopyTo(Int32, Char[], Int32, Int32)|||It is used to copy a specified number of characters from a specified|||position in this instance to a specified position in an array of|||Unicode characters.|||&&&EndsWith(String)|||It is used to check that the end of this string instance matches the specified string.&&&Equals(String, String)|||It is used to determine that two specified String objects have the same value.&&&Format(String, Object)|||It is used to replace one or more format items in a specified string with the string representation of a specified object.&&&GetEnumerator()|||It is used to retrieve an object that can iterate through the individual characters in this string.&&&GetHashCode()|||It returns the hash code for this string.&&&GetType()|||It is used to get the Type of the current instance. &&&GetTypeCode()|||It is used to return the TypeCode for class String.&&&IndexOf(String)|||It is used to report the zero-based index of the first occurrence of the specified string in this instance.&&&Insert(Int32, String)|||It is used to return a new string in which a specified string is inserted at a specified index position.&&&Intern(String)|||It is used to retrieve the system's reference to the specified String.&&&IsInterned(String)|||It is used to retrieve a reference to a specified String.&&&IsNormalized()|||It is used to indicate that this string is in Unicode normalization form C.&&&IsNullOrEmpty(String)|||It is used to indicate that the specified string is null or an Empty string.&&&IsNullOrWhiteSpace(String)|||It is used to indicate whether a specified string is null, empty, or consists only of white-space characters.&&&Join(String, String[])|||It is used to concatenate all the elements of a string array, using the specified separator between each element.&&&LastIndexOf(Char)|||It is used to report the zero-based index position of the last occurrence of a specified character within String.&&&LastIndexOfAny(Char[])|||It is used to report the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.&&&Normalize()|||It is used to return a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.&&&PadLeft(Int32)|||It is used to return a new string that right-aligns the characters in this instance by padding them with spaces on the left.&&&PadRight(Int32)|||It is used to return a new string that left-aligns the characters in this string by padding them with spaces on the right.&&&Remove(Int32)|||It is used to return a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.&&&Replace(String, String)|||It is used to return a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.&&&Split(Char[])|||It is used to split a string into substrings that are based on the characters in an array.&&&StartsWith(String)|||It is used to check whether the beginning of this string instance matches the specified string.&&&Substring(Int32)|||It is used to retrieve a substring from this instance. The substring starts at a specified character position and continues to the end of the string.&&&ToCharArray()|||It is used to copy the characters in this instance to a Unicode character array.&&&ToLower()|||It is used to convert String into lowercase.&&&ToLowerInvariant()|||It is used to return convert String into lowercase using the casing rules of the invariant culture.&&&ToString()|||It is used to return instance of String.&&&ToUpper()|||It is used to convert String into uppercase.&&&Trim()|||It is used to remove all leading and trailing white-space characters from the current String object.&&&TrimEnd(Char[])|||It Is used to remove all trailing occurrences of a set of characters specified in an array from the current String object.&&&TrimStart(Char[])|||It is used to remove all leading occurrences of a set of characters specified in an array from the current String object.""]",[]
55,['C# Exception Handling'],['Exception Handling in C# is a process to handle runtime errors. We perform exception handling so that normal flow of the application can be maintained even after runtime errors.'],"['https://www.javatpoint.com/c-sharp-try-catch', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/c-sharp-try-catch', 'https://www.javatpoint.com/c-sharp-namespaces', 'https://www.javatpoint.com/c-sharp-try-catch']",[],[],"['C# Exception Classes', 'C# Exception Handling Keywords']",['Advantage'],[],"['It maintains the normal flow of the application. In such case, rest of the code is executed event after exception.', ""All the exception classes in C# are derived from System.Exception class. Let's see the list of C# common exception classes."", 'In C#, we use 4 keywords to perform exception handling:', 'Moreover, we can create user-defined exception which we will learn in next chapters.']",[],"[""In C#, exception is an event or object which is thrown at runtime. All exceptions the derived from System.Exception class. It is a runtime error which can be handled. If we don't handle the exception, it prints exception message and terminates the program.""]",[],[],['xceptionDescriptio&&&ystem.DivideByZeroExceptionhandles the error generated by dividing a number with zero&&&ystem.NullReferenceExceptionhandles the error generated by referencing the null object&&&ystem.InvalidCastExceptionhandles the error generated by invalid typecasting&&&ystem.IO.IOExceptionhandles the Input Output errors&&&ystem.FieldAccessExceptionhandles the error generated by invalid private or protected field access'],"['|||try|||catch|||finally, and|||throw|||']"
56,['C# try/catch'],"['In C# programming, exception handling is performed by try/catch statement. The try block in C# is used to place the code that may throw exception. The catch block is used to handled the exception. The catch block must be preceded by try block.']","['https://www.javatpoint.com/c-sharp-finally', 'https://www.javatpoint.com/c-sharp-exception-handling', 'https://www.javatpoint.com/c-sharp-finally', 'https://www.javatpoint.com/c-sharp-exception-handling', 'https://www.javatpoint.com/c-sharp-finally']",[],[],[],"['C# example without try/catch', 'C# try/catch example']",[],[],[],[],"['using System;', 'public class ExExample', 'public static void Main(string[] args)', 'int a = 10;', 'int b = 0;', 'int x = a/b;', 'Console.WriteLine(""Rest of the code"");', 'using System;', 'public class ExExample', 'public static void Main(string[] args)', 'try', '{', 'int a = 10;', 'int b = 0;', 'int x = a / b;', '}', 'catch (Exception e) { Console.WriteLine(e); }', 'Console.WriteLine(""Rest of the code"");']","['Unhandled Exception: System.DivideByZeroException: Attempted to divide by zero.', 'System.DivideByZeroException: Attempted to divide by zero.\nRest of the code']",[],[]
57,['C# finally'],['C# finally block is used to execute important code which is to be executed whether exception is handled or not. It must be preceded by catch or try block.'],"['https://www.javatpoint.com/c-sharp-user-defined-exceptions', 'https://www.javatpoint.com/c-sharp-try-catch', 'https://www.javatpoint.com/c-sharp-user-defined-exceptions', 'https://www.javatpoint.com/c-sharp-try-catch', 'https://www.javatpoint.com/c-sharp-user-defined-exceptions']",[],[],[],"['C# finally example if exception is handled', 'C# finally example if exception is not handled']",[],[],[],[],"['using System;', 'public class ExExample', 'public static void Main(string[] args)', 'try', '{', 'int a = 10;', 'int b = 0;', 'int x = a / b;', '}', 'catch (Exception e) { Console.WriteLine(e); }', 'finally { Console.WriteLine(""Finally block is executed""); }', 'Console.WriteLine(""Rest of the code"");', 'using System;', 'public class ExExample', 'public static void Main(string[] args)', 'try', '{', 'int a = 10;', 'int b = 0;', 'int x = a / b;', '}', 'catch (NullReferenceException e) { Console.WriteLine(e); }', 'finally { Console.WriteLine(""Finally block is executed""); }', 'Console.WriteLine(""Rest of the code"");']","['System.DivideByZeroException: Attempted to divide by zero.\nFinally block is executed\nRest of the code', 'Unhandled Exception: System.DivideBy']",[],[]
58,['C# User-Defined Exceptions'],"['C# allows us to create user-defined or custom exception. It is used to make the meaningful exception. To do this, we need to inherit Exception class.']","['https://www.javatpoint.com/c-sharp-checked-and-unchecked', 'https://www.javatpoint.com/c-sharp-finally', 'https://www.javatpoint.com/c-sharp-checked-and-unchecked', 'https://www.javatpoint.com/c-sharp-finally', 'https://www.javatpoint.com/c-sharp-checked-and-unchecked']",[],[],[],['C# user-defined exception example'],[],[],[],[],"['using System;', 'public class InvalidAgeException : Exception', 'public InvalidAgeException(String message)', ': base(message)', 'public class TestUserDefinedException', 'static void validate(int age)', 'if (age < 18)', '{', 'throw new InvalidAgeException(""Sorry, Age must be greater than 18"");', '}', 'public static void Main(string[] args)', 'try', '{', 'validate(12);', '}', 'catch (InvalidAgeException e) { Console.WriteLine(e); }', 'Console.WriteLine(""Rest of the code"");']","['InvalidAgeException: Sorry, Age must be greater than 18\nRest of the code']",[],[]
59,['C# Checked and Unchecked'],"['C# provides checked and unchecked keyword to handle integral type exceptions. Checked and unchecked keywords specify checked context and unchecked context respectively. In checked context, arithmetic overflow raises an exception whereas, in an unchecked context, arithmetic overflow is ignored and result is truncated. ']","['https://www.javatpoint.com/c-sharp-systemexception', 'https://www.javatpoint.com/c-sharp-user-defined-exceptions', 'https://www.javatpoint.com/c-sharp-systemexception', 'https://www.javatpoint.com/c-sharp-user-defined-exceptions', 'https://www.javatpoint.com/c-sharp-systemexception']",[],[],"['C# Checked ', 'C# Unchecked ']",['C# Checked Example using checked'],[],"['The checked keyword is used to explicitly check overflow and conversion of integral type values at compile time.', ""Let's first see an example that does not use checked keyword."", 'See, the above program produces the wrong result and does not throw any overflow exception. ', 'This program throws an exception and stops program execution.']",['The Unchecked keyword ignores the integral type arithmetic exceptions. It does not check explicitly and produce result that may be truncated or wrong.'],[],"['using System;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'int val = int.MaxValue;', 'Console.WriteLine(val + 2);', '}', 'using System;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'checked', '{', 'int val = int.MaxValue;', 'Console.WriteLine(val + 2);', '}', '}', 'using System;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'unchecked', '{', 'int val = int.MaxValue;', 'Console.WriteLine(val + 2);', '}', '}']","['-2147483647', 'Unhandled Exception: System.OverflowException: Arithmetic operation resulted in an overflow.', '-2147483647']",[],[]
60,['C# SystemException class'],"['The SystemException is a predefined exception class in C#. It is used to handle system related exceptions. It works as base class for system exception namespace. It has various child classes like: ValidationException, ArgumentException, ArithmeticException, DataException, StackOverflowException etc.']","['https://www.javatpoint.com/c-sharp-filestream', 'https://www.javatpoint.com/c-sharp-checked-and-unchecked', 'https://www.javatpoint.com/c-sharp-filestream', 'https://www.javatpoint.com/c-sharp-checked-and-unchecked', 'https://www.javatpoint.com/c-sharp-filestream']",[],[],[],"['C# SystemException Signature', 'C# SystemException Constructors', 'C# SystemException Properties', 'C# SystemException Methods', 'C# SystemException Example']",[],"['It consists of rich constructors, properties and methods that we have tabled below.', 'System.IndexOutOfRangeException: Index was outside the bounds of the array.']","['This class can be used to handle exception of subclasses. Here, in the following program, program throws an IndexOutOfRangeException that is subclass of SystemException class.']",[],"['[SerializableAttribute]', '[ComVisibleAttribute(true)]', 'public class SystemException : Exception', 'using System;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'try', '{', 'int[] arr = new int[5];', 'arr[10] = 25;', '}', 'catch (SystemException e)', '{', 'Console.WriteLine(e);', '}', '}']",[],"['Constructors|||Description&&&SystemException()|||It is used to initialize a new instance of the SystemException class.&&&SystemException(SerializationInfo,StreamingContext)|||It is used to initialize a new instance of the SystemException class with serialized data.&&&SystemException(String)|||It is used to initialize a new instance of the SystemException class with a specified error message.&&&SystemException(String,Exception)|||It is used to initialize a new instance of the SystemException class with a specified error message and a reference to the inner exception that is the cause of this exception.', 'Property|||Description&&&Data|||It is used to get a collection of key/value pairs that provide additional user-defined information about the exception.&&&HelpLink|||It is used to get or set a link to the help file associated with this exception.&&&HResult|||It is used to get or set HRESULT, a coded numerical value that is assigned to a specific exception.&&&InnerException|||It is used to get the Exception instance that caused the current exception.&&&Message|||It is used to get a message that describes the current exception.&&&Source|||It is used to get or set the name of the application that causes the error.&&&StackTrace|||It is used to get a string representation of the immediate frames on the call stack.&&&TargetSite|||It is used to get the method that throws the current exception.', 'Method|||Description&&&Equals(Object)|||It is used to check that the specified object is equal to the current object or not.&&&Finalize()|||It is used to free resources and perform cleanup operations.&&&GetBaseException()|||It is used to get root exception.&&&GetHashCode()|||It is used to get hash code.&&&GetObjectData(SerializationInfo,StreamingContext)|||It is used to get object data.&&&GetType()|||It is used to get the runtime type of the current instance.&&&MemberwiseClone()|||It is used to create a shallow copy of the current Object.&&&ToString()|||It is used to create and return a string representation of the current exception.']",[]
61,['C# FileStream'],"['C# FileStream class provides a stream for file operation. It can be used to perform synchronous and asynchronous read and write operations. By the help of FileStream class, we can easily read and write data into file.']","['https://www.javatpoint.com/c-sharp-streamwriter', 'https://www.javatpoint.com/c-sharp-user-defined-exceptions', 'https://www.javatpoint.com/c-sharp-streamwriter', 'https://www.javatpoint.com/c-sharp-user-defined-exceptions', 'https://www.javatpoint.com/c-sharp-streamwriter']",[],[],[],"['C# FileStream example: writing single byte into file', 'C# FileStream example: writing multiple bytes into file', 'C# FileStream example: reading all bytes from file']",[],"[""Let's see another example to write multiple bytes of data into file using loop.""]","[""Let's see the simple example of FileStream class to write single byte of data into file. Here, we are using OpenOrCreate file mode which can be used for read and write operations."", ""Let's see the example of FileStream class to read data from the file. Here, ReadByte() method of FileStream class returns single byte. To all read all the bytes, you need to use loop.""]",[],"['using System;', 'using System.IO;', 'public class FileStreamExample', 'public static void Main(string[] args)', 'FileStream f = new FileStream(""e:\\\\b.txt"", FileMode.OpenOrCreate);//creating file stream', 'f.WriteByte(65);//writing byte into stream', 'f.Close();//closing stream', 'using System;', 'using System.IO;', 'public class FileStreamExample', 'public static void Main(string[] args)', 'FileStream f = new FileStream(""e:\\\\b.txt"", FileMode.OpenOrCreate);', 'for (int i = 65; i <= 90; i++)', '{', 'f.WriteByte((byte)i);', '}', 'f.Close();', 'using System;', 'using System.IO;', 'public class FileStreamExample', 'public static void Main(string[] args)', 'FileStream f = new FileStream(""e:\\\\b.txt"", FileMode.OpenOrCreate);', 'int i = 0;', 'while ((i = f.ReadByte()) != -1)', '{', 'Console.Write((char)i);', '}', 'f.Close();']","['A', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']",[],[]
62,['C# StreamWriter'],['C# StreamWriter class is used to write characters to a stream in specific encoding. It inherits TextWriter class. It provides overloaded write() and writeln() methods to write data into file.'],"['https://www.javatpoint.com/c-sharp-streamreader', 'https://www.javatpoint.com/c-sharp-filestream', 'https://www.javatpoint.com/c-sharp-streamreader', 'https://www.javatpoint.com/c-sharp-filestream', 'https://www.javatpoint.com/c-sharp-streamreader']",[],[],[],['C# StreamWriter example'],[],"[""Let's see a simple example of StreamWriter class which writes a single line of data into the file."", 'Now open the file, you will see the text ""hello c#"" in output.txt file.', 'output.txt:']",[],[],"['using System;', 'using System.IO;', 'public class StreamWriterExample', 'public static void Main(string[] args)', 'FileStream f = new FileStream(""e:\\\\output.txt"", FileMode.Create);', 'StreamWriter s = new StreamWriter(f);', 's.WriteLine(""hello c#"");', 's.Close();', 'f.Close();', 'Console.WriteLine(""File created successfully..."");']","['File created successfully...', 'hello c#']",[],[]
63,['C# StreamReader'],['C# StreamReader class is used to read string from the stream. It inherits TextReader class. It provides Read() and ReadLine() methods to read data from the stream.'],"['https://www.javatpoint.com/c-sharp-textwriter', 'https://www.javatpoint.com/c-sharp-streamwriter', 'https://www.javatpoint.com/c-sharp-textwriter', 'https://www.javatpoint.com/c-sharp-streamwriter', 'https://www.javatpoint.com/c-sharp-textwriter']",[],[],[],"['C# StreamReader example to read one line', 'C# StreamReader example to read all lines']",[],"[""Let's see the simple example of StreamReader class that reads a single line of data from the file.""]",[],[],"['using System;', 'using System.IO;', 'public class StreamReaderExample', 'public static void Main(string[] args)', 'FileStream f = new FileStream(""e:\\\\output.txt"", FileMode.OpenOrCreate);', 'StreamReader s = new StreamReader(f);', 'string line=s.ReadLine();', 'Console.WriteLine(line);', 's.Close();', 'f.Close();', 'using System;', 'using System.IO;', 'public class StreamReaderExample', 'public static void Main(string[] args)', 'FileStream f = new FileStream(""e:\\\\a.txt"", FileMode.OpenOrCreate);', 'StreamReader s = new StreamReader(f);', 'string line = """";', 'while ((line = s.ReadLine()) != null)', '{', 'Console.WriteLine(line);', '}', 's.Close();', 'f.Close();']","['Hello C#', 'Hello C#\nthis is file handling']",[],[]
64,['C# TextWriter'],['C# TextWriter class is an abstract class. It is used to write text or sequential series of characters into file. It is found in System.IO namespace.'],"['https://www.javatpoint.com/c-sharp-textreader', 'https://www.javatpoint.com/c-sharp-streamreader', 'https://www.javatpoint.com/c-sharp-textreader', 'https://www.javatpoint.com/c-sharp-streamreader', 'https://www.javatpoint.com/c-sharp-textreader']",[],[],[],['C# TextWriter Example'],[],"[""Let's see the simple example of TextWriter class to write two lines data.""]",[],[],"['using System;', 'using System.IO;', 'namespace TextWriterExample', 'class Program', 'static void Main(string[] args)', '{', 'using (TextWriter writer = File.CreateText(""e:\\\\f.txt""))', '{', 'writer.WriteLine(""Hello C#"");', 'writer.WriteLine(""C# File Handling by JavaTpoint"");', '}', 'Console.WriteLine(""Data written successfully..."");', '}']","['Data written successfully...', 'Hello C#\nC# File Handling by JavaTpoint']",[],[]
65,['C# TextReader'],['C# TextReader class is found in System.IO namespace. It represents a reader that can be used to read text or sequential series of characters.'],"['https://www.javatpoint.com/c-sharp-binarywriter', 'https://www.javatpoint.com/c-sharp-textwriter', 'https://www.javatpoint.com/c-sharp-binarywriter', 'https://www.javatpoint.com/c-sharp-textwriter', 'https://www.javatpoint.com/c-sharp-binarywriter']",[],[],[],"['C# TextReader Example: Read All Data', 'C# TextReader Example: Read One Line']",[],"[""Let's see the simple example of TextReader class that reads data till the end of file."", ""Let's see the simple example of TextReader class that reads single line from the file.""]",[],[],"['using System;', 'using System.IO;', 'namespace TextReaderExample', 'class Program', 'static void Main(string[] args)', '{', 'using (TextReader tr = File.OpenText(""e:\\\\f.txt""))', '{', 'Console.WriteLine(tr.ReadToEnd());', '}', '}', 'using System;', 'using System.IO;', 'namespace TextReaderExample', 'class Program', 'static void Main(string[] args)', '{', 'using (TextReader tr = File.OpenText(""e:\\\\f.txt""))', '{', 'Console.WriteLine(tr.ReadLine());', '}', '}']","['Hello C#\nC# File Handling by JavaTpoint', 'Hello C#']",[],[]
66,['C# BinaryWriter'],['C# BinaryWriter class is used to write binary information into stream. It is found in System.IO namespace. It also supports writing string in specific encoding.'],"['https://www.javatpoint.com/c-sharp-binaryreader', 'https://www.javatpoint.com/c-sharp-textwriter', 'https://www.javatpoint.com/c-sharp-binaryreader', 'https://www.javatpoint.com/c-sharp-textreader', 'https://www.javatpoint.com/c-sharp-binaryreader']",[],[],[],['C# BinaryWriter Example'],[],"[""Let's see the simple example of BinaryWriter class which writes data into dat file.""]",[],[],"['using System;', 'using System.IO;', 'namespace BinaryWriterExample', 'class Program', 'static void Main(string[] args)', '{', 'string fileName = ""e:\\\\binaryfile.dat"";', 'using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))', '{', 'writer.Write(2.5);', 'writer.Write(""this is string data"");', 'writer.Write(true);', '}', 'Console.WriteLine(""Data written successfully..."");', '}']",['Data written successfully...'],[],[]
67,['C# BinaryReader'],['C# BinaryReader class is used to read binary information from stream. It is found in System.IO namespace. It also supports reading string in specific encoding.'],"['https://www.javatpoint.com/c-sharp-stringwriter', 'https://www.javatpoint.com/c-sharp-binarywriter', 'https://www.javatpoint.com/c-sharp-stringwriter', 'https://www.javatpoint.com/c-sharp-binaryreader', 'https://www.javatpoint.com/c-sharp-stringwriter']",[],[],[],['C# BinaryReader Example'],[],"[""Let's see the simple example of BinaryReader class which reads data from dat file.""]",[],[],"['using System;', 'using System.IO;', 'namespace BinaryWriterExample', 'class Program', 'static void Main(string[] args)', '{', 'WriteBinaryFile();', 'ReadBinaryFile();', 'Console.ReadKey();', '}', 'static void WriteBinaryFile()', '{', 'using (BinaryWriter writer = new BinaryWriter(File.Open(""e:\\\\binaryfile.dat"", FileMode.Create)))', '{', '', 'writer.Write(12.5);', 'writer.Write(""this is string data"");', 'writer.Write(true);', '}', '}', 'static void ReadBinaryFile()', '{', 'using (BinaryReader reader = new BinaryReader(File.Open(""e:\\\\binaryfile.dat"", FileMode.Open)))', '{', 'Console.WriteLine(""Double Value : "" + reader.ReadDouble());', 'Console.WriteLine(""String Value : "" + reader.ReadString());', 'Console.WriteLine(""Boolean Value : "" + reader.ReadBoolean());', '}', '}']",['Double Value : 12.5\nString Value : this is string data\nBoolean Value : true'],[],[]
68,['C# StringWriter Class'],['This class is used to write and deal with string data rather than files. It is derived class of TextWriter class. The string data written by StringWriter class is stored into StringBuilder. '],"['https://www.javatpoint.com/c-sharp-stringreader', 'https://www.javatpoint.com/c-sharp-binaryreader', 'https://www.javatpoint.com/c-sharp-stringreader', 'https://www.javatpoint.com/c-sharp-binaryreader', 'https://www.javatpoint.com/c-sharp-stringreader']",[],[],[],"['StringWriter Class Signature', 'C# StringWriter Constructors', 'C# StringWriter Properties', 'C# StringWriter Methods', 'C# StringWriter Example']",[],['The purpose of this class is to manipulate string and save result into the StringBuilder.'],"['In the following program, we are using StringWriter class to write string information to the StringBuilder class. The StringReader class is used to read written information to the StringBuilder.']",[],"['[SerializableAttribute]', '[ComVisibleAttribute(true)]', 'public class StringWriter : TextWriter', 'using System;', 'using System.IO;', 'using System.Text;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'string text = ""Hello, Welcome to the javatpoint \\n"" +', '""It is nice site. \\n"" +', '""It provides technical tutorials"";', 'StringBuilder sb = new StringBuilder();', 'StringWriter writer = new StringWriter(sb);', 'writer.WriteLine(text);', 'writer.Flush();', 'writer.Close();', 'StringReader reader = new StringReader(sb.ToString());', 'while (reader.Peek() > -1)', '{', 'Console.WriteLine(reader.ReadLine());', '}', '}']","['Hello, Welcome to the javatpoint\nIt is nice site.\nIt provides technical tutorials']","['Constructors|||Description&&&StringWriter()|||It is used to initialize a new instance of the StringWriter class.&&&StringWriter(IFormatProvider)|||It is used to initialize a new instance of the StringWriter class with the specified format control.&&&StringWriter(StringBuilder)|||It is used to initialize a new instance of the StringWriter class that writes to the specified StringBuilder.&&&StringWriter(StringBuilder,?IFormatProvider)|||It is used to initialize a new instance of the StringWriter class that writes to the specified StringBuilder and has the specified format provider.', 'Property|||Description&&&Encoding|||It is used to get the Encoding in which the output is written.&&&FormatProvider|||It is used to get an object that controls formatting.&&&NewLine|||It is used to get or set the line terminator string used by the current TextWriter.', 'Methods|||Description&&&Close()|||It is used to close the current StringWriter and the underlying stream. &&&Dispose()|||It is used to release all resources used by the TextWriter object.&&&Equals(Object)|||It is used to determine whether the specified object is equal to the current object or not. &&&Finalize()|||It allows an object to try to free resources and perform other cleanup operations. &&&GetHashCode()|||It is used to serve as the default hash function.&&&GetStringBuilder()|||It returns the underlying StringBuilder.&&&ToString()|||It returns a string containing the characters written to the current StringWriter.&&&WriteAsync(String)|||It is used to write a string to the current string asynchronously.&&&Write(Boolean)|||It is used to write the text representation of a Boolean value to the string.&&&Write(String)|||It is used to write a string to the current string. &&&WriteLine(String)|||It is used to write a string followed by a line terminator to the string or stream.&&&WriteLineAsync(String)|||Writes a string followed by a line terminator asynchronously to the current string.(Overrides TextWriter.WriteLineAsync(String).)']",[]
69,['C# StringReader Class'],['StringReader class is used to read data written by the StringWriter class. It is subclass of TextReader class. It enables us to read a string synchronously or asynchronously. It provides constructors and methods to perform read operations.'],"['https://www.javatpoint.com/c-sharp-fileinfo', 'https://www.javatpoint.com/c-sharp-stringwriter', 'https://www.javatpoint.com/c-sharp-fileinfo', 'https://www.javatpoint.com/c-sharp-stringwriter', 'https://www.javatpoint.com/c-sharp-fileinfo']",[],[],[],"['C# StringReader Signature', 'C# StringReader Constructors', 'C# StringReader Methods', 'C# StringReader Example']",[],"['StringReader has the following constructors.', 'Following are the methods of StringReader class.']","['In the following example, StringWriter class is used to write the string information and StringReader class is used to read the string, written by the StringWriter class. ']",[],"['[SerializableAttribute]', '[ComVisibleAttribute(true)]', 'public class StringReader : TextReader', 'using System;', 'using System.IO;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'StringWriter str = new StringWriter();', 'str.WriteLine(""Hello, this message is read by StringReader class"");', 'str.Close();', 'StringReader reader = new StringReader(str.ToString());', 'while (reader.Peek() > -1)', '{', 'Console.WriteLine(reader.ReadLine());', '}', '}']","['Hello, this message is read by StringReader class']","['Constructors|||Description&&&StringReader(String)|||Initializes a new instance of the StringReader class that reads from the specified string.', 'Method|||Description&&&Close()|||It is used to close the StringReader. &&&Dispose()|||It is used to release all resources used by the TextReader object.&&&Equals(Object)|||It determines whether the specified object is equal to the current object or not. &&&Finalize()|||It allows an object to try to free resources and perform other cleanup operations. &&&GetHashCode()|||It serves as the default hash function.&&&GetType()|||It is used to get the type of the current instance.&&&Peek()|||It is used to return the next available character but does not consume it. &&&Read()|||It is used to read the next character from the input string.&&&ReadLine()|||It is used to read a line of characters from the current string. &&&ReadLineAsync()|||It is used to read a line of characters asynchronously from the current string. &&&ReadToEnd()|||It is used to read all the characters from the current position to the end of the string.&&&ReadToEndAsync()|||It is used to read all the characters from the current position to the end of the string asynchronously. &&&ToString()|||It is used to return a string that represents the current object. ']",[]
70,['C# FileInfo Class'],"['The FileInfo class is used to deal with file and its operations in C#. It provides properties and methods that are used to create, delete and read file. It uses StreamWriter class to write data to the file. It is a part of System.IO namespace.']","['https://www.javatpoint.com/c-sharp-directoryinfo', 'https://www.javatpoint.com/c-sharp-stringreader', 'https://www.javatpoint.com/c-sharp-directoryinfo', 'https://www.javatpoint.com/c-sharp-stringreader', 'https://www.javatpoint.com/c-sharp-directoryinfo']","['https://static.javatpoint.com/csharp/images/c-sharp-file-info1.png', 'https://static.javatpoint.com/csharp/images/c-sharp-file-info2.png', 'https://static.javatpoint.com/csharp/images/c-sharp-file-info3.png']",[],[],"['C# FileInfo Class Signature', 'C# FileInfo Constructors', 'C# FileInfo Properties', 'C# FileInfo Methods', 'C# FileInfo Example: Creating a File', 'C# FileInfo Example: writing to the file', 'C# FileInfo Example: Reading text from the file']",[],"['The following table contains constructors for the FileInfo class.', 'The following table contains properties of the FileInfo class.', 'The following table contains methods of the FileInfo class.', 'We can see inside the F drive a file abc.txt is created. A screenshot is given below.']",[],[],"['[SerializableAttribute]', '[ComVisibleAttribute(true)]', 'public sealed class FileInfo : FileSystemInfo', 'using System;', 'using System.IO;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'try', '{', 'string loc = ""F:\\\\abc.txt"";', 'FileInfo file = new FileInfo(loc);', 'file.Create();', 'Console.WriteLine(""File is created Successfuly"");', '}catch(IOException e)', '{', 'Console.WriteLine(""Something went wrong: ""+e);', '}', '}', 'using System;', 'using System.IO;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'try', '{', 'string loc = ""F:\\\\abc.txt"";', 'FileInfo file = new FileInfo(loc);', 'StreamWriter sw = file.CreateText();', 'sw.WriteLine(""This text is written to the file by using StreamWriter class."");', 'sw.Close();', '}catch(IOException e)', '{', 'Console.WriteLine(""Something went wrong: ""+e);', '}', '}', 'using System;', 'using System.IO;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'try', '{', 'string loc = ""F:\\\\abc.txt"";', 'FileInfo file = new FileInfo(loc);', 'StreamReader sr = file.OpenText();', 'string data = """";', 'while ((data = sr.ReadLine()) != null)', '{', 'Console.WriteLine(data);', '}', '}', 'catch (IOException e)', '{', 'Console.WriteLine(""Something went wrong: "" + e);', '}', '}']",['File is created Successfully'],"['Constructor|||Description&&&FileInfo(String)|||It is used to initialize a new instance of the FileInfo class which acts as a wrapper for a file path.', ""Properties|||Description&&&Attributes|||It is used to get or set the attributes for the current file or directory. &&&CreationTime|||It is used to get or set the creation time of the current file or directory. &&&Directory|||It is used to get an instance of the parent directory.&&&DirectoryName|||It is used to get a string representing the directory's full path.&&&Exists|||It is used to get a value indicating whether a file exists. &&&FullName|||It is used to get the full path of the directory or file. &&&IsReadOnly|||It is used to get or set a value that determines if the current file is read only.&&&LastAccessTime|||It is used to get or set the time from current file or directory was last accessed.&&&Length|||It is used to get the size in bytes of the current file.&&&Name|||It is used to get the name of the file. "", 'Method|||Description&&&AppendText()|||It is used to create a StreamWriter that appends text to the file represented by this instance of the FileInfo.&&&CopyTo(String)|||It is used to copy an existing file to a new file.&&&Create()|||It is used to create a file.&&&CreateText()|||It is used to create a StreamWriter that writes a new text file.&&&Decrypt()|||It is used to decrypt a file that was encrypted by the current account using the Encrypt method.&&&Delete()|||It is used to permanently delete a file. &&&Encrypt()|||It is used to encrypt a file so that only the account used to encrypt the file can decrypt it.&&&GetAccessControl()|||It is used to get a FileSecurity object that encapsulates the access control list (ACL) entries. &&&MoveTo(String)|||It is used to move a specified file to a new specified location.&&&Open(FileMode)|||It is used to open a file in the specified mode.&&&OpenRead()|||It is used to create a read-only FileStream.&&&OpenText()|||It is used to create a StreamReader with UTF8 encoding that reads from an existing text file.&&&OpenWrite()|||It is used to create a write-only FileStream.&&&Refresh()|||It is used to refresh the state of the object. &&&Replace(String,String)|||It is used to replace the contents of a specified file with the file described by the current FileInfo object. &&&ToString()|||It is used to return the path as a string. ']",[]
71,['C# DirectoryInfo Class'],"['DirectoryInfo class is a part of System.IO namespace. It is used to create, delete and move directory. It provides methods to perform operations related to directory and subdirectory. It is a sealed class so, we cannot inherit it.']","['https://www.javatpoint.com/c-sharp-serialization', 'https://www.javatpoint.com/c-sharp-fileinfo', 'https://www.javatpoint.com/c-sharp-serialization', 'https://www.javatpoint.com/c-sharp-fileinfo', 'https://www.javatpoint.com/c-sharp-serialization']",['https://static.javatpoint.com/csharp/images/c-sharp-directory-info1.png'],[],[],"['C# DirectoryInfo Syntax', 'C# DirectoryInfo Constructors', 'C# DirectoryInfo Properties', 'C# DirectoryInfo Methods', 'C# DirectoryInfo Example', 'C# DirectoryInfo Example: Deleting Directory']",[],"['The DirectoryInfo class provides constructors, methods and properties that are listed below.', 'The following table contains the constructors for the DirectoryInfo class.', 'The following table contains the properties of the DirectoryInfo class.', 'The following table contains the methods of the DirectoryInfo class.', 'In the following example, we are creating a javatpoint directory by specifying the directory path.', 'In below screenshot, we can see that a directory is created.', 'It throws a System.IO.DirectoryNotFoundException exception if the specified directory not present at the location.']","['The DirectoryInfo class also provides a delete method to delete created directory. In the following program, we are deleting a directory that we created in previous program.']",[],"['[SerializableAttribute]', '[ComVisibleAttribute(true)]', 'public sealed class DirectoryInfo : FileSystemInfo', 'using System;', 'using System.IO;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'DirectoryInfo directory = new DirectoryInfo(@""F:\\javatpoint"");', 'try', '{', 'if (directory.Exists)', '{', 'Console.WriteLine(""Directory already exist."");', 'return;', '}', 'directory.Create();', 'Console.WriteLine(""The directory is created successfully."");', '}', 'catch (Exception e)', '{', 'Console.WriteLine(""Directory not created: {0}"", e.ToString());', '}', '}', 'using System;', 'using System.IO;', 'namespace CSharpProgram', 'class Program', 'static void Main(string[] args)', '{', 'DirectoryInfo directory = new DirectoryInfo(@""F:\\javatpoint"");', 'try', '{', 'directory.Delete();', 'Console.WriteLine(""The directory is deleted successfully."");', '}', 'catch (Exception e)', '{', 'Console.WriteLine(""Something went wrong: {0}"", e.ToString());', '}', '}']","['The directory is created successfully.', 'The directory is deleted successfully.']","['Constructor|||Description&&&DirectoryInfo(String)|||It is used to initialize a new instance of the DirectoryInfo class on the specified path.', 'Property|||Description&&&Attributes|||It is used to get or set the attributes for the current file or directory. &&&CreationTime|||It is used to get or set the creation time of the current file or directory. &&&CreationTimeUtc|||It is used to get or set creation time, in coordinated universal time (UTC). &&&Exists|||It is used to get a value indicating whether the directory exists. &&&Extension|||It is used to get the string representing the extension part of the file. &&&FullName|||It is used to get the full path of the directory. &&&LastAccessTime|||It is used to get or set the time the current file or directory was last accessed. &&&LastAccessTimeUtc|||It is used to get or set the time, in coordinated universal time (UTC) that the current file or directory was last accessed. &&&LastWriteTime|||It is used to get or set the time when the current file or directory was last written.&&&LastWriteTimeUtc|||It is used to get or set the time, in coordinated universal time (UTC), when the current file or directory was last written. &&&Name|||It is used to get the name of this DirectoryInfo instance. &&&Parent|||It is used to get the parent directory of a specified subdirectory.&&&Root|||It is used to get the root portion of the directory.', 'Method|||Description&&&Create()|||It is used to create a directory.&&&Create(DirectorySecurity)|||It is used to create a directory using a DirectorySecurity object.&&&CreateObjRef(Type)|||It is used to create an object that contains all the relevant information required to generate a proxy used to communicate with a remote object. &&&CreateSubdirectory(String)|||It is used to create a subdirectory or subdirectories on the specified path. &&&CreateSubdirectory(String,DirectorySecurity)|||It is used to create a subdirectory or subdirectories on the specified path with the specified security.&&&Delete()|||It is used to delete this DirectoryInfo if it is empty. &&&Delete(Boolean)|||It is used to delete this instance of a DirectoryInfo, specifying whether to delete subdirectories and files.&&&EnumerateDirectories()|||It returns an enumerable collection of directory information in the current directory.&&&EnumerateFiles()|||It returns an enumerable collection of file information in the current directory.&&&GetAccessControl()|||It is used to get a DirectorySecurity object that encapsulates the access control list (ACL) entries for the directory.&&&GetDirectories()|||It returns the subdirectories of the current directory.&&&GetFiles()|||It returns a file list from the current directory.&&&GetType()|||It is used to get the Type of the current instance. &&&MoveTo(String)|||It is used to move a DirectoryInfo instance and its contents to a new path.&&&Refresh()|||It is used to refresh the state of the object. &&&SetAccessControl(DirectorySecurity)|||It is used to set access control list (ACL) entries described by a DirectorySecurity object. &&&ToString()|||It returns the original path that was passed by the user.']",[]
72,['C# Serialization'],"['In C#, serialization is the process of converting object into byte stream so that it can be saved to memory, file or database. The reverse process of serialization is called deserialization.']","['https://www.javatpoint.com/c-sharp-deserialization', 'https://www.javatpoint.com/c-sharp-streamreader', 'https://www.javatpoint.com/c-sharp-deserialization', 'https://www.javatpoint.com/c-sharp-streamreader', 'https://www.javatpoint.com/c-sharp-deserialization']",['https://static.javatpoint.com/csharp/images/c-sharp-serialization.png'],[],"['C# SerializableAttribute', 'C# Serialization example']",[],[],"['Serialization is internally used in remote applications.', 'As you can see, the serialized data is stored in the file. To get the data, you need to perform deserialization.']","[""To serialize the object, you need to apply SerializableAttribute attribute to the type. If you don't apply SerializableAttribute attribute to the type, SerializationException exception is thrown at runtime."", ""Let's see the simple example of serialization in C# where we are serializing the object of Student class. Here, we are going to use BinaryFormatter.Serialize(stream, reference) method to serialize the object.""]",[],"['using System;', 'using System.IO;', 'using System.Runtime.Serialization.Formatters.Binary;', '[Serializable]', 'class Student', 'int rollno;', 'string name;', 'public Student(int rollno, string name)', 'this.rollno = rollno;', 'this.name = name;', 'public class SerializeExample', 'public static void Main(string[] args)', 'FileStream stream = new FileStream(""e:\\\\sss.txt"", FileMode.OpenOrCreate);', 'BinaryFormatter formatter=new BinaryFormatter();', '', 'Student s = new Student(101, ""sonoo"");', 'formatter.Serialize(stream, s);', 'stream.Close();']","['JConsoleApplication1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null Student rollnoname e sonoo']",[],[]
73,['C# Deserialization'],"['In C# programming, deserialization is the reverse process of serialization. It means you can read the object from byte stream. Here, we are going to use BinaryFormatter.Deserialize(stream) method to deserialize the stream.']","['https://www.javatpoint.com/c-sharp-system-io', 'https://www.javatpoint.com/c-sharp-serialization', 'https://www.javatpoint.com/c-sharp-system-io', 'https://www.javatpoint.com/c-sharp-serialization', 'https://www.javatpoint.com/c-sharp-system-io']",['https://static.javatpoint.com/csharp/images/c-sharp-deserialization.png'],[],[],['C# Deserialization Example'],[],"[""Let's see the simple example of deserialization in C#.""]",[],[],"['using System;', 'using System.IO;', 'using System.Runtime.Serialization.Formatters.Binary;', '[Serializable]', 'class Student', 'public int rollno;', 'public string name;', 'public Student(int rollno, string name)', 'this.rollno = rollno;', 'this.name = name;', 'public class DeserializeExample', 'public static void Main(string[] args)', 'FileStream stream = new FileStream(""e:\\\\sss.txt"", FileMode.OpenOrCreate);', 'BinaryFormatter formatter=new BinaryFormatter();', 'Student s=(Student)formatter.Deserialize(stream);', 'Console.WriteLine(""Rollno: "" + s.rollno);', 'Console.WriteLine(""Name: "" + s.name);', 'stream.Close();']",['Rollno: 101\nName: sonoo'],[],[]
74,['C# System.IO Namespace'],"['The System.IO namespace consists of IO related classes, structures, delegates and enumerations. These classes can be used to reads and write data to files or data streams. It also contains classes for file and directory support.']","['https://www.javatpoint.com/c-sharp-collections', 'https://www.javatpoint.com/c-sharp-deserialization', 'https://www.javatpoint.com/c-sharp-collections', 'https://www.javatpoint.com/c-sharp-deserialization', 'https://www.javatpoint.com/c-sharp-collections']",[],[],[],"['C# System.IO Namespace Classes', 'System.IO Namespace Structures', 'System.IO Namespace Delegates', 'System.IO Namespace Enumerations']",[],"['Following are the classes reside into System.IO namespace.', 'Following are the structures reside into the System.IO Namespace.', 'The System.IO Namespace contains the following delegates.', 'The following table contains the enumerations reside into the System.IO namespace.']",[],[],[],[],"['Class|||Description&&&BinaryReader|||It is used to read primitive data types as binary values in a specific encoding.&&&BinaryWriter|||It is used to write primitive types in binary to a stream.&&&BufferedStream|||It is used to add a buffering layer to read and write operations on another stream. It is a sealed class. &&&Directory|||It is used to expose static methods for creating, moving and enumerating through directories and subdirectories. It is a sealed class.&&&DirectoryInfo|||It is used to expose instance methods for creating, moving and enumerating through directories and subdirectories. It is a sealed class.&&&DirectoryNotFoundException|||It is used to handle exception related to the file or directory cannot be found.&&&DriveInfo|||It is used to access the information on a drive.&&&DriveNotFoundException|||It is used to handle drive not found exception.&&&EndOfStreamException|||It is used to handle end of stream exception. &&&ErrorEventArgs|||It provides data for the FileSystemWatcher.Error event.&&&File|||This class provides static methods for the creation, copying, deletion, moving and opening of a single file.&&&FileFormatException|||It is used to handle file format exception. &&&FileInfo|||It is used to provide properties and instance methods for the creation, copying, deletion, moving and opening of files. &&&FileLoadException|||It is used to handle file load exception. &&&FileNotFoundException|||It is used to handle file load exception. &&&FileNotFoundException|||It is used to handle file not found exception. &&&FileStream|||It provides a Stream for a file, supporting both synchronous and asynchronous read and write operations.&&&FileSystemEventArgs|||It provides data for the directory events.&&&FileSystemInfo|||It provides the base class for both FileInfo and DirectoryInfo objects.&&&FileSystemWatcher|||It listens to the file system change notifications and raises events when a directory or file in a directory, changes.&&&InternalBufferOverflowException|||This class is used to handle internal buffer overflow exception. &&&InvalidDataException|||It is used to handle invalid data exception.&&&IODescriptionAttribute|||It sets the description visual designers can display when referencing an event, extender or property.&&&IOException|||It is an exception class that handles I/O errors. &&&MemoryStream|||It is used to create a stream whose backing store is memory.&&&Path|||It performs operations on String instances that contain file or directory path information.&&&PathTooLongException|||It is an exception class and used to handle path too long exception. &&&PipeException|||This exception class is used to handle pipe related exception. &&&RenamedEventArgs|||It is used to provide data for the Renamed event.&&&Stream|||It is used to provide a generic view of a sequence of bytes. It is an abstract class.&&&StreamReader|||It is used to implement a TextReader that reads characters from a byte stream.&&&StringReader|||It is used to implement a TextReader that reads from a string.&&&StringWriter|||It is used to implement a TextWriter for writing information to a string. The information is stored in an underlying StringBuilder.&&&TextReader|||This class is used to represent a reader that can read a sequential series of characters.&&&TextWriter|||This class is used to represent a writer that can write a sequential series of characters. &&&UnmanagedMemoryAccessor|||It is used to provide random access to unmanaged blocks of memory from managed code.&&&UnmanagedMemoryStream|||It is used to get access to unmanaged blocks of memory from managed code.', 'Structure|||Description&&&WaitForChangedResult|||It contains information on the change that occurred.', 'Delegates|||Description&&&ErrorEventHandler|||It represents the method that will handle the Error event of a FileSystemWatcher object.&&&FileSystemEventHandler|||It represents the method that will handle the Changed, Created or Deleted event of a FileSystemWatcher class.&&&RenamedEventHandler|||It represents the method that will handle the renamed event of a FileSystemWatcher class.', 'Enumeration|||Description&&&DriveType|||It is used to define constants for drive types including CDRom, Fixed, Network etc.&&&FileAccess|||It is used to define constants for read, write or read/write access to a file.&&&FileAttributes|||It is used to provide attributes for files and directories.&&&FileMode|||It is used to specify how the operating system should open a file.&&&FileOptions|||It is used to represents advanced options for creating a FileStream object.&&&FileShare|||It is used to contain constants for controlling the kind of access other FileStream objects can have to the same file.&&&HandleInheritability|||It specifies whether the underlying handle is inheritable by child processes.&&&NotifyFilters|||It is used to specify changes to watch for in a file or folder.&&&SearchOption|||It is used to specify whether to search the current directory or the current directory and all subdirectories. &&&SeekOrigin|||It is used to specify the position in a stream to use for seeking.&&&WatcherChangeTypes|||It changes that might occur to a file or directory.']",[]
75,['C# Collections'],"['In C#, collection represents group of objects. By the help of collections, we can perform various operations on objects such as']","['https://www.javatpoint.com/c-sharp-list', 'https://www.javatpoint.com/c-sharp-deserialization', 'https://www.javatpoint.com/c-sharp-list', 'https://www.javatpoint.com/c-sharp-deserialization', 'https://www.javatpoint.com/c-sharp-list']",[],[],['Types of Collections in C#'],"['1) System.Collections.Generic classes', '2) System.Collections classes', '3) System.Collections.Concurrent classes']",[],"['In sort, all the data structure work can be performed by C# collections.', 'There are 3 ways to work with collections. The three namespaces are given below:', 'The System.Collections.Generic namespace has following classes:', 'These classes are legacy. It is suggested now to use System.Collections.Generic classes. The System.Collections namespace has following classes:', 'The System.Collections.Concurrent namespace has following classes:']","['We can store objects in array or collection. Collection has advantage over array. Array has size limit but objects stored in collection can grow or shrink dynamically.', 'The System.Collections.Concurrent namespace provides classes for thread-safe operations. Now multiple threads will not create problem for accessing the collection items.']",[],[],[],[],"['|||store object|||update object|||delete object|||retrieve object|||search object, and|||sort object||||||System.Collections.Generic classes|||System.Collections classes (Now deprecated)|||System.Collections.Concurrent classes||||||List|||Stack|||Queue|||LinkedList|||HashSet|||SortedSet|||Dictionary|||SortedDictionary|||SortedList||||||ArrayList|||Stack|||Queue|||Hashtable||||||BlockingCollection|||ConcurrentBag|||ConcurrentStack|||ConcurrentQueue|||ConcurrentDictionary|||Partitioner|||Partitioner|||OrderablePartitioner|||']"
76,['C# List<T>'],['C# List<T> class is used to store and fetch elements. It can have duplicate elements. It is found in System.Collections.Generic namespace.'],"['https://www.javatpoint.com/c-sharp-hashset', 'https://www.javatpoint.com/c-sharp-collections', 'https://www.javatpoint.com/c-sharp-hashset', 'https://www.javatpoint.com/c-sharp-collections', 'https://www.javatpoint.com/c-sharp-hashset']",[],[],[],"['C# List<T> example', 'C# List<T> example using collection initializer']",[],"[""Let's see an example of generic List<T> class that stores elements using Add() method and iterates the list using for-each loop.""]",[],[],"['using System;', 'using System.Collections.Generic;', 'public class ListExample', 'public static void Main(string[] args)', 'var names = new List();', 'names.Add(""Sonoo Jaiswal"");', 'names.Add(""Ankit"");', 'names.Add(""Peter"");', 'names.Add(""Irfan"");', 'foreach (var name in names)', '{', 'Console.WriteLine(name);', '}', 'using System;', 'using System.Collections.Generic;', 'public class ListExample', 'public static void Main(string[] args)', 'var names = new List() {""Sonoo"", ""Vimal"", ""Ratan"", ""Love"" };', 'foreach (var name in names)', '{', 'Console.WriteLine(name);', '}']","['Sonoo Jaiswal\nAnkit\nPeter\nIrfan', 'Sonoo\nVimal\nRatan\nLove']",[],[]
77,['C# HashSet<T>'],"['C# HashSet class can be used to store, remove or view elements. It does not store duplicate elements. It is suggested to use HashSet class if you have to store only unique elements. It is found in System.Collections.Generic namespace.']","['https://www.javatpoint.com/c-sharp-sortedset', 'https://www.javatpoint.com/c-sharp-list', 'https://www.javatpoint.com/c-sharp-sortedset', 'https://www.javatpoint.com/c-sharp-list', 'https://www.javatpoint.com/c-sharp-sortedset']",[],[],[],"['C# HashSet<T> example', 'C# HashSet<T> example 2']",[],"[""Let's see an example of generic HashSet<T> class that stores elements using Add() method and iterates elements using for-each loop."", ""Let's see another example of generic HashSet<T> class that stores elements using Collection initializer.""]",[],[],"['using System;', 'using System.Collections.Generic;', 'public class HashSetExample', 'public static void Main(string[] args)', 'var names = new HashSet();', 'names.Add(""Sonoo"");', 'names.Add(""Ankit"");', 'names.Add(""Peter"");', 'names.Add(""Irfan"");', 'names.Add(""Ankit"");//will not be added', '', 'foreach (var name in names)', '{', 'Console.WriteLine(name);', '}', 'using System;', 'using System.Collections.Generic;', 'public class HashSetExample', 'public static void Main(string[] args)', 'var names = new HashSet(){""Sonoo"", ""Ankit"", ""Peter"", ""Irfan""};', '', 'foreach (var name in names)', '{', 'Console.WriteLine(name);', '}']","['Sonoo\nAnkit\nPeter\nIrfan', 'Sonoo\nAnkit\nPeter\nIrfan']",[],[]
78,['C# SortedSet<T>'],"['C# SortedSet class can be used to store, remove or view elements. It maintains ascending order and does not store duplicate elements. It is suggested to use SortedSet class if you have to store unique elements and maintain ascending order. It is found in System.Collections.Generic namespace.']","['https://www.javatpoint.com/c-sharp-stack', 'https://www.javatpoint.com/c-sharp-hashset', 'https://www.javatpoint.com/c-sharp-stack', 'https://www.javatpoint.com/c-sharp-hashset', 'https://www.javatpoint.com/c-sharp-stack']",[],[],[],"['C# SortedSet<T> example', 'C# SortedSet<T> example 2']",[],"[""Let's see an example of generic SortedSet<T> class that stores elements using Add() method and iterates elements using for-each loop."", ""Let's see another example of generic SortedSet<T> class that stores elements using Collection initializer.""]",[],[],"['using System;', 'using System.Collections.Generic;', 'public class SortedSetExample', 'public static void Main(string[] args)', 'var names = new SortedSet();', 'names.Add(""Sonoo"");', 'names.Add(""Ankit"");', 'names.Add(""Peter"");', 'names.Add(""Irfan"");', 'names.Add(""Ankit"");//will not be added', '', 'foreach (var name in names)', '{', 'Console.WriteLine(name);', '}', 'using System;', 'using System.Collections.Generic;', 'public class SortedSetExample', 'public static void Main(string[] args)', 'var names = new SortedSet(){""Sonoo"", ""Ankit"", ""Peter"", ""Irfan""};', '', 'foreach (var name in names)', '{', 'Console.WriteLine(name);', '}']","['Ankit\nIrfan\nPeter\nSonoo', 'Ankit\nIrfan\nPeter\nSonoo']",[],[]
79,['C# Stack<T>'],['C# Stack<T> class is used to push and pop elements. It uses the concept of Stack that arranges elements in LIFO (Last In First Out) order. It can have duplicate elements. It is found in System.Collections.Generic namespace.'],"['https://www.javatpoint.com/c-sharp-queue', 'https://www.javatpoint.com/c-sharp-list', 'https://www.javatpoint.com/c-sharp-queue', 'https://www.javatpoint.com/c-sharp-list', 'https://www.javatpoint.com/c-sharp-queue']",[],[],[],['C# Stack<T> example'],[],[],"[""Let's see an example of generic Stack<T> class that stores elements using Push() method, removes elements using Pop() method and iterates elements using for-each loop.""]",[],"['using System;', 'using System.Collections.Generic;', 'public class StackExample', 'public static void Main(string[] args)', 'Stack names = new Stack();', 'names.Push(""Sonoo"");', 'names.Push(""Peter"");', 'names.Push(""James"");', 'names.Push(""Ratan"");', 'names.Push(""Irfan"");', 'foreach (string name in names)', '{', 'Console.WriteLine(name);', '}', 'Console.WriteLine(""Peek element: ""+names.Peek());', 'Console.WriteLine(""Pop: ""+ names.Pop());', 'Console.WriteLine(""After Pop, Peek element: "" + names.Peek());']","['Sonoo\nPeter\nJames\nRatan\nIrfan\nPeek element: Irfan\nPop: Irfan\nAfter Pop, Peek element: Ratan']",[],[]
80,['C# Queue<T>'],['C# Queue<T> class is used to Enqueue and Dequeue elements. It uses the concept of Queue that arranges elements in FIFO (First In First Out) order. It can have duplicate elements. It is found in System.Collections.Generic namespace.'],"['https://www.javatpoint.com/c-sharp-linkedlist', 'https://www.javatpoint.com/c-sharp-stack', 'https://www.javatpoint.com/c-sharp-linkedlist', 'https://www.javatpoint.com/c-sharp-stack', 'https://www.javatpoint.com/c-sharp-linkedlist']",[],[],[],['C# Queue<T> example'],[],[],"[""Let's see an example of generic Queue<T> class that stores elements using Enqueue() method, removes elements using Dequeue() method and iterates elements using for-each loop.""]",[],"['using System;', 'using System.Collections.Generic;', 'public class QueueExample', 'public static void Main(string[] args)', 'Queue names = new Queue();', 'names.Enqueue(""Sonoo"");', 'names.Enqueue(""Peter"");', 'names.Enqueue(""James"");', 'names.Enqueue(""Ratan"");', 'names.Enqueue(""Irfan"");', 'foreach (string name in names)', '{', 'Console.WriteLine(name);', '}', 'Console.WriteLine(""Peek element: ""+names.Peek());', 'Console.WriteLine(""Dequeue: ""+ names.Dequeue());', 'Console.WriteLine(""After Dequeue, Peek element: "" + names.Peek());']","['Sonoo\nPeter\nJames\nRatan\nIrfan\nPeek element: Sonoo\nDequeue: Sonoo\nAfter Dequeue, Peek element: Peter']",[],[]
81,['C# LinkedList<T>'],['C# LinkedList<T> class uses the concept of linked list. It allows us to insert and delete elements fastly. It can have duplicate elements. It is found in System.Collections.Generic namespace.'],"['https://www.javatpoint.com/c-sharp-dictionary', 'https://www.javatpoint.com/c-sharp-queue', 'https://www.javatpoint.com/c-sharp-dictionary', 'https://www.javatpoint.com/c-sharp-queue', 'https://www.javatpoint.com/c-sharp-dictionary']",[],[],[],"['C# LinkedList<T> example', 'C# LinkedList<T> example 2']","['Note: Unlike List, you cannot create LinkedList using Collection initializer.']","['It allows us to add and remove element at before or last index.', 'As you can see in the above output ""John"" and ""Lucy"" are added before and after ""Peter"".']","[""Let's see an example of generic LinkedList<T> class that stores elements using AddLast() and AddFirst() methods and iterates elements using for-each loop."", ""Let's see another example of generic LinkedList<T> class that stores elements before and after specific node. To get the specific node, we are calling Find() method.""]",[],"['using System;', 'using System.Collections.Generic;', 'public class LinkedListExample', 'public static void Main(string[] args)', 'var names = new LinkedList();', 'names.AddLast(""Sonoo Jaiswal"");', 'names.AddLast(""Ankit"");', 'names.AddLast(""Peter"");', 'names.AddLast(""Irfan"");', 'names.AddFirst(""John"");//added to first index', 'foreach (var name in names)', '{', 'Console.WriteLine(name);', '}', 'using System;', 'using System.Collections.Generic;', 'public class LinkedListExample', 'public static void Main(string[] args)', 'var names = new LinkedList();', 'names.AddLast(""Sonoo"");', 'names.AddLast(""Ankit"");', 'names.AddLast(""Peter"");', 'names.AddLast(""Irfan"");', '', 'LinkedListNode node=names.Find(""Peter"");', 'names.AddBefore(node, ""John"");', 'names.AddAfter(node, ""Lucy"");', 'foreach (var name in names)', '{', 'Console.WriteLine(name);', '}']","['John\nSonoo Jaiswal\nAnkit\nPeter\nIrfan', 'Sonoo\nAnkit\nJohn\nPeter\nLucy\nIrfan']",[],[]
82,"['C# Dictionary<TKey, TValue>']","['C# Dictionary<TKey, TValue> class uses the concept of hashtable. It stores values on the basis of key. It contains unique keys only. By the help of key, we can easily search or remove elements. It is found in System.Collections.Generic namespace.\nC# Dictionary<TKey, TValue> example\nLet\'s see an example of generic Dictionary<TKey, TValue> class that stores elements using Add() method and iterates elements using for-each loop. Here, we are using KeyValuePair class to get key and value.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class DictionaryExample\n{\n    public static void Main(string[] args)\n    {\n        Dictionary names = new Dictionary();\n        names.Add(""1"",""Sonoo"");\n        names.Add(""2"",""Peter"");\n        names.Add(""3"",""James"");\n        names.Add(""4"",""Ratan"");\n        names.Add(""5"",""Irfan"");\n\n        foreach (KeyValuePair kv in names)\n        {\n            Console.WriteLine(kv.Key+"" ""+kv.Value);\n        }\n    }\n}\n\nOutput:\n1 Sonoo\n2 Peter\n3 James\n4 Ratan\n5 Irfan\n\n\n\n\n\nNext TopicC# SortedDictionary<TKey,TValue>\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/c-sharp-sorteddictionary', 'https://www.javatpoint.com/c-sharp-queue', 'https://www.javatpoint.com/c-sharp-sorteddictionary', 'https://www.javatpoint.com/c-sharp-queue', 'https://www.javatpoint.com/c-sharp-sorteddictionary']",[],[],[],"['C# Dictionary<TKey, TValue> example']",[],[],"[""Let's see an example of generic Dictionary<TKey, TValue> class that stores elements using Add() method and iterates elements using for-each loop. Here, we are using KeyValuePair class to get key and value.""]",[],"['using System;', 'using System.Collections.Generic;', 'public class DictionaryExample', 'public static void Main(string[] args)', 'Dictionary names = new Dictionary();', 'names.Add(""1"",""Sonoo"");', 'names.Add(""2"",""Peter"");', 'names.Add(""3"",""James"");', 'names.Add(""4"",""Ratan"");', 'names.Add(""5"",""Irfan"");', 'foreach (KeyValuePair kv in names)', '{', 'Console.WriteLine(kv.Key+"" ""+kv.Value);', '}']",['1 Sonoo\n2 Peter\n3 James\n4 Ratan\n5 Irfan'],[],[]
83,"['C# SortedDictionary<TKey, TValue>']","['C# SortedDictionary<TKey, TValue> class uses the concept of hashtable. It stores values on the basis of key. It contains unique keys and maintains ascending order on the basis of key. By the help of key, we can easily search or remove elements. It is found in System.Collections.Generic namespace.\nC# SortedDictionary<TKey, TValue> example\nLet\'s see an example of generic SortedDictionary<TKey, TValue> class that stores elements using Add() method and iterates elements using for-each loop. Here, we are using KeyValuePair class to get key and value.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class SortedDictionaryExample\n{\n    public static void Main(string[] args)\n    {\n        SortedDictionary names = new SortedDictionary();\n        names.Add(""1"",""Sonoo"");  \n        names.Add(""4"",""Peter"");  \n        names.Add(""5"",""James"");  \n        names.Add(""3"",""Ratan"");  \n        names.Add(""2"",""Irfan"");  \n        foreach (KeyValuePair kv in names)\n        {\n            Console.WriteLine(kv.Key+"" ""+kv.Value);\n        }\n    }\n}\n\nOutput:\n1 Sonoo\n2 Irfan\n3 Ratan\n4 Peter\n5 James\n\n\n\n\n\nNext TopicC# SortedList<TKey, TValue>\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/c-sharp-sortedlist', 'https://www.javatpoint.com/c-sharp-dictionary', 'https://www.javatpoint.com/c-sharp-sortedlist', 'https://www.javatpoint.com/c-sharp-dictionary', 'https://www.javatpoint.com/c-sharp-sortedlist']",[],[],[],"['C# SortedDictionary<TKey, TValue> example']",[],[],"[""Let's see an example of generic SortedDictionary<TKey, TValue> class that stores elements using Add() method and iterates elements using for-each loop. Here, we are using KeyValuePair class to get key and value.""]",[],"['using System;', 'using System.Collections.Generic;', 'public class SortedDictionaryExample', 'public static void Main(string[] args)', 'SortedDictionary names = new SortedDictionary();', 'names.Add(""1"",""Sonoo"");', 'names.Add(""4"",""Peter"");', 'names.Add(""5"",""James"");', 'names.Add(""3"",""Ratan"");', 'names.Add(""2"",""Irfan"");', 'foreach (KeyValuePair kv in names)', '{', 'Console.WriteLine(kv.Key+"" ""+kv.Value);', '}']",['1 Sonoo\n2 Irfan\n3 Ratan\n4 Peter\n5 James'],[],[]
84,"['C# SortedList<TKey, TValue>']","['C# SortedList<TKey, TValue> is an array of key/value pairs. It stores values on the basis of key. The SortedList<TKey, TValue> class contains unique keys and maintains ascending order on the basis of key. By the help of key, we can easily search or remove elements. It is found in System.Collections.Generic namespace.']","['https://www.javatpoint.com/c-sharp-generics', 'https://www.javatpoint.com/c-sharp-sorteddictionary', 'https://www.javatpoint.com/c-sharp-generics', 'https://www.javatpoint.com/c-sharp-sorteddictionary', 'https://www.javatpoint.com/c-sharp-generics']",[],[],[],"['C# SortedList<TKey, TValue> vs SortedDictionary<TKey, TValue>', 'C# SortedList<TKey, TValue> example']",[],"['It is like SortedDictionary<TKey, TValue> class. ']","[""Let's see an example of generic SortedList<TKey, TValue> class that stores elements using Add() method and iterates elements using for-each loop. Here, we are using KeyValuePair class to get key and value.""]","['SortedList<TKey, TValue> class uses less memory than SortedDictionary<TKey, TValue>. It is recommended to use SortedList<TKey, TValue> if you have to store and retrieve key/valye pairs. The SortedDictionary<TKey, TValue> class is faster than SortedList<TKey, TValue> class if you perform insertion and removal for unsorted data.']","['using System;', 'using System.Collections.Generic;', 'public class SortedDictionaryExample', 'public static void Main(string[] args)', 'SortedList names = new SortedList();', 'names.Add(""1"",""Sonoo"");', 'names.Add(""4"",""Peter"");', 'names.Add(""5"",""James"");', 'names.Add(""3"",""Ratan"");', 'names.Add(""2"",""Irfan"");', 'foreach (KeyValuePair kv in names)', '{', 'Console.WriteLine(kv.Key+"" ""+kv.Value);', '}']",['1 Sonoo\n2 Irfan\n3 Ratan\n4 Peter\n5 James'],[],[]
85,['C# Generics'],['Generic is a concept that allows us to define classes and methods with placeholder. C# compiler replaces these placeholders with specified type at compile time. The concept of generics is used to create general purpose classes and methods. '],"['https://www.javatpoint.com/c-sharp-delegates', 'https://www.javatpoint.com/c-sharp-sortedlist', 'https://www.javatpoint.com/c-sharp-delegates', 'https://www.javatpoint.com/c-sharp-sortedlist', 'https://www.javatpoint.com/c-sharp-delegates']",[],[],[],"['C# Generic class example', 'Generic Method Example']",[],[],"['o define generic class, we must use angle <> brackets. The angle brackets are used to declare a class or method as generic type. In the following example, we are creating generic class that can be used to deal with any type of data.', 'C# allows us to create generic methods also. In the following example, we are creating generic method that can be called by passing any type of argument.']",[],"['using System;', 'namespace CSharpProgram', 'class GenericClass<T>', 'public GenericClass(T msg)', '{', 'Console.WriteLine(msg);', '}', 'class Program', 'static void Main(string[] args)', '{', 'GenericClass<string> gen   = new GenericClass<string> (""This is generic class"");', 'GenericClass<int>    genI  = new GenericClass<int>(101);', ""GenericClass<char>   getCh = new GenericClass<char>('I');"", '}', 'using System;', 'namespace CSharpProgram', 'class GenericClass', 'public void Show<T>(T msg)', '{', 'Console.WriteLine(msg);', '}', 'class Program', 'static void Main(string[] args)', '{', 'GenericClass genC = new GenericClass();', 'genC.Show(""This is generic method"");', 'genC.Show(101);', ""genC.Show('I');"", '}']","['This is generic class\n101\nI', 'This is generic method\n101\nI']",[],[]
86,['C# Delegates'],"['In C#, delegate is a reference to the method. It works like function pointer in C and C++. But it is objected-oriented, secured and type-safe than function pointer.']","['https://www.javatpoint.com/c-sharp-reflection', 'https://www.javatpoint.com/c-sharp-dictionary', 'https://www.javatpoint.com/c-sharp-reflection', 'https://www.javatpoint.com/c-sharp-dictionary', 'https://www.javatpoint.com/c-sharp-reflection']",[],[],['C# Delegate Example'],[],[],"['For static method, delegate encapsulates method only. But for instance method, it encapsulates method and instance both.', 'The best use of delegate is to use as event.', 'Internally a delegate declaration defines a class which is the derived class of System.Delegate.', ""Let's see a simple example of delegate in C# which calls add() and mul() methods.""]",[],[],"['using System;', 'delegate int Calculator(int n);//declaring delegate', 'public class DelegateExample', 'static int number = 100;', 'public static int add(int n)', 'number = number + n;', 'return number;', 'public static int mul(int n)', 'number = number * n;', 'return number;', 'public static int getNumber()', 'return number;', 'public static void Main(string[] args)', 'Calculator c1 = new Calculator(add);//instantiating delegate', 'Calculator c2 = new Calculator(mul);', 'c1(20);//calling method using delegate', 'Console.WriteLine(""After c1 delegate, Number is: "" + getNumber());', 'c2(3);', 'Console.WriteLine(""After c2 delegate, Number is: "" + getNumber());']","['After c1 delegate, Number is: 120\nAfter c2 delegate, Number is: 360']",[],[]
87,['C# Reflection'],"['In C#, reflection is a process to get metadata of a type at runtime. The System.Reflection namespace contains required classes for reflection such as:']","['https://www.javatpoint.com/c-sharp-anonymous-function', 'https://www.javatpoint.com/c-sharp-reflection', 'https://www.javatpoint.com/c-sharp-anonymous-function', 'https://www.javatpoint.com/c-sharp-reflection', 'https://www.javatpoint.com/c-sharp-anonymous-function']",[],[],"['C# Type class', 'C# Reflection Example: Get Type', 'C# Reflection Example: Get Assembly', 'C# Reflection Example: Print Type Information', 'C# Reflection Example: Print Constructors', 'C# Reflection Example: Print Methods', 'C# Reflection Example: Print Fields']",[],[],"['The System.Reflection.Emit namespace contains classes to emit metadata. ', 'A list of important properties of Type class are given below:', 'A list of important methods of Type class are given below:']","['C# Type class represents type declarations for class types, interface types, enumeration types, array types, value types etc. It is found in System namespace. It inherits System.Reflection.MemberInfo class.']",[],"['using System;', 'public class ReflectionExample', 'public static void Main()', 'int a = 10;', 'Type type = a.GetType();', 'Console.WriteLine(type);', 'using System;', 'using System.Reflection;', 'public class ReflectionExample', 'public static void Main()', 'Type t = typeof(System.String);', 'Console.WriteLine(t.Assembly);', 'using System;', 'using System.Reflection;', 'public class ReflectionExample', 'public static void Main()', 'Type t = typeof(System.String);', 'Console.WriteLine(t.FullName);', 'Console.WriteLine(t.BaseType);', 'Console.WriteLine(t.IsClass);', 'Console.WriteLine(t.IsEnum);', 'Console.WriteLine(t.IsInterface);', 'using System;', 'using System.Reflection;', 'public class ReflectionExample', 'public static void Main()', 'Type t = typeof(System.String);', '', 'Console.WriteLine(""Constructors of {0} type..."", t);', 'ConstructorInfo[] ci = t.GetConstructors(BindingFlags.Public | BindingFlags.Instance);', 'foreach (ConstructorInfo c in ci)', '{', 'Console.WriteLine(c);', '}', 'using System;', 'using System.Reflection;', 'public class ReflectionExample', 'public static void Main()', 'Type t = typeof(System.String);', '', 'Console.WriteLine(""Methods of {0} type..."", t);', 'MethodInfo[] ci = t.GetMethods(BindingFlags.Public | BindingFlags.Instance);', 'foreach (MethodInfo m in ci)', '{', 'Console.WriteLine(m);', '}', 'using System;', 'using System.Reflection;', 'public class ReflectionExample', 'public static void Main()', 'Type t = typeof(System.String);', '', 'Console.WriteLine(""Fields of {0} type..."", t);', 'FieldInfo[] ci = t.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.NonPublic);', 'foreach (FieldInfo f in ci)', '{', 'Console.WriteLine(f);', '}']","['System.Int32', 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089', 'System.String\nSystem.Object\ntrue\nfalse\nfalse', 'Constructors of System.String type...\nVoid .ctor(Char*)\nVoid .ctor(Char*, Int32, Int32)\nVoid .ctor(SByte*)\nVoid .ctor(SByte*, Int32, Int32)\nVoid .ctor(SByte*, Int32, Int32, System.Text.Encoding)\nVoid .ctor(Char[], Int32, Int32)\nVoid .ctor(Char[])\nVoid .ctor(Char, Int32)', 'Methods of System.String type...\nBoolean Equals(System.Object)\nBoolean Equals(System.String)\nBoolean Equals(System.String, System.StringComparison)\nChar get_Chars(Int32)\nVoid copyTo(Int32, char[], Int32, Int32)\nChar[] ToCharArray()\n....', 'Fields of System.String type...\nSystem.String Empty\nInt32 TrimHead\nInt32 TrimTail\nInt32 TrimBoth\nInt32 charPtrAlignConst\nInt32 alignConst']","['ropertyDescriptio&&&ssemblyGets the Assembly for this type&&&ssemblyQualifiedNameGets the Assembly qualified name for this type&&&ttributesGets the Attributes associated with the type&&&aseTypeGets the base or parent type&&&ullNameGets the fully qualified name of the type&&&sAbstractis used to check if the type is Abstract&&&sArrayis used to check if the type is Array&&&sClassis used to check if the type is Class&&&sEnumis used to check if the type is Enum&&&sInterfaceis used to check if the type is Interface&&&sNestedis used to check if the type is Nested&&&sPrimitiveis used to check if the type is Primitive&&&sPointeris used to check if the type is Pointer&&&sNotPublicis used to check if the type is not Public&&&sPublicis used to check if the type is Public&&&sSealedis used to check if the type is Sealed&&&sSerializableis used to check if the type is Serializable&&&emberTypeis used to check if the type is Member type of Nested type&&&oduleGets the module of the type&&&ameGets the name of the type&&&amespaceGets the namespace of the type', 'ethodDescriptio&&&etConstructors()Returns all the public constructors for the Type&&&etConstructors(BindingFlags)Returns all the constructors for the Type with specified BindingFlags&&&etFields()Returns all the public fields for the Type&&&etFields(BindingFlags)Returns all the public constructors for the Type with specified BindingFlags&&&etMembers()Returns all the public members for the Type&&&etMembers(BindingFlags)Returns all the members for the Type with specified BindingFlags&&&etMethods()Returns all the public methods for the Type&&&etMethods(BindingFlags)Returns all the methods for the Type with specified BindingFlags&&&etProperties()Returns all the public properties for the Type&&&etProperties(BindingFlags)Returns all the properties for the Type with specified BindingFlags&&&etType()Gets the current Type&&&etType(String)Gets the Type for the given name']",['|||Type |||MemberInfo |||ConstructorInfo |||MethodInfo |||FieldInfo |||PropertyInfo |||TypeInfo |||EventInfo |||Module |||Assembly |||AssemblyName |||Pointer etc.|||']
88,['C# Anonymous Functions'],"['Anonymous function is a type of function that does not has name. In other words, we can say that a function without name is known as anonymous function. ']","['https://www.javatpoint.com/c-sharp-multithreading', 'https://www.javatpoint.com/c-sharp-reflection', 'https://www.javatpoint.com/c-sharp-multithreading', 'https://www.javatpoint.com/c-sharp-reflection', 'https://www.javatpoint.com/c-sharp-multithreading']",[],[],['C# Anonymous Methods'],"['C# Lambda Expressions', 'Example', 'Example']",[],"['In C#, there are two types of anonymous functions:', 'C# Lambda Expression Syntax', 'Anonymous method provides the same functionality as lambda expression, except that it allows us to omit parameter list. Let see an example.']",['Lambda expression is an anonymous function which we can use to create delegates. We can use lambda expression to create local functions that can be passed as an argument. It is also helpful to write LINQ queries.'],[],"['(input-parameters) => expression', 'using System;', 'namespace LambdaExpressions', 'class Program', 'delegate int Square(int num);', 'static void Main(string[] args)', '{', 'Square GetSquare = x => x * x;', 'int j = GetSquare(5);', 'Console.WriteLine(""Square: ""+j);', '}', 'using System;', 'namespace AnonymousMethods', 'class Program', 'public delegate void AnonymousFun();', 'static void Main(string[] args)', '{', 'AnonymousFun fun = delegate () {', 'Console.WriteLine(""This is anonymous function"");', '};', 'fun();', '}']","['Square: 25', 'This is anonymous function']",[],['|||Lambda Expressions|||Anonymous Methods|||']
89,['C# Multithreading '],"['Multithreading in C# is a process in which multiple threads work simultaneously. It is a process to achieve multitasking. It saves time because multiple tasks are being executed at a time. To create multithreaded application in C#, we need to use System.Threding namespace.']","['https://www.javatpoint.com/c-sharp-thread-life-cycle', 'https://www.javatpoint.com/c-sharp-delegates', 'https://www.javatpoint.com/c-sharp-thread-life-cycle', 'https://www.javatpoint.com/c-sharp-delegates', 'https://www.javatpoint.com/c-sharp-thread-life-cycle']",[],[],"['System.Threading Namespace', 'Process and Thread']",[],[],"['Whenever you create a process, a separate memory area is occupied. But threads share a common memory area.']","['The System.Threading namespace contains classes and interfaces to provide the facility of multithreaded programming. It also provides classes to synchronize the thread resource. A list of commonly used classes are given below:', 'A process represents an application whereas a thread represents a module of the application. Process is heavyweight component whereas thread is lightweight. A thread can be termed as lightweight subprocess because it is executed inside a process.']",[],[],[],[],['|||Thread|||Mutex|||Timer|||Monitor|||Semaphore|||ThreadLocal|||ThreadPool|||Volatile etc.|||']
90,['C# Thread Life Cycle'],"['In C#, each thread has a life cycle. The life cycle of a thread is started when instance of System.Threading.Thread class is created. When the task execution of the thread is completed, its life cycle is ended.']","['https://www.javatpoint.com/c-sharp-thread-class', 'https://www.javatpoint.com/c-sharp-multithreading', 'https://www.javatpoint.com/c-sharp-thread-class', 'https://www.javatpoint.com/c-sharp-multithreading', 'https://www.javatpoint.com/c-sharp-thread-class']",[],[],[],[],[],"['There are following states in the life cycle of a Thread in C#.', 'When the instance of Thread class is created, it is in unstarted state by default.', 'When start() method on the thread is called, it is in runnable or ready to run state.', 'Only one thread within a process can be executed at a time. At the time of execution, thread is in running state.', 'The thread is in not runnable state, if sleep() or wait() method is called on the thread, or input/output operation is blocked.', 'After completing the task, thread enters into dead or terminated state.']",[],[],[],[],[],['|||Unstarted|||Runnable (Ready to run)|||Running|||Not Runnable|||Dead (Terminated)|||']
91,['C# Thread class'],['C# Thread class provides properties and methods to create and control threads. It is found in System.Threading namespace.'],"['https://www.javatpoint.com/c-sharp-main-thread', 'https://www.javatpoint.com/c-sharp-thread-life-cycle', 'https://www.javatpoint.com/c-sharp-main-thread', 'https://www.javatpoint.com/c-sharp-thread-life-cycle', 'https://www.javatpoint.com/c-sharp-main-thread']",[],[],[],[],[],"['A list of important properties of Thread class are given below:', 'A list of important methods of Thread class are given below:']",[],[],[],[],"['ropertyDescriptio&&&urrentThreadreturns the instance of currently running thread&&&sAlivechecks whether the current thread is alive or not. It is used to find the execution status of the thread&&&sBackgroundis used to get or set value whether current thread is in background or not&&&anagedThreadIdis used to get unique id for the current managed thread&&&ameis used to get or set the name of the current thread&&&riorityis used to get or set the priority of the current thread&&&hreadStateis used to return a value representing the thread state', 'ethodDescriptio&&&bort()is used to terminate the thread. It raises ThreadAbortException&&&nterrupt()is used to interrupt a thread which is in WaitSleepJoin state&&&oin()is used to block all the calling threads until this thread terminates&&&esetAbort()is used to cancel the Abort request for the current thread&&&esume()is used to resume the suspended thread. It is obselete&&&leep(Int32)is used to suspend the current thread for the specified milliseconds.&&&tart()changes the current state of the thread to Runnable&&&uspend()suspends the current thread if it is not suspended. It is obselete&&&ield()is used to yield the execution of current thread to another thread']",[]
92,['C# Main Thread Example'],['The first thread which is created inside a process is called Main thread. It starts first and ends at last.'],"['https://www.javatpoint.com/c-sharp-threading-example', 'https://www.javatpoint.com/c-sharp-thread-class', 'https://www.javatpoint.com/c-sharp-threading-example', 'https://www.javatpoint.com/c-sharp-thread-class', 'https://www.javatpoint.com/c-sharp-threading-example']",[],[],[],[],[],"[""Let's see an example of Main thread in C#.""]",[],[],"['using System;', 'using System.Threading;', 'public class ThreadExample', 'public static void Main(string[] args)', 'Thread t = Thread.CurrentThread;', 't.Name = ""MainThread"";', 'Console.WriteLine(t.Name);']",['MainThread'],[],[]
93,['C# Threading Example: static method'],"[""We can call static and non-static methods on the execution of the thread. To call the static and non-static methods, you need to pass method name in the constructor of ThreadStart class. For static method, we don't need to create the instance of the class. You can refer it by the name of class.""]","['https://www.javatpoint.com/c-sharp-thread-sleep', 'https://www.javatpoint.com/c-sharp-main-thread', 'https://www.javatpoint.com/c-sharp-thread-sleep', 'https://www.javatpoint.com/c-sharp-main-thread', 'https://www.javatpoint.com/c-sharp-thread-sleep']",[],[],[],"['C# Threading Example: non-static method', 'C# Threading Example: performing different tasks on each thread']",[],"['The output of the above program can be anything because there is context switching between the threads.', 'For non-static method, you need to create instance of the class so that you can refer it in the constructor of ThreadStart class.', 'Like above program output, the output of this program can be anything because there is context switching between the threads.', ""Let's see an example where we are executing different methods on each thread.""]",[],[],"['using System;', 'using System.Threading;', 'public class MyThread', 'public static void Thread1()', 'for (int i = 0; i < 10; i++)', '{', 'Console.WriteLine(i);', '}', 'public class ThreadExample', 'public static void Main()', 'Thread t1 = new Thread(new ThreadStart(MyThread.Thread1));', 'Thread t2 = new Thread(new ThreadStart(MyThread.Thread1));', 't1.Start();', 't2.Start();', 'using System;', 'using System.Threading;', 'public class MyThread', 'public void Thread1()', 'for (int i = 0; i < 10; i++)', '{', 'Console.WriteLine(i);', '}', 'public class ThreadExample', 'public static void Main()', 'MyThread mt = new MyThread();', 'Thread t1 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t2 = new Thread(new ThreadStart(mt.Thread1));', 't1.Start();', 't2.Start();', 'using System;', 'using System.Threading;', 'public class MyThread', 'public static void Thread1()', 'Console.WriteLine(""task one"");', 'public static void Thread2()', 'Console.WriteLine(""task two"");', 'public class ThreadExample', 'public static void Main()', 'Thread t1 = new Thread(new ThreadStart(MyThread.Thread1));', 'Thread t2 = new Thread(new ThreadStart(MyThread.Thread2));', 't1.Start();', 't2.Start();']","['0\n1\n2\n3\n4\n5\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n6\n7\n8\n9', '0\n1\n2\n3\n4\n5\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n6\n7\n8\n9', 'task one\ntask two']",[],[]
94,['C# Threading Example: Sleep() method'],"['The Sleep() method suspends the current thread for the specified milliseconds. So, other threads get the chance to start execution.']","['https://www.javatpoint.com/c-sharp-thread-abort', 'https://www.javatpoint.com/c-sharp-threading-example', 'https://www.javatpoint.com/c-sharp-thread-abort', 'https://www.javatpoint.com/c-sharp-threading-example', 'https://www.javatpoint.com/c-sharp-thread-abort']",[],[],[],[],[],[],[],[],"['using System;', 'using System.Threading;', 'public class MyThread', 'public void Thread1()', 'for (int i = 0; i < 10; i++)', '{', 'Console.WriteLine(i);', 'Thread.Sleep(200);', '}', 'public class ThreadExample', 'public static void Main()', 'MyThread mt = new MyThread();', 'Thread t1 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t2 = new Thread(new ThreadStart(mt.Thread1));', 't1.Start();', 't2.Start();']",['0\n0\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n6\n6\n7\n7\n8\n8\n9\n9'],[],[]
95,['C# Threading Example: Abort() method'],['The Abort() method is used to terminate the thread. It raises ThreadAbortException if Abort operation is not done.'],"['https://www.javatpoint.com/c-sharp-thread-join', 'https://www.javatpoint.com/c-sharp-thread-sleep', 'https://www.javatpoint.com/c-sharp-thread-join', 'https://www.javatpoint.com/c-sharp-thread-sleep', 'https://www.javatpoint.com/c-sharp-thread-join']",[],[],[],[],[],['Output is unpredictable because thread may be in running state.'],[],[],"['using System;', 'using System.Threading;', 'public class MyThread', 'public void Thread1()', 'for (int i = 0; i < 10; i++)', '{', 'Console.WriteLine(i);', 'Thread.Sleep(200);', '}', 'public class ThreadExample', 'public static void Main()', 'Console.WriteLine(""Start of Main"");', 'MyThread mt = new MyThread();', 'Thread t1 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t2 = new Thread(new ThreadStart(mt.Thread1));', 't1.Start();', 't2.Start();', 'try', '{', 't1.Abort();', 't2.Abort();', '}', 'catch (ThreadAbortException tae)', '{', 'Console.WriteLine(tae.ToString());', '}', 'Console.WriteLine(""End of Main"");']",['Start of Main\n0\nEnd of Main'],[],[]
96,['C# Threading Example: Join() method'],['It causes all the calling threads to wait until the current thread (joined thread) is terminated or completes its task.'],"['https://www.javatpoint.com/c-sharp-thread-name', 'https://www.javatpoint.com/c-sharp-thread-abort', 'https://www.javatpoint.com/c-sharp-thread-name', 'https://www.javatpoint.com/c-sharp-thread-abort', 'https://www.javatpoint.com/c-sharp-thread-name']",[],[],[],[],[],[],[],[],"['using System;', 'using System.Threading;', 'public class MyThread', 'public void Thread1()', 'for (int i = 0; i < 5; i++)', '{', 'Console.WriteLine(i);', 'Thread.Sleep(200);', '}', 'public class ThreadExample', 'public static void Main()', 'MyThread mt = new MyThread();', 'Thread t1 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t2 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t3 = new Thread(new ThreadStart(mt.Thread1));', 't1.Start();', 't1.Join();', 't2.Start();', 't3.Start();']",['0\n1\n2\n3\n4\n0\n0\n1\n1\n2\n2\n3\n3\n4\n4'],[],[]
97,['C# Threading Example: Naming Thread'],"[""You can change or get the name of the thread by using Name property of Thread class. Let's see an example where we are setting and getting names of the threads.""]","['https://www.javatpoint.com/c-sharp-threadpriority', 'https://www.javatpoint.com/c-sharp-thread-join', 'https://www.javatpoint.com/c-sharp-threadpriority', 'https://www.javatpoint.com/c-sharp-thread-join', 'https://www.javatpoint.com/c-sharp-threadpriority']",[],[],[],[],[],[],[],[],"['using System;', 'using System.Threading;', 'public class MyThread', 'public void Thread1()', 'Thread t = Thread.CurrentThread;', 'Console.WriteLine(t.Name+"" is running"");', 'public class ThreadExample', 'public static void Main()', 'MyThread mt = new MyThread();', 'Thread t1 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t2 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t3 = new Thread(new ThreadStart(mt.Thread1));', 't1.Name = ""Player1"";', 't2.Name = ""Player2"";', 't3.Name = ""Player3"";', 't1.Start();', 't2.Start();', 't3.Start();']",['Player1 is running\nPlayer2 is running\nPlayer3 is running'],[],[]
98,['C# Threading Example: ThreadPriority'],"[""Let's see an example where we are changing the priority of the thread. The high priority thread can be executed first. But it is not guaranteed because thread is highly system dependent. It increases the chance of the high priority thread to execute before low priority thread.""]","['https://www.javatpoint.com/c-sharp-thread-synchronization', 'https://www.javatpoint.com/c-sharp-thread-name', 'https://www.javatpoint.com/c-sharp-thread-synchronization', 'https://www.javatpoint.com/c-sharp-thread-name', 'https://www.javatpoint.com/c-sharp-thread-synchronization']",[],[],[],[],[],[],['The output is unpredictable because threads are highly system dependent. It may follow any algorithm preemptive or non-preemptive.\nPlayer1 is running\nPlayer3 is running\nPlayer2 is running\n\n\nNext TopicC# Thread Synchronization\n\n\n\n← prev\nnext →\n\n\n'],[],"['using System;', 'using System.Threading;', 'public class MyThread', 'public void Thread1()', 'Thread t = Thread.CurrentThread;', 'Console.WriteLine(t.Name+"" is running"");', 'public class ThreadExample', 'public static void Main()', 'MyThread mt = new MyThread();', 'Thread t1 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t2 = new Thread(new ThreadStart(mt.Thread1));', 'Thread t3 = new Thread(new ThreadStart(mt.Thread1));', 't1.Name = ""Player1"";', 't2.Name = ""Player2"";', 't3.Name = ""Player3"";', 't3.Priority = ThreadPriority.Highest;', 't2.Priority = ThreadPriority.Normal;', 't1.Priority = ThreadPriority.Lowest;', 't1.Start();', 't2.Start();', 't3.Start();']",['Player1 is running\nPlayer3 is running\nPlayer2 is running'],[],[]
99,['C# Thread Synchronization'],['Synchronization is a technique that allows only one thread to access the resource for the particular time. No other thread can interrupt until the assigned thread finishes its task.\n'],"['https://www.javatpoint.com/web-services-in-c-sharp', 'https://www.javatpoint.com/c-sharp-threadpriority', 'https://www.javatpoint.com/web-services-in-c-sharp', 'https://www.javatpoint.com/c-sharp-threadpriority', 'https://www.javatpoint.com/web-services-in-c-sharp']",[],[],"['C# Lock', 'C# Example: Without Synchronization']",['C# Thread Synchronization Example'],[],"['It is mainly used in case of transactions like deposit, withdraw etc.', 'Here, we are creating two examples that executes asynchronously and synchronously.\n', 'In this example, we are not using lock. This example executes asynchronously. In other words, there is context-switching between the threads.\n']","['We can use C# lock keyword to execute program synchronously. It is used to get lock for the current thread, execute the task and then release the lock. It ensures that other thread does not interrupt the execution until the execution finish.\n', 'In this example, we are using lock. This example executes synchronously. In other words, there is no context-switching between the threads. In the output section, we can see that second thread starts working after first threads finishes its tasks.']","['In multithreading program, threads are allowed to access any resource for the required execution time. Threads share resources and executes asynchronously. Accessing shared resources (data) is critical task that sometimes may halt the system. We deal with it by making threads synchronized.\n']","['using System;', 'using System.Threading;', 'class Printer', 'public void PrintTable()', 'for (int i = 1; i <= 10; i++)', '{', 'Thread.Sleep(100);', 'Console.WriteLine(i);', '}', 'class Program', 'public static void Main(string[] args)', 'Printer p = new Printer();', 'Thread t1 = new Thread(new ThreadStart(p.PrintTable));', 'Thread t2 = new Thread(new ThreadStart(p.PrintTable));', 't1.Start();', 't2.Start();', 'using System;', 'using System.Threading;', 'class Printer', 'public void PrintTable()', 'lock (this)', '{', 'for (int i = 1; i <= 10; i++)', '{', 'Thread.Sleep(100);', 'Console.WriteLine(i);', '}', '}', 'class Program', 'public static void Main(string[] args)', 'Printer p = new Printer();', 'Thread t1 = new Thread(new ThreadStart(p.PrintTable));', 'Thread t2 = new Thread(new ThreadStart(p.PrintTable));', 't1.Start();', 't2.Start();']","['1', '1', '2', '2', '3', '3', '4', '4', '5', '5', '6', '6', '7', '7', '8', '8', '9', '9', '10', '10', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']",[],['|||Consistency Maintain|||No Thread Interference|||']
100,['Web Services in C#'],"['Web Service is known as the software program. These services use the XML to exchange the information with the other software with the help of the common internet Protocols. In the simple term, we use the Web Service to interact with the objects over the internet.']","['https://www.javatpoint.com/events-in-c-sharp', 'https://www.javatpoint.com/c-sharp-thread-synchronization', 'https://www.javatpoint.com/https://www.javatpoint.com/what-is-xml', 'https://www.javatpoint.com/https://www.javatpoint.com/soap-web-services', 'https://www.javatpoint.com/https://www.javatpoint.com/website', 'https://www.javatpoint.com/https://www.javatpoint.com/sms-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/api-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/net-framework', 'https://www.javatpoint.com/https://www.javatpoint.com/ado-net-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/asp-net-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/ajax-tutorial', 'https://www.javatpoint.com/http://localhost:62639/MyService.asmx', 'https://www.javatpoint.com/http://localhost:62639/MyService.asmx', 'https://www.javatpoint.com/http://localhost:62639/MyService.asmx?op=SumOfFloats', 'https://www.javatpoint.com/http://localhost:62639/MyService.asmx/SumOfFloats', 'https://www.javatpoint.com/http://localhost:62639/MyService.asmx/SumOfFloats', 'https://www.javatpoint.com/http://localhost/WebServiceDemo/', 'https://www.javatpoint.com/https://www.javatpoint.com/url-full-form', 'https://www.javatpoint.com/events-in-c-sharp', 'https://www.javatpoint.com/c-sharp-thread-synchronization', 'https://www.javatpoint.com/events-in-c-sharp']","['https://static.javatpoint.com/csharp/images/how-to-create-web-service.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service2.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service3.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service4.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service5.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service6.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service7.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service8.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service9.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service10.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service11.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service12.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service13.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service14.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service15.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service16.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service17.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service18.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service19.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service20.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service21.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service22.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service23.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service24.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service25.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service26.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service27.png', 'https://static.javatpoint.com/csharp/images/how-to-create-web-service28.png']",[],"['Introduction', 'Here are some points about the Web Service.', 'Technology Used in Web Service', 'Advantages of Web Services', 'Limitations of Web Services', 'Example of the Web Service', 'The need for Web Service', 'Data Types supported by the Web Service.', 'Implementation of web Service']","['Create Web Service', 'Explanation of Default Code', 'Proxy class or WSDL', 'Mark-up', 'Service1.asmx', 'MyService.asmx', 'MyService.asmx.cs', 'Testing of a Web Service', 'MyService.asmx.cs', 'Method Overloading', 'MyService.asmx.cs', 'Testing of the Page', 'WSDL Document', 'Hosting of the Web Service', 'Consume the Web Service from the Client Script', 'Proxy Class', 'Explanation of the above window:', 'WebForm.aspx.cs', 'Wrap Up']","['Note1: Web Services are not limited only to the .Net Framework. The standards of Web Services were already defined before the release of the .NET. Web Services and supported by the vendors other than Microsoft.', 'Note:2: Web Services can also work on the cross-platform. If the services were written in one language, these could be used by the other application despite, and the application used the other language. If we want to use the web services, the only way for that is we only need the internet to connect where we will make the HTTP request.', ""Note:3 If we want to work with the .NET objects, we can use the .NET remoting. .NET remoting is known as distributed technology through which we can use the .NET objects. But the non-.NET client can't use it.""]","['SOAP: The communication between the Services and the application is set up by the SOAP.', 'WSDL: WSDL gives us a uniform method that is helpful to specify the Web Services to the other programs.', 'UDDI: With the help of UDDI, we can search the Web Service registries.', 'Limitation of Web Services are:', 'Web Service can do almost any kind of task.', 'Web Portal: Web portal is used to fetch the headline news from the linked web service.', 'Stock Quote: The latest information about the share market with the Stock Quote can display on our website.', 'News headline: By using the news headline Web Service, we can show the latest update of the news on our website.', 'The solution to this problem is Web Services.', 'The only difference between the libraries of API and the Web Service is that the Web Service is located remotely on another server.', 'Here we have some points about the Web Services.', 'This is the only reason why the web services were built with the XML based standards of exchanging the data.', 'Web Services uses the Set of Data type. The XML Schema easily recognizes these data types.', 'DataSet and DataTable: The WPF supports dataSet and DataTable, but the WPF does not support the ADO.NET data objects like DataColumns and DataRows.', 'Step 1: Firstly, we will create a Web Application for creating the Web Service.', 'For that, we will click on the File-> Select Project as shown in the below screenshot:', 'After that the new window will open as shown in the below screenshot:', 'From here, we will select the Web->Asp.Net Web Application->Name of the Web Application-> Click on OK.', 'After this a new window will be shown us like as shown below:', 'For creating the Web Service, we will do the right click on the project name-> Click on Add-> Add New Item. As shown in the below screenshot:', 'After adding the Web Service to the application, a new window will appear which is shown as below:', 'Visual Studio creates the not changeable web service-Analyzation of template used in the Visual Studio.', '[WebService(Namespace=""http://tempuri.org/""))]', 'Points to be noted:', 'Here are some points which should be noted while creating web service.', '[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]', '[WebServiceBinding(ConformsTo= WsiProfiles.BasicProfile1_1)] to [WebServiceBinding (ConformsTo = WsiProfiles.None)].', 'If we want to call the Web service from the Script, we will use ASP.NET, AJAX and uncomment the below line.', '[System.Web.Script.Services.ScriptService]', '[WebMethod]', 'If we remove this attribute, in that case, the client will not be able to see the details of the method; hence they cannot implement it.', 'Now we will see the WebService1.asmx.cs window:', 'WebService attribute contains the different properties like:', 'Name: By using the Name property, we will provide the descriptive name to the Service.', 'Description: This property is used to avoid a brief description of the Service.', 'WebMethod attribute contains the Name and Description property, which we can use to provide the self-describing name or description, respectively.', 'Now we will see the mark-up.', 'Here are some points about the Service1.asmx.', 'After clicking on the link of the Service Description, this will redirect us to the WSDL document of the Service as shown in the below screenshot:', 'There is also another link to the HelloWorld. After clicking on this link, this will redirect us to the testing page.', 'After clicking on this link, this will redirect us to the Service1 Web Service page for the testing.', 'After this, the Service is ready to use. Now we will compile and run this application.', 'After the compilation a new window will open as shown in the below screenshot:', 'Now we will use the OOP (Object Oriented Programming Concept) concept method overloading. Now we add the WebMethod in the MyService class.', 'After entering the values in the first text box and second text box, this will invoke the method as shown in the below screenshot:', 'To support the overloading method, we have to make some changes in the code, as shown in the box which is highlighted:', 'After all these changes the Web Service will looks like as shown in the below screenshot:', 'By using the above property, we can use the method overloading in the Web Service.', ""Here a question is arising from where the test page came. Because we didn't add the Mark-up, but still the page was rendered."", 'Step1: Right-click on the Solution explorer->Add->New Project as shown in the below screenshot:', 'Step2: After clicking on the New Project a new window will open as shown in the below screenshot:', 'For creating the proxy class, we have to the right click on the References->Select Add Service Reference as shown in the below screenshot:', 'After clicking on the Add Service Reference, a new window will appear as shown in the below screenshot:', 'Address: Here, we will paste the URL of the web service created by us and then click on Go.', 'After clicking on the Go button, this will search the provided address.', 'Now we will add the Web Form in our application. For that, we will follow the following steps:', '1. Right-click on the project in the solution explorer-> select add->choose web form as shown in the below screenshot:', 'After clicking on the Web Form, this will open a new window where we have to provide the name of the web form as shown in the below screenshot:', 'Here in the above screenshot, we gave the name of the web form and then click on OK.', 'In the Web Form, we will create a table to use the predefined method with the help of the Web Service.', 'In the WebForm1.aspx, we have done the following coding as shown in the below code:', 'The designing view of the above code is as shown in the below screenshot:', 'Here we have taken two textboxes for entering the firstnumber and secondnumber. The add button is used to add the value of both the textbox.', 'After double-clicking on the Add button, this will switch us to the coding page. The page is WebForm.aspx.cs.', 'To use the method of the Web Service, we will do the following code on the button click.', 'Now we will press F5 to start the web service. The output will look like as shown in the below screenshot:']","['XML: Web Service specifies only the data. So, the application which understands the XML regarding the programming language or the platform can format the XML in different ways.', 'At the time of the deployment of these technologies, this allows the developers to do the packaging of the applications in the form of the Service and publishing of the Service on the network.', 'Weather Reporting: For the reporting of weather, we will use Weather Reporting Web Service for displaying the information about the weather on our website.', 'For creating the Web Service first, we will think about a scenario. For creating any web service, firstly, we should have to get to know why we need Web Service.', 'Web Services can be invoked by the other applications. Web Services are known as the pieces of the business logic, which is hosted on the internet, and the other application can use them.', 'A simple asmx page is known as Web Service. For the creation of the web service, we will use the Visual Studio 2017, which is using the .NET Framework 4.8. For creating the Web Service, we will follow the following steps:', 'After this, a new window will appear. From where we have to click on the Web-> Select Web Service(.asmx page)-> Give a name to the Web Service as shown in the below screenshot:', 'This attribute is always used at the top of the method. We write this attribute in the Web Service. [WebMethod] attribute is used to define that the method used this attribute is exposed to the user/client access.', 'WSDL (Web Service Development Language) document is used to generate the proxy class of the Web Service. WSDL document defines the Web Service. WSDL document contains the', '1. WebService.asmx.cs page includes the System.Web.Services, and it also consists of the four other namespaces which are included by the visual Studio in the Web Application.', '3. ""Service1"" includes the ""WebService"" attribute. If we want to expose any class as a service, then there is also a need to include the attribute of the ""WebService"".', '4. ""Service1"" contains another attribute as well, which is ""WebServiceBinding"". This is used to indicate the standard of the Service. If the Service does not follow this standard, we will get an exception.', '5. With the Service, one more attribute is added, which is ""[System.Web.Script.Services.ScriptService]"", for making the Service accessible from the client script, Services should be decorated with this Service.', '6. The ""Service1"" class contains a method ""Hello World"". This method is decorated with the ""[WebMethod]"" attribute. The client application accesses the service method. The Client Application should add the ""Service1"" method.', 'There can be chances that the Service is using some method for internal functionality. The client application does not have any need to use them. There is not any need to use those methods with the Web Method attribute.', 'For the mark-up, we have to the right click on the Service1.asmx in the window of the Solution Explorer and select the view mark-up as shown in the below screenshot:', 'In the Service1.asmx, we will see that the Service uses the WebService directive with the attribute. From here, this will show us that the application invokes the Service, not by the end-user. Hence the asmx page has no mark-up.', 'Now we will run this application after pressing the button F5. Vary). Here will find a link for the Service Description as shown in the below screenshot:', 'Now we will implement the Service. Now we will rename the file ""Service1"" in the Solution Explorer to ""MyService"". Here we will change the class name to MyService from Service1. Now we will open the mark-up(.asmx) page.', 'Here we change the property of the class to ""Web application.MyService"" and will change the ""CodeBehind"" property from ""Service1.asmx.cs"" to ""MyService.asmx.cs"" like as we name the file also.', 'Here web service supports the method with the same name. By adding the message name property, we can create the differences between both of the methods.', 'After clicking on the invoke button, we will redirect to http://localhost:62639/MyService.asmx/SumOfFloats page. This page contains the value in the XML format.', 'Test Pages are not part of the Web Service. Test Page is rendered by the ASP.NET by using the Web Page c:\\[WinDir]\\Microsoft. NET\\Framework\\ [Version] \\Config\\DefaultWsdlHelpGenerator.aspx. ""Reflection"" concept renders to the test page.', 'We can use web service in any type of application. Here we will create an application .Net web application. For that, we will follow the following steps:', 'Step 3. After this, to communicate with the web service, we have to create a proxy class. To create the proxy class, we have to follow the following steps:', 'Namespace: in the namespace, we will provide the name of the Service and then click on the OK button. This will add the reference to the web service in the project.', 'In the above code, create a table where we take the two textboxes, textbox1, for entering the firstnumber and the textbox2 for entering the SecondNumber. Create a button with the help of which we will add the two numbers.']","['We can make our web service and can give them back to use. Here we are taking an example like we can make the Free SMS Sending Service with the footer for the company advertisement. So, whenever any person uses this Service, they will indirectly advertise our company. For taking advantage of the web service, we can apply the N number of ideas.', 'We will think about a scenario which we want to show on our website. On our website, we want to show the information about the region, nation and about the international as well. Here if we are thinking of writing the code for all these functionalities, this will take lots of time and the effort to write the code for all these functionalities. All of the above information is already provided by some existing sites, so in that case, we want to use that current logic of other sites. But there is a problem arises how could I use the existing logic in my application.', ""By using the Web Service, we can reuse someone else's business logic, instead of replicating this. To use the business logic of someone else, we just have to write a few lines of the code. This technique is similar to the libraries of API, DLLs, and plug-ins."", 'As we know that the Web Service is cross-platform, but despite this, there should be an understandable language so that we can make a request for the services and can get the Service in their response. Web Services use the XML, which can be understood easily.', 'Web Services uses a simple data type like strings and numbers. These data types are helpful for communication with Web Services. And we cannot send the proprietary .NET objects like image, FileStream, or the EventLogs. The other programming language does not have any way to contact these .NET objects. If we use some devices to send them to the client, still the different programming languages will not be able to interpret.', 'The Web Service based on XML required the unique namespace for the client application, which is helpful to distinguish the web service from the other services on the Web. Web Service uses the default namespace, which is tempura.org. This namespace is available for the XML Web services, which is under development. The XML Web Services, which is going to be published, should use the permanent namespace. The instance of Web Services should replace it with other URI, which is more meaningful in the production system.', ""We will identify the Web Service as the namespace used in the Web Service; its company will control namespace. Here we are taking an example of the company's internet domain name, which we can use as part of the namespace—the namespace of the XML Web service, which will look like the URLs. We used the URLs for pointing out the actual resources on the Web."", 'Directly method overloading is not supported by the web service. To allow the method overloading in the Web Service, we have to add the MessageName property to differentiate the one method used in the web service from the other method, which is having the same name and used parameter.', 'Visual Studio used the information to create the proxy class. The client application will call the proxy class method. The proxy class will serialize the parameters, prepare the SOAP request message and send it to the Web Service. Web Service executes this method and returns the SOAP return message to the Proxy. The proxy class will then deserialize the SOAP response message and give it to the Client application. There is not any need to serialize or deserialize the dot net CLR objects to and from the SOAP format. The proxy class has all the responsibility of the serialization and deserialization, which makes the life of the developer easy.', '2. ""Service1"" class is inherited from the ""System.Web.Services.WebServices"". After inheriting the class from the ""System.Web.Services.WebService"" we can access the built-in ASP.Net objects such as (Application, Session, User, Context, Server ). If there is not any need for the built-in objects of .NET, then there is also do not any need of the service class from ""WebService"".', ""NameSpace: The use of the namespace property makes the Service uniquely identifiable. The nameSpace is the property of the XML. The client application can contain different services, so that's why there can be the chances of the collision. To avoid the collision, it is the responsibility of the provider to make the namespace unique."", 'From the above screenshot here, we will see that the visual Studio is unable to resolve the ""Service1"" in the class property. Here class shows the fully-qualified name of the Service, and we renamed the Service1 class to MyService, but Visual Studio is unable to resolve it.', 'Now we will run the application by clicking on the F5 button. The http://localhost:62639/MyService.asmx page will open. The page will contain the link for the Service Description (the WSDL document, documentation of Web Service) and contains another link of SumOfNums. This page is the test page of the SumOfNums method as shown in the below screenshot:', 'Now we will run this application by pressing the button F5. The http://localhost:62639/MyService.asmx page will open which contains the link for the Service Description(the WSDL document, documentation for the web service). Here we have another link SumOfNums which is the test page of the SumOfNums method as shown in the below screenshot:', 'Now we will use the overloading method in the Service. Web service does not support method overloading. This will throw an error in the case of the method overloading. Here we are taking an example to show the method overloading done in the Web Service and throw an error because it does not support the overloading.', 'In the above example, Web Service does not support the method overloading and shows the error message that the Service ""WebApplication7.MyService"" does not conform to WS-I Basic Profile v1.1. Now to support the overloading method, we have to follow the following steps either we have to remove the ""[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)],"" or we have to make some changes ""[WebServiceBinding(ConformsTo = WsiProfiles.None)]"".', 'After clicking on the SumOfFloats, the page will redirect to the http://localhost:62639/MyService.asmx?op=SumOfFloats here we will see that the ""?op=SumOfNums"" is appended to the Service URL. This page contains the two text boxes for the two input values (First, Second), where the SumOfNums value will take as an input parameter and a ""invoke"" button. After clicking on this invoke button, we will redirect to the http://localhost:62639/MyService.asmx/SumOfFloats, which is having the value where the SumOfNums method returns the XML format.', 'Similarly, after clicking on the ""SumOfNums MessageName=""SumOfFloats"""". We will redirect to the ""http://localhost:62639/MyService.asmx?op=SumOfFloats"" . So the ""SumOfNums MessageName=""SumOfFloat"""" method which is known as the ""SumOfFloats"" for client application.', 'Web Services are self-describing, which means ASP.Net itself provides us all the information required for the client to consume a web service in the form of the WSDL document. WSDL document tells the client about the methods which are present in the Web Service. And the what parameter and return value used by the method and how a client application can communicate with them. WSDL is an XML standard.', 'For the hosting of the web service, we will add the reference to the Service and consume it from the different applications. Here we suppose that the port number can vary, so now we will host the Service on the IIS (Internet Information Server) for getting the particular address of the server. For this, we will open the Internet Information Server-> Go to the default web site-> Right-click on the application-> Add the Application->browse to the physical location of our Service for the physical path field-> Click ""OK"". Now we will browse the application with the alias name http://localhost/WebServiceDemo/ for the testing if the application was correctly hosted. Here we will get an error ""HTTP Error 403.14-Forbidden"". This error was coming because there is not set any default document for this application. Now we will add a page as a default document ""MyService.asmx"". Now we can browse our application by adding this URL in the browser localhost/WebServiceDemo/MyService.asmx.', ""Here we got the benefit of the web service in this application. We didn't write any logic for the addition of the two numbers. Here in our calculator web application, we just used the method of the web service. We didn't use any logic for the addition. The above screenshot shows the output of the addition of two numbers, i.e., 23.""]","['[WebMethod]', 'public int SumOfNums(int FirstNumber, int SecondNumber)', '{', 'return FirstNumber + SecondNumber;', '}', '[WebMethod(MessageName = ""SumOfFloats"")]', 'public float SumOfNums(float FirstNumber, float SecondNumber)', '{', 'return FirstNumber + SecondNumber;', '}', '<%@ WebService Language=""C#"" CodeBehind=""Service1.asmx.cs"" Class=""WebApplication7.Service1"" %>', '<%@ WebService Language=""C#"" CodeBehind=""MyService.asmx.cs"" Class=""WebApplication7.MyService"" %>', 'using System;', 'using System.Collections.Generic;', 'using System.Linq;', 'using System.Web;', 'using System.Web.Services;', 'using System.Web.Script.Serialization;', 'namespace WebApplication7', '[WebService(Namespace = ""http://tempuri.org/"")]', '[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]', '[System.ComponentModel.ToolboxItem(false)]', '[System.Web.Script.Services.ScriptService]', 'public class MyService : System.Web.Services.WebService', '[WebMethod]', 'public int SumOfNums(int First, int Second)', '{', 'return First + Second;', '}', 'using System;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Web;', 'using System.Web.Services;', 'using System.Web.Script.Serialization;', 'namespace WebApplication7', '[WebService(Namespace = ""http://tempuri.org/"")]', '[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]', '[System.ComponentModel.ToolboxItem(false)]', '[System.Web.Script.Services.ScriptService]', 'public class MyService : System.Web.Services.WebService', '', '[WebMethod(MessageName = ""SumOfFloats"")]', 'public float SumOfNums(float First, float Second)', '{', 'return First + Second;', '}', 'using System;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Web;', 'using System.Web.Services;', 'using System.Web.Script.Serialization;', 'namespace WebApplication7', '[WebService(Namespace = ""http://tempuri.org/"")]', '[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]', '[System.ComponentModel.ToolboxItem(false)]', '[System.Web.Script.Services.ScriptService]', 'public class MyService : System.Web.Services.WebService', '[WebMethod]', 'public int SumOfNums(int First, int Second)', '{', 'return First + Second;', '}', '[WebMethod(MessageName = ""SumOfFloats"")]', 'public float SumOfNums(float First, float Second)', '{', 'return First + Second;', '}', 'using System;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Web;', 'using System.Web.Services;', 'using System.Web.Script.Serialization;', 'namespace WebApplication7', '[WebService(Namespace = ""http://tempuri.org/"")]', '[WebServiceBinding(ConformsTo = WsiProfiles.None)]', '[System.ComponentModel.ToolboxItem(false)]', '[System.Web.Script.Services.ScriptService]', 'public class MyService : System.Web.Services.WebService', '[WebMethod]', 'public int SumOfNums(int First, int Second)', '{', 'return First + Second;', '}', '[WebMethod(MessageName = ""SumOfFloats"")]', 'public float SumOfNums(float First, float Second)', '{', 'return First + Second;', '}', '<%@ Page Language=""C#"" AutoEventWireup=""true"" CodeBehind=""WebForm1.aspx.cs"" Inherits=""CalculatorWebApplication.WebForm1"" %>', '<!DOCTYPE html>', '<html xmlns=""http://www.w3.org/1999/xhtml"">', '<head runat=""server"">', '<title></title>', '</head>', '<form id=""form1"" runat=""server"">', '<table style=""font-family:Arial"">', '<tr>', '<td>', '<b>First Number</b>', '</td>', '<td>', '<asp:TextBox ID=""txtFirstNumber"" runat=""server""></asp:TextBox>', '</td>', '</tr>', '<tr>', '<td>', '<b>Second Number</b>', '</td>', '<td>', '<asp:TextBox ID=""txtSecondNumber"" runat=""server""></asp:TextBox>', '</td>', '</tr>', '<tr>', '<td>', '<b>Result</b>', '</td>', '<td>', '<asp:Label ID=""lblResult"" runat=""server"" Text=""Label""></asp:Label>', '</td>', '</tr>', '<tr>', '<td>', '<asp:Button ID=""btnadd"" runat=""server"" Text=""Add"" OnClick=""btnadd_Click"" />', '</td>', '', '</tr>', '</table>', '</form>', '</body>', '</html>', 'using System;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Web;', 'using System.Web.UI;', 'using System.Web.UI.WebControls;', 'namespace CalculatorWebApplication', 'public partial class WebForm1 : System.Web.UI.Page', 'protected void Page_Load(object sender, EventArgs e)', '{', '}', 'protected void btnadd_Click(object sender, EventArgs e)', '{', 'CalculatorService.CalculatorWebServiceSoapClient client = new CalculatorService.CalculatorWebServiceSoapClient();', 'int result= client.Add(Convert.ToInt32(txtFirstNumber.Text),', 'Convert.ToInt32(txtSecondNumber.Text));', 'lblResult.Text = result.ToString();', '}']",[],[],"['|||Built-in Types (Basic):|||Data Types used by the Web Services are:|||Web Services uses the built-in C# data types like short, int, long, short, float, char, byte, string, and DateTime.|||Objects: WPF uses the object of the user-defined class. In spite of this thing that the class contains the methods, the class will not be possible to transmit to the client.|||Arrays: WPF uses the arrays of any supported data type (built-in or customs). We can also use the ArrayList in WPF.|||Enumerations: WPF supports enum. For the value of the enumeration, WPF uses the string name. WPF will not use integer.|||XmlNode: Objects which are based on the System.Xml.XmlNode represents the portion of the XML document. We can use the XmlNode to send the arbitrary XML.||||||We cannot have more than one [WebService]tag.|||Changes in the namespace will not affect the namespace.||||||""Web Service"" directive: This directive shows that the asmx page is a web service.|||""Language""=""C#"": This indicates that the C# language is used for the Service.|||""CodeBehind"": This property has not any role with the ASP.NET or web service. CodeBehind is the property of the Visual Studio. This property is used to map the asmx page with the code behind the page.|||""Class"" property contains the qualified name of the class. This is the entry point of the Service, just like the main () in C language.|||&&&|||Web Service is not dependent on any particular language.|||Web Service is a protocol Independent.|||Web Service is platform-independent.|||Web Service is known as the Stateless Architecture. These services are dependent only on the given input.|||Web Service is also Scalable.|||Web Service is based on the XML (Open, Text-Based Standard).||||||Web Services always use the open, text-based standard. Web service uses all those components even they are written in various languages for different platforms.|||Web Service promotes the modular approach of the programming so that the multiple organizations can communicate with the same web service.|||Web Services are easy to implement but expensive because they use the existing infrastructure, and we can repackage most of the applications as the Web Service.|||Web Service reduces the cost of enterprise application integration and B2B communications.|||Web Services are the interoperable Organization that contains the 100 vendors and promote them interoperability.||||||One of the limitations of the Web Services is that the SOAP, WSDL, UDDI requires the development.|||Supports to the interoperability is also the limitation of the Web Service.|||The limitation of web service is also royalty fees.|||If we want to use web services for the high-performance situation, in that case, web service will be slow.|||The use of web service increases the traffic on the network.|||The security level for Web Services is low.|||We use the standard procedure to describe the quality of particular web services.|||The standard for the Web Service is in the draft form.|||To retain the intellectual property of the specific standard by the vendor is also the limitation of the web service.||||||All the method which is exposed by the Web service.|||WSDL document contains the parameters and their types.|||WSDL document contains the return type of the methods.|||']"
101,['Events in C#'],"['The Event is something special that is going to happen. Here we will take an example of an event, where Microsoft launches the events for the developer. In this Event, Microsoft wants to aware the developer about the feature of the existing or new products. For this, Microsoft will use Email or other advertisement options to aware the developer about the Event. So, in this case, Microsoft will work as a publisher who raises the Event and notifies the developers about it. Developers will work as the subscriber of the Event who handles the Event.']","['https://www.javatpoint.com/regular-expression-in-c-sharp', 'https://www.javatpoint.com/web-services-in-c-sharp', 'https://www.javatpoint.com/regular-expression-in-c-sharp', 'https://www.javatpoint.com/web-services-in-c-sharp', 'https://www.javatpoint.com/regular-expression-in-c-sharp']",['https://static.javatpoint.com/csharp/images/events-in-c-sharp.png'],[],[],"['Key Points about the Events are:', 'Declaration of the Event', 'Syntax', 'Steps for implementing the Event', 'Declaration of the Event', 'Invokation of the Event', 'Hooking up the Event', 'Detach the Event', 'Syntax of Delegates', 'Example of Delegates']",[],"['The key points about the events are as:', 'public event EventHandler CellEvent;', 'For the declaration of the Event in the class, firstly, the event type of the delegate must be declared.', '\xa0 \xa0 \xa0 \xa0 \xa0 public delegate void CellEventHandler(object sender, EventArgs e);', 'public event CellEventHandler CellEvent;', 'if (CellEvent != null) CellEvent(this, e);', 'We can invoke the Event only from within the class where we declared the Event.', 'OurEventClass.OurEvent += new ChangedEventHandler(OurEventChanged);', 'OurEventClass.OurEvent -= new ChangedEventHandler(OurEventChanged);', 'Delegate can be declared using the delegate keyword which is followed by the signature', 'public delegate void PrintWord(int value);', 'Also, we can create the delegate object by using the new operator and specify the name of the method, as shown below:', 'Delegates can be declared, as shown below:']","['Delegates work as pointer to a function. It is a reference data type and it holds the reference of the method. System.Delegate class implicitly derived all the delegates.', 'The above PrintWord delegate can be used to point any method which has the same return type and declared parameters with PrintWord. Here we will take an example that declares and uses the PrintWord delegates.']","['Similarly, in C#, Events follow the same concept. In C#, Event can be subscriber, publisher, subscriber, notification, and a handler. Generally, the User Interface uses the events. Here we will take an example of Button control in Windows. Button performs multiple events such as click, mouseover, etc. The custom class contains the Event through which we will notify the other subscriber class about the other things which is going to happen. So, in this case, we will define the Event and inform the other classes about the Event, which contains the event handler.', 'The event is an encapsulated delegate. C# and .NET both support the events with the delegates. When the state of the application changes, events and delegates give the notification to the client application. Delegates and Events both are tightly coupled for dispatching the events, and event handling require the implementation of the delegates. The sending event class is known as the publisher, and the receiver class or handling the Event is known as a subscriber.', 'In the above example, we declared the PrintWord delegates, which accepts the int type parameter and returns the void. In the main() method, we declare the PrintWord type method and assigned the PrintNum name method. Now we will invoke the PrintWord delegate, which in-turn invokes the PrintNum method. In the same way, if the PrintWord delegates variable is assigned to the PrintMoney method, then this will invoke the PrintMoney method.']","['<access modifier> delegate <return type> <delegate_name>(<parameters>)', 'class Program1', 'public delegate void PrintWord(int value);', 'static void Main(string[] args)', 'PrintWord printDel = PrintNum;', '', '', 'printDel(100000);', 'printDel(200);', 'printDel = PrintMoney;', 'printDel(10000);', 'printDel(200);', 'public static void PrintNum(int num)', 'Console.WriteLine(""Number: {0,-12:N0}"",num);', 'public static void PrintMoney(int money)', 'Console.WriteLine(""Money: {0:C}"", money);', 'PrintWord printDel = new PrintWord(PrintNum);', 'public delegate void someEvent();', 'public organize event']",[],[],"['|||In C#, event handler will take the two parameters as input and return the void.|||The first parameter of the Event is also known as the source, which will publish the object.|||The publisher will decide when we have to raise the Event, and the subscriber will determine what response we have to give.|||Event can contain many subscribers.|||Generally, we used the Event for the single user action like clicking on the button.|||If the Event includes the multiple subscribers, then synchronously event handler invoked.|||']"
102,['Regular Expression in C#'],"['In C#, Regular Expression is used for the parsing and validation of the given text to match with the defined pattern (for example, an email address). The pattern can contain operators, characters literals, or constructs.']","['https://www.javatpoint.com/datetime-in-c-sharp', 'https://www.javatpoint.com/events-in-c-sharp', 'https://www.javatpoint.com/datetime-in-c-sharp', 'https://www.javatpoint.com/events-in-c-sharp', 'https://www.javatpoint.com/datetime-in-c-sharp']","['https://static.javatpoint.com/csharp/images/regular-expression-in-c-sharp.png', 'https://static.javatpoint.com/csharp/images/regular-expression-in-c-sharp2.png', 'https://static.javatpoint.com/csharp/images/regular-expression-in-c-sharp3.png']",[],"['Regular Expression', 'Regex Class', 'Regular Expression Example in C#', 'Regex Class method in C#', 'Regex Replace String Example in C#', 'Find the Duplicate Words in Regex C#']",[],[],"['Generally, the Regular Expressions are used for the parsing, finding the strings or validations, etc.', ""Now we will create a pattern from the regex. In this code we have to match the pattern with the word which is starting with the char 'M'."", 'Here we have a code which contain the long text having the author name which we have to be parsed.', 'Here we will use Matches method to find all the matches which returns the MatchCollection.', ""Now let us take an example to find the letter 'M'."", 'Here we are taking an example to validate the text whether the email is in proper format or not. For this we will use Regex class.', 'After the execution of the above code, we get the result, as shown below:', 'With the help of this example, we are trying to find the substring by using the regular expression pattern, which replaces the required values in C#.', 'After executing the above program, we will get the following output, as shown below:', 'By using the regular expression pattern, we can easily find out the duplicate words.', 'In this example, we are trying to find the duplicate word in the given string by using the Regex class method in C#.', 'The above example used the Regex. Matches method is used to find out the duplicate words by using the regular expression pattern (""\\b(\\w+?)\\s\\1\\b"").', 'After the execution of the above code, we will get the following output, as shown below:']","['To process the text with the regular Expression in .NET Framework, generally, we used the regular expression engine. In C#, Regular Expression is shown by the Regex.', 'System.Text.RegularExpressions namespace contains the Regex class. Regex Class has the string pattern as a parameter with the other optional parameter.', ""From the above example we tried to find the char 'M'. But here a situation is arising if the word will start with small 'm'. In this case, we will use RegexOption.IgnoreCase parameter so that the Regex will ignore the uppercase or lowercase."", 'From the above example, we are validating the input string, which is in a valid format or not. For this, we are using the Regex class. For the validation of the input text, we used the IsMatch method and the pattern of Regular Expression.', 'To perform the various operations on the input string, the Regex class contains different methods. The table is having the list of various methods of Regex in C#.', 'The above method of Regex class is used for the validation, replacement, or splitting the values of the string with the regular expression pattern, which is based on the requirements.', 'In the above example, we used the Regex. Replace method is used for finding and replacement of the special characters in a string with the space by using the regular expression pattern (""[^a-zA-Z0-9_]+"").', 'In the above example, the pattern of the Regular Expression (""[^a-zA-Z0-9_]+"") tried to match with the single character, which is not defined in the group of the character.']","['We used the Regular Expression to check whether the given string matches the pattern or not. Regular Expression or Regex is a sequence of characters that defines the pattern. The pattern can contain numbers, literals, operators, characters, etc. We used the Patterns to search the strings or files. Here we will see if the matches are found or not.', 'Here we are taking an example where we can use Regular Expression for checking the social security number, valid date of birth, for matching the full name where the first and last name are separated by the comma, for replacing the substring, for the correct email format, currency format and so on.', 'Regex class shows the regular expression engine in the .NET Framework. Regex class is used to parse a large amount of text for finding the specific character pattern. We can use the Regex class for the extraction, editing, for the replacement, or to delete the text of the substring.']","['string pattern = @""\\b[M]\\w+"";', 'Regex rgex = new Regex(pattern);', 'string authors = ""Ramesh chand, Rakeshwar"";', 'MatchCollection matchedAuthors = rg.Matches(authors);', 'To find the matches collection we will use the For loop // Print all matched authors', 'for (int count = 0; count < matchedAuthors.Count; count++)', 'Console.WriteLine(matchedAuthors[count]. Value);', 'string pattern1 = @""\\b[M]\\w+"";', 'Regex rg = new Regex(pattern1);', 'string Authors = ""Ramesh Chand,Rakeshwar"";', 'MatchCollection matchedAuthors = rg.Matches(Authors );', 'for (int count = 0; count < matchedAuthors.Count; count++)', 'Console.WriteLine(matchedAuthors[count].Value);', 'string pattern1 = @""\\b[m]\\w+"";', 'Regex rgex = new Regex(pattern, RegexOptions.IgnoreCase);', 'using System;', 'using System.Text.RegularExpressions;', 'namespace ConsoleApp1', 'class Program', 'static void Main(string[] args)', '{', 'Console.WriteLine(""Hello World!"");', 'string email = ""support@javatpoint.com"";', 'var result = Regex.IsMatch(email, @""^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$"");', 'Console.Write(""Is valid: {0} "", result);', 'Console.ReadLine();', '}', 'using System;', 'using System.Text.RegularExpressions;', 'namespace ConsoleApp1', 'class Program', 'static void Main(string[] args)', '{', 'string str = ""Hi,welcome@JavaTPoint.com"";', 'string result = Regex.Replace(str, ""[^a-zA-Z0-9_]+"", "" "");', 'Console.Write(""{0} "", result);', 'Console.ReadLine();', '}', 'using System;', 'using System.Text.RegularExpressions;', 'namespace ConsoleApp1', 'class Program1', 'static void Main(string[] args)', '{', 'string str1 = ""Welcome To to JavaTPoint. Here we can learn C# easily easily way"";', 'MatchCollection collection = Regex.Matches(str1, @""\\b(\\w+?)\\s\\1\\b"", RegexOptions.IgnoreCase);', 'foreach (Match m in collection)', '{', 'Console.WriteLine(""{0} (duplicates \'{1}\') at position {2}"", m.Value, m.Groups[1].Value, m.Index);', '}', 'Console.ReadLine();', '}']",[],"['Method|||Description&&&IsMatch|||We used the IsMatch method for finding out whether the given input string matches the regular expression pattern or not.&&&Matches|||Matches method is used to return the text, which matches with the regular expression pattern.&&&Replace|||Replace method is used to replace the text, which matches the regular expression pattern.&&&Split|||We used the Split method for splitting the string into the array of the substring at those positions, which matches with the regular expression pattern.']",[]
103,['DateTime in C#'],['We used the DateTime when there is a need to work with the dates and times in C#.'],"['https://www.javatpoint.com/type-casting-in-c-sharp', 'https://www.javatpoint.com/regular-expression-in-c-sharp', 'https://www.javatpoint.com/type-casting-in-c-sharp', 'https://www.javatpoint.com/regular-expression-in-c-sharp', 'https://www.javatpoint.com/type-casting-in-c-sharp']","['https://static.javatpoint.com/csharp/images/datetime-in-c-sharp1.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp2.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp3.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp4.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp5.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp6.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp7.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp8.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp9.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp10.png', 'https://static.javatpoint.com/csharp/images/datetime-in-c-sharp11.png']",[],"['Properties of DateTime in C#', 'Addition and Subtraction of the DateTime in C#', 'Searching of the Days in the Month', 'Comparison of two DateTime in C#', 'CompareTo Method', 'Formatting of the DateTime in C#', 'Get the Leap Year and Daylight-Saving Time', 'Conversion of string to the DateTime', 'Conversion of DateTime in C#']",[],[],"['The value of the DateTime is between the 12:00:00 midnight, January 1 0001 and 11:59:59 PM, December 31, 9999 A.D.', 'Here we will explain how to create the DateTime in C#.', 'We have different ways to create the DateTime object. A DateTime object has Time, Culture, Date, Localization, Milliseconds.', 'Here we have a code which shows the various constructor uses by the DateTime structure to create the DateTime objects.', 'The other properties of DateTime are:', 'Here we are taking an example of using the properties of the DateTime in the C# Code.', 'Here we are creating a code that will add 3 and subtract the 30 days from today and display the day on the console.', 'DateTime structure contains the methods to add years, days, hours, minutes, seconds.', 'To add the different components to the DateTime object Add method is used.', 'To find the number of days in the month, we used the static DaysInMonth method. This searching method [] takes the parameter in numbers from 1 to 12.', 'Here we will write a code through which we will find out the number of days in a particular month.', 'Here we will find out the number of days in Feb in 2020. The output will be 28 days.', 'With the same technique, we can find out the total number of days in a year. For that, we will use the method DaysInYear.', 'Now we will show the comparison of the two datetime objects in C#.', 'CompareTo method is used to compare the two dates. We will assign the DateTime or object in this method.', 'To compare the two DateTime object, we used the CompareTo method. Below we have a C# code to compare the DateTime object.', 'In C#, we can format the DateTime to any type of string format as we want.', 'Here we have a C# code that returns the array of the strings of all the possible standard formats.', 'We will show it with the code with the pattern in a table.', 'We will specify the format of the DateTime in the below C# Code. ', 'Now we will write a C# code for the DateTime format specifiers within the ToString() method.', 'Through the C# Code, we will get the Leap Year and Daylight-Saving Time.', 'Here we will take an example of C# to convert the DateTime to the specific type.']","['The DateTime has the Date and Time property. From DateTime, we can find the date and time. DateTime contains other properties as well, like Hour, Minute, Second, Millisecond, Year, Month, and Day.', 'For Addition and Subtraction, we can use the Add and Subtract method from the DateTime object. Firstly, we create the TimeSpan with the values of the date and time where we use the Add and Subtract methods.', 'Now we will create a code through which we can create the object of the DateTime and subtract another DateTime and Object of TimeSpan. In code, we will show the subtraction of only the hours, days, or other components from the DateTime.', 'The comparer static method is used to compare the object of the two datetime. If the objects of both DateTime is the same, then the result will be 0. If the first DateTime is earlier, then the result will be 0 else the first DateTime would be later.', 'For the formatting of the DateTime, we used the GetDateTimeFormats method, which returns all the possible DateTime formats for the current culture of the computer.', 'We can overload the GetDateTimeFormats method, which takes the format specifier as a parameter and converts the DateTime to that format. To get the desired format, we need to understand the format of the DateTime specifiers.', 'We can also do the formatting of the DateTime by passing the format specifier in the ToString() method of DateTime. Now we will write the C# code for the formatting of the DateTime using the ToString() method.', 'To convert the string to a DateTime object, we used the Parse method. In the Parse method, the passing string must have the correct format of the DateTime. For the conversion of the DateTime to the String, the ToString() method is used. \xa0']","['We can format the date and time in different formats by the properties and methods of the DateTime./p>\nThe value of the DateTime is between the 12:00:00 midnight, January 1 0001 and 11:59:59 PM, December 31, 9999 A.D.\nHere we will explain how to create the DateTime in C#.\nWe have different ways to create the DateTime object. A DateTime object has Time, Culture, Date, Localization, Milliseconds.\nHere we have a code which shows the various constructor uses by the DateTime structure to create the DateTime objects.\n\r\n// From DateTime create the Date and Time\r\n   DateTime DOB= new DateTime(19, 56, 8, 12, 8, 12, 23);\r\n// From String creation of DateTime\r\n            string DateString= ""8/12/1956 7:10:24 AM"";\r\n            DateTime dateFromString =\r\n                DateTime.Parse(DateString, System.Globalization.CultureInfo.InvariantCulture);\r\n            Console.WriteLine(dateFromString.ToString());\r\n// Empty DateTime  \r\n            DateTime EmpDateTime= new DateTime();\r\n// Just date  \r\n            DateTime OnlyDate= new DateTime(2002, 10, 18);\r\n// DateTime from Ticks  \r\n            DateTime OnlyTime= new DateTime(10000000); \r\n// Localization with DateTime\r\n            DateTime DateTimewithKind = new DateTime(1976, 7, 10, 7, 10, 24, DateTimeKind.Local); \r\n// DateTime with date, time and milliseconds  \r\n            DateTime WithMilliseconds= new DateTime(2010, 12, 15, 5, 30, 45, 100);\r\n\nProperties of DateTime in C#\nThe DateTime has the Date and Time property. From DateTime, we can find the date and time. DateTime contains other properties as well, like Hour, Minute, Second, Millisecond, Year, Month, and Day.\nThe other properties of DateTime are:\n\nWe can get the name of the day from the week with the help of the DayOfWeek property.\nTo get the day of the year, we will use DayOfYear property.\nTo get time in a DateTime, we use TimeOfDay property.\nToday property will return the object of the DateTime, which is having today\'s value. The value of the time is 12:00:00\nThe Now property will return the DateTime object, which is having the current date and time.\nThe Utc property of DateTime will return the Coordinated Universal Time (UTC).\nThe one tick represents the One hundred nanoseconds in DateTime. Ticks property of the DateTime returns the number of ticks in a DateTime.\nThe Kind property returns value where the representation of time is done by the instance, which is based on the local time, Coordinated Universal Time (UTC). It also shows the unspecified default value.\n\nHere we are taking an example of using the properties of the DateTime in the C# Code.\nExample:\n\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n\r\n            DateTime DateTimeProperty = new DateTime(1974, 7, 10, 7, 10, 24);\r\n            Console.WriteLine(""Day:{0}"", DateTimeProperty.Day);\r\n            Console.WriteLine(""Month:{0}"", DateTimeProperty.Month);\r\n            Console.WriteLine(""Year:{0}"", DateTimeProperty.Year);\r\n            Console.WriteLine(""Hour:{0}"", DateTimeProperty.Hour);\r\n            Console.WriteLine(""Minute:{0}"", DateTimeProperty.Minute);\r\n            Console.WriteLine(""Second:{0}"", DateTimeProperty.Second);\r\n            Console.WriteLine(""Millisecond:{0}"", DateTimeProperty.Millisecond);\r\n\r\n            Console.WriteLine(""Day of Week:{0}"", DateTimeProperty.DayOfWeek);\r\n            Console.WriteLine(""Day of Year: {0}"", DateTimeProperty.DayOfYear);\r\n            Console.WriteLine(""Time of Day:{0}"", DateTimeProperty.TimeOfDay);\r\n            Console.WriteLine(""Tick:{0}"", DateTimeProperty.Ticks);\r\n            Console.WriteLine(""Kind:{0}"", DateTimeProperty.Kind);\r\n        }\r\n    }\r\n}\r\n\nOutput:\n\nAddition and Subtraction of the DateTime in C#\nThe DateTime structure provides the methods to add and subtract the date and time to and from the DateTime object. We can add and subtract the date in the DateTime structure to and from the DateTime object. For the Addition and Subtraction in the DateTime, we use the TimeSpan structure.\nFor Addition and Subtraction, we can use the Add and Subtract method from the DateTime object. Firstly, we create the TimeSpan with the values of the date and time where we use the Add and Subtract methods.\nHere we are creating a code that will add 3 and subtract the 30 days from today and display the day on the console.\n\r\nusing System;\r\nusing System. Collections;\r\nusing System.Collections.Generic;\r\nusing System. Linq;\r\nusing System. Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n\r\n            DateTime Day = DateTime.Now;\r\n            TimeSpan Month = new System.TimeSpan(30, 0, 0, 0);\r\n            DateTime aDayAfterAMonth = Day.Add(Month);\r\n            DateTime aDayBeforeAMonth = Day.Subtract(Month);\r\n            Console.WriteLine(""{0:dddd}"", aDayAfterAMonth);\r\n            Console.WriteLine(""{0:dddd}"", aDayBeforeAMonth);\r\n        }\r\n    }\r\n}\r\n\nDateTime structure contains the methods to add years, days, hours, minutes, seconds.\nTo add the different components to the DateTime object Add method is used.\n\r\n// To Add the Years and Days  \r\n   day.AddYears(2);\r\n   day.AddDays(12);\r\n// Add Hours, Minutes, Seconds, Milliseconds, and Ticks  \r\n   Day.AddHours(4.25);\r\n   day.AddMinutes(15);\r\n   day.AddSeconds(45);\r\n   day.AddMilliseconds(200);\r\nday.AddTicks(5000);\r\n\nThe DateTime does not contain the subtract method. To subtract the component of the DateTime, we will use only the subtract method. For example: if we need to subtract the 12 days from the DateTime, we can create another object of the DateTime or TimeSpan object with 12 days. Now we will subtract this object from the DateTime. At the alternate of this, we can also use minus operator to subtract the DateTime or TimeSpan from the DateTime.\nNow we will create a code through which we can create the object of the DateTime and subtract another DateTime and Object of TimeSpan. In code, we will show the subtraction of only the hours, days, or other components from the DateTime.\n\r\nDateTime DOB = new DateTime(2000, 10, 20, 12, 15, 45);\r\nDateTime SubtractDate = new DateTime(2000, 2, 6, 13, 5, 15);\r\n\r\n// Use the TimeSpan with 10 days, 2 hrs, 30 mins, 45 seconds, and 100 milliseconds  \r\nTimeSpan ts = new TimeSpan(10, 2, 30, 45, 100);\r\n\r\n// Subtract the DateTime  \r\nTimeSpan Different = DOB.Subtract(SubtractDate);\r\nConsole.WriteLine(Different.ToString());\r\n\r\n// Subtract the TimeSpan  \r\nDateTime Different2 = DOB.Subtract(ts);\r\nConsole.WriteLine(Different2.ToString());\r\n\r\n// Subtract 10 Days by creating the object SubtractedDays\r\n DateTime SubtractedDays = new DateTime(DOB.Year, DOB.Month, DOB.Day - 10);\r\n Console.WriteLine(SubtractedDays.ToString());\r\n\r\n // Subtract hours, minutes, and seconds with creating the object HoursMinutesSeconds\r\n DateTime HoursMinutesSeconds = new DateTime(DOB.Year, DOB.Month, DOB.Day, DOB.Hour - 1, DOB.Minute - 15, DOB.Second - 15);\r\nConsole.WriteLine(HoursMinutesSeconds.ToString());\r\n\nSearching of the Days in the Month\nTo find the number of days in the month, we used the static DaysInMonth method. This searching method [] takes the parameter in numbers from 1 to 12.\nHere we will write a code through which we will find out the number of days in a particular month.\nHere we will find out the number of days in Feb in 2020. The output will be 28 days.\n\r\nint NumberOfDays = DateTime.DaysInMonth(2004, 2);\r\nConsole.WriteLine(NumberOfDays);\r\n\nWith the same technique, we can find out the total number of days in a year. For that, we will use the method DaysInYear.\n\r\nprivate int DaysInYear(int year)\r\n            {\r\n                int DaysIN= 0;\r\n                for (int j = 1; j <= 12; j++)\r\n                {\r\n                    DaysIN += DateTime.DaysInMonth(year, j);\r\n                }\r\n                return DaysIN;\r\n            }\r\n\nComparison of two DateTime in C#\nThe comparer static method is used to compare the object of the two datetime. If the objects of both DateTime is the same, then the result will be 0. If the first DateTime is earlier, then the result will be 0 else the first DateTime would be later.\nNow we will show the comparison of the two datetime objects in C#.\n\r\nusing System;\r\nusing System. Collections;\r\nusing System.Collections.Generic;\r\nusing System. Linq;\r\nusing System. Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n\r\n            DateTime DateOfFirst = new DateTime(2002, 10, 22);\r\n            DateTime DateOfSecond = new DateTime(2009, 8, 11);\r\n            int result1 = DateTime.Compare(DateOfFirst, DateOfSecond);\r\n\r\n            if (result1 < 0)\r\n                Console.WriteLine(""Date of First is earlier"");\r\n            else if (result1 == 0)\r\n                Console.WriteLine(""Both dates are same"");\r\n            else\r\n                Console.WriteLine(""Date of First is later"");\r\n\r\n        }\r\n    }\r\n}\r\n\nOutput:\n\nCompareTo Method\nCompareTo method is used to compare the two dates. We will assign the DateTime or object in this method.\nTo compare the two DateTime object, we used the CompareTo method. Below we have a C# code to compare the DateTime object.\n\r\nusing System;\r\nusing System. Collections;\r\nusing System.Collections.Generic;\r\nusing System. Linq;\r\nusing System. Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n\r\n            DateTime DateOfFirst = new DateTime(2001, 10, 20);\r\n            DateTime DateOfSecond = new DateTime(2009, 8, 11);\r\n            int ResultOfComparison = DateOfFirst.CompareTo(DateOfSecond);\r\n            if (ResultOfComparison < 0)\r\n                Console.WriteLine(""Date Of First is Earlier"");\r\n            else if (ResultOfComparison == 0)\r\n                Console.WriteLine(""Date of Both are same"");\r\n            else\r\n                Console.WriteLine(""Date of First is Later"");\r\n\r\n        }\r\n    }\r\n}\r\n\nOutput:\n\nFormatting of the DateTime in C#\nIn C#, we can format the DateTime to any type of string format as we want.\nFor the formatting of the DateTime, we used the GetDateTimeFormats method, which returns all the possible DateTime formats for the current culture of the computer.\nHere we have a C# code that returns the array of the strings of all the possible standard formats.\n\r\nusing System;\r\nusing System. Collections;\r\nusing System.Collections.Generic;\r\nusing System. Linq;\r\nusing System. Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n\r\n            DateTime DateOfMonth = new DateTime(2020, 02, 25);\r\n            string[] FormatsOfDate = DateOfMonth.GetDateTimeFormats();\r\n            foreach (string format in FormatsOfDate)\r\n                Console.WriteLine(format);\r\n\r\n        }\r\n    }\r\n} \r\n\nOutput:\n\n\n\nWe can overload the GetDateTimeFormats method, which takes the format specifier as a parameter and converts the DateTime to that format. To get the desired format, we need to understand the format of the DateTime specifiers.\nWe will show it with the code with the pattern in a table.\n\n\nCode\nPattern\n\n\n""d""\nShort date\n\n\n""D""\nLong date\n\n\n""f""\nFull date time. Short time.\n\n\n""F""\nFull date time. Long Time.\n\n\n""g""\nGenerate date time. Long Time.\n\n\n""G""\nGeneral date time. Long Time.\n\n\n""M"",""m.""\nMonth/day\n\n\n""O"",""o""\nRound trip date/time.\n\n\n""R"",""r""\nRFC1123\n\n\n""s""\nSortable date time.\n\n\n""t""\nSort Time\n\n\n""T""\nLong Time\n\n\n""u""\nUniversal sortable date time.\n\n\n""U""\nUniversal full date-time.\n\n\n""Y"",""y""\nYear, Month\n\n\nWe will specify the format of the DateTime in the below C# Code. \n\r\nusing System;\r\nusing System. Collections;\r\nusing System.Collections.Generic;\r\nusing System. Linq;\r\nusing System. Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n\r\n            DateTime FormatOfDate = new DateTime(2020, 02, 25);\r\n            // DateTime Formats: d, D, f, F, g, G, m, o, r, s, t, T, u, U,  \r\n            Console.WriteLine(""----------------"");\r\n            Console.WriteLine(""d Formats"");\r\n            Console.WriteLine(""----------------"");\r\n            string[] DateFormat = FormatOfDate.GetDateTimeFormats(\'d\');\r\n            foreach (string format in DateFormat)\r\n                Console.WriteLine(format);\r\n            Console.WriteLine(""----------------"");\r\n            Console.WriteLine(""D Formats"");\r\n            Console.WriteLine(""----------------"");\r\n            DateFormat = FormatOfDate.GetDateTimeFormats(\'D\');\r\n            foreach (string format in DateFormat)\r\n                Console.WriteLine(format);\r\n\r\n            Console.WriteLine(""----------------"");\r\n            Console.WriteLine(""f Formats"");\r\n            Console.WriteLine(""----------------"");\r\n            DateFormat = FormatOfDate.GetDateTimeFormats(\'f\');\r\n            foreach (string format in DateFormat)\r\n                Console.WriteLine(format);\r\n\r\n            Console.WriteLine(""----------------"");\r\n            Console.WriteLine(""F Formats"");\r\n            Console.WriteLine(""----------------"");\r\n            DateFormat = FormatOfDate.GetDateTimeFormats(\'F\');\r\n            foreach (string format in DateFormat)\r\n                Console.WriteLine(format);\r\n\r\n        }\r\n    }\r\n}\r\n\nOutput:\n\n\n\nWe can also do the formatting of the DateTime by passing the format specifier in the ToString() method of DateTime. Now we will write the C# code for the formatting of the DateTime using the ToString() method.\n\r\nConsole.WriteLine(DateOfFormat.ToString(""r""));\r\n\nNow we will write a C# code for the DateTime format specifiers within the ToString() method.\n\nGet the Leap Year and Daylight-Saving Time\nThrough the C# Code, we will get the Leap Year and Daylight-Saving Time.\n\r\nusing System;\r\nusing System. Collections;\r\nusing System.Collections.Generic;\r\nusing System. Linq;\r\nusing System. Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n            DateTime DateOfTime = new DateTime(2020, 02, 22);\r\n            Console.WriteLine(DateOfTime.IsDaylightSavingTime());\r\n            Console.WriteLine(DateTime.IsLeapYear(DateOfTime.Year));\r\n\r\n        }\r\n    }\r\n}\r\n\nOutput:\n\nConversion of string to the DateTime\nTo convert the string to a DateTime object, we used the Parse method. In the Parse method, the passing string must have the correct format of the DateTime. For the conversion of the DateTime to the String, the ToString() method is used. \xa0\n\r\nusing System;\r\nusing System. Collections;\r\nusing System.Collections.Generic;\r\nusing System. Linq;\r\nusing System. Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n            string DT = ""2020-02-04T20:12:45-5:00"";\r\n            DateTime NEWDt = DateTime.Parse(DT);\r\n            Console.WriteLine(NEWDt.ToString());\r\n\r\n        }\r\n    }\r\n}\r\n\nOutput:\n\nConversion of DateTime in C#\nThe structure of the DateTime is full of self-explanatory conversion, which converts the DateTime to the specific type. The methods are ToFileTime, ToLocalTime, ToLongDateString, ToBinary ,ToLongTimeString, ToOADate, ToShortDateString, ToShortTimeString, ToString, and ToUniversalTime.\nHere we will take an example of C# to convert the DateTime to the specific type.\n\r\nusing System;\r\nusing System. Collections;\r\nusing System.Collections.Generic;\r\nusing System. Linq;\r\nusing System. Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n            DateTime DOB = new DateTime(2020, 01, 22);\r\n            Console.WriteLine(""ToString: "" + DOB.ToString());\r\n            Console.WriteLine(""ToBinary: "" + DOB.ToBinary());\r\n            Console.WriteLine(""ToFileTime: "" + DOB.ToFileTime());\r\n            Console.WriteLine(""ToLocalTime: "" + DOB.ToLocalTime());\r\n            Console.WriteLine(""ToLongDateString: "" + DOB.ToLongDateString());\r\n            Console.WriteLine(""ToLongTimeString: "" + DOB.ToLongTimeString());\r\n            Console.WriteLine(""ToOADate: "" + DOB.ToOADate());\r\n            Console.WriteLine(""ToShortDateString: "" + DOB.ToShortDateString());\r\n            Console.WriteLine(""ToShortTimeString: "" + DOB.ToShortTimeString());\r\n            Console.WriteLine(""ToUniversalTime: "" + DOB.ToUniversalTime());\r\n\r\n        }\r\n    }\r\n}  \r\n\nOutput:\n\n\n\nNext TopicType Casting in C#\n\n\n\n← prev\nnext →\n\n\n', 'The DateTime structure provides the methods to add and subtract the date and time to and from the DateTime object. We can add and subtract the date in the DateTime structure to and from the DateTime object. For the Addition and Subtraction in the DateTime, we use the TimeSpan structure.', 'The DateTime does not contain the subtract method. To subtract the component of the DateTime, we will use only the subtract method. For example: if we need to subtract the 12 days from the DateTime, we can create another object of the DateTime or TimeSpan object with 12 days. Now we will subtract this object from the DateTime. At the alternate of this, we can also use minus operator to subtract the DateTime or TimeSpan from the DateTime.', 'The structure of the DateTime is full of self-explanatory conversion, which converts the DateTime to the specific type. The methods are ToFileTime, ToLocalTime, ToLongDateString, ToBinary ,ToLongTimeString, ToOADate, ToShortDateString, ToShortTimeString, ToString, and ToUniversalTime.']","['DateTime DOB= new DateTime(19, 56, 8, 12, 8, 12, 23);', 'string DateString= ""8/12/1956 7:10:24 AM"";', 'DateTime dateFromString =', 'DateTime.Parse(DateString, System.Globalization.CultureInfo.InvariantCulture);', 'Console.WriteLine(dateFromString.ToString());', 'DateTime EmpDateTime= new DateTime();', 'DateTime OnlyDate= new DateTime(2002, 10, 18);', 'DateTime OnlyTime= new DateTime(10000000);', 'DateTime DateTimewithKind = new DateTime(1976, 7, 10, 7, 10, 24, DateTimeKind.Local);', 'DateTime WithMilliseconds= new DateTime(2010, 12, 15, 5, 30, 45, 100);', 'using System;', 'using System.Collections;', 'using System.Collections.Generic;', 'using System.Linq;', 'using System.Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'DateTime DateTimeProperty = new DateTime(1974, 7, 10, 7, 10, 24);', 'Console.WriteLine(""Day:{0}"", DateTimeProperty.Day);', 'Console.WriteLine(""Month:{0}"", DateTimeProperty.Month);', 'Console.WriteLine(""Year:{0}"", DateTimeProperty.Year);', 'Console.WriteLine(""Hour:{0}"", DateTimeProperty.Hour);', 'Console.WriteLine(""Minute:{0}"", DateTimeProperty.Minute);', 'Console.WriteLine(""Second:{0}"", DateTimeProperty.Second);', 'Console.WriteLine(""Millisecond:{0}"", DateTimeProperty.Millisecond);', 'Console.WriteLine(""Day of Week:{0}"", DateTimeProperty.DayOfWeek);', 'Console.WriteLine(""Day of Year: {0}"", DateTimeProperty.DayOfYear);', 'Console.WriteLine(""Time of Day:{0}"", DateTimeProperty.TimeOfDay);', 'Console.WriteLine(""Tick:{0}"", DateTimeProperty.Ticks);', 'Console.WriteLine(""Kind:{0}"", DateTimeProperty.Kind);', '}', 'using System;', 'using System. Collections;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'DateTime Day = DateTime.Now;', 'TimeSpan Month = new System.TimeSpan(30, 0, 0, 0);', 'DateTime aDayAfterAMonth = Day.Add(Month);', 'DateTime aDayBeforeAMonth = Day.Subtract(Month);', 'Console.WriteLine(""{0:dddd}"", aDayAfterAMonth);', 'Console.WriteLine(""{0:dddd}"", aDayBeforeAMonth);', '}', 'day.AddYears(2);', 'day.AddDays(12);', 'Day.AddHours(4.25);', 'day.AddMinutes(15);', 'day.AddSeconds(45);', 'day.AddMilliseconds(200);', 'day.AddTicks(5000);', 'DateTime DOB = new DateTime(2000, 10, 20, 12, 15, 45);', 'DateTime SubtractDate = new DateTime(2000, 2, 6, 13, 5, 15);', 'TimeSpan ts = new TimeSpan(10, 2, 30, 45, 100);', 'TimeSpan Different = DOB.Subtract(SubtractDate);', 'Console.WriteLine(Different.ToString());', 'DateTime Different2 = DOB.Subtract(ts);', 'Console.WriteLine(Different2.ToString());', 'DateTime SubtractedDays = new DateTime(DOB.Year, DOB.Month, DOB.Day - 10);', 'Console.WriteLine(SubtractedDays.ToString());', 'DateTime HoursMinutesSeconds = new DateTime(DOB.Year, DOB.Month, DOB.Day, DOB.Hour - 1, DOB.Minute - 15, DOB.Second - 15);', 'Console.WriteLine(HoursMinutesSeconds.ToString());', 'int NumberOfDays = DateTime.DaysInMonth(2004, 2);', 'Console.WriteLine(NumberOfDays);', 'private int DaysInYear(int year)', '{', 'int DaysIN= 0;', 'for (int j = 1; j <= 12; j++)', '{', 'DaysIN += DateTime.DaysInMonth(year, j);', '}', 'return DaysIN;', '}', 'using System;', 'using System. Collections;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'DateTime DateOfFirst = new DateTime(2002, 10, 22);', 'DateTime DateOfSecond = new DateTime(2009, 8, 11);', 'int result1 = DateTime.Compare(DateOfFirst, DateOfSecond);', 'if (result1 < 0)', 'Console.WriteLine(""Date of First is earlier"");', 'else if (result1 == 0)', 'Console.WriteLine(""Both dates are same"");', 'else', 'Console.WriteLine(""Date of First is later"");', '}', 'using System;', 'using System. Collections;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'DateTime DateOfFirst = new DateTime(2001, 10, 20);', 'DateTime DateOfSecond = new DateTime(2009, 8, 11);', 'int ResultOfComparison = DateOfFirst.CompareTo(DateOfSecond);', 'if (ResultOfComparison < 0)', 'Console.WriteLine(""Date Of First is Earlier"");', 'else if (ResultOfComparison == 0)', 'Console.WriteLine(""Date of Both are same"");', 'else', 'Console.WriteLine(""Date of First is Later"");', '}', 'using System;', 'using System. Collections;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'DateTime DateOfMonth = new DateTime(2020, 02, 25);', 'string[] FormatsOfDate = DateOfMonth.GetDateTimeFormats();', 'foreach (string format in FormatsOfDate)', 'Console.WriteLine(format);', '}', 'using System;', 'using System. Collections;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'DateTime FormatOfDate = new DateTime(2020, 02, 25);', 'Console.WriteLine(""----------------"");', 'Console.WriteLine(""d Formats"");', 'Console.WriteLine(""----------------"");', ""string[] DateFormat = FormatOfDate.GetDateTimeFormats('d');"", 'foreach (string format in DateFormat)', 'Console.WriteLine(format);', 'Console.WriteLine(""----------------"");', 'Console.WriteLine(""D Formats"");', 'Console.WriteLine(""----------------"");', ""DateFormat = FormatOfDate.GetDateTimeFormats('D');"", 'foreach (string format in DateFormat)', 'Console.WriteLine(format);', 'Console.WriteLine(""----------------"");', 'Console.WriteLine(""f Formats"");', 'Console.WriteLine(""----------------"");', ""DateFormat = FormatOfDate.GetDateTimeFormats('f');"", 'foreach (string format in DateFormat)', 'Console.WriteLine(format);', 'Console.WriteLine(""----------------"");', 'Console.WriteLine(""F Formats"");', 'Console.WriteLine(""----------------"");', ""DateFormat = FormatOfDate.GetDateTimeFormats('F');"", 'foreach (string format in DateFormat)', 'Console.WriteLine(format);', '}', 'Console.WriteLine(DateOfFormat.ToString(""r""));', 'using System;', 'using System. Collections;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'DateTime DateOfTime = new DateTime(2020, 02, 22);', 'Console.WriteLine(DateOfTime.IsDaylightSavingTime());', 'Console.WriteLine(DateTime.IsLeapYear(DateOfTime.Year));', '}', 'using System;', 'using System. Collections;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'string DT = ""2020-02-04T20:12:45-5:00"";', 'DateTime NEWDt = DateTime.Parse(DT);', 'Console.WriteLine(NEWDt.ToString());', '}', 'using System;', 'using System. Collections;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp8', 'class Program', 'static void Main(string[] args)', '{', 'DateTime DOB = new DateTime(2020, 01, 22);', 'Console.WriteLine(""ToString: "" + DOB.ToString());', 'Console.WriteLine(""ToBinary: "" + DOB.ToBinary());', 'Console.WriteLine(""ToFileTime: "" + DOB.ToFileTime());', 'Console.WriteLine(""ToLocalTime: "" + DOB.ToLocalTime());', 'Console.WriteLine(""ToLongDateString: "" + DOB.ToLongDateString());', 'Console.WriteLine(""ToLongTimeString: "" + DOB.ToLongTimeString());', 'Console.WriteLine(""ToOADate: "" + DOB.ToOADate());', 'Console.WriteLine(""ToShortDateString: "" + DOB.ToShortDateString());', 'Console.WriteLine(""ToShortTimeString: "" + DOB.ToShortTimeString());', 'Console.WriteLine(""ToUniversalTime: "" + DOB.ToUniversalTime());', '}']",[],"['Code|||Pattern&&&""d""|||Short date&&&""D""|||Long date&&&""f""|||Full date time. Short time.&&&""F""|||Full date time. Long Time.&&&""g""|||Generate date time. Long Time.&&&""G""|||General date time. Long Time.&&&""M"",""m.""|||Month/day&&&""O"",""o""|||Round trip date/time.&&&""R"",""r""|||RFC1123&&&""s""|||Sortable date time.&&&""t""|||Sort Time&&&""T""|||Long Time&&&""u""|||Universal sortable date time.&&&""U""|||Universal full date-time.&&&""Y"",""y""|||Year, Month']",[]
104,['Type Casting in C#'],"['When the variable of one data type is changed to another data type is known as the Type Casting. According to our needs, we can change the type of data. At the time of the compilation, C# is a statically-typed i.e., after the declaration of the variable, we cannot declare it again. The value of the variable cannot be assigned to another type of variable unless we implicitly change the type of the variable.']","['https://www.javatpoint.com/listbox-control-in-c-sharp', 'https://www.javatpoint.com/datetime-in-c-sharp', 'https://www.javatpoint.com/listbox-control-in-c-sharp', 'https://www.javatpoint.com/datetime-in-c-sharp', 'https://www.javatpoint.com/listbox-control-in-c-sharp']","['https://static.javatpoint.com/csharp/images/type-casting-in-c-sharp1.png', 'https://static.javatpoint.com/csharp/images/type-casting-in-c-sharp2.png', 'https://static.javatpoint.com/csharp/images/type-casting-in-c-sharp3.png']",[],"['In C#, we can perform a different kinds of conversions.']","['Example:', 'Explicit Conversion', 'Example:', 'Conversion Operators']",[],"['To understand this conversion here, we are going to take an example.', 'Now we will do this conversion by applying the following code:', 'Conversion Operators have the following properties:', 'Now we will take an example that follows the following code.']","['Here we will take an example of the string data type. We cannot convert the string implicitly to the int. Therefore, if we declare the variable \'i\' as an int, we cannot assign the string value ""Hello"" into it.', ""Implicit Conversion: We can easily understand and use the implicit conversion. Here we are going to assign the integer to the double is known as the implicit conversion because we are haven't lost any data in this conversion."", 'We can do the explicit conversion by defining the method. Users will do the explicit conversion. Users will do the conversion as per their requirements. The compiler will do the execution as per our command.']","['However, we can face a situation when there is a need to copy the value of one variable into another variable or method parameter of another type. For example, we have a variable integer, and we need to pass it to a method parameter whose type is double. Or the situation can be to assign the class variable to the variable of the type of interface. These types of operations are called Type Conversion.', 'Conversion with the helper class: For the conversion of the non-compatible type like integer and System.DateTime objects or hexadecimal strings and byte arrays, we can use System.BitConversion class, System. Convert class and the Parse methods of the built-in numeric type like as int32 Parse.', 'Here we have two variable integer type value1 and value2. We are going to do the sum of two integer type value and store result in the long variable. Here this will not show any error, and we do not lose any data. This type of conversion is known as implicit conversion.']","['z = ""hii""; // error CS0029:  we cannot implicitly convert string type\' to \'integer\' type', 'Int value1=567;', 'Int value2=765;', 'Long sum;', 'sum=value1+value2', 'using System;', 'namespace ConsoleApp2', 'class SumProgramme', 'static void Main(string[] args)', '{', 'int value1 = 567;', 'int value2 = 765;', 'long summation;', 'summation = value1 + value2;', 'Console.WriteLine(""summation = "" + summation);', 'Console.ReadLine();', '}', 'using System;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace ConsoleApp2', 'class ProgramExplicit', 'static void Main(string[] args)', '{', 'double db = 7896.45;', 'int xy;', 'xy = (int)db;', 'Console.WriteLine(xy);', 'Console.ReadKey();', '}', 'using System;', 'using System.Collections.Generic;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'namespace UserDefinedConversion', 'class Program', 'public struct ImperialMeasurement', '{', 'public float feet;', 'public ImperialMeasurement(float r)', '{', 'this.feet = r;', '}', 'public static explicit operator ImperialMeasurement(int m)', '{', 'float ConversionResult = 3.28f * m;', 'ImperialMeasurement temp = new ImperialMeasurement(ConversionResult);', 'return temp;', '}', '}', 'static void Main(string[] args)', '{', 'Console.WriteLine(""Please enter a whole number measurement in meters"");', 'int nm = Convert.ToInt32(Console.ReadLine());', 'ImperialMeasurement im = (ImperialMeasurement)nm;', 'Console.WriteLine($""The measument of {nm} in meters is {im.feet} in feet "");', 'Console.ReadKey();', '}']",[],[],"['|||Implicit Conversion: For the implicit conversion, there is not any need for the special syntax. This type of conversion is safe; in this conversion, there is not any loss of the data. Implicit conversions include the conversion of the small type to large integral types, and from the derived class to the base class conversion.|||Explicit Conversion (Type Caste): Explicit conversion will be done with the cast operator (). We will do the casting when there is the situation of the data loss, or when the conversion is not succeeded. There can be any other reason for the explicit conversion. The example of the casting is the conversion of the numeric type to the less precision or smaller range. Explicit Conversion also includes the conversion of the base-class instance to the derived class.|||User-Defined Conversion: We can do this conversion by defining the method. We can use the technique to enable the explicit-implicit conversion between the custom type, which does not have any relationship with the base-class or derived-class.||||||Conversions declared as ""implicit"" will occur automatically when it is required.|||Conversions declared as ""explicit"" will require the cast to be called.|||All the conversions must be declared as positive.|||']"
105,['ListBox Control in C#'],"['The ListBox Control provides us a user interface that will display the List of the items. From there, the users can select one or more items from the List. We can use the ListBox to show the multiple columns, and these columns can contain images and other controls.']","['https://www.javatpoint.com/c-sharp-readline-method', 'https://www.javatpoint.com/type-casting-in-c-sharp', 'https://www.javatpoint.com/c-sharp-readline-method', 'https://www.javatpoint.com/type-casting-in-c-sharp', 'https://www.javatpoint.com/c-sharp-readline-method']","['https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp2.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp3.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp4.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp5.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp6.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp7.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp8.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp9.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp10.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp11.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp12.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp13.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp14.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp15.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp16.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp17.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp18.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp19.png', 'https://static.javatpoint.com/csharp/images/listbox-control-in-c-sharp20.png']",[],"['ListBox Control Creation in C#', 'Creating an Application in C# using the ListBox']","['ListBox Creation at the time of the designing', 'Dynamically approach to create the ListBox', 'Example:', 'Example 2.', 'Explanation of the Above Code', 'Properties of ListBox in C#', 'ListBox Name Property', 'Location, Height, Width and Size property of ListBox', 'Font of ListBox', 'Background Color and Foreground Color of the ListBox', 'Now we will show how to add the data in the listbox1 and import the data in ListBox2.', 'Remove the data from the ListBox', 'Adding the whole data in one go in the ListBox', 'Remove all the data from the ListBox', 'Showing the data of the ListBox in the GridView']",[],"['In our first approach, we will create the ListBox control at the time of the designing using the Windows Forms.', 'Step 1. To create the Dynamic ListBox in the first, we will create the instance of the ListBox class.', 'To create the object of the ListBox, we will write the below code:', 'Now we will write a code to add the item in the ListBox control and to show them in the List.', 'Now we will take another example of the creation of the ListBox item at the run time.', 'For this, as will follow the same steps as per the above code.', 'Step 1. In the first, we will create an object of the ListBox. For this, we will write the below code:', 'Step 2. In the next step, we will set the properties of the ListBox control. We will write the code for the location, width, height, etc.', 'Step 3. Now we will add the item in the ListBox at the run-time by using the below code.', 'Now we will write a code in C# to create the ListBox control in Windows Form.', 'For this, we will write the following code:', 'Here we are going to add the element in the ListBox, Remove the element and will show them in the GridView.', 'To design the Graphical User Interface, we will follow the following steps:', 'Step1. In the first, we will create a new project for the creation of the project; we will follow the next steps:', 'Click on New->Project, as shown in the below screenshot.', 'Step 3. After this, a Form will create as shown in the below screenshot:', 'After this, the page will look like, as shown below:', 'For this, we will do the below code:', 'Here we are going to show that the listbox1 containing the data.', 'After clicking on the Add button, data will be added to the listbox2 and gets deleted from the listbox1.', 'Here we are going to show how to remove the data from the listbox2.', 'For this, we will write the below code:', 'Before removing the data, the whole data is in the listbox2 and the listbox1 does not contain any value. The output will look like as shown below:', 'After clicking on the remove button, data is going to be deleted from the listbox 2 and added to the listbox1, as shown in the below screenshot:', 'To add the complete data from listbox1 to listbox2, we will write the following code as shown below:', 'Data in the listbox1 is shown as below:', 'After writing this code, the AddAll button will work, as shown below:', 'Here we will remove all the data from the listbox2 and add all the data in the listbox1.', 'To remove all the data from the Listbox, we will write the following code as shown below:', 'Here we will use GridView to show all the data of the ListBox2 after clicking on the finalize button.', 'To show the data in the GridView, we will write the following code:', 'After clicking on the Finalize button, confirmation message will display.', 'After clicking on yes, the aggregate data is displayed in the GridView as shown in the below screenshot:']","['For creating the ListBox, we will follow the two approaches in Windows Form. To create the ListBox control, either we can use the Forms Designer at the time of the designing, or we can use the ListBox class for creating control at the run time.', 'ListBox class shows the ListBox control in Windows form. For the run time execution to create the ListBox, firstly, we will create the instance of the ListBox class and set its properties and will add the ListtBox object to the Form Control.', 'The name property represents the unique name of the ListBox controls. We used this name in the code to access the controls. The below code sets and gets the name of the text of the ListBox control.', 'Location: The Location property contains a point that shows the starting position of the ListBox on the Form. We can also use the Left and Top properties to show the location of the control from the top-left corner of the Form.', 'Size: The size property shows the size of the control. We can also use the width and height properties instead of the size property. For this, we will write the following code to set the location, height, and width properties of the ListBox control.', 'To set the background and foreground color of the ListBox, we used the BackColor and Forecolor properties. After clicking on these properties in the property window, there will appear a color-dialog.', 'Step 2. After this, a new window will display, where we select the Visual C#->Windows Form Application->Name of the project(AddRemoveCreation) and click ok, as shown in the below screenshot.', 'Step 4. In the next step, we will Drag and Drop the ListBox from the toolbox. Here we are going to take two ListBox(ListBox1 and ListBox2) and Five buttons(Add, Remove, Add All, Remove All and Finalize).', 'Step 5. In the next step, we will change the text and name of the button by right-clicking on the button->choose properties->change the text name as shown in the below screenshot:', 'Step 6. After clicking on the properties, the property window will open where we will change the name of the button and the text on the button as shown in the below screenshot:', 'Step 7. After this, we are going to show the data after clicking on the finalize button in the GridView. For this, we will click on the Data->GridView.']","['To create the ListBox control, we simply drag the ListBox control from the toolbox and will drop it to the Form. After the drag and drop of Listbox, the Form will look like as below figure. When the ListBox is shown on the Form, now we will resize its size by using the mouse and will set its property and events.', 'Step 2. In the next step, we will set the properties of the ListBox control. For this we will write the following code. In the property we will set the Location, width, height, background color, foreground color, name and font properties of the ListBox, as shown below:', 'Step 3. When the properties are set with the ListBox control, in the next step we will add the ListBox to the Form. For this we will use the Form.Controls.Add method which will add the ListBox control to the Form control and will display it on the Form according to their location, and size.', 'Step 4. In the next step, we will add the ListBox to the Form. For this we will use the Forms.Controls.Add method which helps us to add the ListBox controls to the Forms control and displays it on the Form which is based on the location and size of the control.', 'Font property shows the font of the text of ListBox control. When we click on the font property in the properties window there, we can see the name of the Font, Size, and other option of the font. For this, we will write the following code, which sets the Font property at the run time.', 'For the application creation, we will design a User Interface where the interface contains the two listboxes(listbox1 and listbox2), five buttons which includes the different functionality i.e., Add the data from the first Listbox to the second Listbox, Remove data, Add All, Remove All, Finalize and a GridView where we will show the Finalize data.']","['ListBox List1 = new ListBox();', 'ListBox box = new ListBox();', 'box.Location = new Point(300, 110);', 'box.Size = new Size(160, 103);', 'box.ForeColor = Color.Purple;', 'box.Items.Add(765);', 'box.Items.Add(875);', 'box.Items.Add(345);', 'this.Controls.Add(box);', 'using System;', 'using System.Collections.Generic;', 'using System.ComponentModel;', 'using System.Data;', 'using System.Drawing;', 'using System.Linq;', 'using System.Text;', 'using System.Threading.Tasks;', 'using System.Windows.Forms;', 'namespace WindowsFormsApp2', 'public partial class Form1: Form', 'public Form1()', '{', 'InitializeComponent();', '', '}', 'private void Form1_Load(object sender, EventArgs e)', '{', 'ListBox box = new ListBox();', 'box.Location = new Point(300, 110);', 'box.Size = new Size(160, 103);', 'box.ForeColor = Color.Purple;', 'box.Items.Add(765);', 'box.Items.Add(875);', 'box.Items.Add(345);', 'this.Controls.Add(box);', '}', '', 'ListBox ListItem = new ListBox();', 'ListItem.Location = new System.Drawing.Point(15, 15);', 'ListItem.Name = ""ListItem"";', 'ListItem.Size = new System.Drawing.Size(350, 400);', 'ListItem.BackColor = System.Drawing.Color.Orange;', 'ListItem.ForeColor = System.Drawing.Color.Black;', 'ListItem.Items.Add(""Vaishali Tyagi"");', 'ListItem.Items.Add(""Samlesh Tyagi"");', 'ListItem.Items.Add(""Preeti Tyagi"");', 'ListItem.Items.Add(""Priyanka Tyagi"");', 'this.Controls.Add(ListItem);', 'using System;', 'using System.Collections.Generic;', 'using System.ComponentModel;', 'using System.Data;', 'using System.Drawing;', 'using System.Linq;', 'using System.Text;', 'using System.Threading.Tasks;', 'using System.Windows.Forms;', 'namespace WindowsFormsApp2', 'public partial class Form1: Form', 'public Form1()', '{', 'InitializeComponent();', '', '}', 'ListBox ListItem = new ListBox();', 'private void Form1_Load(object sender, EventArgs e)', '{', 'ListItem.Location = new System.Drawing.Point(15, 15);', 'ListItem.Name = ""ListItem"";', 'ListItem.Size = new System.Drawing.Size(350, 400);', 'ListItem.BackColor = System.Drawing.Color.Orange;', 'ListItem.ForeColor = System.Drawing.Color.Black;', 'ListItem.Items.Add(""Vaishali Tyagi"");', 'ListItem.Items.Add(""Samlesh Tyagi"");', 'ListItem.Items.Add(""Preeti Tyagi"");', 'ListItem.Items.Add(""Priyanka Tyagi"");', 'this.Controls.Add(ListItem);', '}', 'ListItem.Name = ""ListItem"";', 'ListItem.Location = new System.Drawing.Point(15, 15);', 'ListItem.Size = new System.Drawing.Size(350, 400);', 'ListItem.Font = new Font(""Georgia"", 16);', 'ListItem.BackColor = System.Drawing.Color.Orange;', 'ListItem.ForeColor = System.Drawing.Color.Black;', 'using System;', 'using System.Collections.Generic;', 'using System.ComponentModel;', 'using System.Data;', 'using System.Drawing;', 'using System.Linq;', 'using System.Text;', 'using System.Threading.Tasks;', 'using System.Windows.Forms;', 'namespace AddRemoveCreation', 'public partial class Form1: Form', 'private DataTable dtCourse = new DataTable();', 'private DataTable dtSelectedCourse = new DataTable();', 'public Form1()', '{', 'InitializeComponent();', '}', 'private void Form1_Load(object sender, EventArgs e)', '{', 'FillCouseTable();', 'SelectedCourseTable();', 'listBox1.DataSource = dtCourse;', 'listBox1.DisplayMember = ""CourseName"";', 'listBox2.DataSource = dtSelectedCourse;', 'listBox2.DisplayMember = ""CourseName"";', '}', 'private void FillCouseTable()', '{', 'dtCourse.Columns.Add(""CourseID"", typeof(int));', 'dtCourse.Columns.Add(""CourseName"");', 'dtCourse.Columns.Add(""CourseDuration"");', 'dtCourse.Rows.Add(1, ""Advance OOPS"", ""4 Months"");', 'dtCourse.Rows.Add(2, ""Data Structure"", ""5 Months"");', 'dtCourse.Rows.Add(3, ""Java"", ""6 Months"");', 'dtCourse.Rows.Add(4, ""C++"", ""3 Months"");', 'dtCourse.Rows.Add(5, ""C"", ""2 Months"");', '}', 'private void SelectedCourseTable()', '{', 'dtSelectedCourse.Columns.Add(""CourseID"", typeof(int));', 'dtSelectedCourse.Columns.Add(""CourseName"");', 'dtSelectedCourse.Columns.Add(""CourseDuration"");', '}', 'private void Addbtn_Click(object sender, EventArgs e)', '{', 'if(listBox1.Items.Count>0)', '{', 'dtSelectedCourse.ImportRow(dtCourse.Rows[listBox1.SelectedIndex]);', 'dtCourse.Rows[listBox1.SelectedIndex].Delete();', '}', '}', 'using System;', 'using System.Collections.Generic;', 'using System.ComponentModel;', 'using System.Data;', 'using System.Drawing;', 'using System.Linq;', 'using System.Text;', 'using System.Threading.Tasks;', 'using System.Windows.Forms;', 'namespace AddRemoveCreation', 'public partial class Form1: Form', 'private DataTable dtCourse = new DataTable();', 'private DataTable dtSelectedCourse = new DataTable();', 'public Form1()', '{', 'InitializeComponent();', '}', 'private void Form1_Load(object sender, EventArgs e)', '{', 'FillCouseTable();', 'SelectedCourseTable();', 'listBox1.DataSource = dtCourse;', 'listBox1.DisplayMember = ""CourseName"";', 'listBox2.DataSource = dtSelectedCourse;', 'listBox2.DisplayMember = ""CourseName"";', '}', 'private void FillCouseTable()', '{', 'dtCourse.Columns.Add(""CourseID"", typeof(int));', 'dtCourse.Columns.Add(""CourseName"");', 'dtCourse.Columns.Add(""CourseDuration"");', 'dtCourse.Rows.Add(1, ""Advance OOPS"", ""4 Months"");', 'dtCourse.Rows.Add(2, ""Data Structure"", ""5 Months"");', 'dtCourse.Rows.Add(3, ""Java"", ""6 Months"");', 'dtCourse.Rows.Add(4, ""C++"", ""3 Months"");', 'dtCourse.Rows.Add(5, ""C"", ""2 Months"");', '}', 'private void SelectedCourseTable()', '{', 'dtSelectedCourse.Columns.Add(""CourseID"", typeof(int));', 'dtSelectedCourse.Columns.Add(""CourseName"");', 'dtSelectedCourse.Columns.Add(""CourseDuration"");', '}', '', 'private void Removebtn_Click(object sender, EventArgs e)', '{', 'if (listBox2.Items.Count > 0)', '{', 'dtCourse.ImportRow(dtSelectedCourse.Rows[listBox2.SelectedIndex]);', 'dtSelectedCourse.Rows[listBox2.SelectedIndex].Delete();', '}', '}', 'using System;', 'using System.Collections.Generic;', 'using System.ComponentModel;', 'using System.Data;', 'using System.Drawing;', 'using System.Linq;', 'using System.Text;', 'using System.Threading.Tasks;', 'using System.Windows.Forms;', 'namespace AddRemoveCreation', 'public partial class Form1: Form', 'private DataTable dtCourse = new DataTable();', 'private DataTable dtSelectedCourse = new DataTable();', 'public Form1()', '{', 'InitializeComponent();', '}', 'private void Form1_Load(object sender, EventArgs e)', '{', 'FillCouseTable();', 'SelectedCourseTable();', 'listBox1.DataSource = dtCourse;', 'listBox1.DisplayMember = ""CourseName"";', 'listBox2.DataSource = dtSelectedCourse;', 'listBox2.DisplayMember = ""CourseName"";', '}', 'private void FillCouseTable()', '{', 'dtCourse.Columns.Add(""CourseID"", typeof(int));', 'dtCourse.Columns.Add(""CourseName"");', 'dtCourse.Columns.Add(""CourseDuration"");', 'dtCourse.Rows.Add(1, ""Advance OOPS"", ""4 Months"");', 'dtCourse.Rows.Add(2, ""Data Structure"", ""5 Months"");', 'dtCourse.Rows.Add(3, ""Java"", ""6 Months"");', 'dtCourse.Rows.Add(4, ""C++"", ""3 Months"");', 'dtCourse.Rows.Add(5, ""C"", ""2 Months"");', '}', 'private void SelectedCourseTable()', '{', 'dtSelectedCourse.Columns.Add(""CourseID"", typeof(int));', 'dtSelectedCourse.Columns.Add(""CourseName"");', 'dtSelectedCourse.Columns.Add(""CourseDuration"");', '}', 'private void AddAllbtn_Click(object sender, EventArgs e)', '{', 'if(listBox1.Items.Count>0)', '{', 'int count = dtCourse.Rows.Count;', 'for(int i=count-1;i>=0;i--)', '{', 'dtSelectedCourse.ImportRow(dtCourse.Rows[listBox1.SelectedIndex]);', 'dtCourse.Rows[listBox1.SelectedIndex].Delete();', '}', '}', '}', 'using System;', 'using System.Collections.Generic;', 'using System.ComponentModel;', 'using System. Data;', 'using System. Drawing;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'using System.Windows.Forms;', 'namespace AddRemoveCreation', 'public partial class Form1: Form', 'private DataTable dtCourse = new DataTable();', 'private DataTable dtSelectedCourse = new DataTable();', 'public Form1()', '{', 'InitializeComponent();', '}', 'private void Form1_Load(object sender, EventArgs e)', '{', 'FillCouseTable();', 'SelectedCourseTable();', 'listBox1.DataSource = dtCourse;', 'listBox1.DisplayMember = ""CourseName"";', 'listBox2.DataSource = dtSelectedCourse;', 'listBox2.DisplayMember = ""CourseName"";', '}', 'private void FillCouseTable()', '{', 'dtCourse.Columns.Add(""CourseID"", typeof(int));', 'dtCourse.Columns.Add(""CourseName"");', 'dtCourse.Columns.Add(""CourseDuration"");', 'dtCourse.Rows.Add(1, ""Advance OOPS"", ""4 Months"");', 'dtCourse.Rows.Add(2, ""Data Structure"", ""5 Months"");', 'dtCourse.Rows.Add(3, ""Java"", ""6 Months"");', 'dtCourse.Rows.Add(4, ""C++"", ""3 Months"");', 'dtCourse.Rows.Add(5, ""C"", ""2 Months"");', '}', 'private void SelectedCourseTable()', '{', 'dtSelectedCourse.Columns.Add(""CourseID"", typeof(int));', 'dtSelectedCourse.Columns.Add(""CourseName"");', 'dtSelectedCourse.Columns.Add(""CourseDuration"");', '}', 'private void RemoveAllbtn_Click(object sender, EventArgs e)', '{', 'if (listBox2.Items.Count > 0)', '{', 'int count = dtSelectedCourse.Rows.Count;', 'for (int i = count - 1; i >= 0; i--)', '{', 'dtCourse.ImportRow(dtSelectedCourse.Rows[listBox2.SelectedIndex]);', 'dtSelectedCourse.Rows[listBox2.SelectedIndex].Delete();', '}', '', '}', '}', 'using System;', 'using System.Collections.Generic;', 'using System.ComponentModel;', 'using System. Data;', 'using System. Drawing;', 'using System. Linq;', 'using System. Text;', 'using System.Threading.Tasks;', 'using System.Windows.Forms;', 'namespace AddRemoveCreation', 'public partial class Form1: Form', 'private DataTable dtCourse = new DataTable();', 'private DataTable dtSelectedCourse = new DataTable();', 'public Form1()', '{', 'InitializeComponent();', '}', 'private void Form1_Load(object sender, EventArgs e)', '{', 'FillCouseTable();', 'SelectedCourseTable();', 'listBox1.DataSource = dtCourse;', 'listBox1.DisplayMember = ""CourseName"";', 'listBox2.DataSource = dtSelectedCourse;', 'listBox2.DisplayMember = ""CourseName"";', '}', 'private void FillCouseTable()', '{', 'dtCourse.Columns.Add(""CourseID"", typeof(int));', 'dtCourse.Columns.Add(""CourseName"");', 'dtCourse.Columns.Add(""CourseDuration"");', 'dtCourse.Rows.Add(1, ""Advance OOPS"", ""4 Months"");', 'dtCourse.Rows.Add(2, ""Data Structure"", ""5 Months"");', 'dtCourse.Rows.Add(3, ""Java"", ""6 Months"");', 'dtCourse.Rows.Add(4, ""C++"", ""3 Months"");', 'dtCourse.Rows.Add(5, ""C"", ""2 Months"");', '}', 'private void SelectedCourseTable()', '{', 'dtSelectedCourse.Columns.Add(""CourseID"", typeof(int));', 'dtSelectedCourse.Columns.Add(""CourseName"");', 'dtSelectedCourse.Columns.Add(""CourseDuration"");', '}', 'private void Finalizebtn_Click(object sender, EventArgs e)', '{', 'DialogResult dialog=MessageBox.Show(""Are you sure you want to finalize the selected course"", ""Confirmation Message"", MessageBoxButtons.YesNo, MessageBoxIcon.Question);', 'if(dialog==DialogResult.Yes)', '{', 'dataGridView1.DataSource = dtSelectedCourse;', 'dataGridView1.Enabled = false;', 'dataGridView1.Columns[0].Visible = false;', 'dataGridView1.RowHeadersVisible = false;', '}', 'else', '{', 'MessageBox.Show(""Please Select Atleast one course"",""Information Message"", MessageBoxButtons.YesNo, MessageBoxIcon.Information);', '}', '}']",[],[],[]
106,['C# ReadLine() Method'],"['The Console.WriteLine() is a method used in C# to print the entire statement of a single line and transfer control to the next line of the console. Similar to the Console.WriteLine(), the ReadLine() method is used to read the entire line of string or statement value from the user until the Enter key is pressed to transfer control to the next line. In this section, we will understand the ReadLine(), Read() and Readkey() method in details.']","['https://www.javatpoint.com/design-patterns-c-sharp', 'https://www.javatpoint.com/listbox-control-in-c-sharp', 'https://www.javatpoint.com/https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/design-patterns-c-sharp', 'https://www.javatpoint.com/listbox-control-in-c-sharp', 'https://www.javatpoint.com/design-patterns-c-sharp']","['https://static.javatpoint.com/csharp/images/c-sharp-readline-method.png', 'https://static.javatpoint.com/csharp/images/c-sharp-readline-method2.png', 'https://static.javatpoint.com/csharp/images/c-sharp-readline-method3.png', 'https://static.javatpoint.com/csharp/images/c-sharp-readline-method4.png', 'https://static.javatpoint.com/csharp/images/c-sharp-readline-method5.png']",[],['Console.ReadLine() Method'],"['Read() Method', 'ReadKey()']",[],"['The method throws the following exceptions:', ""Example 1: Let's write a program that takes an input from the user using the ReadLine() method."", 'Program.cs', ""Example 2: Write a program to print the user's first and last name using the ReadLine() function in C#."", 'Program2.cs', ""Let's write a program to understand the use of the Read() method in C# to print a character."", 'Program4.cs', 'Program5.cs']","['In C#, the ReadLine() method is a commonly used method or function to take an input from the user until the enter key is pressed. In other words, it is a method that reads each line of string or values from a standard input stream.', 'The ReadKey() method is used to get the next character, or the user presses any key to exit the program. It holds the screen until the user presses any key from the keyboard. The pressed key will be displayed on the console.']","['It is a predefined method of the Console class (System Namespace). The Console.ReadLine() method reads and only returns the string from the stream output device (console) until a newline character is found. If we want to read a character or numeric value from the user, we need to convert the string to the appropriate data sets.', 'The Read() method in C# is used to read a single character from the user. It is different from the ReadLine() method because the readLine() method receives each line input from the user until the line is finished and control transfer to the next statement to read strings.']","['public static string ReadLine ();', 'using System; // Define the System package', 'namespace ConsoleApp3 // Project name or Folder', 'class Program', 'static void Main(string[] args) // Defining the main function', '{', 'string name; // string variable name', 'Console.WriteLine(""Hello, what is your name?"");', 'name = Console.ReadLine(); // takes an input from the user', 'Console.WriteLine(""Hi! ""+ name + "" Welcome to the JavaTpoint""); // print the output', '}', 'using System;', 'namespace ConsoleApp3', 'class Program2', 'static void Main(string[] args)', '{', 'string fname, lname; // string variables', 'Console.Write(""Please, Enter your first Name : "");', 'fname = Console.ReadLine(); // takes the first name from the user', 'Console.Write(""Please, Enter Your Last Name : "");', 'lname = Console.ReadLine(); // takes the second name from the user', 'Console.WriteLine(""Your Full Name is : "" + fname + "" "" + lname);', '}', 'using System; // Define the System package', 'namespace ConsoleApp3', 'class Program4', 'static void Main(string[] args)', '{', 'char ch;', 'Console.Write(""Enter the characters ""); // Cosole.Write() print the same line statement.', 'ch = Convert.ToChar(Console.Read()); // Read a single character from the user.', 'Console.WriteLine(""You have entered the character "" + ch); //print the complete line', '}', 'using System; // Define the System package', 'namespace ConsoleApp3', 'class Program5', 'static void Main(string[] args)', '{', 'DateTime dt = DateTime.Now; // DateTime.Now() print the current time', 'Console.WriteLine("" The Current Date and Time is : "" + dt);', 'Console.Write(""Press any key or Enter to exit from the Console Screen"");', 'Console.ReadKey(); // enter any key to exit from the console screen.', '}']",[],[],['|||IOException: It occurs if an I/O error arises.|||OutOfMemoryException: It occurs if there is insufficient memory to allocate a buffer to return a string.|||ArgumentOutOfRangeException: It occurs if the number of characters in the next line that is greater than MaxValue.|||']
107,['Design Patterns C#'],"[""In this article, we would be discussing various Design Patterns in C# using different subcategories enshrined in them. We would be starting by gaining absolute knowledge from scratch and how different types of Design Patterns play different roles in solving various problems. Let's get started.""]","['https://www.javatpoint.com/c-sharp-operator-overloading', 'https://www.javatpoint.com/c-sharp-readline-method', 'https://www.javatpoint.com/https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/c-sharp-operator-overloading', 'https://www.javatpoint.com/c-sharp-readline-method', 'https://www.javatpoint.com/c-sharp-operator-overloading']","['https://static.javatpoint.com/csharp/images/design-patterns-c-sharp1.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp2.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp3.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp4.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp5.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp6.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp7.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp8.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp9.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp10.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp11.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp12.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp13.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp14.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp15.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp16.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp17.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp18.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp19.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp20.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp21.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp22.png', 'https://static.javatpoint.com/csharp/images/design-patterns-c-sharp23.png']",[],"['What are Design Patterns?', 'Importance of Design Patterns', 'Creational Design Patterns', 'Structural Design Patterns', 'Behavioral Design Patterns', 'Summary']",[],[],"['This allows collaboration with all the interfaces that are found incompatible with the solution-based approach.', 'This will let you iterate over the collection or list of problematic patterns without having to expose the underlying representation.', 'It simply hides the implementation details of the object and maintains the actions like saving and restoring the previous state.', 'It allows us to interchange the objects by putting them into different classes through a native family of algorithms.', 'It simply separates the objects which operate on the algorithm assigned to it.']","['Factory Method is mainly used to provide creational objects in the sub-class and these sub-classes are allowed to alter the type of the objects that would be created.', 'Abstract factory pattern let us produce families of multiple related objects without specifying which classes they belong. They remain totally under the hood.', 'Builder pattern will let us produce families of multiple related objects without specifying which classes they belong to. They remain totally under the hood.', 'Prototype design pattern will let us copy the existing objects while implementing them without having to be dependent completely on the classes defined.', 'As the name suggests, this pattern ensures that a class should have only one instance with the condition of providing a global access point to the instance.', 'It allows to split a large class or set into several small fragments or closely related classes based on the hierarchies. It can be called an abstractional implementation where these small classes are rationally and independently dealt with.', 'The composite structure allows us to deal with the objects by composing them in the form of the tree structure and splitting out the nodes and treating them as individual objects to drive a solution-based mechanism.', 'The decorator enables to attach various new behaviors to the objects. It does so by covering up these objects in special wrapper objects followed by the behavior contained in them.', 'The facade offers a simple interface and exposure to the library or a framework by managing to portray the effective solutions with the enhancement in the interface no matter what framework we are using.', 'Flyweight allows us to fit more objects into the RAM. This is done by sharing a common part of the state that is found between multiple objects rather than having to have to store all the data for each object.', 'It provides a different way or a substitute for another object. It offers a placeholder for the proxy that controls the access of the original objects. The requests are therefore processed either before or after the original object gets allowed.', 'It simply reduces the dependencies causing chaos by stopping direct communication between the objects and in turn forces them to collaborate via a mediator object.', 'It helps to define a mechanism for a subscription that eventually notifies the objects about any events that may occur when they are out on the observation.', 'It allows to change the whole state of the object there exist some internal changes in the state. It might appear like an object that has changed its class.', 'It enables overriding of the subclass over some predefined phases of an algorithm without having to alter the superclass defying the skeleton of the proposed algorithm.']","[""We often get stuck at loopholes of some specific problems that cannot find our way around. We also fail to realize what exactly can make a sample piece of code more efficient in terms of speed and agility. These problems are highly generic while developing applications in C# because of their dynamic and complex nature. That's where Design patterns play a major role in identifying gaps and opportunities to resolve this kind of issue."", 'Design Patterns however are general solution providers or they can be termed as flexible solution makers for commonly arising design pattern problems. In the world of Object-Oriented Programming, it is a provider of a reusable solution that usually occurs regularly in application development. Design Pattern provides a template or descriptional approach on how to solve a problem arising in multiple situations.', ""Each design pattern in C# or any other hardcore programming languages portrays a special problem that shoots out over and over again in a specific environment and the solution to these problems in identifying the agility, simplicity, and complexity in generating an optimal solution that solves millions of problems with just one solution is what the purpose of Design Pattern's existence. To be precise, it is a pattern language to all such problems."", ""To be specific about patterns, the choice of opting for a certain pattern in C# is not confined to solving only a single problem. Patterns are so efficient that they can solve millions of problems with just a few lines of code. Also, an approach to opt for a design pattern depends on the sole nature of the problem as well as the individual needs. Moreover, almost all the developers are well aware of Design Patterns. They know how powerful this tool is. It is therefore very crucial to understand that design patterns cannot be mugged up by memorizing properties, methods, and classes rather it is important to develop a healthy approach to implement these patterns' ineffective usage to get desired results. It is also important to realize the implementation of certain methods to a certain type of problem and the continuous practice would involve addressing the best-suited design."", 'There are although plenty of design patterns in C# approximately 23 which are also known as Gang of Four. Since we have understood how important these patterns are, let us proceed to discover these patterns in an absolute structured manner. Consider the below images:', 'Creational Design Patterns offer an effective and dynamically powered mechanism that channels the proximity of code reusability and enhances flexibility so that problems can be solved in a wider arena. The wider the arena the more visible it is to find it and solve it. Creational Design Patterns involve various sub-categories that have been interestingly discussed below.', 'Structural Design Patterns offer the flexibility of constructing objects and classes in a large structure so that they can be deal with larger problems arising at a certain instance. This design pattern ensures that all the objects and classes are assembled to form a large structure without hampering the efficiency and keeping the flexibility on point. It consists of various sub-categories as shown below.', 'Behavioral Design Patterns are strictly confined to strategic or algorithmic approaches. This pattern is mainly concerned with the approach of sharing or putting responsibilities between different objects. This pattern can be categorized into various sub-categories as shown below.', 'It passes the requests to the chain of handlers. When the request is received by these handlers in any event, these handlers decide whether they should be passed to the request to another handler in the chain or process the currently received request.', 'It turns the requests into standalone objects and these objects contain all the data of the request being taken into consideration. Later this request is passed as a method argument for processing and supporting operations which are undoable or queued.', 'Design patterns play a crucial role in determining the solutions to those problems that require ultimate efficiency and progress at each step. They are not just confined to solve issues related to a certain level of the problem occurring at regular intervals, but also help the developers in thinking like a computer and how to approach a problem.', ""In this tutorial, we saw how dynamic these patterns are and to extend they can be implemented depending on the scenarios. We also got a clear idea of what exactly the patterns are leaned out different subcategories of the discussed three patterns. However, there's another catch where things turn fetal for developers and design patterns come to the rescue. Therefore, it can be concluded in a shorter sentence that design patterns are smart and efficient code snippets that are reusable for millions of commonly arising issues in C#. Developers who are hooked to C# are always aware of the importance of design patterns with C# being a dynamic programming language that needs the massive support of these solution-based patterns to cope with day-to-day issues.""]",[],[],[],[]
108,['C# Operator Overloading'],['Overloading is generally defined as a process of implementing popular'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/design-patterns-c-sharp', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/design-patterns-c-sharp', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/csharp/images/c-sharp-operator-overloading.png'],[],"['Operator Overloading Techniques in C#', 'Unary Operator Overloading', 'Binary Operator Overloading', 'Operator overloading & Inheritance', 'Equality Operator Overloading', 'Summary']",['Syntax'],[],"['The general forms of operator overloading in the case of unary operator follows the syntax given below.', 'Consider the following program that displays how unary operators inside a class Complex can be overloaded.', 'Consider the following example code that shows how binary operator overloading works.']","[""Operator overloading in C# can be done using different forms of operators. But before proceeding to the techniques, let's consider the validations of operators and how are they used while performing operator overloading.""]","['Object-oriented programming concepts such as Polymorphism, which means one name having different forms and implementations. It allows the variables or the object to take different kinds of forms while executing the code. It is mainly used when you want the method property not to be similar to the given arguments, rather want a different order of execution when one name can be used with different types of execution methods and properties. This can be achieved in a program with different types of parameters and their count. There are various types of operator overloading methods in C#. You will learn all such methods in this tutorial conveniently.', ""The operator is usually is a keyword that is used while implementing operator overloading. It is important to note that the return type of the overloaded operator cannot be kept void. It means that while performing operator overloading, the preference is always in the over-defined implementations' hands. There is no preference given to predefined implementations."", ""Therefore, the overloaded methods should always have a different set of arguments. Their order and number should not be the same. They are similar to any other method, but in the case of user-defined methods, the operator's precedence and syntax cannot be changed. The left one is called a member in binary operators, while the right is an object called a parameter. You will understand these concepts once you go through the implementation for the same."", ""Another important instance to consider is that in C#, there's a special function known as the operator function. This function or method must always be static and public. It consists of only value arguments. The outer and the reference parameters are usually not allowed as arguments in operator functions. The general form of applying an operator function follows the following syntax."", ""Here, the op is the operator used to overload, and the operator is the only needed keyword. In the case of a unary operator, you would pass only one argument and two-argument for the binary operator. It is also important to note that atleast one argument should be user-defined or a struct type or a class. Let's see how to implement all these concepts."", 'Here, the return type can be anything, but it should not be void for the operators like +,-, ~ and .(dot). The return type of this operator should be either an integer or a Boolean type. It is important to note that the Boolean operators roll out true and false and hence can be overloaded only as pairs. A compilation error would occur if not done because a class generally declares this operator without declaring the other.', 'To overload a binary operator, you must seek two arguments. You need to ensure that one of the operators should be of type class or struct where the operator is defined. As previously discussed, a binary operator cannot return void, but it can return all other types of values while implementing overloading. The general form of operator overloading in binary operators can be shown using the following syntax.', 'It is important to keep a note that operators such as ==. !=, <>, <=, >= are only overloaded as pairs. When a binary arithmetic operator is overloaded using them, the assignment operators will automatically get overloaded. For instance, if you overload the + operator, it gets implicitly overloaded as += operator too.', ""Another instance is that even if you declare the overloaded operators as static, they will inherit the derived class. This happens because the operator's declaration requires it to be struct or class where the operator is being declared. It facilitates the operator's signature. Thus, it is not possible for an operator previously declared in the derived class to hide an operator present in the parent class already. Hence, the new modifier is not an option to consider since they are not allowed while declaring the operator. This instance can be shown using the following code snippet given below."", 'You might have already been familiar with all the user-defined classes that inherit Syste.object from the Syste.object.Equals() method by default, in C#. The reference-based comparison is provided by the Equals() method. But there is a possibility that this method can override the methods residing inside the class defined by the user. Hence, value-based comparison can be easily achieved by using this method. This is how the Equality operator is operated. To overload this operator, you need to follow the following code snippet shown below.', 'In the above program, the results are displayed as ""NOT OJ"" and ""OK1"". This usually means that by default, the Equals() method is performing a referential comparison. It is important to note that the value of the objects C2 and C1 are the same in the above code, but they have different preferences in the memory address. But if you carefully note, the C2 and C3 share the same memory reference. This is how the Equals() method implements equality operator overloading. In C#, it is also possible to override the Equals() method even though it might be present in any class defined by the user to achieve value-based comparison. This statement can be supported using the following code snippet shown below.', 'In this tutorial, you learned about the overall methods that are generally used to implement operator overloading in C#. You came across certain instances where operator overloading is implemented using unary, binary and equality operators. You might also have been familiar by now that various operators while implementing C# restrict the flow of program hence you need to understand where they outlay those conditions. Also, while implementing operator overloading in C#, you need to be very curious to understand what is the workflow of the data being rolled out while implementation and how one form of data can deliver different kinds of outputs.']","['public static classname  operator op (parameters)', 'For Unary Operator', 'public static classname operator op (t)', 'For Binary Operator', 'public static classname operator op (t1, t2)', 'public static return_type operator op (argument list)', 'public static return_type operator op (Type t)', 'using System;', 'class Complex', 'private int x;', 'private int y;', 'public Complex()', '{', '}', 'public Complex(int i, int j)', '{', 'x = i;', 'y = j;', '}', 'public void ShowXY()', '{', 'Console.WriteLine(""{0} {1}"", x, y);', '}', 'public static Complex operator -(Complex c)', '{', 'Complex temp = new Complex();', 'temp.x = -c.x;', 'temp.y = -c.y;', 'return temp;', '}', 'class MyClient', 'public static void Main()', '{', 'Complex c1 = new Complex(10, 20);', 'c1.ShowXY(); // displays 10 & 20', 'Complex c2 = new Complex();', 'c2.ShowXY(); // displays 0 & 0', 'c2 = -c1;', 'c2.ShowXY(); // diapls -10 & -20', '}', 'public static return_type operator op (Type1 t1, Type2 t2)', 'using System;', 'class Complex', 'private int x;', 'private int y;', 'public Complex()', 'public Complex(int i, int j)', 'x = i;', 'y = j;', 'public void ShowXY()', 'Console.WriteLine(""{0} {1}"", x, y);', 'public static Complex operator +(Complex c1, Complex c2)', 'Complex temp = new Complex();', 'temp.x = c1.x + c2.x;', 'temp.y = c1.y + c2.y;', 'return temp;', 'class MyClient', 'public static void Main()', '{', 'Complex c1 = new Complex(10, 20);', 'c1.ShowXY(); // displays 10 & 20', 'Complex c2 = new Complex(20, 30);', 'c2.ShowXY(); // displays 20 & 30', 'Complex c3 = new Complex();', 'c3 = c1 + c2;', 'c3.ShowXY(); // dislplays 30 & 50', '}', 'using System;', 'class Complex', 'private int x;', 'private int y;', 'public Complex()', '{', '}', 'public Complex(int i, int j)', '{', 'x = i;', 'y = j;', '}', 'public void ShowXY()', '{', 'Console.WriteLine(""{0} {1}"", x, y);', '}', 'public static Complex operator +(Complex c1, Complex c2)', '{', 'Complex temp = new Complex();', 'temp.x = c1.x + c2.x;', 'temp.y = c1.y + c2.y;', 'return temp;', '}', 'class MyComplex: Complex', 'private double x;', 'private double y;', 'public MyComplex(double i, double j)', '{', 'x = i;', 'y = j;', '}', 'public MyComplex()', '{', '}', 'public new void ShowXY()', '{', 'Console.WriteLine(""{0} {1}"", x, y);', '}', 'class MyClient', 'public static void Main()', '{', 'MyComplex mc1 = new MyComplex(1.5, 2.5);', 'mc1.ShowXY();', 'MyComplex mc2 = new MyComplex(3.5, 4.5);', 'mc2.ShowXY();', 'MyComplex mc3 = new MyComplex();', '}', 'using System;', 'class Complex', 'private int x;', 'private int y;', 'public Complex()', '{', '}', 'public Complex(int i, int j)', '{', 'x = i;', 'y = j;', '}', 'public void ShowXY()', '{', 'Console.WriteLine(""{0} {1}"", x, y);', '}', 'class MyClient', 'public static void Main()', '{', 'Complex c1 = new Complex(10, 20);', 'c1.ShowXY(); // displays 10 & 20', 'Complex c2 = new Complex(10, 20);', 'c2.ShowXY(); // displays 10 & 20', 'Complex c3 = c2;', 'c3.ShowXY(); // dislplays 10 & 20', 'if (c1.Equals(c2))', 'Console.WriteLine(""OK"");', 'else', 'Console.WriteLine(""NOT OK"");', 'if (c2.Equals(c3))', 'Console.WriteLine(""OK1"");', '}', 'using System;', 'class Complex', 'private int x;', 'private int y;', 'public Complex()', '{', '}', 'public Complex(int i, int j)', '{', 'x = i;', 'y = j;', '}', 'public void ShowXY()', '{', 'Console.WriteLine(""{0} {1}"", x, y);', '}', 'public override bool Equals(object o)', '{', 'if ((Complex)o.x == this.x && (Complex)o.y == this.y)', 'return true;', 'else', 'return false;', '}', 'public override int GetHashCode()', '{', 'return this.ToString().GetHashCode();', '}', 'class MyClient', 'public static void Main()', '{', 'Complex c1 = new Complex(10, 20);', 'c1.ShowXY(); // displays 10 & 20', 'Complex c2 = new Complex(10, 20);', 'c2.ShowXY(); // displays 10 & 20', 'Complex c3 = c2;', 'c3.ShowXY(); // dislplays 10 & 20', 'if (c1.Equals(c2))', 'Console.WriteLine(""OK"");', 'else', 'Console.WriteLine(""NOT OK"");', 'if (c2.Equals(c3))', 'Console.WriteLine(""OK1"");', '}']",[],[],[]
109,['C# New Features | C# Version Features'],['Microsoft has added too many new features in C# language. A list of newly added features in each versions are given below:'],"['https://www.javatpoint.com/csharp-partial-types', 'https://www.javatpoint.com/c-sharp-thread-synchronization', 'https://www.javatpoint.com/csharp-partial-types', 'https://www.javatpoint.com/csharp-iterators', 'https://www.javatpoint.com/csharp-nullable', 'https://www.javatpoint.com/csharp-delegate-covariance', 'https://www.javatpoint.com/csharp-delegate-inference', 'https://www.javatpoint.com/c-sharp-static-class', 'https://www.javatpoint.com/csharp-anonymous-types', 'https://www.javatpoint.com/csharp-extension-methods', 'https://www.javatpoint.com/csharp-query-expression', 'https://www.javatpoint.com/csharp-partial-method', 'https://www.javatpoint.com/csharp-implicitly-typed-local-variable', 'https://www.javatpoint.com/csharp-object-and-collection-initializer', 'https://www.javatpoint.com/csharp-auto-implemented-properties', 'https://www.javatpoint.com/csharp-dynamic-binding', 'https://www.javatpoint.com/csharp-named-and-optional-arguments', 'https://www.javatpoint.com/csharp-asynchronous-methods', 'https://www.javatpoint.com/csharp-caller-info-attributes', 'https://www.javatpoint.com/csharp-using-static-directive', 'https://www.javatpoint.com/csharp-exception-filters', 'https://www.javatpoint.com/csharp-await-in-catch-finally-blocks', 'https://www.javatpoint.com/cshrap-auto-initialize-property', 'https://www.javatpoint.com/csharp-default-values-for-getter-only-properties', 'https://www.javatpoint.com/csharp-expression-bodied-members', 'https://www.javatpoint.com/csharp-null-propagator', 'https://www.javatpoint.com/csharp-string-interpolation', 'https://www.javatpoint.com/csharp-nameof-operator', 'https://www.javatpoint.com/csharp-dictionary-initializer', 'https://www.javatpoint.com/csharp-pattern-matching', 'https://www.javatpoint.com/csharp-tuples', 'https://www.javatpoint.com/csharp-deconstruction', 'https://www.javatpoint.com/csharp-local-functions', 'https://www.javatpoint.com/csharp-digit-separator', 'https://www.javatpoint.com/csharp-binary-literals', 'https://www.javatpoint.com/csharp-ref-keyword', 'https://www.javatpoint.com/csharp-expression-bodied-constructors-and-finalizers', 'https://www.javatpoint.com/csharp-expression-bodied-getters-and-setters', 'https://www.javatpoint.com/c-sharp-out-parameter', 'https://www.javatpoint.com/csharp-async-main', 'https://www.javatpoint.com/csharp-default-expression', 'https://www.javatpoint.com/csharp-partial-types', 'https://www.javatpoint.com/c-sharp-thread-synchronization', 'https://www.javatpoint.com/csharp-partial-types']",[],[],"['C# 2.0', 'C# 3.0', 'C# 4.0', 'C# 5.0', 'C# 6.0', 'C# 7.0', 'C# 7.1']",[],[],[],[],[],[],[],[],"['|||Partial types|||Iterators|||Nullable types|||Delegate Covariance|||Delegate inference|||Static classes|||Method group conversions (delegates)||||||Anonymous types|||Extension methods|||Query expression|||Partial method|||Implicitly typed local variables|||Object and collection initializers|||Auto-Implemented properties|||Lambda expression|||Expression trees||||||Dynamic binding|||Named and optional arguments|||Generic co and contravariance|||Embedded interop types (""NoPIA"")||||||Asynchronous methods|||Caller info attributes||||||Using static directive|||Exception filters|||Await in catch/finally blocks|||Auto property initializers|||Default values for getter-only properties|||Expression-bodied members|||Null propagator|||String interpolation|||Nameof operator|||Dictionary initializer|||Compiler-as-a-service (Roslyn)||||||Pattern matching|||Tuples|||Deconstruction|||Local functions|||Digit separator|||Binary literals|||Ref returns and locals|||Expression bodied constructors and finalizers|||Expression bodied getters and setters|||Out variables|||Generalized async return types||||||Async main|||Default expressions|||']"
110,['C# Programs'],"[""C# programs are frequently asked in the interview. These programs can be asked from basics, array, string, control statements, file handling etc. Let's see the list of top C# programs.""]","['https://www.javatpoint.com/fibonacci-series-in-csharp', 'https://www.javatpoint.com/c-sharp-multithreading', 'https://www.javatpoint.com/fibonacci-series-in-csharp', 'https://www.javatpoint.com/prime-number-program-in-csharp', 'https://www.javatpoint.com/palindrome-program-in-csharp', 'https://www.javatpoint.com/factorial-program-in-csharp', 'https://www.javatpoint.com/armstrong-number-in-csharp', 'https://www.javatpoint.com/sum-of-digits-program-in-csharp', 'https://www.javatpoint.com/csharp-program-to-reverse-number', 'https://www.javatpoint.com/csharp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/csharp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/csharp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/csharp-program-to-print-number-triangle', 'https://www.javatpoint.com/csharp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/csharp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/fibonacci-series-in-csharp', 'https://www.javatpoint.com/c-sharp-multithreading', 'https://www.javatpoint.com/fibonacci-series-in-csharp']",[],[],[],[],[],"['Write a c# program to print fibonacci series without using recursion and using recursion.', 'Output: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377', 'Write a c# program to check prime number.', 'Output: prime number', 'Output: not prime number', 'Write a c# program to check palindrome number.', 'Input: 121', 'Output: palindrome number', 'Input: 113', 'Output: not palindrome number', 'Write a c# program to print factorial of a number.', 'Output: 720', 'Write a c# program to check armstrong number.', 'Input: 371', 'Output: armstrong', 'Input: 342', 'Output: not armstrong', 'Write a c# program to print sum of digits.', 'Input: 624', 'Output: 12', 'Write a c# program to reverse given number.', 'Input: 234', 'Output: 432', 'Write a c# program to swap two numbers without using third variable.', 'Input: a=5 b=10', 'Output: a=10 b=5', 'Write a c# program to convert decimal number to binary.', 'Output: 1010', 'Write a c# program to print alphabet triangle.', 'Write a c# program to print number triangle.', 'Write a c# program to generate fibonacci triangle.', 'Write a c# program to convert number in characters.', 'Input: 357546', 'Output:three five seven five four six']",[],[],[],"['A\n    ABA\n   ABCBA\n  ABCDCBA\n ABCDEDCBA', 'enter the range= 6\n      1\n     121\n    2321\n   1234321 \n  123454321\n 12345654321', '1\t\n1\t1\t\n1\t1\t2\t\n1\t1\t2\t3\t\n1\t1\t2\t3\t5\t\n1\t1\t2\t3\t5\t8\t\n1\t1\t2\t3\t5\t8\t13\t\n1\t1\t2\t3\t5\t8\t13\t21\t\n1\t1\t2\t3\t5\t8\t13\t21\t34']",[],[]
111,['Fibonacci Series in C#'],"['In case of fibonacci series, next number is the sum of previous two numbers for example 0, 1, 1, 2, 3, 5, 8, 13, 21 etc. The first two numbers of fibonacci series are 0 and 1.']","['https://www.javatpoint.com/prime-number-program-in-csharp', 'https://www.javatpoint.com/csharp-programs', 'https://www.javatpoint.com/prime-number-program-in-csharp', 'https://www.javatpoint.com/csharp-programs', 'https://www.javatpoint.com/prime-number-program-in-csharp']",[],[],[],[],[],"[""Let's see the fibonacci series program in C#.""]",[],[],"['using System;', 'public class FibonacciExample', 'public static void Main(string[] args)', 'int n1=0,n2=1,n3,i,number;', 'Console.Write(""Enter the number of elements: "");', 'number = int.Parse(Console.ReadLine());', 'Console.Write(n1+"" ""+n2+"" ""); //printing 0 and 1', 'for(i=2;i<number;++i) //loop starts from 2 because 0 and 1 are already printed', '{', 'n3=n1+n2;', 'Console.Write(n3+"" "");', 'n1=n2;', 'n2=n3;', '}']",['Enter the number of elements: 15\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377'],[],[]
112,['Prime Number Program in C#'],"[""Prime number is a number that is greater than 1 and divided by 1 or itself. In other words, prime numbers can't be divided by other numbers than itself or 1. For example 2, 3, 5, 7, 11, 13, 17, 19, 23.... are the prime numbers.""]","['https://www.javatpoint.com/palindrome-program-in-csharp', 'https://www.javatpoint.com/fibonacci-series-in-csharp', 'https://www.javatpoint.com/palindrome-program-in-csharp', 'https://www.javatpoint.com/fibonacci-series-in-csharp', 'https://www.javatpoint.com/palindrome-program-in-csharp']",[],[],[],[],[],"[""Let's see the prime number program in C#. In this C# program, we will take an input from the user and check whether the number is prime or not.""]",[],[],"['using System;', 'public class PrimeNumberExample', 'public static void Main(string[] args)', 'int n, i, m=0, flag=0;', 'Console.Write(""Enter the Number to check Prime: "");', 'n = int.Parse(Console.ReadLine());', 'm=n/2;', 'for(i = 2; i <= m; i++)', '{', 'if(n % i == 0)', '{', 'Console.Write(""Number is not Prime."");', 'flag=1;', 'break;', '}', '}', 'if (flag==0)', 'Console.Write(""Number is Prime."");']","['Enter the Number to check Prime: 17  \nNumber is Prime.', 'Enter the Number to check Prime: 57  \nNumber is not Prime.']",[],[]
113,['Palindrome program in C#'],"['A palindrome number is a number that is same after reverse. For example 121, 34543, 343, 131, 48984 are the palindrome numbers.']","['https://www.javatpoint.com/factorial-program-in-csharp', 'https://www.javatpoint.com/prime-number-program-in-csharp', 'https://www.javatpoint.com/factorial-program-in-csharp', 'https://www.javatpoint.com/prime-number-program-in-csharp', 'https://www.javatpoint.com/factorial-program-in-csharp']",[],[],['Palindrome number algorithm'],[],[],"[""Let's see the palindrome program in C#. In this program, we will get an input from the user and check whether number is palindrome or not.""]",[],[],"['using System;', 'public class PalindromeExample', 'public static void Main(string[] args)', 'int n,r,sum=0,temp;', 'Console.Write(""Enter the Number: "");', 'n = int.Parse(Console.ReadLine());', 'temp=n;', 'while(n>0)', '{', 'r=n%10;', 'sum=(sum*10)+r;', 'n=n/10;', '}', 'if(temp==sum)', 'Console.Write(""Number is Palindrome."");', 'else', 'Console.Write(""Number is not Palindrome"");']","['Enter the Number=121   \nNumber is Palindrome.', 'Enter the number=113  \nNumber is not Palindrome.']",[],"['|||Get the number from user|||Hold the number in temporary variable|||Reverse the number|||Compare the temporary number with reversed number|||If both numbers are same, print palindrome number|||Else print not palindrome number|||']"
114,['Factorial program in C#'],['Factorial Program in C#: Factorial of n is the product of all positive descending integers. Factorial of n is denoted by n!. For example:'],"['https://www.javatpoint.com/armstrong-number-in-csharp', 'https://www.javatpoint.com/palindrome-program-in-csharp', 'https://www.javatpoint.com/armstrong-number-in-csharp', 'https://www.javatpoint.com/palindrome-program-in-csharp', 'https://www.javatpoint.com/armstrong-number-in-csharp']",[],[],[],[],[],"['Here, 4! is pronounced as ""4 factorial"", it is also called ""4 bang"" or ""4 shriek"".', 'The factorial is normally used in Combinations and Permutations (mathematics).', 'Let?s see the factorial program in C# using for loop.']",[],[],"['4! = 4*3*2*1 = 24', '6! = 6*5*4*3*2*1 = 720', 'using System;', 'public class FactorialExample', 'public static void Main(string[] args)', 'int i,fact=1,number;', 'Console.Write(""Enter any Number: "");', 'number= int.Parse(Console.ReadLine());', 'for(i=1;i<=number;i++){', 'fact=fact*i;', '}', 'Console.Write(""Factorial of "" +number+"" is: ""+fact);']",['Enter any Number: 6\nFactorial of 6 is: 720'],[],[]
115,['Armstrong Number in C#'],"[""Before going to write the C# program to check whether the number is Armstrong or not, let's understand what is Armstrong number.""]","['https://www.javatpoint.com/sum-of-digits-program-in-csharp', 'https://www.javatpoint.com/factorial-program-in-csharp', 'https://www.javatpoint.com/sum-of-digits-program-in-csharp', 'https://www.javatpoint.com/factorial-program-in-csharp', 'https://www.javatpoint.com/sum-of-digits-program-in-csharp']",[],[],[],[],[],"['Armstrong number is a number that is equal to the sum of cubes of its digits. For example 0, 1, 153, 370, 371 and 407 are the Armstrong numbers.', ""Let's try to understand why 371 is an Armstrong number."", ""Let's see the C# program to check Armstrong Number.""]",[],[],"['371 = (3*3*3)+(7*7*7)+(1*1*1)', 'where:', '(3*3*3)=27', '(7*7*7)=343', '(1*1*1)=1', '27+343+1=371', 'using System;', 'public class ArmstrongExample', 'public static void Main(string[] args)', 'int  n,r,sum=0,temp;', 'Console.Write(""Enter the Number= "");', 'n= int.Parse(Console.ReadLine());', 'temp=n;', 'while(n>0)', '{', 'r=n%10;', 'sum=sum+(r*r*r);', 'n=n/10;', '}', 'if(temp==sum)', 'Console.Write(""Armstrong Number."");', 'else', 'Console.Write(""Not Armstrong Number."");']","['Enter the Number= 371\nArmstrong Number.', 'Enter the Number= 342   \nNot Armstrong Number.']",[],[]
116,['Sum of digits program in C#'],['We can write the sum of digits program in C# language by the help of loop and mathematical operation only.'],"['https://www.javatpoint.com/csharp-program-to-reverse-number', 'https://www.javatpoint.com/armstrong-number-in-csharp', 'https://www.javatpoint.com/csharp-program-to-reverse-number', 'https://www.javatpoint.com/armstrong-number-in-csharp', 'https://www.javatpoint.com/csharp-program-to-reverse-number']",[],[],['Sum of digits algorithm'],[],[],"['To get sum of each digit by C# program, use the following algorithm:', ""Let's see the sum of digits program in C#.""]",[],[],"['using System;', 'public class SumExample', 'public static void Main(string[] args)', 'int  n,sum=0,m;', 'Console.Write(""Enter a number: "");', 'n= int.Parse(Console.ReadLine());', 'while(n>0)', '{', 'm=n%10;', 'sum=sum+m;', 'n=n/10;', '}', 'Console.Write(""Sum is= ""+sum);']","['Enter a number: 23  \nSum is= 5', 'Enter a number: 624       \nSum is= 12']",[],['|||Step 1: Get number by user|||Step 2: Get the modulus/remainder of the number|||Step 3: sum the remainder of the number|||Step 4: Divide the number by 10|||Step 5: Repeat the step 2 while number is greater than 0.|||']
117,['C# Program to reverse number'],"['We can reverse a number in C# using loop and arithmetic operators. In this program, we are getting number as input from the user and reversing that number.']","['https://www.javatpoint.com/csharp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/sum-of-digits-program-in-csharp', 'https://www.javatpoint.com/csharp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/sum-of-digits-program-in-csharp', 'https://www.javatpoint.com/csharp-program-to-swap-two-numbers-without-third-variable']",[],[],[],[],[],"[""Let's see a simple C# example to reverse a given number.""]",[],[],"['using System;', 'public class ReverseExample', 'public static void Main(string[] args)', 'int  n, reverse=0, rem;', 'Console.Write(""Enter a number: "");', 'n= int.Parse(Console.ReadLine());', 'while(n!=0)', '{', 'rem=n%10;', 'reverse=reverse*10+rem;', 'n/=10;', '}', 'Console.Write(""Reversed Number: ""+reverse);']",['Enter a number: 234  \nReversed Number: 432'],[],[]
118,['C# Program to swap two numbers without third variable'],['We can swap two numbers without using third variable. There are two common ways to swap two numbers without using third variable:'],"['https://www.javatpoint.com/csharp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/csharp-program-to-reverse-number', 'https://www.javatpoint.com/csharp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/csharp-program-to-reverse-number', 'https://www.javatpoint.com/csharp-program-to-convert-decimal-to-binary']",[],[],"['Program 1: Using ∗ and /', 'Program 2: Using + and -']",[],[],"[""Let's see a simple C# example to swap two numbers without using third variable."", ""Let's see another example to swap two numbers using + and -.""]",[],[],"['using System;', 'public class SwapExample', 'public static void Main(string[] args)', 'int  a=5, b=10;', 'Console.WriteLine(""Before swap a= ""+a+"" b= ""+b);', 'a=a*b; //a=50 (5*10)', 'b=a/b; //b=5 (50/10)', 'a=a/b; //a=10 (50/5)', 'Console.Write(""After swap a= ""+a+"" b= ""+b);', 'using System;', 'public class SwapExample', 'public static void Main(string[] args)', 'int  a=5, b=10;', 'Console.WriteLine(""Before swap a= ""+a+"" b= ""+b);', 'a=a+b; //a=15 (5+10)', 'b=a-b; //b=5 (15-10)', 'a=a-b; //a=10 (15-5)', 'Console.Write(""After swap a= ""+a+"" b= ""+b);']","['Before swap a= 5 b= 10     \nAfter swap a= 10 b= 5', 'Before swap a= 5 b= 10     \nAfter swap a= 10 b= 5']",[],['|||By + and -|||By * and /|||']
119,['C# Program to convert Decimal to Binary'],['We can convert any decimal number (base-10 (0 to 9)) into binary number (base-2 (0 or 1)) by C# program.'],"['https://www.javatpoint.com/csharp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/csharp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/csharp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/csharp-program-to-swap-two-numbers-without-third-variable', 'https://www.javatpoint.com/csharp-program-to-convert-number-in-characters']",[],[],['Decimal to Binary Conversion Algorithm'],"['Decimal Number', 'Binary Number']",[],"['Binary number is a base 2 number because it is either 0 or 1. Any combination of 0 and 1 is binary number such as 1001, 101, 11111, 101010 etc.', ""Let's see the some binary numbers for the decimal number."", 'Step 1: Divide the number by 2 through % (modulus operator) and store the remainder in array', 'Step 2: Divide the number by 2 through / (division operator)', 'Step 3: Repeat the step 2 until the number is greater than zero', ""Let's see the C# example to convert decimal to binary.""]","['Decimal number is a base 10 number because it ranges from 0 to 9, there are total 10 digits between 0 to 9. Any combination of digits is decimal number such as 223, 585, 192, 0, 7 etc.']",[],"['using System;', 'public class ConversionExample', 'public static void Main(string[] args)', 'int  n, i;', 'int[] a = new int[10];', 'Console.Write(""Enter the number to convert: "");', 'n= int.Parse(Console.ReadLine());', 'for(i=0; n>0; i++)', '{', 'a[i]=n%2;', 'n= n/2;', '}', 'Console.Write(""Binary of the given number= "");', 'for(i=i-1 ;i>=0 ;i--)', '{', 'Console.Write(a[i]);', '}']",['Enter the number to convert:10\nBinary of the given number= 1010'],['Decimal|||Binary&&&1|||0&&&2|||10&&&3|||11&&&4|||100&&&5|||101&&&6|||110&&&7|||111&&&8|||1000&&&9|||1001&&&10|||1010'],[]
120,['C# Program to Convert Number in Characters'],"['In C# language, we can easily convert number in characters by the help of loop and switch case. In this program, we are taking input from the user and iterating this number until it is 0. While iteration, we are dividing it by 10 and the remainder is passed in switch case to get the word for the number.']","['https://www.javatpoint.com/csharp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/csharp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/csharp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/csharp-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/csharp-program-to-print-alphabet-triangle']",[],[],[],[],[],"[""Let's see the C# program to convert number in characters.""]",[],[],"['using System;', 'public class ConversionExample', 'public static void Main(string[] args)', 'int n,sum=0,r;', 'Console.Write(""Enter the Number= "");', 'n= int.Parse(Console.ReadLine());', 'while(n>0)', '{', 'r=n%10;', 'sum=sum*10+r;', 'n=n/10;', '}', 'n=sum;', 'while(n>0)', '{', 'r=n%10;', 'switch(r)', '{', 'case 1:', 'Console.Write(""one "");', 'break;', 'case 2:', 'Console.Write(""two "");', 'break;', 'case 3:', 'Console.Write(""three "");', 'break;', 'case 4:', 'Console.Write(""four "");', 'break;', 'case 5:', 'Console.Write(""five "");', 'break;', 'case 6:', 'Console.Write(""six "");', 'break;', 'case 7:', 'Console.Write(""seven "");', 'break;', 'case 8:', 'Console.Write(""eight "");', 'break;', 'case 9:', 'Console.Write(""nine "");', 'break;', 'case 0:', 'Console.Write(""zero "");', 'break;', 'default:', 'Console.Write(""tttt "");', 'break;', '}//end of switch', 'n=n/10;', '}//end of while loop']",['Enter the Number= 357546\nthree five seven five four six'],[],[]
121,['C# Program to Print Alphabet Triangle'],"['There are different triangles that can be printed. Triangles can be generated by alphabets or numbers. In this C# program, we are going to print alphabet triangles.']","['https://www.javatpoint.com/csharp-program-to-print-number-triangle', 'https://www.javatpoint.com/csharp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/csharp-program-to-print-number-triangle', 'https://www.javatpoint.com/csharp-program-to-convert-number-in-characters', 'https://www.javatpoint.com/csharp-program-to-print-number-triangle']",[],[],[],[],[],"[""Let's see the C# example to print alphabet triangle.""]",[],[],"['using System;', 'public class PrintExample', 'public static void Main(string[] args)', ""char ch='A';"", 'int i, j, k, m;', 'for(i=1; i<=5; i++)', '{', 'for(j=5; j>=i; j--)', 'Console.Write("" "");', 'for(k=1;k<=i;k++)', 'Console.Write(ch++);', 'ch--;', 'for(m=1;m<i;m++)', 'Console.Write(--ch);', 'Console.Write(""\\n"");', ""ch='A';"", '}']",['A\n    ABA\n   ABCBA\n  ABCDCBA\n ABCDEDCBA'],[],[]
122,['C# Program to print Number Triangle'],"['Like alphabet triangle, we can write the C# program to print the number triangle. The number triangle can be printed in different ways.']","['https://www.javatpoint.com/csharp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/csharp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/csharp-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/csharp-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/csharp-program-to-generate-fibonacci-triangle']",[],[],[],[],[],"[""Let's see the C# example to print number triangle.""]",[],[],"['using System;', 'public class PrintExample', 'public static void Main(string[] args)', 'int  i,j,k,l,n;', 'Console.Write(""Enter the Range="");', 'n= int.Parse(Console.ReadLine());', 'for(i=1; i<=n; i++)', '{', 'for(j=1; j<=n-i; j++)', '{', 'Console.Write("" "");', '}', 'for(k=1;k<=i;k++)', '{', 'Console.Write(k);', '}', 'for(l=i-1;l>=1;l--)', '{', 'Console.Write(l);', '}', 'Console.Write(""\\n"");', '}']","['Enter the Range=5\n     1\n    121\n   12321\n  1234321\n 123454321', 'Enter the Range=6\n      1\n     121\n    12321\n   1234321 \n  123454321\n 12345654321']",[],[]
123,['C# Program to generate Fibonacci Triangle'],"['In this program, we are getting input from the user for the limit for fibonacci triangle, and printing the fibonacci series for the given number of times (limit).']","['https://www.javatpoint.com/c-sharp-interview-questions', 'https://www.javatpoint.com/csharp-program-to-print-number-triangle', 'https://www.javatpoint.com/c-sharp-interview-questions', 'https://www.javatpoint.com/csharp-program-to-print-number-triangle', 'https://www.javatpoint.com/c-sharp-interview-questions']",[],[],[],[],[],"[""Let's see the C# example to generate fibonacci triangle.""]",[],[],"['using System;', 'public class PrintExample', 'public static void Main(string[] args)', 'int a=0,b=1,i,c,n,j;', 'Console.Write(""Enter the limit: "");', 'n= int.Parse(Console.ReadLine());', 'for(i=1; i<=n; i++)', '{', 'a=0;', 'b=1;', 'Console.Write(b+""\\t"");', 'for(j=1; j<i; j++)', '{', 'c=a+b;', 'Console.Write(c+""\\t"");', 'a=b;', 'b=c;', '}', 'Console.Write(""\\n"");', '}']",['Enter the limit: 9\n1\t\n1\t1\t\n1\t1\t2\t\n1\t1\t2\t3\t\n1\t1\t2\t3\t5\t\n1\t1\t2\t3\t5\t8\t\n1\t1\t2\t3\t5\t8\t13\t\n1\t1\t2\t3\t5\t8\t13\t21\t\n1\t1\t2\t3\t5\t8\t13\t21\t34'],[],[]
