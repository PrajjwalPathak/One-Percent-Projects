,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['History of Java'],"['The history of Java is very interesting. Java was originally designed for interactive television, but it was too advanced technology for the digital cable television industry at the time. The history of Java starts with the Green Team. Java team members (also known as Green Team), initiated this project to develop a language for digital devices such as set-top boxes, televisions, etc. However, it was best suited for internet programming. Later, Java technology was incorporated by Netscape.']","['https://www.javatpoint.com/features-of-java', 'https://www.javatpoint.com/java-what-where-and-why', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#version', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/james-gosling-father-of-java', 'https://www.javatpoint.com/embedded-system-tutorial', 'https://www.javatpoint.com/sun-microsystems', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/java-versions', 'https://www.javatpoint.com/features-of-java', 'https://www.javatpoint.com/java-what-where-and-why', 'https://www.javatpoint.com/features-of-java']","['https://static.javatpoint.com/images/j1.jpg', 'https://static.javatpoint.com/images/core/oak.jpg']",['https://www.youtube.com/embed/DcQPtlFlgzY'],[],['Java Version History'],[],"['2) Initially it was designed for small, embedded systems in electronic appliances like set-top boxes.', '3) Firstly, it was called ""Greentalk"" by James Gosling, and the file extension was .gt.', '4) After that, it was called Oak and was developed as a part of the Green project.', '5) Why Oak? Oak is a symbol of strength and chosen as a national tree of many countries like the U.S.A., France, Germany, Romania, etc.', '6) In 1995, Oak was renamed as ""Java"" because it was already a trademark by Oak Technologies.', '9) Notice that Java is just a name, not an acronym.', '10) Initially developed by James Gosling at Sun Microsystems (which is now a subsidiary of Oracle Corporation) and released in 1995.', '11) In 1995, Time magazine called Java one of the Ten Best Products of 1995. ', 'Many java versions have been released till now. The current stable release of Java is Java SE 10.', 'More Details on Java Versions.']","['Currently, Java is used in internet programming, mobile devices, games, e-business solutions, etc. Following are given significant points that describe the history of Java.', '1) James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991. The small team of sun engineers called Green Team.', 'According to James Gosling, ""Java was one of the top choices along with Silk"". Since Java was so unique, most of the team members preferred Java than other names.', '8) Java is an island in Indonesia where the first coffee was produced (called Java coffee). It is a kind of espresso bean. Java name was chosen by James Gosling while having a cup of coffee nearby his office.', 'Since Java SE 8 release, the Oracle corporation follows a pattern in which every even version is release in March month and an odd version released in September month.']","['The principles for creating Java programming were ""Simple, Robust, Portable, Platform-independent, Secured, High Performance, Multithreaded, Architecture Neutral, Object-Oriented, Interpreted, and Dynamic"". Java was developed by James Gosling, who is known as the father of Java, in 1995. James Gosling and his team members started the project in the early \'90s.', '7) Why had they chose the name Java for Java language? The team gathered to choose a new name. The suggested words were ""dynamic"", ""revolutionary"", ""Silk"", ""jolt"", ""DNA"", etc. They wanted something that reflected the essence of the technology: revolutionary, dynamic, lively, cool, unique, and easy to spell, and fun to say.', '12) JDK 1.0 was released on January 23, 1996. After the first release of Java, there have been many additional features added to the language. Now Java is being used in Windows applications, Web applications, enterprise applications, mobile applications, cards, etc. Each new version adds new features in Java.']",[],[],[],['|||History of Java|||Java Version History||||||JDK Alpha and Beta (1995)|||JDK 1.0 (23rd Jan 1996)|||JDK 1.1 (19th Feb 1997)|||J2SE 1.2 (8th Dec 1998)|||J2SE 1.3 (8th May 2000)|||J2SE 1.4 (6th Feb 2002)|||J2SE 5.0 (30th Sep 2004)|||Java SE 6 (11th Dec 2006)|||Java SE 7 (28th July 2011)|||Java SE 8 (18th Mar 2014)|||Java SE 9 (21st Sep 2017)|||Java SE 10 (20th Mar 2018)|||Java SE 11 (September 2018)|||Java SE 12 (March 2019)|||Java SE 13 (September 2019)|||Java SE 14 (Mar 2020)|||Java SE 15 (September 2020)|||Java SE 16 (Mar 2021)|||Java SE 17 (September 2021)|||Java SE 18 (to be released by March 2022)|||']
1,['Features of Java'],"['The primary objective of Java programming language creation was to make it portable, simple and secure programming language. Apart from this, there are also some excellent features which play an important role in the popularity of this language. The features of Java are also known as Java buzzwords.']","['https://www.javatpoint.com/cpp-vs-java', 'https://www.javatpoint.com/history-of-java', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/#Simple', 'https://www.javatpoint.com/#Object-Oriented', 'https://www.javatpoint.com/#Portable', 'https://www.javatpoint.com/#Platform-independent', 'https://www.javatpoint.com/#Secured', 'https://www.javatpoint.com/#Robust', 'https://www.javatpoint.com/#Architecture-neutral', 'https://www.javatpoint.com/#Interpreted', 'https://www.javatpoint.com/#High-Performance', 'https://www.javatpoint.com/#Multithreaded', 'https://www.javatpoint.com/#Distributed', 'https://www.javatpoint.com/#Dynamic', 'https://www.javatpoint.com/java-oops-concepts', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/object-and-class-in-java#class', 'https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/runtime-polymorphism-in-java', 'https://www.javatpoint.com/abstract-class-in-java', 'https://www.javatpoint.com/encapsulation', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/cpp-vs-java', 'https://www.javatpoint.com/history-of-java', 'https://www.javatpoint.com/cpp-vs-java']","['https://static.javatpoint.com/images/core/java-features.png', 'https://static.javatpoint.com/images/core/platform-independent-java.png', 'https://static.javatpoint.com/images/core/java-security.png']",['https://www.youtube.com/embed/O5hShUO6wxs'],[],"['Simple', 'Object-oriented', 'Platform Independent', 'Secured', 'Robust', 'Architecture-neutral', 'Portable', 'High-performance', 'Distributed', 'Multi-threaded', 'Dynamic']",[],"['A list of the most important features of the Java language is given below.', 'Object-oriented programming (OOPs) is a methodology that simplifies software development and maintenance by providing some rules.', 'Basic concepts of OOPs are:', ' There are two types of platforms software-based and hardware-based. Java provides a software-based platform.', 'Java is best known for its security. With Java, we can develop virus-free systems. Java is secured because:', 'The English mining of Robust is strong. Java is robust because:', 'Java is architecture neutral because there are no implementation dependent features, for example, the size of primitive types is fixed. ', ""Java is portable because it facilitates you to carry the Java bytecode to any platform. It doesn't require any implementation.\n"", 'Java supports dynamic compilation and automatic memory management (garbage collection).']","['Java is very easy to learn, and its syntax is simple, clean and easy to understand. According to Sun Microsystem, Java language is a simple programming language because:', 'Java is an object-oriented programming language. Everything in Java is an object. Object-oriented means we organize our software as a combination of different types of objects that incorporate both data and behavior.', 'The Java platform differs from most other platforms in the sense that it is a software-based platform that runs on top of other hardware-based platforms. It has two components:', 'Java language provides these securities by default. Some security can also be provided by an application developer explicitly through SSL, JAAS, Cryptography, etc.', 'In C programming, int data type occupies 2 bytes of memory for 32-bit architecture and 4 bytes of memory for 64-bit architecture. However, it occupies 4 bytes of memory for both 32 and 64-bit architectures in Java.', 'Java is a dynamic language. It supports the dynamic loading of classes. It means classes are loaded on demand. It also supports functions from its native languages, i.e., C and C++.']","['Java is platform independent because it is different from other languages like C, C++, etc. which are compiled into platform specific machines while Java is a write once, run anywhere language. A platform is the hardware or software environment in which a program runs.', 'Java code can be executed on multiple platforms, for example, Windows, Linux, Sun Solaris, Mac/OS, etc. Java code is compiled by the compiler and converted into bytecode. This bytecode is a platform-independent code because it can be run on multiple platforms, i.e., Write Once and Run Anywhere (WORA).', 'Java is faster than other traditional interpreted programming languages because Java bytecode is ""close"" to native code. It is still a little bit slower than a compiled language (e.g., C++). Java is an interpreted language that is why it is slower than compiled languages, e.g., C, C++, etc. ', 'Java is distributed because it facilitates users to create distributed applications in Java. RMI and EJB are used for creating distributed applications. This feature of Java makes us able to access files by calling the methods from any machine on the internet. ', ""A thread is like a separate program, executing concurrently. We can write Java programs that deal with many tasks at once by defining multiple threads. The main advantage of multi-threading is that it doesn't occupy memory for each thread. It shares a common memory area. Threads are important for multi-media, Web applications, etc.\n""]",[],[],[],"['|||Java syntax is based on C++ (so easier for programmers to learn it after C++).|||Java has removed many complicated and rarely-used features, for example, explicit pointers, operator overloading, etc.|||There is no need to remove unreferenced objects because there is an Automatic Garbage Collection in Java.||||||Classloader: Classloader in Java is a part of the Java Runtime Environment (JRE) which is used to load Java classes into the Java Virtual Machine dynamically. It adds security by separating the package for the classes of the local file system from those that are imported from network sources.|||Bytecode Verifier: It checks the code fragments for illegal code that can violate access rights to objects.|||Security Manager: It determines what resources a class can access such as reading and writing to the local disk.||||||It uses strong memory management.|||There is a lack of pointers that avoids security problems.|||Java provides automatic garbage collection which runs on the Java Virtual Machine to get rid of objects which are not being used by a Java application anymore.|||There are exception handling and the type checking mechanism in Java. All these points make Java robust.|||&&&|||Simple|||Object-Oriented|||Portable|||Platform independent|||Secured|||Robust|||Architecture neutral|||Interpreted|||High Performance|||Multithreaded|||Distributed|||Dynamic||||||Object|||Class|||Inheritance|||Polymorphism|||Abstraction|||Encapsulation||||||Runtime Environment|||API(Application Programming Interface)|||']"
2,['C++ vs Java'],['There are many differences and similarities between the C++ programming language and Java. A list of top differences between C++ and Java are given below:'],"['https://www.javatpoint.com/simple-program-of-java', 'https://www.javatpoint.com/features-of-java', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/cpp-goto-statement', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/cpp-overloading', 'https://www.javatpoint.com/cpp-pointers', 'https://www.javatpoint.com/multithreading-in-java', 'https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/java-oops-concepts', 'https://www.javatpoint.com/simple-program-of-java', 'https://www.javatpoint.com/features-of-java', 'https://www.javatpoint.com/simple-program-of-java']",[],[],"['C++ Program Example', 'Java Program Example']",[],[],"['File: main.cpp', 'File: Simple.java']",[],[],"['#include', 'using namespace std;', 'int main() {', 'cout << ""Hello C++ Programming"";', 'return 0;', 'class Simple{', 'public static void main(String args[]){', 'System.out.println(""Hello Java"");']","['Hello C++ Programming', 'Hello Java']","[""omparison Index C++Jav&&&latform-independentC++ is platform-dependent.Java is platform-independent&&&ainly used forC++ is mainly used for system programming.Java is mainly used for application programming. It is widely used in Windows-based, web-based, enterprise, and mobile applications&&&esign GoalC++ was designed for systems and applications programming. It was an extension of the C programming language.Java was designed and created as an interpreter for printing systems but later extended as a support network computing. It was designed to be easy to use and accessible to a broader audience&&&otoC++ supports the goto statement.Java doesn't support the goto statement&&&ultiple inheritanceC++ supports multiple inheritance.Java doesn't support multiple inheritance through class. It can be achieved by using interfaces in java&&&perator OverloadingC++ supports operator overloading.Java doesn't support operator overloading&&&ointersC++ supports pointers. You can write a pointer program in C++.Java supports pointer internally. However, you can't write the pointer program in java. It means java has restricted pointer support in java&&&ompiler and InterpreterC++ uses compiler only. C++ is compiled and run using the compiler which converts source code into machine code so, C++ is platform dependent.Java uses both compiler and interpreter. Java source code is converted into bytecode at compilation time. The interpreter executes this bytecode at runtime and produces output. Java is interpreted that is why it is platform-independent&&&all by Value and Call by referenceC++ supports both call by value and call by reference.Java supports call by value only. There is no call by reference in java&&&tructure and UnionC++ supports structures and unions.Java doesn't support structures and unions&&&hread SupportC++ doesn't have built-in support for threads. It relies on third-party libraries for thread support.Java has built-in thread support&&&ocumentation commentC++ doesn't support documentation comments.Java supports documentation comment (/** ... */) to create documentation for java source code&&&irtual KeywordC++ supports virtual keyword so that we can decide whether or not to override a function.Java has no virtual keyword. We can override all non-static methods by default. In other words, non-static methods are virtual by default&&&nsigned right shift >>>C++ doesn't support >>> operator.Java supports unsigned right shift >>> operator that fills zero at the top for the negative numbers. For positive numbers, it works same like >> operator&&&nheritance TreeC++ always creates a new inheritance tree.Java always uses a single inheritance tree because all classes are the child of the Object class in Java. The Object class is the root of the inheritance tree in java&&&ardwareC++ is nearer to hardware.Java is not so interactive with hardware&&&bject-orientedC++ is an object-oriented language. However, in the C language, a single root hierarchy is not possible.Java is also an object-oriented language. However, everything (except fundamental types) is an object in Java. It is a single root hierarchy as everything gets derived from java.lang.Object.""]","[""|||Java doesn't support default arguments like C++. |||Java does not support header files like C++. Java uses the import keyword to include different classes and methods.|||""]"
3,['First Java Program | Hello World Example'],"['In this section, we will learn how to write the simple program of Java. We can write a simple hello Java program easily after installing the JDK.']","['https://www.javatpoint.com/internal-details-of-hello-java-program', 'https://www.javatpoint.com/features-of-java', 'https://www.javatpoint.com/#hellojavareq', 'https://www.javatpoint.com/#hellojavaex', 'https://www.javatpoint.com/#hellojavawhatjavacnot', 'https://www.javatpoint.com/http://www.oracle.com/technetwork/java/javase/downloads/index.html', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-set-path-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Simple', 'https://www.javatpoint.com/https://www.javatpoint.com/command-line-argument', 'https://www.javatpoint.com/https://www.javatpoint.com/system-out-println-in-java', 'https://www.javatpoint.com/how-to-set-path-in-java', 'https://www.javatpoint.com/internal-details-of-hello-java-program', 'https://www.javatpoint.com/features-of-java', 'https://www.javatpoint.com/internal-details-of-hello-java-program']","['https://static.javatpoint.com/images/core/javacodecompile.png', 'https://static.javatpoint.com/images/simpleprogram.jpg', 'https://static.javatpoint.com/images/simpleprogram2.jpg', 'https://static.javatpoint.com/images/simpleprogram3.jpg']",['https://www.youtube.com/embed/FHsq2WSQymM'],"['Parameters used in First Java Program', 'In how many ways we can write a Java program?', 'Valid Java main() method signature', 'Invalid Java main() method signature']","['The requirement for Java Hello World Example', 'Creating Hello World Example', 'Resolving an error ""javac is not recognized as an internal or external command""?']",[],"[""To create a simple Java program, you need to create a class that contains the main method. Let's understand the requirement first."", 'For executing any Java program, the following software or application must be properly installed.', ""Let's create the hello java program:"", 'Save the above file as Simple.java.', 'Compilation Flow:', 'When we compile Java program using javac tool, the Java compiler converts the source code into byte code.', 'To compile and run the above program, go to your current directory first; my current directory is c:\\new. Write here:', 'There are many ways to write a Java program. The modifications that can be done in a Java program are given below:', '1) By changing the sequence of the modifiers, method prototype is not changed in Java.', ""Let's see the simple code of the main method."", '2) The subscript notation in the Java array can be used after type, before the variable or after the variable.', ""Let's see the different codes to write the main method."", '3) You can provide var-args support to the main() method by passing 3 ellipses (dots)', ""Let's see the simple code of using var-args in the main() method. We will learn about var-args later in the Java New Features chapter."", '4) Having a semicolon at the end of class is optional in Java.', ""Let's see the simple code.""]","['To write the simple program, you need to open notepad by start menu -> All Programs -> Accessories -> Notepad and write a simple program as we have shownbelow:']","['Let\'s see what is the meaning of class, public, static, void, main, String[], System.out.println().\n\nclass keyword is used to declare a class in Java.\npublic keyword is an access modifier that represents visibility. It means it is visible to all.\nstatic is a keyword. If we declare any method as static, it is known as the static method. The core advantage of the static method is that there is no need to create an object to invoke the static method. The main() method is executed by the JVM, so it doesn\'t require creating an object to invoke the main() method. So, it saves memory.\nvoid is the return type of the method. It means it doesn\'t return any value.\nmain represents the starting point of the program.\nString[] args or String args[] is used for command line argument. We will discuss it in coming section.\nSystem.out.println() is used to print statement. Here, System is a class, out is an object of the PrintStream class, println() is a method of the PrintStream class. We will discuss the internal working of System.out.println() statement in the coming section.\n\n\n\n\n\nTo write the simple program, you need to open notepad by start menu -> All Programs -> Accessories -> Notepad and write a simple program as we have shownbelow:\n\nAs displayed in the above diagram, write the simple program of Java in notepad and saved it as Simple.java. In order to compile and run the above program, you need to open the command prompt by start menu -> All Programs -> Accessories -> command prompt. When we have done with all the steps properly, it shows the following output:\n\nTo compile and run the above program, go to your current directory first; my current directory is c:\\new. Write here:\n\nTo compile:javac Simple.java\nTo execute:java Simple\n\n\nIn how many ways we can write a Java program?\nThere are many ways to write a Java program. The modifications that can be done in a Java program are given below:\n1) By changing the sequence of the modifiers, method prototype is not changed in Java.\nLet\'s see the simple code of the main method.\n\r\nstatic public void main(String args[])\r\n\n2) The subscript notation in the Java array can be used after type, before the variable or after the variable.\nLet\'s see the different codes to write the main method.\n\r\npublic static void main(String[] args)\r\npublic static void main(String []args)\r\npublic static void main(String args[])\r\n\n3) You can provide var-args support to the main() method by passing 3 ellipses (dots)\nLet\'s see the simple code of using var-args in the main() method. We will learn about var-args later in the Java New Features chapter.\n\r\npublic static void main(String... args)\r\n\n4) Having a semicolon at the end of class is optional in Java.\nLet\'s see the simple code.\n\r\nclass A{\r\nstatic public void main(String... args){\r\nSystem.out.println(""hello java4"");\r\n}\r\n};\r\n\n\nValid Java main() method signature\n\r\npublic static void main(String[] args)\r\npublic static void main(String []args)\r\npublic static void main(String args[])\r\npublic static void main(String... args)\r\nstatic public void main(String[] args)\r\npublic static final void main(String[] args)\r\nfinal public static void main(String[] args)\r\nfinal strictfp public static void main(String[] args)\r\n\n\nInvalid Java main() method signature\n\r\npublic void main(String[] args)\r\nstatic void main(String[] args)\r\npublic void static main(String[] args)\r\nabstract public static void main(String[] args)\r\n\n\n\nResolving an error ""javac is not recognized as an internal or external command""?\nIf there occurs a problem like displayed in the below figure, you need to set a path. Since DOS doesn\'t recognize javac and java as internal or external command. To overcome this problem, we need to set a path. The path is not required in a case where you save your program inside the JDK/bin directory. However, it is an excellent approach to set the path. Click here for How to set path in java.\n\n\n\nNext TopicInternal details of Hello Java Program\n\n\n\n← prev\nnext →\n\n\n', '\n\nclass keyword is used to declare a class in Java.\npublic keyword is an access modifier that represents visibility. It means it is visible to all.\nstatic is a keyword. If we declare any method as static, it is known as the static method. The core advantage of the static method is that there is no need to create an object to invoke the static method. The main() method is executed by the JVM, so it doesn\'t require creating an object to invoke the main() method. So, it saves memory.\nvoid is the return type of the method. It means it doesn\'t return any value.\nmain represents the starting point of the program.\nString[] args or String args[] is used for command line argument. We will discuss it in coming section.\nSystem.out.println() is used to print statement. Here, System is a class, out is an object of the PrintStream class, println() is a method of the PrintStream class. We will discuss the internal working of System.out.println() statement in the coming section.\n\n\n\n\n\nTo write the simple program, you need to open notepad by start menu -> All Programs -> Accessories -> Notepad and write a simple program as we have shownbelow:\n\nAs displayed in the above diagram, write the simple program of Java in notepad and saved it as Simple.java. In order to compile and run the above program, you need to open the command prompt by start menu -> All Programs -> Accessories -> command prompt. When we have done with all the steps properly, it shows the following output:\n\nTo compile and run the above program, go to your current directory first; my current directory is c:\\new. Write here:\n\nTo compile:javac Simple.java\nTo execute:java Simple\n\n\nIn how many ways we can write a Java program?\nThere are many ways to write a Java program. The modifications that can be done in a Java program are given below:\n1) By changing the sequence of the modifiers, method prototype is not changed in Java.\nLet\'s see the simple code of the main method.\n\r\nstatic public void main(String args[])\r\n\n2) The subscript notation in the Java array can be used after type, before the variable or after the variable.\nLet\'s see the different codes to write the main method.\n\r\npublic static void main(String[] args)\r\npublic static void main(String []args)\r\npublic static void main(String args[])\r\n\n3) You can provide var-args support to the main() method by passing 3 ellipses (dots)\nLet\'s see the simple code of using var-args in the main() method. We will learn about var-args later in the Java New Features chapter.\n\r\npublic static void main(String... args)\r\n\n4) Having a semicolon at the end of class is optional in Java.\nLet\'s see the simple code.\n\r\nclass A{\r\nstatic public void main(String... args){\r\nSystem.out.println(""hello java4"");\r\n}\r\n};\r\n\n\nValid Java main() method signature\n\r\npublic static void main(String[] args)\r\npublic static void main(String []args)\r\npublic static void main(String args[])\r\npublic static void main(String... args)\r\nstatic public void main(String[] args)\r\npublic static final void main(String[] args)\r\nfinal public static void main(String[] args)\r\nfinal strictfp public static void main(String[] args)\r\n\n\nInvalid Java main() method signature\n\r\npublic void main(String[] args)\r\nstatic void main(String[] args)\r\npublic void static main(String[] args)\r\nabstract public static void main(String[] args)\r\n\n\n\nResolving an error ""javac is not recognized as an internal or external command""?\nIf there occurs a problem like displayed in the below figure, you need to set a path. Since DOS doesn\'t recognize javac and java as internal or external command. To overcome this problem, we need to set a path. The path is not required in a case where you save your program inside the JDK/bin directory. However, it is an excellent approach to set the path. Click here for How to set path in java.\n\n\n\nNext TopicInternal details of Hello Java Program\n\n\n\n← prev\nnext →\n\n\n', 'As displayed in the above diagram, write the simple program of Java in notepad and saved it as Simple.java. In order to compile and run the above program, you need to open the command prompt by start menu -> All Programs -> Accessories -> command prompt. When we have done with all the steps properly, it shows the following output:', ""If there occurs a problem like displayed in the below figure, you need to set a path. Since DOS doesn't recognize javac and java as internal or external command. To overcome this problem, we need to set a path. The path is not required in a case where you save your program inside the JDK/bin directory. However, it is an excellent approach to set the path. Click here for How to set path in java.""]","['class Simple{', 'public static void main(String args[]){', 'System.out.println(""Hello Java"");', 'static public void main(String args[])', 'public static void main(String[] args)', 'public static void main(String []args)', 'public static void main(String args[])', 'public static void main(String... args)', 'class A{', 'static public void main(String... args){', 'System.out.println(""hello java4"");', 'public static void main(String[] args)', 'public static void main(String []args)', 'public static void main(String args[])', 'public static void main(String... args)', 'static public void main(String[] args)', 'public static final void main(String[] args)', 'final public static void main(String[] args)', 'final strictfp public static void main(String[] args)', 'public void main(String[] args)', 'static void main(String[] args)', 'public void static main(String[] args)', 'abstract public static void main(String[] args)']",['Hello Java'],[],"[""|||Install the JDK if you don't have installed it, download the JDK and install it.|||Set path of the jdk/bin directory. http://www.javatpoint.com/how-to-set-path-in-java|||Create the Java program|||Compile and run the Java program||||||class keyword is used to declare a class in Java.|||public keyword is an access modifier that represents visibility. It means it is visible to all.|||static is a keyword. If we declare any method as static, it is known as the static method. The core advantage of the static method is that there is no need to create an object to invoke the static method. The main() method is executed by the JVM, so it doesn't require creating an object to invoke the main() method. So, it saves memory.|||void is the return type of the method. It means it doesn't return any value.|||main represents the starting point of the program.|||String[] args or String args[] is used for command line argument. We will discuss it in coming section.|||System.out.println() is used to print statement. Here, System is a class, out is an object of the PrintStream class, println() is a method of the PrintStream class. We will discuss the internal working of System.out.println() statement in the coming section.|||&&&|||Software Requirements|||Creating Hello Java Example|||Resolving javac is not recognized|||""]"
4,['Internal Details of Hello Java Program'],"['In the previous section, we have created Java Hello World program and learn how to compile and run a Java program. In this section, we are going to learn, what happens while we compile and run the Java program. Moreover, we will see some questions based on the first program.']","['https://www.javatpoint.com/how-to-set-path-in-java', 'https://www.javatpoint.com/simple-program-of-java', 'https://www.javatpoint.com/how-to-set-path-in-java', 'https://www.javatpoint.com/simple-program-of-java', 'https://www.javatpoint.com/how-to-set-path-in-java']","['https://static.javatpoint.com/images/core/javacodecompile.png', 'https://static.javatpoint.com/images/java-runtime-processing.png', 'https://static.javatpoint.com/images/another.JPG', 'https://static.javatpoint.com/images/core/d.png']",[],"['What happens at compile time?', 'What happens at runtime?']","['Q) Can you save a Java source file by another name than the class name?', 'Q) Can you have multiple classes in a java source file?']",[],"['At compile time, the Java file is compiled by Java Compiler (It does not interact with OS) and converts the Java code into bytecode.', 'At runtime, the following steps are performed:', 'Classloader: It is the subsystem of JVM that is used to load class files.', 'Bytecode Verifier: Checks the code fragments for illegal code that can violate access rights to objects.', 'Interpreter: Read bytecode stream then execute the instructions.', 'Yes, if the class is not public. It is explained in the figure given below:', 'Yes, like the figure given below illustrates:']","['Observe that, we have compiled the code with file name but running the program with class name. Therefore, we can save a Java program other than class name.']",[],[],[],[],[]
5,['How to set path in Java'],"['The path is required to be set for using tools such as javac, java, etc. ']","['https://www.javatpoint.com/difference-between-jdk-jre-and-jvm', 'https://www.javatpoint.com/internal-details-of-hello-java-program', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#pathtemporary', 'https://www.javatpoint.com/#pathpermanent', 'https://www.javatpoint.com/#pathlinux', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/how-to-set-classpath-in-java', 'https://www.javatpoint.com/difference-between-jdk-jre-and-jvm', 'https://www.javatpoint.com/internal-details-of-hello-java-program', 'https://www.javatpoint.com/difference-between-jdk-jre-and-jvm']","['https://static.javatpoint.com/images/temporarypath.jpg', 'https://static.javatpoint.com/images/path1.JPG', 'https://static.javatpoint.com/images/path2.JPG', 'https://static.javatpoint.com/images/path3.JPG', 'https://static.javatpoint.com/images/path4.JPG', 'https://static.javatpoint.com/images/path5.JPG', 'https://static.javatpoint.com/images/path6.JPG', 'https://static.javatpoint.com/images/path7.JPG', 'https://static.javatpoint.com/images/path8.JPG', 'https://static.javatpoint.com/images/path9.JPG']",['https://www.youtube.com/embed/rxKDcenUJhc'],"['1) How to set the Temporary Path of JDK in Windows', '2) How to set Permanent Path of JDK in Windows']","['For Example:', 'For Example:', 'Setting Java Path in Linux OS']",[],"['However, if you have your Java file outside the JDK/bin folder, it is necessary to set the path of JDK.', ' There are two ways to set the path in Java:', 'To set the temporary path of JDK, you need to follow the following steps:\n', ""Let's see it in the figure given below:"", 'For setting the permanent path of JDK, you need to follow these steps:\n', 'Now your permanent path is set. You can now execute any program of java from any drive.\n', 'Here, we have installed the JDK in the home directory under Root (/home).', 'You may also like:']","['If you are saving the Java source file inside the JDK/bin directory, the path is not required to be set because all the tools will be available in the current directory.', ""Setting path in Linux OS is the same as setting the path in the Windows OS. But, here we use the export tool rather than set. Let's see how to set path in Linux OS:""]",[],"['set path=C:\\Program Files\\Java\\jdk1.6.0_23\\bin', 'export PATH=$PATH:/home/jdk1.6.01/bin/']","['set path=C:\\Program Files\\Java\\jdk1.6.0_23\\bin', 'export PATH=$PATH:/home/jdk1.6.01/bin/']",[],['|||Temporary|||Permanent|||']
6,"['Difference between JDK, JRE, and JVM']","['We must understand the differences between JDK, JRE, and JVM before proceeding further to Java. See the brief overview of JVM here.']","['https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/how-to-set-path-in-java', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#jre', 'https://www.javatpoint.com/#jdk', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/os-tutorial', 'https://www.javatpoint.com/internal-details-of-jvm', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/java-applet', 'https://www.javatpoint.com/jdk', 'https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/how-to-set-path-in-java', 'https://www.javatpoint.com/jvm-java-virtual-machine']","['https://static.javatpoint.com/images/jre2.png', 'https://static.javatpoint.com/images/jdk2.png']",[],[],"['JVM', 'JRE', 'JDK', 'Reference Video']",[],"['The JVM performs the following main tasks:', 'The implementation of JVM is also actively released by other companies besides Sun Micro Systems. ', 'JDK is an implementation of any one of the below given Java Platforms released by Oracle Corporation:', ""Your browser doesn't support HTML5 video.""]","[""If you want to get the detailed knowledge of Java Virtual Machine, move to the next page. Firstly, let's see the differences between the JDK, JRE, and JVM."", 'JDK is an acronym for Java Development Kit. The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools. ']","[""JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode. "", 'JVMs are available for many hardware and software platforms. JVM, JRE, and JDK are platform dependent because the configuration of each OS is different from each other. However, Java is platform independent. There are three notions of the JVM: specification, implementation, and instance.', 'JRE is an acronym for Java Runtime Environment. It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.', 'The JDK contains a private Java Virtual Machine (JVM) and a few other resources such as an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), etc. to complete the development of a Java Application. ']",[],[],[],['|||Loads code|||Verifies code|||Executes code|||Provides runtime environment||||||Standard Edition Java Platform|||Enterprise Edition Java Platform|||Micro Edition Java Platform |||']
7,['JVM (Java Virtual Machine) Architecture'],['JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides runtime environment in which java bytecode can be executed.\n'],"['https://www.javatpoint.com/variable-datatype', 'https://www.javatpoint.com/difference-between-jdk-jre-and-jvm', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#jvminternalarch', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ClassLoaderExample', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/variable-datatype', 'https://www.javatpoint.com/difference-between-jdk-jre-and-jvm', 'https://www.javatpoint.com/variable-datatype']",['https://static.javatpoint.com/images/jvm-architecture.png'],[],['JVM Architecture'],"['What is JVM', 'What it does', '1) Classloader', '2) Class(Method) Area', '3) Heap', '4) Stack', '5) Program Counter Register', '6) Native Method Stack', '7) Execution Engine', '8) Java Native Interface']",[],"['JVMs are available for many hardware and software platforms (i.e. JVM is platform dependent).', 'The JVM performs following operation:', '\nJVM provides definitions for the:', ""Let's understand the internal architecture of JVM. It contains classloader, memory area, execution engine etc."", 'These are the internal classloaders provided by Java. If you want to create your own classloader, you need to extend the ClassLoader class.', 'Class(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods.', 'It is the runtime data area in which objects are allocated.', 'Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return.', 'Each thread has a private JVM stack, created at the same time as thread.', 'A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.', 'PC (program counter) register contains the address of the Java virtual machine instruction currently being executed.', 'It contains all the native methods used in the application.', 'It contains:']","['Classloader is a subsystem of JVM which is used to load class files. Whenever we run the java program, it is loaded first by the classloader. There are three built-in classloaders in Java.']","['Java Native Interface (JNI) is a framework which provides an interface to communicate with another application written in another language like C, C++, Assembly etc. Java uses JNI framework to send output to the Console or interact with OS libraries.']","['public class ClassLoaderExample', 'public static void main(String[] args)', 'Class c=ClassLoaderExample.class;', 'System.out.println(c.getClassLoader());', 'System.out.println(String.class.getClassLoader());']",['[email\xa0protected]\nnull'],[],"['|||Loads code|||Verifies code|||Executes code|||Provides runtime environment||||||Memory area|||Class file format|||Register set|||Garbage-collected heap|||Fatal error reporting etc.|||&&&|||A specification where working of Java Virtual Machine is specified. But implementation provider is independent to choose the algorithm. Its implementation has been provided by Oracle and other companies.|||An implementation Its implementation is known as JRE (Java Runtime Environment).|||Runtime Instance Whenever you write java command on the command prompt to run the java class, an instance of JVM is created.||||||Bootstrap ClassLoader: This is the first classloader which is the super class of Extension classloader. It loads the rt.jar file which contains all class files of Java Standard Edition like java.lang package classes, java.net package classes, java.util package classes, java.io package classes, java.sql package classes etc.|||Extension ClassLoader: This is the child classloader of Bootstrap and parent classloader of System classloader. It loades the jar files located inside $JAVA_HOME/jre/lib/ext directory.|||System/Application ClassLoader: This is the child classloader of Extension classloader. It loads the classfiles from classpath. By default, classpath is set to current directory. You can change the classpath using ""-cp"" or ""-classpath"" switch. It is also known as Application classloader.||||||A virtual processor|||Interpreter: Read bytecode stream then execute the instructions.|||Just-In-Time(JIT) compiler: It is used to improve the performance. JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation. Here, the term ""compiler"" refers to a translator from the instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.|||']"
8,['Java Variables'],['A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.'],"['https://www.javatpoint.com/java-data-types', 'https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/simple-program-of-java', 'https://www.javatpoint.com/java-data-types', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/static-keyword-in-java', 'https://www.javatpoint.com/java-data-types', 'https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/java-data-types']","['https://static.javatpoint.com/core/images/variable.png', 'https://static.javatpoint.com/core/images/types-of-variables1.png']",[],['Variable'],"['Types of Variables', 'Example to understand the types of variables in java', 'Java Variable Example: Add Two Numbers', 'Java Variable Example: Widening', 'Java Variable Example: Narrowing (Typecasting)', 'Java Variable Example: Overflow', 'Java Variable Example: Adding Lower Type']","['1) Local Variable', '2) Instance Variable', '3) Static variable']","['Variable is a name of memory location. There are three types of variables in java: local, instance and static.', 'There are two types of data types in Java: primitive and non-primitive.', 'There are three types of variables in Java:', 'A local variable cannot be defined with ""static"" keyword.', 'A variable declared inside the class but outside the body of the method, is called an instance variable. It is not declared as static. ', 'It is called an instance variable because its value is instance-specific and is not shared among instances.']","['A variable is the name of a reserved area allocated in memory. In other words, it is a name of the memory location. It is a combination of ""vary + able"" which means its value can be changed.', ""A variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists. ""]",['A variable that is declared as static is called a static variable. It cannot be local. You can create a single copy of the static variable and share it among all the instances of the class. Memory allocation for static variables happens only once when the class is loaded in the memory.'],"['int data=50;//Here data is variable', 'public class A', 'static int m=100;//static variable', 'void method()', '{', 'int n=90;//local variable', 'public static void main(String args[])', 'int data=50;//instance variable', '}//end of class', 'public class Simple{', 'public static void main(String[] args){', 'int a=10;', 'int b=10;', 'int c=a+b;', 'System.out.println(c);', 'public class Simple{', 'public static void main(String[] args){', 'int a=10;', 'float f=a;', 'System.out.println(a);', 'System.out.println(f);', 'public class Simple{', 'public static void main(String[] args){', 'float f=10.5f;', 'int a=(int)f;', 'System.out.println(f);', 'System.out.println(a);', 'class Simple{', 'public static void main(String[] args){', 'int a=130;', 'byte b=(byte)a;', 'System.out.println(a);', 'System.out.println(b);', 'class Simple{', 'public static void main(String[] args){', 'byte a=10;', 'byte b=10;', 'byte c=(byte)(a+b);', 'System.out.println(c);']","['20', '10', '10.0', '10.5', '10', '130', '-126', '20']",[],['|||local variable|||instance variable|||static variable|||']
9,['Data Types in Java'],['Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java: '],"['https://www.javatpoint.com/unicode-system-in-java', 'https://www.javatpoint.com/java-variables', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/array-in-java', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/java-variables', 'https://www.javatpoint.com/unicode-system-in-java', 'https://www.javatpoint.com/java-variables', 'https://www.javatpoint.com/unicode-system-in-java']",['https://static.javatpoint.com/images/java-data-types.png'],[],"['Java Primitive Data Types', 'Boolean Data Type', 'Byte Data Type ', 'Short Data Type ', 'Int Data Type', 'Long Data Type ', 'Float Data Type', 'Double Data Type ', 'Char Data Type']",['Why char uses 2 byte in java and what is \\u0000 ?'],[],"['In Java language, primitive data types are the building blocks of data manipulation. These are the most basic data types available in Java language. ', 'There are 8 types of primitive data types: ', 'The Boolean data type specifies one bit of information, but its ""size"" can\'t be defined precisely.', 'The short data type can also be used to save memory just like byte data type. A short data type is 2 times smaller than an integer. ', 'The int data type is generally used as a default data type for integral values unless if there is no problem about memory.']","[""Java is a statically-typed programming language. It means, all variables must be declared before its use. That is why we need to declare variable's type and name."", 'The Boolean data type is used to store only two possible values: true and false. This data type is used for simple flags that track true/false conditions. ', ""The byte data type is an example of primitive data type. It isan 8-bit signed two's complement integer. Its value-range lies between -128 to 127 (inclusive). Its minimum value is -128 and maximum value is 127. Its default value is 0. "", 'The byte data type is used to save memory in large arrays where the memory savings is most required. It saves space because a byte is 4 times smaller than an integer. It can also be used in place of ""int"" data type. ', ""The short data type is a 16-bit signed two's complement integer. Its value-range lies between -32,768 to 32,767 (inclusive). Its minimum value is -32,768 and maximum value is 32,767. Its default value is 0. "", ""The char data type is a single 16-bit Unicode character. Its value-range lies between '\\u0000' (or 0) to '\\uffff' (or 65,535 inclusive).The char data type is used to store characters. "", 'It is because java uses Unicode system not ASCII code system. The \\u0000 is the lowest range of Unicode system. To get detail explanation about Unicode visit next page.\n']","[""The int data type is a 32-bit signed two's complement integer. Its value-range lies between - 2,147,483,648 (-2^31) to 2,147,483,647 (2^31 -1) (inclusive). Its minimum value is - 2,147,483,648and maximum value is 2,147,483,647. Its default value is 0. "", ""The long data type is a 64-bit two's complement integer. Its value-range lies between -9,223,372,036,854,775,808(-2^63) to 9,223,372,036,854,775,807(2^63 -1)(inclusive). Its minimum value is - 9,223,372,036,854,775,808and maximum value is 9,223,372,036,854,775,807. Its default value is 0. The long data type is used when you need a range of values more than those provided by int."", 'The float data type is a single-precision 32-bit IEEE 754 floating point.Its value range is unlimited. It is recommended to use a float (instead of double) if you need to save memory in large arrays of floating point numbers. The float data type should never be used for precise values, such as currency. Its default value is 0.0F.', 'The double data type is a double-precision 64-bit IEEE 754 floating point. Its value range is unlimited. The double data type is generally used for decimal values just like float. The double data type also should never be used for precise values, such as currency. Its default value is 0.0d.']","['Boolean one = false', 'byte a = 10, byte b = -20', 'short s = 10000, short r = -5000', 'int a = 100000, int b = -200000', 'long a = 100000L, long b = -200000L', 'float f1 = 234.5f', 'double d1 = 12.3', ""char letterA = 'A'""]",[],"[""Data Type|||Default Value|||Default size&&&boolean|||false|||1 bit&&&char|||'\\u0000'|||2 byte&&&byte|||0|||1 byte&&&short|||0|||2 byte&&&int|||0|||4 byte&&&long|||0L|||8 byte&&&float|||0.0f|||4 byte&&&double|||0.0d|||8 byte""]","['|||boolean data type|||byte data type|||char data type|||short data type|||int data type|||long data type|||float data type|||double data type|||&&&|||Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double.|||Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.|||']"
10,['Unicode System'],[],"['https://www.javatpoint.com/operators-in-java', 'https://www.javatpoint.com/variable-datatype', 'https://www.javatpoint.com/operators-in-java', 'https://www.javatpoint.com/variable-datatype', 'https://www.javatpoint.com/operators-in-java']",[],[],"['Problem', 'Solution']",['Why java uses Unicode System?'],[],[],[],[],[],[],[],[]
11,['Operators in Java'],"[""Operator in Java is a symbol that is used to perform operations. For example: +, -, *, / etc.\n There are many types of operators in Java which are given below:\n\nUnary Operator, Arithmetic Operator, Shift Operator, Relational Operator, Bitwise Operator, Logical Operator, Ternary Operator and Assignment Operator.\nJava Operator Precedence\n\nOperator TypeCategoryPrecedence\n\nUnarypostfixexpr++ expr--\n\n\nprefix++expr --expr +expr -expr ~ !\n\n\nArithmeticmultiplicative* / %\n\n\nadditive+ -\n\n\nShiftshift<< >> >>>\n\n\nRelationalcomparison< > <= >= instanceof\n\n\nequality== !=\n\n\nBitwisebitwise AND&\n\n\nbitwise exclusive OR^\n\n\nbitwise inclusive OR|\n\n\nLogicallogical AND&&\n\n\nlogical OR||\n\n\nTernaryternary? :\n\n\nAssignmentassignment= += -= *= /= %= &= ^= |= <<= >>= >>>=\n\n\nJava Unary Operator\nThe Java unary operators require only one operand. Unary operators are used to perform various operations i.e.:\n\nincrementing/decrementing a value by one\nnegating an expression\ninverting the value of a boolean\n\nJava Unary Operator Example: ++ and --\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint x=10;\r\nSystem.out.println(x++);//10 (11)\r\nSystem.out.println(++x);//12\r\nSystem.out.println(x--);//12 (11)\r\nSystem.out.println(--x);//10\r\n}}\r\n\nOutput:\n10\r\n12\r\n12\r\n10\r\n\nJava Unary Operator Example 2: ++ and --\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=10;\r\nSystem.out.println(a++ + ++a);//10+12=22\r\nSystem.out.println(b++ + b++);//10+11=21\r\n\r\n}}\r\n\nOutput:\n22\r\n21\r\n\nJava Unary Operator Example: ~ and !\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=-10;\r\nboolean c=true;\r\nboolean d=false;\r\nSystem.out.println(~a);//-11 (minus of total positive value which starts from 0)\r\nSystem.out.println(~b);//9 (positive of total minus, positive starts from 0)\r\nSystem.out.println(!c);//false (opposite of boolean value)\r\nSystem.out.println(!d);//true\r\n}}\r\n\nOutput:\n-11\r\n9\r\nfalse\r\ntrue\r\n\nJava Arithmetic Operators\nJava arithmetic operators are used to perform addition, subtraction, multiplication, and division. They act as basic mathematical operations.\nJava Arithmetic Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nSystem.out.println(a+b);//15\r\nSystem.out.println(a-b);//5\r\nSystem.out.println(a*b);//50\r\nSystem.out.println(a/b);//2\r\nSystem.out.println(a%b);//0\r\n}}\r\n\nOutput:\n15\r\n5\r\n50\r\n2\r\n0\r\n\nJava Arithmetic Operator Example: Expression\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nSystem.out.println(10*10/5+3-1*4/2);\r\n}}\r\n\nOutput:\n21\r\n\nJava Left Shift Operator\nThe Java left shift operator << is used to shift all of the bits in a value to the left side of a specified number of times.\nJava Left Shift Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nSystem.out.println(10<<2);//10*2^2=10*4=40\r\nSystem.out.println(10<<3);//10*2^3=10*8=80\r\nSystem.out.println(20<<2);//20*2^2=20*4=80\r\nSystem.out.println(15<<4);//15*2^4=15*16=240\r\n}}\r\n\nOutput:\n40\r\n80\r\n80\r\n240\r\n\nJava Right Shift Operator\nThe Java right shift operator >> is used to move the value of the left operand to right by the number of bits specified by the right operand.\nJava Right Shift Operator Example\n\r\npublic OperatorExample{\r\npublic static void main(String args[]){\r\nSystem.out.println(10>>2);//10/2^2=10/4=2\r\nSystem.out.println(20>>2);//20/2^2=20/4=5\r\nSystem.out.println(20>>3);//20/2^3=20/8=2\r\n}}\r\n\nOutput:\n2\r\n5\r\n2\r\n\nJava Shift Operator Example: >> vs >>>\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\n\t//For positive number, >> and >>> works same\r\n\tSystem.out.println(20>>2);\r\n\tSystem.out.println(20>>>2);\r\n\t//For negative number, >>> changes parity bit (MSB) to 0\r\n\tSystem.out.println(-20>>2);\r\n\tSystem.out.println(-20>>>2);\r\n}}\r\n\nOutput:\n5\r\n5\r\n-5\r\n1073741819\r\n\nJava AND Operator Example: Logical && and Bitwise &\nThe logical && operator doesn't check the second condition if the first condition is false. It checks the second condition only if the first one is true.\nThe bitwise & operator always checks both conditions whether first condition is true or false.\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nint c=20;\r\nSystem.out.println(a<b&&a<c);//false && true = false\r\nSystem.out.println(a<b&a<c);//false & true = false\r\n}}\r\n\nOutput:\nfalse\r\nfalse\r\n\nJava AND Operator Example: Logical && vs Bitwise &\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nint c=20;\r\nSystem.out.println(a<b&&a++<c);//false && true = false\r\nSystem.out.println(a);//10 because second condition is not checked\r\nSystem.out.println(a<b&a++<c);//false && true = false\r\nSystem.out.println(a);//11 because second condition is checked\r\n}}\r\n\nOutput:\nfalse\r\n10\r\nfalse\r\n11\r\n\nJava OR Operator Example: Logical || and Bitwise |\nThe logical || operator doesn't check the second condition if the first condition is true. It checks the second condition only if the first one is false.\nThe bitwise | operator always checks both conditions whether first condition is true or false.\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nint c=20;\r\nSystem.out.println(a>b||ab|ab||a++b|a++\nOutput:\ntrue\r\ntrue\r\ntrue\r\n10\r\ntrue\r\n11\r\n\nJava Ternary Operator\nJava Ternary operator is used as one line replacement for if-then-else statement and used a lot in Java programming. It is the only conditional operator which takes three operands.\nJava Ternary Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=2;\r\nint b=5;\r\nint min=(a<b)?a:b;\r\nSystem.out.println(min);\r\n}}\r\n\nOutput:\n2\r\n\nAnother Example:\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nint min=(a<b)?a:b;\r\nSystem.out.println(min);\r\n}}\r\n\nOutput:\n5\r\n\nJava Assignment Operator\nJava assignment operator is one of the most common operators. It is used to assign the value on its right to the operand on its left.\nJava Assignment Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=20;\r\na+=4;//a=a+4 (a=10+4)\r\nb-=4;//b=b-4 (b=20-4)\r\nSystem.out.println(a);\r\nSystem.out.println(b);\r\n}}\r\n\nOutput:\n14\r\n16\r\n\nJava Assignment Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String[] args){\r\nint a=10;\r\na+=3;//10+3\r\nSystem.out.println(a);\r\na-=4;//13-4\r\nSystem.out.println(a);\r\na*=2;//9*2\r\nSystem.out.println(a);\r\na/=2;//18/2\r\nSystem.out.println(a);\r\n}}\r\n\nOutput:\n13\r\n9\r\n18\r\n9\r\n\nJava Assignment Operator Example: Adding short\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nshort a=10;\r\nshort b=10;\r\n//a+=b;//a=a+b internally so fine\r\na=a+b;//Compile time error because 10+10=20 now int\r\nSystem.out.println(a);\r\n}}\r\n\nOutput:\nCompile time error\r\n\nAfter type cast:\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nshort a=10;\r\nshort b=10;\r\na=(short)(a+b);//20 which is int now converted to short\r\nSystem.out.println(a);\r\n}}\r\n\nOutput:\n20\r\n\n\nYou may also like\nOperator Shifting in Java\n\n\nNext TopicJava Keywords\n\n\n\n← prev\nnext →\n\n\n""]","['https://www.javatpoint.com/java-keywords', 'https://www.javatpoint.com/unicode-system-in-java', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/operator-shifting', 'https://www.javatpoint.com/java-keywords', 'https://www.javatpoint.com/unicode-system-in-java', 'https://www.javatpoint.com/java-keywords']",[],[],['Java Operator Precedence'],"['Java Unary Operator', 'Java Unary Operator Example: ++ and --', 'Java Unary Operator Example 2: ++ and --', 'Java Unary Operator Example: ~ and !', 'Java Arithmetic Operators', 'Java Arithmetic Operator Example', 'Java Arithmetic Operator Example: Expression', 'Java Left Shift Operator', 'Java Left Shift Operator Example', 'Java Right Shift Operator', 'Java Right Shift Operator Example', 'Java Shift Operator Example: >> vs >>>', 'Java AND Operator Example: Logical && and Bitwise &', 'Java AND Operator Example: Logical && vs Bitwise &', 'Java OR Operator Example: Logical || and Bitwise |', 'Java Ternary Operator', 'Java Ternary Operator Example', 'Java Assignment Operator', 'Java Assignment Operator Example', 'Java Assignment Operator Example', 'Java Assignment Operator Example: Adding short', 'You may also like']",[],"[' There are many types of operators in Java which are given below:', 'The Java unary operators require only one operand. Unary operators are used to perform various operations i.e.:', 'Java arithmetic operators are used to perform addition, subtraction, multiplication, and division. They act as basic mathematical operations.', 'The Java left shift operator << is used to shift all of the bits in a value to the left side of a specified number of times.', 'The Java right shift operator >> is used to move the value of the left operand to right by the number of bits specified by the right operand.', 'The bitwise & operator always checks both conditions whether first condition is true or false.', 'The bitwise | operator always checks both conditions whether first condition is true or false.', 'Another Example:', 'Java assignment operator is one of the most common operators. It is used to assign the value on its right to the operand on its left.', 'After type cast:']","[""The logical && operator doesn't check the second condition if the first condition is false. It checks the second condition only if the first one is true."", ""The logical || operator doesn't check the second condition if the first condition is true. It checks the second condition only if the first one is false."", 'Java Ternary operator is used as one line replacement for if-then-else statement and used a lot in Java programming. It is the only conditional operator which takes three operands.']","[""\n There are many types of operators in Java which are given below:\n\nUnary Operator, Arithmetic Operator, Shift Operator, Relational Operator, Bitwise Operator, Logical Operator, Ternary Operator and Assignment Operator.\nJava Operator Precedence\n\nOperator TypeCategoryPrecedence\n\nUnarypostfixexpr++ expr--\n\n\nprefix++expr --expr +expr -expr ~ !\n\n\nArithmeticmultiplicative* / %\n\n\nadditive+ -\n\n\nShiftshift<< >> >>>\n\n\nRelationalcomparison< > <= >= instanceof\n\n\nequality== !=\n\n\nBitwisebitwise AND&\n\n\nbitwise exclusive OR^\n\n\nbitwise inclusive OR|\n\n\nLogicallogical AND&&\n\n\nlogical OR||\n\n\nTernaryternary? :\n\n\nAssignmentassignment= += -= *= /= %= &= ^= |= <<= >>= >>>=\n\n\nJava Unary Operator\nThe Java unary operators require only one operand. Unary operators are used to perform various operations i.e.:\n\nincrementing/decrementing a value by one\nnegating an expression\ninverting the value of a boolean\n\nJava Unary Operator Example: ++ and --\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint x=10;\r\nSystem.out.println(x++);//10 (11)\r\nSystem.out.println(++x);//12\r\nSystem.out.println(x--);//12 (11)\r\nSystem.out.println(--x);//10\r\n}}\r\n\nOutput:\n10\r\n12\r\n12\r\n10\r\n\nJava Unary Operator Example 2: ++ and --\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=10;\r\nSystem.out.println(a++ + ++a);//10+12=22\r\nSystem.out.println(b++ + b++);//10+11=21\r\n\r\n}}\r\n\nOutput:\n22\r\n21\r\n\nJava Unary Operator Example: ~ and !\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=-10;\r\nboolean c=true;\r\nboolean d=false;\r\nSystem.out.println(~a);//-11 (minus of total positive value which starts from 0)\r\nSystem.out.println(~b);//9 (positive of total minus, positive starts from 0)\r\nSystem.out.println(!c);//false (opposite of boolean value)\r\nSystem.out.println(!d);//true\r\n}}\r\n\nOutput:\n-11\r\n9\r\nfalse\r\ntrue\r\n\nJava Arithmetic Operators\nJava arithmetic operators are used to perform addition, subtraction, multiplication, and division. They act as basic mathematical operations.\nJava Arithmetic Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nSystem.out.println(a+b);//15\r\nSystem.out.println(a-b);//5\r\nSystem.out.println(a*b);//50\r\nSystem.out.println(a/b);//2\r\nSystem.out.println(a%b);//0\r\n}}\r\n\nOutput:\n15\r\n5\r\n50\r\n2\r\n0\r\n\nJava Arithmetic Operator Example: Expression\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nSystem.out.println(10*10/5+3-1*4/2);\r\n}}\r\n\nOutput:\n21\r\n\nJava Left Shift Operator\nThe Java left shift operator << is used to shift all of the bits in a value to the left side of a specified number of times.\nJava Left Shift Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nSystem.out.println(10<<2);//10*2^2=10*4=40\r\nSystem.out.println(10<<3);//10*2^3=10*8=80\r\nSystem.out.println(20<<2);//20*2^2=20*4=80\r\nSystem.out.println(15<<4);//15*2^4=15*16=240\r\n}}\r\n\nOutput:\n40\r\n80\r\n80\r\n240\r\n\nJava Right Shift Operator\nThe Java right shift operator >> is used to move the value of the left operand to right by the number of bits specified by the right operand.\nJava Right Shift Operator Example\n\r\npublic OperatorExample{\r\npublic static void main(String args[]){\r\nSystem.out.println(10>>2);//10/2^2=10/4=2\r\nSystem.out.println(20>>2);//20/2^2=20/4=5\r\nSystem.out.println(20>>3);//20/2^3=20/8=2\r\n}}\r\n\nOutput:\n2\r\n5\r\n2\r\n\nJava Shift Operator Example: >> vs >>>\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\n\t//For positive number, >> and >>> works same\r\n\tSystem.out.println(20>>2);\r\n\tSystem.out.println(20>>>2);\r\n\t//For negative number, >>> changes parity bit (MSB) to 0\r\n\tSystem.out.println(-20>>2);\r\n\tSystem.out.println(-20>>>2);\r\n}}\r\n\nOutput:\n5\r\n5\r\n-5\r\n1073741819\r\n\nJava AND Operator Example: Logical && and Bitwise &\nThe logical && operator doesn't check the second condition if the first condition is false. It checks the second condition only if the first one is true.\nThe bitwise & operator always checks both conditions whether first condition is true or false.\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nint c=20;\r\nSystem.out.println(a<b&&a<c);//false && true = false\r\nSystem.out.println(a<b&a<c);//false & true = false\r\n}}\r\n\nOutput:\nfalse\r\nfalse\r\n\nJava AND Operator Example: Logical && vs Bitwise &\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nint c=20;\r\nSystem.out.println(a<b&&a++<c);//false && true = false\r\nSystem.out.println(a);//10 because second condition is not checked\r\nSystem.out.println(a<b&a++<c);//false && true = false\r\nSystem.out.println(a);//11 because second condition is checked\r\n}}\r\n\nOutput:\nfalse\r\n10\r\nfalse\r\n11\r\n\nJava OR Operator Example: Logical || and Bitwise |\nThe logical || operator doesn't check the second condition if the first condition is true. It checks the second condition only if the first one is false.\nThe bitwise | operator always checks both conditions whether first condition is true or false.\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nint c=20;\r\nSystem.out.println(a>b||ab|ab||a++b|a++\nOutput:\ntrue\r\ntrue\r\ntrue\r\n10\r\ntrue\r\n11\r\n\nJava Ternary Operator\nJava Ternary operator is used as one line replacement for if-then-else statement and used a lot in Java programming. It is the only conditional operator which takes three operands.\nJava Ternary Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=2;\r\nint b=5;\r\nint min=(a<b)?a:b;\r\nSystem.out.println(min);\r\n}}\r\n\nOutput:\n2\r\n\nAnother Example:\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=5;\r\nint min=(a<b)?a:b;\r\nSystem.out.println(min);\r\n}}\r\n\nOutput:\n5\r\n\nJava Assignment Operator\nJava assignment operator is one of the most common operators. It is used to assign the value on its right to the operand on its left.\nJava Assignment Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nint a=10;\r\nint b=20;\r\na+=4;//a=a+4 (a=10+4)\r\nb-=4;//b=b-4 (b=20-4)\r\nSystem.out.println(a);\r\nSystem.out.println(b);\r\n}}\r\n\nOutput:\n14\r\n16\r\n\nJava Assignment Operator Example\n\r\npublic class OperatorExample{\r\npublic static void main(String[] args){\r\nint a=10;\r\na+=3;//10+3\r\nSystem.out.println(a);\r\na-=4;//13-4\r\nSystem.out.println(a);\r\na*=2;//9*2\r\nSystem.out.println(a);\r\na/=2;//18/2\r\nSystem.out.println(a);\r\n}}\r\n\nOutput:\n13\r\n9\r\n18\r\n9\r\n\nJava Assignment Operator Example: Adding short\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nshort a=10;\r\nshort b=10;\r\n//a+=b;//a=a+b internally so fine\r\na=a+b;//Compile time error because 10+10=20 now int\r\nSystem.out.println(a);\r\n}}\r\n\nOutput:\nCompile time error\r\n\nAfter type cast:\n\r\npublic class OperatorExample{\r\npublic static void main(String args[]){\r\nshort a=10;\r\nshort b=10;\r\na=(short)(a+b);//20 which is int now converted to short\r\nSystem.out.println(a);\r\n}}\r\n\nOutput:\n20\r\n\n\nYou may also like\nOperator Shifting in Java""]","['public class OperatorExample{', 'public static void main(String args[]){', 'int x=10;', 'System.out.println(x++);//10 (11)', 'System.out.println(++x);//12', 'System.out.println(x--);//12 (11)', 'System.out.println(--x);//10', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=10;', 'int b=10;', 'System.out.println(a++ + ++a);//10+12=22', 'System.out.println(b++ + b++);//10+11=21', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=10;', 'int b=-10;', 'boolean c=true;', 'boolean d=false;', 'System.out.println(~a);//-11 (minus of total positive value which starts from 0)', 'System.out.println(~b);//9 (positive of total minus, positive starts from 0)', 'System.out.println(!c);//false (opposite of boolean value)', 'System.out.println(!d);//true', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=10;', 'int b=5;', 'System.out.println(a+b);//15', 'System.out.println(a-b);//5', 'System.out.println(a*b);//50', 'System.out.println(a/b);//2', 'System.out.println(a%b);//0', 'public class OperatorExample{', 'public static void main(String args[]){', 'System.out.println(10*10/5+3-1*4/2);', 'public class OperatorExample{', 'public static void main(String args[]){', 'System.out.println(10<<2);//10*2^2=10*4=40', 'System.out.println(10<<3);//10*2^3=10*8=80', 'System.out.println(20<<2);//20*2^2=20*4=80', 'System.out.println(15<<4);//15*2^4=15*16=240', 'public OperatorExample{', 'public static void main(String args[]){', 'System.out.println(10>>2);//10/2^2=10/4=2', 'System.out.println(20>>2);//20/2^2=20/4=5', 'System.out.println(20>>3);//20/2^3=20/8=2', 'public class OperatorExample{', 'public static void main(String args[]){', 'System.out.println(20>>2);', 'System.out.println(20>>>2);', 'System.out.println(-20>>2);', 'System.out.println(-20>>>2);', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=10;', 'int b=5;', 'int c=20;', 'System.out.println(a<b&&a<c);//false && true = false', 'System.out.println(a<b&a<c);//false & true = false', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=10;', 'int b=5;', 'int c=20;', 'System.out.println(a<b&&a++<c);//false && true = false', 'System.out.println(a);//10 because second condition is not checked', 'System.out.println(a<b&a++<c);//false && true = false', 'System.out.println(a);//11 because second condition is checked', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=10;', 'int b=5;', 'int c=20;', 'System.out.println(a>b||ab|ab||a++b|a++', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=2;', 'int b=5;', 'int min=(a<b)?a:b;', 'System.out.println(min);', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=10;', 'int b=5;', 'int min=(a<b)?a:b;', 'System.out.println(min);', 'public class OperatorExample{', 'public static void main(String args[]){', 'int a=10;', 'int b=20;', 'a+=4;//a=a+4 (a=10+4)', 'b-=4;//b=b-4 (b=20-4)', 'System.out.println(a);', 'System.out.println(b);', 'public class OperatorExample{', 'public static void main(String[] args){', 'int a=10;', 'a+=3;//10+3', 'System.out.println(a);', 'a-=4;//13-4', 'System.out.println(a);', 'a*=2;//9*2', 'System.out.println(a);', 'a/=2;//18/2', 'System.out.println(a);', 'public class OperatorExample{', 'public static void main(String args[]){', 'short a=10;', 'short b=10;', 'a=a+b;//Compile time error because 10+10=20 now int', 'System.out.println(a);', 'public class OperatorExample{', 'public static void main(String args[]){', 'short a=10;', 'short b=10;', 'a=(short)(a+b);//20 which is int now converted to short', 'System.out.println(a);']","['10', '12', '12', '10', '22', '21', '-11', '9', 'false', 'true', '15', '5', '50', '2', '0', '21', '40', '80', '80', '240', '2', '5', '2', '5', '5', '-5', '1073741819', 'false', 'false', 'false', '10', 'false', '11', 'true', 'true', 'true', '10', 'true', '11', '2', '5', '14', '16', '13', '9', '18', '9', 'Compile time error', '20']",['perator TypeCategoryPrecedenc&&&Unarypostfixexpr++ expr--&&&prefix++expr --expr +expr -expr ~ !&&&Arithmeticmultiplicative* / %&&&additive+ -&&&Shiftshift<< >> >>>&&&Relationalcomparison< > <= >= instanceof&&&equality== !=&&&Bitwisebitwise AND&&&&bitwise exclusive OR^&&&bitwise inclusive OR|&&&Logicallogical AND&&&&&logical OR||&&&Ternaryternary? :&&&Assignmentassignment= += -= *= /= %= &= ^= |= <<= >>= >>>='],"['|||Unary Operator, Arithmetic Operator, Shift Operator, Relational Operator, Bitwise Operator, Logical Operator, Ternary Operator and Assignment Operator.|||incrementing/decrementing a value by one|||negating an expression|||inverting the value of a boolean|||']"
12,['Java Keywords'],['Java keywords are also known as reserved words. Keywords are particular words that act as a key to a code. These are predefined words by Java so they cannot be used as a variable or object name or class name.'],"['https://www.javatpoint.com/control-flow-in-java', 'https://www.javatpoint.com/operators-in-java', 'https://www.javatpoint.com/abstract-keyword-in-java', 'https://www.javatpoint.com/boolean-keyword-in-java', 'https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/byte-keyword-in-java', 'https://www.javatpoint.com/case-keyword-in-java', 'https://www.javatpoint.com/try-catch-block', 'https://www.javatpoint.com/char-keyword-in-java', 'https://www.javatpoint.com/class-keyword-in-java', 'https://www.javatpoint.com/java-continue', 'https://www.javatpoint.com/default-keyword-in-java', 'https://www.javatpoint.com/java-do-while-loop', 'https://www.javatpoint.com/double-keyword-in-java', 'https://www.javatpoint.com/java-if-else', 'https://www.javatpoint.com/enum-in-java', 'https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/final-keyword', 'https://www.javatpoint.com/finally-block-in-exception-handling', 'https://www.javatpoint.com/float-keyword-in-java', 'https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/java-if-else', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/package', 'https://www.javatpoint.com/downcasting-with-instanceof-operator', 'https://www.javatpoint.com/int-keyword-in-java', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/long-keyword-in-java', 'https://www.javatpoint.com/new-keyword-in-java', 'https://www.javatpoint.com/null-keyword-in-java', 'https://www.javatpoint.com/package', 'https://www.javatpoint.com/private-keyword-in-java', 'https://www.javatpoint.com/protected-keyword-in-java', 'https://www.javatpoint.com/public-keyword-in-java', 'https://www.javatpoint.com/return-keyword-in-java', 'https://www.javatpoint.com/short-keyword-in-java', 'https://www.javatpoint.com/static-keyword-in-java', 'https://www.javatpoint.com/strictfp-keyword', 'https://www.javatpoint.com/super-keyword', 'https://www.javatpoint.com/java-switch', 'https://www.javatpoint.com/synchronization-in-java', 'https://www.javatpoint.com/this-keyword', 'https://www.javatpoint.com/throw-keyword', 'https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws', 'https://www.javatpoint.com/transient-keyword', 'https://www.javatpoint.com/try-catch-block', 'https://www.javatpoint.com/volatile-keyword-in-java', 'https://www.javatpoint.com/java-while-loop', 'https://www.javatpoint.com/control-flow-in-java', 'https://www.javatpoint.com/operators-in-java', 'https://www.javatpoint.com/control-flow-in-java']",[],[],['List of Java Keywords'],[],[],['A list of Java keywords or reserved words are given below:'],[],[],[],[],[],"[""|||abstract: Java abstract keyword is used to declare an abstract class. An abstract class can provide the implementation of the interface. It can have abstract and non-abstract methods.|||boolean: Java boolean keyword is used to declare a variable as a boolean type. It can hold True and False values only.|||break: Java break keyword is used to break the loop or switch statement. It breaks the current flow of the program at specified conditions.|||byte: Java byte keyword is used to declare a variable that can hold 8-bit data values.|||case: Java case keyword is used with the switch statements to mark blocks of text.|||catch: Java catch keyword is used to catch the exceptions generated by try statements. It must be used after the try block only.|||char: Java char keyword is used to declare a variable that can hold unsigned 16-bit Unicode characters|||class: Java class keyword is used to declare a class.|||continue: Java continue keyword is used to continue the loop. It continues the current flow of the program and skips the remaining code at the specified condition.|||default: Java default keyword is used to specify the default block of code in a switch statement.|||do: Java do keyword is used in the control statement to declare a loop. It can iterate a part of the program several times.|||double: Java double keyword is used to declare a variable that can hold 64-bit floating-point number.|||else: Java else keyword is used to indicate the alternative branches in an if statement.|||enum: Java enum keyword is used to define a fixed set of constants. Enum constructors are always private or default.|||extends: Java extends keyword is used to indicate that a class is derived from another class or interface.|||final: Java final keyword is used to indicate that a variable holds a constant value. It is used with a variable. It is used to restrict the user from updating the value of the variable.|||finally: Java finally keyword indicates a block of code in a try-catch structure. This block is always executed whether an exception is handled or not.|||float: Java float keyword is used to declare a variable that can hold a 32-bit floating-point number.|||for: Java for keyword is used to start a for loop. It is used to execute a set of instructions/functions repeatedly when some condition becomes true. If the number of iteration is fixed, it is recommended to use for loop.|||if: Java if keyword tests the condition. It executes the if block if the condition is true.|||implements: Java implements keyword is used to implement an interface. |||import: Java import keyword makes classes and interfaces available and accessible to the current source code.|||instanceof: Java instanceof keyword is used to test whether the object is an instance of the specified class or implements an interface.|||int: Java int keyword is used to declare a variable that can hold a 32-bit signed integer.|||interface: Java interface keyword is used to declare an interface. It can have only abstract methods.|||long: Java long keyword is used to declare a variable that can hold a 64-bit integer.|||native: Java native keyword is used to specify that a method is implemented in native code using JNI (Java Native Interface).|||new: Java new keyword is used to create new objects.|||null: Java null keyword is used to indicate that a reference does not refer to anything. It removes the garbage value.|||package: Java package keyword is used to declare a Java package that includes the classes.|||private: Java private keyword is an access modifier. It is used to indicate that a method or variable may be accessed only in the class in which it is declared.|||protected: Java protected keyword is an access modifier. It can be accessible within the package and outside the package but through inheritance only. It can't be applied with the class.|||public: Java public keyword is an access modifier. It is used to indicate that an item is accessible anywhere. It has the widest scope among all other modifiers.\t|||return: Java return keyword is used to return from a method when its execution is complete.|||short: Java short keyword is used to declare a variable that can hold a 16-bit integer.|||static: Java static keyword is used to indicate that a variable or method is a class method. The static keyword in Java is mainly used for memory management.|||strictfp: Java strictfp is used to restrict the floating-point calculations to ensure portability.|||super: Java super keyword is a reference variable that is used to refer to parent class objects. It can be used to invoke the immediate parent class method.|||switch: The Java switch keyword contains a switch statement that executes code based on test value. The switch statement tests the equality of a variable against multiple values.|||synchronized: Java synchronized keyword is used to specify the critical sections or methods in multithreaded code. |||this: Java this keyword can be used to refer the current object in a method or constructor.|||throw: The Java throw keyword is used to explicitly throw an exception. The throw keyword is mainly used to throw custom exceptions. It is followed by an instance.|||throws: The Java throws keyword is used to declare an exception. Checked exceptions can be propagated with throws.|||transient: Java transient keyword is used in serialization. If you define any data member as transient, it will not be serialized.|||try: Java try keyword is used to start a block of code that will be tested for exceptions. The try block must be followed by either catch or finally block.|||void: Java void keyword is used to specify that a method does not have a return value.|||volatile: Java volatile keyword is used to indicate that a variable may change asynchronously.|||while: Java while keyword is used to start a while loop. This loop iterates a part of the program several times. If the number of iteration is not fixed, it is recommended to use the while loop.|||""]"
13,['Java Control Statements | Control Flow in Java'],"['Java compiler executes the code from top to bottom. The statements in the code are executed according to the order in which they appear. However, Java provides statements that can be used to control the flow of Java code. Such statements are called control flow statements. It is one of the fundamental features of Java, which provides a smooth flow of program.']","['https://www.javatpoint.com/java-if-else', 'https://www.javatpoint.com/java-keywords', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-if-else', 'https://www.javatpoint.com/https://www.javatpoint.com/java-switch', 'https://www.javatpoint.com/https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-while-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/java-do-while-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/https://www.javatpoint.com/java-continue', 'https://www.javatpoint.com/java-if-else', 'https://www.javatpoint.com/java-keywords', 'https://www.javatpoint.com/java-if-else']","['https://static.javatpoint.com/core/images/control-flow-in-java.png', 'https://static.javatpoint.com/core/images/control-flow-in-java2.png', 'https://static.javatpoint.com/core/images/control-flow-in-java3.png']",[],[],"['Decision-Making statements:', '1) If Statement:', '1) Simple if statement:', '2) if-else statement', '3) if-else-if ladder:', '4. Nested if-statement', 'Switch Statement:', 'Loop Statements', 'Java for loop', 'Java for-each loop', 'Java while loop', 'Java do-while loop', 'Jump Statements', 'Java break statement', 'Java continue statement']",[],"['Java provides three types of control flow statements.', ""Let's understand the if-statements one by one."", 'Syntax of if statement is given below.', 'Consider the following example in which we have used the if statement in the java code.', 'Student.java', 'Student.java', 'Consider the following example.', 'Student.java', 'Syntax of if-else-if statement is given below.', 'Consider the following example.', 'Student.java', 'In nested if-statements, the if statement can contain a if or if-else statement inside another if or else-if statement.', 'Syntax of Nested if-statement is given below.', 'Consider the following example.', 'Student.java', 'Points to be noted about switch statement:', 'The syntax to use the switch statement is given below.', 'Consider the following example to understand the flow of the switch statement.', 'Student.java', 'In Java, we have three types of loops that execute similarly. However, there are differences in their syntax and condition checking time.', ""Let's understand the loop statements one by one."", 'The flow chart for the for-loop is given below.', 'Consider the following example to understand the proper functioning of the for loop in java.', 'Calculation.java', 'Consider the following example to understand the functioning of the for-each loop in Java.', 'Calculation.java', 'The syntax of the while loop is given below.', 'The flow chart for the while loop is given in the following image.', 'Consider the following example.', 'Calculation .java', 'It is also known as the exit-controlled loop since the condition is not checked in advance. The syntax of the do-while loop is given below.', 'The flow chart of the do-while loop is given in the following image.', 'Consider the following example to understand the functioning of the do-while loop in Java.', 'Calculation.java', 'The break statement cannot be used independently in the Java program, i.e., it can only be written inside the loop or switch statement.', 'The break statement example with for loop', 'Consider the following example in which we have used the break statement with the for loop.', 'BreakExample.java', 'break statement example with labeled for loop', 'Calculation.java', 'Consider the following example to understand the functioning of the continue statement in Java.']","['It is the most basic statement among all control flow statements in Java. It evaluates a Boolean expression and enables the program to enter a block of code if the expression evaluates to true.', 'The if-else statement is an extension to the if-statement, which uses another block of code, i.e., else block. The else block is executed if the condition of the if-block is evaluated as false.', 'While using switch statements, we must notice that the case expression will be of the same type as the variable. However, it will also be a constant value. The switch permits only int, string, and Enum type variables to be used.', ""Java provides an enhanced for loop to traverse the data structures like array or collection. In the for-each loop, we don't need to update the loop variable. The syntax to use the for-each loop in java is given below."", 'It is also known as the entry-controlled loop since the condition is checked at the start of the loop. If the condition is true, then the loop body will be executed; otherwise, the statements after the loop will be executed.', 'The do-while loop checks the condition at the end of the loop after executing the loop statements. When the number of iteration is not known and we have to execute the loop at least once, we can use do-while loop.', 'As the name suggests, the break statement is used to break the current flow of the program and transfer the control to the next statement outside a loop or switch statement. However, it breaks only the inner loop in the case of the nested loop.', ""Unlike break statement, the continue statement doesn't break the loop, whereas, it skips the specific part of the loop and jumps to the next iteration of the loop immediately.""]","['As the name suggests, decision-making statements decide which statement to execute and when. Decision-making statements evaluate the Boolean expression and control the program flow depending upon the result of the condition provided. There are two types of decision-making statements in Java, i.e., If statement and switch statement.', 'In Java, the ""if"" statement is used to evaluate a condition. The control of the program is diverted depending upon the specific condition. The condition of the If statement gives a Boolean value, either true or false. In Java, there are four types of if-statements given below.', 'The if-else-if statement contains the if-statement followed by multiple else-if statements. In other words, we can say that it is the chain of if-else statements that create a decision tree where the program may enter in the block of code where the condition is true. We can also define an else statement at the end of the chain.', 'In Java, Switch statements are similar to if-else-if statements. The switch statement contains multiple blocks of code called cases and a single case is executed based on the variable which is being switched. The switch statement is easier to use instead of if-else-if statements. It also enhances the readability of the program.', 'In programming, sometimes we need to execute the block of code repeatedly while some condition evaluates to true. However, loop statements are used to execute the set of instructions in a repeated order. The execution of the set of instructions depends upon a particular condition.', 'In Java, for loop is similar to C and C++. It enables us to initialize the loop variable, check the condition, and increment/decrement in a single line of code. We use the for loop only when we exactly know the number of times, we want to execute the block of code.', ""The while loop is also used to iterate over the number of statements multiple times. However, if we don't know the number of iterations in advance, it is recommended to use a while loop. Unlike for loop, the initialization and increment/decrement doesn't take place inside the loop statement in while loop."", 'Jump statements are used to transfer the control of the program to the specific statements. In other words, jump statements transfer the execution control to the other part of the program. There are two types of jump statements in Java, i.e., break and continue.']","['if(condition) {', 'statement 1; //executes when condition is true', 'public class Student {', 'public static void main(String[] args) {', 'int x = 10;', 'int y = 12;', 'if(x+y > 20) {', 'System.out.println(""x + y is greater than 20"");', 'if(condition) {', 'statement 1; //executes when condition is true', 'statement 2; //executes when condition is false', 'public class Student {', 'public static void main(String[] args) {', 'int x = 10;', 'int y = 12;', 'if(x+y < 10) {', 'System.out.println(""x + y is less than \t\t10"");', '}\telse {', 'System.out.println(""x + y is greater than 20"");', 'if(condition 1) {', 'statement 1; //executes when condition 1 is true', 'else if(condition 2) {', 'statement 2; //executes when condition 2 is true', 'statement 2; //executes when all the conditions are false', 'public class Student {', 'public static void main(String[] args) {', 'String city = ""Delhi"";', 'if(city == ""Meerut"") {', 'System.out.println(""city is meerut"");', '}else if (city == ""Noida"") {', 'System.out.println(""city is noida"");', '}else if(city == ""Agra"") {', 'System.out.println(""city is agra"");', '}else {', 'System.out.println(city);', 'if(condition 1) {', 'statement 1; //executes when condition 1 is true', 'if(condition 2) {', 'statement 2; //executes when condition 2 is true', 'statement 2; //executes when condition 2 is false', 'public class Student {', 'public static void main(String[] args) {', 'String address = ""Delhi, India"";', 'if(address.endsWith(""India"")) {', 'if(address.contains(""Meerut"")) {', 'System.out.println(""Your city is Meerut"");', '}else if(address.contains(""Noida"")) {', 'System.out.println(""Your city is Noida"");', '}else {', 'System.out.println(address.split("","")[0]);', '}else {', 'System.out.println(""You are not living in India"");', 'switch (expression){', 'case value1:', 'statement1;', 'break;', 'case valueN:', 'statementN;', 'break;', 'default:', 'default statement;', 'public class Student implements Cloneable {', 'public static void main(String[] args) {', 'int num = 2;', 'switch (num){', 'case 0:', 'System.out.println(""number is 0"");', 'case 1:', 'System.out.println(""number is 1"");', 'default:', 'System.out.println(num);', 'for(initialization, condition, increment/decrement) {', 'public class Calculattion {', 'public static void main(String[] args) {', 'int sum = 0;', 'for(int j = 1; j<=10; j++) {', 'sum = sum + j;', 'System.out.println(""The sum of first 10 natural numbers is "" + sum);', 'for(data_type var : array_name/collection_name){', 'public class Calculation {', 'public static void main(String[] args) {', 'String[] names = {""Java"",""C"",""C++"",""Python"",""JavaScript""};', 'System.out.println(""Printing the content of the array names:\\n"");', 'for(String name:names) {', 'System.out.println(name);', 'while(condition){', 'public class Calculation {', 'public static void main(String[] args) {', 'int i = 0;', 'System.out.println(""Printing the list of first 10 even numbers \\n"");', 'while(i<=10) {', 'System.out.println(i);', 'i = i + 2;', '} while (condition);', 'public class Calculation {', 'public static void main(String[] args) {', 'int i = 0;', 'System.out.println(""Printing the list of first 10 even numbers \\n"");', 'System.out.println(i);', 'i = i + 2;', '}while(i<=10);', 'public class BreakExample {', 'public static void main(String[] args) {', 'for(int i = 0; i<= 10; i++) {', 'System.out.println(i);', 'if(i==6) {', 'public class Calculation {', 'public static void main(String[] args) {', 'for(int i = 0; i<= 10; i++) {', 'for(int j = 0; j<=15;j++) {', 'for (int k = 0; k<=20; k++) {', 'System.out.println(k);', 'if(k==5) {', 'break a;', 'public class ContinueExample {', 'public static void main(String[] args) {', 'for(int i = 0; i<= 2; i++) {', 'for (int j = i; j<=5; j++) {', 'if(j == 4) {', 'continue;', 'System.out.println(j);']","['x + y is greater than 20', 'x + y is greater than 20', 'Delhi', 'Delhi', '2', 'The sum of first 10 natural numbers is 55', 'Printing the content of the array names:', 'Java', 'C', 'C++', 'Python', 'JavaScript', 'Printing the list of first 10 even numbers', '0', '2', '4', '6', '8', '10', 'Printing the list of first 10 even numbers', '0', '2', '4', '6', '8', '10', '0', '1', '2', '3', '4', '5', '6', '0', '1', '2', '3', '4', '5', '0', '1', '2', '3', '5', '1', '2', '3', '5', '2', '3', '5']",[],"[""|||if statements|||switch statement||||||do while loop|||while loop|||for loop|||for-each loop||||||break statement|||continue statement||||||The case variables can be int, short, byte, char, or enumeration. String type is also supported since version 7 of Java|||Cases cannot be duplicate|||Default statement is executed when any of the case doesn't match the value of expression. It is optional.|||Break statement terminates the switch block when the condition is satisfied.|||It is optional, if not used, next case is executed.|||While using switch statements, we must notice that the case expression will be of the same type as the variable. However, it will also be a constant value.|||&&&|||Decision Making statements||||||if statements|||switch statement||||||Loop statements||||||do while loop|||while loop|||for loop|||for-each loop||||||Jump statements||||||break statement|||continue statement|||||||||Simple if statement|||if-else statement|||if-else-if ladder|||Nested if-statement||||||for loop|||while loop|||do-while loop|||""]"
14,['Java If-else Statement'],['The Java if statement is used to test the condition. It checks boolean condition: true or false. There are various types of if statement in Java.'],"['https://www.javatpoint.com/java-switch', 'https://www.javatpoint.com/control-flow-in-java', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/boolean-keyword-in-java', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=IfExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=IfElseExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=JavaNestedIfExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=JavaNestedIfExample2', 'https://www.javatpoint.com/java-switch', 'https://www.javatpoint.com/control-flow-in-java', 'https://www.javatpoint.com/java-switch']","['https://static.javatpoint.com/images/core/if1.png', 'https://static.javatpoint.com/images/core/if2.png', 'https://static.javatpoint.com/cpages/images/elseifladder.png', 'corebasic/images/nestedif.png']",[],"['Java if Statement', 'Java if-else Statement', 'Using Ternary Operator', 'Java if-else-if ladder Statement', 'Java Nested if statement']",[],[],"['The Java if statement tests the condition. It executes the if block if condition is true.', 'The Java if-else statement also tests the condition. It executes the if block if condition is true otherwise else block is executed.', 'Leap Year Example:', 'A year is leap, if it is divisible by 4 and 400. But, not by 100.', 'The if-else-if ladder statement executes one condition from multiple statements.', 'Program to check POSITIVE, NEGATIVE or ZERO:', 'Example 2:']","['We can also use ternary operator (? :) to perform the task of if...else statement. It is a shorthand way to check the condition. If the condition is true, the result of ? is returned. But, if the condition is false, the result of : is returned.', 'The nested if statement represents the if block within another if block. Here, the inner if block condition executes only when outer if block condition is true.\n']",[],"['if(condition){', 'public class IfExample {', 'public static void main(String[] args) {', 'int age=20;', 'if(age>18){', 'System.out.print(""Age is greater than 18"");', 'if(condition){', 'public class IfElseExample {', 'public static void main(String[] args) {', 'int number=13;', 'if(number%2==0){', 'System.out.println(""even number"");', '}else{', 'System.out.println(""odd number"");', 'public class LeapYearExample {', 'public static void main(String[] args) {', 'int year=2020;', 'if(((year % 4 ==0) && (year % 100 !=0)) || (year % 400==0)){', 'System.out.println(""LEAP YEAR"");', 'else{', 'System.out.println(""COMMON YEAR"");', 'public class IfElseTernaryExample {', 'public static void main(String[] args) {', 'int number=13;', 'String output=(number%2==0)?""even number"":""odd number"";', 'System.out.println(output);', 'if(condition1){', '}else if(condition2){', 'else if(condition3){', 'public class IfElseIfExample {', 'public static void main(String[] args) {', 'int marks=65;', 'if(marks<50){', 'System.out.println(""fail"");', 'else if(marks>=50 && marks<60){', 'System.out.println(""D grade"");', 'else if(marks>=60 && marks<70){', 'System.out.println(""C grade"");', 'else if(marks>=70 && marks<80){', 'System.out.println(""B grade"");', 'else if(marks>=80 && marks<90){', 'System.out.println(""A grade"");', '}else if(marks>=90 && marks<100){', 'System.out.println(""A+ grade"");', '}else{', 'System.out.println(""Invalid!"");', 'public class PositiveNegativeExample {', 'public static void main(String[] args) {', 'int number=-13;', 'if(number>0){', 'System.out.println(""POSITIVE"");', '}else if(number<0){', 'System.out.println(""NEGATIVE"");', '}else{', 'System.out.println(""ZERO"");', 'if(condition){', 'if(condition){', '}', 'public class JavaNestedIfExample {', 'public static void main(String[] args) {', 'int age=20;', 'int weight=80;', 'if(age>=18){', 'if(weight>50){', 'System.out.println(""You are eligible to donate blood"");', '}', '}', 'public class JavaNestedIfExample2 {', 'public static void main(String[] args) {', 'int age=25;', 'int weight=48;', 'if(age>=18){', 'if(weight>50){', 'System.out.println(""You are eligible to donate blood"");', '} else{', 'System.out.println(""You are not eligible to donate blood"");', '}', '} else{', 'System.out.println(""Age must be greater than 18"");']","['Age is greater than 18', 'odd number', 'LEAP YEAR', 'odd number', 'C grade', 'NEGATIVE', 'You are eligible to donate blood', 'You are not eligible to donate blood']",[],['|||if statement|||if-else statement|||if-else-if ladder|||nested if statement|||']
15,['Java Switch Statement'],"['The Java switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement. The switch statement works with byte, short, int, long, enum types, String and some wrapper types like Byte, Short, Int, and Long. Since Java 7, you can use strings in the switch statement.']","['https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/java-if-else', 'https://www.javatpoint.com/java-if-else', 'https://www.javatpoint.com/java-string', 'https://www.javatpoint.com/java-variables', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=SwitchExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=SwitchMonthExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=SwitchExample2', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=SwitchStringExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=NestedSwitchExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=JavaSwitchEnumExample', 'https://www.javatpoint.com/https://www.javatpoint.com/wrapper-class-in-java', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=WrapperInSwitchCaseExample', 'https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/java-if-else', 'https://www.javatpoint.com/java-for-loop']",['https://static.javatpoint.com/core/images/java-switch-statement.png'],[],"['Java Switch Statement is fall-through', 'Java Switch Statement with String', 'Java Nested Switch Statement', 'Java Enum in Switch Statement', 'Java Wrapper in Switch Statement']",['Points to Remember'],[],"['In other words, the switch statement tests the equality of a variable against multiple values.', 'Flowchart of Switch Statement', 'SwitchExample.java', 'Finding Month Example:', 'SwitchMonthExample.javaHTML', 'Program to check Vowel or Consonant:', 'If the character is A, E, I, O, or U, it is vowel otherwise consonant. It is not case-sensitive.', 'SwitchVowelExample.java', 'The Java switch statement is fall-through. It means it executes all statements after the first match if a break statement is not present.', 'SwitchExample2.java', 'Java allows us to use strings in switch expression since Java SE 7. The case statement should be string literal.', 'SwitchStringExample.java', 'We can use switch statement inside other switch statement in Java. It is known as nested switch statement.', 'NestedSwitchExample.java', 'JavaSwitchEnumExample.java', 'Java allows us to use four wrapper classes: Byte, Short, Integer and Long in switch statement.', 'WrapperInSwitchCaseExample.java']",['Java allows us to use enum in switch statement. Java enum is a class that represent the group of constants. (immutable such as final variables). We use the keyword enum and put the constants in curly braces separated by comma.'],[],"['switch(expression){', 'case value1:', 'break;  //optional', 'case value2:', 'break;  //optional', '......', 'default:', 'code to be executed if all cases are not matched;', 'public class SwitchExample {', 'public static void main(String[] args) {', 'int number=20;', 'switch(number){', 'case 10: System.out.println(""10"");', 'break;', 'case 20: System.out.println(""20"");', 'break;', 'case 30: System.out.println(""30"");', 'break;', 'default:System.out.println(""Not in 10, 20 or 30"");', 'public class SwitchMonthExample {', 'public static void main(String[] args) {', 'int month=7;', 'String monthString="""";', 'switch(month){', 'case 1: monthString=""1 - January"";', 'break;', 'case 2: monthString=""2 - February"";', 'break;', 'case 3: monthString=""3 - March"";', 'break;', 'case 4: monthString=""4 - April"";', 'break;', 'case 5: monthString=""5 - May"";', 'break;', 'case 6: monthString=""6 - June"";', 'break;', 'case 7: monthString=""7 - July"";', 'break;', 'case 8: monthString=""8 - August"";', 'break;', 'case 9: monthString=""9 - September"";', 'break;', 'case 10: monthString=""10 - October"";', 'break;', 'case 11: monthString=""11 - November"";', 'break;', 'case 12: monthString=""12 - December"";', 'break;', 'default:System.out.println(""Invalid Month!"");', '}', 'System.out.println(monthString);', 'public class SwitchVowelExample {', 'public static void main(String[] args) {', ""char ch='O';"", 'switch(ch)', ""case 'a':"", 'System.out.println(""Vowel"");', 'break;', ""case 'e':"", 'System.out.println(""Vowel"");', 'break;', ""case 'i':"", 'System.out.println(""Vowel"");', 'break;', ""case 'o':"", 'System.out.println(""Vowel"");', 'break;', ""case 'u':"", 'System.out.println(""Vowel"");', 'break;', ""case 'A':"", 'System.out.println(""Vowel"");', 'break;', ""case 'E':"", 'System.out.println(""Vowel"");', 'break;', ""case 'I':"", 'System.out.println(""Vowel"");', 'break;', ""case 'O':"", 'System.out.println(""Vowel"");', 'break;', ""case 'U':"", 'System.out.println(""Vowel"");', 'break;', 'default:', 'System.out.println(""Consonant"");', 'public class SwitchExample2 {', 'public static void main(String[] args) {', 'int number=20;', 'switch(number){', 'case 10: System.out.println(""10"");', 'case 20: System.out.println(""20"");', 'case 30: System.out.println(""30"");', 'default:System.out.println(""Not in 10, 20 or 30"");', 'public class SwitchStringExample {', 'public static void main(String[] args) {', 'String levelString=""Expert"";', 'int level=0;', 'switch(levelString){', 'case ""Beginner"": level=1;', 'break;', 'case ""Intermediate"": level=2;', 'break;', 'case ""Expert"": level=3;', 'break;', 'default: level=0;', 'break;', '}', 'System.out.println(""Your Level is: ""+level);', 'public class NestedSwitchExample {', 'public static void main(String args[])', '{', ""char branch = 'C';"", 'int collegeYear = 4;', 'switch( collegeYear )', '{', 'case 1:', 'System.out.println(""English, Maths, Science"");', 'break;', 'case 2:', 'switch( branch )', '{', ""case 'C':"", 'System.out.println(""Operating System, Java, Data Structure"");', 'break;', ""case 'E':"", 'System.out.println(""Micro processors, Logic switching theory"");', 'break;', ""case 'M':"", 'System.out.println(""Drawing, Manufacturing Machines"");', 'break;', '}', 'break;', 'case 3:', 'switch( branch )', '{', ""case 'C':"", 'System.out.println(""Computer Organization, MultiMedia"");', 'break;', ""case 'E':"", 'System.out.println(""Fundamentals of Logic Design, Microelectronics"");', 'break;', ""case 'M':"", 'System.out.println(""Internal Combustion Engines, Mechanical Vibration"");', 'break;', '}', 'break;', 'case 4:', 'switch( branch )', '{', ""case 'C':"", 'System.out.println(""Data Communication and Networks, MultiMedia"");', 'break;', ""case 'E':"", 'System.out.println(""Embedded System, Image Processing"");', 'break;', ""case 'M':"", 'System.out.println(""Production Technology, Thermal Engineering"");', 'break;', '}', 'break;', '}', 'public class JavaSwitchEnumExample {', 'public enum Day {  Sun, Mon, Tue, Wed, Thu, Fri, Sat  }', 'public static void main(String args[])', '{', 'Day[] DayNow = Day.values();', 'for (Day Now : DayNow)', '{', 'switch (Now)', '{', 'case Sun:', 'System.out.println(""Sunday"");', 'break;', 'case Mon:', 'System.out.println(""Monday"");', 'break;', 'case Tue:', 'System.out.println(""Tuesday"");', 'break;', 'case Wed:', 'System.out.println(""Wednesday"");', 'break;', 'case Thu:', 'System.out.println(""Thursday"");', 'break;', 'case Fri:', 'System.out.println(""Friday"");', 'break;', 'case Sat:', 'System.out.println(""Saturday"");', 'break;', '}', '}', '}', 'public class WrapperInSwitchCaseExample {', 'public static void main(String args[])', '{', 'Integer age = 18;', 'switch (age)', '{', 'case (16):', 'System.out.println(""You are under 18."");', 'break;', 'case (18):', 'System.out.println(""You are eligible for vote."");', 'break;', 'case (65):', 'System.out.println(""You are senior citizen."");', 'break;', 'default:', 'System.out.println(""Please give the valid age."");', 'break;', '}']","['20', '7 - July', 'Vowel', '20', '30', 'Not in 10, 20 or 30', 'Your Level is: 3', 'Data Communication and Networks, MultiMedia', 'Sunday', 'Monday', 'Twesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'You are eligible for vote.']",[],"[""|||There can be one or N number of case values for a switch expression.|||The case value must be of switch expression type only. The case value must be literal or constant. It doesn't allow variables.|||The case values must be unique. In case of duplicate value, it renders compile-time error.|||The Java switch expression must be of byte, short, int, long (with its Wrapper type), enums and string.|||Each case statement can have a break statement which is optional. When control reaches to the break statement, it jumps the control after the switch expression. If a break statement is not found, it executes the next case.|||The case value can have a default label which is optional.|||""]"
16,['Loops in Java'],"['The Java for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop.']","['https://www.javatpoint.com/java-while-loop', 'https://www.javatpoint.com/java-switch', 'https://www.javatpoint.com/https://www.javatpoint.com/for-each-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-variables', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ForExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ForEachExample', 'https://www.javatpoint.com/java-programs', 'https://www.javatpoint.com/java-while-loop', 'https://www.javatpoint.com/java-switch', 'https://www.javatpoint.com/java-while-loop']","['https://static.javatpoint.com/images/java-loops.png', 'https://static.javatpoint.com/cpages/images/forloop.png']",[],"['Java Simple for Loop', 'Java Nested for Loop', 'Java for-each Loop', 'Java Labeled For Loop', 'Java Infinitive for Loop', 'Java for Loop vs while Loop vs do-while Loop']",[],['Note: The break and continue keywords breaks or continues the innermost for loop respectively.'],"['There are three types of for loops in Java.', 'A simple for loop is the same as C/C++. We can initialize the variable, check condition and increment/decrement value. It consists of four parts:', 'Flowchart:', 'ForExample.java', 'If we have a for loop inside the another loop, it is known as nested for loop. The inner loop executes completely whenever outer loop executes.', 'NestedForExample.java', 'Pyramid Example 1:', 'PyramidExample.java', 'Pyramid Example 2:', 'PyramidExample2.java', 'It works on the basis of elements and not the index. It returns element one by one in the defined variable.', 'ForEachExample.java', 'LabeledForExample.java', 'If you use break bb;, it will break inner loop only which is the default behaviour of any loop.', 'LabeledForExample2.java', 'If you use two semicolons ;; in the for loop, it will be infinitive for loop.', 'ForExample.java', 'Now, you need to press ctrl+c to exit from the program.']","[""The for-each loop is used to traverse array or collection in Java. It is easier to use than simple for loop because we don't need to increment value and use subscript notation."", 'We can have a name of each Java for loop. To do so, we use label before the for loop. It is useful while using the nested for loop as we can break/continue specific for loop.']",[],"['for(initialization; condition; increment/decrement){', 'public class ForExample {', 'public static void main(String[] args) {', 'for(int i=1;i<=10;i++){', 'System.out.println(i);', 'public class NestedForExample {', 'public static void main(String[] args) {', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'System.out.println(i+"" ""+j);', '}//end of i', '}//end of j', 'public class PyramidExample {', 'public static void main(String[] args) {', 'for(int i=1;i<=5;i++){', 'for(int j=1;j<=i;j++){', 'System.out.print(""* "");', 'System.out.println();//new line', 'public class PyramidExample2 {', 'public static void main(String[] args) {', 'int term=6;', 'for(int i=1;i<=term;i++){', 'for(int j=term;j>=i;j--){', 'System.out.print(""* "");', 'System.out.println();//new line', 'for(data_type variable : array_name){', 'public class ForEachExample {', 'public static void main(String[] args) {', 'int arr[]={12,23,44,56,78};', 'for(int i:arr){', 'System.out.println(i);', 'labelname:', 'for(initialization; condition; increment/decrement){', 'public class LabeledForExample {', 'public static void main(String[] args) {', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'break aa;', 'System.out.println(i+"" ""+j);', 'public class LabeledForExample2 {', 'public static void main(String[] args) {', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'break bb;', 'System.out.println(i+"" ""+j);', 'for(;;){', 'public class ForExample {', 'public static void main(String[] args) {', 'for(;;){', 'System.out.println(""infinitive loop"");']","['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1 1', '1 2', '1 3', '2 1', '2 2', '2 3', '3 1', '3 2', '3 3', '*', '* *', '* * *', '* * * *', '* * * * *', '* * * * * *', '* * * * *', '* * * *', '* * *', '* *', '*', '12', '23', '44', '56', '78', '1 1', '1 2', '1 3', '2 1', '1 1', '1 2', '1 3', '2 1', '3 1', '3 2', '3 3', 'infinitive loop', 'infinitive loop', 'infinitive loop', 'infinitive loop', 'infinitive loop', 'ctrl+c']","['Comparison|||for loop|||while loop|||do-while loop&&&Introduction|||The Java for loop is a control flow statement that iterates a part of the programs multiple times. |||The Java while loop is a control flow statement that executes a part of the programs repeatedly on the basis of given boolean condition.|||The Java do while loop is a control flow statement that executes a part of the programs at least once and the further execution depends upon the given boolean condition.&&&When to use|||If the number of iteration is fixed, it is recommended to use for loop.|||If the number of iteration is not fixed, it is recommended to use while loop.|||If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use the do-while loop.&&&Syntax|||for(init;condition;incr/decr){ |||// code to be executed |||}|||||||||while(condition){ |||//code to be executed |||}|||||||||do{ |||//code to be executed |||}while(condition);|||&&&Example||||||//for loop |||for(int i=1;i<=10;i++){ |||System.out.println(i); |||}|||||||||//while loop |||int i=1; |||while(i<=10){ |||System.out.println(i);|||i++; |||} ||||||//do-while loop |||int i=1; |||do{ |||System.out.println(i);|||i++; |||}while(i<=10);|||&&&Syntax for infinitive loop||||||for(;;){ |||//code to be executed |||}||||||while(true){ |||//code to be executed |||}||||||do{ |||//code to be executed |||}while(true);|||']","['|||Simple for Loop|||For-each or Enhanced for Loop|||Labeled for Loop|||&&&|||Initialization: It is the initial condition which is executed once when the loop starts. Here, we can initialize the variable, or we can use an already initialized variable. It is an optional condition.|||Condition: It is the second condition which is executed each time to test the condition of the loop. It continues execution until the condition is false. It must return boolean value either true or false. It is an optional condition.|||Increment/Decrement: It increments or decrements the variable value. It is an optional condition.|||Statement: The statement of the loop is executed each time until the second condition is false.|||']"
17,['Java While Loop'],"['The Java while loop is used to iterate a part of the program repeatedly until the specified Boolean condition is true. As soon as the Boolean condition becomes false, the loop automatically stops.']","['https://www.javatpoint.com/java-do-while-loop', 'https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/programs-list', 'https://www.javatpoint.com/https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=WhileExample', 'https://www.javatpoint.com/java-do-while-loop', 'https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/java-do-while-loop']",['https://static.javatpoint.com/core/images/java-while-loop.png'],[],['Java Infinitive While Loop'],[],[],"['The while loop is considered as a repeating if statement. If the number of iteration is not fixed, it is recommended to use the while loop.', 'The different parts of do-while loop:', '2. Update expression: Every time the loop body is executed, this expression increments or decrements loop variable.', 'Flowchart of Java While Loop', 'WhileExample.java', 'If you pass true in the while loop, it will be infinitive while loop.', 'WhileExample2.java', 'In the above code, we need to enter Ctrl + C command to terminate the infinite loop.']","['1. Condition: It is an expression which is tested. If the condition is true, the loop body is executed and control goes to update expression. When the condition becomes false, we exit the while loop.', 'Here, the important thing about while loop is that, sometimes it may not even execute. If the condition to be tested results into false, the loop body is skipped and first statement after the while loop will be executed.', 'In the below example, we print integer values from 1 to 10. Unlike the for loop, we separately need to initialize and increment the variable used in the condition (here, i). Otherwise, the loop will execute infinitely.']",[],"['while (condition){', 'I ncrement / decrement statement', 'public class WhileExample {', 'public static void main(String[] args) {', 'int i=1;', 'while(i<=10){', 'System.out.println(i);', 'i++;', 'while(true){', 'public class WhileExample2 {', 'public static void main(String[] args) {', 'while(true){', 'System.out.println(""infinitive while loop"");', '}']","['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'infinitive while loop', 'infinitive while loop', 'infinitive while loop', 'infinitive while loop', 'infinitive while loop', 'ctrl+c']",[],[]
18,['Java do-while Loop'],"['The Java do-while loop is used to iterate a part of the program repeatedly, until the specified condition is true. If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use a do-while loop.']","['https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/java-while-loop', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=DoWhileExample', 'https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/java-while-loop', 'https://www.javatpoint.com/java-break']",['https://static.javatpoint.com/core/images/images/java-do-while-loop.png'],[],['Java Infinitive do-while Loop'],[],"['Note: The do block is executed at least once, even if the condition is false.']","['The different parts of do-while loop:', '2. Update expression: Every time the loop body is executed, the this expression increments or decrements loop variable.', 'Flowchart of do-while loop:', 'DoWhileExample.java', 'If you pass true in the do-while loop, it will be infinitive do-while loop.', 'DoWhileExample2.java', 'In the above code, we need to enter Ctrl + C command to terminate the infinite loop.']","['Java do-while loop is called an exit control loop. Therefore, unlike while loop and for loop, the do-while check the condition at the end of loop body. The Java do-while loop is executed at least once because condition is checked after loop body.', '1. Condition: It is an expression which is tested. If the condition is true, the loop body is executed and control goes to update expression. As soon as the condition becomes false, loop breaks automatically.', 'In the below example, we print integer values from 1 to 10. Unlike the for loop, we separately need to initialize and increment the variable used in the condition (here, i). Otherwise, the loop will execute infinitely.']",[],"['}while (condition);', 'public class DoWhileExample {', 'public static void main(String[] args) {', 'int i=1;', 'do{', 'System.out.println(i);', 'i++;', '}while(i<=10);', '}while(true);', 'public class DoWhileExample2 {', 'public static void main(String[] args) {', 'System.out.println(""infinitive do while loop"");', '}while(true);']","['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'infinitive do while loop', 'infinitive do while loop', 'infinitive do while loop', 'ctrl+c']",[],[]
19,['Java Break Statement'],"['When a break statement is encountered inside a loop, the loop is immediately terminated and the program control resumes at the next statement following the loop.']","['https://www.javatpoint.com/java-continue', 'https://www.javatpoint.com/java-do-while-loop', 'https://www.javatpoint.com/java-switch', 'https://www.javatpoint.com/java-for-loop', 'https://www.javatpoint.com/java-while-loop', 'https://www.javatpoint.com/java-do-while-loop', 'https://www.javatpoint.com/java-switch', 'https://www.javatpoint.com/java-continue', 'https://www.javatpoint.com/java-do-while-loop', 'https://www.javatpoint.com/java-continue']",['https://static.javatpoint.com/core/images/java-break-statement.png'],[],"['Java Break Statement with Loop', 'Java Break Statement with Inner Loop', 'Java Break Statement with Labeled For Loop', 'Java Break Statement in while loop', 'Java Break Statement in do-while loop', 'Java Break Statement with Switch']",[],[],"['We can use Java break statement in all types of loops such as for loop, while loop and do-while loop.', 'Flowchart of Break Statement', 'BreakExample.java', 'It breaks inner loop only if you use break statement inside the inner loop.', 'BreakExample2.java', 'BreakExample3.java', 'BreakWhileExample.java', 'BreakDoWhileExample.java', 'To understand the example of break with switch statement, please visit here: Java Switch Statement.']","['The Java break statement is used to break loop or switch statement. It breaks the current flow of the program at specified condition. In case of inner loop, it breaks only inner loop.', 'We can use break statement with a label. The feature is introduced since JDK 1.5. So, we can break any loop in Java now whether it is outer or inner loop.']",[],"['jump-statement;', 'break;', 'public class BreakExample {', 'public static void main(String[] args) {', 'for(int i=1;i<=10;i++){', 'if(i==5){', 'break;', 'System.out.println(i);', 'public class BreakExample2 {', 'public static void main(String[] args) {', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'break;', '}', 'System.out.println(i+"" ""+j);', '}', '}', 'public class BreakExample3 {', 'public static void main(String[] args) {', 'aa:', 'for(int i=1;i<=3;i++){', 'bb:', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'break aa;', '}', 'System.out.println(i+"" ""+j);', '}', '}', 'public class BreakWhileExample {', 'public static void main(String[] args) {', 'int i=1;', 'while(i<=10){', 'if(i==5){', 'i++;', 'break;//it will break the loop', 'System.out.println(i);', 'i++;', 'public class BreakDoWhileExample {', 'public static void main(String[] args) {', 'int i=1;', 'do{', 'if(i==5){', 'i++;', 'break;//it will break the loop', 'System.out.println(i);', 'i++;', '}while(i<=10);']","['1', '2', '3', '4', '1 1', '1 2', '1 3', '2 1', '3 1', '3 2', '3 3', '1 1', '1 2', '1 3', '2 1', '1', '2', '3', '4', '1', '2', '3', '4']",[],[]
20,['Java Continue Statement'],['The continue statement is used in loop control structure when you need to jump to the next iteration of the loop immediately. It can be used with for loop or while loop.'],"['https://www.javatpoint.com/java-comments', 'https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ContinueExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ContinueWhileExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ContinueDoWhileExample', 'https://www.javatpoint.com/java-comments', 'https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/java-comments']",[],[],"['Java Continue Statement Example', 'Java Continue Statement with Inner Loop', 'Java Continue Statement with Labelled For Loop', 'Java Continue Statement in while loop', 'Java Continue Statement in do-while Loop']",[],[],"['We can use Java continue statement in all types of loops such as for loop, while loop and do-while loop.', 'ContinueExample.java', 'As you can see in the above output, 5 is not printed on the console. It is because the loop is continued when it reaches to 5.', 'It continues inner loop only if you use the continue statement inside the inner loop.', 'ContinueExample2.java', 'ContinueExample3.java', 'ContinueWhileExample.java', 'ContinueDoWhileExample.java']","['The Java continue statement is used to continue the loop. It continues the current flow of the program and skips the remaining code at the specified condition. In case of an inner loop, it continues the inner loop only.', 'We can use continue statement with a label. This feature is introduced since JDK 1.5. So, we can continue any loop in Java now whether it is outer loop or inner.']",[],"['jump-statement;', 'continue;', 'public class ContinueExample {', 'public static void main(String[] args) {', 'for(int i=1;i<=10;i++){', 'if(i==5){', 'continue;//it will skip the rest statement', 'System.out.println(i);', 'public class ContinueExample2 {', 'public static void main(String[] args) {', 'for(int i=1;i<=3;i++){', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'continue;', '}', 'System.out.println(i+"" ""+j);', '}', '}', 'public class ContinueExample3 {', 'public static void main(String[] args) {', 'aa:', 'for(int i=1;i<=3;i++){', 'bb:', 'for(int j=1;j<=3;j++){', 'if(i==2&&j==2){', 'continue aa;', '}', 'System.out.println(i+"" ""+j);', '}', '}', 'public class ContinueWhileExample {', 'public static void main(String[] args) {', 'int i=1;', 'while(i<=10){', 'if(i==5){', 'i++;', 'continue;//it will skip the rest statement', 'System.out.println(i);', 'i++;', 'public class ContinueDoWhileExample {', 'public static void main(String[] args) {', 'int i=1;', 'do{', 'if(i==5){', 'i++;', 'continue;//it will skip the rest statement', 'System.out.println(i);', 'i++;', '}while(i<=10);']","['1', '2', '3', '4', '6', '7', '8', '9', '10', '1 1', '1 2', '1 3', '2 1', '2 3', '3 1', '3 2', '3 3', '1 1', '1 2', '1 3', '2 1', '3 1', '3 2', '3 3', '1', '2', '3', '4', '6', '7', '8', '9', '10', '1', '2', '3', '4', '6', '7', '8', '9', '10']",[],[]
21,['Java Comments'],['The Java comments are the statements in a program that are not executed by the compiler and interpreter.'],"['https://www.javatpoint.com/java-programs', 'https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-variables', 'https://www.javatpoint.com/https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/creating-api-document', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/java-programs', 'https://www.javatpoint.com/java-break', 'https://www.javatpoint.com/java-programs']","['https://static.javatpoint.com/images/java-types-of-comments.png', 'https://static.javatpoint.com/core/images/java-comments.png', 'https://static.javatpoint.com/core/images/java-comments2.png', 'https://static.javatpoint.com/core/images/java-comments3.png']",[],"['Why do we use comments in a code?', 'Types of Java Comments', 'javadoc tags', 'Are Java comments executable?']","['1) Java Single Line Comment', '2) Java Multi Line Comment', '3) Java Documentation Comment']",['Note: Usually // is used for short comments and /* */ is used for longer comments.'],"['There are three types of comments in Java.', 'The single-line comment is used to comment only one line of the code. It is the widely used and easiest way of commenting the statements.', 'Single line comments starts with two forward slashes (//). Any text in front of // is not executed by Java.', ""Let's use single line comment in a Java program."", 'CommentExample1.java', 'Multi-line comments are placed between /* and */. Any text between /* and */ is not executed by Java.', ""Let's use multi-line comment in a Java program."", 'CommentExample2.java', 'To create documentation API, we need to use the javadoc tool. The documentation comments are placed between /** and */.', 'Some of the commonly used tags in documentation comments:', ""Let's use the Javadoc tag in a Java program."", 'Calculate.java', 'Compile it by javac tool:', 'Create Document', 'Create documentation API by javadoc tool:', 'Thus, the Unicode character shifts the print statement to next line and it is executed as a normal Java code.']","['The multi-line comment is used to comment multiple lines of code. It can be used to explain a complex code snippet or to comment multiple lines of code at a time (as it will be difficult to use single-line comments there).', 'Documentation comments are usually used to write large programs for a project or software application as it helps to create documentation API. These APIs are needed for reference, i.e., which classes, methods, arguments, etc., are used in the code.', 'Now, the HTML files are created for the Calculate class in the current directory, i.e., abcDemo. Open the HTML files, and we can see the explanation of Calculate class provided through the documentation comment.', 'Ans: As we know, Java comments are not executed by the compiler or interpreter, however, before the lexical transformation of code in compiler, contents of the code are encoded into ASCII in order to make the processing easy.', 'The above code generate the output because the compiler parses the Unicode character \\u000d as a new line before the lexical transformation, and thus the code is transformed as shown below:']",[],"['public class CommentExample1 {', 'public static void main(String[] args) {', 'int i=10; // i is a variable with value 10', 'System.out.println(i);  //printing the variable i', 'multi line', 'comment', 'public class CommentExample2 {', 'public static void main(String[] args) {', ""/* Let's declare and"", 'print variable in java. */', 'int i=10;', 'System.out.println(i);', '/* float j = 5.9;', 'float k = 4.4;', 'System.out.println( j + k ); */', '*We can use various tags to depict the parameter', '*or heading or author name', '*We can also use HTML tags', 'import java.io.*;', '* <h2> Calculation of numbers </h2>', '* This program implements an application', '* to perform operation such as addition of numbers', '* and print the result', '* <b>Note:</b> Comments make the code readable and', '* easy to understand.', '* @author Anurati', '* @version 16.0', '* @since 2021-07-06', 'public class Calculate{', '/**', '* This method calculates the summation of two integers.', '* @param input1 This is the first parameter to sum() method', '* @param input2 This is the second parameter to the sum() method.', '* @return int This returns the addition of input1 and input2', '*/', 'public int sum(int input1, int input2){', 'return input1 + input2;', '/**', '* This is the main method uses of sum() method.', '* @param args Unused', '* @see IOException', '*/', 'public static void main(String[] args) {', 'Calculate obj = new Calculate();', 'int result = obj.sum(40, 20);', 'System.out.println(""Addition of numbers: "" + result);', '}', 'public class Test{', 'public static void main(String[] args) {', 'public class Test{', 'public static void main(String[] args) {', 'System.out.println(""Java comment is executed!!"");']","['10', '10']","['Tag|||Syntax|||Description&&&{@docRoot}|||{@docRoot}|||to depict relative path to root directory of generated document from any page.&&&@author|||@author name - text|||To add the author of the class.&&&@code|||{@code text}|||To show the text in code font without interpreting it as html markup or nested javadoc tag.&&&@version|||@version version-text|||To specify ""Version"" subheading and version-text when -version option is used.&&&@since|||@since release|||To add ""Since"" heading with since text to generated documentation.&&&@param|||@param parameter-name description|||To add a parameter with given name and description to \'Parameters\' section.&&&@return|||@return description|||Required for every method that returns something (except void)']","['|||Comments are used to make the program more readable by adding the details of the code.|||It makes easy to maintain the code and to find the errors easily.|||The comments can be used to provide information or explanation about the variable, method, class, or any statement.|||It can also be used to prevent the execution of program code while testing the alternative code.|||&&&|||Single Line Comment|||Multi Line Comment|||Documentation Comment|||']"
22,['Java Programs | Java Programming Examples'],"[""Java programs are frequently asked in the interview. These programs can be asked from control statements, array, string, oops etc. Java basic programs like fibonacci series, prime numbers, factorial numbers and palindrome numbers are frequently asked in the interviews and exams. All these programs are given with the maximum examples and output. If you are new to Java programming, we will recommend you to read our Java tutorial first. Let's see the list of Java programs.""]","['https://www.javatpoint.com/java-oops-concepts', 'https://www.javatpoint.com/operators-in-java', 'https://www.javatpoint.com/array-in-java', 'https://www.javatpoint.com/java-string', 'https://www.javatpoint.com/java-oops-concepts', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/#java-basic-programs', 'https://www.javatpoint.com/#java-number-programs', 'https://www.javatpoint.com/#java-array-programs', 'https://www.javatpoint.com/#java-matrix-programs', 'https://www.javatpoint.com/#java-string-programs', 'https://www.javatpoint.com/#java-searching-programs', 'https://www.javatpoint.com/#java-conversion-programs', 'https://www.javatpoint.com/#java-pattern-programs', 'https://www.javatpoint.com/#singly-linked-list-programs', 'https://www.javatpoint.com/#circular-linked-list-programs', 'https://www.javatpoint.com/#doubly-linked-list-programs', 'https://www.javatpoint.com/#tree-programs', 'https://www.javatpoint.com/fibonacci-series-in-java', 'https://www.javatpoint.com/prime-number-program-in-java', 'https://www.javatpoint.com/palindrome-program-in-java', 'https://www.javatpoint.com/factorial-program-in-java', 'https://www.javatpoint.com/armstrong-number-in-java', 'https://www.javatpoint.com/how-to-generate-random-number-in-java', 'https://www.javatpoint.com/how-to-print-pattern-in-java', 'https://www.javatpoint.com/how-to-compare-two-objects-in-java', 'https://www.javatpoint.com/how-to-create-object-in-java', 'https://www.javatpoint.com/how-to-print-ascii-value-in-java', 'https://www.javatpoint.com/how-to-reverse-a-number-in-java', 'https://www.javatpoint.com/java-program-number-to-word', 'https://www.javatpoint.com/automorphic-number-program-in-java', 'https://www.javatpoint.com/peterson-number-in-java', 'https://www.javatpoint.com/sunny-number-in-java', 'https://www.javatpoint.com/tech-number-in-java', 'https://www.javatpoint.com/fascinating-number-in-java', 'https://www.javatpoint.com/keith-number-in-java', 'https://www.javatpoint.com/neon-number-in-java', 'https://www.javatpoint.com/spy-number-in-java', 'https://www.javatpoint.com/atm-program-java', 'https://www.javatpoint.com/autobiographical-number-in-java', 'https://www.javatpoint.com/emirp-number-in-java', 'https://www.javatpoint.com/sphenic-number-in-java', 'https://www.javatpoint.com/buzz-number-java', 'https://www.javatpoint.com/duck-number-java', 'https://www.javatpoint.com/evil-number-java', 'https://www.javatpoint.com/isbn-number-java', 'https://www.javatpoint.com/krishnamurthy-number-java', 'https://www.javatpoint.com/bouncy-number-in-java', 'https://www.javatpoint.com/mystery-number-in-java', 'https://www.javatpoint.com/smith-number-in-java', 'https://www.javatpoint.com/strontio-number-in-java', 'https://www.javatpoint.com/xylem-and-phloem-number-in-java', 'https://www.javatpoint.com/nth-prime-number-java', 'https://www.javatpoint.com/java-program-to-display-alternate-prime-numbers', 'https://www.javatpoint.com/java-program-to-find-square-root-of-a-number-without-sqrt-method', 'https://www.javatpoint.com/java-program-to-swap-two-numbers-using-bitwise-operator', 'https://www.javatpoint.com/java-program-to-find-gcd-of-two-numbers', 'https://www.javatpoint.com/java-program-to-find-largest-of-three-numbers', 'https://www.javatpoint.com/java-program-to-find-smallest-of-three-numbers-using-ternary-operator', 'https://www.javatpoint.com/java-program-to-check-if-a-number-is-positive-or-negative', 'https://www.javatpoint.com/java-program-to-check-if-a-given-number-is-perfect-square', 'https://www.javatpoint.com/java-program-to-display-even-numbers-from-1-to-100', 'https://www.javatpoint.com/java-program-to-display-odd-numbers-from-1-to-100', 'https://www.javatpoint.com/java-program-to-find-sum-of-natural-numbers', 'https://www.javatpoint.com/java-program-to-copy-all-elements-of-one-array-into-another-array', 'https://www.javatpoint.com/java-program-to-find-the-frequency-of-each-element-in-the-array', 'https://www.javatpoint.com/java-program-to-left-rotate-the-elements-of-an-array', 'https://www.javatpoint.com/java-program-to-print-the-duplicate-elements-of-an-array', 'https://www.javatpoint.com/java-program-to-print-the-elements-of-an-array', 'https://www.javatpoint.com/java-program-to-print-the-elements-of-an-array-in-reverse-order', 'https://www.javatpoint.com/java-program-to-print-the-elements-of-an-array-present-on-even-position', 'https://www.javatpoint.com/java-program-to-print-the-elements-of-an-array-present-on-odd-position', 'https://www.javatpoint.com/java-program-to-print-the-largest-element-in-an-array', 'https://www.javatpoint.com/java-program-to-print-the-smallest-element-in-an-array', 'https://www.javatpoint.com/java-program-to-print-the-number-of-elements-present-in-an-array', 'https://www.javatpoint.com/java-program-to-print-the-sum-of-all-the-items-of-the-array', 'https://www.javatpoint.com/java-program-to-right-rotate-the-elements-of-an-array', 'https://www.javatpoint.com/java-program-to-sort-the-elements-of-an-array-in-ascending-order', 'https://www.javatpoint.com/java-program-to-sort-the-elements-of-an-array-in-descending-order', 'https://www.javatpoint.com/java-program-to-find-third-largest-number-in-an-array', 'https://www.javatpoint.com/java-program-to-find-second-largest-number-in-an-array', 'https://www.javatpoint.com/java-program-to-find-largest-number-in-an-array', 'https://www.javatpoint.com/java-program-to-find-second-smallest-number-in-an-array', 'https://www.javatpoint.com/java-program-to-find-smallest-number-in-an-array', 'https://www.javatpoint.com/java-program-to-remove-duplicate-element-in-an-array', 'https://www.javatpoint.com/java-program-to-print-odd-and-even-numbers-from-an-array', 'https://www.javatpoint.com/how-to-sort-an-array-in-java', 'https://www.javatpoint.com/java-matrix-programs', 'https://www.javatpoint.com/java-program-to-add-two-matrices', 'https://www.javatpoint.com/java-program-to-multiply-two-matrices', 'https://www.javatpoint.com/java-program-to-subtract-the-two-matrices', 'https://www.javatpoint.com/java-program-to-determine-whether-two-matrices-are-equal', 'https://www.javatpoint.com/java-program-to-display-the-lower-triangular-matrix', 'https://www.javatpoint.com/java-program-to-display-the-upper-triangular-matrix', 'https://www.javatpoint.com/java-program-to-find-the-frequency-of-odd-and-even-numbers-in-the-given-matrix', 'https://www.javatpoint.com/java-program-to-find-the-product-of-two-matrices', 'https://www.javatpoint.com/java-program-to-find-the-sum-of-each-row-and-each-column-of-a-matrix', 'https://www.javatpoint.com/java-program-to-find-the-transpose-of-a-given-matrix', 'https://www.javatpoint.com/java-program-to-determine-whether-a-given-matrix-is-an-identity-matrix', 'https://www.javatpoint.com/java-program-to-determine-whether-a-given-matrix-is-a-sparse-matrix', 'https://www.javatpoint.com/java-program-to-transpose-matrix', 'https://www.javatpoint.com/java-program-to-count-the-total-number-of-characters-in-a-string', 'https://www.javatpoint.com/java-program-to-count-the-total-number-of-characters-in-a-string-2', 'https://www.javatpoint.com/java-program-to-count-the-total-number-of-punctuation-characters-exists-in-a-string', 'https://www.javatpoint.com/java-program-to-count-the-total-number-of-vowels-and-consonants-in-a-string', 'https://www.javatpoint.com/java-program-to-determine-whether-two-strings-are-the-anagram', 'https://www.javatpoint.com/java-program-to-divide-a-string-in-n-equal-parts', 'https://www.javatpoint.com/java-program-to-find-all-subsets-of-a-string', 'https://www.javatpoint.com/java-program-to-find-the-longest-repeating-sequence-in-a-string', 'https://www.javatpoint.com/java-program-to-ind-all-the-permutations-of-a-string', 'https://www.javatpoint.com/java-program-to-remove-all-the-white-spaces-from-a-string', 'https://www.javatpoint.com/java-program-to-replace-lower-case-characters-with-upper-case-and-vice-versa', 'https://www.javatpoint.com/java-program-to-replace-the-spaces-of-a-string-with-a-specific-character', 'https://www.javatpoint.com/java-program-to-determine-whether-a-given-string-is-palindrome', 'https://www.javatpoint.com/java-program-to-determine-whether-one-string-is-a-rotation-of-another', 'https://www.javatpoint.com/java-program-to-find-maximum-and-minimum-occurring-character-in-a-string', 'https://www.javatpoint.com/java-program-to-find-reverse-of-the-string', 'https://www.javatpoint.com/java-program-to-find-the-duplicate-characters-in-a-string', 'https://www.javatpoint.com/java-program-to-find-the-duplicate-words-in-a-string', 'https://www.javatpoint.com/java-program-to-find-the-frequency-of-characters', 'https://www.javatpoint.com/java-program-to-find-the-largest-and-smallest-word-in-a-string', 'https://www.javatpoint.com/java-program-to-find-the-most-repeated-word-in-a-text-file', 'https://www.javatpoint.com/java-program-to-find-the-number-of-the-words-in-the-given-text-file', 'https://www.javatpoint.com/java-program-to-separate-the-individual-characters-from-a-string', 'https://www.javatpoint.com/java-program-to-swap-two-string-variables-without-using-third-or-temp-variable', 'https://www.javatpoint.com/java-program-to-print-smallest-and-biggest-possible-palindrome-word-in-a-given-string', 'https://www.javatpoint.com/how-to-reverse-a-string-in-java-word-by-word', 'https://www.javatpoint.com/how-to-reserve-a-string-in-java-without-using-reverse-function', 'https://www.javatpoint.com/linear-search-in-java', 'https://www.javatpoint.com/binary-search-in-java', 'https://www.javatpoint.com/bubble-sort-in-java', 'https://www.javatpoint.com/selection-sort-in-java', 'https://www.javatpoint.com/insertion-sort-in-java', 'https://www.javatpoint.com/java-string-to-int', 'https://www.javatpoint.com/java-int-to-string', 'https://www.javatpoint.com/java-string-to-long', 'https://www.javatpoint.com/java-long-to-string', 'https://www.javatpoint.com/java-string-to-float', 'https://www.javatpoint.com/java-float-to-string', 'https://www.javatpoint.com/java-string-to-double', 'https://www.javatpoint.com/java-double-to-string', 'https://www.javatpoint.com/java-string-to-date', 'https://www.javatpoint.com/java-date-to-string', 'https://www.javatpoint.com/java-string-to-char', 'https://www.javatpoint.com/java-char-to-string', 'https://www.javatpoint.com/java-string-to-object', 'https://www.javatpoint.com/java-object-to-string', 'https://www.javatpoint.com/java-int-to-long', 'https://www.javatpoint.com/java-long-to-int', 'https://www.javatpoint.com/java-int-to-double', 'https://www.javatpoint.com/java-double-to-int', 'https://www.javatpoint.com/java-char-to-int', 'https://www.javatpoint.com/java-int-to-char', 'https://www.javatpoint.com/java-string-to-boolean', 'https://www.javatpoint.com/java-boolean-to-string', 'https://www.javatpoint.com/java-date-to-timestamp', 'https://www.javatpoint.com/java-timestamp-to-date', 'https://www.javatpoint.com/java-binary-to-decimal', 'https://www.javatpoint.com/java-decimal-to-binary', 'https://www.javatpoint.com/java-hex-to-decimal', 'https://www.javatpoint.com/java-decimal-to-hex', 'https://www.javatpoint.com/java-octal-to-decimal', 'https://www.javatpoint.com/java-decimal-to-octal', 'https://www.javatpoint.com/java-program-to-print-the-following-spiral-pattern-on-the-console', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-2', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-3', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-4', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-5', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-2', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-3', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-4', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-5', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-6', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-7', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-8', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-9', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-10', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-11', 'https://www.javatpoint.com/java-program-to-print-the-following-pattern-on-the-console-12', 'https://www.javatpoint.com/java-singly-linked-list-example', 'https://www.javatpoint.com/java-program-to-create-and-display-a-singly-linked-list', 'https://www.javatpoint.com/java-program-to-create-a-singly-linked-list-of-n-nodes-and-count-the-number-of-nodes', 'https://www.javatpoint.com/java-program-to-create-a-singly-linked-list-of-n-nodes-and-display-in-reverse-order', 'https://www.javatpoint.com/java-program-to-delete-a-node-from-the-beginning-of-the-singly-linked-list', 'https://www.javatpoint.com/java-program-to-delete-a-node-from-the-middle-of-the-singly-linked-list', 'https://www.javatpoint.com/java-program-to-delete-a-node-from-the-end-of-the-singly-linked-list', 'https://www.javatpoint.com/java-program-to-determine-whether-a-singly-linked-list-is-the-palindrome', 'https://www.javatpoint.com/java-program-to-find-the-maximum-and-minimum-value-node-from-a-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-middle-of-the-singly-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-beginning-of-the-singly-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-end-of-the-singly-linked-list', 'https://www.javatpoint.com/java-program-to-remove-duplicate-elements-from-a-singly-linked-list', 'https://www.javatpoint.com/java-program-to-search-an-element-in-a-singly-linked-list', 'https://www.javatpoint.com/java-program-to-create-and-display-a-circular-linked-list', 'https://www.javatpoint.com/java-program-to-create-a-circular-linked-list-of-n-nodes-and-count-the-number-of-nodes', 'https://www.javatpoint.com/java-program-to-create-a-circular-linked-list-of-n-nodes-and-display-it-in-reverse-order', 'https://www.javatpoint.com/java-program-to-delete-a-node-from-the-beginning-of-the-circular-linked-list', 'https://www.javatpoint.com/java-program-to-delete-a-node-from-the-end-of-the-circular-linked-list', 'https://www.javatpoint.com/java-program-to-delete-a-node-from-the-middle-of-the-circular-linked-list', 'https://www.javatpoint.com/java-program-to-find-the-maximum-and-minimum-value-node-from-a-circular-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-beginning-of-the-circular-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-end-of-the-circular-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-middle-of-the-circular-linked-list', 'https://www.javatpoint.com/java-program-to-remove-duplicate-elements-from-a-circular-linked-list', 'https://www.javatpoint.com/java-program-to-search-an-element-in-a-circular-linked-list', 'https://www.javatpoint.com/java-program-to-sort-the-elements-of-the-circular-linked-list', 'https://www.javatpoint.com/java-program-to-convert-a-given-binary-tree-to-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-create-a-doubly-linked-list-from-a-ternary-tree', 'https://www.javatpoint.com/java-program-to-create-a-doubly-linked-list-of-n-nodes-and-count-the-number-of-nodes', 'https://www.javatpoint.com/java-program-to-create-a-doubly-linked-list-of-n-nodes-and-display-it-in-reverse-order', 'https://www.javatpoint.com/java-program-to-create-and-display-a-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-delete-a-new-node-from-the-beginning-of-the-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-delete-a-new-node-from-the-end-of-the-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-delete-a-new-node-from-the-middle-of-the-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-find-the-maximum-and-minimum-value-node-from-a-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-beginning-of-the-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-end-of-the-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-insert-a-new-node-at-the-middle-of-the-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-remove-duplicate-elements-from-a-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-rotate-doubly-linked-list-by-n-nodes', 'https://www.javatpoint.com/java-program-to-search-an-element-in-a-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-sort-the-elements-of-the-doubly-linked-list', 'https://www.javatpoint.com/java-program-to-calculate-the-difference-between-the-sum-of-the-odd-level-and-the-even-level-nodes-of-a-binary-tree', 'https://www.javatpoint.com/java-program-to-construct-a-binary-search-tree-and-perform-deletion-and-in-order-traversal', 'https://www.javatpoint.com/java-program-to-convert-binary-tree-to-binary-search-tree', 'https://www.javatpoint.com/java-program-to-determine-whether-all-leaves-are-at-same-level', 'https://www.javatpoint.com/java-program-to-determine-whether-two-trees-are-identical', 'https://www.javatpoint.com/java-program-to-find-maximum-width-of-a-binary-tree', 'https://www.javatpoint.com/java-program-to-find-the-largest-element-in-a-binary-tree', 'https://www.javatpoint.com/java-program-to-find-the-maximum-depth-or-height-of-a-tree', 'https://www.javatpoint.com/java-program-to-find-the-nodes-which-are-at-the-maximum-distance-in-a-binary-tree', 'https://www.javatpoint.com/java-program-to-find-the-smallest-element-in-a-tree', 'https://www.javatpoint.com/java-program-to-find-the-sum-of-all-the-nodes-of-a-binary-tree', 'https://www.javatpoint.com/java-program-to-find-the-total-number-of-possible-binary-search-trees-with-n-keys', 'https://www.javatpoint.com/java-program-to-implement-binary-tree-using-the-linked-list', 'https://www.javatpoint.com/java-program-to-search-a-node-in-a-binary-tree', 'https://www.javatpoint.com/java-oops-concepts', 'https://www.javatpoint.com/operators-in-java', 'https://www.javatpoint.com/java-oops-concepts']",[],[],[],[],[],[],[],[],[],[],[],['|||Java Basic Programs|||Java Number Programs|||Java Array Programs|||Java Matrix Programs|||Java String Programs|||Java Searching and Sorting Programs|||Java Conversion Programs|||Pattern programs|||Singly Linked List Programs|||Circular Linked List Programs|||Doubly Linked List Programs|||Tree Programs|||']
23,['Java OOPs Concepts'],"['In this page, we will learn about the basics of OOPs. Object-Oriented Programming is a paradigm that provides many concepts, such as inheritance, data binding, polymorphism, etc.']","['https://www.javatpoint.com/java-naming-conventions', 'https://www.javatpoint.com/operators-in-java', 'https://www.javatpoint.com/#oops', 'https://www.javatpoint.com/#oopsadvantage', 'https://www.javatpoint.com/#oopsdifference', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/php-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/runtime-polymorphism-in-java', 'https://www.javatpoint.com/abstract-class-in-java', 'https://www.javatpoint.com/encapsulation', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/java-naming-conventions', 'https://www.javatpoint.com/operators-in-java', 'https://www.javatpoint.com/java-naming-conventions']","['https://static.javatpoint.com/images/java-oops.png', 'https://static.javatpoint.com/images/objects.png', 'https://static.javatpoint.com/images/polymorphism.gif', 'https://static.javatpoint.com/images/capsule.png', 'https://static.javatpoint.com/images/globaldata2.png', 'https://static.javatpoint.com/images/objectdata2.png']",[],"['OOPs (Object-Oriented Programming System)', 'Advantage of OOPs over Procedure-oriented programming language']","['Inheritance', 'Polymorphism', 'Encapsulation', 'Coupling', 'Cohesion', 'Association', 'Aggregation', 'Composition']",['Abstraction'],"['Smalltalk is considered the first truly object-oriented programming language.', 'The popular object-oriented languages are Java, C#, PHP, Python, C++, etc.', 'Apart from these concepts, there are some other terms which are used in Object-Oriented design: ', 'Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.', 'Example: A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.\n', 'Collection of objects is called class. It is a logical entity.', ""A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space."", 'In Java, we use method overloading and method overriding to achieve polymorphism.', 'Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.', ""Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing. "", 'In Java, we use abstract class and interface to achieve abstraction.', ' A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.', 'Association can be undirectional or bidirectional.', '2) OOPs provides data hiding, whereas, in a procedure-oriented programming language, global data can be accessed from anywhere.\n', 'Figure: Data Representation in Procedure-Oriented Programming', 'Figure: Data Representation in Object-Oriented Programming']","['Simula is considered the first object-oriented programming language. The programming paradigm where everything is represented as an object is known as a truly object-oriented programming language.', 'The main aim of object-oriented programming is to implement real-world entities, for example, object, classes, abstraction, inheritance, polymorphism, etc.', 'When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.', 'If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc. ', 'Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.', 'Association represents the relationship between the objects. Here, one object can be associated with one object or many objects. There can be four types of association between the objects:', '\n1) OOPs makes development and maintenance easier, whereas, in a procedure-oriented programming language, it is not easy to manage if code grows as project size increases.\n', '3) OOPs provides the ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.', 'Object-based programming language follows all the features of OOPs except Inheritance. JavaScript and VBScript are examples of object-based programming languages.']","['Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:', ""An Object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can communicate without knowing the details of each other's data or code. The only necessary thing is the type of message accepted and the type of response returned by the objects."", 'Coupling refers to the knowledge or information or dependency of another class. It arises when classes are aware of each other. If a class has the details information of another class, there is strong coupling. In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field. You can use interfaces for the weaker coupling because there is no concrete implementation.', 'Cohesion refers to the level of a component which performs a single well-defined task. A single well-defined task is done by a highly cohesive method. The weakly cohesive method will split the task into separate parts. The java.io package is a highly cohesive package because it has I/O related classes and interface. However, the java.util package is a weakly cohesive package because it has unrelated classes and interfaces.', ""Let's understand the relationship with real-time examples. For example, One country can have one prime minister (one to one), and a prime minister can have many ministers (one to many). Also, many MP's can have one prime minister (many to one), and many ministers can have many departments (many to many)."", 'Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state. It represents the weak relationship between objects. It is also termed as a has-a relationship in Java. Like, inheritance represents the is-a relationship. It is another way to reuse objects.', 'The composition is also a way to achieve Association. The composition represents the relationship where one object contains other objects as a part of its state. There is a strong relationship between the containing object and the dependent object. It is the state where containing objects do not have an independent existence. If you delete the parent object, all the child objects will be deleted automatically. ']",[],[],[],"['|||Object|||Class|||Inheritance|||Polymorphism|||Abstraction|||Encapsulation||||||Coupling|||Cohesion|||Association|||Aggregation|||Composition||||||One to One|||One to Many|||Many to One, and|||Many to Many||||||Can we overload the main method?|||A Java Constructor returns a value but, what?|||Can we create a program without main method?|||What are the six ways to use this keyword?|||Why is multiple inheritance not supported in Java?|||Why use aggregation?|||Can we override the static method?|||What is the covariant return type?|||What are the three usages of Java super keyword?|||Why use instance initializer block?|||What is the usage of a blank final variable?|||What is a marker or tagged interface?|||What is runtime polymorphism or dynamic method dispatch?|||What is the difference between static and dynamic binding?|||How downcasting is possible in Java?|||What is the purpose of a private constructor?|||What is object cloning?||||||Advantage of OOPs|||Naming Convention|||Object and class|||Method overloading|||Constructor|||static keyword|||this keyword with six usage|||Inheritance|||Aggregation|||Method Overriding|||Covariant Return Type|||super keyword|||Instance Initializer block|||final keyword|||Abstract class|||Interface|||Runtime Polymorphism|||Static and Dynamic Binding|||Downcasting with instanceof operator|||Package|||Access Modifiers|||Encapsulation|||Object Cloning|||']"
24,['Java Naming Convention'],"['Java naming convention is a rule to follow as you decide what to name your identifiers such as class, package, variable, constant, method, etc.']","['https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/java-oops-concepts', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/java-oops-concepts', 'https://www.javatpoint.com/object-and-class-in-java']",[],[],"['Advantage of Naming Conventions in Java', 'Naming Conventions of the Different Identifiers', 'CamelCase in Java naming conventions']",[],[],"['The following table shows the popular conventions used for the different identifiers.', 'Java follows camel-case syntax for naming the class, interface, method, and variable.']","['But, it is not forced to follow. So, it is known as convention not rule. These conventions are suggested by several Java communities such as Sun Microsystems and Netscape.', 'All the classes, interfaces, packages, methods and fields of Java programming language are given according to the Java naming convention. If you fail to follow these conventions, it may generate confusion or erroneous code.', 'By using standard Java naming conventions, you make your code easier to read for yourself and other programmers. Readability of Java program is very important. It indicates that less time is spent to figure out what the code does.', 'If the name is combined with two words, the second word will start with uppercase letter always such as actionPerformed(), firstName, ActionEvent, ActionListener, etc.']",[],[],[],"['Identifiers Type|||Naming Rules|||Examples&&&Class|||It should start with the uppercase letter.It should be a noun such as Color, Button, System, Thread, etc.Use appropriate words, instead of acronyms.|||public class Employee{//code snippet}&&&Interface|||It should start with the uppercase letter.It should be an adjective such as Runnable, Remote, ActionListener.Use appropriate words, instead of acronyms.|||interface Printable{//code snippet}&&&Method|||It should start with lowercase letter.It should be a verb such as main(), print(), println().If the name contains multiple words, start it with a lowercase letter followed by an uppercase letter such as actionPerformed().|||class Employee{// methodvoid draw(){//code snippet}}&&&Variable|||It should start with a lowercase letter such as id, name.It should not start with the special characters like & (ampersand), $ (dollar), _ (underscore).If the name contains multiple words, start it with the lowercase letter followed by an uppercase letter such as firstName, lastName.Avoid using one-character variables such as x, y, z.|||class Employee{// variableint id;//code snippet}&&&Package|||It should be a lowercase letter such as java, lang.If the name contains multiple words, it should be separated by dots (.) such as java.util, java.lang.|||//packagepackage com.javatpoint;class Employee{//code snippet}&&&Constant|||It should be in uppercase letters such as RED, YELLOW.If the name contains multiple words, it should be separated by an underscore(_) such as MAX_PRIORITY.It may contain digits but not as the first letter.|||class Employee{//constantstatic final int MIN_AGE = 18;//code snippet}']",[]
25,['Objects and Classes in Java'],"['In this page, we will learn about Java objects and classes. In object-oriented programming technique, we design a program using objects and classes.']","['https://www.javatpoint.com/java-constructor', 'https://www.javatpoint.com/naming-convention', 'https://www.javatpoint.com/#object', 'https://www.javatpoint.com/#class', 'https://www.javatpoint.com/#objectinstancevariable', 'https://www.javatpoint.com/#objectmethod', 'https://www.javatpoint.com/#objectex2', 'https://www.javatpoint.com/#objectannonymous', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Student', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStudent1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStudent2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStudent3', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStudent4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestEmployee', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestRectangle1', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestRectangle2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestAccount', 'https://www.javatpoint.com/java-constructor', 'https://www.javatpoint.com/naming-convention', 'https://www.javatpoint.com/java-constructor']","['https://static.javatpoint.com/images/objects.jpg', 'https://static.javatpoint.com/images/characteristics-of-object.jpg', 'https://static.javatpoint.com/images/class-in-java.png', 'https://static.javatpoint.com/images/object-in-memory.png', 'https://static.javatpoint.com/images/different-ways-to-create-object-in-java.jpg']",[],"['What is a class in Java', '3 Ways to initialize object', 'What are the different ways to create an object in Java?', 'Anonymous object']","['What is an object in Java', 'Syntax to declare a class:', 'Instance variable in Java', 'Method in Java', 'new keyword in Java', 'Object and Class Example: main within the class', 'Object and Class Example: main outside the class', '1) Object and Class Example: Initialization through reference', '2) Object and Class Example: Initialization through method', '3) Object and Class Example: Initialization through a constructor', 'Object and Class Example: Employee', 'Object and Class Example: Rectangle', 'Creating multiple objects by one type only', 'Real World Example: Account']",['Advantage of Method'],"['An object in Java is the physical as well as a logical entity, whereas, a class in Java is a logical entity only. ', 'An object has three characteristics:', 'For Example, Pen is an object. Its name is Reynolds; color is white, known as its state. It is used to write, so writing is its behavior.\n', 'Object Definitions:', 'A class in Java can contain:', 'In Java, a method is like a function which is used to expose the behavior of an object.', 'The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.', 'Here, we are creating a main() method inside the class.', 'File: Student.java', 'File: TestStudent1.java', 'There are 3 ways to initialize object in Java.', 'File: TestStudent2.java', 'We can also create multiple objects and store information in it through reference variable.', 'File: TestStudent3.java', 'File: TestStudent4.java', 'We will learn about constructors in Java later.', ""Let's see an example where we are maintaining records of employees."", 'File: TestEmployee.java', 'There is given another example that maintains the records of Rectangle class.', 'File: TestRectangle1.java', 'There are many ways to create an object in java. They are:', 'We will learn these ways to create object later.', 'If you have to use an object only once, an anonymous object is a good approach. For example:', 'Calling method through a reference:', 'Calling method through an anonymous object', ""Let's see the full example of an anonymous object in Java."", 'We can create multiple objects by one type only as we do in case of primitives.', 'Initialization of primitive variables:', 'Initialization of refernce variables:', ""Let's see the example:"", 'File: TestAccount.java']","['An entity that has state and behavior is known as an object e.g., chair, bike, marker, pen, table, car, etc. It can be physical or logical (tangible and intangible). The example of an intangible object is the banking system.\n', 'An object is an instance of a class. A class is a template or blueprint from which objects are created. So, an object is the instance(result) of a class.\n', ""A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical."", ""In this example, we have created a Student class which has two data members id and name. We are creating the object of the Student class by new keyword and printing the object's value."", ""In real time development, we create classes and use it from another class. It is a better approach than previous one. Let's see a simple example, where we are having main() method in another class."", 'We can have multiple classes in different Java files or single Java file. If you define multiple classes in a single Java source file, it is a good idea to save the file name with the class name which has main() method.', ""Initializing an object means storing data into the object. Let's see a simple example where we are going to initialize the object through a reference variable."", 'In this example, we are creating the two objects of Student class and initializing the value to these objects by invoking the insertRecord method.\nHere, we are displaying the state (data) of the objects by invoking the displayInformation() method.', 'Anonymous simply means nameless. An object which has no reference is known as an anonymous object. It can be used at the time of object creation only.']","[""A variable which is created inside the class but outside the method is known as an instance variable. Instance variable doesn't get memory at compile time. It gets memory at runtime when an object or instance is created. That is why it is known as an instance variable."", 'As you can see in the above figure, object gets the memory in heap memory area. The reference variable refers to the object allocated in the heap memory area.\nHere, s1 and s2 both are reference variables that refer to the objects allocated in memory.']","['class <class_name>{', 'field;', 'method;', 'class Student{', 'int id;//field or data member or instance variable', 'String name;', 'public static void main(String args[]){', 'Student s1=new Student();//creating an object of Student', 'System.out.println(s1.id);//accessing member through reference variable', 'System.out.println(s1.name);', 'class Student{', 'int id;', 'String name;', 'class TestStudent1{', 'public static void main(String args[]){', 'Student s1=new Student();', 'System.out.println(s1.id);', 'System.out.println(s1.name);', 'class Student{', 'int id;', 'String name;', 'class TestStudent2{', 'public static void main(String args[]){', 'Student s1=new Student();', 's1.id=101;', 's1.name=""Sonoo"";', 'System.out.println(s1.id+"" ""+s1.name);//printing members with a white space', 'class Student{', 'int id;', 'String name;', 'class TestStudent3{', 'public static void main(String args[]){', 'Student s1=new Student();', 'Student s2=new Student();', 's1.id=101;', 's1.name=""Sonoo"";', 's2.id=102;', 's2.name=""Amit"";', 'System.out.println(s1.id+"" ""+s1.name);', 'System.out.println(s2.id+"" ""+s2.name);', 'class Student{', 'int rollno;', 'String name;', 'void insertRecord(int r, String n){', 'rollno=r;', 'name=n;', 'void displayInformation(){System.out.println(rollno+"" ""+name);}', 'class TestStudent4{', 'public static void main(String args[]){', 'Student s1=new Student();', 'Student s2=new Student();', 's1.insertRecord(111,""Karan"");', 's2.insertRecord(222,""Aryan"");', 's1.displayInformation();', 's2.displayInformation();', 'class Employee{', 'int id;', 'String name;', 'float salary;', 'void insert(int i, String n, float s) {', 'name=n;', 'salary=s;', 'void display(){System.out.println(id+"" ""+name+"" ""+salary);}', 'public class TestEmployee {', 'public static void main(String[] args) {', 'Employee e1=new Employee();', 'Employee e2=new Employee();', 'Employee e3=new Employee();', 'e1.insert(101,""ajeet"",45000);', 'e2.insert(102,""irfan"",25000);', 'e3.insert(103,""nakul"",55000);', 'e1.display();', 'e2.display();', 'e3.display();', 'class Rectangle{', 'int length;', 'int width;', 'void insert(int l, int w){', 'length=l;', 'width=w;', 'void calculateArea(){System.out.println(length*width);}', 'class TestRectangle1{', 'public static void main(String args[]){', 'Rectangle r1=new Rectangle();', 'Rectangle r2=new Rectangle();', 'r1.insert(11,5);', 'r2.insert(3,15);', 'r1.calculateArea();', 'r2.calculateArea();', 'new Calculation();//anonymous object', 'Calculation c=new Calculation();', 'c.fact(5);', 'new Calculation().fact(5);', 'class Calculation{', 'void fact(int  n){', 'int fact=1;', 'for(int i=1;i<=n;i++){', 'fact=fact*i;', 'System.out.println(""factorial is ""+fact);', 'public static void main(String args[]){', 'new Calculation().fact(5);//calling method with anonymous object', 'int a=10, b=20;', 'Rectangle r1=new Rectangle(), r2=new Rectangle();//creating two objects', 'class Rectangle{', 'int length;', 'int width;', 'void insert(int l,int w){', 'length=l;', 'width=w;', 'void calculateArea(){System.out.println(length*width);}', 'class TestRectangle2{', 'public static void main(String args[]){', 'Rectangle r1=new Rectangle(),r2=new Rectangle();//creating two objects', 'r1.insert(11,5);', 'r2.insert(3,15);', 'r1.calculateArea();', 'r2.calculateArea();', 'class Account{', 'int acc_no;', 'String name;', 'float amount;', 'void insert(int a,String n,float amt){', 'acc_no=a;', 'amount=amt;', 'void deposit(float amt){', 'amount=amount+amt;', 'System.out.println(amt+"" deposited"");', 'void withdraw(float amt){', 'if(amount']","['0 \nnull', '0 \nnull', '101 Sonoo', '101 Sonoo\n102 Amit', '111 Karan\n222 Aryan', '101 ajeet 45000.0\n102 irfan 25000.0\n103 nakul 55000.0', '55 \n45', 'Factorial is 120', '55 \n45', '832345 Ankit 1000.0\nBalance is: 1000.0\n40000.0 deposited\nBalance is: 41000.0\n15000.0 withdrawn\nBalance is: 26000.0']",[],"['|||State: represents the data (value) of an object.|||Behavior: represents the behavior (functionality) of an object such as deposit, withdraw, etc.|||Identity: An object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user. However, it is used internally by the JVM to identify each object uniquely.||||||An object is a real-world entity.|||An object is a runtime entity.|||The object is an entity which has state and behavior.|||The object is an instance of a class.||||||Fields|||Methods|||Constructors|||Blocks|||Nested class and interface||||||Code Reusability|||Code Optimization||||||By new keyword|||By newInstance() method|||By clone() method|||By deserialization|||By factory method etc.|||&&&|||By reference variable|||By method|||By constructor|||']"
26,['Constructors in Java'],"['In Java, a constructor is a block of codes similar to the method. It is called when an instance of the class is created. At the time of calling constructor, memory for the object is allocated in the memory. ']","['https://www.javatpoint.com/static-keyword-in-java', 'https://www.javatpoint.com/method-overloading-in-java', 'https://www.javatpoint.com/#constypes', 'https://www.javatpoint.com/#consdef', 'https://www.javatpoint.com/#conspara', 'https://www.javatpoint.com/#consoverloading', 'https://www.javatpoint.com/#consdoesreturn', 'https://www.javatpoint.com/#conscopy', 'https://www.javatpoint.com/#consothertask', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/access-modifiers', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Student3', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Student4', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/method-overloading-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Student5', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Student6', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Student7', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/static-keyword-in-java', 'https://www.javatpoint.com/method-overloading-in-java', 'https://www.javatpoint.com/static-keyword-in-java']","['https://static.javatpoint.com/images/core/java-constructor.png', 'https://static.javatpoint.com/images/default-constructor1.png', 'https://static.javatpoint.com/images/constructor-vs-method-in-java.jpg']",[],"['Types of Java constructors', 'Java Default Constructor', 'Constructor Overloading in Java', 'Difference between constructor and method in Java', 'Java Copy Constructor', 'Copying values without constructor']","['Rules for creating Java constructor', 'Syntax of default constructor:', 'Q) What is the purpose of a default constructor?', 'Example of default constructor that displays the default values', 'Java Parameterized Constructor', 'Why use the parameterized constructor?', 'Example of parameterized constructor', 'Example of Constructor Overloading', 'Q) Does constructor return any value?', 'Can constructor perform other tasks instead of initialization?', 'Is there Constructor class in Java?', 'What is the purpose of Constructor class?']","['Note: We can use access modifiers while declaring a constructor. It controls the object creation. In other words, we can have private, protected, public or default constructor in Java.', 'Rule: If there is no constructor in a class, compiler automatically creates a default constructor.']","['It is a special type of method which is used to initialize the object.', 'Every time an object is created using the new() keyword, at least one constructor is called. ', 'There are two types of constructors in Java: no-arg constructor, and parameterized constructor.', 'There are two rules defined for the constructor.', 'There are two types of constructors in Java:', 'A constructor is called ""Default Constructor"" when it doesn\'t have any parameter. ', 'The default constructor is used to provide the default values to the object like 0, null, etc., depending on the type.', 'A constructor which has a specific number of parameters is called a parameterized constructor.\n', 'The parameterized constructor is used to provide different values to distinct objects. However, you can provide the same values also.', 'In this example, we have created the constructor of Student class that have two parameters. We can have any number of parameters in the constructor. ', 'In Java, a constructor is just like a method but without return type. It can also be overloaded like Java methods. ', 'There are many differences between constructors and methods. They are given below.', 'There is no copy constructor in Java. However, we can copy the values from one object to another like copy constructor in C++.', 'There are many ways to copy the values of one object into another in Java. They are:', 'In this example, we are going to copy the values of one object into another using Java constructor.', 'Yes, it is the current class instance (You cannot use return type yet it returns a value).', 'Yes, like object creation, starting a thread, calling a method, etc. You can perform any operation in the constructor as you perform in the method.']","['It calls a default constructor if there is no constructor available in the class. In such case, Java compiler provides a default constructor by default.', ""Note: It is called constructor because it constructs the values at the time of object creation. It is not necessary to write a constructor for a class. It is because java compiler creates a default constructor if your class doesn't have any.\n"", 'Explanation:In the above class,you are not creating any constructor so compiler provides you a default constructor. Here 0 and null values are provided by default constructor.', 'We can copy the values of one object into another by assigning the objects values to another object. In this case, there is no need to create the constructor.', 'Java provides a Constructor class which can be used to get the internal information of a constructor in the class. It is found in the java.lang.reflect package.']",['Constructor overloading in Java is a technique of having more than one constructor with different parameter lists. They are arranged in a way that each constructor performs a different task. They are differentiated by the compiler by the number of parameters in the list and their types.\n'],"['<class_name>(){}', 'class Bike1{', 'Bike1(){System.out.println(""Bike is created"");}', 'public static void main(String args[]){', 'Bike1 b=new Bike1();', 'class Student3{', 'String name;', 'void display(){System.out.println(id+"" ""+name);}', 'public static void main(String args[]){', 'Student3 s1=new Student3();', 'Student3 s2=new Student3();', 's1.display();', 's2.display();', 'class Student4{', 'int id;', 'String name;', 'Student4(int i,String n){', 'id = i;', 'name = n;', 'void display(){System.out.println(id+"" ""+name);}', 'public static void main(String args[]){', 'Student4 s1 = new Student4(111,""Karan"");', 'Student4 s2 = new Student4(222,""Aryan"");', 's1.display();', 's2.display();', 'class Student5{', 'int id;', 'String name;', 'int age;', 'Student5(int i,String n){', 'id = i;', 'name = n;', 'Student5(int i,String n,int a){', 'id = i;', 'name = n;', 'age=a;', 'void display(){System.out.println(id+"" ""+name+"" ""+age);}', 'public static void main(String args[]){', 'Student5 s1 = new Student5(111,""Karan"");', 'Student5 s2 = new Student5(222,""Aryan"",25);', 's1.display();', 's2.display();', 'class Student6{', 'int id;', 'String name;', 'Student6(int i,String n){', 'id = i;', 'name = n;', 'Student6(Student6 s){', 'id = s.id;', 'name =s.name;', 'void display(){System.out.println(id+"" ""+name);}', 'public static void main(String args[]){', 'Student6 s1 = new Student6(111,""Karan"");', 'Student6 s2 = new Student6(s1);', 's1.display();', 's2.display();', 'class Student7{', 'int id;', 'String name;', 'Student7(int i,String n){', 'id = i;', 'name = n;', 'Student7(){}', 'void display(){System.out.println(id+"" ""+name);}', 'public static void main(String args[]){', 'Student7 s1 = new Student7(111,""Karan"");', 'Student7 s2 = new Student7();', 's2.id=s1.id;', 's2.name=s1.name;', 's1.display();', 's2.display();']","['Bike is created', '0 null\n0 null', '111 Karan\n222 Aryan', '111 Karan 0\n222 Aryan 25', '111 Karan\n111 Karan', '111 Karan\n111 Karan']","[""ava ConstructorJava Metho&&& constructor is used to initialize the state of an object.A method is used to expose the behavior of an object&&& constructor must not have a return type.A method must have a return type&&&he constructor is invoked implicitly.The method is invoked explicitly&&&he Java compiler provides a default constructor if you don't have any constructor in a class.The method is not provided by the compiler in any case&&&he constructor name must be same as the class name. The method name may or may not be same as the class name""]","['|||By constructor|||By assigning the values of one object into another|||By clone() method of Object class|||&&&|||Constructor name must be the same as its class name|||A Constructor must have no explicit return type|||A Java constructor cannot be abstract, static, final, and synchronized||||||Default constructor (no-arg constructor)|||Parameterized constructor|||']"
27,['Java static keyword'],"['The static keyword in Java is used for memory management mainly. We can apply static keyword with variables, methods, blocks and nested classes.\nThe static keyword belongs to the class than an instance of the class.']","['https://www.javatpoint.com/this-keyword', 'https://www.javatpoint.com/java-constructor', 'https://www.javatpoint.com/#staticv', 'https://www.javatpoint.com/#staticvcounter1', 'https://www.javatpoint.com/#staticvcounter2', 'https://www.javatpoint.com/#staticm', 'https://www.javatpoint.com/#staticmr', 'https://www.javatpoint.com/#staticwhymain', 'https://www.javatpoint.com/#staticblock', 'https://www.javatpoint.com/#staticwithoutmain', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/java-variables', 'https://www.javatpoint.com/java-inner-class', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStaticVariable1', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Counter', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Counter2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStaticMethod', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Calculate', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=A', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=A2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/java-main-method', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=A3', 'https://www.javatpoint.com/this-keyword', 'https://www.javatpoint.com/java-constructor', 'https://www.javatpoint.com/this-keyword']","['https://static.javatpoint.com/images/java-static-keyword1.png', 'https://static.javatpoint.com/images/staticvariable.JPG']",[],"['1) Java static variable', '2) Java static method', '3) Java static block']","['Advantages of static variable', 'Example of static variable', 'Program of the counter without static variable', 'Program of counter by static variable', 'Example of static method', 'Another example of a static method that performs a normal calculation', 'Restrictions for the static method', 'Q) Why is the Java main method static?', 'Example of static block', 'Q) Can we execute a program without main() method?']","['Understanding the problem without static variable', 'Java static property is shared to all objects.']","[' The static can be:', 'If you declare any variable as static, it is known as a static variable.', 'It makes your program memory efficient (i.e., it saves memory).', 'If you apply static keyword with any method, it is known as static method.', 'There are two main restrictions for the static method. They are:', 'Since JDK 1.7 and above, output would be:']","['As we have mentioned above, static variable will get the memory only once, if any object changes the value of the static variable, it will retain its value.', 'Ans) It is because the object is not required to call a static method. If it\nwere a non-static method, JVM creates an object first then call main()\nmethod that will lead the problem of extra memory allocation.', 'Ans) No, one of the ways was the static block, but it was possible till JDK 1.6. Since JDK 1.7, it is not possible to execute a Java class without the main method.']","['Suppose there are 500 students in my college, now all instance data members will get memory each time when the object is created. All students have its unique rollno and name, so instance data member is good in such case. Here, ""college"" refers to the common property of all objects. If we make it static, this field will get the memory only once.', ""In this example, we have created an instance variable named count which is incremented in the constructor. Since instance variable gets the memory at the time of object creation, each object will have the copy of the instance variable. If it is incremented, it won't reflect other objects. So each object will have the value 1 in the count variable.""]","['class Student{', 'int rollno;', 'String name;', 'String college=""ITS"";', 'class Student{', 'int rollno;//instance variable', 'String name;', 'static String college =""ITS"";//static variable', 'Student(int r, String n){', 'rollno = r;', 'name = n;', 'void display (){System.out.println(rollno+"" ""+name+"" ""+college);}', 'public class TestStaticVariable1{', 'public static void main(String args[]){', 'Student s1 = new Student(111,""Karan"");', 'Student s2 = new Student(222,""Aryan"");', 's1.display();', 's2.display();', 'class Counter{', 'int count=0;//will get memory each time when the instance is created', 'Counter(){', 'count++;//incrementing value', 'System.out.println(count);', 'public static void main(String args[]){', 'Counter c1=new Counter();', 'Counter c2=new Counter();', 'Counter c3=new Counter();', 'class Counter2{', 'static int count=0;//will get memory only once and retain its value', 'Counter2(){', 'count++;//incrementing the value of static variable', 'System.out.println(count);', 'public static void main(String args[]){', 'Counter2 c1=new Counter2();', 'Counter2 c2=new Counter2();', 'Counter2 c3=new Counter2();', 'class Student{', 'int rollno;', 'String name;', 'static String college = ""ITS"";', 'static void change(){', 'college = ""BBDIT"";', 'Student(int r, String n){', 'rollno = r;', 'name = n;', 'void display(){System.out.println(rollno+"" ""+name+"" ""+college);}', 'public class TestStaticMethod{', 'public static void main(String args[]){', 'Student.change();//calling change method', 'Student s1 = new Student(111,""Karan"");', 'Student s2 = new Student(222,""Aryan"");', 'Student s3 = new Student(333,""Sonoo"");', 's1.display();', 's2.display();', 's3.display();', 'class Calculate{', 'static int cube(int x){', 'return x*x*x;', 'public static void main(String args[]){', 'int result=Calculate.cube(5);', 'System.out.println(result);', 'class A{', 'int a=40;//non static', 'public static void main(String args[]){', 'System.out.println(a);', 'class A2{', 'static{System.out.println(""static block is invoked"");}', 'public static void main(String args[]){', 'System.out.println(""Hello main"");', 'class A3{', 'static{', 'System.out.println(""static block is invoked"");', 'System.exit(0);']","['111 Karan ITS\n222 Aryan ITS', '1\n1\n1', '1\n2\n3', 'Output:111 Karan BBDIT\n       222 Aryan BBDIT\n       333 Sonoo BBDIT', 'Output:125', 'Output:Compile Time Error', 'Output:static block is invoked\n       Hello main', 'static block is invoked', 'Error: Main method not found in class A3, please define the main method as:\n   public static void main(String[] args)\nor a JavaFX application class must extend javafx.application.Application']",[],"['|||The static variable can be used to refer to the common property of all objects (which is not unique for each object), for example, the company name of employees, college name of students, etc.|||The static variable gets memory only once in the class area at the time of class loading.||||||A static method belongs to the class rather than the object of a class.|||A static method can be invoked without the need for creating an instance of a class.|||A static method can access static data member and can change the value of it.||||||Is used to initialize the static data member.|||It is executed before the main method at the time of classloading.|||&&&|||Variable (also known as a class variable)|||Method (also known as a class method)|||Block|||Nested class||||||The static method can not use non static data member or call non-static method directly.|||this and super cannot be used in static context.|||']"
28,['this keyword in Java'],"['There can be a lot of usage of Java this keyword. In Java, this is a reference variable that refers to the current object.']","['https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/static-keyword-in-java', 'https://www.javatpoint.com/this1', 'https://www.javatpoint.com/this2', 'https://www.javatpoint.com/this3', 'https://www.javatpoint.com/this4', 'https://www.javatpoint.com/this5', 'https://www.javatpoint.com/this6', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThis1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThis2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThis3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThis4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThis5', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThis6', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThis7', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThis8', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=S2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=A4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Test1', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=A5', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/static-keyword-in-java', 'https://www.javatpoint.com/inheritance-in-java']","['https://static.javatpoint.com/images/thisr.jpg', 'https://static.javatpoint.com/images/usage-of-java-this-keyword.png', 'https://static.javatpoint.com/images/thismethod.JPG']",[],['Usage of Java this keyword'],"['1) this: to refer current class instance variable', '2) this: to invoke current class method', '3) this() : to invoke current class constructor', 'Real usage of this() constructor call', '4) this: to pass as an argument in the method', 'Application of this that can be passed as an argument:', '5) this: to pass as argument in the constructor call', '6) this keyword can be used to return current class instance', 'Syntax of this that can be returned as a statement', 'Example of this keyword that you return as a statement from the method', 'Proving this keyword']","['Understanding the problem without this keyword', 'Solution of the above problem by this keyword', 'Program where this keyword is not required', 'It is better approach to use meaningful names for variables. So we use same name for instance variables and parameters in real time, and always use this keyword.', 'Rule: Call to this() must be the first statement in constructor.']","['Here is given the 6 usage of java this keyword.', 'Suggestion: If you are beginner to java, lookup only three usages of this keyword.', ""Let's understand the problem if we don't use this keyword by the example given below:"", 'If local variables(formal arguments) and instance variables are different, there is no need to use this keyword like in the following program:', 'Calling default constructor from parameterized constructor:', 'Calling parameterized constructor from default constructor:', ""The this keyword can also be passed as an argument in the method. It is mainly used in the event handling. Let's see the example:"", 'In event handling (or) in a situation where we have to provide reference of a class to another one. It is used to reuse one object in many methods.', ""We can pass the this keyword in the constructor also. It is useful if we have to use one object in multiple classes. Let's see the example:""]","['The this keyword can be used to refer current class instance variable. If there is ambiguity between the instance variables and parameters, this keyword resolves the problem of ambiguity. ', 'In the above example, parameters (formal arguments) and instance variables are same. So, we are using this keyword to distinguish local variable and instance variable. ', ""You may invoke the method of the current class by using the this keyword. If you don't use the this keyword, compiler automatically adds this keyword while invoking the method. Let's see the example"", 'The this() constructor call can be used to invoke the current class constructor. It is used to reuse the constructor. In other words, it is used for constructor chaining.', ""We can return this keyword as an statement from the method. In such case, return type of the method must be the class type (non-primitive). Let's see the example:"", ""Let's prove that this keyword refers to the current class instance variable. In this program, we are printing the reference variable and this, output of both variables are same.""]","[""The this() constructor call should be used to reuse the constructor from the constructor. It maintains the chain between the constructors i.e. it is used for constructor chaining. Let's see the example given below that displays the actual use of this keyword.""]","['class Student{', 'int rollno;', 'String name;', 'float fee;', 'Student(int rollno,String name,float fee){', 'rollno=rollno;', 'name=name;', 'fee=fee;', 'void display(){System.out.println(rollno+"" ""+name+"" ""+fee);}', 'class TestThis1{', 'public static void main(String args[]){', 'Student s1=new Student(111,""ankit"",5000f);', 'Student s2=new Student(112,""sumit"",6000f);', 's1.display();', 's2.display();', 'class Student{', 'int rollno;', 'String name;', 'float fee;', 'Student(int rollno,String name,float fee){', 'this.rollno=rollno;', 'this.name=name;', 'this.fee=fee;', 'void display(){System.out.println(rollno+"" ""+name+"" ""+fee);}', 'class TestThis2{', 'public static void main(String args[]){', 'Student s1=new Student(111,""ankit"",5000f);', 'Student s2=new Student(112,""sumit"",6000f);', 's1.display();', 's2.display();', 'class Student{', 'int rollno;', 'String name;', 'float fee;', 'Student(int r,String n,float f){', 'rollno=r;', 'name=n;', 'void display(){System.out.println(rollno+"" ""+name+"" ""+fee);}', 'class TestThis3{', 'public static void main(String args[]){', 'Student s1=new Student(111,""ankit"",5000f);', 'Student s2=new Student(112,""sumit"",6000f);', 's1.display();', 's2.display();', 'class A{', 'void m(){System.out.println(""hello m"");}', 'void n(){', 'System.out.println(""hello n"");', 'this.m();', 'class TestThis4{', 'public static void main(String args[]){', 'A a=new A();', 'class A{', 'A(){System.out.println(""hello a"");}', 'A(int x){', 'this();', 'System.out.println(x);', 'class TestThis5{', 'public static void main(String args[]){', 'A a=new A(10);', 'class A{', 'this(5);', 'System.out.println(""hello a"");', 'A(int x){', 'System.out.println(x);', 'class TestThis6{', 'public static void main(String args[]){', 'A a=new A();', 'class Student{', 'int rollno;', 'String name,course;', 'float fee;', 'Student(int rollno,String name,String course){', 'this.rollno=rollno;', 'this.name=name;', 'this.course=course;', 'Student(int rollno,String name,String course,float fee){', 'this(rollno,name,course);//reusing constructor', 'this.fee=fee;', 'void display(){System.out.println(rollno+"" ""+name+"" ""+course+"" ""+fee);}', 'class TestThis7{', 'public static void main(String args[]){', 'Student s1=new Student(111,""ankit"",""java"");', 'Student s2=new Student(112,""sumit"",""java"",6000f);', 's1.display();', 's2.display();', 'class Student{', 'int rollno;', 'String name,course;', 'float fee;', 'Student(int rollno,String name,String course){', 'this.rollno=rollno;', 'this.name=name;', 'this.course=course;', 'Student(int rollno,String name,String course,float fee){', 'this.fee=fee;', 'this(rollno,name,course);//C.T.Error', 'void display(){System.out.println(rollno+"" ""+name+"" ""+course+"" ""+fee);}', 'class TestThis8{', 'public static void main(String args[]){', 'Student s1=new Student(111,""ankit"",""java"");', 'Student s2=new Student(112,""sumit"",""java"",6000f);', 's1.display();', 's2.display();', 'class S2{', 'void m(S2 obj){', 'System.out.println(""method is invoked"");', 'void p(){', 'm(this);', 'public static void main(String args[]){', 'S2 s1 = new S2();', 's1.p();', 'class B{', 'A4 obj;', 'B(A4 obj){', 'this.obj=obj;', 'void display(){', 'System.out.println(obj.data);//using data member of A4 class', 'class A4{', 'int data=10;', 'A4(){', 'B b=new B(this);', 'b.display();', 'public static void main(String args[]){', 'A4 a=new A4();', 'return_type method_name(){', 'return this;', 'class A{', 'A getA(){', 'return this;', 'void msg(){System.out.println(""Hello java"");}', 'class Test1{', 'public static void main(String args[]){', 'new A().getA().msg();', 'class A5{', 'void m(){', 'System.out.println(this);//prints same reference ID', 'public static void main(String args[]){', 'A5 obj=new A5();', 'System.out.println(obj);//prints the reference ID', 'obj.m();']","['0 null 0.0', '0 null 0.0', '111 ankit 5000.0', '112 sumit 6000.0', '111 ankit 5000.0', '112 sumit 6000.0', 'hello n', 'hello m', 'hello a', '10', '5', 'hello a', '111 ankit java 0.0', '112 sumit java 6000.0', 'Compile Time Error: Call to this must be first statement in constructor', 'method is invoked', 'Output:10', 'Hello java', '[email\xa0protected]', '[email\xa0protected]']",[],['|||this can be used to refer current class instance variable.|||this can be used to invoke current class method (implicitly)|||this() can be used to invoke current class constructor.|||this can be passed as an argument in the method call.|||this can be passed as argument in the constructor call.|||this can be used to return the current class instance from the method.|||']
29,['Inheritance in Java'],['Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOPs (Object Oriented programming system).'],"['https://www.javatpoint.com/aggregation-in-java', 'https://www.javatpoint.com/this-keyword', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#inheritancetypes', 'https://www.javatpoint.com/#inheritancenotmultiple', 'https://www.javatpoint.com/java-oops-concepts', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/method-overriding-in-java', 'https://www.javatpoint.com/runtime-polymorphism-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Programmer', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=C', 'https://www.javatpoint.com/aggregation-in-java', 'https://www.javatpoint.com/this-keyword', 'https://www.javatpoint.com/aggregation-in-java']","['https://static.javatpoint.com/images/core/inheritance.jpg', 'https://static.javatpoint.com/images/core/typesofinheritance.jpg', 'https://static.javatpoint.com/images/core/multiple.jpg']",[],"['Types of inheritance in java', 'Single Inheritance Example', 'Multilevel Inheritance Example', 'Hierarchical Inheritance Example', 'Q) Why multiple inheritance is not supported in java?']","['Why use inheritance in java', 'Terms used in Inheritance', 'The syntax of Java Inheritance', 'Java Inheritance Example']",['Note: Multiple inheritance is not supported in Java through class.'],"['Inheritance represents the IS-A relationship which is also known as a parent-child relationship.', 'In the terminology of Java, a class which is inherited is called a parent or superclass, and the new class is called child or subclass.', 'In the above example, Programmer object can access the field of own class as well as of Employee class i.e. code reusability.\n', 'On the basis of class, there can be three types of inheritance in java: single, multilevel and hierarchical.', 'In java programming, multiple and hybrid inheritance is supported through interface only. We will learn about interfaces later.', 'When one class inherits multiple classes, it is known as multiple inheritance. For Example:', 'File: TestInheritance.java', 'File: TestInheritance2.java', 'File: TestInheritance3.java', 'To reduce the complexity and simplify the language, multiple inheritance is not supported in java. ']","['The extends keyword indicates that you are making a new class that derives from an existing class. The meaning of ""extends"" is to increase the functionality.', 'As displayed in the above figure, Programmer is the subclass and Employee is the superclass. The relationship between the two classes is Programmer IS-A Employee. It means that Programmer is a type of Employee.\n', 'When a class inherits another class, it is known as a single inheritance. In the example given below, Dog class inherits the Animal class, so there is the single inheritance.', 'When there is a chain of inheritance, it is known as multilevel inheritance. As you can see in the example given below, BabyDog class inherits the Dog class which again inherits the Animal class, so there is a multilevel inheritance.', 'When two or more classes inherits a single class, it is known as hierarchical inheritance. In the example given below, Dog and Cat classes inherits the Animal class, so there is hierarchical inheritance.', 'Consider a scenario where A, B, and C are three classes. The C class inherits A and B classes. If A and B classes have the same method and you call it from child class object, there will be ambiguity to call the method of A or B class.', 'Since compile-time errors are better than runtime errors, Java renders compile-time error if you inherit 2 classes. So whether you have same method or different, there will be compile time error.']","['The idea behind inheritance in Java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of the parent class. Moreover, you can add new methods and fields in your current class also.']","['class Subclass-name extends Superclass-name', 'class Employee{', 'float salary=40000;', 'class Programmer extends Employee{', 'int bonus=10000;', 'public static void main(String args[]){', 'Programmer p=new Programmer();', 'System.out.println(""Programmer salary is:""+p.salary);', 'System.out.println(""Bonus of Programmer is:""+p.bonus);', 'class Animal{', 'void eat(){System.out.println(""eating..."");}', 'class Dog extends Animal{', 'void bark(){System.out.println(""barking..."");}', 'class TestInheritance{', 'public static void main(String args[]){', 'Dog d=new Dog();', 'd.bark();', 'd.eat();', 'class Animal{', 'void eat(){System.out.println(""eating..."");}', 'class Dog extends Animal{', 'void bark(){System.out.println(""barking..."");}', 'class BabyDog extends Dog{', 'void weep(){System.out.println(""weeping..."");}', 'class TestInheritance2{', 'public static void main(String args[]){', 'BabyDog d=new BabyDog();', 'd.weep();', 'd.bark();', 'd.eat();', 'class Animal{', 'void eat(){System.out.println(""eating..."");}', 'class Dog extends Animal{', 'void bark(){System.out.println(""barking..."");}', 'class Cat extends Animal{', 'void meow(){System.out.println(""meowing..."");}', 'class TestInheritance3{', 'public static void main(String args[]){', 'Cat c=new Cat();', 'c.meow();', 'c.eat();', 'class A{', 'void msg(){System.out.println(""Hello"");}', 'class B{', 'void msg(){System.out.println(""Welcome"");}', 'class C extends A,B{//suppose if it were', 'public static void main(String args[]){', 'C obj=new C();', 'obj.msg();//Now which msg() method would be invoked?']","['Programmer salary is:40000.0\n Bonus of programmer is:10000', 'barking...\neating...', 'weeping...\nbarking...\neating...', 'meowing...\neating...', 'Compile Time Error']",[],"['|||For Method Overriding (so runtime polymorphism can be achieved).|||For Code Reusability.||||||Class: A class is a group of objects which have common properties. It is a template or blueprint from which objects are created.|||Sub Class/Child Class: Subclass is a class which inherits the other class. It is also called a derived class, extended class, or child class. |||Super Class/Parent Class: Superclass is the class from where a subclass inherits the features. It is also called a base class or a parent class.|||Reusability: As the name specifies, reusability is a mechanism which facilitates you to reuse the fields and methods of the existing class when you create a new class. You can use the same fields and methods already defined in the previous class. |||']"
30,['Aggregation in Java'],"['If a class have an entity reference, it is known as Aggregation.\nAggregation represents HAS-A relationship.\n']","['https://www.javatpoint.com/method-overloading-in-java', 'https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Circle', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Emp', 'https://www.javatpoint.com/https://static.javatpoint.com/src/oops/aggregation.zip', 'https://www.javatpoint.com/method-overloading-in-java', 'https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/method-overloading-in-java']",['https://static.javatpoint.com/images/aggregation.JPG'],[],[],"['Why use Aggregation?', 'Simple Example of Aggregation', 'When use Aggregation?', 'Understanding meaningful example of Aggregation']","['Address.java', 'Emp.java']","['\nIn such case, Employee has an entity reference address, so relationship is Employee HAS-A address.\n', 'In this example, we have created the reference of Operation class in the Circle class.\n']","['Consider a situation, Employee object contains many informations such as id, name, emailId etc. It contains one more object named address, which contains its own informations such as city, state, country, zipcode etc. as given below.\n', 'In this example, Employee has an object of Address, address object contains its own informations such as city, state, country etc.\nIn such case relationship is Employee HAS-A address.\n']",[],"['class Employee{', 'String name;', 'Address address;//Address is a class', 'class Operation{', 'int square(int n){', 'return n*n;', 'class Circle{', 'Operation op;//aggregation', 'double pi=3.14;', 'double area(int radius){', 'op=new Operation();', 'int rsquare=op.square(radius);//code reusability (i.e. delegates the method call).', 'return pi*rsquare;', 'public static void main(String args[]){', 'Circle c=new Circle();', 'double result=c.area(5);', 'System.out.println(result);', 'public class Address {', 'String city,state,country;', 'public Address(String city, String state, String country) {', 'this.city = city;', 'this.state = state;', 'this.country = country;', 'public class Emp {', 'String name;', 'Address address;', 'public Emp(int id, String name,Address address) {', 'this.id = id;', 'this.name = name;', 'this.address=address;', 'void display(){', 'System.out.println(id+"" ""+name);', 'System.out.println(address.city+"" ""+address.state+"" ""+address.country);', 'public static void main(String[] args) {', 'Address address1=new Address(""gzb"",""UP"",""india"");', 'Address address2=new Address(""gno"",""UP"",""india"");', 'Emp e=new Emp(111,""varun"",address1);', 'Emp e2=new Emp(112,""arun"",address2);', 'e.display();', 'e2.display();']","['class Operation{\n int square(int n){\n  return n*n;\n }\n}\n\nclass Circle{\n Operation op;//aggregation\n double pi=3.14;\n  \n double area(int radius){\n   op=new Operation();\n   int rsquare=op.square(radius);//code reusability (i.e. delegates the method call).\n   return pi*rsquare;\n }\n\n   \n  \n public static void main(String args[]){\n   Circle c=new Circle();\n   double result=c.area(5);\n   System.out.println(result);\n }\n}', 'Output:78.5', 'public class Address {\nString city,state,country;\n\npublic Address(String city, String state, String country) {\n\tthis.city = city;\n\tthis.state = state;\n\tthis.country = country;\n}\n\n}', 'public class Emp {\nint id;\nString name;\nAddress address;\n\npublic Emp(int id, String name,Address address) {\n\tthis.id = id;\n\tthis.name = name;\n\tthis.address=address;\n}\n\nvoid display(){\nSystem.out.println(id+"" ""+name);\nSystem.out.println(address.city+"" ""+address.state+"" ""+address.country);\n}\n\npublic static void main(String[] args) {\nAddress address1=new Address(""gzb"",""UP"",""india"");\nAddress address2=new Address(""gno"",""UP"",""india"");\n\nEmp e=new Emp(111,""varun"",address1);\nEmp e2=new Emp(112,""arun"",address2);\n\t\ne.display();\ne2.display();\n\t\n}\n}', 'Output:111 varun\n       gzb UP india\n       112 arun\n       gno UP india']",[],[]
31,['Method Overloading in Java'],"['If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.\n']","['https://www.javatpoint.com/method-overriding-in-java', 'https://www.javatpoint.com/object-and-class', 'https://www.javatpoint.com/#monumberofways', 'https://www.javatpoint.com/#mobynumber', 'https://www.javatpoint.com/#mobydatatype', 'https://www.javatpoint.com/#moreturntype', 'https://www.javatpoint.com/#momainmethod', 'https://www.javatpoint.com/#motypepromotion', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/java-programs', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/static-keyword-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestOverloading1', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/java-data-types', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestOverloading2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestOverloading3', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestOverloading4', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=OverloadingCalculation1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=OverloadingCalculation2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=OverloadingCalculation3', 'https://www.javatpoint.com/method-overriding-in-java', 'https://www.javatpoint.com/object-and-class', 'https://www.javatpoint.com/method-overriding-in-java']","['https://static.javatpoint.com/images/overload1.jpg', 'https://static.javatpoint.com/images/java-type-promotion.png']",[],['Method Overloading and Type Promotion'],"['Different ways to overload the method', '1) Method Overloading: changing no. of arguments', '2) Method Overloading: changing data type of arguments', 'Q) Why Method Overloading is not possible by changing the return type of method only?', ' Can we overload java main() method?', 'Example of Method Overloading with TypePromotion', 'Example of Method Overloading with Type Promotion if matching found', 'Example of Method Overloading with Type Promotion in case of ambiguity']","['In Java, Method Overloading is not possible by changing the return type of the method only.', 'Note: Compile Time Error is better than Run Time Error. So, java compiler renders compiler time error if you declare the same method having same parameters.', 'One type is not de-promoted implicitly for example double cannot be depromoted to any type implicitly.']","['If we have to perform only one operation, having same name of the methods increases the readability of the program. ', 'So, we perform method overloading to figure out the program quickly.', 'Method overloading increases the readability of the program.', 'There are two ways to overload the method in java', ""In this example, we are creating static methods so that we don't need to create instance for calling methods."", ""In java, method overloading is not possible by changing the return type of the method only because of ambiguity. Let's see how ambiguity may occur:"", 'System.out.println(Adder.add(11,11)); //Here, how can java determine which sum() method should be called?', ""One type is promoted to another implicitly if no matching datatype is found. Let's understand the concept by the figure given below:"", 'If there are matching type arguments in the method, type promotion is not performed.', 'If there are no matching type arguments in the method, and each method promotes similar number of arguments, there will be ambiguity.']","['In this example, we have created two methods, first add() method performs addition of two numbers and second add method performs addition of three numbers.', 'In this example, we have created two methods that differs in data type. The first add method receives two integer arguments and second add method receives two double arguments.', ""Yes, by method overloading. You can have any number of main methods in a class by method overloading. But JVM calls main() method which receives string array as arguments only. Let's see the simple example: "", 'As displayed in the above diagram, byte can be promoted to short, int, long, float or double. The short datatype can be promoted to int, long, float or double. The char datatype can be promoted to int,long,float or double and so on.']","['Suppose you have to perform addition of the given numbers but there can be any number of arguments, if you write the method such as a(int,int) for two parameters, and b(int,int,int) for three parameters then it may be difficult for you as well as other programmers to understand the behavior of the method because its name differs. ']","['class Adder{', 'static int add(int a,int b){return a+b;}', 'static int add(int a,int b,int c){return a+b+c;}', 'class TestOverloading1{', 'public static void main(String[] args){', 'System.out.println(Adder.add(11,11));', 'System.out.println(Adder.add(11,11,11));', 'class Adder{', 'static int add(int a, int b){return a+b;}', 'static double add(double a, double b){return a+b;}', 'class TestOverloading2{', 'public static void main(String[] args){', 'System.out.println(Adder.add(11,11));', 'System.out.println(Adder.add(12.3,12.6));', 'class Adder{', 'static int add(int a,int b){return a+b;}', 'static double add(int a,int b){return a+b;}', 'class TestOverloading3{', 'public static void main(String[] args){', 'System.out.println(Adder.add(11,11));//ambiguity', 'class TestOverloading4{', 'public static void main(String[] args){System.out.println(""main with String[]"");}', 'public static void main(String args){System.out.println(""main with String"");}', 'public static void main(){System.out.println(""main without args"");}', 'class OverloadingCalculation1{', 'void sum(int a,long b){System.out.println(a+b);}', 'void sum(int a,int b,int c){System.out.println(a+b+c);}', 'public static void main(String args[]){', 'OverloadingCalculation1 obj=new OverloadingCalculation1();', 'obj.sum(20,20);//now second int literal will be promoted to long', 'obj.sum(20,20,20);', 'class OverloadingCalculation2{', 'void sum(int a,int b){System.out.println(""int arg method invoked"");}', 'void sum(long a,long b){System.out.println(""long arg method invoked"");}', 'public static void main(String args[]){', 'OverloadingCalculation2 obj=new OverloadingCalculation2();', 'obj.sum(20,20);//now int arg sum() method gets invoked', 'class OverloadingCalculation3{', 'void sum(int a,long b){System.out.println(""a method invoked"");}', 'void sum(long a,int b){System.out.println(""b method invoked"");}', 'public static void main(String args[]){', 'OverloadingCalculation3 obj=new OverloadingCalculation3();', 'obj.sum(20,20);//now ambiguity']","['22\n33', '22\n24.9', 'Compile Time Error: method add(int,int) is already defined in class Adder', 'main with String[]', 'Output:40\n       60', 'Output:int arg method invoked', 'Output:Compile Time Error']",[],['|||By changing number of arguments|||By changing the data type|||']
32,['Method Overriding in Java'],"['If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java. ']","['https://www.javatpoint.com/covariant-return-type', 'https://www.javatpoint.com/aggregation-in-java', 'https://www.javatpoint.com/#moverproblem', 'https://www.javatpoint.com/#movercanstatic', 'https://www.javatpoint.com/#moverdiff', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Test2', 'https://www.javatpoint.com/method-overloading-vs-method-overriding-in-java', 'https://www.javatpoint.com/access-modifiers#accessoverriding', 'https://www.javatpoint.com/exception-handling-with-method-overriding', 'https://www.javatpoint.com/covariant-return-type', 'https://www.javatpoint.com/aggregation-in-java', 'https://www.javatpoint.com/covariant-return-type']","['https://static.javatpoint.com/images/java-rules-for-method-overriding.png', 'https://static.javatpoint.com/images/core/bankinheritance.png']",[],['Difference between method Overloading and Method Overriding in java'],"['Usage of Java Method Overriding', 'Understanding the problem without method overriding', 'Example of method overriding', 'A real example of Java Method Overriding', 'Can we override static method?', 'Why can we not override static method?', 'Can we override java main method?', 'More topics on Method Overriding (Not For Beginners)']","['Rules for Java Method Overriding', 'Java method overriding is mostly used in Runtime Polymorphism which we will learn in next pages.']","[""Let's understand the problem that we may face in the program if we don't use method overriding."", 'Problem is that I have to provide a specific implementation of run() method in subclass that is why we use method overriding.', 'No, a static method cannot be overridden. It can be proved by runtime polymorphism, so we will learn it later.', 'No, because the main is a static method.', 'Click me for the difference between method overloading and overriding', ""Let's see the concept of method overriding with access modifier."", ""Let's see the concept of method overriding with exception handling.""]","['In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.', 'Consider a scenario where Bank is a class that provides functionality to get the rate of interest. However, the rate of interest varies according to banks. For example, SBI, ICICI and AXIS banks could provide 8%, 7%, and 9% rate of interest.', 'It is because the static method is bound with class whereas instance method is bound with an object. Static belongs to the class area, and an instance belongs to the heap area.\n']","['In this example, we have defined the run method in the subclass as defined in the parent class but it has some specific implementation. The name and parameter of the method are the same, and there is IS-A relationship between the classes, so there is method overriding.\n']","['class Vehicle{', 'void run(){System.out.println(""Vehicle is running"");}', 'class Bike extends Vehicle{', 'public static void main(String args[]){', 'Bike obj = new Bike();', 'obj.run();', 'class Vehicle{', 'void run(){System.out.println(""Vehicle is running"");}', 'class Bike2 extends Vehicle{', 'void run(){System.out.println(""Bike is running safely"");}', 'public static void main(String args[]){', 'Bike2 obj = new Bike2();//creating object', 'obj.run();//calling method', 'class Bank{', 'int getRateOfInterest(){return 0;}', 'class SBI extends Bank{', 'int getRateOfInterest(){return 8;}', 'class ICICI extends Bank{', 'int getRateOfInterest(){return 7;}', 'class AXIS extends Bank{', 'int getRateOfInterest(){return 9;}', 'class Test2{', 'public static void main(String args[]){', 'SBI s=new SBI();', 'ICICI i=new ICICI();', 'AXIS a=new AXIS();', 'System.out.println(""SBI Rate of Interest: ""+s.getRateOfInterest());', 'System.out.println(""ICICI Rate of Interest: ""+i.getRateOfInterest());', 'System.out.println(""AXIS Rate of Interest: ""+a.getRateOfInterest());']","['Vehicle is running', 'Bike is running safely', 'Output:\nSBI Rate of Interest: 8\nICICI Rate of Interest: 7\nAXIS Rate of Interest: 9']",[],['|||Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.|||Method overriding is used for runtime polymorphism|||&&&|||The method must have the same name as in the parent class|||The method must have the same parameter as in the parent class.|||There must be an IS-A relationship (inheritance).|||']
33,['Covariant Return Type'],['The covariant return type specifies that the return type may vary in the same direction as the subclass. '],"['https://www.javatpoint.com/super-keyword', 'https://www.javatpoint.com/method-overriding-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=B1', 'https://www.javatpoint.com/super-keyword', 'https://www.javatpoint.com/method-overriding-in-java', 'https://www.javatpoint.com/super-keyword']",[],[],['Advantages of Covariant Return Type'],"['Simple example of Covariant Return Type', 'How is Covariant return types implemented?']","['Note: If you are beginner to java, skip this topic and return to it after OOPs concepts.']","['FileName: B1.java', 'Following are the advantages of the covariant return type.', '2) In the method overriding, the covariant return type provides the liberty to have more to the point return types.', '3) Covariant return type helps in preventing the run-time ClassCastExceptions on returns.', ""Let's take an example to understand the advantages of the covariant return type."", 'FileName: CovariantExample.java', 'The better way to write the above is:', 'FileName: CovariantExample.java']","['1) Covariant return type assists to stay away from the confusing type casts in the class hierarchy and makes the code more usable, readable, and maintainable.']","[""Before Java5, it was not possible to override any method by changing the return type. But now, since Java5, it is possible to override method by changing the return type if subclass overrides any method whose return type is Non-Primitive but it changes its return type to subclass type. Let's take a simple example:"", 'As you can see in the above example, the return type of the get() method of A class is A but the return type of the get() method of B class is B. Both methods have different return type but it is method overriding. This is known as covariant return type.', 'Explanation: In the above program, class A3 inherits class A2, and class A2 inherits class A1. Thus, A1 is the parent of classes A2 and A3. Hence, any object of classes A2 and A3 is also of type A1. As the return type of the method foo() is the same in every class, we do not know the exact type of object the method is actually returning. We can only deduce that returned object will be of type A1, which is the most generic class. We can not say for sure that returned object will be of A2 or A3. It is where we need to do the typecasting to find out the specific type of object returned from the method foo(). It not only makes the code verbose; it also requires precision from the programmer to ensure that typecasting is done properly; otherwise, there are fair chances of getting the ClassCastException. To exacerbate it, think of a situation where the hierarchical structure goes down to 10 - 15 classes or even more, and in each class, the method foo() has the same return type. That is enough to give a nightmare to the reader and writer of the code.', 'Explanation: In the above program, no typecasting is needed as the return type is specific. Hence, there is no confusion about knowing the type of object getting returned from the method foo(). Also, even if we write the code for the 10 - 15 classes, there would be no confusion regarding the return types of the methods. All this is possible because of the covariant return type.', ""Java doesn't allow the return type-based overloading, but JVM always allows return type-based overloading. JVM uses the full signature of a method for lookup/resolution. Full signature means it includes return type in addition to argument types. i.e., a class can have two or more methods differing only by return type. javac uses this fact to implement covariant return types."", 'Explanation: For every number from 1 to 20, the method isPowerfulNo() is invoked with the help of for-loop. For every number, a vector primeFactors is created for storing its prime divisors. Then, we check whether square of every number present in the vector primeFactors divides the number or not. If all square of all the number present in the vector primeFactors divides the number completely, the number is a powerful number; otherwise, not.']","['class A{', 'A get(){return this;}', 'class B1 extends A{', '@Override', 'B1 get(){return this;}', 'void message(){System.out.println(""welcome to covariant return type"");}', 'public static void main(String args[]){', 'new B1().get().message();', 'class A1', 'A1 foo()', 'return this;', 'void print()', 'System.out.println(""Inside the class A1"");', 'class A2 extends A1', '@Override', 'A1 foo()', 'return this;', 'void print()', 'System.out.println(""Inside the class A2"");', 'class A3 extends A2', '@Override', 'A1 foo()', 'return this;', '@Override', 'void print()', 'System.out.println(""Inside the class A3"");', 'public class CovariantExample', 'public static void main(String argvs[])', 'A1 a1 = new A1();', '', 'a1.foo().print();', '', 'A2 a2 = new A2();', '', '((A2)a2.foo()).print();', '', 'A3 a3 = new A3();', '', '((A3)a3.foo()).print();', '', 'class A1', 'A1 foo()', 'return this;', 'void print()', 'System.out.println(""Inside the class A1"");', 'class A2 extends A1', '@Override', 'A2 foo()', 'return this;', 'void print()', 'System.out.println(""Inside the class A2"");', 'class A3 extends A2', '@Override', 'A3 foo()', 'return this;', '@Override', 'void print()', 'System.out.println(""Inside the class A3"");', 'public class CovariantExample', 'public static void main(String argvs[])', 'A1 a1 = new A1();', '', 'a1.foo().print();', '', 'A2 a2 = new A2();', '', 'a2.foo().print();', '', 'A3 a3 = new A3();', '', 'a3.foo().print();', '']","['welcome to covariant return type', 'Inside the class A1', 'Inside the class A2', 'Inside the class A3', 'Inside the class A1', 'Inside the class A2', 'Inside the class A3', 'The number 1 is not the powerful number.', 'The number 2 is not the powerful number.', 'The number 3 is not the powerful number.', 'The number 4 is the powerful number.', 'The number 5 is not the powerful number.', 'The number 6 is not the powerful number.', 'The number 7 is not the powerful number.', 'The number 8 is the powerful number.', 'The number 9 is the powerful number.', 'The number 10 is not the powerful number.', 'The number 11 is not the powerful number.', 'The number 12 is not the powerful number.', 'The number 13 is not the powerful number.', 'The number 14 is not the powerful number.', 'The number 15 is not the powerful number.', 'The number 16 is the powerful number.', 'The number 17 is not the powerful number.', 'The number 18 is not the powerful number.', 'The number 19 is not the powerful number.', 'The number 20 is the powerful number.']",[],[]
34,['Super Keyword in Java'],['The super keyword in Java is a reference variable which is used to refer immediate parent class object.'],"['https://www.javatpoint.com/instance-initializer-block', 'https://www.javatpoint.com/covariant-return-type', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestSuper1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestSuper2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestSuper3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestSuper4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestSuper5', 'https://www.javatpoint.com/instance-initializer-block', 'https://www.javatpoint.com/covariant-return-type', 'https://www.javatpoint.com/instance-initializer-block']","['https://static.javatpoint.com/images/usage-of-java-super.jpg', 'https://static.javatpoint.com/images/core/java-super.jpg']",[],"['1) super is used to refer immediate parent class instance variable.', '2) super can be used to invoke parent class method', '3) super is used to invoke parent class constructor.', 'super example: real use']",[],['Note: super() is added in each class constructor automatically by compiler if there is no super() or this().'],"['Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.', 'We can use super keyword to access the data member or field of parent class. It is used if parent class and child class have same fields.', 'To call the parent class method, we need to use super keyword.', ""The super keyword can also be used to invoke the parent class constructor. Let's see a simple example:"", 'Another example of super keyword where super() is provided by the compiler implicitly.']","['In the above example, Animal and Dog both classes have a common property color. If we print color property, it will print the color of current class by default. To access the parent property, we need to use super keyword. ', 'The super keyword can also be used to invoke parent class method. It should be used if subclass contains the same method as parent class. In other words, it is used if method is overridden.', 'In the above example Animal and Dog both classes have eat() method if we call eat() method from Dog class, it will call the eat() method of Dog class by default because priority is given to local. ', 'As we know well that default constructor is provided by compiler automatically if there is no constructor. But, it also adds super() as the first statement.']","[""Let's see the real use of super keyword. Here, Emp class inherits Person class so all the properties of Person will be inherited to Emp by default. To initialize all the property, we are using parent class constructor from child class. In such way, we are reusing the parent class constructor. ""]","['class Animal{', 'String color=""white"";', 'class Dog extends Animal{', 'String color=""black"";', 'void printColor(){', 'System.out.println(color);//prints color of Dog class', 'System.out.println(super.color);//prints color of Animal class', 'class TestSuper1{', 'public static void main(String args[]){', 'Dog d=new Dog();', 'd.printColor();', 'class Animal{', 'void eat(){System.out.println(""eating..."");}', 'class Dog extends Animal{', 'void eat(){System.out.println(""eating bread..."");}', 'void bark(){System.out.println(""barking..."");}', 'void work(){', 'super.eat();', 'class TestSuper2{', 'public static void main(String args[]){', 'Dog d=new Dog();', 'd.work();', 'class Animal{', 'Animal(){System.out.println(""animal is created"");}', 'class Dog extends Animal{', 'super();', 'System.out.println(""dog is created"");', 'class TestSuper3{', 'public static void main(String args[]){', 'Dog d=new Dog();', 'class Animal{', 'Animal(){System.out.println(""animal is created"");}', 'class Dog extends Animal{', 'System.out.println(""dog is created"");', 'class TestSuper4{', 'public static void main(String args[]){', 'Dog d=new Dog();', 'class Person{', 'String name;', 'Person(int id,String name){', 'this.id=id;', 'this.name=name;', 'class Emp extends Person{', 'float salary;', 'Emp(int id,String name,float salary){', 'super(id,name);//reusing parent constructor', 'this.salary=salary;', 'void display(){System.out.println(id+"" ""+name+"" ""+salary);}', 'class TestSuper5{', 'public static void main(String[] args){', 'Emp e1=new Emp(1,""ankit"",45000f);', 'e1.display();']","['black\nwhite', 'eating...\nbarking...', 'animal is created\ndog is created', 'animal is created\ndog is created', '1 ankit 45000']",[],['|||super can be used to refer immediate parent class instance variable.|||super can be used to invoke immediate parent class method.|||super() can be used to invoke immediate parent class constructor.|||']
35,['Instance initializer block'],[],"['https://www.javatpoint.com/final-keyword', 'https://www.javatpoint.com/super-keyword', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#instanceinitializerex', 'https://www.javatpoint.com/#instanceinitializerfirstly', 'https://www.javatpoint.com/#instanceinitializerrules', 'https://www.javatpoint.com/#instanceinitializersuper', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike7', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike8', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=B2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=B3', 'https://www.javatpoint.com/final-keyword', 'https://www.javatpoint.com/super-keyword', 'https://www.javatpoint.com/final-keyword']",['https://static.javatpoint.com/images/instanceinitializerblock.jpg'],[],"['Why use instance initializer block?', 'What is invoked first, instance initializer block or constructor?', 'Rules for instance initializer block :', 'Program of instance initializer block that is invoked after super()', 'Another example of instance block']",['Example of instance initializer block'],"['Que) What is the use of instance initializer block while we can directly assign a value in instance data member? For example:', 'Note: The java compiler copies the code of instance initializer block in every constructor.']",[],[],[],"['class Bike{', 'int speed=100;', 'class Bike7{', 'int speed;', 'Bike7(){System.out.println(""speed is ""+speed);}', '{speed=100;}', 'public static void main(String args[]){', 'Bike7 b1=new Bike7();', 'Bike7 b2=new Bike7();', '}', 'class Bike8{', 'int speed;', 'Bike8(){System.out.println(""constructor is invoked"");}', '{System.out.println(""instance initializer block invoked"");}', 'public static void main(String args[]){', 'Bike8 b1=new Bike8();', 'Bike8 b2=new Bike8();', '}', 'class A{', 'System.out.println(""parent class constructor invoked"");', 'class B2 extends A{', 'super();', 'System.out.println(""child class constructor invoked"");', '{System.out.println(""instance initializer block is invoked"");}', 'public static void main(String args[]){', 'B2 b=new B2();', 'class A{', 'System.out.println(""parent class constructor invoked"");', 'class B3 extends A{', 'super();', 'System.out.println(""child class constructor invoked"");', 'B3(int a){', 'super();', 'System.out.println(""child class constructor invoked ""+a);', '{System.out.println(""instance initializer block is invoked"");}', 'public static void main(String args[]){', 'B3 b1=new B3();', 'B3 b2=new B3(10);']","['Output:speed is 100\n       speed is 100', 'Output:instance initializer block invoked\n       constructor is invoked\n       instance initializer block invoked\n       constructor is invoked', 'Output:parent class constructor invoked\n       instance initializer block is invoked\n       child class constructor invoked', 'parent class constructor invoked\n       instance initializer block is invoked\n       child class constructor invoked\n       parent class constructor invoked\n       instance initializer block is invoked\n       child class constructor invoked 10']",[],[]
36,['Final Keyword In Java'],['The final keyword in java is used to restrict the user. The java final keyword can be used in many context. Final can be:'],"['https://www.javatpoint.com/runtime-polymorphism-in-java', 'https://www.javatpoint.com/instance-initializer-block', 'https://www.javatpoint.com/#finalv', 'https://www.javatpoint.com/#finalm', 'https://www.javatpoint.com/#finalc', 'https://www.javatpoint.com/#finalisinherited', 'https://www.javatpoint.com/#finalblank', 'https://www.javatpoint.com/#finalstaticblank', 'https://www.javatpoint.com/#finalpara', 'https://www.javatpoint.com/#finalcons', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike9', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Honda', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Honda1', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Honda2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike10', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike11', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/runtime-polymorphism-in-java', 'https://www.javatpoint.com/instance-initializer-block', 'https://www.javatpoint.com/runtime-polymorphism-in-java']",['https://static.javatpoint.com/images/core/final.jpg'],[],"['1) Java final variable', '2) Java final method', '3) Java final class']","['Example of final variable', 'Example of final method', 'Example of final class', 'Q) Is final method inherited?', 'Q) What is blank or uninitialized final variable?', 'Example of blank final variable', 'Que) Can we initialize blank final variable?', 'static blank final variable', 'Example of static blank final variable', 'Q) What is final parameter?', 'Q) Can we declare a constructor final?']",[],"['If you make any variable as final, you cannot change the value of final variable(It will be constant).', 'If you make any method as final, you cannot override it.', 'If you make any class as final, you cannot extend it.', 'Ans) Yes, final method is inherited but you cannot override it. For Example:\n', '\nA final variable that is not initialized at the time of declaration is known as blank final variable.', 'It can be initialized only in constructor.', 'Yes, but only in constructor. For example:', 'If you declare any parameter as final, you cannot change the value of it.', 'No, because constructor is never inherited.']","[""There is a final variable speedlimit, we are going to change the value of this variable, but It can't be changed because final variable once assigned a value can never be changed. "", ' If you want to create a variable that is initialized at the time of creating object and once initialized may not be changed, it is useful. For example PAN CARD number of an employee. ', 'A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.']","[""\nThe final keyword can be applied with the variables, a final variable that have no value it is called blank final variable or uninitialized final variable. It can be initialized in the constructor only. The blank final variable can be static also which will be initialized in the static block only. We will have detailed learning of these. Let's first learn the basics of final keyword.\n""]","['class Bike9{', 'final int speedlimit=90;//final variable', 'void run(){', 'speedlimit=400;', 'public static void main(String args[]){', 'Bike9 obj=new  Bike9();', 'obj.run();', '}//end of class', 'class Bike{', 'final void run(){System.out.println(""running"");}', 'class Honda extends Bike{', 'void run(){System.out.println(""running safely with 100kmph"");}', 'public static void main(String args[]){', 'Honda honda= new Honda();', 'honda.run();', 'final class Bike{}', 'class Honda1 extends Bike{', 'void run(){System.out.println(""running safely with 100kmph"");}', 'public static void main(String args[]){', 'Honda1 honda= new Honda1();', 'honda.run();', 'class Bike{', 'final void run(){System.out.println(""running..."");}', 'class Honda2 extends Bike{', 'public static void main(String args[]){', 'new Honda2().run();', 'class Student{', 'String name;', 'final String PAN_CARD_NUMBER;', 'class Bike10{', 'final int speedlimit;//blank final variable', 'Bike10(){', 'speedlimit=70;', 'System.out.println(speedlimit);', 'public static void main(String args[]){', 'new Bike10();', 'class A{', 'static final int data;//static blank final variable', 'static{ data=50;}', 'public static void main(String args[]){', 'System.out.println(A.data);', 'class Bike11{', 'int cube(final int n){', ""n=n+2;//can't be changed as n is final"", 'n*n*n;', 'public static void main(String args[]){', 'Bike11 b=new Bike11();', 'b.cube(5);']","['Output:Compile Time Error', 'Output:Compile Time Error', 'Output:Compile Time Error', 'Output:running...', 'Output: 70', 'Output: Compile Time Error']",[],[]
37,['Polymorphism in Java'],"['Polymorphism in Java is a concept by which we can perform a single action in different ways. Polymorphism is derived from 2 Greek words: poly and morphs. The word ""poly"" means many and ""morphs"" means forms. So polymorphism means many forms.']","['https://www.javatpoint.com/static-binding-and-dynamic-binding', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Splender', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestPolymorphism', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestPolymorphism2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestPolymorphism3', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Honda3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=BabyDog', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=BabyDog1', 'https://www.javatpoint.com/static-binding-and-dynamic-binding', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/static-binding-and-dynamic-binding']","['https://static.javatpoint.com/images/java-upcasting.png', 'https://static.javatpoint.com/images/core/bankinheritance.png']",[],"['Runtime Polymorphism in Java', 'Java Runtime Polymorphism Example: Bank', 'Java Runtime Polymorphism Example: Shape', 'Java Runtime Polymorphism Example: Animal', 'Java Runtime Polymorphism with Data Member', 'Java Runtime Polymorphism with Multilevel Inheritance']","['Upcasting', 'Example of Java Runtime Polymorphism', 'Try for Output']","['Note: This example is also given in method overriding but there was no upcasting.', ""Rule: Runtime polymorphism can't be achieved by data members.""]","['If you overload a static method in Java, it is the example of compile time polymorphism. Here, we will focus on runtime polymorphism in java.', ""Let's first understand the upcasting before Runtime Polymorphism."", 'If the reference variable of Parent class refers to the object of Child class, it is known as upcasting. For example:', 'For upcasting, we can use the reference variable of class type or an interface type. For Example:', 'Here, the relationship of B class would be:', 'Since Object is the root class of all classes in Java, so we can write B IS-A Object.', '\nSince method invocation is determined by the JVM not compiler, it is known as runtime polymorphism.\n', ""A method is overridden, not the data members, so runtime polymorphism can't be achieved by data members.\n"", ""Let's see the simple example of Runtime Polymorphism with multilevel inheritance."", 'Since, BabyDog is not overriding the eat() method, so eat() method of Dog class is invoked.']","['There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism. We can perform polymorphism in java by method overloading and method overriding.', 'Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time.\n', '\nIn this process, an overridden method is called through the reference variable of a superclass. The determination of the method to be called is based on the object being referred to by the reference variable.\n', 'Consider a scenario where Bank is a class that provides a method to get the rate of interest. However, the rate of interest may differ according to banks. For example, SBI, ICICI, and AXIS banks are providing 8.4%, 7.3%, and 9.7% rate of interest.']","['In this example, we are creating two classes Bike and Splendor. Splendor class extends Bike class and overrides its run() method. We are calling the run method by the reference variable of Parent class. Since it refers to the subclass object and subclass method overrides the Parent class method, the subclass method is invoked at runtime.\n', '\nIn the example given below, both the classes have a data member speedlimit. We are accessing the data member by the reference variable of Parent class which refers to the subclass object. Since we are accessing the data member which is not overridden, hence it will access the data member of the Parent class always.\n']","['class A{}', 'class B extends A{}', 'A a=new B();//upcasting', 'interface I{}', 'class A{}', 'class B extends A implements I{}', 'class Bike{', 'void run(){System.out.println(""running"");}', 'class Splendor extends Bike{', 'void run(){System.out.println(""running safely with 60km"");}', 'public static void main(String args[]){', 'Bike b = new Splendor();//upcasting', 'b.run();', 'class Bank{', 'float getRateOfInterest(){return 0;}', 'class SBI extends Bank{', 'float getRateOfInterest(){return 8.4f;}', 'class ICICI extends Bank{', 'float getRateOfInterest(){return 7.3f;}', 'class AXIS extends Bank{', 'float getRateOfInterest(){return 9.7f;}', 'class TestPolymorphism{', 'public static void main(String args[]){', 'b=new SBI();', 'System.out.println(""SBI Rate of Interest: ""+b.getRateOfInterest());', 'b=new ICICI();', 'System.out.println(""ICICI Rate of Interest: ""+b.getRateOfInterest());', 'b=new AXIS();', 'System.out.println(""AXIS Rate of Interest: ""+b.getRateOfInterest());', 'class Shape{', 'void draw(){System.out.println(""drawing..."");}', 'class Rectangle extends Shape{', 'void draw(){System.out.println(""drawing rectangle..."");}', 'class Circle extends Shape{', 'void draw(){System.out.println(""drawing circle..."");}', 'class Triangle extends Shape{', 'void draw(){System.out.println(""drawing triangle..."");}', 'class TestPolymorphism2{', 'public static void main(String args[]){', 'Shape s;', 's=new Rectangle();', 's.draw();', 's=new Circle();', 's.draw();', 's=new Triangle();', 's.draw();', 'class Animal{', 'void eat(){System.out.println(""eating..."");}', 'class Dog extends Animal{', 'void eat(){System.out.println(""eating bread..."");}', 'class Cat extends Animal{', 'void eat(){System.out.println(""eating rat..."");}', 'class Lion extends Animal{', 'void eat(){System.out.println(""eating meat..."");}', 'class TestPolymorphism3{', 'public static void main(String[] args){', 'Animal a;', 'a=new Dog();', 'a.eat();', 'a=new Cat();', 'a.eat();', 'a=new Lion();', 'a.eat();', 'class Bike{', 'int speedlimit=90;', 'class Honda3 extends Bike{', 'int speedlimit=150;', 'public static void main(String args[]){', 'Bike obj=new Honda3();', 'System.out.println(obj.speedlimit);//90', 'class Animal{', 'void eat(){System.out.println(""eating"");}', 'class Dog extends Animal{', 'void eat(){System.out.println(""eating fruits"");}', 'class BabyDog extends Dog{', 'void eat(){System.out.println(""drinking milk"");}', 'public static void main(String args[]){', 'Animal a1,a2,a3;', 'a1=new Animal();', 'a2=new Dog();', 'a3=new BabyDog();', 'a1.eat();', 'a2.eat();', 'a3.eat();', 'class Animal{', 'void eat(){System.out.println(""animal is eating..."");}', 'class Dog extends Animal{', 'void eat(){System.out.println(""dog is eating..."");}', 'class BabyDog1 extends Dog{', 'public static void main(String args[]){', 'Animal a=new BabyDog1();', 'a.eat();']","['B IS-A A\nB IS-A I\nB IS-A Object', 'running safely with 60km.', 'SBI Rate of Interest: 8.4\nICICI Rate of Interest: 7.3\nAXIS Rate of Interest: 9.7', 'drawing rectangle...\ndrawing circle...\ndrawing triangle...', 'eating bread...\neating rat...\neating meat...', '90', 'eating\neating fruits\ndrinking Milk', 'Dog is eating']",[],[]
38,['Static Binding and Dynamic Binding'],['Connecting a method call to the method body is known as binding.'],"['https://www.javatpoint.com/downcasting-with-instanceof-operator', 'https://www.javatpoint.com/runtime-polymorphism-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Dog', 'https://www.javatpoint.com/downcasting-with-instanceof-operator', 'https://www.javatpoint.com/runtime-polymorphism-in-java', 'https://www.javatpoint.com/downcasting-with-instanceof-operator']","['https://static.javatpoint.com/images/core/binding.jpg', 'https://static.javatpoint.com/images/types-of-binding.jpg']",[],[],"['Understanding Type', 'static binding', 'Example of static binding', 'Dynamic binding', 'Example of dynamic binding']","['1) variables have a type', '2) References have a type', '3) Objects have a type']","['There are two types of binding', ""Let's understand the type of instance."", 'Each variable has a type, it may be primitive and non-primitive.', 'Here data variable is a type of int.\n', 'When type of the object is determined at compiled time(by the compiler), it is known as static binding.', 'If there is any private, final or static method in a class, there is static binding.', 'When type of the object is determined at run-time, it is known as dynamic binding.']",[],[],"['int data=30;', 'class Dog{', 'public static void main(String args[]){', 'Dog d1;//Here d1 is a type of Dog', 'class Animal{}', 'class Dog extends Animal{', 'public static void main(String args[]){', 'Dog d1=new Dog();', 'class Dog{', 'private void eat(){System.out.println(""dog is eating..."");}', 'public static void main(String args[]){', 'Dog d1=new Dog();', 'd1.eat();', 'class Animal{', 'void eat(){System.out.println(""animal is eating..."");}', 'class Dog extends Animal{', 'void eat(){System.out.println(""dog is eating..."");}', 'public static void main(String args[]){', 'Animal a=new Dog();', 'a.eat();']",['Output:dog is eating...'],[],['|||Static Binding (also known as Early Binding).|||Dynamic Binding (also known as Late Binding).|||']
39,['Java instanceof'],['The java instanceof operator is used to test whether the object is an instance of the specified type (class or subclass or interface).'],"['https://www.javatpoint.com/abstract-class-in-java', 'https://www.javatpoint.com/static-binding-and-dynamic-binding', 'https://www.javatpoint.com/#instanceof', 'https://www.javatpoint.com/#instanceofex', 'https://www.javatpoint.com/#instanceofnull', 'https://www.javatpoint.com/#instanceofdowncasting', 'https://www.javatpoint.com/#instanceofdowncastingwithout', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Simple1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Dog1', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Dog2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Dog3', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Dog4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Test4', 'https://www.javatpoint.com/abstract-class-in-java', 'https://www.javatpoint.com/static-binding-and-dynamic-binding', 'https://www.javatpoint.com/abstract-class-in-java']",[],[],"['instanceof in java with a variable that have null value', 'Downcasting with java instanceof operator']","['Simple example of java instanceof', 'Possibility of downcasting with instanceof', 'Downcasting without the use of java instanceof', 'Understanding Real use of instanceof in java']",[],"[""Let's see the simple example of instance operator where it tests the current class."", 'If we perform downcasting by typecasting, ClassCastException is thrown at runtime.', ""Let's see the example, where downcasting is possible by instanceof operator."", 'Downcasting can also be performed without the use of instanceof operator as displayed in the following example:', ""Let's see the real use of instanceof keyword by the example given below.""]","['The instanceof in java is also known as type comparison operator because it compares the instance with type. It returns either true or false. If we apply the instanceof operator with any variable that has null value, it returns false.', 'An object of subclass type is also a type of parent class. For example, if Dog extends Animal then object of Dog can be referred by either Dog or Animal class.', ""If we apply instanceof operator with a variable that have null value, it returns false. Let's see the example given below where we apply instanceof operator with the variable that have null value."", ""Let's take closer look at this, actual object that is referred by a, is an object of Dog class. So if we downcast it, it is fine. But what will happen if we write:""]","['When Subclass type refers to the object of Parent class, it is known as downcasting. If we perform it directly, compiler gives Compilation error. If you perform it by typecasting, ClassCastException is thrown at runtime. But if we use instanceof operator, downcasting is possible.']","['class Simple1{', 'public static void main(String args[]){', 'Simple1 s=new Simple1();', 'System.out.println(s instanceof Simple1);//true', 'class Animal{}', 'class Dog1 extends Animal{//Dog inherits Animal', 'public static void main(String args[]){', 'Dog1 d=new Dog1();', 'System.out.println(d instanceof Animal);//true', 'class Dog2{', 'public static void main(String args[]){', 'Dog2 d=null;', 'System.out.println(d instanceof Dog2);//false', 'Dog d=new Animal();//Compilation error', 'Dog d=(Dog)new Animal();', 'class Animal { }', 'class Dog3 extends Animal {', 'static void method(Animal a) {', 'if(a instanceof Dog3){', 'Dog3 d=(Dog3)a;//downcasting', 'System.out.println(""ok downcasting performed"");', 'public static void main (String [] args) {', 'Animal a=new Dog3();', 'Dog3.method(a);', 'class Animal { }', 'class Dog4 extends Animal {', 'static void method(Animal a) {', 'Dog4 d=(Dog4)a;//downcasting', 'System.out.println(""ok downcasting performed"");', 'public static void main (String [] args) {', 'Animal a=new Dog4();', 'Dog4.method(a);', 'Animal a=new Animal();', 'Dog.method(a);', 'interface Printable{}', 'class A implements Printable{', 'public void a(){System.out.println(""a method"");}', 'class B implements Printable{', 'public void b(){System.out.println(""b method"");}', 'class Call{', 'void invoke(Printable p){//upcasting', 'if(p instanceof A){', 'A a=(A)p;//Downcasting', 'if(p instanceof B){', 'B b=(B)p;//Downcasting', '}//end of Call class', 'class Test4{', 'public static void main(String args[]){', 'Printable p=new B();', 'Call c=new Call();', 'c.invoke(p);']","['Output:true', 'Output:true', 'Output:false', 'Output:ok downcasting performed', 'Output:ok downcasting performed', 'Output: b method']",[],[]
40,['Abstract class in Java'],['A class which is declared with the abstract keyword is known as an abstract class in Java. It can have abstract and non-abstract methods (method with the body).'],"['https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/final-keyword', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/java-constructor', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Honda4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestAbstraction1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestBank', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestAbstraction2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Bike12', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Test5', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/final-keyword', 'https://www.javatpoint.com/interface-in-java']",['https://static.javatpoint.com/images/abstract-class-in-java.jpg'],[],[],"['Abstraction in Java', 'Ways to achieve Abstraction', 'Abstract class in Java', 'Abstract Method in Java', 'Example of Abstract class that has an abstract method', 'Understanding the real scenario of Abstract class', 'Another example of Abstract class in java', 'Abstract class having constructor, data member and methods', 'Another real scenario of abstract class']","['Points to Remember', 'Rule: If there is an abstract method in a class, that class must be abstract.', 'Rule: If you are extending an abstract class that has an abstract method, you must either provide the implementation of the method or make this class abstract.', 'Note: If you are beginner to java, learn interface first and skip this example.']","[""Before learning the Java abstract class, let's understand the abstraction in Java first."", 'Abstraction is a process of hiding the implementation details and showing only functionality to the user.', 'Abstraction lets you focus on what the object does instead of how it does it.\n', 'There are two ways to achieve abstraction in java', 'Example of abstract class', 'A method which is declared as abstract and does not have implementation is known as an abstract method.\n', 'Example of abstract method', 'In this example, Bike is an abstract class that contains only one abstract method run. Its implementation is provided by the Honda class.', 'In this example, Shape is the abstract class, and its implementation is provided by the Rectangle and Circle classes.', 'A factory method is a method that returns the instance of the class. We will learn about the factory method later.', 'In this example, if you create the instance of Rectangle class, draw() method of Rectangle class will be invoked.', 'File: TestAbstraction1.java', 'File: TestBank.java', ' An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.', 'File: TestAbstraction2.java']","[""Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don't know the internal processing about the message delivery."", 'A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.', ""Mostly, we don't know about the implementation class (which is hidden to the end user), and an object of the implementation class is provided by the factory method."", 'The abstract class can also be used to provide some implementation of the interface. In such case, the end user may not be forced to override all the methods of the interface.']",[],"['abstract class A{}', 'abstract void printStatus();//no method body and abstract', 'abstract class Bike{', 'abstract void run();', 'class Honda4 extends Bike{', 'void run(){System.out.println(""running safely"");}', 'public static void main(String args[]){', 'Bike obj = new Honda4();', 'obj.run();', 'abstract class Shape{', 'abstract void draw();', 'class Rectangle extends Shape{', 'void draw(){System.out.println(""drawing rectangle"");}', 'class Circle1 extends Shape{', 'void draw(){System.out.println(""drawing circle"");}', 'class TestAbstraction1{', 'public static void main(String args[]){', 'Shape s=new Circle1();//In a real scenario, object is provided through method, e.g., getShape() method', 's.draw();', 'abstract class Bank{', 'abstract int getRateOfInterest();', 'class SBI extends Bank{', 'int getRateOfInterest(){return 7;}', 'class PNB extends Bank{', 'int getRateOfInterest(){return 8;}', 'class TestBank{', 'public static void main(String args[]){', 'b=new SBI();', 'System.out.println(""Rate of Interest is: ""+b.getRateOfInterest()+"" %"");', 'b=new PNB();', 'System.out.println(""Rate of Interest is: ""+b.getRateOfInterest()+"" %"");', 'abstract class Bike{', 'Bike(){System.out.println(""bike is created"");}', 'abstract void run();', 'void changeGear(){System.out.println(""gear changed"");}', 'class Honda extends Bike{', 'void run(){System.out.println(""running safely.."");}', 'class TestAbstraction2{', 'public static void main(String args[]){', 'Bike obj = new Honda();', 'obj.run();', 'obj.changeGear();', 'class Bike12{', 'abstract void run();', 'interface A{', 'void a();', 'void b();', 'void c();', 'void d();', 'abstract class B implements A{', 'public void c(){System.out.println(""I am c"");}', 'class M extends B{', 'public void a(){System.out.println(""I am a"");}', 'public void b(){System.out.println(""I am b"");}', 'public void d(){System.out.println(""I am d"");}', 'class Test5{', 'public static void main(String args[]){', 'A a=new M();']","['running safely', 'drawing circle', 'Rate of Interest is: 7 %\nRate of Interest is: 8 %', 'bike is created\n       running safely..\n       gear changed', 'compile time error', 'Output:I am a\n       I am b\n       I am c\n       I am d']",[],['|||An abstract class must be declared with an abstract keyword.|||It can have abstract and non-abstract methods.|||It cannot be instantiated.|||It can have constructors and static methods also.|||It can have final methods which will force the subclass not to change the body of the method.|||']
41,['Interface in Java'],['An interface in Java is a blueprint of a class. It has static constants and abstract methods.'],"['https://www.javatpoint.com/difference-between-abstract-class-and-interface', 'https://www.javatpoint.com/abstract-class-in-java', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#interfaceex', 'https://www.javatpoint.com/#interfacemultiple', 'https://www.javatpoint.com/#interfacewhynot', 'https://www.javatpoint.com/#interfacemarker', 'https://www.javatpoint.com/nested-interface', 'https://www.javatpoint.com/abstract-class-in-java', 'https://www.javatpoint.com/inheritance-in-java', 'https://www.javatpoint.com/java-8-features', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=A6', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestInterface1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestInterface2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=A7', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/object-and-class-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestInterface3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestInterface4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestInterfaceDefault', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestInterfaceStatic', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/serialization-in-java', 'https://www.javatpoint.com/java-inner-class', 'https://www.javatpoint.com/nested-interface', 'https://www.javatpoint.com/difference-between-abstract-class-and-interface', 'https://www.javatpoint.com/abstract-class-in-java', 'https://www.javatpoint.com/difference-between-abstract-class-and-interface']","['https://static.javatpoint.com/interview/images/why-use-java-interface.jpg', 'https://static.javatpoint.com/images/interface.png', 'https://static.javatpoint.com/images/core/interfacerelation.jpg', 'https://static.javatpoint.com/images/core/multipleinheritance.jpg']",[],"['Why use Java interface?', 'How to declare an interface?', 'Java 8 Interface Improvement', 'Internal addition by the compiler', 'Multiple inheritance in Java by interface', 'Interface inheritance', 'Java 8 Default Method in Interface', 'Java 8 Static Method in Interface', 'Q) What is marker or tagged interface?']",['Syntax:'],"['The Java compiler adds public and abstract keywords before the interface method. Moreover, it adds public, static and final keywords before data members.', 'The relationship between classes and interfaces', 'Nested Interface in Java']","['In other words, you can say that interfaces can have abstract methods and variables. It cannot have a method body. ', 'Java Interface also represents the IS-A relationship.', 'It cannot be instantiated just like the abstract class.', 'Since Java 8, we can have default and static methods in an interface.', 'Since Java 9, we can have private methods in an interface.', 'There are mainly three reasons to use interface. They are given below.', 'Since Java 8, interface can have default and static methods which is discussed later.', 'In other words, Interface fields are public, static and final by default, and the methods are public and abstract.', 'As shown in the figure given below, a class extends another class, an interface extends another interface, but a class implements an interface.', 'In this example, the Printable interface has only one method, and its implementation is provided in the A6 class.', 'File: TestInterface1.java', ""Let's see another example of java interface which provides the implementation of Bank interface."", 'File: TestInterface2.java', 'If a class implements multiple interfaces, or an interface extends multiple interfaces, it is known as multiple inheritance.', 'A class implements an interface, but one interface extends another interface.', ""Since Java 8, we can have method body in interface. But we need to make it default method. Let's see an example:"", 'File: TestInterfaceDefault.java', ""Since Java 8, we can have static method in interface. Let's see an example:"", 'File: TestInterfaceStatic.java']","['The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.', 'As you can see in the above example, Printable and Showable interface have same methods but its implementation is provided by class TestTnterface1, so there is no ambiguity.', 'An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc. They are used to provide some essential information to the JVM so that JVM may perform some useful operation.', 'Note: An interface can have another interface which is known as a nested interface. We will learn it in detail in the nested classes chapter. For example:']","['An interface is declared by using the interface keyword. It provides total abstraction; means all the methods in an interface are declared with the empty body, and all the fields are public, static and final by default. A class that implements an interface must implement all the methods declared in the interface.', 'In this example, the Drawable interface has only one method. Its implementation is provided by Rectangle and Circle classes. In a real scenario, an interface is defined by someone else, but its implementation is provided by different implementation providers. Moreover, it is used by someone else. The implementation part is hidden by the user who uses the interface.', 'As we have explained in the inheritance chapter, multiple inheritance is not supported in the case of class because of ambiguity. However, it is supported in case of an interface because there is no ambiguity. It is because its implementation is provided by the implementation class. For example:']","['interface {', 'interface printable{', 'void print();', 'class A6 implements printable{', 'public void print(){System.out.println(""Hello"");}', 'public static void main(String args[]){', 'A6 obj = new A6();', 'obj.print();', 'interface Drawable{', 'void draw();', 'class Rectangle implements Drawable{', 'public void draw(){System.out.println(""drawing rectangle"");}', 'class Circle implements Drawable{', 'public void draw(){System.out.println(""drawing circle"");}', 'class TestInterface1{', 'public static void main(String args[]){', 'Drawable d=new Circle();//In real scenario, object is provided by method e.g. getDrawable()', 'd.draw();', 'interface Bank{', 'float rateOfInterest();', 'class SBI implements Bank{', 'public float rateOfInterest(){return 9.15f;}', 'class PNB implements Bank{', 'public float rateOfInterest(){return 9.7f;}', 'class TestInterface2{', 'public static void main(String[] args){', 'Bank b=new SBI();', 'System.out.println(""ROI: ""+b.rateOfInterest());', 'interface Printable{', 'void print();', 'interface Showable{', 'void show();', 'class A7 implements Printable,Showable{', 'public void print(){System.out.println(""Hello"");}', 'public void show(){System.out.println(""Welcome"");}', 'public static void main(String args[]){', 'A7 obj = new A7();', 'obj.print();', 'obj.show();', 'interface Printable{', 'void print();', 'interface Showable{', 'void print();', 'class TestInterface3 implements Printable, Showable{', 'public void print(){System.out.println(""Hello"");}', 'public static void main(String args[]){', 'TestInterface3 obj = new TestInterface3();', 'obj.print();', 'interface Printable{', 'void print();', 'interface Showable extends Printable{', 'void show();', 'class TestInterface4 implements Showable{', 'public void print(){System.out.println(""Hello"");}', 'public void show(){System.out.println(""Welcome"");}', 'public static void main(String args[]){', 'TestInterface4 obj = new TestInterface4();', 'obj.print();', 'obj.show();', 'interface Drawable{', 'void draw();', 'default void msg(){System.out.println(""default method"");}', 'class Rectangle implements Drawable{', 'public void draw(){System.out.println(""drawing rectangle"");}', 'class TestInterfaceDefault{', 'public static void main(String args[]){', 'Drawable d=new Rectangle();', 'd.draw();', 'd.msg();', 'interface Drawable{', 'void draw();', 'static int cube(int x){return x*x*x;}', 'class Rectangle implements Drawable{', 'public void draw(){System.out.println(""drawing rectangle"");}', 'class TestInterfaceStatic{', 'public static void main(String args[]){', 'Drawable d=new Rectangle();', 'd.draw();', 'System.out.println(Drawable.cube(3));', 'public interface Serializable{', 'interface printable{', 'void print();', 'interface MessagePrintable{', 'void msg();']","['Hello', 'drawing circle', 'ROI: 9.15', 'Output:Hello\n       Welcome', 'Hello', 'Hello\nWelcome', 'drawing rectangle\ndefault method', 'drawing rectangle\n27']",[],"['|||It is used to achieve abstraction.|||By interface, we can support the functionality of multiple inheritance.|||It can be used to achieve loose coupling.|||']"
42,['Difference between abstract class and interface'],"[""Abstract class and interface both are used to achieve abstraction where we can declare the abstract methods. Abstract class and interface both can't be instantiated.""]","['https://www.javatpoint.com/package', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Test5', 'https://www.javatpoint.com/package', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/package']",[],[],[],['Example of abstract class and interface in Java'],[],"['But there are many differences between abstract class and interface that are given below.', 'Simply, abstract class achieves partial abstraction (0 to 100%) whereas interface achieves fully abstraction (100%).', ""Let's see a simple example where we are using interface and abstract class both.""]",[],[],"['interface A{', 'void a();//bydefault, public and abstract', 'void b();', 'void c();', 'void d();', 'abstract class B implements A{', 'public void c(){System.out.println(""I am C"");}', 'class M extends B{', 'public void a(){System.out.println(""I am a"");}', 'public void b(){System.out.println(""I am b"");}', 'public void d(){System.out.println(""I am d"");}', 'class Test5{', 'public static void main(String args[]){', 'A a=new M();']",['I am a\n       I am b\n       I am c\n       I am d'],"['bstract classInterfac&&&) Abstract class can have abstract and non-abstract methods.Interface can have only abstract methods. Since Java 8, it can have default and static methods also&&&) Abstract class doesn\'t support multiple inheritance.Interface supports multiple inheritance&&&) Abstract class can have final, non-final, static and non-static variables.Interface has only static and final variables&&&) Abstract class can provide the implementation of interface.Interface can\'t provide the implementation of abstract class&&&) The abstract keyword is used to declare abstract class.The interface keyword is used to declare interface&&&) An abstract class can extend another Java class and implement multiple Java interfaces.An interface can extend another Java interface only&&&) An abstract class can be extended using keyword ""extends"". An interface can be implemented using keyword ""implements""&&&) A Java abstract class can have class members like private, protected, etc.Members of a Java interface are public by default.&&&)Example: public abstract class Shape{public abstract void draw();}Example: public interface Drawable{void draw();']",[]
43,['Java Package'],"['A java package is a group of similar types of classes, interfaces and sub-packages.\n']","['https://www.javatpoint.com/access-modifiers', 'https://www.javatpoint.com/downcasting-with-instanceof-operator', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#packageex', 'https://www.javatpoint.com/#packageaccess', 'https://www.javatpoint.com/#packageaccess1', 'https://www.javatpoint.com/#packageaccess2', 'https://www.javatpoint.com/#packageaccess3', 'https://www.javatpoint.com/#packagesub', 'https://www.javatpoint.com/#packageanotherdirectory', 'https://www.javatpoint.com/#packageclasspathswitch', 'https://www.javatpoint.com/#packagewaystoload', 'https://www.javatpoint.com/#packagetwopublic', 'https://www.javatpoint.com/#packagestaticimport', 'https://www.javatpoint.com/package-class', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/static-import-in-java', 'https://www.javatpoint.com/package-class', 'https://www.javatpoint.com/access-modifiers', 'https://www.javatpoint.com/downcasting-with-instanceof-operator', 'https://www.javatpoint.com/access-modifiers']","['https://static.javatpoint.com/images/package.JPG', 'https://static.javatpoint.com/images/sequenceofpackage.JPG', 'https://static.javatpoint.com/images/anotherpackage.JPG']",[],"['How to access package from another package?', 'Subpackage in java', 'How to send the class file to another directory or drive?']","['Example of Subpackage', 'To Compile:', 'To Run:', 'Another way to run this program by -classpath switch of java:', 'Ways to load the class files or jar files', 'How to put two public classes in a package? ', 'What is static import feature of Java5? ', 'What about package class?']","['1) Using packagename.*', '2) Using packagename.classname', '3) Using fully qualified name', 'Note: If you import a package, subpackages will not be imported.', 'Note: Sequence of the program must be package then import then class.', 'The standard of defining package is domain.company.package e.g. com.javatpoint.bean or org.sssit.dao.', 'Rule: There can be only one public class in a java source file and it must be saved by the public class name.']","['Package in java can be categorized in two form, built-in package and user-defined package. ', 'There are many built-in packages such as java, lang, awt, javax, swing, net, io, util, sql etc.', 'Here, we will have the detailed learning of creating and using user-defined packages.\n', '1) Java package is used to categorize the classes and interfaces so that they can be easily maintained.', '2) Java package provides access protection.', '3) Java package removes naming collision.', 'The package keyword is used to create a package in java.', 'If you are not using any IDE, you need to follow the syntax given below:', 'For example', 'There are three ways to access the package from outside the package.', 'The import keyword is used to make the classes and interface of another package accessible to the current package.', 'If you import package.classname then only declared class of this package will be accessible.', 'It is generally used when two packages have same class name e.g. java.util and java.sql packages contain Date class.', 'Package inside the package is called the subpackage. It should be created to categorize the package further.', 'There is a scenario, I want to put the class file of A.java source file in classes folder of c: drive. For example:', 'e:\\sources> javac -d c:\\classes Simple.java', 'The -classpath switch can be used with javac and java tool.', 'To run this program from e:\\source directory, you can use -classpath switch of java that tells where to look for class file. For example:', 'e:\\sources> java -classpath c:\\classes mypack.Simple']","['If you use fully qualified name then only declared class of this package will be accessible. Now there is no need to import. But you need to use fully qualified name every time when you are accessing the class or interface.', 'If you import a package, all the classes and interface of that package will be imported excluding the classes and interfaces of the subpackages. Hence, you need to import the subpackage as well.']","['The -d switch specifies the destination where to put the generated class file. You can use any directory name like /home (in case of Linux), d:/abc (in case of windows) etc.\nIf you want to keep the package within the same directory, you can use . (dot).\n\nHow to run java package program\nYou need to use fully qualified name e.g. mypack.Simple etc to run the class.\n\n\nTo Compile: javac -d . Simple.java\nTo Run: java mypack.Simple\n\nOutput:Welcome to package\n\n\nThe -d is a switch that tells the compiler where to put the class file i.e. it represents destination. The . represents the current folder.\n\n\n\n\n\n\n\nHow to access package from another package?\nThere are three ways to access the package from outside the package.\n\nimport package.*;\nimport package.classname;\nfully qualified name.\n\n1) Using packagename.*\nIf you use package.* then all the classes and interfaces of this package will be accessible but not subpackages.\nThe import keyword is used to make the classes and interface of another package accessible to the current package.\n\nExample of package that import the packagename.*\n\n//save by A.java\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nimport pack.*;\n\nclass B{\n  public static void main(String args[]){\n   A obj = new A();\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\n\n\n2) Using packagename.classname\nIf you import package.classname then only declared class of this package will be accessible.\nExample of package by import package.classname\n\n//save by A.java\n\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nimport pack.A;\n\nclass B{\n  public static void main(String args[]){\n   A obj = new A();\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\n\n\n3) Using fully qualified name\nIf you use fully qualified name then only declared class of this package will be accessible. Now there is no need to import. But you need to use fully qualified name every time when you are accessing the class or interface.\nIt is generally used when two packages have same class name e.g. java.util and java.sql packages contain Date class.\nExample of package by import fully qualified name\n\n//save by A.java\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nclass B{\n  public static void main(String args[]){\n   pack.A obj = new pack.A();//using fully qualified name\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\nNote: If you import a package, subpackages will not be imported.\nIf you import a package, all the classes and interface of that package will be imported excluding the classes and interfaces of the subpackages. Hence, you need to import the subpackage as well.\n\nNote: Sequence of the program must be package then import then class.\n\n\n\nSubpackage in java\nPackage inside the package is called the subpackage. It should be created to categorize the package further.\n Let\'s take an example, Sun Microsystem has definded a package named java that contains many classes like System, String, Reader, Writer, Socket etc. These classes represent a particular group e.g. Reader and Writer classes are for Input/Output operation, Socket and ServerSocket classes are for networking etc and so on. So, Sun has subcategorized the java package into subpackages such as lang, net, io etc. and put the Input/Output related classes in io package, Server and ServerSocket classes in net packages and so on.\nThe standard of defining package is domain.company.package e.g. com.javatpoint.bean or org.sssit.dao.\nExample of Subpackage\n\npackage com.javatpoint.core;\nclass Simple{\n  public static void main(String args[]){\n   System.out.println(""Hello subpackage"");\n  }\n}\n\n\nTo Compile: javac -d . Simple.java\nTo Run: java com.javatpoint.core.Simple\n\nOutput:Hello subpackage\n\n\n\nHow to send the class file to another directory or drive?\nThere is a scenario, I want to put the class file of A.java source file in classes folder of c: drive. For example:\n\n\n//save as Simple.java\npackage mypack;\npublic class Simple{\n public static void main(String args[]){\n    System.out.println(""Welcome to package"");\n   }\n}\n\nTo Compile:\ne:\\sources> javac -d c:\\classes Simple.java\nTo Run:\n\nTo run this program from e:\\source directory, you need to set classpath of the directory where the class file resides.\ne:\\sources> set classpath=c:\\classes;.;\ne:\\sources> java mypack.Simple\n\n\nAnother way to run this program by -classpath switch of java:\nThe -classpath switch can be used with javac and java tool.\nTo run this program from e:\\source directory, you can use -classpath switch of java that tells where to look for class file. For example:\ne:\\sources> java -classpath c:\\classes mypack.Simple\nOutput:Welcome to package\n\n\n\nWays to load the class files or jar files\n\nThere are two ways to load the class files temporary and permanent.\n\n\nTemporary\n\nBy setting the classpath in the command prompt\nBy -classpath switch\n\n\nPermanent\n\nBy setting the classpath in the environment variables\nBy creating the jar file, that contains all the class files, and copying the jar file in the jre/lib/ext folder. \n\n\n\n\nRule: There can be only one public class in a java source file and it must be saved by the public class name.\n\n//save as C.java otherwise Compilte Time Error\n\nclass A{}\nclass B{}\npublic class C{}\n\n\n\n\nHow to put two public classes in a package? \n\nIf you want to put two public classes in a package, have two java source files containing one public class, but keep the package name same. For example:\n\n\n//save as A.java\n\npackage javatpoint;\npublic class A{}\n\n\n\n//save as B.java\n\npackage javatpoint;\npublic class B{}\n\n\n\n\nWhat is static import feature of Java5? \n\nClick Static Import feature of Java5.\n\n\nWhat about package class?\n\nClick for Package class\n\n\nNext TopicAccess Modifiers in java\n\n\n\n← prev\nnext →\n\n\n\n', 'You need to use fully qualified name e.g. mypack.Simple etc to run the class.\n\n\nTo Compile: javac -d . Simple.java\nTo Run: java mypack.Simple\n\nOutput:Welcome to package\n\n\nThe -d is a switch that tells the compiler where to put the class file i.e. it represents destination. The . represents the current folder.\n\n\n\n\n\n\n\nHow to access package from another package?\nThere are three ways to access the package from outside the package.\n\nimport package.*;\nimport package.classname;\nfully qualified name.\n\n1) Using packagename.*\nIf you use package.* then all the classes and interfaces of this package will be accessible but not subpackages.\nThe import keyword is used to make the classes and interface of another package accessible to the current package.\n\nExample of package that import the packagename.*\n\n//save by A.java\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nimport pack.*;\n\nclass B{\n  public static void main(String args[]){\n   A obj = new A();\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\n\n\n2) Using packagename.classname\nIf you import package.classname then only declared class of this package will be accessible.\nExample of package by import package.classname\n\n//save by A.java\n\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nimport pack.A;\n\nclass B{\n  public static void main(String args[]){\n   A obj = new A();\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\n\n\n3) Using fully qualified name\nIf you use fully qualified name then only declared class of this package will be accessible. Now there is no need to import. But you need to use fully qualified name every time when you are accessing the class or interface.\nIt is generally used when two packages have same class name e.g. java.util and java.sql packages contain Date class.\nExample of package by import fully qualified name\n\n//save by A.java\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nclass B{\n  public static void main(String args[]){\n   pack.A obj = new pack.A();//using fully qualified name\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\nNote: If you import a package, subpackages will not be imported.\nIf you import a package, all the classes and interface of that package will be imported excluding the classes and interfaces of the subpackages. Hence, you need to import the subpackage as well.\n\nNote: Sequence of the program must be package then import then class.\n\n\n\nSubpackage in java\nPackage inside the package is called the subpackage. It should be created to categorize the package further.\n Let\'s take an example, Sun Microsystem has definded a package named java that contains many classes like System, String, Reader, Writer, Socket etc. These classes represent a particular group e.g. Reader and Writer classes are for Input/Output operation, Socket and ServerSocket classes are for networking etc and so on. So, Sun has subcategorized the java package into subpackages such as lang, net, io etc. and put the Input/Output related classes in io package, Server and ServerSocket classes in net packages and so on.\nThe standard of defining package is domain.company.package e.g. com.javatpoint.bean or org.sssit.dao.\nExample of Subpackage\n\npackage com.javatpoint.core;\nclass Simple{\n  public static void main(String args[]){\n   System.out.println(""Hello subpackage"");\n  }\n}\n\n\nTo Compile: javac -d . Simple.java\nTo Run: java com.javatpoint.core.Simple\n\nOutput:Hello subpackage\n\n\n\nHow to send the class file to another directory or drive?\nThere is a scenario, I want to put the class file of A.java source file in classes folder of c: drive. For example:\n\n\n//save as Simple.java\npackage mypack;\npublic class Simple{\n public static void main(String args[]){\n    System.out.println(""Welcome to package"");\n   }\n}\n\nTo Compile:\ne:\\sources> javac -d c:\\classes Simple.java\nTo Run:\n\nTo run this program from e:\\source directory, you need to set classpath of the directory where the class file resides.\ne:\\sources> set classpath=c:\\classes;.;\ne:\\sources> java mypack.Simple\n\n\nAnother way to run this program by -classpath switch of java:\nThe -classpath switch can be used with javac and java tool.\nTo run this program from e:\\source directory, you can use -classpath switch of java that tells where to look for class file. For example:\ne:\\sources> java -classpath c:\\classes mypack.Simple\nOutput:Welcome to package\n\n\n\nWays to load the class files or jar files\n\nThere are two ways to load the class files temporary and permanent.\n\n\nTemporary\n\nBy setting the classpath in the command prompt\nBy -classpath switch\n\n\nPermanent\n\nBy setting the classpath in the environment variables\nBy creating the jar file, that contains all the class files, and copying the jar file in the jre/lib/ext folder. \n\n\n\n\nRule: There can be only one public class in a java source file and it must be saved by the public class name.\n\n//save as C.java otherwise Compilte Time Error\n\nclass A{}\nclass B{}\npublic class C{}\n\n\n\n\nHow to put two public classes in a package? \n\nIf you want to put two public classes in a package, have two java source files containing one public class, but keep the package name same. For example:\n\n\n//save as A.java\n\npackage javatpoint;\npublic class A{}\n\n\n\n//save as B.java\n\npackage javatpoint;\npublic class B{}\n\n\n\n\nWhat is static import feature of Java5? \n\nClick Static Import feature of Java5.\n\n\nWhat about package class?\n\nClick for Package class\n\n\nNext TopicAccess Modifiers in java\n\n\n\n← prev\nnext →\n\n\n\n', 'If you use package.* then all the classes and interfaces of this package will be accessible but not subpackages.\nThe import keyword is used to make the classes and interface of another package accessible to the current package.\n\nExample of package that import the packagename.*\n\n//save by A.java\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nimport pack.*;\n\nclass B{\n  public static void main(String args[]){\n   A obj = new A();\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\n\n\n2) Using packagename.classname\nIf you import package.classname then only declared class of this package will be accessible.\nExample of package by import package.classname\n\n//save by A.java\n\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nimport pack.A;\n\nclass B{\n  public static void main(String args[]){\n   A obj = new A();\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\n\n\n3) Using fully qualified name\nIf you use fully qualified name then only declared class of this package will be accessible. Now there is no need to import. But you need to use fully qualified name every time when you are accessing the class or interface.\nIt is generally used when two packages have same class name e.g. java.util and java.sql packages contain Date class.\nExample of package by import fully qualified name\n\n//save by A.java\npackage pack;\npublic class A{\n  public void msg(){System.out.println(""Hello"");}\n}\n\n\n//save by B.java\npackage mypack;\nclass B{\n  public static void main(String args[]){\n   pack.A obj = new pack.A();//using fully qualified name\n   obj.msg();\n  }\n}\n\nOutput:Hello\n\nNote: If you import a package, subpackages will not be imported.\nIf you import a package, all the classes and interface of that package will be imported excluding the classes and interfaces of the subpackages. Hence, you need to import the subpackage as well.\n\nNote: Sequence of the program must be package then import then class.\n\n\n\nSubpackage in java\nPackage inside the package is called the subpackage. It should be created to categorize the package further.\n Let\'s take an example, Sun Microsystem has definded a package named java that contains many classes like System, String, Reader, Writer, Socket etc. These classes represent a particular group e.g. Reader and Writer classes are for Input/Output operation, Socket and ServerSocket classes are for networking etc and so on. So, Sun has subcategorized the java package into subpackages such as lang, net, io etc. and put the Input/Output related classes in io package, Server and ServerSocket classes in net packages and so on.\nThe standard of defining package is domain.company.package e.g. com.javatpoint.bean or org.sssit.dao.\nExample of Subpackage\n\npackage com.javatpoint.core;\nclass Simple{\n  public static void main(String args[]){\n   System.out.println(""Hello subpackage"");\n  }\n}\n\n\nTo Compile: javac -d . Simple.java\nTo Run: java com.javatpoint.core.Simple\n\nOutput:Hello subpackage\n\n\n\nHow to send the class file to another directory or drive?\nThere is a scenario, I want to put the class file of A.java source file in classes folder of c: drive. For example:\n\n\n//save as Simple.java\npackage mypack;\npublic class Simple{\n public static void main(String args[]){\n    System.out.println(""Welcome to package"");\n   }\n}\n\nTo Compile:\ne:\\sources> javac -d c:\\classes Simple.java\nTo Run:\n\nTo run this program from e:\\source directory, you need to set classpath of the directory where the class file resides.\ne:\\sources> set classpath=c:\\classes;.;\ne:\\sources> java mypack.Simple\n\n\nAnother way to run this program by -classpath switch of java:\nThe -classpath switch can be used with javac and java tool.\nTo run this program from e:\\source directory, you can use -classpath switch of java that tells where to look for class file. For example:\ne:\\sources> java -classpath c:\\classes mypack.Simple\nOutput:Welcome to package\n\n\n\nWays to load the class files or jar files\n\nThere are two ways to load the class files temporary and permanent.\n\n\nTemporary\n\nBy setting the classpath in the command prompt\nBy -classpath switch\n\n\nPermanent\n\nBy setting the classpath in the environment variables\nBy creating the jar file, that contains all the class files, and copying the jar file in the jre/lib/ext folder. \n\n\n\n\nRule: There can be only one public class in a java source file and it must be saved by the public class name.\n\n//save as C.java otherwise Compilte Time Error\n\nclass A{}\nclass B{}\npublic class C{}\n\n\n\n\nHow to put two public classes in a package? \n\nIf you want to put two public classes in a package, have two java source files containing one public class, but keep the package name same. For example:\n\n\n//save as A.java\n\npackage javatpoint;\npublic class A{}\n\n\n\n//save as B.java\n\npackage javatpoint;\npublic class B{}\n\n\n\n\nWhat is static import feature of Java5? \n\nClick Static Import feature of Java5.\n\n\nWhat about package class?\n\nClick for Package class\n\n\nNext TopicAccess Modifiers in java\n\n\n\n← prev\nnext →\n\n\n\n', "" Let's take an example, Sun Microsystem has definded a package named java that contains many classes like System, String, Reader, Writer, Socket etc. These classes represent a particular group e.g. Reader and Writer classes are for Input/Output operation, Socket and ServerSocket classes are for networking etc and so on. So, Sun has subcategorized the java package into subpackages such as lang, net, io etc. and put the Input/Output related classes in io package, Server and ServerSocket classes in net packages and so on.""]","['package mypack;', 'public class Simple{', 'public static void main(String args[]){', 'System.out.println(""Welcome to package"");', 'javac -d directory javafilename', 'javac -d . Simple.java', 'package pack;', 'public class A{', 'public void msg(){System.out.println(""Hello"");}', 'package mypack;', 'import pack.*;', 'class B{', 'public static void main(String args[]){', 'A obj = new A();', 'obj.msg();', 'package pack;', 'public class A{', 'public void msg(){System.out.println(""Hello"");}', 'package mypack;', 'import pack.A;', 'class B{', 'public static void main(String args[]){', 'A obj = new A();', 'obj.msg();', 'package pack;', 'public class A{', 'public void msg(){System.out.println(""Hello"");}', 'package mypack;', 'class B{', 'public static void main(String args[]){', 'pack.A obj = new pack.A();//using fully qualified name', 'obj.msg();', 'package com.javatpoint.core;', 'class Simple{', 'public static void main(String args[]){', 'System.out.println(""Hello subpackage"");', 'package mypack;', 'public class Simple{', 'public static void main(String args[]){', 'System.out.println(""Welcome to package"");', 'class A{}', 'class B{}', 'public class C{}', 'package javatpoint;', 'public class A{}', 'package javatpoint;', 'public class B{}']","['Output:Welcome to package', 'Output:Hello', 'Output:Hello', 'Output:Hello', 'Output:Hello subpackage', 'Output:Welcome to package']",[],[]
44,['Access Modifiers in Java'],['There are two types of modifiers in Java: access modifiers and non-access modifiers.'],"['https://www.javatpoint.com/encapsulation', 'https://www.javatpoint.com/package', 'https://www.javatpoint.com/#accessprivate', 'https://www.javatpoint.com/#accessprivatecons', 'https://www.javatpoint.com/#accessdefault', 'https://www.javatpoint.com/#accessprotected', 'https://www.javatpoint.com/#accesspublic', 'https://www.javatpoint.com/#accessoverriding', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/encapsulation', 'https://www.javatpoint.com/package', 'https://www.javatpoint.com/encapsulation']",[],[],[],"['Understanding Java Access Modifiers', '1) Private', 'Role of Private Constructor', '2) Default', '3) Protected', '4) Public', 'Java Access Modifiers with Method Overriding']",['Note: A class cannot be private or protected except nested class.'],"['There are four types of Java access modifiers:', ""Let's understand the access modifiers in Java by a simple table."", 'The private access modifier is accessible only within the class.', 'Simple example of private access modifier', 'If you make any class constructor private, you cannot create the instance of that class from outside the class. For example:', 'Example of default access modifier', 'In the above example, the scope of class A and its method msg() is default so it cannot be accessed from outside the package.', ' The protected access modifier is accessible within package and outside the package but through inheritance only.\n', ""The protected access modifier can be applied on the data member, method and constructor. It can't be applied on the class.\n"", 'It provides more accessibility than the default modifer.', 'Example of protected access modifier', ' The public access modifier is accessible everywhere. It has the widest scope among all other modifiers.', 'Example of public access modifier', 'If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.', 'The default modifier is more restrictive than protected. That is why, there is a compile-time error.']","['The access modifiers in Java specifies the accessibility or scope of a field, method, constructor, or class. We can change the access level of fields, constructors, methods, and class by applying the access modifier on it. ', 'There are many non-access modifiers, such as static, abstract, synchronized, native, volatile, transient, etc. Here, we are going to learn the access modifiers only.', 'In this example, we have created two classes A and Simple. A class contains private data member and private method. We are accessing these private members from outside the class, so there is a compile-time error.', 'In this example, we have created two packages pack and mypack. We are accessing the A class from outside its package, since A class is not public, so it cannot be accessed from outside the package.']","[""If you don't use any modifier, it is treated as default by default. The default modifier is accessible only within package. It cannot be accessed from outside the package. It provides more accessibility than private. But, it is more restrictive than protected, and public. "", 'In this example, we have created the two packages pack and mypack. The A class of pack package is public, so can be accessed from outside the package. But msg method of this package is declared as protected, so it can be accessed from outside the class only through inheritance.']","['class A{', 'private int data=40;', 'private void msg(){System.out.println(""Hello java"");}', 'public class Simple{', 'public static void main(String args[]){', 'A obj=new A();', 'System.out.println(obj.data);//Compile Time Error', 'obj.msg();//Compile Time Error', 'class A{', 'private A(){}//private constructor', 'void msg(){System.out.println(""Hello java"");}', 'public class Simple{', 'public static void main(String args[]){', 'A obj=new A();//Compile Time Error', 'package pack;', 'class A{', 'void msg(){System.out.println(""Hello"");}', 'package mypack;', 'import pack.*;', 'class B{', 'public static void main(String args[]){', 'A obj = new A();//Compile Time Error', 'obj.msg();//Compile Time Error', 'package pack;', 'public class A{', 'protected void msg(){System.out.println(""Hello"");}', 'package mypack;', 'import pack.*;', 'class B extends A{', 'public static void main(String args[]){', 'B obj = new B();', 'obj.msg();', 'package pack;', 'public class A{', 'public void msg(){System.out.println(""Hello"");}', 'package mypack;', 'import pack.*;', 'class B{', 'public static void main(String args[]){', 'A obj = new A();', 'obj.msg();', 'class A{', 'protected void msg(){System.out.println(""Hello java"");}', 'public class Simple extends A{', 'void msg(){System.out.println(""Hello java"");}//C.T.Error', 'public static void main(String args[]){', 'Simple obj=new Simple();', 'obj.msg();']","['Output:Hello', 'Output:Hello']",['ccess Modifierwithin classwithin packageoutside package by subclass onlyoutside packag&&&rivateYNN&&&efaultYYN&&&rotectedYYY&&&ublicYYY'],[]
45,['Encapsulation in Java'],"['Encapsulation in Java is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.']","['https://www.javatpoint.com/object-class', 'https://www.javatpoint.com/access-modifiers', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=TestEncapsulation', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/object-class', 'https://www.javatpoint.com/access-modifiers', 'https://www.javatpoint.com/object-class']",['https://static.javatpoint.com/images/capsule.jpg'],[],[],"['Advantage of Encapsulation in Java', 'Simple Example of Encapsulation in Java', 'Read-Only class', 'Write-Only class', 'Another Example of Encapsulation in Java']",[],"['The Java Bean class is the example of a fully encapsulated class.', 'It is a way to achieve data hiding in Java because other class will not be able to access the data through the private data members.', 'The encapsulate class is easy to test. So, it is better for unit testing.', ""The standard IDE's are providing the facility to generate the getters and setters. So, it is easy and fast to create an encapsulated class in Java."", ""Let's see the simple example of encapsulation that has only one field with its setter and getter methods."", 'File: Student.java', 'File: Test.java', 'Now, you can\'t change the value of the college data member which is ""AKG"". ', ""Now, you can't get the value of the college, you can only change the value of college data member. "", ""Let's see another example of encapsulation that has only four fields with its setter and getter methods."", 'File: Account.java', 'File: TestAccount.java']","['We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use setter and getter methods to set and get the data in it.', 'By providing only a setter or getter method, you can make the class read-only or write-only. In other words, you can skip the getter or setter methods.']","['It provides you the control over the data. Suppose you want to set the value of id which should be greater than 100 only, you can write the logic inside the setter method. You can write the logic not to store the negative numbers in the setter methods.']","['package com.javatpoint;', 'public class Student{', 'private String name;', 'public String getName(){', 'return name;', 'public void setName(String name){', 'this.name=name', 'package com.javatpoint;', 'class Test{', 'public static void main(String[] args){', 'Student s=new Student();', 's.setName(""vijay"");', 'System.out.println(s.getName());', 'public class Student{', 'private String college=""AKG"";', 'public String getCollege(){', 'return college;', 's.setCollege(""KITE"");//will render compile time error', 'public class Student{', 'private String college;', 'public void setCollege(String college){', 'this.college=college;', 'System.out.println(s.getCollege());//Compile Time Error, because there is no such method', 'System.out.println(s.college);//Compile Time Error, because the college data member is private.', 'class Account {', 'private long acc_no;', 'private String name,email;', 'private float amount;', 'public long getAcc_no() {', 'return acc_no;', 'public void setAcc_no(long acc_no) {', 'this.acc_no = acc_no;', 'public String getName() {', 'return name;', 'public void setName(String name) {', 'this.name = name;', 'public String getEmail() {', 'return email;', 'public void setEmail(String email) {', 'this.email = email;', 'public float getAmount() {', 'return amount;', 'public void setAmount(float amount) {', 'this.amount = amount;', 'public class TestEncapsulation {', 'public static void main(String[] args) {', 'Account acc=new Account();', 'acc.setAcc_no(7560504000L);', 'acc.setName(""Sonoo Jaiswal"");', 'acc.setEmail(""sonoojaiswal@javatpoint.com"");', 'acc.setAmount(500000f);', 'System.out.println(acc.getAcc_no()+"" ""+acc.getName()+"" ""+acc.getEmail()+"" ""+acc.getAmount());']","['Compile By: javac -d . Test.java\nRun By: java com.javatpoint.Test', 'vijay', '7560504000 Sonoo Jaiswal [email\xa0protected] 500000.0']",[],[]
46,['Object class in Java'],"['The Object class is the parent class of all the classes in java by default. In other words, it is the topmost class of java.']","['https://www.javatpoint.com/object-cloning', 'https://www.javatpoint.com/encapsulation', 'https://www.javatpoint.com/object-cloning', 'https://www.javatpoint.com/encapsulation', 'https://www.javatpoint.com/object-cloning']",['images/core/objectclass.gif'],[],[],['Methods of Object class'],[],"['The Object class provides some common behaviors to all the objects such as object can be compared, object can be cloned, object can be notified etc.\n', 'We will have the detailed learning of these methods in next chapters.\n']","[""The Object class is beneficial if you want to refer any object whose type you don't know. Notice that parent class reference variable can refer the child class object, know as upcasting."", ""Let's take an example, there is getObject() method that returns an object but it can be of any type like Employee,Student etc, we can use Object class reference to refer that object. For example:""]",[],"[""Object obj=getObject();//we don't know what object will be returned from this method""]",[],"[""ethodDescriptio&&&ublic final Class getClass()returns the Class class object of this object. The Class class can further be used to get the metadata of this class&&&ublic int hashCode() returns the hashcode number for this object&&&ublic boolean equals(Object obj) compares the given object to this object&&&rotected Object clone() throws CloneNotSupportedException creates and returns the exact copy (clone) of this object&&&ublic String toString() returns the string representation of this object&&&ublic final void notify() wakes up single thread, waiting on this object's monitor&&&ublic final void notifyAll() wakes up all the threads, waiting on this object's monitor&&&ublic final void wait(long timeout)throws InterruptedException causes the current thread to wait for the specified milliseconds, until another thread notifies (invokes notify() or notifyAll() method)&&&ublic final void wait(long timeout,int nanos)throws InterruptedExceptioncauses the current thread to wait for the specified milliseconds and nanoseconds, until another thread notifies (invokes notify() or notifyAll() method)&&&ublic final void wait()throws InterruptedException causes the current thread to wait, until another thread notifies (invokes notify() or notifyAll() method)&&&rotected void finalize()throws Throwable is invoked by the garbage collector before object is being garbage collected""]",[]
47,['Object Cloning in Java'],['\n\nThe object cloning is a way to create exact copy of an object. The clone() method of Object class is used to clone an object.\n'],"['https://www.javatpoint.com/java-math', 'https://www.javatpoint.com/encapsulation', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Student18', 'https://www.javatpoint.com/https://static.javatpoint.com/src/oops/clone.zip', 'https://www.javatpoint.com/java-math', 'https://www.javatpoint.com/encapsulation', 'https://www.javatpoint.com/java-math']",['https://static.javatpoint.com/images/core/cloning.jpg'],[],[],"['Why use clone() method ?', 'Advantage of Object cloning', 'Disadvantage of Object cloning', 'Example of clone() method (Object cloning)']",[],"['The clone() method is defined in the Object class. Syntax of the clone() method is as follows:\n', 'Following is a list of some disadvantages of clone() method:', ""Let's see the simple example of object cloning""]","[""The java.lang.Cloneable interface must be implemented by the class whose object clone we want to create. If we don't implement Cloneable interface, clone() method generates CloneNotSupportedException.\n"", 'The clone() method saves the extra processing task for creating the exact copy of an object. If we perform it by using the new keyword, it will take a lot of processing time to be performed that is why we use object cloning.\n', 'Although Object.clone() has some design issues but it is still a popular and easy way of copying objects. Following is a list of advantages of using clone() method:', ""As you can see in the above example, both reference variables have the same value. Thus, the clone() copies the values of an object to another. So we don't need to write explicit code to copy the value of an object to another."", ' If we create another object by new keyword and assign the values of another object to this one, it will require a lot of processing on this object. So to save the extra processing task we use clone() method.\n']",[],"['protected Object clone() throws CloneNotSupportedException', 'class Student18 implements Cloneable{', 'int rollno;', 'String name;', 'Student18(int rollno,String name){', 'this.rollno=rollno;', 'this.name=name;', 'public Object clone()throws CloneNotSupportedException{', 'return super.clone();', 'public static void main(String args[]){', 'Student18 s1=new Student18(101,""amit"");', 'Student18 s2=(Student18)s1.clone();', 'System.out.println(s1.rollno+"" ""+s1.name);', 'System.out.println(s2.rollno+"" ""+s2.name);', '}catch(CloneNotSupportedException c){}']",['Output:101 amit\n       101 amit'],[],[]
48,['Java Math class'],"['Java Math class provides several methods to work on math calculations like min(), max(), avg(), sin(), cos(), tan(), round(), ceil(), floor(), abs() etc.']","['https://www.javatpoint.com/wrapper-class-in-java', 'https://www.javatpoint.com/java-math', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=JavaMathExample1', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=JavaMathExample2', 'https://www.javatpoint.com/java-math-abs-method', 'https://www.javatpoint.com/java-math-max-method', 'https://www.javatpoint.com/java-math-min-method', 'https://www.javatpoint.com/java-math-round-method', 'https://www.javatpoint.com/java-math-sqrt-method', 'https://www.javatpoint.com/java-math-cbrt-method', 'https://www.javatpoint.com/java-math-pow-method', 'https://www.javatpoint.com/java-math-signum-method', 'https://www.javatpoint.com/java-math-ceil-method', 'https://www.javatpoint.com/java-math-copysign-method', 'https://www.javatpoint.com/java-math-nextafter-method', 'https://www.javatpoint.com/java-math-nextup-method', 'https://www.javatpoint.com/java-math-nextdown-method', 'https://www.javatpoint.com/java-math-floor-method', 'https://www.javatpoint.com/java-math-floordiv-method', 'https://www.javatpoint.com/java-math-random-method', 'https://www.javatpoint.com/java-math-rint-method', 'https://www.javatpoint.com/java-math-hypot-method', 'https://www.javatpoint.com/java-math-ulp-method', 'https://www.javatpoint.com/java-math-getexponent-method', 'https://www.javatpoint.com/java-math-ieeeremainder-method', 'https://www.javatpoint.com/java-math-addexact-method', 'https://www.javatpoint.com/java-math-subtractexact-method', 'https://www.javatpoint.com/java-math-multiplyexact-method', 'https://www.javatpoint.com/java-math-incrementexact-method', 'https://www.javatpoint.com/java-math-decrementexact-method', 'https://www.javatpoint.com/java-math-negateexact-method', 'https://www.javatpoint.com/java-math-tointexact-method', 'https://www.javatpoint.com/java-math-log-method', 'https://www.javatpoint.com/java-math-log10-method', 'https://www.javatpoint.com/java-math-log1p-method', 'https://www.javatpoint.com/java-math-exp-method', 'https://www.javatpoint.com/java-math-expm1-method', 'https://www.javatpoint.com/java-math-sin-method', 'https://www.javatpoint.com/java-math-cos-method', 'https://www.javatpoint.com/java-math-tan-method', 'https://www.javatpoint.com//java-math-asin-method', 'https://www.javatpoint.com/java-math-acos-method', 'https://www.javatpoint.com/java-math-atan-method', 'https://www.javatpoint.com/java-math-sinh-method', 'https://www.javatpoint.com/java-math-cosh-method', 'https://www.javatpoint.com/java-math-tanh-method', 'https://www.javatpoint.com/java-math-todegrees-method', 'https://www.javatpoint.com/java-math-toradians-method', 'https://www.javatpoint.com/wrapper-class-in-java', 'https://www.javatpoint.com/java-math', 'https://www.javatpoint.com/wrapper-class-in-java']",[],[],"['Example 1', 'Example 2', 'Java Math Methods', 'Basic Math methods', 'Logarithmic Math Methods ', 'Trigonometric Math Methods ', 'Hyperbolic Math Methods', 'Angular Math Methods']",[],[],[],"['If the size is int or long and the results overflow the range of value, the methods\naddExact(),\xa0subtractExact(),\xa0multiplyExact(), and\xa0toIntExact()\xa0throw an\xa0ArithmeticException.', 'For other arithmetic operations like increment, decrement, divide, absolute value, and negation\noverflow\xa0occur only with a specific minimum or maximum value. It should be checked against\nthe maximum and minimum value as appropriate.', 'The java.lang.Math class contains various methods for performing basic numeric operations such as the logarithm, cube root, and trigonometric functions etc. The various java math methods are as follows:']","[""Unlike some of the StrictMath class numeric methods, all implementations of the equivalent\nfunction of Math class can't define to return the bit-for-bit same results. This relaxation permits\nimplementation with better-performance where strict reproducibility is not required.""]","['public class JavaMathExample1', 'public static void main(String[] args)', 'double x = 28;', 'double y = 4;', '', 'System.out.println(""Maximum number of x and y is: "" +Math.max(x, y));', '', 'System.out.println(""Square root of y is: "" + Math.sqrt(y));', '', 'System.out.println(""Power of x and y is: "" + Math.pow(x, y));', 'System.out.println(""Logarithm of x is: "" + Math.log(x));', 'System.out.println(""Logarithm of y is: "" + Math.log(y));', '', 'System.out.println(""log10 of x is: "" + Math.log10(x));', 'System.out.println(""log10 of y is: "" + Math.log10(y));', '', 'System.out.println(""log1p of x is: "" +Math.log1p(x));', 'System.out.println(""exp of a is: "" +Math.exp(x));', '', 'System.out.println(""expm1 of a is: "" +Math.expm1(x));', 'public class JavaMathExample2', 'public static void main(String[] args)', 'double a = 30;', '', 'double b = Math.toRadians(a);', '', 'System.out.println(""Sine value of a is: "" +Math.sin(a));', '', 'System.out.println(""Cosine value of a is: "" +Math.cos(a));', '', 'System.out.println(""Tangent value of a is: "" +Math.tan(a));', '', 'System.out.println(""Sine value of a is: "" +Math.asin(a));', '', 'System.out.println(""Cosine value of a is: "" +Math.acos(a));', '', 'System.out.println(""Tangent value of a is: "" +Math.atan(a));', 'System.out.println(""Sine value of a is: "" +Math.sinh(a));', '', 'System.out.println(""Cosine value of a is: "" +Math.cosh(a));', '', 'System.out.println(""Tangent value of a is: "" +Math.tanh(a));']","['Maximum number of x and y is: 28.0\nSquare root of y is: 2.0\nPower of x and y is: 614656.0\nLogarithm of x is: 3.332204510175204\nLogarithm of y is: 1.3862943611198906\nlog10 of x is: 1.4471580313422192\nlog10 of y is: 0.6020599913279624\nlog1p of x is: 3.367295829986474\nexp of a is: 1.446257064291475E12\nexpm1 of a is: 1.446257064290475E12', 'Sine value of a is: -0.9880316240928618\nCosine value of a is: 0.15425144988758405\nTangent value of a is: -6.405331196646276\nSine value of a is: NaN\nCosine value of a is: NaN\nTangent value of a is: 1.5374753309166493\nSine value of a is: 5.343237290762231E12\nCosine value of a is: 5.343237290762231E12\nTangent value of a is: 1.0']","['Method|||Description&&&Math.abs()|||It will return the Absolute value of the given value.&&&Math.max()|||It returns the Largest of two values.&&&Math.min()|||It is used to return the Smallest of two values.&&&Math.round()|||It is used to round of the decimal numbers to the nearest value.&&&Math.sqrt()|||It is used to return the square root of a\xa0number.&&&Math.cbrt()|||It is used to return the cube root of a\xa0number.&&&Math.pow()|||It returns the value of first argument raised to the power to second argument.&&&Math.signum()|||It is used to find the sign of a given value.&&&Math.ceil()|||It is used to find the smallest integer value that is greater than or equal to the argument or mathematical integer.&&&Math.copySign()|||It is used to find the Absolute value of first argument along with sign specified in second argument.&&&Math.nextAfter()|||It is used to return the floating-point number adjacent to the first argument in the direction of the second argument.&&&Math.nextUp()|||It returns the floating-point value adjacent to\xa0d\xa0in the direction of positive infinity.&&&Math.nextDown()|||It returns the floating-point value adjacent to\xa0d\xa0in the direction of negative infinity.&&&Math.floor()|||It is used to find the\xa0largest integer value which is less than or equal to the argument and is equal to the mathematical integer of a double value.&&&Math.floorDiv()|||It is used to find the\xa0largest integer value that is less than or equal to the algebraic quotient.&&&Math.random()|||It returns a\xa0double\xa0value with a positive sign, greater than or equal to\xa00.0\xa0and less than\xa01.0.&&&Math.rint()|||It returns the double value that is closest to the given argument and equal to mathematical integer.&&&Math.hypot()|||It returns sqrt(x2\xa0+y2) without intermediate overflow or underflow.&&&Math.ulp()|||It returns the size of an ulp of the argument.&&&Math.getExponent()|||It is used to return the unbiased exponent used in the representation of a\xa0value.&&&Math.IEEEremainder()|||It is used to calculate the remainder operation on two arguments as prescribed by the IEEE 754 standard and returns value.&&&Math.addExact()|||It is used to return the sum of its arguments, throwing an exception if the result overflows an\xa0int or long.&&&Math.subtractExact()|||It returns the difference of the arguments, throwing an exception if the result overflows an\xa0int.&&&Math.multiplyExact()|||It is used to return the product of the arguments, throwing an exception if the result overflows an\xa0int or long.&&&Math.incrementExact()|||It returns the argument incremented by one, throwing an exception if the result overflows an\xa0int.&&&Math.decrementExact()|||It is used to return the argument decremented by one, throwing an exception if the result overflows an\xa0int or long.&&&Math.negateExact()|||It is used to return the negation of the argument, throwing an exception if the result overflows an\xa0int or long.&&&Math.toIntExact()|||It returns the value of the\xa0long\xa0argument, throwing an exception if the value overflows an\xa0int.', ""Method|||Description&&&Math.log()|||It returns the natural logarithm of a\xa0double\xa0value.&&&Math.log10()|||It is used to return the base 10 logarithm of a\xa0double\xa0value.&&&Math.log1p()|||It returns the natural logarithm of the sum of the argument and 1.&&&Math.exp()|||It returns E raised to the power of a\xa0double\xa0value, where E is Euler's number and it is approximately equal to 2.71828.&&&Math.expm1()|||It is used to calculate the power of E and subtract one from it."", 'Method|||Description&&&Math.sin()|||It is used to return the trigonometric Sine value of a Given double value.&&&Math.cos()|||It is used to return the trigonometric Cosine value of a Given double value.&&&Math.tan()|||It is used to return the trigonometric Tangent value of a Given double value.&&&Math.asin()|||It is used to return the trigonometric Arc Sine value of a Given double value&&&Math.acos()|||It is used to return the trigonometric Arc Cosine value of a Given double value.&&&Math.atan()|||It is used to return the trigonometric Arc Tangent value of a Given double value.', 'Method|||Description&&&Math.sinh()|||It is used to return the trigonometric Hyperbolic Cosine value of a Given double value.&&&Math.cosh()|||It is used to return the trigonometric Hyperbolic Sine value of a Given double value.&&&Math.tanh()|||It is used to return the trigonometric Hyperbolic Tangent value of a Given double value.', 'Method|||Description&&&Math.toDegrees|||It is used to convert the specified Radians angle to equivalent angle measured in Degrees.&&&Math.toRadians|||It is used to convert the specified Degrees angle to equivalent angle measured in Radians.']",[]
49,['Wrapper classes in Java'],['The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive.'],"['https://www.javatpoint.com/call-by-value-and-call-by-reference-in-java', 'https://www.javatpoint.com/array-in-java', 'https://www.javatpoint.com/java-boolean', 'https://www.javatpoint.com/post/java-character', 'https://www.javatpoint.com/java-byte', 'https://www.javatpoint.com/java-short', 'https://www.javatpoint.com/java-integer', 'https://www.javatpoint.com/java-long', 'https://www.javatpoint.com/java-float', 'https://www.javatpoint.com/java-double', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-java', 'https://www.javatpoint.com/array-in-java', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-java']",[],[],"['Use of Wrapper classes in Java', 'Autoboxing', 'Unboxing', 'Java Wrapper classes Example', 'Custom Wrapper class in Java']",[],[],"['The eight classes of the java.lang package are known as wrapper classes in Java. The list of eight wrapper classes are given below:', 'Since Java 5, we do not need to use the valueOf() method of wrapper classes to convert the primitive into objects.', 'Wrapper class Example: Primitive to Wrapper', 'Wrapper class Example: Wrapper to Primitive']","['Since J2SE 5.0, autoboxing and unboxing feature convert primitives into objects and objects into primitives automatically. The automatic conversion of primitive into an object is known as autoboxing and vice-versa unboxing.', 'Java is an object-oriented programming language, so we need to deal with objects many times like in Collections, Serialization, Synchronization, etc. Let us see the different scenarios, where we need to use the wrapper classes. ', 'Java Wrapper classes wrap the primitive data types, that is why it is known as wrapper classes. We can also create a class which wraps a primitive data type. So, we can create a custom wrapper class in Java.']","['The automatic conversion of primitive data type into its corresponding wrapper class is known as autoboxing, for example, byte to Byte, char to Character, int to Integer, long to Long, float to Float, boolean to Boolean, double to Double, and short to Short.', 'The automatic conversion of wrapper type into its corresponding primitive type is known as unboxing. It is the reverse process of autoboxing. Since Java 5, we do not need to use the intValue() method of wrapper classes to convert the wrapper type into primitives. ']","['public class WrapperExample1{', 'public static void main(String args[]){', 'int a=20;', 'Integer i=Integer.valueOf(a);//converting int into Integer explicitly', 'Integer j=a;//autoboxing, now compiler will write Integer.valueOf(a) internally', 'System.out.println(a+"" ""+i+"" ""+j);', 'public class WrapperExample2{', 'public static void main(String args[]){', 'Integer a=new Integer(3);', 'int i=a.intValue();//converting Integer to int explicitly', 'int j=a;//unboxing, now compiler will write a.intValue() internally', 'System.out.println(a+"" ""+i+"" ""+j);', 'public class WrapperExample3{', 'public static void main(String args[]){', 'byte b=10;', 'short s=20;', 'int i=30;', 'long l=40;', 'float f=50.0F;', 'double d=60.0D;', ""char c='a';"", 'boolean b2=true;', 'Byte byteobj=b;', 'Short shortobj=s;', 'Integer intobj=i;', 'Long longobj=l;', 'Float floatobj=f;', 'Double doubleobj=d;', 'Character charobj=c;', 'Boolean boolobj=b2;', 'System.out.println(""---Printing object values---"");', 'System.out.println(""Byte object: ""+byteobj);', 'System.out.println(""Short object: ""+shortobj);', 'System.out.println(""Integer object: ""+intobj);', 'System.out.println(""Long object: ""+longobj);', 'System.out.println(""Float object: ""+floatobj);', 'System.out.println(""Double object: ""+doubleobj);', 'System.out.println(""Character object: ""+charobj);', 'System.out.println(""Boolean object: ""+boolobj);', 'byte bytevalue=byteobj;', 'short shortvalue=shortobj;', 'int intvalue=intobj;', 'long longvalue=longobj;', 'float floatvalue=floatobj;', 'double doublevalue=doubleobj;', 'char charvalue=charobj;', 'boolean boolvalue=boolobj;', 'System.out.println(""---Printing primitive values---"");', 'System.out.println(""byte value: ""+bytevalue);', 'System.out.println(""short value: ""+shortvalue);', 'System.out.println(""int value: ""+intvalue);', 'System.out.println(""long value: ""+longvalue);', 'System.out.println(""float value: ""+floatvalue);', 'System.out.println(""double value: ""+doublevalue);', 'System.out.println(""char value: ""+charvalue);', 'System.out.println(""boolean value: ""+boolvalue);', 'class Javatpoint{', 'private int i;', 'Javatpoint(){}', 'Javatpoint(int i){', 'this.i=i;', 'public int getValue(){', 'return i;', 'public void setValue(int i){', 'this.i=i;', '@Override', 'public String toString() {', 'return Integer.toString(i);', 'public class TestJavatpoint{', 'public static void main(String[] args){', 'Javatpoint j=new Javatpoint(10);', 'System.out.println(j);']","['20 20 20', '3 3 3', '---Printing object values---\nByte object: 10\nShort object: 20\nInteger object: 30\nLong object: 40\nFloat object: 50.0\nDouble object: 60.0\nCharacter object: a\nBoolean object: true\n---Printing primitive values---\nbyte value: 10\nshort value: 20\nint value: 30\nlong value: 40\nfloat value: 50.0\ndouble value: 60.0\nchar value: a\nboolean value: true', '10']",['rimitive TypeWrapper clas&&&ooleanBoolea&&&harCharacte&&&yteByt&&&hortShor&&&ntIntege&&&ongLon&&&loatFloa&&&oubleDoubl'],"['|||Change the value in Method: Java supports only call by value. So, if we pass a primitive value, it will not change the original value. But, if we convert the primitive value in an object, it will change the original value.|||Serialization: We need to convert the objects into streams to perform the serialization. If we have a primitive value, we can convert it in objects through the wrapper classes.|||Synchronization: Java synchronization works with objects in Multithreading. |||java.util package: The java.util package provides the utility classes to deal with objects. |||Collection Framework: Java collection framework works with objects only. All classes of the collection framework (ArrayList, LinkedList, Vector, HashSet, LinkedHashSet, TreeSet, PriorityQueue, ArrayDeque, etc.) deal with objects only. |||']"
50,['Call by Value and Call by Reference in Java'],"[""In case of call by reference original value is changed if we made changes in the called method. If we pass object in place of any primitive value, original value will be changed. In this example we are passing object as a value. Let's take a simple example:""]","['https://www.javatpoint.com/strictfp-keyword', 'https://www.javatpoint.com/array-in-java', 'https://www.javatpoint.com/src/oops/callbyvalue1.zip', 'https://www.javatpoint.com/src/oops/callbyvalue2.zip', 'https://www.javatpoint.com/strictfp-keyword', 'https://www.javatpoint.com/array-in-java', 'https://www.javatpoint.com/strictfp-keyword']",[],[],[],"['Example of call by value in java', 'Another Example of call by value in java']",[],[],[],[],"['class Operation{', 'int data=50;', 'void change(int data){', 'data=data+100;//changes will be in the local variable only', 'public static void main(String args[]){', 'Operation op=new Operation();', 'System.out.println(""before change ""+op.data);', 'op.change(500);', 'System.out.println(""after change ""+op.data);', 'class Operation2{', 'int data=50;', 'void change(Operation2 op){', 'op.data=op.data+100;//changes will be in the instance variable', 'public static void main(String args[]){', 'Operation2 op=new Operation2();', 'System.out.println(""before change ""+op.data);', 'op.change(op);//passing object', 'System.out.println(""after change ""+op.data);']","['Output:before change 50\n       after change 50', 'Output:before change 50\n       after change 150']",[],[]
51,['Java Strictfp Keyword'],"['Java strictfp keyword ensures that you will get the same result on every platform if you perform operations in the floating-point variable. The precision may differ from platform to platform that is why java programming language have provided the strictfp keyword, so that you get same result on every platform. So, now you have better control over the floating-point arithmetic.\n']","['https://www.javatpoint.com/creating-api-document', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-java', 'https://www.javatpoint.com/creating-api-document', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-java', 'https://www.javatpoint.com/creating-api-document']",[],[],[],"['Legal code for strictfp keyword', 'Illegal code for strictfp keyword']",[],"['The strictfp keyword can be applied on methods, classes and interfaces.', 'The strictfp keyword cannot be applied on abstract methods, variables or constructors.']",[],[],"['strictfp class A{}//strictfp applied on class', 'strictfp interface M{}//strictfp applied on interface', 'class A{', 'strictfp void m(){}//strictfp applied on method', 'class B{', 'strictfp abstract void m();//Illegal combination of modifiers', 'class B{', 'strictfp int data=10;//modifier strictfp not allowed here', 'class B{', 'strictfp B(){}//modifier strictfp not allowed here']",[],[],[]
52,['Creating API Document | javadoc tool'],"['We can create document api in java by the help of javadoc tool. In the java file, we must use the documentation comment /**... */ to post information for the class, method, constructor, fields etc.']","['https://www.javatpoint.com/command-line-argument', 'https://www.javatpoint.com/sstrictfp-keyword', 'https://www.javatpoint.com/command-line-argument', 'https://www.javatpoint.com/strictfp-keyword', 'https://www.javatpoint.com/command-line-argument']",[],[],[],[],[],"[""Let's see the simple class that contains documentation comment."", 'To create the document API, you need to use the javadoc tool followed by java file name. There is no need to compile the javafile.', 'On the command prompt, you need to write:', 'to generate the document api. Now, there will be created a lot of html files. Open the index.html file to get the information about the classes.']",[],[],"['package com.abc;', '/** This class is a user-defined class that contains one methods cube.*/', 'public class M{', '/** The cube method prints cube of the given number */', 'public static void  cube(int n){System.out.println(n*n*n);}']",[],[],[]
53,['Java Command Line Arguments'],['The java command-line argument is an argument i.e. passed at the time of running the java program.'],"['https://www.javatpoint.com/difference-between-object-and-class', 'https://www.javatpoint.com/creating-api-document', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#cmdex1', 'https://www.javatpoint.com/#cmdex2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/difference-between-object-and-class', 'https://www.javatpoint.com/creating-api-document', 'https://www.javatpoint.com/difference-between-object-and-class']",[],[],[],"['Simple example of command-line argument in java', 'Example of command-line argument that prints all the values']",[],[' The arguments passed from the console can be received in the java program and it can be used as an input. '],"['So, it provides a convenient way to check the behavior of the program for the different values. You can pass N (1,2,3 and so on) numbers of arguments from the command prompt.\n']",[],"['class CommandLineExample{', 'public static void main(String args[]){', 'System.out.println(""Your first argument is: ""+args[0]);', 'compile by > javac CommandLineExample.java', 'run by > java CommandLineExample sonoo', 'class A{', 'public static void main(String args[]){', 'for(int i=0;i<args.length;i++)', 'System.out.println(args[i]);', 'compile by > javac A.java', 'run by > java A sonoo jaiswal 1 3 abc']","['Output: Your first argument is: sonoo', 'Output: sonoo\n       jaiswal\n       1\n       3\n       abc']",[],[]
54,['Difference between object and class'],['There are many differences between object and class. A list of differences between object and class are given below:'],"['https://www.javatpoint.com/method-overloading-vs-method-overriding-in-java', 'https://www.javatpoint.com/command-line-argument', 'https://www.javatpoint.com/method-overloading-vs-method-overriding-in-java', 'https://www.javatpoint.com/command-line-argument', 'https://www.javatpoint.com/method-overloading-vs-method-overriding-in-java']",[],[],[],[],[],"[""Let's see some real life example of class and object in java to understand the difference well:"", 'Class: Human Object: Man, Woman', 'Class: Fruit Object: Apple, Banana, Mango, Guava wtc.', 'Class: Mobile phone Object: iPhone, Samsung, Moto', 'Class: Food Object: Pizza, Burger, Samosa']",[],[],[],[],"[""o.ObjectClas&&&)Object is an instance of a class.Class is a blueprint or template from which objects are created&&&)Object is a real world entity such as pen, laptop, mobile, bed, keyboard, mouse, chair etc.Class is a group of similar objects&&&)Object is a physical entity.Class is a logical entity&&&)Object is created through new keyword mainly e.g. Student s1=new Student();Class is declared using class keyword e.g. class Student{&&&)Object is created many times as per requirement.Class is declared once&&&)Object allocates memory when it is created.Class doesn't allocated memory when it is created&&&)There are many ways to create object in java such as new keyword, newInstance() method, clone() method, factory method and deserialization.There is only one way to define class in java using class keyword""]",[]
55,['Difference between method overloading and method overriding in java'],['There are many differences between method overloading and method overriding in java. A list of differences between method overloading and method overriding are given below:'],"['https://www.javatpoint.com/java-string', 'https://www.javatpoint.com/command-line-argument', 'https://www.javatpoint.com/java-string', 'https://www.javatpoint.com/command-line-argument', 'https://www.javatpoint.com/java-string']",[],[],"['Java Method Overloading example', 'Java Method Overriding example']",[],[],[],[],[],"['class OverloadingExample{', 'static int add(int a,int b){return a+b;}', 'static int add(int a,int b,int c){return a+b+c;}', 'class Animal{', 'void eat(){System.out.println(""eating..."");}', 'class Dog extends Animal{', 'void eat(){System.out.println(""eating bread..."");}']",[],"[""o.Method Overloading Method Overridin&&&)Method overloading is used to increase the readability of the program.Method overriding is used to provide the specific implementation of the method that is already provided by its super class&&&)Method overloading is performed within class.Method overriding occurs in two classes that have IS-A (inheritance) relationship&&&)In case of method overloading, parameter must be different.In case of method overriding, parameter must be same&&&)Method overloading is the example of compile time polymorphism.Method overriding is the example of run time polymorphism&&&)In java, method overloading can't be performed by changing return type of the method only. Return type can be same or different in method overloading. But you must have to change the parameter.Return type must be same or covariant in method overriding""]",[]
56,['Java String'],"['In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example:']","['https://www.javatpoint.com/immutable-string', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/array-in-java', 'https://www.javatpoint.com/interface-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/StringBuffer-class', 'https://www.javatpoint.com/https://www.javatpoint.com/StringBuilder-class', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=StringExample', 'https://www.javatpoint.com/java-string-charat', 'https://www.javatpoint.com/java-string-length', 'https://www.javatpoint.com/java-string-format', 'https://www.javatpoint.com/java-string-format', 'https://www.javatpoint.com/java-string-substring', 'https://www.javatpoint.com/java-string-substring', 'https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/java-string-join', 'https://www.javatpoint.com/java-string-join', 'https://www.javatpoint.com/java-string-equals', 'https://www.javatpoint.com/java-string-isempty', 'https://www.javatpoint.com/java-string-concat', 'https://www.javatpoint.com/java-string-replace', 'https://www.javatpoint.com/java-string-replace', 'https://www.javatpoint.com/java-string-equalsignorecase', 'https://www.javatpoint.com/java-string-split', 'https://www.javatpoint.com/java-string-split', 'https://www.javatpoint.com/java-string-intern', 'https://www.javatpoint.com/java-string-indexof', 'https://www.javatpoint.com/java-string-indexof', 'https://www.javatpoint.com/java-string-indexof', 'https://www.javatpoint.com/java-string-indexof', 'https://www.javatpoint.com/java-string-tolowercase', 'https://www.javatpoint.com/java-string-tolowercase', 'https://www.javatpoint.com/java-string-touppercase', 'https://www.javatpoint.com/java-string-touppercase', 'https://www.javatpoint.com/java-string-trim', 'https://www.javatpoint.com/java-string-valueof', 'https://www.javatpoint.com/immutable-string', 'https://www.javatpoint.com/immutable-string']","['https://static.javatpoint.com/images/core/string-implements.png', 'https://static.javatpoint.com/images/core/charsequence.png', 'https://static.javatpoint.com/core/images/java-string.png']",[],['CharSequence Interface'],"['What is String in Java?', 'How to create a string object?', '1) String Literal', 'Why Java uses the concept of String literal?', '2) By new keyword', 'Java String Example', 'Java String class methods']","['Note: String objects are stored in a special memory area known as the ""string constant pool"".']","['is same as:', 'The java.lang.String class implements Serializable, Comparable and CharSequence interfaces.', ""We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object."", 'There are two ways to create String object:', 'Java String literal is created by using double quotes. For Example:', 'To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool).', 'StringExample.java', 'The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method.', 'The java.lang.String class provides many useful methods to perform operations on sequence of char values.']","['Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc.', 'The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes.', 'The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes.', 'Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object.', 'In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal ""Welcome"" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool).']","['Each time you create a string literal, the JVM checks the ""string constant pool"" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn\'t exist in the pool, a new string instance is created and placed in the pool. For example:', 'In the above example, only one object will be created. Firstly, JVM will not find any string object with the value ""Welcome"" in string constant pool that is why it will create a new object. After that it will find the string with the value ""Welcome"" in the pool, it will not create a new object but will return the reference to the same instance.']","[""char[] ch={'j','a','v','a','t','p','o','i','n','t'};"", 'String s=new String(ch);', 'String s=""javatpoint"";', 'String s=""welcome"";', 'String s1=""Welcome"";', 'String s2=""Welcome"";//It doesn\'t create a new instance', 'String s=new String(""Welcome"");//creates two objects and one reference variable', 'public class StringExample{', 'public static void main(String args[]){', 'String s1=""java"";//creating string by Java string literal', ""char ch[]={'s','t','r','i','n','g','s'};"", 'String s2=new String(ch);//converting char array to string', 'String s3=new String(""example"");//creating Java string by new keyword', 'System.out.println(s1);', 'System.out.println(s2);', 'System.out.println(s3);']","['java', 'strings', 'example']","[""o.MethodDescriptio&&&char charAt(int index)It returns char value for the particular inde&&&int length()It returns string lengt&&&static String format(String format, Object... args)It returns a formatted string&&&static String format(Locale l, String format, Object... args)It returns formatted string with given locale&&&String substring(int beginIndex)It returns substring for given begin index&&&String substring(int beginIndex, int endIndex)It returns substring for given begin index and end index&&&boolean contains(CharSequence s)It returns true or false after matching the sequence of char value&&&static String join(CharSequence delimiter, CharSequence... elements)It returns a joined string&&&static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)It returns a joined string&&&0boolean equals(Object another)It checks the equality of string with the given object&&&1boolean isEmpty()It checks if string is empty&&&2String concat(String str)It concatenates the specified string&&&3String replace(char old, char new)It replaces all occurrences of the specified char value&&&4String replace(CharSequence old, CharSequence new)It replaces all occurrences of the specified CharSequence.&&&5static String equalsIgnoreCase(String another)It compares another string. It doesn't check case&&&6String[] split(String regex)It returns a split string matching regex.|||17String[] split(String regex, int limit)It returns a split string matching regex and limit.|||18String intern()It returns an interned string.|||19int indexOf(int ch)It returns the specified char value index.|||20int indexOf(int ch, int fromIndex)It returns the specified char value index starting with given index.|||21int indexOf(String substring)It returns the specified substring index.|||22int indexOf(String substring, int fromIndex)It returns the specified substring index starting with given index.|||23String toLowerCase()It returns a string in lowercase.|||24String toLowerCase(Locale l)It returns a string in lowercase using specified locale.|||25String toUpperCase()It returns a string in uppercase.|||26String toUpperCase(Locale l)It returns a string in uppercase using specified locale.|||27String trim()It removes beginning and ending spaces of this string.|||28static String valueOf(int value)It converts given type into string. It is an overloaded method.&&&7String[] split(String regex, int limit)It returns a split string matching regex and limit.|||18String intern()It returns an interned string.|||19int indexOf(int ch)It returns the specified char value index.|||20int indexOf(int ch, int fromIndex)It returns the specified char value index starting with given index.|||21int indexOf(String substring)It returns the specified substring index.|||22int indexOf(String substring, int fromIndex)It returns the specified substring index starting with given index.|||23String toLowerCase()It returns a string in lowercase.|||24String toLowerCase(Locale l)It returns a string in lowercase using specified locale.|||25String toUpperCase()It returns a string in uppercase.|||26String toUpperCase(Locale l)It returns a string in uppercase using specified locale.|||27String trim()It removes beginning and ending spaces of this string.|||28static String valueOf(int value)It converts given type into string. It is an overloaded method.&&&8String intern()It returns an interned string.|||19int indexOf(int ch)It returns the specified char value index.|||20int indexOf(int ch, int fromIndex)It returns the specified char value index starting with given index.|||21int indexOf(String substring)It returns the specified substring index.|||22int indexOf(String substring, int fromIndex)It returns the specified substring index starting with given index.|||23String toLowerCase()It returns a string in lowercase.|||24String toLowerCase(Locale l)It returns a string in lowercase using specified locale.|||25String toUpperCase()It returns a string in uppercase.|||26String toUpperCase(Locale l)It returns a string in uppercase using specified locale.|||27String trim()It removes beginning and ending spaces of this string.|||28static String valueOf(int value)It converts given type into string. It is an overloaded method.&&&9int indexOf(int ch)It returns the specified char value index&&&0int indexOf(int ch, int fromIndex)It returns the specified char value index starting with given index&&&1int indexOf(String substring)It returns the specified substring index&&&2int indexOf(String substring, int fromIndex)It returns the specified substring index starting with given index&&&3String toLowerCase()It returns a string in lowercase&&&4String toLowerCase(Locale l)It returns a string in lowercase using specified locale&&&5String toUpperCase()It returns a string in uppercase&&&6String toUpperCase(Locale l)It returns a string in uppercase using specified locale&&&7String trim()It removes beginning and ending spaces of this string&&&8static String valueOf(int value)It converts given type into string. It is an overloaded method""]",['|||Why are String objects immutable?|||How to create an immutable class?|||What is string constant pool?|||What code is written by the compiler if you concatenate any string by + (string concatenation operator)?|||What is the difference between StringBuffer and StringBuilder class?||||||Concept of String|||Immutable String|||String Comparison|||String Concatenation|||Concept of Substring|||String class methods and its usage|||StringBuffer class|||StringBuilder class|||Creating Immutable class|||toString() method|||StringTokenizer class|||&&&|||By string literal|||By new keyword|||']
57,['Immutable String in Java'],"['A String is an unavoidable type of variable while writing any application program. String references are used to store various attributes like username, password, etc. In Java, String objects are immutable. Immutable simply means unmodifiable or unchangeable.']","['https://www.javatpoint.com/string-comparison-in-java', 'https://www.javatpoint.com/string-handling-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testimmutablestring', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testimmutablestring1', 'https://www.javatpoint.com/string-comparison-in-java', 'https://www.javatpoint.com/string-handling-in-java', 'https://www.javatpoint.com/string-comparison-in-java']",['https://static.javatpoint.com/core/images/immutable-string-in-java.png'],[],[],"['Why String objects are immutable in Java?', 'Why String class is Final in Java?']",[],"[""Once String object is created its data or state can't be changed but a new String object is created."", ""Let's try to understand the concept of immutability by the example given below:"", 'Testimmutablestring.java', 'As you can see in the above figure that two objects are created but s reference variable still refers to ""Sachin"" not to ""Sachin Tendulkar"".', 'But if we explicitly assign it to the reference variable, it will refer to ""Sachin Tendulkar"" object.', 'For example:', 'Testimmutablestring1.java', 'In such a case, s points to the ""Sachin Tendulkar"". Please notice that still Sachin object is not modified.', 'Following are some features of String which makes String objects immutable.', '1. ClassLoader:', 'To avoid this kind of misinterpretation, String is immutable.', '2. Thread Safe:', ""As the String object is immutable we don't have to take care of the synchronization that is required while sharing an object across multiple threads."", '3. Security:', '4. Heap Space:']","['Now it can be understood by the diagram given below. Here Sachin is not changed but a new object is created with Sachin Tendulkar. That is why String is known as immutable.', 'A ClassLoader in Java uses a String object as an argument. Consider, if the String object is modifiable, the value might be changed and the class that is supposed to be loaded might be different.', 'The reason behind the String class being final is because no one can override the methods of the String class. So that it can provide the same features to the new String objects as well as to the old ones.']","['As Java uses the concept of String literal. Suppose there are 5 reference variables, all refer to one object ""Sachin"". If one reference variable changes the value of the object, it will be affected by all the reference variables. That is why String objects are immutable in Java.', 'As we have seen in class loading, immutable String objects avoid further errors by loading the correct class. This leads to making the application program more secure. Consider an example of banking software. The username and password cannot be modified by any intruder because String objects are immutable. This can make the application program more secure.', 'The immutability of String helps to minimize the usage in the heap memory. When we try to declare a new String object, the JVM checks whether the value already exists in the String pool or not. If it exists, the same value is assigned to the new object. This feature allows Java to use the heap space efficiently.']","['class Testimmutablestring{', 'public static void main(String args[]){', 'String s=""Sachin"";', 's.concat("" Tendulkar"");//concat() method appends the string at the end', 'System.out.println(s);//will print Sachin because strings are immutable objects', 'class Testimmutablestring1{', 'public static void main(String args[]){', 'String s=""Sachin"";', 's=s.concat("" Tendulkar"");', 'System.out.println(s);']","['Sachin', 'Sachin Tendulkar']",[],[]
58,['Java String compare'],['We can compare String in Java on the basis of content and reference.'],"['https://www.javatpoint.com/string-concatenation-in-java', 'https://www.javatpoint.com/immutable-string', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Teststringcomparison1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Teststringcomparison2', 'https://www.javatpoint.com/java-string-equals', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Teststringcomparison3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Teststringcomparison4', 'https://www.javatpoint.com/java-string-compareto', 'https://www.javatpoint.com/string-concatenation-in-java', 'https://www.javatpoint.com/immutable-string', 'https://www.javatpoint.com/string-concatenation-in-java']",['https://static.javatpoint.com/images/core/comparison.jpg'],[],"['1) By Using equals() Method', '2) By Using == operator', '3) String compare by compareTo() method', '3) By Using compareTo() method']",[],[],"['It is used in authentication (by equals() method), sorting (by compareTo() method), reference matching (by == operator) etc.', 'There are three ways to compare String in Java:', 'Teststringcomparison1.java', 'In the above code, two strings are compared using equals() method of String class. And the result is printed as boolean values, true or false.', 'Teststringcomparison2.java', 'The == operator compares references not values.', 'Teststringcomparison3.java', 'The above code, demonstrates the use of == operator used for comparing two String objects.', 'Suppose s1 and s2 are two String objects. If:', 'Teststringcomparison4.java']","['The String class equals() method compares the original content of the string. It compares values of string for equality. String class provides the following two methods:', 'In the above program, the methods of String class are used. The equals() method returns true if String objects are matching and both strings are of same case. equalsIgnoreCase() returns true regardless of cases of strings.', 'The String class compareTo() method compares values lexicographically and returns an integer value that describes if first string is less than, equal to or greater than second string.']",[],"['class Teststringcomparison1{', 'public static void main(String args[]){', 'String s1=""Sachin"";', 'String s2=""Sachin"";', 'String s3=new String(""Sachin"");', 'String s4=""Saurav"";', 'System.out.println(s1.equals(s2));//true', 'System.out.println(s1.equals(s3));//true', 'System.out.println(s1.equals(s4));//false', 'class Teststringcomparison2{', 'public static void main(String args[]){', 'String s1=""Sachin"";', 'String s2=""SACHIN"";', 'System.out.println(s1.equals(s2));//false', 'System.out.println(s1.equalsIgnoreCase(s2));//true', 'class Teststringcomparison3{', 'public static void main(String args[]){', 'String s1=""Sachin"";', 'String s2=""Sachin"";', 'String s3=new String(""Sachin"");', 'System.out.println(s1==s2);//true (because both refer to same instance)', 'System.out.println(s1==s3);//false(because s3 refers to instance created in nonpool)', 'class Teststringcomparison4{', 'public static void main(String args[]){', 'String s1=""Sachin"";', 'String s2=""Sachin"";', 'String s3=""Ratan"";', 'System.out.println(s1.compareTo(s2));//0', 'System.out.println(s1.compareTo(s3));//1(because s1>s3)', 'System.out.println(s3.compareTo(s1));//-1(because s3 < s1 )']","['true', 'true', 'false', 'false', 'true', 'true', 'false', '0', '1', '-1']",[],"['|||public boolean equals(Object another) compares this string to the specified object.|||public boolean equalsIgnoreCase(String another) compares this string to another string, ignoring case.||||||s1 == s2 : The method returns 0.|||s1 > s2 : The method returns a positive value.|||s1 < s2 : The method returns a negative value.|||&&&|||By Using equals() Method|||By Using == Operator|||By compareTo() Method|||']"
59,['String Concatenation in Java'],"['In Java, String concatenation forms a new String that is the combination of multiple strings. There are two ways to concatenate strings in Java:']","['https://www.javatpoint.com/substring', 'https://www.javatpoint.com/string-comparison-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStringConcatenation1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStringConcatenation2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestStringConcatenation3', 'https://www.javatpoint.com/substring', 'https://www.javatpoint.com/string-comparison-in-java', 'https://www.javatpoint.com/substring']",[],[],['1) String Concatenation by + (String concatenation) operator'],"['2) String Concatenation by concat() method', '1. String concatenation using StringBuilder class', '2. String concatenation using format() method', '3. String concatenation using String.join() method (Java Version 8+)', '4. String concatenation using StringJoiner class (Java Version 8+)', '5. String concatenation using Collectors.joining() method (Java (Java Version 8+)']","['Note: After a string literal, all the + will be treated as string concatenation operator.']","['Java String concatenation operator (+) is used to add strings. For Example:', 'TestStringConcatenation1.java', 'The Java compiler transforms above code to this:', 'TestStringConcatenation2.java', 'The String concat() method concatenates the specified string to the end of current string. Syntax:\n', ""Let's see the example of String concat() method."", 'TestStringConcatenation3.java', 'The above Java program, concatenates two String objects s1 and s2 using concat() method and stores the result into s3 object.', 'There are some other possible ways to concatenate Strings in Java,', 'StrBuilder.java', 'String.format() method allows to concatenate multiple strings using format specifier like %s followed by the string values or objects.', 'StrFormat.java', 'StrJoin.java:', 'StrJoiner.java', 'The Collectors class in Java 8 offers joining() method that concatenates the input elements in a similar order as they occur.', 'ColJoining.java', 'Here, a list of String array is declared. And a String object str stores the result of Collectors.joining() method.']","['In the above code snippet, s1, s2 and s are declared as objects of StringBuilder class. s stores the result of concatenation of s1 and s2 using append() method.', 'Here, the String objects s is assigned the concatenated result of Strings s1 and s2 using String.format() method. format() accepts parameters as format specifier followed by String objects or values.', 'The String.join() method is available in Java version 8 and all the above versions. String.join() method accepts arguments first a separator and an array of String objects.', 'In the above code snippet, the String object s stores the result of String.join("""",s1,s2) method. A separator is specified inside quotation marks followed by the String objects or array of String objects.', 'StringJoiner class has all the functionalities of String.join() method. In advance its constructor can also accept optional arguments, prefix and suffix.', 'In the above code snippet, the StringJoiner object s is declared and the constructor StringJoiner() accepts a separator value. A separator is specified inside quotation marks. The add() method appends Strings passed as arguments.']","[""In Java, String concatenation is implemented through the StringBuilder (or StringBuffer) class and it's append method. String concatenation operator produces a new String by appending the second operand onto the end of the first operand. The String concatenation operator can concatenate not only String but primitive values also. For Example:"", 'StringBuilder is class provides append() method to perform concatenation operation. The append() method accepts arguments of different types like Objects, StringBuilder, int, char, CharSequence, boolean, float, double. StringBuilder is the most popular and fastet way to concatenate strings in Java. It is mutable class which means values stored in StringBuilder objects can be updated or changed.']","['class TestStringConcatenation1{', 'public static void main(String args[]){', 'String s=""Sachin""+"" Tendulkar"";', 'System.out.println(s);//Sachin Tendulkar', 'String s=(new StringBuilder()).append(""Sachin"").append("" Tendulkar).toString();', 'class TestStringConcatenation2{', 'public static void main(String args[]){', 'String s=50+30+""Sachin""+40+40;', 'System.out.println(s);//80Sachin4040', 'public String concat(String another)', 'class TestStringConcatenation3{', 'public static void main(String args[]){', 'String s1=""Sachin "";', 'String s2=""Tendulkar"";', 'String s3=s1.concat(s2);', 'System.out.println(s3);//Sachin Tendulkar', 'public class StrBuilder', '/* Driver Code */', 'public static void main(String args[])', 'StringBuilder s1 = new StringBuilder(""Hello"");    //String 1', 'StringBuilder s2 = new StringBuilder("" World"");    //String 2', 'StringBuilder s = s1.append(s2);   //String 3 to store the result', 'System.out.println(s.toString());  //Displays result', 'public class StrFormat', '/* Driver Code */', 'public static void main(String args[])', 'String s1 = new String(""Hello"");    //String 1', 'String s2 = new String("" World"");    //String 2', 'String s = String.format(""%s%s"",s1,s2);   //String 3 to store the result', 'System.out.println(s.toString());  //Displays result', 'public class StrJoin', '/* Driver Code */', 'public static void main(String args[])', 'String s1 = new String(""Hello"");    //String 1', 'String s2 = new String("" World"");    //String 2', 'String s = String.join("""",s1,s2);   //String 3 to store the result', 'System.out.println(s.toString());  //Displays result', 'public class StrJoiner', '/* Driver Code */', 'public static void main(String args[])', 'StringJoiner s = new StringJoiner("", "");   //StringeJoiner object', 's.add(""Hello"");    //String 1', 's.add(""World"");    //String 2', 'System.out.println(s.toString());  //Displays result', 'import java.util.*;', 'import java.util.stream.Collectors;', 'public class ColJoining', '/* Driver Code */', 'public static void main(String args[])', 'List liststr = Arrays.asList(""abc"", ""pqr"", ""xyz""); //List of String array', 'String str = liststr.stream().collect(Collectors.joining("", "")); //performs joining operation', 'System.out.println(str.toString());  //Displays result']","['Sachin Tendulkar', '80Sachin4040', 'Sachin Tendulkar', 'Hello World', 'Hello World', 'Hello World', 'Hello, World', 'abc, pqr, xyz']",[],['|||By + (String concatenation) operator|||By concat() method|||']
60,['Substring in Java'],"['A part of String is called substring. In other words, substring is a subset of another String. Java String class provides the built-in substring() method that extract a substring from the given string by using the index values passed as an argument. In case of substring() method startIndex is inclusive and endIndex is exclusive.']","['https://www.javatpoint.com/methods-of-string-class', 'https://www.javatpoint.com/string-concatenation-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/java-programs', 'https://www.javatpoint.com/methods-of-string-class', 'https://www.javatpoint.com/string-concatenation-in-java', 'https://www.javatpoint.com/methods-of-string-class']",[],[],[],"['Example of Java substring() method', 'Using String.split() method:']",['Note: Index starts from 0.'],"['Suppose the string is ""computer"", then the substring will be com, compu, ter, etc.', 'You can get substring from the given String object by one of the two methods:', 'In case of String:', ""Let's understand the startIndex and endIndex by the code given below."", 'In the above substring, 0 points the first letter and 2 points the second letter i.e., e (because end index is exclusive).', 'TestSubstring.java', 'The above Java programs, demonstrates variants of the substring() method of String class. The startindex is inclusive and endindex is exclusive.', 'The split() method of String class can be used to extract a substring from a sentence. It accepts arguments in the form of a regular expression.', 'TestSubstring2.java']","['In the above program, we have used the split() method. It accepts an argument \\\\. that checks a in the sentence and splits the string into another string. It is stored in an array of String objects sentences.']",[],"['String s=""hello"";', 'System.out.println(s.substring(0,2)); //returns he  as a substring', 'public class TestSubstring{', 'public static void main(String args[]){', 'String s=""SachinTendulkar"";', 'System.out.println(""Original String: "" + s);', 'System.out.println(""Substring starting from index 6: "" +s.substring(6));//Tendulkar', 'System.out.println(""Substring starting from index 0 to 6: ""+s.substring(0,6)); //Sachin', 'import java.util.*;', 'public class TestSubstring2', '/* Driver Code */', 'public static void main(String args[])', '{', 'String text= new String(""Hello, My name is Sachin"");', '/* Splits the sentence by the delimeter passed as an argument */', 'String[] sentences = text.split(""\\\\."");', 'System.out.println(Arrays.toString(sentences));']","['Original String: SachinTendulkar', 'Substring starting from index 6: Tendulkar', 'Substring starting from index 0 to 6: Sachin', '[Hello,  My name is Sachin]']",[],"['|||startIndex: inclusive|||endIndex: exclusive|||&&&|||public String substring(int startIndex):|||This method returns new String object containing the substring of the given string from specified startIndex (inclusive). The method throws an IndexOutOfBoundException when the startIndex is larger than the length of String or less than zero.|||public String substring(int startIndex, int endIndex):|||This method returns new String object containing the substring of the given string from specified startIndex to endIndex. The method throws an IndexOutOfBoundException when the startIndex is less than zero or startIndex is greater than endIndex or endIndex is greater than length of String.|||']"
61,['Java String Class Methods'],"['The java.lang.String class provides a lot of built-in methods that are used to manipulate string in Java. By the help of these methods, we can perform operations on String objects such as trimming, concatenating, converting, comparing, replacing strings etc.']","['https://www.javatpoint.com/StringBuffer-class', 'https://www.javatpoint.com/substring', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testmethodofstringclass', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testmethodofstringclass1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testmethodofstringclass2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testmethodofstringclass3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testmethodofstringclass4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testmethodofstringclass5', 'https://www.javatpoint.com/StringBuffer-class', 'https://www.javatpoint.com/substring', 'https://www.javatpoint.com/StringBuffer-class']",[],[],[],"['Java String toUpperCase() and toLowerCase() method', 'Java String trim() method', 'Java String startsWith() and endsWith() method', 'Java String charAt() Method', 'Java String length() Method', 'Java String intern() Method', 'Java String valueOf() Method', 'Java String replace() Method']",[],"['Java String is a powerful concept because everything is treated as a String if you submit any form in window based, web based or mobile application.', ""Let's use some important methods of String class."", 'The Java String toUpperCase() method converts this String into uppercase letter and String toLowerCase() method into lowercase letter.', 'Stringoperation1.java', 'The String class trim() method eliminates white spaces before and after the String.', 'Stringoperation2.java', 'Stringoperation3.java', 'The String class charAt() method returns a character at specified index.', 'Stringoperation4.java', 'The String class length() method returns length of the specified String.', 'Stringoperation5.java', 'A pool of strings, initially empty, is maintained privately by the class String.', 'Stringoperation6.java', 'The String class valueOf() method coverts given type such as int, long, float, double, boolean, char and char array into String.', 'Stringoperation7.java', 'The String class replace() method replaces all occurrence of first sequence of character with second sequence of character.', 'Stringoperation8.java']",['The method startsWith() checks whether the String starts with the letters passed as arguments and endsWith() method checks whether the String ends with the letters passed as arguments.'],"['When the intern method is invoked, if the pool already contains a String equal to this String object as determined by the equals(Object) method, then the String from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.']","['public class Stringoperation1', 'public static void main(String ar[])', 'String s=""Sachin"";', 'System.out.println(s.toUpperCase());//SACHIN', 'System.out.println(s.toLowerCase());//sachin', 'System.out.println(s);//Sachin(no change in original)', 'public class Stringoperation2', 'public static void main(String ar[])', 'String s=""  Sachin  "";', 'System.out.println(s);//  Sachin', 'System.out.println(s.trim());//Sachin', 'public class Stringoperation3', 'public static void main(String ar[])', 'String s=""Sachin"";', 'System.out.println(s.startsWith(""Sa""));//true', 'System.out.println(s.endsWith(""n""));//true', 'public class Stringoperation4', 'public static void main(String ar[])', 'String s=""Sachin"";', 'System.out.println(s.charAt(0));//S', 'System.out.println(s.charAt(3));//h', 'public class Stringoperation5', 'public static void main(String ar[])', 'String s=""Sachin"";', 'System.out.println(s.length());//6', 'public class Stringoperation6', 'public static void main(String ar[])', 'String s=new String(""Sachin"");', 'String s2=s.intern();', 'System.out.println(s2);//Sachin', 'public class Stringoperation7', 'public static void main(String ar[])', 'int a=10;', 'String s=String.valueOf(a);', 'System.out.println(s+10);', 'public class Stringoperation8', 'public static void main(String ar[])', 'String s1=""Java is a programming language. Java is a platform. Java is an Island."";', 'String replaceString=s1.replace(""Java"",""Kava"");//replaces all occurrences of ""Java"" to ""Kava""', 'System.out.println(replaceString);']","['SACHIN', 'sachin', 'Sachin', 'Sachin', 'Sachin', 'true', 'true', 'S', 'h', '6', 'Sachin', '1010', 'Kava is a programming language. Kava is a platform. Kava is an Island.']",[],[]
62,['Java StringBuffer Class'],['Java StringBuffer class is used to create mutable (modifiable) String objects. The StringBuffer class in Java is the same as String class except it is mutable i.e. it can be changed.'],"['https://www.javatpoint.com/StringBuilder-class', 'https://www.javatpoint.com/methods-of-string-class', 'https://www.javatpoint.com/StringBuilder-class', 'https://www.javatpoint.com/methods-of-string-class', 'https://www.javatpoint.com/StringBuilder-class']",[],[],[],"['Important Constructors of StringBuffer Class', 'Important methods of StringBuffer class', 'What is a mutable String?', '1) StringBuffer Class append() Method', '2) StringBuffer insert() Method', '3) StringBuffer replace() Method', '4) StringBuffer delete() Method', '5) StringBuffer reverse() Method', '6) StringBuffer capacity() Method', '7) StringBuffer ensureCapacity() method']",['Note: Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order.'],"['A String that can be modified or changed is known as mutable String. StringBuffer and StringBuilder classes are used for creating mutable strings.', 'The append() method concatenates the given argument with this String.', 'StringBufferExample.java', 'The insert() method inserts the given String with this string at the given position.', 'StringBufferExample2.java', 'The replace() method replaces the given String from the specified beginIndex and endIndex.', 'StringBufferExample3.java', 'The delete() method of the StringBuffer class deletes the String from the specified beginIndex to endIndex.', 'StringBufferExample4.java', 'The reverse() method of the StringBuilder class reverses the current String.', 'StringBufferExample5.java', 'StringBufferExample6.java', 'StringBufferExample7.java']",[],"['The capacity() method of the StringBuffer class returns the current capacity of the buffer. The default capacity of the buffer is 16. If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.', 'The ensureCapacity() method of the StringBuffer class ensures that the given capacity is the minimum to the current capacity. If it is greater than the current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.']","['class StringBufferExample{', 'public static void main(String args[]){', 'StringBuffer sb=new StringBuffer(""Hello "");', 'sb.append(""Java"");//now original string is changed', 'System.out.println(sb);//prints Hello Java', 'class StringBufferExample2{', 'public static void main(String args[]){', 'StringBuffer sb=new StringBuffer(""Hello "");', 'sb.insert(1,""Java"");//now original string is changed', 'System.out.println(sb);//prints HJavaello', 'class StringBufferExample3{', 'public static void main(String args[]){', 'StringBuffer sb=new StringBuffer(""Hello"");', 'sb.replace(1,3,""Java"");', 'System.out.println(sb);//prints HJavalo', 'class StringBufferExample4{', 'public static void main(String args[]){', 'StringBuffer sb=new StringBuffer(""Hello"");', 'sb.delete(1,3);', 'System.out.println(sb);//prints Hlo', 'class StringBufferExample5{', 'public static void main(String args[]){', 'StringBuffer sb=new StringBuffer(""Hello"");', 'sb.reverse();', 'System.out.println(sb);//prints olleH', 'class StringBufferExample6{', 'public static void main(String args[]){', 'StringBuffer sb=new StringBuffer();', 'System.out.println(sb.capacity());//default 16', 'sb.append(""Hello"");', 'System.out.println(sb.capacity());//now 16', 'sb.append(""java is my favourite language"");', 'System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2', 'class StringBufferExample7{', 'public static void main(String args[]){', 'StringBuffer sb=new StringBuffer();', 'System.out.println(sb.capacity());//default 16', 'sb.append(""Hello"");', 'System.out.println(sb.capacity());//now 16', 'sb.append(""java is my favourite language"");', 'System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2', 'sb.ensureCapacity(10);//now no change', 'System.out.println(sb.capacity());//now 34', 'sb.ensureCapacity(50);//now (34*2)+2', 'System.out.println(sb.capacity());//now 70']","['Hello Java', 'HJavaello', 'HJavalo', 'Hlo', 'olleH', '16', '16', '34', '16', '16', '34', '34', '70']","['onstructorDescriptio&&&tringBuffer() It creates an empty String buffer with the initial capacity of 16&&&tringBuffer(String str) It creates a String buffer with the specified string.&&&tringBuffer(int capacity) It creates an empty String buffer with the specified capacity as length', 'odifier and TypeMethodDescriptio&&&ublic synchronized StringBufferappend(String s) It is used to append the specified string with this string. The append() method is overloaded like append(char), append(boolean), append(int), append(float), append(double) etc&&&ublic synchronized StringBuffer insert(int offset, String s) It is used to insert the specified string with this string at the specified position. The insert() method is overloaded like insert(int, char), insert(int, boolean), insert(int, int), insert(int, float), insert(int, double) etc&&&ublic synchronized StringBuffer replace(int startIndex, int endIndex, String str) It is used to replace the string from specified startIndex and endIndex&&&ublic synchronized StringBuffer delete(int startIndex, int endIndex) It is used to delete the string from specified startIndex and endIndex&&&ublic synchronized StringBuffer reverse() is used to reverse the string&&&ublic int capacity() It is used to return the current capacity&&&ublic void ensureCapacity(int minimumCapacity) It is used to ensure the capacity at least equal to the given minimum&&&ublic char charAt(int index) It is used to return the character at the specified position&&&ublic int length() It is used to return the length of the string i.e. total number of characters&&&ublic String substring(int beginIndex) It is used to return the substring from the specified beginIndex&&&ublic String substring(int beginIndex, int endIndex) It is used to return the substring from the specified beginIndex and endIndex']",[]
63,['Java StringBuilder Class'],['Java StringBuilder class is used to create mutable (modifiable) String. The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. It is available since JDK 1.5.'],"['https://www.javatpoint.com/difference-between-string-and-stringbuffer', 'https://www.javatpoint.com/StringBuffer-class', 'https://www.javatpoint.com/difference-between-string-and-stringbuffer', 'https://www.javatpoint.com/StringBuffer-class', 'https://www.javatpoint.com/difference-between-string-and-stringbuffer']",[],[],"['Important Constructors of StringBuilder class', 'Important methods of StringBuilder class', 'Java StringBuilder Examples']","['1) StringBuilder append() method', '2) StringBuilder insert() method', '3) StringBuilder replace() method', '4) StringBuilder delete() method', '5) StringBuilder reverse() method', '6) StringBuilder capacity() method', '7) StringBuilder ensureCapacity() method']",[],"[""Let's see the examples of different methods of StringBuilder class."", 'The StringBuilder append() method concatenates the given argument with this String.', 'StringBuilderExample.java', 'The StringBuilder insert() method inserts the given string with this string at the given position.', 'StringBuilderExample2.java', 'The StringBuilder replace() method replaces the given string from the specified beginIndex and endIndex.', 'StringBuilderExample3.java', 'The delete() method of StringBuilder class deletes the string from the specified beginIndex to endIndex.', 'StringBuilderExample4.java', 'The reverse() method of StringBuilder class reverses the current string.', 'StringBuilderExample5.java', 'StringBuilderExample6.java', 'StringBuilderExample7.java']",[],"['The capacity() method of StringBuilder class returns the current capacity of the Builder. The default capacity of the Builder is 16. If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.\n', 'The ensureCapacity() method of StringBuilder class ensures that the given capacity is the minimum to the current capacity. If it is greater than the current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.\n']","['class StringBuilderExample{', 'public static void main(String args[]){', 'StringBuilder sb=new StringBuilder(""Hello "");', 'sb.append(""Java"");//now original string is changed', 'System.out.println(sb);//prints Hello Java', 'class StringBuilderExample2{', 'public static void main(String args[]){', 'StringBuilder sb=new StringBuilder(""Hello "");', 'sb.insert(1,""Java"");//now original string is changed', 'System.out.println(sb);//prints HJavaello', 'class StringBuilderExample3{', 'public static void main(String args[]){', 'StringBuilder sb=new StringBuilder(""Hello"");', 'sb.replace(1,3,""Java"");', 'System.out.println(sb);//prints HJavalo', 'class StringBuilderExample4{', 'public static void main(String args[]){', 'StringBuilder sb=new StringBuilder(""Hello"");', 'sb.delete(1,3);', 'System.out.println(sb);//prints Hlo', 'class StringBuilderExample5{', 'public static void main(String args[]){', 'StringBuilder sb=new StringBuilder(""Hello"");', 'sb.reverse();', 'System.out.println(sb);//prints olleH', 'class StringBuilderExample6{', 'public static void main(String args[]){', 'StringBuilder sb=new StringBuilder();', 'System.out.println(sb.capacity());//default 16', 'sb.append(""Hello"");', 'System.out.println(sb.capacity());//now 16', 'sb.append(""Java is my favourite language"");', 'System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2', 'class StringBuilderExample7{', 'public static void main(String args[]){', 'StringBuilder sb=new StringBuilder();', 'System.out.println(sb.capacity());//default 16', 'sb.append(""Hello"");', 'System.out.println(sb.capacity());//now 16', 'sb.append(""Java is my favourite language"");', 'System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2', 'sb.ensureCapacity(10);//now no change', 'System.out.println(sb.capacity());//now 34', 'sb.ensureCapacity(50);//now (34*2)+2', 'System.out.println(sb.capacity());//now 70']","['Hello Java', 'HJavaello', 'HJavalo', 'Hlo', 'olleH', '16', '16', '34', '16', '16', '34', '34', '70']","['onstructorDescriptio&&&tringBuilder() It creates an empty String Builder with the initial capacity of 16&&&tringBuilder(String str) It creates a String Builder with the specified string&&&tringBuilder(int length) It creates an empty String Builder with the specified capacity as length', 'ethodDescriptio&&&ublic StringBuilder append(String s) It is used to append the specified string with this string. The append() method is overloaded like append(char), append(boolean), append(int), append(float), append(double) etc&&&ublic StringBuilder insert(int offset, String s) It is used to insert the specified string with this string at the specified position. The insert() method is overloaded like insert(int, char), insert(int, boolean), insert(int, int), insert(int, float), insert(int, double) etc&&&ublic StringBuilder replace(int startIndex, int endIndex, String str) It is used to replace the string from specified startIndex and endIndex&&&ublic StringBuilder delete(int startIndex, int endIndex) It is used to delete the string from specified startIndex and endIndex&&&ublic StringBuilder reverse() It is used to reverse the string&&&ublic int capacity() It is used to return the current capacity&&&ublic void ensureCapacity(int minimumCapacity) It is used to ensure the capacity at least equal to the given minimum&&&ublic char charAt(int index) It is used to return the character at the specified position&&&ublic int length() It is used to return the length of the string i.e. total number of characters&&&ublic String substring(int beginIndex) It is used to return the substring from the specified beginIndex&&&ublic String substring(int beginIndex, int endIndex) It is used to return the substring from the specified beginIndex and endIndex']",[]
64,['Difference between String and StringBuffer'],['There are many differences between String and StringBuffer. A list of differences between String and StringBuffer are given below:'],"['https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder', 'https://www.javatpoint.com/StringBuilder-class', 'https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder', 'https://www.javatpoint.com/StringBuilder-class', 'https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder']",['https://static.javatpoint.com/images/string-vs-stringbuffer.png'],[],"['Performance Test of String and StringBuffer', 'String and StringBuffer HashCode Test']",[],[],"['ConcatTest.java', 'The above code, calculates the time required for concatenating a string using the String class and StringBuffer class.', 'InstanceTest.java']","['As we can see in the program given below, String returns new hashcode while performing concatenation but the StringBuffer class returns same hashcode.']",[],"['public class ConcatTest{', 'public static String concatWithString()    {', 'String t = ""Java"";', 'for (int i=0; i<10000; i++){', 't = t + ""Tpoint"";', '}', 'return t;', 'public static String concatWithStringBuffer(){', 'StringBuffer sb = new StringBuffer(""Java"");', 'for (int i=0; i<10000; i++){', 'sb.append(""Tpoint"");', '}', 'return sb.toString();', 'public static void main(String[] args){', 'long startTime = System.currentTimeMillis();', 'concatWithString();', 'System.out.println(""Time taken by Concating with String: ""+(System.currentTimeMillis()-startTime)+""ms"");', 'startTime = System.currentTimeMillis();', 'concatWithStringBuffer();', 'System.out.println(""Time taken by Concating with  StringBuffer: ""+(System.currentTimeMillis()-startTime)+""ms"");', 'public class InstanceTest{', 'public static void main(String args[]){', 'System.out.println(""Hashcode test of String:"");', 'String str=""java"";', 'System.out.println(str.hashCode());', 'str=str+""tpoint"";', 'System.out.println(str.hashCode());', 'System.out.println(""Hashcode test of StringBuffer:"");', 'StringBuffer sb=new StringBuffer(""java"");', 'System.out.println(sb.hashCode());', 'sb.append(""tpoint"");', 'System.out.println(sb.hashCode());']","['Time taken by Concating with String: 578ms', 'Time taken by Concating with  StringBuffer: 0ms', 'Hashcode test of String:', '3254818', '229541438', 'Hashcode test of StringBuffer:', '118352462', '118352462']","[""o.StringStringBuffe&&&1)|||The String class is immutable.|||The StringBuffer class is mutable.&&&2)|||String is slow and consumes more memory when we concatenate too many strings because every time it creates new instance.|||StringBuffer is fast and consumes less memory when we concatenate t strings.&&&3)|||String class overrides the equals() method of Object class. So you can compare the contents of two strings by equals() method.|||StringBuffer class doesn't override the equals() method of Object class.&&&4)|||String class is slower while performing concatenation operation.|||StringBuffer class is faster while performing concatenation operation.&&&5)|||String class uses String constant pool.|||StringBuffer uses Heap memory""]",[]
65,['Difference between StringBuffer and StringBuilder'],"['Java provides three classes to represent a sequence of characters: String, StringBuffer, and StringBuilder. The String class is an immutable class whereas StringBuffer and StringBuilder classes are mutable. There are many differences between StringBuffer and StringBuilder. The StringBuilder class is introduced since JDK 1.5.']","['https://www.javatpoint.com/how-to-create-immutable-class', 'https://www.javatpoint.com/difference-between-string-and-stringbuffer', 'https://www.javatpoint.com/how-to-create-immutable-class', 'https://www.javatpoint.com/difference-between-string-and-stringbuffer', 'https://www.javatpoint.com/how-to-create-immutable-class']",['https://static.javatpoint.com/core/images/stringbuffer-vs-stringbuilder.png'],[],"['StringBuffer Example', 'StringBuilder Example', 'Performance Test of StringBuffer and StringBuilder']",[],[],"['A list of differences between StringBuffer and StringBuilder is given below:', 'BuilderTest.java', ""Let's see the code to check the performance of StringBuffer and StringBuilder classes."", 'ConcatTest.java']",[],"['BufferTest.java\n\r\n//Java Program to demonstrate the use of StringBuffer class.\r\npublic class BufferTest{\r\n    public static void main(String[] args){\r\n        StringBuffer buffer=new StringBuffer(""hello"");\r\n        buffer.append(""java"");\r\n        System.out.println(buffer);\r\n    }\r\n}\r\n\nOutput:\nhellojava\r\n\nStringBuilder Example\nBuilderTest.java\n\r\n//Java Program to demonstrate the use of StringBuilder class.\r\npublic class BuilderTest{\r\n    public static void main(String[] args){\r\n        StringBuilder builder=new StringBuilder(""hello"");\r\n        builder.append(""java"");\r\n        System.out.println(builder);\r\n    }\r\n}\r\n\nOutput:\nhellojava\r\n\nPerformance Test of StringBuffer and StringBuilder\nLet\'s see the code to check the performance of StringBuffer and StringBuilder classes.\nConcatTest.java\n\r\n//Java Program to demonstrate the performance of StringBuffer and StringBuilder classes.\r\npublic class ConcatTest{\r\n    public static void main(String[] args){\r\n        long startTime = System.currentTimeMillis();\r\n        StringBuffer sb = new StringBuffer(""Java"");\r\n        for (int i=0; i<10000; i++){\r\n            sb.append(""Tpoint"");\r\n        }\r\n        System.out.println(""Time taken by StringBuffer: "" + (System.currentTimeMillis() - startTime) + ""ms"");\r\n        startTime = System.currentTimeMillis();\r\n        StringBuilder sb2 = new StringBuilder(""Java"");\r\n        for (int i=0; i<10000; i++){\r\n            sb2.append(""Tpoint"");\r\n        }\r\n        System.out.println(""Time taken by StringBuilder: "" + (System.currentTimeMillis() - startTime) + ""ms"");\r\n    }\r\n}\r\n\nOutput:\nTime taken by StringBuffer: 16ms\r\nTime taken by StringBuilder: 0ms\r\n\n\n\nNext TopicHow to create immutable class\n\n\n\n← prev\nnext →\n\n\n', '\n\r\n//Java Program to demonstrate the use of StringBuffer class.\r\npublic class BufferTest{\r\n    public static void main(String[] args){\r\n        StringBuffer buffer=new StringBuffer(""hello"");\r\n        buffer.append(""java"");\r\n        System.out.println(buffer);\r\n    }\r\n}\r\n\nOutput:\nhellojava\r\n\nStringBuilder Example\nBuilderTest.java\n\r\n//Java Program to demonstrate the use of StringBuilder class.\r\npublic class BuilderTest{\r\n    public static void main(String[] args){\r\n        StringBuilder builder=new StringBuilder(""hello"");\r\n        builder.append(""java"");\r\n        System.out.println(builder);\r\n    }\r\n}\r\n\nOutput:\nhellojava\r\n\nPerformance Test of StringBuffer and StringBuilder\nLet\'s see the code to check the performance of StringBuffer and StringBuilder classes.\nConcatTest.java\n\r\n//Java Program to demonstrate the performance of StringBuffer and StringBuilder classes.\r\npublic class ConcatTest{\r\n    public static void main(String[] args){\r\n        long startTime = System.currentTimeMillis();\r\n        StringBuffer sb = new StringBuffer(""Java"");\r\n        for (int i=0; i<10000; i++){\r\n            sb.append(""Tpoint"");\r\n        }\r\n        System.out.println(""Time taken by StringBuffer: "" + (System.currentTimeMillis() - startTime) + ""ms"");\r\n        startTime = System.currentTimeMillis();\r\n        StringBuilder sb2 = new StringBuilder(""Java"");\r\n        for (int i=0; i<10000; i++){\r\n            sb2.append(""Tpoint"");\r\n        }\r\n        System.out.println(""Time taken by StringBuilder: "" + (System.currentTimeMillis() - startTime) + ""ms"");\r\n    }\r\n}\r\n\nOutput:\nTime taken by StringBuffer: 16ms\r\nTime taken by StringBuilder: 0ms\r\n\n\n\nNext TopicHow to create immutable class\n\n\n\n← prev\nnext →\n\n\n']","['public class BufferTest{', 'public static void main(String[] args){', 'StringBuffer buffer=new StringBuffer(""hello"");', 'buffer.append(""java"");', 'System.out.println(buffer);', 'public class BuilderTest{', 'public static void main(String[] args){', 'StringBuilder builder=new StringBuilder(""hello"");', 'builder.append(""java"");', 'System.out.println(builder);', 'public class ConcatTest{', 'public static void main(String[] args){', 'long startTime = System.currentTimeMillis();', 'StringBuffer sb = new StringBuffer(""Java"");', 'for (int i=0; i<10000; i++){', 'sb.append(""Tpoint"");', '}', 'System.out.println(""Time taken by StringBuffer: "" + (System.currentTimeMillis() - startTime) + ""ms"");', 'startTime = System.currentTimeMillis();', 'StringBuilder sb2 = new StringBuilder(""Java"");', 'for (int i=0; i<10000; i++){', 'sb2.append(""Tpoint"");', '}', 'System.out.println(""Time taken by StringBuilder: "" + (System.currentTimeMillis() - startTime) + ""ms"");']","['hellojava', 'hellojava', 'Time taken by StringBuffer: 16ms', 'Time taken by StringBuilder: 0ms']","[""o.StringBufferStringBuilde&&&)StringBuffer is synchronized i.e. thread safe. It means two threads can't call the methods of StringBuffer simultaneously.StringBuilder is non-synchronized i.e. not thread safe. It means two threads can call the methods of StringBuilder simultaneously&&&)StringBuffer is less efficient than StringBuilder.StringBuilder is more efficient than StringBuffer&&&3)StringBuffer was introduced in Java 1.0StringBuilder was introduced in Java 1.""]",[]
66,['How to create Immutable class?'],"['There are many immutable classes like String, Boolean, Byte, Short, Integer, Long, Float, Double etc. In short, all the wrapper classes and String class is immutable. We can also create immutable class by creating final class that have final data members as the example given below:']","['https://www.javatpoint.com/understanding-toString()-method', 'https://www.javatpoint.com/StringBuilder-class', 'https://www.javatpoint.com/understanding-toString()-method', 'https://www.javatpoint.com/StringBuilder-class', 'https://www.javatpoint.com/understanding-toString()-method']",[],[],[],['Example to create Immutable class'],[],"['In this example, we have created a final class named Employee. It have one final datamember, a parameterized constructor and getter method.', 'ImmutableDemo.java', 'The above class is immutable because:', 'These points makes this class as immutable.']",[],[],"['public final class Employee', 'final String pancardNumber;', 'public Employee(String pancardNumber)', 'this.pancardNumber=pancardNumber;', 'public String getPancardNumber(){', 'return pancardNumber;', 'public class ImmutableDemo', 'public static void main(String ar[])', 'Employee e = new Employee(""ABC123"");', 'String s1 = e.getPancardNumber();', 'System.out.println(""Pancard Number: "" + s1);']",['Pancard Number: ABC123'],[],['|||The instance variable of the class is final i.e. we cannot change the value of it after creating an object.|||The class is final so we cannot create the subclass.|||There is no setter methods i.e. we have no option to change the value of the instance variable.|||']
67,['Java toString() Method'],"['If you want to represent any object as a string, toString() method comes into existence.']","['https://www.javatpoint.com/string-tokenizer-in-java', 'https://www.javatpoint.com/how-to-create-immutable-class', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/string-tokenizer-in-java', 'https://www.javatpoint.com/how-to-create-immutable-class', 'https://www.javatpoint.com/string-tokenizer-in-java']",[],[],"['Example of Java toString() method\nLet\'s see an example of toString() method.\nStudent.java\n\r\nclass Student{\r\n int rollno;\r\n String name;\r\n String city;\r\n\r\n Student(int rollno, String name, String city){\r\n this.rollno=rollno;\r\n this.name=name;\r\n this.city=city;\r\n }\r\n \r\n public String toString(){//overriding the toString() method\r\n  return rollno+"" ""+name+"" ""+city;\r\n }\r\n public static void main(String args[]){\r\n   Student s1=new Student(101,""Raj"",""lucknow"");\r\n   Student s2=new Student(102,""Vijay"",""ghaziabad"");\r\n   \r\n   System.out.println(s1);//compiler writes here s1.toString()\r\n   System.out.println(s2);//compiler writes here s2.toString()\r\n }\r\n}\r\n\r\n\nOutput:\n101 Raj lucknow\r\n102 Vijay ghaziabad\r\n\nIn the above program, Java compiler internally calls toString() method, overriding this method will return the specified values of s1 and s2 objects of Student class.\n\n\nNext TopicStringTokenizer in java\n\n\n\n← prev\nnext →\n\n\n']","['Advantage of Java toString() method', 'Understanding problem without toString() method']",[],"['The toString() method returns the String representation of the object.', ""By overriding the toString() method of the Object class, we can return values of the object, so we don't need to write much code."", ""Let's see the simple code that prints reference."", 'Student.java', ""Let's see an example of toString() method."", 'Student.java']","['If you print any object, Java compiler internally invokes the toString() method on the object. So overriding the toString() method, returns the desired output, it can be the state of an object etc. depending on your implementation.', 'In the above program, Java compiler internally calls toString() method, overriding this method will return the specified values of s1 and s2 objects of Student class.']","[""As you can see in the above example, printing s1 and s2 prints the hashcode values of the objects but I want to print the values of these objects. Since Java compiler internally calls toString() method, overriding this method will return the specified values. Let's understand it with the example given below:""]","['class Student{', 'int rollno;', 'String name;', 'String city;', 'Student(int rollno, String name, String city){', 'this.rollno=rollno;', 'this.name=name;', 'this.city=city;', 'public static void main(String args[]){', 'Student s1=new Student(101,""Raj"",""lucknow"");', 'Student s2=new Student(102,""Vijay"",""ghaziabad"");', 'System.out.println(s1);//compiler writes here s1.toString()', 'System.out.println(s2);//compiler writes here s2.toString()', 'class Student{', 'int rollno;', 'String name;', 'String city;', 'Student(int rollno, String name, String city){', 'this.rollno=rollno;', 'this.name=name;', 'this.city=city;', 'public String toString(){//overriding the toString() method', 'return rollno+"" ""+name+"" ""+city;', 'public static void main(String args[]){', 'Student s1=new Student(101,""Raj"",""lucknow"");', 'Student s2=new Student(102,""Vijay"",""ghaziabad"");', 'System.out.println(s1);//compiler writes here s1.toString()', 'System.out.println(s2);//compiler writes here s2.toString()']","['[email\xa0protected]', '[email\xa0protected]', '101 Raj lucknow', '102 Vijay ghaziabad']",[],[]
68,['StringTokenizer in Java'],['The java.util.StringTokenizer class allows you to break a String into tokens. It is simple way to break a String. It is a legacy class of Java.'],"['https://www.javatpoint.com/java-string-faqs', 'https://www.javatpoint.com/understanding-toString()-method', 'https://www.javatpoint.com/#StringTokenizer', 'https://www.javatpoint.com/#Methods', 'https://www.javatpoint.com/#Example', 'https://www.javatpoint.com/java-string-faqs', 'https://www.javatpoint.com/understanding-toString()-method', 'https://www.javatpoint.com/java-string-faqs']","['https://static.javatpoint.com/core/images/string-tokenizer-in-java.png', 'https://static.javatpoint.com/core/images/string-tokenizer-in-java2.png']",[],[],"['Constructors of the StringTokenizer Class', 'Methods of the StringTokenizer Class', 'Example of StringTokenizer Class', 'Example of nextToken(String delim) method of the StringTokenizer class', 'Example of hasMoreTokens() method of the StringTokenizer class', 'Example of hasMoreElements() method of the StringTokenizer class', 'Example of nextElement() method of the StringTokenizer class', 'Example of countTokens() method of the StringTokenizer class']",['Note: The StringTokenizer class is deprecated now. It is recommended to use the split() method of the String class or the Pattern class that belongs to the java.util.regex package.'],"['In the StringTokenizer class, the delimiters can be provided at the time of creation or one by one to the tokens.', 'There are 3 constructors defined in the StringTokenizer class.', 'The six useful methods of the StringTokenizer class are as follows:', 'Let\'s see an example of the StringTokenizer class that tokenizes a string ""my name is khan"" on the basis of whitespace.', 'Simple.java', 'The above Java code, demonstrates the use of StringTokenizer class and its methods hasMoreTokens() and nextToken().', 'This method returns true if more tokens are available in the tokenizer String otherwise returns false.', 'StringTokenizer1.java', 'The above Java program shows the use of two methods hasMoreTokens() and nextToken() of StringTokenizer class.', 'StringTokenizer2.java', 'The above code demonstrates the use of hasMoreElements() method.', 'nextElement() returns the next token object in the tokenizer String. It can implement Enumeration interface.', 'StringTokenizer3.java', 'The above code demonstrates the use of nextElement() method.', 'This method calculates the number of tokens present in the tokenizer String.', 'StringTokenizer4.java', 'The above Java code demonstrates the countTokens() method of StringTokenizer() class.']","[""It doesn't provide the facility to differentiate numbers, quoted strings, identifiers etc. like StreamTokenizer class. We will discuss about the StreamTokenizer class in I/O chapter."", 'This method returns the same value as hasMoreTokens() method of StringTokenizer class. The only difference is this class can implement the Enumeration interface.']",[],"['import java.util.StringTokenizer;', 'public class Simple{', 'public static void main(String args[]){', 'StringTokenizer st = new StringTokenizer(""my name is khan"","" "");', 'while (st.hasMoreTokens()) {', 'System.out.println(st.nextToken());', 'import java.util.*;', 'public class Test {', 'public static void main(String[] args) {', 'StringTokenizer st = new StringTokenizer(""my,name,is,khan"");', 'System.out.println(""Next token is : "" + st.nextToken("",""));', '}', 'import java.util.StringTokenizer;', 'public class StringTokenizer1', '/* Driver Code */', 'public static void main(String args[])', '/* StringTokenizer object */', 'StringTokenizer st = new StringTokenizer(""Demonstrating methods from StringTokenizer class"","" "");', '/* Checks if the String has any more tokens */', 'while (st.hasMoreTokens())', '{', 'System.out.println(st.nextToken());', '}', 'import java.util.StringTokenizer;', 'public class StringTokenizer2', 'public static void main(String args[])', 'StringTokenizer st = new StringTokenizer(""Hello everyone I am a Java developer"","" "");', 'while (st.hasMoreElements())', '{', 'System.out.println(st.nextToken());', '}', 'import java.util.StringTokenizer;', 'public class StringTokenizer3', '/* Driver Code */', 'public static void main(String args[])', '/* StringTokenizer object */', 'StringTokenizer st = new StringTokenizer(""Hello Everyone Have a nice day"","" "");', '/* Checks if the String has any more tokens */', 'while (st.hasMoreTokens())', '{', '/* Prints the elements from the String */', 'System.out.println(st.nextElement());', '}', 'import java.util.StringTokenizer;', 'public class StringTokenizer3', '/* Driver Code */', 'public static void main(String args[])', '/* StringTokenizer object */', 'StringTokenizer st = new StringTokenizer(""Hello Everyone Have a nice day"","" "");', '/* Prints the number of tokens present in the String */', 'System.out.println(""Total number of Tokens: ""+st.countTokens());']","['my', 'name', 'is', 'khan', 'Next token is : my', 'Demonstrating', 'methods', 'from', 'StringTokenizer', 'class', 'Hello', 'everyone', 'I', 'am', 'a', 'Java', 'developer', 'Hello', 'Everyone', 'Have', 'a', 'nice', 'day', 'Total number of Tokens: 6']","['onstructorDescriptio&&&tringTokenizer(String str)It creates StringTokenizer with specified string&&&tringTokenizer(String str, String delim)It creates StringTokenizer with specified string and delimiter&&&tringTokenizer(String str, String delim, boolean returnValue)It creates StringTokenizer with specified string, delimiter and returnValue. If return value is true, delimiter characters are considered to be tokens. If it is false, delimiter characters serve to separate tokens', 'ethodsDescriptio&&&oolean hasMoreTokens()It checks if there is more tokens available&&&tring nextToken()It returns the next token from the StringTokenizer object&&&tring nextToken(String delim)It returns the next token based on the delimiter&&&oolean hasMoreElements()It is the same as hasMoreTokens() method&&&bject nextElement()It is the same as nextToken() but its return type is Object&&&nt countTokens()It returns the total number of tokens']",['|||StringTokenizer|||Methods of StringTokenizer|||Example of StringTokenizer|||']
69,['Java String charAt()'],['The Java String class charAt() method returns a char value at the given index number.'],"['https://www.javatpoint.com/java-string-compareto', 'https://www.javatpoint.com/java-string', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=CharAtExample', 'https://www.javatpoint.com/java-string-compareto', 'https://www.javatpoint.com/java-string', 'https://www.javatpoint.com/java-string-compareto']",[],[],['Java String charAt() Method Examples'],"['Syntax', 'Internal implementation', 'Accessing First and Last Character by Using the charAt() Method', 'Print Characters Presented at Odd Positions by Using the charAt() Method', 'Counting Frequency of a character in a String by Using the charAt() Method', 'Counting the Number of Vowels in a String by Using the chatAt() Method']",[],"['Specified by', 'CharSequence interface, located inside java.lang package.', ""Let's see Java program related to string in which we will use charAt() method that perform some operation on the give string."", 'FileName: CharAtExample.java', 'FileName: CharAtExample.java', ""Let's see a simple example where we are accessing first and last character from the provided string."", 'FileName: CharAtExample3.java', ""Let's see an example where we are accessing all the elements present at odd index."", 'FileName: CharAtExample4.java', 'The position such as 7 and 21 denotes the space.', ""Let's see an example in which we are counting frequency of a character in the given string."", 'FileName: CharAtExample5.java', ""Let's see an example where we are counting the number of vowels present in a string with the help of the charAt() method."", 'FileName: CharAtExample6.java']","['The index number starts from 0 and goes to n-1, where n is the length of the string. It returns StringIndexOutOfBoundsException, if the given index number is greater than or equal to this string length or a negative number.', 'The method accepts index as a parameter. The starting index is 0. It returns a character at a specific index position in a string. It throws StringIndexOutOfBoundsException if the index is a negative value or greater than this string length.', ""Let's see the example of the charAt() method where we are passing a greater index value. In such a case, it throws StringIndexOutOfBoundsException at run time.""]",[],"['public char charAt(int index)', 'public char charAt(int index) {', 'if ((index < 0) || (index >= value.length)) {', 'throw new StringIndexOutOfBoundsException(index);', '}', 'return value[index];', 'public class CharAtExample{', 'public static void main(String args[]){', 'String name=""javatpoint"";', 'char ch=name.charAt(4);//returns the char value at the 4th index', 'System.out.println(ch);', 'public class CharAtExample{', 'public static void main(String args[]){', 'String name=""javatpoint"";', 'char ch=name.charAt(10);//returns the char value at the 10th index', 'System.out.println(ch);', 'public class CharAtExample3 {', 'public static void main(String[] args) {', 'String str = ""Welcome to Javatpoint portal"";', 'int strLength = str.length();', 'System.out.println(""Character at 0 index is: ""+ str.charAt(0));', 'System.out.println(""Character at last index is: ""+ str.charAt(strLength-1));', 'public class CharAtExample4 {', 'public static void main(String[] args) {', 'String str = ""Welcome to Javatpoint portal"";', 'for (int i=0; i<=str.length()-1; i++) {', 'if(i%2!=0) {', 'System.out.println(""Char at ""+i+"" place ""+str.charAt(i));', 'public class CharAtExample5 {', 'public static void main(String[] args) {', 'String str = ""Welcome to Javatpoint portal"";', 'int count = 0;', 'for (int i=0; i<=str.length()-1; i++) {', ""if(str.charAt(i) == 't') {"", 'count++;', 'System.out.println(""Frequency of t is: ""+count);', 'import java.util.*;', 'public class CharAtExample6', 'ArrayList al;', 'CharAtExample6()', 'al = new ArrayList();', ""al.add('A'); al.add('E');"", ""al.add('a'); al.add('e');"", ""al.add('I'); al.add('O');"", ""al.add('i'); al.add('o');"", ""al.add('U'); al.add('u');"", 'private boolean isVowel(char c)', 'for(int i = 0; i < al.size(); i++)', 'if(c == al.get(i))', 'return true;', 'return false;', 'public int countVowels(String s)', 'int countVowel = 0; // store total number of vowels', 'int size = s.length(); // size of string', 'for(int j = 0; j < size; j++)', 'char c = s.charAt(j);', 'if(isVowel(c))', 'countVowel = countVowel + 1;', 'return countVowel;', 'public static void main(String argvs[])', 'CharAtExample6 obj = new CharAtExample6();', 'String str = ""Javatpoint is a great site for learning Java."";', 'int noOfVowel = obj.countVowels(str);', 'System.out.println(""String: "" + str);', 'System.out.println(""Total number of vowels in the string are: ""+ noOfVowel + ""\\n"");', 'str = ""One apple in a day keeps doctor away."";', 'System.out.println(""String: "" + str);', 'noOfVowel = obj.countVowels(str);', 'System.out.println(""Total number of vowels in the string are: ""+ noOfVowel);']","['t', 'Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException:', 'String index out of range: 10', 'at java.lang.String.charAt(String.java:658)', 'at CharAtExample.main(CharAtExample.java:4)', 'Character at 0 index is: W', 'Character at last index is: l', 'Char at 1 place e', 'Char at 3 place c', 'Char at 5 place m', 'Char at 7 place', 'Char at 9 place o', 'Char at 11 place J', 'Char at 13 place v', 'Char at 15 place t', 'Char at 17 place o', 'Char at 19 place n', 'Char at 21 place', 'Char at 23 place o', 'Char at 25 place t', 'Char at 27 place l', 'Frequency of t is: 4', 'String: Javatpoint is a great site for learning Java.', 'Total number of vowels in the string are: 16', 'String: One apple in a day keeps doctor away.', 'Total number of vowels in the string are: 13']",[],[]
70,['Java String compareTo()'],"['The Java String class compareTo() method compares the given string with the current string lexicographically. It returns a positive number, negative number, or 0.']","['https://www.javatpoint.com/java-string-concat', 'https://www.javatpoint.com/java-string-charat', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=CompareToExample', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=CompareToExample2', 'https://www.javatpoint.com/java-string-concat', 'https://www.javatpoint.com/java-string-charAt', 'https://www.javatpoint.com/java-string-concat']",[],[],"['Internal implementation', 'Java String compareTo() Method Example', 'Java String compareTo(): empty string']","['Syntax', 'Java String compareTo(): case sensitive', 'Java String compareTo(): ClassCastException', 'Java String compareTo(): NullPointerException']",[],"['It compares strings on the basis of the Unicode value of each character in the strings.', 'The method accepts a parameter of type String that is to be compared with the current string.', 'It returns an integer value. It throws the following two exceptions:', 'ClassCastException: If this object cannot get compared with the specified object.', 'NullPointerException: If the specified object is null.', 'FileName: CompareToExample.java', 'FileName: CompareToExample2.java', 'FileName: CompareToExample3.java', 'FileName: CompareToExample4.java', 'The NullPointerException is thrown when a null object invokes the compareTo() method. Observe the following example.', 'FileName: CompareToExample5.java']","['When we compare two strings in which either first or second string is empty, the method returns the length of the string. So, there may be two scenarios:', 'To check whether the compareTo() method considers the case sensitiveness of characters or not, we will make the comparison between two strings that contain the same letters in the same sequence.', 'Conclusion: It is obvious by looking at the output that the outcome is not equal to zero. Hence, the compareTo() method takes care of the case sensitiveness of characters.', 'The ClassCastException is thrown when objects of incompatible types get compared. In the following example, we are comparing an object of the ArrayList (al) with a string literal (""Sehwag"").']","['If the first string is lexicographically greater than the second string, it returns a positive number (difference of character value). If the first string is less than the second string lexicographically, it returns a negative number, and if the first string is lexicographically equal to the second string, it returns 0.', 'Suppose, a string having letters in uppercase, and the second string having the letters in lowercase. On comparing these two string, if the outcome is 0, then the compareTo() method does not consider the case sensitiveness of characters; otherwise, the method considers the case sensitiveness of characters.']","['if s1 > s2, it returns positive number', 'if s1 < s2, it returns negative number', 'if s1 == s2, it returns 0', 'public int compareTo(String anotherString)', 'int compareTo(String anotherString) {', 'int length1 = value.length;', 'int length2 = anotherString.value.length;', 'int limit = Math.min(length1, length2);', 'char v1[] = value;', 'char v2[] = anotherString.value;', 'int i = 0;', 'while (i < limit) {', 'char ch1 = v1[i];', 'char ch2 = v2[i];', 'if (ch1 != ch2) {', 'return ch1 - ch2;', '}', 'i++;', 'return length1 - length2;', 'public class CompareToExample{', 'public static void main(String args[]){', 'String s1=""hello"";', 'String s2=""hello"";', 'String s3=""meklo"";', 'String s4=""hemlo"";', 'String s5=""flag"";', 'System.out.println(s1.compareTo(s2));//0 because both are equal', 'System.out.println(s1.compareTo(s3));//-5 because ""h"" is 5 times lower than ""m""', 'System.out.println(s1.compareTo(s4));//-1 because ""l"" is 1 times lower than ""m""', 'System.out.println(s1.compareTo(s5));//2 because ""h"" is 2 times greater than ""f""', 'public class CompareToExample2{', 'public static void main(String args[]){', 'String s1=""hello"";', 'String s2="""";', 'String s3=""me"";', 'System.out.println(s1.compareTo(s2));', 'System.out.println(s2.compareTo(s3));', 'public class CompareToExample3', 'public static void main(String argvs[])', 'String st1 = new String(""INDIA IS MY COUNTRY"");', 'String st2 = new String(""india is my country"");', 'System.out.println(st1.compareTo(st2));', 'import java.util.*;', 'class Players', 'private String name;', 'public Players(String str)', 'name = str;', 'public class CompareToExample4', 'public static void main(String[] args)', 'Players ronaldo = new Players(""Ronaldo"");', 'Players sachin = new Players(""Sachin"");', 'Players messi = new Players(""Messi"");', 'ArrayList al = new ArrayList<>();', 'al.add(ronaldo);', 'al.add(sachin);', 'al.add(messi);', 'Collections.binarySearch(al, ""Sehwag"", null);', 'public class CompareToExample5', 'public static void main(String[] args)', 'String str = null;', 'int no =  str.compareTo(""India is my country."");', 'System.out.println(no);']","['0', '-5', '-1', '2', '5', '-2', '-32', 'Exception in thread ""main"" java.lang.ClassCastException: class Players cannot be cast to class java.lang.Comparable', 'Exception in thread ""main"" java.lang.NullPointerException', 'at CompareToExample5.main(CompareToExample5.java:9)']",[],"['|||If first string is an empty string, the method returns a negative|||If second string is an empty string, the method returns a positive number that is the length of the first string.|||']"
71,['Java String concat'],['The Java String class concat() method combines specified string at the end of this string. It returns a combined string. It is like appending another string.'],"['https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/java-string-compareto', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=ConcatExample', 'https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/java-string-compareto', 'https://www.javatpoint.com/java-string-contains']",[],[],"['Java String concat() method example', 'Java String concat() Method Example 2', 'Java String concat() Method Example 3']","['Signature', 'Parameter', 'Returns', 'Internal implementation', 'Java String concat() Method Example 4']",[],"['The signature of the string concat() method is given below:', 'anotherString : another string i.e., to be combined at the end of this string.', 'combined string', 'FileName: ConcatExample.java', ""Let's see an example where we are concatenating multiple string objects."", 'FileName: ConcatExample2.java', ""Let's see an example where we are concatenating spaces and special chars to the string object. It is done using the chaining of the concat() method."", 'FileName: ConcatExample3.java', 'FileName: ConcatExample4.java']","['Till now, we have seen that the concat() method appends the string at the end of the string that invokes the method. However, we can do a bit of workaround to append the string at the beginning of a string using the concat() method.']",[],"['public String concat(String anotherString)', 'public String concat(String str) {', 'int otherLen = str.length();', 'if (otherLen == 0) {', 'return this;', '}', 'int len = value.length;', 'char buf[] = Arrays.copyOf(value, len + otherLen);', 'str.getChars(buf, len);', 'return new String(buf, true);', 'public class ConcatExample{', 'public static void main(String args[]){', 'String s1=""java string"";', 's1.concat(""is immutable"");', 'System.out.println(s1);', 's1=s1.concat("" is immutable so assign it explicitly"");', 'System.out.println(s1);', 'public class ConcatExample2 {', 'public static void main(String[] args) {', 'String str1 = ""Hello"";', 'String str2 = ""Javatpoint"";', 'String str3 = ""Reader"";', 'String str4 = str1.concat(str2);', 'System.out.println(str4);', 'String str5 = str1.concat(str2).concat(str3);', 'System.out.println(str5);', 'public class ConcatExample3 {', 'public static void main(String[] args) {', 'String str1 = ""Hello"";', 'String str2 = ""Javatpoint"";', 'String str3 = ""Reader"";', 'String str4 = str1.concat("" "").concat(str2).concat("" "").concat(str3);', 'System.out.println(str4);', 'String str5 = str1.concat(""!!!"");', 'System.out.println(str5);', 'String str6 = str1.concat(""@"").concat(str2);', 'System.out.println(str6);', 'public class ConcatExample4', 'public static void main(String argvs[])', 'String str = ""Country"";', 'String s = ""India is my "".concat(str);', 'System.out.println(s);']","['java string', 'java string is immutable so assign it explicitly', 'HelloJavatpoint', 'HelloJavatpointReader', 'Hello Javatpoint Reader', 'Hello!!!', '<a href=""/cdn-cgi/l/email-protection"" class=""__cf_email__"" data-cfemail=""afe7cac3c3c0efe5ced9cedbdfc0c6c1db"">[email\xa0protected]</a>', 'India is my Country']",[],[]
72,['Java String contains()'],['The Java String class contains() method searches the sequence of characters in this string. It returns true if the sequence of char values is found in this string otherwise returns false.'],"['https://www.javatpoint.com/java-string-endswith', 'https://www.javatpoint.com/java-string-concat', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=ContainsExample', 'https://www.javatpoint.com/java-string-endswith', 'https://www.javatpoint.com/java-string-concat', 'https://www.javatpoint.com/java-string-endswith']",[],[],"['Java String contains() Method Example', 'Java String contains() Method Example 2', 'Java String contains() Method Example 3', 'Java String contains() Method Example 4', 'Limitations of the Contains() method']","['Signature', 'Parameter', 'Returns', 'Exception', 'Internal implementation']",[],"['The signature of string contains() method is given below:', 'sequence : specifies the sequence of characters to be searched.', 'true if the sequence of char value exists, otherwise false.', 'NullPointerException : if the sequence is null.', 'FileName: ContainsExample.java', ""The contains() method searches case-sensitive char sequence. If the argument is not case sensitive, it returns false. Let's see an example."", 'FileName: ContainsExample2.java', 'FileName: ContainsExample3.java', 'The contains() method raises the NullPointerException when one passes null in the parameter of the method. The following example shows the same.', 'FileName: ContainsExample4.java', 'Following are some limitations of the contains() method:']","['Here, the conversion of CharSequence takes place into String. After that, the indexOf() method is invoked. The method indexOf() either returns 0 or a number greater than 0 in case the searched string is found.', ""The contains() method is helpful to find a char-sequence in the string. We can use it in the control structure to produce the search-based result. Let's see an example.""]","['However, when the searched string is not found, the indexOf() method returns -1. Therefore, after execution, the contains() method returns true when the indexOf() method returns a non-negative value (when the searched string is found); otherwise, the method returns false.']","['public boolean contains(CharSequence sequence)', 'public boolean contains(CharSequence s) {', 'return indexOf(s.toString()) > -1;', 'class ContainsExample{', 'public static void main(String args[]){', 'String name=""what do you know about me"";', 'System.out.println(name.contains(""do you know""));', 'System.out.println(name.contains(""about""));', 'System.out.println(name.contains(""hello""));', 'public class ContainsExample2 {', 'public static void main(String[] args) {', 'String str = ""Hello Javatpoint readers"";', 'boolean isContains = str.contains(""Javatpoint"");', 'System.out.println(isContains);', 'System.out.println(str.contains(""javatpoint"")); // false', 'public class ContainsExample3 {', 'public static void main(String[] args) {', 'String str = ""To learn Java visit Javatpoint.com"";', 'if(str.contains(""Javatpoint.com"")) {', 'System.out.println(""This string contains javatpoint.com"");', '}else', 'System.out.println(""Result not found"");', 'public class ContainsExample4', 'public static void main(String argvs[])', 'String str = ""Welcome to JavaTpoint!"";', 'if(str.contains(null))', 'System.out.println(""Inside the if block"");', 'System.out.println(""Inside the else block"");']","['true', 'true', 'false', 'true', 'false', 'This string contains javatpoint.com', 'Exception in thread ""main"" java.lang.NullPointerException', 'at java.base/java.lang.String.contains(String.java:2036)', 'at ContainsExample4.main(ContainsExample4.java:9)']",[],"['|||The contains() method should not be used to search for a character in a string. Doing so results in an error.|||The contains() method only checks for the presence or absence of a string in another string. It never reveals at which index the searched index is found. Because of these limitations, it is better to use the indexOf() method instead of the contains() method.|||']"
73,['Java String endsWith()'],['The Java String class endsWith() method checks if this string ends with a given suffix. It returns true if this string ends with the given suffix; else returns false.'],"['https://www.javatpoint.com/java-string-equals', 'https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=EndsWithExample', 'https://www.javatpoint.com/java-string-equals', 'https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/java-string-equals']",[],[],"['Java String endsWith() Method Example', 'Java String endsWith() Method Example 2', 'Java String endsWith() Method Example 3', 'Java String endsWith() Method Example 4', 'Java String endsWith() Method Example 5', 'Java String endsWith() Method Example 6']","['Signature', 'Parameter', 'Returns', 'Internal implementation']",[],"['The syntax or signature of endsWith() method is given below.', 'suffix : Sequence of character', 'true or false', 'The internal implementation shows that the endWith() method is dependent on the startsWith() method of the String class.', 'FileName: EndsWithExample.java', 'Since the endsWith() method returns a boolean value, the method can also be used in an if statement. Observe the following program.', 'FileName: EndsWithExample2.java', 'The endsWith() method takes care of the case sensitiveness of the characters present in a string. The following program shows the same.', 'FileName: EndsWithExample3.java', 'The statement', 'results in', 'str = ""Ladies and Gentlemen"";', 'Thus, we can say that any string in Java ends with an empty string (""""). Observe the', 'FileName: EndsWithExample4.java', 'The endsWith() method raises the NullPointerException if one passes null in the parameter of the method. The following example shows the same.', 'FileName: EndsWithExample5.java', 'A String literal can also call the endsWith() method. The following program shows the same.', 'FileName: EndsWithExample6.java']","['When an empty string is passed in the parameter of the method endsWith(), the method always returns a true value. The reason behind this is that a string never changes when we append an empty string to it. For example,']",[],"['public boolean endsWith(String suffix)', 'public boolean endsWith(String suffix) {', 'return startsWith(suffix, value.length - suffix.value.length);', 'public class EndsWithExample{', 'public static void main(String args[]){', 'String s1=""java by javatpoint"";', 'System.out.println(s1.endsWith(""t""));', 'System.out.println(s1.endsWith(""point""));', 'public class EndsWithExample2 {', 'public static void main(String[] args) {', 'String str = ""Welcome to Javatpoint.com"";', 'System.out.println(str.endsWith(""point""));', 'if(str.endsWith("".com"")) {', 'System.out.println(""String ends with .com"");', '}else System.out.println(""It does not end with .com"");', 'public class EndsWithExample3', 'public static void main(String argvs[])', 'String str = ""Welcome to JavaTpoint"";', 'System.out.println(str.endsWith(""javaTpoint"")); // false because J and j are different', 'System.out.println(str.endsWith(""Javatpoint"")); // false because T and t are different', 'System.out.println(str.endsWith(""JavaTpoint"")); // true because every character is same', 'String str = ""Ladies and Gentlemen"" + """";', 'public class EndsWithExample4', 'public static void main(String argvs[])', 'String str = ""Welcome to JavaTpoint"";', 'System.out.println(str.endsWith(""""));', 'System.out.println(str.endsWith("" ""));', 'public class EndsWithExample5', 'public static void main(String argvs[])', 'String str = ""Welcome to JavaTpoint!"";', 'if(str.endsWith(null))', 'System.out.println(""Inside the if block"");', 'System.out.println(""Inside the else block"");', 'public class EndsWithExample6', 'public static void main(String argvs[])', 'if(""Welcome to JavaTpoint"".endsWith(""""))', 'System.out.println(""Inside the if block"");', 'System.out.println(""Inside the else block"");', 'if(""Welcome to JavaTpoint"".endsWith(""point""))', 'System.out.println(""Inside the if block"");', 'System.out.println(""Inside the else block"");', 'if(""Welcome to JavaTpoint"".endsWith(""xyz""))', 'System.out.println(""Inside the if block"");', 'System.out.println(""Inside the else block"");']","['true', 'true', 'false', 'String ends with .com', 'false', 'false', 'true', 'true', 'false', 'Exception in thread ""main"" java.lang.NullPointerException', 'at java.base/java.lang.String.endsWith(String.java:1485)', 'at EndsWithExample5.main(EndsWithExample5.java:9)', 'Inside the if block', 'Inside the if block', 'Inside the else block']",[],[]
74,['Java String equals()'],"['The Java String class equals() method compares the two given strings based on the content of the string. If any character is not matched, it returns false. If all characters are matched, it returns true.']","['https://www.javatpoint.com/java-string-equalsignorecase', 'https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=EqualsExample', 'https://www.javatpoint.com/java-string-equalsignorecase', 'https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/java-string-equalsignorecase']",[],[],"['Java String equals() Method Example', 'Java String equals() Method Example 2', 'Java String equals() Method Example 3', 'Java String equals() Method Example 4']","['Signature', 'Parameter', 'Returns', 'Internal implementation']",[],"['The String equals() method overrides the equals() method of the Object class.', 'anotherObject : another object, i.e., compared with this string.', 'true if characters of both strings are equal otherwise false.', 'FileName: EqualsExample.java', 'The equals() method compares two strings and can be used in if-else control structure. ', 'FileName: EqualsExample2.java', ""Let's see one more example to test the equality of string present in the list."", 'FileName: EqualsExample3.java', 'FileName: EqualsExample4.java']",['The internal implementation of the equals() method shows that one can pass the reference of any object in the parameter of the method. The following example shows the same.'],[],"['publicboolean equals(Object anotherObject)', 'public boolean equals(Object anObject) {', 'if (this == anObject) {', 'return true;', '}', 'if (anObject instanceof String) {', 'String anotherString = (String) anObject;', 'int n = value.length;', 'if (n == anotherString.value.length) {', 'char v1[] = value;', 'char v2[] = anotherString.value;', 'int i = 0;', 'while (n-- != 0) {', 'if (v1[i] != v2[i])', 'return false;', 'i++;', '}', 'return true;', '}', '}', 'return false;', 'public class EqualsExample{', 'public static void main(String args[]){', 'String s1=""javatpoint"";', 'String s2=""javatpoint"";', 'String s3=""JAVATPOINT"";', 'String s4=""python"";', 'System.out.println(s1.equals(s2));//true because content and case is same', 'System.out.println(s1.equals(s3));//false because case is not same', 'System.out.println(s1.equals(s4));//false because content is not same', 'public class EqualsExample2 {', 'public static void main(String[] args) {', 'String s1 = ""javatpoint"";', 'String s2 = ""javatpoint"";', 'String s3 = ""Javatpoint"";', 'System.out.println(s1.equals(s2)); // True because content is same', 'if (s1.equals(s3)) {', 'System.out.println(""both strings are equal"");', '}else System.out.println(""both strings are unequal"");', 'import java.util.ArrayList;', 'public class EqualsExample3 {', 'public static void main(String[] args) {', 'String str1 = ""Mukesh"";', 'ArrayList list = new ArrayList<>();', 'list.add(""Ravi"");', 'list.add(""Mukesh"");', 'list.add(""Ramesh"");', 'list.add(""Ajay"");', 'for (String str : list) {', 'if (str.equals(str1)) {', 'System.out.println(""Mukesh is present"");', 'public class EqualsExample4', 'public static void main(String argvs[])', 'String str = ""a"";', 'String str1 = ""123"";', 'String str2 = ""45.89"";', 'String str3 = ""false"";', ""Character c = new Character('a');"", 'Integer i = new Integer(123);', 'Float f = new Float(45.89);', 'Boolean b = new Boolean(false);', 'System.out.println(str.equals(c));', 'System.out.println(str1.equals(i));', 'System.out.println(str2.equals(f));', 'System.out.println(str3.equals(b));', 'System.out.println(str.equals(c.toString()));', 'System.out.println(str1.equals(i.toString()));', 'System.out.println(str2.equals(f.toString()));', 'System.out.println(str3.equals(b.toString()));']","['true', 'false', 'false', 'true', 'both strings are unequal', 'Mukesh is present', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true']",[],[]
75,['Java String equalsIgnoreCase()'],"[""The Java String class equalsIgnoreCase() method compares the two given strings on the basis of the content of the string irrespective of the case (lower and upper) of the string. It is just like the equals() method but doesn't check the case sensitivity. If any character is not matched, it returns false, else returns true.""]","['https://www.javatpoint.com/java-string-format', 'https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=EqualsIgnoreCaseExample', 'https://www.javatpoint.com/java-string-format', 'https://www.javatpoint.com/java-string-contains', 'https://www.javatpoint.com/java-string-format']",[],[],"['Java String equalsIgnoreCase() Method Example', 'Java String equalsIgnoreCase() Method Example 2']","['Signature', 'Parameter', 'Returns', 'Internal implementation']",[],"['str : another string i.e., compared with this string.', 'It returns true if characters of both strings are equal, ignoring case otherwise false.', 'public boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)', 'FileName: EqualsIgnoreCaseExample.java', ""Let's see an example where we are testing string equality among the strings."", 'FileName: EqualsIgnoreCaseExample2.java']",['It is obvious from looking at the implementation that the equalsIgnoreCase() method is invoking the regionMatches() method. It makes the equalsIgnoreCase() method case-insensitive. The signature of the regionMatches() method is mentioned below.'],"['The regionMatches() method parses five parameters. The first parameter ignoreCase is set to true in the above implementation. Thus, when the method is executed, it checks whether the ignoreCase flag is true or not. If yes, then one character each from both the strings is taken and then compared. If the comparison gives a false value, then both the character is converted to upper case and then checked if the comparison still gives a false value, then both the characters are converted to a lower case and then compared. If the comparison gives the true value, then both the strings have equal contents; otherwise, not. Code Snippet of the discussed comparison is mentioned below.', 'One may argue that if we made a comparison after converting to uppercase, then why do we need an extra comparison by converting characters to the lowercase. The reason behind this is to provide to the requirement of Georgian alphabets. Conversion in uppercase does not work properly for the Georgian alphabets, as they have some strange rules about the case conversion. Therefore, one extra comparison, by converting characters to the lowercase, is required.']","['publicboolean equalsIgnoreCase(String str)', 'public boolean equalsIgnoreCase(String anotherString) {', 'return (this == anotherString) ? true', ': (anotherString != null)', '&& (anotherString.value.length == value.length)', '&& regionMatches(true, 0, anotherString, 0, value.length);', 'while (toffset < last)', 'char ch1 = getChar(value, toffset++);', 'char ch2 = getChar(other, ooffset++);', 'if (ch1 == ch2)', 'continue;', 'char uCh1 = Character.toUpperCase(ch1);', 'char uCh2 = Character.toUpperCase(ch2);', 'if (uCh1 == u2)', 'continue;', 'if (Character.toLowerCase(uCh1) == Character.toLowerCase(uCh2))', 'continue;', 'return false;', 'return true;', 'public class EqualsIgnoreCaseExample{', 'public static void main(String args[]){', 'String s1=""javatpoint"";', 'String s2=""javatpoint"";', 'String s3=""JAVATPOINT"";', 'String s4=""python"";', 'System.out.println(s1.equalsIgnoreCase(s2));//true because content and case both are same', 'System.out.println(s1.equalsIgnoreCase(s3));//true because case is ignored', 'System.out.println(s1.equalsIgnoreCase(s4));//false because content is not same', 'import java.util.ArrayList;', 'public class EqualsIgnoreCaseExample2 {', 'public static void main(String[] args) {', 'String str1 = ""Mukesh Kumar"";', 'ArrayList list = new ArrayList<>();', 'list.add(""Mohan"");', 'list.add(""Mukesh"");', 'list.add(""RAVI"");', 'list.add(""MuKesH kuMar"");', 'list.add(""Suresh"");', 'for (String str : list) {', 'if (str.equalsIgnoreCase(str1)) {', 'System.out.println(""Mukesh kumar is present"");']","['true', 'true', 'false', 'Mukesh kumar is present']",[],[]
76,['Java String format()'],"['The java string format() method returns the formatted string by given locale, format and arguments.']","['https://www.javatpoint.com/java-string-getbytes', 'https://www.javatpoint.com/java-string-equals', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=FormatExample', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=FormatExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=FormatExample3', 'https://www.javatpoint.com/java-string-getbytes', 'https://www.javatpoint.com/java-string-equals', 'https://www.javatpoint.com/java-string-getbytes']",[],[],"['Java String format() method example', 'Java String format() Method Example 2', 'Java String format() Method Example 3']","['Internal implementation', 'Signature', 'Parameters', 'Returns', 'Throws', 'Java String Format Specifiers']",[],"[""If you don't specify the locale in String.format() method, it uses default locale by calling Locale.getDefault() method."", 'The format() method of java language is like sprintf() function in c language and printf() method of java language.', 'There are two type of string format() method:', 'locale : specifies the locale to be applied on the format() method.', 'format : format of the string.', 'args : arguments for the format string. It may be zero or more.', 'formatted string', 'NullPointerException : if format is null.', 'IllegalFormatException : if format is illegal or incompatible.', 'Here, we are providing a table of format specifiers supported by the Java String.', 'Hex string.', 'This method supports various data types and formats them into a string type. Let us see an example.']","['Apart from formatting, we can set width, padding etc. of any value. Let us see an example where we are setting width and padding for an integer value.']",[],"['public static String format(String format, Object... args) {', 'return new Formatter().format(format, args).toString();', 'public static String format(String format, Object... args)', 'public static String format(Locale locale, String format, Object... args)', 'public class FormatExample{', 'public static void main(String args[]){', 'String name=""sonoo"";', 'String sf1=String.format(""name is %s"",name);', 'String sf2=String.format(""value is %f"",32.33434);', 'String sf3=String.format(""value is %32.12f"",32.33434);//returns 12 char fractional part filling with 0', 'System.out.println(sf1);', 'System.out.println(sf2);', 'System.out.println(sf3);', 'public class FormatExample2 {', 'public static void main(String[] args) {', 'String str1 = String.format(""%d"", 101); \t\t // Integer value', 'String str2 = String.format(""%s"", ""Amar Singh""); // String value', 'String str3 = String.format(""%f"", 101.00);       // Float value', 'String str4 = String.format(""%x"", 101);          // Hexadecimal value', 'String str5 = String.format(""%c"", \'c\');          // Char value', 'System.out.println(str1);', 'System.out.println(str2);', 'System.out.println(str3);', 'System.out.println(str4);', 'System.out.println(str5);', 'public class FormatExample3 {', 'public static void main(String[] args) {', 'String str1 = String.format(""%d"", 101);', 'String str2 = String.format(""|%10d|"", 101);  // Specifying length of integer', 'String str3 = String.format(""|%-10d|"", 101); // Left-justifying within the specified width', 'String str4 = String.format(""|% d|"", 101);', 'String str5 = String.format(""|%010d|"", 101); // Filling with zeroes', 'System.out.println(str1);', 'System.out.println(str2);', 'System.out.println(str3);', 'System.out.println(str4);', 'System.out.println(str5);']","['name is sonoo\nvalue is 32.334340\nvalue is                  32.334340000000', '101\nAmar Singh\n101.000000\n65\nc', '101\n|       101|\n|101       |\n| 101|\n|0000000101|']","['Format Specifier|||Data Type|||Output&&&%a|||floating point (except BigDecimal)|||Returns Hex output of floating point number.&&&%b|||Any type|||""true"" if non-null, ""false"" if null&&&%c|||character|||Unicode character&&&%d|||integer (incl. byte, short, int, long, bigint)|||Decimal Integer&&&%e|||floating point|||decimal number in scientific notation&&&%f|||floating point|||decimal number&&&%g|||floating point|||decimal number, possibly in scientific notation depending on the precision and value.&&&%h|||any type|||Hex String of value from hashCode() method.&&&%n|||none|||Platform-specific line separator.&&&%o|||integer (incl. byte, short, int, long, bigint)|||Octal number&&&%s|||any type|||String value&&&%t|||Date/Time (incl. long, Calendar, Date and TemporalAccessor)|||%t is the prefix for Date/Time conversions. More formatting flags are needed after this. See Date/Time conversion below.&&&%x|||integer (incl. byte, short, int, long, bigint)|||Hex string.']",[]
77,['Java String getBytes()'],['The Java String class getBytes() method does the encoding of string into the sequence of bytes and keeps it in an array of bytes.'],"['https://www.javatpoint.com/java-string-getchars', 'https://www.javatpoint.com/java-string-format', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=StringGetBytesExample', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=StringGetBytesExample2', 'https://www.javatpoint.com/java-string-getchars', 'https://www.javatpoint.com/java-string-format', 'https://www.javatpoint.com/java-string-getchars']",[],[],"['String class getBytes() Method Example', 'Java String class getBytes() Method Example 2', 'Java String class getBytes() Method Example 3', 'Java String class getBytes() Method Example 4']","['Signature', 'Parameters', 'Returns', 'Exception Throws', 'Internal implementation']",[],"['There are three variants of getBytes() method. The signature or syntax of string getBytes() method is given below:', 'charset / charsetName - The name of a charset the method supports.', 'Sequence of bytes.', 'UnsupportedEncodingException: It is thrown when the mentioned charset is not supported by the method.', 'FileName: StringGetBytesExample.java', 'FileName: StringGetBytesExample2.java', 'The method returns a byte array that again can be passed to the String constructor to get String.', 'The following example shows the encoding into a different charset.', 'FileName: StringGetBytesExample3.java', 'The following example shows when the charset is not supported by the getBytes() method, UnsupportedEncodingException is thrown.', 'FileName: StringGetBytesExample4.java']","['The parameterless getBytes() method encodes the string using the default charset of the platform, which is UTF - 8. The following two examples show the same.']",[],"['public byte[] getBytes()', 'public byte[] getBytes(Charset charset)', 'public byte[] getBytes(String charsetName)throws UnsupportedEncodingException', 'public byte[] getBytes() {', 'return StringCoding.encode(value, 0, value.length);', '}', 'public class StringGetBytesExample{', 'public static void main(String args[]){', 'String s1=""ABCDEFG"";', 'byte[] barr=s1.getBytes();', 'for(int i=0;i', 'public class StringGetBytesExample2 {', 'public static void main(String[] args) {', 'String s1 = ""ABCDEFG"";', 'byte[] barr = s1.getBytes();', 'for(int i=0;i', 'import java.io.*;', 'public class StringGetBytesExample3', 'public static void main(String argvs[])', 'String str = ""Welcome to JavaTpoint."";', 'System.out.println(""The input String is : "");', 'System.out.println(str + ""\\n"");', '16 - bit UCS Transformation format', 'byte[] byteArr = str.getBytes(""UTF-16"");', 'System.out.println(""After converted into UTF-16 the String is : "");', 'for (int j = 0; j < byteArr.length; j++)', 'System.out.print(byteArr[j]);', 'System.out.println(""\\n"");', 'byte[] byteArr1 = str.getBytes(""UTF-16BE"");', 'System.out.println(""After converted into UTF-16BE the String is : "");', 'for (int j = 0; j < byteArr1.length; j++)', 'System.out.print(byteArr1[j]);', 'System.out.println(""\\n"");', 'byte[] byteArr2 = str.getBytes(""ISO-8859-1"");', 'System.out.println(""After converted into ISO-8859-1 the String is : "");', 'for (int j = 0; j < byteArr2.length; j++)', 'System.out.print(byteArr2[j]);', 'System.out.println(""\\n"");', 'byte[] byteArr3 = str.getBytes(""UTF-16LE"");', 'System.out.println(""After converted into UTF-16LE the String is : "");', 'for (int j = 0; j < byteArr3.length; j++)', 'System.out.print(byteArr3[j]);', 'catch (UnsupportedEncodingException g)', 'System.out.println(""Unsupported character set"" + g);', 'public class StringGetBytesExample4', 'public static void main(String argvs[])', 'String str = ""Welcome to JavaTpoint."";', 'System.out.println(""The input String is : "");', 'System.out.println(str + ""\\n"");', 'byte[] byteArr = str.getBytes(""UTF-17"");', 'System.out.println(""After converted into UTF-17 the String is : "");', 'for (int j = 0; j < byteArr.length; j++)', 'System.out.print(byteArr[j]);']","['65', '66', '67', '68', '69', '70', '71', '65', '66', '67', '68', '69', '70', '71', 'ABCDEFG', 'The input String is :', 'Welcome to JavaTpoint.', 'After converted into UTF-16 the String is :', '-2-10870101010809901110109010103201160111032074097011809708401120111010501100116046', 'After converted into UTF-16BE the String is :', '0870101010809901110109010103201160111032074097011809708401120111010501100116046', 'After converted into ISO-8859-1 the String is :', '871011089911110910132116111327497118978411211110511011646', 'After converted into UTF-16LE the String is :', '8701010108099011101090101032011601110320740970118097084011201110105011001160460', '/StringGetBytesExample4.java:11: error: unreported exception UnsupportedEncodingException; must be caught or declared to be thrown', 'byte[] byteArr = str.getBytes(""UTF-17"");', '^', '1 error']",[],[]
78,['Java String getChars()'],['The Java String class getChars() method copies the content of this string into a specified char array. There are four arguments passed in the getChars() method. The signature of the getChars() method is given below:'],"['https://www.javatpoint.com/java-string-indexof', 'https://www.javatpoint.com/java-string-format', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=StringGetCharsExample', 'https://www.javatpoint.com/java-string-indexof', 'https://www.javatpoint.com/java-string-format', 'https://www.javatpoint.com/java-string-indexof']",[],[],"['Java String getChars() Method Example', 'Java String getChars() Method Example 2', 'Java String getChars() Method Example 3']","['Signature', 'Parameters', 'Returns', 'Exception Throws', 'Internal implementation']",[],"['int srcBeginIndex: The index from where copying of characters is started.', 'int srcEndIndex: The index which is next to the last character that is getting copied.', 'Char[] destination: The char array where characters from the string that invokes the getChars() method is getting copied.', 'int dstEndIndex: It shows the position in the destination array from where the characters from the string will be pushed.', ""It doesn't return any value."", 'The method throws StringIndexOutOfBoundsException when any one or more than one of the following conditions holds true.', 'The signature or syntax of string getChars() method is given below:', 'FileName: StringGetCharsExample.java', ""The method throws an exception if index value exceeds array range. Let's see an example."", 'FileName: StringGetCharsExample2.java', 'FileName: StringGetCharsExample3.java']",[],"['The getChars() method does not copy anything into the char array, provided the value of srcBeginIndex and srcEndIndex are the same. It is because the getChars() method copies from the srcBeginIndex index to srcEndIndex - 1 index. As srcBeginIndex is equal to srcEndIndex; therefore, srcEndIndex - 1 is less than srcBeginIndex. Therefore, the getChars() method copies nothing. The following example confirms the same.']","['public void getChars(int srcBeginIndex, int srcEndIndex, char[] destination, int dstBeginIndex)', 'void getChars(char dst[], int dstBegin) {', 'System.arraycopy(value, 0, dst, dstBegin, value.length);', '}', 'public class StringGetCharsExample{', 'public static void main(String args[]){', 'String str = new String(""hello javatpoint how r u"");', 'char[] ch = new char[10];', 'try{', 'str.getChars(6, 16, ch, 0);', 'System.out.println(ch);', '}catch(Exception ex){System.out.println(ex);}', 'public class StringGetCharsExample2 {', 'public static void main(String[] args) {', 'String str = new String(""Welcome to Javatpoint"");', 'char[] ch  = new char[20];', 'try {', 'str.getChars(1, 26, ch, 0);', 'System.out.println(ch);', '} catch (Exception e) {', 'System.out.println(e);', 'public class StringGetCharsExample3', 'public static void main(String argvs[])', 'String str = ""Welcome to JavaTpoint!"";', 'char[] chArr = new char[25];', 'int srcBeginIndex = 11;', 'int srcEndIndex = 11;', 'int dstBeginIndex = 2;', 'str.getChars(srcBeginIndex, srcEndIndex, chArr, dstBeginIndex);', 'System.out.println(chArr);', 'catch(Exception excpn)', 'System.out.println(excpn);', 'System.out.println(""The getChars() method prints nothing as start and end indices are equal."");']","['javatpoint', 'java.lang.StringIndexOutOfBoundsException: offset 10, count 14, length 20', 'The getChars() method prints nothing as start and end indices are equal.']",[],['|||If srcBeginIndex is less than zero.|||If srcBeginIndex is greater than srcEndIndex.|||If srcEndIndex is greater than the size of the string that invokes the method|||If dstEndIndex is is less than zero.|||If dstEndIndex + (srcEndIndex - srcBeginIndex) is greater than the size of the destination array.|||']
79,['Java String indexOf()'],['The Java String class indexOf() method returns the position of the first occurrence of the specified character or string in a specified string.'],"['https://www.javatpoint.com/java-string-intern', 'https://www.javatpoint.com/java-string-getbytes', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=IndexOfExample', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=IndexOfExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=IndexOfExample3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=IndexOfExample4', 'https://www.javatpoint.com/java-string-intern', 'https://www.javatpoint.com/java-string-getbytes', 'https://www.javatpoint.com/java-string-intern']",[],[],"['Java String indexOf() Method Example', 'Java String indexOf(String substring) Method Example', 'Java String indexOf(String substring, int fromIndex) Method Example', 'Java String indexOf(int char, int fromIndex) Method Example']","['Signature', 'Parameters', 'Returns']",[],"['There are four overloaded indexOf() method in Java. The signature of indexOf() methods are given below:', ""ch: It is a character value, e.g. 'a'"", 'fromIndex: The index position from where the index of the char value or substring is returned.', 'substring: A substring to be searched in this string.', 'Index of the searched string or character.', 'Internal Implementation', 'FileName: IndexOfExample.java', 'FileName: IndexOfExample5.java', 'The method takes substring as an argument and returns the index of the first character of the substring.', 'FileName: IndexOfExample2.java', 'The method takes substring and index as arguments and returns the index of the first character that occurs after the given fromIndex.', 'FileName: IndexOfExample3.java', 'The method takes char and index as arguments and returns the index of the first character that occurs after the given fromIndex.', 'FileName: IndexOfExample4.java']",[],"['We observe that when a searched string or character is found, the method returns a non-negative value. If the string or character is not found, -1 is returned. We can use this property to find the total count of a character present in the given string. Observe the following example.']","['public int indexOf(int ch) {', 'return indexOf(ch, 0);', 'public class IndexOfExample{', 'public static void main(String args[]){', 'String s1=""this is index of example"";', 'int index1=s1.indexOf(""is"");//returns the index of is substring', 'int index2=s1.indexOf(""index"");//returns the index of index substring', 'System.out.println(index1+""  ""+index2);//2 8', 'int index3=s1.indexOf(""is"",4);//returns the index of is substring after 4th index', 'System.out.println(index3);//5 i.e. the index of another is', ""int index4=s1.indexOf('s');//returns the index of s char value"", 'System.out.println(index4);//3', 'public class IndexOfExample5', 'public static void main(String argvs[])', 'String str = ""Welcome to JavaTpoint"";', 'int count = 0;', 'int startFrom = 0;', 'for(; ;)', ""int index = str.indexOf('o', startFrom);"", 'if(index >= 0)', 'count = count + 1;', 'startFrom = index + 1;', 'System.out.println(""In the String: ""+ str);', 'System.out.println(""The \'o\' character has come ""+ count + "" times"");', 'public class IndexOfExample2 {', 'public static void main(String[] args) {', 'String s1 = ""This is indexOf method"";', 'int index = s1.indexOf(""method""); //Returns the index of this substring', 'System.out.println(""index of substring ""+index);', 'public class IndexOfExample3 {', 'public static void main(String[] args) {', 'String s1 = ""This is indexOf method"";', 'int index = s1.indexOf(""method"", 10); //Returns the index of this substring', 'System.out.println(""index of substring ""+index);', 'index = s1.indexOf(""method"", 20); // It returns -1 if substring does not found', 'System.out.println(""index of substring ""+index);', 'public class IndexOfExample4 {', 'public static void main(String[] args) {', 'String s1 = ""This is indexOf method"";', ""int index = s1.indexOf('e', 12); //Returns the index of this char"", 'System.out.println(""index of char ""+index);']","['2  8', '5', '3', 'In the String: Welcome to JavaTpoint', ""The 'o' character has come 3 times"", 'index of substring 16', 'index of substring 16', 'index of substring -1', 'index of char 17']","['o.MethodDescriptio&&&int indexOf(int ch)It returns the index position for the given char valu&&&int indexOf(int ch, int fromIndex)It returns the index position for the given char value and from inde&&&int indexOf(String substring)It returns the index position for the given substrin&&&int indexOf(String substring, int fromIndex)It returns the index position for the given substring and from inde']",[]
80,['Java String intern()'],['The Java String class intern() method returns the interned string. It returns the canonical representation of string.'],"['https://www.javatpoint.com/java-string-isempty', 'https://www.javatpoint.com/java-string-indexof', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=InternExample', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=InternExample2', 'https://www.javatpoint.com/java-string-isempty', 'https://www.javatpoint.com/java-string-indexof', 'https://www.javatpoint.com/java-string-isempty']",[],[],"['The need and working of the String.intern() Method', 'Java String intern() Method Example', 'Java String intern() Method Example 2', 'Points to Remember']","['Signature', 'Returns']",[],"['The signature of the intern() method is given below:', 'interned string', 'FileName: InternExample.java', ""Let's see one more example to understand the string intern concept."", 'FileName: InternExample2.java', 'Following are some important points to remember regarding the intern() method:', '1) A string literal always invokes the intern() method, whether one mention the intern() method along with the string literal or not. For example,', '2) Whenever we create a String object using the new keyword, two objects are created. For example,']","['It can be used to return string from memory if it is created by a new keyword. It creates an exact copy of the heap string object in the String Constant Pool.', 'The println statement prints false because separate memory is allocated for each string literal. Thus, two new string objects are created in the memory i.e. str and str1. that holds different references.']","['When a string is created in Java, it occupies memory in the heap. Also, we know that the String class is immutable. Therefore, whenever we create a string using the new keyword, new memory is allocated in the heap for corresponding string, which is irrespective of the content of the array. Consider the following code snippet.', 'We know that creating an object is a costly operation in Java. Therefore, to save time, Java developers came up with the concept of String Constant Pool (SCP). The SCP is an area inside the heap memory. It contains the unique strings. In order to put the strings in the string pool, one needs to call the intern() method. Before creating an object in the string pool, the JVM checks whether the string is already present in the pool or not. If the string is present, its reference is returned.', 'In the above code snippet, the intern() method is invoked on the String objects. Therefore, the memory is allocated in the SCP. For the second statement, no new string object is created as the content of str and str1 are the same. Therefore, the reference of the object created in the first statement is returned for str1. Thus, str and str1 both point to the same memory. Hence, the print statement prints true.', 'Here, one object is created in the heap memory outside of the SCP because of the usage of the new keyword. As we have got the string literal too (""Hello World""); therefore, one object is created inside the SCP, provided the literal ""Hello World"" is already not present in the SCP.']","['public String intern()', 'String str = new String(""Welcome to JavaTpoint."");', 'String str1 = new String(""Welcome to JavaTpoint"");', 'System.out.println(str1 == str); // prints false', 'String str = new String(""Welcome to JavaTpoint"").intern(); // statement - 1', 'String str1 = new String(""Welcome to JavaTpoint"").intern(); // statement - 2', 'System.out.println(str1 == str); // prints true', 'public class InternExample{', 'public static void main(String args[]){', 'String s1=new String(""hello"");', 'String s2=""hello"";', 'String s3=s1.intern();//returns string from pool, now it will be same as s2', 'System.out.println(s1==s2);//false because reference variables are pointing to different instance', 'System.out.println(s2==s3);//true because reference variables are pointing to same instance', 'public class InternExample2 {', 'public static void main(String[] args) {', 'String s1 = ""Javatpoint"";', 'String s2 = s1.intern();', 'String s3 = new String(""Javatpoint"");', 'String s4 = s3.intern();', 'System.out.println(s1==s2); // True', 'System.out.println(s1==s3); // False', 'System.out.println(s1==s4); // True', 'System.out.println(s2==s3); // False', 'System.out.println(s2==s4); // True', 'System.out.println(s3==s4); // False', 'String s = ""d"".intern();', 'String p = ""d""; // compiler treats it as String p = ""d"".intern();', 'System.out.println(s == p); // prints true', 'String str = new (""Hello World"");']","['false', 'true', 'true', 'false', 'true', 'false', 'true', 'false']",[],[]
81,['Java String isEmpty()'],['The Java String class isEmpty() method checks if the input string is empty or not. Note that here empty means the number of characters contained in a string is zero.'],"['https://www.javatpoint.com/java-string-join', 'https://www.javatpoint.com/java-string-intern', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=IsEmptyExample', 'https://www.javatpoint.com/java-string-join', 'https://www.javatpoint.com/java-string-intern', 'https://www.javatpoint.com/java-string-join']",[],[],"['Java String isEmpty() method example', 'Java String isEmpty() Method Example 2', 'Empty Vs. Null Strings', 'Blank Strings']","['Signature', 'Returns', 'Since', 'Internal implementation']",[],"['The signature or syntax of string isEmpty() method is given below:', 'true if length is 0 otherwise false.', 'FileName: StringIsEmptyExample.java', 'FileName: StringIsEmptyExample2.java', 'The isEmpty() method is not fit for checking the null strings. The following example shows the same.', 'FileName: StringIsEmptyExample3.java', 'Here, we can use the == operator to check for the null strings.', 'FileName: StringIsEmptyExample4.java', 'FileName: StringIsEmptyExample5.java']","['Earlier in this tutorial, we have discussed that the empty strings contain zero characters. However, the same is true for a null string too. A null string is a string that has no value.', 'Blank strings are those strings that contain only white spaces. The isEmpty() method comes in very handy to check for the blank strings. Consider the following example.']",[],"['public boolean isEmpty()', 'public boolean isEmpty() {', 'return value.length == 0;', '}', 'public class IsEmptyExample{', 'public static void main(String args[]){', 'String s1="""";', 'String s2=""javatpoint"";', 'System.out.println(s1.isEmpty());', 'System.out.println(s2.isEmpty());', 'public class IsEmptyExample2 {', 'public static void main(String[] args) {', 'String s1="""";', 'String s2=""Javatpoint"";', 'if(s1.length()==0 || s1.isEmpty())', 'System.out.println(""String s1 is empty"");', 'else System.out.println(""s1"");', 'if(s2.length()==0 || s2.isEmpty())', 'System.out.println(""String s2 is empty"");', 'else System.out.println(s2);', 'String str = """"; // empty string', 'String str1 = null; // null string. It is also not containing any characters.', 'public class StringIsEmptyExample3', 'public static void main(String argvs[])', 'String str = null;', 'if(str.isEmpty())', 'System.out.println(""The string is null."");', 'System.out.println(""The string is not null."");', 'class StringIsEmptyExample4', 'public static void main(String argvs[])', 'String str = null;', 'if(str == null)', 'System.out.println(""The string is null."");', 'System.out.println(""The string is not null."");', 'public class StringIsEmptyExample5', 'public static void main(String argvs[])', 'String str = ""     "";', 'int size = str.length();', 'if(size == 0)', 'System.out.println(""The string is empty. \\n"");', 'else if(size > 0 && str.trim().isEmpty())', 'System.out.println(""The string is blank. \\n"");', 'System.out.println(""The string is not blank. \\n"");', 'str = "" Welcome to JavaTpoint.  "";', 'size = str.length();', 'if(size == 0)', 'System.out.println(""The string is empty. \\n"");', 'if(size > 0 && str.trim().isEmpty())', 'System.out.println(""The string is blank. \\n"");', 'System.out.println(""The string is not blank. \\n"");']","['true', 'false', 'String s1 is empty', 'Javatpoint', 'Exception in thread ""main"" java.lang.NullPointerException', 'at StringIsEmptyExample3.main(StringIsEmptyExample3.java:7)', 'The string is null.', 'The string is blank.', 'The string is not blank.']",[],[]
82,['Java String join()'],"['The Java String class join() method returns a string joined with a given delimiter. In the String join() method, the delimiter is copied for each element. The join() method is included in the Java string since JDK 1.8.']","['https://www.javatpoint.com/java-string-lastindexof', 'https://www.javatpoint.com/java-string-isempty', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=StringJoinExample', 'https://www.javatpoint.com/java-string-lastindexof', 'https://www.javatpoint.com/java-string-isempty', 'https://www.javatpoint.com/java-string-lastindexof']",[],[],"['Java String join() Method Example', 'Java String join() Method Example 2', 'Java String join() Method Example 3', 'Java String join() Method Example 4']","['Signature', 'Parameters', 'Returns', 'Exception Throws', 'Since', 'Internal Implementation']",[],"['There are two types of join() methods in the Java String class.', 'The signature or syntax of the join() method is given below:', 'delimiter : char value to be added with each element', 'elements : char value to be attached with delimiter', 'joined string with delimiter', 'NullPointerException if element or delimiter is null.', 'FileName: StringJoinExample.java', 'We can use a delimiter to format the string as we did in the below example to show the date and time.', 'FileName: StringJoinExample2.java', 'In the case of using null as a delimiter, we get the null pointer exception. The following example confirms the same.', 'FileName: StringJoinExample3.java', 'FileName: StringJoinExample4.java', 'FileName: StringJoinExample5.java']","['However, if the elements that have to be attached with the delimiter are null then, we get the ambiguity. It is because there are two join() methods, and null is acceptable for both types of the join() method. Observe the following example.', ""If the elements that have to be attached with the delimiter have some strings, in which a few of them are null, then the null elements are treated as a normal string, and we do not get any exception or error. Let's understand it through an example.""]",[],"['public static String join(CharSequence delimiter, CharSequence... elements)', 'public static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)', 'public static String join(CharSequence delimiter, CharSequence... elements)', 'Objects.requireNonNull(elements);', 'Objects.requireNonNull(delimiter);', '', 'StringJoiner jnr = new StringJoiner(delimiter);', 'for (CharSequence c: elements)', '{', 'jnr.add(c);', '}', 'return jnr.toString();', 'public static String join(CharSequence delimiter, CharSequence... elements)', 'Objects.requireNonNull(elements);', 'Objects.requireNonNull(delimiter);', '', 'StringJoiner jnr = new StringJoiner(delimiter);', 'for (CharSequence c: elements)', '{', 'jnr.add(c);', '}', 'return jnr.toString();', 'public static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)', 'Objects.requireNonNull(elements);', 'Objects.requireNonNull(delimiter);', '', 'StringJoiner jnr = new StringJoiner(delimiter);', 'for (CharSequence c: elements)', '{', 'joiner.add(c);', '}', 'return jnr.toString();', 'public class StringJoinExample{', 'public static void main(String args[]){', 'String joinString1=String.join(""-"",""welcome"",""to"",""javatpoint"");', 'System.out.println(joinString1);', 'public class StringJoinExample2 {', 'public static void main(String[] args) {', 'String date = String.join(""/"",""25"",""06"",""2018"");', 'System.out.print(date);', 'String time = String.join("":"", ""12"",""10"",""10"");', 'System.out.println("" ""+time);', 'public class StringJoinExample3', 'public static void main(String argvs[])', 'String str = null;', 'str = String.join(null, ""abc"", ""bcd"", ""apple"");', 'System.out.println(str);', 'public class StringJoinExample4', 'public static void main(String argvs[])', 'String str = null;', 'str = String.join(""India"", null);', 'System.out.println(str);', 'public class StringJoinExample5', 'public static void main(String argvs[])', 'String str = null;', 'str = String.join(""-"", null, "" wake up "", "" eat "", "" write content for JTP "", "" eat "", "" sleep "");', 'System.out.println(str);']","['welcome-to-javatpoint', '25/06/2018 12:10:10', 'Exception in thread ""main"" java.lang.NullPointerException', 'at java.base/java.util.Objects.requireNonNull(Objects.java:221)', 'at java.base/java.lang.String.join(String.java:2393)', 'at StringJoinExample3.main(StringJoinExample3.java:7)', '/StringJoinExample4.java:7: error: reference to join is ambiguous', 'str = String.join(""India"", null);', '^', 'both method join(CharSequence,CharSequence...) in String and method join(CharSequence,Iterable<? extends CharSequence>) in String match', '/StringJoinExample4.java:7: warning: non-varargs call of varargs method with inexact argument type for last parameter;', 'str = String.join(""India"", null);', '^', 'cast to CharSequence for a varargs call', 'cast to CharSequence[] for a non-varargs call and to suppress this warning', '1 error', '1 warning', 'null- wake up - eat - write content for JTP - eat - sleep']",[],[]
83,['Java String lastIndexOf()'],"['The Java String class lastIndexOf() method returns the last index of the given character value or substring. If it is not found, it returns -1. The index counter starts from zero.']","['https://www.javatpoint.com/java-string-length', 'https://www.javatpoint.com/java-string-join', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=LastIndexOfExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=LastIndexOfExample2', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=LastIndexOfExample3', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=LastIndexOfExample4', 'https://www.javatpoint.com/java-string-length', 'https://www.javatpoint.com/java-string-join', 'https://www.javatpoint.com/java-string-length']",[],[],"['Java String lastIndexOf() method example', 'Java String lastIndexOf(int ch, int fromIndex) Method Example', 'Java String lastIndexOf(String substring) Method Example', 'Java String lastIndexOf(String substring, int fromIndex) Method Example']","['Signature', 'Parameters', 'Returns', 'Internal Implementation']",[],"['There are four types of lastIndexOf() method in Java. The signature of the methods are given below:', ""ch: char value i.e. a single character e.g. 'a'"", 'fromIndex: index position from where index of the char value or substring is retured', 'substring: substring to be searched in this string', 'last index of the string', 'The internal implementation of the four types of the lastIndexOf() method is mentioned below.', 'The internal implementation of the four types of the lastIndexOf() method is mentioned below.', '1. int lastIndexOf(int ch)', '2. int lastIndexOf(int ch, int fromIndex)', '3. int lastIndexOf(String subString)', '4. int lastIndexOf(String substring, int fromIndex)', 'FileName: LastIndexOfExample.java', 'Here, we are finding the last index from the string by specifying fromIndex.', 'FileName: LastIndexOfExample2.java', 'It returns the last index of the substring. ', 'FileName: LastIndexOfExample3.java', 'It returns the last index of the substring from the fromIndex. ', 'FileName: LastIndexOfExample4.java']",[],[],"['public int lastIndexOf(int ch)', 'return lastIndexOf(ch, value.length - 1);', 'public int lastIndexOf(int ch, int fromIndex)', 'if (ch < Character.MIN_SUPPLEMENTARY_CODE_POINT)', 'final char[] val = this.value;', 'int j = Math.min(fromIndex, val.length - 1);', 'for (; jj >= 0; j--)', 'if (val[i] == ch)', 'return j;', 'return -1;', 'return lastIndexOfSupplementary(ch, fromIndex);', 'private int lastIndexOfSupplementary(int c, int fIndex)', 'if (Character.isValidCodePoint(c))', 'final char[] val = this.value;', 'char h = Character.highSurrogate(c);', 'char l = Character.lowSurrogate(c);', 'int j = Math.min(fIndex, value.length - 2);', 'for (; j >= 0; j--)', 'if (val[j] == h && val[j + 1] == l)', 'return j;', 'return -1;', 'public int lastIndexOf(String subString)', 'return lastIndexOf(subString, value.length);', 'public int lastIndexOf(String substring, int fromIndex)', 'public int lastIndexOf(String str, int fromIndex)', 'return lastIndexOf(value, 0, value.length, str.value, 0, str.value.length, fromIndex);', 'static int lastIndexOf(char[] src, int srcOffset, int srcCount, String tar, int fromIndex)', 'return lastIndexOf(src, srcOffset, srcCount, tar.value, 0, tar.value.length, fromIndex);', 'static int lastIndexOf(char[] src, int srcOffset, int srcCount, char[] tar, int tarOffset, int tarCount, int fromIndex)', 'int rightIndex = srcCount - tarCount;', 'if (fromIndex < 0)', 'return -1;', 'if (fromIndex > rightIndex)', 'fromIndex = rightIndex;', 'if (tarCount == 0)', 'return fromIndex;', 'int lastStrIndex = tarOffset + tarCount - 1;', 'char lastStrChar = tar[strLastIndex];', 'int min = srcOffset + tarCount - 1;', 'int j = min + fromIndex;', 'startLookForLastChar:', 'while (true)', 'while (j >= min && src[j] != lastStrChar)', 'j = j - 1;', 'if (j < min)', 'return -1;', 'int i = j - 1;', 'int begin = i - (tarCount - 1);', 'int m = lastStrIndex - 1;', 'while (i > begin)', 'if (source[i--] != target[m--])', 'j = j + 1;', 'continue startLookForLastChar;', 'return begin - srcOffset + 1;', 'public class LastIndexOfExample{', 'public static void main(String args[]){', 'String s1=""this is index of example"";//there are 2 \'s\' characters in this sentence', ""int index1=s1.lastIndexOf('s');//returns last index of 's' char value"", 'System.out.println(index1);//6', 'public class LastIndexOfExample2 {', 'public static void main(String[] args) {', 'String str = ""This is index of example"";', ""int index = str.lastIndexOf('s',5);"", 'System.out.println(index);', 'public class LastIndexOfExample3 {', 'public static void main(String[] args) {', 'String str = ""This is last index of example"";', 'int index = str.lastIndexOf(""of"");', 'System.out.println(index);', 'public class LastIndexOfExample4 {', 'public static void main(String[] args) {', 'String str = ""This is last index of example"";', 'int index = str.lastIndexOf(""of"", 25);', 'System.out.println(index);', 'index = str.lastIndexOf(""of"", 10);', 'System.out.println(index); // -1, if not found']","['6', '3', '19', '19', '-1']","['o.MethodDescriptio&&&int lastIndexOf(int ch)It returns last index position for the given char valu&&&int lastIndexOf(int ch, int fromIndex)It returns last index position for the given char value and from inde&&&int lastIndexOf(String substring)It returns last index position for the given substrin&&&int lastIndexOf(String substring, int fromIndex)It returns last index position for the given substring and from inde']",[]
84,['Java String length()'],['The Java String class length() method finds the length of a string. The length of the Java string is the same as the Unicode code units of the string.'],"['https://www.javatpoint.com/java-string-replace', 'https://www.javatpoint.com/java-string-lastindexof', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=LengthExample', 'https://www.javatpoint.com/java-string-replace', 'https://www.javatpoint.com/java-string-lastindexof', 'https://www.javatpoint.com/java-string-replace']",[],[],"['Java String length() method example', 'Java String length() Method Example 2', 'Java String length() Method Example 3', 'Java String length() Method Example 4']","['Signature', 'Specified by', 'Returns', 'Internal implementation']",[],"['The signature of the string length() method is given below:', 'CharSequence interface', 'Length of characters. In other words, the total number of characters present in the string.', 'FileName: LengthExample.java', 'FileName: LengthExample2.java', 'The length() method is also used to reverse the string.', 'FileName: LengthExample3.java', 'The length() method can also be used to find only the white spaces present in the string. Observe the following example.', 'FileName: LengthExample4.java']","['Since the length() method gives the total number of characters present in the string; therefore, one can also check whether the given string is empty or not.']","['The String class internally uses a char[] array to store the characters. The length variable of the array is used to find the total number of elements present in the array. Since the Java String class uses this char[] array internally; therefore, the length variable can not be exposed to the outside world. Hence, the Java developers created the length() method, the exposes the value of the length variable. One can also think of the length() method as the getter() method, that provides a value of the class field to the user. The internal implementation clearly depicts that the length() method returns the value of then the length variable.']","['public int length()', 'public int length() {', 'return value.length;', 'public class LengthExample{', 'public static void main(String args[]){', 'String s1=""javatpoint"";', 'String s2=""python"";', 'System.out.println(""string length is: ""+s1.length());//10 is the length of javatpoint string', 'System.out.println(""string length is: ""+s2.length());//6 is the length of python string', 'public class LengthExample2 {', 'public static void main(String[] args) {', 'String str = ""Javatpoint"";', 'if(str.length()>0) {', 'System.out.println(""String is not empty and length is: ""+str.length());', 'str = """";', 'if(str.length()==0) {', 'System.out.println(""String is empty now: ""+str.length());', 'class LengthExample3', 'public static void main(String argvs[])', 'String str = ""Welcome To JavaTpoint"";', 'int size = str.length();', 'System.out.println(""Reverse of the string: "" + ""\'"" + str + ""\'"" + "" is"");', 'for(int i = 0; i < size; i++)', 'System.out.print(str.charAt(str.length() - i - 1));', 'public class LengthExample4', 'public static void main(String argvs[])', 'String str = "" Welcome To JavaTpoint "";', 'int sizeWithWhiteSpaces = str.length();', 'System.out.println(""In the string: "" + ""\'"" + str + ""\'"");', 'str = str.replace("" "", """");', 'int sizeWithoutWhiteSpaces = str.length();', 'int noOfWhieSpaces = sizeWithWhiteSpaces - sizeWithoutWhiteSpaces;', 'System.out.print(""Total number of whitespaces present are: "" + noOfWhieSpaces);']","['string length is: 10', 'string length is: 6', 'String is not empty and length is: 10', 'String is empty now: 0', ""Reverse of the string: 'Welcome To JavaTpoint' is"", 'tniopTavaJ oT emocleW', ""In the string: ' Welcome To JavaTpoint '"", 'Total number of whitespaces present are: 4']",[],[]
85,['Java String replace()'],['The Java String class replace() method returns a string replacing all the old char or CharSequence to new char or CharSequence.'],"['https://www.javatpoint.com/java-string-replaceall', 'https://www.javatpoint.com/java-string-length', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=ReplaceExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=ReplaceExample2', 'https://www.javatpoint.com/java-string-replaceall', 'https://www.javatpoint.com/java-string-length', 'https://www.javatpoint.com/java-string-replaceall']",[],[],"['Java String replace(char old, char new) method example', 'Java String replace(CharSequence target, CharSequence replacement) method example', 'Java String replace() Method Example 3', 'Java String replace() Method Example 4']","['Signature', 'Parameters', 'Returns', 'Exception Throws', 'Internal implementation']",[],"['Since JDK 1.5, a new replace() method is introduced that allows us to replace a sequence of char values.', 'There are two types of replace() methods in Java String class.', 'The second replace() method is added since JDK 1.5.', 'oldChar : old character', 'newChar : new character', 'target : target sequence of characters', 'replacement : replacement sequence of characters', 'replaced string', 'NullPointerException: if the replacement or target is equal to null.', 'FileName: ReplaceExample1.java', 'FileName: ReplaceExample2.java', 'FileName: ReplaceExample3.java', 'The replace() method throws the NullPointerException when the replacement or target is null. The following example confirms the same.', 'FileName: ReplaceExample4.java']",[],[],"['public String replace(char oldChar, char newChar)', 'public String replace(CharSequence target, CharSequence replacement)', 'public String replace(char oldChar, char newChar) {', 'if (oldChar != newChar) {', 'int len = value.length;', 'int i = -1;', 'char[] val = value; /* avoid getfield opcode */', 'while (++i < len) {', 'if (val[i] == oldChar) {', 'break;', '}', '}', 'if (i < len) {', 'char buf[] = new char[len];', 'for (int j = 0; j < i; j++) {', 'buf[j] = val[j];', '}', 'while (i < len) {', 'char c = val[i];', 'buf[i] = (c == oldChar) ? newChar : c;', 'i++;', '}', 'return new String(buf, true);', '}', '}', 'return this;', 'public String replace(CharSequence target, CharSequence replacement)', '{', 'return Pattern.compile(target.toString(), Pattern.LITERAL).matcher(', 'this).replaceAll(Matcher.quoteReplacement(replacement.toString()));', 'public class ReplaceExample1{', 'public static void main(String args[]){', 'String s1=""javatpoint is a very good website"";', ""String replaceString=s1.replace('a','e');//replaces all occurrences of 'a' to 'e'"", 'System.out.println(replaceString);', 'public class ReplaceExample2{', 'public static void main(String args[]){', 'String s1=""my name is khan my name is java"";', 'String replaceString=s1.replace(""is"",""was"");//replaces all occurrences of ""is"" to ""was""', 'System.out.println(replaceString);', 'public class ReplaceExample3 {', 'public static void main(String[] args) {', 'String str = ""oooooo-hhhh-oooooo"";', 'String rs = str.replace(""h"",""s""); // Replace \'h\' with \'s\'', 'System.out.println(rs);', 'rs = rs.replace(""s"",""h""); // Replace \'s\' with \'h\'', 'System.out.println(rs);', 'public class ReplaceExample4', 'public static void main(String argvs[])', 'String str = ""For learning Java, JavaTpoint is a very good site."";', 'int size = str.length();', 'System.out.println(str);', 'String target = null;', 'str = str.replace(target, ""JavaTpoint "");', 'System.out.println(str);']","['jevetpoint is e very good website', 'my name was khan my name was java', 'oooooo-ssss-oooooo', 'oooooo-hhhh-oooooo', 'For learning Java, JavaTpoint is a very good site.', 'Exception in thread ""main"" java.lang.NullPointerException', 'at java.base/java.lang.String.replace(String.java:2142)', 'at ReplaceExample4.main(ReplaceExample4.java:12)']",[],[]
86,['Java String replaceAll()'],['The Java String class replaceAll() method returns a string replacing all the sequence of characters matching regex and replacement string.'],"['https://www.javatpoint.com/java-string-split', 'https://www.javatpoint.com/java-string-replace', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ReplaceAllExample1', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ReplaceAllExample2', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=ReplaceAllExample3', 'https://www.javatpoint.com/java-string-split', 'https://www.javatpoint.com/java-string-replace', 'https://www.javatpoint.com/java-string-split']",[],[],"['Java String replaceAll() Method Example 4', 'Java String replaceAll() Method Example 5', 'Java String replaceAll() Method Example 6']","['Signature', 'Parameters', 'Returns', 'Exception Throws', 'Internal implementation']",[],"['regex : regular expression', 'replacement : replacement sequence of characters', 'replaced string', 'PatternSyntaxException: if the syntax of the regular expression is not valid.', ""Let's see an example to replace all the occurrences of a single character."", 'FileName: ReplaceAllExample1.java', ""Let's see an example to replace all the occurrences of a single word or set of words."", 'FileName: ReplaceAllExample2.java', ""Let's see an example to remove all the occurrences of white spaces."", 'FileName: ReplaceAllExample3.java', 'The replaceAll() method throws the PatternSyntaxException when there is an improper regular expression. Look at the following example.', 'FileName: ReplaceAllExample4.java', 'The replaceAll() method can also be used to insert spaces between characters. ', 'FileName: ReplaceAllExample5.java', 'Even the null regular expression is also not accepted by the replaceAll() method as the NullPointerException is raised.', 'FileName: ReplaceAllExample6.java']",[],[],"['public String replaceAll(String regex, String replacement)', 'public String replaceAll(String regex, String replacement) {', 'return Pattern.compile(regex).matcher(this).replaceAll(replacement);', 'public class ReplaceAllExample1{', 'public static void main(String args[]){', 'String s1=""javatpoint is a very good website"";', 'String replaceString=s1.replaceAll(""a"",""e"");//replaces all occurrences of ""a"" to ""e""', 'System.out.println(replaceString);', 'public class ReplaceAllExample2{', 'public static void main(String args[]){', 'String s1=""My name is Khan. My name is Bob. My name is Sonoo."";', 'String replaceString=s1.replaceAll(""is"",""was"");//replaces all occurrences of ""is"" to ""was""', 'System.out.println(replaceString);', 'public class ReplaceAllExample3{', 'public static void main(String args[]){', 'String s1=""My name is Khan. My name is Bob. My name is Sonoo."";', 'String replaceString=s1.replaceAll(""\\\\s"","""");', 'System.out.println(replaceString);', 'public class ReplaceAllExample4', 'public static void main(String argvs[])', 'String str = ""For learning Java, JavaTpoint is a very good site."";', 'System.out.println(str);', 'String regex = ""\\\\""; // the regular expression is not valid.', 'str = str.replaceAll(regex, ""JavaTpoint "");', 'System.out.println(str);', 'public class ReplaceAllExample5', 'public static void main(String argvs[])', 'String str = ""JavaTpoint"";', 'System.out.println(str);', 'String regex = """";', 'str = str.replaceAll(regex, "" "");', 'System.out.println(str);', 'public class ReplaceAllExample6', 'public static void main(String argvs[])', 'String str = ""JavaTpoint"";', 'System.out.println(str);', 'String regex = null; // regular expression is null', 'str = str.replaceAll(regex, "" "");', 'System.out.println(str);']","['jevetpoint is e very good website', 'My name was Khan. My name was Bob. My name was Sonoo.', 'MynameisKhan.MynameisBob.MynameisSonoo.', 'For learning Java, JavaTpoint is a very good site.', 'Exception in thread ""main"" java.util.regex.PatternSyntaxException: Unexpected internal error near index 1', '\\', 'at java.base/java.util.regex.Pattern.error(Pattern.java:2015)', 'at java.base/java.util.regex.Pattern.compile(Pattern.java:1784)', 'at java.base/java.util.regex.Pattern.(Pattern.java:1427)', 'at java.base/java.util.regex.Pattern.compile(Pattern.java:1068)', 'at java.base/java.lang.String.replaceAll(String.java:2126)', 'at ReplaceExample4.main(ReplaceExample4.java:12)', 'JavaTpoint', 'J a v a T p o i n t', 'JavaTpoint', 'Exception in thread ""main"" java.lang.NullPointerException', 'at java.base/java.util.regex.Pattern.(Pattern.java:1426)', 'at java.base/java.util.regex.Pattern.compile(Pattern.java:1068)', 'at java.base/java.lang.String.replaceAll(String.java:2126)', 'at ReplaceAllExample6.main(ReplaceAllExample6.java:13)']",[],[]
87,['Java String split()'],['The java string split() method splits this string against given regular expression and returns a char array.'],"['https://www.javatpoint.com/java-string-startswith', 'https://www.javatpoint.com/java-string-replaceall', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=SplitExample', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=SplitExample2', 'https://www.javatpoint.com/java-string-startswith', 'https://www.javatpoint.com/java-string-replaceall', 'https://www.javatpoint.com/java-string-startswith']",[],[],"['Java String split() method example', 'Java String split() method with regex and length example', 'Java String split() method with regex and length example 2']","['Internal implementation', 'Signature', 'Parameter', 'Returns', 'Throws', 'Since']",[],"['There are two signature for split() method in java string.', 'regex : regular expression to be applied on string.', 'limit : limit for the number of strings in array. If it is zero, it will returns all the strings matching regex.', 'array of strings', 'PatternSyntaxException if pattern for regular expression is invalid', 'The given example returns total number of words in a string excluding space only. It also includes special characters.', 'Here, we are passing split limit as a second argument to this function. This limits the number of splitted strings.']",[],[],"['public String[] split(String regex, int limit) {', '/* fastpath if the regex is a', '(1)one-char String and this character is not one of the', 'RegEx\'s meta characters "".$|()[{^?*+\\\\"", or', '(2)two-char String and the first char is the backslash and', 'the second is not the ascii digit or ascii letter.', '*/', 'char ch = 0;', 'if (((regex.value.length == 1 &&', '"".$|()[{^?*+\\\\"".indexOf(ch = regex.charAt(0)) == -1) ||', '(regex.length() == 2 &&', ""regex.charAt(0) == '\\\\' &&"", ""(((ch = regex.charAt(1))-'0')|('9'-ch)) < 0 &&"", ""((ch-'a')|('z'-ch)) < 0 &&"", ""((ch-'A')|('Z'-ch)) < 0)) &&"", '(ch < Character.MIN_HIGH_SURROGATE ||', 'ch > Character.MAX_LOW_SURROGATE))', '{', 'int off = 0;', 'int next = 0;', 'boolean limited = limit > 0;', 'ArrayList list = new ArrayList<>();', 'while ((next = indexOf(ch, off)) != -1) {', 'if (!limited || list.size() < limit - 1) {', 'list.add(substring(off, next));', 'off = next + 1;', '} else {    // last one', 'list.add(substring(off, value.length));', 'off = value.length;', 'break;', '}', '}', 'if (off == 0)', 'return new String[]{this};', 'if (!limited || list.size() < limit)', 'list.add(substring(off, value.length));', 'int resultSize = list.size();', 'if (limit == 0)', 'while (resultSize > 0 && list.get(resultSize - 1).length() == 0)', 'resultSize--;', 'String[] result = new String[resultSize];', 'return list.subList(0, resultSize).toArray(result);', '}', 'return Pattern.compile(regex).split(this, limit);', 'public String split(String regex)', 'public String split(String regex, int limit)', 'public class SplitExample{', 'public static void main(String args[]){', 'String s1=""java string split method by javatpoint"";', 'String[] words=s1.split(""\\\\s"");//splits the string based on whitespace', 'for(String w:words){', 'System.out.println(w);', 'public class SplitExample2{', 'public static void main(String args[]){', 'String s1=""welcome to split world"";', 'System.out.println(""returning words:"");', 'for(String w:s1.split(""\\\\s"",0)){', 'System.out.println(w);', 'System.out.println(""returning words:"");', 'for(String w:s1.split(""\\\\s"",1)){', 'System.out.println(w);', 'System.out.println(""returning words:"");', 'for(String w:s1.split(""\\\\s"",2)){', 'System.out.println(w);', 'public class SplitExample3 {', 'public static void main(String[] args) {', 'String str = ""Javatpointtt"";', 'System.out.println(""Returning words:"");', 'String[] arr = str.split(""t"", 0);', 'for (String w : arr) {', 'System.out.println(w);', 'System.out.println(""Split array length: ""+arr.length);']","['java\nstring\nsplit\nmethod\nby\njavatpoint', 'returning words:\nwelcome \nto \nsplit \nworld\nreturning words:\nwelcome to split world\nreturning words:\nwelcome \nto split world', 'Returning words:\nJava\npoin\nSplit array length: 2']",[],[]
88,['Java String startsWith()'],['The Java String class startsWith() method checks if this string starts with the given prefix. It returns true if this string starts with the given prefix; else returns false.'],"['https://www.javatpoint.com/java-string-substring', 'https://www.javatpoint.com/java-string-split', 'https://www.javatpoint.com/java-string-substring', 'https://www.javatpoint.com/java-string-split', 'https://www.javatpoint.com/java-string-substring']",[],[],"['Java String startsWith() method example', 'Java String startsWith(String prefix, int offset) Method Example', 'Java String startsWith() Method Example - 3']","['Signature', 'Parameter', 'Returns', 'Internal implementation of startsWith(String prefix, int toffset)', 'Internal Implementation of startsWith(String prefix,)']",[],"['The syntax or signature of startWith() method is given below.', 'prefix : Sequence of character', 'offset: the index from where the matching of the string prefix starts.', 'true or false', 'The startsWith() method considers the case-sensitivity of characters. Consider the following example.', 'FileName: StartsWithExample.java', 'FileName: StartsWithExample2.java', 'If we adding an empty string at the beginning of a string, then it has no impact at all on the string.', '"""" + ""Tokyo Olympics"" = ""Tokyo Olympics""s', ""It means one can say that a string in Java always starts with the empty string. Let's confirm the same with the help of Java code."", 'FileName: StartsWithExample3.java']","[""It is an overloaded method of the startWith() method that is used to pass an extra argument (offset) to the function. The method works from the passed offset. Let's see an example.""]",[],"['public boolean startsWith(String prefix)', 'public boolean startsWith(String prefix, int offset)', 'public boolean startsWith(String prefix, int toffset) {', 'char ta[] = value;', 'int to = toffset;', 'char pa[] = prefix.value;', 'int po = 0;', 'int pc = prefix.value.length;', 'if ((toffset < 0) || (toffset > value.length - pc)) {', 'return false;', '}', 'while (--pc >= 0) {', 'if (ta[to++] != pa[po++]) {', 'return false;', '}', '}', 'return true;', 'public boolean startsWith(String prefix)', 'return startsWith(prefix, 0);', 'public class StartsWithExample', 'public static void main(String args[])', 'String s1=""java string split method by javatpoint"";', 'System.out.println(s1.startsWith(""ja""));  // true', 'System.out.println(s1.startsWith(""java string""));   // true', 'System.out.println(s1.startsWith(""Java string""));  // false as \'j\' and \'J\' are different', 'public class StartsWithExample2 {', 'public static void main(String[] args) {', 'String str = ""Javatpoint"";', 'System.out.println(str.startsWith(""J"")); // True', 'System.out.println(str.startsWith(""a"")); // False', 'System.out.println(str.startsWith(""a"",1)); // True', '}', 'public class StartsWithExample3', 'public static void main(String argvs[])', 'String str = ""Tokyo Olympics"";', 'if(str.startsWith(""""))', 'System.out.println(""The string starts with the empty string."");', 'System.', 'out.println(""The string does not start with the empty string."");']","['true', 'true', 'false', 'true', 'false', 'true', 'The string starts with the empty string.']",[],[]
89,['Java String substring()'],['The Java String class substring() method returns a part of the string.'],"['https://www.javatpoint.com/java-string-tochararray', 'https://www.javatpoint.com/java-string-split', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=SubstringExample', 'https://www.javatpoint.com/java-string-tochararray', 'https://www.javatpoint.com/java-string-split', 'https://www.javatpoint.com/java-string-tochararray']",[],[],"['Java String substring() method example', 'Java String substring() Method Example 2', 'Applications of substring() Method']","['Signature', 'Parameters', 'Returns', 'Exception Throws', 'Internal implementation substring(int beginIndex)', 'Internal implementation substring(int beginIndex, int endIndex) ']",[],"['There are two types of substring methods in Java string.', ""If we don't specify endIndex, the method will return all the characters from startIndex."", 'startIndex : starting index is inclusive', 'endIndex : ending index is exclusive', 'specified string', 'StringIndexOutOfBoundsException is thrown when any one of the following conditions is met.', 'FileName: SubstringExample.java', 'FileName: SubstringExample2.java', 'FileName: SubstringExample3.java', '2) The substring() method can also be used to check whether a string is a palindrome or not.', 'FileName: SubstringExample4.java']","['We pass beginIndex and endIndex number position in the Java substring method where beginIndex is inclusive, and endIndex is exclusive. In other words, the beginIndex starts from 0, whereas the endIndex starts from 1.', '1) The substring() method can be used to do some prefix or suffix extraction. For example, we can have a list of names, and it is required to filter out names with surname as ""singh"". The following program shows the same.']",[],"['public String substring(int startIndex)  // type - 1', 'public String substring(int startIndex, int endIndex)  // type - 2', 'public String substring(int beginIndex) {', 'if (beginIndex < 0) {', 'throw new StringIndexOutOfBoundsException(beginIndex);', '}', 'int subLen = value.length - beginIndex;', 'if (subLen < 0) {', 'throw new StringIndexOutOfBoundsException(subLen);', '}', 'return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);', 'public String substring(int beginIndex, int endIndex)', 'if (beginIndex < 0)', 'throw new StringIndexOutOfBoundsException(beginIndex);', 'if (endIndex > value.length)', 'throw new StringIndexOutOfBoundsException(endIndex);', 'int subLen = endIndex - beginIndex;', 'if (subLen < 0)', 'throw new StringIndexOutOfBoundsException(subLen);', 'return ((beginIndex == 0) && (endIndex == value.length)) ? this : new String(value, beginIndex, subLen);', 'public class SubstringExample{', 'public static void main(String args[]){', 'String s1=""javatpoint"";', 'System.out.println(s1.substring(2,4));//returns va', 'System.out.println(s1.substring(2));//returns vatpoint', 'public class SubstringExample2 {', 'public static void main(String[] args) {', 'String s1=""Javatpoint"";', 'String substr = s1.substring(0); // Starts with 0 and goes to end', 'System.out.println(substr);', 'String substr2 = s1.substring(5,10); // Starts from 5 and goes to 10', 'System.out.println(substr2);', 'String substr3 = s1.substring(5,15); // Returns Exception', 'public class SubstringExample3', 'public static void main(String argvs[])', 'String str[] =', '""Praveen Kumar"",', '""Yuvraj Singh"",', '""Harbhajan Singh"",', '""Gurjit Singh"",', '""Virat Kohli"",', '""Rohit Sharma"",', '""Sandeep Singh"",', '""Milkha Singh""', 'String surName = ""Singh"";', 'int surNameSize = surName.length();', 'int size = str.length;', 'for(int j = 0; j < size; j++)', 'int length = str[j].length();', 'String subStr = str[j].substring(length - surNameSize);', 'if(subStr.equals(surName))', 'System.out.println(str[j]);', 'public class SubstringExample4', 'public boolean isPalindrome(String str)', 'int size = str.length();', 'if(size == 0 || size == 1)', 'return true;', 'String f = str.substring(0, 1);', 'String l = str.substring(size - 1);', 'if(l.equals(f))', 'return isPalindrome(str.substring(1, size - 1));', 'return false;', 'public static void main(String argvs[])', 'SubstringExample4 obj = new SubstringExample4();', 'String str[] =', '""madam"",', '""rock"",', '""noon"",', 'int size = str.length;', 'for(int j = 0; j < size; j++)', 'if(obj.isPalindrome(str[j]))', 'System.out.println(str[j] + "" is a palindrome."");', 'System.out.println(str[j] + "" is not a palindrome."");']","['va', 'vatpoint', 'Javatpoint', 'point', 'Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: begin 5, end 15, length 10', 'Yuvraj Singh', 'Harbhajan Singh', 'Gurjit Singh', 'Sandeep Singh', 'Milkha Singh', 'madam is a palindrome.', 'rock is not a palindrome.', 'eye is a palindrome.', 'noon is a palindrome.', 'kill is not a palindrome.']",[],['|||if the start index is negative value|||end index is lower than starting index.|||Either starting or ending index is greater than the total number of characters present in the string.|||']
90,['Java String toCharArray()'],"['The java string toCharArray() method converts this string into character array. It returns a newly created character array, its length is similar to this string and its contents are initialized with the characters of this string.']","['https://www.javatpoint.com/java-string-tolowercase', 'https://www.javatpoint.com/java-string-substring', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=StringToCharArrayExample', 'https://www.javatpoint.com/java-string-tolowercase', 'https://www.javatpoint.com/java-string-substring', 'https://www.javatpoint.com/java-string-tolowercase']",[],[],"['Java String toCharArray() method example', 'Java String toCharArray() Method Example 2']","['Internal implementation', 'Signature', 'Returns']",[],"['The signature or syntax of string toCharArray() method is given below:', 'character array', ""Let's see one more example of char array. It is useful method which returns char array from the string without writing any custom code. ""]",[],[],"['public char[] toCharArray() {', 'char result[] = new char[value.length];', 'System.arraycopy(value, 0, result, 0, value.length);', 'return result;', 'public char[] toCharArray()', 'public class StringToCharArrayExample{', 'public static void main(String args[]){', 'String s1=""hello"";', 'char[] ch=s1.toCharArray();', 'for(int i=0;i', 'public class StringToCharArrayExample2 {', 'public static void main(String[] args) {', 'String s1 = ""Welcome to Javatpoint"";', 'char[] ch = s1.toCharArray();', 'int len = ch.length;', 'System.out.println(""Char Array length: "" + len);', 'System.out.println(""Char Array elements: "");', 'for (int i = 0; i < len; i++) {', 'System.out.println(ch[i]);']","['hello', 'Char Array length: 21\nChar Array elements: \nW\ne\nl\nc\no\nm\ne\n \nt\no\n \nJ\na\nv\na\nt\np\no\ni\nn\nt']",[],[]
91,['Java String toLowerCase()'],"['The java string toLowerCase() method returns the string in lowercase letter. In other words, it converts all characters of the string into lower case letter.']","['https://www.javatpoint.com/java-string-touppercase', 'https://www.javatpoint.com/java-string-substring', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=StringLowerExample', 'https://www.javatpoint.com/java-string-touppercase', 'https://www.javatpoint.com/java-string-substring', 'https://www.javatpoint.com/java-string-touppercase']",[],[],"['Java String toLowerCase() method example', 'Java String toLowerCase(Locale locale) Method Example 2']","['Internal implementation', 'Signature', 'Returns']",[],"['The toLowerCase() method works same as toLowerCase(Locale.getDefault()) method. It internally uses the default locale.', 'There are two variant of toLowerCase() method. The signature or syntax of string toLowerCase() method is given below:', 'The second method variant of toLowerCase(), converts all the characters into lowercase using the rules of given Locale.', 'string in lowercase letter.']","[""This method allows us to pass locale too for the various langauges. Let's see an example below where we are getting string in english and turkish both.""]",[],"['public String toLowerCase(Locale locale) {', 'if (locale == null) {', 'throw new NullPointerException();', '}', 'int firstUpper;', 'final int len = value.length;', '/* Now check if there are any characters that need to be changed. */', 'scan: {', 'for (firstUpper = 0 ; firstUpper < len; ) {', 'char c = value[firstUpper];', 'if ((c >= Character.MIN_HIGH_SURROGATE)', '&& (c <= Character.MAX_HIGH_SURROGATE)) {', 'int supplChar = codePointAt(firstUpper);', 'if (supplChar != Character.toLowerCase(supplChar)) {', 'break scan;', '}', 'firstUpper += Character.charCount(supplChar);', '} else {', 'if (c != Character.toLowerCase(c)) {', 'break scan;', '}', 'firstUpper++;', '}', '}', 'return this;', '}', 'char[] result = new char[len];', 'int resultOffset = 0;  /* result may grow, so i+resultOffset', '* is the write location in result */', '/* Just copy the first few lowerCase characters. */', 'System.arraycopy(value, 0, result, 0, firstUpper);', 'String lang = locale.getLanguage();', 'boolean localeDependent =', '(lang == ""tr"" || lang == ""az"" || lang == ""lt"");', 'char[] lowerCharArray;', 'int lowerChar;', 'int srcChar;', 'int srcCount;', 'for (int i = firstUpper; i < len; i += srcCount) {', 'srcChar = (int)value[i];', 'if ((char)srcChar >= Character.MIN_HIGH_SURROGATE', '&& (char)srcChar <= Character.MAX_HIGH_SURROGATE) {', 'srcChar = codePointAt(i);', 'srcCount = Character.charCount(srcChar);', '} else {', 'srcCount = 1;', '}', ""if (localeDependent || srcChar == '\\u03A3') { // GREEK CAPITAL LETTER SIGMA"", 'lowerChar = ConditionalSpecialCasing.toLowerCaseEx(this, i, locale);', ""} else if (srcChar == '\\u0130') { // LATIN CAPITAL LETTER I DOT"", 'lowerChar = Character.ERROR;', '} else {', 'lowerChar = Character.toLowerCase(srcChar);', '}', 'if ((lowerChar == Character.ERROR)', '|| (lowerChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {', 'if (lowerChar == Character.ERROR) {', ""if (!localeDependent && srcChar == '\\u0130') {"", 'lowerCharArray =', 'ConditionalSpecialCasing.toLowerCaseCharArray(this, i, Locale.ENGLISH);', '} else {', 'lowerCharArray =', 'ConditionalSpecialCasing.toLowerCaseCharArray(this, i, locale);', '}', '} else if (srcCount == 2) {', 'resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;', 'continue;', '} else {', 'lowerCharArray = Character.toChars(lowerChar);', '}', '/* Grow result if needed */', 'int mapLen = lowerCharArray.length;', 'if (mapLen > srcCount) {', 'char[] result2 = new char[result.length + mapLen - srcCount];', 'System.arraycopy(result, 0, result2, 0, i + resultOffset);', 'result = result2;', '}', 'for (int x = 0; x < mapLen; ++x) {', 'result[i + resultOffset + x] = lowerCharArray[x];', '}', 'resultOffset += (mapLen - srcCount);', '} else {', 'result[i + resultOffset] = (char)lowerChar;', '}', '}', 'return new String(result, 0, len + resultOffset);', 'public String toLowerCase()', 'public String toLowerCase(Locale locale)', 'public class StringLowerExample{', 'public static void main(String args[]){', 'String s1=""JAVATPOINT HELLO stRIng"";', 'String s1lower=s1.toLowerCase();', 'System.out.println(s1lower);', 'import java.util.Locale;', 'public class StringLowerExample2 {', 'public static void main(String[] args) {', 'String s = ""JAVATPOINT HELLO stRIng"";', 'String eng = s.toLowerCase(Locale.ENGLISH);', 'System.out.println(eng);', 'String turkish = s.toLowerCase(Locale.forLanguageTag(""tr"")); // It shows i without dot', 'System.out.println(turkish);']","['javatpoint hello string', 'javatpoint hello string\njavatpo?nt hello str?ng']",[],[]
92,['Java String toUpperCase()'],"['The java string toUpperCase() method returns the string in uppercase letter. In other words, it converts all characters of the string into upper case letter.']","['https://www.javatpoint.com/java-string-trim', 'https://www.javatpoint.com/java-string-tolowercase', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=StringUpperExample', 'https://www.javatpoint.com/java-string-trim', 'https://www.javatpoint.com/java-string-tolowercase', 'https://www.javatpoint.com/java-string-trim']",[],[],"['Java String toUpperCase() method example', 'Java String toUpperCase(Locale locale) Method Example 2']","['Internal implementation', 'Signature', 'Returns']",[],"['The toUpperCase() method works same as toUpperCase(Locale.getDefault()) method. It internally uses the default locale.', 'There are two variant of toUpperCase() method. The signature or syntax of string toUpperCase() method is given below:', 'The second method variant of toUpperCase(), converts all the characters into uppercase using the rules of given Locale.', 'string in uppercase letter.']",[],[],"['public String toUpperCase(Locale locale) {', 'if (locale == null) {', 'throw new NullPointerException();', '}', 'int firstLower;', 'final int len = value.length;', '/* Now check if there are any characters that need to be changed. */', 'scan: {', 'for (firstLower = 0 ; firstLower < len; ) {', 'int c = (int)value[firstLower];', 'int srcCount;', 'if ((c >= Character.MIN_HIGH_SURROGATE)', '&& (c <= Character.MAX_HIGH_SURROGATE)) {', 'c = codePointAt(firstLower);', 'srcCount = Character.charCount(c);', '} else {', 'srcCount = 1;', '}', 'int upperCaseChar = Character.toUpperCaseEx(c);', 'if ((upperCaseChar == Character.ERROR)', '|| (c != upperCaseChar)) {', 'break scan;', '}', 'firstLower += srcCount;', '}', 'return this;', '}', 'char[] result = new char[len]; /* may grow */', 'int resultOffset = 0;  /* result may grow, so i+resultOffset', '* is the write location in result */', '/* Just copy the first few upperCase characters. */', 'System.arraycopy(value, 0, result, 0, firstLower);', 'String lang = locale.getLanguage();', 'boolean localeDependent =', '(lang == ""tr"" || lang == ""az"" || lang == ""lt"");', 'char[] upperCharArray;', 'int upperChar;', 'int srcChar;', 'int srcCount;', 'for (int i = firstLower; i < len; i += srcCount) {', 'srcChar = (int)value[i];', 'if ((char)srcChar >= Character.MIN_HIGH_SURROGATE &&', '(char)srcChar <= Character.MAX_HIGH_SURROGATE) {', 'srcChar = codePointAt(i);', 'srcCount = Character.charCount(srcChar);', '} else {', 'srcCount = 1;', '}', 'if (localeDependent) {', 'upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale);', '} else {', 'upperChar = Character.toUpperCaseEx(srcChar);', '}', 'if ((upperChar == Character.ERROR)', '|| (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {', 'if (upperChar == Character.ERROR) {', 'if (localeDependent) {', 'upperCharArray =', 'ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale);', '} else {', 'upperCharArray = Character.toUpperCaseCharArray(srcChar);', '}', '} else if (srcCount == 2) {', 'resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount;', 'continue;', '} else {', 'upperCharArray = Character.toChars(upperChar);', '}', '/* Grow result if needed */', 'int mapLen = upperCharArray.length;', 'if (mapLen > srcCount) {', 'char[] result2 = new char[result.length + mapLen - srcCount];', 'System.arraycopy(result, 0, result2, 0, i + resultOffset);', 'result = result2;', '}', 'for (int x = 0; x < mapLen; ++x) {', 'result[i + resultOffset + x] = upperCharArray[x];', '}', 'resultOffset += (mapLen - srcCount);', '} else {', 'result[i + resultOffset] = (char)upperChar;', '}', '}', 'return new String(result, 0, len + resultOffset);', 'public String toUpperCase()', 'public String toUpperCase(Locale locale)', 'public class StringUpperExample{', 'public static void main(String args[]){', 'String s1=""hello string"";', 'String s1upper=s1.toUpperCase();', 'System.out.println(s1upper);', 'import java.util.Locale;', 'public class StringUpperExample2 {', 'public static void main(String[] args) {', 'String s = ""hello string"";', 'String turkish = s.toUpperCase(Locale.forLanguageTag(""tr""));', 'String english = s.toUpperCase(Locale.forLanguageTag(""en""));', 'System.out.println(turkish);//will print I with dot on upper side', 'System.out.println(english);']","['HELLO STRING', 'HELLO STR?NG\nHELLO STRING']",[],[]
93,['Java String trim()'],"[""The Java String class trim() method eliminates leading and trailing spaces. The Unicode value of space character is '\\u0020'. The trim() method in Java string checks this Unicode value before and after the string, if it exists then the method removes the spaces and returns the omitted string.""]","['https://www.javatpoint.com/java-string-valueof', 'https://www.javatpoint.com/java-string-touppercase', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=StringTrimExample', 'https://www.javatpoint.com/java-string-valueof', 'https://www.javatpoint.com/java-touppercase', 'https://www.javatpoint.com/java-string-valueof']",[],[],"['Java String trim() Method Example', 'Java String trim() Method Example 2', 'Java String trim() Method Example 3', 'Java String trim() Method Example 4']","['Signature', 'Returns', 'Internal implementation']","[""The string trim() method doesn't omit middle spaces.""]","['The signature or syntax of the String class trim() method is given below:', 'string with omitted leading and trailing spaces', 'FileName: StringTrimExample.java', 'FileName: StringTrimExample2.java', 'The trim() can be used to check whether the string only contains white spaces or not. The following example shows the same.', 'FileName: TrimExample3.java', 'FileName: TrimExample4.java']","[""The example demonstrates the use of the trim() method. This method removes all the trailing spaces so the length of the string also reduces. Let's see an example.""]","['Since strings in Java are immutable; therefore, when the trim() method manipulates the string by trimming the whitespaces, it returns a new string. If the manipulation is not done by the trim() method, then the reference of the same string is returned. Observe the following example.']","['public String trim()', 'public String trim() {', 'int len = value.length;', 'int st = 0;', 'char[] val = value;    /* avoid getfield opcode */', ""while ((st < len) && (val[st] <= ' ')) {"", 'st++;', '}', ""while ((st < len) && (val[len - 1] <= ' ')) {"", 'len--;', '}', 'return ((st > 0) || (len < value.length)) ? substring(st, len) : this;', '}', 'public class StringTrimExample{', 'public static void main(String args[]){', 'String s1=""  hello string   "";', 'System.out.println(s1+""javatpoint"");//without trim()', 'System.out.println(s1.trim()+""javatpoint"");//with trim()', 'public class StringTrimExample2 {', 'public static void main(String[] args) {', 'String s1 =""  hello java string   "";', 'System.out.println(s1.length());', 'System.out.println(s1); //Without trim()', 'String tr = s1.trim();', 'System.out.println(tr.length());', 'System.out.println(tr); //With trim()', '}', 'public class TrimExample3', 'public static void main(String argvs[])', 'String str = "" abc "";', 'if((str.trim()).length() > 0)', 'System.out.println(""The string contains characters other than white spaces \\n"");', 'System.out.println(""The string contains only white spaces \\n"");', 'str = ""    "";', 'if((str.trim()).length() > 0)', 'System.out.println(""The string contains characters other than white spaces \\n"");', 'System.out.println(""The string contains only white spaces \\n"");', 'public class TrimExample4', 'public static void main(String argvs[])', 'String str = "" abc "";', 'String str1 = str.trim();', 'System.out.println(str.hashCode());', 'System.out.println(str1.hashCode() + ""\\n"");', 'String s = ""xyz"";', 'String s1 = s.trim();', 'System.out.println(s.hashCode());', 'System.out.println(s1.hashCode());']","['hello string   javatpoint', 'hello stringjavatpoint', '22', 'hello java string', '17', 'hello java string', 'The string contains characters other than white spaces', 'The string contains only white spaces', 'The string contains characters other than white spaces', 'The string contains only white spaces']",[],[]
94,['Java String valueOf()'],"['The java string valueOf() method converts different types of values into string. By the help of string valueOf() method, you can convert int to string, long to string, boolean to string, character to string, float to string, double to string, object to string and char array to string.']","['https://www.javatpoint.com/java-regex', 'https://www.javatpoint.com/java-string-trim', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=StringValueOfExample', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=StringValueOfExample2', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=StringValueOfExample3', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=StringValueOfExample4', 'https://www.javatpoint.com/https://compiler.javatpoint.com/opr/test.jsp?filename=StringValueOfExample5', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/java-regex', 'https://www.javatpoint.com/java-string-trim', 'https://www.javatpoint.com/java-regex']",[],[],"['Java String valueOf() method example', 'Java String valueOf(boolean bol) Method Example', 'Java String valueOf(char ch) Method Example', 'Java String valueOf(float f) and valueOf(double d)', 'Java String valueOf() Complete Examples']","['Internal implementation', 'Signature', 'Returns']",[],"['The signature or syntax of string valueOf() method is given below:', 'string representation of given value', ""This is a boolean version of overloaded valueOf() method. It takes boolean value and returns a string. Let's see an example."", ""This is a char version of overloaded valueOf() method. It takes char value and returns a string. Let's see an example."", ""This is a float version of overloaded valueOf() method. It takes float value and returns a string. Let's see an example."", ""Let's see an example where we are converting all primitives and objects into strings.""]",[],[],"['public static String valueOf(Object obj) {', 'return (obj == null) ? ""null"" : obj.toString();', 'public static String valueOf(boolean b)', 'public static String valueOf(char c)', 'public static String valueOf(char[] c)', 'public static String valueOf(int i)', 'public static String valueOf(long l)', 'public static String valueOf(float f)', 'public static String valueOf(double d)', 'public static String valueOf(Object o)', 'public class StringValueOfExample{', 'public static void main(String args[]){', 'int value=30;', 'String s1=String.valueOf(value);', 'System.out.println(s1+10);//concatenating string with 10', 'public class StringValueOfExample2 {', 'public static void main(String[] args) {', 'boolean bol = true;', 'boolean bol2 = false;', 'String s1 = String.valueOf(bol);', 'String s2 = String.valueOf(bol2);', 'System.out.println(s1);', 'System.out.println(s2);', 'public class StringValueOfExample3 {', 'public static void main(String[] args) {', ""char ch1 = 'A';"", ""char ch2 = 'B';"", 'String s1 = String.valueOf(ch1);', 'String s2 = String.valueOf(ch2);', 'System.out.println(s1);', 'System.out.println(s2);', 'public class StringValueOfExample4 {', 'public static void main(String[] args) {', 'float f  = 10.05f;', 'double d = 10.02;', 'String s1 = String.valueOf(f);', 'String s2 = String.valueOf(d);', 'System.out.println(s1);', 'System.out.println(s2);', 'public class StringValueOfExample5 {', 'public static void main(String[] args) {', 'boolean b1=true;', 'byte b2=11;', 'short sh = 12;', 'int i = 13;', 'long l = 14L;', 'float f = 15.5f;', 'double d = 16.5d;', ""char chr[]={'j','a','v','a'};"", 'StringValueOfExample5 obj=new StringValueOfExample5();', 'String s1 = String.valueOf(b1);', 'String s2 = String.valueOf(b2);', 'String s3 = String.valueOf(sh);', 'String s4 = String.valueOf(i);', 'String s5 = String.valueOf(l);', 'String s6 = String.valueOf(f);', 'String s7 = String.valueOf(d);', 'String s8 = String.valueOf(chr);', 'String s9 = String.valueOf(obj);', 'System.out.println(s1);', 'System.out.println(s2);', 'System.out.println(s3);', 'System.out.println(s4);', 'System.out.println(s5);', 'System.out.println(s6);', 'System.out.println(s7);', 'System.out.println(s8);', 'System.out.println(s9);']","['3010', 'true\nfalse', 'A\nB', '10.05\n10.02', 'true\n11\n12\n13\n14\n15.5\n16.5\njava\n[email\xa0protected]']",[],[]
95,['Java Regex'],['The Java Regex or Regular Expression is an API to define a pattern for searching or manipulating strings.'],"['https://www.javatpoint.com/exception-handling-in-java', 'https://www.javatpoint.com/string-tokenizer-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=RegexExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=RegexExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=RegexExample3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=RegexExample4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=RegexExample5', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=RegexExample6', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=RegexExample7', 'https://www.javatpoint.com/exception-handling-in-java', 'https://www.javatpoint.com/string-tokenizer-in-java', 'https://www.javatpoint.com/exception-handling-in-java']",['https://static.javatpoint.com/images/java-regex-api.jpg'],[],"['Matcher class', 'Pattern class', 'Regular Expression . Example', 'Regex Character classes', 'Regular Expression Character classes Example', 'Regex Quantifiers', 'Regular Expression Character classes and Quantifiers Example', 'Regex Metacharacters', 'Regular Expression Metacharacters Example', 'Regular Expression Question 1', 'Regular Expression Question 2', 'Java Regex Finder Example']",['Example of Java Regular Expressions'],"['java.util.regex package', 'Output']","['Java Regex API provides 1 interface and 3 classes in java.util.regex package.', 'It implements the MatchResult interface. It is a regex engine which is used to perform match operations on a character sequence.', 'It is the compiled version of a regular expression. It is used to define a pattern for the regex engine.', 'There are three ways to write the regex example in Java.', 'The . (dot) represents a single character.', 'The quantifiers specify the number of occurrences of a character. ', 'The regular expression metacharacters work as shortcodes.']","['It is widely used to define the constraint on strings such as password and email validation. After learning Java regex tutorial, you will be able to test your regular expressions by the Java Regex Tester Tool.', 'The Matcher and Pattern classes provide the facility of Java regular expression. The java.util.regex package provides following classes and interfaces for regular expressions. ']",[],"['import java.util.regex.*;', 'public class RegexExample1{', 'public static void main(String args[]){', 'Pattern p = Pattern.compile("".s"");//. represents single character', 'Matcher m = p.matcher(""as"");', 'boolean b = m.matches();', 'boolean b2=Pattern.compile("".s"").matcher(""as"").matches();', 'boolean b3 = Pattern.matches("".s"", ""as"");', 'System.out.println(b+"" ""+b2+"" ""+b3);', 'import java.util.regex.*;', 'class RegexExample2{', 'public static void main(String args[]){', 'System.out.println(Pattern.matches("".s"", ""as""));//true (2nd char is s)', 'System.out.println(Pattern.matches("".s"", ""mk""));//false (2nd char is not s)', 'System.out.println(Pattern.matches("".s"", ""mst""));//false (has more than 2 char)', 'System.out.println(Pattern.matches("".s"", ""amms""));//false (has more than 2 char)', 'System.out.println(Pattern.matches(""..s"", ""mas""));//true (3rd char is s)', 'import java.util.regex.*;', 'class RegexExample3{', 'public static void main(String args[]){', 'System.out.println(Pattern.matches(""[amn]"", ""abcd""));//false (not a or m or n)', 'System.out.println(Pattern.matches(""[amn]"", ""a""));//true (among a or m or n)', 'System.out.println(Pattern.matches(""[amn]"", ""ammmna""));//false (m and a comes more than once)', 'import java.util.regex.*;', 'class RegexExample4{', 'public static void main(String args[]){', 'System.out.println(""? quantifier ...."");', 'System.out.println(Pattern.matches(""[amn]?"", ""a""));//true (a or m or n comes one time)', 'System.out.println(Pattern.matches(""[amn]?"", ""aaa""));//false (a comes more than one time)', 'System.out.println(Pattern.matches(""[amn]?"", ""aammmnn""));//false (a m and n comes more than one time)', 'System.out.println(Pattern.matches(""[amn]?"", ""aazzta""));//false (a comes more than one time)', 'System.out.println(Pattern.matches(""[amn]?"", ""am""));//false (a or m or n must come one time)', 'System.out.println(""+ quantifier ...."");', 'System.out.println(Pattern.matches(""[amn]+"", ""a""));//true (a or m or n once or more times)', 'System.out.println(Pattern.matches(""[amn]+"", ""aaa""));//true (a comes more than one time)', 'System.out.println(Pattern.matches(""[amn]+"", ""aammmnn""));//true (a or m or n comes more than once)', 'System.out.println(Pattern.matches(""[amn]+"", ""aazzta""));//false (z and t are not matching pattern)', 'System.out.println(""* quantifier ...."");', 'System.out.println(Pattern.matches(""[amn]*"", ""ammmna""));//true (a or m or n may come zero or more times)', 'import java.util.regex.*;', 'class RegexExample5{', 'public static void main(String args[]){', 'System.out.println(""metacharacters d...."");\\\\d means digit', 'System.out.println(Pattern.matches(""\\\\d"", ""abc""));//false (non-digit)', 'System.out.println(Pattern.matches(""\\\\d"", ""1""));//true (digit and comes once)', 'System.out.println(Pattern.matches(""\\\\d"", ""4443""));//false (digit but comes more than once)', 'System.out.println(Pattern.matches(""\\\\d"", ""323abc""));//false (digit and char)', 'System.out.println(""metacharacters D...."");\\\\D means non-digit', 'System.out.println(Pattern.matches(""\\\\D"", ""abc""));//false (non-digit but comes more than once)', 'System.out.println(Pattern.matches(""\\\\D"", ""1""));//false (digit)', 'System.out.println(Pattern.matches(""\\\\D"", ""4443""));//false (digit)', 'System.out.println(Pattern.matches(""\\\\D"", ""323abc""));//false (digit and char)', 'System.out.println(Pattern.matches(""\\\\D"", ""m""));//true (non-digit and comes once)', 'System.out.println(""metacharacters D with quantifier...."");', 'System.out.println(Pattern.matches(""\\\\D*"", ""mak""));//true (non-digit and may come 0 or more times)', '/*Create a regular expression that accepts alphanumeric characters only.', 'Its length must be six characters long only.*/', 'import java.util.regex.*;', 'class RegexExample6{', 'public static void main(String args[]){', 'System.out.println(Pattern.matches(""[a-zA-Z0-9]{6}"", ""arun32""));//true', 'System.out.println(Pattern.matches(""[a-zA-Z0-9]{6}"", ""kkvarun32""));//false (more than 6 char)', 'System.out.println(Pattern.matches(""[a-zA-Z0-9]{6}"", ""JA2Uk2""));//true', 'System.out.println(Pattern.matches(""[a-zA-Z0-9]{6}"", ""arun$2""));//false ($ is not matched)', '/*Create a regular expression that accepts 10 digit numeric characters', 'starting with 7, 8 or 9 only.*/', 'import java.util.regex.*;', 'class RegexExample7{', 'public static void main(String args[]){', 'System.out.println(""by character classes and quantifiers ..."");', 'System.out.println(Pattern.matches(""[789]{1}[0-9]{9}"", ""9953038949""));//true', 'System.out.println(Pattern.matches(""[789][0-9]{9}"", ""9953038949""));//true', 'System.out.println(Pattern.matches(""[789][0-9]{9}"", ""99530389490""));//false (11 characters)', 'System.out.println(Pattern.matches(""[789][0-9]{9}"", ""6953038949""));//false (starts from 6)', 'System.out.println(Pattern.matches(""[789][0-9]{9}"", ""8853038949""));//true', 'System.out.println(""by metacharacters ..."");', 'System.out.println(Pattern.matches(""[789]{1}\\\\d{9}"", ""8853038949""));//true', 'System.out.println(Pattern.matches(""[789]{1}\\\\d{9}"", ""3853038949""));//false (starts from 3)', 'import java.util.regex.Pattern;', 'import java.util.Scanner;', 'import java.util.regex.Matcher;', 'public class RegexExample8{', 'public static void main(String[] args){', 'Scanner sc=new Scanner(System.in);', 'while (true) {', 'System.out.println(""Enter regex pattern:"");', 'Pattern pattern = Pattern.compile(sc.nextLine());', 'System.out.println(""Enter text:"");', 'Matcher matcher = pattern.matcher(sc.nextLine());', 'boolean found = false;', 'while (matcher.find()) {', 'System.out.println(""I found the text ""+matcher.group()+"" starting at index ""+', 'matcher.start()+"" and ending at index ""+matcher.end());', 'found = true;', '}', 'if(!found){', 'System.out.println(""No match found."");', '}', '}']","['true true true', 'Enter regex pattern: java\nEnter text: this is java, do you know java\nI found the text java starting at index 8 and ending at index 12\nI found the text java starting at index 26 and ending at index 30']","['o.MethodDescriptio&&&boolean matches()test whether the regular expression matches the pattern&&&boolean find()finds the next expression that matches the pattern&&&boolean find(int start)finds the next expression that matches the pattern from the given start number&&&String group()returns the matched subsequence&&&int start()returns the starting index of the matched subsequence&&&int end()returns the ending index of the matched subsequence&&&int groupCount()returns the total number of the matched subsequence', 'o.MethodDescriptio&&&static Pattern compile(String regex)compiles the given regex and returns the instance of the Pattern&&&Matcher matcher(CharSequence input)creates a matcher that matches the given input with the pattern&&&static boolean matches(String regex, CharSequence input)It works as the combination of compile and matcher methods. It compiles the regular expression and matches the given input with the pattern&&&String[] split(CharSequence input)splits the given input string around matches of given pattern.&&&String pattern()returns the regex pattern', 'o.Character ClassDescriptio&&&[abc]a, b, or c (simple class&&&[^abc]Any character except a, b, or c (negation&&&[a-zA-Z]a through z or A through Z, inclusive (range&&&[a-d[m-p]]a through d, or m through p: [a-dm-p] (union&&&[a-z&&[def]]d, e, or f (intersection&&&[a-z&&[^bc]]a through z, except for b and c: [ad-z] (subtraction&&&[a-z&&[^m-p]]a through z, and not m through p: [a-lq-z](subtraction', 'egexDescriptio&&&?X occurs once or not at al&&&+X occurs once or more time&&&*X occurs zero or more time&&&{n}X occurs n times onl&&&{n,}X occurs n or more time&&&{y,z}X occurs at least y times but less than z time', 'egexDescriptio&&&Any character (may or may not match terminator&&&dAny digits, short of [0-9&&&DAny non-digit, short for [^0-9&&&sAny whitespace character, short for [\\t\\n\\x0B\\f\\r&&&SAny non-whitespace character, short for [^\\s&&&wAny word character, short for [a-zA-Z_0-9&&&WAny non-word character, short for [^\\w&&&bA word boundar&&&BA non word boundar']",['|||MatchResult interface|||Matcher class|||Pattern class|||PatternSyntaxException class|||']
96,['Exception Handling in Java'],['The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors so that the normal flow of the application can be maintained.'],"['https://www.javatpoint.com/try-catch-block', 'https://www.javatpoint.com/java-regex', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#exceptionad', 'https://www.javatpoint.com/#exceptionhierarchy', 'https://www.javatpoint.com/#exceptiontypes', 'https://www.javatpoint.com/#exceptionexample', 'https://www.javatpoint.com/#exceptionscenarios', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=JavaExceptionExample', 'https://www.javatpoint.com/java-variables', 'https://www.javatpoint.com/https://www.javatpoint.com/java-string', 'https://www.javatpoint.com/try-catch-block', 'https://www.javatpoint.com/multiple-catch-block-in-java', 'https://www.javatpoint.com/nested-try-block', 'https://www.javatpoint.com/finally-block-in-exception-handling', 'https://www.javatpoint.com/throw-keyword', 'https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws', 'https://www.javatpoint.com/difference-between-throw-and-throws-in-java', 'https://www.javatpoint.com/difference-between-final-finally-and-finalize', 'https://www.javatpoint.com/exception-handling-with-method-overriding', 'https://www.javatpoint.com/custom-exception', 'https://www.javatpoint.com/try-catch-block', 'https://www.javatpoint.com/java-regex', 'https://www.javatpoint.com/try-catch-block']","['https://static.javatpoint.com/core/images/hierarchy-of-exception-handling.png', 'https://static.javatpoint.com/core/images/types-of-exception-handling.png']",['https://www.youtube.com/embed/ohpCMpderow'],"['What is Exception in Java? ', 'What is Exception Handling?', 'Hierarchy of Java Exception classes', 'Difference between Checked and Unchecked Exceptions', 'Java Exception Keywords', 'Java Exception Handling Example', 'Common Scenarios of Java Exceptions', 'Java Exceptions Index']","['Advantage of Exception Handling', 'Types of Java Exceptions', '1) Checked Exception', '2) Unchecked Exception', '3) Error', '1) A scenario where ArithmeticException occurs', '2) A scenario where NullPointerException occurs', '3) A scenario where NumberFormatException occurs', '4) A scenario where ArrayIndexOutOfBoundsException occurs']",[],"[""In this tutorial, we will learn about Java exceptions, it's types, and the difference between checked and unchecked exceptions."", 'Dictionary Meaning: Exception is an abnormal condition.', 'In Java, an exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime.', 'Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, IOException, SQLException, RemoteException, etc.', 'Error is irrecoverable. Some example of errors are OutOfMemoryError, VirtualMachineError, AssertionError etc.', 'Java provides five keywords that are used to handle the exception. The following table describes each. ', ""Let's see an example of Java Exception Handling in which we are using a try-catch statement to handle the exception."", 'JavaExceptionExample.java', 'In the above example, 100/0 raises an ArithmeticException which is handled by a try-catch block.', 'There are given some scenarios where unchecked exceptions may occur. They are as follows:', 'If we divide any number by zero, there occurs an ArithmeticException.', 'If we have a null value in any variable, performing any operation on the variable throws a NullPointerException.']","[""The core advantage of exception handling is to maintain the normal flow of the application. An exception normally disrupts the normal flow of the application; that is why we need to handle exceptions. Let's consider a scenario:"", 'The java.lang.Throwable class is the root class of Java Exception hierarchy inherited by two subclasses: Exception and Error. The hierarchy of Java Exception classes is given below:', 'There are mainly two types of exceptions: checked and unchecked. An error is considered as the unchecked exception. However, according to Oracle, there are three types of exceptions namely:', 'The classes that directly inherit the Throwable class except RuntimeException and Error are known as checked exceptions. For example, IOException, SQLException, etc. Checked exceptions are checked at compile-time.', 'If the formatting of any variable or number is mismatched, it may result into NumberFormatException. Suppose we have a string variable that has characters; converting this variable into digit will cause NumberFormatException.', ""When an array exceeds to it's size, the ArrayIndexOutOfBoundsException occurs. there may be other reasons to occur ArrayIndexOutOfBoundsException. Consider the following statements. ""]","['Suppose there are 10 statements in a Java program and an exception occurs at statement 5; the rest of the code will not be executed, i.e., statements 6 to 10 will not be executed. However, when we perform exception handling, the rest of the statements will be executed. That is why we use exception handling in Java.', 'The classes that inherit the RuntimeException are known as unchecked exceptions. For example, ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, etc. Unchecked exceptions are not checked at compile-time, but they are checked at runtime.']","['statement 1;', 'statement 2;', 'statement 3;', 'statement 4;', 'statement 5;//exception occurs', 'statement 6;', 'statement 7;', 'statement 8;', 'statement 9;', 'statement 10;', 'public class JavaExceptionExample{', 'public static void main(String args[]){', 'try{', 'int data=100/0;', '}catch(ArithmeticException e){System.out.println(e);}', 'System.out.println(""rest of the code..."");', 'int a=50/0;//ArithmeticException', 'String s=null;', 'System.out.println(s.length());//NullPointerException', 'String s=""abc"";', 'int i=Integer.parseInt(s);//NumberFormatException', 'int a[]=new int[5];', 'a[10]=50; //ArrayIndexOutOfBoundsException']","['Exception in thread main java.lang.ArithmeticException:/ by zero', 'rest of the code...']","['eywordDescriptio&&&ryThe ""try"" keyword is used to specify a block where we should place an exception code. It means we can\'t use try block alone. The try block must be followed by either catch or finally&&&atchThe ""catch"" block is used to handle the exception. It must be preceded by try block which means we can\'t use catch block alone. It can be followed by finally block later&&&inallyThe ""finally"" block is used to execute the necessary code of the program. It is executed whether an exception is handled or not&&&hrowThe ""throw"" keyword is used to throw an exception&&&hrowsThe ""throws"" keyword is used to declare exceptions. It specifies that there may occur an exception in the method. It doesn\'t throw an exception. It is always used with method signature']",['|||What is the difference between checked and unchecked exceptions?|||What happens behind the code int data=50/0;?|||Why use multiple catch block?|||Is there any possibility when the finally block is not executed?|||What is exception propagation?|||What is the difference between the throw and throws keyword?|||What are the 4 rules for using exception handling with method overriding?|||&&&|||Exception Handling|||Advantage of Exception Handling|||Hierarchy of Exception classes|||Types of Exception|||Exception Example|||Scenarios where an exception may occur||||||Checked Exception|||Unchecked Exception|||Error||||||Java Try-Catch Block|||Java Multiple Catch Block|||Java Nested Try|||Java Finally Block|||Java Throw Keyword|||Java Exception Propagation|||Java Throws Keyword|||Java Throw vs Throws|||Java Final vs Finally vs Finalize|||Java Exception Handling with Method Overriding|||Java Custom Exceptions|||']
97,['Java try-catch block'],['Java try block is used to enclose the code that might throw an exception. It must be used within the method. '],"['https://www.javatpoint.com/multiple-catch-block-in-java', 'https://www.javatpoint.com/exception-handling-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample5', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample6', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample7', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample8', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample9', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TryCatchExample10', 'https://www.javatpoint.com/multiple-catch-block-in-java', 'https://www.javatpoint.com/exception-handling-in-java', 'https://www.javatpoint.com/multiple-catch-block-in-java']",['https://static.javatpoint.com/core/images/java-try-catch-block.png'],['https://www.youtube.com/embed/VIbZRUjh2d0?list=PLHuIqV4DwPicArdMjI2YI5Hu5c2TnMgvV'],"['Java try block', 'Java catch block', 'Internal Working of Java try-catch block', 'Problem without exception handling', 'Solution by exception handling']","['Syntax of Java try-catch', 'Syntax of try-finally block', 'Example 1', 'Example 2', 'Example 3', 'Example 4', 'Example 5', 'Example 6', 'Example 7', 'Example 8', 'Example 9', 'Example 10']",[],"['Java try block must be followed by either catch or finally block.', 'The catch block must be used after the try block only. You can use multiple catch block with a single try block.', 'But if the application programmer handles the exception, the normal flow of the application is maintained, i.e., rest of the code is executed.', ""Let's try to understand the problem if we don't use a try-catch block."", 'TryCatchExample1.java', 'As displayed in the above example, the rest of the code is not executed (in such case, the rest of the code statement is not printed).', ""There might be 100 lines of code after the exception. If the exception is not handled, all the code below the exception won't be executed."", ""Let's see the solution of the above problem by a java try-catch block."", 'TryCatchExample2.java', 'As displayed in the above example, the rest of the code is executed, i.e., the rest of the code statement is printed.', 'In this example, we also kept the code in a try block that will not throw an exception.', 'TryCatchExample3.java', 'Here, we can see that if an exception occurs in the try block, the rest of the block code will not execute.', 'Here, we handle the exception using the parent class exception.', 'TryCatchExample4.java', ""Let's see an example to print a custom message on exception."", 'TryCatchExample5.java', ""Let's see an example to resolve the exception in a catch block."", 'TryCatchExample6.java', 'In this example, along with try block, we also enclose exception code in a catch block.', 'TryCatchExample7.java', 'In this example, we handle the generated exception (Arithmetic Exception) with a different type of exception class (ArrayIndexOutOfBoundsException).', 'TryCatchExample8.java', ""Let's see an example to handle another unchecked exception."", 'TryCatchExample9.java', ""Let's see an example to handle checked exception. "", 'TryCatchExample10.java']","['If an exception occurs at the particular statement in the try block, the rest of the block code will not execute. So, it is recommended not to keep the code in try block that will not throw an exception.', 'The JVM firstly checks whether the exception is handled or not. If exception is not handled, JVM provides a default exception handler that performs the following tasks:', ""Here, we can see that the catch block didn't contain the exception code. So, enclose exception code within a try block and use catch block only to handle the exceptions.""]","['Java catch block is used to handle the Exception by declaring the type of exception within the parameter. The declared exception must be the parent class exception ( i.e., Exception) or the generated exception type. However, the good approach is to declare the generated type of exception.']","['}catch(Exception_class_Name ref){}', '}finally{}', 'public class TryCatchExample1 {', 'public static void main(String[] args) {', 'int data=50/0; //may throw exception', 'System.out.println(""rest of the code"");', 'public class TryCatchExample2 {', 'public static void main(String[] args) {', 'int data=50/0; //may throw exception', 'catch(ArithmeticException e)', 'System.out.println(e);', 'System.out.println(""rest of the code"");', 'public class TryCatchExample3 {', 'public static void main(String[] args) {', 'int data=50/0; //may throw exception', 'System.out.println(""rest of the code"");', 'catch(ArithmeticException e)', 'System.out.println(e);', 'public class TryCatchExample4 {', 'public static void main(String[] args) {', 'int data=50/0; //may throw exception', 'catch(Exception e)', 'System.out.println(e);', 'System.out.println(""rest of the code"");', 'public class TryCatchExample5 {', 'public static void main(String[] args) {', 'int data=50/0; //may throw exception', 'catch(Exception e)', 'System.out.println(""Can\'t divided by zero"");', 'public class TryCatchExample6 {', 'public static void main(String[] args) {', 'int i=50;', 'int j=0;', 'int data;', 'data=i/j; //may throw exception', 'catch(Exception e)', 'System.out.println(i/(j+2));', 'public class TryCatchExample7 {', 'public static void main(String[] args) {', 'int data1=50/0; //may throw exception', 'catch(Exception e)', 'int data2=50/0; //may throw exception', 'System.out.println(""rest of the code"");', 'public class TryCatchExample8 {', 'public static void main(String[] args) {', 'int data=50/0; //may throw exception', 'catch(ArrayIndexOutOfBoundsException e)', 'System.out.println(e);', 'System.out.println(""rest of the code"");', 'public class TryCatchExample9 {', 'public static void main(String[] args) {', 'int arr[]= {1,3,5,7};', 'System.out.println(arr[10]); //may throw exception', 'catch(ArrayIndexOutOfBoundsException e)', 'System.out.println(e);', 'System.out.println(""rest of the code"");', 'import java.io.FileNotFoundException;', 'import java.io.PrintWriter;', 'public class TryCatchExample10 {', 'public static void main(String[] args) {', 'PrintWriter pw;', 'try {', 'pw = new PrintWriter(""jtp.txt""); //may throw exception', 'pw.println(""saved"");', 'catch (FileNotFoundException e) {', 'System.out.println(e);', 'System.out.println(""File saved successfully"");']","['Exception in thread ""main"" java.lang.ArithmeticException: / by zero', 'java.lang.ArithmeticException: / by zero', 'rest of the code', 'java.lang.ArithmeticException: / by zero', 'java.lang.ArithmeticException: / by zero', 'rest of the code', ""Can't divided by zero"", '25', 'Exception in thread ""main"" java.lang.ArithmeticException: / by zero', 'Exception in thread ""main"" java.lang.ArithmeticException: / by zero', 'java.lang.ArrayIndexOutOfBoundsException: 10', 'rest of the code', 'File saved successfully']",[],['|||Prints out exception description.|||Prints the stack trace (Hierarchy of methods where the exception occurred).|||Causes the program to terminate.|||']
98,['Java Catch Multiple Exceptions'],"['A try block can be followed by one or more catch blocks. Each catch block must contain a different exception handler. So, if you have to perform different tasks at the occurrence of different exceptions, use java multi-catch block.']","['https://www.javatpoint.com/nested-try-block', 'https://www.javatpoint.com/try-catch-block', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=MultipleCatchBlock1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=MultipleCatchBlock2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=MultipleCatchBlock3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=MultipleCatchBlock4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=MultipleCatchBlock5', 'https://www.javatpoint.com/nested-try-block', 'https://www.javatpoint.com/try-catch-block', 'https://www.javatpoint.com/nested-try-block']",['https://static.javatpoint.com/core/images/multiple-catch-block-in-java.png'],[],"['Java Multi-catch block', 'Points to remember']","['Flowchart of Multi-catch Block', 'Example 1', 'Example 2', 'Example 4', 'Example 5']",[],"[""Let's see a simple example of java multi-catch block."", 'MultipleCatchBlock1.java', 'MultipleCatchBlock2.java', 'In this example, try block contains two exceptions. But at a time only one exception occurs and its corresponding catch block is executed.', 'MultipleCatchBlock3.java', 'MultipleCatchBlock4.java', ""Let's see an example, to handle the exception without maintaining the order of exceptions (i.e. from most specific to most general)."", 'MultipleCatchBlock5.java']","[""In this example, we generate NullPointerException, but didn't provide the corresponding exception type. In such case, the catch block containing the parent exception class Exception will invoked.""]",[],"['public class MultipleCatchBlock1 {', 'public static void main(String[] args) {', 'try{', 'int a[]=new int[5];', 'a[5]=30/0;', '}', 'catch(ArithmeticException e)', '{', 'System.out.println(""Arithmetic Exception occurs"");', '}', 'catch(ArrayIndexOutOfBoundsException e)', '{', 'System.out.println(""ArrayIndexOutOfBounds Exception occurs"");', '}', 'catch(Exception e)', '{', 'System.out.println(""Parent Exception occurs"");', '}', 'System.out.println(""rest of the code"");', 'public class MultipleCatchBlock2 {', 'public static void main(String[] args) {', 'try{', 'int a[]=new int[5];', 'System.out.println(a[10]);', '}', 'catch(ArithmeticException e)', '{', 'System.out.println(""Arithmetic Exception occurs"");', '}', 'catch(ArrayIndexOutOfBoundsException e)', '{', 'System.out.println(""ArrayIndexOutOfBounds Exception occurs"");', '}', 'catch(Exception e)', '{', 'System.out.println(""Parent Exception occurs"");', '}', 'System.out.println(""rest of the code"");', 'public class MultipleCatchBlock3 {', 'public static void main(String[] args) {', 'try{', 'int a[]=new int[5];', 'a[5]=30/0;', 'System.out.println(a[10]);', '}', 'catch(ArithmeticException e)', '{', 'System.out.println(""Arithmetic Exception occurs"");', '}', 'catch(ArrayIndexOutOfBoundsException e)', '{', 'System.out.println(""ArrayIndexOutOfBounds Exception occurs"");', '}', 'catch(Exception e)', '{', 'System.out.println(""Parent Exception occurs"");', '}', 'System.out.println(""rest of the code"");', 'public class MultipleCatchBlock4 {', 'public static void main(String[] args) {', 'try{', 'String s=null;', 'System.out.println(s.length());', '}', 'catch(ArithmeticException e)', '{', 'System.out.println(""Arithmetic Exception occurs"");', '}', 'catch(ArrayIndexOutOfBoundsException e)', '{', 'System.out.println(""ArrayIndexOutOfBounds Exception occurs"");', '}', 'catch(Exception e)', '{', 'System.out.println(""Parent Exception occurs"");', '}', 'System.out.println(""rest of the code"");', 'class MultipleCatchBlock5{', 'public static void main(String args[]){', 'try{', 'int a[]=new int[5];', 'a[5]=30/0;', 'catch(Exception e){System.out.println(""common task completed"");}', 'catch(ArithmeticException e){System.out.println(""task1 is completed"");}', 'catch(ArrayIndexOutOfBoundsException e){System.out.println(""task 2 completed"");}', 'System.out.println(""rest of the code..."");']","['Arithmetic Exception occurs', 'rest of the code', 'ArrayIndexOutOfBounds Exception occurs', 'rest of the code', 'Arithmetic Exception occurs', 'rest of the code', 'Parent Exception occurs', 'rest of the code', 'Compile-time error']",[],"['|||At a time only one exception occurs and at a time only one catch block is executed.|||All catch blocks must be ordered from most specific to most general, i.e. catch for ArithmeticException must come before catch for Exception.|||']"
99,['Java Nested try block'],"['In Java, using a try block inside another try block is permitted. It is called as nested try block. Every statement that we enter a statement in try block, context of that exception is pushed onto the stack.']","['https://www.javatpoint.com/finally-block-in-exception-handling', 'https://www.javatpoint.com/multiple-catch-block-in-java', 'https://www.javatpoint.com/finally-block-in-exception-handling', 'https://www.javatpoint.com/multiple-catch-block-in-java', 'https://www.javatpoint.com/finally-block-in-exception-handling']","['https://static.javatpoint.com/core/images/nested-try-block.png', 'https://static.javatpoint.com/core/images/nested-try-block2.png']",[],['Java Nested try Example'],"['Why use nested try block', 'Syntax:', 'Example 1', 'Example 2']",[],"[""Let's see an example where we place a try block within another try block for two different exceptions."", 'NestedTryBlock.java', 'NestedTryBlock.java']","['For example, the inner try block can be used to handle ArrayIndexOutOfBoundsException while the outer try block can handle the ArithemeticException (division by zero).', 'Sometimes a situation may arise where a part of a block may cause one error and the entire block itself may cause another error. In such cases, exception handlers have to be nested.', 'When any try block does not have a catch block for a particular exception, then the catch block of the outer (parent) try block are checked for that exception, and if it matches, the catch block of outer try block is executed.', 'If none of the catch block specified in the code is unable to handle the exception, then the Java runtime system will handle the exception. Then it displays the system generated message for that exception.']","[""Let's consider the following example. Here the try block within nested try block (inner try block 2) do not handle the exception. The control is then transferred to its parent try block (inner try block 1). If it does not handle the exception, then the control is transferred to the main try block (outer try block) where the appropriate catch block handles the exception. It is termed as nesting.""]","['statement 1;', 'statement 2;', 'try', '{', 'statement 3;', 'statement 4;', 'try', '{', 'statement 5;', 'statement 6;', '}', 'catch(Exception e2)', '{', '}', '}', 'catch(Exception e1)', '{', '}', 'catch(Exception e3)', 'public class NestedTryBlock{', 'public static void main(String args[]){', 'try{', 'try{', 'System.out.println(""going to divide by 0"");', 'int b =39/0;', 'catch(ArithmeticException e)', 'System.out.println(e);', '}', 'try{', 'int a[]=new int[5];', 'a[5]=4;', 'catch(ArrayIndexOutOfBoundsException e)', 'System.out.println(e);', '}', 'System.out.println(""other statement"");', 'catch(Exception e)', 'System.out.println(""handled the exception (outer catch)"");', 'System.out.println(""normal flow.."");', 'public class NestedTryBlock2 {', 'public static void main(String args[])', 'try {', 'try {', 'try {', 'int arr[] = { 1, 2, 3, 4 };', 'System.out.println(arr[10]);', '}', 'catch (ArithmeticException e) {', 'System.out.println(""Arithmetic exception"");', 'System.out.println("" inner try block 2"");', '}', '}', 'catch (ArithmeticException e) {', 'System.out.println(""Arithmetic exception"");', 'System.out.println(""inner try block 1"");', '}', '}', 'catch (ArrayIndexOutOfBoundsException e4) {', 'System.out.print(e4);', 'System.out.println("" outer (main) try block"");', '}', 'catch (Exception e5) {', 'System.out.print(""Exception"");', 'System.out.println("" handled in main try-block"");', '}']",[],[],[]
100,['Java finally block'],"['Java finally block is a block used to execute important code such as closing the connection, etc.']","['https://www.javatpoint.com/throw-keyword', 'https://www.javatpoint.com/nested-try-block', 'https://www.javatpoint.com/throw-keyword', 'https://www.javatpoint.com/nested-try-block', 'https://www.javatpoint.com/throw-keyword']","['https://static.javatpoint.com/core/images/java-finally-block.png', 'https://static.javatpoint.com/core/images/java-finally-block2.png', 'https://static.javatpoint.com/core/images/java-finally-block3.png', 'https://static.javatpoint.com/core/images/java-finally-block4.png']",[],"['Why use Java finally block?', 'Usage of Java finally']","['Flowchart of finally block', 'Case 1: When an exception does not occur', 'Case 2: When an exception occurr but not handled by the catch block', 'Case 3: When an exception occurs and is handled by the catch block']","[""Note: If you don't handle the exception, before terminating the program, JVM executes finally block (if any)."", 'Rule: For each try block there can be zero or more catch blocks, but only one finally block.', 'Note: The finally block will not be executed if the program exits (either by calling System.exit() or by causing a fatal error that causes the process to abort).']","['The finally block follows the try-catch block.', ""Let's see the different cases where Java finally block can be used."", ""Let's see the below example where the Java program does not throw any exception, and the finally block is executed after the try block."", 'TestFinallyBlock.java', 'TestFinallyBlock1.java', 'TestFinallyBlock2.java']","['Java finally block is always executed whether an exception is handled or not. Therefore, it contains all the necessary statements that need to be printed regardless of the exception occurs or not.', ""Let's see the the fillowing example. Here, the code throws an exception however the catch block cannot handle it. Despite this, the finally block is executed after the try block and then the program terminates abnormally."", ""Let's see the following example where the Java code throws an exception and the catch block handles the exception. Later the finally block is executed after the try-catch block. Further, the rest of the code is also executed normally.""]",[],"['class TestFinallyBlock {', 'public static void main(String args[]){', 'try{', 'int data=25/5;', 'System.out.println(data);', 'catch(NullPointerException e){', 'System.out.println(e);', 'finally {', 'System.out.println(""finally block is always executed"");', 'System.out.println(""rest of phe code..."");', 'public class TestFinallyBlock1{', 'public static void main(String args[]){', 'try {', 'System.out.println(""Inside the try block"");', 'int data=25/0;', 'System.out.println(data);', 'catch(NullPointerException e){', 'System.out.println(e);', 'finally {', 'System.out.println(""finally block is always executed"");', 'System.out.println(""rest of the code..."");', 'public class TestFinallyBlock2{', 'public static void main(String args[]){', 'try {', 'System.out.println(""Inside try block"");', 'int data=25/0;', 'System.out.println(data);', 'catch(ArithmeticException e){', 'System.out.println(""Exception handled"");', 'System.out.println(e);', 'finally {', 'System.out.println(""finally block is always executed"");', 'System.out.println(""rest of the code..."");']",[],[],"['|||finally block in Java can be used to put ""cleanup"" code such as closing a file, closing connection, etc.|||The important statements to be printed can be placed in the finally block.|||']"
101,['Java throw Exception'],"['In Java, exceptions allows us to write good quality codes where the errors are checked at the compile time instead of runtime and we can create custom exceptions making the code recovery and debugging easier.']","['https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/finally-block-in-exception-handling', 'https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/finally-block-in-exception-handling', 'https://www.javatpoint.com/exception-propagation']","['https://static.javatpoint.com/core/images/java-throw-keyword.png', 'https://static.javatpoint.com/core/images/java-throw-keyword2.png', 'https://static.javatpoint.com/core/images/java-throw-keyword3.png']",[],"['Java throw keyword', 'Java throw keyword Example']","['Example 1: Throwing Unchecked Exception', 'Example 2: Throwing Checked Exception', 'Example 3: Throwing User-defined Exception']","['Note: If we throw unchecked exception from a method, it is must to handle the exception or declare in throws clause.', 'Note: Every subclass of Error and RuntimeException is an unchecked exception in Java. A checked exception is everything else under the Throwable class.']","['The Java throw keyword is used to throw an exception explicitly.', 'The syntax of the Java throw keyword is given below.', 'throw Instance i.e.,', ""Let's see the example of throw IOException."", 'TestThrow1.java', 'The above code throw an unchecked exception. Similarly, we can also throw unchecked and user defined exceptions.', 'TestThrow2.java', 'TestThrow3.java']","['We specify the exception object which is to be thrown. The Exception has some message with it that provides the error description. These exceptions may be related to user inputs, server, etc.', 'We can throw either checked or unchecked exceptions in Java by throw keyword. It is mainly used to throw a custom exception. We will discuss custom exceptions later in this section.', 'Where the Instance must be of type Throwable or subclass of Throwable. For example, Exception is the sub class of Throwable and the user-defined exceptions usually extend the Exception class.', 'In this example, we have created a method named validate() that accepts an integer as a parameter. If the age is less than 18, we are throwing the ArithmeticException otherwise print a message welcome to vote.', 'In this example, we have created the validate method that takes integer value as a parameter. If the age is less than 18, we are throwing the ArithmeticException otherwise print a message welcome to vote.', 'If we throw a checked exception using throw keyword, it is must to handle the exception using catch block or the method must declare it using throws declaration.']","['We can also define our own set of conditions and throw an exception explicitly using throw keyword. For example, we can throw ArithmeticException if we divide a number by another number. Here, we just need to set the condition and throw exception using throw keyword.']","['throw new exception_class(""error message"");', 'throw new IOException(""sorry device error"");', 'public class TestThrow1 {', 'public static void validate(int age) {', 'if(age<18) {', 'throw new ArithmeticException(""Person is not eligible to vote"");', 'else {', 'System.out.println(""Person is eligible to vote!!"");', 'public static void main(String args[]){', 'validate(13);', 'System.out.println(""rest of the code..."");', 'import java.io.*;', 'public class TestThrow2 {', 'public static void method() throws FileNotFoundException {', 'FileReader file = new FileReader(""C:\\\\Users\\\\Anurati\\\\Desktop\\\\abc.txt"");', 'BufferedReader fileInput = new BufferedReader(file);', 'throw new FileNotFoundException();', 'public static void main(String args[]){', '{', 'method();', '}', 'catch (FileNotFoundException e)', '{', 'e.printStackTrace();', '}', 'System.out.println(""rest of the code..."");', 'class UserDefinedException extends Exception', 'public UserDefinedException(String str)', 'super(str);', 'public class TestThrow3', 'public static void main(String args[])', 'try', '{', 'throw new UserDefinedException(""This is user-defined exception"");', '}', 'catch (UserDefinedException ude)', '{', 'System.out.println(""Caught the exception"");', 'System.out.println(ude.getMessage());', '}']",[],[],[]
102,['Java Exception Propagation'],"['An exception is first thrown from the top of the stack and if it is not caught, it drops down the call stack to the previous method. If not caught there, the exception again drops down to the previous method, and so on until they are caught or until they reach the very bottom of the call stack. This is called exception propagation.']","['https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws', 'https://www.javatpoint.com/throw-keyword', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestExceptionPropagation1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestExceptionPropagation2', 'https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws', 'https://www.javatpoint.com/throw-keyword', 'https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws']",['https://static.javatpoint.com/core/images/exception-propagation.png'],[],"['Exception Propagation Example', 'Exception Propagation Example']",[],"['Note: By default Unchecked Exceptions are forwarded in calling chain (propagated).', 'Note: By default, Checked Exceptions are not forwarded in calling chain (propagated).']","['TestExceptionPropagation1.java', 'Exception can be handled in any method in call stack either in the main() method, p() method, n() method or m() method.', 'TestExceptionPropagation1.java']","['In the above example exception occurs in the m() method where it is not handled, so it is propagated to the previous n() method where it is not handled, again it is propagated to the p() method where exception is handled.']",[],"['class TestExceptionPropagation1{', 'void m(){', 'int data=50/0;', 'void n(){', 'm();', 'void p(){', 'try{', 'n();', '}catch(Exception e){System.out.println(""exception handled"");}', 'public static void main(String args[]){', 'TestExceptionPropagation1 obj=new TestExceptionPropagation1();', 'obj.p();', 'System.out.println(""normal flow..."");', 'class TestExceptionPropagation2{', 'void m(){', 'throw new java.io.IOException(""device error"");//checked exception', 'void n(){', 'm();', 'void p(){', 'try{', 'n();', '}catch(Exception e){System.out.println(""exception handeled"");}', 'public static void main(String args[]){', 'TestExceptionPropagation2 obj=new TestExceptionPropagation2();', 'obj.p();', 'System.out.println(""normal flow"");']","['exception handled', 'normal flow...', 'Compile Time Error']",[],[]
103,['Java throws keyword'],"['The Java throws keyword is used to declare an exception. It gives an information to the programmer that there may occur an exception. So, it is better for the programmer to provide the exception handling code so that the normal flow of the program can be maintained.']","['https://www.javatpoint.com/difference-between-throw-and-throws-in-java', 'https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testthrows1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testthrows2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testthrows3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=Testthrows4', 'https://www.javatpoint.com/difference-between-throw-and-throws-in-java', 'https://www.javatpoint.com/difference-between-throw-and-throws-in-java', 'https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/difference-between-throw-and-throws-in-java']",['https://static.javatpoint.com/core/images/throws-keyword-and-difference-between-throw-and-throws.png'],[],['Java throws Example'],"['Syntax of Java throws', 'Which exception should be declared?', 'Advantage of Java throws keyword', 'Case 1: Handle Exception Using try-catch block', 'Case 2: Declare Exception', 'Difference between throw and throws', 'Que) Can we rethrow an exception?']","['Rule: If we are calling a method that declares an exception, we must either caught or declare the exception.']","['Ans: Checked exception only, because:', 'Now Checked Exception can be propagated (forwarded in call stack).', 'It provides information to the caller of the method about the exception.', ""Let's see the example of Java throws clause which describes that checked exceptions can be propagated by throws keyword."", 'Testthrows1.java', 'There are two cases:', 'In case we handle the exception, the code will be executed fine whether exception occurs during the program or not.', 'Testthrows2.java', ""Let's see examples for both the scenario."", 'A) If exception does not occur', 'Testthrows3.java', 'B) If exception occurs', 'Testthrows4.java', 'Yes, by throwing same exception in catch block.']","[""Exception Handling is mainly used to handle the checked exceptions. If there occurs any unchecked exception such as NullPointerException, it is programmers' fault that he is not checking the code before it being used.""]",[],"['return_type method_name() throws exception_class_name{', 'import java.io.IOException;', 'class Testthrows1{', 'void m()throws IOException{', 'throw new IOException(""device error"");//checked exception', 'void n()throws IOException{', 'm();', 'void p(){', 'try{', 'n();', '}catch(Exception e){System.out.println(""exception handled"");}', 'public static void main(String args[]){', 'Testthrows1 obj=new Testthrows1();', 'obj.p();', 'System.out.println(""normal flow..."");', 'import java.io.*;', 'class M{', 'void method()throws IOException{', 'throw new IOException(""device error"");', 'public class Testthrows2{', 'public static void main(String args[]){', 'try{', 'M m=new M();', 'm.method();', '}catch(Exception e){System.out.println(""exception handled"");}', 'System.out.println(""normal flow..."");', 'import java.io.*;', 'class M{', 'void method()throws IOException{', 'System.out.println(""device operation performed"");', 'class Testthrows3{', 'public static void main(String args[])throws IOException{//declare exception', 'M m=new M();', 'm.method();', 'System.out.println(""normal flow..."");', 'import java.io.*;', 'class M{', 'void method()throws IOException{', 'throw new IOException(""device error"");', 'class Testthrows4{', 'public static void main(String args[])throws IOException{//declare exception', 'M m=new M();', 'm.method();', 'System.out.println(""normal flow..."");']","['exception handled', 'normal flow...', 'exception handled', 'normal flow...', 'device operation performed', 'normal flow...']",[],"['|||unchecked exception: under our control so we can correct our code.|||error: beyond our control. For example, we are unable to do anything if there occurs VirtualMachineError or StackOverflowError.||||||In case we declare the exception, if exception does not occur, the code will be executed fine.|||In case we declare the exception and the exception occurs, it will be thrown at runtime because throws does not handle the exception.|||&&&|||Case 1: We have caught the exception i.e. we have handled the exception using try/catch block.|||Case 2: We have declared the exception i.e. specified throws keyword with the method.|||']"
104,['Difference between throw and throws in Java'],['The throw and throws is the concept of exception handling where the throw keyword throw the exception explicitly from a method or a block of code whereas the throws keyword is used in signature of the method.'],"['https://www.javatpoint.com/difference-between-final-finally-and-finalize', 'https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/https://www.javatpoint.com/throw-keyword', 'https://www.javatpoint.com/https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws', 'https://www.javatpoint.com/difference-between-final-finally-and-finalize', 'https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/difference-between-final-finally-and-finalize']","['https://static.javatpoint.com/core/images/difference-between-throw-and-throws-in-java.png', 'https://static.javatpoint.com/core/images/difference-between-throw-and-throws-in-java2.png', 'https://static.javatpoint.com/core/images/difference-between-throw-and-throws-in-java3.png']",[],"['Java throw Example', 'Java throws Example', 'Java throw and throws Example']",[],[],"['There are many differences between throw and throws keywords. A list of differences between throw and throws are given below:', 'TestThrow.java', 'TestThrows.java', 'TestThrowAndThrows.java']",[],[],"['public class TestThrow {', 'public static void checkNum(int num) {', 'if (num < 1) {', 'throw new ArithmeticException(""\\nNumber is negative, cannot calculate square"");', 'else {', 'System.out.println(""Square of "" + num + "" is "" + (num*num));', 'public static void main(String[] args) {', 'TestThrow obj = new TestThrow();', 'obj.checkNum(-3);', 'System.out.println(""Rest of the code.."");', 'public class TestThrows {', 'public static int divideNum(int m, int n) throws ArithmeticException {', 'int div = m / n;', 'return div;', 'public static void main(String[] args) {', 'TestThrows obj = new TestThrows();', 'try {', 'System.out.println(obj.divideNum(45, 0));', 'catch (ArithmeticException e){', 'System.out.println(""\\nNumber cannot be divided by 0"");', 'System.out.println(""Rest of the code.."");', 'public class TestThrowAndThrows', 'static void method() throws ArithmeticException', 'System.out.println(""Inside the method()"");', 'throw new ArithmeticException(""throwing ArithmeticException"");', 'public static void main(String args[])', 'try', '{', 'method();', '}', 'catch(ArithmeticException e)', '{', 'System.out.println(""caught in main() method"");', '}']",[],"['Sr. no.|||Basis of Differences|||throw|||throws&&&1.|||Definition|||Java throw keyword is used throw an exception explicitly in the code, inside the function or the block of code.|||Java throws keyword is used in the method signature to declare an exception which might be thrown by the function while the execution of the code. &&&2.|||Type of exception\tUsing throw keyword, we can only propagate unchecked exception i.e., the checked exception cannot be propagated using throw only.|||Using throws keyword, we can declare both checked and unchecked exceptions. However, the throws keyword can be used to propagate checked exceptions only.&&&3.|||Syntax|||The throw keyword is followed by an instance of Exception to be thrown.|||The throws keyword is followed by class names of Exceptions to be thrown.&&&4.|||Declaration|||throw is used within the method.|||throws is used with the method signature.&&&5.|||Internal implementation|||We are allowed to throw only one exception at a time i.e. we cannot throw multiple exceptions.|||We can declare multiple exceptions using throws keyword that can be thrown by the method. For example, main() throws IOException, SQLException.']",[]
105,"['Difference between final, finally and finalize']","['The final, finally, and finalize are keywords in Java that are used in exception handling. Each of these keywords has a different functionality. The basic difference between final, finally and finalize is that the final is an access modifier, finally is the block in Exception Handling and finalize is the method of object class.']","['https://www.javatpoint.com/exception-handling-with-method-overriding', 'https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/https://www.javatpoint.com/final-keyword', 'https://www.javatpoint.com/https://www.javatpoint.com/finally-block-in-exception-handling', 'https://www.javatpoint.com/https://www.javatpoint.com/java-object-finalize-method', 'https://www.javatpoint.com/exception-handling-with-method-overriding', 'https://www.javatpoint.com/exception-propagation', 'https://www.javatpoint.com/exception-handling-with-method-overriding']","['https://static.javatpoint.com/core/images/difference-between-final-finally-and-finalize.png', 'https://static.javatpoint.com/core/images/difference-between-final-finally-and-finalize2.png', 'https://static.javatpoint.com/core/images/difference-between-final-finally-and-finalize3.png']",[],"['Java final Example', 'Java finally Example', 'Java finalize Example']",[],[],"[""It's execution is not dependant on the exception."", ""Let's consider the following example where we declare final variable age. Once declared it cannot be modified."", 'FinalExampleTest.java', 'In the above example, we have declared a variable final. Similarly, we can declare the methods and classes final using the final keyword.', 'FinallyExample.java', 'FinalizeExample.java']","['Along with this, there are many differences between final, finally and finalize. A list of differences between final, finally and finalize are given below:', ""Let's see the below example where the Java code throws an exception and the catch block handles that exception. Later the finally block is executed after the try-catch block. Further, the rest of the code is also executed normally.""]",[],"['public class FinalExampleTest {', 'final int age = 18;', 'void display() {', 'age = 55;', 'public static void main(String[] args) {', 'FinalExampleTest obj = new FinalExampleTest();', 'obj.display();', 'public class FinallyExample {', 'public static void main(String args[]){', 'try {', 'System.out.println(""Inside try block"");', 'int data=25/0;', 'System.out.println(data);', 'catch (ArithmeticException e){', 'System.out.println(""Exception handled"");', 'System.out.println(e);', 'finally {', 'System.out.println(""finally block is always executed"");', 'System.out.println(""rest of the code..."");', 'public class FinalizeExample {', 'public static void main(String[] args)', '{', 'FinalizeExample obj = new FinalizeExample();', 'System.out.println(""Hashcode is: "" + obj.hashCode());', 'obj = null;', 'System.gc();', 'System.out.println(""End of the garbage collection"");', '}', 'protected void finalize()', '{', 'System.out.println(""Called the finalize() method"");', '}']",[],"[""Sr. no.|||Key|||final|||finally|||finalize&&&1.|||Definition|||final is the keyword and access modifier which is used to apply restrictions on a class, method or variable.|||finally is the block in Java Exception Handling to execute the important code whether the exception occurs or not.|||finalize is the method in Java which is used to perform clean up processing just before object is garbage collected.&&&2.|||Applicable to|||Final keyword is used with the classes, methods and variables.|||Finally block is always related to the try and catch block in exception handling.|||finalize() method is used with the objects.&&&3.|||Functionality|||(1) Once declared, final variable becomes constant and cannot be modified.(2) final method cannot be overridden by sub class.(3) final class cannot be inherited.|||(1) finally block runs the important code even if exception occurs or not.(2) finally block cleans up all the resources used in try block|||finalize method performs the cleaning activities with respect to the object before its destruction.&&&4.|||Execution|||Final method is executed only when we call it.|||Finally block is executed as soon as the try-catch block is executed.It's execution is not dependant on the exception.|||finalize method is executed just before the object is destroyed.""]",[]
106,['Exception Handling with Method Overriding in Java'],['There are many rules if we talk about method overriding with exception handling.'],"['https://www.javatpoint.com/custom-exception', 'https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws', 'https://www.javatpoint.com/custom-exception', 'https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws', 'https://www.javatpoint.com/custom-exception']","['https://static.javatpoint.com/core/images/exception-handling-with-method-overriding.png', 'https://static.javatpoint.com/core/images/exception-handling-with-method-overriding2.png', 'https://static.javatpoint.com/core/images/exception-handling-with-method-overriding3.png', 'https://static.javatpoint.com/core/images/exception-handling-with-method-overriding4.png', 'https://static.javatpoint.com/core/images/exception-handling-with-method-overriding5.png', 'https://static.javatpoint.com/core/images/exception-handling-with-method-overriding6.png']",[],[],"['If the superclass method does not declare an exception', 'If the superclass method declares an exception', 'Example in case subclass overridden method declares parent exception', 'Example in case subclass overridden method declares same exception', 'Example in case subclass overridden method declares subclass exception', 'Example in case subclass overridden method declares no exception']","['Rule 1: If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception.', 'Rule 2: If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but can declare unchecked exception.', 'Rule 1: If the superclass method declares an exception, subclass overridden method can declare the same subclass exception or no exception but cannot declare parent exception.']","['Some of the rules are listed below:', ""Let's consider following example based on the above rule."", 'TestExceptionChild.java', 'TestExceptionChild1.java', 'TestExceptionChild2.java', 'TestExceptionChild3.java', 'TestExceptionChild4.java', 'TestExceptionChild5.java']",[],[],"['import java.io.*;', 'class Parent{', 'void msg() {', 'System.out.println(""parent method"");', '}', 'public class TestExceptionChild extends Parent{', 'void msg() throws IOException {', 'System.out.println(""TestExceptionChild"");', 'public static void main(String args[]) {', 'Parent p = new TestExceptionChild();', 'p.msg();', 'import java.io.*;', 'class Parent{', 'void msg() {', 'System.out.println(""parent method"");', 'class TestExceptionChild1 extends Parent{', 'void msg()throws ArithmeticException {', 'System.out.println(""child method"");', 'public static void main(String args[]) {', 'Parent p = new TestExceptionChild1();', 'p.msg();', 'import java.io.*;', 'class Parent{', 'void msg()throws ArithmeticException {', 'System.out.println(""parent method"");', 'public class TestExceptionChild2 extends Parent{', 'void msg()throws Exception {', 'System.out.println(""child method"");', 'public static void main(String args[]) {', 'Parent p = new TestExceptionChild2();', 'try {', 'p.msg();', 'catch (Exception e){}', 'import java.io.*;', 'class Parent{', 'void msg() throws Exception {', 'System.out.println(""parent method"");', 'public class TestExceptionChild3 extends Parent {', 'void msg()throws Exception {', 'System.out.println(""child method"");', 'public static void main(String args[]){', 'Parent p = new TestExceptionChild3();', 'try {', 'p.msg();', 'catch(Exception e) {}', 'import java.io.*;', 'class Parent{', 'void msg()throws Exception {', 'System.out.println(""parent method"");', 'class TestExceptionChild4 extends Parent{', 'void msg()throws ArithmeticException {', 'System.out.println(""child method"");', 'public static void main(String args[]){', 'Parent p = new TestExceptionChild4();', 'try {', 'p.msg();', 'catch(Exception e) {}', 'import java.io.*;', 'class Parent {', 'void msg()throws Exception{', 'System.out.println(""parent method"");', 'class TestExceptionChild5 extends Parent{', 'void msg() {', 'System.out.println(""child method"");', 'public static void main(String args[]){', 'Parent p = new TestExceptionChild5();', 'try {', 'p.msg();', 'catch(Exception e) {}']",[],[],"['|||If the superclass method does not declare an exception||||||If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but it can declare unchecked exception.||||||If the superclass method declares an exception||||||If the superclass method declares an exception, subclass overridden method can declare same, subclass exception or no exception but cannot declare parent exception.|||||||||If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but it can declare unchecked exception.||||||If the superclass method declares an exception, subclass overridden method can declare same, subclass exception or no exception but cannot declare parent exception.|||']"
107,['Java Custom Exception'],"['In Java, we can create our own exceptions that are derived classes of the Exception class. Creating our own Exception is known as custom exception or user-defined exception. Basically, Java custom exceptions are used to customize the exception according to user need.']","['https://www.javatpoint.com/java-inner-class', 'https://www.javatpoint.com/exception-handling-with-method-overriding', 'https://www.javatpoint.com/java-inner-class', 'https://www.javatpoint.com/exception-handling-with-method-overriding', 'https://www.javatpoint.com/java-inner-class']","['https://static.javatpoint.com/core/images/java-custom-exception.png', 'https://static.javatpoint.com/core/images/java-custom-exception2.png']",[],['Why use custom exceptions?'],"['Example 1:', 'Example 2:']",['Note: We need to write the constructor that takes the String as the error message and it is called parent class constructor.'],"['Consider the example 1 in which InvalidAgeException class extends the Exception class. ', 'In this section, we will learn how custom exceptions are implemented and used in Java programs.', 'Following are few of the reasons to use custom exceptions:', 'In order to create custom exception, we need to extend Exception class that belongs to java.lang package.', 'Consider the following example, where we create a custom exception named WrongFileNameException:', 'TestCustomException1.java', 'TestCustomException2.java']","['Using the custom exception, we can have your own exception and message. Here, we have passed a string to the constructor of superclass i.e. Exception class that can be obtained using getMessage() method on the object we have created.', 'Java exceptions cover almost all the general type of exceptions that may occur in the programming. However, we sometimes need to create custom exceptions.']","[""Let's see a simple example of Java custom exception. In the following code, constructor of InvalidAgeException takes a string as an argument. This string is passed to constructor of parent class Exception using the super() method. Also the constructor of Exception class can be called without using a parameter and calling super() method is not mandatory.""]","['public class WrongFileNameException extends Exception {', 'public WrongFileNameException(String errorMessage) {', 'super(errorMessage);', 'class InvalidAgeException  extends Exception', 'public InvalidAgeException (String str)', 'super(str);', 'public class TestCustomException1', 'static void validate (int age) throws InvalidAgeException{', 'if(age < 18){', 'throw new InvalidAgeException(""age is not valid to vote"");', 'else {', 'System.out.println(""welcome to vote"");', '}', '}', 'public static void main(String args[])', 'try', '{', 'validate(13);', '}', 'catch (InvalidAgeException ex)', '{', 'System.out.println(""Caught the exception"");', 'System.out.println(""Exception occured: "" + ex);', '}', 'System.out.println(""rest of the code..."");', 'class MyCustomException extends Exception', 'public class TestCustomException2', 'public static void main(String args[])', 'try', '{', 'throw new MyCustomException();', '}', 'catch (MyCustomException ex)', '{', 'System.out.println(""Caught the exception"");', 'System.out.println(ex.getMessage());', '}', 'System.out.println(""rest of the code..."");']",[],[],['|||To catch and provide specific treatment to a subset of existing Java exceptions.|||Business logic exceptions: These are the exceptions related to business logic and workflow. It is useful for the application users or the developers to understand the exact problem.|||']
108,['Java Inner Classes (Nested Classes)'],['Java inner class or nested class is a class that is declared inside the class or interface.'],"['https://www.javatpoint.com/member-inner-class', 'https://www.javatpoint.com/custom-exception', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#nestedad', 'https://www.javatpoint.com/#nesteddiff', 'https://www.javatpoint.com/#nestedtypes', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/member-inner-class', 'https://www.javatpoint.com/anonymous-inner-class', 'https://www.javatpoint.com/local-inner-class', 'https://www.javatpoint.com/static-nested-class', 'https://www.javatpoint.com/nested-interface', 'https://www.javatpoint.com/member-inner-class', 'https://www.javatpoint.com/custom-exception', 'https://www.javatpoint.com/member-inner-class']",[],[],['Need of Java Inner class'],"['Advantage of Java inner classes', 'Difference between nested class and inner class in Java', 'Types of Nested classes']",['Syntax of Inner class'],"['We use inner classes to logically group classes and interfaces in one place to be more readable and maintainable.', 'Additionally, it can access all the members of the outer class, including private data members and methods.', 'There are three advantages of inner classes in Java. They are as follows:', 'An inner class is a part of a nested class. Non-static nested classes are known as inner classes.', 'There are two types of nested classes non-static and static nested classes. The non-static nested classes are also known as inner classes.']","['Sometimes users need to program a class in such a way so that no other class can access it. Therefore, it would be better if you include it within other classes.', 'If all the class objects are a part of the outer object then it is easier to nest that class inside the outer class. That way all the outer class can access all the objects of the inner class.']",[],"['class Java_Outer_class{', 'class Java_Inner_class{']",[],['ypeDescriptio&&&ember Inner ClassA class created within class and outside method&&&nonymous Inner ClassA class created for implementing an interface or extending class. The java compiler decides its name&&&ocal Inner ClassA class was created within the method&&&tatic Nested ClassA static class was created within the class&&&ested InterfaceAn interface created within class or interface'],"['|||What is the internal code generated by the compiler for member inner class?|||What are the two ways to create an anonymous inner class?|||Can we access the non-final local variable inside the local inner class?|||How to access the static nested class?|||Can we define an interface within the class?|||Can we define a class within the interface?||||||Non-static nested class (inner class)||||||Member inner class|||Anonymous inner class|||Local inner class|||||||||Static nested class|||&&&|||Java Inner classes|||Advantage of Inner class|||Difference between nested class and inner class|||Types of Nested classes||||||Nested classes represent a particular type of relationship that is it can access all the members (data members and methods) of the outer class, including private.|||Nested classes are used to develop more readable and maintainable code because it logically group classes and interfaces in one place only.|||Code Optimization: It requires less code to write.||||||Member inner class|||Anonymous inner class|||Local inner class|||']"
109,['Java Member Inner class'],"['A non-static class that is created inside a class but outside a method is called member inner class. It is also known as a regular inner class. It can be declared with access modifiers like public, default, private, and protected.']","['https://www.javatpoint.com/anonymous-inner-class', 'https://www.javatpoint.com/java-inner-class', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestMemberOuter1', 'https://www.javatpoint.com/anonymous-inner-class', 'https://www.javatpoint.com/java-inner-class', 'https://www.javatpoint.com/anonymous-inner-class']",[],[],"['Java Member Inner Class Example', 'Internal working of Java member inner class', 'Internal code generated by the compiler']",['How to instantiate Member Inner class in Java?'],[],"['In this example, we are creating a msg() method in the member inner class that is accessing the private data member of the outer class.', 'TestMemberOuter1.java', 'The general form of syntax to create an object of the member inner class is as follows:', 'Here, OuterClassReference is the reference of the outer class followed by a dot which is followed by the new operator.']","[""An object or instance of a member's inner class always exists within an object of its outer class. The new operator is used to create the object of member inner class with slightly different syntax."", 'The Java compiler creates a class file named Outer$Inner in this case. The Member inner class has the reference of Outer class that is why it can access all the data members of Outer class including private.']","['The java compiler creates two class files in the case of the inner class. The class file name of the inner class is ""Outer$Inner"". If you want to instantiate the inner class, you must have to create the instance of the outer class. In such a case, an instance of inner class is created inside the instance of the outer class.']","['class Outer{', 'class Inner{', 'class TestMemberOuter1{', 'private int data=30;', 'class Inner{', 'void msg(){System.out.println(""data is ""+data);}', 'public static void main(String args[]){', 'TestMemberOuter1 obj=new TestMemberOuter1();', 'TestMemberOuter1.Inner in=obj.new Inner();', 'in.msg();', 'OuterClassReference.new MemberInnerClassConstructor();', 'obj.new Inner();', 'import java.io.PrintStream;', 'class Outer$Inner', 'final Outer this$0;', 'Outer$Inner()', '{   super();', 'this$0 = Outer.this;', 'void msg()', 'System.out.println((new StringBuilder()).append(""data is "")', '.append(Outer.access$000(Outer.this)).toString());']",['data is 30'],[],[]
110,['Java Anonymous inner class'],"['Java anonymous inner class is an inner class without a name and for which only a single object is created. An anonymous inner class can be useful when making an instance of an object with certain ""extras"" such as overloading methods of a class or interface, without having to actually subclass a class.']","['https://www.javatpoint.com/local-inner-class', 'https://www.javatpoint.com/member-inner-class', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestAnnonymousInner', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestAnnonymousInner1', 'https://www.javatpoint.com/local-inner-class', 'https://www.javatpoint.com/member-inner-class', 'https://www.javatpoint.com/local-inner-class']",[],[],['Java anonymous inner class example using interface'],"['Java anonymous inner class example using class', 'Internal working of given code', 'Internal class generated by the compiler']",[],"['TestAnonymousInner.java', 'It performs two main tasks behind this code:']","['In simple words, a class that has no name is known as an anonymous inner class in Java. It should be used if you have to override a method of class or interface. Java Anonymous inner class can be created in two ways:']",[],"['abstract class Person{', 'abstract void eat();', 'class TestAnonymousInner{', 'public static void main(String args[]){', 'Person p=new Person(){', 'void eat(){System.out.println(""nice fruits"");}', 'p.eat();', 'Person p=new Person(){', 'void eat(){System.out.println(""nice fruits"");}', 'import java.io.PrintStream;', 'static class TestAnonymousInner$1 extends Person', 'TestAnonymousInner$1(){}', 'void eat()', 'System.out.println(""nice fruits"");', 'interface Eatable{', 'void eat();', 'class TestAnnonymousInner1{', 'public static void main(String args[]){', 'Eatable e=new Eatable(){', 'public void eat(){System.out.println(""nice fruits"");}', 'e.eat();', 'Eatable p=new Eatable(){', 'void eat(){System.out.println(""nice fruits"");}', 'import java.io.PrintStream;', 'static class TestAnonymousInner1$1 implements Eatable', 'TestAnonymousInner1$1(){}', 'void eat(){System.out.println(""nice fruits"");}']","['nice fruits', 'nice fruits']",[],"[""|||Class (may be abstract or concrete).|||Interface||||||A class is created, but its name is decided by the compiler, which extends the Person class and provides the implementation of the eat() method.|||An object of the Anonymous class is created that is referred to by 'p,' a reference variable of Person type.||||||A class is created, but its name is decided by the compiler, which implements the Eatable interface and provides the implementation of the eat() method.|||An object of the Anonymous class is created that is referred to by 'p', a reference variable of the Eatable type.|||""]"
111,['Java Local inner class'],"['A class i.e., created inside a method, is called local inner class in java. Local Inner Classes are the inner classes that are defined inside a block. Generally, this block is a method body. Sometimes this block can be a for loop, or an if clause. Local Inner classes are not a member of any enclosing classes. They belong to the block they are defined within, due to which local inner classes cannot have any access modifiers associated with them. However, they can be marked as final or abstract. These classes have access to the fields of the class enclosing it.']","['https://www.javatpoint.com/static-nested-class', 'https://www.javatpoint.com/annonymous-inner-class', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=localInner1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=localInner2', 'https://www.javatpoint.com/static-nested-class', 'https://www.javatpoint.com/annonymous-inner-class', 'https://www.javatpoint.com/static-nested-class']",[],[],['Rules for Java Local Inner class'],"['Java local inner class example', 'Internal class generated by the compiler', 'Example of local inner class with local variable']","[""Rule: Local variables can't be private, public, or protected."", '1) Local inner class cannot be invoked from outside the method.', '2) Local inner class cannot access non-final local variable till JDK 1.7. Since JDK 1.8, it is possible to access the non-final local variable in the local inner class.']","['If you want to invoke the methods of the local inner class, you must instantiate this class inside the method.', 'LocalInner1.java ', 'In such a case, the compiler creates a class named Simple$1Local that has the reference of the outer class.', 'LocalInner2.java']",[],[],"['public class localInner1{', 'private int data=30;//instance variable', 'void display(){', 'class Local{', 'void msg(){System.out.println(data);}', 'Local l=new Local();', 'l.msg();', 'public static void main(String args[]){', 'localInner1 obj=new localInner1();', 'obj.display();', 'import java.io.PrintStream;', 'class localInner1$Local', 'final localInner1 this$0;', 'localInner1$Local()', '{', 'super();', 'this$0 = Simple.this;', 'void msg()', 'System.out.println(localInner1.access$000(localInner1.this));', 'class localInner2{', 'private int data=30;//instance variable', 'void display(){', 'int value=50;//local variable must be final till jdk 1.7 only', 'class Local{', 'void msg(){System.out.println(value);}', 'Local l=new Local();', 'l.msg();', 'public static void main(String args[]){', 'localInner2 obj=new localInner2();', 'obj.display();']","['30', '50']",[],[]
112,['Java static nested class'],"['A static class is a class that is created inside a class, is called a static nested class in Java. It cannot access non-static data members and methods. It can be accessed by outer class name.']","['https://www.javatpoint.com/nested-interface', 'https://www.javatpoint.com/local-inner-class', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestOuter1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestOuter2', 'https://www.javatpoint.com/nested-interface', 'https://www.javatpoint.com/local-inner-class', 'https://www.javatpoint.com/nested-interface']",[],[],"['Java static nested class example with instance method', 'Java static nested class example with a static method']",['Internal class generated by the compiler'],[],"['TestOuter1.java', ""If you have the static member inside the static nested class, you don't need to create an instance of the static nested class."", 'TestOuter2.java']",[],"[""In this example, you need to create the instance of static nested class because it has instance method msg(). But you don't need to create the object of the Outer class because the nested class is static and static properties, methods, or classes can be accessed without an object.""]","['class TestOuter1{', 'static int data=30;', 'static class Inner{', 'void msg(){System.out.println(""data is ""+data);}', 'public static void main(String args[]){', 'TestOuter1.Inner obj=new TestOuter1.Inner();', 'obj.msg();', 'import java.io.PrintStream;', 'static class TestOuter1$Inner', 'TestOuter1$Inner(){}', 'void msg(){', 'System.out.println((new StringBuilder()).append(""data is "")', '.append(TestOuter1.data).toString());', 'public class TestOuter2{', 'static int data=30;', 'static class Inner{', 'static void msg(){System.out.println(""data is ""+data);}', 'public static void main(String args[]){', 'TestOuter2.Inner.msg();//no need to create the instance of static nested class']","['data is 30', 'data is 30']",[],"['|||It can access static data members of the outer class, including private.|||The static nested class cannot access non-static (instance) data members or|||']"
113,['Java Nested Interface'],"[""An interface, i.e., declared within another interface or class, is known as a nested interface. The nested interfaces are used to group related interfaces so that they can be easy to maintain. The nested interface must be referred to by the outer interface or class. It can't be accessed directly.""]","['https://www.javatpoint.com/multithreading-in-java', 'https://www.javatpoint.com/static-nested-class', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestNestedInterface1', 'https://www.javatpoint.com/https://static.javatpoint.com/src/nested/nestedinterface.zip', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestNestedInterface2', 'https://www.javatpoint.com/multithreading-in-java', 'https://www.javatpoint.com/static-nested-class', 'https://www.javatpoint.com/multithreading-in-java']",[],[],[],"['Points to remember for nested interfaces', 'Syntax of nested interface which is declared within the interface', 'Syntax of nested interface which is declared within the class', 'Example of nested interface which is declared within the interface', 'Internal code generated by the java compiler for nested interface Message', 'Example of nested interface which is declared within the class', 'Can we define a class inside the interface?']",[],"['There are given some points that should be remembered by the java programmer.', 'In this example, we will learn how to declare the nested interface and how we can access it.', 'TestNestedInterface1.java', 'The java compiler internally creates a public and static interface as displayed below:', ""Let's see how we can define an interface inside the class and how we can access it."", 'TestNestedInterface2.java']","[""Yes, if we define a class inside the interface, the Java compiler creates a static nested class. Let's see how can we define a class within the interface:""]","['As you can see in the above example, we are accessing the Message interface by its outer interface Showable because it cannot be accessed directly. It is just like the almirah inside the room; we cannot access the almirah directly because we must enter the room first. In the collection framework, the sun microsystem has provided a nested interface Entry. Entry is the subinterface of Map, i.e., accessed by Map.Entry.']","['interface interface_name{', 'interface nested_interface_name{', 'class class_name{', 'interface nested_interface_name{', 'interface Showable{', 'void show();', 'interface Message{', 'void msg();', 'class TestNestedInterface1 implements Showable.Message{', 'public void msg(){System.out.println(""Hello nested interface"");}', 'public static void main(String args[]){', 'Showable.Message message=new TestNestedInterface1();//upcasting here', 'message.msg();', 'public static interface Showable$Message', 'public abstract void msg();', 'class A{', 'interface Message{', 'void msg();', 'class TestNestedInterface2 implements A.Message{', 'public void msg(){System.out.println(""Hello nested interface"");}', 'public static void main(String args[]){', 'A.Message message=new TestNestedInterface2();//upcasting here', 'message.msg();', 'interface M{', 'class A{}']","['hello nested interface', 'hello nested interface']",[],"['|||The nested interface must be public if it is declared inside the interface, but it can have any access modifier if declared within the class.|||Nested interfaces are declared static|||']"
114,['Multithreading in Java'],['Multithreading in Java is a process of executing multiple threads simultaneously.'],"['https://www.javatpoint.com/life-cycle-of-a-thread', 'https://www.javatpoint.com/nested-interface', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#multitasing', 'https://www.javatpoint.com/#multiprocessing', 'https://www.javatpoint.com/#multithreading', 'https://www.javatpoint.com/#thread', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/register-memory', 'https://www.javatpoint.com/os-tutorial', 'https://www.javatpoint.com/java-constructor', 'https://www.javatpoint.com/object-class', 'https://www.javatpoint.com/java-thread-start-method', 'https://www.javatpoint.com/java-thread-run-method', 'https://www.javatpoint.com/java-thread-sleep-method', 'https://www.javatpoint.com/java-thread-currentthread-method', 'https://www.javatpoint.com/java-thread-join-method', 'https://www.javatpoint.com/java-thread-getpriority-method', 'https://www.javatpoint.com/java-thread-setpriority-method', 'https://www.javatpoint.com/java-thread-getname-method', 'https://www.javatpoint.com/java-thread-setname-method', 'https://www.javatpoint.com/java-thread-getid-method', 'https://www.javatpoint.com/java-thread-isalive-method', 'https://www.javatpoint.com/java-thread-yield-method', 'https://www.javatpoint.com/java-thread-suspend-method', 'https://www.javatpoint.com/java-thread-resume-method', 'https://www.javatpoint.com/java-thread-stop-method', 'https://www.javatpoint.com/java-thread-destroy-method', 'https://www.javatpoint.com/java-thread-isdaemon-method', 'https://www.javatpoint.com/java-thread-setdaemon-method', 'https://www.javatpoint.com/java-thread-interrupt-method', 'https://www.javatpoint.com/java-thread-isinterrupted-method', 'https://www.javatpoint.com/java-thread-interrupted-method', 'https://www.javatpoint.com/java-thread-activecount-method', 'https://www.javatpoint.com/java-thread-checkaccess-method', 'https://www.javatpoint.com/java-thread-holdlock-method', 'https://www.javatpoint.com/java-thread-dumpstack-method', 'https://www.javatpoint.com/java-thread-getstacktrace-method', 'https://www.javatpoint.com/java-thread-enumerate-method', 'https://www.javatpoint.com/java-thread-getstate-method', 'https://www.javatpoint.com/java-thread-getthreadgroup-method', 'https://www.javatpoint.com/java-thread-tostring-method', 'https://www.javatpoint.com/java-thread-notify-method', 'https://www.javatpoint.com/java-thread-notifyall-method', 'https://www.javatpoint.com/java-thread-setcontextclassloader-method', 'https://www.javatpoint.com/java-thread-getcontextclassloader-method', 'https://www.javatpoint.com/java-thread-getdefaultuncaughtexceptionhandler-method', 'https://www.javatpoint.com/java-thread-setdefaultuncaughtexceptionhandler-method', 'https://www.javatpoint.com/life-cycle-of-a-thread', 'https://www.javatpoint.com/nested-interface', 'https://www.javatpoint.com/life-cycle-of-a-thread']",['https://static.javatpoint.com/images/java-multithreading.png'],[],"['Multitasking', 'What is Thread in java', 'Java Thread class ', 'Java Thread Methods']","['Advantages of Java Multithreading', '1) Process-based Multitasking (Multiprocessing)', '2) Thread-based Multitasking (Multithreading)']","['Note: At least one process is required for each thread.', 'Note: At a time one thread is executed only.']","['A thread is a lightweight sub-process, the smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.', 'Java Multithreading is mostly used in games, animation, etc.', ""1) It doesn't block the user because threads are independent and you can perform multiple operations at the same time."", '2) You can perform many operations together, so it saves time.', ""3) Threads are independent, so it doesn't affect other threads if an exception occurs in a single thread."", 'A thread is a lightweight subprocess, the smallest unit of processing. It is a separate path of execution.', ""Threads are independent. If there occurs exception in one thread, it doesn't affect other threads. It uses a shared memory area.\n""]","[""However, we use multithreading than multiprocessing because threads use a shared memory area. They don't allocate separate memory area so saves memory, and context-switching between the threads takes less time than process.\n"", 'Multitasking is a process of executing multiple tasks simultaneously. We use multitasking to utilize the CPU.\nMultitasking can be achieved in two ways:', 'As shown in the above figure, a thread is executed inside the process. There is context-switching between the threads. There can be multiple processes inside the OS, and one process can have multiple threads.\n', 'Java provides Thread class to achieve thread programming. Thread class provides constructors and methods to create and perform operations on a thread. Thread class extends Object class and implements Runnable interface.']",[],[],[],"[""S.N.|||Modifier and Type|||Method|||Description&&&1)|||void|||start()|||It is used to start the execution of the thread.&&&2)|||void|||run()|||It is used to do an action for a thread.&&&3)|||static void|||sleep()|||It sleeps a thread for the specified amount of time.&&&4)|||static Thread|||currentThread()|||It returns a reference to the currently executing thread object.&&&5)|||void|||join()|||It waits for a thread to die.&&&6)|||int|||getPriority()|||It returns the priority of the thread.&&&7)|||void|||setPriority()|||It changes the priority of the thread.&&&8)|||String|||getName()|||It returns the name of the thread.&&&9)|||void|||setName()|||It changes the name of the thread.&&&10)|||long|||getId()|||It returns the id of the thread.&&&11)|||boolean|||isAlive()|||It tests if the thread is alive.&&&12)|||static void|||yield()|||It causes the currently executing thread object to pause and allow other threads to execute temporarily.&&&13)|||void|||suspend()|||It is used to suspend the thread.&&&14)|||void|||resume()|||It is used to resume the suspended thread.&&&15)|||void|||stop()|||It is used to stop the thread.&&&16)|||void|||destroy()|||It is used to destroy the thread group and all of its subgroups.&&&17)|||boolean|||isDaemon()|||It tests if the thread is a daemon thread.&&&18)|||void|||setDaemon()|||It marks the thread as daemon or user thread.&&&19)|||void|||interrupt()|||It interrupts the thread.&&&20)|||boolean|||isinterrupted()|||It tests whether the thread has been interrupted.&&&21)|||static boolean|||interrupted()|||It tests whether the current thread has been interrupted.&&&22)|||static int|||activeCount()|||It returns the number of active threads in the current thread's thread group.&&&23)|||void|||checkAccess()|||It determines if the currently running thread has permission to modify the thread.&&&24)|||static boolean|||holdLock()|||It returns true if and only if the current thread holds the monitor lock on the specified object.&&&25)|||static void|||dumpStack()|||It is used to print a stack trace of the current thread to the standard error stream.&&&26)|||StackTraceElement[]|||getStackTrace()|||It returns an array of stack trace elements representing the stack dump of the thread.&&&27)|||static int|||enumerate()|||It is used to copy every active thread's thread group and its subgroup into the specified array.&&&28)|||Thread.State|||getState()|||It is used to return the state of the thread.&&&29)|||ThreadGroup|||getThreadGroup()|||It is used to return the thread group to which this thread belongs&&&30)|||String|||toString()|||It is used to return a string representation of this thread, including the thread's name, priority, and thread group.&&&31)|||void|||notify()|||It is used to give the notification for only one thread which is waiting for a particular object.&&&32)|||void|||notifyAll()|||It is used to give the notification to all waiting threads of a particular object.&&&33)|||void|||setContextClassLoader()|||It sets the context ClassLoader for the Thread.&&&34)|||ClassLoader|||getContextClassLoader()|||It returns the context ClassLoader for the thread.&&&35)|||static Thread.UncaughtExceptionHandler|||getDefaultUncaughtExceptionHandler()|||It returns the default handler invoked when a thread abruptly terminates due to an uncaught exception.&&&36)|||static void\t|||setDefaultUncaughtExceptionHandler()|||It sets the default handler invoked when a thread abruptly terminates due to an uncaught exception.""]","['|||Process-based Multitasking (Multiprocessing)|||Thread-based Multitasking (Multithreading)||||||Each process has an address in memory. In other words, each process allocates a separate memory area.|||A process is heavyweight.|||Cost of communication between the process is high.|||Switching from one process to another requires some time for saving and loading registers, memory maps, updating lists, etc.||||||Threads share the same address space.|||A thread is lightweight.|||Cost of communication between the thread is low.||||||How to perform two tasks by two threads?|||How to perform multithreading by anonymous class?|||What is the Thread Scheduler and what is the difference between preemptive scheduling and time slicing?|||What happens if we start a thread twice?|||What happens if we call the run() method instead of start() method?|||What is the purpose of join method?|||Why JVM terminates the daemon thread if no user threads are remaining?|||What is the shutdown hook?|||What is garbage collection?|||What is the purpose of finalize() method?|||What does the gc() method?|||What is synchronization and why use synchronization?|||What is the difference between synchronized method and synchronized block?|||What are the two ways to perform static synchronization?|||What is deadlock and when it can occur?|||What is interthread-communication or cooperation?||||||Multithreading|||Life Cycle of a Thread|||Two ways to create a Thread|||How to perform multiple tasks by multiple threads |||Thread Scheduler|||Sleeping a thread|||Can we start a thread twice?|||What happens if we call the run() method instead of start() method?|||Joining a thread|||Naming a thread|||Priority of a thread|||Daemon Thread|||ShutdownHook|||Garbage collection|||Synchronization with synchronized method|||Synchronized block|||Static synchronization|||Deadlock|||Inter-thread communication|||']"
115,['Life cycle of a Thread (Thread States)'],"['In Java, a thread always exists in any one of the following states. These states are:']","['https://www.javatpoint.com/how-to-create-a-thread-in-java', 'https://www.javatpoint.com/multithreading', 'https://www.javatpoint.com/how-to-create-a-thread-in-java', 'https://www.javatpoint.com/multithreading', 'https://www.javatpoint.com/how-to-create-a-thread-in-java']",['https://static.javatpoint.com/core/images/life-cycle-of-a-thread.png'],[],"['Explanation of Different Thread States', 'Implementation of Thread States', 'Java Program for Demonstrating Thread States']",[],[],"['Terminated: A thread reaches the termination state because of the following reasons:', 'The following diagram shows the different states involved in the life cycle of a thread.', 'It represents the first state of a thread that is the NEW state.', 'It represents the runnable state.It means a thread is waiting in the queue to run.', 'It represents the blocked state. In this state, the thread is waiting to acquire a lock.', 'It represents the final state of a thread that is terminated or dead. A terminated thread means it has completed its execution.', 'The following Java program shows some of the states of a thread defined above.', 'FileName: ThreadState.java']","['New: Whenever a new thread is created, it is always in the new state. For a thread in the new state, the code has not been run yet and thus has not begun its execution.', 'Active: When a thread invokes the start() method, it moves from the new state to the active state. The active state contains two states within it: one is runnable, and the other is running.', 'Blocked or Waiting: Whenever a thread is inactive for a span of time (not permanently) then, either the thread is in the blocked state or is in the waiting state.', 'If there are a lot of threads in the waiting or blocked state, then it is the duty of the thread scheduler to determine which thread to choose and which one to reject, and the chosen thread is then given the opportunity to run.', 'A terminated thread means the thread is no more in the system. In other words, the thread is dead, and there is no way one can respawn (active after kill) the dead thread.', 'In Java, one can get the current state of a thread using the Thread.getState() method. The java.lang.Thread.State class of Java provides the constants ENUM to represent the state of a thread. These constants are:', 'It represents the waiting state. A thread will go to this state when it invokes the Object.wait() method, or Thread.join() method with no timeout. A thread in the waiting state is waiting for another thread to complete its task.']","[""For example, a thread (let's say its name is A) may want to print some data from the printer. However, at the same time, the other thread (let's say its name is B) is using the printer to print some data. Therefore, thread A has to wait for thread B to use the printer. Thus, thread A is in the blocked state. A thread in the blocked state is unable to perform any execution and thus never consume any cycle of the Central Processing Unit (CPU). Hence, we can say that thread A remains idle until the thread scheduler reactivates thread A, which is in the waiting or blocked state."", 'When the main thread invokes the join() method then, it is said that the main thread is in the waiting state. The main thread then waits for the child threads to complete their tasks. When the child threads complete their job, a notification is sent to the main thread, which again moves the thread from waiting to the active state.', 'Timed Waiting: Sometimes, waiting for leads to starvation. For example, a thread (its name is A) has entered the critical section of a code and is not willing to leave that critical section. In such a scenario, another thread (its name is B) has to wait forever, which leads to starvation. To avoid such scenario, a timed waiting state is given to thread B. Thus, thread lies in the waiting state for a specific span of time, and not forever. A real example of timed waiting is when we invoke the sleep() method on a specific thread. The sleep() method puts the thread in the timed wait state. After the time runs out, the thread wakes up and start its execution from when it has left earlier.', 'It represents the timed waiting state. The main difference between waiting and timed waiting is the time constraint. Waiting has no time constraint, whereas timed waiting has the time constraint. A thread invoking the following method reaches the timed waiting state.', ""Explanation: Whenever we spawn a new thread, that thread attains the new state. When the method start() is invoked on a thread, the thread scheduler moves that thread to the runnable state. Whenever the join() method is invoked on any thread instance, the current thread executing that statement has to wait for this thread to finish its execution, i.e., move that thread to the terminated state. Therefore, before the final print statement is printed on the console, the program invokes the method join() on thread t2, making the thread t1 wait while the thread t2 finishes its execution and thus, the thread t2 get to the terminated or dead state. Thread t1 goes to the waiting state because it is waiting for thread t2 to finish it's execution as it has invoked the method join() on thread t2.""]","['public static final Thread.State NEW', 'public static final Thread.State RUNNABLE', 'public static final Thread.State BLOCKED', 'public static final Thread.State WAITING', 'public static final Thread.State TIMED_WAITING', 'public static final Thread.State TERMINATED', 'class ABC implements Runnable', 'public void run()', 'Thread.sleep(100);', 'catch (InterruptedException ie)', 'ie.printStackTrace();', 'System.out.println(""The state of thread t1 while it invoked the method join() on thread t2 -""+ ThreadState.t1.getState());', 'Thread.sleep(200);', 'catch (InterruptedException ie)', 'ie.printStackTrace();', 'public class ThreadState implements Runnable', 'public static Thread t1;', 'public static ThreadState obj;', 'public static void main(String argvs[])', 'obj = new ThreadState();', 't1 = new Thread(obj);', 'System.out.println(""The state of thread t1 after spawning it - "" + t1.getState());', 't1.start();', 'System.out.println(""The state of thread t1 after invoking the method start() on it - "" + t1.getState());', 'public void run()', 'ABC myObj = new ABC();', 'Thread t2 = new Thread(myObj);', 'System.out.println(""The state of thread t2 after spawning it - ""+ t2.getState());', 't2.start();', 'System.out.println(""the state of thread t2 after calling the method start() on it - "" + t2.getState());', 'Thread.sleep(200);', 'catch (InterruptedException ie)', 'ie.printStackTrace();', 'System.out.println(""The state of thread t2 after invoking the method sleep() on it - ""+ t2.getState() );', 't2.join();', 'catch (InterruptedException ie)', 'ie.printStackTrace();', 'System.out.println(""The state of thread t2 when it has completed it\'s execution - "" + t2.getState());']","['The state of thread t1 after spawning it - NEW', 'The state of thread t1 after invoking the method start() on it - RUNNABLE', 'The state of thread t2 after spawning it - NEW', 'the state of thread t2 after calling the method start() on it - RUNNABLE', 'The state of thread t1 while it invoked the method join() on thread t2 -TIMED_WAITING', 'The state of thread t2 after invoking the method sleep() on it - TIMED_WAITING', ""The state of thread t2 when it has completed it's execution - TERMINATED""]",[],"['|||Runnable: A thread, that is ready to run is then moved to the runnable state. In the runnable state, the thread may be running or may be ready to run at any given instant of time. It is the duty of the thread scheduler to provide the thread time to run, i.e., moving the thread the running state.|||A program implementing multithreading acquires a fixed slice of time to each individual thread. Each and every thread runs for a short span of time and when that allocated time slice is over, the thread voluntarily gives up the CPU to the other thread, so that the other threads can also run for their slice of time. Whenever such a scenario occurs, all those threads that are willing to run, waiting for their turn to run, lie in the runnable state. In the runnable state, there is a queue where the threads lie.|||Running: When the thread gets the CPU, it moves from the runnable to the running state. Generally, the most common change in the state of a thread is from runnable to running and again back to runnable.||||||When a thread has finished its job, then it exists or terminates normally.|||Abnormal termination: It occurs when some unusual events such as an unhandled exception or segmentation fault.||||||sleep|||join with timeout|||wait with timeout|||parkUntil|||parkNanos|||&&&|||New|||Active|||Blocked / Waiting|||Timed Waiting|||Terminated|||']"
116,['Java Threads | How to create a thread in Java'],['There are two ways to create a thread:'],"['https://www.javatpoint.com/thread-scheduler-in-java', 'https://www.javatpoint.com/life-cycle-of-a-thread', 'https://www.javatpoint.com/Thread-Schedular', 'https://www.javatpoint.com/life-cycle-of-a-thread', 'https://www.javatpoint.com/thread-scheduler-in-java']",[],[],[],"['Thread class:', 'Commonly used Constructors of Thread class:', 'Commonly used methods of Thread class:', 'Runnable interface:', 'Starting a thread:', '1) Java Thread Example by extending Thread class', '2) Java Thread Example by implementing Runnable interface', '3) Using the Thread Class: Thread(String Name)', '4) Using the Thread Class: Thread(Runnable r, String name)']",[],"['The start() method of Thread class is used to start a newly created thread. It performs the following tasks:', 'FileName: Multi.java', 'FileName: Multi3.java', 'We can directly use the Thread class to spawn new threads using the constructors defined above.', 'FileName: MyThread1.java', 'Observe the following program.', 'FileName: MyThread2.java']","['Thread class provide constructors and methods to create and perform operations on a thread.Thread class extends Object class and implements Runnable interface.', 'The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. Runnable interface have only one method named run().']","['If you are not extending the Thread class, your class object would not be treated as a thread object. So you need to explicitly create the Thread class object. We are passing the object of your class that implements Runnable so that your class run() method may execute.']","['class Multi extends Thread{', 'public void run(){', 'System.out.println(""thread is running..."");', 'public static void main(String args[]){', 'Multi t1=new Multi();', 't1.start();', 'class Multi3 implements Runnable{', 'public void run(){', 'System.out.println(""thread is running..."");', 'public static void main(String args[]){', 'Multi3 m1=new Multi3();', 'Thread t1 =new Thread(m1);   // Using the constructor Thread(Runnable r)', 't1.start();', 'public class MyThread1', 'public static void main(String argvs[])', 'Thread t= new Thread(""My first thread"");', 't.start();', 'String str = t.getName();', 'System.out.println(str);', 'public class MyThread2 implements Runnable', 'public void run()', 'System.out.println(""Now the thread is running ..."");', 'public static void main(String argvs[])', 'Runnable r1 = new MyThread2();', 'Thread th1 = new Thread(r1, ""My new thread"");', 'th1.start();', 'String str = th1.getName();', 'System.out.println(str);']","['thread is running...', 'thread is running...', 'My first thread', 'My new thread', 'Now the thread is running ...']",[],"['|||Thread()|||Thread(String name)|||Thread(Runnable r)|||Thread(Runnable r,String name)||||||A new thread starts(with new callstack).|||The thread moves from New state to the Runnable state.|||When the thread gets a chance to execute, its target run() method will run.|||&&&|||By extending Thread class|||By implementing Runnable interface.||||||public void run(): is used to perform action for a thread.|||public void start(): starts the execution of the thread.JVM calls the run() method on the thread.|||public void sleep(long miliseconds): Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds.|||public void join(): waits for a thread to die.|||public void join(long miliseconds): waits for a thread to die for the specified miliseconds.|||public int getPriority(): returns the priority of the thread.|||public int setPriority(int priority): changes the priority of the thread.|||public String getName(): returns the name of the thread.|||public void setName(String name): changes the name of the thread.|||public Thread currentThread(): returns the reference of currently executing thread.|||public int getId(): returns the id of the thread.|||public Thread.State getState(): returns the state of the thread.|||public boolean isAlive(): tests if the thread is alive.|||public void yield(): causes the currently executing thread object to temporarily pause and allow other threads to execute.|||public void suspend(): is used to suspend the thread(depricated).|||public void resume(): is used to resume the suspended thread(depricated).|||public void stop(): is used to stop the thread(depricated).|||public boolean isDaemon(): tests if the thread is a daemon thread.|||public void setDaemon(boolean b): marks the thread as daemon or user thread.|||public void interrupt(): interrupts the thread.|||public boolean isInterrupted(): tests if the thread has been interrupted.|||public static boolean interrupted(): tests if the current thread has been interrupted.||||||public void run(): is used to perform action for a thread.|||']"
117,['Thread Scheduler in Java'],"['A component of Java that decides which thread to run or execute and which thread to wait is called a thread scheduler in Java. In Java, a thread is only chosen by a thread scheduler if it is in the runnable state. However, if there is more than one thread in the runnable state, it is up to the thread scheduler to pick one of the threads and ignore the other ones. There are some criteria that decide which thread will execute first. There are two factors for scheduling a thread i.e. Priority and Time of arrival.']","['https://www.javatpoint.com/thread-sleep-in-java', 'https://www.javatpoint.com/how-to-create-a-thread-in-java', 'https://www.javatpoint.com/thread-sleep-in-java', 'https://www.javatpoint.com/how-to-create-a-thread-in-java', 'https://www.javatpoint.com/thread-sleep-in-java']","['https://static.javatpoint.com/core/images/thread-scheduler-in-java.png', 'https://static.javatpoint.com/core/images/thread-scheduler-in-java2.png', 'https://static.javatpoint.com/core/images/thread-scheduler-in-java3.png', 'https://static.javatpoint.com/core/images/thread-scheduler-in-java4.png']",[],"['Thread Scheduler Algorithms', 'Working of the Java Thread Scheduler']","['First Come First Serve Scheduling:', 'Time-slicing scheduling:', 'Preemptive-Priority Scheduling:']",[],"['On the basis of the above-mentioned factors, the scheduling algorithm is followed by a Java thread scheduler.', 'In this scheduling algorithm, the scheduler picks the threads thar arrive first in the runnable queue. Observe the following table:', 'Hence, Thread t1 will be processed first, and Thread t4 will be processed last.', 'The name of the scheduling algorithm denotes that the algorithm is related to the priority of the threads.']","['Priority: Priority of each thread lies between 1 to 10. If a thread has a higher priority, it means that thread has got a better chance of getting picked up by the thread scheduler.', 'In the above table, we can see that Thread t1 has arrived first, then Thread t2, then t3, and at last t4, and the order in which the threads will be processed is according to the time of arrival of threads.', 'In the above diagram, each thread is given a time slice of 2 seconds. Thus, after 2 seconds, the first thread leaves the CPU, and the CPU is then captured by Thread2. The same process repeats for the other threads too.', 'When two threads (Thread 2 and Thread 3) having the same priorities and arrival time, the scheduling will be decided on the basis of FCFS algorithm. Thus, the thread that arrives first gets the opportunity to execute first.']","['Time of Arrival: Suppose two threads of the same priority enter the runnable state, then priority cannot be the factor to pick a thread from these two threads. In such a case, arrival time of thread is considered by the thread scheduler. A thread that arrived first gets the preference over the other threads.', 'Usually, the First Come First Serve algorithm is non-preemptive, which is bad as it may lead to infinite blocking (also known as starvation). To avoid that, some time-slices are provided to the threads so that after some time, the running thread has to give up the CPU. Thus, the other waiting threads also get time to run their job.', 'Suppose there are multiple threads available in the runnable state. The thread scheduler picks that thread that has the highest priority. Since the algorithm is also preemptive, therefore, time slices are also provided to the threads to avoid starvation. Thus, after some time, even if the highest priority thread has not completed its job, it has to release the CPU because of preemption.', ""Let's understand the working of the Java thread scheduler. Suppose, there are five threads that have different arrival times and different priorities. Now, it is the responsibility of the thread scheduler to decide which thread will get the CPU first."", 'The thread scheduler selects the thread that has the highest priority, and the thread begins the execution of the job. If a thread is already in runnable state and another thread (that has higher priority) reaches in the runnable state, then the current thread is pre-empted from the processor, and the arrived thread with higher priority gets the CPU time.']",[],[],['Threads|||Time of Arrival&&&t1|||0&&&t2|||1&&&t3|||2&&&t4|||3'],[]
118,['Thread.sleep() in Java with Examples'],"['The Java Thread class provides the two variant of the sleep() method. First one accepts only an arguments, whereas the other variant accepts two arguments. The method sleep() is being used to halt the working of a thread for a given amount of time. The time up to which the thread remains in the sleeping state is known as the sleeping time of the thread. After the sleeping time is over, the thread starts its execution from where it has left.']","['https://www.javatpoint.com/can-we-start-a-thread-twice', 'https://www.javatpoint.com/thread-scheduler-in-java', 'https://www.javatpoint.com/can-we-start-a-thread-twice', 'https://www.javatpoint.com/thread-scheduler-in-java', 'https://www.javatpoint.com/can-we-start-a-thread-twice']",[],[],[],"['The sleep() Method Syntax:', 'Parameters:', 'Important Points to Remember About the Sleep() Method', 'Example of the sleep() method in Java : on the custom thread', 'Example of the sleep() Method in Java : on the main thread', 'Example of the sleep() Method in Java: When the sleeping time is -ive']",[],"['Following are the syntax of the sleep() method.', 'The Thread.sleep() method can be used with any thread. It means any other thread or the main thread can invoke the sleep() method.', 'The following are the parameters used in the sleep() method.', 'mls: The time in milliseconds is represented by the parameter mls. The duration for which the thread will sleep is given by the method sleep().', 'The method does not return anything.', 'Whenever the Thread.sleep() methods execute, it always halts the execution of the current thread.', 'Whenever another thread does interruption while the current thread is already in the sleep mode, then the InterruptedException is thrown.', 'The following example shows how one can use the sleep() method on the custom thread.', 'FileName: TestSleepMethod1.java', 'FileName: TestSleepMethod2.java', 'The following example throws the exception IllegalArguementException when the time for sleeping is negative.', 'FileName: TestSleepMethod3.java']","['n: It shows the additional time up to which the programmer or developer wants the thread to be in the sleeping state. The range of n is from 0 to 999999.', 'As you know well that at a time only one thread is executed. If you sleep a thread for the specified time, the thread scheduler picks up another thread and so on.']","['The method sleep() with the one parameter is the native method, and the implementation of the native method is accomplished in another programming language. The other methods having the two parameters are not the native method. That is, its implementation is accomplished in Java. We can access the sleep() methods with the help of the Thread class, as the signature of the sleep() methods contain the static keyword. The native, as well as the non-native method, throw a checked Exception. Therefore, either try-catch block or the throws keyword can work here.', 'If the system that is executing the threads is busy, then the actual sleeping time of the thread is generally more as compared to the time passed in arguments. However, if the system executing the sleep() method has less load, then the actual sleeping time of the thread is almost equal to the time passed in the argument.']","['public static void sleep(long mls) throws InterruptedException', 'public static void sleep(long mls, int n) throws InterruptedException', 'class TestSleepMethod1 extends Thread{', 'public void run(){', 'for(int i=1;i<5;i++){', 'try{Thread.sleep(500);}catch(InterruptedException e){System.out.println(e);}', 'System.out.println(i);', 'public static void main(String args[]){', 'TestSleepMethod1 t1=new TestSleepMethod1();', 'TestSleepMethod1 t2=new TestSleepMethod1();', 't1.start();', 't2.start();', 'import java.lang.Thread;', 'import java.io.*;', 'public class TestSleepMethod2', 'public static void main(String argvs[])', 'for (int j = 0; j < 5; j++)', 'Thread.sleep(1000);', 'System.out.println(j);', 'catch (Exception expn)', 'System.out.println(expn);', 'import java.lang.Thread;', 'import java.io.*;', 'public class TestSleepMethod3', 'public static void main(String argvs[])', 'for (int j = 0; j < 5; j++)', 'Thread.sleep(-100);', 'System.out.println(j);', 'catch (Exception expn)', 'System.out.println(expn);', 'java.lang.IllegalArgumentException: timeout value is negative']","['1', '1', '2', '2', '3', '3', '4', '4', '0', '1', '2', '3', '4', 'java.lang.IllegalArgumentException: timeout value is negative']",[],[]
119,['Can we start a thread twice'],"['No. After starting a thread, it can never be started again. If you does so, an IllegalThreadStateException is thrown. In such case, thread will run once but for second time, it will throw exception.']","['https://www.javatpoint.com/what-if-we-call-java-run-method-directly', 'https://www.javatpoint.com/thread-sleep-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestThreadTwice1', 'https://www.javatpoint.com/what-if-we-call-java-run-method-directly', 'https://www.javatpoint.com/thread-sleep-in-java', 'https://www.javatpoint.com/what-if-we-call-java-run-method-directly']",[],[],[],[],[],"[""Let's understand it by the example given below:""]",[],[],"['public class TestThreadTwice1 extends Thread{', 'public void run(){', 'System.out.println(""running..."");', 'public static void main(String args[]){', 'TestThreadTwice1 t1=new TestThreadTwice1();', 't1.start();', 't1.start();']","['running', 'Exception in thread ""main"" java.lang.IllegalThreadStateException']",[],[]
120,['What if we call Java run() method directly instead start() method?'],['FileName: TestCallRun1.java'],"['https://www.javatpoint.com/java-join-method', 'https://www.javatpoint.com/can-we-start-a-thread-twice', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestCallRun1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestCallRun2', 'https://www.javatpoint.com/java-join-method', 'https://www.javatpoint.com/can-we-start-a-thread-twice', 'https://www.javatpoint.com/java-join-method']",['https://static.javatpoint.com/images/callstack1.JPG'],[],[],[],[],"['Problem if you direct call run() method', 'FileName: TestCallRun2.java', 'As we can see in the above program that there is no context-switching because here t1 and t2 will be treated as normal object not thread object.']",[],[],"['class TestCallRun1 extends Thread{', 'public void run(){', 'System.out.println(""running..."");', 'public static void main(String args[]){', 'TestCallRun1 t1=new TestCallRun1();', 't1.run();//fine, but does not start a separate call stack', 'running...', 'class TestCallRun2 extends Thread{', 'public void run(){', 'for(int i=1;i<5;i++){', 'try{Thread.sleep(500);}catch(InterruptedException e){System.out.println(e);}', 'System.out.println(i);', 'public static void main(String args[]){', 'TestCallRun2 t1=new TestCallRun2();', 'TestCallRun2 t2=new TestCallRun2();', 't1.run();', 't2.run();']","['running...', '1', '2', '3', '4', '1', '2', '3', '4']",[],"['|||Each thread starts in a separate call stack.|||Invoking the run() method from the main thread, the run() method goes onto the current call stack rather than at the beginning of a new call stack.|||']"
121,['Java join() method'],"['The join() method in Java is provided by the java.lang.Thread class that permits one thread to wait until the other thread to finish its execution. Suppose th be the object the class Thread whose thread is doing its execution currently, then the th.join(); statement ensures that th is finished before the program does the execution of the next statement. When there are more than one thread invoking the join() method, then it leads to overloading on the join() method that permits the developer or programmer to mention the waiting period. However, similar to the sleep() method in Java, the join() method is also dependent on the operating system for the timing, so we should not assume that the join() method waits equal to the time we mention in the parameters. The following are the three overloaded join() methods.']","['https://www.javatpoint.com/naming-a-thread-in-java', 'https://www.javatpoint.com/what-if-we-call-java-run-method-directly', 'https://www.javatpoint.com/naming-a-thread-in-java', 'https://www.javatpoint.com/what-if-we-call-java-run-method-directly', 'https://www.javatpoint.com/naming-a-thread-in-java']",[],[],"['Description of The Overloaded join() Method', 'Example of join() Method in Java', 'The Join() Method: InterruptedException', 'Some More Examples of the join() Method']",['join(long miliseconds) Method Example'],[],"['The following program shows the usage of the join() method.', 'FileName: ThreadJoinExample.java', 'FileName: ThreadJoinExample1.java', ""Let' see some other examples."", 'Filename: TestJoinMethod1.java', 'We can see in the above example, when t1 completes its task then t2 and t3 starts executing.', 'Filename: TestJoinMethod2.jav', 'In the above example, when t1 completes its task for 1500 milliseconds(3 times), then t2 and t3 start executing.']","['Explanation: The above program shows that the second thread th2 begins after the first thread th1 has ended, and the thread th3 starts its work after the second thread th2 has ended or died.', 'We have learnt in the description of the join() method that whenever the interruption of the thread occurs, it leads to the throwing of InterruptedException. The following example shows the same.']","['join(): When the join() method is invoked, the current thread stops its execution and the thread goes into the wait state. The current thread remains in the wait state until the thread on which the join() method is invoked has achieved its dead state. If interruption of the thread occurs, then it throws the InterruptedException.', 'join(long mls): When the join() method is invoked, the current thread stops its execution and the thread goes into the wait state. The current thread remains in the wait state until the thread on which the join() method is invoked called is dead or the wait for the specified time frame(in milliseconds) is over.', 'join(long mls, int nanos): When the join() method is invoked, the current thread stops its execution and go into the wait state. The current thread remains in the wait state until the thread on which the join() method is invoked called is dead or the wait for the specified time frame(in milliseconds + nanos) is over.']","['public final void join() throws InterruptedException', 'public final synchronized void join(long mls) throws InterruptedException, where mls is in milliseconds', 'public final synchronized void join(long mls, int nanos) throws InterruptedException, where mls is in milliseconds.', 'import java.io.*;', 'class ThreadJoin extends Thread', 'public void run()', 'for (int j = 0; j < 2; j++)', 'Thread.sleep(300);', 'System.out.println(""The current thread name is: "" + Thread.currentThread().getName());', 'catch(Exception e)', 'System.out.println(""The exception has been caught: "" + e);', 'System.out.println( j );', 'public class ThreadJoinExample', 'public static void main (String argvs[])', 'ThreadJoin th1 = new ThreadJoin();', 'ThreadJoin th2 = new ThreadJoin();', 'ThreadJoin th3 = new ThreadJoin();', 'th1.start();', 'System.out.println(""The current thread name is: ""+ Thread.currentThread().getName());', 'th1.join();', 'catch(Exception e)', 'System.out.println(""The exception has been caught "" + e);', 'th2.start();', 'System.out.println(""The current thread name is: "" + Thread.currentThread().getName());', 'th2.join();', 'catch(Exception e)', 'System.out.println(""The exception has been caught "" + e);', 'th3.start();', 'class ABC extends Thread', 'Thread threadToInterrupt;', 'public void run()', 'threadToInterrupt.interrupt();', 'public class ThreadJoinExample1', 'public static void main(String[] argvs)', 'ABC th1 = new ABC();', 'th1.threadToInterrupt = Thread.currentThread();', 'th1.start();', 'th1.join();', 'catch (InterruptedException ex)', 'System.out.println(""The exception has been caught. "" + ex);', 'class TestJoinMethod1 extends Thread{', 'public void run(){', 'for(int i=1;i<=5;i++){', 'try{', 'Thread.sleep(500);', '}catch(Exception e){System.out.println(e);}', 'System.out.println(i);', 'public static void main(String args[]){', 'TestJoinMethod1 t1=new TestJoinMethod1();', 'TestJoinMethod1 t2=new TestJoinMethod1();', 'TestJoinMethod1 t3=new TestJoinMethod1();', 't1.start();', 'try{', 't1.join();', '}catch(Exception e){System.out.println(e);}', 't2.start();', 't3.start();', 'class TestJoinMethod2 extends Thread{', 'public void run(){', 'for(int i=1;i<=5;i++){', 'try{', 'Thread.sleep(500);', '}catch(Exception e){System.out.println(e);}', 'System.out.println(i);', 'public static void main(String args[]){', 'TestJoinMethod2 t1=new TestJoinMethod2();', 'TestJoinMethod2 t2=new TestJoinMethod2();', 'TestJoinMethod2 t3=new TestJoinMethod2();', 't1.start();', 'try{', 't1.join(1500);', '}catch(Exception e){System.out.println(e);}', 't2.start();', 't3.start();']","['The current thread name is: main', 'The current thread name is: Thread - 0', '0', 'The current thread name is: Thread - 0', '1', 'The current thread name is: main', 'The current thread name is: Thread - 1', '0', 'The current thread name is: Thread - 1', '1', 'The current thread name is: Thread - 2', '0', 'The current thread name is: Thread - 2', '1', 'The exception has been caught. java.lang.InterruptedException', '1', '2', '3', '4', '5', '1', '1', '2', '2', '3', '3', '4', '4', '5', '5', '1', '2', '3', '1', '4', '1', '2', '5', '2', '3', '3', '4', '4', '5', '5']",[],[]
122,['Naming Thread and Current Thread'],"['The Thread class provides methods to change and get the name of a thread. By default, each thread has a name, i.e. thread-0, thread-1 and so on. By we can change the name of the thread by using the setName() method. The syntax of setName() and getName() methods are given below:']","['https://www.javatpoint.com/priority-of-a-thread-in-java', 'https://www.javatpoint.com/java-join-method', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestMultiNaming1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestMultiNaming2', 'https://www.javatpoint.com/priority-of-a-thread-in-java', 'https://www.javatpoint.com/java-join-method', 'https://www.javatpoint.com/priority-of-a-thread-in-java']",[],[],"['Naming Thread', 'Current Thread']","['Example of naming a thread : Using setName() Method', 'Example of naming a thread : Without Using setName() Method', 'Example of currentThread() method']",[],"['We can also set the name of a thread directly when we create a new thread using the constructor of the class.', 'FileName: TestMultiNaming1.java', 'One can also set the name of a thread at the time of the creation of a thread, without using the setName() method. Observe the following code.', 'FileName: ThreadNamingExample.java', 'The currentThread() method returns a reference of the currently executing thread.', 'FileName: TestMultiNaming2.java']",[],[],"['public String getName(): is used to return the name of a thread.', 'public void setName(String name): is used to change the name of a thread.', 'class TestMultiNaming1 extends Thread{', 'public void run(){', 'System.out.println(""running..."");', 'public static void main(String args[]){', 'TestMultiNaming1 t1=new TestMultiNaming1();', 'TestMultiNaming1 t2=new TestMultiNaming1();', 'System.out.println(""Name of t1:""+t1.getName());', 'System.out.println(""Name of t2:""+t2.getName());', 't1.start();', 't2.start();', 't1.setName(""Sonoo Jaiswal"");', 'System.out.println(""After changing name of t1:""+t1.getName());', 'import java.io.*;', 'class ThreadName extends Thread', 'ThreadName(String threadName)', 'super(threadName);', 'public void run()', 'System.out.println("" The thread is executing...."");', 'public class ThreadNamingExample', 'public static void main (String argvs[])', 'ThreadName th1 = new ThreadName(""JavaTpoint1"");', 'ThreadName th2 = new ThreadName(""JavaTpoint2"");', 'System.out.println(""Thread - 1: "" + th1.getName());', 'System.out.println(""Thread - 2: "" + th2.getName());', 'th1.start();', 'th2.start();', 'public static Thread currentThread()', 'class TestMultiNaming2 extends Thread{', 'public void run(){', 'System.out.println(Thread.currentThread().getName());', 'public static void main(String args[]){', 'TestMultiNaming2 t1=new TestMultiNaming2();', 'TestMultiNaming2 t2=new TestMultiNaming2();', 't1.start();', 't2.start();']","['Name of t1:Thread-0', 'Name of t2:Thread-1', 'After changing name of t1:Sonoo Jaiswal', 'running...', 'running...', 'Thread - 1: JavaTpoint1', 'Thread - 2: JavaTpoint2', 'The thread is executing....', 'The thread is executing....', 'Thread-0', 'Thread-1']",[],[]
123,['Priority of a Thread (Thread Priority)'],"['Each thread has a priority. Priorities are represented by a number between 1 and 10. In most cases, the thread scheduler schedules the threads according to their priority (known as preemptive scheduling). But it is not guaranteed because it depends on JVM specification that which scheduling it chooses. Note that not only JVM a Java programmer can also assign the priorities of a thread explicitly in a Java program.']","['https://www.javatpoint.com/daemon-thread', 'https://www.javatpoint.com/naming-a-thread-in-java', 'https://www.javatpoint.com/daemon-thread', 'https://www.javatpoint.com/naming-a-thread-in-java', 'https://www.javatpoint.com/daemon-thread']",[],[],"['Setter & Getter Method of Thread Priority', '3 constants defined in Thread class:']","['Example of priority of a Thread:', 'Example of IllegalArgumentException']",[],"[""Let's discuss the setter and getter method of the thread priority."", 'public final int getPriority(): The java.lang.Thread.getPriority() method returns the priority of the given thread.', 'Default priority of a thread is 5 (NORM_PRIORITY). The value of MIN_PRIORITY is 1 and the value of MAX_PRIORITY is 10.', 'FileName: ThreadPriorityExample.java', 'FileName: ThreadPriorityExample1.java', 'FileName: IllegalArgumentException.java', 'When we execute the above program, we get the following exception:']","[""We know that if the value of the parameter newPriority of the method getPriority() goes out of the range (1 to 10), then we get the IllegalArgumentException. Let's observe the same with the help of an example.""]","['public final void setPriority(int newPriority): The java.lang.Thread.setPriority() method updates or assign the priority of the thread to newPriority. The method throws IllegalArgumentException if the value newPriority goes out of the range, which is 1 (minimum) to 10 (maximum).', 'We know that a thread with high priority will get preference over lower priority threads when it comes to the execution of threads. However, there can be other scenarios where two threads can have the same priority. All of the processing, in order to look after the threads, is done by the Java thread scheduler. Refer to the following example to comprehend what will happen if two threads have the same priority.', ""Explanation: If there are two threads that have the same priority, then one can not predict which thread will get the chance to execute first. The execution then is dependent on the thread scheduler's algorithm (First Come First Serve, Round-Robin, etc.)""]","['import java.lang.*;', 'public class ThreadPriorityExample extends Thread', 'public void run()', 'System.out.println(""Inside the run() method"");', 'public static void main(String argvs[])', 'ThreadPriorityExample th1 = new ThreadPriorityExample();', 'ThreadPriorityExample th2 = new ThreadPriorityExample();', 'ThreadPriorityExample th3 = new ThreadPriorityExample();', 'System.out.println(""Priority of the thread th1 is : "" + th1.getPriority());', 'System.out.println(""Priority of the thread th2 is : "" + th2.getPriority());', 'System.out.println(""Priority of the thread th2 is : "" + th2.getPriority());', 'th1.setPriority(6);', 'th2.setPriority(3);', 'th3.setPriority(9);', 'System.out.println(""Priority of the thread th1 is : "" + th1.getPriority());', 'System.out.println(""Priority of the thread th2 is : "" + th2.getPriority());', 'System.out.println(""Priority of the thread th3 is : "" + th3.getPriority());', 'System.out.println(""Currently Executing The Thread : "" + Thread.currentThread().getName());', 'System.out.println(""Priority of the main thread is : "" + Thread.currentThread().getPriority());', 'Thread.currentThread().setPriority(10);', 'System.out.println(""Priority of the main thread is : "" + Thread.currentThread().getPriority());', 'import java.lang.*;', 'public class ThreadPriorityExample1 extends Thread', 'public void run()', 'System.out.println(""Inside the run() method"");', 'public static void main(String argvs[])', 'Thread.currentThread().setPriority(7);', 'System.out.println(""Priority of the main thread is : "" + Thread.currentThread().getPriority());', 'ThreadPriorityExample1 th1 = new ThreadPriorityExample1();', 'System.out.println(""Priority of the thread th1 is : "" + th1.getPriority());', 'import java.lang.*;', 'public class IllegalArgumentException extends Thread', 'public static void main(String argvs[])', 'Thread.currentThread().setPriority(17);', 'System.out.println(""Priority of the main thread is : "" + Thread.currentThread().getPriority());']","['Priority of the thread th1 is : 5', 'Priority of the thread th2 is : 5', 'Priority of the thread th2 is : 5', 'Priority of the thread th1 is : 6', 'Priority of the thread th2 is : 3', 'Priority of the thread th3 is : 9', 'Currently Executing The Thread : main', 'Priority of the main thread is : 5', 'Priority of the main thread is : 10', 'Priority of the main thread is : 7', 'Priority of the thread th1 is : 7', 'Exception in thread ""main"" java.lang.IllegalArgumentException', 'at java.base/java.lang.Thread.setPriority(Thread.java:1141)', 'at IllegalArgumentException.main(IllegalArgumentException.java:12)']",[],['|||public static int MIN_PRIORITY |||public static int NORM_PRIORITY|||public static int MAX_PRIORITY|||']
124,['Daemon Thread in Java'],"['Daemon thread in Java is a service provider thread that provides services to the user thread. Its life depend on the mercy of user threads i.e. when all the user threads dies, JVM terminates this thread automatically.']","['https://www.javatpoint.com/java-thread-pool', 'https://www.javatpoint.com/priority-of-a-thread-in-java', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestDaemonThread1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestDaemonThread2', 'https://www.javatpoint.com/java-thread-pool', 'https://www.javatpoint.com/priority-of-a-thread-in-java', 'https://www.javatpoint.com/java-thread-pool']",[],[],['Points to remember for Daemon Thread in Java'],"['Why JVM terminates the daemon thread if there is no user thread?', 'Methods for Java Daemon thread by Thread class', 'Simple example of Daemon thread in java']","['Note: If you want to make a user thread as Daemon, it must not be started otherwise it will throw IllegalThreadStateException.']","['There are many java daemon threads running automatically e.g. gc, finalizer etc. ', 'The java.lang.Thread class provides two methods for java daemon thread.', 'File: MyThread.java', 'File: MyThread.java']","['You can see all the detail by typing the jconsole in the command prompt. The jconsole tool provides information about the loaded classes, memory usage, running threads etc.']","['The sole purpose of the daemon thread is that it provides services to user thread for background supporting task. If there is no user thread, why should JVM keep running this thread. That is why JVM terminates the daemon thread if there is no user thread.']","['public class TestDaemonThread1 extends Thread{', 'public void run(){', 'if(Thread.currentThread().isDaemon()){//checking for daemon thread', 'System.out.println(""daemon thread work"");', 'else{', 'System.out.println(""user thread work"");', 'public static void main(String[] args){', 'TestDaemonThread1 t1=new TestDaemonThread1();//creating thread', 'TestDaemonThread1 t2=new TestDaemonThread1();', 'TestDaemonThread1 t3=new TestDaemonThread1();', 't1.setDaemon(true);//now t1 is daemon thread', 't1.start();//starting threads', 't2.start();', 't3.start();', 'class TestDaemonThread2 extends Thread{', 'public void run(){', 'System.out.println(""Name: ""+Thread.currentThread().getName());', 'System.out.println(""Daemon: ""+Thread.currentThread().isDaemon());', 'public static void main(String[] args){', 'TestDaemonThread2 t1=new TestDaemonThread2();', 'TestDaemonThread2 t2=new TestDaemonThread2();', 't1.start();', 't1.setDaemon(true);//will throw exception here', 't2.start();']","['daemon thread work', 'user thread work', 'user thread work', 'exception in thread main: java.lang.IllegalThreadStateException']",['o.MethodDescriptio&&&)public void setDaemon(boolean status)is used to mark the current thread as daemon thread or user thread&&&)public boolean isDaemon()is used to check that current is daemon'],[]
125,['Java Thread Pool'],['Java Thread pool represents a group of worker threads that are waiting for the job and reused many times.'],"['https://www.javatpoint.com/threadgroup-in-java', 'https://www.javatpoint.com/daemon-thread', 'https://www.javatpoint.com/https://static.javatpoint.com/src/multi/threadpool.zip', 'https://www.javatpoint.com/threadgroup-in-java', 'https://www.javatpoint.com/daemon-thread', 'https://www.javatpoint.com/threadgroup-in-java']",[],[],"['Thread Pool Methods', 'Example of Java Thread Pool', 'Thread Pool Example: 2', 'Risks involved in Thread Pools', 'Points to Remember', 'Tuning the Thread Pool', 'Conclusion']","['Advantage of Java Thread Pool', 'Real time usage']",[],"['newFixedThreadPool(int s): The method creates a thread pool of the fixed size s.', 'newSingleThreadExecutor(): The method creates a new thread.', 'Better performance It saves time because there is no need to create a new thread.', 'It is used in Servlet and JSP where the container creates a thread pool to process the request.', ""Let's see a simple example of the Java thread pool using ExecutorService and Executors."", 'File: WorkerThread.java', 'File: TestThreadPool.java', ""Let's see another example of the thread pool."", 'FileName: ThreadPoolExample.java', 'The following are the risk involved in the thread pools.']","['In the case of a thread pool, a group of fixed-size threads is created. A thread from the thread pool is pulled out and assigned a job by the service provider. After completion of the job, the thread is contained in the thread pool again.', 'newCachedThreadPool(): The method creates a new thread pool that creates the new threads when needed but will still use the previously created thread whenever they are available to use.', 'Explanation: It is evident by looking at the output of the program that tasks 4 and 5 are executed only when the thread has an idle thread. Until then, the extra tasks are put in the queue.', 'Do not queue the tasks that are concurrently waiting for the results obtained from the other tasks. It may lead to a deadlock situation, as explained above.', 'Care must be taken whenever threads are used for the operation that is long-lived. It may result in the waiting of thread forever and will finally lead to the leakage of the resource.', 'One needs to understand the tasks to effectively tune the thread pool. If the given tasks are contrasting, then one should look for pools for executing different varieties of tasks so that one can properly tune them.', 'To reduce the probability of running JVM out of memory, one can control the maximum threads that can run in JVM. The thread pool cannot create new threads after it has reached the maximum limit.', 'A thread pool can use the same used thread if the thread has finished its execution. Thus, the time and resources used for the creation of a new thread are saved.']","['The takeaway from the above example is when one wants to execute 50 tasks but is not willing to create 50 threads. In such a case, one can create a pool of 10 threads. Thus, 10 out of 50 tasks are assigned, and the rest are put in the queue. Whenever any thread out of 10 threads becomes idle, it picks up the 11th task. The other pending tasks are treated the same way.', 'Deadlock: It is a known fact that deadlock can come in any program that involves multithreading, and a thread pool introduces another scenario of deadlock. Consider a scenario where all the threads that are executing are waiting for the results from the threads that are blocked and waiting in the queue because of the non-availability of threads for the execution.', 'Thread Leakage: Leakage of threads occurs when a thread is being removed from the pool to execute a task but is not returning to it after the completion of the task. For example, when a thread throws the exception and the pool class is not able to catch this exception, then the thread exits and reduces the thread pool size by 1. If the same thing repeats a number of times, then there are fair chances that the pool will become empty, and hence, there are no threads available in the pool for executing other requests.', 'Resource Thrashing: A lot of time is wasted in context switching among threads when the size of the thread pool is very large. Whenever there are more threads than the optimal number may cause the starvation problem, and it leads to resource thrashing.', 'In the end, the thread pool has to be ended explicitly. If it does not happen, then the program continues to execute, and it never ends. Invoke the shutdown() method on the thread pool to terminate the executor. Note that if someone tries to send another task to the executor after shutdown, it will throw a RejectedExecutionException.', 'The accurate size of a thread pool is decided by the number of available processors and the type of tasks the threads have to execute. If a system has the P processors that have only got the computation type processes, then the maximum size of the thread pool of P or P + 1 achieves the maximum efficiency. However, the tasks may have to wait for I/O, and in such a scenario, one has to take into consideration the ratio of the waiting time (W) and the service time (S) for the request; resulting in the maximum size of the pool P * (1 + W / S) for the maximum efficiency.', 'A thread pool is a very handy tool for organizing applications, especially on the server-side. Concept-wise, a thread pool is very easy to comprehend. However, one may have to look at a lot of issues when dealing with a thread pool. It is because the thread pool comes with some risks involved it (risks are discussed above).']","['import java.util.concurrent.ExecutorService;', 'import java.util.concurrent.Executors;', 'class WorkerThread implements Runnable {', 'private String message;', 'public WorkerThread(String s){', 'this.message=s;', 'public void run() {', 'System.out.println(Thread.currentThread().getName()+"" (Start) message = ""+message);', 'processmessage();//call processmessage method that sleeps the thread for 2 seconds', 'System.out.println(Thread.currentThread().getName()+"" (End)"");//prints thread name', 'private void processmessage() {', 'try {  Thread.sleep(2000);  } catch (InterruptedException e) { e.printStackTrace(); }', 'public class TestThreadPool {', 'public static void main(String[] args) {', 'ExecutorService executor = Executors.newFixedThreadPool(5);//creating a pool of 5 threads', 'for (int i = 0; i < 10; i++) {', 'Runnable worker = new WorkerThread("""" + i);', 'executor.execute(worker);//calling execute method of ExecutorService', '}', 'executor.shutdown();', 'while (!executor.isTerminated()) {   }', 'System.out.println(""Finished all threads"");', 'pool-1-thread-1 (Start) message = 0', 'pool-1-thread-2 (Start) message = 1', 'pool-1-thread-3 (Start) message = 2', 'pool-1-thread-5 (Start) message = 4', 'pool-1-thread-4 (Start) message = 3', 'pool-1-thread-2 (End)', 'pool-1-thread-2 (Start) message = 5', 'pool-1-thread-1 (End)', 'pool-1-thread-1 (Start) message = 6', 'pool-1-thread-3 (End)', 'pool-1-thread-3 (Start) message = 7', 'pool-1-thread-4 (End)', 'pool-1-thread-4 (Start) message = 8', 'pool-1-thread-5 (End)', 'pool-1-thread-5 (Start) message = 9', 'pool-1-thread-2 (End)', 'pool-1-thread-1 (End)', 'pool-1-thread-4 (End)', 'pool-1-thread-3 (End)', 'pool-1-thread-5 (End)', 'Finished all threads', 'import java.util.Date;', 'import java.util.concurrent.ExecutorService;', 'import java.util.concurrent.Executors;', 'import java.text.SimpleDateFormat;', 'class Tasks implements Runnable', 'private String taskName;', 'public Tasks(String str)', 'taskName = str;', 'public void run()', 'for (int j = 0; j <= 5; j++)', 'if (j == 0)', 'Date dt = new Date();', 'SimpleDateFormat sdf = new SimpleDateFormat(""hh : mm : ss"");', 'System.out.println(""Initialization time for the task name: ""+ taskName + "" = "" + sdf.format(dt));', 'Date dt = new Date();', 'SimpleDateFormat sdf = new SimpleDateFormat(""hh : mm : ss"");', 'System.out.println(""Time of execution for the task name: "" + taskName + "" = "" +sdf.format(dt));', 'Thread.sleep(1000);', 'System.out.println(taskName + "" is complete."");', 'catch(InterruptedException ie)', 'ie.printStackTrace();', 'public class ThreadPoolExample', 'static final int MAX_TH = 3;', 'public static void main(String argvs[])', 'Runnable rb1 = new Tasks(""task 1"");', 'Runnable rb2 = new Tasks(""task 2"");', 'Runnable rb3 = new Tasks(""task 3"");', 'Runnable rb4 = new Tasks(""task 4"");', 'Runnable rb5 = new Tasks(""task 5"");', 'ExecutorService pl = Executors.newFixedThreadPool(MAX_TH);', 'pl.execute(rb1);', 'pl.execute(rb2);', 'pl.execute(rb3);', 'pl.execute(rb4);', 'pl.execute(rb5);', 'pl.shutdown();', 'Initialization time for the task name: task 1 = 06 : 13 : 02', 'Initialization time for the task name: task 2 = 06 : 13 : 02', 'Initialization time for the task name: task 3 = 06 : 13 : 02', 'Time of execution for the task name: task 1 = 06 : 13 : 04', 'Time of execution for the task name: task 2 = 06 : 13 : 04', 'Time of execution for the task name: task 3 = 06 : 13 : 04', 'Time of execution for the task name: task 1 = 06 : 13 : 05', 'Time of execution for the task name: task 2 = 06 : 13 : 05', 'Time of execution for the task name: task 3 = 06 : 13 : 05', 'Time of execution for the task name: task 1 = 06 : 13 : 06', 'Time of execution for the task name: task 2 = 06 : 13 : 06', 'Time of execution for the task name: task 3 = 06 : 13 : 06', 'Time of execution for the task name: task 1 = 06 : 13 : 07', 'Time of execution for the task name: task 2 = 06 : 13 : 07', 'Time of execution for the task name: task 3 = 06 : 13 : 07', 'Time of execution for the task name: task 1 = 06 : 13 : 08', 'Time of execution for the task name: task 2 = 06 : 13 : 08', 'Time of execution for the task name: task 3 = 06 : 13 : 08', 'task 2 is complete.', 'Initialization time for the task name: task 4 = 06 : 13 : 09', 'task 1 is complete.', 'Initialization time for the task name: task 5 = 06 : 13 : 09', 'task 3 is complete.', 'Time of execution for the task name: task 4 = 06 : 13 : 10', 'Time of execution for the task name: task 5 = 06 : 13 : 10', 'Time of execution for the task name: task 4 = 06 : 13 : 11', 'Time of execution for the task name: task 5 = 06 : 13 : 11', 'Time of execution for the task name: task 4 = 06 : 13 : 12', 'Time of execution for the task name: task 5 = 06 : 13 : 12', 'Time of execution for the task name: task 4 = 06 : 13 : 13', 'Time of execution for the task name: task 5 = 06 : 13 : 13', 'Time of execution for the task name: task 4 = 06 : 13 : 14', 'Time of execution for the task name: task 5 = 06 : 13 : 14', 'task 4 is complete.', 'task 5 is complete.']","['pool-1-thread-1 (Start) message = 0', 'pool-1-thread-2 (Start) message = 1', 'pool-1-thread-3 (Start) message = 2', 'pool-1-thread-5 (Start) message = 4', 'pool-1-thread-4 (Start) message = 3', 'pool-1-thread-2 (End)', 'pool-1-thread-2 (Start) message = 5', 'pool-1-thread-1 (End)', 'pool-1-thread-1 (Start) message = 6', 'pool-1-thread-3 (End)', 'pool-1-thread-3 (Start) message = 7', 'pool-1-thread-4 (End)', 'pool-1-thread-4 (Start) message = 8', 'pool-1-thread-5 (End)', 'pool-1-thread-5 (Start) message = 9', 'pool-1-thread-2 (End)', 'pool-1-thread-1 (End)', 'pool-1-thread-4 (End)', 'pool-1-thread-3 (End)', 'pool-1-thread-5 (End)', 'Finished all threads', 'Initialization time for the task name: task 1 = 06 : 13 : 02', 'Initialization time for the task name: task 2 = 06 : 13 : 02', 'Initialization time for the task name: task 3 = 06 : 13 : 02', 'Time of execution for the task name: task 1 = 06 : 13 : 04', 'Time of execution for the task name: task 2 = 06 : 13 : 04', 'Time of execution for the task name: task 3 = 06 : 13 : 04', 'Time of execution for the task name: task 1 = 06 : 13 : 05', 'Time of execution for the task name: task 2 = 06 : 13 : 05', 'Time of execution for the task name: task 3 = 06 : 13 : 05', 'Time of execution for the task name: task 1 = 06 : 13 : 06', 'Time of execution for the task name: task 2 = 06 : 13 : 06', 'Time of execution for the task name: task 3 = 06 : 13 : 06', 'Time of execution for the task name: task 1 = 06 : 13 : 07', 'Time of execution for the task name: task 2 = 06 : 13 : 07', 'Time of execution for the task name: task 3 = 06 : 13 : 07', 'Time of execution for the task name: task 1 = 06 : 13 : 08', 'Time of execution for the task name: task 2 = 06 : 13 : 08', 'Time of execution for the task name: task 3 = 06 : 13 : 08', 'task 2 is complete.', 'Initialization time for the task name: task 4 = 06 : 13 : 09', 'task 1 is complete.', 'Initialization time for the task name: task 5 = 06 : 13 : 09', 'task 3 is complete.', 'Time of execution for the task name: task 4 = 06 : 13 : 10', 'Time of execution for the task name: task 5 = 06 : 13 : 10', 'Time of execution for the task name: task 4 = 06 : 13 : 11', 'Time of execution for the task name: task 5 = 06 : 13 : 11', 'Time of execution for the task name: task 4 = 06 : 13 : 12', 'Time of execution for the task name: task 5 = 06 : 13 : 12', 'Time of execution for the task name: task 4 = 06 : 13 : 13', 'Time of execution for the task name: task 5 = 06 : 13 : 13', 'Time of execution for the task name: task 4 = 06 : 13 : 14', 'Time of execution for the task name: task 5 = 06 : 13 : 14', 'task 4 is complete.', 'task 5 is complete.']",[],[]
126,['ThreadGroup in Java'],"['Java provides a convenient way to group multiple threads in a single object. In such a way, we can suspend, resume or interrupt a group of threads by a single method call.']","['https://www.javatpoint.com/ShutdownHook-thread', 'https://www.javatpoint.com/java-thread-pool', 'https://www.javatpoint.com/java-threadgroup-checkaccess-method', 'https://www.javatpoint.com/java-threadgroup-activecount-method', 'https://www.javatpoint.com/java-threadgroup-activegroupcount-method', 'https://www.javatpoint.com/java-threadgroup-destroy-method', 'https://www.javatpoint.com/java-threadgroup-enumerate-method', 'https://www.javatpoint.com/java-threadgroup-getmaxpriority-method', 'https://www.javatpoint.com/java-threadgroup-getname-method', 'https://www.javatpoint.com/java-threadgroup-getparent-method', 'https://www.javatpoint.com/java-threadgroup-interrupt-method', 'https://www.javatpoint.com/java-threadgroup-isdaemon-method', 'https://www.javatpoint.com/java-threadgroup-setdaemon-method', 'https://www.javatpoint.com/java-threadgroup-isdestroyed-method', 'https://www.javatpoint.com/java-threadgroup-list-method', 'https://www.javatpoint.com/java-threadgroup-parentof-method', 'https://www.javatpoint.com/java-threadgroup-suspend-method', 'https://www.javatpoint.com/java-threadgroup-resume-method', 'https://www.javatpoint.com/java-threadgroup-setmaxpriority-method', 'https://www.javatpoint.com/java-threadgroup-stop-method', 'https://www.javatpoint.com/java-threadgroup-tostring-method', 'https://www.javatpoint.com/ShutdownHook-thread', 'https://www.javatpoint.com/java-thread-pool', 'https://www.javatpoint.com/ShutdownHook-thread']",[],[],"['Constructors of ThreadGroup class', 'Methods of ThreadGroup class', 'ThreadGroup Example', 'Thread Pool Methods Example: int activeCount()', 'Thread Pool Methods Example: int activeGroupCount()', 'Thread Pool Methods Example: int enumerate()', 'Thread Pool Methods Example: int getMaxPriority()', 'Thread Pool Methods Example: ThreadGroup getParent()', 'Thread Pool Methods Example: void interrupt()', 'Thread Pool Methods Example: boolean isDaemon()', 'Thread Pool Methods Example: boolean isDestroyed()']",['Thread Pool Methods Example: void destroy()'],"['Note: Now suspend(), resume() and stop() methods are deprecated.']","['Java thread group is implemented by java.lang.ThreadGroup class.', 'There are only two constructors of ThreadGroup class.', 'There are many methods in ThreadGroup class. A list of ThreadGroup methods is given below.', ""Let's see a code to group multiple threads."", 'Now we can interrupt all threads by a single line of code only.', 'File: ThreadGroupDemo.java', ""Let's see how one can use the method activeCount()."", 'FileName: ActiveCountExample.java', 'Now, we will learn how one can use the activeGroupCount() method in the code.', 'FileName: ActiveGroupCountExample.java', 'Now, we will learn how one can use the destroy() method in the code.', 'FileName: DestroyExample.java', 'Now, we will learn how one can use the enumerate() method in the code.', 'FileName: EnumerateExample.java', 'The following code shows the working of the getMaxPriority() method.', 'FileName: GetMaxPriorityExample.java', 'Now, we will learn how one can use the getParent() method in the code.', 'FileName: GetParentExample.java', 'The following program illustrates how one can use the interrupt() method.', 'FileName: InterruptExample.java', 'The following program illustrates how one can use the isDaemon() method.', 'FileName: IsDaemonExample.java', 'The following program illustrates how one can use the isDestroyed() method.', 'FileName: IsDestroyedExample.java']","['A ThreadGroup represents a set of threads. A thread group can also include the other thread group. The thread group creates a tree in which every thread group except the initial thread group has a parent. ', ""A thread is allowed to access information about its own thread group, but it cannot access the information about its thread group's parent thread group or any other thread groups."", 'Now all 3 threads belong to one group. Here, tg1 is the thread group name, MyRunnable is the class that implements Runnable interface and ""one"", ""two"" and ""three"" are the thread names.']",[],"['ThreadGroup tg1 = new ThreadGroup(""Group A"");', 'Thread t1 = new Thread(tg1,new MyRunnable(),""one"");', 'Thread t2 = new Thread(tg1,new MyRunnable(),""two"");', 'Thread t3 = new Thread(tg1,new MyRunnable(),""three"");', 'Thread.currentThread().getThreadGroup().interrupt();', 'public class ThreadGroupDemo implements Runnable{', 'public void run() {', 'System.out.println(Thread.currentThread().getName());', '}', 'public static void main(String[] args) {', 'ThreadGroupDemo runnable = new ThreadGroupDemo();', 'ThreadGroup tg1 = new ThreadGroup(""Parent ThreadGroup"");', '', 'Thread t1 = new Thread(tg1, runnable,""one"");', 't1.start();', 'Thread t2 = new Thread(tg1, runnable,""two"");', 't2.start();', 'Thread t3 = new Thread(tg1, runnable,""three"");', 't3.start();', '', 'System.out.println(""Thread Group Name: ""+tg1.getName());', 'tg1.list();', '}', 'Thread Group Name: Parent ThreadGroup', 'java.lang.ThreadGroup[name=Parent ThreadGroup,maxpri=10]', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 1000; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered "" + e);', 'public class ActiveCountExample', 'public static void main(String argvs[])', 'ThreadGroup tg = new ThreadGroup(""The parent group of threads"");', 'ThreadNew th1 = new ThreadNew(""first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""second"", tg);', 'System.out.println(""Starting the second"");', 'System.out.println(""The total number of active threads are: "" + tg.activeCount());', 'Starting the first', 'Starting the second', 'The total number of active threads are: 2', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 100; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered "" + e);', 'System.out.println(Thread.currentThread().getName() + "" thread has finished executing"");', 'public class ActiveGroupCountExample', 'public static void main(String argvs[])', 'ThreadGroup tg = new ThreadGroup(""The parent group of threads"");', 'ThreadGroup tg1 = new ThreadGroup(tg, ""the child group"");', 'ThreadNew th1 = new ThreadNew(""the first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""the second"", tg);', 'System.out.println(""Starting the second"");', 'System.out.println(""The total number of active thread groups are: "" + tg.activeGroupCount());', 'Starting the first', 'Starting the second', 'The total number of active thread groups are: 1', 'the second thread has finished executing', 'the first thread has finished executing', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 100; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered "" + e);', 'System.out.println(Thread.currentThread().getName() + "" thread has finished executing"");', 'public class DestroyExample', 'public static void main(String argvs[]) throws SecurityException, InterruptedException', 'ThreadGroup tg = new ThreadGroup(""the parent group"");', 'ThreadGroup tg1 = new ThreadGroup(tg, ""the child group"");', 'ThreadNew th1 = new ThreadNew(""the first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""the second"", tg);', 'System.out.println(""Starting the second"");', 'th1.join();', 'th2.join();', 'tg1.destroy();', 'System.out.println(tg1.getName() + "" is destroyed."");', 'tg.destroy();', 'System.out.println(tg.getName() + "" is destroyed."");', 'Starting the first', 'Starting the second', 'the first thread has finished executing', 'the second thread has finished executing', 'the child group is destroyed.', 'the parent group is destroyed.', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 100; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered "" + e);', 'System.out.println(Thread.currentThread().getName() + "" thread has finished executing"");', 'public class EnumerateExample', 'public static void main(String argvs[]) throws SecurityException, InterruptedException', 'ThreadGroup tg = new ThreadGroup(""the parent group"");', 'ThreadGroup tg1 = new ThreadGroup(tg, ""the child group"");', 'ThreadNew th1 = new ThreadNew(""the first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""the second"", tg);', 'System.out.println(""Starting the second"");', 'Thread[] grp = new Thread[tg.activeCount()];', 'int cnt = tg.enumerate(grp);', 'for (int j = 0; j < cnt; j++)', 'System.out.println(""Thread "" + grp[j].getName() + "" is found."");', 'Starting the first', 'Starting the second', 'Thread the first is found.', 'Thread the second is found.', 'the first thread has finished executing', 'the second thread has finished executing', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 100; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered "" + e);', 'System.out.println(Thread.currentThread().getName() + "" thread has finished executing"");', 'public class GetMaxPriorityExample', 'public static void main(String argvs[]) throws SecurityException, InterruptedException', 'ThreadGroup tg = new ThreadGroup(""the parent group"");', 'ThreadGroup tg1 = new ThreadGroup(tg, ""the child group"");', 'ThreadNew th1 = new ThreadNew(""the first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""the second"", tg);', 'System.out.println(""Starting the second"");', 'int priority = tg.getMaxPriority();', 'System.out.println(""The maximum priority of the parent ThreadGroup: "" + priority);', 'Starting the first', 'Starting the second', 'The maximum priority of the parent ThreadGroup: 10', 'the first thread has finished executing', 'the second thread has finished executing', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 100; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered"" + e);', 'System.out.println(Thread.currentThread().getName() + "" thread has finished executing"");', 'public class GetMaxPriorityExample', 'public static void main(String argvs[]) throws SecurityException, InterruptedException', 'ThreadGroup tg = new ThreadGroup(""the parent group"");', 'ThreadGroup tg1 = new ThreadGroup(tg, ""the child group"");', 'ThreadNew th1 = new ThreadNew(""the first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""the second"", tg);', 'System.out.println(""Starting the second"");', 'System.out.println(""The ParentThreadGroup for "" + tg.getName() + "" is "" + tg.getParent().getName());', 'System.out.println(""The ParentThreadGroup for "" + tg1.getName() + "" is "" + tg1.getParent().getName());', 'Starting the first', 'Starting the second', 'The ParentThreadGroup for the parent group is main', 'The ParentThreadGroup for the child group is the parent group', 'the first thread has finished executing', 'the second thread has finished executing', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 100; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered "" + e);', 'System.out.println(Thread.currentThread().getName() + "" thread has finished executing"");', 'public class InterruptExample', 'public static void main(String argvs[]) throws SecurityException, InterruptedException', 'ThreadGroup tg = new ThreadGroup(""the parent group"");', 'ThreadGroup tg1 = new ThreadGroup(tg, ""the child group"");', 'ThreadNew th1 = new ThreadNew(""the first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""the second"", tg);', 'System.out.println(""Starting the second"");', 'tg.interrupt();', 'Starting the first', 'Starting the second', 'The exception has been encountered java.lang.InterruptedException: sleep interrupted', 'The exception has been encountered java.lang.InterruptedException: sleep interrupted', 'the second thread has finished executing', 'the first thread has finished executing', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 100; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered"" + e);', 'System.out.println(Thread.currentThread().getName() + "" thread has finished executing"");', 'public class IsDaemonExample', 'public static void main(String argvs[]) throws SecurityException, InterruptedException', 'ThreadGroup tg = new ThreadGroup(""the parent group"");', 'ThreadGroup tg1 = new ThreadGroup(tg, ""the child group"");', 'ThreadNew th1 = new ThreadNew(""the first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""the second"", tg);', 'System.out.println(""Starting the second"");', 'if (tg.isDaemon() == true)', 'System.out.println(""The group is a daemon group."");', 'System.out.println(""The group is not a daemon group."");', 'Starting the first', 'Starting the second', 'The group is not a daemon group.', 'the second thread has finished executing', 'the first thread has finished executing', 'import java.lang.*;', 'class ThreadNew extends Thread', 'ThreadNew(String tName, ThreadGroup tgrp)', 'super(tgrp, tName);', 'start();', 'public void run()', 'for (int j = 0; j < 100; j++)', 'Thread.sleep(5);', 'catch (InterruptedException e)', 'System.out.println(""The exception has been encountered"" + e);', 'System.out.println(Thread.currentThread().getName() + "" thread has finished executing"");', 'public class IsDestroyedExample', 'public static void main(String argvs[]) throws SecurityException, InterruptedException', 'ThreadGroup tg = new ThreadGroup(""the parent group"");', 'ThreadGroup tg1 = new ThreadGroup(tg, ""the child group"");', 'ThreadNew th1 = new ThreadNew(""the first"", tg);', 'System.out.println(""Starting the first"");', 'ThreadNew th2 = new ThreadNew(""the second"", tg);', 'System.out.println(""Starting the second"");', 'if (tg.isDestroyed() == true)', 'System.out.println(""The group has been destroyed."");', 'System.out.println(""The group has not been destroyed."");', 'Starting the first', 'Starting the second', 'The group has not been destroyed.', 'the first thread has finished executing', 'the second thread has finished executing']","['one', 'two', 'three', 'Thread Group Name: Parent ThreadGroup', 'java.lang.ThreadGroup[name=Parent ThreadGroup,maxpri=10]', 'Starting the first', 'Starting the second', 'The total number of active threads are: 2', 'Starting the first', 'Starting the second', 'The total number of active thread groups are: 1', 'the second thread has finished executing', 'the first thread has finished executing', 'Starting the first', 'Starting the second', 'the first thread has finished executing', 'the second thread has finished executing', 'the child group is destroyed.', 'the parent group is destroyed.', 'Starting the first', 'Starting the second', 'Thread the first is found.', 'Thread the second is found.', 'the first thread has finished executing', 'the second thread has finished executing', 'Starting the first', 'Starting the second', 'The maximum priority of the parent ThreadGroup: 10', 'the first thread has finished executing', 'the second thread has finished executing', 'Starting the first', 'Starting the second', 'The ParentThreadGroup for the parent group is main', 'The ParentThreadGroup for the child group is the parent group', 'the first thread has finished executing', 'the second thread has finished executing', 'Starting the first', 'Starting the second', 'The exception has been encountered java.lang.InterruptedException: sleep interrupted', 'The exception has been encountered java.lang.InterruptedException: sleep interrupted', 'the second thread has finished executing', 'the first thread has finished executing', 'Starting the first', 'Starting the second', 'The group is not a daemon group.', 'the second thread has finished executing', 'the first thread has finished executing', 'Starting the first', 'Starting the second', 'The group has not been destroyed.', 'the first thread has finished executing', 'the second thread has finished executing']","['o.ConstructorDescriptio&&&)ThreadGroup(String name)creates a thread group with given name&&&)ThreadGroup(ThreadGroup parent, String name)creates a thread group with a given parent group and name', 'S.N.|||Modifier and Type|||Method|||Description&&&1)|||void|||checkAccess()|||This method determines if the currently running thread has permission to modify the thread group.&&&2)|||int|||activeCount()|||This method returns an estimate of the number of active threads in the thread group and its subgroups.&&&3)|||int|||activeGroupCount()|||This method returns an estimate of the number of active groups in the thread group and its subgroups.&&&4)|||void|||destroy()|||This method destroys the thread group and all of its subgroups.&&&5)|||int|||enumerate(Thread[] list)|||This method copies into the specified array every active thread in the thread group and its subgroups.&&&6)|||int|||getMaxPriority()|||This method returns the maximum priority of the thread group.&&&7)|||String|||getName()|||This method returns the name of the thread group.&&&8)|||ThreadGroup|||getParent()|||This method returns the parent of the thread group.&&&9)|||void|||interrupt()|||This method interrupts all threads in the thread group.&&&10)|||boolean|||isDaemon()|||This method tests if the thread group is a daemon thread group.&&&11)|||void|||setDaemon(boolean daemon)|||This method changes the daemon status of the thread group.&&&12)|||boolean|||isDestroyed()|||This method tests if this thread group has been destroyed.&&&13)|||void|||list()|||This method prints information about the thread group to the standard output.&&&14)|||boolean|||parentOf(ThreadGroup g|||This method tests if the thread group is either the thread group argument or one of its ancestor thread groups.&&&15)|||void|||suspend()|||This method is used to suspend all threads in the thread group.&&&16)|||void|||resume()|||This method is used to resume all threads in the thread group which was suspended using suspend() method.&&&17)|||void|||setMaxPriority(int pri)|||This method sets the maximum priority of the group.&&&18)|||void|||stop()|||This method is used to stop all threads in the thread group.&&&19)|||String|||toString()|||This method returns a string representation of the Thread group.']",[]
127,['Java Shutdown Hook'],"['A special construct that facilitates the developers to add some code that has to be run when the Java Virtual Machine (JVM) is shutting down is known as the Java shutdown hook. The Java shutdown hook comes in very handy in the cases where one needs to perform some special cleanup work when the JVM is shutting down. Note that handling an operation such as invoking a special method before the JVM terminates does not work using a general construct when the JVM is shutting down due to some external factors. For example, whenever a kill request is generated by the operating system or due to resource is not allocated because of the lack of free memory, then in such a case, it is not possible to invoke the procedure. The shutdown hook solves this problem comfortably by providing an arbitrary block of code.']","['https://www.javatpoint.com/multitasking-in-multithreading', 'https://www.javatpoint.com/thread-group-in-java', 'https://www.javatpoint.com/multitasking-in-multithreading', 'https://www.javatpoint.com/thread-group-in-java', 'https://www.javatpoint.com/multitasking-in-multithreading']",[],[],['Points to Remember'],"['When does the JVM shut down?', 'The addShutdownHook(Thread hook) method', 'The removeShutdownHook(Thread hook) method', 'Factory method', 'Simple example of Shutdown Hook', 'Same example of Shutdown Hook by anonymous class:', 'Removing the registered shutdown hook example']",[],"['The JVM shuts down when:', 'The addShutdownHook() method of the Runtime class is used to register the thread with the Virtual Machine.', 'The object of the Runtime class can be obtained by calling the static factory method getRuntime(). For example:', 'The removeShutdownHook() method of the Runtime class is invoked to remove the registration of the already registered shutdown hooks.', 'True value is returned by the method, when the method successfully de-register the registered hooks; otherwise returns false.', 'The method that returns the instance of a class is known as factory method.', 'FileName: MyThread.java', 'FileName: TestShutdown2.java', 'The following example shows how one can use the removeShutdownHook() method to remove the registered shutdown hook.', 'FileName: RemoveHookExample.java', 'There are some important points to keep in mind while working with the shutdown hook.']","['There can be more than one shutdown hooks, but there execution order is not guaranteed: The JVM can execute the shutdown hooks in any arbitrary order. Even concurrent execution of the shutdown hooks are also possible.']","['Taking at a surface level, learning about the shutdown hook is straightforward. All one has to do is to derive a class using the java.lang.Thread class, and then provide the code for the task one wants to do in the run() method when the JVM is going to shut down. For registering the instance of the derived class as the shutdown hook, one has to invoke the method Runtime.getRuntime().addShutdownHook(Thread), whereas for removing the already registered shutdown hook, one has to invoke the removeShutdownHook(Thread) method.', 'In nutshell, the shutdown hook can be used to perform cleanup resources or save the state when JVM shuts down normally or abruptly. Performing clean resources means closing log files, sending some alerts, or something else. So if you want to execute some code before JVM shuts down, use the shutdown hook.', 'No guarantee for the execution of the shutdown hooks: The first and the most important thing to keep in mind is that there is no certainty about the execution of the shutdown hook. In some scenarios, the shutdown hooks will not execute at all. For example, if the JVM gets crashed due to some internal error, then there is no scope for the shutdown hooks. When the operating system gives the SYSKILL signal, then also it is not possible for the shutdown hooks to come into picture.', 'Note that when the application is terminated normally the shutdown hooks are called (all threads of the application is finished or terminated). Also, when the operating system is shut down or the user presses the ctrl + c the shutdown hooks are invoked.', 'Before completion, the shutdown hooks can be stopped forcefully: It is a special case of the above discussed point. Whenever a shutdown hooks start to execute, one can forcefully terminate it by shutting down the system. In this case, the operating system for a specific amount of time. If the job is not done in that frame of time, then the system has no other choice than to forcefully terminate the running hooks.', 'Within shutdown hooks, it is not allowed to unregister or register the shutdown hooks: When the JVM initiates the shutdown sequence, one can not remove or add more any existing shutdown hooks. If one tries to do so, the IllegalStateException is thrown by the JVM.', 'The Runtime.halt() can stop the shutdown sequence that has been started: Only the Runtime.halt(), which terminates the JVM forcefully, can stop the started shutdown sequence, which also means that invoking the System.exit() method will not work within a shutdown hook.', 'Security permissions are required when using shutdown hooks: If one is using the Java Security Managers, then the Java code that is responsible for removing or adding the shutdown hooks need to get the shutdown hooks permission at the runtime. If one invokes the method without getting the permission in the secure environment, then it will raise the SecurityException.']","['public void addShutdownHook(Thread hook){}', 'Runtime r = Runtime.getRuntime();', 'public boolean removeShutdownHook(Thread hook){ }', 'class MyThread extends Thread{', 'public void run(){', 'System.out.println(""shut down hook task completed.."");', '}', 'public class TestShutdown1{', 'public static void main(String[] args)throws Exception {', 'Runtime r=Runtime.getRuntime();', 'r.addShutdownHook(new MyThread());', 'System.out.println(""Now main sleeping... press ctrl+c to exit"");', 'try{Thread.sleep(3000);}catch (Exception e) {}', 'public class TestShutdown2{', 'public static void main(String[] args)throws Exception {', 'Runtime r=Runtime.getRuntime();', 'r.addShutdownHook(new Thread(){', 'public void run(){', 'System.out.println(""shut down hook task completed.."");', 'System.out.println(""Now main sleeping... press ctrl+c to exit"");', 'try{Thread.sleep(3000);}catch (Exception e) {}', 'public class RemoveHookExample', 'static class Msg extends Thread', 'public void run()', 'System.out.println(""Bye ..."");', 'public static void main(String[] argvs)', 'Msg ms = new Msg();', 'Runtime.getRuntime().addShutdownHook(ms);', 'System.out.println(""The program is beginning ..."");', 'System.out.println(""Waiting for 2 seconds ..."");', 'Thread.sleep(2000);', 'Runtime.getRuntime().removeShutdownHook(ms);', 'System.out.println(""The program is terminating ..."");', 'catch (Exception ex)', 'ex.printStackTrace();']","['Now main sleeping... press ctrl+c to exit', 'shut down hook task completed.', 'Now main sleeping... press ctrl+c to exit', 'shut down hook task completed.', 'The program is beginning ...', 'Waiting for 2 seconds ...', 'The program is terminating ...']",[],['|||user presses ctrl+c on the command prompt|||System.exit(int) method is invoked|||user logoff|||user shutdown etc.|||']
128,['How to perform single task by multiple threads in Java?'],"['If you have to perform a single task by many threads, have only one run() method. For example:']","['https://www.javatpoint.com/Garbage-Collection', 'https://www.javatpoint.com/ShutdownHook-thread', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestMultitasking1', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestMultitasking2', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestMultitasking3', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestMultitasking4', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestMultitasking5', 'https://www.javatpoint.com/Garbage-Collection', 'https://www.javatpoint.com/ShutdownHook-thread', 'https://www.javatpoint.com/Garbage-Collection']",['https://static.javatpoint.com/images/callstack2.JPG'],[],[],"['Program of performing single task by multiple threads', 'Program of performing single task by multiple threads', 'How to perform multiple tasks by multiple threads (multitasking in multithreading)?', 'Same example as above by anonymous class that extends Thread class:', 'Same example as above by anonymous class that implements Runnable interface:', 'Printing even and odd numbers using two threads']",['Note: Each thread run in a separate callstack.'],"['FileName: TestMultitasking1.java', 'FileName: TestMultitasking2.java', 'If you have to perform multiple tasks by multiple threads,have multiple run() methods.For example:', 'Program of performing two tasks by two threads', 'FileName: TestMultitasking3.java', 'Program of performing two tasks by two threads', 'FileName: TestMultitasking4.java', 'Program of performing two tasks by two threads', 'FileName: TestMultitasking5.java', 'To print the even and odd numbers using the two threads, we will use the synchronized block and the notify() method. Observe the following program.', 'FileName: OddEvenExample.java']",[],[],"['class TestMultitasking1 extends Thread{', 'public void run(){', 'System.out.println(""task one"");', 'public static void main(String args[]){', 'TestMultitasking1 t1=new TestMultitasking1();', 'TestMultitasking1 t2=new TestMultitasking1();', 'TestMultitasking1 t3=new TestMultitasking1();', 't1.start();', 't2.start();', 't3.start();', 'class TestMultitasking2 implements Runnable{', 'public void run(){', 'System.out.println(""task one"");', 'public static void main(String args[]){', 'Thread t1 =new Thread(new TestMultitasking2());//passing annonymous object of TestMultitasking2 class', 'Thread t2 =new Thread(new TestMultitasking2());', 't1.start();', 't2.start();', 'class Simple1 extends Thread{', 'public void run(){', 'System.out.println(""task one"");', 'class Simple2 extends Thread{', 'public void run(){', 'System.out.println(""task two"");', 'class TestMultitasking3{', 'public static void main(String args[]){', 'Simple1 t1=new Simple1();', 'Simple2 t2=new Simple2();', 't1.start();', 't2.start();', 'class TestMultitasking4{', 'public static void main(String args[]){', 'Thread t1=new Thread(){', 'public void run(){', 'System.out.println(""task one"");', 'Thread t2=new Thread(){', 'public void run(){', 'System.out.println(""task two"");', 't1.start();', 't2.start();', 'class TestMultitasking5{', 'public static void main(String args[]){', 'Runnable r1=new Runnable(){', 'public void run(){', 'System.out.println(""task one"");', 'Runnable r2=new Runnable(){', 'public void run(){', 'System.out.println(""task two"");', 'Thread t1=new Thread(r1);', 'Thread t2=new Thread(r2);', 't1.start();', 't2.start();', 'public class OddEvenExample', 'int contr = 1;', 'static int NUM;', 'public void displayOddNumber()', 'synchronized (this)', 'while (contr < NUM)', 'while (contr % 2 == 0)', 'wait();', 'catch (InterruptedException ex)', 'ex.printStackTrace();', 'System.out.print(contr + "" "");', 'contr = contr + 1;', 'notify();', 'public void displayEvenNumber()', 'synchronized (this)', 'while (contr < NUM)', 'while (contr % 2 == 1)', 'wait();', 'catch (InterruptedException ex)', 'ex.printStackTrace();', 'System.out.print(contr + "" "");', 'contr = contr +1;', 'notify();', 'public static void main(String[] argvs)', 'NUM = 20;', 'OddEvenExample oe = new OddEvenExample();', 'Thread th1 = new Thread(new Runnable()', 'public void run()', 'oe.displayEvenNumber();', 'Thread th2 = new Thread(new Runnable()', 'public void run()', 'oe.displayOddNumber();', 'th1.start();', 'th2.start();']","['task one', 'task one', 'task one', 'task one', 'task one', 'task one', 'task two', 'task one', 'task two', 'task one', 'task two', '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20']",[],[]
129,['Java Garbage Collection'],"['In java, garbage means unreferenced objects. ']","['https://www.javatpoint.com/java-runtime-class', 'https://www.javatpoint.com/multitasking-in-multithreading', 'https://www.javatpoint.com/https://www.javatpoint.com/opr/test.jsp?filename=TestGarbage1', 'https://www.javatpoint.com/java-runtime-class', 'https://www.javatpoint.com/multitasking-in-multithreading', 'https://www.javatpoint.com/java-runtime-class']",['https://static.javatpoint.com/images/java-garbage-collection-scenario.jpg'],[],"['How can an object be unreferenced?', 'finalize() method', 'gc() method']","['Advantage of Garbage Collection', '1) By nulling a reference:', '2) By assigning a reference to another:', '3) By anonymous object:', 'Simple Example of garbage collection in java']","['Note: The Garbage collector of JVM collects only those objects that are created by new keyword. So if you have created any object without new, you can use finalize method to perform cleanup processing (destroying remaining objects).', 'Note: Garbage collection is performed by a daemon thread called Garbage Collector(GC). This thread calls the finalize() method before object is garbage collected.', 'Note: Neither finalization nor garbage collection is guaranteed.']","['Garbage Collection is process of reclaiming the runtime unused memory automatically. In other words, it is a way to destroy the unused objects.', 'There are many ways: ', 'The gc() method is used to invoke the garbage collector to perform cleanup processing. The gc() is found in System and Runtime classes. ']","['To do so, we were using free() function in C language and delete() in C++. But, in java it is performed automatically. So, java provides better memory management.', 'The finalize() method is invoked each time before the object is garbage collected. This method can be used to perform cleanup processing. This method is defined in Object class as:']",[],"['Employee e=new Employee();', 'Employee e1=new Employee();', 'Employee e2=new Employee();', 'e1=e2;//now the first object referred by e1 is available for garbage collection', 'new Employee();', 'protected void finalize(){}', 'public static void gc(){}', 'public class TestGarbage1{', 'public void finalize(){System.out.println(""object is garbage collected"");}', 'public static void main(String args[]){', 'TestGarbage1 s1=new TestGarbage1();', 'TestGarbage1 s2=new TestGarbage1();', 's1=null;', 's2=null;', 'System.gc();']",['object is garbage collected\n       object is garbage collected'],[],"[""|||It makes java memory efficient because garbage collector removes the unreferenced objects from heap memory.|||It is automatically done by the garbage collector(a part of JVM) so we don't need to make extra efforts.||||||By nulling the reference|||By assigning a reference to another|||By anonymous object etc.|||""]"
130,['Java Runtime class'],"['Java Runtime class is used to interact with java runtime environment. Java Runtime class provides methods to execute a process, invoke GC, get total and free memory etc. There is only one instance of java.lang.Runtime class is available for one java application. ']","['https://www.javatpoint.com/synchronization-in-java', 'https://www.javatpoint.com/Garbage-Collection', 'https://www.javatpoint.com/synchronization-in-java', 'https://www.javatpoint.com/Garbage-Collection', 'https://www.javatpoint.com/synchronization-in-java']",[],[],"['Important methods of Java Runtime class', 'Java Runtime exec() method', 'How to shutdown system in Java', 'How to shutdown windows system in Java', 'How to restart system in Java', 'Java Runtime availableProcessors()', 'Java Runtime freeMemory() and totalMemory() method']",[],[],"['The Runtime.getRuntime() method returns the singleton instance of Runtime class.', 'Here you can use -s switch to shutdown system, -r switch to restart system and -t switch to specify time delay.']","['You can use shutdown -s command to shutdown system. For windows OS, you need to provide full path of shutdown command e.g. c:\\\\Windows\\\\System32\\\\shutdown.', 'In the given program, after creating 10000 instance, free memory will be less than the previous free memory. But after gc() call, you will get more free memory.']",[],"['public class Runtime1{', 'public static void main(String args[])throws Exception{', 'Runtime.getRuntime().exec(""notepad"");//will open a new notepad', 'public class Runtime2{', 'public static void main(String args[])throws Exception{', 'Runtime.getRuntime().exec(""shutdown -s -t 0"");', 'public class Runtime2{', 'public static void main(String args[])throws Exception{', 'Runtime.getRuntime().exec(""c:\\\\Windows\\\\System32\\\\shutdown -s -t 0"");', 'public class Runtime3{', 'public static void main(String args[])throws Exception{', 'Runtime.getRuntime().exec(""shutdown -r -t 0"");', 'public class Runtime4{', 'public static void main(String args[])throws Exception{', 'System.out.println(Runtime.getRuntime().availableProcessors());', 'public class MemoryTest{', 'public static void main(String args[])throws Exception{', 'Runtime r=Runtime.getRuntime();', 'System.out.println(""Total Memory: ""+r.totalMemory());', 'System.out.println(""Free Memory: ""+r.freeMemory());', 'for(int i=0;i<10000;i++){', 'new MemoryTest();', 'System.out.println(""After creating 10000 instance, Free Memory: ""+r.freeMemory());', 'System.gc();', 'System.out.println(""After gc(), Free Memory: ""+r.freeMemory());']","['Total Memory: 100139008\nFree Memory: 99474824\nAfter creating 10000 instance, Free Memory: 99310552\nAfter gc(), Free Memory: 100182832']",['o.MethodDescriptio&&&)public static Runtime getRuntime()returns the instance of Runtime class&&&)public void exit(int status)terminates the current virtual machine&&&)public void addShutdownHook(Thread hook)registers new hook thread&&&)public Process exec(String command)throws IOExceptionexecutes given command in a separate process&&&)public int availableProcessors()returns no. of available processors&&&)public long freeMemory()returns amount of free memory in JVM&&&)public long totalMemory()returns amount of total memory in JVM'],[]
