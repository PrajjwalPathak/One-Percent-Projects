,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['Ruby Tutorial'],['Ruby tutorial provides basic and advanced concepts of Ruby. Our Ruby programming tutorial is designed for beginners and professionals both.'],"['https://www.javatpoint.com/what-is-ruby', 'https://www.javatpoint.com/ruby-tutorial', 'https://www.javatpoint.com/what-is-ruby', 'https://www.javatpoint.com/ruby-features', 'https://www.javatpoint.com/ruby-vs-python', 'https://www.javatpoint.com/ruby-installation', 'https://www.javatpoint.com/hello-ruby-program', 'https://www.javatpoint.com/ruby-operators', 'https://www.javatpoint.com/ruby-variables', 'https://www.javatpoint.com/ruby-data-types', 'https://www.javatpoint.com/ruby-if-else', 'https://www.javatpoint.com/ruby-case', 'https://www.javatpoint.com/ruby-for-loop', 'https://www.javatpoint.com/ruby-while-and-do-while-loop', 'https://www.javatpoint.com/ruby-until-loop', 'https://www.javatpoint.com/ruby-break-and-next-statement', 'https://www.javatpoint.com/ruby-redo-and-retry-statement', 'https://www.javatpoint.com/ruby-comments', 'https://www.javatpoint.com/ruby-class-and-object', 'https://www.javatpoint.com/ruby-methods', 'https://www.javatpoint.com/ruby-blocks', 'https://www.javatpoint.com/ruby-modules', 'https://www.javatpoint.com/ruby-strings', 'https://www.javatpoint.com/ruby-arrays', 'https://www.javatpoint.com/ruby-hashes', 'https://www.javatpoint.com/ruby-date-and-time', 'https://www.javatpoint.com/ruby-ranges', 'https://www.javatpoint.com/ruby-iterators', 'https://www.javatpoint.com/ruby-file-io', 'https://www.javatpoint.com/ruby-directories', 'https://www.javatpoint.com/ruby-exceptions', 'https://www.javatpoint.com/ruby-oops', 'https://www.javatpoint.com/ruby-regular-expression', 'https://www.javatpoint.com/ruby-socket-programming', 'https://www.javatpoint.com/ruby-multithreading', 'https://www.javatpoint.com/ruby-ldap', 'https://www.javatpoint.com/ruby-xml', 'https://www.javatpoint.com/ruby-xpath-and-xslt', 'https://www.javatpoint.com/ruby-interview-questions', 'https://www.javatpoint.com/ruby-on-rails-tutorial', 'https://www.javatpoint.com/what-is-ruby', 'https://www.javatpoint.com/what-is-ruby']",['https://static.javatpoint.com/ruby/images/ruby-tutorial.png'],[],"['Ruby Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['Ruby is an open-source and fully object-oriented programming language. ', 'Ruby Tutorial', 'Control Statements', 'Ruby Advance', 'Interview Questions', 'Ruby on Rails', 'Before learning Ruby, you must have the basic knowledge of any programming language.', 'Our Ruby tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this Ruby programming tutorial. But if there is any mistake, please post the problem in contact form.']","['Our Ruby tutorial includes all topics of Ruby such as installation, example, operators, control statements, loops, comments, arrays, strings, hashes, regular expressions, file handling, exception handling, OOPs, Ranges, Iterators. etc']",[],[],[],[],['|||Ruby Tutorial|||What is Ruby |||Ruby Features|||Ruby vs Python|||Ruby Installation|||Hello Ruby Program|||Ruby Operators|||Ruby Variables|||Ruby Data Types||||||Ruby if-else|||Ruby case|||Ruby for|||Ruby while do-while|||Ruby Until|||Ruby break next|||Ruby redo retry|||Ruby Comments||||||Ruby Object Class|||Ruby Methods|||Ruby Blocks|||Ruby Modules|||Ruby Strings|||Ruby Arrays|||Ruby Hashes|||Ruby Date & Time|||Ruby Ranges|||Ruby Iterators|||Ruby File I/O|||Ruby Directories|||Ruby Exceptions||||||Ruby OOPs|||Ruby Regex|||Ruby Socket|||Ruby Multithreading|||Ruby LDAP|||Ruby XML|||Ruby XPATH XSLT||||||Ruby Interview||||||Ruby on Rails|||']
1,['What is Ruby'],"['Ruby is a dynamic, open source, object oriented and reflective programming language. Ruby is considered similar to Perl and Smalltalk programming languages. It runs on all types of platforms like Windows, Mac OS and all versions of UNIX.']","['https://www.javatpoint.com/ruby-features', 'https://www.javatpoint.com/ruby-tutorial', 'https://www.javatpoint.com/ruby-features', 'https://www.javatpoint.com/ruby-tutorial', 'https://www.javatpoint.com/ruby-features']",[],[],"['History of Ruby', 'Idea of Ruby', 'The name ""Ruby""', 'Ruby Early Years', 'Ruby in Present', 'Future of Ruby', 'Ruby Versions']",[],[],"['Ruby is designed and developed by Yukihiro ""Martz"" Matsumoto in mid 1990s in Japan. ', 'Ruby was localized to Japan. To expand it, the Ruby-Talk, first English language Ruby mailing list was created.', 'In 2001, first Ruby book ""Programming Ruby"" was published. After its publishment, learners of Ruby throughout the world increased. ', 'Ruby 1.8.7 was released in May 2008. At this point, Ruby was at its peak so much that even Mac OS X began their shipping with built-in Ruby.', 'There are many Ruby versions that have been released till date. Current stable Ruby version is 2.4']","['It is fully object oriented programming language. Everything is an object in Ruby. Each and every code has their properties and actions. Here properties refer to variables and actions refer to methods.', 'Ruby is considered to follow the principle of POLA (principle of least astonishment). It means that the language behaves in such a way to minimize the confusion for experienced users.', 'The name ""Ruby"" originated during a chat session between Matsumoto and Keiju Ishitsuka. Two names were selected, ""Coral"" and ""Ruby"". Matsumoto chose the later one as it was the birthstone of one of his colleagues.', 'The first public release of Ruby 0.95 was announced on Japanese newspaper on December 21, 1995. Within next two days, three more versions were released.', 'In 2005, they released their first Ruby framework ""Ruby on Rails"". The framework release was a big success and the Ruby community increased incredibly.', 'The current Ruby version 2.4.0 was released on Christmas in 2016. It has several new features like improvement to hash table, instance variable access, Array#max and Array#min.', 'Ruby is a great object oriented scripting programming language. Looking at its past we can say that it has a bright future if its community members continue expanding it beyond the thinking.']","['Perl is a scripting language but comes under the category of Toy language. Python is not fully object oriented language. Ruby developer Yukihiro ""Martz"" Matsumoto wanted a programming language which is completely object oriented and should be easy to use as a scripting language. He searched for this type of language, but couldn\'t find one. Hence, he developed one.']",[],[],[],"['|||Version 1.8 (4th Aug, 2003)|||Version 1.9 (25th Dec, 2007)|||Version 2.0 (24th Feb, 2013)|||Version 2.1 (25th Dec, 2013)|||Version 2.2 (25th Dec, 2014)|||Version 2.3 (25th Dec, 2015)|||Version 2.4 (25th Dec, 2016)|||Version 3.0 (Future Release)|||']"
2,['Features of Ruby'],['Ruby language has many features. Some of them are explained below:'],"['https://www.javatpoint.com/ruby-vs-python', 'https://www.javatpoint.com/what-is-ruby', 'https://www.javatpoint.com/ruby-vs-python', 'https://www.javatpoint.com/what-is-ruby', 'https://www.javatpoint.com/ruby-vs-python']",['https://static.javatpoint.com/ruby/images/features-of-ruby.png'],[],[],"['Object Oriented', 'Flexibility', 'Mixins', 'Visual appearance', 'Dynamic typing and Duck typing', 'Variable constants', 'Naming conventions', 'Keyword arguments', 'Method names', 'Singleton methods', 'Missing method', 'Statement delimiters', 'Keywords', 'Case Sensitive']",[],"[""Ruby generally prefers English keyword and some punctuation is used to decorate Ruby. It doesn't need variable declaration. "", 'Ruby is a dynamic programming language. Ruby programs are not compiled. All class, module and method definition are built by the code when it run.', 'Ruby defines some naming conventions for its variable, method, constant and class.', 'Like Python, Ruby methods can also be defined using keyword arguments.', 'Ruby singleton methods are per-object methods. They are only available on the object you defined it on. ', 'If a method is lost, Ruby calls the method_missing method with name of the lost method.', 'Multiple statements in a single line must contain semi colon in between but not at the end of a line. ', ""In Ruby there are approximately 42 keywords which can't be used for other purposes. They are called reserved words. "", 'Ruby is a case-sensitive language. Lowercase letters and uppercase letters are different. ']","['Ruby is a flexible language as you can easily remove, redefine or add existing parts to it. It allows its users to freely alter its parts as they wish.', 'In Ruby, constants are not really constant. If an already initialized constant will be modified in a script, it will simply trigger a warning but will not halt your program.', 'Methods are allowed to end with question mark (?) or exclamation mark (!). By convention, methods that answer questions end with question mark and methods that indicates that method can change the state of the object end with exclamation mark.']","['Ruby is purely object oriented programming language. Each and every value is an object. Every object has a class and every class has a super class. Every code has their properties and actions. Ruby is influenced with Smalltalk language. Rules applying to objects applies to the entire Ruby.', 'Ruby has a feature of single inheritance only. Ruby has classes as well as modules. A module has methods but no instances. Instead, a module can be mixed into a class, which adds the method of that module to the class. It is similar to inheritance but much more flexible.', 'Ruby variables are loosely typed language, which means any variable can hold any type of object. When a method is called on an object, Ruby only looks up at the name irrespective of the type of object. This is duck typing. It allows you to make classes that pretend to be other classes.']",[],[],[],['|||Object-oriented|||Flexibility|||Expressive feature|||Mixins|||Visual appearance|||Dynamic typing and Duck typing|||Exception handling|||Garbage collector|||Portable|||Keywords|||Statement delimiters|||Variable constants|||Naming conventions|||Keyword arguments|||Method names|||Singleton methods|||Missing method|||Case Sensitive||||||Constant: Starts with a capital letter.|||Global variable: Starts with a dollar sign ($).|||Instance variable: Starts with a (@) sign.|||Class variable: Starts with a (@@) sign.|||Method name: Allowed to start with a capital letter.|||']
3,['Ruby vs Python'],['There are many differences and similarities between Ruby and Python programming language. '],"['https://www.javatpoint.com/ruby-installation', 'https://www.javatpoint.com/ruby-features', 'https://www.javatpoint.com/ruby-installation', 'https://www.javatpoint.com/ruby-features', 'https://www.javatpoint.com/ruby-installation']",[],[],"['Similarities', 'Differences']",[],[],[],[],[],[],[],"[""Terms|||Ruby|||Python&&&Definition|||Ruby is an open source web application programming language.|||Python is a high level programming language.&&&Object Oriented|||Fully object oriented programming language.|||Not fully object oriented programming language.&&&Developer|||Yukihiro Matsumoto in 1990s.|||Guido Van Rossum in 1980s.&&&Developing Environment|||EclipseIDE is supported.|||multiple IDEs are supported.&&&Libraries|||It has smaller library than Python.|||Has larger range of libraries.&&&Mixins|||Mixins are used.|||Mixins can't be used.&&&Web frameworks|||Ruby on Rails|||Django&&&Community|||Mainly focused on web.|||Focussed in academia and Linux.&&&Usage|||Apple|||Github|||Twitter|||Groupon|||Shopify|||ThemeForest||||||Google|||Instagram|||Mozilla Firefox|||The Washington post|||Yahoo|||Shopzilla|||&&&Built-in classes|||Built-in classes can be modified|||Built-in classes can't be modified&&&elseif|||elsif|||elif&&&Unset a variable|||Once a variable is set you can't unset it back . It will be present in the symbol table as long as it is in scope.|||del statement help you to delete a set variable.&&&yield keyword|||It will execute another function that has been passed as the final argument, then immediately resume.|||It returns execution to the scope outside the function's invocation. External code is responsible for resuming the function.&&&Anonymous functions|||Support blocks, procs and lambdas.|||Support only lambdas.&&&Functions|||Doesn't have functions.|||It has functions.&&&Tuples|||It doesn't support tuples.|||It support tuples.&&&switch/case statement|||It support switch/case statement.|||It doesn't support switch/case statement.&&&lambda function|||Its lambda functions are larger.|||It support only single line lambda function.&&&Inheritance|||Support single inheritance.|||Support multiple inheritance.""]",['|||They both are high level language.|||They both are server side scripting language.|||Both are used for web applications.|||Both work on multiple platforms.|||Both have clean syntax and are easily readable.|||Both use an interactive prompt called irb.|||Objects are strongly and dynamically typed.|||Both use embedded doc tools.|||']
4,['Ruby Installation'],['Ruby is a cross platform programming language. It is installed differently on different operating systems.'],"['https://www.javatpoint.com/hello-ruby-program', 'https://www.javatpoint.com/ruby-vs-python', 'https://www.javatpoint.com/https://www.ruby-lang.org/en/documentation/installation/#apt', 'https://www.javatpoint.com/hello-ruby-program', 'https://www.javatpoint.com/ruby-vs-python', 'https://www.javatpoint.com/hello-ruby-program']","['https://static.javatpoint.com/ruby/images/ruby-installation1.png', 'https://static.javatpoint.com/ruby/images/ruby-installation2.png']",[],[],[],[],"['We will install Ruby on Linux Ubuntu using package manager.', 'Step 2 Debian GNU/Linux and Ubuntu use the apt package manager. Use the following command:', 'Here, by default, the ruby-full package provides Ruby 1.9.3 version which is an old version on Debian and Ubuntu.', 'Step 3 To know your Ruby version installed in your system, use the command,']",[],"['Step 1 Choose the package management system which you want to install from the link click here\nStep 2 Debian GNU/Linux and Ubuntu use the apt package manager. Use the following command:\n\nsudo apt-get install ruby-full\n\nHere, by default, the ruby-full package provides Ruby 1.9.3 version which is an old version on Debian and Ubuntu.\n\nStep 3 To know your Ruby version installed in your system, use the command,\n\nruby -v\n\n\n\nNext TopicHello ruby program\n\n\n\n← prev\nnext →\n\n\n']",['sudo apt-get install ruby-full'],[],[],"[""|||For UNIX like operating system, use your system's package manager.|||For Windows operating system, use RubyInstaller.|||For OS X system, use third party tools (rbenv and RVM).|||""]"
5,['Hello Ruby Program'],"['Now we will write a simple program of Ruby. Before writing Hello World program, we are assuming that you have successfully installed Ruby in your system.']","['https://www.javatpoint.com/ruby-operators', 'https://www.javatpoint.com/ruby-installation', 'https://www.javatpoint.com/ruby-operators', 'https://www.javatpoint.com/ruby-installation', 'https://www.javatpoint.com/ruby-operators']","['https://static.javatpoint.com/ruby/images/hello-ruby-program1.png', 'https://static.javatpoint.com/ruby/images/hello-ruby-program2.png']",[],"['Requirement for Hello Ruby Program', 'Creating Hello Ruby Program']",[],[],"['1) Use any text editor and create a hello.rb file. Write the following code,', '3) Run the following command.', 'This is final output of our Hello Ruby program.']",['2) Connect Ruby path to the above file. We have created hello.rb file in the Desktop. So first we need to go the Desktop directory through our console.'],[],"['puts ""Hello Ruby !""', 'ruby hello.rb']",[],[],['|||Download Ruby and install it.|||Create a file with .rb extension.|||Connect Ruby path to the file.|||Run the file.|||']
6,['Ruby Operators'],"['Ruby has a built-in modern set of operators. Operators are a symbol which is used to perform different operations. For example, +, -, /, *, etc.']","['https://www.javatpoint.com/ruby-variables', 'https://www.javatpoint.com/hello-ruby-program', 'https://www.javatpoint.com/ruby-variables', 'https://www.javatpoint.com/hello-ruby-program', 'https://www.javatpoint.com/ruby-variables']","['https://static.javatpoint.com/ruby/images/ruby-operators1.png', 'https://static.javatpoint.com/ruby/images/ruby-operators2.png', 'https://static.javatpoint.com/ruby/images/ruby-operators3.png', 'https://static.javatpoint.com/ruby/images/ruby-operators4.png']",[],"['Types of operators:', 'Unary Operator', 'Airthmetic Operator', 'Bitwise Operator', 'Logical Operator', 'Ternary Operator', 'Assignment Operator', 'Comparison Operator', 'Range Operator']",[],[],"['Unary operators expect a single operand to run on.', 'In file hello.rb, write the following code.', 'Airthmetic operators take numerical values as operands and return them in a single value.', 'In file hello.rb, write the following code.', 'Bitwise operators work on bits operands. ', 'Logical operators work on bits operands.', 'Ternary operators first check whether given conditions are true or false, then execute the condition.', 'In file hello.rb, write the following code.', 'Assignment operator assign a value to the operands.', 'Comparison operators compare two operands.', 'In file hello.rb, write the following code.', 'Range operators create a range of successive values consisting of a start, end and range of values in between.', 'The (..) creates a range including the last term and (...) creates a range excluding the last term.', 'For example, for the range of 1..5, output will range from 1 to 5.', 'and for the range of 1...5, output will range from 1 to 4.']",[],[],"['#!/usr/bin/ruby -w', 'puts(""Unary operator"")', 'puts(~5)', 'puts(~-5)', 'puts(!true)', 'puts(!false)', '#!/usr/bin/ruby -w', 'puts(""add operator"")', 'puts(10 + 20)', 'puts(""subtract operator"")', 'puts(35 - 15)', 'puts(""multiply operator"")', 'puts(4 * 8)', 'puts(""division operator"")', 'puts(25 / 5)', 'puts(""exponential operator"")', 'puts(5 ** 2)', 'puts(""modulo operator"")', 'puts(25 % 4)', '#!/usr/bin/ruby -w', 'puts(""Ternary operator"")', 'puts(2<5 ? 5:2)', 'puts(5<2 ? 5:2)', '#!/usr/bin/ruby -w', 'puts(""Comparison operator"")', 'puts(2 == 5)', 'puts(2 != 5)', 'puts(2 > 5)', 'puts(2 < 5)', 'puts(2 >= 5)', 'puts(2 <= 5)']",[],"['Operator|||Description&&&!|||Boolean NOT&&&~|||Bitwise complement&&&+|||Unary plus', 'Operator|||Description&&&+|||Adds values from both sides of the operator.&&&-|||Subtract values from both sides of the operator.&&&/|||Divide left side operand with right side operand.&&&*|||Multiply values from both sides of the operator.&&&**|||Right side operand becomes the exponent of left side operand.&&&%|||Divide left side operand with right side operand returning remainder.', 'Operator|||Description&&&&|||AND operator&&&||||OR operator&&&<<|||Left shift operator&&&>> |||Right shift operator &&&^|||XOR operator&&&~|||Complement operator', 'Operator|||Description&&&&&|||AND operator&&&|||||OR operator ', 'Operator|||Description&&&?:|||Conditional expression', 'Operator|||Description&&&=|||Simple assignment operator&&&+=|||Add assignment operator&&&-=|||subtract assignment operator&&&*=|||Multiply assignment operator &&&/=|||Divide assignment operator&&&%=|||Modulus assignment operator&&&**=|||Exponential assignment operator', 'Operator|||Description&&&==|||Equal operator&&&!=|||Not equal operator &&&>|||left operand is greater than right operand&&&< |||Right operand is greater than left operand&&&>=|||Left operand is greater than or equal to right operand&&&<=|||Right operand is greater than or equal to left operand&&&<=>|||Combined comparison operator&&&.eql?|||Checks for equality and type of the operands&&&equal?|||Checks for the object ID', 'Operator|||Description&&&..|||Range is inclusive of the last term&&&...|||Range is exclusive of the last term']",['|||Unary operator|||Airthmetic operator|||Bitwise operator|||Logical operator|||Ternary operator|||Assignment operator|||Comparison operator|||Range operator|||']
7,['Ruby Variables'],"['Ruby variables are locations which hold data to be used in the programs. Each variable has a different name. These variable names are based on some naming conventions. Unlike other programming languages, there is no need to declare a variable in Ruby. A prefix is needed to indicate it.']","['https://www.javatpoint.com/ruby-data-types', 'https://www.javatpoint.com/ruby-operators', 'https://www.javatpoint.com/ruby-data-types', 'https://www.javatpoint.com/ruby-operators', 'https://www.javatpoint.com/ruby-data-types']","['https://static.javatpoint.com/ruby/images/ruby-variables.png', 'https://static.javatpoint.com/ruby/images/ruby-variables1.png', 'https://static.javatpoint.com/ruby/images/ruby-variables2.png', 'https://static.javatpoint.com/ruby/images/ruby-variables3.png']",[],"['Local variables', 'Class variables', 'Instance variables', 'Global variables', 'Summary']",[],[],"['There are four types of variables in Ruby:', 'When uninitialized local variables are called, they are interpreted as call to a method that has no arguments. ', 'A class variable is shared by all the descendents of the class. An uninitialized class variable will result in an error. ', 'In the above example, @@no_of_states is a class variable.', ""They don't need to be initialize. An uninitialized instance variable will have a nil value."", 'In the above example, @states_name is the instance variable.', 'A global variable name starts with a $ sign. Its scope is globally, means it can be accessed from any where in a program.', 'An uninitialized global variable will have a nil value. It is advised not to use them as they make programs cryptic and complex.', 'There are a number of predefined global variables in Ruby.', 'In the above example, @states_name is the instance variable.']","['A local variable name starts with a lowercase letter or underscore (_). It is only accessible or have its scope within the block of its initialization. Once the code block completes, variable has no scope. ', 'An instance variable name starts with a @ sign. It belongs to one instance of the class and can be accessed from any instance of the class within a method. They only have limited access to a particular instance of a class.']","['A class variable name starts with @@ sign. They need to be initialized before use. A class variable belongs to the whole class and can be accessible from anywhere inside the class. If the value will be changed at one instance, it will be changed at every instance. ']","['#!/usr/bin/ruby', 'class States', '@@no_of_states=0', 'def initialize(name)', '@states_name=name', '@@no_of_states += 1', 'def display()', 'puts ""State name #@state_name""', 'def total_no_of_states()', 'puts ""Total number of states written: #@@no_of_states""', 'end', '# Create Objects', 'first=States.new(""Assam"")', 'second=States.new(""Meghalaya"")', 'third=States.new(""Maharashtra"")', 'fourth=States.new(""Pondicherry"")', '# Call Methods', 'first.total_no_of_states()', 'second.total_no_of_states()', 'third.total_no_of_states()', 'fourth.total_no_of_states()', '#!/usr/bin/ruby', 'class States', 'def initialize(name)', '@states_name=name', 'def display()', 'puts ""States name #@states_name""', '# Create Objects', 'first=States.new(""Assam"")', 'second=States.new(""Meghalaya"")', 'third=States.new(""Maharashtra"")', 'fourth=States.new(""Pondicherry"")', '# Call Methods', 'first.display()', 'second.display()', 'third.display()', 'fourth.display()', '#!/usr/bin/ruby', '$global_var = ""GLOBAL""', 'class One', 'def display', 'puts ""Global variable in One is #$global_var""', 'class Two', 'def display', 'puts ""Global variable in Two is #$global_var""', 'oneobj = One.new', 'oneobj.display', 'twoobj = Two.new', 'twoobj.display']",[],['|||Local|||Global|||Instance|||Class&&&Scope|||Limited within the block of initialization.|||Its scope is globally.|||It belongs to one instance of a class.|||Limited to the whole class in which they are created.&&&Naming|||Starts with a lowercase letter or underscore (_).|||Starts with a $ sign.|||Starts with an @ sign.|||Starts with an @@ sign.&&&Initialization|||No need to initialize. An uninitialized local variable is interpreted as methods with no arguments.|||No need to initialize. An uninitialized global variable will have a nil value.|||No need to initialize. An uninitialized instance variable will have a nil value.|||They need to be initialized before use. An uninitialized global variable results in an error. '],['|||Local variables|||Class variables|||Instance variables|||Global variables|||']
8,['Ruby Data types'],"['Data types represents a type of data such as text, string, numbers, etc. There are different data types in Ruby:']","['https://www.javatpoint.com/ruby-if-else', 'https://www.javatpoint.com/ruby-variables', 'https://www.javatpoint.com/ruby-if-else', 'https://www.javatpoint.com/ruby-variables', 'https://www.javatpoint.com/ruby-if-else']","['https://static.javatpoint.com/ruby/images/data-types1.png', 'https://static.javatpoint.com/ruby/images/data-types2.png', 'https://static.javatpoint.com/ruby/images/data-types3.png', 'https://static.javatpoint.com/ruby/images/data-types4.png', 'https://static.javatpoint.com/ruby/images/data-types5.png', 'https://static.javatpoint.com/ruby/images/data-types6.png', 'https://static.javatpoint.com/ruby/images/data-types7.png', 'https://static.javatpoint.com/ruby/images/data-types8.png']",[],"['Numbers', 'Strings', 'Symbols', 'Hashes', 'Arrays']",[],[],"['Integers and floating point numbers come in the category of numbers.', 'A string is a group of letters that represent a sentence or a word. Strings are defined by enclosing a text within single (\') or double ("") quote.', 'Symbols are like strings. A symbol is preceded by a colon (:). For example,', 'Symbols are unique identifiers and represent static values, while string represent values that change.', 'In the above snapshot, two different object_id is created for string but for symbol same object_id is created.', '{""Akash"" => ""Physics"", ""Ankit"" => ""Chemistry"", ""Aman"" => ""Maths""}', 'Elements from an array are retrieved by their position. The position of elements in an array starts with 0.']","['Integers are held internally in binary form. Integer numbers are numbers without a fraction. According to their size, there are two types of integers. One is Bignum and other is Fixnum. ', 'They do not contain spaces. Symbols containing multiple words are written with (_). One difference between string and symbol is that, if text is a data then it is a string but if it is a code it is a symbol. ', 'A hash assign its values to its keys. They can be looked up by their keys. Value to a key is assigned by => sign. A key/value pair is separated with a comma between them and all the pairs are enclosed within curly braces. For example,', 'An array stroes data or list of data. It can contain all types of data. Data in an array are separated by comma in between them and are enclosed by square bracket. For example,']",[],"['#!/usr/bin/ruby', 'data = {""Akash"" => ""Physics"", ""Ankit"" => ""Chemistry"", ""Aman"" => ""Maths""}', 'puts data[""Akash""]', 'puts data[""Ankit""]', 'puts data[""Aman""]', '[""Akash"", ""Ankit"", ""Aman""]', '#!/usr/bin/ruby', 'data = [""Akash"", ""Ankit"", ""Aman""]', 'puts data[0]', 'puts data[1]', 'puts data[2]']",[],['Class|||Description|||Example&&&Fixnum|||They are normal numbers|||1&&&Bignum|||They are big numbers|||111111111111&&&Float|||Decimal numbers|||3.0&&&Complex|||Imaginary numbers|||4 + 3i&&&Rational|||They are fractional numbers|||9/4&&&BigDecimal|||Precision decimal numbers|||6.0'],"['|||Numbers|||Strings|||Symbols|||Hashes|||Arrays|||Booleans||||||In a calculation if integers are used, then only integers will be returned back.||||||In a calculation if float type is used, then only float will be returned back.||||||In case of dvision, following output will appear.|||||||||Two strings can be concatenated using + sign in between them.||||||Multiplying a number string with a number will repeat the string as many times.||||||']"
9,['Ruby If-else Statement'],['The Ruby if else statement is used to test condition. There are various types of if statement in Ruby.'],"['https://www.javatpoint.com/ruby-case', 'https://www.javatpoint.com/ruby-data-types', 'https://www.javatpoint.com/ruby-case', 'https://www.javatpoint.com/ruby-data-types', 'https://www.javatpoint.com/ruby-case']","['https://static.javatpoint.com/ruby/images/ruby-if-else1.png', 'https://static.javatpoint.com/ruby/images/ruby-if-else2.png', 'https://static.javatpoint.com/ruby/images/ruby-if-else3.png', 'https://static.javatpoint.com/ruby/images/ruby-if-else4.png', 'https://static.javatpoint.com/ruby/images/ruby-if-else5.png', 'https://static.javatpoint.com/ruby/images/ruby-if-else6.png', 'https://static.javatpoint.com/ruby/images/ruby-if-else7.png']",[],"['Ruby if statement', 'Ruby if else', 'Ruby if else if (elsif)', 'Ruby ternary Statement']",[],[],"['Ruby if statement tests the condition. The if block statement is executed if condition is true.', 'Ruby if else statement tests the condition. The if block statement is executed if condition is true otherwise else block statement is executed. ', 'Ruby if else if statement tests the condition. The if block statement is executed if condition is true otherwise else block statement is executed. ', 'In Ruby ternary statement, the if statement is shortened. First it evaluats an expression for true or false value then execute one of the statements.']",[],[],"['if (condition)', 'a = gets.chomp.to_i', 'if a >= 18', 'puts ""You are eligible to vote.""', 'if(condition)', 'a = gets.chomp.to_i', 'if a >= 18', 'puts ""You are eligible to vote.""', 'puts ""You are not eligible to vote.""', 'if(condition1)', 'elsif (condition2)', 'else (condition3)', 'a = gets.chomp.to_i', 'if a <50', 'puts ""Student is fail""', 'elsif a >= 50 && a <= 60', 'puts ""Student gets D grade""', 'elsif a >= 70 && a <= 80', 'puts ""Student gets B grade""', 'elsif a >= 80 && a <= 90', 'puts ""Student gets A grade""', 'elsif a >= 90 && a <= 100', 'puts ""Student gets A+ grade""', 'test-expression ? if-true-expression : if-false-expression', 'var = gets.chomp.to_i;', 'a = (var > 3 ? true : false);', 'puts a']",[],[],['|||if statement|||if-else statement|||if-else-if (elsif) statement|||ternay (shortened if statement) statement|||']
10,['Ruby Case Statement'],"[""In Ruby, we use 'case' instead of 'switch' and 'when' instead of 'case'. The case statement matches one statement with multiple conditions just like a switch statement in other languages.""]","['https://www.javatpoint.com/ruby-for-loop', 'https://www.javatpoint.com/ruby-if-else', 'https://www.javatpoint.com/ruby-for-loop', 'https://www.javatpoint.com/ruby-if-else', 'https://www.javatpoint.com/ruby-for-loop']",['https://static.javatpoint.com/ruby/images/ruby-switch1.png'],[],[],[],[],"[""Look at the above output, conditions are case sensitive. Hence, the output for 'Saturday' and 'saturday' are different.""]",[],[],"['case expression', '[when expression [, expression ...] [then]', 'code ]...', 'code ]', '#!/usr/bin/ruby', 'print ""Enter your day: ""', 'day = gets.chomp', 'case day', 'when ""Tuesday""', ""puts 'Wear Red or Orange'"", 'when ""Wednesday""', ""puts 'Wear Green'"", 'when ""Thursday""', ""puts 'Wear Yellow'"", 'when ""Friday""', ""puts 'Wear White'"", 'when ""Saturday""', ""puts 'Wear Black'"", 'puts ""Wear Any color""']",[],[],[]
11,['Ruby for Loop'],"['Ruby for loop iterates over a specific range of numbers. Hence, for loop is used if a program has fixed number of iterations.']","['https://www.javatpoint.com/ruby-while-and-do-while-loop', 'https://www.javatpoint.com/ruby-case', 'https://www.javatpoint.com/ruby-while-and-do-while-loop', 'https://www.javatpoint.com/ruby-case', 'https://www.javatpoint.com/ruby-while-and-do-while-loop']","['https://static.javatpoint.com/ruby/images/ruby-for1.png', 'https://static.javatpoint.com/ruby/images/ruby-for2.png']",[],"['Ruby for loop using range', 'Ruby for loop using array']",[],[],['Ruby for loop will execute once for each element in expression.'],[],[],"['for variable [, variable ...] in expression [do]', 'code', 'a = gets.chomp.to_i', 'for i in 1..a do', 'puts i', 'x = [""Blue"", ""Red"", ""Green"", ""Yellow"", ""White""]', 'for i in x do', 'puts i']",[],[],[]
12,['Ruby while Loop'],"['The Ruby while loop is used to iterate a program several times. If the number of iterations is not fixed for a program, while loop is used.']","['https://www.javatpoint.com/ruby-until-loop', 'https://www.javatpoint.com/ruby-for-loop', 'https://www.javatpoint.com/ruby-until-loop', 'https://www.javatpoint.com/ruby-for-loop', 'https://www.javatpoint.com/ruby-until-loop']","['https://static.javatpoint.com/ruby/images/ruby-while-loop1.png', 'https://static.javatpoint.com/ruby/images/ruby-while-loop2.png', 'https://static.javatpoint.com/ruby/images/ruby-while-loop3.png']",[],['Ruby do while Loop'],[],[],"['Ruby while loop executes a condition while a condition is true. Once the condition becomes false, while loop stops its execution.']",[],"['The Ruby do while loop iterates a part of program several times. It is quite similar to a while loop with the only difference that loop will execute at least once. It is due to the fact that in do while loop, condition is written at the end of the code.']","['while conditional [do]', 'code', '#!/usr/bin/ruby', 'x = gets.chomp.to_i', 'while x >= 0', 'puts x', 'x -=1', 'loop do', '#code to be executed', 'break if booleanExpression', 'loop do', 'puts ""Checking for answer""', 'answer = gets.chomp', ""if answer != '5'"", 'break']",[],[],[]
13,['Ruby Until Loop'],['The Ruby until loop runs until the given condition evaluates to true. It exits the loop when condition becomes true. It is just opposite of the while loop which runs until the given condition evaluates to false.'],"['https://www.javatpoint.com/ruby-break-and-next-statement', 'https://www.javatpoint.com/ruby-while-and-do-while-loop', 'https://www.javatpoint.com/ruby-break-and-next-statement', 'https://www.javatpoint.com/ruby-while-and-do-while-loop', 'https://www.javatpoint.com/ruby-break-and-next-statement']",['https://static.javatpoint.com/ruby/images/ruby-until-loop1.png'],[],[],[],[],['The until loop allows you to write code which is more readable and logical. '],[],[],"['until conditional', 'code', 'until i == 10', 'print i*10, ""\\n""', 'i += 1']",[],[],[]
14,['Ruby Break Statement'],"['The Ruby break statement is used to terminate a loop. It is mostly used in while loop where value is printed till the condition is true, then break statement terminates the loop. ']","['https://www.javatpoint.com/ruby-redo-and-retry-statement', 'https://www.javatpoint.com/ruby-until-loop', 'https://www.javatpoint.com/ruby-redo-and-retry-statement', 'https://www.javatpoint.com/ruby-until-loop', 'https://www.javatpoint.com/ruby-redo-and-retry-statement']","['https://static.javatpoint.com/ruby/images/break1.png', 'https://static.javatpoint.com/ruby/images/break2.png']",[],['Ruby Next Statement'],[],[],"['The break statement is called from inside the loop. ', ""The Ruby next statement is used to skip loop's next iteration. Once the next statement is executed, no further iteration will be performed. "", 'The next statement in Ruby is equivalent to continue statement in other languages. ']",[],[],"['while true', 'if i*5 >= 25', 'break', 'end', 'puts i*5', 'i += 1', 'for i in 5...11', 'if i == 7 then', 'next', 'end', 'puts i']",[],[],[]
15,['Ruby redo Statement'],"[""Ruby redo statement is used to repeat the current iteration of the loop. The redo statement is executed without evaluating the loop's condition.""]","['https://www.javatpoint.com/ruby-comments', 'https://www.javatpoint.com/ruby-break-and-next-statement', 'https://www.javatpoint.com/ruby-comments', 'https://www.javatpoint.com/ruby-break-and-next-statement', 'https://www.javatpoint.com/ruby-comments']",['https://static.javatpoint.com/ruby/images/ruby-redo-statement1.png'],[],['Ruby retry Statement'],[],[],"['The redo statement is used inside a loop.', 'Ruby retry statement is used to repeat the whole loop iteration from the start.', 'The retry statement is used inside a loop.']",[],[],"['while(i < 5)   # Prints ""012345"" instead of ""01234""', 'puts i', 'i += 1', 'redo if i == 5']",[],[],[]
16,['Ruby Comments'],"[""Ruby comments are non executable lines in a program. These lines are ignored by the interpreter hence they don't execute while execution of a program. They are written by a programmer to explain their code so that others who look at the code will understand it in a better way.""]","['https://www.javatpoint.com/ruby-class-and-object', 'https://www.javatpoint.com/ruby-redo-and-retry-statement', 'https://www.javatpoint.com/ruby-class-and-object', 'https://www.javatpoint.com/ruby-redo-and-retry-statement', 'https://www.javatpoint.com/ruby-class-and-object']","['https://static.javatpoint.com/ruby/images/comments1.png', 'https://static.javatpoint.com/ruby/images/comments2.png']",[],['Ruby Single Line Comment'],[],[],"['Types of Ruby comments:', 'The Ruby single line comment is used to comment only one line at a time. They are defined with # character.']",['The Ruby multi line comment is used to comment multiple lines at a time. They are defined with =begin at the starting and =end at the end of the line.'],[],"['#This is single line comment.', 'i = 10  #Here i is a variable.', 'multi line', 'comment', '=begin', 'we are declaring', 'a variable i', 'in this program', 'i = 10']",[],[],['|||Single line comment|||multi line comment|||']
17,['Ruby Class and Object'],"['Here, we will learn about Ruby objects and classes. In object-oriented programming language, we design programs using objects and classes.']","['https://www.javatpoint.com/ruby-methods', 'https://www.javatpoint.com/ruby-comments', 'https://www.javatpoint.com/ruby-methods', 'https://www.javatpoint.com/ruby-comments', 'https://www.javatpoint.com/ruby-methods']","['https://static.javatpoint.com/ruby/images/ruby-class-and-object1.png', 'https://static.javatpoint.com/ruby/images/ruby-class-and-object2.png']",[],"['Ruby Object', 'Creating object', 'Ruby Class']",[],[],"['Object is a physical as well as logical entity whereas class is a logical entity only.', 'Object mixes in the Kernel module which makes the built-in Kernel functions globally accessible. ', 'Objects in Ruby are created by calling new method of the class. It is a unique type of method and predefined in the Ruby library. ', 'Ruby objects are instances of the class. ', ""We have a class named Java. Now, let's create an object java and use it with following command,"", 'Each Ruby class is an instance of class Class. Classes in Ruby are first-class objects.']","['Object is the default root of all Ruby objects. Ruby objects inherit from BasicObject (it is the parent class of all classes in Ruby) which allows creating alternate object hierarchies.', 'Ruby class always starts with the keyword class followed by the class name. Conventionally, for class name we use CamelCase. The class name should always start with a capital letter. Defining class is finished with end keyword.', 'In the above example, we have created a class Home using class keyword. The @love is an instance variable, and is available to all methods of class Home.']",[],"['objectName = className.new', 'java = Java.new(""John"")', 'class ClassName', 'codes...']",[],[],[]
18,['Ruby Methods'],['Ruby methods prevent us from writing the same code in a program again and again. It is a set of expression that returns a value. '],"['https://www.javatpoint.com/ruby-blocks', 'https://www.javatpoint.com/ruby-class-and-object', 'https://www.javatpoint.com/ruby-blocks', 'https://www.javatpoint.com/ruby-class-and-object', 'https://www.javatpoint.com/ruby-blocks']","['https://static.javatpoint.com/ruby/images/ruby-method1.png', 'https://static.javatpoint.com/ruby/images/ruby-method2.png', 'https://static.javatpoint.com/ruby/images/ruby-method3.png', 'https://static.javatpoint.com/ruby/images/ruby-method4.png']",[],"['Defining Method', 'Defining Method with Parameter']",[],[],"['Ruby methods are similar to the functions in other lnguages. They unite one or more repeatable statements into one single bundle. ', 'Methods name should always start with a lowercase letter. Otherwise, it may be misunderstood as a constant.', 'Here, we have defined a method welcome using def keyword. The last line end keyword says that we are done with the method defining. ', ""Now let's call this method. A method is called by just writing its name. "", 'To call a particular person, we can define a method with parameter.', 'Here, #{name} is a way in Ruby to insert something into string. The bit inside the braces is turned into a string.', ""Let's call the method by passing a parameter Edward.""]","['To use a method, we need to first define it. Ruby method is defined with the def keyword followed by method name. At the end we need to use end keyword to denote that method has been defined.']",[],"['def methodName', 'code...']",[],[],[]
19,['Ruby Blocks'],['Ruby code blocks are called closures in other programming languages. It consist of a group of codes which is always enclosed with braces or written between do..end. The braces syntax always have the higher precedence over the do..end syntax. Braces have high precedence and do has low precedence.'],"['https://www.javatpoint.com/ruby-modules', 'https://www.javatpoint.com/ruby-methods', 'https://www.javatpoint.com/ruby-modules', 'https://www.javatpoint.com/ruby-methods', 'https://www.javatpoint.com/ruby-modules']","['https://static.javatpoint.com/ruby/images/ruby-blocks1.png', 'https://static.javatpoint.com/ruby/images/ruby-blocks2.png', 'https://static.javatpoint.com/ruby/images/ruby-blocks3.png', 'https://static.javatpoint.com/ruby/images/ruby-blocks4.png', 'https://static.javatpoint.com/ruby/images/ruby-blocks5.png', 'https://static.javatpoint.com/ruby/images/ruby-blocks6.png', 'https://static.javatpoint.com/ruby/images/ruby-blocks7.png', 'https://static.javatpoint.com/ruby/images/ruby-blocks8.png']",[],"['The yield statement', 'Block Variables', 'BEGIN and END block', 'Ampersand parameter (█)', 'Initializing objects with default values']",[],[],"['A block is written in two ways, ', 'Both are same and have the same functionality.', 'To invoke a block, you need to have a function with the same name as the block.', 'A block is always invoked with a function. Blocks can have their own arguments.', 'The below example shows the multi-line block.', 'Below example shows the inline block.', 'The yield statement is used to call a block within a method with a value.', 'Passing parameters with yield statement', 'One or more than one parameter can be passed with the yield statement. ', ""We can use same variable outside and inside a block parameter. Let's see the following example."", 'In this example, we are using same variable inside the block as the block parameter x and outside the block as a variable x. ', 'Ruby BEGIN and END block is used to declare that file is being loaded and file has been loaded respectively.', 'The █ is a way to pass a reference (instead of a local variable) to the block to a method.', 'Here, block word after the & is just a name for the reference, any other name can be used instead of this. ', 'Here, the block variable inside method met is a reference to the block. It is executed with the call mehtod. The call method is same as yield method.', 'Ruby has an initializer called yield(self). Here, self is the object being initialized.']","['While the execution of met method, when we reach at yield line, the code inside the block is executed. When block execution finishes, code for met method continues.']",[],"['block_name{', 'statement1', 'statement2', '..........', '[10, 20, 30].each do |n|', 'puts n', '[10, 20, 30].each {|n| puts n}', '#!/usr/bin/ruby', 'def met', 'puts ""This is method""', 'yield', 'puts ""You will be back to method""', 'yield', 'met {puts ""This is block""}', '#!/usr/bin/ruby', 'def met', 'yield 1', 'puts ""This is method""', 'yield 2', 'met {|i| puts ""This is block #{i}""}', '#!/usr/bin/ruby', 'x = ""Outer variable""', '3.times do |x|', 'puts ""Inside the block: #{x}""', 'end', 'puts ""Outside the block: #{x}""', '#!/usr/bin/ruby', 'BEGIN {', 'puts ""code block is being loaded""', 'puts ""code block has been loaded""', 'puts ""This is the code block""', 'def met(█)', 'puts ""This is method""', 'block.call', 'met { puts ""This is █ example"" }', 'class Novel', 'attr_accessor :pages, :category', 'def initialize', 'yield(self)', 'novel = Novel.new do |n|', 'n.pages = 564', 'n.category = ""thriller""', 'puts ""I am reading a #{novel.category} novel which has #{novel.pages} pages.""']",[],[],['|||Multi-line between do and end (multi-line blocks are niot inline)|||Inline between braces {}|||']
20,['Ruby Modules'],['Ruby module is a collection of methods and constants. A module method may be instance method or module method. '],"['https://www.javatpoint.com/ruby-strings', 'https://www.javatpoint.com/ruby-blocks', 'https://www.javatpoint.com/ruby-strings', 'https://www.javatpoint.com/ruby-blocks', 'https://www.javatpoint.com/ruby-strings']",[],[],"['Module Namespaces', 'Module Mixins']",[],[],"['Instance methods are methods in a class when module is included.', 'Module methods may be called without creating an encapsulating object while instance methods may not.', 'Modules basically serve two purposes:', 'Module name should start with a capital letter.', 'While writing larger files, a lot of reusable codes are generated. These codes are organized into classes, which can be inserted into a file. ', 'Suppose, in file1.rb, we have defined number of different type of library books like fiction, horror, etc. ', 'In file2.rb, we have defined the number of novels read and left to read including fiction novels. ', 'In file3.rb, we need to load both the files file1 and file2. Here we will use module mechanism.', ""Ruby doesn't support multiple inheritance. Modules eliminate the need of multiple inheritance using mixin in Ruby. "", ""A module doesn't have instances because it is not a class. However, a module can be included within a class. "", 'When you include a module within a class, the class will have access to the methods of the module.']","['They are similar to classes as they hold a collection of methods, class definitions, constants and other modules. They are defined like classes. Objects or subclasses can not be created using modules. There is no module hierarchy of inheritance.', 'For example, if two persons have the same method name in different files. And both the files need to be included in a third file. Then it may create a problem as the method name in both included files is same. ', 'Here, module mechanism comes into play. Modules define a namespace in which you can define your methods and constants without over riding by other methods and constants.', ""A module method is called by preceding its name with the module's name and a period, and you reference a constant using the module name and two colons."", 'Here, module Name consists of methods bella and ana. Module Job consists of methods editor and writer. The class Combo includes both the modules due to which class Combo can access all the four methods. Hence, class Combo works as mixin.', 'The methods of a module that are mixed into a class can either be an instance method or a class method. It depends upon how you add mixin to the class.']",[],"['module ModuleName', 'statement1', 'statement2', '...........', '#!/usr/bin/ruby', '# Module defined in file1.rb file', 'module Library', 'num_of_books = 300', 'def Library.fiction(120)', '# ..', 'end', 'def Library.horror(180)', '# ..', 'end', '#!/usr/bin/ruby', '# Module defined in file2.rb file', 'module Novel', 'total = 123', 'read = 25', 'def Novel.fiction(left)', '# ...', 'end', 'require ""Library""', 'require ""Novel""', 'x = Library.fiction(Library::num_of_books)', 'y = Novel.fiction(Novel::total)', 'module Name', 'def bella', 'end', 'def ana', 'end', 'module Job', 'def editor', 'end', 'def writer', 'end', 'class Combo', 'include Name', 'include Job', 'def f', 'end', 'final=Combo.new', 'final.bella', 'final.ana', 'final.editor', 'final.writer', 'final.f']",[],[],['|||They act as namespace. They prevent the name clashes.|||They allow the mixin facility to share functionality between classes.|||']
21,['Ruby Strings'],"['Ruby string object holds and manipulates an arbitary sequence of bytes, typically representing characters. They are created using String::new or as literals.']","['https://www.javatpoint.com/ruby-arrays', 'https://www.javatpoint.com/ruby-modules', 'https://www.javatpoint.com/ruby-arrays', 'https://www.javatpoint.com/ruby-modules', 'https://www.javatpoint.com/ruby-arrays']","['https://static.javatpoint.com/ruby/images/ruby-string1.png', 'https://static.javatpoint.com/ruby/images/ruby-string2.png', 'https://static.javatpoint.com/ruby/images/ruby-string3.png', 'https://static.javatpoint.com/ruby/images/ruby-string4.png', 'https://static.javatpoint.com/ruby/images/ruby-string5.png', 'https://static.javatpoint.com/ruby/images/ruby-string6.png', 'https://static.javatpoint.com/ruby/images/ruby-string7.png', 'https://static.javatpoint.com/ruby/images/ruby-string8.png']",[],"['Quotes', 'Accessing string elements', 'Multiline string', 'Variable Interpolation', 'Concatenating Strings', 'Freezing Strings', 'Comparing Strings']",[],[],"['Ruby string literals are enclosed within single and double quotes. ', 'You can access Ruby string elements in different parts with the help of square brackets []. Within square brackets write the index or string.', 'Writing multiline string is very simple in Ruby language. We will show three ways to print multi line string.', 'There are four ways to concatenate Ruby strings into single string:', 'In Ruby, by default strings are not immutable. To make them immutable, freeze method can be used.', ""In the above output, we have made the string immutable by using freeze method. Last line is commented as no string can't be modified any further. "", ""By uncommenting the last line, we'll get an error as shown in the below output."", 'Ruby strings can be compared with three operators:']","['Ruby variable interpolation is replacing variables with values inside string literals. The variable name is put between #{ and } characters inside string literal.', 'Ruby concatenating string implies creating one string from multiple strings. You can join more than one string to form a single string by concatenating them.', ""In most programming languages strings are immutable. It means that an existing string can't be modified, only a new string can be created out of them. ""]",[],"['#!/usr/bin/ruby', ""puts 'Hello everyone'"", 'puts ""Hello everyone""', '#!/usr/bin/ruby', 'msg = ""This tutorial is from JavaTpoint.""', 'puts msg[""JavaTpoint""]', 'puts msg[""tutorial""]', 'puts msg[0]', 'puts msg[0, 2]', 'puts msg[0..19]', 'puts msg[0, msg.length]', 'puts msg[-3]', 'puts ""', 'puts %/', 'puts <<STRING', 'STRING', '#!/usr/bin/ruby', 'country = ""India""', 'capital = ""New Delhi""', 'puts ""#{capital} is the capital of #{country}.""', '#!/usr/bin/ruby', 'string = ""This is Ruby Tutorial"" + "" from JavaTpoint."" + "" Wish you all good luck.""', 'puts string', 'string = ""This is Ruby Tutorial"" "" from JavaTpoint."" "" Wish you all good luck.""', 'puts string', 'string = ""This is Ruby Tutorial"" << "" from JavaTpoint."" << "" Wish you all good luck.""', 'puts string', 'string = ""This is Ruby Tutorial"".concat("" from JavaTpoint."").concat("" Wish you all good luck."")', 'puts string', '#!/usr/bin/ruby', 'str = ""Original string""', 'str << "" is modified ""', 'str << ""is again modified""', 'puts str', 'str.freeze', '#str << ""And here modification will be failed after using freeze method""', '#!/usr/bin/ruby', 'puts ""abc"" == ""abc""', 'puts ""as ab"" == ""ab ab""', 'puts ""23"" == ""32""', 'puts ""ttt"".eql? ""ttt""', 'puts ""12"".eql? ""12""', 'puts ""Java"".casecmp ""Java""', 'puts ""Java"".casecmp ""java""', 'puts ""Java"".casecmp ""ja""']",[],[],"['|||String can be written within double quotes.|||The % character is used and string is enclosed within / character.|||In heredoc syntax, we use << and string is enclosed within word STRING.||||||Using plus sign in between strings.|||Using a single space in between strings.|||Using << sign in between strings.|||Using concat method in between strings.||||||With == operator : Returns true or false|||With eql? Operator : Returns true or false|||With casecmp method : Returns 0 if matched or 1 if not matched|||']"
22,['Ruby Arrays'],"['Ruby arrays are ordered collections of objects. They can hold objects like integer, number, hash, string, symbol or any other array. ']","['https://www.javatpoint.com/ruby-hashes', 'https://www.javatpoint.com/ruby-strings', 'https://www.javatpoint.com/ruby-hashes', 'https://www.javatpoint.com/ruby-strings', 'https://www.javatpoint.com/ruby-hashes']","['https://static.javatpoint.com/ruby/images/ruby-arrays1.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays2.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays3.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays4.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays5.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays6.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays7.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays8.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays9.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays10.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays11.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays12.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays13.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays14.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays15.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays16.png', 'https://static.javatpoint.com/ruby/images/ruby-arrays17.png']",[],"['Creating Ruby Arrays', 'Using literal construct []', 'Using new class method', 'Accessing Array Elements', 'Adding Items to Array', 'push or <<', 'unshift', 'insert', 'Removing Items from Array', 'pop', 'shift', 'delete', 'uniq']",[],[],"['A Ruby array is created in many ways.', 'A Ruby array is constructed using literal constructor []. A single array can contain different type of objects. ', 'For example, following array contains an integer, floating number and a string.', 'A Ruby array is constructed by calling ::new method with zero, one or more than one arguments.', 'To set the size of an array,', 'Here, we have mentioned that array size is of 10 elements. ', 'To know the size of an array, either size or length method is used.', 'Ruby array elements can be accessed using #[] method. You can pass one or more than one arguments or even a range of arguments. ', 'To access a particular element, at method can also be used.', 'slice method', 'The slice method works similar to #[] method.', 'fetch method', 'The fetch method is used to provide a default value error for out of array range indices. ', 'first and last method', 'The first and last method will return first and last element of an array respectively. ', 'take method', 'The take method returns the first n elements of an array.', 'drop method', 'The drop method is the opposite of take method. It returns elements after n elements have been dropped.', 'Ruby array elements can be added in different ways.', 'Using push or <<, items can be added at the end of an array.', 'Using unshift, a new element can be added at the beginning of an array.', 'Ruby array elements can be removed in different ways.', 'Using pop, items can be removed from the end of an array. It returns the removed item.', 'Using shift, items can be removed from the start of an array. It returns the removed item.', 'Using delete, items can be removed from anywhere in an array. It returns the removed item.', 'Using uniq, duplicate elements can be removed from an array. It returns the remaining array.']","['Its indexing starts with 0. The negative index starts with -1 from the end of the array. For example, -1 indicates last element of the array and 0 indicates first element of the array.', 'Using insert, a new element can be added at any position in an array. Here, first we need to mention the index number at which we want to position the element.']",[],"['exm = [4, 4.0, ""Jose"", ]', 'puts exm', 'arrayName = Array.new', 'arrayName = Array.new(10)', '#!/usr/bin/ruby', 'exm = Array.new(10)', 'puts exm.size', 'puts exm.length', '#!/usr/bin/ruby', 'exm = Array(""a""...""z"")', 'puts ""#{exm}""', '#[] method', 'days = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]', 'puts days[0]', 'puts days[10]', 'puts days[-2]', 'puts days[2, 3]', 'puts days[1..7]', 'days = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]', 'puts days.at(0)', 'puts days.at(-1)', 'puts days.at(5)', 'days = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]', 'puts days.fetch(10)', 'days = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]', 'puts days.fetch(10, ""oops"")', 'days = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]', 'puts days.first', 'puts days.last', 'days = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]', 'puts days.take(1)', 'puts days.take(2)', 'days = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]', 'puts days.drop(5)', 'puts days.drop(6)', 'days = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]', 'puts days.push(""Today"")', 'puts days << (""Tomorrow"")', 'days = [""Fri"", ""Sat"", ""Sun""]', 'puts days.unshift(""Today"")', 'days = [""Fri"", ""Sat"", ""Sun""]', 'puts days.insert(2, ""Thursday"")', 'days = [""Fri"", ""Sat"", ""Sun""]', 'puts days.pop', 'days = [""Fri"", ""Sat"", ""Sun""]', 'puts days.shift', 'days = [""Fri"", ""Sat"", ""Sun""]', 'puts days.delete(""Sat"")', 'days = [""Fri"", ""Sat"", ""Sun"", ""Sat""]', 'puts days.uniq']",[],[],['|||Using literal constructor []|||Using new class method||||||push or <<|||unshift|||insert||||||pop|||shift|||delete|||uniq|||']
23,['Ruby Hashes'],"['A Ruby hash is a collection of unique keys and their values. They are similar to arrays but array use integer as an index and hash use any object type. They are also called associative arrays, dictionaries or maps.']","['https://www.javatpoint.com/ruby-date-and-time', 'https://www.javatpoint.com/ruby-arrays', 'https://www.javatpoint.com/ruby-date-and-time', 'https://www.javatpoint.com/ruby-arrays', 'https://www.javatpoint.com/ruby-date-and-time']","['https://static.javatpoint.com/ruby/images/ruby-hashes1.png', 'https://static.javatpoint.com/ruby/images/ruby-hashes2.png']",[],"['Creating Ruby Hash', 'Modifying Ruby Hash', 'Ruby Hash Methods']","['Public Class Methods', 'Public Instance Methods']",[],"['If a hash is accessed with a key that does not exist, the method will return nil.', 'Ruby hash is created by writing key-value pair within {} curly braces. ', 'To fetch a hash value, write the required key within [] square bracket. ', 'A Ruby hash can be modified by adding or removing a key value pair in an already existing hash.', 'A Ruby hash has many methods. Some are public class methods and some public instance methods.']",[],[],"['name = {""key1"" => ""value1"", ""key2"" => ""value2"", ""key3"" => ""value3""...}', 'OR', ""name = {key1:  'value1', key2:  'value2', key3:  'value3'...}"", 'color = {', '""Rose"" => ""red"",', '""Lily"" => ""purple"",', '""Marigold"" => ""yellow"",', '""Jasmine"" => ""white""', ""puts color['Rose']"", ""puts color['Lily']"", ""puts color['Marigold']"", ""puts color['Jasmine']"", 'color = {', '""Rose"" => ""red"",', '""Lily"" => ""purple"",', '""Marigold"" => ""yellow"",', '""Jasmine"" => ""white""', 'color[\'Tulip\'] = ""pink""', 'color.each do |key, value|', 'puts ""#{key} color is #{value}""']",[],"['Method|||Description&&&Hash[object]|||Create a new hash with given objects.&&&new(obj)|||Return a new empty hash.&&&try_convert(obj)|||Try to convert obj into hash.', 'Method|||Description&&&hsh==other_hash|||Two hashes are equal if they contain same key and value pair.&&&hsh[key]|||Retrieve value from the respective key.&&&hsh[key] = value|||Associates new value to the given key.&&&assoc(obj)|||Compare obj in the hash.&&&clear|||Remove all key value pair from hash.&&&compare_by_identity|||Compare hash keys by their identity.&&&compare_by_identity?|||Return true if hash compare its keys by their identity.&&&default(key=nil)|||Return default value.&&&default = obj|||Sets the default value.&&&delete(key)|||Delete key value pair.&&&each|||Call block once for each key in hash.&&&empty?|||Return true if hash contains no key value pair.&&&eql>(other)|||Return true if hash and other both have same content&&&fetch(key[, default])|||Return value from hash for a given key.&&&flatten|||Return a new array that is a one-dimensional flattening of this hash.&&&has_key?(key)|||Return true if given key is present in hash.&&&has_value?(value)|||Return true if given value is present in hash for a key.&&&include?(key)|||Return true if given key is present in hash.&&&to_s/ inspect|||Return content of hash as string.']",[]
24,['Ruby Date & Time'],"['Ruby has Mainly three classes related to date and time in its documentation.\n\nDate\nDateTime\nTime\n\n\nDate\nRuby date provides two classes, Date and DateTime. \nTo understand the concept of date, first we need to understand some terms.\n\nCalendar date: The calendar date is a particular day within a calendar month within a year.\nOrdinal date: The ordinal date is a particular day of a calendar year identified by its ordinal number.\nWeek date: The week date is a day identified by calendar week and day numbers. The first calendar week of the year is the one which includes first Thursday of that year.\nJulian day number: The julian day number is in elapsed day since noon on January 1, 4713 BCE.\nModified julian day number: The modified julian day number is in elapsed day since midnight on November 17, 1858 CE.\n\nThe Date object is created with ::new, ::parse, ::today, ::jd, ::strptime, etc. All date objects are immutable, hence they can\'t modify themselves.\nExample:\n\r\nrequire \'date\' \r\n\r\nputs Date.new(2017,4,3)          \r\nputs Date.jd(2451877)             \r\nputs Date.ordinal(2017,3)       \r\nputs Date.commercial(2017,5,6)   \r\nputs Date.parse(\'2017-02-03\')  \r\nputs Date.strptime(\'03-02-2017\', \'%d-%m-%Y\')                         \r\nputs Time.new(2017,10,8).to_date   \r\n\nOutput:\n\nThe Date object has various methods as shown in the below example.\nExample:\n\r\nrequire \'date\' \r\n\r\nd = Date.parse(\'4th Mar 2017\') \r\n                             \r\nputs d.year                      \r\nputs d.mon                       \r\nputs d.mday                      \r\nputs  d.wday                      \r\nputs d += 1                      \r\nputs d.strftime(\'%a %d %b %Y\')  \r\n\nOutput:\n\n\nDateTime\nRuby DateTime is a subclass of Date. It easily handles date, hour, minute, second and offset.\nThe DateTime object created with DateTime.new, DateTime.ordinal, DateTime.parse, DateTime.jd, DateTime.commercial, DateTime.now, etc.\nExample:\n\r\nrequire \'date\' \r\n\r\nputs DateTime.new(2017,3,4,5,6,7) \r\n\nOutput:\n\nThe last element of day, minute, second or hour can be fractional.\nThe DateTime object has various methods as shown in the below example.\nExample:\n\r\nrequire \'date\' \r\n\r\nd = DateTime.parse(\'4th Mar 2017 02:37:05+05:40\') \r\n                     \r\nputs d.hour               \r\nputs d.min               \r\nputs d.sec                \r\nputs d.offset             \r\nputs d.zone               \r\nputs d += Rational(\'1.0\') \r\n                     \r\nputs d = d.new_offset(\'+05:00\') \r\n                    \r\nputs d.strftime(\'%I:%M:%S %p\') \r\n                   \r\nputs d > DateTime.new(2000) \r\n\nOutput:\n\n\nTime\nTime class is an abstraction of dates and times. It is stored internally as the number of seconds since Epoch time. The Time class treats GMT (Grenwich Mean Time) and UTC (Coordinated Universal Time) equivalent.\nTimes may appear equal but on comparison they may be different as all times may have fraction.\nTime implementation uses a signed 63 bit integer, Bignum or Rational. Time works slower when integer is used. \n\nCreating a new Time Instance\nA new Time instance can be created with ::new. This will use your current system\'s time. Parts of time like year, month, day, hour, minute, etc can also be passed.\nWhile creating a new time instance, you need to pass at least a year. If only year is passed, then time will default to January 1 of that year at 00:00:00 with current system time zone. \nExample:\n\r\nputs Time.new        \r\nputs Time.new(2017, 3)     \r\nputs Time.new(2017, 3, 4) \r\nputs Time.new(2017, 3, 4, 6, 5, 5, ""+05:00"") \r\n\nOutput:\n\n\nTime with gm, utc and local functions\nInstead of using current system setting, you can also use GMT, local and UTC timezones.\nExample:\n\r\nputs Time.local(2017, 2, 5)  \r\n\r\nputs Time.local(2017, 2, 5, 4, 30)   \r\n\r\nputs Time.utc(2017, 2, 5, 4, 30)  \r\n\r\nputs Time.gm(2017, 2, 5, 4, 30, 36)  \r\n\nOutput:\n\n\nWorking with an instance of time\nAfter creating an instance of time, we can work on that time in following ways.\nExample:\n\r\nt = Time.new(1991, 07, 5, 9, 15, 33, ""+09:00"") \r\nputs t.friday? #=> false \r\nputs t.year #=> 1993 \r\nputs t.dst? #=> false \r\nputs t + (60*60*24*365) #=> 1994-02-24 12:00:00 +0900 \r\nputs t.to_i #=> 730522800 \r\n\r\nt1 = Time.new(2017) \r\nt2 = Time.new(2015) \r\n\r\nputs t1 == t2 #=> false \r\nputs t1 == t1 #=> true \r\nputs t1 <  t2 #=> true \r\nputs t1 >  t2 #=> false \r\n\r\nputs Time.new(2010,10,31).between?(t1, t2) #=> true\r\n\nOutput:\n\n\nTimezones and daylight savings time\nA Time object can be used to get all the information related to timezones. All the information will be displayed respective to current time of our system.\nExample:\n\r\ntime = Time.new \r\n\r\nputs time.zone       \r\nputs time.utc_offset \r\nputs time.zone      \r\nputs time.isdst     \r\nputs time.utc?    \r\nputs time.localtime  \r\nputs time.gmtime    \r\nputs time.getlocal  \r\nputs time.getutc \r\n\nOutput:\n\n\n\nNext TopicRuby ranges\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/ruby-ranges', 'https://www.javatpoint.com/ruby-hashes', 'https://www.javatpoint.com/ruby-ranges', 'https://www.javatpoint.com/ruby-hashes', 'https://www.javatpoint.com/ruby-ranges']","['https://static.javatpoint.com/ruby/images/ruby-date-time1.png', 'https://static.javatpoint.com/ruby/images/ruby-date-time2.png', 'https://static.javatpoint.com/ruby/images/ruby-date-time3.png', 'https://static.javatpoint.com/ruby/images/ruby-date-time4.png', 'https://static.javatpoint.com/ruby/images/ruby-date-time5.png', 'https://static.javatpoint.com/ruby/images/ruby-date-time6.png', 'https://static.javatpoint.com/ruby/images/ruby-date-time7.png', 'https://static.javatpoint.com/ruby/images/ruby-date-time8.png']",[],"['Date', 'DateTime', 'Time', 'Creating a new Time Instance', 'Time with gm, utc and local functions', 'Working with an instance of time', 'Timezones and daylight savings time']",[],[],"['Ruby date provides two classes, Date and DateTime. ', 'To understand the concept of date, first we need to understand some terms.', ""The Date object is created with ::new, ::parse, ::today, ::jd, ::strptime, etc. All date objects are immutable, hence they can't modify themselves."", 'The Date object has various methods as shown in the below example.', 'Ruby DateTime is a subclass of Date. It easily handles date, hour, minute, second and offset.', 'The DateTime object created with DateTime.new, DateTime.ordinal, DateTime.parse, DateTime.jd, DateTime.commercial, DateTime.now, etc.', 'The last element of day, minute, second or hour can be fractional.', 'The DateTime object has various methods as shown in the below example.', 'Times may appear equal but on comparison they may be different as all times may have fraction.', 'Time implementation uses a signed 63 bit integer, Bignum or Rational. Time works slower when integer is used. ', 'Instead of using current system setting, you can also use GMT, local and UTC timezones.', 'After creating an instance of time, we can work on that time in following ways.']","['Time class is an abstraction of dates and times. It is stored internally as the number of seconds since Epoch time. The Time class treats GMT (Grenwich Mean Time) and UTC (Coordinated Universal Time) equivalent.', ""A new Time instance can be created with ::new. This will use your current system's time. Parts of time like year, month, day, hour, minute, etc can also be passed."", 'While creating a new time instance, you need to pass at least a year. If only year is passed, then time will default to January 1 of that year at 00:00:00 with current system time zone. ', 'A Time object can be used to get all the information related to timezones. All the information will be displayed respective to current time of our system.']",[],"[""require 'date'"", 'puts Date.new(2017,4,3)', 'puts Date.jd(2451877)', 'puts Date.ordinal(2017,3)', 'puts Date.commercial(2017,5,6)', ""puts Date.parse('2017-02-03')"", ""puts Date.strptime('03-02-2017', '%d-%m-%Y')"", 'puts Time.new(2017,10,8).to_date', ""require 'date'"", ""d = Date.parse('4th Mar 2017')"", '', 'puts d.year', 'puts d.mon', 'puts d.mday', 'puts  d.wday', 'puts d += 1', ""puts d.strftime('%a %d %b %Y')"", ""require 'date'"", 'puts DateTime.new(2017,3,4,5,6,7)', ""require 'date'"", ""d = DateTime.parse('4th Mar 2017 02:37:05+05:40')"", '', 'puts d.hour', 'puts d.min', 'puts d.sec', 'puts d.offset', 'puts d.zone', ""puts d += Rational('1.0')"", '', ""puts d = d.new_offset('+05:00')"", '', ""puts d.strftime('%I:%M:%S %p')"", '', 'puts d > DateTime.new(2000)', 'puts Time.new', 'puts Time.new(2017, 3)', 'puts Time.new(2017, 3, 4)', 'puts Time.new(2017, 3, 4, 6, 5, 5, ""+05:00"")', 'puts Time.local(2017, 2, 5)', 'puts Time.local(2017, 2, 5, 4, 30)', 'puts Time.utc(2017, 2, 5, 4, 30)', 'puts Time.gm(2017, 2, 5, 4, 30, 36)', 't = Time.new(1991, 07, 5, 9, 15, 33, ""+09:00"")', 'puts t.friday? #=> false', 'puts t.year #=> 1993', 'puts t.dst? #=> false', 'puts t + (60*60*24*365) #=> 1994-02-24 12:00:00 +0900', 'puts t.to_i #=> 730522800', 't1 = Time.new(2017)', 't2 = Time.new(2015)', 'puts t1 == t2 #=> false', 'puts t1 == t1 #=> true', 'puts t1 <  t2 #=> true', 'puts t1 >  t2 #=> false', 'puts Time.new(2010,10,31).between?(t1, t2) #=> true', 'time = Time.new', 'puts time.zone', 'puts time.utc_offset', 'puts time.zone', 'puts time.isdst', 'puts time.utc?', 'puts time.localtime', 'puts time.gmtime', 'puts time.getlocal', 'puts time.getutc']",[],[],"['|||Date|||DateTime|||Time||||||Calendar date: The calendar date is a particular day within a calendar month within a year.|||Ordinal date: The ordinal date is a particular day of a calendar year identified by its ordinal number.|||Week date: The week date is a day identified by calendar week and day numbers. The first calendar week of the year is the one which includes first Thursday of that year.|||Julian day number: The julian day number is in elapsed day since noon on January 1, 4713 BCE.|||Modified julian day number: The modified julian day number is in elapsed day since midnight on November 17, 1858 CE.|||']"
25,['Ruby Ranges'],['Ruby range represents a set of values with a beginning and an end. They can be constructed using s..e and s...e literals or with ::new.'],"['https://www.javatpoint.com/ruby-iterators', 'https://www.javatpoint.com/ruby-date-and-time', 'https://www.javatpoint.com/ruby-iterators', 'https://www.javatpoint.com/ruby-date-and-time', 'https://www.javatpoint.com/ruby-iterators']","['https://static.javatpoint.com/ruby/images/ruby-ranges1.png', 'https://static.javatpoint.com/ruby/images/ruby-ranges2.png', 'https://static.javatpoint.com/ruby/images/ruby-ranges3.png', 'https://static.javatpoint.com/ruby/images/ruby-ranges4.png', 'https://static.javatpoint.com/ruby/images/ruby-ranges5.png']",[],"['Ranges as Sequences', 'Ranges as Conditions', 'Ranges as Intervals', 'Ruby Reverse Range']",[],[],"['The ranges which has .. in them, run from beginning to end inclusively. The ranges which has ... in them, run exclusively the end value.', 'Ruby has a variety of ways to define ranges.', 'The most natural way to define a range is in sequence. They have a start point and an end point. They are created using either .. or ... operators.', 'We are taking a sample range from 0 to 5. The following operations are performed on this range. ', 'Ranges can also be defined in terms of intervals. Intervals are represented by === case equality operator.', 'Ruby reverse range operator does not return any value. If left side value is larger than right side value in a range, no vlaue will be returned.', 'Nothing will be returned in the output for the above example.', 'To print a reverse order, you can use reverse method in a normal range as shown below.']",['Ranges are also defined as conditional expressions. Different conditions are defined in a set of lines. These conditions are enclosed within start statement and end statement.'],[],"['puts (-5..-1).to_a', 'puts (-5...-1).to_a', ""puts ('a'..'e').to_a"", ""puts ('a'...'e').to_a"", '#!/usr/bin/ruby', 'range = 0..5', 'puts range.include?(3)', 'ans = range.min', 'puts ""Minimum value is #{ans}""', 'ans = range.max', 'puts ""Maximum value is #{ans}""', 'ans = range.reject {|i| i < 5 }', 'puts ""Rejected values are #{ans}""', 'range.each do |digit|', 'puts ""In Loop #{digit}""', '#!/usr/bin/ruby', 'budget = 50000', 'watch = case budget', 'when 100..1000 then ""Local""', 'when 1000..10000 then ""Titan""', 'when 5000..30000 then ""Fossil""', 'when 30000..100000 then ""Rolex""', 'else ""No stock""', 'puts watch', '#!/usr/bin/ruby', ""if (('a'..'z') === 'v')"", 'puts ""v lies in the above range""', ""if (('50'..'90') === 99)"", 'puts ""z lies in the above range""', '#!/usr/bin/ruby', 'puts (5..1).to_a', '#!/usr/bin/ruby', 'puts (1..5).to_a.reverse']",[],[],['|||Ranges as sequences|||Ranges as conditions|||Ranges as intervals|||']
26,['Ruby Iterators'],['Iterator is a concept used in object-oriented language. Iteration means doing one thing many times like a loop. '],"['https://www.javatpoint.com/ruby-file-io', 'https://www.javatpoint.com/ruby-ranges', 'https://www.javatpoint.com/ruby-file-io', 'https://www.javatpoint.com/ruby-ranges', 'https://www.javatpoint.com/ruby-file-io']","['https://static.javatpoint.com/ruby/images/ruby-iterators1.png', 'https://static.javatpoint.com/ruby/images/ruby-iterators2.png', 'https://static.javatpoint.com/ruby/images/ruby-iterators3.png', 'https://static.javatpoint.com/ruby/images/ruby-iterators4.png', 'https://static.javatpoint.com/ruby/images/ruby-iterators5.png']",[],"['Ruby Each Iterator', 'Ruby Times Iterator', 'Ruby Upto and Downto Iterators', 'Ruby Step Iterator', 'Ruby Each_Line Iterator']",[],[],"['The Ruby each iterator returns all the elements from a hash or array.', 'Here collection can be any array, range or hash.', 'A loop is executed specified number of times by the times iterator. Loop will start from zero till one less than specified number.', 'Here, at place of x we need to define number to iterate the loop.', 'An upto iterator iterates from number x to number y.', 'A step iterator is used to iterate while skipping over a range.', 'Here, x is the range which will be skipped during iteration.', 'A each_line iterator is used to iterate over a new line in a string.']","['The loop method is the simplest iterator. They return all the elements from a collection, one after the other. Arrays and hashes come in the category of collection.']",[],"['(collection).each do |variable|', 'code...', '#!/usr/bin/ruby', '(1...5).each do |i|', 'puts i', 'x.times do |variable|', 'code...', '#!/usr/bin/ruby', '5.times do |n|', 'puts n', 'x.upto(y) do |variable|', '#!/usr/bin/ruby', '1.upto(5) do |n|', 'puts n', '(controller).step(x) do |variable|', '#!/usr/bin/ruby', '(10..50).step(5) do |n|', 'puts n', '#!/usr/bin/ruby', '""All\\nthe\\nwords\\nare\\nprinted\\nin\\na\\nnew\\line."".each_line do |line|', 'puts line']",[],[],[]
27,['Ruby File I/O'],"['Ruby I/O is a way to interact with your system. Data is sent in the form of bytes/characters. IO class is the basis for all input and output in Ruby. It may be duplexed, hence may use more than one native operating system stream.']","['https://www.javatpoint.com/ruby-directories', 'https://www.javatpoint.com/ruby-iterators', 'https://www.javatpoint.com/ruby-directories', 'https://www.javatpoint.com/ruby-iterators', 'https://www.javatpoint.com/ruby-directories']","['https://static.javatpoint.com/ruby/images/ruby-file-io1.png', 'https://static.javatpoint.com/ruby/images/ruby-file-io2.png', 'https://static.javatpoint.com/ruby/images/ruby-file-io3.png', 'https://static.javatpoint.com/ruby/images/ruby-file-io4.png', 'https://static.javatpoint.com/ruby/images/ruby-file-io5.png', 'https://static.javatpoint.com/ruby/images/ruby-file-io6.png']",[],"['Common modes in I/O port', 'IO Console', 'Ruby opening a file', 'Ruby reading a file', 'Example to read a file', 'Ruby writing a file', 'Ruby renaming and deleting a file']",['The sysread Method'],[],"['The IO console provides different methods to interact with console. The class IO provides following basic methods:', 'A Ruby file can be created using different methods for reading, writing or both. ', 'There are two methods to open a file in Ruby:', ""Difference between both the methods is that File.open method can be associated with a block while File.new method can't."", 'Example to create a file', ""Let's create a file in Ruby using File.open method to read or write data from files."", 'Step 1) In file hello.rb, write the code to create a new file as shown below.', 'Step 2) Type the following two commands in the console to view the created file.', 'The new file is created and content is displayed in the terminal as shown above.', 'There are three different methods to read a file.', 'To return a single line, following syntax is used.', 'To return the whole file after the current position, following syntax is used.', 'To return file as an array of lines, following syntax is used.', ""Let's create a file in Ruby using File.open method to read or write data from files."", 'Step 1) In file hello.rb, write the code to read an already existing file as shown below.', 'Step 2) Type the following command in the console to read the file.', 'Content of about file is displayed in the console.', 'The sysread method is also used to read the content of a file. With the help of this method you can open a file in any mode. ', 'In file hello.rb, write the code to read an already existing file as shown below.', 'The argument 40 will print till 40 characters from the file.', 'With the help of syswrite method, you can write content into a file. File needs to be opened in write mode for this method. ', 'The new content will over ride the old content in an already existing file.', 'Ruby files are renamed using rename method and deleted using delete mehtod.', 'To rename a file, following syntax is used.', 'In the above output, about.txt file no longer exist as its name has been changed to new.txt file.', 'To delete a file, following syntax is used.', 'In the above output, new.txt file no longer exist as it has been deleted.']",['IO has a subclass as File class which allows reading and writing files in Ruby. The two classes are closely associated. IO object represent readable/writable interactions to keyboards and screens.'],[],"['f = File.new(""fileName.rb"")', 'File.open(""fileName.rb"", ""mode"") do |f|', '#!/usr/bin/ruby', ""File.open('about', 'w') do |f|"", 'f.puts ""This is JavaTpoint""', 'f.write ""You are reading Ruby tutorial.\\n""', 'f << ""Please visit our website.\\n""', 'ruby hello.rb', 'cat about', 'code...', 'code...', 'f.readlines', '[code...]', '#!/usr/bin/ruby', 'while line = gets', 'puts line', 'ruby hello.rb about', '#!/usr/bin/ruby', 'aFile = File.new(""about.txt"", ""r"")', 'if aFile', 'content = aFile.sysread(40)', 'puts content', 'puts ""Unable to open file!""', '#!/usr/bin/ruby', 'aFile = File.new(""about.txt"", ""r+"")', 'if aFile', 'aFile.syswrite(""New content is written in this file.\\n"")', 'File.rename(""olderName.txt"", ""newName.txt"")', '#!/usr/bin/ruby', 'File.rename(""about.txt"", ""new.txt"")', 'File.delete(""filename.txt"")', '#!/usr/bin/ruby', 'File.delete(""new.txt"")']",[],[],"['|||""r"": read-only mode is the default mode starts at beginning of file.|||""r+"": read-write mode, starts at beginning of file.|||""w"": write-only mode, either creates a new file or truncates an existing file for writing.|||""w+"": read-write mode, either creates a new file or truncates an existing file for reading and writing.|||""a"": write-only mode, if file exists it will append the file othrwise a new file will be created for writing only.|||""a+"": read and write mode, if file exists it will append the file othrwise a new file will be created for writing and reading.||||||IO::console|||IO#raw#raw!|||IO#cooked|||IO#cooked!|||IO#getch|||IO#echo=|||IO#echo?|||IO#noecho|||IO#winsize|||IO#winsize=|||IO#iflush|||IO#ioflush|||IO#oflush||||||File.new method : Using this method a new file can be created for reading, writing or both.|||File.open method : Using this method a new file object is created. That file object is assigned to a file.|||']"
28,['Ruby Directories'],['Class Dir has directory streams as objects which represents directories in underlying file system.'],"['https://www.javatpoint.com/ruby-exceptions', 'https://www.javatpoint.com/ruby-file-io', 'https://www.javatpoint.com/ruby-exceptions', 'https://www.javatpoint.com/ruby-file-io', 'https://www.javatpoint.com/ruby-exceptions']","['https://static.javatpoint.com/ruby/images/ruby-directories1.png', 'https://static.javatpoint.com/ruby/images/ruby-directories2.png', 'https://static.javatpoint.com/ruby/images/ruby-directories3.png']",[],"['Creating a Directory', 'Checking a Directory exists or not', 'Current Working Directory', 'Removing Directory']",[],[],"['Directories are handled with Dir class.', 'To create a directory mkdir command is used. You can give permission to a directory if you want.', 'We have created a directory ""project"" in out system.', 'To check whether a directory exists or not exists? Method is used.', 'the correct directory name display true and wrong directory name display false.', 'To know the current working directory pwd method is used.', 'To remove a directory, rmdir, unlink or delete methods are used. They perform same function for a Ruby directory.', 'The exists method returns false as this directory is no longer present.']",[],[],"['Dir.mkdir ""dirName"" , permission', 'Dir.mkdir ""project""', 'puts Dir.exists? ""dirName""', '#!/usr/bin/ruby', 'puts Dir.exists? ""project""', 'puts Dir.exists? ""pproject""', 'puts Dir.pwd', 'puts Dir.pwd', 'Dir.rmdir ""dirName""', '#!/usr/bin/ruby', 'Dir.rmdir ""project""', 'puts Dir.exists? ""project""']",[],[],[]
29,['Ruby Exceptions'],"['Ruby exception is an object, an instance of the class Exception or descendent of that class. It represents some exceptional condition. ']","['https://www.javatpoint.com/ruby-oops', 'https://www.javatpoint.com/ruby-directories', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/ruby-oops', 'https://www.javatpoint.com/ruby-directories', 'https://www.javatpoint.com/ruby-oops']","['https://static.javatpoint.com/ruby/images/ruby-exceptions1.png', 'https://static.javatpoint.com/ruby/images/ruby-exceptions2.png', 'https://static.javatpoint.com/ruby/images/ruby-exceptions3.png', 'https://static.javatpoint.com/ruby/images/ruby-exceptions4.png', 'https://static.javatpoint.com/ruby/images/ruby-exceptions5.png', 'https://static.javatpoint.com/ruby/images/ruby-exceptions6.png']",[],"['Ruby Class Exceptions', 'Handling an Exception', 'Exception Object', 'Using retry Statement', 'Using raise Statement', 'Using ensure Statement', 'Using else Statement', 'Ruby Catch and Throw']",[],[],"['In a Ruby program, when something goes wrong, it throws an exceptional behavior. By default Ruby program terminates on throwing an exception. ', 'Built-in subclasses of exception are as follows:', 'The raise method comes from the Kernel module.', 'In the above example, interrupted code does not run completely. After exception handling code resumes after the begin-end block.', 'The rescue clauses are written in a begin/rescue block. Exceptions if not handled by one rescue clause will br handled with the next one.', 'Exception objects are normal objects. A rescued exception can be hold to a variable within the rescue clause.', 'The above program runs as follows:', 'Step 1 In the begin block, code is written to make a directory that already exists. ', 'Step 2 This will throw an error.', 'Step 3 In rescue block, y was reassigned.', 'Step 4 The retry statement will go to the begin block.', 'Step 5 Directory will be created.', 'The raise statement is used to raise an exception. ', 'The first one re-raises the current exception. It is used for exception handlers where exception is intercepted before passing it on.', 'The second one creates a new RuntimeError exception. This exception is then raised up the call stack. ', 'The third one uses first argument to create an exception, then sets associated message to the second argument.', 'The fourth one similar to third one. In this you can add any conditional statement to raise an exception.', 'The ensure block will run at any case whether an exception arises, exception is rescued or code is terminated by uncaught exception.', 'The else clause is always present after rescue clause and before ensure clause. If no exceptions are raised, then only else block is executed.', 'Ruby catch and throw provide a way to jump from the execution early when no further work is needed in a code. ', 'The catch and throw method is faster than rescue and raise clauses. Hence, it is more suitable to use. ']","['We can declare some exception handlers within Ruby. An exception handler is a block of code which is executed when exception occurs in some other block of code. ', 'Exceptions are handled in two ways. Either you can terminate the program or deal with the exception. To deal with an exception, you can provide a rescue clause. By providing this, program control flows to the rescue clause. ', ""When an exception is raised but not handled, global variable $! contains the current exception and [email\xa0protected] contains the current exception's backtrace. "", 'Ruby predefined classes like Exception and its children helps you to handle errors of your program. In Ruby exception hierarchy, most of the sub classes extend class StandardError. These are the normal exceptions. ', 'To handle exception, the code that raises exception is enclosed within begin-end block. Using rescue clauses we can state type of exceptions we want to handle.', 'If no argument is defined in the rescue clause, the parameter defaults to StandardError. Each rescue clause specify multiple exceptions to catch. If raise is used without any parameters, exception may re-raised.', 'Usaually in a rescue clause, the exception is captured and code resumes after begin block. Using retry statement, the rescue block code can be resumed from begin after capturing an exception.', 'There is an ensure clause which guarantees some processing at the end of code. The ensure block always run whether an exception is raised or not. It is placed after last rescue clause and will always executed as the block terminates. ', 'The catch defines a block that is labeled with a given name. It is used to jump out of nested code. Using catch, the block will be executed normally until throw is encountered.']","['In the begin block, each rescue clause with the raised exception will be compared against each of parameters in turn. It will be matched when the type of error thrown and exception named in the rescue clause is either same or is a superclass of that exception. The else clause is executed if body of begin statement is completed without exceptions. If an exception occurs, else clause will not be executed.', 'The Exception class defines two methods that return details about the exception. The message method returns a string that define the explanation of error. The backtrace method returns an array of string that represent the call stack at that point where exception was raised.']","['def raise_exception', ""puts 'I am before the raise.'"", ""raise 'oops! An error has occured'"", ""puts 'I am after the raise'"", 'raise_exception', 'def raise_and_rescue', 'begin', ""puts 'Before the raise.'"", ""raise 'An error occured.'"", ""puts 'After the raise.'"", 'rescue', ""puts 'Code rescued.'"", 'end', ""puts 'After the begin block.'"", 'raise_and_rescue', 'rescue OneTypeOfException', 'rescue AnotherTypeOfException', '# Other exceptions', ""raise 'an exception'"", 'rescue ZeroDivisionError => e', 'puts ""Exception Class: #{ e.class.name }""', 'puts ""Exception Message: #{ e.message }""', 'puts ""Exception Backtrace: #{ e.backtrace }""', 'code....', '# capture exceptions', 'retry  # program will run from the begin block', '#!/usr/bin/ruby', 'x = Dir.mkdir ""alreadyExist""', 'if x', 'puts ""Directory created""', 'y = ""newDir""', 'retry', 'raise ""Error Message""', 'raise ExceptionType, ""Error Message""', 'raise ExceptionType, ""Error Message"" condition', '#!/usr/bin/ruby', 'begin', ""puts 'code before raise.'"", ""raise 'exception occurred.'"", ""puts 'code after raise.'"", 'rescue', ""puts 'I am rescued.'"", ""puts 'code after begin block.'"", 'code..', '#..raise exception', '#.. exception is rescued', '#.. This code will always execute.', ""raise 'Exception'"", 'rescue Exception => e', 'puts e.message', 'puts e.backtrace.inspect', 'puts ""The ensure code will always run""', 'code..', '#..raise exception', '# .. exception is rescued', '#.. executes if there is no exception', '#..  This code will always execute.', ""# raise 'A test exception.'"", 'puts ""no exception is raised""', 'rescue Exception => e', 'puts e.message', 'puts e.backtrace.inspect', 'puts ""else code will be executed as no exception is raised.""', 'puts ""ensure code will run""', 'throw :lablename', '#.. this  code will not be executed', 'catch :lablename do', '#.. matching catch will be executed after a throw is encountered.', 'throw :lablename condition', '#.. this code will not be executed', 'catch :lablename do', '#.. matching catch will be executed after a throw is encountered.', 'def promptAndGet(prompt)', 'print prompt', 'res = readline.chomp', 'throw :quitRequested if res == ""!""', 'return res', 'catch :quitRequested do', 'name = promptAndGet(""Name: "")', 'age = promptAndGet(""Occupation: "")', '# ..', '# process information', 'promptAndGet(""Name:"")']",[],[],['|||NoMemoryError|||ScriptError|||SecurityError|||SignalException|||StandardError|||SystenExit|||SystemStackError|||fatal - impossible to rescue|||']
30,['Ruby OOPs Concept'],"['Ruby is a true object oriented language which can be embedded into Hypertext Markup Language. Everything in Ruby is an object. All the numbers, strings or even class is an object. The whole Ruby language is basically built on the concepts of object and data.']","['https://www.javatpoint.com/html-aside-tag', 'https://www.javatpoint.com/ruby-exceptions', 'https://www.javatpoint.com/ruby-regular-expression', 'https://www.javatpoint.com/ruby-exceptions', 'https://www.javatpoint.com/ruby-regular-expression']","['https://static.javatpoint.com/ruby/images/ruby-oops-concept1.png', 'https://static.javatpoint.com/ruby/images/ruby-oops-concept2.png', 'https://static.javatpoint.com/ruby/images/ruby-oops-concept3.png', 'https://static.javatpoint.com/ruby/images/ruby-oops-concept4.png', 'https://static.javatpoint.com/ruby/images/ruby-oops-concept5.png', 'https://static.javatpoint.com/ruby/images/ruby-oops-concept6.png']",[],"['Ruby Class', 'Ruby Objects', 'Ruby Methods', 'Ruby Inheritance', 'Ruby Constructor']","['Creating Class', 'Creating Object', 'Defining Method', 'Instance Methods']",[],"['OOPs is a programming concept that uses objects and their interactions to design applications and computer programs.', 'Following are some basic concepts in OOPs:', 'Polymorphism: It is the ability to represent an operator or function in different ways for different data input.', 'Abstraction: It hides the complexity of a class by modelling classes appropriate to the problem. ', 'Ruby class defines blueprint of a data type. It defines what does that class name means.', 'A class is defined with a class keyword followed by the class name and is ended with end keyword. ', 'We will create a class Java with following command,', 'To create an object, first, we define a class. Single class can be used to create many objects. Objects are declared using new keyword. ', ""We have a class named Java. Now, let's create an object java and use it with following command,"", 'Once java object is created, it will use John as the name.', 'A method is defined with def keyword and ends with end keyword.', 'We are defining a method name which will display the following message.', 'The def keyword starts the definition of method name. Then we write body of the mehtod. Last line end indicates that method is defined.', 'The instance methods are also defined with def keyword and they can be used using a class instance only.', 'Ruby does not support multiple levels of inheritance. Instead it supports mixins.', 'In Ruby, < character is used to create a subclass. The syntax is shown below:', 'In the above example, two classes are created. One is base Parent class and other is derived Child class.', 'The super method calls the constructor of the Parent class. ', 'From the last two line, we instantiate both the classes. ', 'In the output, first the Parent class is created, derived Child class also calls the constructor of its parent class and then Child class is created.', 'A constructor is automatically called when an object is created. They do not return any values. In Ruby, they are called initialize.']","['Encapsulation: It hides the implementation details of a class from other objects due to which a class is unavailable to the rest of the code. Its main purpose is to protect data from data manipulation.', 'Inheritance: It creates new classes from pre defined classes. New class inherit behaviors of its parent class which is referred as superclass. In this way, pre defined classes can be made more reusable and useful.', 'Conventionally, class name must begin with a capital letter. Class name with more than one word run together with each word capitalized and no separating characters.', 'A new class Java is created. The @name is an instance variable available to all the methods of the Java class. It is used by say_welcome and say_bye. ', 'In Ruby, everything is an object. When we create objects, they communicate together through methods. Hence, an object is a combination of data and methods. ', 'Methods are functions which are defined inside the body of a class. Data in Ruby is accessible only via methods. There is a follow path in which Ruby looks when a method is called. To find out the method lookup chain we can use ancestors method.', ""A constructor's main purpose is to initiate the state of an object. They can't be inherited. The parent object constructor is called with super method.""]","['In inheritance, we create new classes using pre defined classes. Newly created classes are called derived classes and classes from which they are derived are called base classes. With inheritance, a code can be reused again which reduces the complexity of a program. ']","['class Greeter', 'java = Java.new(""John"")', '#!/usr/bin/ruby -w', '# define a class', 'class Circle', '# constructor method', 'def initialize(r)', '@radius = r', '# instance method', 'def getArea', '3.14 * @radius * @radius', '# create an object', 'circle = Circle.new(2)', '# call instance methods', 'a = circle.getArea()', 'puts ""Area of the box is : #{a}""', 'parentClass < subClass', '#!/usr/bin/ruby', 'class Parent', 'def initialize', 'puts ""Parent class created""', 'end', 'class Child < Parent', 'def initialize', 'super', 'puts ""Child class created""', 'Parent.new', 'Child.new', '#!/usr/bin/ruby', 'class Parent', 'def initialize', 'puts ""Parent is created""', 'end', 'Parent.new']",[],[],[]
31,['Ruby Regular Expression'],"['A regular expression is also spelled as regexp which holds a regular expression, used to match a pattern against strings. In Ruby, a pattern is written between forward slash characters. They describe the content of a string. Ruby regular expression is more similar to Perl regular expression.']","['https://www.javatpoint.com/ruby-socket-programming', 'https://www.javatpoint.com/ruby-oops', 'https://www.javatpoint.com/ruby-socket-programming', 'https://www.javatpoint.com/ruby-oops', 'https://www.javatpoint.com/ruby-socket-programming']","['https://static.javatpoint.com/ruby/images/ruby-regular-expression1.png', 'https://static.javatpoint.com/ruby/images/ruby-regular-expression2.png', 'https://static.javatpoint.com/ruby/images/ruby-regular-expression3.png', 'https://static.javatpoint.com/ruby/images/ruby-regular-expression4.png', 'https://static.javatpoint.com/ruby/images/ruby-regular-expression5.png', 'https://static.javatpoint.com/ruby/images/ruby-regular-expression6.png', 'https://static.javatpoint.com/ruby/images/ruby-regular-expression7.png', 'https://static.javatpoint.com/ruby/images/ruby-regular-expression8.png', 'https://static.javatpoint.com/ruby/images/ruby-regular-expression9.png']",[],"['=∽ and #match operators', '#match', 'Metacharacters and Escapes', 'Characters Classes', 'Repetition ', 'Grouping']",[],[],"['The pattern matching is achieved by using =∽ and #match operators.', 'If a match is found, the operator returns index of first match otherwise nil. ', 'This operator returns a MatchData object on matching otherwise nil.', 'It returns the specific string when matched otherwise nil.', 'Metacharacters have specific meaning in a pattern. To match a string, they are back slashed (\\\\\\) or escaped.', 'A character class is encircled within square brackets.', 'Here, [ab] means a or b. It is the oppoite of /ab/ which means a and b.', 'Here, [a-d] is equivalent to [abcd]. The hyphen (-) character class represents range of characters.', 'The ^ sign represents any other character which is not present in the range.', 'Grouping uses parentheses to group the terms together. Grouping the terms together make them one.', 'In this example, first pattern matches a vowel followed by two characters.', 'In the second pattern, it matches a vowel followed by a word character, twice.', 'This expression provides grouping without capturing. It combines term without creating a backreference.']","['Ruby 1.9 uses Oniguruma regular expressions library but Ruby 2.0 uses Onigmo regular expressions library. Onigmo is a fork library of Oniguruma adding some new features. ', 'This is the basic matching pattern. Here two operands are used. One is a regular expression and other is a string. The regular expression is matched with the string. ', 'Metacharacters have specific meaning in a pattern. To match a string, they are back slashed (\\\\\\) or escaped. Some meta characters are (,), (.), (?), (+), (-), (*), [,], {,}.', 'Characters defined till now match a single character. With the help of repetition metacharacter, we can specify how many times they need to occur. These meta characters are called quantifiers.']",[],['/search string/'],[],[],"['|||*: Zero or more times|||+: One or more times|||?: Zero or one times (optional)|||{n}: Exactly n times|||{n, }: n or more times|||{,m}: m or less times|||{n,m}: At least n and at most m times|||']"
32,['Ruby Socket Programming'],"['Sockets are the end points of a network communication channel, where client and server communicate to each other. They can communicate either on same machine or on different machines.']","['https://www.javatpoint.com/ruby-multithreading', 'https://www.javatpoint.com/ruby-regular-expression', 'https://www.javatpoint.com/ruby-multithreading', 'https://www.javatpoint.com/ruby-regular-expression', 'https://www.javatpoint.com/ruby-multithreading']","['https://static.javatpoint.com/ruby/images/ruby-socket-programming1.png', 'https://static.javatpoint.com/ruby/images/ruby-socket-programming2.png', 'https://static.javatpoint.com/ruby/images/ruby-socket-programming3.png', 'https://static.javatpoint.com/ruby/images/ruby-socket-programming4.png']",[],['Multiple clients socket programming'],"['Example1', 'Example2']",[],"['Types of socket:', 'server1.rb', 'In the above code, the pre installed socket module need to be included. We are using 2017 port on our system. You can use any port.', 'Start a loop, accept all connections made to port 2017 and send data to the client over socket networking.', 'Lastly, close the socket.', 'client1.rb', 'In the above code, the pre installed socket module need to be included. Create a socket and connect it to port 2017.', 'create a while loop to fetch all information sent over the socket.', 'Lastly, close the socket.', 'Go to the terminal, change to the directory to which you have saved the above two files. We have saved it in our Desktop directory.', 'Now to execute these files, we need to have the required permission. Run the following command in the terminal,', 'This command will make all the Ruby files executable present in this directory.', 'Now open two terminals. In the first terminal execute server script and in the second terminal execute client script with the following command.', 'For multiple clients overs a socket programming, a loop and some threads will be needed to accept and respond to multiple clients.', 'server3.rb', 'The listen_user_messages method listen to the user messages and send them to all the users.', 'client3.rb', 'In the above code, class Client is created to handle users. ', 'Two threads are created in send and listen methods so that we can read/write messages at the same time. ', 'Below snapshot shows chatting between two clients.', 'Output on server terminal is shown below.']","['In the above code, server will have the same port as client side to establish connection. Here we need one thread per connected user to handle all the possible users.', 'The run method verify whether an entered name is unique or not. If username already exists, connection will be killed otherwise connection will be established. ']","['There are two levels of socket, high and low. Low level access allows you to work on sockets that are supported by your system. It allows the implementation of both connectionless and connection oriented protocols. High level access allows you to work on network protocols like HTTP and FTP.']","['#!/usr/bin/ruby', ""require 'socket'"", 'server = TCPServer.open(2017)', 'client = server.accept', 'client.puts ""Hello. This is socket programming""', 'client.close', '#!/usr/bin/ruby', ""require 'socket'"", ""hostname = 'localhost'"", 'port = 2017', 's = TCPSocket.open(hostname, port)', 'while line = s.gets', 'puts line.chomp', 's.close', 'chmod a+x *.rb', 'ruby filename.rb', '#!/usr/bin/env ruby -w', 'require ""socket""', 'class Server', 'def initialize( port, ip )', '@server = TCPServer.open( ip, port )', '@connections = Hash.new', '@rooms = Hash.new', '@clients = Hash.new', '@connections[:server] = @server', '@connections[:rooms] = @rooms', '@connections[:clients] = @clients', 'run', 'def run', 'loop {', 'Thread.start(@server.accept) do | client |', 'nick_name = client.gets.chomp.to_sym', '@connections[:clients].each do |other_name, other_client|', 'if nick_name == other_name || client == other_client', 'client.puts ""This username already exist""', 'Thread.kill self', 'end', 'end', 'puts ""#{nick_name} #{client}""', '@connections[:clients][nick_name] = client', 'client.puts ""Connection established...""', 'listen_user_messages( nick_name, client )', 'end', '}.join', 'def listen_user_messages( username, client )', 'loop {', 'msg = client.gets.chomp', '@connections[:clients].each do |other_name, other_client|', 'unless other_name == username', 'other_client.puts ""#{username.to_s}: #{msg}""', 'end', 'end', 'Server.new( 2019, ""localhost"" )', '#!/usr/bin/env ruby -w', 'require ""socket""', 'class Client', 'def initialize( server )', '@server = server', '@request = nil', '@response = nil', 'listen', 'send', '@request.join', '@response.join', 'def listen', '@response = Thread.new do', 'loop {', 'msg = @server.gets.chomp', 'puts ""#{msg}""', '}', 'end', 'def send', 'puts ""Enter your name:""', '@request = Thread.new do', 'loop {', 'msg = $stdin.gets.chomp', '@server.puts( msg )', '}', 'end', 'server = TCPSocket.open( ""localhost"", 2019 )', 'Client.new( server )']",[],[],['|||TCP Socket|||UDP Socket|||UNIX Socket|||']
33,['Ruby Thread'],"['Thread means lightweight sub-process. It is a separate path of execution. In Ruby, different parts of a program can run at the same time by either splitting tasks within a program using multiple threading or splitting tasks between different programs using multiple process.']","['https://www.javatpoint.com/ruby-ldap', 'https://www.javatpoint.com/ruby-socket-programming', 'https://www.javatpoint.com/ruby-ldap', 'https://www.javatpoint.com/ruby-socket-programming', 'https://www.javatpoint.com/ruby-ldap']",['https://static.javatpoint.com/ruby/images/ruby-thread1.png'],[],"['Ruby Multithreading', 'Thread Initialization', 'Thread Termination', 'Ruby Thread Example', 'Thread Lifecycle', 'Thread Exception Handling', 'Thread Variables and Scope', 'Thread Scheduling', 'Thread Exclusion', 'Public Class Methods', 'Public Instance Methods']",[],[],"['Threads are the Ruby implementation for a concurrent programming model. ', 'A normal program has single thread of execution. All the statements in the program are executed sequentially.', ""A new thread is created using thread.new call. It is different from the main thread's execution. "", 'To create a new thread Ruby provides three keywords namely, ::new, ::start and ::fork.', 'There are different ways to terminate a thread in Ruby. To exit a given thread, class ::kill is used.', ""By calling a thread's Thread.join method, you can wait for a particular thread to finish."", 'To handle exception, you can use class method ::handle_interrupt. It will handle exceptions asynchronously with threads.', 'Threads are created with blocks. A local variable created within a block is accessible to only thread in which this block is present. ', 'Ruby supports scheduling threads by using ::stop and ::pass methods in a program.']","['To start a new thread, associate a block of code with a call to Thread.new, Thread.start or Thread.fork. Thread will be created. The new thread exits when the block exit.', 'Ruby thread class allows thread-local variables to be created and accessed by name. Thread object is treated like a hash, writing elements using []= and reading them back using []. ', 'The ::stop class method put the current running thread to sleep and schedule the execution of another thread. Once the thread is asleep, instance method wakeup is used to mark thread as eligible for scheduling.', 'The ::pass class method tries to pass execution to another thread. It depends upon the operating system whether the running thread will switch or not.', 'Thread priority gives a hint to schedule threads according to their priority. The high priority thread is scheduled first. It also depends upon the operating system. A thread can increase or decrease its own priority as the first action it takes.']","['A multi thread program has more than one thread of execution in it. It uses less memory space and share same address space. Multithreading is used to perform more than one task at once.\nA new thread is created using thread.new call. It is different from the main thread\'s execution. \n\nThread Initialization\nTo create a new thread Ruby provides three keywords namely, ::new, ::start and ::fork.\nTo start a new thread, associate a block of code with a call to Thread.new, Thread.start or Thread.fork. Thread will be created. The new thread exits when the block exit.\nSyntax:\n\n# Original thread runs\nThread.new {\n  # New thread is created.\n}\n# Original thread runs\n\n\nThread Termination\nThere are different ways to terminate a thread in Ruby. To exit a given thread, class ::kill is used.\nSyntax:\n\nthr = Thread.new { ... }\nThread.kill(thr)\n\n\nRuby Thread Example\n\n#!/usr/bin/ruby \nth = Thread.new do #Here we start a new thread \n  Thread.current[\'counter\']=0 \n  5.times do |i| #loop starts and increases i each time \n    Thread.current[\'counter\']=i \n    sleep 1 \n  end \n  return nil \nend \nwhile th[\'counter\'].to_i < 4  do \n=begin \nth is the long running thread \nand we can access the same variable \nfrom inside the thread here \n=end \n  puts ""Counter is #{th[\'counter\']}"" \n  sleep 0.5 \nend \nputs ""Long running process finished!"" \n\nOutput:\n\n\nThread Lifecycle\nOnce a thread is created, there is no need to start it. It automatically runs when it gets proper CPU resources. The last expression in a block is the value of the thread. If thread has run completely, value method returns the thread value, otherwise value method blocks it and returns when the thread has completed. A number of methods are defined by thread class while running query and manipulate the thread.\nBy calling a thread\'s Thread.join method, you can wait for a particular thread to finish.\n\nThread Exception Handling\nThreads may have some exceptions in them. If exception arises in any thread other than main thread, it depends upon abort_on_exception. By default this option is always false. It means unhandled exception will silently terminate the thread. This can be changed by setting either abort_on_exception = true or $DEBUG to true.\nTo handle exception, you can use class method ::handle_interrupt. It will handle exceptions asynchronously with threads.\n\nThread Variables and Scope\nThreads are created with blocks. A local variable created within a block is accessible to only thread in which this block is present. \nRuby thread class allows thread-local variables to be created and accessed by name. Thread object is treated like a hash, writing elements using []= and reading them back using []. \n\nThread Scheduling\nRuby supports scheduling threads by using ::stop and ::pass methods in a program.\nThe ::stop class method put the current running thread to sleep and schedule the execution of another thread. Once the thread is asleep, instance method wakeup is used to mark thread as eligible for scheduling.\nThe ::pass class method tries to pass execution to another thread. It depends upon the operating system whether the running thread will switch or not.\nThread priority gives a hint to schedule threads according to their priority. The high priority thread is scheduled first. It also depends upon the operating system. A thread can increase or decrease its own priority as the first action it takes.\n\nThread Exclusion\nRuby thread exclusion states that, when two threads share the same data and one of the thread modifies that data, then we need to ensure that no thread should see each others data in an inconsistent state. For example, banking server. Where one thread operates money transfer in accounts and other thread is generating monthly report for the customers.\n\nPublic Class Methods\n\n\nMethod\nDescription\n\n\nabort_on_exception\nIt returns the status of global ""abort on exception"" condition. The default is true. When it is set to true, all threads will abort if an exception is raised in any thread.\n\n\nabort_on_exception=\nWhen it is set to true, all threads will abort if an exception is raised. It returns the new state.\n\n\ncurrent\nIt returns the currently executing thread.\n\n\nexclusive{block}\nIt wraps the block in a single, returning the value of the block.\n\n\nexit\nIt terminates the currently running thread and schedules another thread tro run.\n\n\nkill(thread)\nIt causes the given thread to exit.\n\n\nfork([args]*){|args| block}\nIt is basically same as ::new method.\n\n\nhandle_interrupt(hash){...}\nChanges asynchronous interrupt timing.\n\n\nlist\nReturns an array of thread objects for all threads that are either runnable or stopped.\n\n\nmain\nReturns the main thread.\n\n\nnew{...}/ new(*args, &proc)/ new(*args){|args|...}\nIt creates a new thread executing the given block.\n\n\npass\nIt gives the thread scheduler a hint to pass execution to another thread. A running thread may or may not switch depending upon the OS.\n\n\npending_interrupt?(error = nil)\nIt returns whether or not the asynchronous queue is empty.\n\n\nstart([args]*){|args|block}\nIt is basically same as ::new method.\n\n\nstop\nIt stops execution of the current thread, putting it into \'sleep\' state and schedules execution of another thread.\n\n\n\nPublic Instance Methods\n\n\nMethod\nDescription\n\n\nthr[sym]\nIt returns the value of a fiber-local variable using either a string or symbol name.\n\n\nthr[sym]=\nIt creates the value of a fiber-local variable using either a string or symbol name.\n\n\nabort_on_exception\nIt returns status of ""abort on exception"" for thr.\n\n\nabort_on_exception=\nWhen set to true, all threads will abort if an exception is raised in this thr.\n\n\nadd_trace_func(proc)\nAdds proc as a handler for tracing.\n\n\nalive?\nIt returns true if thr is running or sleeping.\n\n\nbacktrace\nIt returns current backtrace of target ahead.\n\n\nbacktrace_locations(*args)\nIt returns the execution stack for the target ahead.\n\n\nexit/kill/terminate\nIt terminates thr and executes another thread to run.\n\n\ngroup\nIt returns the ThreadGroup which contains the given thread or returns nil.\n\n\ninspect\nIt dumps the name, id and status of thr to a string.\n\n\njoin\nThe calling thread will suspend execution and run this thr.\n\n\nkey?(sym)\nIt returns true if the given string exists as a fiber-local variable.\n\n\nkeys\nIt returns an array of the name of the fiber-local variables.\n\n\npending_interrupt?(error=nil)\nReturns whether or not the asynchronous queue is empty for the target thread.\n\n\npriority\nIt returns the priority of thr.\n\n\npriority=\nIt sets the priority of thr to integer.\n\n\nkill\nIt works same as exit.\n\n\nraise\nIt raises an exception from the given thread.\n\n\nrun\nIt wakes up thr, making it eligible for scheduling.\n\n\nsafe_level\nIt returns the safe level in effect for thr.\n\n\nset_trace_func(proc)\nIt establishes proc on thr as the handler.\n\n\nstatus\nIt returns the status of thr.\n\n\nstop?\nIt returns true if thr is sleeping or dead.\n\n\nterminate\nIt terminates thr and schedules another thread to run.\n\n\nthread_variable?(key)\nIt returns true if the given string exists as a thread local variable.\n\n\nthread_variable_get(key)\nIt returns the value of a thread local variable that has been set.\n\n\nthread_variable_set(key, value)\nSet a thread local with key to value.\n\n\nthread_variable\nIt returns an array of the thread-local variables.\n\n\nvalue\nIt waits for thr to complete, using join and returns its value.\n\n\nwakeup\nMakes a given thread eligible for scheduling, although it may still remained block on I/O. \n\n\n\n\nNext TopicRuby LDAP\n\n\n\n← prev\nnext →\n\n\n', '\nA new thread is created using thread.new call. It is different from the main thread\'s execution. \n\nThread Initialization\nTo create a new thread Ruby provides three keywords namely, ::new, ::start and ::fork.\nTo start a new thread, associate a block of code with a call to Thread.new, Thread.start or Thread.fork. Thread will be created. The new thread exits when the block exit.\nSyntax:\n\n# Original thread runs\nThread.new {\n  # New thread is created.\n}\n# Original thread runs\n\n\nThread Termination\nThere are different ways to terminate a thread in Ruby. To exit a given thread, class ::kill is used.\nSyntax:\n\nthr = Thread.new { ... }\nThread.kill(thr)\n\n\nRuby Thread Example\n\n#!/usr/bin/ruby \nth = Thread.new do #Here we start a new thread \n  Thread.current[\'counter\']=0 \n  5.times do |i| #loop starts and increases i each time \n    Thread.current[\'counter\']=i \n    sleep 1 \n  end \n  return nil \nend \nwhile th[\'counter\'].to_i < 4  do \n=begin \nth is the long running thread \nand we can access the same variable \nfrom inside the thread here \n=end \n  puts ""Counter is #{th[\'counter\']}"" \n  sleep 0.5 \nend \nputs ""Long running process finished!"" \n\nOutput:\n\n\nThread Lifecycle\nOnce a thread is created, there is no need to start it. It automatically runs when it gets proper CPU resources. The last expression in a block is the value of the thread. If thread has run completely, value method returns the thread value, otherwise value method blocks it and returns when the thread has completed. A number of methods are defined by thread class while running query and manipulate the thread.\nBy calling a thread\'s Thread.join method, you can wait for a particular thread to finish.\n\nThread Exception Handling\nThreads may have some exceptions in them. If exception arises in any thread other than main thread, it depends upon abort_on_exception. By default this option is always false. It means unhandled exception will silently terminate the thread. This can be changed by setting either abort_on_exception = true or $DEBUG to true.\nTo handle exception, you can use class method ::handle_interrupt. It will handle exceptions asynchronously with threads.\n\nThread Variables and Scope\nThreads are created with blocks. A local variable created within a block is accessible to only thread in which this block is present. \nRuby thread class allows thread-local variables to be created and accessed by name. Thread object is treated like a hash, writing elements using []= and reading them back using []. \n\nThread Scheduling\nRuby supports scheduling threads by using ::stop and ::pass methods in a program.\nThe ::stop class method put the current running thread to sleep and schedule the execution of another thread. Once the thread is asleep, instance method wakeup is used to mark thread as eligible for scheduling.\nThe ::pass class method tries to pass execution to another thread. It depends upon the operating system whether the running thread will switch or not.\nThread priority gives a hint to schedule threads according to their priority. The high priority thread is scheduled first. It also depends upon the operating system. A thread can increase or decrease its own priority as the first action it takes.\n\nThread Exclusion\nRuby thread exclusion states that, when two threads share the same data and one of the thread modifies that data, then we need to ensure that no thread should see each others data in an inconsistent state. For example, banking server. Where one thread operates money transfer in accounts and other thread is generating monthly report for the customers.\n\nPublic Class Methods\n\n\nMethod\nDescription\n\n\nabort_on_exception\nIt returns the status of global ""abort on exception"" condition. The default is true. When it is set to true, all threads will abort if an exception is raised in any thread.\n\n\nabort_on_exception=\nWhen it is set to true, all threads will abort if an exception is raised. It returns the new state.\n\n\ncurrent\nIt returns the currently executing thread.\n\n\nexclusive{block}\nIt wraps the block in a single, returning the value of the block.\n\n\nexit\nIt terminates the currently running thread and schedules another thread tro run.\n\n\nkill(thread)\nIt causes the given thread to exit.\n\n\nfork([args]*){|args| block}\nIt is basically same as ::new method.\n\n\nhandle_interrupt(hash){...}\nChanges asynchronous interrupt timing.\n\n\nlist\nReturns an array of thread objects for all threads that are either runnable or stopped.\n\n\nmain\nReturns the main thread.\n\n\nnew{...}/ new(*args, &proc)/ new(*args){|args|...}\nIt creates a new thread executing the given block.\n\n\npass\nIt gives the thread scheduler a hint to pass execution to another thread. A running thread may or may not switch depending upon the OS.\n\n\npending_interrupt?(error = nil)\nIt returns whether or not the asynchronous queue is empty.\n\n\nstart([args]*){|args|block}\nIt is basically same as ::new method.\n\n\nstop\nIt stops execution of the current thread, putting it into \'sleep\' state and schedules execution of another thread.\n\n\n\nPublic Instance Methods\n\n\nMethod\nDescription\n\n\nthr[sym]\nIt returns the value of a fiber-local variable using either a string or symbol name.\n\n\nthr[sym]=\nIt creates the value of a fiber-local variable using either a string or symbol name.\n\n\nabort_on_exception\nIt returns status of ""abort on exception"" for thr.\n\n\nabort_on_exception=\nWhen set to true, all threads will abort if an exception is raised in this thr.\n\n\nadd_trace_func(proc)\nAdds proc as a handler for tracing.\n\n\nalive?\nIt returns true if thr is running or sleeping.\n\n\nbacktrace\nIt returns current backtrace of target ahead.\n\n\nbacktrace_locations(*args)\nIt returns the execution stack for the target ahead.\n\n\nexit/kill/terminate\nIt terminates thr and executes another thread to run.\n\n\ngroup\nIt returns the ThreadGroup which contains the given thread or returns nil.\n\n\ninspect\nIt dumps the name, id and status of thr to a string.\n\n\njoin\nThe calling thread will suspend execution and run this thr.\n\n\nkey?(sym)\nIt returns true if the given string exists as a fiber-local variable.\n\n\nkeys\nIt returns an array of the name of the fiber-local variables.\n\n\npending_interrupt?(error=nil)\nReturns whether or not the asynchronous queue is empty for the target thread.\n\n\npriority\nIt returns the priority of thr.\n\n\npriority=\nIt sets the priority of thr to integer.\n\n\nkill\nIt works same as exit.\n\n\nraise\nIt raises an exception from the given thread.\n\n\nrun\nIt wakes up thr, making it eligible for scheduling.\n\n\nsafe_level\nIt returns the safe level in effect for thr.\n\n\nset_trace_func(proc)\nIt establishes proc on thr as the handler.\n\n\nstatus\nIt returns the status of thr.\n\n\nstop?\nIt returns true if thr is sleeping or dead.\n\n\nterminate\nIt terminates thr and schedules another thread to run.\n\n\nthread_variable?(key)\nIt returns true if the given string exists as a thread local variable.\n\n\nthread_variable_get(key)\nIt returns the value of a thread local variable that has been set.\n\n\nthread_variable_set(key, value)\nSet a thread local with key to value.\n\n\nthread_variable\nIt returns an array of the thread-local variables.\n\n\nvalue\nIt waits for thr to complete, using join and returns its value.\n\n\nwakeup\nMakes a given thread eligible for scheduling, although it may still remained block on I/O. \n\n\n\n\nNext TopicRuby LDAP\n\n\n\n← prev\nnext →\n\n\n', 'Once a thread is created, there is no need to start it. It automatically runs when it gets proper CPU resources. The last expression in a block is the value of the thread. If thread has run completely, value method returns the thread value, otherwise value method blocks it and returns when the thread has completed. A number of methods are defined by thread class while running query and manipulate the thread.', 'Threads may have some exceptions in them. If exception arises in any thread other than main thread, it depends upon abort_on_exception. By default this option is always false. It means unhandled exception will silently terminate the thread. This can be changed by setting either abort_on_exception = true or $DEBUG to true.', 'Ruby thread exclusion states that, when two threads share the same data and one of the thread modifies that data, then we need to ensure that no thread should see each others data in an inconsistent state. For example, banking server. Where one thread operates money transfer in accounts and other thread is generating monthly report for the customers.']","['# Original thread runs', 'Thread.new {', '# New thread is created.', '# Original thread runs', 'thr = Thread.new { ... }', 'Thread.kill(thr)', '#!/usr/bin/ruby', 'th = Thread.new do #Here we start a new thread', ""Thread.current['counter']=0"", '5.times do |i| #loop starts and increases i each time', ""Thread.current['counter']=i"", 'sleep 1', 'return nil', ""while th['counter'].to_i < 4  do"", 'th is the long running thread', 'and we can access the same variable', 'from inside the thread here', 'puts ""Counter is #{th[\'counter\']}""', 'sleep 0.5', 'puts ""Long running process finished!""']",[],"['Method|||Description&&&abort_on_exception|||It returns the status of global ""abort on exception"" condition. The default is true. When it is set to true, all threads will abort if an exception is raised in any thread.&&&abort_on_exception=|||When it is set to true, all threads will abort if an exception is raised. It returns the new state.&&&current|||It returns the currently executing thread.&&&exclusive{block}|||It wraps the block in a single, returning the value of the block.&&&exit|||It terminates the currently running thread and schedules another thread tro run.&&&kill(thread)|||It causes the given thread to exit.&&&fork([args]*){|args| block}|||It is basically same as ::new method.&&&handle_interrupt(hash){...}|||Changes asynchronous interrupt timing.&&&list|||Returns an array of thread objects for all threads that are either runnable or stopped.&&&main|||Returns the main thread.&&&new{...}/ new(*args, &proc)/ new(*args){|args|...}|||It creates a new thread executing the given block.&&&pass|||It gives the thread scheduler a hint to pass execution to another thread. A running thread may or may not switch depending upon the OS.&&&pending_interrupt?(error = nil)|||It returns whether or not the asynchronous queue is empty.&&&start([args]*){|args|block}|||It is basically same as ::new method.&&&stop|||It stops execution of the current thread, putting it into \'sleep\' state and schedules execution of another thread.', 'Method|||Description&&&thr[sym]|||It returns the value of a fiber-local variable using either a string or symbol name.&&&thr[sym]=|||It creates the value of a fiber-local variable using either a string or symbol name.&&&abort_on_exception|||It returns status of ""abort on exception"" for thr.&&&abort_on_exception=|||When set to true, all threads will abort if an exception is raised in this thr.&&&add_trace_func(proc)|||Adds proc as a handler for tracing.&&&alive?|||It returns true if thr is running or sleeping.&&&backtrace|||It returns current backtrace of target ahead.&&&backtrace_locations(*args)|||It returns the execution stack for the target ahead.&&&exit/kill/terminate|||It terminates thr and executes another thread to run.&&&group|||It returns the ThreadGroup which contains the given thread or returns nil.&&&inspect|||It dumps the name, id and status of thr to a string.&&&join|||The calling thread will suspend execution and run this thr.&&&key?(sym)|||It returns true if the given string exists as a fiber-local variable.&&&keys|||It returns an array of the name of the fiber-local variables.&&&pending_interrupt?(error=nil)|||Returns whether or not the asynchronous queue is empty for the target thread.&&&priority|||It returns the priority of thr.&&&priority=|||It sets the priority of thr to integer.&&&kill|||It works same as exit.&&&raise|||It raises an exception from the given thread.&&&run|||It wakes up thr, making it eligible for scheduling.&&&safe_level|||It returns the safe level in effect for thr.&&&set_trace_func(proc)|||It establishes proc on thr as the handler.&&&status|||It returns the status of thr.&&&stop?|||It returns true if thr is sleeping or dead.&&&terminate|||It terminates thr and schedules another thread to run.&&&thread_variable?(key)|||It returns true if the given string exists as a thread local variable.&&&thread_variable_get(key)|||It returns the value of a thread local variable that has been set.&&&thread_variable_set(key, value)|||Set a thread local with key to value.&&&thread_variable|||It returns an array of the thread-local variables.&&&value|||It waits for thr to complete, using join and returns its value.&&&wakeup|||Makes a given thread eligible for scheduling, although it may still remained block on I/O. ']",[]
34,['Ruby LDAP'],"['Net::LDAP for Ruby is also written as net::ldap. It stands for Lightweight Directory Access Protocol. It is an internet standard protocol used to access directory servers. Its basic search unit is the entity, which corresponds to a person or other domain-specific object. A directory which supports LDAP protocol, typically stores information about a number of entities.\nRuby LDAP Principals\nThe LDAP servers are generally used to access information about people, but sometimes it is also used for items such as computers, printers and other resources.\n\nRuby LDAP Distinguished Names\nIn LDAP servers, an entity is uniquely identified by a globally-unique text string called as Distinguished name. It is like a DNS hostname, a DN is a ""flattened"" text representation of a string of tree nodes.\nYou can query an LDAP-enabled directory for information about the entity if you know the DN of a person or other entity. Otherwise, you can also see the list of DNs matching a set of criteria that you supply.\n\nRuby LDAP Attributes\nIn LDAP, information about the entity is stored as a set of Attributes. An attribute is a text string which is associated with zero or more values. Most LDAP-enabled directories contain a well standardized range of attributes and constrain their values according to standard values.\nAn example for attribute is sn. It stands for ""surname"". This attribute is generally used to store a person\'s surname. Most of the directories follow standard convention that an entity sn attribute will have exactly one value.\n\nRuby LDAP Tree-Base\nJust like DNS, LDAP assumes that each directory server contains authoritative attribute data for a set of DNs corresponding to a specific sub-tree of global directory tree. This subtree is configured into directory server when it is created. You can\'t query in most of the servers as they will not allow, unless you specify a correct tree-base.\n\nRuby LDAP Versions\nRuby LDAP veraions are stub, discuss v2 and v3.\n\nRuby LDAP Operations\nRuby LDAP operations are: \n\n#bind : The #bind operation provides a user\'s authentication credentials to a server. They can provide different credentials for authentication but most of the directories ask for username and password only. \n#add : The #add operation specifies a new DN and an innitial set of attribute values. On the success of operation, a new entity with the corresponding DN and attributes is added to directory.\n#delete : The #delete operation specifies an entity DN. On the success of operation, the entity and all its attributes is removed from directory. \n#rename : The #rename operation is also called #modify_rdn. In earlier LDAP versions the only way to change DN of an entity was to delete the whole entity and add it again with a different DN. But with the introduction of #rename operation in version 3, you can change the DN without discarding its attribute values. \n#search : The #search operation is called to identify a directory by specifying a treebase, search filters and list of attribute values. Multiple filters can be joined together with NOT, AND and OR operators. \n#modify : The #modify operation specifies an entity DN and a list of attribute operations. It is used to change the attribute values stored in directory for a particular entity. It may add or delete attributes or change attributes by adding or deleting from their values. There are three methods to modify attribute values: #add_attribute, #delete_attribute and #replace_attreibute.\n\n\nInstalling Net::LDAP\nThe net::LDAP is a pure Ruby library. It does not require any external library. RubyGems version of Net::LDAP can be installed from usual sources.\nRequirements\nThe Net::LDAP requires Ruby 2.0.0 interpreter or better.\nTo install RubyGems version of Net::LDAP, write the following command:\n\ngem install net-ldap\n\n\nUsing Ruby net::LDAP\nThe Net::LDAP functionality start by requiring the library.\n\nrequire \'net/ldap\'\n\nIf you have installed Gem version, then you need following library.\n\nrequire \'rubygems\'\nrequire \'net/ldap\'\n\n\nCredentials for LDAP connection\nThe Net::LDAP connection is a two step process.\nStep 1 : Instantiating Net:LDAP object\nMost of the Net:LDAP operations start by instantiating Net:LDAP object. The constructor takes arguments specifying address and port of LDAP server.\nSyntax:\n\nLDAP::Conn.new(host=\'localhost\', port=LDAP_PORT)\n\nStep 1 : Authentication (binding)\nHere we need to specify username and password which we will use for the rest of the session.\nSyntax:\n\nconn.bind(dn=nil, password=nil, method=LDAP::LDAP_AUTH_SIMPLE)do\n....\nend\n\nNow we can perform different operations like search, modify or delete inside block of bind method with proper permissions.\n\nAdding a new LDAP entry\nThe following method adds a new entry to remote LDAP server.\n\nadd(args) => object\n\nStep 1: Creating LDAP::Mod object\nThe LDAP::Mod object need to be passed to conn.add method to create an entry.\nSyntax:\n\nMod.new(mod_type, attr, vals)\n\nmod_type : You can add one or more option here like LDAP_MOD_ADD, LDAP_MOD_DELETE, LDAP_MOD_REPLACE.\nattr : It is the name of the attribute.\nvals : It is an array of values. \nStep 2: Calling conn.add Method\nAfter creating LDAP::Mod object, we need to call conn.add method.\nSyntax:\n\nconn.add(dn, attrs)\n\nExample:\n\n#/usr/bin/ruby -w \n\nrequire \'rubygems\' \nrequire \'net/ldap\' \n\n$HOST =    \'localhost\' \n$PORT =    LDAP::LDAP_PORT \n$SSLPORT = LDAP::LDAPS_PORT \n\nconn = LDAP::Conn.new($HOST, $PORT) \nconn.bind(\'cn=root, dc=localhost, dc=localdomain\',\'secret\') \n\nconn.perror(""bind"") \nentry1 = [ \n  LDAP.mod(LDAP::LDAP_MOD_REPLACE, \'sn\', [\'Steele\']), \n] \n\nbegin \n  conn.modify(""cn=Anna williams, dc=localhost, dc=localdomain"", entry1) \nrescue LDAP::ResultError \n  conn.perror(""modify"") \n  exit \nend \nconn.perror(""modify"") \nconn.unbind\n\nThe above example will modify the surname in the previous example.\n\nDeleting an LDAP entry\nThe delete method will delete an entry.\nSyntax:\n\nconn.delete(dn)\n\n\n#/usr/bin/ruby -w \n\nrequire \'rubygems\' \nrequire \'net/ldap\' \n\n$HOST =   \'localhost\' \n$PORT =   LDAP::LDAP_PORT \n$SSLPORT = LDAP::LDAPS_PORT \n\nconn = LDAP::Conn.new($HOST, $PORT) \nconn.bind(\'cn=root, dc=localhost, dc=localdomain\',\'secret\') \n\nconn.perror(""bind"") \nbegin \n  conn.delete(""cn=Anna Steele, dc=localhost, dc=localdomain"") \nrescue LDAP::ResultError \n  conn.perror(""delete"") \n  exit \nend \nconn.perror(""delete"") \nconn.unbind\n\n\nSearch in LDAP\nThere are three different modes to perform search with search method.\n\nLDAP_SCORE_BASEM : It will search only the base mode.\nLDAP_SCOPE_ONLEVEL : It will search all children of the base mode.\nLDAP_SCOPE_SUBTREE : It will search whole subtree including the base node.\n\nExample:\n\n#/usr/bin/ruby -w \n\nrequire \'rubygems\' \nrequire \'net/ldap\' \n\n$HOST =    \'localhost\' \n$PORT =    LDAP::LDAP_PORT \n$SSLPORT = LDAP::LDAPS_PORT \n\nbase = \'dc=localhost,dc=localdomain\' \nscope = LDAP::LDAP_SCOPE_SUBTREE \nfilter = \'(objectclass=java)\' \nattrs = [\'sn\', \'cn\'] \n\nconn = LDAP::Conn.new($HOST, $PORT) \nconn.bind(\'cn=root, dc=localhost, dc=localdomain\',\'secret\') \n\nconn.perror(""bind"") \nbegin \n  conn.search(base, scope, filter, attrs) { |entry| \n     # print distinguished name \n     p entry.dn \n     # print all attribute names \n     p entry.attrs \n     # print values of attribute \'sn\' \n     p entry.vals(\'sn\') \n     # print entry as Hash \n     p entry.to_hash \n  } \nrescue LDAP::ResultError \n  conn.perror(""search"") \n  exit \nend \nconn.perror(""search"") \nconn.unbind \n\nIn this example, we will search the whole subtree of entry. \nIn the last parameter of search, you can specify any attributes. If nil is passed, all attributes are returned same as ""SELECT∗"" in relational database.\n\n\nNext TopicRuby XML\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/ruby-xml', 'https://www.javatpoint.com/ruby-multithreading', 'https://www.javatpoint.com/ruby-xml', 'https://www.javatpoint.com/ruby-multithreading', 'https://www.javatpoint.com/ruby-xml']",[],[],"['Ruby LDAP Principals', 'Ruby LDAP Distinguished Names', 'Ruby LDAP Attributes', 'Ruby LDAP Tree-Base', 'Ruby LDAP Versions', 'Ruby LDAP Operations', 'Installing Net::LDAP', 'Using Ruby net::LDAP', 'Credentials for LDAP connection', 'Adding a new LDAP entry', 'Deleting an LDAP entry', 'Search in LDAP']",[],[],"['Ruby LDAP veraions are stub, discuss v2 and v3.', 'Ruby LDAP operations are: ', 'The net::LDAP is a pure Ruby library. It does not require any external library. RubyGems version of Net::LDAP can be installed from usual sources.', 'Requirements', 'The Net::LDAP requires Ruby 2.0.0 interpreter or better.', 'To install RubyGems version of Net::LDAP, write the following command:', 'The Net::LDAP functionality start by requiring the library.', 'If you have installed Gem version, then you need following library.', 'The Net::LDAP connection is a two step process.', 'Step 1 : Instantiating Net:LDAP object', 'Most of the Net:LDAP operations start by instantiating Net:LDAP object. The constructor takes arguments specifying address and port of LDAP server.', 'Step 1 : Authentication (binding)', 'Here we need to specify username and password which we will use for the rest of the session.', 'Now we can perform different operations like search, modify or delete inside block of bind method with proper permissions.', 'The following method adds a new entry to remote LDAP server.', 'Step 1: Creating LDAP::Mod object', 'The LDAP::Mod object need to be passed to conn.add method to create an entry.', 'mod_type : You can add one or more option here like LDAP_MOD_ADD, LDAP_MOD_DELETE, LDAP_MOD_REPLACE.', 'attr : It is the name of the attribute.', 'vals : It is an array of values. ', 'Step 2: Calling conn.add Method', 'After creating LDAP::Mod object, we need to call conn.add method.', 'The above example will modify the surname in the previous example.', 'The delete method will delete an entry.', 'There are three different modes to perform search with search method.', 'In this example, we will search the whole subtree of entry. ']","['The LDAP servers are generally used to access information about people, but sometimes it is also used for items such as computers, printers and other resources.', 'In LDAP servers, an entity is uniquely identified by a globally-unique text string called as Distinguished name. It is like a DNS hostname, a DN is a ""flattened"" text representation of a string of tree nodes.', 'You can query an LDAP-enabled directory for information about the entity if you know the DN of a person or other entity. Otherwise, you can also see the list of DNs matching a set of criteria that you supply.', 'An example for attribute is sn. It stands for ""surname"". This attribute is generally used to store a person\'s surname. Most of the directories follow standard convention that an entity sn attribute will have exactly one value.', 'In the last parameter of search, you can specify any attributes. If nil is passed, all attributes are returned same as ""SELECT∗"" in relational database.']","['In LDAP, information about the entity is stored as a set of Attributes. An attribute is a text string which is associated with zero or more values. Most LDAP-enabled directories contain a well standardized range of attributes and constrain their values according to standard values.', ""Just like DNS, LDAP assumes that each directory server contains authoritative attribute data for a set of DNs corresponding to a specific sub-tree of global directory tree. This subtree is configured into directory server when it is created. You can't query in most of the servers as they will not allow, unless you specify a correct tree-base.""]","['gem install net-ldap', ""require 'net/ldap'"", ""require 'rubygems'"", ""require 'net/ldap'"", ""LDAP::Conn.new(host='localhost', port=LDAP_PORT)"", 'conn.bind(dn=nil, password=nil, method=LDAP::LDAP_AUTH_SIMPLE)do', 'add(args) => object', 'Mod.new(mod_type, attr, vals)', 'conn.add(dn, attrs)', '#/usr/bin/ruby -w', ""require 'rubygems'"", ""require 'net/ldap'"", ""$HOST =    'localhost'"", '$PORT =    LDAP::LDAP_PORT', '$SSLPORT = LDAP::LDAPS_PORT', 'conn = LDAP::Conn.new($HOST, $PORT)', ""conn.bind('cn=root, dc=localhost, dc=localdomain','secret')"", 'conn.perror(""bind"")', 'entry1 = [', ""LDAP.mod(LDAP::LDAP_MOD_REPLACE, 'sn', ['Steele']),"", 'conn.modify(""cn=Anna williams, dc=localhost, dc=localdomain"", entry1)', 'rescue LDAP::ResultError', 'conn.perror(""modify"")', 'conn.perror(""modify"")', 'conn.unbind', 'conn.delete(dn)', '#/usr/bin/ruby -w', ""require 'rubygems'"", ""require 'net/ldap'"", ""$HOST =   'localhost'"", '$PORT =   LDAP::LDAP_PORT', '$SSLPORT = LDAP::LDAPS_PORT', 'conn = LDAP::Conn.new($HOST, $PORT)', ""conn.bind('cn=root, dc=localhost, dc=localdomain','secret')"", 'conn.perror(""bind"")', 'conn.delete(""cn=Anna Steele, dc=localhost, dc=localdomain"")', 'rescue LDAP::ResultError', 'conn.perror(""delete"")', 'conn.perror(""delete"")', 'conn.unbind', '#/usr/bin/ruby -w', ""require 'rubygems'"", ""require 'net/ldap'"", ""$HOST =    'localhost'"", '$PORT =    LDAP::LDAP_PORT', '$SSLPORT = LDAP::LDAPS_PORT', ""base = 'dc=localhost,dc=localdomain'"", 'scope = LDAP::LDAP_SCOPE_SUBTREE', ""filter = '(objectclass=java)'"", ""attrs = ['sn', 'cn']"", 'conn = LDAP::Conn.new($HOST, $PORT)', ""conn.bind('cn=root, dc=localhost, dc=localdomain','secret')"", 'conn.perror(""bind"")', 'conn.search(base, scope, filter, attrs) { |entry|', '# print distinguished name', 'p entry.dn', '# print all attribute names', 'p entry.attrs', ""# print values of attribute 'sn'"", ""p entry.vals('sn')"", '# print entry as Hash', 'p entry.to_hash', 'rescue LDAP::ResultError', 'conn.perror(""search"")', 'conn.perror(""search"")', 'conn.unbind']",[],[],"[""|||#bind : The #bind operation provides a user's authentication credentials to a server. They can provide different credentials for authentication but most of the directories ask for username and password only. |||#add : The #add operation specifies a new DN and an innitial set of attribute values. On the success of operation, a new entity with the corresponding DN and attributes is added to directory.|||#delete : The #delete operation specifies an entity DN. On the success of operation, the entity and all its attributes is removed from directory. |||#rename : The #rename operation is also called #modify_rdn. In earlier LDAP versions the only way to change DN of an entity was to delete the whole entity and add it again with a different DN. But with the introduction of #rename operation in version 3, you can change the DN without discarding its attribute values. |||#search : The #search operation is called to identify a directory by specifying a treebase, search filters and list of attribute values. Multiple filters can be joined together with NOT, AND and OR operators. |||#modify : The #modify operation specifies an entity DN and a list of attribute operations. It is used to change the attribute values stored in directory for a particular entity. It may add or delete attributes or change attributes by adding or deleting from their values. There are three methods to modify attribute values: #add_attribute, #delete_attribute and #replace_attreibute.||||||LDAP_SCORE_BASEM : It will search only the base mode.|||LDAP_SCOPE_ONLEVEL : It will search all children of the base mode.|||LDAP_SCOPE_SUBTREE : It will search whole subtree including the base node.|||""]"
35,['Ruby XML (REXML)'],['XML is eXtensible Markup Language like HTML. It allows programmers to develop applications that can be read by other applications irrespective of operating system and developmental language used.'],"['https://www.javatpoint.com/ruby-xpath-and-xslt', 'https://www.javatpoint.com/ruby-ldap', 'https://www.javatpoint.com/ruby-xpath-and-xslt', 'https://www.javatpoint.com/ruby-ldap', 'https://www.javatpoint.com/ruby-xpath-and-xslt']","['https://static.javatpoint.com/ruby/images/ruby-xml1.png', 'https://static.javatpoint.com/ruby/images/ruby-xml2.png', 'https://static.javatpoint.com/ruby/images/ruby-xml3.png']",[],"['REXML features:', 'Parsing XML and accessing elements', 'XML with ""Here Document""', 'Ruby XML DOM-Like Parsing', 'Ruby XML SAX-Like Parsing']",[],[],"['It keeps track of small to medium amounts of data without any SQL based technique in backend.', ""Let's start with parsing an XML document:"", 'In the above code, line 3 parses the supplied file.', 'A here Document is a way to specify a text block, preserving line breaks, whitespaces or identation with text.', 'A here Document is constructed using a command followed by ""<<"" followed by a token string.', 'In Ruby, there should be no space between ""<<"" and token string. ', 'Here, we use here Document info. All the characters including newlines between <<EOF and EOF are part of info.', 'For XML parsing examples, we will use following XML file code as input:', 'file trial.xml', 'We will parse our XML data in tree fashion. The above file trial.xml code is taken as input.', 'It is advisable that do not use SAX-like parsing for a small file.']","['REXML was inspired by Electric XML library for Java. Its API is easy to use, small size and have followed the Ruby methodology for method naming and code flow. ', ""It supports both tree and stream document parsing. Steam parsing is 1.5 times faster than tree parsing. However, in stream parsing you don't get access to some features like XPath."", ""In the above code, the require statement loads the REXML library. Then include REXML indicates that we don't have to use names like REXML::Document. We have created trial.xml file. Document is shown on the screen. "", 'The Document.new method takes IO, String object or Document as its argument. This argument specifies the source from which XML document has to be read.', 'If a Document constructor takes a Document as argument, all its element nodes are cloned to new Document object. If the constructor takes a String argument, string will be expected to contain an XML document. ', 'We will parse our XML data in stream fashion. The above file trial.xml code is taken as input. Here, we will define a listener class whose methods will be targeted for callbacks from the parser.']","['REXML is a pure Ruby XML processor. It represents a full XML document including PIs, doctype, etc. An XML document has a single child that can be accessed by root(). If you want to have an XML declaration for a created document, you must add one. REXML documents do not write a default declaration for you. ']","['require ""rexml/document""', 'file = File.new( ""trial.xml"" )', 'doc = REXML::Document.new file', ""require 'rexml/document'"", 'include REXML', 'file = File.new(""trial.xml"")', 'doc = Document.new(file)', 'puts docs', '#!/usr/bin/env ruby', ""require 'rexml/document'"", 'include REXML', 'info = <', 'Caroline', '9820 St.', 'Seattle', '9854126575', 'document = Document.new( info )', 'puts document', '#!/usr/bin/ruby -w', ""require 'rexml/document'"", 'include REXML', 'xmlfile = File.new(""trial.xml"")', 'xmldoc = Document.new(xmlfile)', '# Now get the root element', 'root = xmldoc.root', 'puts ""Root element : "" + root.attributes[""shelf""]', '# This will output all the cloth titles.', 'xmldoc.elements.each(""collection/clothing""){', '|e| puts ""cloth Title : "" + e.attributes[""title""]', '# This will output all the cloth types.', 'xmldoc.elements.each(""collection/clothing/type"") {', '|e| puts ""cloth Type : "" + e.text', '# This will output all the cloth description.', 'xmldoc.elements.each(""collection/clothing/description"") {', '|e| puts ""cloth Description : "" + e.text', '#!/usr/bin/ruby -w', ""require 'rexml/document'"", 'include REXML', 'xmlfile = File.new(""trial.xml"")', 'xmldoc = Document.new(xmlfile)', '# Now get the root element', 'root = xmldoc.root', 'puts ""Root element : "" + root.attributes[""shelf""]', '# This will output all the cloth titles.', 'xmldoc.elements.each(""collection/clothing""){', '|e| puts ""cloth Title : "" + e.attributes[""title""]', '# This will output all the cloth types.', 'xmldoc.elements.each(""collection/clothing/type"") {', '|e| puts ""cloth Type : "" + e.text', '# This will output all the cloth description.', 'xmldoc.elements.each(""collection/clothing/description"") {', '|e| puts ""cloth Description : "" + e.text', '#!/usr/bin/ruby -w', ""require 'rexml/document'"", ""require 'rexml/streamlistener'"", 'include REXML', 'class MyListener', 'include REXML::StreamListener', 'def tag_start(*args)', 'puts ""tag_start: #{args.map {|x| x.inspect}.join(\', \')}""', 'def text(data)', 'return if data =~ /^\\w*$/     # whitespace only', 'abbrev = data[0..40] + (data.length > 40 ? ""..."" : """")', 'puts ""  text   :   #{abbrev.inspect}""', 'list = MyListener.new', 'xmlfile = File.new(""trial.xml"")', 'Document.parse_stream(xmlfile, list)']",[],[],"['|||It is written 100 percent in Ruby.|||It contains less than 2000 lines of code, hence, lighter in weight.|||Its methods and classes are easy to understand.|||It is shipped with Ruby installation. No need to install it separately.|||It is used for both DOM and SAX parsing.|||']"
36,['Ruby XPath and XSLT'],"['Ruby XPath is a language to find information in an XML file. It is an alternative to view XML file. It is used to navigate through elements and attributes in an XML document, treating that document as a logical ordered tree.']","['https://www.javatpoint.com/ruby-interview-questions', 'https://www.javatpoint.com/ruby-xml', 'https://www.javatpoint.com/ruby-interview-questions', 'https://www.javatpoint.com/ruby-xml', 'https://www.javatpoint.com/ruby-interview-questions']",['https://static.javatpoint.com/ruby/images/ruby-xpath-and-xslt1.png'],[],"['Ruby XPath', 'Ruby XSLT']",[],[],"['Ruby XPath is very useful to get relevant information and attributes from XML file. It takes tree-based parsing. ', 'Ruby XSLT is a simple class based on libxml and libxslt. There are two XSLT parsers available for Ruby.', 'It is freely distributable according to the terms of GNU. This program is distributed without any warranty.', 'Ruby-Sablotron', 'It is mainly written for Linux operating system and is written by Masayoshi Takahashi.', 'It requires the following libraries:', 'To use XSLT4R within an application, you need to include XSLT and input the parameters you need.']","['It is written by Michael Neumann. It uses a simple command line interface and it can be alternatively used within a third-party application to transform an XML document.', 'XSLT4R needs XMLScan to operate, which is included within the XSLT4R archieve. These modules need to be installed using standard Ruby installation method.']",[],"['#!/usr/bin/ruby -w', ""require 'rexml/document'"", 'include REXML', 'xmlfile = File.new(""trial.xml"")', 'xmldoc = Document.new(xmlfile)', '# Info for the first cloth found', 'clothing = XPath.first(xmldoc, ""//clothing"")', 'p clothing', '# Print out all the cloth types', 'XPath.each(xmldoc, ""//type"") { |e| puts e.text }', '# Get an array of all of the cloth brands.', 'names = XPath.match(xmldoc, ""//brand"").map {|x| x.text }', 'ruby xslt.rb stylesheet.xsl document.xml [arguments]']",[],[],['|||Ruby-Sablotron|||XSLT4R||||||Sablot|||Iconv|||Expat|||']
