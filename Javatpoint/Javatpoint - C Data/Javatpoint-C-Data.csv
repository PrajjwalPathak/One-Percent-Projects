,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['C Programming Language Tutorial'],"['C language Tutorial with programming approach for beginners and professionals, helps you to understand the C language tutorial easily. Our C tutorial explains each topic with programs.']","['https://www.javatpoint.com/history-of-c-language', 'https://www.javatpoint.com/https://training.javatpoint.com/c-cpp-training.jsp', 'https://www.javatpoint.com/c-array', 'https://www.javatpoint.com/c-strings', 'https://www.javatpoint.com/functions-in-c', 'https://www.javatpoint.com/file-handling-in-c', 'https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/history-of-c-language', 'https://www.javatpoint.com/features-of-c-language', 'https://www.javatpoint.com/how-to-install-c', 'https://www.javatpoint.com/first-c-program', 'https://www.javatpoint.com/flow-of-c-program', 'https://www.javatpoint.com/printf-scanf', 'https://www.javatpoint.com/variables-in-c', 'https://www.javatpoint.com/data-types-in-c', 'https://www.javatpoint.com/keywords-in-c', 'https://www.javatpoint.com/c-operators', 'https://www.javatpoint.com/comments-in-c', 'https://www.javatpoint.com/escape-sequence-in-c', 'https://www.javatpoint.com/constants-in-c', 'https://www.javatpoint.com//test/c-fundamental-1', 'https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/c-switch', 'https://www.javatpoint.com/c-loop', 'https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/while-loop-in-c', 'https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/c-break', 'https://www.javatpoint.com/c-continue', 'https://www.javatpoint.com/c-goto', 'https://www.javatpoint.com/type-casting-in-c', 'https://www.javatpoint.com//test/c-control-statements-1', 'https://www.javatpoint.com/functions-in-c', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-c', 'https://www.javatpoint.com/recursion-in-c', 'https://www.javatpoint.com/storage-classes-in-c', 'https://www.javatpoint.com//test/c-functions-1', 'https://www.javatpoint.com/c-array', 'https://www.javatpoint.com/two-dimensional-array-in-c', 'https://www.javatpoint.com/passing-array-to-function-in-c', 'https://www.javatpoint.com//test/c-array-1', 'https://www.javatpoint.com/c-pointers', 'https://www.javatpoint.com/c-pointer-to-pointer', 'https://www.javatpoint.com/pointer-arithmetic-in-c', 'https://www.javatpoint.com//test/c-pointers-1', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/c-strings', 'https://www.javatpoint.com/c-gets-puts', 'https://www.javatpoint.com/c-string-functions', 'https://www.javatpoint.com/c-strlen', 'https://www.javatpoint.com/c-strcpy', 'https://www.javatpoint.com/c-strcat', 'https://www.javatpoint.com/c-strcmp', 'https://www.javatpoint.com/c-strrev', 'https://www.javatpoint.com/c-strlwr', 'https://www.javatpoint.com/c-strupr', 'https://www.javatpoint.com/c-strstr', 'https://www.javatpoint.com//test/c-string-1', 'https://www.javatpoint.com/c-math', 'https://www.javatpoint.com/structure-in-c', 'https://www.javatpoint.com/array-of-structures-in-c', 'https://www.javatpoint.com/nested-structure-in-c', 'https://www.javatpoint.com/c-union', 'https://www.javatpoint.com//test/c-structure-union-enums-1', 'https://www.javatpoint.com/file-handling-in-c', 'https://www.javatpoint.com/fprintf-fscanf-in-c', 'https://www.javatpoint.com/fputc-fgetc-in-c', 'https://www.javatpoint.com/fputs-fgets-in-c', 'https://www.javatpoint.com/fseek-in-c', 'https://www.javatpoint.com/rewind-in-c', 'https://www.javatpoint.com/ftell-in-c', 'https://www.javatpoint.com/c-preprocessor', 'https://www.javatpoint.com/c-macros', 'https://www.javatpoint.com/c-preprocessor-include', 'https://www.javatpoint.com/c-preprocessor-define', 'https://www.javatpoint.com/c-preprocessor-undef', 'https://www.javatpoint.com/c-preprocessor-ifdef', 'https://www.javatpoint.com/c-preprocessor-ifndef', 'https://www.javatpoint.com/c-preprocessor-if', 'https://www.javatpoint.com/c-preprocessor-else', 'https://www.javatpoint.com/c-preprocessor-error', 'https://www.javatpoint.com/c-preprocessor-pragma', 'https://www.javatpoint.com//test/c-preprocessor-1', 'https://www.javatpoint.com/command-line-arguments-in-c', 'https://www.javatpoint.com/test/c-programming', 'https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/fibonacci-series-in-c', 'https://www.javatpoint.com/prime-number-program-in-c', 'https://www.javatpoint.com/palindrome-program-in-c', 'https://www.javatpoint.com/factorial-program-in-c', 'https://www.javatpoint.com/armstrong-number-in-c', 'https://www.javatpoint.com/sum-of-digits-program-in-c', 'https://www.javatpoint.com/c-program-to-reverse-number', 'https://www.javatpoint.com/c-program-to-swap-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/c-program-to-print-hello-without-semicolon', 'https://www.javatpoint.com/assembly-program-in-c', 'https://www.javatpoint.com/c-program-without-main', 'https://www.javatpoint.com/matrix-multiplication-in-c', 'https://www.javatpoint.com/c-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/c-program-to-convert-number-in-characters', 'https://www.javatpoint.com/c-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/c-program-to-print-number-triangle', 'https://www.javatpoint.com/c-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com//test/c-programming', 'https://www.javatpoint.com//test/c-fundamental-1', 'https://www.javatpoint.com//test/c-fundamental-2', 'https://www.javatpoint.com//test/c-fundamental-3', 'https://www.javatpoint.com//test/c-fundamental-4', 'https://www.javatpoint.com//test/c-control-statements-1', 'https://www.javatpoint.com//test/c-control-statements-2', 'https://www.javatpoint.com//test/c-control-statements-3', 'https://www.javatpoint.com//test/c-control-statements-4', 'https://www.javatpoint.com//test/c-functions-1', 'https://www.javatpoint.com//test/c-functions-2', 'https://www.javatpoint.com//test/c-functions-3', 'https://www.javatpoint.com//test/c-functions-4', 'https://www.javatpoint.com//test/c-array-1', 'https://www.javatpoint.com//test/c-array-2', 'https://www.javatpoint.com//test/c-array-3', 'https://www.javatpoint.com//test/c-array-4', 'https://www.javatpoint.com//test/c-pointers-1', 'https://www.javatpoint.com//test/c-pointers-2', 'https://www.javatpoint.com//test/c-pointers-3', 'https://www.javatpoint.com//test/c-pointers-4', 'https://www.javatpoint.com//test/c-string-1', 'https://www.javatpoint.com//test/c-string-2', 'https://www.javatpoint.com//test/c-string-3', 'https://www.javatpoint.com//test/c-string-4', 'https://www.javatpoint.com//test/c-structure-union-enums-1', 'https://www.javatpoint.com//test/c-structure-union-enums-2', 'https://www.javatpoint.com//test/c-structure-union-enums-3', 'https://www.javatpoint.com//test/c-structure-union-enums-4', 'https://www.javatpoint.com//test/c-preprocessor-1', 'https://www.javatpoint.com//test/c-preprocessor-2', 'https://www.javatpoint.com//test/c-preprocessor-3', 'https://www.javatpoint.com//test/c-preprocessor-4', 'https://www.javatpoint.com/c-interview-questions', 'https://www.javatpoint.com/history-of-c-language', 'https://www.javatpoint.com/history-of-c-language']",['https://www.javatpoint.com/corebasic/images/c-training.png'],[],"['1) C as a mother language', '2) C as a system programming language', '3) C as a procedural language', '4) C as a structured programming language', '5) C as a mid-level programming language', 'C Program', 'C Programming Index', 'Prerequisite', 'Audience', 'Problem']",[],[],"['C programming is considered as the base for other programming languages, that is why it is known as mother language.', 'It can be defined by the following ways:', 'It provides the core concepts like the array, strings, functions, file handling, etc. that are being used in many languages like C++, Java, C#, etc.', ""It can't be used for internet programming like Java, .Net, PHP, etc."", 'A procedural language breaks the program into functions, data structures, etc.', 'C is a procedural language. In C, variables and function prototypes must be declared before being used.', 'In the C language, we break the program into parts using functions. It makes the program easier to understand and modify.', 'A Low-level language is specific to one machine, i.e., machine dependent. It is machine dependent, fast to run. But it is not easy to understand.', 'A High-Level language is not specific to one machine, i.e., machine independent. It is easy to understand.', 'In this tutorial, all C programs are given with C compiler so that you can quickly change the C program code.', 'File: main.c', 'A detailed description of above program is given in next chapters.', 'C Tutorial', 'C Control Statements', 'C Functions', 'C Pointers', 'C Dynamic Memory', 'C Structure Union', 'C File Handling', 'C Preprocessor', 'C Command Line', 'C Programming Test', 'C Programs', 'C Programming Test', 'C Fundamental Test', 'C Control Test', 'C Function Test', 'C Array Test', 'C Pointers Test', 'C String Test', 'C Structure Test', 'C Preprocessor Test', 'C Interview', 'Before learning C Programming, you must have the basic knowledge of Computer Fundamental.', 'Our C Programming tutorial is designed to help beginners and professionals.', 'We assure that you will not find any mistake in this C Language Tutorial. But if there is any mistake, please post the problem in the contact form.']","['The C Language is developed by Dennis Ritchie for creating system applications that directly interact with the hardware devices such as drivers, kernels, etc.', 'A procedure is known as a function, method, routine, subroutine, etc. A procedural language specifies a series of steps for the program to solve the problem.', 'A structured programming language is a subset of the procedural language. Structure means to break a program into parts or blocks so that it may be easy to understand. ']","['C language is considered as the mother language of all the modern programming languages because most of the compilers, JVMs, Kernels, etc. are written in C language, and most of the programming languages follow C syntax, for example, C++, Java, C#, etc.', 'A system programming language is used to create system software. C language is a system programming language because it can be used to do low-level programming (for example driver and kernel). It is generally used to create hardware devices, OS, drivers, kernels, etc. For example, Linux kernel is written in C.', 'C is considered as a middle-level language because it supports the feature of both low-level and high-level languages. C language program is converted into assembly code, it supports pointer arithmetic (low-level), but it is machine independent (a feature of high-level).']","['#include', 'int main() {', 'printf(""Hello C Programming\\n"");', 'return 0;']",[],[],"['|||What is C Language|||History of C |||Features of C|||How to install C|||First C Program|||Flow of C Program|||printf scanf|||Variables in C|||Data Types in c|||Keywords in c|||C Operators|||C Comments|||C Escape Sequence|||Constants in C|||C Fundamental Test||||||C if-else|||C switch|||C Loops|||C do-while loop|||C while loop|||C for loop|||C break|||C continue|||C goto|||Type Casting|||C Control Statement Test||||||What is function|||Call: Value & Reference|||Recursion in c|||Storage Classes|||C Functions Test||||||1-D Array|||2-D Array|||Array to Function|||C Array Test||||||C Pointers|||C Pointer to Pointer|||C Pointer Arithmetic|||C Pointers Test||||||Dynamic memory||||||String in C|||C gets() & puts()|||C String Functions|||C strlen()|||C strcpy()|||C strcat()|||C strcmp()|||C strrev()|||C strlwr()|||C strupr()|||C strstr()|||C String Test||||||C Math Functions||||||C Structure|||C Array of Structures|||C Nested Structure|||C Union|||C Structure Test||||||C File Handling|||C fprintf() fscanf()|||C fputc() fgetc()|||C fputs() fgets()|||C fseek()|||C rewind()|||C ftell()||||||C Preprocessor|||C Macros|||C #include|||C #define|||C #undef|||C #ifdef|||C #ifndef|||C #if|||C #else|||C #error|||C #pragma|||C Preprocessor Test||||||Command Line Arguments||||||C Programming Test||||||Top 10+ C Programs|||Fibonacci Series|||Prime Number|||Palindrome Number|||Factorial|||Armstrong Number|||Sum of digits|||Reverse Number|||Swap Number|||Print ""Hello"" without ;|||Assembly code in C|||C program without main|||Matrix Multiplication|||Decimal to Binary|||Number in Characters|||Alphabet Triangle|||Number Triangle|||Fibonacci Triangle||||||C Programming Test||||||C Fundamental 1|||C Fundamental 2|||C Fundamental 3|||C Fundamental 4||||||C Control Statement 1|||C Control Statement 2|||C Control Statement 3|||C Control Statement 4||||||C Functions 1|||C Functions 2|||C Functions 3|||C Functions 4||||||C Array 1|||C Array 2|||C Array 3|||C Array 4||||||C Pointers 1|||C Pointers 2|||C Pointers 3|||C Pointers 4||||||C String 1|||C String 2|||C String 3|||C String 4||||||C Structure 1|||C Structure 2|||C Structure 3|||C Structure 4||||||C Preprocessor 1|||C Preprocessor 2|||C Preprocessor 3|||C Preprocessor 4||||||C Interview Questions|||']"
1,['History of C Language'],['History of C language is interesting to know. Here we are going to discuss a brief history of the c language.'],"['https://www.javatpoint.com/features-of-c-language', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/features-of-c-language', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/features-of-c-language']",['https://static.javatpoint.com/cpages/images/dennis.jpg'],[],[],[],[],"['C programming language was developed in 1972 by Dennis Ritchie at bell laboratories of AT&T (American Telephone & Telegraph), located in the U.S.A.', ' Dennis Ritchie is known as the founder of the c language.', 'It was developed to overcome the problems of previous languages such as B, BCPL, etc.', 'Initially, C language was developed to be used in UNIX operating system. It inherits many features of previous languages such as B and BCPL.', ""Let's see the programming languages that were developed before C language.""]",[],[],[],[],['anguageYearDeveloped B&&&lgol1960International Grou&&&CPL1967Martin Richar&&&1970Ken Thompso&&&raditional C1972Dennis Ritchi&&& & R C1978Kernighan & Dennis Ritchi&&&NSI C1989ANSI Committe&&&NSI/ISO C1990ISO Committe&&&991999Standardization Committe'],[]
2,['Features of C Language'],['C is the widely used language. It provides many features that are given below.'],"['https://www.javatpoint.com/how-to-install-c', 'https://www.javatpoint.com/history-of-c-language', 'https://www.javatpoint.com/features-of-c-language', 'https://www.javatpoint.com/history-of-c-language', 'https://www.javatpoint.com/how-to-install-c']",['https://static.javatpoint.com/cpages/images/cfeatures.jpg'],[],[],[],[],"['C provides a lot of inbuilt functions that make the development fast.', 'It supports the feature of dynamic memory allocation. In C language, we can free the allocated memory at any time by calling the free() function. ', 'The compilation and execution time of C language is fast since there are lesser inbuilt functions and hence the lesser overhead.', 'C language is extensible because it can easily adopt new features.']","['C is a simple language in the sense that it provides a structured approach (to break the problem into parts), the rich set of library functions, data types, etc.', 'Unlike assembly language, c programs can be executed on different machines with some machine specific changes. Therefore, C is a machine independent language.', 'Although, C is intended to do low-level programming. It is used to develop system applications such as kernel, driver, etc. It also supports the features of a high-level language. That is why it is known as mid-level language.', 'C is a structured programming language in the sense that we can break the program into parts using functions. So, it is easy to understand and modify. Functions also provide code reusability.', 'C provides the feature of pointers. We can directly interact with the memory by using the pointers. We can use pointers for memory, structures, functions, array, etc.', 'In C, we can call the function within the function. It provides code reusability for every function. Recursion enables us to use the approach of backtracking.']",[],[],[],[],['|||Simple|||Machine Independent or Portable|||Mid-level programming language|||structured programming language|||Rich Library|||Memory Management|||Fast Speed|||Pointers|||Recursion|||Extensible|||']
3,['How to install C'],"['There are many compilers available for c and c++. You need to download any one. Here, we are going to use Turbo C++. It will work for both C and C++. To install the Turbo C software, you need to follow following steps.']","['https://www.javatpoint.com/first-c-program', 'https://www.javatpoint.com/features-of-c-language', 'https://www.javatpoint.com/https://static.javatpoint.com/cpages/software/tc3.zip', 'https://www.javatpoint.com/first-c-program', 'https://www.javatpoint.com/features-of-c-language', 'https://www.javatpoint.com/first-c-program']","['https://static.javatpoint.com/cpages/images/installc1.jpg', 'https://static.javatpoint.com/cpages/images/installc2.jpg', 'https://static.javatpoint.com/cpages/images/installc3.jpg', 'https://static.javatpoint.com/cpages/images/installc4.jpg', 'https://static.javatpoint.com/cpages/images/installc5.jpg', 'https://static.javatpoint.com/cpages/images/installc6.jpg', 'https://static.javatpoint.com/cpages/images/installc7.jpg', 'https://static.javatpoint.com/cpages/images/installc8.jpg']",[],[],[],[],"['You can download turbo c++ from many sites. download Turbo c++', 'Now, you need to create a new directory turboc inside the c: drive. Now extract the tc3.zip file in c:\\truboc directory.', 'Now, click on the install icon located inside the c:\\turboc', 'It will ask you to install c or not, press enter to install.', 'Change your drive to c, press c.', 'Press enter, it will look inside the c:\\turboc directory for the required files.', 'Select Start installation by the down arrow key then press enter.', 'Now double click on the tc icon located in c:\\TC\\BIN directory to write the c program.', 'Now it will showing following console.']","['In windows 7 or window 8, it will show a dialog block to ignore and close the application because fullscreen mode is not supported. Click on Ignore button.']","['Now C is installed, press enter to read documentation or close the software.\n\n4) Click on the tc application located inside c:\\TC\\BIN\nNow double click on the tc icon located in c:\\TC\\BIN directory to write the c program.\n\nIn windows 7 or window 8, it will show a dialog block to ignore and close the application because fullscreen mode is not supported. Click on Ignore button.\nNow it will showing following console.\n\n\n\nNext TopicFirst C Program\n\n\n\n← prev\nnext →\n\n']",[],[],[],['|||Download Turbo C++|||Create turboc directory inside c drive and extract the tc3.zip inside c:\\turboc|||Double click on install.exe file|||Click on the tc application file located inside c:\\TC\\BIN to write the c program|||']
4,['First C Program'],"['Before starting the abcd of C language, you need to learn how to write, compile and run the first c program.']","['https://www.javatpoint.com/compilation-process-in-c', 'https://www.javatpoint.com/how-to-install-c', 'https://www.javatpoint.com/compilation-process-in-c', 'https://www.javatpoint.com/how-to-install-c', 'https://www.javatpoint.com/compilation-process-in-c']",['https://static.javatpoint.com/cpages/images/cprogramoutput.jpg'],[],['How to compile and run the c program'],"['By menu', 'By shortcut']",[],"['To write the first c program, open the C console and write the following code:', '#include <stdio.h> includes the standard input output library functions. The printf() function is defined in stdio.h .', 'int main() The main() function is the entry point of every program in c language. ', 'printf() The printf() function is used to print data on the console.', 'return 0 The return 0 statement, returns execution status to the OS. The 0 value is used for successful execution and 1 for unsuccessful execution.', 'There are 2 ways to compile and run the c program, by menu and by shortcut.', 'Now click on the compile menu then compile sub menu to compile the c program.', 'Then click on the run menu then run sub menu to run the c program.', 'Or, press ctrl+f9 keys compile and run the program directly.', 'You will see the following output on user screen.', 'You can view the user screen any time by pressing the alt+f5 keys.', 'Now press Esc to return to the turbo c++ console.']",[],[],"['#include', 'int main(){', 'printf(""Hello C Language"");', 'return 0;']",[],[],[]
5,['Compilation process in c'],"['The compilation is a process of converting the source code into object code. It is done with the help of the compiler. The compiler checks the source code for the syntactical or structural errors, and if the source code is error-free, then it generates the object code.']","['https://www.javatpoint.com/printf-scanf', 'https://www.javatpoint.com/first-c-program', 'https://www.javatpoint.com/printf-scanf', 'https://www.javatpoint.com/first-c-program', 'https://www.javatpoint.com/printf-scanf']","['https://static.javatpoint.com/cpages/images/compilation-process-in-c.png', 'https://static.javatpoint.com/cpages/images/compilation-process-in-c2.png', 'https://static.javatpoint.com/cpages/images/compilation-process-in-c3.png']",[],['What is a compilation?'],"['Preprocessor', 'Compiler', 'Assembler', 'Linker']",[],"['The following are the phases through which our program passes before being transformed into an executable form:', ""Let's understand through an example."", 'Now, we will create a flow diagram of the above program:', 'In the above flow diagram, the following steps are taken to execute a program:']","['The c compilation process converts the source code taken as input into the object code or machine code. The compilation process can be divided into four steps, i.e., Pre-processing, Compiling, Assembling, and Linking.', 'The code which is expanded by the preprocessor is passed to the compiler. The compiler converts this code into assembly code. Or we can say that the C compiler converts the pre-processed code into assembly code.']","[""The preprocessor takes the source code as an input, and it removes all the comments from the source code. The preprocessor takes the preprocessor directive and interprets it. For example, if <stdio.h>, the directive is available in the program, then the preprocessor interprets the directive and replace this directive with the content of the 'stdio.h' file."", 'The source code is the code which is written in a text editor and the source code file is given an extension "".c"". This source code is first passed to the preprocessor, and then the preprocessor expands this code. After expanding the code, the expanded code is passed to the compiler.', ""The assembly code is converted into object code by using an assembler. The name of the object file generated by the assembler is the same as the source file. The extension of the object file in DOS is '.obj,' and in UNIX, the extension is 'o'. If the name of the source file is 'hello.c', then the name of the object file would be 'hello.obj'."", ""Mainly, all the programs written in C use library functions. These library functions are pre-compiled, and the object code of these library files is stored with '.lib' (or '.a') extension. The main working of the linker is to combine the object code of library files with the object code of our program. Sometimes the situation arises when our program refers to the functions defined in other files; then linker plays a very important role in this. It links the object code of these files to our program. Therefore, we conclude that the job of the linker is to link the object code of our program with the object code of the library files and other files. The output of the linker is the executable file. The name of the executable file is the same as the source file but differs only in their extensions. In DOS, the extension of the executable file is '.exe', and in UNIX, the executable file can be named as 'a.out'. For example, if we are using printf() function in a program, then the linker adds its associated code in an output file.""]","['#include', 'int main()', 'printf(""Hello javaTpoint"");', 'return 0;']",[],[],"['|||Preprocessor|||Compiler|||Assembler|||Linker||||||Firstly, the input file, i.e., hello.c, is passed to the preprocessor, and the preprocessor converts the source code into expanded source code. The extension of the expanded source code would be hello.i.|||The expanded source code is passed to the compiler, and the compiler converts this expanded source code into assembly code. The extension of the assembly code would be hello.s.|||This assembly code is then sent to the assembler, which converts the assembly code into object code.|||After the creation of an object code, the linker creates the executable file. The loader will then load the executable file for the execution.|||']"
6,['printf() and scanf() in C'],"['The printf() and scanf() functions are used for input and output in C language. Both functions are inbuilt library functions, defined in stdio.h (header file).']","['https://www.javatpoint.com/variables-in-c', 'https://www.javatpoint.com/compilation-process-in-c', 'https://www.javatpoint.com/variables-in-c', 'https://www.javatpoint.com/compilation-process-in-c', 'https://www.javatpoint.com/variables-in-c']",[],[],[],"['printf() function', 'scanf() function', 'Program to print cube of given number', 'Program to print sum of 2 numbers']",[],"['The printf() function is used for output. It prints the given statement to the console.', 'The syntax of printf() function is given below:', 'The format string can be %d (integer), %c (character), %s (string), %f (float) etc.', 'The scanf() function is used for input. It reads the input data from the console.', ""Let's see a simple example of c language that gets input from the user and prints the cube of the given number."", 'The scanf(""%d"",&number) statement reads integer number from the console and stores the given value in number variable.', 'The printf(""cube of number is:%d "",number*number*number) statement prints the cube of number on the console.', ""Let's see a simple example of input and output in C language that prints addition of 2 numbers.""]",[],[],"['printf(""format string"",argument_list);', 'scanf(""format string"",argument_list);', '#include', 'int main(){', 'int number;', 'printf(""enter a number:"");', 'scanf(""%d"",&number);', 'printf(""cube of number is:%d "",number*number*number);', 'return 0;', '#include', 'int main(){', 'int x=0,y=0,result=0;', 'printf(""enter first number:"");', 'scanf(""%d"",&x);', 'printf(""enter second number:"");', 'scanf(""%d"",&y);', 'result=x+y;', 'printf(""sum of 2 numbers:%d "",result);', 'return 0;']","['enter a number:5', 'cube of number is:125', 'enter first number:9', 'enter second number:9', 'sum of 2 numbers:18']",[],[]
7,['Variables in C'],"['A variable is a name of the memory location. It is used to store data. Its value can be changed, and it can be reused many times.']","['https://www.javatpoint.com/data-types-in-c', 'https://www.javatpoint.com/printf-scanf', 'https://www.javatpoint.com/data-types-in-c', 'https://www.javatpoint.com/printf-scanf', 'https://www.javatpoint.com/data-types-in-c']",[],[],"['Rules for defining variables', 'Types of Variables in C']","['Local Variable', 'Global Variable', 'Static Variable', 'Automatic Variable', 'External Variable']",[],"['It is a way to represent memory location through symbol so that it can be easily identified.', ""Let's see the syntax to declare a variable:"", 'Here, a, b, c are variables. The int, float, char are the data types.', 'We can also provide values while declaring the variables as given below:', 'Valid variable names:', 'Invalid variable names:', 'There are many types of variables in c:', 'A variable that is declared inside the function or block is called a local variable.', 'It must be declared at the start of the block.', 'You must have to initialize the local variable before it is used.', 'It must be declared at the start of the block.', 'A variable that is declared with the static keyword is called static variable.', 'It retains its value between multiple function calls.', 'We can share a variable in multiple C source files by using an external variable. To declare an external variable, you need to use extern keyword.']","['A variable that is declared outside the function or block is called a global variable. Any function can change the value of the global variable. It is available to all the functions.', 'If you call this function many times, the local variable will print the same value for each function call, e.g, 11,11,11 and so on. But the static variable will print the incremented value in each function call, e.g. 11, 12, 13 and so on.', 'All variables in C that are declared inside the block, are automatic variables by default. We can explicitly declare an automatic variable using auto keyword.']","['The example of declaring the variable is given below:\n\nint a;\nfloat b;\nchar c;\n\nHere, a, b, c are variables. The int, float, char are the data types.\nWe can also provide values while declaring the variables as given below:\n\nint a=10,b=20;//declaring 2 variable of integer type\nfloat f=20.8;\nchar c=\'A\';\n\nRules for defining variables\n\nA variable can have alphabets, digits, and underscore.\nA variable name can start with the alphabet, and underscore only. It can\'t start with a digit.\nNo whitespace is allowed within the variable name.\nA variable name must not be any reserved word or keyword, e.g. int, float, etc.\n\nValid variable names:\n\nint a;\nint _ab;\nint a30;\n\nInvalid variable names:\n\nint 2;\nint a b;\nint long;\n\nTypes of Variables in C\nThere are many types of variables in c:\n\nlocal variable\nglobal variable\nstatic variable\nautomatic variable\nexternal variable\n\nLocal Variable\nA variable that is declared inside the function or block is called a local variable.\nIt must be declared at the start of the block.\n\nvoid function1(){\nint x=10;//local variable\n}\n\nYou must have to initialize the local variable before it is used.\nGlobal Variable\nA variable that is declared outside the function or block is called a global variable. Any function can change the value of the global variable. It is available to all the functions.\nIt must be declared at the start of the block.\n\nint value=20;//global variable\nvoid function1(){\nint x=10;//local variable\n}\n\nStatic Variable\nA variable that is declared with the static keyword is called static variable.\nIt retains its value between multiple function calls.\n\nvoid function1(){\nint x=10;//local variable\nstatic int y=10;//static variable\nx=x+1;\ny=y+1;\nprintf(""%d,%d"",x,y);\n}\n\nIf you call this function many times, the local variable will print the same value for each function call, e.g, 11,11,11 and so on. But the static variable will print the incremented value in each function call, e.g. 11, 12, 13 and so on.\nAutomatic Variable\nAll variables in C that are declared inside the block, are automatic variables by default. We can explicitly declare an automatic variable using auto keyword.\n\n\nvoid main(){\nint x=10;//local variable (also automatic)\nauto int y=20;//automatic variable\n}\n\nExternal Variable\nWe can share a variable in multiple C source files by using an external variable. To declare an external variable, you need to use extern keyword.\nmyfile.h\n\nextern int x=10;//external variable (also global)\n\nprogram1.c\n\n#include ""myfile.h""\n#include <stdio.h>\nvoid printValue(){\n    printf(""Global variable: %d"", global_variable);\n}\n\n\n\nNext TopicData Types in C\n\n\n\n← prev\nnext →\n\n']","['type variable_list;', 'float b;', 'int a=10,b=20;//declaring 2 variable of integer type', 'float f=20.8;', ""char c='A';"", 'int _ab;', 'int a30;', 'int a b;', 'int long;', 'void function1(){', 'int x=10;//local variable', 'int value=20;//global variable', 'void function1(){', 'int x=10;//local variable', 'void function1(){', 'int x=10;//local variable', 'static int y=10;//static variable', 'printf(""%d,%d"",x,y);', 'void main(){', 'int x=10;//local variable (also automatic)', 'auto int y=20;//automatic variable', 'extern int x=10;//external variable (also global)', '#include ""myfile.h""', '#include <stdio.h>', 'void printValue(){', 'printf(""Global variable: %d"", global_variable);']",[],[],"[""|||A variable can have alphabets, digits, and underscore.|||A variable name can start with the alphabet, and underscore only. It can't start with a digit.|||No whitespace is allowed within the variable name.|||A variable name must not be any reserved word or keyword, e.g. int, float, etc.|||&&&|||local variable|||global variable|||static variable|||automatic variable|||external variable|||""]"
8,['Data Types in C'],"['A data type specifies the type of data that a variable can store such as integer, floating, character, etc.']","['https://www.javatpoint.com/keywords-in-c', 'https://www.javatpoint.com/variables-in-c', 'https://www.javatpoint.com/keywords-in-c', 'https://www.javatpoint.com/variables-in-c', 'https://www.javatpoint.com/keywords-in-c']",['https://static.javatpoint.com/cpages/images/c-data-types.jpg'],[],['Basic Data Types'],[],[],"[' There are the following data types in C language.', 'The basic data types are integer-based and floating-point based. C language supports both signed and unsigned literals.', 'The memory size of the basic data types may change according to 32 or 64-bit operating system.', ""Let's see the basic data types. Its size is given according to 32-bit architecture.""]",[],[],[],[],"['ypesData Type&&&asic Data Typeint, char, float, doubl&&&erived Data Typearray, pointer, structure, unio&&&numeration Data Typeenu&&&oid Data Typevoi', 'ata TypesMemory SizeRang&&&har1 byte−128 to 12&&&igned char1 byte−128 to 12&&&nsigned char1 byte0 to 25&&&hort2 byte−32,768 to 32,76&&&igned short2 byte−32,768 to 32,76&&&nsigned short2 byte0 to 65,53&&&nt2 byte−32,768 to 32,76&&&igned int2 byte−32,768 to 32,76&&&nsigned int2 byte0 to 65,53&&&hort int2 byte−32,768 to 32,76&&&igned short int2 byte−32,768 to 32,76&&&nsigned short int2 byte0 to 65,53&&&ong int4 byte-2,147,483,648 to 2,147,483,64&&&igned long int4 byte-2,147,483,648 to 2,147,483,64&&&nsigned long int4 byte0 to 4,294,967,29&&&loat4 byt&&&ouble8 byt&&&ong double10 byt']",[]
9,['Keywords in C'],"['A keyword is a reserved word. You cannot use it as a variable name, constant name, etc. There are only 32 reserved words (keywords) in the C language.']","['https://www.javatpoint.com/c-identifiers', 'https://www.javatpoint.com/data-types-in-c', 'https://www.javatpoint.com/c-identifiers', 'https://www.javatpoint.com/data-types-in-c', 'https://www.javatpoint.com/c-identifiers']",[],[],[],[],[],"['A list of 32 keywords in the c language is given below:', 'We will learn about all the C language keywords later.']",[],[],[],[],['utobreakcasecharconstcontinuedefaultd&&&ouble else enum extern floatforgotoi&&&nt longregisterreturnshortsignedsizeofstati&&&tructswitchtypedefunionunsignedvoidvolatilewhil'],[]
10,['C Identifiers'],"['C identifiers represent the name in the C program, for example, variables, functions, arrays, structures, unions, labels, etc. An identifier can be composed of letters such as uppercase, lowercase letters, underscore, digits, but the starting letter should be either an alphabet or an underscore. If the identifier is not used in the external linkage, then it is called as an internal identifier. If the identifier is used in the external linkage, then it is called as an external identifier.']","['https://www.javatpoint.com/c-operators', 'https://www.javatpoint.com/keywords-in-c', 'https://www.javatpoint.com/c-operators', 'https://www.javatpoint.com/keywords-in-c', 'https://www.javatpoint.com/c-operators']",[],[],"['Rules for constructing C identifiers', 'Types of identifiers', 'Differences between Keyword and Identifier']",[],[],"['Example of valid identifiers', 'Example of invalid identifiers', 'Internal Identifier', 'If the identifier is not used in the external linkage, then it is known as an internal identifier. The internal identifiers can be local variables.', 'External Identifier', ""Let's understand through an example.""]","['If the identifier is used in the external linkage, then it is known as an external identifier. The external identifiers can be function names, global variables.', ""The above output shows that the values of both the variables, 'a' and 'A' are different. Therefore, we conclude that the identifiers are case sensitive.""]","['We can say that an identifier is a collection of alphanumeric characters that begins either with an alphabetical character or an underscore, which are used to represent various programming elements such as variables, functions, arrays, structures, unions, labels, etc. There are 52 alphabetical characters (uppercase and lowercase), underscore character, and ten numerical digits (0-9) that represent the identifiers. There is a total of 63 alphanumerical characters that represent the identifiers.']","['total, sum, average, _m _, sum_1, etc.', '2sum (starts with a numerical digit)', 'int (reserved word)', 'char (reserved word)', ""m+n (special character, i.e., '+')"", 'int main()', 'int a=10;', 'int A=20;', 'printf(""Value of a is : %d"",a);', 'printf(""\\nValue of A is :%d"",A);', 'return 0;']","['Value of a is : 10', 'Value of A is :20']",['Keyword|||Identifier&&&Keyword is a pre-defined word.|||The identifier is a user-defined word&&&It must be written in a lowercase letter.|||It can be written in both lowercase and uppercase letters.&&&Its meaning is pre-defined in the c compiler.|||Its meaning is not defined in the c compiler.&&&It is a combination of alphabetical characters.|||It is a combination of alphanumeric characters.&&&It does not contain the underscore character.|||It can contain the underscore character.'],"['|||The first character of an identifier should be either an alphabet or an underscore, and then it can be followed by any of the character, digit, or underscore.|||It should not begin with any numerical digit.|||In identifiers, both uppercase and lowercase letters are distinct. Therefore, we can say that identifiers are case sensitive.|||Commas or blank spaces cannot be specified within an identifier.|||Keywords cannot be represented as an identifier.|||The length of the identifiers should not be more than 31 characters.|||Identifiers should be written in such a way that it is meaningful, short, and easy to read.||||||Internal identifier|||External identifier|||']"
11,['C Operators'],"['An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, logical, bitwise, etc.']","['https://www.javatpoint.com/comments-in-c', 'https://www.javatpoint.com/c-identifiers', 'https://www.javatpoint.com/comments-in-c', 'https://www.javatpoint.com/c-identifiers', 'https://www.javatpoint.com/comments-in-c']",[],[],['Precedence of Operators in C'],[],[],"['There are following types of operators to perform different types of operations in C language.', 'The value variable will contain 210 because * (multiplicative operator) is evaluated before + (additive operator).', 'The precedence and associativity of C operators is given below:']",['The precedence of operator species that which operator will be evaluated first and next. The associativity specifies the operator direction to be evaluated; it may be left to right or right to left.'],"[""Let's understand the precedence by the example given below:\n\nint value=10+20*10;\n\nThe value variable will contain 210 because * (multiplicative operator) is evaluated before + (additive operator).\nThe precedence and associativity of C operators is given below:\n\n Category OperatorAssociativity \n Postfix() [] -> . ++ - -  Left to right \n Unary + - ! ~ ++ - - (type)* & sizeof Right to left\n Multiplicative  * / %Left to right \n Additive + - Left to right \n Shift  << >> Left to right \n Relational < <= > >= Left to right \n Equality  == != Left to right \n Bitwise AND& Left to right \n Bitwise XOR ^ Left to right\n Bitwise OR | Left to right\n Logical AND&& Left to right\nLogical OR || Left to right\n Conditional?: Right to left \nAssignment = += -= *= /= %=>>= <<= &= ^= |=Right to left\n Comma , Left to right\n\n\n\nNext TopicComments in C\n\n\n\n← prev\nnext →\n\n""]",['int value=10+20*10;'],[],"['Category OperatorAssociativity&&&Postfix() [] -> . ++ - -  Left to right&&&Unary + - ! ~ ++ - - (type)* & sizeof Right to lef&&&Multiplicative  * / %Left to right&&&Additive + - Left to right&&&Shift  << >> Left to right&&&Relational < <= > >= Left to right&&&Equality  == != Left to right&&&Bitwise AND& Left to right&&&Bitwise XOR ^ Left to righ&&&Bitwise OR | Left to righ&&&Logical AND&& Left to righ&&&ogical OR || Left to righ&&&Conditional?: Right to left&&&ssignment = += -= *= /= %=>>= <<= &= ^= |=Right to lef&&&Comma , Left to righ']",['|||Arithmetic Operators|||Relational Operators|||Shift Operators|||Logical Operators|||Bitwise Operators|||Ternary or Conditional Operators|||Assignment Operator|||Misc Operator|||']
12,['Comments in C'],['Comments in C language are used to provide information about lines of code. It is widely used for documenting code. There are 2 types of comments in the C language.'],"['https://www.javatpoint.com/c-format-specifier', 'https://www.javatpoint.com/c-operators', 'https://www.javatpoint.com/c-format-specifier', 'https://www.javatpoint.com/c-comments', 'https://www.javatpoint.com/c-format-specifier']",[],[],"['Single Line Comments', 'Mult Line Comments']",[],[],"[""Single line comments are represented by double slash \\\\. Let's see an example of a single line comment in C."", 'Even you can place the comment after the statement. For example:', ""Multi-Line comments are represented by slash asterisk \\* ... *\\. It can occupy many lines of code, but it can't be nested. Syntax:"", ""Let's see an example of a multi-Line comment in C.""]",[],[],"['#include', 'int main(){', 'printf(""Hello C"");', 'return 0;', 'printf(""Hello C"");//printing information', 'to be commented', '#include', 'int main(){', '/*printing information', 'Multi-Line Comment*/', 'printf(""Hello C"");', 'return 0;']","['Hello C', 'Hello C']",[],['|||Single Line Comments|||Multi-Line Comments|||']
13,['C Format Specifier'],"[""The Format specifier is a string used in the formatted input and output functions. The format string determines the format of the input and output. The format string always starts with a '%' character.""]","['https://www.javatpoint.com/escape-sequence-in-c', 'https://www.javatpoint.com/comments-in-c', 'https://www.javatpoint.com/escape-sequence-in-c', 'https://www.javatpoint.com/comments-in-c', 'https://www.javatpoint.com/escape-sequence-in-c']","['https://static.javatpoint.com/cpages/images/c-format-specifier.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier2.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier3.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier4.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier5.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier6.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier7.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier8.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier9.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier10.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier11.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier12.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier13.png', 'https://static.javatpoint.com/cpages/images/c-format-specifier14.png']",[],[],[],[],"['The commonly used format specifiers in printf() function are:', ""Let's understand the format specifiers in detail through an example."", 'In the above code, we are printing the integer value of b and c by using the %d specifier.', 'In the above code, we are displaying the octal value and integer value of a.', 'The above code prints the floating value of y.', 'In the above program, %8d specifier displays the value after 8 spaces while %-8d specifier will make a value left-aligned.', 'Now we will see how to fill the empty spaces. It is shown in the below code:', 'In the above program, %08d means that the empty space is filled with zeroes.\t', ""We can specify the precision by using '.' (Dot) operator which is followed by integer and format specifier.""]","['In the above code, we are displaying the floating value of y by using %g specifier. The %g specifier displays the output same as the input with a same precision.', 'Suppose we want to display an output that occupies a minimum number of spaces on the screen. You can achieve this by displaying an integer number after the percent sign of the format specifier.']","['In the above program, we are displaying the value of b and c by using an unsigned format specifier, i.e., %u. The value of b is positive, so %u specifier prints the exact value of b, but it does not print the value of c as c contains the negative value.', ""In the above code, y contains the hexadecimal value 'A'. We display the hexadecimal value of y in two formats. We use %x and %X to print the hexadecimal value where %x displays the value in small letters, i.e., 'a' and %X displays the value in a capital letter, i.e., 'A'.""]","['int main()', 'int b=6;', 'int c=8;', 'printf(""Value of b is:%d"", b);', 'printf(""\\nValue of c is:%d"",c);', 'return 0;', 'int main()', 'int b=10;', 'int c= -10;', 'printf(""Value of b is:%u"", b);', 'printf(""\\nValue of c is:%u"",c);', 'return 0;', 'int main()', 'int a=0100;', 'printf(""Octal value of a is: %o"", a);', 'printf(""\\nInteger value of a is: %d"",a);', 'return 0;', 'int main()', 'int y=0xA;', 'printf(""Hexadecimal value of y is: %x"", y);', 'printf(""\\nHexadecimal value of y is: %X"",y);', 'printf(""\\nInteger value of y is: %d"",y);', 'return 0;', 'int main()', 'float y=3.4;', 'printf(""Floating point value of y is: %f"", y);', 'return 0;', 'int main()', 'float y=3;', 'printf(""Exponential value of y is: %e"", y);', 'return 0;', 'int main()', 'float y=3;', 'printf(""Exponential value of y is: %E"", y);', 'return 0;', 'int main()', 'float y=3.8;', 'printf(""Float value of y is: %g"", y);', 'return 0;', 'int main()', 'int y=5;', 'printf(""Address value of y in hexadecimal form is: %p"", &y);', 'return 0;', 'int main()', ""char a='c';"", 'printf(""Value of a is: %c"", a);', 'return 0;', 'int main()', 'printf(""%s"", ""javaTpoint"");', 'return 0;', 'int main()', 'int x=900;', 'printf(""%8d"", x);', 'printf(""\\n%-8d"",x);', 'return 0;', 'int main()', 'int x=12;', 'printf(""%08d"", x);', 'return 0;', 'int main()', 'float x=12.2;', 'printf(""%.2f"", x);', 'return 0;']",[],"[""Format specifier|||Description&&&%d or %i|||It is used to print the signed integer value where signed integer means that the variable can hold both positive and negative values.&&&%u|||It is used to print the unsigned integer value where the unsigned integer means that the variable can hold only positive value.&&&%o|||It is used to print the octal unsigned integer where octal integer value always starts with a 0 value.&&&%x|||It is used to print the hexadecimal unsigned integer where the hexadecimal integer value always starts with a 0x value. In this, alphabetical characters are printed in small letters such as a, b, c, etc.&&&%X|||It is used to print the hexadecimal unsigned integer, but %X prints the alphabetical characters in uppercase such as A, B, C, etc.&&&%f|||It is used for printing the decimal floating-point values. By default, it prints the 6 values after '.'.&&&%e/%E|||It is used for scientific notation. It is also known as Mantissa or Exponent. &&&%g|||It is used to print the decimal floating-point values, and it uses the fixed precision, i.e., the value after the decimal in input would be exactly the same as the value in the output.&&&%p|||It is used to print the address in a hexadecimal form.&&&%c|||It is used to print the unsigned character.&&&%s|||It is used to print the strings.&&&%ld|||It is used to print the long-signed integer value.""]",['|||%d||||||%u||||||%o||||||%x and %X||||||%f||||||%e||||||%E||||||%g||||||%p||||||%c||||||%s|||']
14,['Escape Sequence in C'],"[""An escape sequence in C language is a sequence of characters that doesn't represent itself when used inside string literal or character.""]","['https://www.javatpoint.com/ascii-value-in-c', 'https://www.javatpoint.com/c-format-specifier', 'https://www.javatpoint.com/ascii-value-in-c', 'https://www.javatpoint.com/c-format-specifier', 'https://www.javatpoint.com/ascii-value-in-c']",[],[],"['List of Escape Sequences in C', 'Escape Sequence Example']",[],[],['It is composed of two or more characters starting with backslash \\. For example: \\n represents new line.'],[],[],"['#include', 'int main(){', 'int number=50;', 'printf(""You\\nare\\nlearning\\n\\\'c\\\' language\\n\\""Do you know C language\\"""");', 'return 0;']","['You\nare\nlearning\n\'c\' language\n""Do you know C language""']","['scape SequenceMeanin&&&aAlarm or Bee&&&bBackspac&&&fForm Fee&&&nNew Lin&&&rCarriage Retur&&&tTab (Horizontal&&&vVertical Ta&&&\\Backslas&&&\'Single Quot&&&""Double Quot&&&?Question Mar&&&nnnoctal numbe&&&xhhhexadecimal numbe&&&0Nul']",[]
15,['ASCII value in C'],"['The full form of ASCII is the American Standard Code for information interchange. It is a character encoding scheme used for electronics communication. Each character or a special character is represented by some ASCII code, and each ascii code occupies 7 bits in memory.']","['https://www.javatpoint.com/constants-in-c', 'https://www.javatpoint.com/escape-sequence-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/constants-in-c', 'https://www.javatpoint.com/escape-sequence-in-c', 'https://www.javatpoint.com/constants-in-c']","['https://static.javatpoint.com/cpages/images/ascii-value-in-c.png', 'https://static.javatpoint.com/cpages/images/ascii-value-in-c2.png']",[],['What is ASCII code?'],[],[],"[""Let's understand through an example."", 'We will create a program which will display the ascii value of the character variable.', ""The above output shows that the user gave the input as 'A', and after giving input, the ascii value of 'A' will get printed, i.e., 65."", 'Now, we will create a program which will display the ascii value of all the characters.', 'Now we will create the program which will sum the ascii value of a string.']","[""In the above example, we assign 'A' to the character variable whose ascii value is 65, so 65 will be stored in the character variable rather than 'A'."", 'The above program will display the ascii value of all the characters. As we know that ascii value of all the characters starts from 0 and ends at 255, so we iterate the for loop from 0 to 255.', ""In the above code, we are taking user input as a string. After taking user input, we execute the while loop which adds the ascii value of all the characters of a string and stores it in a 'sum' variable.""]","[""In C programming language, a character variable does not contain a character value itself rather the ascii value of the character variable. The ascii value represents the character variable in numbers, and each character variable is assigned with some number range from 0 to 127. For example, the ascii value of 'A' is 65."", ""In the above code, the first user will give the character input, and the input will get stored in the 'ch' variable. If we print the value of the 'ch' variable by using %c format specifier, then it will display 'A' because we have given the character input as 'A', and if we use the %d format specifier then its ascii value will be displayed, i.e., 65. ""]","['#include <stdio.h>', 'int main()', 'char ch;    // variable declaration', 'printf(""Enter a character"");', 'scanf(""%c"",&ch);  // user input', 'printf(""\\n The ascii value of the ch variable is : %d"", ch);', 'return 0;', '#include <stdio.h>', 'int main()', 'int k;   // variable declaration', 'for(int k=0;k<=255;k++)  // for loop from 0-255', 'printf(""\\nThe ascii value of %c is %d"", k,k);', 'return 0;', '#include <stdio.h>', 'int main()', 'int sum=0;  // variable initialization', 'char name[20];  // variable initialization', 'int i=0;  // variable initialization', 'printf(""Enter a name: "");', 'scanf(""%s"", name);', ""while(name[i]!='\\0')  // while loop"", 'printf(""\\nThe ascii value of the character %c is %d"", name[i],name[i]);', 'sum=sum+name[i];', 'i++;', 'printf(""\\nSum of the ascii value of a string is : %d"", sum);', 'return 0;']",[],[],[]
16,['Constants in C'],"['A constant is a value or variable that can\'t be changed in the program, for example: 10, 20, \'a\', 3.4, ""c programming"" etc.']","['https://www.javatpoint.com/literals-in-c', 'https://www.javatpoint.com/ascii-value-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-preprocessor-define', 'https://www.javatpoint.com/literals-in-c', 'https://www.javatpoint.com/ascii-value-in-c', 'https://www.javatpoint.com/literals-in-c']",[],[],"['List of Constants in C', '2 ways to define constant in C']",[],[],"['There are different types of constants in C programming.', 'There are two ways to define constant in C programming.', 'The const keyword is used to define constant in C programming.', ""Now, the value of PI variable can't be changed."", 'If you try to change the the value of PI, it will render compile time error.', 'The #define preprocessor is also used to define constant. We will learn about #define preprocessor directive later.', 'Visit here for: #define preprocessor directive.']",[],[],"['const float PI=3.14;', '#include', 'int main(){', 'const float PI=3.14;', 'printf(""The value of PI is: %f"",PI);', 'return 0;', '#include', 'int main(){', 'const float PI=3.14;', 'PI=4.5;', 'printf(""The value of PI is: %f"",PI);', 'return 0;']","['The value of PI is: 3.140000', 'Compile Time Error: Cannot modify a const object']","['onstantExampl&&&ecimal Constant10, 20, 450 etc&&&eal or Floating-point Constant10.3, 20.2, 450.6 etc&&&ctal Constant021, 033, 046 etc&&&exadecimal Constant0x2a, 0x7b, 0xaa etc&&&haracter Constant\'a\', \'b\', \'x\' etc&&&tring Constant""c"", ""c program"", ""c in javatpoint"" etc']",['|||const keyword|||#define preprocessor|||']
17,['What are literals?'],"['Literals are the constant values assigned to the constant variables. We can say that the literals represent the fixed values that cannot be modified. It also contains memory but does not have references as variables. For example, const int =10; is a constant integer expression in which 10 is an integer literal.']","['https://www.javatpoint.com/tokens-in-c', 'https://www.javatpoint.com/constants-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/tokens-in-c', 'https://www.javatpoint.com/constants-in-c', 'https://www.javatpoint.com/tokens-in-c']",[],[],[],"['Integer literal', 'It can be specified in the following three ways:', 'Decimal number (base 10)', 'Octal number (base 8)', 'Hexadecimal number (base 16)', 'Float literal', 'Decimal form', 'Exponential form', 'Character literal', 'String literal']","['Note: The order of the qualifier is not considered, i.e., both lu and ul are the same.', 'Note: If we represent a single character, i.e., \'b\', then this character will occupy a single byte as it is a character literal. And, if we represent the character within double quotes ""b"" then it will occupy more bytes as it is a string literal.']","['There are four types of literals that exist in C programming:', 'It is a numeric literal that represents only integer type values. It represents the value neither in fractional nor exponential part.', 'It is defined by representing the digits between 0 to 9. For example, 45, 67, etc.', 'It is defined as a number in which 0 is followed by digits such as 0,1,2,3,4,5,6,7. For example, 012, 034, 055, etc.', 'An integer literal is suffixed by following two sign qualifiers:', 'L or l: It is a size qualifier that specifies the size of the integer type as long.', 'U or u: It is a sign qualifier that represents the type of the integer as unsigned. An unsigned qualifier contains only positive values.', ""Let's look at a simple example of integer literal."", 'Examples of float literal in decimal form are:', ""Let's see a simple example of float literal in decimal form."", 'Syntax of float literal in exponential form', 'Examples of real literal in exponential notation are:', 'Rules for creating an exponential notation', 'The following are the rules for creating a float literal in exponential notation:', ""In the above code, we have used two characters, i.e., 'ak', within single quotes. So, this statement will generate a warning as shown below."", 'Warning generated:', 'Representation of character literal', 'A character literal can be represented in the following ways:', 'For example,', 'String1= ""javatpoint"";', 'String2= ""family"";', ""To concatenate the above two strings, we use '+' operator, as shown in the below statement:"", '""javatpoint "" + ""family""= javatpoint family']","['It is defined as a number in which 0x or 0X is followed by the hexadecimal digits (i.e., digits from 0 to 9, alphabetical characters from (a-z) or (A-Z)).']","[""It is a literal that contains only floating-point values or real numbers. These real numbers contain the number of parts such as integer part, real part, exponential part, and fractional part. The floating-point literal must be specified either in decimal or in exponential form. Let's understand these forms in brief."", ""The decimal form must contain either decimal point, exponential part, or both. If it does not contain either of these, then the compiler will throw an error. The decimal notation can be prefixed either by '+' or '-' symbol that specifies the positive and negative numbers."", 'The exponential form is useful when we want to represent the number, which is having a big magnitude. It contains two parts, i.e., mantissa and exponent. For example, the number is 2340000000000, and it can be expressed as 2.34e12 in an exponential form.', ""A character literal contains a single character enclosed within single quotes. If multiple characters are assigned to the variable, then we need to create a character array. If we try to store more than one character in a variable, then the warning of a multi-character character constant will be generated. Let's observe this scenario through an example."", ""A string literal represents multiple characters enclosed within double-quotes. It contains an additional character, i.e., '\\0' (null character), which gets automatically inserted. This null character specifies the termination of the string. We can use the '+' symbol to concatenate two strings.""]","['#include <stdio.h>', 'int main()', 'const int a=23;  // constant integer literal', 'printf(""Integer literal : %d"", a);', 'return 0;', '1.2, +9.0, -4.5', '#include <stdio.h>', 'int main()', 'const float a=4.5; // constant float literal', 'const float b=5.6; // constant float literal', 'float sum;', 'sum=a+b;', 'printf(""%f"", sum);', 'return 0;', '[+/-] <Mantissa> <e/E> [+/-] <Exponent>', '+1e23, -9e2, +2e-25', '#include <stdio.h>', 'int main()', ""const char c='ak';"", 'printf(""%c"",c);', 'return 0;', 'main.c:6:18: warning: multi-character character constant', '[-Wmultichar]', ""const char c='ak';"", ""main.c:6:18: warning: implicit conversion from 'int' to 'char'"", 'changes value from 24939 to 107 [-Wconstant-conversion]', ""const char c='ak';"", '~ ^~~~', '2 warnings generated.', '? ./main']","['Integer literal : 23', '10.100000']",[],"[""|||Integer literal|||Float literal|||Character literal|||String literal||||||In exponential notation, the mantissa can be specified either in decimal or fractional form.|||An exponent can be written in both uppercase and lowercase, i.e., e and E.|||We can use both the signs, i.e., positive and negative, before the mantissa and exponent.|||Spaces are not allowed||||||It can be represented by specifying a single character within single quotes. For example, 'a', 'b', etc.|||We can specify the escape sequence character within single quotes to represent a character literal. For example, '\\n', '\\a', '\\b'.|||We can also use the ASCII in integer to represent a character literal. For example, the ascii value of 65 is 'A'.|||The octal and hexadecimal notation can be used as an escape sequence to represent a character literal. For example, '\\023', '\\0x12'.|||""]"
18,['Tokens in C'],"['Tokens in C is the most important element to be used in creating a program in C. We can define the token as the smallest individual element in C. For `example, we cannot create a sentence without using words; similarly, we cannot create a program in C without using tokens in C. Therefore, we can say that tokens in C is the building block or the basic component for creating a program in C language.']","['https://www.javatpoint.com/c-boolean', 'https://www.javatpoint.com/literals-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/keywords-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-identifiers', 'https://www.javatpoint.com/https://www.javatpoint.com/c-strings', 'https://www.javatpoint.com/https://www.javatpoint.com/c-operators', 'https://www.javatpoint.com/https://www.javatpoint.com/constants-in-c', 'https://www.javatpoint.com/c-boolean', 'https://www.javatpoint.com/literals-in-c', 'https://www.javatpoint.com/c-boolean']",['https://static.javatpoint.com/cpages/images/tokens-in-c.png'],[],[],[],[],"['Classification of tokens in C', 'Tokens in C language can be divided into the following categories:', ""Let's understand each token one by one."", 'Keywords in C', 'Identifiers in C', 'Strings in C', 'Now, we describe the strings in different ways:', 'char a[10] = ""javatpoint""; // The compiler allocates the 10 bytes to the \'a\' array.', 'char a[] = ""javatpoint""; // The compiler allocates the memory at the run time.', ""char a[10] = {'j','a','v','a','t','p','o','i','n','t','\\0'}; // String is represented in the form of characters."", 'Operators in C', 'Unary Operator', 'A unary operator is an operator applied to the single operand. For example: increment operator (++), decrement operator (--), sizeof, (type)*.', 'Binary Operator', 'The binary operator is an operator applied between two operands. The following is the list of the binary operators:', 'Constants in C', 'A constant is a value assigned to the variable which will remain the same throughout the program, i.e., the constant value cannot be changed.', 'There are two ways of declaring constant:', 'Types of constants in C', 'Special characters in C', 'Some special characters are used in C, and they have a special meaning which cannot be used for another purpose.']",[],"['Keywords in C can be defined as the pre-defined or the reserved words having its own importance, and each keyword has its own functionality. Since keywords are the pre-defined words used by the compiler, so they cannot be used as the variable names. If the keywords are used as the variable names, it means that we are assigning a different meaning to the keyword, which is not allowed. C language supports 32 keywords given below:', 'Identifiers in C are used for naming variables, functions, arrays, structures, etc. Identifiers in C are the user-defined words. It can be composed of uppercase letters, lowercase letters, underscore, or digits, but the starting letter should be either an underscore or an alphabet. Identifiers cannot be used as keywords. Rules for constructing identifiers in C are given below: ', ""Strings in C are always represented as an array of characters having null character '\\0' at the end of the string. This null character denotes the end of the string. Strings in C are enclosed within double quotes, while characters are enclosed within single characters. The size of a string is a number of characters that the string contains."", 'Operators in C is a special symbol used to perform the functions. The data items on which the operators are applied are known as operands. Operators are applied between the operands. Depending on the number of operands, operators are classified as follows:']",[],[],"['auto|||double|||int|||struct&&&break|||else|||long|||switch&&&case|||enum|||register|||typedef&&&char|||extern|||return|||union&&&const|||float|||short|||unsigned&&&continue|||for|||signed|||void&&&default|||goto|||sizeof|||volatile&&&do|||if|||static|||while', 'Constant|||Example&&&Integer constant|||10, 11, 34, etc.&&&Floating-point constant|||45.6, 67.8, 11.2, etc.&&&Octal constant|||011, 088, 022, etc.&&&Hexadecimal constant|||0x1a, 0x4b, 0x6b, etc.&&&Character constant|||\'a\', \'b\', \'c\', etc.&&&String constant|||""java"", ""c++"", "".net"", etc.']","['|||Keywords in C|||Identifiers in C|||Strings in C|||Operators in C|||Constant in C|||Special Characters in C||||||The first character of an identifier should be either an alphabet or an underscore, and then it can be followed by any of the character, digit, or underscore.|||It should not begin with any numerical digit.|||In identifiers, both uppercase and lowercase letters are distinct. Therefore, we can say that identifiers are case sensitive.|||Commas or blank spaces cannot be specified within an identifier.|||Keywords cannot be represented as an identifier.|||The length of the identifiers should not be more than 31 characters.|||Identifiers should be written in such a way that it is meaningful, short, and easy to read.||||||Arithmetic Operators|||Relational Operators|||Shift Operators|||Logical Operators|||Bitwise Operators|||Conditional Operators|||Assignment Operator|||Misc Operator||||||Using const keyword|||Using #define pre-processor||||||Square brackets [ ]: The opening and closing brackets represent the single and multidimensional subscripts.|||Simple brackets ( ): It is used in function declaration and function calling. For example, printf() is a pre-defined function.|||Curly braces { }: It is used in the opening and closing of the code. It is used in the opening and closing of the loops. |||Comma (,): It is used for separating for more than one statement and for example, separating function parameters in a function call, separating the variable when printing the value of more than one variable using a single printf statement. |||Hash/pre-processor (#): It is used for pre-processor directive. It basically denotes that we are using the header file.|||Asterisk (*): This symbol is used to represent pointers and also used as an operator for multiplication.|||Tilde (~): It is used as a destructor to free memory.|||Period (.): It is used to access a member of a structure or a union.|||']"
19,['C Boolean'],"[""In C, Boolean is a data type that contains two types of values, i.e., 0 and 1. Basically, the bool type value represents two types of behavior, either true or false. Here, '0' represents false value, while '1' represents true value.""]","['https://www.javatpoint.com/static-in-c', 'https://www.javatpoint.com/tokens-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/keywords-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/static-in-c', 'https://www.javatpoint.com/tokens-in-c', 'https://www.javatpoint.com/static-in-c']",[],[],[],['Syntax'],[],"['In the above syntax, bool is the data type of the variable, and variable_name is the name of the variable.', ""Let's understand through an example."", ""Let's understand this scenario through an example."", 'In the above code, we have declared a Boolean type array containing two values, i.e., true and false.', ""Let's see a simple example of typedef."", 'The Boolean type value is associated with logical operators. There are three types of logical operators in the C language:', '||(OR Operator): It is a logical operator that takes two operands. If the value of both the operands is false, then it returns false otherwise true.', ""Let's understand through an example.""]","['Now, we create a bool type array. The Boolean array can contain either true or false value, and the values of the array can be accessed with the help of indexing.', 'There is another way of using Boolean value, i.e., typedef. Basically, typedef is a keyword in C language, which is used to assign the name to the already existing datatype.', ""In the above code, we use the Boolean values, i.e., true and false, but we have not used the bool type. We use the Boolean values by creating a new name of the 'bool' type. In order to achieve this, the typedef keyword is used in the program."", ""The above statement creates a new name for the 'bool' type, i.e., 'b' as 'b' can contain either true or false value. We use the 'b' type in our program and create the 'x' variable of type 'b'."", '&&(AND Operator): It is a logical operator that takes two operands. If the value of both the operands are true, then this operator returns true otherwise false', '!(NOT Operator): It is a NOT operator that takes one operand. If the value of the operand is false, then it returns true, and if the value of the operand is true, then it returns false.']","[""In C Boolean, '0' is stored as 0, and another integer is stored as 1. We do not require to use any header file to use the Boolean data type in C++, but in C, we have to use the header file, i.e., stdbool.h. If we do not use the header file, then the program will not compile."", ""In the above code, we have used <stdbool.h> header file so that we can use the bool type variable in our program. After the declaration of the header file, we create the bool type variable 'x' and assigns a 'false' value to it. Then, we add the conditional statements, i.e., if..else, to determine whether the value of 'x' is true or not.""]","['bool variable_name;', '#include <stdio.h>', '#include<stdbool.h>', 'int main()', 'bool x=false; // variable initialization.', 'if(x==true) // conditional statements', 'printf(""The value of x is true"");', 'printf(""The value of x is FALSE"");', 'return 0;', '#include <stdio.h>', '#include<stdbool.h>', 'int main()', 'bool b[2]={true,false}; // Boolean type array', 'for(int i=0;i<2;i++) // for loop', 'printf(""%d,"",b[i]); // printf statement', 'return 0;', '#include <stdio.h>', 'typedef enum{false,true} b;', 'int main()', 'b x=false; // variable initialization', 'if(x==true) // conditional statements', 'printf(""The value of x is true"");', 'printf(""The value of x is false"");', 'return 0;', 'typedef enum{false,true} b;', '#include <stdio.h>', '#include<stdbool.h>', 'int main()', 'bool x=false;', 'bool y=true;', 'printf(""The value of x&&y is %d"", x&&y);', 'printf(""\\nThe value of x||y is %d"", x||y);', 'printf(""\\nThe value of !x is %d"", !x);']","['The value of x is FALSE', '1,0,', 'The value of x is false', 'The value of x&&y is 0', 'The value of x||y is 1', 'The value of !x is 1']",[],[]
20,['Static in C'],"['Static is a keyword used in C programming language. It can be used with both variables and functions, i.e., we can declare a static variable and static function as well. An ordinary variable is limited to the scope in which it is defined, while the scope of the static variable is throughout the program.']","['https://www.javatpoint.com/programming-errors-in-c', 'https://www.javatpoint.com/c-boolean', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-programs', 'https://www.javatpoint.com/programming-errors-in-c', 'https://www.javatpoint.com/c-boolean', 'https://www.javatpoint.com/programming-errors-in-c']",[],[],[],"['Static keyword can be used in the following situations:', 'Static variable', 'Static Function', 'Differences b/w static and global variable ', 'Differences b/w static local and static global variable', 'Properties of a static variable']",[],"[""Let's understand through an example."", 'A static variable is a variable that persists its value across the various function calls.', 'The syntax of a static variable is given below:', ""Let's look at a simple example of static variable."", 'The static function would look like as:', 'Static variables are limited to the source file in which they are defined, i.e., they are not accessible by the other source files.', 'Static global variable', 'Static local variable', 'The following are the properties of a static variable:']","['Global variables are the variables that are declared outside the function. These global variables exist at the beginning of the program, and its scope remains till the end of the program. It can be accessed outside the program also.', 'Both the static and global variables have static initialization. Here, static initialization means if we do not assign any value to the variable then by default, 0 value will be assigned to the variable.', 'If the variable declared with a static keyword outside the function, then it is known as a static global variable. It is accessible throughout the program.']","['In the above code, the func() function is called. In func(), count variable gets updated. As soon as the function completes its execution, the memory of the count variable will be removed. If we do not want to remove the count from memory, then we need to use the count variable as static. If we declare the variable as static, then the variable will not be removed from the memory even when the function completes its execution.', 'In the above code, we have declared the count variable as static. When the func() is called, the value of count gets updated to 1, and during the next function call, the value of the count variable becomes 2. Therefore, we can say that the value of the static variable persists within the function call.', 'As we know that non-static functions are global by default means that the function can be accessed outside the file also, but if we declare the function as static, then it limits the function scope. The static function can be accessed within a file only. ', 'The variable with a static keyword is declared inside a function is known as a static local variable. The scope of the static local variable will be the same as the automatic local variables, but its memory will be available throughout the program execution. When the function modifies the value of the static local variable during one function call, then it will remain the same even during the next function call.']","['#include <stdio.h>', 'int main()', 'printf(""%d"",func());', 'printf(""\\n%d"",func());', 'return 0;', 'int func()', 'int count=0; // variable initialization', 'count++; // incrementing counter variable', 'return count; }', 'static data_type variable_name;', '#include <stdio.h>', 'int main()', 'printf(""%d"",func());', 'printf(""\\n%d"",func());', 'return 0;', 'int func()', 'static int count=0;', 'count++;', 'return count;', 'static void func()', 'printf(""Hello javaTpoint"");']","['1', '1', '1', '2']",[],"['|||Static global variable|||When a global variable is declared with a static keyword, then it is known as a static global variable. It is declared at the top of the program, and its visibility is throughout the program.|||Static function|||When a function is declared with a static keyword known as a static function. Its lifetime is throughout the program.|||Static local variable|||When a local variable is declared with a static keyword, then it is known as a static local variable. The memory of a static local variable is valid throughout the program, but the scope of visibility of a variable is the same as the automatic local variables. However, when the function modifies the static local variable during the first function call, then this modified value will be available for the next function call also.|||Static member variables|||When the member variables are declared with a static keyword in a class, then it is known as static member variables. They can be accessed by all the instances of a class, not with a specific instance.|||Static method|||The member function of a class declared with a static keyword is known as a static method. It is accessible by all the instances of a class, not with a specific instance.||||||The memory of a static variable is allocated within a static variable.|||Its memory is available throughout the program, but the scope will remain the same as the automatic local variables. Its value will persist across the various function calls.|||If we do not assign any value to the variable, then the default value will be 0.|||A global static variable cannot be accessed outside the program, while a global variable can be accessed by other source files.|||']"
21,['Programming Errors in C'],"['Errors are the problems or the faults that occur in the program, which makes the behavior of the program abnormal, and experienced developers can also make these faults. Programming errors are also known as the bugs or faults, and the process of removing these bugs is known as debugging.']","['https://www.javatpoint.com/compile-time-vs-runtime', 'https://www.javatpoint.com/static-in-c', 'https://www.javatpoint.com/compile-time-vs-runtime', 'https://www.javatpoint.com/static-in-c', 'https://www.javatpoint.com/compile-time-vs-runtime']","['https://static.javatpoint.com/cpages/images/programming-errors-in-c.png', 'https://static.javatpoint.com/cpages/images/programming-errors-in-c2.png', 'https://static.javatpoint.com/cpages/images/programming-errors-in-c3.png', 'https://static.javatpoint.com/cpages/images/programming-errors-in-c4.png', 'https://static.javatpoint.com/cpages/images/programming-errors-in-c5.png', 'https://static.javatpoint.com/cpages/images/programming-errors-in-c6.png', 'https://static.javatpoint.com/cpages/images/programming-errors-in-c7.png']",[],[],"['Syntax error', 'Run-time error', 'Linker error', 'Logical error', 'Semantic error']",[],"['There are mainly five types of errors exist in C programming:', 'For example:', 'Commonly occurred syntax errors are:', ""Let's understand through an example."", ""In the above output, we observe that the code throws the error that 'a' is undeclared. This error is nothing but the syntax error only."", ""In the above code, we put the (.) instead of condition in 'if', so this generates the syntax error as shown in the below screenshot."", ""Let's understand through an example."", 'In the above output, we observe that the code shows the run-time error, i.e., division by zero.', ""Let's understand through a simple example."", ""Let's understand through an example."", 'Semantic errors are the errors that occurred when the statements are not understandable by the compiler.', 'The following can be the cases for the semantic error:', ""Let's understand through an example."", 'In the above code, we use the statement a+b =c, which is incorrect as we cannot use the two operands on the left-side.']","['These errors are detected either during the time of compilation or execution. Thus, the errors must be removed from the program for the successful execution of the program.', ""There can be another possibility in which the syntax error can exist, i.e., if we make mistakes in the basic construct. Let's understand this scenario through an example."", 'In the above code, we are trying to print the sum of 10 digits, but we got the wrong output as we put the semicolon (;) after the for loop, so the inner statements of the for loop will not execute. This produces the wrong output.']","['Syntax errors are also known as the compilation errors as they occurred at the compilation time, or we can say that the syntax errors are thrown by the compilers. These errors are mainly occurred due to the mistakes while typing or do not follow the syntax of the specified programming language. These mistakes are generally made by beginners only because they are new to the language. These errors can be easily debugged or corrected.', 'Sometimes the errors exist during the execution-time even after the successful compilation known as run-time errors. When the program is running, and it is not able to perform the operation is the main cause of the run-time error. The division by zero is the common example of the run-time error. These errors are very difficult to find, as the compiler does not point to these errors.', 'Linker errors are mainly generated when the executable file of the program is not created. This can be happened either due to the wrong function prototyping or usage of the wrong header file. For example, the main.c file contains the sub() function whose declaration and definition is done in some other file such as func.c. During the compilation, the compiler finds the sub() function in func.c file, so it generates two object files, i.e., main.o and func.o. At the execution time, if the definition of sub() function is not found in the func.o file, then the linker error will be thrown. The most common linker error that occurs is that we use Main() instead of main().', 'The logical error is an error that leads to an undesired output. These errors produce the incorrect output, but they are error-free, known as logical errors. These types of mistakes are mainly done by beginners. The occurrence of these errors mainly depends upon the logical thinking of the developer. If the programmers sound logically good, then there will be fewer chances of these errors.']","['If we want to declare the variable of type integer,', 'int a; // this is the correct form', 'Int a; // this is an incorrect form.', '#include <stdio.h>', 'int main()', 'a = 10;', 'printf(""The value of a is : %d"", a);', 'return 0;', '#include <stdio.h>', 'int main()', 'int a=2;', 'if(.)  // syntax error', 'printf(""a is greater than 1"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int a=2;', 'int b=2/0;', 'printf(""The value of b is : %d"", b);', 'return 0;', '#include <stdio.h>', 'int Main()', 'int a=78;', 'printf(""The value of a is : %d"", a);', 'return 0;', '#include <stdio.h>', 'int main()', 'int sum=0; // variable initialization', 'int k=1;', 'for(int i=1;i<=10;i++); // logical error, as we put the semicolon after loop', 'sum=sum+k;', 'k++;', 'printf(""The  value of sum is %d"", sum);', 'return 0;', '#include <stdio.h>', 'int main()', 'int a,b,c;', 'a+b=c; // semantic error', 'return 0;']",[],[],"['|||Syntax error|||Run-time error|||Linker error|||Logical error|||Semantic error||||||Use of a un-initialized variable.|||int i;|||i=i+2;|||Type compatibility|||int b = ""javatpoint"";|||Errors in expressions|||int a, b, c;|||a+b = c;|||Array index out of bound|||int a[10];|||a[10] = 34;|||']"
22,['Compile time vs Runtime'],['Compile-time and Runtime are the two programming terms used in the software development. Compile-time is the time at which the source code is converted into an executable code while the run time is the time at which the executable code is started running. Both the compile-time and runtime refer to different types of error.'],"['https://www.javatpoint.com/conditional-operator-in-c', 'https://www.javatpoint.com/programming-errors-in-c', 'https://www.javatpoint.com/conditional-operator-in-c', 'https://www.javatpoint.com/programming-errors-in-c', 'https://www.javatpoint.com/conditional-operator-in-c']","['https://static.javatpoint.com/cpages/images/compile-time-vs-runtime.png', 'https://static.javatpoint.com/cpages/images/compile-time-vs-runtime2.png']",[],[],"['Compile-time errors', 'Syntax errors', 'Semantic errors', 'Runtime errors']",[],"['The compile-time errors can be:', 'When the programmer does not follow the syntax of any programming language, then the compiler will throw the syntax error.', 'For example,', 'The semantic errors exist when the statements are not meaningful to the compiler.', 'For example,', 'The above statement can be re-written as:', ""Let's look at the differences between compile-time and runtime:"", 'Example of Compile-time error', 'Example of runtime error', ""In the above code, we try to divide the value of 'b' by zero, and this throws a runtime error. ""]","['The above declaration generates the compile-time error as in C, every statement ends with the semicolon, but we put a colon (:) at the end of the statement.', 'The runtime errors are the errors that occur during the execution and after compilation. The examples of runtime errors are division by zero, etc. These errors are not easy to detect as the compiler does not point to these errors.', ""In the above code, we have tried to print the value of 'a', but it throws an error. We put the colon at the end of the statement instead of a semicolon, so this code generates a compile-time error.""]","['Compile-time errors are the errors that occurred when we write the wrong syntax. If we write the wrong syntax or semantics of any programming language, then the compile-time errors will be thrown by the compiler. The compiler will not allow to run the program until all the errors are removed from the program. When all the errors are removed from the program, then the compiler will generate the executable file.', ""The above statement throws a compile-time errors. In the above statement, we are assigning the value of 'c' to the summation of 'a' and 'b' which is not possible in C programming language as it can contain only one variable on the left of the assignment operator while right of the assignment operator can contain more than one variable.""]","['#include <stdio.h>', 'int main()', 'int a=20;', 'printf(""The value of a is : %d"",a):', 'return 0;', '#include <stdio.h>', 'int main()', 'int a=20;', 'int b=a/0; // division by zero', 'printf(""The value of b is : %d"",b):', 'return 0;']",[],"['Compile-time|||Runtime&&&The compile-time errors are the errors which are produced at the compile-time, and they are detected by the compiler.|||The runtime errors are the errors which are not generated by the compiler and produce an unpredictable result at the execution time.&&&In this case, the compiler prevents the code from execution if it detects an error in the program.|||In this case, the compiler does not detect the error, so it cannot prevent the code from the execution.&&&It contains the syntax and semantic errors such as missing semicolon at the end of the statement.|||It contains the errors such as division by zero, determining the square root of a negative number.']",['|||Syntax errors|||Semantic errors|||']
23,['Conditional Operator in C'],"[""The conditional operator is also known as a ternary operator. The conditional statements are the decision-making statements which depends upon the output of the expression. It is represented by two symbols, i.e., '?' and ':'.""]","['https://www.javatpoint.com/bitwise-operator-in-c', 'https://www.javatpoint.com/compile-time-vs-runtime', 'https://www.javatpoint.com/https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/bitwise-operator-in-c', 'https://www.javatpoint.com/compile-time-vs-runtime', 'https://www.javatpoint.com/bitwise-operator-in-c']","['https://static.javatpoint.com/cpages/images/conditional-operator-in-c.png', 'https://static.javatpoint.com/cpages/images/conditional-operator-in-c2.png', 'https://static.javatpoint.com/cpages/images/conditional-operator-in-c3.png', 'https://static.javatpoint.com/cpages/images/conditional-operator-in-c4.png']",[],[],['Syntax of a conditional operator'],[],"['As conditional operator works on three operands, so it is also known as the ternary operator.', ""The behavior of the conditional operator is similar to the 'if-else' statement as 'if-else' statement is also a decision-making statement."", 'The pictorial representation of the above syntax is shown below: ', 'Meaning of the above syntax.', ""Let's understand the ternary or conditional operator through an example."", ""Let's observe the output of the above program."", 'If we provide the age of user below 18, then the output would be:', 'If we provide the age of user above 18, then the output would be:', 'As we can observe from the above two outputs that if the condition is true, then the statement1 is executed; otherwise, statement2 will be executed.', ""Let's understand this scenario through an example."", ""The above output shows that the value of 'b' variable is 3 because the value of 'a' variable is equal to 5."", ""As we know that the behavior of conditional operator and 'if-else' is similar but they have some differences. Let's look at their differences.""]","['Till now, we have observed that how conditional operator checks the condition and based on condition, it executes the statements. Now, we will see how a conditional operator is used to assign the value to a variable.']","['In the above code, we are taking input as the \'age\' of the user. After taking input, we have applied the condition by using a conditional operator. In this condition, we are checking the age of the user. If the age of the user is greater than or equal to 18, then the statement1 will execute, i.e., (printf(""eligible for voting"")) otherwise, statement2 will execute, i.e., (printf(""not eligible for voting"")).', ""In the above code, we have declared two variables, i.e., 'a' and 'b', and assign 5 value to the 'a' variable. After the declaration, we are assigning value to the 'b' variable by using the conditional operator. If the value of 'a' is equal to 5 then 'b' is assigned with a 3 value otherwise 2.""]","['Expression1? expression2: expression3;', '#include <stdio.h>', 'int main()', 'int age;  // variable declaration', 'printf(""Enter your age"");', 'scanf(""%d"",&age);   // taking user input for age variable', '(age>=18)? (printf(""eligible for voting"")) : (printf(""not eligible for voting""));  // conditional operator', 'return 0;', '#include <stdio.h>', 'int main()', 'int a=5,b;  // variable declaration', 'b=((a==5)?(3):(2)); // conditional operator', 'printf(""The value of \'b\' variable is : %d"",b);', 'return 0;']",[],[],"[""|||In the above syntax, the expression1 is a Boolean condition that can be either true or false value.|||If the expression1 results into a true value, then the expression2 will execute.|||The expression2 is said to be true only when it returns a non-zero value.|||If the expression1 returns false value then the expression3 will execute.|||The expression3 is said to be false only when it returns zero value.||||||A conditional operator is a single programming statement, while the 'if-else' statement is a programming block in which statements come under the parenthesis.|||A conditional operator can also be used for assigning a value to the variable, whereas the 'if-else' statement cannot be used for the assignment purpose.|||It is not useful for executing the statements when the statements are multiple, whereas the 'if-else' statement proves more suitable when executing multiple statements.|||The nested ternary operator is more complex and cannot be easily debugged, while the nested 'if-else' statement is easy to read and maintain.|||""]"
24,['Bitwise Operator in C'],"['The bitwise operators are the operators used to perform the operations on the data at the bit-level. When we perform the bitwise operations, then it is also known as bit-level programming. It consists of two digits, either 0 or 1. It is mainly used in numerical computations to make the calculations faster.']","['https://www.javatpoint.com/2s-complement-in-c', 'https://www.javatpoint.com/conditional-operator-in-c', 'https://www.javatpoint.com/2s-complement-in-c', 'https://www.javatpoint.com/conditional-operator-in-c', 'https://www.javatpoint.com/2s-complement-in-c']","['https://static.javatpoint.com/cpages/images/bitwise-operator-in-c1.png', 'https://static.javatpoint.com/cpages/images/bitwise-operator-in-c2.png', 'https://static.javatpoint.com/cpages/images/bitwise-operator-in-c3.png', 'https://static.javatpoint.com/cpages/images/bitwise-operator-in-c4.png', 'https://static.javatpoint.com/cpages/images/bitwise-operator-in-c5.png', 'https://static.javatpoint.com/cpages/images/bitwise-operator-in-c6.png']",[],[],"['Bitwise AND operator', 'Bitwise OR operator', 'Bitwise exclusive OR operator', 'Bitwise complement operator', 'Bitwise shift operators']",[],"['We have different types of bitwise operators in the C programming language. The following is the list of the bitwise operators:', ""Let's look at the truth table of the bitwise operators."", 'For example,', ""Let's understand the bitwise AND operator through the program."", 'a AND b = 0110 && 1110 = 0110', 'For example,', ""Let's understand the bitwise OR operator through a program."", 'For example,', ""Let's understand the bitwise exclusive OR operator through a program."", 'For example,', 'As we can observe from the above result that if the bit is 1, then it gets changed to 0 else 1.', ""Let's understand the complement operator through a program."", 'Left-shift operator', 'It is an operator that shifts the number of bits to the left-side.', 'Syntax of the left-shift operator is given below:', 'Operand is an integer expression on which we apply the left-shift operation.', 'n is the number of bits to be shifted.', 'For example,', ""Let's understand through a program."", 'Right-shift operator', 'It is an operator that shifts the number of bits to the right side.', 'Syntax of the right-shift operator is given below:', 'Operand is an integer expression on which we apply the right-shift operation.', 'N is the number of bits to be shifted.', 'For example, ', ""Let's understand through a program.""]","['As we can observe from the above result that bits of both the variables are compared one by one. If the bit of both the variables is 1 then the output would be 1, otherwise 0.', ""In the above code, we have created two variables, i.e., 'a' and 'b'. The values of 'a' and 'b' are 6 and 14 respectively. The binary value of 'a' and\xa0'b' are 0110 and 1110, respectively. When we apply the AND operator between these two variables,"", 'The bitwise OR operator is represented by a single vertical sign (|). Two integer operands are written on both sides of the (|) symbol. If the bit value of any of the operand is 1, then the output would be 1, otherwise 0.', 'As we can observe from the above result that the bits of both the operands are compared one by one; if the value of either bit is 1, then the output would be 1 otherwise 0.', 'Bitwise exclusive OR operator is denoted by (^) symbol. Two operands are written on both sides of the exclusive OR operator. If the corresponding bit of any of the operand is 1 then the output would be 1, otherwise 0.', 'As we can observe from the above result that the bits of both the operands are compared one by one; if the corresponding bit value of any of the operand is 1, then the output would be 1 otherwise 0.', 'Two types of bitwise shift operators exist in C programming. The bitwise shift operators will shift the bits either on the left-side or right-side. Therefore, we can say that the bitwise shift operator is divided into two categories:', ""In the case of Left-shift operator, 'n' bits will be shifted on the left-side. The 'n' bits on the left side will be popped out, and 'n' bits on the right-side are filled with 0."", ""In the case of the right-shift operator, 'n' bits will be shifted on the right-side. The 'n' bits on the right-side will be popped out, and 'n' bits on the left-side are filled with 0.""]","['Bitwise AND operator is denoted by the single ampersand sign (&). Two integer operands are written on both sides of the (&) operator. If the corresponding bits of both the operands are 1, then the output of the bitwise AND operation is 1; otherwise, the output would be 0.', ""The bitwise complement operator is also known as one's complement operator. It is represented by the symbol tilde (~). It takes only one operand or variable and performs complement operation on an operand. When we apply the complement operation on any bits, then 0 becomes 1 and 1 becomes 0.""]","['We have two variables a and b.', 'The binary representation of the above two variables are given below:', 'a = 0110', 'b = 0100', 'When we apply the bitwise AND operation in the above two variables, i.e., a&b, the output would be:', 'Result = 0100', '#include <stdio.h>', 'int main()', 'int a=6, b=14;  // variable declarations', 'printf(""The output of the Bitwise AND operator a&b is %d"",a&b);', 'return 0;', 'We consider two variables,', 'a = 23;', 'b = 10;', 'The binary representation of the above two variables would be:', 'a = 0001 0111', 'b = 0000 1010', 'When we apply the bitwise OR operator in the above two variables, i.e., a|b , then the output would be:', 'Result = 0001 1111', '#include <stdio.h>', 'int main()', 'int a=23,b=10;  // variable declarations', 'printf(""The output of the Bitwise OR operator a|b is %d"",a|b);', 'return 0;', 'We consider two variables a and b,', 'a = 12;', 'b = 10;', 'The binary representation of the above two variables would be:', 'a = 0000 1100', 'b = 0000 1010', 'When we apply the bitwise exclusive OR operator in the above two variables (a^b), then the result would be:', 'Result = 0000 1110', '#include <stdio.h>', 'int main()', 'int a=12,b=10;  // variable declarations', 'printf(""The output of the Bitwise exclusive OR operator a^b is %d"",a^b);', 'return 0;', ""If we have a variable named 'a',"", 'The binary representation of the above variable is given below:', 'a = 1000', 'When we apply the bitwise complement operator to the operand, then the output would be:', 'Result = 0111', '#include <stdio.h>', 'int main()', 'int a=8;  // variable declarations', 'printf(""The output of the Bitwise complement operator ~a is %d"",~a);', 'return 0;', 'Operand << n', 'Suppose we have a statement:', 'int a = 5;', ""The binary representation of 'a' is given below:"", 'a = 0101', 'If we want to left-shift the above representation by 2, then the statement would be:', 'a << 2;', '0101<<2 = 00010100', '#include <stdio.h>', 'int main()', 'int a=5; // variable initialization', 'printf(""The value of a<<2 is : %d "", a<<2);', 'return 0;', 'Operand >> n;', 'Suppose we have a statement,', 'int a = 7;', 'The binary representation of the above variable would be:', 'a = 0111', 'If we want to right-shift the above representation by 2, then the statement would be:', '0000 0111 >> 2 = 0000 0001', '#include <stdio.h>', 'int main()', 'int a=7; // variable initialization', 'printf(""The value of a>>2 is : %d "", a>>2);', 'return 0;']",[],"[""Operator|||Meaning of operator&&&&|||Bitwise AND operator&&&||||Bitwise OR operator&&&^|||Bitwise exclusive OR operator&&&~|||One's complement operator (unary operator)&&&<<|||Left shift operator&&&>>|||Right shift operator"", 'X|||Y|||X&Y|||X|Y|||X^Y&&&0|||0|||0|||0|||0&&&0|||1|||0|||1|||1&&&1|||0|||0|||1|||1&&&1|||1|||1|||1|||1']",['|||Left-shift operator|||Right-shift operator|||']
25,['What is the 2s complement in C?'],['The 2s complement in C is generated from the 1s complement in C. As we know that the 1s complement of a binary number is created by transforming bit 1 to 0 and 0 to 1; the 2s complement of a binary number is generated by adding one to the 1s complement of a binary number.'],"['https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/bitwise-operator-in-c', 'https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/bitwise-operator-in-c', 'https://www.javatpoint.com/c-if-else']","['https://static.javatpoint.com/cpages/images/2s-complement-in-c.png', 'https://static.javatpoint.com/cpages/images/2s-complement-in-c2.png']",[],[],"['Analysis of the above program,']",[],"[""In short, we can say that the 2s complement in C is defined as the sum of the one's complement in C and one."", ""Let's create a program of 2s complement.""]",[],"[""In the above figure, the binary number is equal to 00010100, and its one's complement is calculated by transforming the bit 1 to 0 and 0 to 1 vice versa. Therefore, one's complement becomes 11101011. After calculating one's complement, we calculate the two's complement by adding 1 to the one's complement, and its result is 11101100.""]","['#include <stdio.h>', 'int main()', 'int n;  // variable declaration', 'printf(""Enter the number of bits do you want to enter :"");', 'scanf(""%d"",&n);', 'char binary[n+1];  // binary array declaration;', 'char onescomplement[n+1]; // onescomplement array declaration', 'char twoscomplement[n+1]; // twoscomplement array declaration', 'int carry=1; // variable initialization', 'printf(""\\nEnter the binary number : "");', 'scanf(""%s"", binary);', 'printf(""%s"", binary);', 'printf(""\\nThe ones complement of the binary number is :"");', 'for(int i=0;i<n;i++)', ""if(binary[i]=='0')"", ""onescomplement[i]='1';"", ""else if(binary[i]=='1')"", ""onescomplement[i]='0';"", ""onescomplement[n]='\\0';"", 'printf(""%s"",onescomplement);', 'printf(""\\nThe twos complement of a binary number is : "");', 'for(int i=n-1; i>=0; i--)', ""if(onescomplement[i] == '1' && carry == 1)"", '{', ""twoscomplement[i] = '0';"", '}', ""else if(onescomplement[i] == '0' && carry == 1)"", '{', ""twoscomplement[i] = '1';"", 'carry = 0;', '}', 'else', '{', 'twoscomplement[i] = onescomplement[i];', '}', ""twoscomplement[n]='\\0';"", 'printf(""%s"",twoscomplement);', 'return 0;']",[],[],"[""|||First, we input the number of bits, and it gets stored in the 'n' variable.|||After entering the number of bits, we declare character array, i.e., char binary[n+1], which holds the binary number. The 'n' is the number of bits which we entered in the previous step; it basically defines the size of the array.|||We declare two more arrays, i.e., onescomplement[n+1], and twoscomplement[n+1]. The onescomplement[n+1] array holds the ones complement of a binary number while the twoscomplement[n+1] array holds the two's complement of a binary number.|||Initialize the carry variable and assign 1 value to this variable.|||After declarations, we input the binary number.|||Now, we simply calculate the one's complement of a binary number. To do this, we create a loop that iterates throughout the binary array, for(int i=0;i<n;i++). In for loop, the condition is checked whether the bit is 1 or 0. If the bit is 1 then onescomplement[i]=0 else onescomplement[i]=1. In this way, one's complement of a binary number is generated.|||After calculating one's complement, we generate the 2s complement of a binary number. To do this, we create a loop that iterates from the last element to the starting element. In for loop, we have three conditions:||||||If the bit of onescomplement[i] is 1 and the value of carry is 1 then we put 0 in twocomplement[i].|||If the bit of onescomplement[i] is 0 and the value of carry is 1 then we put 1 in twoscomplement[i] and 0 in carry.|||If the above two conditions are false, then onescomplement[i] is equal to twoscomplement[i].|||||||||If the bit of onescomplement[i] is 1 and the value of carry is 1 then we put 0 in twocomplement[i].|||If the bit of onescomplement[i] is 0 and the value of carry is 1 then we put 1 in twoscomplement[i] and 0 in carry.|||If the above two conditions are false, then onescomplement[i] is equal to twoscomplement[i].|||""]"
26,['C Fundamental Test 1'],['The correct option is (d).'],"['https://www.javatpoint.com/c-fundamental-2', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/c-fundamental-2']",[],[],[],[],[],"['Explanation:', 'C programming language is invented for developing an operating system called UNIX. By 1973, the complete UNIX OS is developed using C.', 'The correct option is (a).', 'Explanation:', ""Compiler used for UNIX is 'cc' their full form is C compiler. gcc is compiler for linux. Borland and vc++ is compiler for windows."", 'The correct option is (c).', 'Explanation:', 'The && is called logical AND operator. If both operands are non-zero, then the condition becomes true.', 'The || is called logical OR operator. If any of the two operands are non-zero, then the condition becomes true.', 'The ! is called logical NOT operator. It is used for reversing the logic state of its operand.', 'The correct option is (c).', 'Explanation:', 'The %lf format specifier is used for printing the double value in a C program.', 'The correct option is (d).', 'Explanation:', 'The memory allocated by malloc(), calloc(), or realloc() function is deallocated by using the library function free(var-name).']",[],[],[],[],[],[]
27,['C if else Statement'],['The if-else statement in C is used to perform the operations based on some specific condition. The operations specified in if block are executed if and only if the given condition is true.'],"['https://www.javatpoint.com/c-switch', 'https://www.javatpoint.com/conditional-operator-in-c', 'https://www.javatpoint.com/c-switch', 'https://www.javatpoint.com/conditional-operator-in-c', 'https://www.javatpoint.com/c-switch']","['https://static.javatpoint.com/images/core/if1.png', 'https://static.javatpoint.com/images/core/if2.png', 'https://static.javatpoint.com/cpages/images/elseifladder.png']",[],"['If Statement', 'If-else Statement', 'If else-if ladder Statement']","['Program to find the largest number of the three.', 'Program to check whether a person is eligible to vote or not.', 'Program to calculate the grade of the student according to the specified marks.']",[],"['There are the following variants of if statement in C language.', 'Flowchart of if statement in C', ""Let's see a simple example of C language if statement."", 'Flowchart of the if-else statement in C', ""Let's see the simple example to check whether a number is even or odd using if-else statement in C language."", 'Flowchart of else-if ladder statement in C', 'The example of an if-else-if statement in C language is given below.']",[],"['The if statement is used to check some given condition and perform some operations depending upon the correctness of that condition. It is mostly used in the scenario where we need to perform the different operations for the different conditions. The syntax of the if statement is given below.', 'The if-else statement is used to perform two operations for a single condition. The if-else statement is an extension to the if statement using which, we can perform two different operations, i.e., one is for the correctness of that condition, and the other is for the incorrectness of the condition. Here, we must notice that if and else block cannot be executed simiulteneously. Using if-else statement is always preferable since it always invokes an otherwise case with every if condition. The syntax of the if-else statement is given below.', 'The if-else-if ladder statement is an extension to the if-else statement. It is used in the scenario where there are multiple cases to be performed for different conditions. In if-else-if ladder statement, if a condition is true then the statements defined in the if block will be executed, otherwise if some other condition is true then the statements defined in the else-if block will be executed, at the last if none of the condition is true then the statements defined in the else block will be executed. There are multiple else-if blocks possible. It is similar to the switch case statement where the default is executed instead of else block if none of the cases is matched.', 'Output\nenter a number:4\nnumber is not equal to 10, 50 or 100\nenter a number:50\nnumber is equal to 50\n\nProgram to calculate the grade of the student according to the specified marks.\n\n#include <stdio.h>\nint main()\n{\n\tint marks; \n\tprintf(""Enter your marks?"");\n\tscanf(""%d"",&marks); \n\tif(marks > 85 && marks <= 100)\n\t{\n\t\tprintf(""Congrats ! you scored grade A ...""); \n\t}\n\telse if (marks > 60 && marks <= 85) \n\t{\n\t\tprintf(""You scored grade B + ..."");\n\t}\n\telse if (marks > 40 && marks <= 60) \n\t{\n\t\tprintf(""You scored grade B ..."");\n\t}\n\telse if (marks > 30 && marks <= 40) \n\t{\n\t\tprintf(""You scored grade C ...""); \n\t}\n\telse \n\t{\n\t\tprintf(""Sorry you are fail ...""); \n\t}\n}\n\nOutput\nEnter your marks?10\nSorry you are fail ...\nEnter your marks?40\nYou scored grade C ...\nEnter your marks?90\nCongrats ! you scored grade A ...\n\n\n\nNext TopicC Switch Statement\n\n\n\n← prev\nnext →\n\n']","['if(expression){', '#include', 'int main(){', 'int number=0;', 'printf(""Enter a number:"");', 'scanf(""%d"",&number);', 'if(number%2==0){', 'printf(""%d is even number"",number);', 'return 0;', '#include <stdio.h>', 'int main()', 'int a, b, c;', 'printf(""Enter three numbers?"");', 'scanf(""%d %d %d"",&a,&b,&c);', 'if(a>b && a>c)', 'printf(""%d is largest"",a);', 'if(b>a  && b > c)', 'printf(""%d is largest"",b);', 'if(c>a && c>b)', 'printf(""%d is largest"",c);', 'if(a == b && a == c)', 'printf(""All are equal"");', 'if(expression){', '#include', 'int main(){', 'int number=0;', 'printf(""enter a number:"");', 'scanf(""%d"",&number);', 'if(number%2==0){', 'printf(""%d is even number"",number);', 'printf(""%d is odd number"",number);', 'return 0;', '#include <stdio.h>', 'int main()', 'int age;', 'printf(""Enter your age?"");', 'scanf(""%d"",&age);', 'if(age>=18)', 'printf(""You are eligible to vote..."");', 'printf(""Sorry ... you can\'t vote"");', 'if(condition1){', '}else if(condition2){', 'else if(condition3){', '#include', 'int main(){', 'int number=0;', 'printf(""enter a number:"");', 'scanf(""%d"",&number);', 'if(number==10){', 'printf(""number is equals to 10"");', 'else if(number==50){', 'printf(""number is equal to 50"");', 'else if(number==100){', 'printf(""number is equal to 100"");', 'printf(""number is not equal to 10, 50 or 100"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int marks;', 'printf(""Enter your marks?"");', 'scanf(""%d"",&marks);', 'if(marks > 85 && marks <= 100)', 'printf(""Congrats ! you scored grade A ..."");', 'else if (marks > 60 && marks <= 85)', 'printf(""You scored grade B + ..."");', 'else if (marks > 40 && marks <= 60)', 'printf(""You scored grade B ..."");', 'else if (marks > 30 && marks <= 40)', 'printf(""You scored grade C ..."");', 'printf(""Sorry you are fail ..."");']","['Enter a number:4\n4 is even number\nenter a number:5', 'Enter three numbers?\n12 23 34\n34 is largest', 'enter a number:4\n4 is even number\nenter a number:5\n5 is odd number', ""Enter your age?18\nYou are eligible to vote...\nEnter your age?13\nSorry ... you can't vote"", 'enter a number:4\nnumber is not equal to 10, 50 or 100\nenter a number:50\nnumber is equal to 50', 'Enter your marks?10\nSorry you are fail ...\nEnter your marks?40\nYou scored grade C ...\nEnter your marks?90\nCongrats ! you scored grade A ...']",[],['|||If statement|||If-else statement|||If else-if ladder|||Nested if|||']
28,['C Switch Statement'],"['The switch statement in C is an alternate to if-else-if ladder statement which allows us to execute multiple operations for the different possibles values of a single variable called switch variable. Here, We can define various statements in the multiple cases for the different values of a single variable.']","['https://www.javatpoint.com/if-else-vs-switch', 'https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/if-else-vs-switch', 'https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/if-else-vs-switch']",['https://static.javatpoint.com/cpages/images/cswitch.png'],[],['Functioning of switch case statement'],"['Rules for switch statement in C language', 'Switch case example 2', 'Nested switch case statement']","['Flowchart of switch statement in C', 'C Switch statement is fall-through']","['The syntax of switch statement in c language is given below:', '1) The switch expression must be of an integer or character type.', '2) The case value must be an integer or character constant.', '3) The case value can be used only inside the switch statement.', ""Let's try to understand it by the examples. We are assuming that there are following variables."", ""Let's see a simple example of c language switch statement."", ""Let's try to understand the fall through state of switch statement by the example given below.""]","['4) The break statement in switch case is not must. It is optional. If there is no break statement found in the case, all the cases will be executed present after the matched case. It is known as fall through the state of C switch statement.', ""In C language, the switch statement is fall through; it means if you don't use a break statement in the switch case, all the cases after the matching case will be executed."", 'We can use as many switch statement as we want inside a switch statement. Such type of statements is called nested switch case statements. Consider the following example.']","['First, the integer expression specified in the switch statement is evaluated. This value is then matched one by one with the constant values given in the different cases. If a match is found, then all the statements specified in that case are executed along with the all the cases present after that case including the default statement. No two cases can have similar values. If the matched case contains a break statement, then all the cases present after that will be skipped, and the control comes out of the switch. Otherwise, all the cases following the matched case will be executed.']","['switch(expression){', 'case value1:', 'break;  //optional', 'case value2:', 'break;  //optional', '......', 'default:', 'code to be executed if all cases are not matched;', 'int x,y,z;', 'char a,b;', 'float f;', '#include', 'int main(){', 'int number=0;', 'printf(""enter a number:"");', 'scanf(""%d"",&number);', 'switch(number){', 'case 10:', 'printf(""number is equals to 10"");', 'break;', 'case 50:', 'printf(""number is equal to 50"");', 'break;', 'case 100:', 'printf(""number is equal to 100"");', 'break;', 'default:', 'printf(""number is not equal to 10, 50 or 100"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int x = 10, y = 5;', 'switch(x>y && x+y>0)', 'case 1:', 'printf(""hi"");', 'break;', 'case 0:', 'printf(""bye"");', 'break;', 'default:', 'printf("" Hello bye "");', '#include', 'int main(){', 'int number=0;', 'printf(""enter a number:"");', 'scanf(""%d"",&number);', 'switch(number){', 'case 10:', 'printf(""number is equal to 10\\n"");', 'case 50:', 'printf(""number is equal to 50\\n"");', 'case 100:', 'printf(""number is equal to 100\\n"");', 'default:', 'printf(""number is not equal to 10, 50 or 100"");', 'return 0;', '#include <stdio.h>', 'int main () {', 'int i = 10;', 'int j = 20;', 'switch(i) {', 'case 10:', 'printf(""the value of i evaluated in outer switch: %d\\n"",i);', 'case 20:', 'switch(j) {', 'case 20:', 'printf(""The value of j evaluated in nested switch: %d\\n"",j);', '}', 'printf(""Exact value of i is : %d\\n"", i );', 'printf(""Exact value of j is : %d\\n"", j );', 'return 0;']","['enter a number:4\nnumber is not equal to 10, 50 or 100', 'enter a number:50\nnumber is equal to 50', 'hi', 'enter a number:10\nnumber is equal to 10\nnumber is equal to 50\nnumber is equal to 100\nnumber is not equal to 10, 50 or 100', 'enter a number:50\nnumber is equal to 50\nnumber is equal to 100\nnumber is not equal to 10, 50 or 100', 'the value of i evaluated in outer switch: 10\nThe value of j evaluated in nested switch: 20\nExact value of i is : 10\nExact value of j is : 20']","[""alid SwitchInvalid SwitchValid CaseInvalid Cas&&&witch(x)switch(f)case 3;case 2.5&&&witch(x>y)switch(x+2.5)case 'a';case x&&&witch(a+b-2)case 1+2;case x+2&&&witch(func(x,y))case 'x'>'y';case 1,2,3""]",[]
29,['if-else vs switch'],"[""An if-else statement in C programming is a conditional statement that executes a different set of statements based on the condition that is true or false. The 'if' block will be executed only when the specified condition is true, and if the specified condition is false, then the else block will be executed.""]","['https://www.javatpoint.com/c-loop', 'https://www.javatpoint.com/c-switch', 'https://www.javatpoint.com/https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/https://www.javatpoint.com/c-switch', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-loop', 'https://www.javatpoint.com/c-switch', 'https://www.javatpoint.com/c-loop']",['https://static.javatpoint.com/cpages/images/if-else-vs-switch.png'],[],[],"['What is an if-else statement?', 'What is a switch statement?', 'Similarity b/w if-else and switch', 'Differences b/w if-else and switch statement']",[],"['Syntax of if-else statement is given below:', 'Syntax of the switch statement is given below:', 'The following are the differences between if-else and switch statement are:', 'Switch statement', 'The switch statement contains multiple cases or choices. The user will decide the case, which is to execute.', 'It contains only a single expression, and this expression is either a single integer object or a string object. It checks only equality expression.', 'An if-else statement can evaluate almost all the types of data such as integer, floating-point, character, pointer, or Boolean.', 'A switch statement can evaluate either an integer or a character.', ""In the case of 'if-else' statement, either the 'if' block or the 'else' block will be executed based on the condition."", ""If the condition is not true within the 'if' statement, then by default, the else block statements will be executed."", ""Values are based on the condition specified inside the 'if' statement. The value will decide either the 'if' or 'else' block is to be executed."", 'In this case, value is decided by the user. Based on the choice of the user, the case will be executed.', 'It evaluates a condition to be true or false.', ""Editing in 'if-else' statement is not easy as if we remove the 'else' statement, then it will create the havoc."", ""If the choices are multiple, then the speed of the execution of 'if-else' statements is slow."", ""Let's summarize the above differences in a tabular form.""]","['Both the if-else and switch are the decision-making statements. Here, decision-making statements mean that the output of the expression will decide which statements are to be executed.', ""Based on the result of the expression in the 'if-else' statement, the block of statements will be executed. If the condition is true, then the 'if' block will be executed otherwise 'else' block will execute."", 'It can contain a single expression or multiple expressions for multiple choices. In this, an expression is evaluated based on the range of values or conditions. It checks both equality and logical expressions.', ""In the case of the 'switch' statement, one case after another will be executed until the break keyword is not found, or the default statement is executed."", 'If the expression specified within the switch statement is not matched with any of the cases, then the default statement, if defined, will be executed.', 'A switch statement compares the value of the variable with multiple cases. If the value is matched with any of the cases, then the block of statements associated with this case will be executed.']","['A switch statement is a conditional statement used in C programming to check the value of a variable and compare it with all the cases. If the value is matched with any case, then its corresponding statements will be executed. Each case has some name or number known as the identifier. The value entered by the user will be compared with all the cases until the case is found. If the value entered by the user is not matched with any case, then the default statement will be executed.', ""Editing in switch statement is easier as compared to the 'if-else' statement. If we remove any of the cases from the switch, then it will not interrupt the execution of other cases. Therefore, we can say that the switch statement is easy to modify and maintain."", ""The case constants in the switch statement create a jump table at the compile time. This jump table chooses the path of the execution based on the value of the expression. If we have a multiple choice, then the execution of the switch statement will be much faster than the equivalent logic of 'if-else' statement.""]","['if(expression)', 'switch(expression)', 'case constant 1:', 'break;', 'case constant 2:', 'break;', 'case constant n:', 'break;', 'default:']",[],"[""|||If-else|||switch&&&Definition|||Depending on the condition in the 'if' statement, 'if' and 'else' blocks are executed.|||The user will decide which statement is to be executed.&&&Expression|||It contains either logical or equality expression.|||It contains a single expression which can be either a character or integer variable.&&&Evaluation|||It evaluates all types of data, such as integer, floating-point, character or Boolean.|||It evaluates either an integer, or character.&&&Sequence of execution|||First, the condition is checked. If the condition is true then 'if' block is executed otherwise 'else' block|||It executes one case after another till the break keyword is not found, or the default statement is executed.&&&Default execution|||If the condition is not true, then by default, else block will be executed.|||If the value does not match with any case, then by default, default statement is executed.&&&Editing|||Editing is not easy in the 'if-else' statement.|||Cases in a switch statement are easy to maintain and modify. Therefore, we can say that the removal or editing of any case will not interrupt the execution of other cases.&&&Speed|||If there are multiple choices implemented through 'if-else', then the speed of the execution will be slow.|||If we have multiple choices then the switch statement is the best option as the speed of the execution will be much higher than 'if-else'.""]",['|||Definition||||||Expression||||||Evaluation||||||Sequence of Execution||||||Default Execution||||||Values||||||Use||||||Editing||||||Speed|||']
30,['C Loops'],"['The looping can be defined as repeating the same process multiple times until a specific condition satisfies. There are three types of loops used in the C language. In this part of the tutorial, we are going to learn all the aspects of C loops.']","['https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/if-else-vs-switch', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/while-loop-in-c', 'https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/if-else-vs-switch', 'https://www.javatpoint.com/do-while-loop-in-c']",[],[],[],"['Advantage of loops in C', 'do-while loop in C', 'while loop in C', 'for loop in C']",[],"['1) It provides code reusability.', '2) Using loops, we do not need to write the same code again and again.', '3) Using loops, we can traverse over the elements of data structures (array or linked lists).', 'There are three types of loops in C language that is given below:', 'The syntax of do-while loop in c language is given below:', 'Flowchart and Example of do-while loop', 'The syntax of while loop in c language is given below:', 'Flowchart and Example of while loop', 'The syntax of for loop in c language is given below:', 'Flowchart and Example of for loop']","['The do-while loop continues until a given condition satisfies. It is also called post tested loop. It is used when it is necessary to execute the loop at least once (mostly menu driven programs). ', 'The for loop is used in the case where we need to execute some part of the code until the given condition is satisfied. The for loop is also called as a per-tested loop. It is better to use for loop if the number of iteration is known in advance.']","['The looping simplifies the complex problems into the easy ones. It enables us to alter the flow of the program so that instead of writing the same code again and again, we can repeat the same code for a finite number of times. For example, if we need to print the first 10 natural numbers then, instead of using the printf statement 10 times, we can print inside a loop which runs up to 10 iterations.', ""The while loop in c is to be used in the scenario where we don't know the number of iterations in advance. The block of statements is executed in the while loop until the condition specified in the while loop is satisfied. It is also called a pre-tested loop.""]","['}while(condition);', 'while(condition){', 'for(initialization;condition;incr/decr){']",[],[],['|||do while|||while|||for|||']
31,['do while loop in C'],"['The do while loop is a post tested loop. Using the do-while loop, we can repeat the execution of several parts of the statements. The do-while loop is mainly used in the case where we need to execute the loop at least once. The do-while loop is mostly used in menu-driven programs where the termination condition depends upon the end user.']","['https://www.javatpoint.com/while-loop-in-c', 'https://www.javatpoint.com/c-loop', 'https://www.javatpoint.com/while-loop-in-c', 'https://www.javatpoint.com/c-loop', 'https://www.javatpoint.com/while-loop-in-c']",['https://static.javatpoint.com/cpages/images/dowhile.png'],[],[],[],"['do while loop syntax', 'Example 1', 'Output', 'Flowchart of do while loop', 'do while example', 'Output', 'Program to print table for the given number using do while loop', 'Output', 'Infinitive do while loop']","['The syntax of the C language do-while loop is given below:', 'There is given the simple program of c language do while loop where we are printing the table of 1.', 'The do-while loop will run infinite times if we pass any non-zero value as the conditional expression.']",[],[],"['}while(condition);', '#include<stdio.h>', '#include<stdlib.h>', 'void main ()', 'char c;', 'int choice,dummy;', 'printf(""\\n1. Print Hello\\n2. Print Javatpoint\\n3. Exit\\n"");', 'scanf(""%d"",&choice);', 'switch(choice)', 'case 1 :', 'printf(""Hello"");', 'break;', 'case 2:', 'printf(""Javatpoint"");', 'break;', 'case 3:', 'exit(0);', 'break;', 'default:', 'printf(""please enter valid choice"");', 'printf(""do you want to enter more?"");', 'scanf(""%d"",&dummy);', 'scanf(""%c"",&c);', ""}while(c=='y');"", '#include', 'int main(){', 'int i=1;', 'printf(""%d \\n"",i);', '}while(i<=10);', 'return 0;', '#include', 'int main(){', 'int i=1,number=0;', 'printf(""Enter a number: "");', 'scanf(""%d"",&number);', 'printf(""%d \\n"",(number*i));', '}while(i<=10);', 'return 0;', '}while(1);']","['1. Print Hello\n2. Print Javatpoint\n3. Exit\n1\nHello\ndo you want to enter more?\ny\n\n1. Print Hello\n2. Print Javatpoint\n3. Exit\n2\nJavatpoint\ndo you want to enter more?\nn', '1\n2\n3\n4\n5\n6\n7\n8\n9\n10', 'Enter a number: 5\n5\n10\n15\n20\n25\n30\n35\n40\n45\n50', 'Enter a number: 10\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100']",[],[]
32,['while loop in C'],"['While loop is also known as a pre-tested loop. In general, a while loop allows a part of the code to be executed multiple times depending upon a given boolean condition. It can be viewed as a repeating if statement. The while loop is mostly used in the case where the number of iterations is not known in advance. ']","['https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/for-loop-in-c']",['https://static.javatpoint.com/cpages/images/while.png'],[],"['Example of the while loop in C language', 'Program to print table for the given number using while loop in C', 'Properties of while loop', 'Infinitive while loop in C']",[],"['Syntax of while loop in C language', 'Flowchart of while loop in C', 'Output', 'Output', 'Example 1', 'Output', 'Example 2', 'Output', 'Example 3', 'Output']","['The syntax of while loop in c language is given below:', ""Let's see the simple program of while loop that prints table of 1."", 'If the expression passed in while loop results in any non-zero value then the loop will run the infinite number of times.']",[],[],"['while(condition){', '#include', 'int main(){', 'int i=1;', 'while(i<=10){', 'printf(""%d \\n"",i);', 'i++;', 'return 0;', '#include', 'int main(){', 'int i=1,number=0,b=9;', 'printf(""Enter a number: "");', 'scanf(""%d"",&number);', 'while(i<=10){', 'printf(""%d \\n"",(number*i));', 'return 0;', '#include<stdio.h>', 'void main ()', 'int j = 1;', 'while(j+=2,j<=10)', 'printf(""%d "",j);', 'printf(""%d"",j);', '#include<stdio.h>', 'void main ()', 'while()', 'printf(""hello Javatpoint"");', '#include<stdio.h>', 'void main ()', 'int x = 10, y = 2;', 'while(x+y-1)', 'printf(""%d %d"",x--,y--);', 'while(1){']","['1\n2\n3\n4\n5\n6\n7\n8\n9\n10', 'Enter a number: 50\n50\n100\n150\n200\n250\n300\n350\n400\n450\n500', 'Enter a number: 100\n100\n200\n300\n400\n500\n600\n700\n800\n900\n1000', '3 5 7 9 11', ""compile time error: while loop can't be empty"", 'infinite loop']",[],"['|||A conditional expression is used to check the condition. The statements defined inside the while loop will repeatedly execute until the given condition fails.|||The condition will be true if it returns 0. The condition will be false if it returns any non-zero number.|||In while loop, the condition expression is compulsory.|||Running a while loop without a body is possible.|||We can have more than one conditional expression in while loop.|||If the loop body contains only one statement, then the braces are optional.|||']"
33,['for loop in C'],['The for loop in C language is used to iterate the statements or a part of the program several times. It is frequently used to traverse the data structures like the array and linked list.'],"['https://www.javatpoint.com/nested-loops-in-c', 'https://www.javatpoint.com/while-loop-in-c', 'https://www.javatpoint.com/nested-loops-in-c', 'https://www.javatpoint.com/while-loop-in-c', 'https://www.javatpoint.com/nested-loops-in-c']",['https://static.javatpoint.com/cpages/images/forloop.png'],[],[],"['Syntax of for loop in C', 'Flowchart of for loop in C', 'C for loop Examples', 'C Program: Print table for the given number using C for loop', 'Properties of Expression 1', 'Properties of Expression 2', 'Loop body', 'Infinitive for loop in C']","['Properties of Expression 3\n\nExpression 3 is used to update the loop variable.\nWe can update more than one variable at the same time.\nExpression 3 is optional.\n\nExample 1\n\n#include<stdio.h>\nvoid main ()\n{\n    int i=0,j=2;\n    for(i = 0;i<5;i++,j=j+2)\n    {\n        printf(""%d %d\\n"",i,j);\n    }\n}\n\nOutput\n0 2\n1 4\n2 6\n3 8\n4 10    \n\nLoop body\nThe braces {} are used to define the scope of the loop. However, if the loop contains only one statement, then we don\'t need to use braces. A loop without a body is possible. The braces work as a block separator, i.e., the value variable declared inside for loop is valid only for that block and not outside. Consider the following example.\n\n#include<stdio.h>\nvoid main ()\n{\n    int i;\n    for(i=0;i<10;i++)\n    {\n        int i = 20;\n        printf(""%d "",i);\n    }\n}\n\nOutput\n20 20 20 20 20 20 20 20 20 20   \n\nInfinitive for loop in C\nTo make a for loop infinite, we need not give any expression in the syntax. Instead of that, we need to provide two semicolons to validate the syntax of the for loop. This will work as an infinite for loop.\n\n#include<stdio.h>\nvoid main ()\n{\n    for(;;)\n    {\n        printf(""welcome to javatpoint"");\n    }\n}\n\nIf you run this program, you will see above statement infinite times.\n\n\nNext TopicNested Loops in C\n\n\n\n← prev\nnext →\n\n']","['The syntax of for loop in c language is given below:', ""Let's see the simple program of for loop that prints table of 1."", 'If you run this program, you will see above statement infinite times.']","['To make a for loop infinite, we need not give any expression in the syntax. Instead of that, we need to provide two semicolons to validate the syntax of the for loop. This will work as an infinite for loop.']","['Output\n0 2\n1 4\n2 6\n3 8\n4 10    \n\nLoop body\nThe braces {} are used to define the scope of the loop. However, if the loop contains only one statement, then we don\'t need to use braces. A loop without a body is possible. The braces work as a block separator, i.e., the value variable declared inside for loop is valid only for that block and not outside. Consider the following example.\n\n#include<stdio.h>\nvoid main ()\n{\n    int i;\n    for(i=0;i<10;i++)\n    {\n        int i = 20;\n        printf(""%d "",i);\n    }\n}\n\nOutput\n20 20 20 20 20 20 20 20 20 20   \n\nInfinitive for loop in C\nTo make a for loop infinite, we need not give any expression in the syntax. Instead of that, we need to provide two semicolons to validate the syntax of the for loop. This will work as an infinite for loop.\n\n#include<stdio.h>\nvoid main ()\n{\n    for(;;)\n    {\n        printf(""welcome to javatpoint"");\n    }\n}\n\nIf you run this program, you will see above statement infinite times.\n\n\nNext TopicNested Loops in C\n\n\n\n← prev\nnext →\n\n', ""The braces {} are used to define the scope of the loop. However, if the loop contains only one statement, then we don't need to use braces. A loop without a body is possible. The braces work as a block separator, i.e., the value variable declared inside for loop is valid only for that block and not outside. Consider the following example.""]","['for(Expression 1; Expression 2; Expression 3){', '#include', 'int main(){', 'int i=0;', 'for(i=1;i<=10;i++){', 'printf(""%d \\n"",i);', 'return 0;', '#include', 'int main(){', 'int i=1,number=0;', 'printf(""Enter a number: "");', 'scanf(""%d"",&number);', 'for(i=1;i<=10;i++){', 'printf(""%d \\n"",(number*i));', 'return 0;', '#include <stdio.h>', 'int main()', 'int a,b,c;', 'for(a=0,b=12,c=23;a<2;a++)', 'printf(""%d "",a+b+c);', '#include <stdio.h>', 'int main()', 'int i=1;', 'for(;i<5;i++)', 'printf(""%d "",i);', '#include <stdio.h>', 'int main()', 'int i;', 'for(i=0;i<=4;i++)', 'printf(""%d "",i);', '#include <stdio.h>', 'int main()', 'int i,j,k;', 'for(i=0,j=0,k=0;i<4,k<8,j<10;i++)', 'printf(""%d %d %d\\n"",i,j,k);', 'j+=2;', 'k+=3;', '#include <stdio.h>', 'int main()', 'int i;', 'for(i=0;;i++)', 'printf(""%d"",i);', '#include<stdio.h>', 'void main ()', 'int i=0,j=2;', 'for(i = 0;i<5;i++,j=j+2)', 'printf(""%d %d\\n"",i,j);', '#include<stdio.h>', 'void main ()', 'int i;', 'for(i=0;i<10;i++)', 'int i = 20;', 'printf(""%d "",i);', '#include<stdio.h>', 'void main ()', 'for(;;)', 'printf(""welcome to javatpoint"");']","['1\n2\n3\n4\n5\n6\n7\n8\n9\n10', 'Enter a number: 2\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20', 'Enter a number: 1000\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n8000\n9000\n10000', '35 36', '1 2 3 4', '0 1 2 3 4', '0 0 0\n1 2 3\n2 4 6\n3 6 9\n4 8 12', 'infinite loop', '0 2\n1 4\n2 6\n3 8\n4 10', '20 20 20 20 20 20 20 20 20 20']",[],"['|||The expression represents the initialization of the loop variable.|||We can initialize more than one variable in Expression 1.|||Expression 1 is optional.|||In C, we can not declare the variables in Expression 1. However, It can be an exception in some compilers.||||||Expression 2 is a conditional expression. It checks for a specific condition to be satisfied. If it is not, the loop is terminated.|||Expression 2 can have more than one condition. However, the loop will iterate until the last condition becomes false. Other conditions will be treated as statements.|||Expression 2 is optional.|||Expression 2 can perform the task of expression 1 and expression 3. That is, we can initialize the variable as well as update the loop variable in expression 2 itself.|||We can pass zero or non-zero value in expression 2. However, in C, any non-zero value is true, and zero is false by default.||||||Expression 3 is used to update the loop variable.|||We can update more than one variable at the same time.|||Expression 3 is optional.|||']"
34,['Nested Loops in C'],"[""C supports nesting of loops in C. Nesting of loops is the feature in C that allows the looping of statements inside another loop. Let's observe an example of nesting loops in C.""]","['https://www.javatpoint.com/infinite-loop-in-c', 'https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/infinite-loop-in-c', 'https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/infinite-loop-in-c']","['https://static.javatpoint.com/cpages/images/nested-loops-in-c1.png', 'https://static.javatpoint.com/cpages/images/nested-loops-in-c2.png', 'https://static.javatpoint.com/cpages/images/nested-loops-in-c3.png']",[],[],[],[],"['Syntax of Nested loop', ""Outer_loop and Inner_loop are the valid loops that can be a 'for' loop, 'while' loop or 'do-while' loop."", 'Nested for loop', ""The nested for loop means any type of loop which is defined inside the 'for' loop."", 'Example of nested for loop', 'Explanation of the above code', 'Nested while loop', ""The nested while loop means any type of loop which is defined inside the 'while' loop."", 'Example of nested while loop', 'Explanation of the above code.', 'Nested do..while loop', ""The nested do..while loop means any type of loop which is defined inside the 'do..while' loop."", 'Example of nested do..while loop.', 'Explanation of the above code.']",[],"[""Any number of loops can be defined inside another loop, i.e., there is no restriction for defining any number of loops. The nesting level can be defined at n times. You can define any type of loop inside another loop; for example, you can define 'while' loop inside a 'for' loop.""]","['Outer_loop', 'Inner_loop', 'for (initialization; condition; update)', 'for(initialization; condition; update)', '#include <stdio.h>', 'int main()', 'int n;// variable declaration', 'printf(""Enter the value of n :"");', 'for(int i=1;i<=n;i++)  // outer loop', 'for(int j=1;j<=10;j++)  // inner loop', '{', 'printf(""%d\\t"",(i*j)); // printing the value.', '}', 'printf(""\\n"");', 'while(condition)', 'while(condition)', '#include <stdio.h>', 'int main()', 'int rows;  // variable declaration', 'int columns; // variable declaration', 'int k=1; // variable initialization', 'printf(""Enter the number of rows :"");  // input the number of rows.', 'scanf(""%d"",&rows);', 'printf(""\\nEnter the number of columns :""); // input the number of columns.', 'scanf(""%d"",&columns);', 'int a[rows][columns]; //2d array declaration', 'int i=1;', 'while(i<=rows) // outer loop', 'int j=1;', 'while(j<=columns)  // inner loop', '{', 'printf(""%d\\t"",k);  // printing the value of k.', 'k++;   // increment counter', 'j++;', '}', 'i++;', 'printf(""\\n"");', '}while(condition);', '}while(condition);', '#include <stdio.h>', 'int main()', '/*printing the pattern', '********', '********', '********', '******** */', 'int i=1;', 'do           // outer loop', 'int j=1;', 'do       // inner loop', 'printf(""*"");', 'j++;', '}while(j<=8);', 'printf(""\\n"");', 'i++;', '}while(i<=4);']",[],[],"[""|||First, the 'i' variable is initialized to 1 and then program control passes to the i<=n.|||The program control checks whether the condition 'i<=n' is true or not.|||If the condition is true, then the program control passes to the inner loop.|||The inner loop will get executed until the condition is true.|||After the execution of the inner loop, the control moves back to the update of the outer loop, i.e., i++.|||After incrementing the value of the loop counter, the condition is checked again, i.e., i<=n.|||If the condition is true, then the inner loop will be executed again.|||This process will continue until the condition of the outer loop is true.||||||We have created the 2d array, i.e., int a[rows][columns].|||The program initializes the 'i' variable by 1.|||Now, control moves to the while loop, and this loop checks whether the condition is true, then the program control moves to the inner loop.|||After the execution of the inner loop, the control moves to the update of the outer loop, i.e., i++.|||After incrementing the value of 'i', the condition (i<=rows) is checked.|||If the condition is true, the control then again moves to the inner loop.|||This process continues until the condition of the outer loop is true.||||||First, we initialize the outer loop counter variable, i.e., 'i' by 1.|||As we know that the do..while loop executes once without checking the condition, so the inner loop is executed without checking the condition in the outer loop.|||After the execution of the inner loop, the control moves to the update of the i++.|||When the loop counter value is incremented, the condition is checked. If the condition in the outer loop is true, then the inner loop is executed.|||This process will continue until the condition in the outer loop is true.|||""]"
35,['Infinite Loop in C'],['An infinite loop is a looping construct that does not terminate the loop and executes the loop forever. It is also called an indefinite loop or an endless loop. It either produces a continuous output or no output.'],"['https://www.javatpoint.com/c-break', 'https://www.javatpoint.com/nested-loops-in-c', 'https://www.javatpoint.com/c-break', 'https://www.javatpoint.com/nested-loops-in-c', 'https://www.javatpoint.com/c-break']","['https://static.javatpoint.com/cpages/images/infinite-loop-in-c.png', 'https://static.javatpoint.com/cpages/images/infinite-loop-in-c2.png', 'https://static.javatpoint.com/cpages/images/infinite-loop-in-c3.png']",[],"['What is infinite loop?', 'When to use an infinite loop']","['For loop', 'while loop']",[],"['We can create an infinite loop through various loop structures. The following are the loop structures through which we will define the infinite loop:', ""Let's see the infinite 'for' loop. The following is the definition for the infinite for loop:"", ""Let's understand through an example."", 'In the above code, we run the \'for\' loop infinite times, so ""Hello javatpoint"" will be displayed infinitely.', 'Now, we will see how to create an infinite loop using a while loop. The following is the definition for the infinite while loop:', ""Let's look at a simple example."", 'do..while loop', 'The do..while loop can also be used to create the infinite loop. The following is the syntax to create the infinite do..while loop.', 'goto statement', 'We can also use the goto statement to define the infinite loop.', 'In the above code, the goto statement transfers the control to the infinite loop.', ""We can also create the infinite loop with the help of a macro constant. Let's understand through an example."", ""Let's understand through an example."", 'Unintentional infinite loops', ""In the above code, we use the assignment operator (ch='y') which leads to the execution of loop infinite number of times.""]","['An infinite loop is useful for those applications that accept the user input and generate the output continuously until the user exits from the application manually. In the following situations, this type of loop can be used:', ""As we know that all the parts of the 'for' loop are optional, and in the above for loop, we have not mentioned any condition; so, this loop will execute infinite times."", ""In the above while loop, we put '1' inside the loop condition. As we know that any non-zero integer represents the true condition while '0' represents the false condition."", ""In the above code, we have defined a while loop, which runs infinite times as it does not contain any condition. The value of 'i' will be updated an infinite number of times."", ""The above do..while loop represents the infinite condition as we provide the '1' value inside the loop condition. As we already know that non-zero integer represents the true condition, so this loop will run infinite times."", ""In the above code, we have defined a macro named as 'infinite', and its value is 'for(;;)'. Whenever the word 'infinite' comes in a program then it will be replaced with a 'for(;;)'."", 'Till now, we have seen various ways to define an infinite loop. However, we need some approach to come out of the infinite loop. In order to come out of the infinite loop, we can use the break statement.', 'Sometimes the situation arises where unintentional infinite loops occur due to the bug in the code. If we are the beginners, then it becomes very difficult to trace them. Below are some measures to trace an unintentional infinite loop:', 'In the above code, we put the semicolon after the condition of the while loop which leads to the infinite loop. Due to this semicolon, the internal body of the while loop will not execute.', 'The above code will execute the \'for loop\' infinite number of times. As we put the condition (i>=1), which will always be true for every condition, it means that ""hello"" will be printed infinitely.', 'In the above code, the while loop will be executed an infinite number of times as we use the break keyword in an inner loop. This break keyword will bring the control out of the inner loop, not from the outer loop.']","[""In the above code, we have defined the while loop, which will execute an infinite number of times until we press the key 'n'. We have added the 'if' statement inside the while loop. The 'if' statement contains the break keyword, and the break keyword brings control out of the loop."", 'In the above code, the loop will run infinite times as the computer represents a floating-point value as a real value. The computer will represent the value of 4.0 as 3.999999 or 4.000001, so the condition (x !=4.0) will never be false. The solution to this problem is to write the condition as (k<=4.0).']","['for(; ;)', '#include <stdio.h>', 'int main()', 'for(;;)', 'printf(""Hello javatpoint"");', 'return 0;', 'while(1)', '#include <stdio.h>', 'int main()', 'int i=0;', 'while(1)', 'i++;', 'printf(""i is :%d"",i);', 'return 0;', '}while(1);', 'infinite_loop;', 'goto infinite_loop;', '#include <stdio.h>', '#define infinite for(;;)', 'int main()', 'infinite', 'printf(""hello"");', 'return 0;', '#include <stdio.h>', 'int main()', 'char ch;', 'while(1)', 'ch=getchar();', ""if(ch=='n')"", 'break;', 'printf(""hello"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int i=1;', 'while(i<=10);', 'printf(""%d"", i);', 'return 0;', '#include <stdio.h>', 'int main()', ""char ch='n';"", ""while(ch='y')"", 'printf(""hello"");', 'return 0;', '#include <stdio.h>', 'int main()', 'for(int i=1;i>=1;i++)', 'printf(""hello"");', 'return 0;', '#include <stdio.h>', 'int main()', 'while(1)', 'for(int i=1;i<=10;i++)', '{', 'if(i%2==0)', '{', 'break;', '}', '}', 'return 0;', '#include <stdio.h>', 'int main()', 'float x = 3.0;', 'while (x != 4.0) {', 'printf(""x = %f\\n"", x);', 'x += 0.1;', 'return 0;']",[],[],"['|||All the operating systems run in an infinite loop as it does not exist after performing some task. It comes out of an infinite loop only when the user manually shuts down the system.|||All the servers run in an infinite loop as the server responds to all the client requests. It comes out of an indefinite loop only when the administrator shuts down the server manually.|||All the games also run in an infinite loop. The game will accept the user requests until the user exits from the game.||||||for loop|||while loop|||do-while loop|||go to statement|||C macros||||||We should examine the semicolons carefully. Sometimes we put the semicolon at the wrong place, which leads to the infinite loop.||||||We should check the logical conditions carefully. Sometimes by mistake, we place the assignment operator (=) instead of a relational operator (= =).||||||We use the wrong loop condition which causes the loop to be executed indefinitely.||||||We should be careful when we are using the break keyword in the nested loop because it will terminate the execution of the nearest loop, not the entire loop.||||||We should be very careful when we are using the floating-point value inside the loop as we cannot underestimate the floating-point errors.|||']"
36,['C break statement'],"['The break is a keyword in C which is used to bring the program control out of the loop. The break statement is used inside loops or switch statement. The break statement breaks the loop one by one, i.e., in the case of nested loops, it breaks the inner loop first and then proceeds to outer loops. The break statement in C can be used in the following two scenarios:']","['https://www.javatpoint.com/c-continue', 'https://www.javatpoint.com/infinite-loop-in-c', 'https://www.javatpoint.com/c-switch', 'https://www.javatpoint.com/c-continue', 'https://www.javatpoint.com/infinite-loop-in-c', 'https://www.javatpoint.com/c-continue']",['https://static.javatpoint.com/cpages/images/break.png'],[],"['C break statement with the nested loop', 'break statement with while loop', 'break statement with do-while loop']","['Syntax:', 'Flowchart of break in c', 'Example', 'Example of C break statement with switch case\nClick here to see the example of C break with the switch statement.\nC break statement with the nested loop\nIn such case, it breaks only the inner loop, but not outer loop.\n\n#include\nint main(){\nint i=1,j=1;//initializing a local variable  \nfor(i=1;i<=3;i++){    \nfor(j=1;j<=3;j++){  \nprintf(""%d &d\\n"",i,j);  \nif(i==2 && j==2){  \nbreak;//will break loop of j only  \n}  \n}//end of for loop  \nreturn 0;\n}  \n\n\nOutput\n1 1\n1 2\n1 3\n2 1\n2 2\n3 1\n3 2\n3 3\n\nAs you can see the output on the console, 2 3 is not printed because there is a break statement after printing i==2 and j==2. But 3 1, 3 2 and 3 3 are printed because the break statement is used to break the inner loop only.\nbreak statement with while loop\nConsider the following example to use break statement inside while loop.\n\n#include<stdio.h>\nvoid main ()\n{\n    int i = 0;\n    while(1)\n    {\n        printf(""%d  "",i);\n        i++;\n        if(i == 10)\n        break; \n    }\n    printf(""came out of while loop"");\n}\n\nOutput\n0  1  2  3  4  5  6  7  8  9  came out of while loop\t\n\nbreak statement with do-while loop\nConsider the following example to use the break statement with a do-while loop.\n\n#include<stdio.h>\nvoid main ()\n{\n   int n=2,i,choice;\n   do\n   {\n       i=1;\n       while(i<=10)\n       {\n           printf(""%d X %d = %d\\n"",n,i,n*i);\n           i++;\n       }\n       printf(""do you want to continue with the table of %d , enter any non-zero value to continue."",n+1);\n       scanf(""%d"",&choice);\n\tif(choice == 0)\n       {\n           break;\n       }\n       n++;\n   }while(1);\n}\n\nOutput\n2 X 1 = 2\n2 X 2 = 4\n2 X 3 = 6\n2 X 4 = 8\n2 X 5 = 10\n2 X 6 = 12\n2 X 7 = 14\n2 X 8 = 16\n2 X 9 = 18\n2 X 10 = 20\ndo you want to continue with the table of 3 , enter any non-zero value to continue.1\n3 X 1 = 3\n3 X 2 = 6\n3 X 3 = 9\n3 X 4 = 12\n3 X 5 = 15\n3 X 6 = 18\n3 X 7 = 21\n3 X 8 = 24\n3 X 9 = 27\n3 X 10 = 30\ndo you want to continue with the table of 4 , enter any non-zero value to continue.0\n\n\n\nNext Topiccontinue statement in C\n\n\n\n← prev\nnext →\n\n']",[],"['Click here to see the example of C break with the switch statement.', 'In such case, it breaks only the inner loop, but not outer loop.', 'Consider the following example to use break statement inside while loop.', 'Consider the following example to use the break statement with a do-while loop.']","['As you can see the output on the console, 2 3 is not printed because there is a break statement after printing i==2 and j==2. But 3 1, 3 2 and 3 3 are printed because the break statement is used to break the inner loop only.']",[],"['#include<stdio.h>', '#include<stdlib.h>', 'void main ()', 'for(i = 0; i<10; i++)', 'printf(""%d "",i);', 'if(i == 5)', 'break;', 'printf(""came outside of loop i = %d"",i);', '#include', 'int main(){', 'int i=1,j=1;//initializing a local variable', 'for(i=1;i<=3;i++){', 'for(j=1;j<=3;j++){', 'printf(""%d &d\\n"",i,j);', 'if(i==2 && j==2){', 'break;//will break loop of j only', '}//end of for loop', 'return 0;', '#include<stdio.h>', 'void main ()', 'int i = 0;', 'while(1)', 'printf(""%d  "",i);', 'i++;', 'if(i == 10)', 'break;', 'printf(""came out of while loop"");', '#include<stdio.h>', 'void main ()', 'int n=2,i,choice;', 'i=1;', 'while(i<=10)', '{', 'printf(""%d X %d = %d\\n"",n,i,n*i);', 'i++;', '}', 'printf(""do you want to continue with the table of %d , enter any non-zero value to continue."",n+1);', 'scanf(""%d"",&choice);', 'if(choice == 0)', '{', 'break;', '}', 'n++;', '}while(1);']","['0 1 2 3 4 5 came outside of loop i = 5', '1 1\n1 2\n1 3\n2 1\n2 2\n3 1\n3 2\n3 3', '0  1  2  3  4  5  6  7  8  9  came out of while loop', '2 X 1 = 2\n2 X 2 = 4\n2 X 3 = 6\n2 X 4 = 8\n2 X 5 = 10\n2 X 6 = 12\n2 X 7 = 14\n2 X 8 = 16\n2 X 9 = 18\n2 X 10 = 20\ndo you want to continue with the table of 3 , enter any non-zero value to continue.1\n3 X 1 = 3\n3 X 2 = 6\n3 X 3 = 9\n3 X 4 = 12\n3 X 5 = 15\n3 X 6 = 18\n3 X 7 = 21\n3 X 8 = 24\n3 X 9 = 27\n3 X 10 = 30\ndo you want to continue with the table of 4 , enter any non-zero value to continue.0']",[],['|||With switch case|||With loop|||']
37,['C continue statement'],['The continue statement in C language is used to bring the program control to the beginning of the loop. The continue statement skips some lines of code inside the loop and continues with the next iteration. It is mainly used for a condition so that we can skip some code for a particular condition.'],"['https://www.javatpoint.com/c-goto', 'https://www.javatpoint.com/c-break', 'https://www.javatpoint.com/c-goto', 'https://www.javatpoint.com/c-break', 'https://www.javatpoint.com/c-goto']",[],[],['C continue statement with inner loop'],['Syntax:'],[],"['As you can see, 5 is not printed on the console because loop is continued at i==5.', 'In such case, C continue statement continues only inner loop, but not outer loop.', 'As you can see, 2 2 is not printed on the console because inner loop is continued at i==2 and j==2.']",[],[],"['continue;', '#include<stdio.h>', 'void main ()', 'int i = 0;', 'while(i!=10)', 'printf(""%d"", i);', 'continue;', '#include', 'int main(){', 'int i=1;//initializing a local variable', 'for(i=1;i<=10;i++){', 'if(i==5){//if value of i is equal to 5, it will continue the loop', 'continue;', 'printf(""%d \\n"",i);', '}//end of for loop', 'return 0;', '#include', 'int main(){', 'int i=1,j=1;//initializing a local variable', 'for(i=1;i<=3;i++){', 'for(j=1;j<=3;j++){', 'if(i==2 && j==2){', 'continue;//will continue loop of j only', 'printf(""%d %d\\n"",i,j);', '}//end of for loop', 'return 0;']","['infinite loop', '1\n2\n3\n4\n6\n7\n8\n9\n10', '1 1\n1 2\n1 3\n2 1\n2 3\n3 1\n3 2\n3 3']",[],[]
38,['C goto statement'],"[""The goto statement is known as jump statement in C. As the name suggests, goto is used to transfer the program control to a predefined label. The goto statment can be used to repeat some part of the code for a particular condition. It can also be used to break the multiple loops which can't be done by using a single break statement. However, using goto is avoided these days since it makes the program less readable and complecated.""]","['https://www.javatpoint.com/type-casting-in-c', 'https://www.javatpoint.com/c-continue', 'https://www.javatpoint.com/type-casting-in-c', 'https://www.javatpoint.com/c-continue', 'https://www.javatpoint.com/type-casting-in-c']",[],[],"['goto example', 'When should we use goto?']",[],[],"[""Let's see a simple example to use goto statement in C language.""]",['The only condition in which using goto is preferable is when we need to break the multiple loops using a single statement at the same time. Consider the following example.'],[],"['goto label;', '#include <stdio.h>', 'int main()', 'int num,i=1;', 'printf(""Enter the number whose table you want to print?"");', 'scanf(""%d"",#);', 'table:', 'printf(""%d x %d = %d\\n"",num,i,num*i);', 'if(i<=10)', 'goto table;', '#include <stdio.h>', 'int main()', 'int i, j, k;', 'for(i=0;i<10;i++)', 'for(j=0;j<5;j++)', 'for(k=0;k<3;k++)', 'printf(""%d %d %d\\n"",i,j,k);', 'if(j == 3)', '{', 'goto out;', '}', 'printf(""came out of the loop"");']","['Enter the number whose table you want to print?10\n10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100', '0 0 0\n0 0 1\n0 0 2\n0 1 0\n0 1 1\n0 1 2\n0 2 0\n0 2 1\n0 2 2\n0 3 0\ncame out of the loop']",[],[]
39,['Type Casting in C'],"['Typecasting allows us to convert one data type into other. In C language, we use cast operator for typecasting which is denoted by (type).']","['https://www.javatpoint.com/functions-in-c', 'https://www.javatpoint.com/c-goto', 'https://www.javatpoint.com/functions-in-c', 'https://www.javatpoint.com/c-goto', 'https://www.javatpoint.com/functions-in-c']",[],[],['Type Casting example'],[],['Note: It is always recommended to convert the lower value to higher for avoiding data loss.'],"['Without Type Casting:', 'With Type Casting:', ""Let's see a simple example to cast int value into the float.""]",[],[],"['(type)value;', 'int f= 9/4;', 'printf(""f : %d\\n"", f );//Output: 2', 'float f=(float) 9/4;', 'printf(""f : %f\\n"", f );//Output: 2.250000', '#include', 'int main(){', 'float f= (float)9/4;', 'printf(""f : %f\\n"", f );', 'return 0;']",['f : 2.250000'],[],[]
40,['C Control Statements Test 1'],"['C control statements test paper contains questions from decision statement: if-else and switch, loop statement: for loop, while loop & do-while loop and jump statement: break and continue.']","['https://www.javatpoint.com/c-control-statements-2', 'https://www.javatpoint.com/c-fundamental-4', 'https://www.javatpoint.com/c-fundamental-4', 'https://www.javatpoint.com/c-control-statements-2']",[],[],[],[],[],"['The correct option is (d).', 'Explanation:', 'The correct option is (c).', 'Explanation:', 'In program the x is initialized with -1. As x < 5 (since x is -1) it will start with continue statement.', 'Continue means ""stop the current iteration and proceed to the next iteration"". Therefore x becomes 0 now. This will take place until x becomes 5.', 'Therefore javaTpoint will be printed 0 times.', 'The correct option is (b).', 'Explanation:', 'The size of short int which is 2 byte wide does not affect the while() loop operation.', 'Therefore thewhile (i <= 155) loop will executed 155 times.', 'The correct option is (c).', 'Explanation:', 'In program 5th line i.e. if(i = 8) && if(j = 24) the ""Expression syntax"" error occur.', 'Hence the statement should be like if((i == 5) && (j == 10)).', 'Therefore on compiling the program Error: Expression syntax is occurring.', 'The correct option is (a).', 'Explanation:', 'In program switch statement is used for switch(j) it becomes switch(1) because i is initialized with 1.', 'Therefore the case 1: block is get executed. Hence it prints ""Case1"".', 'Printf (""Hello programmer!""); is ignored by the compiler.', 'Hence there is no error in program and prints ""Case1"".']","['In C-languageswitch/case statement is defined by the language specification to use an int value therefore we cannot use a float value in switch/case statement.', 'Now if the value of x=5, it will enter the else part where it encounters the break statement, as a result it will come out of for loop. Hence it will not go to printf statement.']",[],"['#include', 'int main()', 'int x;', 'for(x=-1; x<=10; x++)', 'if(x < 5)', 'continue;', 'else', 'break;', 'printf(""javaTpoint"");', 'return 0;', '#include', 'int main()', 'int i=1;', 'while(i <= 155)', 'printf(""%c %d\\n"", i, i);', 'i++;', 'return 0;', '#include', 'int main()', 'int i = 8, j = 24;', 'if(i = 8) && if(j = 24)', 'printf(""Welcome Programmer"");', 'return 0;', '#include', 'int main()', 'int j = 1;', 'switch(j)', 'printf(""Hello programmer!"");', 'case 1:', 'printf(""Case1"");', 'break;', 'case 2:', 'printf(""Case2"");', 'break;', 'return 0;']",[],[],[]
41,['C Functions'],"['In c, we can divide a large program into the basic building blocks known as function. The function contains the set of programming statements enclosed by {}. A function can be called multiple times to provide reusability and modularity to the C program. In other words, we can say that the collection of functions creates a program. The function is also known as procedureor subroutinein other programming languages.']","['https://www.javatpoint.com/call-by-value-and-call-by-reference-in-c', 'https://www.javatpoint.com/type-casting-in-c', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-c', 'https://www.javatpoint.com/type-casting-in-c', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-c']",['https://static.javatpoint.com/cpages/images/c-function.jpg'],[],"['Advantage of functions in C', 'Function Aspects', 'Types of Functions', 'Return Value', 'Different aspects of function calling', 'C Library Functions']","['Example for Function without argument and return value', 'Example for Function without argument and with return value', 'Example for Function with argument and without return value', 'Example for Function with argument and with return value']",[],"['There are the following advantages of C functions.', 'There are three aspects of a C function.', 'The syntax of creating function in c language is given below:', 'There are two types of functions in C programming:', ""A C function may or may not return a value from the function. If you don't have to return any value from the function, use void for the return type."", ""Let's see a simple example of C function that doesn't return any value from the function."", 'Example without return value:', ""Let's see a simple example of C function that returns int value from the function."", 'Example with return value:', 'Now, you need to call the function, to get the value of the function.', 'Example 2: program to calculate the area of the square', 'Example 2: program to calculate the average of five numbers.', 'Example 2: Program to check whether a number is even or odd', 'The list of mostly used header files is given in the following table.']","['If you want to return any value from the function, you need to use any data type such as int, long, char, etc. The return type depends on the value to be returned from the function.', 'In the above example, we have to return 10 as a value, so the return type is int. If you want to return floating-point value (e.g., 10.2, 3.1, 54.5, etc), you need to use float as the return type of the method.', 'A function may or may not accept any argument. It may or may not return any value. Based on these facts, There are four different aspects of function calls.']","['Library functions are the inbuilt function in C that are grouped and placed at a common place called the library. Such functions are used to perform some specific operations. For example, printf is a library function used to print on the console. The library functions are created by the designers of compilers. All C standard library functions are defined inside the different header files saved with the extension .h. We need to include these header files in our program to make use of the library functions defined in such header files. For example, To use the library functions such as printf/scanf we need to include stdio.h in our program which is a header file that contains all the library functions regarding standard input/output.']","['return_type function_name(data_type parameter...){', 'void hello(){', 'printf(""hello c"");', 'int get(){', 'return 10;', 'float get(){', 'return 10.2;', '#include<stdio.h>', 'void printName();', 'void main ()', 'printf(""Hello "");', 'printName();', 'void printName()', 'printf(""Javatpoint"");', '#include<stdio.h>', 'void sum();', 'void main()', 'printf(""\\nGoing to calculate the sum of two numbers:"");', 'sum();', 'void sum()', 'int a,b;', 'printf(""\\nEnter two numbers"");', 'scanf(""%d %d"",&a,&b);', 'printf(""The sum is %d"",a+b);', '#include<stdio.h>', 'int sum();', 'void main()', 'int result;', 'printf(""\\nGoing to calculate the sum of two numbers:"");', 'result = sum();', 'printf(""%d"",result);', 'int sum()', 'int a,b;', 'printf(""\\nEnter two numbers"");', 'scanf(""%d %d"",&a,&b);', 'return a+b;', '#include<stdio.h>', 'int sum();', 'void main()', 'printf(""Going to calculate the area of the square\\n"");', 'float area = square();', 'printf(""The area of the square: %f\\n"",area);', 'int square()', 'float side;', 'printf(""Enter the length of the side in meters: "");', 'scanf(""%f"",&side);', 'return side * side;', '#include<stdio.h>', 'void sum(int, int);', 'void main()', 'int a,b,result;', 'printf(""\\nGoing to calculate the sum of two numbers:"");', 'printf(""\\nEnter two numbers:"");', 'scanf(""%d %d"",&a,&b);', 'sum(a,b);', 'void sum(int a, int b)', 'printf(""\\nThe sum is %d"",a+b);', '#include<stdio.h>', 'void average(int, int, int, int, int);', 'void main()', 'int a,b,c,d,e;', 'printf(""\\nGoing to calculate the average of five numbers:"");', 'printf(""\\nEnter five numbers:"");', 'scanf(""%d %d %d %d %d"",&a,&b,&c,&d,&e);', 'average(a,b,c,d,e);', 'void average(int a, int b, int c, int d, int e)', 'float avg;', 'avg = (a+b+c+d+e)/5;', 'printf(""The average of given five numbers : %f"",avg);', '#include<stdio.h>', 'int sum(int, int);', 'void main()', 'int a,b,result;', 'printf(""\\nGoing to calculate the sum of two numbers:"");', 'printf(""\\nEnter two numbers:"");', 'scanf(""%d %d"",&a,&b);', 'result = sum(a,b);', 'printf(""\\nThe sum is : %d"",result);', 'int sum(int a, int b)', 'return a+b;', '#include<stdio.h>', 'int even_odd(int);', 'void main()', 'int n,flag=0;', 'printf(""\\nGoing to check whether a number is even or odd"");', 'printf(""\\nEnter the number: "");', 'scanf(""%d"",&n);', 'flag = even_odd(n);', 'if(flag == 0)', 'printf(""\\nThe number is odd"");', 'printf(""\\nThe number is even"");', 'int even_odd(int n)', 'if(n%2 == 0)', 'return 1;', 'return 0;']","['Hello Javatpoint', 'Going to calculate the sum of two numbers:\n\nEnter two numbers 10 \n24 \n\nThe sum is 34', 'Going to calculate the sum of two numbers:\n\nEnter two numbers 10 \n24 \n\nThe sum is 34', 'Going to calculate the area of the square \nEnter the length of the side in meters: 10 \nThe area of the square: 100.000000', 'Going to calculate the sum of two numbers:\n\nEnter two numbers 10 \n24 \n\nThe sum is 34', 'Going to calculate the average of five numbers:\nEnter five numbers:10 \n20\n30\n40\n50\nThe average of given five numbers : 30.000000', 'Going to calculate the sum of two numbers:\nEnter two numbers:10\n20 \nThe sum is : 30', 'Going to check whether a number is even or odd\nEnter the number: 100\nThe number is even']","['NC function aspectsSynta&&&Function declarationreturn_type function_name (argument list)&&&Function callfunction_name (argument_list&&&Function definitionreturn_type function_name (argument list) {function body;', 'NHeader fileDescriptio&&&stdio.hThis is a standard input/output header file. It contains all the library functions regarding standard input/output&&&conio.hThis is a console input/output header file&&&string.hIt contains all string related library functions like gets(), puts(),etc&&&stdlib.hThis header file contains all the general library functions like malloc(), calloc(), exit(), etc&&&math.hThis header file contains all the math operations related functions like sqrt(), pow(), etc&&&time.hThis header file contains all the time-related functions&&&ctype.hThis header file contains all character handling functions.&&&stdarg.hVariable argument functions are defined in this header file&&&signal.hAll the signal handling functions are defined in this header file&&&0setjmp.hThis file contains all the jump functions&&&1locale.hThis file contains locale functions&&&2errno.hThis file contains error handling functions&&&3assert.hThis file contains diagnostics functions']","['|||By using functions, we can avoid rewriting same logic/code again and again in a program.|||We can call C functions any number of times in a program and from any place in a program.|||We can track a large C program easily when it is divided into multiple functions.|||Reusability is the main achievement of C functions.|||However, Function calling is always a overhead in a C program.||||||Function declaration A function must be declared globally in a c program to tell the compiler about the function name, function parameters, and return type.|||Function call Function can be called from anywhere in the program. The parameter list must not differ in function calling and function declaration. We must pass the same number of functions as it is declared in the function declaration.|||Function definition It contains the actual statements which are to be executed. It is the most important aspect to which the control comes when the function is called. Here, we must notice that only one value can be returned from the function.||||||function without arguments and without return value|||function without arguments and with return value|||function with arguments and without return value|||function with arguments and with return value|||&&&|||Library Functions: are the functions which are declared in the C header files such as scanf(), printf(), gets(), puts(), ceil(), floor() etc.|||User-defined functions: are the functions which are created by the C programmer, so that he/she can use it many times. It reduces the complexity of a big program and optimizes the code.|||']"
42,['Call by value and Call by reference in C'],"['There are two methods to pass the data into the function in C language, i.e., call by value and call by reference.']","['https://www.javatpoint.com/recursion-in-c', 'https://www.javatpoint.com/functions-in-c', 'https://www.javatpoint.com/recursion-in-c', 'https://www.javatpoint.com/functions-in-c', 'https://www.javatpoint.com/recursion-in-c']",['https://static.javatpoint.com/cpages/images/callbyvalue-callbyreference-in-c.png'],[],"['Call by value in C', 'Call by reference in C', 'Difference between call by value and call by reference in c']",[],"['Output', 'Call by Value Example: Swapping the values of the two variables', 'Output', 'Output', 'Call by reference Example: Swapping the values of the two variables', 'Output']","[""Let's understand call by value and call by reference in c language one by one."", ""Let's try to understand the concept of call by value in c language by the example given below:"", 'Consider the following example for the call by reference.']",[],[],"['#include', 'void change(int num) {', 'printf(""Before adding value inside function num=%d \\n"",num);', 'num=num+100;', 'printf(""After adding value inside function num=%d \\n"", num);', 'int main() {', 'int x=100;', 'printf(""Before function call x=%d \\n"", x);', 'change(x);//passing value in function', 'printf(""After function call x=%d \\n"", x);', 'return 0;', '#include <stdio.h>', 'void swap(int , int); //prototype of the function', 'int main()', 'int a = 10;', 'int b = 20;', 'printf(""Before swapping the values in main a = %d, b = %d\\n"",a,b); // printing the value of a and b in main', 'swap(a,b);', 'printf(""After swapping values in main a = %d, b = %d\\n"",a,b); // The value of actual parameters do not change by changing the formal parameters in call by value, a = 10, b = 20', 'void swap (int a, int b)', 'int temp;', 'temp = a;', 'a=b;', 'b=temp;', 'printf(""After swapping values in function a = %d, b = %d\\n"",a,b); // Formal parameters, a = 20, b = 10', '#include', 'void change(int *num) {', 'printf(""Before adding value inside function num=%d \\n"",*num);', '(*num) += 100;', 'printf(""After adding value inside function num=%d \\n"", *num);', 'int main() {', 'int x=100;', 'printf(""Before function call x=%d \\n"", x);', 'change(&x);//passing reference in function', 'printf(""After function call x=%d \\n"", x);', 'return 0;', '#include <stdio.h>', 'void swap(int *, int *); //prototype of the function', 'int main()', 'int a = 10;', 'int b = 20;', 'printf(""Before swapping the values in main a = %d, b = %d\\n"",a,b); // printing the value of a and b in main', 'swap(&a,&b);', 'printf(""After swapping values in main a = %d, b = %d\\n"",a,b); // The values of actual parameters do change in call by reference, a = 10, b = 20', 'void swap (int *a, int *b)', 'int temp;', 'temp = *a;', '*a=*b;', '*b=temp;', 'printf(""After swapping values in function a = %d, b = %d\\n"",*a,*b); // Formal parameters, a = 20, b = 10']","['Before function call x=100\nBefore adding value inside function num=100\nAfter adding value inside function num=200\nAfter function call x=100', 'Before swapping the values in main a = 10, b = 20\nAfter swapping values in function a = 20, b = 10\nAfter swapping values in main a = 10, b = 20', 'Before function call x=100\nBefore adding value inside function num=100\nAfter adding value inside function num=200\nAfter function call x=200', 'Before swapping the values in main a = 10, b = 20\nAfter swapping values in function a = 20, b = 10\nAfter swapping values in main a = 20, b = 10']",['o.Call by valueCall by referenc&&&A copy of the value is passed into the functionAn address of value is passed into the functio&&&Changes made inside the function is limited to the function only. The values of the actual parameters do not change by changing the formal parameters.Changes made inside the function validate outside of the function also. The values of the actual parameters do change by changing the formal parameters&&&Actual and formal arguments are created at the different memory locationActual and formal arguments are created at the same memory locatio'],"['|||In call by value method, the value of the actual parameters is copied into the formal parameters. In other words, we can say that the value of the variable is used in the function call in the call by value method.|||In call by value method, we can not modify the value of the actual parameter by the formal parameter.|||In call by value, different memory is allocated for actual and formal parameters since the value of the actual parameter is copied into the formal parameter.|||The actual parameter is the argument which is used in the function call whereas formal parameter is the argument which is used in the function definition.||||||In call by reference, the address of the variable is passed into the function call as the actual parameter.|||The value of the actual parameters can be modified by changing the formal parameters since the address of the actual parameters is passed.|||In call by reference, the memory allocation is similar for both formal parameters and actual parameters. All the operations in the function are performed on the value stored at the address of the actual parameters, and the modified value gets stored at the same address.|||']"
43,['Recursion in C'],"['Recursion is the process which comes into existence when a function calls a copy of itself to work on a smaller problem. Any function which calls itself is called recursive function, and such function calls are called recursive calls. Recursion involves several numbers of recursive calls. However, it is important to impose a termination condition of recursion. Recursion code is shorter than iterative code however it is difficult to understand.']","['https://www.javatpoint.com/storage-classes-in-c', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-c', 'https://www.javatpoint.com/storage-classes-in-c', 'https://www.javatpoint.com/call-by-value-and-call-by-reference-in-c', 'https://www.javatpoint.com/storage-classes-in-c']","['https://static.javatpoint.com/cpages/images/recursion.png', 'https://static.javatpoint.com/cpages/images/stack_tracing_recursion.png']",[],"['Recursive Function', 'Example of recursion in C', 'Memory allocation of Recursive method']",[],"['Output', 'Output']","['In the following example, recursion is used to calculate the factorial of a number.', 'We can understand the above program of the recursive method call by the figure given below:', 'Pseudocode for writing any recursive function is given below.', ""Let's see an example to find the nth term of the Fibonacci series."", 'Let us consider the following example to understand the memory allocation of the recursive functions.', 'Explanation']","['Recursion cannot be applied to all the problem, but it is more useful for the tasks that can be defined in terms of similar subtasks. For Example, recursion may be applied to sorting, searching, and traversal problems.', ""The case at which the function doesn't recur is called the base case whereas the instances where the function keeps calling itself to perform a subtask, is called the recursive case. All the recursive functions can be written using this format.""]","['Generally, iterative solutions are more efficient than recursion since function call is always overhead. Any problem that can be solved recursively, can also be solved iteratively. However, some problems are best suited to be solved by the recursion, for example, tower of Hanoi, Fibonacci series, factorial finding, etc.', 'A recursive function performs the tasks by dividing it into the subtasks. There is a termination condition defined in the function which is satisfied by some specific subtask. After this, the recursion stops and the final result is returned from the function.', 'Each recursive call creates a new copy of that method in the memory. Once some data is returned by the method, the copy is removed from the memory. Since all the variables and other stuff declared inside function get stored in the stack, therefore a separate stack is maintained at each recursive call. Once the value is returned from the corresponding function, the stack gets destroyed. Recursion involves so much complexity in resolving and tracking the values at each recursive call. Therefore we need to maintain the stack and track the values of the variables defined in the stack.', 'Let us examine this recursive function for n = 4. First, all the stacks are maintained which prints the corresponding value of n until n becomes 0, Once the termination condition is reached, the stacks get destroyed one by one by returning 0 to its calling stack. Consider the following image for more information regarding the stack trace for the recursive functions.']","['#include <stdio.h>', 'int fact (int);', 'int main()', 'int n,f;', 'printf(""Enter the number whose factorial you want to calculate?"");', 'scanf(""%d"",&n);', 'f = fact(n);', 'printf(""factorial = %d"",f);', 'int fact(int n)', 'if (n==0)', 'return 0;', 'else if ( n == 1)', 'return 1;', 'else', 'return n*fact(n-1);', 'if (test_for_base)', 'return some_value;', 'else if (test_for_another_base)', 'return some_another_value;', 'recursive call;', '#include<stdio.h>', 'int fibonacci(int);', 'void main ()', 'int n,f;', 'printf(""Enter the value of n?"");', 'scanf(""%d"",&n);', 'f = fibonacci(n);', 'printf(""%d"",f);', 'int fibonacci (int n)', 'if (n==0)', 'return 0;', 'else if (n == 1)', 'return 1;', 'else', 'return fibonacci(n-1)+fibonacci(n-2);', 'int display (int n)', 'if(n == 0)', 'return 0; // terminating condition', 'printf(""%d"",n);', 'return display(n-1); // recursive call']","['Enter the number whose factorial you want to calculate?5\nfactorial = 120', 'Enter the value of n?12 \n144']",[],[]
44,['Storage Classes in C'],"['Storage classes in C are used to determine the lifetime, visibility, memory location, and initial value of a variable. There are four types of storage classes in C']","['https://www.javatpoint.com/c-array', 'https://www.javatpoint.com/recursion-in-c', 'https://www.javatpoint.com/c-array', 'https://www.javatpoint.com/recursion-in-c', 'https://www.javatpoint.com/c-array']",[],[],"['Automatic', 'Static', 'Register', 'External']",[],"['Example 1', 'Example 2', 'Example 1', 'Example 2', 'Example 1', 'Example 2', 'Example 1', 'Example 2', 'Example 3', 'Example 4', 'Example 5']",[],[],[],"['#include <stdio.h>', 'int main()', 'int a; //auto', 'float c;', 'printf(""%d %c %f"",a,b,c); // printing initial default value of automatic variables a, b, and c.', 'return 0;', '#include <stdio.h>', 'int main()', 'int a = 10,i;', 'printf(""%d "",++a);', 'int a = 20;', 'for (i=0;i<3;i++)', 'printf(""%d "",a); // 20 will be printed 3 times since it is the local value of a', 'printf(""%d "",a); // 11 will be printed since the scope of a = 20 is ended.', '#include<stdio.h>', 'static char c;', 'static int i;', 'static float f;', 'static char s[100];', 'void main ()', 'printf(""%d %d %f %s"",c,i,f); // the initial default value of c, i, and f will be printed.', '#include', 'void sum()', 'static int a = 10;', 'static int b = 24;', 'printf(""%d %d \\n"",a,b);', 'void main()', 'for(i = 0; i< 3; i++)', 'sum(); // The static variables holds their value between multiple function calls.', '#include <stdio.h>', 'int main()', 'register int a; // variable a is allocated memory in the CPU register. The initial default value of a is 0.', 'printf(""%d"",a);', '#include <stdio.h>', 'int main()', 'register int a = 0;', 'printf(""%u"",&a); // This will give a compile time error since we can not access the address of a register variable.', '#include <stdio.h>', 'int main()', 'extern int a;', 'printf(""%d"",a);', '#include', 'int main()', 'extern int a; // variable a is defined globally, the memory will not be allocated to a', 'printf(""%d"",a);', '#include', 'int main()', 'extern int a = 0; // this will show a compiler error since we can not use extern and initializer at same time', 'printf(""%d"",a);', '#include', 'int main()', 'extern int a; // Compiler will search here for a variable a defined and initialized somewhere in the pogram or not.', 'printf(""%d"",a);', 'int a = 20;', 'extern int a;', 'int a = 10;', '#include', 'int main()', 'printf(""%d"",a);', 'int a = 20; // compiler will show an error at this line']","['garbage garbage garbage', '11 20 20 20 11', '0 0 0.000000 (null)', '10 24 \n11 25 \n12 26', '0', 'main.c:5:5: error: address of register variable ?a? requested\nprintf(""%u"",&a);\n^~~~~~', ""main.c:(.text+0x6): undefined reference to `a'\ncollect2: error: ld returned 1 exit status"", '0', 'compile time error \nmain.c: In function ?main?:\nmain.c:5:16: error: ?a? has both ?extern? and initializer\nextern int a = 0;', '20', 'compile time error']","['torage ClassesStorage PlaceDefault ValueScopeLifetim&&&utoRAMGarbage ValueLocalWithin functio&&&xternRAMZeroGlobalTill the end of the main program Maybe declared anywhere in the progra&&&taticRAMZeroLocalTill the end of the main program, Retains value between multiple functions cal&&&egisterRegisterGarbage ValueLocalWithin the functio']","['|||Automatic|||External|||Static|||Register||||||Automatic variables are allocated memory automatically at runtime.|||The visibility of the automatic variables is limited to the block in which they are defined.|||The scope of the automatic variables is limited to the block in which they are defined.|||The automatic variables are initialized to garbage by default.|||The memory assigned to automatic variables gets freed upon exiting from the block.|||The keyword used for defining automatic variables is auto.|||Every local variable is automatic in C by default.||||||The variables defined as static specifier can hold their value between the multiple function calls.|||Static local variables are visible only to the function or the block in which they are defined.|||A same static variable can be declared many times but can be assigned at only one time.|||Default initial value of the static integral variable is 0 otherwise null.|||The visibility of the static global variable is limited to the file in which it has declared.|||The keyword used to define static variable is static.||||||The variables defined as the register is allocated the memory into the CPU registers depending upon the size of the memory remaining in the CPU.|||We can not dereference the register variables, i.e., we can not use &operator for the register variable.|||The access time of the register variables is faster than the automatic variables.|||The initial default value of the register local variables is 0.|||The register keyword is used for the variable which should be stored in the CPU register. However, it is compiler?s choice whether or not; the variables can be stored in the register.|||We can store pointers into the register, i.e., a register can store the address of a variable.|||Static variables can not be stored into the register since we can not use more than one storage specifier for the same variable.||||||The external storage class is used to tell the compiler that the variable defined as extern is declared with an external linkage elsewhere in the program.|||The variables declared as extern are not allocated any memory. It is only declaration and intended to specify that the variable is declared elsewhere in the program.|||The default initial value of external integral type is 0 otherwise null.|||We can only initialize the extern variable globally, i.e., we can not initialize the external variable within any block or method.|||An external variable can be declared many times but can be initialized at only once.|||If a variable is declared as external then the compiler searches for that variable to be initialized somewhere in the program which may be extern or static. If it is not, then the compiler will show an error.|||']"
45,['C Functions Test 1'],['The correct option is (a).'],"['https://www.javatpoint.com/c-functions-2', 'https://www.javatpoint.com/c-operators-and-expression-4', 'https://www.javatpoint.com/c-functions-2', 'https://www.javatpoint.com/c-functions-2']",[],[],[],[],[],"['Explanation:', 'The correct option is (a).', 'Explanation:', 'On passing the name of array as function argument; the name contain the base address of an array and base address is updated inside a main function.', 'The correct option is (c).', 'Explanation:', 'The first occurrence of a substring in another string is founds in strstr() function.', 'The correct option is (c).', 'Explanation:', 'The correct option is (a).', 'Explanation:']","[""realloc() is a built in library function for adjusting the dynamic memory size. malloc() and calloc() allocates the memory but don't resize. There is no built in function with a name resize()."", 'In C language, the return function stops the execution of function and returns a value to calling function. Execution is begins in a calling function by instantly following the call.']","['The strcmp() is a built-in function available in ""string.h"" header file. It is used for comparing the two strings. It returns 0 if both are same strings. It returns positive value greater than 0 if first string is greater than second string, otherwise it returns negative value.']",[],[],[],[]
46,['C Array'],"['An array is defined as the collection of similar type of data items stored at contiguous memory locations. Arrays are the derived data type in C programming language which can store the primitive type of data such as int, char, double, float, etc. It also has the capability to store the collection of derived data types, such as pointers, structure, etc. The array is the simplest data structure where each data element can be randomly accessed by using its index number.']","['https://www.javatpoint.com/two-dimensional-array-in-c', 'https://www.javatpoint.com/storage-classes-in-c', 'https://www.javatpoint.com/two-dimensional-array-in-c', 'https://www.javatpoint.com/storage-classes-in-c', 'https://www.javatpoint.com/two-dimensional-array-in-c']",['https://static.javatpoint.com/cpages/images/arrayinitialization.png'],[],"['Declaration of C Array', 'Initialization of C Array', 'C Array: Declaration with Initialization', 'C Array Example: Sorting an array']","['Properties of Array', 'Advantage of C Array', 'Disadvantage of C Array', 'C array example']",[],"['By using the array, we can access the elements easily. Only a few lines of code are required to access the elements of the array.', 'The array contains the following properties.', '1) Code Optimization: Less code to the access the data.', '2) Ease of traversing: By using the for loop, we can retrieve the elements of an array easily.', '3) Ease of sorting: To sort the elements of the array, we need a few lines of code only.', '4) Random Access: We can access any element randomly using the array.', 'We can declare an array in the c language in the following way.', 'Now, let us see the example to declare the array.', 'Here, int is the data_type, marks are the array_name, and 5 is the array_size.', ""We can initialize the c array at the time of declaration. Let's see the code."", 'In such case, there is no requirement to define the size. So it may also be written as the following code.', ""Let's see the C program to declare and initialize the array in C."", 'In the following program, we are using bubble sort method to sort the array in ascending order.']","[""1) Fixed Size: Whatever size, we define at the time of declaration of the array, we can't exceed the limit. So, it doesn't grow the size dynamically like LinkedList which we will learn later."", 'The simplest way to initialize an array is by using the index of each element. We can initialize each element of the array by using the index. Consider the following example.']","[""C array is beneficial if you have to store similar elements. For example, if we want to store the marks of a student in 6 subjects, then we don't need to define different variables for the marks in the different subject. Instead of that, we can define an array which can store the marks in each subject at the contiguous memory locations.""]","['data_type array_name[array_size];', 'int marks[5];', 'marks[0]=80;//initialization of array', 'marks[1]=60;', 'marks[2]=70;', 'marks[3]=85;', 'marks[4]=75;', '#include<stdio.h>', 'int main(){', 'int i=0;', 'int marks[5];//declaration of array', 'marks[0]=80;//initialization of array', 'marks[1]=60;', 'marks[2]=70;', 'marks[3]=85;', 'marks[4]=75;', 'for(i=0;i<5;i++){', 'printf(""%d \\n"",marks[i]);', '}//end of for loop', 'return 0;', 'int marks[5]={20,30,40,50,60};', 'int marks[]={20,30,40,50,60};', '#include', 'int main(){', 'int i=0;', 'int marks[5]={20,30,40,50,60};//declaration and initialization of array', 'for(i=0;i<5;i++){', 'printf(""%d \\n"",marks[i]);', 'return 0;', '#include<stdio.h>', 'void main ()', 'int i, j,temp;', 'int a[10] = { 10, 9, 7, 101, 23, 44, 12, 78, 34, 23};', 'for(i = 0; i<10; i++)', 'for(j = i+1; j<10; j++)', '{', 'if(a[j] > a[i])', '{', 'temp = a[i];', 'a[i] = a[j];', 'a[j] = temp;', '}', '}', '}', 'printf(""Printing Sorted Element List ...\\n"");', 'for(i = 0; i<10; i++)', 'printf(""%d\\n"",a[i]);', '#include<stdio.h>', 'void main ()', 'int arr[100],i,n,largest,sec_largest;', 'printf(""Enter the size of the array?"");', 'scanf(""%d"",&n);', 'printf(""Enter the elements of the array?"");', 'for(i = 0; i<n; i++)', 'scanf(""%d"",&arr[i]);', 'largest = arr[0];', 'sec_largest = arr[1];', 'for(i=0;i<n;i++)', 'if(arr[i]>largest)', '{', 'sec_largest = largest;', 'largest = arr[i];', '}', 'else if (arr[i]>sec_largest && arr[i]!=largest)', '{', 'sec_largest=arr[i];', '}', 'printf(""largest = %d, second largest = %d"",largest,sec_largest);']","['80\n60\n70\n85\n75', '20\n30\n40\n50\n60']",[],"['|||Each element of an array is of same data type and carries the same size, i.e., int = 4 bytes.|||Elements of the array are stored at contiguous memory locations where the first element is stored at the smallest memory location.|||Elements of the array can be randomly accessed since we can calculate the address of each element of the array with the given base address and the size of the data element.|||']"
47,['Two Dimensional Array in C'],"['The two-dimensional array can be defined as an array of arrays. The 2D array is organized as matrices which can be represented as the collection of rows and columns.\nHowever, 2D arrays are created to implement a relational database lookalike data structure. It provides ease of holding the bulk of data at once which can be passed to any number of functions wherever required.']","['https://www.javatpoint.com/return-an-array-in-c', 'https://www.javatpoint.com/c-array', 'https://www.javatpoint.com/return-an-array-in-c', 'https://www.javatpoint.com/c-array', 'https://www.javatpoint.com/return-an-array-in-c']",[],[],"['Declaration of two dimensional Array in C', 'Initialization of 2D Array in C']","['Two-dimensional array example in C', 'C 2D array example: Storing elements in a matrix and printing it.']",[],"['The syntax to declare the 2D array is given below.', 'Consider the following example.', 'Here, 4 is the number of rows, and 3 is the number of columns.']",[],"[""In the 1D array, we don't need to specify the size of the array if the declaration and initialization are being done simultaneously. However, this will not work with 2D arrays. We will have to define at least the second dimension of the array. The two-dimensional array can be declared and defined in the following way.""]","['data_type array_name[rows][columns];', 'int twodimen[4][3];', 'int arr[4][3]={{1,2,3},{2,3,4},{3,4,5},{4,5,6}};', '#include<stdio.h>', 'int main(){', 'int i=0,j=0;', 'int arr[4][3]={{1,2,3},{2,3,4},{3,4,5},{4,5,6}};', 'for(i=0;i<4;i++){', 'for(j=0;j<3;j++){', 'printf(""arr[%d] [%d] = %d \\n"",i,j,arr[i][j]);', '}//end of j', '}//end of i', 'return 0;', '#include <stdio.h>', 'void main ()', 'int arr[3][3],i,j;', 'for (i=0;i<3;i++)', 'for (j=0;j<3;j++)', '{', 'printf(""Enter a[%d][%d]: "",i,j);', 'scanf(""%d"",&arr[i][j]);', '}', 'printf(""\\n printing the elements ....\\n"");', 'for(i=0;i<3;i++)', 'printf(""\\n"");', 'for (j=0;j<3;j++)', '{', 'printf(""%d\\t"",arr[i][j]);', '}']","['arr[0][0] = 1\narr[0][1] = 2\narr[0][2] = 3\narr[1][0] = 2\narr[1][1] = 3\narr[1][2] = 4\narr[2][0] = 3\narr[2][1] = 4\narr[2][2] = 5\narr[3][0] = 4\narr[3][1] = 5\narr[3][2] = 6', 'Enter a[0][0]: 56   \nEnter a[0][1]: 10   \nEnter a[0][2]: 30  \nEnter a[1][0]: 34  \nEnter a[1][1]: 21 \nEnter a[1][2]: 34    \n\nEnter a[2][0]: 45\nEnter a[2][1]: 56\nEnter a[2][2]: 78   \n\n printing the elements .... \n \n56      10      30  \n34      21      34  \n45      56      78']",[],[]
48,['Return an Array in C'],"['An array is a type of data structure that stores a fixed-size of a homogeneous collection of data. In short, we can say that array is a collection of variables of the same type.']","['https://www.javatpoint.com/passing-array-to-function-in-c', 'https://www.javatpoint.com/two-dimensional-array-in-c', 'https://www.javatpoint.com/passing-array-to-function-in-c', 'https://www.javatpoint.com/two-dimensional-array-in-c', 'https://www.javatpoint.com/passing-array-to-function-in-c']","['https://static.javatpoint.com/cpages/images/return-an-array-in-c1.png', 'https://static.javatpoint.com/cpages/images/return-an-array-in-c2.png', 'https://static.javatpoint.com/cpages/images/return-an-array-in-c3.png', 'https://static.javatpoint.com/cpages/images/return-an-array-in-c4.png', 'https://static.javatpoint.com/cpages/images/return-an-array-in-c5.png', 'https://static.javatpoint.com/cpages/images/return-an-array-in-c6.png', 'https://static.javatpoint.com/cpages/images/return-an-array-in-c7.png', 'https://static.javatpoint.com/cpages/images/return-an-array-in-c8.png']",[],['What is an Array?'],[],"['Note: From the above examples, we observe that array is passed to a function as a reference which means that array also persist outside the function.']","[""Let's first see how to pass a single-dimensional array to a function."", 'Passing array to a function as a pointer', 'Now, we will see how to pass an array to a function as a pointer.', 'In the above code, we have passed the array to the function as a pointer. The function printarray() prints the elements of an array.', 'How to return an array from a function', 'Returning pointer pointing to the array', 'There are three right ways of returning an array to a function:', 'Returning array by passing an array which is to be returned as a parameter to the function.', 'Returning array using malloc() function.', 'Using Static Variable', 'Using Structure']","['In the above program, we have first created the array arr[] and then we pass this array to the function getarray(). The getarray() function prints all the elements of the array arr[].', ""In the above code, we have created the variable arr[] as static in getarray() function, which is available throughout the program. Therefore, the function getarray() returns the actual memory location of the variable 'arr'.""]","[""For example, if we want to declare 'n' number of variables, n1, n2...n., if we create all these variables individually, then it becomes a very tedious task. In such a case, we create an array of variables having the same type. Each element of an array can be accessed using an index of the element."", ""In the above program, getarray() function returns a variable 'arr'. It returns a local variable, but it is an illegal memory location to be returned, which is allocated within a function in the stack. Since the program control comes back to the main() function, and all the variables in a stack are freed. Therefore, we can say that this program is returning memory location, which is already de-allocated, so the output of the program is a segmentation fault.""]","['#include <stdio.h>', 'void getarray(int arr[])', 'printf(""Elements of array are : "");', 'for(int i=0;i<5;i++)', 'printf(""%d "", arr[i]);', 'int main()', 'int arr[5]={45,67,34,78,90};', 'getarray(arr);', 'return 0;', '#include <stdio.h>', 'void printarray(char *arr)', 'printf(""Elements of array are : "");', 'for(int i=0;i<5;i++)', 'printf(""%c "", arr[i]);', 'int main()', ""char arr[5]={'A','B','C','D','E'};"", 'printarray(arr);', 'return 0;', '#include <stdio.h>', 'int *getarray()', 'int arr[5];', 'printf(""Enter the elements in an array : "");', 'for(int i=0;i<5;i++)', 'scanf(""%d"", &arr[i]);', 'return arr;', 'int main()', 'int *n;', 'n=getarray();', 'printf(""\\nElements of array are :"");', 'for(int i=0;i<5;i++)', 'printf(""%d"", n[i]);', 'return 0;', '#include <stdio.h>', 'int *getarray(int *a)', 'printf(""Enter the elements in an array : "");', 'for(int i=0;i<5;i++)', 'scanf(""%d"", &a[i]);', 'return a;', 'int main()', 'int *n;', 'int a[5];', 'n=getarray(a);', 'printf(""\\nElements of array are :"");', 'for(int i=0;i<5;i++)', 'printf(""%d"", n[i]);', 'return 0;', '#include <stdio.h>', '#include<malloc.h>', 'int *getarray()', 'int size;', 'printf(""Enter the size of the array : "");', 'scanf(""%d"",&size);', 'int *p= malloc(sizeof(size));', 'printf(""\\nEnter the elements in an array"");', 'for(int i=0;i<size;i++)', 'scanf(""%d"",&p[i]);', 'return p;', 'int main()', 'int *ptr;', 'ptr=getarray();', 'int length=sizeof(*ptr);', 'printf(""Elements that you have entered are : "");', ""for(int i=0;ptr[i]!='\\0';i++)"", 'printf(""%d "", ptr[i]);', 'return 0;', '#include <stdio.h>', 'int *getarray()', 'static int arr[7];', 'printf(""Enter the elements in an array : "");', 'for(int i=0;i<7;i++)', 'scanf(""%d"",&arr[i]);', 'return arr;', 'int main()', 'int *ptr;', 'ptr=getarray();', 'printf(""\\nElements that you have entered are :"");', 'for(int i=0;i<7;i++)', 'printf(""%d "", ptr[i]);', '#include <stdio.h>', '#include<malloc.h>', 'struct array', 'int arr[8];', 'struct array getarray()', 'struct array y;', 'printf(""Enter the elements in an array : "");', 'for(int i=0;i<8;i++)', 'scanf(""%d"",&y.arr[i]);', 'return y;', 'int main()', 'struct array x=getarray();', 'printf(""Elements that you have entered are :"");', ""for(int i=0;x.arr[i]!='\\0';i++)"", 'printf(""%d "", x.arr[i]);', 'return 0;']",[],[],['|||Using dynamically allocated array|||Using static array|||Using structure|||']
49,['Passing Array to Function in C'],"['In C, there are various general problems which requires passing more than one variable of the same type to a function. For example, consider a function which sorts the 10 elements in ascending order. Such a function requires 10 numbers to be passed as the actual parameters from the main function. Here, instead of declaring 10 different numbers and then passing into the function, we can declare and initialize an array and pass that into the function. This will resolve all the complexity since the function will now work for any number of values.']","['https://www.javatpoint.com/c-pointers', 'https://www.javatpoint.com/return-an-array-in-c', 'https://www.javatpoint.com/c-pointers', 'https://www.javatpoint.com/return-an-array-in-c', 'https://www.javatpoint.com/c-pointers']",[],[],"['C function to sort the array', 'Returning array from the function']","['Methods to declare a function that receives an array as an argument', 'C language passing an array to function example']",[],"['Consider the following syntax to pass an array to the function.', 'There are 3 ways to declare the function which is intended to receive an array as an argument.', 'First way:', 'Declaring blank subscript notation [] is the widely used technique.', 'Second way:', 'Optionally, we can define size in subscript notation [].', 'Third way:', 'You can also use the concept of a pointer. In pointer chapter, we will learn about it.']","['Returning an array is similar to passing the array into the function. The name of the array is returned from the function. To make a function returning an array, the following syntax is used.']","['As we know that the array_name contains the address of the first element. Here, we must notice that we need to pass only the name of the array in the function which is intended to accept an array. The array defined as the formal parameter will automatically refer to the array specified by the array name defined as an actual parameter.', 'As we know that, a function can not return more than one value. However, if we try to write the return statement as return a, b, c; to return three values (a,b,c), the function will return the last mentioned value which is c in our case. In some problems, we may need to return multiple values from a function. In such cases, an array is returned from the function.', 'To store the array returned from the function, we can define a pointer which points to that array. We can traverse the array by increasing that pointer since pointer initially points to the base address of the array. Consider the following example that contains a function returning the sorted array.']","['functionname(arrayname);//passing array', 'return_type function(type arrayname[])', 'return_type function(type arrayname[SIZE])', 'return_type function(type *arrayname)', '#include<stdio.h>', 'int minarray(int arr[],int size){', 'int min=arr[0];', 'int i=0;', 'for(i=1;i<size;i++){', 'if(min>arr[i]){', 'min=arr[i];', '}//end of for', 'return min;', '}//end of function', 'int main(){', 'int i=0,min=0;', 'int numbers[]={4,5,7,3,8,9};//declaration of array', 'min=minarray(numbers,6);//passing array with size', 'printf(""minimum number is %d \\n"",min);', 'return 0;', '#include<stdio.h>', 'void Bubble_Sort(int[]);', 'void main ()', 'int arr[10] = { 10, 9, 7, 101, 23, 44, 12, 78, 34, 23};', 'Bubble_Sort(arr);', 'void Bubble_Sort(int a[]) //array a[] points to arr.', 'int i, j,temp;', 'for(i = 0; i<10; i++)', 'for(j = i+1; j<10; j++)', '{', 'if(a[j] < a[i])', '{', 'temp = a[i];', 'a[i] = a[j];', 'a[j] = temp;', '}', '}', '}', 'printf(""Printing Sorted Element List ...\\n"");', 'for(i = 0; i<10; i++)', 'printf(""%d\\n"",a[i]);', 'int * Function_name() {', 'return array_type;', '#include<stdio.h>', 'int* Bubble_Sort(int[]);', 'void main ()', 'int arr[10] = { 10, 9, 7, 101, 23, 44, 12, 78, 34, 23};', 'int *p = Bubble_Sort(arr), i;', 'printf(""printing sorted elements ...\\n"");', 'for(i=0;i<10;i++)', 'printf(""%d\\n"",*(p+i));', 'int* Bubble_Sort(int a[]) //array a[] points to arr.', 'int i, j,temp;', 'for(i = 0; i<10; i++)', 'for(j = i+1; j<10; j++)', '{', 'if(a[j] < a[i])', '{', 'temp = a[i];', 'a[i] = a[j];', 'a[j] = temp;', '}', '}', '}', 'return a;']","['minimum number is 3', 'Printing Sorted Element List ...\n7  \n9  \n10  \n12  \n23 \n23  \n34  \n44  \n78  \n101', 'Printing Sorted Element List ...\n7  \n9   \n10  \n12  \n23 \n23  \n34  \n44  \n78  \n101']",[],[]
50,['C Array Test 1'],['The correct option is (b).'],"['https://www.javatpoint.com/c-array-2', 'https://www.javatpoint.com/c-functions-4', 'https://www.javatpoint.com/c-functions-4', 'https://www.javatpoint.com/c-array-2']",[],[],[],[],[],"['Explanation:', 'In C language when we pass an array as a function argument, then the Base address of the array will be passed.', 'The correct option is (a).', 'Explanation:', ""In the program we are comparing the base address of 'x' and 'y' and they are not same."", 'Therefore the program has No output.', 'The correct option is (c).', 'Explanation:', 'Therefore the combined output of the program is 2 9.', 'The correct option is (a).', 'Explanation:', 'Using the standard library function malloc() and treat it as an array. The value of array is same as pointer to a block of memory.', 'Therefore it is possible to allocate block of memory at run time in array.', 'The correct option is (b).', 'Explanation:', ""Therefore statements '2' and '3' are correct.""]","[""The strlen(x) function is used for finding the length of string 'x'. In program the length of string is count of character upto '\\0'. Hence the string length output is 2."", ""The sizeof(x) function is used for finding the size of string 'x'. In program sizeof() returns the size of the complete array. Hence the size of array output is 9.""]",[],"['#include', 'char x[]=""javaTpoint"", y[]=""javaTpoint"";', 'if(x==y){', 'printf(""Strings are Equal"");', '#include', 'main(){', 'char x[] = ""Hi\\0Hello"";', 'printf(""%d %d"", strlen(x), sizeof(x));']",[],[],"[""|||The expression num[2] represents the very second element in the array|||The declaration of num[SIZE] is allowed if SIZE is a macro|||The array of int num[20]; can store 20 elements|||It is necessary to initialize array at the time of declaration||||||The expression num[2] represents the second element in array. This statement is false, because it represents the third element of the array.|||The declaration of num[SIZE] is allowed if SIZE is a macro. This statement is true, because MACRO is used for replacing the symbol size with given value.|||The array of int num[20]; can store 20 elements. This statement is true|||It is necessary to initialize array at the time of declaration. This statement is false|||Therefore statements '2' and '3' are correct.|||""]"
51,['C Pointers'],"['The pointer in C language is a variable which stores the address of another variable. This variable can be of type int, char, array, function, or any other pointer. The size of the pointer depends on the architecture. However, in 32-bit architecture the size of a pointer is 2 byte.']","['https://www.javatpoint.com/c-pointer-to-pointer', 'https://www.javatpoint.com/passing-array-to-function-in-c', 'https://www.javatpoint.com/c-pointer-to-pointer', 'https://www.javatpoint.com/passing-array-to-function-in-c', 'https://www.javatpoint.com/c-pointer-to-pointer']","['https://static.javatpoint.com/cpages/images/pointer.png', 'https://static.javatpoint.com/cpages/images/cpointer1.png']",[],"['Declaring a pointer', 'Advantage of pointer', 'Usage of pointer', 'Address Of (&) Operator', 'NULL Pointer', 'Pointer Program to swap two numbers without using the 3rd variable.', 'Reading complex pointers']","['Pointer Example', 'Pointer to array', 'Pointer to a function', 'Pointer to structure', 'Explanation']",[],"['Consider the following example to define a pointer which stores the address of an integer.', 'The pointer in c language can be declared using * (asterisk symbol). It is also known as indirection pointer used to dereference a pointer.', 'An example of using pointers to print the address and value is given below.', 'By the help of * (indirection operator), we can print the value of pointer variable p.', ""Let's see the pointer example as explained for the above figure."", '2) We can return multiple values from a function using the pointer.', ""3) It makes you able to access any memory location in the computer's memory."", 'There are many applications of pointers in c language.', '1) Dynamic memory allocation', 'In c language, we can dynamically allocate memory using malloc() and calloc() functions where the pointer is used.', '2) Arrays, Functions, and Structures', 'Pointers in c language are widely used in arrays, functions, and structures. It reduces the code and improves the performance.', ""The address of operator '&' returns the address of a variable. But, we need to use %u to display the address of a variable."", 'In the most libraries, the value of the pointer is 0 (zero).', 'Here,we must notice that,', 'How to read the pointer: int (*p)[10].', 'Assign the 3rd priority to [] since the data type has the last precedence. Therefore the pointer will look like following.', 'The pointer will be read as p is a pointer to an array of integers of size 10.', 'How to read the following pointer?']","['As you can see in the above figure, pointer variable stores the address of number variable, i.e., fff4. The value of number variable is 50. But the address of pointer variable p is aaa3.', '1) Pointer reduces the code and improves the performance, it is used to retrieving strings, trees, etc. and used with arrays, structures, and functions.', ""A pointer that is not assigned any value but NULL is known as the NULL pointer. If you don't have any address to be specified in the pointer at the time of declaration, you can assign NULL value. It will provide a better approach."", 'There are several things which must be taken into the consideration while reading the complex pointers in C. Lets see the precedence and associativity of the operators which are used regarding pointers.', 'To read the pointer, we must see that () and [] have the equal precedence. Therefore, their associativity must be considered here. The associativity is left to right, so the priority goes to ().', 'Inside the bracket (), pointer operator * and pointer name (identifier) p have the same precedence. Therefore, their associativity must be considered here which is right to left, so the priority goes to p, and the second priority goes to *.']",['This pointer will be read as p is a pointer to such function which accepts the first parameter as the pointer to a one-dimensional array of integers of size two and the second parameter as the pointer to a function which parameter is void and return type is the integer.'],"['int n = 10;', 'int* p = &n // Variable p of type pointer is pointing to the address of the variable n of type integer.', 'int *a;//pointer to int', 'char *c;//pointer to char', '#include', 'int main(){', 'int number=50;', 'int *p;', 'p=&number;//stores the address of number variable', 'printf(""Address of p variable is %x \\n"",p); // p contains the address of the number therefore printing p gives the address of number.', 'printf(""Value of p variable is %d \\n"",*p); // As we know that * is used to dereference a pointer therefore if we print *p, we will get the value stored at the address contained by p.', 'return 0;', 'int arr[10];', 'int *p[10]=&arr // Variable p of type pointer is pointing to the address of an integer array arr.', 'void show (int);', 'void(*p)(int) = &display // Pointer p is pointing to the address of a function', 'struct st {', 'float f;', 'struct st *p = &ref', '#include', 'int main(){', 'int number=50;', 'printf(""value of number is %d, address of number is %u"",number,&number);', 'return 0;', '#include', 'int main(){', 'int a=10,b=20,*p1=&a,*p2=&b;', 'printf(""Before swap: *p1=%d *p2=%d"",*p1,*p2);', '*p1=*p1+*p2;', '*p2=*p1-*p2;', '*p1=*p1-*p2;', 'printf(""\\nAfter swap: *p1=%d *p2=%d"",*p1,*p2);', 'return 0;', 'int (*p)(int (*)[2], int (*)void))']","['Address of number variable is fff4\nAddress of p variable is fff4\nValue of p variable is 50', 'value of number is 50, address of number is fff4', 'int *p=NULL;', 'Before swap: *p1=10 *p2=20\nAfter swap: *p1=20 *p2=10']","['peratorPrecedenceAssociativit&&&), []1Left to righ&&&, identifier2Right to lef&&&ata type3']","['|||(): This operator is a bracket operator used to declare and define the function.|||[]: This operator is an array subscript operator|||* : This operator is a pointer operator.|||Identifier: It is the name of the pointer. The priority will always be assigned to this.|||Data type: Data type is the type of the variable to which the pointer is intended to point. It also includes the modifier like signed int, long, etc).||||||char -> 4|||* -> 2|||p -> 1|||[10] -> 3|||']"
52,['C Double Pointer (Pointer to Pointer)'],"[""As we know that, a pointer is used to store the address of a variable in C. Pointer reduces the access time of a variable. However, In C, we can also define a pointer to store the address of another pointer. Such pointer is known as a double pointer (pointer to pointer). The first pointer is used to store the address of a variable whereas the second pointer is used to store the address of the first pointer. Let's understand it by the diagram given below.""]","['https://www.javatpoint.com/pointer-arithmetic-in-c', 'https://www.javatpoint.com/c-pointers', 'https://www.javatpoint.com/pointer-arithmetic-in-c', 'https://www.javatpoint.com/c-pointers', 'https://www.javatpoint.com/pointer-arithmetic-in-c']","['https://static.javatpoint.com/cpages/images/pointertopointer1.png', 'https://static.javatpoint.com/cpages/images/cpointertopointerexample.png', 'https://static.javatpoint.com/cpages/images/double_pointer_question.png']",[],"['C double pointer example', 'Q. What will be the output of the following program?']",[],"['Output', 'Output', 'Explanation']","['The syntax of declaring a double pointer is given below.', 'Consider the following example.', ""Let's see an example where one pointer points to the address of another pointer."", 'As you can see in the above figure, p2 contains the address of p (fff2), and p contains the address of number variable (fff4).', ""Line number 5 contains an expression which prints three values, i.e., pp - p, *pp - a, **pp. Let's calculate them each one of them."", ""On line 7, again the expression is written which prints three values, i.e., pp-p, *pp-a, *pp. Let's calculate each one of them."", ""On line 9, again the expression is written which prints three values, i.e., pp-p, *pp-a, *pp. Let's calculate each one of them."", ""On line 11, again the expression is written which prints three values, i.e., pp-p, *pp-a, *pp. Let's calculate each one of them."", 'Therefore as the result of line 9, the output 2, 3, 410 will be printed on the console.', 'At last, the output of the complete program will be given as:']",[],"['In the above question, the pointer arithmetic is used with the double pointer. An array of 6 elements is defined which is pointed by an array of pointer p. The pointer array p is pointed by a double pointer pp. However, the above image gives you a brief idea about how the memory is being allocated to the array a and the pointer array p. The elements of p are the pointers that are pointing to every element of the array a. Since we know that the array name contains the base address of the array hence, it will work as a pointer and can the value can be traversed by using *(a), *(a+1), etc. As shown in the image, a[0] can be accessed in the following ways.', 'Coming to the program, Line 1 and 2 declare the integer and pointer array relatively. Line 3 initializes the double pointer to the pointer array p. As shown in the image, if the address of the array starts from 200 and the size of the integer is 2, then the pointer array will contain the values as 200, 202, 204, 206, 208, 210. Let us consider that the base address of the pointer array is 300; the double pointer pp contains the address of pointer array, i.e., 300. Line number 4 increases the value of pp by 1, i.e., pp will now point to address 302. ', 'Therefore as the result of line 5, The output 1, 1, 206 will be printed on the console. On line 6, *pp++ is written. Here, we must notice that two unary operators * and ++ will have the same precedence. Therefore, by the rule of associativity, it will be evaluated from right to left. Therefore the expression *pp++ can be rewritten as (*(pp++)). Since, pp = 302 which will now become, 304. *pp will give 204.', 'Therefore, as the result of line 7, The output 2, 2, 300 will be printed on the console. On line 8, ++*pp is written. According to the rule of associativity, this can be rewritten as, (++(*(pp))). Since, pp = 304, *pp = 204, the value of *pp = *(p[2]) = 206 which will now point to a[3].', 'Therefore, as the result of line 9, the output 2, 3, 409 will be printed on the console. On line 10, ++**pp is writen. according to the rule of associativity, this can be rewritten as, (++(*(*(pp)))). pp = 304, *pp = 206, **pp = 409, ++**pp => *pp = *pp + 1 = 410. In other words, a[3] = 410.']","['int **p; // pointer to a pointer which is pointing to an integer.', '#include<stdio.h>', 'void main ()', 'int a = 10;', 'int *p;', 'int **pp;', 'p = &a // pointer p is pointing to the address of a', 'pp = &p // pointer pp is a double pointer pointing to the address of pointer p', 'printf(""address of a: %x\\n"",p); // Address of a will be printed', 'printf(""address of p: %x\\n"",pp); // Address of p will be printed', 'printf(""value stored at p: %d\\n"",*p); // value stoted at the address contained by p i.e. 10 will be printed', 'printf(""value stored at pp: %d\\n"",**pp); // value stored at the address contained by the pointer stoyred at pp', '#include', 'int main(){', 'int number=50;', 'int *p;//pointer to int', 'int **p2;//pointer to pointer', 'p=&number;//stores the address of number variable', 'p2=&p;', 'printf(""Address of number variable is %x \\n"",&number);', 'printf(""Address of p variable is %x \\n"",p);', 'printf(""Value of *p variable is %d \\n"",*p);', 'printf(""Address of p2 variable is %x \\n"",p2);', 'printf(""Value of **p2 variable is %d \\n"",*p);', 'return 0;', '#include<stdio.h>', 'void main ()', 'int a[10] = {100, 206, 300, 409, 509, 601}; //Line 1', 'int *p[] = {a, a+1, a+2, a+3, a+4, a+5}; //Line 2', 'int **pp = p; //Line 3', 'pp++; // Line 4', 'printf(""%d %d %d\\n"",pp-p,*pp - a,**pp); // Line 5', '*pp++; // Line 6', 'printf(""%d %d %d\\n"",pp-p,*pp - a,**pp); // Line 7', '++*pp; // Line 8', 'printf(""%d %d %d\\n"",pp-p,*pp - a,**pp); // Line 9', '++**pp; // Line 10', 'printf(""%d %d %d\\n"",pp-p,*pp - a,**pp); // Line 11']","['address of a: d26a8734\naddress of p: d26a8738\nvalue stored at p: 10\nvalue stored at pp: 10', 'Address of number variable is fff4\nAddress of p variable is fff4\nValue of *p variable is 50\nAddress of p2 variable is fff2\nValue of **p variable is 50', '1 1 206\n2 2 300\n2 3 409\n2 3 410']",[],"['|||a[0]: it is the simplest way to access the first element of the array|||*(a): since a store the address of the first element of the array, we can access its value by using indirection pointer on it.|||*p[0]: if a[0] is to be accessed by using a pointer p to it, then we can use indirection operator (*) on the first element of the pointer array p, i.e., *p[0].|||**(pp): as pp stores the base address of the pointer array, *pp will give the value of the first element of the pointer array that is the address of the first element of the integer array. **p will give the actual value of the first element of the integer array.||||||pp = 302, p = 300 => pp-p = (302-300)/2 => pp-p = 1, i.e., 1 will be printed.|||pp = 302, *pp = 202, a = 200 => *pp - a = 202 - 200 = 2/2 = 1, i.e., 1 will be printed. |||pp = 302, *pp = 202, *(*pp) = 206, i.e., 206 will be printed.||||||pp = 304, p = 300 => pp - p = (304 - 300)/2 => pp-p = 2, i.e., 2 will be printed.|||pp = 304, *pp = 204, a = 200 => *pp-a = (204 - 200)/2 = 2, i.e., 2 will be printed.|||pp = 304, *pp = 204, *(*pp) = 300, i.e., 300 will be printed.||||||pp = 304, p = 300 => pp - p = (304 - 300)/2 => pp-p = 2, i.e., 2 will be printed.|||pp = 304, *pp = 206, a = 200 => *pp-a = (206 - 200)/2 = 3, i.e., 3 will be printed.|||pp = 304, *pp = 206, *(*pp) = 409, i.e., 409 will be printed.||||||pp = 304, p = 300 => pp - p = (304 - 300)/2 => pp-p = 2, i.e., 2 will be printed.|||pp = 304, *pp = 206, a = 200 => *pp-a = (206 - 200)/2 = 3, i.e., 3 will be printed.|||On line 8, **pp = 410.|||']"
53,['Pointer Arithmetic in C'],"['We can perform arithmetic operations on the pointers like addition, subtraction, etc. However, as we know that pointer contains the address, the result of an arithmetic operation performed on the pointer will also be a pointer if the other operand is of type integer. In pointer-from-pointer subtraction, the result will be an integer value. Following arithmetic operations are possible on the pointer in C language:']","['https://www.javatpoint.com/dangling-pointers-in-c', 'https://www.javatpoint.com/c-pointer-to-pointer', 'https://www.javatpoint.com/dangling-pointers-in-c', 'https://www.javatpoint.com/c-pointer-to-pointer', 'https://www.javatpoint.com/dangling-pointers-in-c']",[],[],"['Incrementing Pointer in C', 'Decrementing Pointer in C', 'C Pointer Addition', 'C Pointer Subtraction', 'Illegal arithmetic with pointers', 'Pointer to function in C', 'Pointer to Array of functions in C']","['32-bit', '64-bit', 'Traversing an array by using pointer', '32-bit', '64-bit', '32-bit', '64-bit', '32-bit', '64-bit']",[],"['The Rule to increment the pointer is given below:', 'Where i is the number by which the pointer get increased.', 'For 32-bit int variable, it will be incremented by 2 bytes.', 'For 64-bit int variable, it will be incremented by 4 bytes.', ""Let's see the example of incrementing pointer variable on 64-bit architecture."", 'For 32-bit int variable, it will be decremented by 2 bytes.', 'For 64-bit int variable, it will be decremented by 4 bytes.', ""Let's see the example of decrementing pointer variable on 64-bit OS."", 'We can add a value to the pointer variable. The formula of adding value to pointer is given below:', 'For 32-bit int variable, it will add 2 * number.', 'For 64-bit int variable, it will add 4 * number.', ""Let's see the example of adding value to pointer variable on 64-bit architecture."", 'For 32-bit int variable, it will subtract 2 * number.', 'For 64-bit int variable, it will subtract 4 * number.', ""Let's see the example of subtracting value from the pointer variable on 64-bit architecture."", 'You can see after subtracting 3 from the pointer variable, it is 12 (4*3) less than the previous address value.', 'If two pointers are of the same type,', 'Consider the following example to subtract one pointer from an another.']","['We can traverse an array by using the increment operation on a pointer which will keep pointing to every element of the array, perform some operation on that, and update itself in a loop.', 'Like increment, we can decrement a pointer variable. If we decrement a pointer, it will start pointing to the previous location. The formula of decrementing the pointer is given below:', 'Like pointer addition, we can subtract a value from the pointer variable. Subtracting any number from a pointer will give an address. The formula of subtracting value from the pointer variable is given below:', 'However, instead of subtracting a number, we can also subtract an address from another address (pointer). This will result in a number. It will not be a simple arithmetic operation, but it will follow the following rule.']","['If we increment a pointer by 1, the pointer will start pointing to the immediate next location. This is somewhat different from the general arithmetic since the value of the pointer will get increased by the size of the data type to which the pointer is pointing.\nWe can traverse an array by using the increment operation on a pointer which will keep pointing to every element of the array, perform some operation on that, and update itself in a loop.\nThe Rule to increment the pointer is given below:\n\r\nnew_address= current_address + i * size_of(data type)\r\n\nWhere i is the number by which the pointer get increased.\n32-bit\nFor 32-bit int variable, it will be incremented by 2 bytes.\n64-bit\nFor 64-bit int variable, it will be incremented by 4 bytes.\nLet\'s see the example of incrementing pointer variable on 64-bit architecture.\n\r\n#include\r\nint main(){\r\nint number=50;      \r\nint *p;//pointer to int    \r\np=&number;//stores the address of number variable      \r\nprintf(""Address of p variable is %u \\n"",p);      \r\np=p+1;      \r\nprintf(""After increment: Address of p variable is %u \\n"",p); // in our case, p will get incremented by 4 bytes.    \r\nreturn 0;\r\n}  \r\n\nOutput\nAddress of p variable is 3214864300 \r\nAfter increment: Address of p variable is 3214864304 \r\n\nTraversing an array by using pointer\n\r\n#include<stdio.h>\r\nvoid main ()\r\n{\r\n\tint arr[5] = {1, 2, 3, 4, 5};\r\n\tint *p = arr;\r\n\tint i;\r\n\tprintf(""printing array elements...\\n"");\r\n\tfor(i = 0; i< 5; i++)\r\n\t{\r\n\t\tprintf(""%d  "",*(p+i));\r\n\t}\r\n}\r\n\nOutput\nprinting array elements...\r\n1  2  3  4  5\r\n\nDecrementing Pointer in C\nLike increment, we can decrement a pointer variable. If we decrement a pointer, it will start pointing to the previous location. The formula of decrementing the pointer is given below:\n\r\nnew_address= current_address - i * size_of(data type)\r\n\n32-bit\nFor 32-bit int variable, it will be decremented by 2 bytes.\n64-bit\nFor 64-bit int variable, it will be decremented by 4 bytes.\nLet\'s see the example of decrementing pointer variable on 64-bit OS.\n\r\n#include           \r\nvoid main(){          \r\nint number=50;      \r\nint *p;//pointer to int    \r\np=&number;//stores the address of number variable      \r\nprintf(""Address of p variable is %u \\n"",p);      \r\np=p-1;     \r\nprintf(""After decrement: Address of p variable is %u \\n"",p); // P will now point to the immidiate previous location.       \r\n}    \r\n\nOutput\nAddress of p variable is 3214864300 \r\nAfter decrement: Address of p variable is 3214864296 \r\n\nC Pointer Addition\nWe can add a value to the pointer variable. The formula of adding value to pointer is given below:\n\r\nnew_address= current_address + (number * size_of(data type))\r\n\n32-bit\nFor 32-bit int variable, it will add 2 * number.\n64-bit\nFor 64-bit int variable, it will add 4 * number.\nLet\'s see the example of adding value to pointer variable on 64-bit architecture.\n\r\n#include\r\nint main(){\r\nint number=50;      \r\nint *p;//pointer to int    \r\np=&number;//stores the address of number variable      \r\nprintf(""Address of p variable is %u \\n"",p);      \r\np=p+3;   //adding 3 to pointer variable  \r\nprintf(""After adding 3: Address of p variable is %u \\n"",p);     \r\nreturn 0;\r\n}  \r\n\nOutput\nAddress of p variable is 3214864300 \r\nAfter adding 3: Address of p variable is 3214864312\r\n\nAs you can see, the address of p is 3214864300. But after adding 3 with p variable, it is 3214864312, i.e., 4*3=12 increment. Since we are using 64-bit architecture, it increments 12. But if we were using 32-bit architecture, it was incrementing to 6 only, i.e., 2*3=6. As integer value occupies 2-byte memory in 32-bit OS.\nC Pointer Subtraction\nLike pointer addition, we can subtract a value from the pointer variable. Subtracting any number from a pointer will give an address. The formula of subtracting value from the pointer variable is given below:\n\r\nnew_address= current_address - (number * size_of(data type))\r\n\n32-bit\nFor 32-bit int variable, it will subtract 2 * number.\n64-bit\nFor 64-bit int variable, it will subtract 4 * number.\nLet\'s see the example of subtracting value from the pointer variable on 64-bit architecture.\n\r\n#include\r\nint main(){\r\nint number=50;      \r\nint *p;//pointer to int    \r\np=&number;//stores the address of number variable      \r\nprintf(""Address of p variable is %u \\n"",p);      \r\np=p-3; //subtracting 3 from pointer variable  \r\nprintf(""After subtracting 3: Address of p variable is %u \\n"",p);      \r\nreturn 0;\r\n}  \r\n\nOutput\nAddress of p variable is 3214864300 \r\nAfter subtracting 3: Address of p variable is 3214864288\r\n\nYou can see after subtracting 3 from the pointer variable, it is 12 (4*3) less than the previous address value.\nHowever, instead of subtracting a number, we can also subtract an address from another address (pointer). This will result in a number. It will not be a simple arithmetic operation, but it will follow the following rule.\nIf two pointers are of the same type,\n\r\nAddress2 - Address1 = (Subtraction of two addresses)/size of data type which pointer points\r\n\nConsider the following example to subtract one pointer from an another.\n\r\n#include<stdio.h>\r\nvoid main ()\r\n{\r\n\tint i = 100; \r\n\tint *p = &i\r\n\tint *temp;\r\n\ttemp = p; \r\n\tp = p + 3;\r\n\tprintf(""Pointer Subtraction: %d - %d = %d"",p, temp, p-temp);\r\n}\r\n\nOutput\nPointer Subtraction: 1030585080 - 1030585068 = 3\r\n\nIllegal arithmetic with pointers\nThere are various operations which can not be performed on pointers. Since, pointer stores address hence we must ignore the operations which may lead to an illegal address, for example, addition, and multiplication. A list of such operations is given below.\n\nAddress + Address = illegal\nAddress * Address = illegal \nAddress % Address = illegal\nAddress / Address = illegal\nAddress & Address = illegal\nAddress ^ Address = illegal\nAddress | Address = illegal\n ~Address = illegal\n\nPointer to function in C\nAs we discussed in the previous chapter, a pointer can point to a function in C. However, the declaration of the pointer variable must be the same as the function. Consider the following example to make a pointer pointing to the function.\n\r\n#include<stdio.h>\r\nint addition ();\r\nint main ()\r\n{\r\n\tint result; \r\n\tint (*ptr)();\r\n\tptr = &addition\r\n\tresult = (*ptr)();\r\n\tprintf(""The sum is %d"",result);\r\n}\r\nint addition()\r\n{\r\n\tint a, b; \r\n\tprintf(""Enter two numbers?"");\r\n\tscanf(""%d %d"",&a,&b);\r\n\treturn a+b;\r\n}\r\n\nOutput\nEnter two numbers?10 15 \r\nThe sum is 25  \r\n\nPointer to Array of functions in C\nTo understand the concept of an array of functions, we must understand the array of function. Basically, an array of the function is an array which contains the addresses of functions. In other words, the pointer to an array of functions is a pointer pointing to an array which contains the pointers to the functions. Consider the following example.\n\r\n#include<stdio.h>\r\nint show();\r\nint showadd(int);\r\nint (*arr[3])();\r\nint (*(*ptr)[3])();\r\n\r\nint main ()\r\n{\r\n    int result1;\r\n\tarr[0] = show;\r\n\tarr[1] = showadd;\r\n\tptr = &arr\r\n\tresult1 = (**ptr)();\r\n\tprintf(""printing the value returned by show : %d"",result1);\r\n\t(*(*ptr+1))(result1);\r\n}\r\nint show()\r\n{\r\n\tint a = 65;\r\n\treturn a++;\r\n}\r\nint showadd(int b)\r\n{\r\n    printf(""\\nAdding 90 to the value returned by show: %d"",b+90);\r\n}\r\n\nOutput\nprinting the value returned by show : 65 \r\nAdding 90 to the value returned by show: 155\r\n\n\n\nNext TopicDangling Pointers in C\n\n\n\n← prev\nnext →\n\n', '\nWe can traverse an array by using the increment operation on a pointer which will keep pointing to every element of the array, perform some operation on that, and update itself in a loop.\nThe Rule to increment the pointer is given below:\n\r\nnew_address= current_address + i * size_of(data type)\r\n\nWhere i is the number by which the pointer get increased.\n32-bit\nFor 32-bit int variable, it will be incremented by 2 bytes.\n64-bit\nFor 64-bit int variable, it will be incremented by 4 bytes.\nLet\'s see the example of incrementing pointer variable on 64-bit architecture.\n\r\n#include\r\nint main(){\r\nint number=50;      \r\nint *p;//pointer to int    \r\np=&number;//stores the address of number variable      \r\nprintf(""Address of p variable is %u \\n"",p);      \r\np=p+1;      \r\nprintf(""After increment: Address of p variable is %u \\n"",p); // in our case, p will get incremented by 4 bytes.    \r\nreturn 0;\r\n}  \r\n\nOutput\nAddress of p variable is 3214864300 \r\nAfter increment: Address of p variable is 3214864304 \r\n\nTraversing an array by using pointer\n\r\n#include<stdio.h>\r\nvoid main ()\r\n{\r\n\tint arr[5] = {1, 2, 3, 4, 5};\r\n\tint *p = arr;\r\n\tint i;\r\n\tprintf(""printing array elements...\\n"");\r\n\tfor(i = 0; i< 5; i++)\r\n\t{\r\n\t\tprintf(""%d  "",*(p+i));\r\n\t}\r\n}\r\n\nOutput\nprinting array elements...\r\n1  2  3  4  5\r\n\nDecrementing Pointer in C\nLike increment, we can decrement a pointer variable. If we decrement a pointer, it will start pointing to the previous location. The formula of decrementing the pointer is given below:\n\r\nnew_address= current_address - i * size_of(data type)\r\n\n32-bit\nFor 32-bit int variable, it will be decremented by 2 bytes.\n64-bit\nFor 64-bit int variable, it will be decremented by 4 bytes.\nLet\'s see the example of decrementing pointer variable on 64-bit OS.\n\r\n#include           \r\nvoid main(){          \r\nint number=50;      \r\nint *p;//pointer to int    \r\np=&number;//stores the address of number variable      \r\nprintf(""Address of p variable is %u \\n"",p);      \r\np=p-1;     \r\nprintf(""After decrement: Address of p variable is %u \\n"",p); // P will now point to the immidiate previous location.       \r\n}    \r\n\nOutput\nAddress of p variable is 3214864300 \r\nAfter decrement: Address of p variable is 3214864296 \r\n\nC Pointer Addition\nWe can add a value to the pointer variable. The formula of adding value to pointer is given below:\n\r\nnew_address= current_address + (number * size_of(data type))\r\n\n32-bit\nFor 32-bit int variable, it will add 2 * number.\n64-bit\nFor 64-bit int variable, it will add 4 * number.\nLet\'s see the example of adding value to pointer variable on 64-bit architecture.\n\r\n#include\r\nint main(){\r\nint number=50;      \r\nint *p;//pointer to int    \r\np=&number;//stores the address of number variable      \r\nprintf(""Address of p variable is %u \\n"",p);      \r\np=p+3;   //adding 3 to pointer variable  \r\nprintf(""After adding 3: Address of p variable is %u \\n"",p);     \r\nreturn 0;\r\n}  \r\n\nOutput\nAddress of p variable is 3214864300 \r\nAfter adding 3: Address of p variable is 3214864312\r\n\nAs you can see, the address of p is 3214864300. But after adding 3 with p variable, it is 3214864312, i.e., 4*3=12 increment. Since we are using 64-bit architecture, it increments 12. But if we were using 32-bit architecture, it was incrementing to 6 only, i.e., 2*3=6. As integer value occupies 2-byte memory in 32-bit OS.\nC Pointer Subtraction\nLike pointer addition, we can subtract a value from the pointer variable. Subtracting any number from a pointer will give an address. The formula of subtracting value from the pointer variable is given below:\n\r\nnew_address= current_address - (number * size_of(data type))\r\n\n32-bit\nFor 32-bit int variable, it will subtract 2 * number.\n64-bit\nFor 64-bit int variable, it will subtract 4 * number.\nLet\'s see the example of subtracting value from the pointer variable on 64-bit architecture.\n\r\n#include\r\nint main(){\r\nint number=50;      \r\nint *p;//pointer to int    \r\np=&number;//stores the address of number variable      \r\nprintf(""Address of p variable is %u \\n"",p);      \r\np=p-3; //subtracting 3 from pointer variable  \r\nprintf(""After subtracting 3: Address of p variable is %u \\n"",p);      \r\nreturn 0;\r\n}  \r\n\nOutput\nAddress of p variable is 3214864300 \r\nAfter subtracting 3: Address of p variable is 3214864288\r\n\nYou can see after subtracting 3 from the pointer variable, it is 12 (4*3) less than the previous address value.\nHowever, instead of subtracting a number, we can also subtract an address from another address (pointer). This will result in a number. It will not be a simple arithmetic operation, but it will follow the following rule.\nIf two pointers are of the same type,\n\r\nAddress2 - Address1 = (Subtraction of two addresses)/size of data type which pointer points\r\n\nConsider the following example to subtract one pointer from an another.\n\r\n#include<stdio.h>\r\nvoid main ()\r\n{\r\n\tint i = 100; \r\n\tint *p = &i\r\n\tint *temp;\r\n\ttemp = p; \r\n\tp = p + 3;\r\n\tprintf(""Pointer Subtraction: %d - %d = %d"",p, temp, p-temp);\r\n}\r\n\nOutput\nPointer Subtraction: 1030585080 - 1030585068 = 3\r\n\nIllegal arithmetic with pointers\nThere are various operations which can not be performed on pointers. Since, pointer stores address hence we must ignore the operations which may lead to an illegal address, for example, addition, and multiplication. A list of such operations is given below.\n\nAddress + Address = illegal\nAddress * Address = illegal \nAddress % Address = illegal\nAddress / Address = illegal\nAddress & Address = illegal\nAddress ^ Address = illegal\nAddress | Address = illegal\n ~Address = illegal\n\nPointer to function in C\nAs we discussed in the previous chapter, a pointer can point to a function in C. However, the declaration of the pointer variable must be the same as the function. Consider the following example to make a pointer pointing to the function.\n\r\n#include<stdio.h>\r\nint addition ();\r\nint main ()\r\n{\r\n\tint result; \r\n\tint (*ptr)();\r\n\tptr = &addition\r\n\tresult = (*ptr)();\r\n\tprintf(""The sum is %d"",result);\r\n}\r\nint addition()\r\n{\r\n\tint a, b; \r\n\tprintf(""Enter two numbers?"");\r\n\tscanf(""%d %d"",&a,&b);\r\n\treturn a+b;\r\n}\r\n\nOutput\nEnter two numbers?10 15 \r\nThe sum is 25  \r\n\nPointer to Array of functions in C\nTo understand the concept of an array of functions, we must understand the array of function. Basically, an array of the function is an array which contains the addresses of functions. In other words, the pointer to an array of functions is a pointer pointing to an array which contains the pointers to the functions. Consider the following example.\n\r\n#include<stdio.h>\r\nint show();\r\nint showadd(int);\r\nint (*arr[3])();\r\nint (*(*ptr)[3])();\r\n\r\nint main ()\r\n{\r\n    int result1;\r\n\tarr[0] = show;\r\n\tarr[1] = showadd;\r\n\tptr = &arr\r\n\tresult1 = (**ptr)();\r\n\tprintf(""printing the value returned by show : %d"",result1);\r\n\t(*(*ptr+1))(result1);\r\n}\r\nint show()\r\n{\r\n\tint a = 65;\r\n\treturn a++;\r\n}\r\nint showadd(int b)\r\n{\r\n    printf(""\\nAdding 90 to the value returned by show: %d"",b+90);\r\n}\r\n\nOutput\nprinting the value returned by show : 65 \r\nAdding 90 to the value returned by show: 155\r\n\n\n\nNext TopicDangling Pointers in C\n\n\n\n← prev\nnext →\n\n', 'As you can see, the address of p is 3214864300. But after adding 3 with p variable, it is 3214864312, i.e., 4*3=12 increment. Since we are using 64-bit architecture, it increments 12. But if we were using 32-bit architecture, it was incrementing to 6 only, i.e., 2*3=6. As integer value occupies 2-byte memory in 32-bit OS.', 'There are various operations which can not be performed on pointers. Since, pointer stores address hence we must ignore the operations which may lead to an illegal address, for example, addition, and multiplication. A list of such operations is given below.', 'As we discussed in the previous chapter, a pointer can point to a function in C. However, the declaration of the pointer variable must be the same as the function. Consider the following example to make a pointer pointing to the function.\n\r\n#include<stdio.h>\r\nint addition ();\r\nint main ()\r\n{\r\n\tint result; \r\n\tint (*ptr)();\r\n\tptr = &addition\r\n\tresult = (*ptr)();\r\n\tprintf(""The sum is %d"",result);\r\n}\r\nint addition()\r\n{\r\n\tint a, b; \r\n\tprintf(""Enter two numbers?"");\r\n\tscanf(""%d %d"",&a,&b);\r\n\treturn a+b;\r\n}\r\n\nOutput\nEnter two numbers?10 15 \r\nThe sum is 25  \r\n\nPointer to Array of functions in C\nTo understand the concept of an array of functions, we must understand the array of function. Basically, an array of the function is an array which contains the addresses of functions. In other words, the pointer to an array of functions is a pointer pointing to an array which contains the pointers to the functions. Consider the following example.\n\r\n#include<stdio.h>\r\nint show();\r\nint showadd(int);\r\nint (*arr[3])();\r\nint (*(*ptr)[3])();\r\n\r\nint main ()\r\n{\r\n    int result1;\r\n\tarr[0] = show;\r\n\tarr[1] = showadd;\r\n\tptr = &arr\r\n\tresult1 = (**ptr)();\r\n\tprintf(""printing the value returned by show : %d"",result1);\r\n\t(*(*ptr+1))(result1);\r\n}\r\nint show()\r\n{\r\n\tint a = 65;\r\n\treturn a++;\r\n}\r\nint showadd(int b)\r\n{\r\n    printf(""\\nAdding 90 to the value returned by show: %d"",b+90);\r\n}\r\n\nOutput\nprinting the value returned by show : 65 \r\nAdding 90 to the value returned by show: 155\r\n\n\n\nNext TopicDangling Pointers in C\n\n\n\n← prev\nnext →\n\n', 'To understand the concept of an array of functions, we must understand the array of function. Basically, an array of the function is an array which contains the addresses of functions. In other words, the pointer to an array of functions is a pointer pointing to an array which contains the pointers to the functions. Consider the following example.']","['new_address= current_address + i * size_of(data type)', '#include', 'int main(){', 'int number=50;', 'int *p;//pointer to int', 'p=&number;//stores the address of number variable', 'printf(""Address of p variable is %u \\n"",p);', 'p=p+1;', 'printf(""After increment: Address of p variable is %u \\n"",p); // in our case, p will get incremented by 4 bytes.', 'return 0;', '#include<stdio.h>', 'void main ()', 'int arr[5] = {1, 2, 3, 4, 5};', 'int *p = arr;', 'int i;', 'printf(""printing array elements...\\n"");', 'for(i = 0; i< 5; i++)', 'printf(""%d  "",*(p+i));', 'new_address= current_address - i * size_of(data type)', '#include', 'void main(){', 'int number=50;', 'int *p;//pointer to int', 'p=&number;//stores the address of number variable', 'printf(""Address of p variable is %u \\n"",p);', 'p=p-1;', 'printf(""After decrement: Address of p variable is %u \\n"",p); // P will now point to the immidiate previous location.', 'new_address= current_address + (number * size_of(data type))', '#include', 'int main(){', 'int number=50;', 'int *p;//pointer to int', 'p=&number;//stores the address of number variable', 'printf(""Address of p variable is %u \\n"",p);', 'p=p+3;   //adding 3 to pointer variable', 'printf(""After adding 3: Address of p variable is %u \\n"",p);', 'return 0;', 'new_address= current_address - (number * size_of(data type))', '#include', 'int main(){', 'int number=50;', 'int *p;//pointer to int', 'p=&number;//stores the address of number variable', 'printf(""Address of p variable is %u \\n"",p);', 'p=p-3; //subtracting 3 from pointer variable', 'printf(""After subtracting 3: Address of p variable is %u \\n"",p);', 'return 0;', 'Address2 - Address1 = (Subtraction of two addresses)/size of data type which pointer points', '#include<stdio.h>', 'void main ()', 'int i = 100;', 'int *p = &i', 'int *temp;', 'temp = p;', 'p = p + 3;', 'printf(""Pointer Subtraction: %d - %d = %d"",p, temp, p-temp);', '#include<stdio.h>', 'int addition ();', 'int main ()', 'int result;', 'int (*ptr)();', 'ptr = &addition', 'result = (*ptr)();', 'printf(""The sum is %d"",result);', 'int addition()', 'int a, b;', 'printf(""Enter two numbers?"");', 'scanf(""%d %d"",&a,&b);', 'return a+b;', '#include<stdio.h>', 'int show();', 'int showadd(int);', 'int (*arr[3])();', 'int (*(*ptr)[3])();', 'int main ()', 'int result1;', 'arr[0] = show;', 'arr[1] = showadd;', 'ptr = &arr', 'result1 = (**ptr)();', 'printf(""printing the value returned by show : %d"",result1);', '(*(*ptr+1))(result1);', 'int show()', 'int a = 65;', 'return a++;', 'int showadd(int b)', 'printf(""\\nAdding 90 to the value returned by show: %d"",b+90);']","['Address of p variable is 3214864300', 'After increment: Address of p variable is 3214864304', 'printing array elements...', '1  2  3  4  5', 'Address of p variable is 3214864300', 'After decrement: Address of p variable is 3214864296', 'Address of p variable is 3214864300', 'After adding 3: Address of p variable is 3214864312', 'Address of p variable is 3214864300', 'After subtracting 3: Address of p variable is 3214864288', 'Pointer Subtraction: 1030585080 - 1030585068 = 3', 'Enter two numbers?10 15', 'The sum is 25', 'printing the value returned by show : 65', 'Adding 90 to the value returned by show: 155']",[],['|||Increment|||Decrement|||Addition|||Subtraction|||Comparison||||||Address + Address = illegal|||Address * Address = illegal |||Address % Address = illegal|||Address / Address = illegal|||Address & Address = illegal|||Address ^ Address = illegal|||Address | Address = illegal||| ~Address = illegal|||']
54,['Dangling Pointers in C'],"['The most common bugs related to pointers and memory management is dangling/wild pointers. Sometimes the programmer fails to initialize the pointer with a valid address, then this type of initialized pointer is known as a dangling pointer in C.']","['https://www.javatpoint.com/size-of-operator-in-c', 'https://www.javatpoint.com/pointer-arithmetic-in-c', 'https://www.javatpoint.com/size-of-operator-in-c', 'https://www.javatpoint.com/pointer-arithmetic-in-c', 'https://www.javatpoint.com/size-of-operator-in-c']","['https://static.javatpoint.com/cpages/images/dangling-pointers-in-c.png', 'https://static.javatpoint.com/cpages/images/dangling-pointers-in-c2.png', 'https://static.javatpoint.com/cpages/images/dangling-pointers-in-c3.png', 'https://static.javatpoint.com/cpages/images/dangling-pointers-in-c4.png', 'https://static.javatpoint.com/cpages/images/dangling-pointers-in-c5.png', 'https://static.javatpoint.com/cpages/images/dangling-pointers-in-c6.png', 'https://static.javatpoint.com/cpages/images/dangling-pointers-in-c7.png', 'https://static.javatpoint.com/cpages/images/dangling-pointers-in-c8.png']",[],[],[],[],"[""Let's observe the following examples."", ""Let's understand the dangling pointer through some C programs."", 'Using free() function to de-allocate the memory.', 'The statement int *ptr=(int *)malloc(sizeof(int)); will allocate the memory with 4 bytes shown in the below image:', 'Variable goes out of the scope', 'When the variable goes out of the scope then the pointer pointing to the variable becomes a dangling pointer.', 'In the above code, we did the following steps:', 'Function call', 'Now, we will see how the pointer becomes dangling when we call the function.', ""Let's understand through an example."", 'In the above code, we did the following steps:', ""Let's represent the working of the above code diagrammatically."", ""Let's consider another example of a dangling pointer."", 'Now, we represent the working of the above code diagrammatically.', 'Avoiding Dangling Pointer Errors']","[""The statement free(ptr) de-allocates the memory as shown in the below image with a cross sign, and 'ptr' pointer becomes dangling as it is pointing to the de-allocated memory."", ""If we assign the NULL value to the 'ptr', then 'ptr' will not point to the deleted memory. Therefore, we can say that ptr is not a dangling pointer, as shown in the below image:"", ""The above code is similar to the previous one but the only difference is that the variable 'y' is static. We know that static variable stores in the global memory.""]","['Dangling pointer occurs at the time of the object destruction when the object is deleted or de-allocated from memory without modifying the value of the pointer. In this case, the pointer is pointing to the memory, which is de-allocated. The dangling pointer can point to the memory, which contains either the program code or the code of the operating system. If we assign the value to this pointer, then it overwrites the value of the program code or operating system instructions; in such cases, the program will show the undesirable result or may even crash. If the memory is re-allocated to some other process, then we dereference the dangling pointer will cause the segmentation faults.', 'In the above figure, we can observe that the Pointer 3 is a dangling pointer. Pointer 1 and Pointer 2 are the pointers that point to the allocated objects, i.e., Object 1 and Object 2, respectively. Pointer 3 is a dangling pointer as it points to the de-allocated object.', ""In the above code, we have created two variables, i.e., *ptr and a where 'ptr' is a pointer and 'a' is a integer variable. The *ptr is a pointer variable which is created with the help of malloc() function. As we know that malloc() function returns void, so we use int * to convert void pointer into int pointer."", ""The above diagram shows the stack memory. First, the fun() function is called, then the control moves to the context of the int *fun(). As 'y' is a static variable, so it stores in the global memory; Its scope is available throughout the program. When the address value is returned, then the control comes back to the context of the main(). The pointer 'p' contains the address of 'y', i.e., 100. When we print the value of '*p', then it prints the value of 'y', i.e., 10. Therefore, we can say that the pointer 'p' is not a dangling pointer as it contains the address of the variable which is stored in the global memory."", 'The dangling pointer errors can be avoided by initializing the pointer to the NULL value. If we assign the NULL value to the pointer, then the pointer will not point to the de-allocated memory. Assigning NULL value to the pointer means that the pointer is not pointing to any memory location.']","['#include <stdio.h>', 'int main()', 'int *ptr=(int *)malloc(sizeof(int));', 'int a=560;', 'ptr=&a', 'free(ptr);', 'return 0;', '#include<stdio.h>', 'int main()', 'char *str;', 'char a = ?A?;', 'str = &a', 'printf(""%s"", *str);', '#include <stdio.h>', 'int *fun(){', 'int y=10;', 'return &y', 'int main()', 'int *p=fun();', 'printf(""%d"", *p);', 'return 0;', '#include <stdio.h>', 'int *fun()', 'static int y=10;', 'return &y', 'int main()', 'int *p=fun();', 'printf(""%d"", *p);', 'return 0;']",[],[],"[""|||First, we declare the pointer variable named 'str'.|||In the inner scope, we declare a character variable. The str pointer contains the address of the variable 'a'.|||When the control comes out of the inner scope, 'a' variable will no longer be available, so str points to the de-allocated memory. It means that the str pointer becomes the dangling pointer.||||||First, we create the main() function in which we have declared 'p' pointer that contains the return value of the fun().|||When the fun() is called, then the control moves to the context of the int *fun(), the fun() returns the address of the 'y' variable.|||When control comes back to the context of the main() function, it means the variable 'y' is no longer available. Therefore, we can say that the 'p' pointer is a dangling pointer as it points to the de-allocated memory.|||""]"
55,['sizeof() operator in C'],"['The sizeof() operator is commonly used in C. It determines the size of the expression or the data type specified in the number of char-sized storage units. The sizeof() operator contains a single operand which can be either an expression or a data typecast where the cast is data type enclosed within parenthesis. The data type cannot only be primitive data types such as integer or floating data types, but it can also be pointer data types and compound data types such as unions and structs.']","['https://www.javatpoint.com/const-pointer-in-c', 'https://www.javatpoint.com/dangling-pointers-in-c', 'https://www.javatpoint.com/const-pointer-in-c', 'https://www.javatpoint.com/dangling-pointers-in-c', 'https://www.javatpoint.com/const-pointer-in-c']",['https://static.javatpoint.com/cpages/images/sizeof-operator-in-c.png'],[],[],"['Need of sizeof() operator', 'When operand is a data type.', 'When operand is an expression']","['Note:\nThe output can vary on different machines such as on 32-bit operating system will show different output, and the 64-bit operating system will show the different outputs of the same data types.']","['The sizeof() operator behaves differently according to the type of the operand.', 'In the above code, we are printing the size of different data types such as int, char, float with the help of sizeof() operator.']","[""In the above code, we have created two variables 'i' and 'j' of type double and float respectively, and then we print the size of the expression by using sizeof(i+j) operator.""]","['Mainly, programs know the storage size of the primitive data types. Though the storage size of the data type is constant, it varies when implemented in different platforms. For example, we dynamically allocate the array space by using sizeof() operator:', 'In the above example, we use the sizeof() operator, which is applied to the cast of type int. We use malloc() function to allocate the memory and returns the pointer which is pointing to this allocated memory. The memory space is equal to the number of bytes occupied by the int data type and multiplied by 10.']","['int *ptr=malloc(10*sizeof(int));', '#include <stdio.h>', 'int main()', 'int x=89;    // variable declaration.', 'printf(""size of the variable x is %d"", sizeof(x));  // Displaying the size of ?x? variable.', 'printf(""\\nsize of the integer data type is %d"",sizeof(int)); //Displaying the size of integer data type.', 'printf(""\\nsize of the character data type is %d"",sizeof(char)); //Displaying the size of character data type.', 'printf(""\\nsize of the floating data type is %d"",sizeof(float)); //Displaying the size of floating data type.', 'return 0;', '#include <stdio.h>', 'int main()', 'double i=78.0; //variable initialization.', 'float j=6.78; //variable initialization.', 'printf(""size of (i+j) expression is : %d"",sizeof(i+j)); //Displaying the size of the expression (i+j).', 'return 0;']",['size of (i+j) expression is : 8'],[],['|||Operand is a data type|||Operand is an expression|||']
56,['const Pointer in C'],"['A constant pointer in C cannot change the address of the variable to which it is pointing, i.e., the address will remain constant. Therefore, we can say that if a constant pointer is pointing to some variable, then it cannot point to any other variable.']","['https://www.javatpoint.com/void-pointer-in-c', 'https://www.javatpoint.com/size-of-operator-in-c', 'https://www.javatpoint.com/void-pointer-in-c', 'https://www.javatpoint.com/size-of-operator-in-c', 'https://www.javatpoint.com/void-pointer-in-c']","['https://static.javatpoint.com/cpages/images/const-pointer-in-c1.png', 'https://static.javatpoint.com/cpages/images/const-pointer-in-c2.png', 'https://static.javatpoint.com/cpages/images/const-pointer-in-c3.png', 'https://static.javatpoint.com/cpages/images/const-pointer-in-c4.png']",[],[],"['Constant Pointers', 'Syntax of Constant Pointer', 'Pointer to Constant', 'Syntax of Pointer to Constant', 'Constant Pointer to a Constant', 'Syntax']",[],"['Declaration of a constant pointer is given below:', ""Let's understand the constant pointer through an example."", 'In the above code:', 'Declaration of a pointer to constant is given below:', ""Let's understand through an example."", 'In the above code:', ""The above code runs successfully, and it shows the value of 'ptr' in the output."", 'In the above code:', 'Declaration for a constant pointer to a constant is given below:', ""Let's understand through an example."", 'In the above code:']","['A pointer to constant is a pointer through which the value of the variable that the pointer points cannot be changed. The address of these pointers can be changed, but the value of the variable that the pointer points cannot be changed. ', 'The above code shows the error ""assignment of read-only location \'*ptr\'"". This error means that we cannot change the value of the variable to which the pointer is pointing.', 'A constant pointer to a constant is a pointer, which is a combination of the above two pointers. It can neither change the address of the variable to which it is pointing nor it can change the value placed at this address.']","['In the above output, we can observe that the above code produces the error ""assignment of read-only variable \'ptr\'"". It means that the value of the variable \'ptr\' which \'ptr\' is holding cannot be changed. In the above code, we are changing the value of \'ptr\' from &a to &b, which is not possible with constant pointers. Therefore, we can say that the constant pointer, which points to some variable, cannot point to another variable.', 'The above code shows the error ""assignment of read-only location \'*ptr\'"" and ""assignment of read-only variable \'ptr\'"". Therefore, we conclude that the constant pointer to a constant can change neither address nor value, which is pointing by this pointer.']","['<type of pointer> *const <name of pointer>;', 'int *const ptr;', '#include <stdio.h>', 'int main()', 'int a=1;', 'int b=2;', 'int *const ptr;', 'ptr=&a', 'ptr=&b', 'printf(""Value of ptr is :%d"",*ptr);', 'return 0;', 'const <type of pointer>* <name of pointer>', 'const int* ptr;', '#include <stdio.h>', 'int main()', 'int a=100;', 'int b=200;', 'const int* ptr;', 'ptr=&a', 'ptr=&b', 'printf(""Value of ptr is :%u"",ptr);', 'return 0;', '#include <stdio.h>', 'int main()', 'int a=100;', 'int b=200;', 'const int* ptr;', 'ptr=&b', '*ptr=300;', 'printf(""Value of ptr is :%d"",*ptr);', 'return 0;', 'const <type of pointer>* const <name of the pointer>;', 'const int* const ptr;', '#include <stdio.h>', 'int main()', 'int a=10;', 'int b=90;', 'const int* const ptr=&a', '*ptr=12;', 'ptr=&b', 'printf(""Value of ptr is :%d"",*ptr);', 'return 0;']",[],[],"[""|||We declare two variables, i.e., a and b with values 1 and 2, respectively. |||We declare a constant pointer.|||First, we assign the address of variable 'a' to the pointer 'ptr'.|||Then, we assign the address of variable 'b' to the pointer 'ptr'.|||Lastly, we try to print the value of the variable pointed by the 'ptr'.||||||First, we write the code where we are changing the value of a pointer||||||We declare two variables, i.e., a and b with the values 100 and 200 respectively.|||We declare a pointer to constant.|||First, we assign the address of variable 'a' to the pointer 'ptr'.|||Then, we assign the address of variable 'b' to the pointer 'ptr'.|||Lastly, we try to print the value of 'ptr'.||||||Now, we write the code in which we are changing the value of the variable to which the pointer points.||||||We declare two variables, i.e., 'a' and 'b' with the values 100 and 200 respectively.|||We declare a pointer to constant.|||We assign the address of the variable 'b' to the pointer 'ptr'.|||Then, we try to modify the value of the variable 'b' through the pointer 'ptr'.|||Lastly, we try to print the value of the variable which is pointed by the pointer 'ptr'.||||||We declare two variables, i.e., 'a' and 'b' with the values 10 and 90, respectively.|||We declare a constant pointer to a constant and then assign the address of 'a'.|||We try to change the value of the variable 'a' through the pointer 'ptr'.|||Then we try to assign the address of variable 'b' to the pointer 'ptr'.|||Lastly, we print the value of the variable, which is pointed by the pointer 'ptr'.|||""]"
57,['void pointer in C'],"['Till now, we have studied that the address assigned to a pointer should be of the same type as specified in the pointer declaration. For example, if we declare the int pointer, then this int pointer cannot point to the float variable or some other type of variable, i.e., it can point to only int type variable. To overcome this problem, we use a pointer to void. A pointer to void means a generic pointer that can point to any data type. We can assign the address of any data type to the void pointer, and a void pointer can be assigned to any type of the pointer without performing any explicit typecasting.']","['https://www.javatpoint.com/c-dereference-pointer', 'https://www.javatpoint.com/const-pointer-in-c', 'https://www.javatpoint.com/c-dereference-pointer', 'https://www.javatpoint.com/const-pointer-in-c', 'https://www.javatpoint.com/c-dereference-pointer']","['https://static.javatpoint.com/cpages/images/void-pointer-in-c1.png', 'https://static.javatpoint.com/cpages/images/void-pointer-in-c2.png', 'https://static.javatpoint.com/cpages/images/void-pointer-in-c3.png', 'https://static.javatpoint.com/cpages/images/void-pointer-in-c4.png', 'https://static.javatpoint.com/cpages/images/void-pointer-in-c5.png', 'https://static.javatpoint.com/cpages/images/void-pointer-in-c6.png']",[],[],"['Syntax of void pointer', 'Size of the void pointer in C', 'Advantages of void pointer', 'Why we use void pointers?']",[],"['Declaration of the void pointer is given below:', ""In the above declaration, the void is the type of the pointer, and 'ptr' is the name of the pointer."", 'Let us consider some examples:', 'int i=9; \xa0 \xa0 \xa0 \xa0 // integer variable initialization.', 'int *p; \xa0 \xa0 \xa0 \xa0 // integer pointer declaration.', 'float *fp; \xa0 \xa0 \xa0 \xa0 // floating pointer declaration.', 'void *ptr; \xa0 \xa0 \xa0 \xa0 // void pointer declaration.', 'p=fp; \xa0 \xa0 \xa0 \xa0 // incorrect.', 'fp=&i \xa0 \xa0 \xa0 \xa0 // incorrect', 'ptr=p; \xa0 \xa0 \xa0 \xa0 // correct', 'ptr=fp; \xa0 \xa0 \xa0 \xa0 // correct', 'ptr=&i \xa0 \xa0 \xa0 \xa0 // correct', ""Let's look at the below example:"", 'Following are the advantages of a void pointer:', 'Some important points related to void pointer are:', ""The void pointer in C cannot be dereferenced directly. Let's see the below example."", 'Now, we rewrite the above code to remove the error.', 'In the above code, we typecast the void pointer to the integer pointer by using the statement given below:', '(int*)ptr;', ""Then, we print the value of the variable which is pointed by the void pointer 'ptr' by using the statement given below:"", '*(int*)ptr;', ""Let's see the below example:"", ""Let's rewrite the above code to remove the error."", ""Let's understand through an example.""]","['We cannot apply the arithmetic operations on void pointers in C directly. We need to apply the proper typecasting so that we can perform the arithmetic operations on the void pointers.', 'The above code shows the compile-time error that ""invalid use of void expression"" as we cannot apply the arithmetic operations on void pointer directly, i.e., ptr=ptr+1.', 'The above code runs successfully as we applied the proper casting to the void pointer, i.e., (float*)ptr and then we apply the arithmetic operation, i.e., *((float*)ptr+i).', 'We use void pointers because of its reusability. Void pointers can store the object of any type, and we can retrieve the object of any type by using the indirection operator with proper typecasting.']","['The size of the void pointer in C is the same as the size of the pointer of character type. According to C perception, the representation of a pointer to void is the same as the pointer of character type. The size of the pointer will vary depending on the platform that you are using.', ""In the above code, *ptr is a void pointer which is pointing to the integer variable 'a'. As we already know that the void pointer cannot be dereferenced, so the above code will give the compile-time error because we are printing the value of the variable pointed by the pointer 'ptr' directly.""]","['void *pointer name;', 'void *ptr;', '#include <stdio.h>', 'int main()', 'void *ptr = NULL; //void pointer', 'int *p  = NULL;// integer pointer', 'char *cp = NULL;//character pointer', 'float *fp = NULL;//float pointer', 'printf(""size of void pointer = %d\\n\\n"",sizeof(ptr));', 'printf(""size of integer pointer = %d\\n\\n"",sizeof(p));', 'printf(""size of character pointer = %d\\n\\n"",sizeof(cp));', 'printf(""size of float pointer = %d\\n\\n"",sizeof(fp));', 'return 0;', '#include <stdio.h>', '#include<malloc.h>', 'int main()', 'int a=90;', 'int *x = (int*)malloc(sizeof(int)) ;', 'x=&a', 'printf(""Value which is pointed by x pointer : %d"",*x);', 'return 0;', '#include <stdio.h>', 'int main()', 'int a=90;', 'void *ptr;', 'ptr=&a', 'printf(""Value which is pointed by ptr pointer : %d"",*ptr);', 'return 0;', '#include <stdio.h>', 'int main()', 'int a=90;', 'void *ptr;', 'ptr=&a', 'printf(""Value which is pointed by ptr pointer : %d"",*(int*)ptr);', 'return 0;', '#include<stdio.h>', 'int main()', 'float a[4]={6.1,2.3,7.8,9.0};', 'void *ptr;', 'ptr=a;', 'for(int i=0;i<4;i++)', 'printf(""%f,"",*ptr);', 'ptr=ptr+1;         // Incorrect.', '#include<stdio.h>', 'int main()', 'float a[4]={6.1,2.3,7.8,9.0};', 'void *ptr;', 'ptr=a;', 'for(int i=0;i<4;i++)', 'printf(""%f,"",*((float*)ptr+i));', '#include<stdio.h>', 'int main()', ""int a=56; // initialization of a integer variable 'a'."", ""float b=4.5; // initialization of a float variable 'b'."", ""char c='k'; // initialization of a char variable 'c'."", 'void *ptr; // declaration of void pointer.', 'ptr=&a', 'printf(""value of \'a\' is : %d"",*((int*)ptr));', 'ptr=&b', 'printf(""\\nvalue of \'b\' is : %f"",*((float*)ptr));', 'ptr=&c', 'printf(""\\nvalue of \'c\' is : %c"",*((char*)ptr));', 'return 0;']",[],[],"['|||The malloc() and calloc() function return the void pointer, so these functions can be used to allocate the memory of any data type.||||||The void pointer in C can also be used to implement the generic functions in C.||||||Dereferencing a void pointer in C||||||Arithmetic operation on void pointers|||']"
58,['C dereference pointer'],"['As we already know that ""what is a pointer"", a pointer is a variable that stores the address of another variable. The dereference operator is also known as an indirection operator, which is represented by (*). When indirection operator (*) is used with the pointer variable, then it is known as dereferencing a pointer. When we dereference a pointer, then the value of the variable pointed by this pointer will be returned.']","['https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/void-pointer-in-c', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/void-pointer-in-c', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c']","['https://static.javatpoint.com/cpages/images/c-dereference-pointer.png', 'https://static.javatpoint.com/cpages/images/c-dereference-pointer2.png', 'https://static.javatpoint.com/cpages/images/c-dereference-pointer3.png']",[],['Why we use dereferencing pointer?'],[],"[""Note: According to us, if we change the value of 'x', then the value of 'y' will also get changed as the pointer 'ptr' holds the address of the 'x' variable. But this does not happen, as 'y' is storing the local copy of value '5'."", 'Note: If we have more than one pointer pointing to the same location, then the change made by one pointer will be the same as another pointer.']","['Dereference a pointer is used because of the following reasons:', ""Let's observe the following steps to dereference a pointer."", ""Let's combine all the above steps:"", ""Let's consider another example."", 'In the above code:', ""Let's consider another scenario."", 'In the above code:']","[""The above line changes the value of 'x' variable from 9 to 8 because 'ptr' points to the 'x' location and dereferencing of 'ptr', i.e., *ptr=8 will update the value of x.""]",[],"['int x =9;', 'int *ptr;', '*ptr =8;', '#include <stdio.h>', 'int main()', 'int x=9;', 'int *ptr;', 'ptr=&x', '*ptr=8;', 'printf(""value of x is : %d"", x);', 'return 0;}', '#include <stdio.h>', 'int main()', 'int x=4;', 'int y;', 'int *ptr;', 'ptr=&x', 'y=*ptr;', '*ptr=5;', 'printf(""The value of x is : %d"",x);', 'printf(""\\n The value of y is : %d"",y);', 'return 0;', '#include <stdio.h>', 'int main()', 'int a=90;', 'int *ptr1,*ptr2;', 'ptr1=&a', 'ptr2=&a', '*ptr1=7;', '*ptr2=6;', 'printf(""The value of a is : %d"",a);', 'return 0;']",[],[],"[""|||It can be used to access or manipulate the data stored at the memory location, which is pointed by the pointer.|||Any operation applied to the dereferenced pointer will directly affect the value of the variable that it points to.||||||First, we declare the integer variable to which the pointer points.||||||Now, we declare the integer pointer variable.||||||After the declaration of an integer pointer variable, we store the address of 'x' variable to the pointer variable 'ptr'.||||||We can change the value of 'x' variable by dereferencing a pointer 'ptr' as given below:||||||We declare two variables 'x' and 'y' where 'x' is holding a '4' value.|||We declare a pointer variable 'ptr'.|||After the declaration of a pointer variable, we assign the address of the 'x' variable to the pointer 'ptr'.|||As we know that the 'ptr' contains the address of 'x' variable, so '*ptr' is the same as 'x'.|||We assign the value of 'x' to 'y' with the help of 'ptr' variable, i.e., y=*ptr instead of using the 'x' variable. ||||||First, we declare an 'a' variable.|||Then we declare two pointers, i.e., ptr1 and ptr2.|||Both the pointers contain the address of 'a' variable.|||We assign the '7' value to the *ptr1 and '6' to the *ptr2. The final value of 'a' would be '6'.|||""]"
59,['What is a Null Pointer?'],['A Null Pointer is a pointer that does not point to any memory location. It stores the base address of the segment. The null pointer basically stores the Null value while void is the type of the pointer.'],"['https://www.javatpoint.com/c-dereference-pointer', 'https://www.javatpoint.com/const-pointer-in-c', 'https://www.javatpoint.com/c-dereference-pointer', 'https://www.javatpoint.com/const-pointer-in-c', 'https://www.javatpoint.com/c-dereference-pointer']",['https://static.javatpoint.com/cpages/images/null-pointer-in-c.png'],[],"['Applications of Null Pointer', 'Examples of Null Pointer']",[],['Note: It is always a good practice that we assign a Null value to the pointer when we do not know the exact address of memory.'],"['Following are the applications of a Null pointer:', ""int *ptr=(int *)0;\nfloat *ptr=(float *)0;\nchar *ptr=(char *)0;\ndouble *ptr=(double *)0;\nchar *ptr='\\0';\nint *ptr=NULL;"", ""Let's look at the situations where we need to use the null pointer."", 'How to avoid the above situation?']","['A null pointer is a special reserved value which is defined in a stddef header file. Here, Null means that the pointer is referring to the 0th memory location.', 'If we do not have any address which is to be assigned to the pointer, then it is known as a null pointer. When a NULL value is assigned to the pointer, then it is considered as a Null pointer.', 'We can avoid the above situation by using the Null pointer. A null pointer is a pointer pointing to the 0th memory location, which is a reserved memory and cannot be dereferenced. ']","['In the above code, we declare the pointer variable *ptr, but it does not contain the address of any variable. The dereferencing of the uninitialized pointer variable will show the compile-time error as it does not point any variable. According to the stack memory concept, the local variables of a function are stored in the stack, and if the variable does not contain any value, then it shows the garbage value. The above program shows some unpredictable results and causes the program to crash. Therefore, we can say that keeping an uninitialized pointer in a program can cause serious harm to the computer.', 'In the above code, we create a pointer *ptr and assigns a NULL value to the pointer, which means that it does not point any variable. After creating a pointer variable, we add the condition in which we check whether the value of a pointer is null or not. ', 'In the above code, we use the library function, i.e., malloc(). As we know, that malloc() function allocates the memory; if malloc() function is not able to allocate the memory, then it returns the NULL pointer. Therefore, it is necessary to add the condition which will check whether the value of a pointer is null or not, if the value of a pointer is not null means that the memory is allocated.']","['#include <stdio.h>', 'int main()', 'int *ptr;', 'printf(""Address: %d"", ptr); // printing the value of ptr.', 'printf(""Value: %d"", *ptr); // dereferencing the illegal pointer', 'return 0;', '#include <stdio.h>', 'int main()', 'int *ptr=NULL;', 'if(ptr!=NULL)', 'printf(""value of ptr is : %d"",*ptr);', 'else', 'printf(""Invalid pointer"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int *ptr;', 'ptr=(int*)malloc(4*sizeof(int));', 'if(ptr==NULL)', 'printf(""Memory is not allocated"");', 'else', 'printf(""Memory is allocated"");', 'return 0;']",[],[],['|||It is used to initialize o pointer variable when the pointer does not point to a valid memory address.|||It is used to perform error handling with pointers before dereferencing the pointers.|||It is passed as a function argument and to return from a function when we do not want to pass the actual memory address.||||||When we do not assign any memory address to the pointer variable.||||||When we use the malloc() function.|||']
60,['C Function Pointer'],"['As we know that we can create a pointer of any data type such as int, char, float, we can also create a pointer pointing to a function. The code of a function always resides in memory, which means that the function has some address. We can get the address of memory by using the function pointer.']","['https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/null-pointer-in-c', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/null-pointer-in-c', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c']","['https://static.javatpoint.com/cpages/images/c-function-pointer.png', 'https://static.javatpoint.com/cpages/images/c-function-pointer2.png', 'https://static.javatpoint.com/cpages/images/c-function-pointer3.png', 'https://static.javatpoint.com/cpages/images/c-function-pointer4.png']",[],[],"['Declaration of a function pointer', 'Calling a function through a function pointer', ""Passing a function's address as an argument to other function"", 'Array of Function Pointers']",['Note: Declaration of a function is necessary before assigning the address of a function to the function pointer.'],"[""Let's see a simple example."", 'The above code prints the address of main() function.', 'In the above output, we observe that the main() function has some address. Therefore, we conclude that every function has some address.', 'Till now, we have seen that the functions have addresses, so we can create pointers that can contain these addresses, and hence can point them.', 'Syntax of function pointer', 'For example:', 'In the above declaration, *ip is a pointer that points to a function which returns an int value and accepts an integer value as an argument.', 'In the above declaration, *fp is a pointer that points to a function that returns a float value and accepts a float value as an argument.', 'Till now, we have learnt how to declare the function pointer. Our next step is to assign the address of a function to the function pointer.', ""In the above declaration, 'fp' pointer contains the address of the 'func' function. "", 'We already know how to call a function in the usual way. Now, we will see how to call a function using a function pointer.', 'Suppose we declare a function as given below:', 'Calling an above function using a usual way is given below:', 'Calling a function using a function pointer is given below:', ""Let's understand the function pointer through an example."", ""We can pass the function's address as an argument to other functions in the same way we send other arguments to the function."", ""Let's understand through an example."", ""Let's understand through an example.""]","[""We can observe that the declaration of a function is similar to the declaration of a function pointer except that the pointer is preceded by a '*'. So, in the above declaration, fp is declared as a function rather than a pointer."", 'In the above code, we have created an array of function pointers that contain the addresses of four functions. After storing the addresses of functions in an array of function pointers, we call the functions using the function pointer.']","['The effect of calling a function by its name or function pointer is the same. If we are using the function pointer, we can omit the indirection operator as we did in the second case. Still, we use the indirection operator as it makes it clear to the user that we are using a function pointer.', ""In the above code, we have created two functions, i.e., func1() and func2(). The func1() function contains the function pointer as an argument. In the main() method, the func1() method is called in which we pass the address of func2. When func1() function is called, 'ptr' contains the address of 'func2'. Inside the func1() function, we call the func2() function by dereferencing the pointer 'ptr' as it contains the address of func2."", 'Function pointers are used in those applications where we do not know in advance which function will be called. In an array of function pointers, array takes the addresses of different functions, and the appropriate function will be called based on the index number.']","['#include <stdio.h>', 'int main()', 'printf(""Address of main() function is %p"",main);', 'return 0;', 'return type (*ptr_name)(type1, type2…);', 'int (*ip) (int);', 'float (*fp) (float);', 'float (*fp) (int , int);    // Declaration of a function pointer.', 'float func( int , int );    // Declaration of  function.', 'fp = func;                     // Assigning address of func to the fp pointer.', 'float func(int , int);      // Declaration of a function.', 'result = func(a , b);     // Calling a function using usual ways.', 'result = (*fp)( a , b);    // Calling a function using function pointer.', 'result = fp(a , b);         // Calling a function using function pointer, and indirection             operator can be removed.', '#include <stdio.h>', 'int add(int,int);', 'int main()', 'int a,b;', 'int (*ip)(int,int);', 'int result;', 'printf(""Enter the values of a and b : "");', 'scanf(""%d %d"",&a,&b);', 'ip=add;', 'result=(*ip)(a,b);', 'printf(""Value after addition is : %d"",result);', 'return 0;', 'int add(int a,int b)', 'int c=a+b;', 'return c;', 'include <stdio.h>', 'void func1(void (*ptr)());', 'void func2();', 'int main()', 'func1(func2);', 'return 0;', 'void func1(void (*ptr)())', 'printf(""Function1 is called"");', '(*ptr)();', 'void func2()', 'printf(""\\nFunction2 is called"");', '#include <stdio.h>', 'float add(float,int);', 'float sub(float,int);', 'float mul(float,int);', 'float div(float,int);', 'int main()', 'float x;              // variable declaration.', 'int y;', 'float (*fp[4]) (float,int);        // function pointer declaration.', 'fp[0]=add;              // assigning addresses to the elements of an array of a function   pointer.', 'fp[1]=sub;', 'fp[2]=mul;', 'fp[3]=div;', 'printf(""Enter the values of x and y :"");', 'scanf(""%f %d"",&x,&y);', 'float r=(*fp[0]) (x,y);        // Calling add() function.', 'printf(""\\nSum of two values is : %f"",r);', 'r=(*fp[1]) (x,y);             // Calling sub() function.', 'printf(""\\nDifference of two values is : %f"",r);', 'r=(*fp[2]) (x,y);            // Calliung sub() function.', 'printf(""\\nMultiplication of two values is : %f"",r);', 'r=(*fp[3]) (x,y);           // Calling div() function.', 'printf(""\\nDivision of two values is : %f"",r);', 'return 0;', 'float add(float x,int y)', 'float a=x+y;', 'return a;', 'float sub(float x,int y)', 'float a=x-y;', 'return a;', 'float mul(float x,int y)', 'float a=x*y;', 'return a;', 'float div(float x,int y)', 'float a=x/y;', 'return a;']",[],[],[]
61,['Function pointer as argument in C'],"['Till now, we have seen that in C programming, we can pass the variables as an argument to a function. We cannot pass the function as an argument to another function. But we can pass the reference of a function as a parameter by using a function pointer. This process is known as call by reference as the function parameter is passed as a pointer that holds the address of arguments. If any change made by the function using pointers, then it will also reflect the changes at the address of the passed variable.']","['https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/c-function-pointer', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/c-function-pointer', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c']","['https://static.javatpoint.com/cpages/images/function-pointer-as-argument-in-c1.png', 'https://static.javatpoint.com/cpages/images/function-pointer-as-argument-in-c2.png']",[],[],[],[],"[""Let's consider an example:"", 'A function pointer can also point to another function, or we can say that it holds the address of another function.', ""Now, 'a' is a pointer pointing to the add() function. We can call the add() function by using the pointer, i.e., 'a'. Let's see how we can do that:"", ""The above statement calls the add() function by using pointer 'a', and two parameters are passed in 'a', i.e., 2 and 3."", ""Let's see a simple example of how we can pass the function pointer as a parameter."", 'In the above code,', 'Now, we will pass the function pointer as a argument in Quicksort function ""qsort"". It uses an algorithm that sorts an array.', 'In the above code,']","['Therefore, C programming allows you to create a pointer pointing to the function, which can be further passed as an argument to the function. We can create a function pointer as follows:', 'In the above syntax, the type is the variable type which is returned by the function, *pointer_name is the function pointer, and the parameter is the list of the argument passed to the function.']","[""In the above case, we have declared a function named as 'add'. We have also declared the function pointer (*a) which returns the floating-type value, and contains two parameters of integer type. Now, we can assign the address of add() function to the 'a' pointer as both are having the same return type(float), and the same type of arguments.""]","['(type) (*pointer_name)(parameter);', 'float (*add)(); // this is a legal declaration for the function pointer', 'float *add(); // this is an illegal declaration for the function pointer', 'float add (int a, int b);  // function declaration', 'float (*a)(int, int);  // declaration of a pointer to a function', ""a=add; // assigning address of add() to 'a' pointer"", 'a(2, 3);', 'void display(void (*p)())', 'for(int i=1;i<=5;i++)', 'p(i);', 'void print_numbers(int num)', 'cout<<num;', 'int main()', 'void (*p)(int);     // void function pointer declaration', 'printf(""The values are :"");', 'display(print_numbers);', 'return 0;', '#include <stdio.h>', '#include <stdlib.h>', '#include<string.h>', 'int compare(const int *p, const int *q);', 'int (*f)(const void *a, const void *b);', 'int main()', 'int a[]={4,7,6,1,3,2};', 'int num=sizeof(a)/sizeof(int);', 'f=&compare', 'qsort(a, num, sizeof(int), (*f));', 'for(int i=0;i<num;i++)', 'printf(""%d ,"",a[i]);', 'int compare(const int *p, const int *q)', 'if (*p == *q)', 'return 0;', 'else if (*p < *q)', 'return -1;', 'else', 'return 1;']",[],[],"[""|||We have defined two functions named 'display()' and print_numbers().|||Inside the main() method, we have declared a function pointer named as (*p), and we call the display() function in which we pass the print_numbers() function.|||When the control goes to the display() function, then pointer *p contains the address of print_numbers() function. It means that we can call the print_numbers() function using function pointer *p.|||In the definition of display() function, we have defined a 'for' loop, and inside the for loop, we call the print_numbers() function using statement p(i). Here, p(i) means that print_numbers() function will be called on each iteration of i, and the value of 'i' gets printed.||||||We have defined an array of integer type. After creating an array, we have calculated the size of an array by using the sizeof() operator, and stores the size in the num |||We define a compare() function, which compares all the elements in an array and arranges them in ascending order.|||We also have declared the function pointer, i.e., (*f), and stores the address of compare() function in (*f) by using the statement f=&compare.|||We call qsort() function in which we pass the array, size of the array, size of the element, and the comparison function. The comparison function, i.e., compare() will compare the array elements until the elements in an array get sorted in ascending order.|||""]"
62,['C Pointers Test 1'],['The correct option is (b).'],"['https://www.javatpoint.com/c-pointers-2', 'https://www.javatpoint.com/c-array-4', 'https://www.javatpoint.com/c-pointers-2', 'https://www.javatpoint.com/c-array-4']",[],[],[],[],[],"['Explanation:', 'The correct option is (a).', 'Explanation:', 'For the array element a[i][j] the pointer expression is *(*(a+i)+j)', 'For the array element a[i][j][k] the pointer expression is *(*(*(a+i)+j)+k)', 'For the array element a[i][j][k][2] the pointer expression is *(*(*(*(a+i)+j)+k)+2)', 'The correct option is (b).', 'Explanation:', '++*ptr increments the value pointed by ptr and*ptr++ increments the pointer not the value.', 'The correct option is (a).', 'Explanation:', 'The below code is a prototype of malloc() function, here ptr indicates the pointer.', 'In below code, ""*p"" is a pointer of data type char and malloc() function is used for allocating the memory for char.', 'The correct option is (d).', 'Explanation:', 'The size of int and unsigned data type is same therefore there is no problem in a C statement:', 'signed int *p=(int*)malloc(sizeof(unsigned int));']","['For a structure, Arrow ( ->) is used for access the data using pointer variable and Dot(.) operator can be used for accessing the data using normal structure variable.']",[],"['Statement 1: p= (char*) malloc(100);', 'Statement 2: char *p;', 'ptr = (data type *)malloc(size);', 'char *p = (char*)malloc(100);', 'signed int *p=(int*)malloc(sizeof(unsigned int));']",[],[],[]
63,['Dynamic memory allocation in C'],['The concept of dynamic memory allocation in c language enables the C programmer to allocate memory at runtime. Dynamic memory allocation in c language is possible by 4 functions of stdlib.h header file.'],"['https://www.javatpoint.com/c-strings', 'https://www.javatpoint.com/c-dereference-pointer', 'https://www.javatpoint.com/c-strings', 'https://www.javatpoint.com/c-dereference-pointer', 'https://www.javatpoint.com/c-strings']",[],[],"['malloc() function in C', 'calloc() function in C', 'realloc() function in C', 'free() function in C']",[],[],"[""Before learning above functions, let's understand the difference between static memory allocation and dynamic memory allocation."", ""Now let's have a quick look at the methods used for dynamic memory allocation."", 'The malloc() function allocates single block of requested memory.', ""It doesn't initialize memory at execution time, so it has garbage value initially."", 'It returns NULL if memory is not sufficient.', 'The syntax of malloc() function is given below:', ""Let's see the example of malloc() function."", 'The calloc() function allocates multiple block of requested memory.', 'It initially initialize all bytes to zero.', 'It returns NULL if memory is not sufficient.', 'The syntax of calloc() function is given below:', ""Let's see the example of calloc() function."", 'If memory is not sufficient for malloc() or calloc(), you can reallocate the memory by realloc() function. In short, it changes the memory size.', ""Let's see the syntax of realloc() function."", ""Let's see the syntax of free() function.""]","['The memory occupied by malloc() or calloc() functions must be released by calling free() function. Otherwise, it will consume memory until program exit.']",[],"['ptr=(cast-type*)malloc(byte-size)', '#include', '#include', 'int main(){', 'int n,i,*ptr,sum=0;', 'printf(""Enter number of elements: "");', 'scanf(""%d"",&n);', 'ptr=(int*)malloc(n*sizeof(int));  //memory allocated using malloc', 'if(ptr==NULL)', '{', 'printf(""Sorry! unable to allocate memory"");', 'exit(0);', '}', 'printf(""Enter elements of array: "");', 'for(i=0;i', 'ptr=(cast-type*)calloc(number, byte-size)', '#include', '#include', 'int main(){', 'int n,i,*ptr,sum=0;', 'printf(""Enter number of elements: "");', 'scanf(""%d"",&n);', 'ptr=(int*)calloc(n,sizeof(int));  //memory allocated using calloc', 'if(ptr==NULL)', '{', 'printf(""Sorry! unable to allocate memory"");', 'exit(0);', '}', 'printf(""Enter elements of array: "");', 'for(i=0;i', 'ptr=realloc(ptr, new-size)', 'free(ptr)']","['Enter elements of array: 3', 'Enter elements of array: 10', '10', '10', 'Sum=30', 'Enter elements of array: 3', 'Enter elements of array: 10', '10', '10', 'Sum=30']","[""tatic memory allocationdynamic memory allocatio&&&emory is allocated at compile time.memory is allocated at run time&&&emory can't be increased while executing program.memory can be increased while executing program&&&sed in array.used in linked list"", 'alloc()allocates single block of requested memory&&&alloc()allocates multiple block of requested memory&&&ealloc()reallocates the memory occupied by malloc() or calloc() functions&&&ree()frees the dynamically allocated memory']",['|||malloc()|||calloc()|||realloc()|||free()|||']
64,['C Strings'],"[""The string can be defined as the one-dimensional array of characters terminated by a null ('\\0'). The character array or the string is used to manipulate text such as word or sentences. Each character in the array occupies one byte of memory, and the last character must always be 0. The termination character ('\\0') is important in a string since it is the only way to identify where the string ends. When we define a string as char s[10], the character s[10] is implicitly initialized with the null in the memory. ""]","['https://www.javatpoint.com/c-gets-puts', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/c-gets-puts', 'https://www.javatpoint.com/dynamic-memory-allocation-in-c', 'https://www.javatpoint.com/c-gets-puts']","['https://static.javatpoint.com/cpages/images/c-array.png', 'https://static.javatpoint.com/cpages/images/pointer-to-string.png']",[],"['String Example in C', 'Traversing String', 'Accepting string as the input', 'Pointers with strings']","['Difference between char array and string literal', 'Using the length of string', 'Using the null character', 'Some important points']",[],"['There are two ways to declare a string in c language.', ""Let's see the example of declaring string by char array in C language."", 'As we know, array index starts from 0, so it will be represented as in the figure given below.', 'While declaring string, size is not mandatory. So we can write the above code as given below:', 'We can also define the string by the string literal in C language. For example:', ""In such case, '\\0' will be appended at the end of the string by the compiler."", ""Let's see a simple example where a string is declared and being printed. The '%s' is used as a format specifier for the string in c language."", 'Hence, there are two ways to traverse a string.', ""Let's discuss each one of them."", ""Let's see an example of counting the number of vowels in a string."", ""Let's see the same example of counting the number of vowels by using the null character."", 'However, there are the following points which must be noticed while entering the strings by using scanf.']","['Till now, we have used scanf to accept the input from the user. However, it can also be used in the case of strings but with a different scenario. Consider the below code which stores the string while space is encountered.', 'Once a string is defined, it cannot be reassigned to another set of characters. However, using pointers, we can assign the set of characters to the string. Consider the following example.']","['There are two main differences between char array and literal.\n\nWe need to add the null character \'\\0\' at the end of the array by ourself whereas, it is appended internally by the compiler in the case of the character array.\nThe string literal cannot be reassigned to another set of characters whereas, we can reassign the characters of the array.\n\nString Example in C\nLet\'s see a simple example where a string is declared and being printed. The \'%s\' is used as a format specifier for the string in c language.\n\n#include\n#include   \nint main(){  \n  char ch[11]={\'j\', \'a\', \'v\', \'a\', \'t\', \'p\', \'o\', \'i\', \'n\', \'t\', \'\\0\'};  \n   char ch2[11]=""javatpoint"";  \n  \n   printf(""Char Array Value is: %s\\n"", ch);  \n   printf(""String Literal Value is: %s\\n"", ch2);  \n return 0;  \n}  \n\nOutput\nChar Array Value is: javatpoint\nString Literal Value is: javatpoint\n\nTraversing String\nTraversing the string is one of the most important aspects in any of the programming languages. We may need to manipulate a very large text which can be done by traversing the text. Traversing string is somewhat different from the traversing an integer array. We need to know the length of the array to traverse an integer array, whereas we may use the null character in the case of string to identify the end the string and terminate the loop.\nHence, there are two ways to traverse a string.\n\nBy using the length of string\nBy using the null character.\n\nLet\'s discuss each one of them.\nUsing the length of string\nLet\'s see an example of counting the number of vowels in a string.\n\n#include<stdio.h>\nvoid main ()\n{\n\tchar s[11] = ""javatpoint"";\n\tint i = 0; \n\tint count = 0;\n\twhile(i<11)\n\t{\n\t\tif(s[i]==\'a\' || s[i] == \'e\' || s[i] == \'i\' || s[i] == \'u\' || s[i] == \'o\')\n\t\t{\n\t\t\tcount ++;\n\t\t}\n\t\ti++;\n\t}\n\tprintf(""The number of vowels %d"",count);\n}\n\nOutput\nThe number of vowels 4 \n\nUsing the null character\nLet\'s see the same example of counting the number of vowels by using the null character.\n\n#include<stdio.h>\nvoid main ()\n{\n\tchar s[11] = ""javatpoint"";\n\tint i = 0; \n\tint count = 0;\n\twhile(s[i] != NULL)\n\t{\n\t\tif(s[i]==\'a\' || s[i] == \'e\' || s[i] == \'i\' || s[i] == \'u\' || s[i] == \'o\')\n\t\t{\n\t\t\tcount ++;\n\t\t}\n\t\ti++;\n\t}\n\tprintf(""The number of vowels %d"",count);\n}\n\nOutput\nThe number of vowels 4 \n\nAccepting string as the input\nTill now, we have used scanf to accept the input from the user. However, it can also be used in the case of strings but with a different scenario. Consider the below code which stores the string while space is encountered.\n\n#include<stdio.h>\nvoid main ()\n{\n\tchar s[20];\n\tprintf(""Enter the string?"");\n\tscanf(""%s"",s);\n\tprintf(""You entered %s"",s);\n}\n\nOutput\nEnter the string?javatpoint is the best                                                                 \nYou entered javatpoint\n\nIt is clear from the output that, the above code will not work for space separated strings. To make this code working for the space separated strings, the minor changed required in the scanf function, i.e., instead of writing scanf(""%s"",s), we must write: scanf(""%[^\\n]s"",s) which instructs the compiler to store the string s while the new line (\\n) is encountered. Let\'s consider the following example to store the space-separated strings.\n\n#include\nvoid main ()\n{\n\tchar s[20];\n\tprintf(""Enter the string?"");\n\tscanf(""%[^\\n]s"",s);\n\tprintf(""You entered %s"",s);\n}\n\nOutput\nEnter the string?javatpoint is the best\nYou entered javatpoint is the best\n\nHere we must also notice that we do not need to use address of (&) operator in scanf to store a string since string s is an array of characters and the name of the array, i.e., s indicates the base address of the string (character array) therefore we need not use & with it.\nSome important points\nHowever, there are the following points which must be noticed while entering the strings by using scanf.\n\nThe compiler doesn\'t perform bounds checking on the character array. Hence, there can be a case where the length of the string can exceed the dimension of the character array which may always overwrite some important data.\nInstead of using scanf, we may use gets() which is an inbuilt function defined in a header file string.h. The gets() is capable of receiving only one string at a time.\n\nPointers with strings\nWe have used pointers with the array, functions, and primitive data types so far. However, pointers can be used to point to the strings. There are various advantages of using pointers to point strings. Let us consider the following example to access the string via the pointer.\n\n#include<stdio.h>\nvoid main ()\n{\n\tchar s[11] = ""javatpoint"";\n\tchar *p = s; // pointer p is pointing to string s. \n\tprintf(""%s"",p); // the string javatpoint is printed if we print p.\n}\n\nOutput\njavatpoint\n\n\nAs we know that string is an array of characters, the pointers can be used in the same way they were used with arrays. In the above example, p is declared as a pointer to the array of characters s. P affects similar to s since s is the base address of the string and treated as a pointer internally. However, we can not change the content of s or copy the content of s into another string directly. For this purpose, we need to use the pointers to store the strings. In the following example, we have shown the use of pointers to copy the content of a string into another.\n\n#include<stdio.h>\nvoid main ()\n{\n\tchar *p = ""hello javatpoint"";\n\tprintf(""String p: %s\\n"",p);\n\tchar *q;\n\tprintf(""copying the content of p into q...\\n"");\n\tq = p;\n\tprintf(""String q: %s\\n"",q);\n}\n\nOutput\nString p: hello javatpoint \ncopying the content of p into q... \nString q: hello javatpoint \n\nOnce a string is defined, it cannot be reassigned to another set of characters. However, using pointers, we can assign the set of characters to the string. Consider the following example.\n\n#include<stdio.h>\nvoid main ()\n{\n\tchar *p = ""hello javatpoint"";\n\tprintf(""Before assigning: %s\\n"",p);\n\tp = ""hello"";\n\tprintf(""After assigning: %s\\n"",p);\n}\n\nOutput\nBefore assigning: hello javatpoint  \nAfter assigning: hello\n\n\n\nNext TopicC gets() and puts()\n\n\n\n← prev\nnext →\n\n', 'Traversing the string is one of the most important aspects in any of the programming languages. We may need to manipulate a very large text which can be done by traversing the text. Traversing string is somewhat different from the traversing an integer array. We need to know the length of the array to traverse an integer array, whereas we may use the null character in the case of string to identify the end the string and terminate the loop.', 'It is clear from the output that, the above code will not work for space separated strings. To make this code working for the space separated strings, the minor changed required in the scanf function, i.e., instead of writing scanf(""%s"",s), we must write: scanf(""%[^\\n]s"",s) which instructs the compiler to store the string s while the new line (\\n) is encountered. Let\'s consider the following example to store the space-separated strings.', 'Here we must also notice that we do not need to use address of (&) operator in scanf to store a string since string s is an array of characters and the name of the array, i.e., s indicates the base address of the string (character array) therefore we need not use & with it.', 'We have used pointers with the array, functions, and primitive data types so far. However, pointers can be used to point to the strings. There are various advantages of using pointers to point strings. Let us consider the following example to access the string via the pointer.', 'As we know that string is an array of characters, the pointers can be used in the same way they were used with arrays. In the above example, p is declared as a pointer to the array of characters s. P affects similar to s since s is the base address of the string and treated as a pointer internally. However, we can not change the content of s or copy the content of s into another string directly. For this purpose, we need to use the pointers to store the strings. In the following example, we have shown the use of pointers to copy the content of a string into another.']","[""char ch[10]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\\0'};"", ""char ch[]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\\0'};"", 'char ch[]=""javatpoint"";', '#include', '#include', 'int main(){', ""char ch[11]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\\0'};"", 'char ch2[11]=""javatpoint"";', 'printf(""Char Array Value is: %s\\n"", ch);', 'printf(""String Literal Value is: %s\\n"", ch2);', 'return 0;', '#include<stdio.h>', 'void main ()', 'char s[11] = ""javatpoint"";', 'int i = 0;', 'int count = 0;', 'while(i<11)', ""if(s[i]=='a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'u' || s[i] == 'o')"", 'count ++;', 'printf(""The number of vowels %d"",count);', '#include<stdio.h>', 'void main ()', 'char s[11] = ""javatpoint"";', 'int i = 0;', 'int count = 0;', 'while(s[i] != NULL)', ""if(s[i]=='a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'u' || s[i] == 'o')"", 'count ++;', 'printf(""The number of vowels %d"",count);', '#include<stdio.h>', 'void main ()', 'char s[20];', 'printf(""Enter the string?"");', 'scanf(""%s"",s);', 'printf(""You entered %s"",s);', '#include', 'void main ()', 'char s[20];', 'printf(""Enter the string?"");', 'scanf(""%[^\\n]s"",s);', 'printf(""You entered %s"",s);', '#include<stdio.h>', 'void main ()', 'char s[11] = ""javatpoint"";', 'char *p = s; // pointer p is pointing to string s.', 'printf(""%s"",p); // the string javatpoint is printed if we print p.', '#include<stdio.h>', 'void main ()', 'char *p = ""hello javatpoint"";', 'printf(""String p: %s\\n"",p);', 'char *q;', 'printf(""copying the content of p into q...\\n"");', 'printf(""String q: %s\\n"",q);', '#include<stdio.h>', 'void main ()', 'char *p = ""hello javatpoint"";', 'printf(""Before assigning: %s\\n"",p);', 'p = ""hello"";', 'printf(""After assigning: %s\\n"",p);']","['Char Array Value is: javatpoint\nString Literal Value is: javatpoint', 'The number of vowels 4', 'The number of vowels 4', 'Enter the string?javatpoint is the best                                                                 \nYou entered javatpoint', 'Enter the string?javatpoint is the best\nYou entered javatpoint is the best', 'javatpoint', 'String p: hello javatpoint \ncopying the content of p into q... \nString q: hello javatpoint', 'Before assigning: hello javatpoint  \nAfter assigning: hello']",[],"[""|||We need to add the null character '\\0' at the end of the array by ourself whereas, it is appended internally by the compiler in the case of the character array.|||The string literal cannot be reassigned to another set of characters whereas, we can reassign the characters of the array.||||||By using the length of string|||By using the null character.||||||The compiler doesn't perform bounds checking on the character array. Hence, there can be a case where the length of the string can exceed the dimension of the character array which may always overwrite some important data.|||Instead of using scanf, we may use gets() which is an inbuilt function defined in a header file string.h. The gets() is capable of receiving only one string at a time.|||&&&|||By char array|||By string literal|||""]"
65,['C gets() and puts() functions'],['The gets() and puts() are declared in the header file stdio.h. Both the functions are involved in the input/output operations of the strings.'],"['https://www.javatpoint.com/c-string-functions', 'https://www.javatpoint.com/c-strings', 'https://www.javatpoint.com/c-string-functions', 'https://www.javatpoint.com/c-strings', 'https://www.javatpoint.com/c-string-functions']",[],[],"['C gets() function', 'C puts() function']",[],"['Reading string using gets()', 'Output', 'Output', 'Output:']","['Declaration', 'Declaration', ""Let's see an example to read a string using gets() and print it on the console using puts().""]",[],"['The gets() function enables the user to enter some characters followed by the enter key. All the characters entered by the user get stored in a character array. The null character is added to the array to make it a string. The gets() allows the user to enter the space-separated strings. It returns the string entered by the user.', ""The gets() function is risky to use since it doesn't perform any array bound checking and keep reading the characters until the new line (enter) is encountered. It suffers from buffer overflow, which can be avoided by using fgets(). The fgets() makes sure that not more than the maximum limit of characters are read. Consider the following example."", 'The puts() function is very much similar to printf() function. The puts() function is used to print the string on the console which is previously read by using gets() or scanf() function. The puts() function returns an integer value representing the number of characters being printed on the console. Since, it prints an additional newline character with the string, which moves the cursor to the new line on the console, the integer value returned by puts() will always be equal to the number of characters present in the string plus 1.']","['char[] gets(char[]);', '#include', 'void main ()', 'char s[30];', 'printf(""Enter the string? "");', 'gets(s);', 'printf(""You entered %s"",s);', '#include', 'void main()', 'char str[20];', 'printf(""Enter the string? "");', 'fgets(str, 20, stdin);', 'printf(""%s"", str);', 'int puts(char[])', '#include', '#include', 'int main(){', 'char name[50];', 'printf(""Enter your name: "");', 'gets(name); //reads string from user', 'printf(""Your name is: "");', 'puts(name);  //displays string', 'return 0;']","['Enter the string? \njavatpoint is the best\nYou entered javatpoint is the best', 'Enter the string? javatpoint is the best website\njavatpoint is the b', 'Enter your name: Sonoo Jaiswal\nYour name is: Sonoo Jaiswal']",[],[]
66,['C String Functions'],"['There are many important string functions defined in ""string.h"" library.']","['https://www.javatpoint.com/c-strlen', 'https://www.javatpoint.com/c-gets-puts', 'https://www.javatpoint.com/c-strlen', 'https://www.javatpoint.com/c-strcpy', 'https://www.javatpoint.com/c-strcat', 'https://www.javatpoint.com/c-strcmp', 'https://www.javatpoint.com/c-strrev', 'https://www.javatpoint.com/c-strlwr', 'https://www.javatpoint.com/c-strupr', 'https://www.javatpoint.com/c-strlen', 'https://www.javatpoint.com/c-gets-puts', 'https://www.javatpoint.com/c-strlen']",[],[],[],[],[],[],[],[],[],[],"['o.FunctionDescriptio&&&)strlen(string_name)returns the length of string name&&&)strcpy(destination, source)copies the contents of source string to destination string&&&)strcat(first_string, second_string)concats or joins first string with second string. The result of the string is stored in first string&&&)strcmp(first_string, second_string)compares the first string with second string. If both strings are same, it returns 0&&&)strrev(string)returns reverse string&&&)strlwr(string)returns string characters in lowercase&&&)strupr(string)returns string characters in uppercase']",[]
67,['C String Length: strlen() function'],"[""The strlen() function returns the length of the given string. It doesn't count null character '\\0'.""]","['https://www.javatpoint.com/c-strcpy', 'https://www.javatpoint.com/c-string-functions', 'https://www.javatpoint.com/c-strcpy', 'https://www.javatpoint.com/c-string-functions', 'https://www.javatpoint.com/c-strcpy']",[],[],[],[],[],[],[],[],"['#include', '#include', 'int main(){', ""char ch[20]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\\0'};"", 'printf(""Length of string is: %d"",strlen(ch));', 'return 0;']",['Length of string is: 10'],[],[]
68,['C Copy String: strcpy()'],"['The strcpy(destination, source) function copies the source string in destination.']","['https://www.javatpoint.com/c-strcat', 'https://www.javatpoint.com/c-strlen', 'https://www.javatpoint.com/c-strcat', 'https://www.javatpoint.com/c-strlen', 'https://www.javatpoint.com/c-strcat']",[],[],[],[],[],[],[],[],"['#include', '#include', 'int main(){', ""char ch[20]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\\0'};"", 'char ch2[20];', 'strcpy(ch2,ch);', 'printf(""Value of second string is: %s"",ch2);', 'return 0;']",['Value of second string is: javatpoint'],[],[]
69,['C String Concatenation: strcat()'],"['The strcat(first_string, second_string) function concatenates two strings and result is returned to first_string.']","['https://www.javatpoint.com/c-strcmp', 'https://www.javatpoint.com/c-strcpy', 'https://www.javatpoint.com/c-strcmp', 'https://www.javatpoint.com/c-strcpy', 'https://www.javatpoint.com/c-strcmp']",[],[],[],[],[],[],[],[],"['#include', '#include', 'int main(){', ""char ch[10]={'h', 'e', 'l', 'l', 'o', '\\0'};"", ""char ch2[10]={'c', '\\0'};"", 'strcat(ch,ch2);', 'printf(""Value of first string is: %s"",ch);', 'return 0;']",['Value of first string is: helloc'],[],[]
70,['C Compare String: strcmp()'],"['The strcmp(first_string, second_string) function compares two string and returns 0 if both strings are equal.']","['https://www.javatpoint.com/c-strrev', 'https://www.javatpoint.com/c-strcat', 'https://www.javatpoint.com/c-strrev', 'https://www.javatpoint.com/c-strcat', 'https://www.javatpoint.com/c-strrev']",[],[],[],[],[],"['Here, we are using gets() function which reads string from the console.']",[],[],"['#include', '#include', 'int main(){', 'char str1[20],str2[20];', 'printf(""Enter 1st string: "");', 'gets(str1);//reads string from console', 'printf(""Enter 2nd string: "");', 'gets(str2);', 'if(strcmp(str1,str2)==0)', 'printf(""Strings are equal"");', 'else', 'printf(""Strings are not equal"");', 'return 0;']",['Enter 1st string: hello\nEnter 2nd string: hello\nStrings are equal'],[],[]
71,['C Reverse String: strrev()'],"[""The strrev(string) function returns reverse of the given string. Let's see a simple example of strrev() function.""]","['https://www.javatpoint.com/c-strlwr', 'https://www.javatpoint.com/c-strcmp', 'https://www.javatpoint.com/c-strlwr', 'https://www.javatpoint.com/c-strcmp', 'https://www.javatpoint.com/c-strlwr']",[],[],[],[],[],[],[],[],"['#include', '#include', 'int main(){', 'char str[20];', 'printf(""Enter string: "");', 'gets(str);//reads string from console', 'printf(""String is: %s"",str);', 'printf(""\\nReverse String is: %s"",strrev(str));', 'return 0;']",['Enter string: javatpoint\nString is: javatpoint\nReverse String is: tnioptavaj'],[],[]
72,['C String Lowercase: strlwr()'],"[""The strlwr(string) function returns string characters in lowercase. Let's see a simple example of strlwr() function.""]","['https://www.javatpoint.com/c-strupr', 'https://www.javatpoint.com/c-strrev', 'https://www.javatpoint.com/c-strupr', 'https://www.javatpoint.com/c-strrev', 'https://www.javatpoint.com/c-strupr']",[],[],[],[],[],[],[],[],"['#include', '#include', 'int main(){', 'char str[20];', 'printf(""Enter string: "");', 'gets(str);//reads string from console', 'printf(""String is: %s"",str);', 'printf(""\\nLower String is: %s"",strlwr(str));', 'return 0;']",['Enter string: JAVATpoint\nString is: JAVATpoint\nLower String is: javatpoint'],[],[]
73,['C String Uppercase: strupr()'],"[""The strupr(string) function returns string characters in uppercase. Let's see a simple example of strupr() function.""]","['https://www.javatpoint.com/c-strstr', 'https://www.javatpoint.com/c-strlwr', 'https://www.javatpoint.com/c-strstr', 'https://www.javatpoint.com/c-strlwr', 'https://www.javatpoint.com/c-strstr']",[],[],[],[],[],[],[],[],"['#include', '#include', 'int main(){', 'char str[20];', 'printf(""Enter string: "");', 'gets(str);//reads string from console', 'printf(""String is: %s"",str);', 'printf(""\\nUpper String is: %s"",strupr(str));', 'return 0;']",['Enter string: javatpoint\nString is: javatpoint\nUpper String is: JAVATPOINT'],[],[]
74,['C String strstr()'],['The strstr() function returns pointer to the first occurrence of the matched string in the given string. It is used to return substring from first match till the last character.'],"['https://www.javatpoint.com/c-math', 'https://www.javatpoint.com/c-strupr', 'https://www.javatpoint.com/c-math', 'https://www.javatpoint.com/c-strupr', 'https://www.javatpoint.com/c-math']",[],[],['String strstr() parameters'],[],[],"['string: It represents the full string from where substring will be searched.', 'match: It represents the substring to be searched in the full string.']",[],[],"['char *strstr(const char *string, const char *match)', '#include', '#include', 'int main(){', 'char str[100]=""this is javatpoint with c and java"";', 'char *sub;', 'sub=strstr(str,""java"");', 'printf(""\\nSubstring is: %s"",sub);', 'return 0;']",['javatpoint with c and java'],[],[]
75,['C String Test 1'],['The correct option is (b).'],"['https://www.javatpoint.com/c-string-2', 'https://www.javatpoint.com/c-pointers-4', 'https://www.javatpoint.com/c-pointers-4', 'https://www.javatpoint.com/c-string-2']",[],[],[],[],[],"['Explanation:', 'The function gets() is used for collecting a string of characters terminated by new line from the standard input stream stdin.', 'Therefore gets() is more appropriate for reading a multi-word string.', 'The correct option is (c).', 'Explanation:', 'The function ultoa() is used for converting an unsigned long integer to a string.', 'The correct option is (c).', 'Explanation:', 'C library function strcmp() compares the two strings with each other and the value is return accordingly.', 'Comparison occurs between a first string (str1) with a second string (str2).', 'On comparing the two string, the values return by a function strcmp() are:', 'The correct option is (a).', 'Explanation:', 'The correct option is (c).', 'Explanation:', 'Step 1: char a[] = ""%d\\n""; The variable \'a\' is declared as an array of characters and initialized with string ""%d"".', 'Step 2: a[1] = \'b\'; Here, we overwrite the second element of array ?a? by \'b\'. Hence the array ?a? becomes ""%c"".', 'Step 3: printf(a, 65); becomes printf(""%c"", 65);', ""Therefore it will print the ASCII value of 65. Hence the output is 'A'.""]",[],"['The strcmp() is a built-in function available in ""string.h"" header file. It is used for comparing the two strings. It returns 0 if both are same strings. It returns positive value greater than 0 if first string is greater than second string, otherwise it returns negative value.']","['int strcmp (const char *str1, const char *str2)', '#include', 'int main()', 'char a[] = ""%d\\n"";', ""a[1] = 'b';"", 'printf(a, 65);', 'return 0;']",[],[],"['|||If, str1 is equal to str2 then Return value = 0|||If, str1 is greater than str2 then Return value > 0|||If, str1 is less than str2 then Return value < 0|||']"
76,['C Math'],"['C Programming allows us to perform mathematical operations through the functions defined in <math.h> header file. The <math.h> header file contains various methods for performing mathematical operations such as sqrt(), pow(), ceil(), floor() etc.']","['https://www.javatpoint.com/structure-in-c', 'https://www.javatpoint.com/c-strstr', 'https://www.javatpoint.com/structure-in-c', 'https://www.javatpoint.com/c-strstr', 'https://www.javatpoint.com/structure-in-c']",[],[],['C Math Functions'],['C Math Example'],[],"['There are various methods in math.h header file. The commonly used functions of math.h header file are given below.', ""Let's see a simple example of math functions found in math.h header file.""]",[],[],"['#include', '#include', 'int main(){', 'printf(""\\n%f"",ceil(3.6));', 'printf(""\\n%f"",ceil(3.3));', 'printf(""\\n%f"",floor(3.6));', 'printf(""\\n%f"",floor(3.2));', 'printf(""\\n%f"",sqrt(16));', 'printf(""\\n%f"",sqrt(7));', 'printf(""\\n%f"",pow(2,4));', 'printf(""\\n%f"",pow(3,3));', 'printf(""\\n%d"",abs(-12));', 'return 0;']",['4.000000\n4.000000\n3.000000\n3.000000\n4.000000\n2.645751\n16.000000\n27.000000\n12'],"['o.FunctionDescriptio&&&)ceil(number)rounds up the given number. It returns the integer value which is greater than or equal to given number&&&)floor(number)rounds down the given number. It returns the integer value which is less than or equal to given number&&&)sqrt(number)returns the square root of given number&&&)pow(base, exponent)returns the power of given number&&&)abs(number)returns the absolute value of given number']",[]
77,['C Structure'],"['In C, there are cases where we need to store multiple attributes of an entity. It is not necessary that an entity has all the information of one type only. It can have different attributes of different data types. For example, an entity Student may have its name (string), roll number (int), marks (float). To store such type of information regarding an entity student, we have the following approaches:']","['https://www.javatpoint.com/typedef-in-c', 'https://www.javatpoint.com/c-math', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/typedef-in-c', 'https://www.javatpoint.com/c-math', 'https://www.javatpoint.com/typedef-in-c']","['https://static.javatpoint.com/cpages/images/structure_memory_allocation.png', 'https://static.javatpoint.com/cpages/images/structure-in-c.png']",[],"['Why use structure?', 'What is Structure', 'Declaring structure variable', 'Accessing members of the structure']","['Which approach is good', 'C Structure example']",[],"[""Let's look at the first approach in detail."", ""The ,struct keyword is used to define the structure. Let's see the syntax to define the structure in c."", ""Let's see the example to define a structure for an entity employee in c."", 'The following image shows the memory allocation of the structure employee that is defined in the above example.', ""Let's see the example to declare the structure variable by struct keyword. It should be declared within the main function."", 'Now write given code inside the main() function.', ""Let's see another way to declare variable at the time of defining the structure."", 'If number of variables are not fixed, use the 1st approach. It provides you the flexibility to declare the structure variable many times.', 'If no. of variables are fixed, use 2nd approach. It saves your code to declare a variable in main() function.', 'There are two ways to access structure members:', ""Let's see the code to access the id member of p1 variable by. (member) operator."", ""Let's see a simple example of structure in C language."", ""Let's see another example of the structure in C language to store many employees information.""]","['Structure in c is a user-defined data type that enables us to store the collection of different data types. Each element of a structure is called a member. Structures ca; simulate the use of classes and templates as it can store various information ', ""Here, struct is the keyword; employee is the name of the structure; id, name, and salary are the members or fields of the structure. Let's understand it by the diagram given below:"", 'We can declare a variable for the structure so that we can access the member of the structure easily. There are two ways to declare structure variable:', 'The variables e1 and e2 can be used to access the values stored in the structure. Here, e1 and e2 can be treated in the same way as the objects in C++ and Java.']","['The above program may fulfill our requirement of storing the information of an entity student. However, the program is very complex, and the complexity increase with the amount of the input. The elements of each of the array are stored contiguously, but all the arrays may not be stored contiguously in the memory. C provides you with an additional and simpler approach where you can use a special data structure, i.e., structure, in which, you can group all the information of different data type regarding an entity.']","['#include<stdio.h>', 'void main ()', 'char names[2][10],dummy; // 2-dimensioanal character array names is used to store the names of the students', 'int roll_numbers[2],i;', 'float marks[2];', 'for (i=0;i<3;i++)', 'printf(""Enter the name, roll number, and marks of the student %d"",i+1);', 'scanf(""%s %d %f"",&names[i],&roll_numbers[i],&marks[i]);', 'scanf(""%c"",&dummy); // enter will be stored into dummy character at each iteration', 'printf(""Printing the Student details ...\\n"");', 'for (i=0;i<3;i++)', 'printf(""%s %d %f\\n"",names[i],roll_numbers[i],marks[i]);', 'struct structure_name', 'data_type member1;', 'data_type member2;', 'data_type memeberN;', 'struct employee', '{   int id;', 'char name[20];', 'float salary;', 'struct employee', '{   int id;', 'char name[50];', 'float salary;', 'struct employee e1, e2;', 'struct employee', '{   int id;', 'char name[50];', 'float salary;', '#include', '#include', 'struct employee', '{   int id;', 'char name[50];', '}e1;  //declaring e1 variable for structure', 'int main( )', 'e1.id=101;', 'strcpy(e1.name, ""Sonoo Jaiswal"");//copying string into char array', 'printf( ""employee 1 id : %d\\n"", e1.id);', 'printf( ""employee 1 name : %s\\n"", e1.name);', 'return 0;', '#include', '#include', 'struct employee', '{   int id;', 'char name[50];', 'float salary;', '}e1,e2;  //declaring e1 and e2 variables for structure', 'int main( )', 'e1.id=101;', 'strcpy(e1.name, ""Sonoo Jaiswal"");//copying string into char array', 'e1.salary=56000;', 'e2.id=102;', 'strcpy(e2.name, ""James Bond"");', 'e2.salary=126000;', 'printf( ""employee 1 id : %d\\n"", e1.id);', 'printf( ""employee 1 name : %s\\n"", e1.name);', 'printf( ""employee 1 salary : %f\\n"", e1.salary);', 'printf( ""employee 2 id : %d\\n"", e2.id);', 'printf( ""employee 2 name : %s\\n"", e2.name);', 'printf( ""employee 2 salary : %f\\n"", e2.salary);', 'return 0;']","['Enter the name, roll number, and marks of the student 1Arun 90 91        \nEnter the name, roll number, and marks of the student 2Varun 91 56      \nEnter the name, roll number, and marks of the student 3Sham 89 69\n\nPrinting the Student details...\nArun 90 91.000000                                                                      \nVarun 91 56.000000  \nSham 89 69.000000', 'employee 1 id : 101\nemployee 1 name : Sonoo Jaiswal', 'employee 1 id : 101\nemployee 1 name : Sonoo Jaiswal\nemployee 1 salary : 56000.000000\nemployee 2 id : 102\nemployee 2 name : James Bond\nemployee 2 salary : 126000.000000']",[],"['|||Construct individual arrays for storing names, roll numbers, and marks. |||Use a special data structure to store the collection of different data types.|||&&&|||By struct keyword within main() function|||By declaring a variable at the time of defining the structure.||||||By . (member or dot operator)|||By -> (structure pointer operator)|||']"
78,['typedef in C'],"['The typedef is a keyword used in C programming to provide some meaningful names to the already existing variable in the C program. It behaves similarly as we define the alias for the commands. In short, we can say that this keyword is used to redefine the name of an already existing variable.']","['https://www.javatpoint.com/array-of-structures-in-c', 'https://www.javatpoint.com/structure-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/array-of-structures-in-c', 'https://www.javatpoint.com/structure-in-c', 'https://www.javatpoint.com/array-of-structures-in-c']",[],[],[],"['Syntax of typedef', 'Using typedef with structures', 'Using typedef with pointers']",[],"[""In the above syntax, 'existing_name' is the name of an already existing variable while 'alias name' is another name given to the existing variable."", 'In the above statements, we have declared the unit variable of type unsigned int by using a typedef keyword.', 'Now, we can create the variables of type unsigned int by writing the following statement:', 'instead of writing:', ""Let's understand through a simple example."", 'Consider the below structure declaration:', 'In the above structure declaration, we have created the variable of student type by writing the following statement:', 'The above typedef can be written as:', ""Let's see another example where we typedef the structure declaration."", 'We can also provide another name or alias name to the pointer variables with the help of the typedef.', 'For example, we normally declare a pointer, as shown below:', 'We can rename the above pointer variable as given below:', ""In the above statement, p1 and p2 are the variables of type 'ptr'.""]","['For example, suppose we want to create a variable of type unsigned int, then it becomes a tedious task if we want to declare multiple variables of this type. To overcome the problem, we use a typedef keyword.', 'Till now, we have observed that the typedef keyword provides a nice shortcut by providing an alternative name for an already existing variable. This keyword is useful when we are dealing with the long data type especially, structure declarations.', 'The above statement shows the creation of a variable, i.e., s1, but the statement is quite big. To avoid such a big statement, we use the typedef keyword to create the variable of type student.', 'In the above statement, we have declared the variable stud of type struct student. Now, we can use the stud variable in a program to create the variables of type struct student.', 'From the above declarations, we conclude that typedef keyword reduces the length of the code and complexity of data types. It also helps in understanding the program.', ""In the above statement, we have declared the variable of type int*. Now, we can create the variable of type int* by simply using the 'ptr' variable as shown in the below statement:""]",[],"['typedef <existing_name> <alias_name>', 'typedef unsigned int unit;', 'unit a, b;', 'unsigned int a, b;', '#include <stdio.h>', 'int main()', 'typedef unsigned int unit;', 'unit i,j;', 'printf(""Value of i is :%d"",i);', 'printf(""\\nValue of j is :%d"",j);', 'return 0;', 'Value of i is :10', 'Value of j is :20', 'struct student', 'char name[20];', 'int age;', 'struct student s1;', 'struct student s1;', 'struct student', 'char name[20];', 'int age;', 'typedef struct student stud;', 'stud s1, s2;', 'typedef struct student', 'char name[20];', 'int age;', '} stud;', 'stud s1,s2;', '#include <stdio.h>', 'typedef struct student', 'char name[20];', 'int age;', 'int main()', 'stud s1;', 'printf(""Enter the details of student s1: "");', 'printf(""\\nEnter the name of the student:"");', 'scanf(""%s"",&s1.name);', 'printf(""\\nEnter the age of student:"");', 'scanf(""%d"",&s1.age);', 'printf(""\\n Name of the student is : %s"", s1.name);', 'printf(""\\n Age of the student is : %d"", s1.age);', 'return 0;', 'Enter the details of student s1:', 'Enter the name of the student: Peter', 'Enter the age of student: 28', 'Name of the student is : Peter', 'Age of the student is : 28', 'int* ptr;', 'typedef int* ptr;', 'ptr p1, p2 ;']","['Value of i is :10', 'Value of j is :20', 'Enter the details of student s1:', 'Enter the name of the student: Peter', 'Enter the age of student: 28', 'Name of the student is : Peter', 'Age of the student is : 28']",[],[]
79,['C Array of Structures'],"['Consider a case, where we need to store the data of 5 students. We can store it by using the structure as given below. ']","['https://www.javatpoint.com/nested-structure-in-c', 'https://www.javatpoint.com/typedef-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/structure-in-c', 'https://www.javatpoint.com/nested-structure-in-c', 'https://www.javatpoint.com/typedef-in-c', 'https://www.javatpoint.com/nested-structure-in-c']",['https://static.javatpoint.com/cpages/images/array-of-strcutures.png'],[],"['Why use an array of structures?', 'Array of Structures in C']",[],[],"[""Let's see an example of an array of structures that stores information of 5 students and prints it.""]",[],"['In the above program, we have stored data of 3 students in the structure. However, the complexity of the program will be increased if there are 20 students. In that case, we will have to declare 20 different structure variables and store them one by one. This will always be tough since we will have to declare a variable every time we add a student. Remembering the name of all the variables is also a very tricky task. However, c enables us to declare an array of structures by using which, we can avoid declaring the different structure variables; instead we can make a collection containing all the structures that store the information of different entities. ', 'An array of structres in C can be defined as the collection of multiple structures variables where each variable contains information about different entities. The array of structures in C are used to store information about multiple entities of different data types. The array of structures is also known as the collection of structures.']","['#include', 'struct student', 'char name[20];', 'int id;', 'float marks;', 'void main()', 'struct student s1,s2,s3;', 'int dummy;', 'printf(""Enter the name, id, and marks of student 1 "");', 'scanf(""%s %d %f"",s1.name,&s1.id,&s1.marks);', 'scanf(""%c"",&dummy);', 'printf(""Enter the name, id, and marks of student 2 "");', 'scanf(""%s %d %f"",s2.name,&s2.id,&s2.marks);', 'scanf(""%c"",&dummy);', 'printf(""Enter the name, id, and marks of student 3 "");', 'scanf(""%s %d %f"",s3.name,&s3.id,&s3.marks);', 'scanf(""%c"",&dummy);', 'printf(""Printing the details....\\n"");', 'printf(""%s %d %f\\n"",s1.name,s1.id,s1.marks);', 'printf(""%s %d %f\\n"",s2.name,s2.id,s2.marks);', 'printf(""%s %d %f\\n"",s3.name,s3.id,s3.marks);', '#include', '#include', 'struct student{', 'int rollno;', 'char name[10];', 'int main(){', 'int i;', 'struct student st[5];', 'printf(""Enter Records of 5 students"");', 'for(i=0;i<5;i++){', 'printf(""\\nEnter Rollno:"");', 'scanf(""%d"",&st[i].rollno);', 'printf(""\\nEnter Name:"");', 'scanf(""%s"",&st[i].name);', 'printf(""\\nStudent Information List:"");', 'for(i=0;i<5;i++){', 'printf(""\\nRollno:%d, Name:%s"",st[i].rollno,st[i].name);', 'return 0;']","['Enter the name, id, and marks of student 1 James 90 90  \nEnter the name, id, and marks of student 2 Adoms 90 90  \nEnter the name, id, and marks of student 3 Nick 90 90       \nPrinting the details....        \nJames 90 90.000000                          \nAdoms 90 90.000000                      \nNick 90 90.000000', 'Enter Records of 5 students\nEnter Rollno:1\nEnter Name:Sonoo\nEnter Rollno:2\nEnter Name:Ratan\nEnter Rollno:3\nEnter Name:Vimal\nEnter Rollno:4\nEnter Name:James\nEnter Rollno:5\nEnter Name:Sarfraz\n\nStudent Information List:\nRollno:1, Name:Sonoo\nRollno:2, Name:Ratan\nRollno:3, Name:Vimal\nRollno:4, Name:James\nRollno:5, Name:Sarfraz']",[],[]
80,['Nested Structure in C'],"['C provides us the feature of nesting one structure within another structure by using which, complex data types are created. For example, we may need to store the address of an entity employee in a structure. The attribute address may also have the subparts as street number, city, state, and pin code. Hence, to store the address of the employee, we need to store the address of the employee into a separate structure and nest the structure address into the structure employee. Consider the following program.']","['https://www.javatpoint.com/structure-padding-in-c', 'https://www.javatpoint.com/array-of-structures-in-c', 'https://www.javatpoint.com/structure-padding-in-c', 'https://www.javatpoint.com/array-of-structures-in-c', 'https://www.javatpoint.com/structure-padding-in-c']",[],[],"['Accessing Nested Structure', 'C Nested Structure example', 'Passing structure to function']","['1) Separate structure', '2) Embedded structure']",[],"['The structure can be nested in the following ways.', 'Here, we create two structures, but the dependent structure should be used inside the main structure as a member. Consider the following example.', 'We can access the member of the nested structure by Outer_Structure.Nested_Structure.member as given below:', ""Let's see a simple example of the nested structure in C language.""]","['As you can see, doj (date of joining) is the variable of type Date. Here doj is used as a member in Employee structure. In this way, we can use Date structure in many structures.', 'The embedded structure enables us to declare the structure inside the structure. Hence, it requires less line of codes but it can not be used in multiple data structures. Consider the following example.']","['Just like other variables, a structure can also be passed to a function. We may pass the structure members into the function or pass the structure variable at once. Consider the following example to pass the structure variable employee to a function display() which is used to display the details of an employee.']","['#include<stdio.h>', 'struct address', 'char city[20];', 'int pin;', 'char phone[14];', 'struct employee', 'char name[20];', 'struct address add;', 'void main ()', 'struct employee emp;', 'printf(""Enter employee information?\\n"");', 'scanf(""%s %s %d %s"",emp.name,emp.add.city, &emp.add.pin, emp.add.phone);', 'printf(""Printing the employee information....\\n"");', 'printf(""name: %s\\nCity: %s\\nPincode: %d\\nPhone: %s"",emp.name,emp.add.city,emp.add.pin,emp.add.phone);', 'struct Date', 'int dd;', 'int mm;', 'int yyyy;', 'struct Employee', 'int id;', 'char name[20];', 'struct Date doj;', 'struct Employee', 'int id;', 'char name[20];', 'struct Date', 'int dd;', 'int mm;', 'int yyyy;', '}doj;', 'e1.doj.dd', 'e1.doj.mm', 'e1.doj.yyyy', '#include', '#include', 'struct Employee', 'int id;', 'char name[20];', 'struct Date', 'int dd;', 'int mm;', 'int yyyy;', '}doj;', 'int main( )', 'e1.id=101;', 'strcpy(e1.name, ""Sonoo Jaiswal"");//copying string into char array', 'e1.doj.dd=10;', 'e1.doj.mm=11;', 'e1.doj.yyyy=2014;', 'printf( ""employee id : %d\\n"", e1.id);', 'printf( ""employee name : %s\\n"", e1.name);', 'printf( ""employee date of joining (dd/mm/yyyy) : %d/%d/%d\\n"", e1.doj.dd,e1.doj.mm,e1.doj.yyyy);', 'return 0;', '#include<stdio.h>', 'struct address', 'char city[20];', 'int pin;', 'char phone[14];', 'struct employee', 'char name[20];', 'struct address add;', 'void display(struct employee);', 'void main ()', 'struct employee emp;', 'printf(""Enter employee information?\\n"");', 'scanf(""%s %s %d %s"",emp.name,emp.add.city, &emp.add.pin, emp.add.phone);', 'display(emp);', 'void display(struct employee emp)', 'printf(""Printing the details....\\n"");', 'printf(""%s %s %d %s"",emp.name,emp.add.city,emp.add.pin,emp.add.phone);']","['Enter employee information?\n\nArun            \n\nDelhi           \n\n110001       \n\n1234567890    \n\nPrinting the employee information....   \n\nname: Arun      \n\nCity: Delhi  \n\nPincode: 110001\n\nPhone: 1234567890', 'employee id : 101\nemployee name : Sonoo Jaiswal\nemployee date of joining (dd/mm/yyyy) : 10/11/2014']",[],['|||By separate structure |||By Embedded structure|||']
81,['Structure Padding in C'],['Structure padding is a concept in C that adds the one or more empty bytes between the memory addresses to align the data in memory.'],"['https://www.javatpoint.com/c-union', 'https://www.javatpoint.com/nested-structure-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpu-full-form', 'https://www.javatpoint.com/c-union', 'https://www.javatpoint.com/nested-structure-in-c', 'https://www.javatpoint.com/c-union']","['https://static.javatpoint.com/cpages/images/structure-padding-in-c1.png', 'https://static.javatpoint.com/cpages/images/structure-padding-in-c2.png', 'https://static.javatpoint.com/cpages/images/structure-padding-in-c3.png', 'https://static.javatpoint.com/cpages/images/structure-padding-in-c4.png', 'https://static.javatpoint.com/cpages/images/structure-padding-in-c5.png', 'https://static.javatpoint.com/cpages/images/structure-padding-in-c6.png', 'https://static.javatpoint.com/cpages/images/structure-padding-in-c7.png', 'https://static.javatpoint.com/cpages/images/structure-padding-in-c8.png', 'https://static.javatpoint.com/cpages/images/structure-padding-in-c9.png']",[],[],"['What is the size of the struct student?', 'Structure Padding', 'Why structure padding?', ""What's the problem?"", 'How is structure padding done?', 'Changing order of the variables', 'How to avoid the structure padding in C?']",[],"[""Let's first understand the structure padding in C through a simple scenario which is given below:"", 'Now, we calculate the size of the struct student. We assume that the size of the int is 4 bytes, and the size of the char is 1 byte.', 'The processor does not read 1 byte at a time. It reads 1 word at a time.', 'What does the 1 word mean?', 'If we have a 32-bit processor, then the processor reads 4 bytes at a time, which means that 1 word is equal to 4 bytes.', 'If we have a 64-bit processor, then the processor reads 8 bytes at a time, which means that 1 word is equal to 8 bytes.', 'If we have a 32-bit processor (4 bytes at a time), then the pictorial representation of the memory for the above structure would be:', ""Let's create a simple program of structures."", ""Now, we will see what happens when we change the order of the variables, does it affect the output of the program. Let's consider the same program."", 'Now, we need to understand ""why the output is different in this case"".', 'We can avoid the structure padding in C in two ways:', 'Using #pragma pack(1) directive']","['Suppose we create a user-defined structure. When we create an object of this structure, then the contiguous memory will be allocated to the structure members.', 'In the above case, when we calculate the size of the struct student, size comes to be 6 bytes. But this answer is wrong. Now, we will understand why this answer is wrong? We need to understand the concept of structure padding.', 'Therefore, we can say that a 32-bit processor is capable of accessing 4 bytes at a time, whereas a 64-bit processor is capable of accessing 8 bytes at a time. It depends upon the architecture that what would be the size of the word.', 'As we know that structure occupies the contiguous block of memory as shown in the above diagram, i.e., 1 byte for char a, 1 byte for char b, and 4 bytes for int c, then what problem do we face in this case.', 'The structural padding is an in-built process that is automatically done by the compiler. Sometimes it required to avoid the structure padding in C as it makes the size of the structure greater than the size of the structure members.']","[""In the above example, we have created a structure of type student. We have declared the object of this structure named as 'stud1'. After the creation of an object, a contiguous block of memory is allocated to its structure members. First, the memory will be allocated to the 'a' variable, then 'b' variable, and then 'c' variable."", ""The 4-bytes can be accessed at a time as we are considering the 32-bit architecture. The problem is that in one CPU cycle, one byte of char a, one byte of char b, and 2 bytes of int c can be accessed. We will not face any problem while accessing the char a and char b as both the variables can be accessed in one CPU cycle, but we will face the problem when we access the int c variable as 2 CPU cycles are required to access the value of the 'c' variable. In the first CPU cycle, the first two bytes are accessed, and in the second cycle, the other two bytes are accessed."", ""Suppose we do not want to access the 'a' and 'b' variable, we only want to access the variable 'c', which requires two cycles. The variable 'c' is of 4 bytes, so it can be accessed in one cycle also, but in this scenario, it is utilizing 2 cycles. This is an unnecessary wastage of CPU cycles. Due to this reason, the structure padding concept was introduced to save the number of CPU cycles. The structure padding is done automatically by the compiler. Now, we will see how structure padding is done."", ""In order to achieve the structure padding, an empty row is created on the left, as shown in the above diagram, and the two bytes which are occupied by the 'c' variable on the left are shifted to the right. So, all the four bytes of 'c' variable are on the right. Now, the 'c' variable can be accessed in a single CPU cycle. After structure padding, the total memory occupied by the structure is 8 bytes (1 byte+1 byte+2 bytes+4 bytes), which is greater than the previous one. Although the memory is wasted in this case, the variable can be accessed within a single cycle."", ""In the above code, we have created a structure named 'student'. Inside the main() method, we declare a variable of student type, i.e., stud1, and then we calculate the size of the student by using the sizeof() operator. The output would be 8 bytes due to the concept of structure padding, which we have already discussed in the above."", 'The above code is similar to the previous code; the only thing we change is the order of the variables inside the structure student. Due to the change in the order, the output would be different in both the cases. In the previous case, the output was 8 bytes, but in this case, the output is 12 bytes, as we can observe in the below screenshot.', 'In the above code, we have used the #pragma pack(1) directive to avoid the structure padding. If we do not use this directive, then the output of the above program would be 16 bytes. But the actual size of the structure members is 13 bytes, so 3 bytes are wasted. To avoid the wastage of memory, we use the #pragma pack(1) directive to provide the 1-byte packaging.']","['struct student', 'char a;', 'char b;', 'int c;', '} stud1;', 'struct student', 'char a; // 1 byte', 'char b; // 1 byte', 'int c; // 4 bytes', '1 word = 4 bytes', '1 word = 8 bytes', 'struct student', 'char a; // 1 byte', 'char b; // 1 byte', 'int c; // 4 bytes', '#include <stdio.h>', 'struct student', 'char a;', 'char b;', 'int c;', 'int main()', 'struct student stud1; // variable declaration of the student type..', 'printf(""The size of the student structure is %d"", sizeof(stud1));', 'return 0;', '#include <stdio.h>', 'struct student', 'char a;', 'int b;', 'char c;', 'int main()', 'struct student stud1; // variable declaration of the student type..', 'printf(""The size of the student structure is %d"", sizeof(stud1));', 'return 0;', '#include <stdio.h>', '#pragma pack(1)', 'struct base', 'int a;', 'char b;', 'double c;', 'int main()', 'struct base var; // variable declaration of type base', 'printf(""The size of the var is : %d"", sizeof(var));', 'return 0;', '#include <stdio.h>', 'struct base', 'int a;', 'char b;', 'double c;', '}__attribute__((packed));  ;', 'int main()', 'struct base var; // variable declaration of type base', 'printf(""The size of the var is : %d"", sizeof(var));', 'return 0;']",[],[],"[""|||First, memory is allocated to the char a variable, i.e., 1 byte.||||||Now, the memory will be allocated to the int b Since the int variable occupies 4 bytes, but on the left, only 3 bytes are available. The empty row will be created on these 3 bytes, and the int variable would occupy the other 4 bytes so that the integer variable can be accessed in a single CPU cycle.||||||Now, the memory will be given to the char c At a time, CPU can access 1 word, which is equal to 4 bytes, so CPU will use 4 bytes to access a 'c' variable. Therefore, the total memory required is 12 bytes (4 bytes +4 bytes +4 bytes), i.e., 4 bytes required to access char a variable, 4 bytes required to access int b variable, and other 4 bytes required to access a single character of 'c' variable.|||||||||Using #pragma pack(1) directive|||Using attribute||||||By using attribute|||""]"
82,['Union in C'],"['Union can be defined as a user-defined data type which is a collection of different variables of different data types in the same memory location. The union can also be defined as many members, but only one member can contain a value at a particular point in time.']","['https://www.javatpoint.com/file-handling-in-c', 'https://www.javatpoint.com/structure-padding-in-c', 'https://www.javatpoint.com/file-handling-in-c', 'https://www.javatpoint.com/structure-padding-in-c', 'https://www.javatpoint.com/file-handling-in-c']",[],[],[],"['Deciding the size of the union', 'Accessing members of union using pointers', 'Why do we need C unions?']",[],"['Union is a user-defined data type, but unlike structures, they share the same memory location.', ""Let's understand this through an example."", ""Let's have a look at the pictorial representation of the memory allocation."", 'The size of the union is based on the size of the largest member of the union.', ""Let's understand through an example."", 'We can access the members of the union through pointers by using the (->) arrow operator.', ""Let's understand through an example."", ""Consider one example to understand the need for C unions. Let's consider a store that has two items:"", 'Initially, they decided to store the records in a structure as shown below:', ""Let's see how can we access the members of the structure."", 'We can save lots of space if we use unions.']","['The below figure shows the pictorial representation of union members. Both the variables are sharing the same memory location and having the same initial address.', ""In union, members will share the memory location. If we try to make changes in any of the member then it will be reflected to the other member as well. Let's understand this concept through an example."", ""In the above code, we have created a pointer variable, i.e., *ptr, that stores the address of var variable. Now, ptr can access the variable 'a' by using the (->) operator. Hence the output of the above code would be 90.""]","[""The above code is the user-defined structure that consists of two members, i.e., 'a' of type int and 'b' of type character. When we check the addresses of 'a' and 'b', we found that their addresses are different. Therefore, we conclude that the members in the structure do not share the same memory location."", ""When we define the union, then we found that union is defined in the same way as the structure is defined but the difference is that union keyword is used for defining the union data type, whereas the struct keyword is used for defining the structure. The union contains the data members, i.e., 'a' and 'b', when we check the addresses of both the variables then we found that both have the same addresses. It means that the union members share the same memory location."", ""The below figure shows the pictorial representation of the structure. The structure has two members; i.e., one is of integer type, and the another one is of character type. Since 1 block is equal to 1 byte; therefore, 'a' variable will be allocated 4 blocks of memory while 'b' variable will be allocated 1 block of memory."", ""In the above code, union has two members, i.e., 'a' and 'b'. The 'var' is a variable of union abc type. In the main() method, we assign the 66 to 'a' variable, so var.a will print 66 on the screen. Since both 'a' and 'b' share the memory location, var.b will print 'B' (ascii code of 66)."", 'As we know, the size of int is 4 bytes, size of char is 1 byte, size of float is 4 bytes, and the size of double is 8 bytes. Since the double variable occupies the largest memory among all the four variables, so total 8 bytes will be allocated in the memory. Therefore, the output of the above program would be 8 bytes.', ""Store owners want to store the records of the above-mentioned two items along with the relevant information. For example, Books include Title, Author, no of pages, price, and Shirts include Color, design, size, and price. The 'price' property is common in both items. The Store owner wants to store the properties, then how he/she will store the records."", 'The above structure consists of all the items that store owner wants to store. The above structure is completely usable but the price is common property in both the items and the rest of the items are individual. The properties like price, *title, *author, and number_pages belong to Books while color, size, *design belongs to Shirt.', ""In the above code, we have created a variable of type store. We have assigned the values to the variables, title, author, number_pages, price but the book variable does not possess the properties such as size, color, and design. Hence, it's a wastage of memory. The size of the above structure would be 44 bytes."", 'In the above code, we have created a variable of type store. Since we used the unions in the above code, so the largest memory occupied by the variable would be considered for the memory allocation. The output of the above program is 32 bytes. In the case of structures, we obtained 44 bytes, while in the case of unions, the size obtained is 44 bytes. Hence, 44 bytes is greater than 32 bytes saving lots of memory space.']","['struct abc', 'int a;', 'char b;', 'union abc', 'int a;', 'char b;', 'int main()', 'var.a = 66;', 'printf(""\\n a = %d"", var.a);', 'printf(""\\n b = %d"", var.b);', 'union abc{', 'char b;', 'float c;', 'double d;', 'int main()', 'printf(""Size of union abc is %d"", sizeof(union abc));', 'return 0;', '#include', 'union abc', 'int a;', 'char b;', 'int main()', 'union abc *ptr; // pointer variable declaration', 'union abc var;', 'var.a= 90;', 'ptr = &var', 'printf(""The value of a is : %d"", ptr->a);', 'return 0;', 'struct store', 'double price;', 'char *title;', 'char *author;', 'int number_pages;', 'int color;', 'int size;', 'char *design;', 'int main()', 'struct store book;', 'book.title = ""C programming"";', 'book.author = ""Paulo Cohelo"";', 'book.number_pages = 190;', 'book.price = 205;', 'printf(""Size is : %ld bytes"", sizeof(book));', 'return 0;', '#include', 'struct store', 'double price;', 'union', 'struct{', 'char *title;', 'char *author;', 'int number_pages;', '} book;', 'struct {', 'int color;', 'int size;', 'char *design;', '} shirt;', '}item;', 'int main()', 'struct store s;', 's.item.book.title = ""C programming"";', 's.item.book.author = ""John"";', 's.item.book.number_pages = 189;', 'printf(""Size is %ld"", sizeof(s));', 'return 0;']",[],[],['|||Books|||Shirts|||']
83,"['C Structure, Union, Enums Test 1']",['The correct option is (a).'],"['https://www.javatpoint.com/c-structure-union-enums-2', 'https://www.javatpoint.com/c-string-4', 'https://www.javatpoint.com/c-structure-union-enums-2', 'https://www.javatpoint.com/c-string-4', 'https://www.javatpoint.com/c-structure-union-enums-2']",[],[],[],[],[],"['Explanation:', 'A structure, enumeration and union all of them can be helpful in defining a new data types in C language.', 'The correct option is (d).', 'Explanation:', 'Therefore the  free(var-name)  is used for clear the allocated memory in a C program. ', 'The correct option is (a).', 'Explanation:', 'In address mapping or allocation of structure, the program takes union as a one data type in it.', 'Therefore union can be nested in a structure statement is true.', 'The correct option is (b).', 'Explanation:', ""The union variable share the common memory for all its elements 'a' gets 'A' whose ASCII value is 65."", 'The statement printf(""%d"", var.a); is used for printing the value 65 in output.', 'Therefore the output of the program is  65.', 'The correct option is (b).', 'Explanation:', 'No, because the elements of union and structure are always accessed using dot(.) operator.']","['It is used for creating new data types that holds all kinds of data type like int, char, float, array inside a user defined data type. So user can use new values and logic of operation in simple manner.', 'The built in function free(var-name) is used for free or clear the memory space. If we use free() the referred memory location can be released for the future use or other operations.']",[],"['#include', 'union abc {', 'int a;', 'char cha;', '}var;', ""var.cha = 'A';"", 'printf(""%d"", var.a);']",[],[],[]
84,['File Handling in C'],"['In programming, we may require some specific input data to be generated several numbers of times. Sometimes, it is not enough to only display the data on the console. The data to be displayed may be very large, and only a limited amount of data can be displayed on the console, and since the memory is volatile, it is impossible to recover the programmatically generated data again and again. However, if we need to do so, we may store it onto the local file system which is volatile and can be accessed every time. Here, comes the need of file handling in C.']","['https://www.javatpoint.com/fprintf-fscanf-in-c', 'https://www.javatpoint.com/c-union', 'https://www.javatpoint.com/fprintf-fscanf-in-c', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/fputc-fgetc-in-c', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/fputs-fgets-in-c', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/fseek-in-c', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/fprintf-fscanf-in-c', 'https://www.javatpoint.com/c-union', 'https://www.javatpoint.com/fprintf-fscanf-in-c']",[],[],"['Functions for file handling', 'Opening File: fopen()', 'Closing File: fclose()', 'C fprintf() and fscanf()', 'C fputc() and fgetc()', 'C fputs() and fgets()', 'C fseek()']",[],['Output'],"['There are many functions in the C library to open, read, write, search and close the file. A list of file functions are given below:', 'We must open a file before it can be read, write, or update. The fopen() function is used to open a file. The syntax of the fopen() is given below.', 'The fopen() function accepts two parameters:', 'We can use one of the following modes in the fopen() function.', 'The fopen function works in the following way.', 'Consider the following example which opens a file in write mode.', 'The content of the file will be printed.']","['File handling in C enables us to create, update, read, and delete the files stored on the local file system through our C program. The following operations can be performed on a file.', 'The fclose() function is used to close a file. The file must be closed after performing all the operations on it. The syntax of fclose() function is given below:']",[],"['FILE *fopen( const char * filename, const char * mode );', '#include<stdio.h>', 'void main( )', 'FILE *fp ;', 'char ch ;', 'fp = fopen(""file_handle.c"",""r"") ;', 'while ( 1 )', 'ch = fgetc ( fp ) ;', 'if ( ch == EOF )', 'printf(""%c"",ch) ;', 'fclose (fp ) ;', 'int fclose( FILE *fp );']","['#include;\nvoid main( )\n{\nFILE *fp; // file pointer\nchar ch; \nfp = fopen(""file_handle.c"",""r"");\nwhile ( 1 )\n{\nch = fgetc ( fp ); //Each character of the file is read and stored in the character file.  \nif ( ch == EOF )\nbreak;\nprintf(""%c"",ch);\n}\nfclose (fp );\n}']","['o.FunctionDescriptio&&&fopen()opens new or existing fil&&&fprintf()write data into the fil&&&fscanf()reads data from the fil&&&fputc()writes a character into the fil&&&fgetc()reads a character from fil&&&fclose()closes the fil&&&fseek()sets the file pointer to given positio&&&fputw()writes an integer to fil&&&fgetw()reads an integer from fil&&&0ftell()returns current positio&&&1rewind()sets the file pointer to the beginning of the fil', 'odeDescriptio&&&opens a text file in read mod&&&opens a text file in write mod&&&opens a text file in append mod&&&+opens a text file in read and write mod&&&+opens a text file in read and write mod&&&+opens a text file in read and write mod&&&bopens a binary file in read mod&&&bopens a binary file in write mod&&&bopens a binary file in append mod&&&b+opens a binary file in read and write mod&&&b+opens a binary file in read and write mod&&&b+opens a binary file in read and write mod']","['|||Creation of the new file|||Opening an existing file|||Reading from the file|||Writing to the file|||Deleting the file||||||The file name (string). If the file is stored at some specific location, then we must mention the path at which the file is stored. For example, a file name can be like ""c://some_folder/some_file.ext"".|||The mode in which the file is to be opened. It is a string.||||||Firstly, It searches the file to be opened.|||Then, it loads the file from the disk and place it into the buffer. The buffer is used to provide efficiency for the read operations.|||It sets up a character pointer which points to the first character of the file.|||']"
85,['C fprintf() and fscanf()'],['The fprintf() function is used to write set of characters into file. It sends formatted output to a stream.'],"['https://www.javatpoint.com/fputc-fgetc-in-c', 'https://www.javatpoint.com/file-handling-in-c', 'https://www.javatpoint.com/fputc-fgetc-in-c', 'https://www.javatpoint.com/file-handling-in-c', 'https://www.javatpoint.com/fputc-fgetc-in-c']",[],[],"['Writing File : fprintf() function', 'Reading File : fscanf() function', 'C File Example: Storing employee information']",[],[],['The fscanf() function is used to read set of characters from file. It reads a word from the file and returns EOF at the end of file.'],"[""Let's see a file handling example to store employee information as entered by user from console. We are going to store id, name and salary of the employee."", 'Now open file from current directory. For windows operating system, go to TC\\bin directory, you will see emp.txt file. It will have following information.']",[],"['int fprintf(FILE *stream, const char *format [, argument, ...])', '#include', 'FILE *fp;', 'fp = fopen(""file.txt"", ""w"");//opening file', 'fprintf(fp, ""Hello file by fprintf...\\n"");//writing data into file', 'fclose(fp);//closing file', 'int fscanf(FILE *stream, const char *format [, argument, ...])', '#include', 'FILE *fp;', 'char buff[255];//creating char array to store data of file', 'fp = fopen(""file.txt"", ""r"");', 'while(fscanf(fp, ""%s"", buff)!=EOF){', 'printf(""%s "", buff );', 'fclose(fp);', '#include', 'void main()', 'FILE *fptr;', 'int id;', 'char name[30];', 'float salary;', 'fptr = fopen(""emp.txt"", ""w+"");/*  open for writing */', 'if (fptr == NULL)', 'printf(""File does not exists \\n"");', 'return;', 'printf(""Enter the id\\n"");', 'scanf(""%d"", &id);', 'fprintf(fptr, ""Id= %d\\n"", id);', 'printf(""Enter the name \\n"");', 'scanf(""%s"", name);', 'fprintf(fptr, ""Name= %s\\n"", name);', 'printf(""Enter the salary\\n"");', 'scanf(""%f"", &salary);', 'fprintf(fptr, ""Salary= %.2f\\n"", salary);', 'fclose(fptr);']","['Hello file by fprintf...', 'Enter the id \n1\nEnter the name \nsonoo\nEnter the salary\n120000', 'Id= 1\nName= sonoo\nSalary= 120000']",[],[]
86,['C fputc() and fgetc()'],['The fputc() function is used to write a single character into file. It outputs a character to a stream.'],"['https://www.javatpoint.com/fputs-fgets-in-c', 'https://www.javatpoint.com/fprintf-fscanf-in-c', 'https://www.javatpoint.com/fputs-fgets-in-c', 'https://www.javatpoint.com/fprintf-fscanf-in-c', 'https://www.javatpoint.com/fputs-fgets-in-c']",[],[],"['Writing File : fputc() function', 'Reading File : fgetc() function']",[],[],"['The fgetc() function returns a single character from the file. It gets a character from the stream. It returns EOF at the end of file.', 'myfile.txt']",[],[],"['int fputc(int c, FILE *stream)', '#include', 'FILE *fp;', 'fp = fopen(""file1.txt"", ""w"");//opening file', ""fputc('a',fp);//writing single character into file"", 'fclose(fp);//closing file', 'int fgetc(FILE *stream)', '#include', '#include', 'void main(){', 'FILE *fp;', 'clrscr();', 'fp=fopen(""myfile.txt"",""r"");', 'while((c=fgetc(fp))!=EOF){', 'printf(""%c"",c);', 'fclose(fp);', 'getch();']","['a', 'this is simple text message']",[],[]
87,['C fputs() and fgets()'],"[""The fputs() and fgets() in C programming are used to write and read string from stream. Let's see examples of writing and reading file using fgets() and fgets() functions.""]","['https://www.javatpoint.com/fseek-in-c', 'https://www.javatpoint.com/fputc-fgetc-in-c', 'https://www.javatpoint.com/fseek-in-c', 'https://www.javatpoint.com/fputc-fgetc-in-c', 'https://www.javatpoint.com/fseek-in-c']",[],[],"['Writing File : fputs() function', 'Reading File : fgets() function']",[],[],"['The fputs() function writes a line of characters into file. It outputs string to a stream.', 'myfile2.txt', 'The fgets() function reads a line of characters from file. It gets string from a stream.']",[],[],"['int fputs(const char *s, FILE *stream)', '#include', '#include', 'void main(){', 'FILE *fp;', 'clrscr();', 'fp=fopen(""myfile2.txt"",""w"");', 'fputs(""hello c programming"",fp);', 'fclose(fp);', 'getch();', 'char* fgets(char *s, int n, FILE *stream)', '#include', '#include', 'void main(){', 'FILE *fp;', 'char text[300];', 'clrscr();', 'fp=fopen(""myfile2.txt"",""r"");', 'printf(""%s"",fgets(text,200,fp));', 'fclose(fp);', 'getch();']","['hello c programming', 'hello c programming']",[],[]
88,['C fseek() function'],['The fseek() function is used to set the file pointer to the specified offset. It is used to write data into file at desired location.'],"['https://www.javatpoint.com/rewind-in-c', 'https://www.javatpoint.com/fputs-fgets-in-c', 'https://www.javatpoint.com/rewind-in-c', 'https://www.javatpoint.com/fputs-fgets-in-c', 'https://www.javatpoint.com/rewind-in-c']",[],[],[],[],[],"['There are 3 constants used in the fseek() function for whence: SEEK_SET, SEEK_CUR and SEEK_END.', 'myfile.txt']",[],[],"['int fseek(FILE *stream, long int offset, int whence)', '#include', 'void main(){', 'FILE *fp;', 'fp = fopen(""myfile.txt"",""w+"");', 'fputs(""This is javatpoint"", fp);', 'fseek( fp, 7, SEEK_SET );', 'fputs(""sonoo jaiswal"", fp);', 'fclose(fp);']",['This is sonoo jaiswal'],[],[]
89,['C rewind() function'],['The rewind() function sets the file pointer at the beginning of the stream. It is useful if you have to use stream many times.'],"['https://www.javatpoint.com/ftell-in-c', 'https://www.javatpoint.com/fseek-in-c', 'https://www.javatpoint.com/ftell-in-c', 'https://www.javatpoint.com/fseek-in-c', 'https://www.javatpoint.com/ftell-in-c']",[],[],[],[],[],"['File: file.txt', 'File: rewind.c']","['As you can see, rewind() function moves the file pointer at beginning of the file that is why ""this is simple text"" is printed 2 times. If you don\'t call rewind() function, ""this is simple text"" will be printed only once.']",[],"['void rewind(FILE *stream)', 'this is a simple text', '#include', '#include', 'void main(){', 'FILE *fp;', 'clrscr();', 'fp=fopen(""file.txt"",""r"");', 'while((c=fgetc(fp))!=EOF){', 'printf(""%c"",c);', 'rewind(fp);//moves the file pointer at beginning of the file', 'while((c=fgetc(fp))!=EOF){', 'printf(""%c"",c);', 'fclose(fp);', 'getch();']",['this is a simple textthis is a simple text'],[],[]
90,['C ftell() function'],['The ftell() function returns the current file position of the specified stream. We can use ftell() function to get the total size of a file after moving file pointer at the end of file. We can use SEEK_END constant to move the file pointer at the end of file.'],"['https://www.javatpoint.com/c-preprocessor', 'https://www.javatpoint.com/fseek-in-c', 'https://www.javatpoint.com/c-preprocessor', 'https://www.javatpoint.com/fseek-in-c', 'https://www.javatpoint.com/c-preprocessor']",[],[],[],[],[],['File: ftell.c'],[],[],"['long int ftell(FILE *stream)', '#include', '#include', 'void main (){', 'FILE *fp;', 'int length;', 'clrscr();', 'fp = fopen(""file.txt"", ""r"");', 'fseek(fp, 0, SEEK_END);', 'length = ftell(fp);', 'fclose(fp);', 'printf(""Size of file: %d bytes"", length);', 'getch();']",['Size of file: 21 bytes'],[],[]
91,['C Preprocessor Directives'],['The C preprocessor is a micro processor that is used by compiler to transform your code before compilation. It is called micro preprocessor because it allows us to add macros.'],"['https://www.javatpoint.com/c-macros', 'https://www.javatpoint.com/ftell-in-c', 'https://www.javatpoint.com/c-macros', 'https://www.javatpoint.com/c-macros', 'https://www.javatpoint.com/ftell-in-c', 'https://www.javatpoint.com/c-macros']",['https://static.javatpoint.com/cpages/images/c-preprocessor.png'],[],[],[],['Note: Proprocessor direcives are executed before compilation.'],"['All preprocessor directives starts with hash # symbol.', ""Let's see a list of preprocessor directives."", 'Please visit next page.']",[],[],[],[],[],['|||#include|||#define|||#undef|||#ifdef|||#ifndef|||#if|||#else|||#elif|||#endif|||#error|||#pragma|||']
92,['C Macros'],['A macro is a segment of code which is replaced by the value of macro. Macro is defined by #define directive. There are two types of macros:'],"['https://www.javatpoint.com/c-preprocessor-include', 'https://www.javatpoint.com/c-preprocessor', 'https://www.javatpoint.com/c-preprocessor-define', 'https://www.javatpoint.com/c-preprocessor-include', 'https://www.javatpoint.com/c-preprocessor', 'https://www.javatpoint.com/c-preprocessor-include']",[],[],['C Predefined Macros'],[],[],"['The object-like macro is an identifier that is replaced by value. It is widely used to represent numeric constants. For example:', 'Here, PI is the macro name which will be replaced by the value 3.14.', 'The function-like macro looks like function call. For example:', 'Here, MIN is the macro name.', 'Visit #define to see the full example of object-like and function-like macros.', 'ANSI C defines many predefined macros that can be used in c program.', 'File: simple.c']",[],[],"['#define PI 3.14', '#define MIN(a,b) ((a)<(b)?(a):(b))', '#include', 'int main(){', 'printf(""File :%s\\n"", __FILE__ );', 'printf(""Date :%s\\n"", __DATE__ );', 'printf(""Time :%s\\n"", __TIME__ );', 'printf(""Line :%d\\n"", __LINE__ );', 'printf(""STDC :%d\\n"", __STDC__ );', 'return 0;']",['File :simple.c\nDate :Dec 6 2015\nTime :12:28:46\nLine :6\nSTDC :1'],"['o.MacroDescriptio&&&_DATE_represents current date in ""MMM DD YYYY"" format&&&_TIME_represents current time in ""HH:MM:SS"" format&&&_FILE_represents current file name&&&_LINE_represents current line number&&&_STDC_It is defined as 1 when compiler complies with the ANSI standard']",['|||Object-like Macros|||Function-like Macros|||']
93,['C #include'],"['The #include preprocessor directive is used to paste code of given file into current file. It is used include system-defined and user-defined header files. If included file is not found, compiler renders error.']","['https://www.javatpoint.com/c-preprocessor-define', 'https://www.javatpoint.com/c-macros', 'https://www.javatpoint.com/c-preprocessor-define', 'https://www.javatpoint.com/c-macros', 'https://www.javatpoint.com/c-preprocessor-define']",[],[],[],[],[],"['The #include <filename> tells the compiler to look for the directory where system header files are held. In UNIX, it is \\usr\\include directory.', 'The #include ""filename"" tells the compiler to look in the current directory from where program is running.', ""Let's see a simple example of #include directive. In this program, we are including stdio.h file because printf() function is defined in this file."", 'Note 1: In #include directive, comments are not recognized. So in case of #include <a//b>, a//b is treated as filename.', 'Note 3: You can use only comment after filename otherwise it will give error.']","['By the use of #include directive, we provide information to the preprocessor where to look for the header files. There are two variants to use #include directive.', 'Note 2: In #include directive, backslash is considered as normal text not escape sequence. So in case of #include <a\\nb>, a\\nb is treated as filename.']",[],"['#include', 'int main(){', 'printf(""Hello C"");', 'return 0;']",['Hello C'],[],"['|||#include <filename>|||#include ""filename""|||']"
94,['C #define'],['The #define preprocessor directive is used to define constant or micro substitution. It can use any basic data type.'],"['https://www.javatpoint.com/c-preprocessor-undef', 'https://www.javatpoint.com/c-preprocessor-include', 'https://www.javatpoint.com/c-preprocessor-undef', 'https://www.javatpoint.com/c-preprocessor-include', 'https://www.javatpoint.com/c-preprocessor-undef']",[],[],[],[],[],"[""Let's see an example of #define to define a constant."", ""Let's see an example of #define to create a macro.""]",[],[],"['#define token value', '#include', '#define PI 3.14', 'main() {', 'printf(""%f"",PI);', '#include', '#define MIN(a,b) ((a)<(b)?(a):(b))', 'void main() {', 'printf(""Minimum between 10 and 20 is: %d\\n"", MIN(10,20));']","['3.140000', 'Minimum between 10 and 20 is: 10']",[],[]
95,['C #undef'],['The #undef preprocessor directive is used to undefine the constant or macro defined by #define.'],"['https://www.javatpoint.com/c-preprocessor-ifdef', 'https://www.javatpoint.com/c-preprocessor-define', 'https://www.javatpoint.com/c-preprocessor-ifdef', 'https://www.javatpoint.com/c-preprocessor-define', 'https://www.javatpoint.com/c-preprocessor-ifdef']",[],[],[],[],[],"[""Let's see a simple example to define and undefine a constant."", 'The #undef directive is used to define the preprocessor constant to a limited scope so that you can declare constant again.', ""Let's see an example where we are defining and undefining number variable. But before being undefined, it was used by square variable.""]",[],[],"['#undef token', '#include', '#define PI 3.14', '#undef PI', 'main() {', 'printf(""%f"",PI);', '#include', '#define number 15', 'int square=number*number;', '#undef number', 'main() {', 'printf(""%d"",square);']","[""Compile Time Error: 'PI' undeclared"", '225']",[],[]
96,['C #ifdef'],"['The #ifdef preprocessor directive checks if macro is defined by #define. If yes, it executes the code otherwise #else code is executed, if present.']","['https://www.javatpoint.com/c-preprocessor-ifndef', 'https://www.javatpoint.com/c-preprocessor-undef', 'https://www.javatpoint.com/c-preprocessor-ifndef', 'https://www.javatpoint.com/c-preprocessor-undef', 'https://www.javatpoint.com/c-preprocessor-ifndef']",[],[],['C #ifdef example'],[],[],"['Syntax with #else:', ""Let's see a simple example to use #ifdef preprocessor directive."", ""But, if you don't define NOINPUT, it will ask user to enter a number.""]",[],[],"['#ifdef MACRO', '#ifdef MACRO', '#include', '#include', '#define NOINPUT', 'void main() {', 'int a=0;', '#ifdef NOINPUT', 'printf(""Enter a:"");', 'scanf(""%d"", &a);', '#endif', 'printf(""Value of a: %d\\n"", a);', 'getch();', '#include', '#include', 'void main() {', 'int a=0;', '#ifdef NOINPUT', 'printf(""Enter a:"");', 'scanf(""%d"", &a);', '#endif', 'printf(""Value of a: %d\\n"", a);', 'getch();']","['Value of a: 2', 'Enter a:5\nValue of a: 5']",[],[]
97,['C #ifndef'],"['The #ifndef preprocessor directive checks if macro is not defined by #define. If yes, it executes the code otherwise #else code is executed, if present.']","['https://www.javatpoint.com/c-preprocessor-if', 'https://www.javatpoint.com/c-preprocessor-ifdef', 'https://www.javatpoint.com/c-preprocessor-if', 'https://www.javatpoint.com/c-preprocessor-ifdef', 'https://www.javatpoint.com/c-preprocessor-if']",[],[],['C #ifndef example'],[],[],"['Syntax with #else:', ""Let's see a simple example to use #ifndef preprocessor directive."", ""But, if you don't define INPUT, it will execute the code of #ifndef.""]",[],[],"['#ifndef MACRO', '#ifndef MACRO', '#include', '#include', '#define INPUT', 'void main() {', 'int a=0;', '#ifndef INPUT', 'printf(""Enter a:"");', 'scanf(""%d"", &a);', '#endif', 'printf(""Value of a: %d\\n"", a);', 'getch();', '#include', '#include', 'void main() {', 'int a=0;', '#ifndef INPUT', 'printf(""Enter a:"");', 'scanf(""%d"", &a);', '#endif', 'printf(""Value of a: %d\\n"", a);', 'getch();']","['Enter a:5\nValue of a: 5', 'Value of a: 2']",[],[]
98,['C #if'],"['The #if preprocessor directive evaluates the expression or condition. If condition is true, it executes the code otherwise #elseif or #else or #endif code is executed.']","['https://www.javatpoint.com/c-preprocessor-else', 'https://www.javatpoint.com/c-preprocessor-ifndef', 'https://www.javatpoint.com/c-preprocessor-else', 'https://www.javatpoint.com/c-preprocessor-ifndef', 'https://www.javatpoint.com/c-preprocessor-else']",[],[],['C #if example'],[],[],"['Syntax with #else:', 'Syntax with #elif and #else:', ""Let's see a simple example to use #if preprocessor directive."", ""Let's see another example to understand the #if directive clearly.""]",[],[],"['#if expression', '#if expression', '#if expression', '#elif expression', '#include', '#include', '#define NUMBER 0', 'void main() {', '#if (NUMBER==0)', 'printf(""Value of Number is: %d"",NUMBER);', '#endif', 'getch();', '#include', '#include', '#define NUMBER 1', 'void main() {', 'clrscr();', '#if (NUMBER==0)', 'printf(""1 Value of Number is: %d"",NUMBER);', '#if (NUMBER==1)', 'printf(""2 Value of Number is: %d"",NUMBER);', 'getch();']","['Value of Number is: 0', '2 Value of Number is: 1']",[],[]
99,['C #else'],"['The #else preprocessor directive evaluates the expression or condition if condition of #if is false. It can be used with #if, #elif, #ifdef and #ifndef directives.']","['https://www.javatpoint.com/c-preprocessor-error', 'https://www.javatpoint.com/c-preprocessor-if', 'https://www.javatpoint.com/c-preprocessor-error', 'https://www.javatpoint.com/c-preprocessor-if', 'https://www.javatpoint.com/c-preprocessor-error']",[],[],['C #else example'],[],[],"['Syntax with #elif:', ""Let's see a simple example to use #else preprocessor directive.""]",[],[],"['#if expression', '#if expression', '#elif expression', '#include', '#include', '#define NUMBER 1', 'void main() {', '#if NUMBER==0', 'printf(""Value of Number is: %d"",NUMBER);', 'print(""Value of Number is non-zero"");', '#endif', 'getch();']",['Value of Number is non-zero'],[],[]
100,['C #error'],['The #error preprocessor directive indicates error. The compiler gives fatal error if #error directive is found and skips further compilation process.'],"['https://www.javatpoint.com/c-preprocessor-pragma', 'https://www.javatpoint.com/c-preprocessor-if', 'https://www.javatpoint.com/c-preprocessor-pragma', 'https://www.javatpoint.com/c-preprocessor-if', 'https://www.javatpoint.com/c-preprocessor-pragma']",[],[],['C #error example'],[],[],"[""Let's see a simple example to use #error preprocessor directive."", 'But, if you include math.h, it does not gives error.']",[],[],"['#include', '#ifndef __MATH_H', '#error First include then compile', 'void main(){', 'float a;', 'a=sqrt(7);', 'printf(""%f"",a);', '#include', '#include', '#ifndef __MATH_H', '#error First include then compile', 'void main(){', 'float a;', 'a=sqrt(7);', 'printf(""%f"",a);']","['Compile Time Error: First include then compile', '2.645751']",[],[]
101,['C #pragma'],['The #pragma preprocessor directive is used to provide additional information to the compiler. The #pragma directive is used by the compiler to offer machine or operating-system feature.'],"['https://www.javatpoint.com/command-line-arguments-in-c', 'https://www.javatpoint.com/c-preprocessor-error', 'https://www.javatpoint.com/command-line-arguments-in-c', 'https://www.javatpoint.com/c-preprocessor-error', 'https://www.javatpoint.com/command-line-arguments-in-c']",[],[],[],[],[],"['Different compilers can provide different usage of #pragma directive.', 'The turbo C++ compiler supports following #pragma directives.', ""Let's see a simple example to use #pragma preprocessor directive.""]",[],[],"['#pragma token', '#pragma argsused', '#pragma exit', '#pragma hdrfile', '#pragma hdrstop', '#pragma inline', '#pragma option', '#pragma saveregs', '#pragma startup', '#pragma warn', '#include', '#include', 'void func() ;', '#pragma startup func', '#pragma exit func', 'void main(){', 'printf(""\\nI am in main"");', 'getch();', 'void func(){', 'printf(""\\nI am in func"");', 'getch();']",['I am in func\nI am in main\nI am in func'],[],[]
102,['C Preprocessor Test 1'],['The correct option is (c).'],"['https://www.javatpoint.com/c-preprocessor-2', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/c-preprocessor-2', 'https://www.javatpoint.com/html-figcaption-tag', 'https://www.javatpoint.com/c-preprocessor-2']",[],[],[],[],[],"['Explanation:', 'During preprocessing stage the line #include<stdio.h> with the system header file of that name gets replaced by the contents of file  stdio.h.', ""Therefore the entire text of the file 'stdio.h' replaces with #include directive."", 'The correct option is (a).', 'Explanation:', 'True, the directive #undef can be used only with a macro that has been #define earlier in a program.', 'For Example: #define PI 3.14', 'We can undefine PI macro by #undef PI', 'The correct option is (a).', 'Explanation:', 'True, the C macros like #ifdef...#elif?#endif are used for performing conditional operation in C program.', 'The syntax of C preprocessor directive is:', 'The correct option is (b).', 'Explanation:', 'The macro statement SWAP(x, y) int t; t=x, x=y, y=t; swaps the value of given two variable.', 'Step 1: int x=10, y=20; The variable x and y are declared as an integer type and initialized to 10, 20 respectively.', 'Step 2: SWAP(x, y);. Here the macro is substituted and it swaps the value to variable x and y.', 'Hence the output of the program is  x=20, y=10.', 'The correct option is (d).', 'Explanation:', 'The syntax for macro definition with argument is:']",[],[],"['#include', '#define SWAP(x, y) int t; t=x, x=y, y=t;', 'int main()', 'int x=10, y=20;', 'SWAP(x, y);', 'printf(""x = %d, y = %d\\n"", x, y);', 'return 0;', '""#define MACRO_NAME(ARG) (ARG*ARG*ARG) ""']",[],[],[]
103,['Command Line Arguments in C'],['The arguments passed from command line are called command line arguments. These arguments are handled by main() function.'],"['https://www.javatpoint.com/c-expressions', 'https://www.javatpoint.com/c-preprocessor-pragma', 'https://www.javatpoint.com/c-expressions', 'https://www.javatpoint.com/c-preprocessor-pragma', 'https://www.javatpoint.com/c-expressions']",[],[],[],[],[],"['To support command line argument, you need to change the structure of main() function as given below.', 'Here, argc counts the number of arguments. It counts the file name as the first argument.', 'The argv[] contains the total number of arguments. The first argument is the file name always.', ""Let's see the example of command line arguments where we are passing one argument with file name."", 'Run this program as follows in Linux:', 'Run this program as follows in Windows from command line:', 'If you pass many arguments, it will print only one.', 'But if you pass many arguments within double quote, all arguments will be treated as a single argument only.', 'You can write your program to print all the arguments. In this program, we are printing only argv[1], that is why it is printing only one argument.']",[],[],"['int main(int argc, char *argv[] )', '#include', 'void main(int argc, char *argv[] )  {', 'printf(""Program name is: %s\\n"", argv[0]);', 'if(argc < 2){', 'printf(""No argument passed through command line.\\n"");', 'else{', 'printf(""First argument is: %s\\n"", argv[1]);', './program hello', 'program.exe hello', './program hello c how r u', './program ""hello c how r u""']","['Program name is: program\nFirst argument is: hello', 'Program name is: program\nFirst argument is: hello', 'Program name is: program\nFirst argument is: hello c how r u']",[],[]
104,['C Expressions'],"['An expression is a formula in which operands are linked to each other by the use of operators to compute a value. An operand can be a function reference, a variable, an array element or a constant.']","['https://www.javatpoint.com/c-data-segments', 'https://www.javatpoint.com/command-line-arguments-in-c', 'https://www.javatpoint.com/c-data-segments', 'https://www.javatpoint.com/command-line-arguments-in-c', 'https://www.javatpoint.com/c-data-segments']","['https://static.javatpoint.com/cpages/images/c-expressions.png', 'https://static.javatpoint.com/cpages/images/c-expressions2.png', 'https://static.javatpoint.com/cpages/images/c-expressions3.png', 'https://static.javatpoint.com/cpages/images/c-expressions4.png', 'https://static.javatpoint.com/cpages/images/c-expressions5.png']",[],"['Arithmetic Expressions', 'Relational Expressions', 'Logical Expressions', 'Conditional Expressions']",[],[],"[""Let's see an example:"", 'In the above expression, minus character (-) is an operator, and a, and b are the two operands.', 'There are four types of expressions exist in C:', 'For example:', 'The entire above line is a statement, not an expression. The portion after the equal is an expression.', 'Evaluation of Arithmetic Expressions', 'When individual operations are performed, the following cases can be happened:', ""Let's understand through an example."", ""Let's see a simple example:"", ""Let's see some example of the logical expressions."", 'Let\'s see a simple program of ""&&"" operator.', 'Let\'s see a simple example of ""| |"" operator', 'The Syntax of Conditional operator', 'Suppose exp1, exp2 and exp3 are three expressions.', 'exp1 ? exp2 : exp3', ""Let's understand through a simple example.""]","['Each type of expression takes certain types of operands and uses a specific set of operators. Evaluation of a particular expression produces a specific value.', 'An arithmetic expression is an expression that consists of operands and arithmetic operators. An arithmetic expression computes a value of type int, float or double.', 'The expressions are evaluated by performing one operation at a time. The precedence and associativity of operators decide the order of the evaluation of individual operations.']","['When an expression contains only integral operands, then it is known as pure integer expression when it contains only real operands, it is known as pure real expression, and when it contains both integral and real operands, it is known as mixed mode expression.', 'The above expression is a conditional expression which is evaluated on the basis of the value of the exp1 expression. If the condition of the expression exp1 holds true, then the final conditional expression is represented by exp2 otherwise represented by exp3.']","['x = 9/2 + a-b;', '#include <stdio.h>', 'int main()', 'int x=4;', 'if(x%2==0)', 'printf(""The number x is even"");', 'else', 'printf(""The number x is not even"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int x = 4;', 'int y = 10;', 'if ( (x <10) && (y>5))', 'printf(""Condition is true"");', 'else', 'printf(""Condition is false"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int x = 4;', 'int y = 9;', 'if ( (x <6) || (y>10))', 'printf(""Condition is true"");', 'else', 'printf(""Condition is false"");', 'return 0;', '#include<stdio.h>', '#include<string.h>', 'int main()', 'int age = 25;', 'char status;', ""status = (age>22) ? 'M': 'U';"", ""if(status == 'M')"", 'printf(""Married"");', 'else', 'printf(""Unmarried"");', 'return 0;']",[],"['Evaluation of expression|||Description of each operation&&&6*2/( 2+1 * 2/3 +6) +8 * (8/4)|||An expression is given.&&&6*2/(2+2/3 + 6) + 8 * (8/4)|||2 is multiplied by 1, giving value 2.&&&6*2/(2+0+6) + 8 * (8/4)|||2 is divided by 3, giving value 0.&&&6*2/ 8+ 8 * (8/4)|||2 is added to 6, giving value 8.&&&6*2/8 + 8 * 2|||8 is divided by 4, giving value 2.&&&12/8 +8 * 2|||6 is multiplied by 2, giving value 12.&&&1 + 8 * 2|||12 is divided by 8, giving value 1.&&&1 + 16|||8 is multiplied by 2, giving value 16.&&&17|||1 is added to 16, giving value 17.', 'Relational Expression|||Description&&&x%2 = = 0|||This condition is used to check whether the x is an even number or not. The relational expression results in value 1 if x is an even number otherwise results in value 0.&&&a!=b|||It is used to check whether a is not equal to b. This relational expression results in 1 if a is not equal to b otherwise 0.&&&a+b = = x+y\t|||It is used to check whether the expression ""a+b"" is equal to the expression ""x+y"".&&&a>=9|||It is used to check whether the value of a is greater than or equal to 9.', 'Logical Expressions|||Description&&&( x > 4 ) && ( x < 6 )|||It is a test condition to check whether the x is greater than 4 and x is less than 6. The result of the condition is true only when both the conditions are true.&&&x > 10 || y <11|||It is a test condition used to check whether x is greater than 10 or y is less than 11. The result of the test condition is true if either of the conditions holds true value.&&&! ( x > 10 ) && ( y = = 2 )|||It is a test condition used to check whether x is not greater than 10 and y is equal to 2. The result of the condition is true if both the conditions are true.']","['|||Arithmetic expressions|||Relational expressions|||Logical expressions|||Conditional expressions||||||When both the operands are of type integer, then arithmetic will be performed, and the result of the operation would be an integer value. For example, 3/2 will yield 1 not 1.5 as the fractional part is ignored.|||When both the operands are of type float, then arithmetic will be performed, and the result of the operation would be a real value. For example, 2.0/2.0 will yield 1.0, not 1.|||If one operand is of type integer and another operand is of type real, then the mixed arithmetic will be performed. In this case, the first operand is converted into a real operand, and then arithmetic is performed to produce the real value. For example, 6/2.0 will yield 3.0 as the first value of 6 is converted into 6.0 and then arithmetic is performed to produce 3.0.||||||A relational expression is an expression used to compare two operands.|||It is a condition which is used to decide whether the action should be taken or not.|||In relational expressions, a numeric value cannot be compared with the string value.|||The result of the relational expression can be either zero or non-zero value. Here, the zero value is equivalent to a false and non-zero value is equivalent to true.||||||A logical expression is an expression that computes either a zero or non-zero value.|||It is a complex test condition to take a decision.||||||A conditional expression is an expression that returns 1 if the condition is true otherwise 0.|||A conditional operator is also known as a ternary operator.|||']"
105,['Data Segments'],"['To understand the way our C program works, we need to understand the arrangement of the memory assigned to our program. ']","['https://www.javatpoint.com/flow-of-c-program', 'https://www.javatpoint.com/c-expressions', 'https://www.javatpoint.com/flow-of-c-program', 'https://www.javatpoint.com/c-expressions', 'https://www.javatpoint.com/flow-of-c-program']",['https://static.javatpoint.com/cpages/images/data-segments.png'],[],[],[],[],"['The parts of Data segments are :', 'It is the memory area which can only be accessed by the function pointers. The size of the code area is fixed.', 'Stack area is divided into two parts namely: initialize and non-initialize. Initialize variables are given priority than non-initialize variables.']",['It is the permanent memory area. All static and external variables are stored in the data area. The variables which are stored in the data area exist until the program exits.'],"['All the variables, functions, and data structures are allocated memory into a special memory segment known as Data Segment. The data segment is mainly divided into four different parts which are specifically allocated to different types of data defined in our C program.', 'As we know that C supports dynamic memory allocation. C provides the functions like malloc() and calloc() which are used to allocate the memory dynamically. Therefore, the heap area is used to store the data structures which are created by using dynamic memory allocation. The size of the heap area is variable and depends upon the free space in the memory.']",[],[],[],['|||All the automatic variables get memory into stack area.||| Constants in c get stored in the stack area.|||All the local variables of the default storage class get stored in the stack area.|||Function parameters and return value get stored in the stack area.|||Stack area is the temporary memory area as the variables stored in the stack area are deleted whenever the program reaches out of scope.|||']
106,['Flow of C Program'],"['The C program follows many steps in execution. To understand the flow of C program well, let us see a simple program first.']","['https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/c-data-segments', 'https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/c-data-segments', 'https://www.javatpoint.com/c-programs']",['https://static.javatpoint.com/cpages/images/c-program-flow.png'],[],[],[],[],"['File: simple.c', ""Let's try to understand the flow of above program by the figure given below."", '2) Expanded source code is sent to compiler which compiles the code and converts it into assembly code.', '3) The assembly code is sent to assembler which assembles the code and converts it into object code. Now a simple.obj file is generated.', '5) The executable code is sent to loader which loads it into memory and then it is executed. After execution, output is sent to console.']","['1) C program (source code) is sent to preprocessor first. The preprocessor is responsible to convert preprocessor directives into their respective values. The preprocessor generates an expanded source code.', '4) The object code is sent to linker which links it to the library such as header files. Then it is converted into executable code. A simple.exe file is generated.']",[],"['#include', 'int main(){', 'printf(""Hello C Language"");', 'return 0;']",[],[],[]
107,['What is a programming language?'],"['A programming language defines a set of instructions that are compiled together to perform a specific task by the CPU (Central Processing Unit). The programming language mainly refers to high-level languages such as C, C++, Pascal, Ada, COBOL, etc.']","['https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial']",['https://static.javatpoint.com/cpages/images/classification-of-programming-language.png'],[],"['Low-level language', 'High-Level Language', 'Differences between Low-Level language and High-Level language']","['Machine-level language', 'Assembly Language', 'Differences between Machine-Level language and Assembly language']",[],"['The following are the differences between machine-level language and assembly language:', 'When writing a program in a high-level language, then the whole attention needs to be paid to the logic of the problem.', 'A compiler is required to translate a high-level language into a low-level language. ', 'Advantages of a high-level language', 'The following are the differences between low-level language and high-level language:']","['The different processor architectures use different machine codes, for example, a PowerPC processor contains RISC architecture, which requires different code than intel x86 processor, which has a CISC architecture.', 'As we know that computers can only understand the machine-level instructions, so we require a translator that converts the assembly code into machine code. The translator used for translating the code is known as an assembler.', 'The assembly language code is not portable because the data is stored in computer registers, and the computer has to know the different sets of registers.', 'The assembly code is not faster than machine code because the assembly language comes above the machine language in the hierarchy, so it means that assembly language has some abstraction from the hardware while machine language has zero abstraction.']","['Each programming language contains a unique set of keywords and syntax, which are used to create a set of instructions. Thousands of programming languages have been developed till now, but each language has its specific purpose. These languages vary in the level of abstraction they provide from the hardware. Some programming languages provide less or no abstraction while some provide higher abstraction. Based on the levels of abstraction, they can be classified into two categories:', 'The image which is given below describes the abstraction level from hardware. As we can observe from the below image that the machine language provides no abstraction, assembly language provides less abstraction whereas high-level language provides a higher level of abstraction.', 'The low-level language is a programming language that provides no abstraction from the hardware, and it is represented in 0 or 1 forms, which are the machine instructions. The languages that come under this category are the Machine level language and Assembly language.', 'The machine-level language is a language that consists of a set of instructions that are in the binary form 0 or 1. As we know that computers can understand only machine instructions, which are in binary digits, i.e., 0 and 1, so the instructions given to the computer can be only in binary codes. Creating a program in a machine-level language is a very difficult task as it is not easy for the programmers to write the program in machine instructions. It is error-prone as it is not easy to understand, and its maintenance is also very high. A machine-level language is not portable as each computer has its machine instructions, so if we write a program in one computer will no longer be valid in another computer.', 'The assembly language contains some human-readable commands such as mov, add, sub, etc. The problems which we were facing in machine-level language are reduced to some extent by using an extended form of machine-level language known as assembly language. Since assembly language instructions are written in English words like mov, add, sub, so it is easier to write and understand.', 'The high-level language is a programming language that allows a programmer to write the programs which are independent of a particular type of computer. The high-level languages are considered as high-level because they are closer to human languages than machine-level languages.']",[],[],"['Machine-level language|||Assembly language&&&The machine-level language comes at the lowest level in the hierarchy, so it has zero abstraction level from the hardware.|||The assembly language comes above the machine language means that it has less abstraction level from the hardware.&&&It cannot be easily understood by humans.|||It is easy to read, write, and maintain.&&&The machine-level language is written in binary digits, i.e., 0 and 1.|||The assembly language is written in simple English language, so it is easily understandable by the users.&&&It does not require any translator as the machine code is directly executed by the computer.|||In assembly language, the assembler is used to convert the assembly code into machine code.&&&It is a first-generation programming language.|||It is a second-generation programming language.', 'Low-level language|||High-level language&&&It is a machine-friendly language, i.e., the computer understands the machine language, which is represented in 0 or 1.|||It is a user-friendly language as this language is written in simple English words, which can be easily understood by humans.&&&The low-level language takes more time to execute.|||It executes at a faster pace.&&&It requires the assembler to convert the assembly code into machine code.|||It requires the compiler to convert the high-level language instructions into machine code.&&&The machine code cannot run on all machines, so it is not a portable language.|||The high-level code can run all the platforms, so it is a portable language.&&&It is memory efficient.|||It is less memory efficient.&&&Debugging and maintenance are not easier in a low-level language.|||Debugging and maintenance are easier in a high-level language.']","['|||Low-level language|||High-level language||||||The high-level language is easy to read, write, and maintain as it is written in English like words.|||The high-level languages are designed to overcome the limitation of low-level language, i.e., portability. The high-level language is portable; i.e., these languages are machine-independent.|||']"
108,['Enum in C'],"['The enum in C is also known as the enumerated type. It is a user-defined data type that consists of integer values, and it provides meaningful names to these values. The use of enum in C makes the program easy to understand and maintain. The enum is defined by using the enum keyword.']","['https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial']","['https://static.javatpoint.com/cpages/images/enum-in-c1.png', 'https://static.javatpoint.com/cpages/images/enum-in-c2.png', 'https://static.javatpoint.com/cpages/images/enum-in-c3.png', 'https://static.javatpoint.com/cpages/images/enum-in-c4.png', 'https://static.javatpoint.com/cpages/images/enum-in-c5.png', 'https://static.javatpoint.com/cpages/images/enum-in-c6.png']",[],[],"['Enumerated type declaration', 'Why do we use enum?', 'Enum vs. Macro in C']",[],"['The following is the way to define the enum in C:', 'For example:', 'Suppose we create the enum of type status as shown below:', 'Now, we create the variable of status type:', ""In the above statement, we have declared the 's' variable of type status."", 'To create a variable, the above two statements can be written as:', 'In this case, the default value of false will be equal to 0, and the value of true will be equal to 1.', ""Let's create a simple program of enum."", ""Let's demonstrate another example to understand the enum more clearly."", ""Let's see how we can use an enum in a switch case statement."", 'Some important points related to enum', ""Let's understand this scenario through an example.""]","['The default value of mango is 0, apple is 1, strawberry is 2, and papaya is 3. If we want to change these default values, then we can do as given below:', 'In the above code, we create an enum type named as weekdays, and it contains the name of all the seven days. We have assigned 1 value to the Sunday, and all other names will be given a value as the previous value plus one.', 'The enum is also used in a switch case statement in which we pass the enum variable in a switch parenthesis. It ensures that the value of the case block should be defined in an enum.']","[""In the above declaration, we define the enum named as flag containing 'N' integer constants. The default value of integer_const1 is 0, integer_const2 is 1, and so on. We can also change the default value of the integer constants at the time of the declaration."", ""As we know that in C language, we need to declare the variable of a pre-defined type such as int, float, char, etc. Similarly, we can declare the variable of a user-defined data type, such as enum. Let's see how we can declare the variable of an enum type."", ""In the above code, we have created a type of enum named as months which consists of all the names of months. We have assigned a '1' value, and all the other months will be given a value as the previous one plus one. Inside the main() method, we have defined a for loop in which we initialize the 'i' variable by jan, and this loop will iterate till December."", 'The enum is used when we want our variable to have only a set of values. For example, we create a direction variable. As we know that four directions exist (North, South, East, West), so this direction variable will have four possible values. But the variable can hold only one value at a time. If we try to provide some different value to this variable, then it will throw the compilation error.']","['enum flag{integer_const1, integer_const2,.....integter_constN};', 'enum fruits{mango, apple, strawberry, papaya};', 'enum fruits{', 'mango=2,', 'apple=1,', 'strawberry=5,', 'papaya=7,', 'enum status{false,true};', 'enum status s; // creating a variable of the status type.', 'enum status{false,true} s;', '#include <stdio.h>', 'enum weekdays{Sunday=1, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};', 'int main()', 'enum weekdays w; // variable declaration of weekdays type', 'w=Monday; // assigning value of Monday to w.', 'printf(""The value of w is %d"",w);', 'return 0;', '#include <stdio.h>', 'enum months{jan=1, feb, march, april, may, june, july, august, september, october, november, december};', 'int main()', 'for(int i=jan;i<=december;i++)', 'printf(""%d, "",i);', 'return 0;', '#include <stdio.h>', 'enum days{sunday=1, monday, tuesday, wednesday, thursday, friday, saturday};', 'int main()', 'enum days d;', 'd=monday;', 'switch(d)', 'case sunday:', 'printf(""Today is sunday"");', 'break;', 'case monday:', 'printf(""Today is monday"");', 'break;', 'case tuesday:', 'printf(""Today is tuesday"");', 'break;', 'case wednesday:', 'printf(""Today is wednesday"");', 'break;', 'case thursday:', 'printf(""Today is thursday"");', 'break;', 'case friday:', 'printf(""Today is friday"");', 'break;', 'case saturday:', 'printf(""Today is saturday"");', 'break;', 'return 0;', '#include <stdio.h>', 'int main(void) {', 'enum fruits{mango = 1, strawberry=0, apple=1};', 'printf(""The value of mango is %d"", mango);', 'printf(""\\nThe value of apple is %d"", apple);', 'return 0;', '#include <stdio.h>', 'enum status{success, fail};', 'enum boolen{fail,pass};', 'int main(void) {', 'printf(""The value of success is %d"", success);', 'return 0;', '#include <stdio.h>', 'enum {success, fail} status;', 'int main(void) {', 'status=success;', 'printf(""The value of status is %d"", status);', 'return 0;']",[],[],"[""|||The enum names available in an enum type can have the same value. Let's look at the example.||||||If we do not provide any value to the enum names, then the compiler will automatically assign the default values to the enum names starting from 0.|||We can also provide the values to the enum name in any order, and the unassigned names will get the default value as the previous one plus one.|||The values assigned to the enum names must be integral constant, i.e., it should not be of other types such string, float, etc.|||All the enum names must be unique in their scope, i.e., if we define two enum having same scope, then these two enums should have different enum names otherwise compiler will throw an error.||||||In enumeration, we can define an enumerated data type without the name also.||||||Macro can also be used to define the name constants, but in case of an enum, all the name constants can be grouped together in a single statement.|||For example,||||||# define pass 0;|||# define success 1;||||||The above two statements can be written in a single statement by using the enum type.|||enum status{pass, success};|||The enum type follows the scope rules while macro does not follow the scope rules.|||In Enum, if we do not assign the values to the enum names, then the compiler will automatically assign the default value to the enum names. But, in the case of macro, the values need to be explicitly assigned.|||The type of enum in C is an integer, but the type of macro can be of any type.|||""]"
109,['What is getch() in C?'],"[""The getch() is a predefined non-standard function that is defined in conio.h header file. It is mostly used by the Dev C/C++, MS- DOS's compilers like Turbo C to hold the screen until the user passes a single value to exit from the console screen. It can also be used to read a single byte character or string from the keyboard and then print. It does not hold any parameters. It has no buffer area to store the input character in a program.""]","['https://www.javatpoint.com/what-is-the-function-call-in-c', 'https://www.javatpoint.com/sum-of-first-n-natural-numbers-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/what-is-the-function-call-in-c', 'https://www.javatpoint.com/sum-of-first-n-natural-numbers-in-c', 'https://www.javatpoint.com/what-is-the-function-call-in-c']",[],[],[],['Why we use a getch() function?'],[],"['Parameters: The getch() function does not accept any parameter from the user.', 'Return value: It returns the ASCII value of the key pressed by the user as an input.', 'Write a simple program to display the character entered by the user using the getch() function in C.', 'To print any character on the console, press the corresponding key.', 'Write a simple program to hold the console screen until the user gives a key to exit.', 'Program2.c', 'Write a program to use the getch() function to accept the string from the user.', 'Usergetch.c', 'Write a program to use the getch() function to accept the hidden password from the user.', 'Program3.c']",[],"['We use a getch() function in a C/ C++ program to hold the output screen for some time until the user passes a key from the keyboard to exit the console screen. Using getch() function, we can hide the input character provided by the users in the ATM PIN, password, etc.']","['int getch(void);', '#include', '#include', 'int main()', 'printf("" Passed value by the User is: %c"", getch()); // print a character entered by the user', 'return 0;', '#include', '#include', 'int main()', 'printf(""Enter a key to exit the console screen.\\n"");', 'getch();', 'return 0;', '#include', '#include', 'int main() {', 'char ch[6] = {0}; int x;', 'for ( x = 0; x < 5; x++) {', 'ch[x] = getch(); // getch() function to take input', 'printf(""Received 5 character Input: %s\\n"", ch);', 'return 0;', '#include', '#include', '#include', '#include', 'void main()', 'char pw[10];', 'int x;', 'printf("" Enter password: "");', 'for (x = 0; x < 10; x++)', 'pw[x] = getch();', 'printf(""*""); // print the input chartered in the form of *', ""pw[x] = '\\0';"", 'printf( ""\\n"" );', 'printf("" You have passed the hidden password: "");', ""for (x = 0; pw[x] != '\\0'; x++)"", 'printf(""%c"", pw[x]);', 'getch();']","['Passed value by the User is: P', 'Enter a key to exit the console screen.', 'Received 5 character Input: hello', 'Enter password: **********', 'You have passed the hidden password: [email\xa0protected]']",[],[]
110,['What is the function call in C?'],"['Before jumping to the function call, we need to understand the function in the C programming language. A function is a group of tasks used to execute the predefined operations and returns a value. A large program can be divided into small blocks of code that help to understand the logic, debug, and modified it.']","['https://www.javatpoint.com/typedef-vs-define-in-c', 'https://www.javatpoint.com/what-is-getch-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/functions-in-c', 'https://www.javatpoint.com/typedef-vs-define-in-c', 'https://www.javatpoint.com/what-is-getch-in-c', 'https://www.javatpoint.com/typedef-vs-define-in-c']",['https://static.javatpoint.com/cpages/images/what-is-the-function-call-in-c.png'],[],"['Library/ Built-in Function', 'User-defined Function']","['Function Declaration', 'Function Definition', 'Function Calling:', 'Call by Value:', 'Call by Reference:']",[],"['In the C programming language, the function is divided into two parts: the built-in/ library function and the user-defined function.', ""Let's write a program to define the library function in C."", 'Predefined.c', 'Example of function declaration:', 'It defines the actual body of a function inside a program for executing their tasks in C.', 'In the above syntax, a function definition contains the three parts as follow:', 'Consider an example to demonstrate the function definition: ', ""Let's consider a program to call a function in C programming languages."", 'Consider a program to demonstrate the Call by Value in C programming.', 'Call_Value.c', 'Consider a program to demonstrate the Call by Reference in C programming.', 'Call_Ref.c']","['A function declaration defines the name and return type of a function in a program. Before using the function, we need to declare it outside of a main() function in a program.', 'In the above example, int is a return data type of the function name add function that contains two integer parameters as num1 and num2. Furthermore, we can write the above function declaration is as follows:', ""When single or multiple values of an actual argument are copied into the formal parameter of a function, the method is called the Call by Value. Hence, it does not alter the function's actual parameter using the formal parameter.""]","['A library function is predefined functions, and its tasks are also defined in the C header files. So, it does not require writing the code of the particular function; instead, it can be called directly in a program whenever it is required. Example: printf(), scanf(), getch(), etc., are the predefined function in the C library, and the meaning of these functions cannot be changed.', ""It is a user-defined function in the C programming language to execute some specific actions according to the programmer's requirement. A user-defined function is divided into three types such as function declaration, function definition, and function call."", 'A function call is an important part of the C programming language. It is called inside a program whenever it is required to call a function. It is only called by its name in the main() function of a program. We can pass the parameters to a function calling in the main() function.', ""In this method, the address of the actual argument is copied into the function call's formal parameter; the method is known as Call by Reference. If we make some changes in the formal parameters, it shows the effect in the value of the actual parameter.""]","['# include  //  Contains the printf, scanf() built-in function', '#include', 'void main()', 'printf( "" Welcome to the JavaTpoint.com "");', 'printf(""\\n It is the library or built-in function in C "");', 'getch(); // built-in function', 'return_data_type function_name ( data_type arguments) ;', 'int add ( int num1, int num2 );', 'int add (int, int);', 'return_data_type function_name (argument list ) {', 'int min (int n1, int n2); // min() is the name of a function that contains n1 and n2 parameters', 'int out;', 'if ( n1 > n2)', 'out = n1; // return n1 when n1 is greater than n2.', 'out = n2; // return n2 when n2 is greater than n1.', 'return out;', 'Add(a, b) // a and b are the parameters', '#include', 'int add(int a, int b);', 'void main()', 'int sum;', 'int a, b;', 'printf("" Enter the first and second number \\n"");', 'scanf(""%d %d"", &a, &b);', 'sum = add(a, b); // call add() function', 'printf( ""The sum of the two number is %d"", sum);', 'int add(int n1, int n2) // pass n1 and n2 parameter', 'c = n1 + n2;', 'return c;', '#include', 'int main()', 'int x = 10, y = 20;', 'printf ("" x = %d, y = %d from main before calling the function"", x, y);', 'CallValue(x, y);', 'printf( ""\\n x = %d, y = %d from main after calling the function"", x, y);', 'int CallValue( int x, int y)', 'x = x + 5;', 'y = y + 5;', 'printf ("" \\nx = %d, y = %d from modular function"", x, y);', '#include', 'int main()', 'int x = 10, y = 20;', 'printf ("" x = %d, y = %d from main before calling the function"", x, y);', 'CallValue (&x, &y);', 'printf( ""\\n x = %d, y = %d from main after calling the function"", x, y);', 'int CallRef( int *a, int *b)', '*a = *a + 5;', '*b = *b + 5;', 'printf ("" \\nx = %d, y = %d from modular function"", *a, *b);']","['Welcome to the JavaTpoint.com', 'It is the library function or built-in function in C', 'Enter the first and second number', '5', '6', 'The sum of the two number is 11', 'x = 10, y = 20 from main before calling the function', 'x = 15, y = 25 from modular function', 'x = 10, y = 20 from main after calling the function', 'x = 10, y = 20 from main before calling the function', 'x = 15, y = 25 from modular function', 'x = 15, y = 25 from main after calling the function']",[],"['|||Return Data_Type: It defines the return data type of a value in the function. The return data type can be integer, float, character, etc.|||Function Name: It defines the actual name of a function that contains some parameters.|||Parameters/ Arguments: It is a parameter that passed inside the function name of a program. Parameters can be any type, order, and the number of parameters.|||Function Body: It is the collection of the statements to be executed for performing the specific tasks in a function.|||']"
111,['Difference between typedef and define in C'],"['In this topic, we will discuss the difference between typedef and define in C programming language.']","['https://www.javatpoint.com/big-o-notation-in-c', 'https://www.javatpoint.com/what-is-the-function-call-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/typedef-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-preprocessor-define', 'https://www.javatpoint.com/https://www.javatpoint.com/data-types-in-c', 'https://www.javatpoint.com/big-o-notation-in-c', 'https://www.javatpoint.com/what-is-the-function-call-in-c', 'https://www.javatpoint.com/big-o-notation-in-c']",['https://static.javatpoint.com/cpages/images/typedef-vs-define-in-c.png'],[],"['typedef:', 'define']","['Use of typedef keyword in Structure', 'Difference between the typedef and the #define in C']",[],"['Example 1: Consider a program to use the typedef keyword in C.', ""Example 2: Let's consider another program to use the typedef in unsigned char of C."", 'In the above program, we use the typedef keyword to define a new name for the struct data type is Students and initialize the variables using it.', 'Example 1: Consider a program to use the #define pre-processor in C.', 'Example 2: Consider a program to get the area of a circle in C using the #define pre-processor.', 'Example 3: Consider a program to demonstrate the importance of typedef over the #define for data types.', 'Following are the differences of the typedef and the #define, as follows:']","[""In the above syntax, the existing _name defines the predefined data types or variable name. The 'alias _name' or newName defines the new name for exiting data type or variable name in the C program."", ""Let's consider a program to use the typedef keyword in structure to provide a new name to the struct and initialize the structure variables, as follow:"", 'A #define is the pre-processor used to represents the constant aliases for various data. It is used to define the constant variable for different data types in C. It is defined outside of the main program.', 'In the above program, we use PI as a continuous variable using the #define pre-processor. And when the program is executed, the PI value automatically calls in a program.']","['A typedef is a keyword used in C programming to define a new name for exiting data types. But it cannot provide a new data type to the predefined data type. Instead, it provides a meaning full names to an already existing data type (int, char, float, etc.). It is defined outside the main() function in a program. In other words, a typedef is used to redefine the names of existing data types in C programming.', 'In the above syntax, #define is a pre-processor that defines the token as a constant variable name, and the value represents the token value. After initializing the constant variable in the pre-processor, we can use the value using the variable in a program.']","['typedef data_type newName', 'or typedef', '#include', 'typedef int Length; // typedef provide the int data type to a new name as Length', 'int main()', 'Length num1, num2, sum; // here Length variable is treated as the int data type', 'printf("" Enter the first number:"");', 'scanf("" %d"", & num1);', 'printf("" Enter the second number:"");', 'scanf("" %d"", & num2);', 'sum = num1 + num2;', 'printf("" The sum of the two numbers is: %d"", sum);', 'return 0;', '#include', '#include', 'typedef unsigned char Bit;', 'int main()', 'Bit B1, B2;', ""B1 = 'D';"", ""B2 = 'E';"", 'printf( "" Demonstrate the use of typedef Keyword "");', 'printf ("" Print a single Byte: %c"", B1);', 'printf ("" Print a single Byte: %c"", B2);', 'return 0;', '#include', '#include', 'typedef struct Students {', 'int roll_no;', 'char name[50];', 'char Subject[60];', 'char teacher_name[80];', '} Stud;', 'int main( ) {', 'Stud S1;', 'S1.roll_no = 30;', 'strcpy( S1.name, ""Lockie Ferguson"");', 'strcpy( S1.Subject, ""Mathematics"");', 'strcpy( S1.teacher_name, ""Jasmine"");', 'printf( ""Student Roll No: %d\\n"", S1.roll_no);', 'printf( ""Student Name: %s\\n"", S1.name);', 'printf( ""Student Subject: %s\\n"", S1.Subject);', 'printf( ""Student Teacher Name: %s\\n"", S1.teacher_name);', 'return 0;', '#define token value', '#include', '#include', '#define PI 3.14 // define the constant variable', 'void main()', 'printf ("" Display the PI Constant value using the #define is: %f"", PI);', 'getch();', '# include', '#include', '#define PI 3.14 // define the constant variable', 'void main()', 'int r, area;', 'printf ("" Enter the radius of the circle: "");', 'scanf (""%d"", &r);', 'area = PI * r * r;', 'printf ("" The area of the circle is: %d"", area);', 'getch();', '#include', '#include', 'typedef char* ptr;', '#define PTR char', 'int main()', 'ptr x, y, z;', 'PTR p, q, r;', 'printf ("" sizeof x : %d\\n"", sizeof(x) );', 'printf ("" sizeof y : %d\\n"", sizeof(y) );', 'printf ("" sizeof z : %d\\n"", sizeof(z) );', 'printf ("" sizeof p : %d\\n"", sizeof(p) );', 'printf ("" sizeof q : %d\\n"", sizeof(q) );', 'printf ("" sizeof r : %d\\n"", sizeof(r) );', 'return 0;']","['Enter the first number: 20', 'Enter the second number: 10', 'The sum of the two numbers is: 30', 'Demonstrate the use of typedef Keyword', 'Print a single Byte: D', 'Print a single Byte: E', 'Student Roll No: 30', 'Student name: Lockie Fergusion', 'Student Subject: Mathematics', 'Student Teacher Name: Jasmine', 'Display the PI Constant value using the #define is: 3.14', 'Enter the radius of the circle : 5', 'The area of the circle is: 78', 'Sizeof x:8', 'Sizeof y:8', 'Sizeof z:8', 'Sizeof p:8', 'Sizeof q:1', 'Sizeof r:1']","['SN|||Typedef|||#define&&&1.|||Typedef is a keyword in the C programming language.|||#define is a pre-processor and used as macro used in C programming.&&&2.|||It is a keyword used to provide an alternate name to the existing data types only. And that name can be used to initialize the variables in a program.|||A #define is used to define an alias for values.&&&3.|||The compiler performs it.|||The pre-processor performs it.&&&4.|||It uses a semicolon to terminate the statement.|||It does not use a semicolon to terminate the statement.&&&5.|||It defines the actual definition of a new data type.|||A #define is used to just copy-paste the define values where it calls or uses.&&&6.|||It follows the scope rule that defines if a new data type is in scope (inside a function), the new type name will only be visible till the scope of the data type.|||When the #define pre-processor encounters in a program, it replaces all the occurrence of the variables with the defined values; after that, no scope is followed.&&&7.|||Define outside of the main() function.|||Define outside of the main() function.']",[]
112,['C Programming Test'],"['C Programming Test paper includes tests on fundamentals, control statements, functions, arrays, pointers, strings, structure, union, enums and preprocessors topics.']","['https://www.javatpoint.com/c-fundamental-1', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/c-fundamental-1', 'https://www.javatpoint.com/c-control-statements-1', 'https://www.javatpoint.com/c-functions-1', 'https://www.javatpoint.com/c-array-1', 'https://www.javatpoint.com/c-pointers-1', 'https://www.javatpoint.com/c-string-1', 'https://www.javatpoint.com/c-structure-union-enums-1', 'https://www.javatpoint.com/c-preprocessor-1', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/c-fundamental-1']",[],[],"['C Fundamental Test', 'C Control Statement Test', 'C Function Test', 'C Array Test', 'C Pointers Test', 'C String Test', 'C Structure, Union, Enum Test', 'C Preprocessor Test']",[],[],[],[],[],[],[],[],[]
113,['C Programs'],"[""C programs are frequently asked in the interview. These programs can be asked from basics, array, string, pointer, linked list, file handling etc. Let's see the list of c programs.""]","['https://www.javatpoint.com/fibonacci-series-in-c', 'https://www.javatpoint.com/flow-of-c-program', 'https://www.javatpoint.com/fibonacci-series-in-c', 'https://www.javatpoint.com/prime-number-program-in-c', 'https://www.javatpoint.com/palindrome-program-in-c', 'https://www.javatpoint.com/factorial-program-in-c', 'https://www.javatpoint.com/armstrong-number-in-c', 'https://www.javatpoint.com/sum-of-digits-program-in-c', 'https://www.javatpoint.com/c-program-to-reverse-number', 'https://www.javatpoint.com/c-program-to-swap-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/c-program-to-print-hello-without-semicolon', 'https://www.javatpoint.com/assembly-program-in-c', 'https://www.javatpoint.com/c-program-without-main', 'https://www.javatpoint.com/matrix-multiplication-in-c', 'https://www.javatpoint.com/c-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/c-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/c-program-to-print-number-triangle', 'https://www.javatpoint.com/c-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/c-program-to-convert-number-in-characters', 'https://www.javatpoint.com/fibonacci-series-in-c', 'https://www.javatpoint.com/flow-of-c-program', 'https://www.javatpoint.com/fibonacci-series-in-c']",[],[],[],[],[],"['Write a c program to print fibonacci series without using recursion and using recursion.', 'Output: 0 1 1 2 3 5 8 13 21 34', 'Write a c program to check prime number.', 'Output: not prime number', 'Output: prime number', 'Write a c program to check palindrome number.', 'Input: 329', 'Output: not palindrome number', 'Input: 12321', 'Output: palindrome number', 'Write a c program to print factorial of a number.', 'Output: 120', 'Output: 720', 'Write a c program to check armstrong number.', 'Input: 153', 'Output: armstrong', 'Output: not armstrong', 'Write a c program to print sum of digits.', 'Input: 234', 'Input: 12345', 'Output: 15', 'Write a c program to reverse given number.', 'Input: 123', 'Output: 321', 'Write a c program to swap two numbers without using third variable.', 'Input: a=10 b=20', 'Output: a=20 b=10', 'Write a c program to print ""hello"" without using semicolon', 'Write a c program to add two numbers using assembly code.', 'Write a c program to print ""Hello"" without using main() function.', 'Write a c program to print multiplication of 2 matrices.', 'Write a c program to convert decimal number to binary.', 'Output: 101', 'Output: 10100', 'Write a c program to print alphabet triangle.', 'Write a c program to print number triangle.', 'Write a c program to generate fibonacci triangle.', 'Write a c program to convert number in characters.', 'Output: five', 'Input: 203', 'Output: two zero three']",[],[],"['first matrix elements:', 'second matrix elements']","['first matrix elements:\n1 1 1\n2 2 2\n3 3 3\nsecond matrix elements\n1 1 1\n2 2 2\n3 3 3', 'multiplication of the matrix:\n6 6 6\n12 12 12\n18 18 18', 'A\n    ABA\n   ABCBA\n  ABCDCBA\n ABCDEDCBA', 'enter the range= 6\n      1\n     121\n    12321\n   1234321\n  123454321\n 12345654321', '1\n1\t1\t\n1\t1\t2\t\n1\t1\t2\t3\t\n1\t1\t2\t3\t5']",[],[]
114,['Fibonacci Series in C'],"['Fibonacci Series in C: In case of fibonacci series, next number is the sum of previous two numbers for example 0, 1, 1, 2, 3, 5, 8, 13, 21 etc. The first two numbers of fibonacci series are 0 and 1.']","['https://www.javatpoint.com/prime-number-program-in-c', 'https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/prime-number-program-in-c', 'https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/prime-number-program-in-c']",[],[],[],[],[],"['There are two ways to write the fibonacci series program:', ""Let's see the fibonacci series program in c without recursion."", ""Let's see the fibonacci series program in c using recursion.""]",[],[],"['#include', 'int main()', 'int n1=0,n2=1,n3,i,number;', 'printf(""Enter the number of elements:"");', 'scanf(""%d"",&number);', 'printf(""\\n%d %d"",n1,n2);//printing 0 and 1', 'for(i=2;i', '#include', 'void printFibonacci(int n){', 'static int n1=0,n2=1,n3;', 'if(n>0){', 'n3 = n1 + n2;', 'n1 = n2;', 'n2 = n3;', 'printf(""%d "",n3);', 'printFibonacci(n-1);', 'int main(){', 'int n;', 'printf(""Enter the number of elements: "");', 'scanf(""%d"",&n);', 'printf(""Fibonacci Series: "");', 'printf(""%d %d "",0,1);', 'printFibonacci(n-2);//n-2 because 2 numbers are already printed', 'return 0;']","['Enter the number of elements:15\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377', 'Enter the number of elements:15\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377']",[],['|||Fibonacci Series without recursion|||Fibonacci Series using recursion|||']
115,['Prime Number program in C'],"[""Prime number in C: Prime number is a number that is greater than 1 and divided by 1 or itself. In other words, prime numbers can't be divided by other numbers than itself or 1. For example 2, 3, 5, 7, 11, 13, 17, 19, 23.... are the prime numbers.""]","['https://www.javatpoint.com/palindrome-program-in-c', 'https://www.javatpoint.com/fibonacci-series-in-c', 'https://www.javatpoint.com/palindrome-program-in-c', 'https://www.javatpoint.com/fibonacci-series-in-c', 'https://www.javatpoint.com/palindrome-program-in-c']",[],[],[],[],['Note: Zero (0) and 1 are not considered as prime numbers. Two (2) is the only one even prime number because all the numbers can be divided by 2.'],"[""Let's see the prime number program in C. In this c program, we will take an input from the user and check whether the number is prime or not.""]",[],[],"['#include', 'int main(){', 'int n,i,m=0,flag=0;', 'printf(""Enter the number to check prime:"");', 'scanf(""%d"",&n);', 'm=n/2;', 'for(i=2;i<=m;i++)', 'if(n%i==0)', 'printf(""Number is not prime"");', 'flag=1;', 'break;', 'if(flag==0)', 'printf(""Number is prime"");', 'return 0;']",['Enter the number to check prime:56\nNumber is not prime\n\nEnter the number to check prime:23\nNumber is prime'],[],[]
116,['Palindrome program in C'],"['Palindrome number in c: A palindrome number is a number that is same after reverse. For example 121, 34543, 343, 131, 48984 are the palindrome numbers.']","['https://www.javatpoint.com/factorial-program-in-c', 'https://www.javatpoint.com/prime-number-program-in-c', 'https://www.javatpoint.com/factorial-program-in-c', 'https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/factorial-program-in-c']",[],[],[],[],[],"[""Let's see the palindrome program in C. In this c program, we will get an input from the user and check whether number is palindrome or not.""]",[],[],"['#include', 'int main()', 'int n,r,sum=0,temp;', 'printf(""enter the number="");', 'scanf(""%d"",&n);', 'temp=n;', 'while(n>0)', 'r=n%10;', 'sum=(sum*10)+r;', 'n=n/10;', 'if(temp==sum)', 'printf(""palindrome number "");', 'printf(""not palindrome"");', 'return 0;']",['enter the number=151\npalindrome  number\n\nenter the number=5621\nnot palindrome  number'],[],"['|||Get the number from user|||Hold the number in temporary variable|||Reverse the number|||Compare the temporary number with reversed number|||If both numbers are same, print palindrome number|||Else print not palindrome number|||']"
117,['C program to compare the two strings'],"['Strings can be compared either by using the string function or without using string function. First, we will look at how we can compare the strings with the help of string function, i.e., strcmp(), which is defined in a string.h header file.']","['https://www.javatpoint.com/strings-concatenation-in-c', 'https://www.javatpoint.com/palindrome-program-in-c', 'https://www.javatpoint.com/strings-concatenation-in-c', 'https://www.javatpoint.com/palindrome-program-in-c', 'https://www.javatpoint.com/strings-concatenation-in-c']","['https://static.javatpoint.com/cpages/images/c-program-to-compare-the-two-strings.png', 'https://static.javatpoint.com/cpages/images/c-program-to-compare-the-two-strings2.png', 'https://static.javatpoint.com/cpages/images/c-program-to-compare-the-two-strings3.png', 'https://static.javatpoint.com/cpages/images/c-program-to-compare-the-two-strings4.png']",[],[],"['String comparison by using string function', 'The syntax of the strcmp() function is given below:', 'Analysis of the above program', 'String comparison without using strcmp() function', 'Analysis of the above program', 'String comparison by using pointers', 'Analysis of the above program']",[],"['Possible return values from the strcmp() function', ""Let's understand through an example.""]","['In the above syntax, two parameters are passed as strings, i.e., str1 and str2, and the return type is int means that the strcmp() returns an integer value.']","['The string function which is pre-defined in a string.h header file is a strcmp() function. The strcmp() function consider two strings as a parameter, and this function returns an integer value where the integer value can be zero, positive or negative.', ""The strcmp() function compares the character of both the strings. If the first character of both the strings are same, then this process of comparison will continue until all the characters are compared or the pointer points to the null character '\\0'.""]","['int strcmp (const char* str1, const char* str2);', '#include <stdio.h>', '#include<string.h>', 'int main()', 'char str1[20];  // declaration of char array', 'char str2[20];  // declaration of char array', 'int value; // declaration of integer variable', 'printf(""Enter the first string : "");', 'scanf(""%s"",str1);', 'printf(""Enter the second string : "");', 'scanf(""%s"",str2);', 'value=strcmp(str1,str2);', 'if(value==0)', 'printf(""strings are same"");', 'else', 'printf(""strings are not same"");', 'return 0;', '#include <stdio.h>', 'int compare(char[],char[]);', 'int main()', 'char str1[20]; // declaration of char array', 'char str2[20]; // declaration of char array', 'printf(""Enter the first string : "");', 'scanf(""%s"",str1);', 'printf(""Enter the second string : "");', 'scanf(""%s"",str2);', 'int c= compare(str1,str2); // calling compare() function', 'if(c==0)', 'printf(""strings are same"");', 'else', 'printf(""strings are not same"");', 'return 0;', 'int compare(char a[],char b[])', 'int flag=0,i=0;  // integer variables declaration', ""while(a[i]!='\\0' &&b[i]!='\\0')  // while loop"", 'if(a[i]!=b[i])', '{', 'flag=1;', 'break;', '}', 'i++;', 'if(flag==0)', 'return 0;', 'else', 'return 1;', '#include <stdio.h>', 'int stringcompare(char*,char*);', 'int main()', 'char str1[20]; // declaration of char array', 'char str2[20]; // declaration of char array', 'printf(""Enter the first string : "");', 'scanf(""%s"",str1);', 'printf(""\\nEnter the second string : "");', 'scanf(""%s"",str2);', 'int compare=stringcompare(str1,str2); // calling stringcompare() function.', 'if(compare==0)', 'printf(""strings are equal"");', 'printf(""strings are not equal"");', 'return 0;', 'int stringcompare(char *a,char *b)', 'int flag=0;', ""while(*a!='\\0' && *b!='\\0')  // while loop"", 'if(*a!=*b)', '{', 'flag=1;', '}', 'a++;', 'b++;', 'if(flag==0)', 'return 0;', 'else', 'return 1;']",[],"['Return value|||Description&&&0|||When both the strings are equal.&&&<0|||If the ASCII value of a character of the first string is less than the ASCII value of a character of the second string, then the function will return negative value.&&&>0|||If the ASCII value of a character of the first string is greater than the ASCII value of a character of the second string, then the function will return positive value.']","[""|||We have declared two arrays of char type, i.e., str1 and str2. We take the user input as strings.|||We compare the strings by using the strcmp() function, i.e., strcmp(str1,str2). This function will compare both the strings str1 and str2. If the function returns 0 value means that both the strings are same, otherwise the strings are not equal.||||||In the above, we have declared two arrays of char type, and we take the user input as strings.|||We have defined a compare() function which will take user input strings as a parameter, and compare both the strings. If the function returns 0, which means that both the strings are equal otherwise both the strings are not equal.||||||We have created two arrays of char type str1 and str2. We take the user input as strings.|||We have defined a stringcompare() function which will take two pointers of char type as a parameter. The 'a' pointer holds the address of str1 and 'b' pointer holds the address of str2. Inside the function, we have created a while loop which will execute until the pointer a or b is not reached to a null character.|||""]"
118,['Strings Concatenation in C'],"['The concatenation of strings is a process of combining two strings to form a single string. If there are two strings, then the second string is added at the end of the first string.']","['https://www.javatpoint.com/factorial-program-in-c', 'https://www.javatpoint.com/c-program-to-compare-the-two-strings', 'https://www.javatpoint.com/factorial-program-in-c', 'https://www.javatpoint.com/c-program-to-compare-the-two-strings', 'https://www.javatpoint.com/factorial-program-in-c']","['https://static.javatpoint.com/cpages/images/strings-concatenation-in-c.png', 'https://static.javatpoint.com/cpages/images/strings-concatenation-in-c2.png', 'https://static.javatpoint.com/cpages/images/strings-concatenation-in-c3.png']",[],[],"['Concatenate two strings using loop', 'Concatenate two strings using pointer', 'Concatenation of two strings using strcat()']",[],"['For example, Hello + javaTpoint = Hello javaTpoint', 'We can concatenate the strings in the following three ways:', 'Analysis of the above program', 'Analysis of the above program', 'Now we will see how to concatenate two strings using strcat() function. The strcat() is an inbuilt function defined in a string.h header file.', ""Let's look at the example.""]","['In the above code, we use the strcat() function to concatenate two strings. It takes two strings as a parameter and then appends the second string at the end of the first string.']",[],"['#include <stdio.h>', 'int main()', 'char first_string[20]; // declaration of char array variable', 'char second_string[20]; // declaration of char array variable', 'int i;  // integer variable declaration', 'printf(""Enter the first string"");', 'scanf(""%s"",first_string);', 'printf(""\\nEnter the second string"");', 'scanf(""%s"",second_string);', ""for(i=0;first_string[i]!='\\0';i++);"", ""for(int j=0;second_string[j]!='\\0';j++)"", 'first_string[i]=second_string[j];', 'i++;', ""first_string[i]='\\0';"", 'printf(""After concatenation, the string would look like: %s"", first_string);', 'return 0;', '#include <stdio.h>', 'int main()', 'char string1[20]; // char array declaration', 'char string2[20]; // char array declaration', 'int i=0,j=0; // declaration of integer variables', 'char *str1; // declaration of char pointer', 'char *str2;  // declaration of char pointer', 'str1=string1;', 'str2=string2;', 'printf(""Enter the first string"");', 'scanf(""%s"",string1);', 'printf(""\\nEnter the second string"");', 'scanf(""%s"", string2);', ""while(string1[i]!='\\0')"", '++str1;', 'i++;', ""while(string2[j]!='\\0')"", '*str1=*str2;', 'str1++;', 'str2++;', 'j++;', 'printf(""The concatenated string is %s"",string1);', 'return 0;', '#include <stdio.h>', '#include<string.h>', 'int main()', 'char s1[20]; // declaration of char array', 'char s2[20]; // declaration of char array', 'printf(""Enter the first string : "");', 'scanf(""%s"", s1);', 'printf(""\\nEnter the second string :"");', 'scanf(""%s"",s2);', 'strcat(s1,s2);', 'printf(""The concatenated string is : %s"",s1);', 'return 0;']",[],[],"[""|||Concatenate two strings using loop|||Concatenate two strings using pointer|||Concatenate two strings using strcat() function||||||In the above program, we declare two strings, i.e., first_string and second_string. The values of these two strings are taken by the user as an input.|||We will concatenate these two strings and store the result of concatenation in the first_string|||We declare a new integer variable named 'i'. After declaration, we will run a loop that iterates from i=0 till the null character of the first_string is encountered. When the execution of the loop is completed, then the value of 'i' becomes equal to the length of the string plus one.|||We will define another new loop, which is basically used to concatenate the two strings. This loop starts from j=0 and executes until the null character of the second_string is encountered. On each iteration, the character located at the jth position in the second_string gets stored in the ith position of the first_string. In this way, both the strings are combined together to form a single string.||||||In the above program, we have declared character array variables, i.e., string1 and string2. We take the two strings as user input and store them in the variables string1 and string2,|||We declare two char pointers str1 and str2. The str1 contains the address of string1, and str2 contains the address of string2.|||We create a loop which iterates until the null character of string1 is encountered. When the execution of the loop is completed, then the pointer str1 points to the location that exists just after the location of the last character.|||We define another while loop that iterates till the null character of string2 is encountered. On each iteration, the character stored at the jth location in the string2 is appended to the string1 by using the statement *str1=*str2.|||""]"
119,['Factorial Program in C'],['Factorial Program in C: Factorial of n is the product of all positive descending integers. Factorial of n is denoted by n!. For example:'],"['https://www.javatpoint.com/armstrong-number-in-c', 'https://www.javatpoint.com/palindrome-program-in-c', 'https://www.javatpoint.com/armstrong-number-in-c', 'https://www.javatpoint.com/palindrome-program-in-c', 'https://www.javatpoint.com/armstrong-number-in-c']",[],[],[],[],[],"['Here, 5! is pronounced as ""5 factorial"", it is also called ""5 bang"" or ""5 shriek"".', 'The factorial is normally used in Combinations and Permutations (mathematics).', ""There are many ways to write the factorial program in c language. Let's see the 2 ways to write the factorial program."", ""Let's see the factorial Program using loop."", ""Let's see the factorial program in c using recursion.""]",[],[],"['5! = 5*4*3*2*1 = 120', '3! = 3*2*1 = 6', '#include', 'int main()', 'int i,fact=1,number;', 'printf(""Enter a number: "");', 'scanf(""%d"",&number);', 'for(i=1;i<=number;i++){', 'fact=fact*i;', 'printf(""Factorial of %d is: %d"",number,fact);', 'return 0;', '#include<stdio.h>', 'long factorial(int n)', 'if (n == 0)', 'return 1;', 'return(n * factorial(n-1));', 'void main()', 'int number;', 'long fact;', 'printf(""Enter a number: "");', 'scanf(""%d"", &number);', 'fact = factorial(number);', 'printf(""Factorial of %d is %ld\\n"", number, fact);', 'return 0;']","['Enter a number: 5\nFactorial of 5 is: 120', 'Enter a number: 6\nFactorial of 5 is: 720']",[],['|||Factorial Program using loop|||Factorial Program using recursion|||']
120,['Armstrong Number in C'],"[""Before going to write the c program to check whether the number is Armstrong or not, let's understand what is Armstrong number.""]","['https://www.javatpoint.com/sum-of-digits-program-in-c', 'https://www.javatpoint.com/factorial-program-in-c', 'https://www.javatpoint.com/sum-of-digits-program-in-c', 'https://www.javatpoint.com/factorial-program-in-c', 'https://www.javatpoint.com/sum-of-digits-program-in-c']",[],[],[],[],[],"['Armstrong number is a number that is equal to the sum of cubes of its digits. For example 0, 1, 153, 370, 371 and 407 are the Armstrong numbers.', ""Let's try to understand why 153 is an Armstrong number."", ""Let's try to understand why 371 is an Armstrong number."", ""Let's see the c program to check Armstrong Number in C.""]",[],[],"['153 = (1*1*1)+(5*5*5)+(3*3*3)', '(1*1*1)=1', '(5*5*5)=125', '(3*3*3)=27', '1+125+27=153', '371 = (3*3*3)+(7*7*7)+(1*1*1)', '(3*3*3)=27', '(7*7*7)=343', '(1*1*1)=1', '27+343+1=371', '#include', 'int main()', 'int n,r,sum=0,temp;', 'printf(""enter the number="");', 'scanf(""%d"",&n);', 'temp=n;', 'while(n>0)', 'r=n%10;', 'sum=sum+(r*r*r);', 'n=n/10;', 'if(temp==sum)', 'printf(""armstrong  number "");', 'printf(""not armstrong number"");', 'return 0;']",['enter the number=153\narmstrong number\n\nenter the number=5\nnot armstrong number'],[],[]
121,['Sum of digits program in C'],['C program to sum each digit: We can write the sum of digits program in c language by the help of loop and mathematical operation only.'],"['https://www.javatpoint.com/c-program-to-reverse-number', 'https://www.javatpoint.com/armstrong-number-in-c', 'https://www.javatpoint.com/c-program-to-reverse-number', 'https://www.javatpoint.com/armstrong-number-in-c', 'https://www.javatpoint.com/c-program-to-reverse-number']",[],[],[],[],[],"['To get sum of each digits by c program, use the following algorithm:', ""Let's see the sum of digits program in C.""]",[],[],"['#include', 'int main()', 'int n,sum=0,m;', 'printf(""Enter a number:"");', 'scanf(""%d"",&n);', 'while(n>0)', 'm=n%10;', 'sum=sum+m;', 'n=n/10;', 'printf(""Sum is=%d"",sum);', 'return 0;']",['Enter a number:654\nSum is=15\n\nEnter a number:123\nSum is=6'],[],['|||Step 1: Get number by user|||Step 2: Get the modulus/remainder of the number|||Step 3: sum the remainder of the number|||Step 4: Divide the number by 10|||Step 5: Repeat the step 2 while number is greater than 0.|||']
122,['Count the number of digits in C'],"['Now, we will look at how to count the number of digits in an integer. This integer is nothing but the number entered by the user.']","['https://www.javatpoint.com/c-program-to-reverse-number', 'https://www.javatpoint.com/sum-of-digits-program-in-c', 'https://www.javatpoint.com/c-program-to-reverse-number', 'https://www.javatpoint.com/sum-of-digits-program-in-c', 'https://www.javatpoint.com/c-program-to-reverse-number']","['https://static.javatpoint.com/cpages/images/count-the-number-of-digits-in-c.png', 'https://static.javatpoint.com/cpages/images/count-the-number-of-digits-in-c2.png', 'https://static.javatpoint.com/cpages/images/count-the-number-of-digits-in-c3.png', 'https://static.javatpoint.com/cpages/images/count-the-number-of-digits-in-c4.png']",[],[],[],[],"['First, we will calculate count the number of digits using for or while loop.', ""Let's create a program which will implement the above approach."", 'Now, we will see how to count the number of digits without using a loop.', ""Let's see a simple example."", 'We will create a C program to count the number of digits using functions.', 'Now, we will see how to count the number of digits using recursion.']","['We can also count the number of digits with the help of the logarithmic function. The number of digits can be calculated by using log10(num)+1, where log10() is the predefined function in math.h header file.']","['In the above program, we are calculating the number of digits in an integer. The func() function is called. In func(), we declare a static variable, i.e., counter, which will be initialized only once. The func(n/10) will be called recursive1y until the condition (n>0) is true. When the condition is false, then the value of the counter is returned.']","['#include <stdio.h>', 'int main()', 'int n;  // variable declaration', 'int count=0;   // variable declaration', 'printf(""Enter a number"");', 'scanf(""%d"",&n);', 'while(n!=0)', 'n=n/10;', 'count++;', 'printf(""\\nThe number of digits in an integer is : %d"",count);', 'return 0;', '#include <stdio.h>', '#include<math.h>', 'int main()', 'int num;  // variable declaration', 'int count=0;  // variable declaration', 'printf(""Enter a number"");', 'scanf(""%d"",#);', 'count=(num==0)?1:log10(num)+1;', 'printf(""Number of digits in an integer is : %d"",count);', 'return 0;', '#include <stdio.h>', 'int main()', 'int num;  // variable declaration', 'int count=0;  // variable declaration', 'printf(""Enter a number"");', 'scanf(""%d"",#);', 'count=func(num);', 'printf(""Number of digits is : %d"", count);', 'return 0;', 'int func(int n)', 'int counter=0; // variable declaration', 'while(n!=0)', 'n=n/10;', 'counter++;', 'return counter;', '#include <stdio.h>', 'int main()', 'int num;  // variable declaration', 'int count=0;  // variable declaration', 'printf(""Enter a number"");', 'scanf(""%d"",#);', 'count=func(num);', 'printf(""Number of digits is : %d"", count);', 'return 0;', 'int func(int n)', 'static int counter=0; // variable declaration', 'if(n>0)', 'counter=counter+1;', 'return func(n/10);', 'else', 'return counter;']",[],[],"[""|||Firstly, the number will be entered by the user. Suppose we declare the variable 'n' and stores the integer value in the 'n' variable.|||We will create a while loop that iterates until the value of 'n' is not equal to zero.|||Suppose the value of 'n' is 123.|||When the first iteration executes, the value of 'n' will be 123, and the value of count will be incremented to 1.|||When the second iteration executes, the value of 'n' will be 12, and the value of count will be incremented to 2.|||When the third iteration executes, the value of 'n' will be 1, and the value of count will be incremented to 3.|||After the completion of the third iteration, the value of 'n' becomes 0, and loop is terminated as it does not satisfy the condition (n!=0).|||""]"
123,['C Program to reverse number'],"[""We can reverse a number in c using loop and arithmetic operators. In this program, we are getting number as input from the user and reversing that number. Let's see a simple c example to reverse a given number.""]","['https://www.javatpoint.com/c-program-to-swap-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/sum-of-digits-program-in-c', 'https://www.javatpoint.com/c-program-to-swap-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/sum-of-digits-program-in-c', 'https://www.javatpoint.com/c-program-to-swap-two-numbers-without-using-third-variable']",[],[],[],[],[],[],[],[],"['#include', 'int main()', 'int n, reverse=0, rem;', 'printf(""Enter a number: "");', 'scanf(""%d"", &n);', 'while(n!=0)', 'rem=n%10;', 'reverse=reverse*10+rem;', 'n/=10;', 'printf(""Reversed Number: %d"",reverse);', 'return 0;']",['Enter a number: 123\nReversed Number: 321'],[],[]
124,['C Program to swap two numbers without third variable'],['We can swap two numbers without using third variable. There are two common ways to swap two numbers without using third variable:'],"['https://www.javatpoint.com/c-program-to-print-hello-without-semicolon', 'https://www.javatpoint.com/c-program-to-reverse-number', 'https://www.javatpoint.com/c-program-to-print-hello-without-semicolon', 'https://www.javatpoint.com/c-program-to-reverse-number', 'https://www.javatpoint.com/c-program-to-print-hello-without-semicolon']",[],[],[],[],[],"[""Let's see a simple c example to swap two numbers without using third variable."", ""Let's see another example to swap two numbers using * and /.""]",[],[],"['#include', 'int main()', 'int a=10, b=20;', 'printf(""Before swap a=%d b=%d"",a,b);', 'a=a+b;//a=30 (10+20)', 'b=a-b;//b=10 (30-20)', 'a=a-b;//a=20 (30-10)', 'printf(""\\nAfter swap a=%d b=%d"",a,b);', 'return 0;', '#include', '#include', 'int main()', 'int a=10, b=20;', 'printf(""Before swap a=%d b=%d"",a,b);', 'a=a*b;//a=200 (10*20)', 'b=a/b;//b=10 (200/20)', 'a=a/b;//a=20 (200/10)', 'system(""cls"");', 'printf(""\\nAfter swap a=%d b=%d"",a,b);', 'return 0;']","['Before swap a=10 b=20\nAfter swap a=20 b=10', 'Before swap a=10 b=20\nAfter swap a=20 b=10']",[],['|||By + and -|||By * and /|||']
125,"['C Program to print ""hello"" without semicolon']","['We can print ""hello"" or ""hello world"" or anything else in C without using semicolon. There are various ways to do so:']","['https://www.javatpoint.com/assembly-program-in-c', 'https://www.javatpoint.com/c-program-to-swap-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/assembly-program-in-c', 'https://www.javatpoint.com/c-program-to-swap-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/assembly-program-in-c']",[],[],[],[],[],"['Let\'s see a simple c example to print ""hello world"" using if statement and without using semicolon.', 'Let\'s see a simple c example to print ""hello world"" using switch statement and without using semicolon.', 'Let\'s see a simple c example to print ""hello world"" using while loop and without using semicolon.']",[],[],"['#include', 'int main()', 'if(printf(""hello world"")){}', 'return 0;', '#include', 'int main()', 'switch(printf(""hello world"")){}', 'return 0;', '#include', 'int main()', 'while(!printf(""hello world"")){}', 'return 0;']","['hello world', 'hello world', 'hello world']",[],['|||Using if|||Using switch|||Using loop etc.|||']
126,['Assembly program in C'],"['We can write assembly program code inside c language program. In such case, all the assembly code must be placed inside asm{} block.']","['https://www.javatpoint.com/c-program-without-main', 'https://www.javatpoint.com/c-program-to-print-hello-without-semicolon', 'https://www.javatpoint.com/c-program-without-main', 'https://www.javatpoint.com/c-program-to-print-hello-without-semicolon', 'https://www.javatpoint.com/c-program-without-main']",[],[],[],[],['Note: We have executed this program on TurboC.'],"[""Let's see a simple assembly program code to add two numbers in c program.""]",[],[],"['#include<stdio.h>', 'void main() {', 'int a = 10, b = 20, c;', 'asm {', 'mov ax,a', 'mov bx,b', 'add ax,bx', 'mov c,ax', 'printf(""c= %d"",c);']",['c= 30'],[],[]
127,['C Program without main() function'],"['We can write c program without using main() function. To do so, we need to use #define preprocessor directive.']","['https://www.javatpoint.com/matrix-multiplication-in-c', 'https://www.javatpoint.com/assembly-program-in-c', 'https://www.javatpoint.com/matrix-multiplication-in-c', 'https://www.javatpoint.com/assembly-program-in-c', 'https://www.javatpoint.com/matrix-multiplication-in-c']",[],[],[],[],[],"['Let\'s see a simple program to print ""hello"" without main() function.']",[],[],"['#include', '#define start main', 'void start() {', 'printf(""Hello"");']",['Hello'],[],[]
128,['Matrix multiplication in C'],"['Matrix multiplication in C: We can add, subtract, multiply and divide 2 matrices. To do so, we are taking input from the user for row number, column number, first matrix elements and second matrix elements. Then we are performing multiplication on the matrices entered by the user.']","['https://www.javatpoint.com/c-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/c-program-without-main', 'https://www.javatpoint.com/c-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/c-program-without-main', 'https://www.javatpoint.com/c-program-to-convert-decimal-to-binary']","['https://static.javatpoint.com/cpages/images/matrix-multiplication1.png', 'https://static.javatpoint.com/cpages/images/matrix-multiplication.png']",[],[],[],[],"['In matrix multiplication first matrix one row element is multiplied by second matrix all column elements.', "" Let's try to understand the matrix multiplication of 2*2 and 3*3 matrices by the figure given below:"", ""Let's see the program of matrix multiplication in C."", ""Let's try to understand the matrix multiplication of 3*3 and 3*3 matrices by the figure given below:""]",[],[],"['#include<stdio.h>', '#include<stdlib.h>', 'int main(){', 'int a[10][10],b[10][10],mul[10][10],r,c,i,j,k;', 'system(""cls"");', 'printf(""enter the number of row="");', 'scanf(""%d"",&r);', 'printf(""enter the number of column="");', 'scanf(""%d"",&c);', 'printf(""enter the first matrix element=\\n"");', 'for(i=0;i<r;i++)', 'for(j=0;j<c;j++)', 'scanf(""%d"",&a[i][j]);', 'printf(""enter the second matrix element=\\n"");', 'for(i=0;i<r;i++)', 'for(j=0;j<c;j++)', 'scanf(""%d"",&b[i][j]);', 'printf(""multiply of the matrix=\\n"");', 'for(i=0;i<r;i++)', 'for(j=0;j<c;j++)', 'mul[i][j]=0;', 'for(k=0;k<c;k++)', 'mul[i][j]+=a[i][k]*b[k][j];', 'for(i=0;i<r;i++)', 'for(j=0;j<c;j++)', 'printf(""%d\\t"",mul[i][j]);', 'printf(""\\n"");', 'return 0;']",['enter the number of row=3\nenter the number of column=3\nenter the first matrix element=\n1 1 1\n2 2 2\n3 3 3\nenter the second matrix element=\n1 1 1\n2 2 2\n3 3 3\nmultiply of the matrix=\n6 6 6\n12 12 12\n18 18 18'],[],[]
129,['C Program to convert Decimal to Binary'],['Decimal to binary in C: We can convert any decimal number (base-10 (0 to 9)) into binary number(base-2 (0 or 1)) by c program.'],"['https://www.javatpoint.com/c-program-to-convert-number-in-characters', 'https://www.javatpoint.com/matrix-multiplication-in-c', 'https://www.javatpoint.com/c-program-to-convert-number-in-characters', 'https://www.javatpoint.com/matrix-multiplication-in-c', 'https://www.javatpoint.com/c-program-to-convert-number-in-characters']",[],[],[],[],[],"['Binary number is a base 2 number because it is either 0 or 1. Any combination of 0 and 1 is binary number such as 1001, 101, 11111, 101010 etc.', ""Let's see the some binary numbers for the decimal number."", ""Let's see the c example to convert decimal to binary.""]","['Decimal number is a base 10 number because it ranges from 0 to 9, there are total 10 digits between 0 to 9. Any combination of digits is decimal number such as 23, 445, 132, 0, 2 etc.']",[],"['#include', '#include', 'int main(){', 'int a[10],n,i;', 'system (""cls"");', 'printf(""Enter the number to convert: "");', 'scanf(""%d"",&n);', 'for(i=0;n>0;i++)', 'a[i]=n%2;', 'n=n/2;', 'printf(""\\nBinary of Given Number is="");', 'for(i=i-1;i>=0;i--)', 'printf(""%d"",a[i]);', 'return 0;']",['Enter the number to convert: 5\nBinary of Given Number is=101'],['ecimalBinar&&&&&&1&&&1&&&10&&&10&&&11&&&11&&&100&&&100&&&0101'],['|||Step 1: Divide the number by 2 through % (modulus operator) and store the remainder in array|||Step 2: Divide the number by 2 through / (division operator)|||Step 3: Repeat the step 2 until number is greater than 0|||']
130,['C Program to convert Number in Characters'],"['Number in characters conversion: In c language, we can easily convert number in characters by the help of loop and switch case. In this program, we are taking input from the user and iterating this number until it is 0. While iteration, we are dividing it by 10 and the remainder is passed in switch case to get the word for the number.']","['https://www.javatpoint.com/c-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/c-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/c-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/c-program-to-convert-decimal-to-binary', 'https://www.javatpoint.com/c-program-to-print-alphabet-triangle']",[],[],[],[],[],"[""Let's see the c program to convert number in characters.""]",[],[],"['#include', '#include', 'int main(){', 'long int n,sum=0,r;', 'system(""cls"");', 'printf(""enter the number="");', 'scanf(""%ld"",&n);', 'while(n>0)', 'r=n%10;', 'sum=sum*10+r;', 'n=n/10;', 'n=sum;', 'while(n>0)', 'r=n%10;', 'switch(r)', 'case 1:', 'printf(""one "");', 'break;', 'case 2:', 'printf(""two "");', 'break;', 'case 3:', 'printf(""three "");', 'break;', 'case 4:', 'printf(""four "");', 'break;', 'case 5:', 'printf(""five "");', 'break;', 'case 6:', 'printf(""six "");', 'break;', 'case 7:', 'printf(""seven "");', 'break;', 'case 8:', 'printf(""eight "");', 'break;', 'case 9:', 'printf(""nine "");', 'break;', 'case 0:', 'printf(""zero "");', 'break;', 'default:', 'printf(""tttt"");', 'break;', 'n=n/10;', 'return 0;']",['enter the number=4321\nfour three two one'],[],[]
131,['C Program to print Alphabet Triangle'],"['There are different triangles that can be printed. Triangles can be generated by alphabets or numbers. In this c program, we are going to print alphabet triangles.']","['https://www.javatpoint.com/c-program-to-print-number-triangle', 'https://www.javatpoint.com/c-program-to-convert-number-in-characters', 'https://www.javatpoint.com/c-program-to-print-number-triangle', 'https://www.javatpoint.com/c-program-to-convert-number-in-characters', 'https://www.javatpoint.com/c-program-to-print-number-triangle']",[],[],[],[],[],"[""Let's see the c example to print alphabet triangle.""]",[],[],"['#include<stdio.h>', '#include<stdlib.h>', 'int main(){', 'int ch=65;', 'int i,j,k,m;', 'system(""cls"");', 'for(i=1;i<=5;i++)', 'for(j=5;j>=i;j--)', 'printf("" "");', 'for(k=1;k<=i;k++)', 'printf(""%c"",ch++);', 'ch--;', 'for(m=1;m<i;m++)', 'printf(""%c"",--ch);', 'printf(""\\n"");', 'ch=65;', 'return 0;']",['A\n    ABA\n   ABCBA\n  ABCDCBA\n ABCDEDCBA'],[],[]
132,['C Program to print Number Triangle'],"['Like alphabet triangle, we can write the c program to print the number triangle. The number triangle can be printed in different ways.']","['https://www.javatpoint.com/c-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/c-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/c-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/c-program-to-print-alphabet-triangle', 'https://www.javatpoint.com/c-program-to-generate-fibonacci-triangle']",[],[],[],[],[],"[""Let's see the c example to print number triangle.""]",[],[],"['#include', '#include', 'int main(){', 'int i,j,k,l,n;', 'system(""cls"");', 'printf(""enter the range="");', 'scanf(""%d"",&n);', 'for(i=1;i<=n;i++)', 'for(j=1;j<=n-i;j++)', 'printf("" "");', 'for(k=1;k<=i;k++)', 'printf(""%d"",k);', 'for(l=i-1;l>=1;l--)', 'printf(""%d"",l);', 'printf(""\\n"");', 'return 0;']",['enter the range= 4\n   1\n  121\n 12321\n1234321 \n\nenter the range= 7\n      1\n     121\n    12321\n   1234321\n  123454321\n 12345654321\n1234567654321'],[],[]
133,['C Program to generate Fibonacci Triangle'],"['In this program, we are getting input from the user for the limit for fibonacci triangle, and printing the fibonacci series for the given number of times (limit).']","['https://www.javatpoint.com/hexadecimal-to-binary-in-c', 'https://www.javatpoint.com/c-program-to-print-number-triangle', 'https://www.javatpoint.com/hexadecimal-to-binary-in-c', 'https://www.javatpoint.com/c-program-to-print-number-triangle', 'https://www.javatpoint.com/hexadecimal-to-binary-in-c']",[],[],[],[],[],"[""Let's see the c example to generate fibonacci triangle.""]",[],[],"['#include<stdio.h>', '#include<stdlib.h>', 'int main(){', 'int a=0,b=1,i,c,n,j;', 'system(""cls"");', 'printf(""Enter the limit:"");', 'scanf(""%d"",&n);', 'for(i=1;i<=n;i++)', 'a=0;', 'b=1;', 'printf(""%d\\t"",b);', 'for(j=1;j<i;j++)', '{', 'c=a+b;', 'printf(""%d\\t"",c);', 'a=b;', 'b=c;', '}', 'printf(""\\n"");', 'return 0;']",['Enter the limit:9\n1\n1\t1\t\n1\t1\t2\t\n1\t1\t2\t3\t\n1\t1\t2\t3\t5\t\n1\t1\t2\t3\t5\t8\t\n1\t1\t2\t3\t5\t8\t13\t\n1\t1\t2\t3\t5\t8\t13\t21\t\n1\t1\t2\t3\t5\t8\t13\t21\t34\t\n\nEnter the limit:5\n1\n1\t1\t\n1\t1\t2\t\n1\t1\t2\t3\t\n1\t1\t2\t3\t5'],[],[]
134,['Hexadecimal to Binary in C'],"['The hexadecimal is a positional system that represents the numbers in sixteen distinct symbols by using 16 as a base. These distinct symbols, i.e., ""0-9"" represents the values from zero to nine, and ""A-F"" represents the values from ten to fifteen. ']","['https://www.javatpoint.com/hexadecimal-to-decimal-in-c', 'https://www.javatpoint.com/c-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/hexadecimal-to-decimal-in-c', 'https://www.javatpoint.com/c-program-to-generate-fibonacci-triangle', 'https://www.javatpoint.com/hexadecimal-to-decimal-in-c']",['https://static.javatpoint.com/cpages/images/hexadecimal-to-binary-in-c.png'],[],"['What is hexadecimal?', 'What is Binary?']",[],"['Note: To convert hexadecimal into a binary number, the binary value of each digit of a hexadecimal number is evaluated and combined to get the binary number of a given hexadecimal number.']","['The binary is a number which is represented with a base 2 numeral system, and it uses two symbols, i.e., 0 and 1.', 'Suppose the hexadecimal number is A12C. Now we calculate the binary value of the hexadecimal number.', 'Hexadecimal number=A12C', 'Binary value equivalent to A is 1010', 'Binary value equivalent to 1 is 0001', 'Binary value equivalent to 2 is 0010', 'Binary value equivalent to C is 1100', 'Therefore, the binary value equivalent to A12C is 1010000100101100.', ""Let's understand through an example.""]",[],"['In the above code, we want to calculate the binary value of ""A12C"". We first store this value in a character array named as hex[], and then we pass this array to a hextobin() function. The hextobin() will calculate the binary value of the number, it iterates over each element of an array through a while loop, and finds the binary value of each corresponding element through a switch statement.']","['#include<stdio.h>', 'void hextobin(char b[]);', 'void main()', 'char hex[]=""A12C"";', 'hextobin(hex);', 'void hextobin(char hex[])', 'int i=0;', 'while(hex[i])', 'switch(hex[i])', '{', ""case '0':"", 'printf(""0000"");', 'break;', ""case '1':"", 'printf(""0001"");', 'break;', ""case '2':"", 'printf(""0010"");', 'break;', ""case '3':"", 'printf(""0011"");', 'break;', ""case '4':"", 'printf(""0100"");', 'break;', ""case '5':"", 'printf(""0101"");', 'break;', ""case '6':"", 'printf(""0110"");', 'break;', ""case '7':"", 'printf(""0111"");', 'break;', ""case '8':"", 'printf(""1000"");', 'break;', ""case '9':"", 'printf(""1000"");', 'break;', ""case 'A':"", 'printf(""1010"");', 'break;', ""case 'a':"", 'printf(""1010"");', 'break;', ""case 'B':"", 'printf(""1011"");', 'break;', ""case 'b':"", 'printf(""1011"");', 'break;', ""case 'C':"", 'printf(""1100"");', 'break;', ""case 'c':"", 'printf(""1100"");', 'break;', ""case 'D':"", 'printf(""1101"");', 'break;', ""case 'd':"", 'printf(""1101"");', 'break;', ""case 'E':"", 'printf(""1110"");', 'break;', ""case 'e':"", 'printf(""1110"");', 'break;', ""case 'F':"", 'printf(""1111"");', 'break;', ""case 'f':"", 'printf(""1111"");', 'break;', '}', 'i++;']",['1010000100101100'],[],[]
135,['Hexadecimal to Decimal in C'],"['The hexadecimal is also known as base-16, it is a number system that uses the 16 symbols to represent a particular value, and these symbols are from (0-9 and A-F).']","['https://www.javatpoint.com/octal-to-hexadecimal-in-c', 'https://www.javatpoint.com/hexadecimal-to-binary-in-c', 'https://www.javatpoint.com/octal-to-hexadecimal-in-c', 'https://www.javatpoint.com/hexadecimal-to-binary-in-c', 'https://www.javatpoint.com/octal-to-hexadecimal-in-c']","['https://static.javatpoint.com/cpages/images/hexadecimal-to-decimal-in-c.png', 'https://static.javatpoint.com/cpages/images/hexadecimal-to-decimal-in-c2.png']",[],[],[],[],"['Conversion of Hexadecimal to Binary number', 'Let?s understand through an example.', 'If the hexadecimal number is 5A, then its decimal value would be:', 'decimal_value = 5*161 + 10*160\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 = 90', 'Now, we understand the conversion of hexadecimal number into a decimal number diagrammatically:', 'In the above diagram, we consider 2AB as a hexadecimal number and calculated its decimal value.', '2AB (Hexadecimal value) = 2*162 + 10*161, + 11*160\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 = 683 (Decimal value)', 'Let?s understand through the program.']","['The decimal is the number system that represents both the integer and non-integer numbers. This number system is also known as the base-10 system, and it uses 10 symbols from (0-9) to represent a particular value.']","['We know that hexadecimal number contains 16 symbols, i.e., 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F where A,B,C,D,E,F represents (10,11,12,13,14,15) values. We can find the decimal number by extracting the digits from a hexadecimal number, and starting from the right-most digit of the number. Each digit of the hexadecimal number is multiplied with the base 16. We will store the result of this multiplication in a particular variable.', 'In the above program, we find the decimal number of a given hexadecimal number. In the above case, we take input from the user and store its value in the hex variable. After retrieving the input from the user, we calculate the length of the input and store it in the len variable. We have iterated each digit of a hexadecimal number and stores the final result in the decimal_value variable']","['#include <stdio.h>', '#include <math.h>', '#include <string.h>', 'int main()', 'char hex[17];                        // declaration of character array.', 'long long decimal, place;', 'int i = 0, val, len;                  // variables declaration', 'decimal = 0;', '/* Input hexadecimal number from user */', 'printf(""Enter any hexadecimal number: "");', 'gets(hex);', '/* Find the length of total number of hex digit */', 'len = strlen(hex);', 'len--;', '* Iterate over each hex digit', '*/', ""while(hex[i]!='\\0')"", '/* To find the decimal representation of hex[i] */', ""if(hex[i]>='0' && hex[i]<='9')"", '{', 'val = hex[i] - 48;', '}', ""else if(hex[i]>='a' && hex[i]<='f')"", '{', 'val = hex[i] - 97 + 10;', '}', ""else if(hex[i]>='A' && hex[i]<='F')"", '{', 'val = hex[i] - 65 + 10;', '}', 'decimal += val * pow(16, len);']",[],[],[]
136,['Octal to Hexadecimal in C'],['An octal number system is a number system which is having base-8 where base-8 represents the eight digits from 0 to 7.'],"['https://www.javatpoint.com/strong-number-in-c', 'https://www.javatpoint.com/hexadecimal-to-decimal-in-c', 'https://www.javatpoint.com/strong-number-in-c', 'https://www.javatpoint.com/hexadecimal-to-decimal-in-c', 'https://www.javatpoint.com/strong-number-in-c']","['https://static.javatpoint.com/cpages/images/octal-to-hexadecimal-in-c.png', 'https://static.javatpoint.com/cpages/images/octal-to-hexadecimal-in-c2.png']",[],[],"['What is an octal number system?', 'What is a Hexadecimal number system?', 'How to convert an octal number into a hexadecimal number']",[],"[""Let's look at the approach."", 'For example, the octal number is 123.', ""Let's create a simple program which converts the octal into a hexadecimal number."", 'Analysis of the above program']","['A hexadecimal number system is a number system which is having base-16 where base-16 represents the sixteen digits, i.e.,0,1,2,3,4,5,6,7,8,9, A, B, C, D, E, F.', 'We cannot directly convert an octal number system into a hexadecimal number system. First, we need to convert the octal number into a binary number system, and then this binary number system will be converted into a hexadecimal number system.']",[],"['#include <stdio.h>', '#include<string.h>', 'int main()', 'int octaltobinary[]={0,1,10,11,100,101,110,111};', 'char hexadecimal[10];', 'char hex[10];', 'long int binary=0;', 'int octal;', 'int rem=0;', 'int position=1;', 'int len=0;', 'int k=0;', 'printf(""Enter a octal number"");', 'scanf(""%d"",&octal);', 'while(octal!=0)', 'rem=octal%10;', 'binary=octaltobinary[rem]*position+binary;', 'octal=octal/10;', 'position=position*1000;', 'printf(""The binary number is : %ld"",binary);', 'while(binary > 0)', 'rem = binary % 10000;', 'switch(rem)', '{', 'case 0:', 'strcat(hexadecimal, ""0"");', 'break;', 'case 1:', 'strcat(hexadecimal, ""1"");', 'break;', 'case 10:', 'strcat(hexadecimal, ""2"");', 'break;', 'case 11:', 'strcat(hexadecimal, ""3"");', 'break;', 'case 100:', 'strcat(hexadecimal, ""4"");', 'break;', 'case 101:', 'strcat(hexadecimal, ""5"");', 'break;', 'case 110:', 'strcat(hexadecimal, ""6"");', 'break;', 'case 111:', 'strcat(hexadecimal, ""7"");', 'break;', 'case 1000:', 'strcat(hexadecimal, ""8"");', 'break;', 'case 1001:', 'strcat(hexadecimal, ""9"");', 'break;', 'case 1010:', 'strcat(hexadecimal, ""A"");', 'break;', 'case 1011:', 'strcat(hexadecimal, ""B"");', 'break;', 'case 1100:', 'strcat(hexadecimal, ""C"");', 'break;', 'case 1101:', 'strcat(hexadecimal, ""D"");', 'break;', 'case 1110:', 'strcat(hexadecimal, ""E"");', 'break;', 'case 1111:', 'strcat(hexadecimal, ""F"");', 'break;', '}', 'len=len+1;', 'binary /= 10000;', 'for(int i=len-1;i>=0;i--)', 'hex[k]=hexadecimal[i];', 'k++;', ""hex[len]='\\0';"", 'printf(""\\nThe hexadecimal number is :"");', ""for(int i=0; hex[i]!='\\0';i++)"", 'printf(""%c"",hex[i]);', 'return 0;']",[],[],"[""|||Input the octal number.|||An octal number system is converted into a binary number system.|||Extract the 4 bits in a group from the right-side.|||Provide the hexadecimal number to the extracted 4 bits.||||||First, we take the user input, which would be an octal number, and it gets stored in an 'octal' variable.|||After entering the user input, we convert the octal number into binary number. We iterate through the while(octal!=0) loop, which executes till the value of octal is not equal to zero. The final value of a binary number will be stored in a 'binary' variable.|||After calculating the binary number, we will calculate the hexadecimal number. We will iterate through the elements of a binary number by using a while(binary>0) On each iteration, four digits from the right-side of a binary number are extracted and replaced with their corresponding hexadecimal number.|||The hexadecimal[] variable contains the reverse value of the actual hexadecimal number. In order to get the actual hexadecimal number of an octal number, we define a new variable, i.e., hex[]. We will iterate the elements of a hexadecimal[] variable from the last, and stores each element in hex[].|||""]"
137,['Strong number in C'],['A number can be said as a strong number when the sum of the factorial of the individual digits is equal to the number.'],"['https://www.javatpoint.com/star-program-in-c', 'https://www.javatpoint.com/octal-to-hexadecimal-in-c', 'https://www.javatpoint.com/star-program-in-c', 'https://www.javatpoint.com/octal-to-hexadecimal-in-c', 'https://www.javatpoint.com/star-program-in-c']","['https://static.javatpoint.com/cpages/images/strong-number-in-c.png', 'https://static.javatpoint.com/cpages/images/strong-number-in-c2.png', 'https://static.javatpoint.com/cpages/images/strong-number-in-c3.png']",[],[],[],[],"['For example, 145 is a strong number.', ""Let's understand through an example."", 'In the above code, the input data is retrieved from the user, and then the data is checked whether the input data is a strong number or not. ']",[],[],"['#include <stdio.h>', 'int main()', 'int n;', 'int sum=0;', 'printf(""Enter a number"");', 'scanf(""%d"",&n);', 'int k=n;', 'int r;', 'while(k!=0)', 'r=k%10;', 'int f=fact(r);', 'k=k/10;', 'sum=sum+f;', 'if(sum==n)', 'printf(""\\nNumber is a strong"");', 'else', 'printf(""\\nNumber is not a strong"");', 'return 0;', 'int fact(int r)', 'int mul=1;', 'for(int i=1;i<=r;i++)', 'mul=mul*i;', 'return mul;', '#include<stdio.h>', 'int main()', 'int fact=1,sum=0;', 'int n,r;', 'printf(""Enter the \'n\' number"");', 'scanf(""%d"",&n);', 'printf(""\\n Strong numbers are :"");', 'for(int i=1;i<=n;i++)', 'int k=i;', 'while(k!=0)', '{', 'r=k%10;', 'fact=factorial(r);', '', '', 'k=k/10;', 'sum=sum+fact;', '}', 'if(sum==i){', 'printf(""%d, "",i);', '', '}', 'sum=0;', 'return 0;', 'int factorial(int f)', 'int mul=1;', 'for(int i=1; i<=f;i++)', '{', 'mul=mul*i;', '}', 'return mul;', '#include<stdio.h>', 'int main()', 'int fact=1,sum=0;', 'int n1,n2,r;', 'printf(""Enter the first number"");', 'scanf(""%d"",&n1);', 'printf(""\\nEnter the last number"");', 'scanf(""%d"",&n2);', 'printf(""\\nStrong numbers are :"");', 'for(int i=n1;i<=n2;i++)', 'int k=i;', 'while(k!=0)', '{', 'r=k%10;', 'fact=factorial(r);', 'k=k/10;', 'sum=sum+fact;', '}', 'if(sum==i){', 'printf(""%d, "",i);', '}', 'sum=0;', 'return 0;', 'int factorial(int f)', 'int mul=1;', 'for(int i=1; i<=f;i++)', '{', 'mul=mul*i;', '}', 'return mul;']",[],[],['|||Program to check whether the number is strong or not.||||||Program to print the strong numbers from 1 to n.||||||Program to find strong numbers in a given range.|||']
138,['Star Patterns Program in C'],"[""In this topic, we will learn how to create the patterns by using C language. We will create the patterns by using either a '*' star character or some other character. We will create different patterns or a geometrical shape such as triangle, square, etc.""]","['https://www.javatpoint.com/c-interview-questions', 'https://www.javatpoint.com/strong-number-in-c', 'https://www.javatpoint.com/#Square-Star', 'https://www.javatpoint.com/#Hollow-Square-Star', 'https://www.javatpoint.com/#Hollow-Square-Pattern', 'https://www.javatpoint.com/#Rhombus-Star', 'https://www.javatpoint.com/#Hollow-Rhombus-Star', 'https://www.javatpoint.com/#Mirrored-Rhombus-Star', 'https://www.javatpoint.com/#Hollow-Mirrored-Rhombus-Star', 'https://www.javatpoint.com/#Right-Triangle-Star', 'https://www.javatpoint.com/#Hollow-Right-Triangle-Star', 'https://www.javatpoint.com/#Mirrored-Right-Triangle-Star', 'https://www.javatpoint.com/#Hollow-Mirrored-Right-Triangle-Star', 'https://www.javatpoint.com/#Inverted-Right-Triangle-Star', 'https://www.javatpoint.com/#Hollow-Inverted-Right-Triangle-Star', 'https://www.javatpoint.com/#Inverted-Mirrored-Right-Triangle-Star', 'https://www.javatpoint.com/#Hollow-Inverted-Mirrored-Right-Triangle-Star', 'https://www.javatpoint.com/#Pyramid-Star', 'https://www.javatpoint.com/#Hollow-Pyramid', 'https://www.javatpoint.com/#Inverted-Pyramid-Star', 'https://www.javatpoint.com/#Hollow-Pyramid-Star', 'https://www.javatpoint.com/#Half-Diamond-Star', 'https://www.javatpoint.com/#Diamond-Star', 'https://www.javatpoint.com/#Right-Arrow-Star', 'https://www.javatpoint.com/#Left-Arrow-Star', 'https://www.javatpoint.com/#Plus-Star', 'https://www.javatpoint.com/#X-Star', 'https://www.javatpoint.com/c-interview-questions', 'https://www.javatpoint.com/strong-number-in-c', 'https://www.javatpoint.com/c-interview-questions']","['https://static.javatpoint.com/cpages/images/star-program-in-c1.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c2.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c3.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c4.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c5.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c6.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_7.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_8.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_9.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_10.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_11.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_12.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_13.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_14.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_15.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_16.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_17.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_18.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_19.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_20.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_21.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_22.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_23.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_24.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c_25.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c7.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c8.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c9.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c10.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c11.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c12.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c13.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c14.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c15.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c16.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c17.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c18.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c19.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c20.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c21.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c22.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c23.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c24.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c25.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c26.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c27.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c28.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c29.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c30.png', 'https://static.javatpoint.com/cpages/images/star-program-in-c31.png']",[],[],[],[],"['We are going to cover the following patterns. You can view the code of any pattern given below by clicking on the pattern.', 'The code to create the square star pattern is given below:', 'Now, we create the hollow square star pattern. The source code for this pattern is given below:', 'The code for the hollow square star pattern is given below:', 'The code for the rhombus star pattern is given below:', 'The code for the hollow rhombus star pattern is given below:', 'The code for the mirrored rhombus star pattern is given below:', 'The code for the hollow mirrored rhombus star pattern is given below:', 'The code for the right triangle star pattern is given below:', 'The code for the hollow right triangle star pattern is given below:', 'The code for the mirrored right triangle star pattern is given below:', 'The code for the hollow mirrored right triangle star pattern is given below:', 'The code for the inverted right triangle star pattern is given below:', 'The code for the hollow inverted right triangle star pattern is given below:', 'The code for the inverted mirrored right triangle star pattern is given below:', 'The code for the hollow inverted mirrored right triangle star pattern is given below:', 'The code for the pyramid star pattern is given below:', 'The code for the hollow pyramid star pattern is given below:', 'The code for the inverted pyramid is given below:', 'The code for the hollow pyramid star pattern is given below:', 'The code for the half diamond star pattern is given below:', 'The code for the diamond star pattern is given below:', 'The code of the right arrow star pattern is given below:', 'The code for the Left arrow star pattern is given below:', 'The code for the plus star pattern is given below:', 'The code for the X star pattern is given below:']",[],[],"['#include <stdio.h>', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=0;i<n;i++)', 'for(int j=0;j<n;j++)', '{', 'printf(""*"");', '}', 'printf(""\\n"");', 'return 0;', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=n;j++)', '{', 'if(i==1 ||i==n||j==1||j==n)', '{', 'printf(""*"");', '}', 'else', 'printf("" "");', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=n;j++)', '{', 'if(i==1 ||i==n||j==1||j==n-i+1||i==j||j==n)', '{', 'printf(""*"");', '}', 'else', '{', '', 'printf("" "");', '}', '', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=n;i>=1;i--)', 'for(int j=1;j<=i-1;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=n;k++)', '{', 'printf(""*"");', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=n;i>=1;i--)', 'for(int j=1;j<=i-1;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=n;k++)', '{', 'if(i==1 || i==n || k==1 || k==n)', 'printf(""*"");', 'else', 'printf("" "");', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<i;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=n;k++)', '{', 'printf(""*"");', '', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<i;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=n;k++)', '{', 'if(i==1 || i==n || k==1 || k==n)', 'printf(""*"");', 'else', 'printf("" "");', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=i;j++)', '{', 'printf(""* "");', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=i;j++)', '{', 'if(j==1|| i==j || i==n )', '{', 'printf(""*"");', '}', 'else', 'printf("" "");', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m=1;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=n;i>=1;i--)', 'for(int j=1;j<=i-1;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=m;k++)', '{', 'printf(""*"");', '}', 'printf(""\\n"");', 'm++;', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m=1;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=n;i>=1;i--)', 'for(int j=1;j<=i-1;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=m;k++)', '{', 'if(k==1 || k==m || m==n)', 'printf(""*"");', 'else', 'printf("" "");', '}', 'printf(""\\n"");', 'm++;', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m=1;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=n;i>=1;i--)', 'for(int j=1;j<=i;j++)', '{', 'printf(""*"");', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m=1;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=n;i>=1;i--)', 'for(int j=1;j<=i;j++)', '{', 'if(j==1 || j==i || i==n)', 'printf(""*"");', 'else', 'printf("" "");', '}', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'm=n;', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<i;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=m;k++)', '{', 'printf(""*"");', '}', 'm--;', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'm=n;', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<i;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=m;k++)', '{', 'if(i==1 || k==1 || k==m)', 'printf(""*"");', 'else', 'printf("" "");', '}', 'm--;', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'm=n;', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=m-1;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=2*i-1;k++)', '{', 'printf(""*"");', '}', 'm--;', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'm=n;', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=m-1;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=2*i-1;k++)', '{', 'if(k==1 || k==2*i-1 || i==n)', 'printf(""*"");', 'else', 'printf("" "");', '}', 'm--;', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m=1;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=n;i>=1;i--)', 'for(int j=1;j<m;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=2*i-1;k++)', '{', 'printf(""*"");', '}', 'm++;', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m=1;', 'printf(""Enter the number of rows"");', 'scanf(""%d"",&n);', 'for(int i=n;i>=1;i--)', 'for(int j=1;j<m;j++)', '{', 'printf("" "");', '}', 'for(int k=1;k<=2*i-1;k++)', '{', 'if(k==1 || k==2*i-1 || i==n)', 'printf(""*"");', 'else', 'printf("" "");', '}', 'm++;', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'int n,m=1;', 'printf(""Enter the number of columns"");', 'scanf(""%d"",&n);', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=i;j++)', 'printf(""*"");', 'printf(""\\n"");', 'for(int i=n-1;i>=1;i--)', 'for(int j=1;j<=i;j++)', 'printf(""*"");', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main(void) {', 'int n;', 'printf(""Enter the number of rows\\n"");', 'scanf(""%d"",&n);', 'int spaces=n-1;', 'int stars=1;', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=spaces;j++)', 'printf("" "");', 'for(int k=1;k<=stars;k++)', 'printf(""*"");', 'if(spaces>i)', 'spaces=spaces-1;', 'stars=stars+2;', 'if(spaces<i)', 'spaces=spaces+1;', 'stars=stars-2;', 'printf(""\\n"");', 'return 0;}', '#include <stdio.h>', 'int main(void) {', 'int n;', 'printf(""Enter the number of columns"");', 'scanf(""%d"",&n);', 'for(int i=0;i<n;i++)', 'for(int j=0;j<i;j++)', 'printf("" "");', 'for(int k=1;k<=n-i;k++)', 'printf(""*"");', 'printf(""\\n"");', 'for(int i=1;i<n;i++)', 'for(int j=1;j<n-i;j++)', 'printf("" "");', 'for(int k=1;k<=i+1;k++)', 'printf(""*"");', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main(void) {', 'int n;', 'printf(""Enter the number of columns"");', 'scanf(""%d"",&n);', 'for(int i=1;i<=n;i++)', 'for(int j=1;j<=n-i;j++)', 'printf("" "");', 'for(int k=0;k<=n-i;k++)', 'printf(""*"");', 'printf(""\\n"");', 'for(int i=1;i<n;i++)', 'for(int j=1;j<i+1;j++)', 'printf("" "");', 'for(int k=1;k<=i+1;k++)', 'printf(""*"");', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main(void) {', 'int n;', 'printf(""Enter the odd number only"");', 'scanf(""%d"", &n);', 'for(int i=1;i<=n;i++)', 'if(i==((n/2)+1))', 'for(int j=1;j<=n;j++)', '{', 'printf(""+"");', '}', 'else', 'for(int j=1;j<=n/2;j++)', 'printf("" "");', 'printf(""+"");', 'printf(""\\n"");', 'return 0;', '#include <stdio.h>', 'int main(void) {', 'int n,m;', 'printf(""Enter the number"");', 'scanf(""%d"",&n);', 'm=2*n-1;', 'for(int i=1;i<=m;i++)', 'for(int j=1;j<=m;j++)', 'if(i==j || j==(m-i+1))', '{', 'printf(""*"");', '}', 'else', '{', 'printf("" "");', '}', 'printf(""\\n"");', 'return 0;']",[],[],[]
139,['itoa Function in C'],['itoa () function is used to convert int data type to string data type in C language.'],"['https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-programming-language-tutorial']",['https://static.javatpoint.com/cpages/images/itoa-function-in-c.png'],[],[],"['SYNTAX -', 'Return value -']","[""Note: But we have to keep in mind that while we are compiling with gcc, we have to use the '-lm' flag to include the math library.""]","['(void) sprintf(buffer, ""%d"", n);', 'Here, buffer returns character string.', ""When the radix is OCTAL, itoa() formats integer 'n' into an unsigned octal constant."", ""And when the radix is HEX, itoa() formats integer 'n' into unsigned hexadecimal constant."", 'The hexadecimal value will include lower case alphabets.', 'The string pointer will be returned. When we pass a non-valid radix argument, the function will return NULL.', 'A standard-compliant alternative -', 'Algorithm:', 'gcc -o test.out test.c -lm']","['The string we place in the buffer pass must be large enough to hold the output. Since radix values can either be OCTAL(0 - 7), DECIMAL(0 - 9), or HEX(0 - 9, a - f). When the radix is DECIMAL, itoa() produces -']",[],"['char * itoa ( int value, char * str, int base );', 'Step 1: Take a number as argument', 'Step 2: Create an empty string buffer to store result', 'Step 3: Use sprintf() to convert number to string', 'Step 4: End', '#include <stdio.h>', '#include <math.h>', '#include <stdlib.h>', 'char* itoa(int num, char* buffer, int base)', 'int current = 0;', 'if (num == 0) {', ""buffer[current++] = '0';"", ""buffer[current] = '\\0';"", 'return buffer;', 'int num_digits = 0;', 'if (num < 0) {', 'if (base == 10) {', 'num_digits ++;', ""buffer[current] = '-';"", 'current ++;', 'num *= -1;', 'return NULL;', 'num_digits += (int)floor(log(num) / log(base)) + 1;', 'while (current < num_digits)', 'int base_val = (int) pow(base, num_digits-1-current);', 'int num_val = num / base_val;', ""char value = num_val + '0';"", 'buffer[current] = value;', 'current ++;', 'num -= base_val * num_val;', ""buffer[current] = '\\0';"", 'return buffer;', 'int main()', 'int a = 123456;', 'char buffer[256];', 'if (itoa(a, buffer, 10) != NULL) {', 'printf(""Input = %d, base = %d, Buffer = %s\\n"", a, 10, buffer);', 'int b = -2310;', 'if (itoa(b, buffer, 10) != NULL) {', 'printf(""Input = %d, base = %d, Buffer = %s\\n"", b, 10, buffer);', 'int c = 10;', 'if (itoa(c, buffer, 2) != NULL) {', 'printf(""Input = %d, base = %d, Buffer = %s\\n"", c, 2, buffer);', 'return 0;']","['Input = 123456, base = 10, Buffer = 123456', 'Input = -2310, base = 10, Buffer = -2310', 'Input = 10, base = 2, Buffer = 1010']",[],"['|||sprintf(str,""%d"",value) - For conversion to decimal base.|||sprintf(str,""%x"",value) - For conversion to hexadecimal base.|||sprintf(str,""%o"",value) - For conversion to octal base.|||']"
140,['Extra Long Factorials in C'],"['Problem Statement: The factorial of the integer n, written n!, is defined as:']","['https://www.javatpoint.com/leap-year-program-in-c', 'https://www.javatpoint.com/star-program-in-c', 'https://www.javatpoint.com/leap-year-program-in-c', 'https://www.javatpoint.com/star-program-in-c', 'https://www.javatpoint.com/leap-year-program-in-c']",['https://static.javatpoint.com/cpages/images/extra-long-factorials-in-c.jpg'],[],[],[],"[""Note: Factorials of n > 20 can't be stored even in a 64 - bit long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C/C++ to handle huge values.""]","['n! = n x (n-1) x (n-2) x (n-3) x ………. x 3 x 2 x 1', 'Calculate and print the factorial of a given integer.', 'For example, if n = 30 , we calculate 30 x 29 x 28 x ………..x 3 x 2 x 1 and get.', '2 6 5 2 5 2 8 5 9 8 1 2 1 9 1 0 5 8 6 3 6 3 0 8 4 8 0 0 0 0 0 0 0 in total 33 digits.', 'We have started with variable', 'Output of above Code']","['Description of program : The below program can calculate factorial of any number, i.e. factorial of numbers above 20 which is not feasible for an 64 bit computer.']",[],"['#include<stdio.h>', 'int main()', 'int n;', 'printf(""Enter the value for calculating factorial="");', 'scanf(""%d"", &n);', 'int j = 2; // last multiple of factorial of any number goes upto 2', 'int a[1000] = {0};// array of 1000 spaces initialized with 0', 'a[0] = 1;', 'int len = 1;// length starts with one', 'int c = 0, num = 0;', 'while(j <= n) // till j is less than value for which factorial is required', 'c = 0;', 'num = 0;', 'while(c < len)', '{', 'a[c] = a[c] * j;', 'a[c] = a[c] + num;', 'num = a[c] / 10;', 'a[c] = a[c] % 10;', 'c++;', '}', 'while(num != 0)', '{', 'a[len] = num % 10;', 'num = num / 10;', 'len++;', '}', 'j++;', 'len--;', 'printf(""\\n\\nFactorial of %d is below = "", n);', 'while(len >= 0)', 'printf(""%d"", a[len]);', 'len--;', 'return 0;', 'Example to show working of above code for n = 5', 'n = 5, j = 2, a[0] = 1, a[1000] = { 1, 0, 0, ……….0 }', 'len =1, c = 0, num =0', 'while( j < = n) → ( 2 < = 5) becomes True', 'again it initializes c = 0 and num = 0', 'while ( c < len )   → (0 < 1 )  becomes True for 1st iteration', 'a[c] = a[c] * j;    → a[0] = 1 * 2 = 2 → a[1000] = { 2, 0, 0, ….., 0}', 'a[c] = a[c] + num;  → a[0] = 2 + 0 = 2 → a[1000] = { 2, 0, 0, ….., 0}', 'num = a[c] / 10;    → num = 2 / 10 = 0', 'a[c] = a[c] % 10;  → a[0] = 2 % 10 = 2 → a[1000] = { 2, 0, 0, ….., 0}', 'c++; →  c = 1', 'while ( c < len )   → (1 < 1 )  becomes False for 2nd iteration', 'Hence moving next instruction', 'while(num != 0)  → False as num = 0 ( no entry inside loop)', 'j++; → j = 3 ( again moving towards first while loop )', 'while( j < = n) → ( 3 < = 5) becomes True', 'again it initializes c = 0 and num = 0', 'while ( c < len )   → (0 < 1 )  becomes True for 1st iteration', 'a[c] = a[c] * j;    → a[0] = 2 * 3 = 6 → a[1000] = { 6, 0, 0, ….., 0}', 'a[c] = a[c] + num;  → a[0] = 6 + 0 =6  → a[1000] = { 6, 0, 0, ….., 0}', 'num = a[c] / 10;    → num = 6 / 10 = 0', 'a[c] = a[c] % 10;  → a[0] = 6 % 10 = 6 → a[1000] = { 6, 0, 0, ….., 0}', 'c++; →  c = 1', 'while ( c < len )   → (1 < 1 )  becomes False for 2nd iteration', 'Hence moving next instruction', 'while(num != 0)  → False as num = 0 ( no entry inside loop)', 'j++; → j = 4 ( again moving towards first while loop )', 'while( j < = n) → ( 4 < = 5) becomes True', 'again it initializes c = 0 and num = 0', 'while ( c < len ) → (0 < 1 )  becomes True for 1st iteration', 'a[c] = a[c] * j;  → a[0] = 6 * 4 = 24 → a[1000] = { 24, 0, 0, ….., 0}', 'a[c] = a[c] + num;→ a[0] = 24 + 0 = 24→ a[1000] = { 24, 0, 0, ….., 0}', 'num = a[c] / 10;  → num = 24 / 10 = 2', 'a[c] = a[c] % 10; → a[0] = 24 % 10 = 4 → a[1000] = { 4, 0, 0, ….., 0}', 'c++; →  c = 1', 'while ( c < len )   → (1 < 1 )  becomes False for 2nd iteration', 'Hence moving next instruction', 'while(num != 0) → becomes True as num = 2 which is not zero', '', 'a[len] = num % 10;  → a[1] = 2 % 10 = 2 → a[1000] = { 4, 2, 0, …, 0}', 'num = num / 10;     → num = 2 / 10 = 0', 'len++;              → len = 2 ( clearly len is now 2 )', 'j++; → j = 5 ( again moving towards first while loop )', 'while( j < = n) → ( 5 < = 5) becomes True', 'again it initializes c = 0 and num = 0', 'while ( c < len ) → (0 < 2 )  becomes True for 1st iteration', 'a[c] = a[c] * j;  → a[0] = 4 * 5 = 20 → a[1000] = {20, 2, 0, …, 0}', 'a[c] = a[c] + num;→ a[0] = 20 + 0 = 20→ a[1000] = {20, 2, 0, …, 0}', 'num = a[c] / 10;  → num = 20 / 10 = 2', 'a[c] = a[c] % 10; → a[0] = 20 % 10 = 0→ a[1000] ={0, 2, 0, …, 0}', 'c++; →  c = 1', 'while ( c < len ) → (1 < 2 )  becomes True for 2nd iteration', 'a[c] = a[c] * j;  → a[1] = 2 * 5 = 10 → a[1000] = {0, 10, 0, …, 0}', 'a[c] = a[c] + num;→ a[1] = 1 + 2 = 12→ a[1000] = {0, 12, 0, …, 0}', 'num = a[c] / 10;  → num = 12 / 10 = 1', 'a[c] = a[c] % 10; → a[1] = 12 % 10 = 2→ a[1000] ={0, 2, 0, …, 0}', 'c++; →  c = 2', 'while ( c < len )   → (2 < 2 )  becomes False for 3rd iteration', 'Hence moving next instruction', 'while(num != 0) → becomes True as num = 1 which is not zero', '', 'a[len] = num % 10;  → a[2] = 1 % 10 = 1 → a[1000] = { 0, 2, 1, …, 0}', 'num = num / 10;     → num = 1 / 10 = 0', 'len++;              → len = 3 ( clearly len is now 3 )', 'j++; → j = 6 ( again moving towards first while loop )', 'while( j < = n) → ( 6 < = 5) becomes False, as this is the top most loop, on failure of condition we move out of while body.', 'Moving next instruction', 'len--;  len = 2( as in array { 0, 2, 1, …, 0 } we have value at index 0, 1 and 2 which is 120( factorial of 5)', 'while(len >= 0)       → ( 2 >= 0) → True', 'printf(""%d"", a[len]); → print(a[2]) → 1', 'len--;                → len = 1', 'while(len >= 0)       → ( 1 >= 0) → True', 'printf(""%d"", a[len]); → print(a[1]) → 2', 'len--;                → len = 0', 'while(len >= 0)       → ( 0 >= 0) → True', 'printf(""%d"", a[len]); → print(a[0]) → 0', 'len--;                → len = -1', 'while(len >= 0)       → ( -1 >= 0) → False, and we exit from final while loop,', 'so the final value is 120 ( factorial of 5)', 'As we took array size 1000, i.e. a[1000] we can find out factorial of any number whose resultant values are less than or equal to a[1000], as we have seen that factorial of 30! = 2 6 5 2 5 2 8 5 9 8 1 2 1 9 1 0 5 8 6 3 6 3 0 8 4 8 0 0 0 0 0 0 0 in total 33 digits which became possible only because of array size.']",[],[],[]
141,['Leap year program in C'],"['First of all, it is important to know what is leap year? Generally, a year has 365 days in a year, but a leap year has 366 days which comes after four year. Below are some points related to leap year:']","['https://www.javatpoint.com/perfect-number-program-in-c', 'https://www.javatpoint.com/extra-long-factorials-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/perfect-number-program-in-c', 'https://www.javatpoint.com/extra-long-factorials-in-c', 'https://www.javatpoint.com/perfect-number-program-in-c']",[],[],[],['How to find leap year using C programming?'],[],"['Below conditions are used to check that year is a leap year or not.', 'With the help of a C program, we will make easy to find a leap year. ', 'See the below example in which we check a leap year by taking input from user:', 'See the below outputs for different input values:', 'In this below example, we will find the leap years between the range of two years like 2000 to 2020. See the below example:', 'See the below output:']","['By putting these conditions in your code, you can check year is a leap year or not. If the above conditions are satisfied, the year will be leap year. These conditions can be put with if-else or with && (and) and || (Or).']",[],"['#include<stdio.h>', '#include<conio.h>', 'void main() {', 'int year;', 'printf(""Enter a year: "");', 'scanf(""%d"", &year);', 'if(((year%4==0) && ((year%400==0) || (year%100!==0))', 'printf(""%d is a leap year"", &year);', '} else {', 'printf(""%d is not a leap year"", &year);', 'getch();', '#include<stdio.h>', '#include<conio.h>', 'void main() {', 'int startYear, endyear, i;', 'printf (""Enter a year to start searching the leap years: "");', 'scanf (""%d"", &startYear);', 'printf (""Enter a year to end the search of leap years: "");', 'scanf (""%d"", &endyear);', 'printf (""Leap Years between %d to %d are: \\n"", &startYear, &endYear);', 'for (i= startYear; i<= endYear, i++)', 'if(((i%4==0) && ((i%400==0) || (i%100!==0))', '{', 'printf(""%d \\n"", &i);', '}', 'getch();']","['Enter a year: 2004', '2004 is a leap year', 'Enter a year: 1700', '1700 is not a leap year', 'Enter a year to start searching the leap years: 1950', 'Enter a year to end the search of leap years: 2020', 'Leap years between 1990 to 2020 are:', '1992', '1996', '2000', '2004', '2008', '2012', '2016', '2020']",[],"['|||A leap year is a year, which is different than a normal year having 366 days instead of 365.|||A leap year comes once in four years, in which February month has 29 days. With this additional day in February, a year becomes a Leap year.|||Some leap years examples are - 1600, 1988, 1992, 1996, and 2000.|||Although 1700, 1800, and 1900 are century years, not leap years.|||&&&|||Year must be divisible by 4|||Year is divisible by 400 and not divisible by 100.|||']"
142,['Perfect Number Program in C'],"['In mathematics, a perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself.']","['https://www.javatpoint.com/variables-vs-constants-in-c', 'https://www.javatpoint.com/leap-year-program-in-c', 'https://www.javatpoint.com/variables-vs-constants-in-c', 'https://www.javatpoint.com/leap-year-program-in-c', 'https://www.javatpoint.com/variables-vs-constants-in-c']","['https://static.javatpoint.com/cpages/images/perfect-number-program-in-c.png', 'https://static.javatpoint.com/cpages/images/perfect-number-program-in-c2.png', 'https://static.javatpoint.com/cpages/images/perfect-number-program-in-c3.png']",[],"['Perfect Number', 'Using for Loop', 'Using while Loop']",[],[],"['There are two ways to find the perfect number:', 'Write a C program that accepts an input from the user and checks the given number is a perfect or not.', 'Step 1: i = 1, rem = num % i, => 28 % 1 = 0. Here rem = 0.', 'Step 2: rem == 0, condition true.', 'Step 3: sum = 0 + i, sum = 0 + 1 => 1', '// i is incremented by 1', 'Step 4: i = 2, rem = num % i, => 28 % 2 = 0. Here rem != 0, Condition is true;', 'Sum = 1 + i => 1 +2 = 3', 'Step 5: i = 3, rem = num % i, => 28 % 3 = 1. Here rem = 0, Condition is false;', 'Step 6: i = 4, rem = num % i, => 28 % 4 = 0. Here rem == 0, Condition is true;', 'Sum = 1 + i => 3 + 4 = 7', 'Similarly, check all condition;', 'Step 7: Sum == num, 28 == 28, Print the message ""Entered number is a Perfect Number""', ""Example 2: Let's create a C Program to find the perfect number using a while loop."", 'Example 3: Find the perfect number between two numbers through a C program. ']","['In the above output, the loop condition is validated at each iteration and counter i is incremented by 1. Inside the loop, various operations are performed such as:']","['For example, 6 is a positive number that is completely divisible by 1, 2, and 3. We know that the number is also divisible by itself but we will include it in the addition of divisors. When we add these divisors (1 + 2 + 3 = 6), it produces 6, which is equal to the number that we have considered. So, we can say that 6 is a perfect number.']","['/*C program to check whether the given number is the Perfect number*/', '#include<stdio.h>', '#include<conio.h>', 'void main()', 'int num, rem, sum = 0, i;', 'printf(""Enter a number\\n"");', 'scanf(""%d"", #);', 'for(i = 1; i < num; i++)', '{', 'rem = num % i;', 'if (rem == 0)', '{', 'sum = sum + i;', '}', '}', 'if (sum == num)', 'printf("" %d is a Perfect Number"");', 'else', 'printf(""\\n %d is not a Perfect Number"");', 'getch();', '/*Create a C Program to find the perfect number using while loop*/', '#include<stdio.h>', '#include<conio.h>', 'void main()', 'int i = 1, num, Sum = 0;', 'printf("" Enter any number to check Perfect Number \\n"");', 'scanf(""%d"", #);', 'while(i < num )', '{', 'if(num % i == 0)', 'Sum = Sum + i;', 'i++;', '}', 'if(Sum == num)', 'printf(""\\n %d is Perfect Number"", num);', 'else', 'printf(""\\n %d is not a Perfect Number"", num);', 'getch();', '#include<stdio.h>', '#include<conio.h>', 'void main()', 'int num, Sum = 0, i, Max, Min;', 'printf(""Enter the minimum and the maximum value\\n"");', 'scanf(""%d %d"", &Min, &Max);', 'printf(""\\n Perfect Number between %d and %d are\\n "", Min, Max);', 'for(num = Min; num <= Max; num++)', '{', 'for(i = 1, Sum = 0; i < num; i++)', '{', 'if(num %i == 0)', 'Sum = Sum + i;', '}', 'if(Sum == num)', 'printf(""%d \\t"", num);', '}', 'getch();']",[],[],['|||Using for Loop|||Using while Loop|||']
143,['Difference Between Variables and Constants'],"[""A variable is like a container containing the values or data of a particular data type that helps to execute the program. The value of a variable can change depending on the conditions or information given at the program's run time. A variable can be defined in both ways, like the uppercase and lowercase letters, digits and the underscores. A variable can store the value of the different data types like integer, float, character, enum.""]","['https://www.javatpoint.com/round-robin-program-in-c', 'https://www.javatpoint.com/perfect-number-program-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programs', 'https://www.javatpoint.com/round-robin-program-in-c', 'https://www.javatpoint.com/perfect-number-program-in-c', 'https://www.javatpoint.com/round-robin-program-in-c']","['https://static.javatpoint.com/cpages/images/variables-vs-constants.png', 'https://static.javatpoint.com/cpages/images/variables-vs-constants2.png']",[],"['What is a variable?', 'Constants']","['Declaration of Variables', 'Initialization of Variables', 'Difference between Variables and Constant in C Program']","['Note: ""A"" and \'A\' are different; the first one is a string constant consisting of character A and \\0. While the second \'A\' represents is a character constant whose integer value is 65.']","['Rules for defining the variable name in C programming language:', 'It is simple to declare the variables in the C program.', 'It is the simple initialization of variable in C program:', ""Example 1: Let's create a program to use the #define pre-processor in C constants."", 'Example 2: Write create a program to display the use of const keyword in C.']",[],"['A constant is a fixed value whose value cannot be changed during program\'s execution or once the value is defined. It is also known as literal. For example, 5, 20, \'a\', \'Radius\', 5.2, ""Welcome back"", etc. A constant can be defined in two ways, like #define pre-processor and by const keyword. The constants can be different data types, such as integer constants, floating constants, character constants, string constants and enumeration constants. Let\'s understand briefly about them:']","['Datatype variable_name;', 'Datatype variable_name1, variable_name2, vriable_name3;', 'int a, b, d;', 'int _c;', 'char letter;', 'float z ;', 'har str[] = ""welcome"";', 'Datatype variable_name;  // declaration of variable', 'Variable_name = 10;      // define value;', 'Declaration and initialization of variable:', 'Datatype variable_name = value;', 'int a = 10;', 'float x = 5.5;', ""char letter = 'A';"", 'int z = 1, a = 5, c = 2;', '/* create a program to display the use of #define processor in C.', '#include<stdio.h>', '#include<conio.h>', '#define PI 3.14', 'void main()', 'int radius, area;', 'printf("" Please enter the radius of circle\\n"");', 'scanf(""%d"", &radius);', 'area = PI * radius * radius;', 'printf("" Area of circle is : %d"", area);', 'getch();', '/* create a program to display the use of const keyword in C. */', '#include<stdio.h>', '#include<conio.h>', 'void main()', 'const int Len = 5;', 'const int Width = 5;', 'int area;', 'area = Len * Width;', 'printf("" Ares of Rectangle is : %d"", area);', 'getch();']",[],"[""Variables|||Constants&&&It is a variable that stores data type value in a program.|||It is similar to a variable and cannot be changed during program execution.&&&It is a variable that can be changed after defining the variable in a program|||It is a fixed variable that cannot be changed after defining the variable in a program.&&&The value of a variable can change depending on the conditions.|||In constants, the value cannot be changed.&&&Typically, it uses int, float, char, string, double, etc. data types in a program.|||It can be express in two ways: #define pre-processor and the const keyword.&&&Example: int a = 5; float radius = 5.2; char 'A';|||Example: const int Len = 5;|||#define PI 3.14""]","['|||The variables are case sensitive.|||The variable name must start with an alphabet letter or underscore.|||It includes the letter, digits and underscore.|||There should not be a white space in a variable name.|||The name of a variable should not be any reserved keywords like int, float, str, char, etc.||||||Integer constant|||An integer constant is a whole number and can be large without including any decimal points. For example, 0, 1, 2, 123, 5767, 05, 0X23, 0xFFF, etc.|||Float constant|||The float constants are the part of an integer constant that containing a decimal point, fractional form and exponential form.|||Here are some example of floating point constants:|||0.5, 35.05, 2.3e6, 3.52f or 3.52F, PI = 3.14, etc.|||Character Constants|||It is a single character constant enclosed within a single quotation mark (like \'a\', \'A\'), called a character constants. There are some valid constants as: \'g\', \'D\', \' \', \'#\'.|||String Constant|||It is the character set of string constants that are enclosed in a double quote. The character may be letters, numbers, special symbols and some blank space. Furthermore, a string constant contains zero, one or more continuous character in double quotation marks. For example, ""Hello Friends"", ""Computer"", ""5987"", "" "" , ""A"".|||']"
144,['Round Robin Program in C with Output'],"['A round-robin is a CPU scheduling algorithm that shares equal portions of resources in circular orders to each process and handles all processes without prioritization. In the round-robin, each process gets a fixed time interval of the slice to utilize the resources or execute its task called time quantum or time slice. Some of the round-robin processes are pre-empted if it executed in a given time slot, while the rest of the processes go back to the ready queue and wait to run in a circular order with the scheduled time slot until they complete their task. It removes the starvation for each process to achieve CPU scheduling by proper partitioning of the CPU.']","['https://www.javatpoint.com/c-program-to-find-the-roots-of-quadratic-equation', 'https://www.javatpoint.com/variables-vs-constants-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/cpu-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/central-processing-unit', 'https://www.javatpoint.com/https://www.javatpoint.com/tat-full-form', 'https://www.javatpoint.com/c-program-to-find-the-roots-of-quadratic-equation', 'https://www.javatpoint.com/variables-vs-constants-in-c', 'https://www.javatpoint.com/c-program-to-find-the-roots-of-quadratic-equation']","['https://static.javatpoint.com/cpages/images/round-robin-program-in-c.png', 'https://static.javatpoint.com/cpages/images/round-robin-program-in-c2.png', 'https://static.javatpoint.com/cpages/images/round-robin-program-in-c3.png']",[],[],"['Round Robin CPU Scheduling Algorithm', 'Characteristics of Round Robin', 'Advantages', 'Disadvantage', 'Round Robin CPU Scheduling Example:', 'Round Robin CPU Scheduling example with sequential arrival time', 'Write a program of round robin CPU scheduling in C language.']",[],"['Step 5: Similarly, we repeat all the steps to execute the process until the work has finished.', 'Now we have to create the ready queue and the Gantt chart for Round Robin CPU Scheduler.', 'Ready queue: P1, P3, P1, P2, P4, P3, P5, P1, P3, P5', 'Here is the Gantt chart:', 'Step 4: Here, P4 has executed for time slot 3 units, and its task is completed because BT (Burst Time) is 2. Hence it will not go to the ready queue.', 'Step 5: After that, process P3 is executed from the ready queue for time slot 3 and then process P5 arrives for time slot 3.', 'Step 6: Meanwhile, process P5 is executed, process P1 and P3 have to wait in the ready queue.', 'Step 8: Now, the process P3 is executed for time slot 1 as it requires only 1 BT to complete its tasks.', 'Step 9: The final process P5 is executed for time slot 2 because it requires only 2 BT to complete its tasks.', 'The following are the important terms to find the Completion time, Turn Around Time (TAT), Response Time (RT) and Waiting Time (WT).', 'Completion time for process P1 = 22, P2 = 11, P3 = 23, P4 = 14 and P5 = 25.', 'Average Waiting Time = (14 + 4 + 15 + 5 + 12)/5 = 50/5 = 10', 'Average Turn Around Time = (22+6+22+8+17)/5= 75/5 = 15', 'Here is the Gantt chart:', 'Step 6: After the complete execution of process P3, now process P4 executes for the remaining time slot, which is 5, and the process is finished.', 'Now we find the completion, Turn around time, waiting time and the average TAT and waiting time.', 'The completion time of P1 is: 25\nThe completion time of P2 is: 11\nThe completion time of P3 is: 29\nThe completion time of P4 is: 34', 'Process Waiting Time:', 'P1 = 25-8 =17\nP2 = 10-5 =5\nP3 = 27-10= 17\nP4 = 31-11=20\nAverage Waiting Time is: (17+5+17+20)/4 = 59/4 = 14.75']","['Step 1: Organize all processes according to their arrival time in the ready queue. The queue structure of the ready queue is based on the FIFO structure to execute all CPU processes.', 'Step 2: Now, we push the first process from the ready queue to execute its task for a fixed time, allocated by each process that arrives in the queue.', ""Step 4: Similarly, the scheduler selects another process from the ready queue to execute its tasks. When a process finishes its task within time slots, the process will not go for further execution because the process's burst time is finished."", ""Let's understand the concepts of Round Robin with an example. Suppose we have five processes P1, P2, P3, P4 and P5. The arrival and burst time of each process are mentioned in the following table, as shown below. The time quantum is three units."", 'Step 1: At time 0, process P1 enters the ready queue and starts its execution for the defined time slot 3. During 3 units of the time slice, another process, P3, arrives in the ready queue because its arrival time is 1.', 'Step 2: Now, process P3 starts its execution with a time slot of 3 units while process P1 has to wait. After execution of process P3, process P1 again resumes its execution for time slot 3.', 'Step 3: During the execution of process P1, two more processes P2 and P4, arrive in the ready queue to begin their execution. Since process P2 has come first, it will be executed for time quantum 2 units after that P4 is executed.', 'Step 7: Now process P1 is fetched from the ready queue and starts their execution for time slot 2 as it requires only 2 BT to finish its tasks. Hence it will not go to the ready queue for further execution.', 'Waiting Time for P1 = Turn Around Time (TAT) - Burst Time (BT)\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 22 - 8 = 14\nWaiting Time for P2 = 6 - 2 = 4\nWaiting Time for P3 = 22 - 7 = 15\nWaiting Time for P4 = 8 - 3 = 5\nWaiting Time for P5 = 17 - 5 = 12', 'Step 2: Now, process P2 starts their execution for time slot 5 units because the Burst Time (BT) is 5, and it does not go to the ready queue for further execution.', ""Step 3: After that process, P3 will start its execution, which has 10 Burst time, but the time quantum is 6 units. Therefore, it executes its tasks for a defined time limit and is added to the ready queue's end."", 'Step 4: After that, the process P4 starts their execution, which has burst time 11, but the time quantum is 6 units. It executes its tasks for only 6 seconds and then adds to the end of the ready queue.', 'Turn Around Time: Completion Time (CT) - Arrival Time (AT)\nFor process P1: 25 - 0 = 25\nFor process P2: 11 -1 = 10\nFor process P3: 29 - 2 = 27\nFor process P4: 34 - 3 = 31\nAverage Turn Around Time is: (25+10+27+31)/4 = 23.25']","['Step 3: If the process cannot complete their task within defined time interval or slots because it is stopped by another process that pushes from the ready queue to execute their task due to arrival time of the next process is reached. Therefore, CPU saved the previous state of the process, which helps to resume from the point where it is interrupted. (If the burst time of the process is left, push the process end of the ready queue).', 'Turn Around Time for P1 = Completion Time (CT) - Arrival Time (AT)\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 22 - 0 = 22\nTurn Around Time for P2 = 11 - 5 = 6\nTurn Around Time for P3 = 23 - 1 = 22\nTurn Around Time for P4 = 14 - 6 = 8\nTurn Around Time for P5 = 25 - 8 = 17', ""Let's understand another example of Round Robin with sequential arrival time. Here we have four processes P1, P2, P3, and P4. The arrival and burst time of each process are mentioned in the following table, as shown below. The time quantum is 6 units."", 'Step 1: At time 0, process P1 arrives in the ready queue and executes its tasks for time quantum 6 units. During 6 units of the time slice, another process P2, P3 and P4 arrive in the ready queue. After that, process P1 will return to the end of the ready queue and await their execution.', 'Step 5: After the execution of P4, now P1 will start its execution again for 2 units or second, and the process P1 terminate or end. Similarly, the complete execution of process P1, then P3, starts its remaining execution for Burst Time 4, and the process is completed.']","['#include<stdio.h>', '#include<conio.h>', 'void main()', 'int i, NOP, sum=0,count=0, y, quant, wt=0, tat=0, at[10], bt[10], temp[10];', 'float avg_wt, avg_tat;', 'printf("" Total number of process in the system: "");', 'scanf(""%d"", &NOP);', 'y = NOP; // Assign the number of process to variable y', 'for(i=0; i<NOP; i++)', 'printf(""\\n Enter the Arrival and Burst time of the Process[%d]\\n"", i+1);', 'printf("" Arrival time is: \\t"");  // Accept arrival time', 'scanf(""%d"", &at[i]);', 'printf("" \\nBurst time is: \\t""); // Accept the Burst time', 'scanf(""%d"", &bt[i]);', 'temp[i] = bt[i]; // store the burst time in temp array', 'printf(""Enter the Time Quantum for the process: \\t"");', 'scanf(""%d"", &quant);', 'printf(""\\n Process No \\t\\t Burst Time \\t\\t TAT \\t\\t Waiting Time "");', 'for(sum=0, i = 0; y!=0; )', 'if(temp[i] <= quant && temp[i] > 0) // define the conditions', 'sum = sum + temp[i];', 'temp[i] = 0;', 'count=1;', 'else if(temp[i] > 0)', 'temp[i] = temp[i] - quant;', 'sum = sum + quant;', 'if(temp[i]==0 && count==1)', 'y--; //decrement the process no.', 'printf(""\\nProcess No[%d] \\t\\t %d\\t\\t\\t\\t %d\\t\\t\\t %d"", i+1, bt[i], sum-at[i], sum-at[i]-bt[i]);', 'wt = wt+sum-at[i]-bt[i];', 'tat = tat+sum-at[i];', 'count =0;', 'if(i==NOP-1)', 'else if(at[i+1]<=sum)', 'avg_wt = wt * 1.0/NOP;', 'avg_tat = tat * 1.0/NOP;', 'printf(""\\n Average Turn Around Time: \\t%f"", avg_wt);', 'printf(""\\n Average Waiting Time: \\t%f"", avg_tat);', 'getch();']",[],"['Process|||Arrival Time (AT)|||Burst Time (BT)&&&P1|||0|||8&&&P2|||5|||2&&&P3|||1|||7&&&P4|||6|||3&&&P5|||8|||5', 'Process|||Arrival Time|||Burst Time|||Completion Time|||Turn Around Time|||Waiting Time|||Response Time&&&P1|||0|||8|||22|||22|||14|||0&&&P2|||5|||2|||11|||6|||4|||4&&&P3|||1|||7|||23|||22|||15|||2&&&P4|||6|||3|||14|||8|||5|||5&&&P5|||8|||5|||25|||17|||12|||9', 'Process|||Arrival Time|||Burst Time&&&P1|||0|||8&&&P2|||1|||5&&&P3|||2|||10&&&P4|||3|||11', 'Process|||Arrival Time|||Burst Time|||Completion Time|||Turn Around Time|||Waiting Time&&&P1|||0|||8|||25|||25|||17&&&P2|||1|||5|||11|||10|||5&&&P3|||2|||10|||29|||27|||17&&&P4|||3|||11|||34|||31|||20']","[""|||It is a pre-emptive algorithm.|||It shares an equal time interval between all processes to complete their task.|||It is a starvation free CPU scheduling algorithm. Hence it is known as the fairest and simple algorithm.||||||It does not face any starvation issues or convoy effect.|||Each process gets equal priority to the fair allocation of CPU.|||It is easy to implement the CPU Scheduling algorithm.|||Each new process is added to the end of the ready queue as the next process's arrival time is reached.|||Each process is executed in circular order that shares a fixed time slot or quantum.|||Every process gets an opportunity in the round-robin scheduling algorithm to reschedule after a given quantum period.||||||If the time quantum is lower, it takes more time on context switching between the processes.|||It does not provide any special priority to execute the most important process.|||The waiting time of a large process is higher due to the short time slot.|||The performance of the algorithm depends on the time quantum.|||The response time of the process is higher due to large slices to time quantum.|||Getting a correct time slot or quantum is quite difficult for all processes in the round-robin algorithm.||||||Completion Time: It defines the time when processes complete their execution.|||Turn Around Time: It defines the time difference between the completion time (CT) and the arrival time (AT).|||Turn Around Time (TAT) = Completion Time (CT) - Arrival Time (AT)|||Waiting Time: It defines the total time between requesting action and acquiring the resource.|||Waiting Time (WT) = Turn Around Time (TAT) - Burst Time (BT)|||Response Time: It is the time that defines at which time the system response to a process.|||""]"
145,['C Program to find the roots of quadratic equation'],"[""Quadratic equations are the polynomial equation with degree 2. It is represented as ax2 + bx +c = 0, where a, b and c are the coefficient variable of the equation. The universal rule of quadratic equation defines that the value of 'a' cannot be zero, and the value of x is used to find the roots of the quadratic equation (a, b). A quadratic equation's roots are defined in three ways: real and distinct, real and equal, and real and imaginary.""]","['https://www.javatpoint.com/type-casting-vs-type-conversion', 'https://www.javatpoint.com/round-robin-program-in-c', 'https://www.javatpoint.com/type-casting-vs-type-conversion', 'https://www.javatpoint.com/round-robin-program-in-c', 'https://www.javatpoint.com/type-casting-vs-type-conversion']","['https://static.javatpoint.com/cpages/images/c-program-to-find-the-roots-of-quadratic-equation.png', 'https://static.javatpoint.com/cpages/images/c-program-to-find-the-roots-of-quadratic-equation2.png', 'https://static.javatpoint.com/cpages/images/c-program-to-find-the-roots-of-quadratic-equation3.png']",[],['Nature of the roots'],"['Steps to find the square roots of the quadratic equation', 'Pseudo Code of the Quadratic Equation']",[],"['The nature of the roots depends on the Discriminant (D) where D is.', ""Let's implements the above steps in a C program to find the roots of the quadratic equation."", ""Let's create another C program in which we have used function.""]",[],[],"['/* C Program to Find the Roots of the Quadratic Equation */', '#include<stdio.h>', '#include<math.h>  // it is used for math calculation', '#include<conio.h>', 'void main()', 'float x, y, z, det, root1, root2, real, img;', 'printf(""\\n Enter the value of coefficient x, y and z: \\n "");', 'scanf(""%f %f %f"", &x, &y, &z);', 'det = y * y - 4 * x * z;', 'if (det > 0)', 'root1 = (-y + sqrt(det)) / (2 * x);', 'root2 = (-y + sqrt(det)) / (2 * x);', 'printf(""\\n Value of root1 = %.2f and value of root2 = %.2f"", root1, root2);', 'else if (det == 0)', 'root1 = root2 = -y / (2 * x); // both roots are equal;', 'printf(""\\n Value of root1 = %.2f and Value of root2 = %.2f"", root1, root2);', 'else {', 'real = -y / (2 * x);', 'img = sqrt(-det) / (2 * x);', 'printf(""\\n value of root1 = %.2f + %.2fi and value of root2 = %.2f - %.2fi "", real, img, real, img);', 'getch();', '#include<stdio.h>', '#include<conio.h>', '#include<stdlib.h>', '#include<math.h>', 'void R_Quadratic( int x, int y, int z)', 'if (x == 0) // Checks the vakue of x, if x = 0, the equation is not quadratic equation.', 'printf("" The value of x cannot be zero"");', 'return;', 'int det = y * y - 4 * x * z;', 'double sqrt_det = sqrt(abs (det));', 'if (det > 0)', 'printf(""\\n Both roots are real and different \\n "");', 'printf(""%.2f\\n %.2f"", (double) (-y + sqrt_det) / (2 * x), (double) (-y - sqrt_det) / (2 * x));', 'else if (det == 0)', 'printf(""\\n Both roots are real and same "");', 'printf(""%.2f"", -(double)y / (2 * x));', 'printf(""\\n Both roots are complex"");', 'printf(""\\n %.2f + %.2fi \\n%.2f - %.2fi"", -(double)y / (2 * x), sqrt_det, -(double)y / (2 * x), sqrt_det);', 'void main()', 'int x, y, z; // declare variables x, y and z', 'printf(""\\n Enter the value of coefficient x, y and z: "");', 'scanf(""%d %d %d"", &x, &y, &z);', 'R_Quadratic(x, y, z);  // call function R_Quadratic()', 'getch();']",[],[],"['|||If D > 0, the roots are real and distinct (unequal)|||If D = 0, the roots are real and equal.|||If D < 0, the roots are real and imaginary.||||||Initialize all the variables used in the quadratic equation.|||Take inputs of all coefficient variables x, y and z from the user.|||And then, find the discriminant of the quadratic equation using the formula:|||Discriminant = (y * y) - (4 * x *z).|||Calculate the roots based on the nature of the discriminant of the quadratic equation.|||If discriminant > 0, then|||Root1 = (-y + sqrt(det)) / (2 * x)|||Root2 = (-y + sqrt(det)) / (2 * x)|||Print the roots are real and distinct.|||Else if (discriminant = 0) then,|||Root1 = Root2 = -y / (2 * x).|||Print both roots are real and equal.|||Else (discriminant < 0), the roots are distinct complex where,|||Real part of the root is: Root1 = Root2 = -y / (2 * x) or real = -y / (2 * x).|||Imaginary part of the root is: sqrt( -discriminant) / (2 * x).|||Print both roots are imaginary, where first root is (r + i) img and second root is (r - i) img.|||Exit or terminate the program.||||||Start|||Input the coefficient variable, x, y and z.|||D <- sqrt (y * y - 4 * x * z).|||R1 <- (-y + D) / ( 2 * x).|||R2 <- (-y - D) / (2 * x).|||Print the roots R1 and R2.|||Stop|||']"
146,['Difference Between Type Casting and Type Conversion'],"[""The two terms type casting and the type conversion are used in a program to convert one data type to another data type. The conversion of data type is possible only by the compiler when they are compatible with each other. Let's discuss the difference between type casting and type conversion in any programming language.""]","['https://www.javatpoint.com/how-to-run-a-c-program-in-visual-studio-code', 'https://www.javatpoint.com/c-program-to-find-the-roots-of-quadratic-equation', 'https://www.javatpoint.com/how-to-run-a-c-program-in-visual-studio-code', 'https://www.javatpoint.com/c-program-to-find-the-roots-of-quadratic-equation', 'https://www.javatpoint.com/how-to-run-a-c-program-in-visual-studio-code']","['https://static.javatpoint.com/cpages/images/type-casting-vs-type-conversion.png', 'https://static.javatpoint.com/cpages/images/type-casting-vs-type-conversion2.png', 'https://static.javatpoint.com/cpages/images/type-casting-vs-type-conversion3.png', 'https://static.javatpoint.com/cpages/images/type-casting-vs-type-conversion4.png']",[],[],"['What is a type casting?', 'What is type conversion?', 'Difference Between Type Casting and Type Conversion']",[],"[""Let's understand the type casting through a C program."", 'AreaOfRectangle.c', ""Let's understand the type conversion with an example."", 'In the above example, the int data type is converted into the float, which has a larger size than int, and hence it widens the source data type.', ""Let's understand type conversion through a C program.""]","[""Target_datatype: It is the data type in which we want to convert the destination data type. The variable defines a value that is to be converted in the target_data type. Let's understand the concept of type casting with an example.""]","['When a data type is converted into another data type by a programmer or user while writing a program code of any programming language, the mechanism is known as type casting. The programmer manually uses it to convert one data type into another. It is used if we want to change the target data type to another data type. Remember that the destination data type must be smaller than the source data type. Hence it is also called a narrowing conversion.', 'Suppose, we want to convert the float data type into int data type. Here, the target data type is smaller than the source data because the size of int is 2 bytes, and the size of the float data type is 4 bytes. And when we change it, the value of the float variable is truncated and convert into an integer variable. Casting can be done with a compatible and non-compatible data type.', 'If a data type is automatically converted into another data type at compile time is known as type conversion. The conversion is performed by the compiler if both data types are compatible with each other. Remember that the destination data type should not be smaller than the source type. It is also known as widening conversion of the data type.', 'Suppose, we have an int data type and want to convert it into a float data type. These are data types compatible with each other because their types are numeric, and the size of int is 2 bytes which is smaller than float data type. Hence, the compiler automatically converts the data types without losing or truncating the values.']","['Destination_datatype = (target_datatype) variable;', '(data_type) it is known as casting operator', 'float b = 3.0;', 'int a = (int) b; // converting a float value into integer', '#include<stdio.h>', '#include<conio.h>', 'void main()', 'printf(""\\n Welcome to Javatpoint tutorials "");', 'float x = 3.5, y = 4.5;  // the size of float variable is 4 byte.', 'int area; // the size of the int variable is 2 bytes.', 'area = (int) x * y; // after conversion the product converts into integer', 'printf(""\\n Area of a Rectangle is : %d"", area);', 'printf(""\\n Here, we convert float data type into the Int data type"");', 'getch();', 'int a = 20;', 'Float b;', 'b = a; // Now the value of variable b is 20.000   /* It defines the conversion of int data type to float data type without losing the information. */', '#include<stdio.h>', '#include<conio.h>', 'void main()', 'printf(""\\n Welcome to Javatpoint tutorials "");', 'int x = 3, y = 4;  // the size of int variable is 2 byte.', 'float area; // the size of float variable is 4 bytes.', 'area =  x * y; /* It is a type conversion that automatically converted by the compiler at the compile time of a program. */', 'printf(""\\n Area of a Rectangle is : %f"", area);', 'printf(""\\n Here, we convert int data type to the float data type"");', 'getch();']","['float b = 3.0;', 'int a = (int) b', 'int x = 5, y = 2, c;', 'float q = 12.5, p;', 'p = q/x;']","['S.N.|||Type Casting|||Type Conversion&&&1|||Type casting is a mechanism in which one data type is converted to another data type using a casting () operator by a programmer.|||Type conversion allows a compiler to convert one data type to another data type at the compile time of a program or code.&&&2|||It can be used both compatible data type and incompatible data type.|||Type conversion is only used with compatible data types, and hence it does not require any casting operator.&&&3|||It requires a programmer to manually casting one data into another type.|||It does not require any programmer intervention to convert one data type to another because the compiler automatically compiles it at the run time of a program.&&&4|||It is used while designing a program by the programmer.|||It is used or take place at the compile time of a program.&&&5|||When casting one data type to another, the destination data type must be smaller than the source data.|||When converting one data type to another, the destination type should be greater than the source data type.&&&6|||It is also known as narrowing conversion because one larger data type converts to a smaller data type.|||It is also known as widening conversion because one smaller data type converts to a larger data type.&&&7|||It is more reliable and efficient.|||It is less efficient and less reliable.&&&8|||There is a possibility of data or information being lost in type casting.|||In type conversion, data is unlikely to be lost when converting from a small to a large data type.&&&8|||float b = 3.0;\r|||int a = (int) b|||int x = 5, y = 2, c;\r|||float q = 12.5, p;\r|||p = q/x;']",[]
147,['How to run a C program in Visual Studio Code?'],"[""A visual studio code is a lightweight software application with a powerful source code editor that runs on the desktop. It is a free source code editor developed by Microsoft for Windows, Mac OS and Linux. It is a software editor that has a rich extension of various languages like C++, C+, C, Java, Python, PHP, Go, etc. and runtime language extensions such as .NET and Unity. It is easy to edit, build, syntax highlighting, snippets, code refactoring and debugging. In visual studio code, we can change the application's background theme, keyboard shortcuts set on our preferences, install an extension and add additional functionality.""]","['https://www.javatpoint.com/modulus-operator-in-c-or-cpp', 'https://www.javatpoint.com/type-casting-vs-type-conversion', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/php-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/go-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/net-framework', 'https://www.javatpoint.com/modulus-operator-in-c-or-cpp', 'https://www.javatpoint.com/type-casting-vs-type-conversion', 'https://www.javatpoint.com/modulus-operator-in-c-or-cpp']","['https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code2.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code3.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code4.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code5.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code6.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code7.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code8.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code9.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code10.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code11.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code12.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code13.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code14.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code15.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code16.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code17.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code18.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code19.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code20.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code21.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code22.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code23.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code24.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code25.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code26.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code27.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code28.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code29.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code30.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code31.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code32.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code33.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code34.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code35.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code36.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code37.png', 'https://static.javatpoint.com/cpages/images/how-to-run-a-c-program-in-visual-studio-code38.png']",[],"['Prerequisites for running a C program in Visual Studio Code', 'Download and Install Compiler Extension', 'Download the MinGW-w64 Compiler', 'Set the Environment Path for the MinGW Set Up', 'Start Coding in the Visual Studio Code Editor']",['Download & Install the C/C++ Extension'],[],"['We have already installed the Visual Studio Code in our system. The user interface of VS code look like the following:', '2. After that, click on the C/C++', 'In this image, click on the Install button to install the C/C++ extension.', '3. After clicking the Install button, it shows the below image.', 'In this image, we can see it shows the Uninstall button that means the C/C++ extension has been successfully downloaded in the visual studio code.', 'In this image, we can see it shows the Uninstall button that means the C/C++ extension has been successfully downloaded in the visual studio code.', 'A MinGW is an advanced GCC compiler software used to compile and execute code. It is software that supports only the window operating system.', '1. Go to the https://sourceforge.net/projects/mingw We land on the following page.', '2. After that, click on the Download button, then it starts the downloading of the MinGW GCC compiler, as we can see in the below image.', '3. MinGW software has been successfully downloaded into the system.', '4. Now we double-click on the MinGW set up to install the compiler.', 'As we can see, it shows that it is a harmful file click on the Run button to proceed with installing the setup.', '5. Click on the Install', '6. Set it defaults, or we can change the storage location of the setup. After that, click on the Continue', '7. After clicking the continue button, it shows step 2 of MinGW Installation Manager.', '9. After selecting the checkbox, click on the Installation tab (at the top left corner of the dialog box).', ""Here we click on Apply Changes to set the package's installation in MinGW, as given below."", '10. After click on the Apply button, it shows the below image.', '11. After downloading the packages, it shows the installation process of the package, as shown below.', 'Here we can see all the changes have been successfully applied and then click on the Close button.', 'After downloading and installing the MinGW compiler, we now set the environment path to include the C/C++ compiler directory.', '1. Go to the installation directory of the MinGW Set Up. Here we installed the setup at the C drive, as shown below.', '2. Double click on the MinGW folder. It shows the below image.', '3. After that, click on the bin folder and then copy the directory path, as shown below.', 'Here is the path of the MinGW folder path: C:\\MinGW\\bin', '4. After copying the directory path, go to This PC -> Right Click on This PC -> Select/ Click on the Properties. It shows the below image.', '5. After that, click on the Advanced system settings to display a popup box of System Properties, as shown below.', '6. Click on the Environment Variables to set the directory path, as shown below.', 'First, we have to click on the System Variables Path and then click on the Edit button, as shown in the above image.', '7. As we click on the Edit button, it shows a popup window to set a new path, as shown below.', 'In the above image, first, we click on the New button and then paste the C:\\MinGW\\bin path; after that, click the OK button.', '8. Similarly, click the OK button to the Environment Variables and System Properties.', '1. Here we created a C Program folder to store all program code. We can create a folder with any name in any directory.', '2. Go to the VS Code and click on the Add Folder.', '3. As we click on the Add Folder, it shows a popup dialog box to select the folder to store the program.', '4. After selecting the folder, click on the Add The selected folder appears in the explorer section, as we have shown below.', '5. Move the mouse over the C PROGRAM folder; it shows a + Click on the button and write the file name as JavaTpoint.c, as shown below.', 'Now write and understand simple C programming in the VS Code editor.', 'JavaTpoint.c', 'After writing the code, right-click on the program, as shown below.', 'Click on the Run Code option or press Ctrl + Alt + N from the button. It shows the following output.', ""Let's write a program to calculate the area and perimeter of the rectangle in the VS Code editor."", 'Rectangle.c', 'We can click on the Run button or press the Ctrl + Alt + N from the keyboard. It displays the below output.', ""Let's write another C program to take an input from the user in the Visual Studio Code Editor."", 'Rectangle2.c', 'When we click on the Run button or press the Ctrl + Alt + N, it displays the below output.', 'In the above program, we take length and breadth as input from the keyboard. As the program is compiled, it produces the below statement.', 'Following are the steps to take input from the user.']","['1. We need to click on the extension button that displays a sidebar for downloading and installing the C/C++ extension in the visual studio code. In the sidebar, type C Extension.', '8. As we click on the Continue, it shows the below image. In the MinGW Installation Manager, we need to check the Mingw32-base package and Ming32-gcc-g++ package to run and compile the C/ C++ program in the visual studio code editor.', '9. If we want to check that the MinGW has been successfully installed in the system: go to the Command Prompt or cmd, write the gcc -version, and press the Enter ', 'Here Output tab is read-only, and hence we cannot take any input from the user. So, we need to add some steps in the code editor to take user inputs from the console/user.']",[],"['#include // define the header file', 'void main()   // define the main function', 'printf(""Welcome to JavaTpoint"");  // print the statement.', 'Welcome to JavaTpoint', '#include // header files', '#include', 'void main()', '{   // initialize the local variables.', 'int l =5, b=10, ar, pr;', 'printf(""Length & Breadth of the rectangle is: %d & %d"",l, b);', 'ar = l * b; // calculate area of rectangle.', 'pr = 2 * (l + b); // calculate perimeter of rectangle.', 'printf(""\\n Area of Rectangle is: %d"", ar);', 'printf(""\\n Perimeter of Rectangle is: %d"", pr);', '#include', 'int main()', '{   // initialize the local variables.', 'int l, b, ar, pr;', 'printf(""Enter the length of the rectangle"");', 'scanf(""%d"", l); // take input from the user', 'printf(""Enter the breadth of the rectangle"");', 'scanf(""%d"", b);', 'ar = l * b; // calculate the area of rectangle.', 'pr = 2 * (l + b); // calculate the perimeter of rectangle.', 'printf(""\\n Area of Rectangle is: %d"", ar);', 'printf(""\\n Perimeter of Rectangle is: %d"", pr);']",[],[],"['|||We should have a basic knowledge of C programming.|||The Visual Studio Code Editor must be installed in the system.|||Download the C/C++ Extension. It is an extension provided by Microsoft that support visual studio code. It helps in IntelliSence, debugging and code browsing of the programming code in the visual studio.|||Download the C/C++ compilers. There are some popular compilers are:||||||GCC on Linux|||GCC via Mingw-w64 on Windows|||Microsoft C++ compiler on windows|||Clang for XCode on MacOS|||||||||GCC on Linux|||GCC via Mingw-w64 on Windows|||Microsoft C++ compiler on windows|||Clang for XCode on MacOS||||||First of all, we need to stop the background running the c program by pressing the Alt + Ctrl + M from the keyboard.|||After stopping the C file, go & click the File button at the top left corner of the Visual Studio Code Editor, and select the Settings via Preferences, as shown below image.||||||After clicking the Settings, it shows the image below.|||||||||In this image, select the extension button to set the settings for the C Compiler.|||Click on the Extension button and scroll the drop-down box to select the Run Code Configuration.||||||Now scroll the right-side pane and Tick on the Run In Terminal.||||||Go to the c and again execute the program by clicking on the Run, it produces the following results, as shown below.||||||']"
148,['Modulus Operator in C/C++'],"['Before understanding about modulus operator, we need to know about the term operator. In programming, the operator symbol tells the compiler to perform a particular operation at a given number based on the passed operation.']","['https://www.javatpoint.com/sum-of-first-n-natural-numbers-in-c', 'https://www.javatpoint.com/how-to-run-a-c-program-in-visual-studio-code', 'https://www.javatpoint.com/sum-of-first-n-natural-numbers-in-c', 'https://www.javatpoint.com/how-to-run-a-c-program-in-visual-studio-code', 'https://www.javatpoint.com/sum-of-first-n-natural-numbers-in-c']",['https://static.javatpoint.com/cpages/images/modulus-operator-in-c-or-cpp.png'],[],"['What is the modulus operator in C and C++?', 'Modulus Operator in C++']","['Return Possibilities of the Modulus Operator', 'How does Modulus Operator work in C/C++?', 'Chaining of Modulus Operator']","['Note: When we divide a float number by another number, it returns the compiled timer error as an invalid operand. Hence, we can say that it does not work with float number.']","['In this section, we will focus on the modulus operator.', 'In the above Syntax, a and b are two integers, and the % (Percent) symbol is a modulus operator that divides a by b and returns the remainder.', 'Following are the possibilities when the first number is divided by the second number to return only a remainder value.', 'Similarly, 7 % 2 returns 1 as a remainder because when 7 is divided by 2, it returns 3 as quotient and 1 as remainder.', 'Example 1: Write a program to implement the Modulus Operator in C.', 'Program to implement the modulus operator in C++.', ""Let's consider the program of Chaining of Modulus Operator to take more than two operands.""]","['Example: When we perform the modulus operator between 8 and 5, means 8 % 5, it returns the remainder 3 because when 8 is divided by 5, it returns 1 as the quotient and 3 as the remainder.', 'We can use the Chaining of Modulus Operator to perform modular division on more than two operands in a single statement. Following is the pseudo-code for the chaining of modulus operator, as given below.']","[""It is used to perform different operations (+, -, *, /) on numbers. It helps to enhance the programmer's logical and mathematical ability by using various operators in the program. Except these four basic operators, there are some other operators such as modulus operator (%), scope resolution operator (::), etc."", 'The modulus operator is a symbol used in various programming languages. It is denoted by the percentage symbol (%). It is a modulus operator that is used in the arithmetic operator. It determines the remainder. In some cases, the remainder may be 0, it means the number is completely divisible by the divisor.', ""The modulus operator works with two operands received by the end-user. After that, it divides the first number by the second number and determines the remainder. Let's understand the following example that illustrates the functionality of the modulus operator.""]","['rem = a % b', '#include', '#include', 'void main()', 'int a, b;', 'int res; // store the resultant of modulus expression', 'a = 5;', 'b = 2;', 'res = a % b; // define modulus expression', 'printf("" Modulus returns a remainder: %d"", res);', 'res = b % a; // define modulus expression', 'printf("" \\n Modulus returns a remainder: %d"", res);', 'a = 10;', 'b = 5;', 'res = a % b; // define modulus expression', 'printf("" \\n Modulus returns a remainder: %d"", res);', 'getch();', '#include', 'using namespace std;', 'int main(void)', 'int a, b;', 'int res; // store the resultant of modulus expression', 'a = 5;', 'b = 2;', 'res = a % b; // modulus expression', 'cout <<"" Modulus returns a remainder: "" << res;', 'res = b % a; // modulus expression', 'cout <<""\\n Modulus returns a remainder: "" << res;', 'a = 10;', 'b = 5;', 'res = a % b; // modulus expression', 'cout <<""\\n Modulus returns a remainder: "" << res;', 'return 0;', '#include', 'using namespace std;', 'int main(void)', 'int a, b;', 'int res; // store the result of modulus expression', 'a = -5;', 'b = 2;', 'res = a % b; // modulus expression', 'cout <<"" Modulus returns a remainder: "" << res;', 'a = 17;', 'b = -3;', 'res = a % b; // modulus expression', 'cout <<""\\n Modulus returns a remainder: "" << res;', 'a = -26;', 'b = -5;', 'res = a % b; // modulus expression', 'cout <<""\\n Modulus returns a remainder: "" << res;', 'return 0;', 'res = operand1 % operand2 % operand3 % .... % operand_n', '#include', 'using namespace std;', 'int main()', 'int x = 14;', 'int y = 6;', 'int z = 3;', 'int modulo = x % y % z; // x % y returns 2, and 2 % z returns 2', 'cout << ""Modulus is : ""<< modulo;']","['Modulus returns a remainder: 1', 'Modulus returns a remainder: 2', 'Modulus returns a remainder: 0', 'Modulus returns a remainder: 1', 'Modulus returns a remainder: 2', 'Modulus returns a remainder: 0', 'Modulus returns a remainder: -1', 'Modulus returns a remainder: 2', 'Modulus returns a remainder: -1', 'Modulus is: 2']",[],"['|||If the variable a is completely divisible by the second number (b), it returns zero (0), or the remainder becomes 0.|||If the variable a is not completely divisible by the second number (b), it returns a numeric value in the range [1, a - 1]. Or we can say it returns the remainder to a non-zero integer value.|||If the first number (a) is non-zero and the second number is 0, it gives an error at compile time.|||']"
149,['Sum of first N natural numbers in C'],"['As we know natural numbers contain all the positive numbers starting from 1, 2, 3, to n numbers or infinity. For example, suppose when we calculate the sum of the first 25 numbers. That means we start adding the numbers from 1 to the given number 25, and the process is called the sum of the first N natural number. In this topic, we will learn how to find the sum of first n numbers using a C program.']","['https://www.javatpoint.com/what-is-getch-in-c', 'https://www.javatpoint.com/modulus-operator-in-c-or-cpp', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/natural-numbers', 'https://www.javatpoint.com/https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/while-loop-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/functions-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/recursion-in-c', 'https://www.javatpoint.com/what-is-getch-in-c', 'https://www.javatpoint.com/modulus-operator-in-c-or-cpp', 'https://www.javatpoint.com/what-is-getch-in-c']",['https://static.javatpoint.com/cpages/images/sum-of-first-n-natural-numbers-in-c.png'],[],[],"['Mathematical Formula', 'Pseudo code', 'Using for Loop', 'Using while Loop', 'Using do-while Loop', 'Using the Mathematical Formula', 'Using Function', 'Sum of n natural numbers Between a Given Range', 'Using Recursion', 'Using an Array']",[],"['Following is the representation to find the sum of n natural numbers using the mathematical formula:', 'Where n defines the natural number.', 'Suppose, we want to calculate the sum of the first 20 natural number, we need to put in a mathematical formula to get the sum:', ""Let's create a C program that determines the sum of n natural numbers using for loop."", 'SumOfNaturalNumber1.c', ""Let's create a C program that determines the sum of n natural numbers using while loop."", 'SumOfNaturalNumber2.c', 'Let us consider the following example to calculate the sum of natural number using Do while loop.', 'SumOfNaturalNumber3.c', ""Let's write a program to print the sum of n natural number using the mathematical formula."", 'SumOfNaturalNumber4.c', ""Let's consider the following example to calculate the sum of natural number using function in C."", 'SumOfNaturalNumber5.c', 'Calculate the sum of n natural number from any starting number to the specify last number.', 'SumOfNaturalNumber6.c', ""Let's consider the following example to calculate the sum of natural number using recursion."", 'SumOfNaturalNumber7.c', 'SumOfNaturalNumber8.c']",[],"['In the above example, when we enter a positive number 20, the while loop continuously iterates over the counter value between i = 0 to 20. At each iteration, the value of i is added to the variable sum, and i is incremented by 1. When the while condition becomes false, it exits the loop and prints the sum of the first 20 natural numbers.', 'In the above example, when we enter a positive number 30, the do loop continuously iterates the counter value between i = 0 to 30. At each iteration, the value of i is added to the variable sum, and i is incremented by 1. When the while condition becomes false, it exits from the while loop and prints the sum of the first 30 natural numbers.']","['Sum of n natural number = n * (n + 1) / 2', 'Sum = 20 * (20 + 1) / 2 = 20 * 10.50 = 210', '20 * (20 + 1) /2 = 10 * 21 = 210', '#include', '#include', 'void main()', 'int num, i, sum = 0; // declare local variables', 'printf("" Enter a positive number: "");', 'scanf(""%d"", #); // take any positive number', 'for (i = 0; i <= num; i++)', 'sum = sum + i; // at each iteration the value of i is added to the sum variable', 'printf(""\\n Sum of the first %d number is: %d"", num, sum);', 'getch();', '#include', '#include', 'void main()', 'int num, i, sum = 0; // initialize and declare the local variables', 'printf(""Enter a positive number : "");', 'scanf(""%d"", #); // take a value up to which find the sum of n natural number', 'i = 0;', 'while (i <= num) // define the while loop and i should be less than num', 'sum = sum + i; // store the sum of natural number', 'i++; // increment by 1', 'printf("" \\n Sum of first %d natural number is : %d"", num, sum);', 'getch();', '#include', '#include', 'void main()', 'int num, i, sum = 0; // initialize and declare the local variables', 'printf(""Enter a positive number: "");', 'scanf(""%d"", #); // take a value up to which find the sum of natural number', 'i = 0;', 'sum = sum + i; // store the sum of natural number', 'i++; // increment by 1', '} while (i <= num); // define the while loop and i should be less than num', 'printf("" \\n Sum of first %d natural number is : %d"", num, sum);', 'getch();', '#include', 'int main()', 'int n = 40; // declare & initialize local variable n.', 'int sum = (n * (n + 1) ) / 2; /* define the mathematical formula to calculate the sum of given number. */', 'printf(""Sum of %d natural number is = %d"", n, sum); // print the sum of natural number', 'return 0;', '#include', '#include', 'void main()', 'int num, total; // local variable', 'printf(""Enter a natural number: "");', 'scanf(""%d"", #); // take a natural number from the user', 'total = natural_no(num);  // call the function', 'printf("" Sum of the %d natural number is: %d"", num, total);', 'int natural_no(num)', 'int i, sum = 0;', 'for (i = 0; i <= num; i++)', 'sum = sum + i;', 'return sum;', '#include', '#include', 'void main()', 'int num, i, sum = 0; // define the local variables', 'printf(""Enter the first number: "");', 'scanf(""%d"", &i); // accept the starting number', 'printf("" Up to the last natural number: "");', 'scanf(""%d"", #); // accept the last number', 'sum = sum + i;', 'i++; // increment by 1', 'printf(""Sum of natural number is = %d"", sum);', 'getch();', '#include', '#include', 'int sum_natural_no(int num); // declare function outside the main function', 'main()', 'int num, sum = 0; // declare local variable', 'printf(""Enter any positive number to calculate the sum of natural no. "");', 'scanf(""%d"", #); // take an input from the user', 'sum = sum_natural_no(num); // call the function', 'printf(""Sum of the first %d natural number is: %d"", num, sum); // print the sum of natural number', 'return 0;', 'int sum_natural_no(int num)', 'if( num == 0) // define if condition', 'return num;', '{   // return the else condition', 'return( num + sum_natural_no( num - 1));', '#include', 'int main()', 'int num, sum = 0, i, array[50];', 'printf("" Enter a positive number as we want to sum the natural number: "");', 'scanf(""%d"", #); // take a positive number', 'printf(""\\n Enter the number one by one: \\n"");', 'for (i = 0; i < num; i++)', 'scanf(""%d"", &array[i]); // read value one by one', 'sum = sum + array[i]; // store number into the sum variable', 'printf(""Sum of the given number is = %d\\n"", sum);', 'return 0;']","['Enter a positive number: 25', 'Sum of the first 25 number is: 325', 'Enter a positive number: 20', 'Sum of the first 20 natural number is: 210', 'Enter a positive number: 30', 'Sum of the first 30 natural number is: 465', 'Sum of 40 natural number is = 840', 'Enter a natural number: 100', 'Sum of the 100 natural number is: 5050', 'Enter the first number: 1', 'Up to the last number natural number: 25', 'Sum of natural number is = 325', 'Enter any positive number to calculate the sum of natural no. 50', 'Sum of the first 50 natural number is: 1275', 'Enter a positive number as we want to sum the natural number: 5', 'Enter the number one by one:', '2', '4', '5', '6', '7', 'Sum of the given number is = 24']",[],"['|||int i, sum = 0, num|||input positive number|||i = 0|||do|||sum = sum + i|||i = i + 1|||iterate the value of i < = num|||display the sum of the first natural number.|||']"
150,['Big O Notation in C'],"[""In Data Structure and Algorithms in C programming, we have learned so many algorithms where we have understood different aspects and purposes of an algorithm. We have also studied the complexity of an algorithm and how to analyze and calculate an algorithm's complexity. We have found the time and space complexity of an algorithm and concluded that the algorithm that has less time and space complexity is evaluated as the best algorithm. We understood how to find the best case, worst case, and the average case of an algorithm. Thus, for analyzing all such complexities and representing them, the concept of Asymptotic Notation is used under which there are different types available for representing the complexities. One such type is Big O Notation.""]","['https://www.javatpoint.com/lcm-of-two-numbers-in-c', 'https://www.javatpoint.com/typedef-vs-define-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/lcm-of-two-numbers-in-c', 'https://www.javatpoint.com/typedef-vs-define-in-c', 'https://www.javatpoint.com/lcm-of-two-numbers-in-c']",['https://static.javatpoint.com/cpages/images/big-o-notation-in-c.png'],[],['Example of Big O Notation in C'],"['What are Asymptotic Notations', 'Big O Notation', 'Properties of Big O Notation', 'How does Big O Notation make runtime analysis of an algorithm', 'How does Big O notation analyze the Space complexity', 'Examples of Algorithms']",[],"['In this section, we will discuss the Big O notations and briefly introduce Asymptotic notations and its types.', 'Mathematically,', 'For a function, f(n) and another function g(n), where both functions are defined on some unbounded set of real (positive) numbers.', 'Where g(n) is strictly positive for all large values of n. It can be written as:', 'f(n) = O(g(n)) where n tends to infinity (n → ∞)', 'But it is seen that the assumption of n to infinity is left unstated, and so we can simply write the above expression as:', 'f(n) = O(g(n))', 'Here, f and g are the necessary functions from positive integer to non-negative real numbers.', 'Thus, the Big O asymptotic refers to large n values.', 'Certain essential properties of Big O Notation are discussed below:', 'Here, in terms of Big O, every log functions increase in the same manner.', 'For example:', 'In order to determine the space complexity of an algorithm, the following two tasks are necessary to be done:', 'Task 1: Implementation of the program for a particular algorithm is required.', 'Task 2: The size of the input n is required to know the memory each item will hold.', 'Both these are two important tasks to be accomplished first then only we can calculate the space complexity for an algorithm.', 'Below we have mentioned some algorithmic examples with their space complexities:', 'Below we have implemented the selection sort algorithm in C and calculated the worst-case complexity (Big O notation) of the algorithm:', 'In order to analyze the algorithm:', 'You can implement other algorithms in C, analyze it and determine the complexities in a similar way.']","['So, these three asymptotic notations are the most used notations, but other than these, there are more common asymptotic notations also present, such as linear, logarithmic, cubic, and many more.', ""As we know that the runtime performance of an algorithm depends on the input size of n. Let's see some mathematical examples for making the runtime analysis of an algorithm for different size of n:"", ""Thus, similarly, we calculate the runtime performance of an algorithm. Let's see some algorithmic examples and see the runtime analysis of those algorithms:""]","[""These are the mathematical notations that are used for the asymptotic analysis of the algorithms. The term 'asymptotic' describes an expression where a variable exists whose value tends to infinity. In short, it is a method that describes the limiting behavior of an expression. Thus, using asymptotic notations, we analyze the complexities of an algorithm and its performance. Using the asymptotic notations, we determine and show the complexities after analyzing it. Therefore, there are three types of asymptotic notations through which we can analyze the complexities of the algorithms:"", 'The Big O notation is used to express the upper bound of the runtime of an algorithm and thus measure the worst-case time complexity of an algorithm. It analyses and calculates the time and amount of memory required for the execution of an algorithm for an input value.', ""For analyzing an algorithm's performance, we used to calculate and compare the worst-case running time complexities of the algorithm. The order of O(1), which is known as the Constant Running Time, is considered to be the fastest running time for an algorithm where the time taken by the algorithm is the same for different input sizes. However, the constant running time is the ideal runtime for an algorithm, but it is achieved very rarely. It is because the runtime of an algorithm depends on the input size of n."", ""It is essential to determine both runtime and space complexity for an algorithm. It's because on analyzing the runtime performance of the algorithm, we get to know the execution time the algorithm is taking, and on analyzing the space complexity of the algorithm, we get to know the memory space the algorithm is occupying. Thus, for measuring the space complexity of an algorithm, it is required to compare the worst-case space complexities performance of the algorithm.""]",['for(int i=0; i'],[],[],"[""|||Big O Notation (O): It represents the upper bound of the runtime of an algorithm. Big O Notation's role is to calculate the longest time an algorithm can take for its execution, i.e., it is used for calculating the worst-case time complexity of an algorithm.|||Omega Notation (Ω(n)): It represents the lower bound of the runtime of an algorithm. It is used for calculating the best time an algorithm can take to complete its execution, i.e., it is used for measuring the best case time complexity of an algorithm.|||Theta Notation (Θ(n)): It carries the middle characteristics of both Big O and Omega notations as it represents the lower and upper bound of an algorithm.||||||Constant Multiplication:|||If f(n) = c.g(n), then O(f(n)) = O(g(n)) where c is a nonzero constant.|||Summation Function:|||If f(n) = f1(n) + f2(n) + -- + fm(n) and fi(n)≤ fi+1(n) ∀ i=1, 2,--, m,|||then O(f(n)) = O(max(f1(n), f2(n), --, fm(n))).|||Polynomial Function:|||If f(n) = a0 + a1.n + a2.n2 + -- + am.nm,|||then O(f(n)) = O(nm).|||Logarithmic Function:|||If f(n) = logan and g(n)=logbn,|||then O(f(n))=O(g(n))||||||n = 20|||log (20) = 2.996;|||20 = 20;|||20 log (20) = 59.9;|||202 = 400;|||220 = 1084576;|||20! = 2.432902 + 1818;|||n = 10|||log (10) = 1;|||10 = 10;|||10 log (10) = 10;|||102 = 100;|||210 = 1024;|||10! = 3628800;||||||For Linear Search, the runtime complexity is O(n).|||For binary search, the runtime complexity is O(log n).|||For Bubble Sort, Selection Sort, Insertion Sort, Bucket Sort, the runtime complexity is O(n^c).|||For Exponential algorithms such as Tower of Hanoi, the runtime complexity is O(c^n).|||For Heap Sort, Merge SortSort, the runtime complexity is O(n log n).||||||For Linear Search, Bubble sort, selection sort, Heap sort, Insertion sort, and Binary Search, the space complexity is O(1).|||For radix sort, the space complexity is O(n+k).|||For quick SortSort, the space complexity is O(n).|||For merge sort, the space complexity is O(log n).||||||We can see that the range of the for outer loop is i < n, which means the order of the loop is O(n).|||Next, for the inner for loop, it is also O(n) as j < n.|||The average efficiency is found n/2 for a constant c, but we ignore the constant. So, the order is O(n).|||On multiplying the order of the inner and outer loop, we get the runtime complexity as O(n^2).|||""]"
151,['LCM of two numbers in C'],"['In this topic, we will discuss the LCM and how we can get the LCM of two numbers in the C programming language.']","['https://www.javatpoint.com/while-loop-vs-do-while-loop-in-c', 'https://www.javatpoint.com/big-o-notation-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/least-common-multiple', 'https://www.javatpoint.com/while-loop-vs-do-while-loop-in-c', 'https://www.javatpoint.com/big-o-notation-in-c', 'https://www.javatpoint.com/while-loop-vs-do-while-loop-in-c']",['https://static.javatpoint.com/cpages/images/lcm-of-two-numbers-in-c.png'],[],[],"['Algorithm of LCM', 'LCM of two numbers using while loop', 'LCM of two numbers using GCD', 'LCM of two numbers using function', 'LCM of two numbers using recursive function']",[],"['Following are the algorithm of LCM of two number, as follows:', 'Step 1: Initialize the positive integer variables A and B.', 'Step 2: Store the common multiple of A & B into the max variable.', 'Step 3: Validate whether the max is divisible by both variables A and B.', 'Step 4: If max is divisible, display max as the LCM of two numbers.', 'Step 5: Else, the value of max is increased, and go to step 3.', 'Step 6: Stop the program.', ""Let's consider an example to find the LCM of two numbers in C using while loop."", 'In each iteration of the while loop, max_div checked the number divisible by num1 and num2 variables inside the if condition.', 'If the above condition is not true, the max_div is incremented by 1, and the iteration of the loop continues till the if statement is true.', ""Let's consider a program to get the LCM of two numbers in C using the GCD."", ""Let's consider a program to get the LCM of two numbers in C using function."", ""Let's consider a program to get the LCM of two numbers in C using the Recursive function.""]",[],"[""LCM is a mathematical term that stands for Least Common Multiple (LCM). It is the smallest positive number that is completely divisible by both integer's n1 and n2, without leaving any remainder. LCM is also known as the Lowest Common Multiple. It is represented as LCM (a, b) or lcm (a, b). For example, the LCM of two positive numbers, 72 and 120, is 360."", 'As we can see in the above program, we have passed two positive numbers, 15 and 12, stored in variable num1 and num2. Where the max_div variable store the largest divisible number by both variables num1 and num2. However, the LCM of two numbers cannot be less than max_div.']","['#include', '#include', 'void main()', 'int num1, num2, max_div, flag = 1;', 'printf( "" Enter any two positive numbers to get the LCM \\n "");', 'scanf("" %d %d"", &num1, &num2);', 'max_div = (num1 > num2) ? num1 : num2;', 'while (flag) // (flag = 1)', 'if (max_div % num1 == 0 && max_div % num2 == 0)', 'printf( "" The LCM of %d and %d is %d. "", num1, num2, max_div);', 'break;', '++max_div; // pre-increment max_div', 'if (max_div % num1 == 0 && max_div % num2 == 0)', '#include', '#include', 'int main()', 'int num1, num2, i, gcd, LCM;', 'printf ("" Enter any two positive numbers: \\n "");', 'scanf ("" %d %d"", &num1, &num2);', '/* use for loop to define the num1 & num2. Where the num1 and num2 should be equal or less than i. */', 'for ( i = 1; i <= num1 && i <= num2; ++i)', 'if  (num1 % i ==0 && num2 % i == 0)', 'gcd = i; // assign the divisible number i to gcd', 'LCM = (num1 * num2) / gcd;', 'printf( "" The LCM of two numbers %d and %d is %d. "", num1, num2, LCM );', '#include', '#include', 'int get_lcm( int a, int b); // function declaration', 'int main()', 'int n1, n2, lcm; // declaration of variables', 'printf ("" \\n Enter any two positive numbers to get the LCM of: \\n "");', 'scanf (""%d %d"", &n1, &n2);', 'lcm = get_lcm( n1, n2); // function calling', 'printf ( "" \\n LCM of %d and %d is %d. "", n1, n2, lcm);', 'return 0;', 'int get_lcm ( int n1, int n2) // function definition', '/* static variabe is iniatialized only once for each function call */', 'static int max = 1;', 'if ( max % n1  == 0 && max % n2 == 0)', 'return max;', 'max++;', 'get_lcm( n1, n2);', 'return max;', '#include', '#include', 'int gcd( int num1, int num2)', 'if ( num1 == 0)  // if num1 is equal to 0, return num2', 'return num2;', 'return gcd (num2 % num1, num1);', 'int lcm_fun( int num1, int num2)', '{\t// divide the num1 by gcd() function and then multiply with num2.', 'return ( num1 / gcd(num1, num2)) * num2;', 'int main()', '{   // declaration and initialization of positive numbers', 'int num1, num2;', 'printf( ""Enter any two positive numbers \\n"");', 'scanf("" %d %d"", &num1, &num2);', 'printf ( "" LCM of two numbers %d and %d is %d "", num1, num2, lcm_fun( num1, num2));', 'return 0;']","['Enter any two positive numbers to get the LCM', '15', '12', 'The LCM of 15 and 12 is 60.', 'Enter any two positive numbers:', '30', '20', 'The LCM of two numbers 30 and 20 is 60.', 'Enter any two positive numbers to get the LCM of:', '30', '25', 'LCM of 30 and 25 is 150.', 'Enter any two positive numbers', '26', '20', 'LCM of two numbers 26 and 20 is 260']",[],[]
152,['Difference between while loop and do-while loop in C?'],"['In this article, we learn comparison between the while loop and do-while loop constructs in C language. At the beginning of this article, we understand the concept of while loop and do-while loop in C. After that, we learn the comparisons of while and do-while loop in C programming.']","['https://www.javatpoint.com/memory-layout-in-c', 'https://www.javatpoint.com/lcm-of-two-numbers-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/while-loop-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/do-while-loop-in-c', 'https://www.javatpoint.com/memory-layout-in-c', 'https://www.javatpoint.com/lcm-of-two-numbers-in-c', 'https://www.javatpoint.com/memory-layout-in-c']","['https://static.javatpoint.com/cpages/images/while-loop-vs-do-while-loop-in-c.png', 'https://static.javatpoint.com/cpages/images/while-loop-vs-do-while-loop-in-c2.png', 'https://static.javatpoint.com/cpages/images/while-loop-vs-do-while-loop-in-c3.png', 'https://static.javatpoint.com/cpages/images/while-loop-vs-do-while-loop-in-c2.png', 'https://static.javatpoint.com/cpages/images/while-loop-vs-do-while-loop-in-c3.png']",[],"['While loop statement:', 'do-while loop statement:', 'while loop vs do-while loop in C']","['Syntax of while loop:', 'Example:', 'Flowchart of while loop statement:', 'Syntax of do-while loop:', 'Example:', 'Flowchart of do-while loop statement:']",[],"['While loop statement is one of the easiest and most widely used looping constructs in the C programming language.', 'For Example: i = 1;', 'For Example: while (i<=10)', 'For Example: i = i + 1;', 'For Example: i = 1;', 'Test Condition: After the initialization step, the next step in the do-while loop is to check the test condition whether the loop is executed or not.', 'For Example: while (i<=10);', 'For Example: i = i + 1;', ""Let's see some Comparison between the while loop and do-while loop in the C language""]","['In this statement, while it is a reserved word or keyword, the condition can be any constant, variable, expression, and statement can be a single statement or a group of statements. In the while loop, we have to perform three steps:', 'Initialization Value: In a while loop, the first step is initialization is used to set the initial value of the loop counter. The loop counter may be an increment counter or decrement counter in while loop.', ""Increment and decrement: After checking the test condition in the while loop, increment and decrement are used to increment and decrement the loop counter's value."", 'Initialization value: In a do-while loop, the first step is initialization and is used to set the initial value of the loop counter. The loop counter may be an increment counter or decrement counter.', ""Increment and decrement: After checking the test condition in the do-while loop, the next step is to increment and decrement the loop counter's value."", 'Here, two keywords are used for the do-while loop statement is do and while. If the condition is true in the do-while loop, the statement executes again, and if the condition returns false, execution stops, and control passes to the next statement.']","[""Test Condition: After the initialization step, the next step in the while loop is to check the test condition whether the loop is executed or not. If the condition is true in the while loop, the loop's body is executed; otherwise, there is no loop execution."", 'In a while loop statement, while keyword is used and followed by any good condition that has to be tested enclosed in parentheses and it may contain any logical operator. Condition is followed by a pair of curly brackets that specifies the set of statements that are to be executed while the condition is true.', ""In the C programming language, the do-while loop statement is also similar to a while loop in the C programming language. In this, first of all, the loop's body is executed then the condition is checked. In the do-while loop, we have to perform three steps:""]","['Initialization;', 'while (condition)', 'Block of statements;', 'Statement-x;', '#include', '#include', 'Void main ()', 'clrscr();', 'while (i<=10)', 'print (""hello"");', 'i = i + 1;', 'getch();', 'Statements;', 'while (condition);', 'Statement-x;', '#include', '#include', 'Void main ()', 'clrscr();', 'printf(""hello"");', 'i = i + 1;', 'while(i<=10);', 'getch();']","['while (condition)', 'while (condition);', 'while (condition)', '{', 'Block of statements;', '}', 'Statement-x;', 'do', '{', 'statements;', '}', 'while (condition);', 'Statement-x;', 'Program of while loop:', '#include', '#include', 'Void main()', '{', 'int i;', 'clrscr();', 'i = 1;', 'while(i<=10)', '{', 'printf(""hello"");', 'i = i + 1;', '}', 'getch();', '}', '#include', '#include', 'Void main()', '{', 'int i;', 'clrscr();', 'i = 1;', 'do', '{', 'printf(""hello"");', 'i = i + 1;', '}', 'while(i<=10);', 'getch();', '}']","['SR.NO|||while loop|||do-while loop&&&1.|||While the loop is an entry control loop because firstly, the condition is checked, then the loop\'s body is executed.|||The do-while loop is an exit control loop because in this, first of all, the body of the loop is executed then the condition is checked true or false.&&&2.|||The statement of while loop may not be executed at all.|||The statement of the do-while loop must be executed at least once.&&&3.|||The while loop terminates when the condition becomes false.|||As long as the condition is true, the compiler keeps executing the loop in the do-while loop.&&&4.|||In a while loop, the test condition variable must be initialized first to check the test condition in the loop.|||In a do-while loop, the variable of test condition Initialized in the loop also.&&&5.|||In a while loop, at the end of the condition, there is no semicolon.|||Syntax:|||while (condition)|||In this, at the end of the condition, there is a semicolon.|||Syntax:|||while (condition);&&&6.|||While loop is not used for creating menu-driven programs.|||It is mostly used for creating menu-driven programs because at least one time; the loop is executed whether the condition is true or false.&&&7.|||In a while loop, the number of executions depends on the condition defined in the while block.|||In a do-while loop, irrespective of the condition mentioned, a minimum of 1 execution occurs.&&&8.|||Syntax of while loop:|||while (condition)\r|||{\r|||Block of statements;\r|||}\r|||Statement-x;|||Syntax of do-while loop:|||do\r|||{\r|||statements;\r|||}\r|||while (condition);\r|||Statement-x;&&&9.|||Program of while loop:|||Program of while loop:\r|||\r|||#include \r|||#include \r|||Void main()\r|||{\r|||int i;\r|||clrscr();\r|||i = 1;\r|||while(i<=10)\r|||{\r|||printf(""hello"");\r|||i = i + 1;\r|||}\r|||getch();\r|||}|||Program of do-while loop:|||#include \r|||#include \r|||Void main()\r|||{\r|||int i;\r|||clrscr();\r|||i = 1;\r|||do\r|||{\r|||printf(""hello"");\r|||i = i + 1;\r|||}\r|||while(i<=10);\r|||getch();\r|||}&&&10.|||Flowchart of while loop:||||||Flowchart of do-while loop:|||']",['|||Initialization|||Test Condition|||Increment and decrement||||||Initialization|||Test Condition|||Increment and decrement|||']
153,['Memory Layout in C'],"['When we create a C program and run the program, its executable file is stored in the RAM of the computer in an organized manner.']","['https://www.javatpoint.com/balanced-parenthesis-in-c', 'https://www.javatpoint.com/while-loop-vs-do-while-loop-in-c', 'https://www.javatpoint.com/balanced-parenthesis-in-c', 'https://www.javatpoint.com/while-loop-vs-do-while-loop-in-c', 'https://www.javatpoint.com/balanced-parenthesis-in-c']",['https://static.javatpoint.com/cpages/images/memory-layout-in-c.png'],[],[],"['1. Text segment', '2. Data section', '3. Stack', '4. Heap']",[],"['The memory layout for C program can be shown below:', 'As we can observe in the above figure, the C program consists of the following sections in the program:', ""Let's understand each section one by one."", ""Let's understand this scenario through an example."", 'The data section consists of two segments:', 'Uninitialized data segment', ""Let's look at some examples of uninitialized data segment."", 'Initialized data segment']","['The uninitialized data segment is also known as a .bss segment that stores all the uninitialized global, local and external variables. If the global, static and external variables are not initialized, they are assigned with zero value by default.', 'An initialized data segment is also known as the data segment. A data segment is a virtual address space of a program that contains all the global and static variables which are explicitly initialized by the programmer.', 'The values of variables in a data segment are not read-one, i.e., they can be modified at run time. This data segment can be further classified into categories:', 'Stack is also used for recursive functions. When the function is called itself again and again inside the same function which causes the stack overflow condition and it leads to the segmentation fault error in the program.']","['The text segment is also known as the code segment. When we compile any program, it creates an executable file like a.out, .exe, etc., that gets stored in the text or code section of the RAM memory. If we store the instructions in the hard disk, then the speed for accessing the instructions from the hard disk becomes slower as hard disk works on the serial communication so taking the data from the hard disk will be slower, whereas the RAM is directly connected to the data and address bus so accessing the data from the RAM is faster.', 'The data which we use in our program will be stored in the data section. Since the variables declared inside the main() function are stored in the stack, but the variables declared outside the main() method will be stored in the data section. The variables declared in the data section could be stored in the form of initialized, uninitialized, and it could be local or global. Therefore, the data section is divided into four categories, i.e., initialized, uninitialized, global, or local.', 'In the above code, var1 and var2 variables are declared outside the main() function where var1 is the uninitialized variable, whereas the var2 is an initialized variable. These variables can be accessed anywhere in the program because these variables are not a part of the main() in the stack.', 'The .bss segment stands for Block Started by symbol. The bss segment contains the object file where all the statically allocated variables are stored. Here, statically allocated objects are those objects without explicit initialization are initialized with zero value. In the above code, var1 is an uninitialized variable so it is stored in the uninitialized data section.', 'For example: the global variables like char str[] = ""javatpoint"" and int a=45; will be stored in the initialized read-write area. If we create the global variable like const char* string = ""javatpoint""; the literal ""javatpoint"" would be stored in the initialized read area, whereas the char pointer variable would be stored in the initialized write area.', 'When we define a function and call that function then we use the stack frame. The variables which are declared inside the function are stored in the stack. The function arguments are also stored in the function as the arguments are also a part of the function. Such a type of memory allocation is known as static memory allocation because all the variables are defined in the function, and the size of the variables is also defined at the compile time. The stack section plays a very important role in the memory because whenever the function is called, a new stack frame is created.', 'Heap memory is used for the dynamic memory allocation. Heap memory begins from the end of the uninitialized data segment and grows upwards to the higher addresses. The malloc() and calloc() functions are used to allocate the memory in the heap. The heap memory can be used by all the shared libraries and dynamically loaded modules. The free() function is used to deallocate the memory from the heap.']","['#include', 'int var1;', 'int var2 = 10;', 'void function1()', 'printf(""I am function1"");', 'int main()', 'function1();', 'return 0;', '#include', 'char a;    // uninitialized global variable..', 'int main()', 'static int a;   // uninitialized static variable..', 'return 0;', '#include', 'char string[] = ""javatpoint"";  // global variable stored in initialized data segment in read-write area..', 'int main()', 'static int i = 90;   // static variable stored in initialized data segment..', 'return 0;', '#include', 'int main()', 'int *ptr = (int*)malloc(sizeof(int)) ; // memory gets allocated in the heap segment.', 'return 0;']",[],[],['|||Text segment|||Initialized data segment|||Uninitialized data segment|||Stack|||Heap||||||Uninitialized data segment|||Initialized data segment||||||Initialized read-only area: It is an area where the values of variables cannot be modified.|||Initialized read-write area: It is an area where the values of variables can also be altered.|||']
154,['Balanced Parenthesis in C'],"['In this topic, we will learn how to check the balanced parenthesis in C. First, we will see what are the parenthesis. The parenthesis is represented by the brackets shown below:']","['https://www.javatpoint.com/binary-to-decimal-number-in-c', 'https://www.javatpoint.com/memory-layout-in-c', 'https://www.javatpoint.com/binary-to-decimal-number-in-c', 'https://www.javatpoint.com/memory-layout-in-c', 'https://www.javatpoint.com/binary-to-decimal-number-in-c']","['https://static.javatpoint.com/cpages/images/balanced-parenthesis-in-c.png', 'https://static.javatpoint.com/cpages/images/balanced-parenthesis-in-c2.png']",[],[],[],[],"[""Let's understand through examples."", 'Example 1: ( 2+5 ) * 4', 'Example 2: 2 * ( ( 4/2 ) + 5 )', 'The above expression has two opening and two closing brackets which means that the above expression is a balanced parenthesis.', 'Example 3: 2 * ( ( 4/2 ) + 5 ', 'Algorithm to check balanced parenthesis', 'Step 1: Set x equal to 0.', 'Step 2: Scan the expression from left to right.', 'For each opening bracket ""("", increment x by 1.', 'For each closing bracket "")"", decrement x by 1.', 'This step will continue scanning until x<0.', 'Step 3: If x is equal to 0, then', '""Expression is balanced.""', '""Expression is unbalanced.""', ""Let's understand the above algorithm through an example."", 'Suppose expression is 2 * ( 6 + 5 )', 'Implementation in C']","['These parentheses are used to represent the mathematical representation. The balanced parenthesis means that when the opening parenthesis is equal to the closing parenthesis, then it is a balanced parenthesis.', 'In the above expression, there is one opening and one closing parenthesis means that both opening and closing brackets are equal; therefore, the above expression is a balanced parenthesis.', 'The above expression has two opening brackets and one closing bracket, which means that both opening and closing brackets are not equal; therefore, the above expression is unbalanced. ', ""Now, we will check the balanced parenthesis by using a variable. The variable is used to determine the balance factor. Let's consider the variable 'x'. The algorithm to check the balanced parenthesis is given below:""]","[""Solution: First, the x variable is initialized by 0. The scanning starts from the variable '2', when it encounters '(' then the 'x' variable gets incremented by 1 and when the x reaches to the last symbol of the expression, i.e., ')' then the 'x' variable gets decremented by 1 and it's final value becomes 0. We have learnt in the above algorithm that if x is equal to 0 means the expression is balanced; therefore, the above expression is a balanced expression.""]","['Where, (   →\tOpening bracket', ')     →    Closing bracket', '#include', 'int main()', 'char expression[50]; // declaration of char type array', 'int x=0, i=0; // declaration of two integer type variables', 'printf(""\\nEnter an expression"");', 'scanf(""%s"", expression);', ""while(expression[i]!= '\\0')"", ""if(expression[i]=='(')"", '{', ""x++;    // incrementing 'x' variable"", '}', ""else if(expression[i]==')')"", '{', ""x--;   // decrementing 'x' variable"", 'if(x<0)', 'break;', '}', ""i++;       // incrementing 'i' variable."", 'if(x==0)', 'printf(""Expression is balanced"");', 'else', 'printf(""Expression is unbalanced"");', 'return 0;']",[],[],[]
155,['Binary to Decimal Number in C'],"[""This section will discuss the conversion of Binary numbers to Decimal numbers. Before going to the concept, we need to understand Binary numbers and decimal numbers. As we know, the computer does not understand the words or numbers that humans write or do. Instead, it only understands 0's and 1's. For example, when we type a word or number on a computer, various software or compilers help convert these numbers or words into binary form (0s and 1s bit). So that a computer machine can easily understand these. ""]","['https://www.javatpoint.com/gcd-of-two-numbers-in-c', 'https://www.javatpoint.com/balanced-parenthesis-in-c', 'https://www.javatpoint.com/gcd-of-two-numbers-in-c', 'https://www.javatpoint.com/balanced-parenthesis-in-c', 'https://www.javatpoint.com/gcd-of-two-numbers-in-c']",['https://static.javatpoint.com/cpages/images/binary-to-decimal-number-in-c.png'],[],"['Binary number', 'Decimal number']","['Algorithm to convert binary to decimal', 'Convert binary number into a decimal number using while loop', 'Convert binary number into the decimal number using for loop', 'Convert binary number into decimal number using function', 'Convert binary number into decimal number using array and function']",[],"[""Let's consider the C program to convert the combination of a binary number (0s and 1s) into the decimal number using a while loop."", 'Following are the iteration of the while loop, as follows:', '1st iteration:', 'rem = 1101 % 10 => 1', 'decimal_num = 0 + 1 * 1 => 1 (decimal_val = 0, rem = 1, & base = 1)', 'num = 1101 / 10 => 110', 'base = 1 * 2 => 2', '2nd iteration:', 'rem = 110 % 10 => 0', 'decimal_num = 1 + 0 * 2 => 1 (decimal_val = 1, rem = 0, & base = 2)', 'num = 110 / 10 => 11', 'base = 2 * 2 => 4', '3rd iteration:', 'rem = 11 % 10 => 1', 'decimal_num = 1 + 1 * 4 => 5 (decimal_val = 1, rem = 1, & base = 4)', 'num = 11 / 10 => 1', 'base = 4 * 2 => 8', '4th iteration:', 'rem = 1 % 10 => 1', 'decimal_num = 5 + 1 * 8 => 1 (decimal_val = 5, rem = 1, & base = 8)', 'num = 1 / 10 => 0', 'base = 8 * 2 => 16', ""Let's consider a program in C language to convert the combination of binary number (0s and 1s) into the decimal number using for loop."", ""Let's consider a program in C language to convert the combination of binary number (0s and 1s) into the decimal number using user defined function."", ""Let's consider a program in C language to convert the combination of binary number (0s and 1s) into the decimal number using function and array."", 'Decimal2.c']","['A decimal number is a number that contains 10 digits from 0 to 9. Its base is 10 because it collects 10 digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) and represents or makes the whole number using these ten digits.']","['A binary number is a number that represents information or data stored in a computer with a combination of 0s and 1s bits. It is also known as the base 2 numeral system because it has two bits, 0s, and 1s. These are binary numbers (0 and 1) 1001, 1010, 1101, 1111, 1010101 etc.', 'Explanations of the code: As we can see in the above program, it asks a binary number (0s and 1s) from the users to store the number into the variable num. At each iteration, a while loop checks the binary number condition and validates the given number should not be less than 0; otherwise, it exits from the loop.']","['#include', '#include', 'void main()', 'int num, binary_num, decimal_num = 0, base = 1, rem;', 'printf ("" Enter a binary number with the combination of 0s and 1s \\n"");', 'scanf ("" %d"", #); // accept the binary number (0s and 1s)', 'binary_num = num; // assign the binary number to the binary_num variable', 'while ( num > 0)', 'rem = num % 10; /* divide the binary number by 10 and store the remainder in rem variable. */', 'decimal_num = decimal_num + rem * base;', 'num = num / 10; // divide the number with quotient', 'base = base * 2;', 'printf ( "" The binary number is %d \\t"", binary_num); // print the binary number', 'printf ("" \\n The decimal number is %d \\t"", decimal_num); // print the decimal', 'getch();', '#include', '#include', '#include  // use math.h header file', 'void main()', 'int i, bin_num, decimal_num = 0, rem;', 'printf ("" Enter the binary number with the combination of 0s and 1s \\n"");', 'scanf (""%d"", &bin_num); // takes the binary number as the input', 'printf( "" \\n The binary number is %d"", bin_num); // print the binary number', 'for (i = 0; bin_num != 0; ++i)', 'rem = bin_num % 10;', 'bin_num = bin_num / 10;', 'decimal_num = decimal_num + (rem) * ( pow (2, i));', 'printf (""\\n Conversion from binary to decimal number is %d"", decimal_num);', 'getch();', '#include', '#include', 'int binaryTodecimal(int bin_num);', 'int main()', 'int bin_num, dec_num;', 'printf ("" Enter the binary number (0s and 1s) \\n"");', 'scanf (""%d"", &bin_num);', 'dec_num = binaryTodecimal (bin_num); // call the binaryTodecimal() function', 'printf ("" Conversion of the binary number to decimal number is %d"", dec_num);', 'int binaryTodecimal( int bin_num)', 'int decimal_num = 0, temp = 0, rem;', 'while (bin_num != 0)', 'rem = bin_num % 10;', 'bin_num = bin_num / 10;', 'decimal_num = decimal_num + rem * pow( 2, temp);', 'temp++;', 'return decimal_num;', '#include', '#include', 'int binaryTodecimal (char num[])', 'int i, deci_num, mul = 0;', 'for ( deci_num = 0, i = str_length(num) - 1; i >= 0; --i, ++mul)', 'deci_num = deci_num + (num[i] - 48) * (1 << mul);', 'return deci_num;', 'int str_length( char str[])', 'int i = 0;', ""while (str[i] != '\\0')"", 'return i;', 'int main()', 'char num[] = ""1101"";', 'int deci_num;', 'printf (""\\n The binary number is %s"", num);', 'printf (""\\n The decimal number of %s is %d"", num, binaryTodecimal(num));', 'return 0;']","['Enter a binary number with the combination of 0s and 1s\n1101\n The binary number is 1101\n The decimal number is 13', 'Enter the binary number with the combination of 0s and 1s\n10010\n\n The binary number is 10010\n Conversion from binary to decimal number is 18', 'Enter the binary number (0s and 1s)\n11001\n Conversion of the binary number to decimal number is 25', 'The binary number is 1101\nThe decimal number of 1101 is 13']",[],"['|||Take a binary number as the input.|||Divide the number by 10 and store the remainder into variable rem.|||decimal_num = decimal_num + rem * base;|||Initially, the decimal_num is 0, and the base is 1, where the rem variable stores the remainder of the number.|||Divide the quotient of the original number by 10.|||Multiply the base by 2.|||Print the decimal of the binary number.|||']"
156,['GCD of two numbers in C'],"['In this topic, we will learn about GCD and find out different ways to get GCD of two numbers in C programming languages. ']","['https://www.javatpoint.com/getchar-function-in-c', 'https://www.javatpoint.com/binary-to-decimal-number-in-c', 'https://www.javatpoint.com/getchar-function-in-c', 'https://www.javatpoint.com/binary-to-decimal-number-in-c', 'https://www.javatpoint.com/getchar-function-in-c']",['https://static.javatpoint.com/cpages/images/gcd-of-two-numbers-in-c.png'],[],[],"['GCD of two numbers using for loop', 'GCD of two numbers using while loop', 'Get the GCD of N numbers from the user', 'Get the GCD of N numbers from the user', 'Get the GCD of two numbers using user defined function', 'GCD of two numbers using the modulo operator ', 'GCD of two numbers using Recursion ', 'GCD of three numbers using if_else and for loop']",[],"[""Let's consider a program to get the GCD of two numbers in C using for loop."", ""Let's consider a program to get the GCD of two numbers in C using while loop."", 'Gcd_while.c', ""Let's consider a program to get the GCD of n numbers by taking the input from the users."", ""Let's consider a program to get the GCD of n numbers by taking the input from the users."", ""Let's consider a program to get the GCD of two numbers using user defined function."", ""Let's consider a program to find the GCD of two numbers using modulo operator."", ""Let's consider a program to find the GCD of two numbers in C using Recursion."", 'Recursion.c', 'In the above program, the recursive function GCD_Rec() continuously calls itself until the value of num2 is equal to 0. ', ""Let's consider a program to get the GCD of three numbers in C using if else statement and for loop.""]",[],"['The GCD is a mathematical term for the Greatest Common Divisor of two or more numbers. It is the Greatest common divisor that completely divides two or more numbers without leaving any remainder. Therefore, it is also known as the Highest Common Factor (HCF) of two numbers. For example, the GCD of two numbers, 20 and 28, is 4 because both 20 and 28 are completely divisible by 1, 2, 4 (the remainder is 0), and the largest positive number among the factors 1, 2, and 4 is 4. Similarly, the GCD of two numbers, 24 and 60, is 12.']","['#include', '#include', 'int main()', 'int n1, n2, i, GCD_Num;', 'printf ( "" Enter any two numbers: \\n "");', 'scanf ( ""%d %d"", &n1, &n2);', 'for( i = 1; i <= n1 && i <= n2; ++i)', 'if (n1 % i ==0 && n2 % i == 0)', 'GCD_Num = i; /* if n1 and n2 is completely divisible by i, the divisible number will be the GCD_Num */', 'printf ("" GCD of two numbers %d and %d is %d."", n1, n2, GCD_Num);', 'return 0;', '#include', '#include', 'int main()', 'int num1 = 50, num2 = 60;', 'while (num1 != num2)', 'if (num1 > num2)', 'num1 = num1 - num2;', 'num2 = num2 - num1;', 'printf( "" GCD of two numbers 50 and 60 is %d."", num2);', '#include', '#include', 'void main()', 'int n1, n2 = -1;', 'printf ("" Enter N numbers from the users ( 0 to exists from the loop) \\n"");', 'while ( 1)', 'scanf ( ""%d"", &n1); // A while loop continuously accepts the number', 'if ( n1 < 1) // n1 should be larger than 1', 'break;', 'else if ( n2 == -1)', 'n2 = n1; // assign the value of n1 to n2', 'else if(n1 < n2)', 'n2 = gcd_Num(n1, n2); // assign the function into the n2', 'n2 = gcd_Num( n2, n2); // else it stores the function value into the n2', 'printf ("" \\n GCD of all entered number is: %d"", n2);', 'getch();', 'int gcd_Num ( int x, int y)', 'int i;', 'for( i = x; i >= 1; i --)', '{\t// largest number that completely divides both number', 'if( x % i == 0 && y % i == 0)', 'break;', 'return i;', '#include', '#include', 'void main()', 'int n1, n2 = -1;', 'printf ("" Enter N numbers from the users ( 0 to exists from the loop) \\n"");', 'while ( 1)', 'scanf ( ""%d"", &n1); // A while loop continuously accepts the number', 'if ( n1 < 1) // n1 should be larger than 1', 'break;', 'else if ( n2 == -1)', 'n2 = n1; // assign the value of n1 to n2', 'else if(n1 < n2)', 'n2 = gcd_Num(n1, n2); // assign the function into the n2', 'n2 = gcd_Num( n2, n2); // else it stores the function value into the n2', 'printf ("" \\n GCD of all entered number is: %d"", n2);', 'getch();', 'int gcd_Num ( int x, int y)', 'int i;', 'for( i = x; i >= 1; i --)', '{\t// largest number that completely divides both number', 'if( x % i == 0 && y % i == 0)', 'break;', 'return i;', '#include', '#include', 'GetGCD (int x, int y);', 'int main()', 'int x, y, GCD = 0;', 'printf ( "" Enter the first number \\n "");', 'scanf (""%d"", &x);', 'printf ( "" Enter the second number \\n "");', 'scanf (""%d"", &y);', 'GCD = GetGCD( x, y); // call the GetGCD() function in main() function', 'printf ( "" GCD of the two numbers %d and %d is %d"", x, y, GCD);', 'getch();', 'GetGCD ( int x, int y)', 'while (y != 0)', 'if ( x > y) /* if x is greater than y, the if block is executed. */', 'x = x - y;', 'y = y - x;', 'return x;', '#include', '#include', 'void main()', 'int x , y;', 'printf ( "" Enter the first number: \\n "");', 'scanf ("" %d"", &x);', 'printf ( "" Enter the second number: \\n "");', 'scanf ("" %d"", &y);', 'printf ("" GCD of two number %d and %d is %d"", x, y, GetGCD( x, y));', 'getch();', 'int GetGCD (int x, int y)', 'if ( y == 0) // if y is equal to 0, it returns x', 'return x;', 'return GetGCD (y, x % y);', '#include', '#include', 'int GCD_Rec(int num1, int num2);', 'int main()', 'int num1, num2;', 'printf( "" Enter any two positive numbers \\n"");', 'scanf(""%d %d"", &num1, &num2);', 'printf("" GCD of two numbers %d and %d is %d"", num1, num2, GCD_Rec(num1, num2));', 'return 0;', 'int GCD_Rec(int num1, int num2)', 'if (num2 != 0)', 'return GCD_Rec( num2, num1 % num2);', 'return num1;', '#include', '#include', 'void main()', 'int n1, n2, n3;', 'printf ("" Enter any positive numbers: \\n "");', 'scanf ( "" %d %d %d"", &n1, &n2, &n3);', 'int GCD;', 'for ( GCD = GCD_fun( n1, n2, n3); GCD >= 1; GCD--)', 'if (n1 % GCD == 0 && n2 % GCD == 0 && n3 % GCD == 0)', 'break;', 'printf ("" GCD of three numbers %d, %d and %d is %d"", n1, n2, n3, GCD);', 'getch();', 'int GCD_fun ( int x, int y, int z)', 'if ( x >= y && x >= z)', 'return x;', 'else if ( y >= x && y >= z)', 'return y;', 'else if ( z >= x && z >= y)', 'return z;']","['Enter any two numbers:\n 96\n36\n GCD of two numbers 96 and 36 is 12.', 'GCD of two numbers 50 and 60 is 10.', 'GCD of two numbers 50 and 60 is 10.', 'Enter the N numbers from the users ( 0 to exists from the loop)\n196\n224\n48\n96\n36\n256\n0\n\n GCD of all entered number is: 4', 'Enter the first number\n96\n Enter the second number\n 132\n GCD of the two numbers 96 and 132 is 12', 'Enter the first number:\n 256\n Enter the second number:\n 92\n GCD of two number 256 and 92 is 4', 'Enter any two positive numbers:\n60\n48\nGCD of two numbers 60 and 48 is 12', 'Enter any positive numbers:\n 98\n49\n56\n GCD of three numbers 98, 49 and 56 is 7']",[],[]
157,['Getchar() function in C'],"['In this section, we will learn the getchar() function in the C programming language. A getchar() function is a non-standard function whose meaning is already defined in the stdin.h header file to accept a single input from the user. In other words, it is the C library function that gets a single character (unsigned char) from the stdin. However, the getchar() function is similar to the getc() function, but there is a small difference between the getchar() and getc() function of the C programming language. A getchar() reads a single character from standard input, while a getc() reads a single character from any input stream.']","['https://www.javatpoint.com/flowchart-in-c-programming-language', 'https://www.javatpoint.com/gcd-of-two-numbers-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/flowchart-in-c-programming-language', 'https://www.javatpoint.com/gcd-of-two-numbers-in-c', 'https://www.javatpoint.com/flowchart-in-c-programming-language']",['https://static.javatpoint.com/cpages/images/getchar-function-in-c.png'],[],[],"['Read a single character using the getchar() function', 'Read n characters from the user using getchar() function', 'Read a single character using the scanf() function', 'Read the characters using a do-while loop']",[],"['Now we write several getchar() function programs to accept single characters in C and print them using the putchar () function.', ""Let's consider a program to take a single using the getchar() function in C."", ""Let's consider a program to read n characters using the getchar() function in C."", ""Let's consider a program to read a character using the scanf() library function in C."", 'Here we again execute the above program, and this time, it shows the below results.', ""Let's consider a program to read the characters using do while and getchar() function in C."", 'Dowhile1.c', 'In the above program, a do-while loop continuously accepts the characters until the user passes the ENTER button to exit the loop.']","['It does not have any parameters. However, it returns the read characters as an unsigned char in an int, and if there is an error on a file, it returns the EOF at the end of the file.', 'As we can see in the above program, it takes a single character at the run time from the user using the getchar() function. After getting the character, it prints the letter through the putchar() function.']","['As we can see in the above output, a while loop continuously accepts a character from the user until the user does not pass the # character. Here the getchar() function takes a single character from the standard input and assigns them to a ch variable. Whereas the putchar() function prints the read character.', 'As we can see, when we execute the above program, it takes a single character or group of characters using the scanf() library function instead of the getchar() function. But there is a small difference; a scanf() function can take a single or group of characters from the user, whereas the getchar() function can only accept the single character.']","['int getchar (void);', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'char c;', 'printf (""\\n Enter a character \\n"");', 'c = getchar(); // get a single character', 'printf("" You have passed "");', 'putchar(c); // print a single character using putchar', 'getch();', '#include <stdio.h>', '#include <conio.h>', '#include <ctype.h>', 'int main()', 'char ch;', 'printf ("" Enter a character ( If we want to exit press #) \\n"");', ""while (ch != '#') /* accept the number till the user does not enter the # to exit from the loop. */"", 'ch = getchar();', 'printf ("" \\n We have entered the character : "");', 'putchar (ch); // print a single character', 'printf (""\\n"");', 'return 0;', '#include <stdio.h>', '#include <conio.h>', 'int main()', 'char ch;', 'printf (""\\n Enter the character \\n"");', 'scanf (""%c"", &ch); // get a single character, numeric or words', 'printf( "" You have entered %c"",  ch);  /* It print a single character or first letter of the words. */', 'return 0;', 'Enter the character', 'You have entered A', '#include <stdio.h>', '#include <ctype.h>', 'int main()', 'int ch, i = 0;', 'char str[150];', 'printf ("" Enter the characters from the keyboard (Press Enter button to stop).\\n"");', 'ch = getchar(); // takes character, number, etc from the user', 'str[i] = ch; // store the ch into str[i]', 'i++; // increment loop by 1', ""} while (ch != '\\n');  // ch is not equal to '\\n'"", 'printf(""Entered characters are %s "", str);', 'return 0;']","['Enter a character', 'A', 'You have passed A', 'Enter a character ( If we want to exit.. press #)', 'A', 'We have entered the character: A', 'We have entered the character:', 'B', 'We have entered the character: B', 'We have entered the character:', 'C', 'We have entered the character: C', 'We have entered the character:', 'Enter the character', 'A', 'You have entered A', 'Enter the characters from the keyboard (Press Enter button to stop).', 'Well b47gvb come', 'Entered characters are Well b47gvb come']",[],[]
158,['The flowchart in the C programming language'],"['In this article, we will understand how to create flow charts in the C programming language with the help of various examples.']","['https://www.javatpoint.com/simpson-method', 'https://www.javatpoint.com/getchar-function-in-c', 'https://www.javatpoint.com/simpson-method', 'https://www.javatpoint.com/getchar-function-in-c', 'https://www.javatpoint.com/simpson-method']","['https://static.javatpoint.com/cpages/images/flowchart-in-c.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c2.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c3.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c4.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c5.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c6.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c7.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c8.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c9.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c10.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c11.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c12.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c13.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c14.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c15.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c16.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c17.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c18.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c19.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c20.png', 'https://static.javatpoint.com/cpages/images/flowchart-in-c21.png']",[],"['What do you mean by flowchart?', 'Types of Flowchart', 'Rules or guidelines of Flow', 'chart:', 'Flowchart symbols:', 'Advantages of Flowchart in C:', 'Disadvantages of Flowchart in C:', 'Examples of flowchart:']","['Example 1:', 'Example 2:', 'Example 3:', 'Example 4:', 'Example 5:', 'Example 6:', 'Example 7:', 'Example 8:']",[],"['The various types of the flowchart are given below.', 'The various Rules or Guidelines for drawing the flowchart', 'are given below.', 'The different flowchart symbols have different conventional meanings.', 'The various symbols used in Flowchart Designs are given below.', 'Following are the various advantages of flowchart:', 'Following are the various disadvantages of flowchart:', 'The various examples of the flowchart are given below:', 'Design a flowchart for adding two numbers entered by the user.', 'Design a flowchart for finding the largest among three numbers entered by the user.', 'Design a flowchart for calculating the profit and loss according to the value entered by the user.', 'Draw a flowchart to calculate the average of two numbers.', 'Design a flowchart for the multiplication of three numbers entered by the user.', 'Design a flowchart for calculating the area of a rectangle.', 'Design a flowchart for calculating the Simple Interest according to the value entered by the user.', 'Design a flowchart for checking whether the number is positive or negative according to the number entered by the user.']",['The Flowchart is the most widely used graphical representation of an algorithm and procedural design workflows. It uses various symbols to show the operations and decisions to be followed in a program. It flows in sequential order.'],[],[],[],[],"[""|||Horizontal Flowchart|||Panoramic Flowchart|||Vertical Flowchart|||Architectural Flowchart||||||Only conventional flowchart symbols should be used.|||Proper use of names and variables in the flowchart.|||If the flowchart becomes large and complex, use connector symbols.|||Flowcharts should have start and stop points.||||||Terminal Symbol: In the flowchart, it is represented with the help of a circle for denoting the start and stop symbol. The symbol given below is used to represent the terminal symbol.||||||Input/output Symbol: The input symbol is used to represent the input data, and the output symbol is used to display the output operation. The symbol given below is used for representing the Input/output symbol.||||||Processing Symbol:It is represented in a flowchart with the help of a rectangle box used to represent the arithmetic and data movement instructions. The symbol given below is used to represent the processing symbol.||||||Decision Symbol: Diamond symbol is used for represents decision-making statements. The symbol given below is used to represent the decision symbol.||||||Connector Symbol:The connector symbol is used if flows discontinued at some point and continued again at another place. The following symbol is the representation of the connector symbol.||||||Flow lines: It represents the exact sequence in which instructions are executed. Arrows are used to represent the flow lines in a flowchart. The symbol given below is used for representing the flow lines:||||||Hexagon symbol (Flat): It is used to create a preparation box containing the loop setting statement. The symbol given below is used for representing the Hexagon symbol.||||||On-Page Reference Symbol: This symbol contains a letter inside that indicates the flow continues on a matching symbol containing the same letters somewhere else on the same page. The symbol given below is used for representing the on-page reference symbol.||||||Off-Page Reference: This symbol contains a letter inside indicating that the flow continues on a matching symbol containing the same letter somewhere else on a different page. The symbol given below is used to represent the off-page reference symbol.||||||Delay or Bottleneck: This symbol is used for identifying a delay in a flowchart. The alternative name used for the delay is the bottleneck. The symbol given below is used to represent the delay or bottleneck symbol.||||||Document Symbol: This symbol is used in a flowchart to indicate a document or report.The symbol given below is used to represent the document symbol.||||||Internal storage symbol: The symbol given below is used to represent the internal storage symbol.|||||||||Communication: A flowchart is a better way of communicating the logic of a program.|||Synthesis: Flowchart is used as working models in designing new programs and software systems.|||Efficient Coding: Flowcharts act as a guide for a programmer in writing the actual code in a high-level language.|||Proper Debugging: Flowcharts help in the debugging process.|||Effective Analysis: Effective analysis of logical programs can be easily done with the help of a related flowchart.|||Proper Documentation: Flowchart provides better and proper documentation. It consists of various activities such as collecting, organizing, storing, and maintaining all related program records.|||Testing: A flowchart helps in the testing process.|||Efficient program maintenance: The maintenance of the program becomes easy with the help of a flowchart.||||||Time-consuming: Designing a flowchart is a very time-consuming process.|||Complex: It isn't easy to draw a flowchart for large and complex programs.|||There is no standard in the flowchart; there is no standard to determine the quantity of detail.|||Difficult to modify: It is very difficult to modify the existing flowchart.|||""]"
159,['Simpson Method'],"['The Simpson is a numerical integration method that was given by Thomas Simpson and so was named the Simpson method. Although there are certain rules of Simpson, the most basic are the two rules of Simpson which are:']","['https://www.javatpoint.com/pyramid-patterns-in-c', 'https://www.javatpoint.com/flowchart-in-c-programming-language', 'https://www.javatpoint.com/pyramid-patterns-in-c', 'https://www.javatpoint.com/flowchart-in-c-programming-language', 'https://www.javatpoint.com/pyramid-patterns-in-c']","['https://static.javatpoint.com/cpages/images/simpson-method.png', 'https://static.javatpoint.com/cpages/images/simpson-method2.png', 'https://static.javatpoint.com/cpages/images/simpson-method3.png', 'https://static.javatpoint.com/cpages/images/simpson-method4.png', 'https://static.javatpoint.com/cpages/images/simpson-method5.png', 'https://static.javatpoint.com/cpages/images/simpson-method6.png', 'https://static.javatpoint.com/cpages/images/simpson-method7.png', 'https://static.javatpoint.com/cpages/images/simpson-method8.png', 'https://static.javatpoint.com/cpages/images/simpson-method9.png']",[],['Simpson 3/8 Rule'],"[""Simpson's 1/3 Rule"", ""Program Implementation for Simpson's 1/3 Rule"", 'Program to implement Simpson 3/8 rule']",[],"[""In this section, we will discuss both of these Simpson's rules and will also implement the example code of both the rules."", ""It is also known as Simpson's Rule where the rule says:"", 'where f(x) is the integrand, a is the lower limit, and b is the upper limit of integration in the expression.', 'Quadratic Interpolation', 'Then use step size h=(b-a)/2 and then it can be written as:', ""As it is h/3, i.e., 1/3 factor, we call it the Simpson's rule as Simpson's 1/3 rule."", ""The Simpson's rule can be derived via the below graph where we have approximated the integrated f(x) by P(x), which is the quadratic interpolant."", 'Numerical Example', ""For solving a numerical, we need to use the Simpson's rule i.e."", 'Numerical: Evaluate logx dx within limit 4 to 5.2.', 'Step 2: Calculate the value of h = (b - a)/2', 'Step 3: Put the values in the method and then we can calculate approximate value of integral using above formula:', '= h/3[( 1.38 + 1.64) + 4 * (1.43 + 1.52 +', '1.60 ) +2 *(1.48 + 1.56)]', ""Hence the approximation of the above integral is 1.827 using Simpson's 1/3 rule."", ""Below is the program code implementation in C for the Simpson's 1/3 rule:"", 'The output of the above code is shown below:', 'where f(x) is the integrand and h is the size of the interval which is calculated as h = (b - a)/n, and n is the interval limit here.', ""Now, let's see the program implementation to understand the logic behind the Simpson 3/8 rule."", 'Below is the program code implementation in C++:', 'The output of the above code is shown below:']","['Step 1: Choose a value in which the intervals will be divided, i.e., the value of n. So, for the given expression, first, we will divide the interval into six equal parts as the number of intervals should be even.', 'Step 3: Evaluate and calculate the values of x0 to xn. Consider y = f(x) and calculate the values of y0 to yn for x0 to xn. Here, we get the following data:', 'It is the second rule of Simpson and also similar to Simpson 1/3 rule but with a difference. The difference between the 1/3 and 3/8 rule is that in the Simpson 3/8 rule, the interpolant is a cubic polynomial. The Simpson 3/8 rule says:', 'Other than these discussed two rules of Simpson, there is third rule existence that is used in the naval architecture and ship stability estimation. However, in the general approach, it has no importance.']","['Replace the integrand f(x) with a quadratic polynomial P(x) which is the parabola and takes same values of limits a and b as f(x). It also calculates m = (a + b)/2 as in f(x). Hence, on using Lagrange Polynomial Interpolation and integration by substitution we get,']","['#include<stdio.h>', '#include<conio.h>', '#include<math.h>', '#define f(x) 1/(1+x*x)', 'int main()', 'float lower, upper, intgrl=0.0, stepSize, k;', 'int i, subInterval;', 'clrscr();', 'printf(""Enter lower integration limit: "");', 'scanf(""%f"", &lower);', 'printf(""Enter upper integration limit: "");', 'scanf(""%f"", &upper);', 'printf(""Enter sub intervals: "");', 'scanf(""%d"", &subInterval);', 'stepSize = (upper - lower)/subInterval;', 'intgrl = f(lower) + f(upper);', 'for(i=1; i<= subInterval-1; i++)', 'k = lower + i*stepSize;', 'if(i%2==0)', 'intgrl = intgrl + 2 * f(k);', 'intgrl= intgrl + 4 * f(k);', 'intgrl = intgrl * stepSize/3;', 'printf(""The integration is: %.3f"", intgrl);', 'getch();', 'return 0;', '#include<stdio.h>', '#include<conio.h>', '#include<math.h>', '#define f(x) 1/(1+x*x)', 'int main()', 'float lower, upper, intgrl=0.0, stepSize, k;', 'int i, subInterval;', 'clrscr();', 'printf(""Enter lower limit integration limit: "");', 'scanf(""%f"", &lower);', 'printf(""Enter upper integration limit: "");', 'scanf(""%f"", &upper);', 'printf(""Enter sub intervals: "");', 'scanf(""%d"", &subInterval);', 'stepSize = (upper - lower)/subInterval;', 'intgrl = f(lower) + f(upper);', 'for(i=1; i<= subInterval-1; i++)', 'k = lower + i*stepSize;', 'if(i%3 == 0)', 'intgrl = intgrl + 2 * f(k);', 'intgrl= intgrl + 3 * f(k);', 'intgrl = intgrl * stepSize*3/8;', 'printf(""The integration is: %.3f"", intgrl);', 'getch();', 'return 0;']",[],[],"[""|||Simpson's 1 rule: It is known as Simpson's 1/3 rule|||Simpson's 2 rule: It is known as Simpson's 3/8 rule|||""]"
160,['Pyramid Patterns in C'],"['This section will discuss the Pyramid pattern of numbers, Stars, and alphabets in the C programming language. All Pyramid patterns are in a polygon structure. The interviewer usually asks these patterns to examine the logical and thinking ability of the programmer. Once we understand the logic of the code, we can create various Pyramid patterns in C language and C++, JAVA, PYTHON, PHP, etc. programming languages.']","['https://www.javatpoint.com/random-function-in-c', 'https://www.javatpoint.com/simpson-method', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/php-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/programming-language', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/c-if-else', 'https://www.javatpoint.com/random-function-in-c', 'https://www.javatpoint.com/simpson-method', 'https://www.javatpoint.com/random-function-in-c']","['https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c2.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c3.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c4.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c5.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c6.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c7.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c8.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c9.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c10.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c11.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c12.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c13.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c14.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c15.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c16.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c17.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c18.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c19.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c20.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c21.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c22.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c23.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c24.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c25.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c26.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c27.png', 'https://static.javatpoint.com/cpages/images/pyramid-patterns-in-c28.png']",[],"['1. Star Pyramid Patterns', '2. Number Pyramid Patterns', '3. Alphabets Pyramid Patterns']","['Program to print the half Pyramid', 'Program to print an inverted half Pyramid Pattern', 'Program to print an inverted right half Pyramid', 'Program to print the right half Pyramid', 'Program to print the full Pyramid of Star in 180 degree', 'Program to print the full Pyramid of Star in the opposite direction', 'Program to print the full Pyramid of Star', 'Program to print the inverted full Pyramid of Star', 'Program to print the rhombus pattern of Star', 'Program to print the half Pyramid of number', 'Program to print an inverted half Pyramid Pattern', 'Program to print the right half Pyramid of number', 'Program to print an inverted right half Pyramid of number', 'Program to print the Floyd triangle', 'Program to print the diamond shaped Pyramid of number', 'Program to print the full Pyramid of number', 'Program to print the inverted full Pyramid of number', 'Program to print the Pascal triangle', 'Program to combine two half Pyramid of number', 'Program to print the half Pyramid of alphabets', 'Program to print the inverted half Pyramid of alphabets', 'Program to print the right half Pyramid of alphabets', 'Program to print the inverted half Pyramid of alphabets', 'Program to print the full Pyramid of alphabets', 'Program to print the inverted full Pyramid of alphabets', 'Program to print the diamond shaped Pyramid of alphabets', 'Program to print the full Pyramid of alphabets in 180 degrees']",[],"['Now we will create the various patterns of Pyramids in C programming languages using loops and if statements.', ""Let's consider an example to print the half Pyramid pattern using for loop."", ""Let's consider an example to print the Inverted half Pyramid pattern using for loop."", ""Let's consider an example to print a reverse right half Pyramid pattern using for loop."", ""Let's consider an example to print the right half Pyramid pattern using for loop."", ""Let's consider an example to print the full Pyramid of Star in 180 degree using for loop."", ""Let's consider an example to print the full Pyramid of Star in the opposite direction of 180 degrees using for loop."", ""Let's consider an example to print the full Pyramid of Star using for loop."", ""Let's consider an example to print the full Pyramid of Star using for loop."", ""Let's consider an example to print the rhombus pattern of Star using for loop."", ""Let's consider an example to print the half Pyramid pattern using for loop."", 'Example 2:', ""Let's consider an example to print the half Pyramid pattern of number using for loop."", ""Let's consider an example to print the Inverted half Pyramid pattern using for loop."", ""Let's consider an example to print the right half Pyramid pattern of number using for loop."", ""Let's consider an example to print a reverse right half Pyramid pattern of number using for loop."", ""Let's consider an example to print the Floyd Pyramid pattern using for loop."", ""Let's consider an example to print the diamond shaped Pyramid using for loop."", ""Let's consider an example to print the full Pyramid of number using for loop."", ""Let's consider an example to print the inverted full Pyramid of number using for loop."", ""Let's consider an example to print the Pascal triangle using for loop."", ""Let's consider an example to print the combination of two half Pyramid of number.."", ""Let's consider an example to print the half Pyramid pattern using for loop."", ""Let's consider an example to print the half Pyramid pattern using for loop."", ""Let's consider an example to print the half Pyramid pattern using for loop."", ""Let's consider an example to print the half Pyramid pattern using for loop."", ""Let's consider an example to print the full Pyramid pattern using for loop."", ""Let's consider an example to print the full Pyramid pattern using for loop."", ""Let's consider an example to print the full Pyramid pattern using for loop."", ""Let's consider an example to print the full Pyramid pattern in 180 degrees using for loop.""]",[],[],"['#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; ++i) // outer loop', 'for (j = 1; j <= i; ++j) // inner loop', 'printf (""* ""); // print the Star', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = rows; i > 0; i--) // define the outer loop', 'for (j = i; j > 0; j--) // define the inner loop', 'printf (""* ""); // print the Star', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = 1; j <= i; j++)', 'printf("" "");', 'for (k = i; k <= rows; k++)', 'printf(""*""); // print the Star', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = i; j < rows; j++)', 'printf("" "");', 'for (k = 1; k <= i; k++)', 'printf(""*""); // print the Star', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int num, i, j, m = 1; // declare local variables', 'printf ("" Enter the number to define the columns: \\n"");', 'scanf (""%d"", & num);', 'for (i = 1; i <= num; i++)', 'for (j = 1; j <= i; j++)', 'printf( ""* "");', 'printf(""\\n"");', 'for (i = num-1; i >= 1; i--)', 'for (j = 1; j <= i; j++)', 'printf (""* "");', 'printf(""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the columns: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = i; j < rows; j++)', 'printf("" "");', 'for (k = 1; k <= i; k++)', 'printf(""*""); // print the Star', 'printf (""\\n"");', 'for (i = 1; i <= rows; ++i)', 'for (j = 2; j <= i; j++)', 'printf("" "");', 'for (k = i; k <= rows; k++)', 'printf(""*""); // print the Star', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k = 0;', 'printf ("" Enter a number to define the rows: \\n"");', 'scanf (""%d"", &rows);', 'for ( i =1; i <= rows; i++)', 'for ( j = 1; j <= rows - i; j++)', 'printf (""  "");', 'for ( k = 1; k <= ( 2 * i - 1); k++)', 'printf (""* ""); // print the Star', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k, m = 1;', 'printf ("" Enter a number to define the rows: \\n"");', 'scanf (""%d"", &rows);', 'printf(""\\n"");', 'for ( i = rows; i >= 1; i--)', 'for ( j = 1; j <= m; j++)', 'printf (""  ""); // print the space', 'for ( k = 1; k <= ( 2 * i - 1); k++)', 'printf (""* ""); // print the Star', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'int space = rows-1, num=1;', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = 1; j <= space; j++)', 'printf(""  ""); / print the number', 'for ( k= 1; k <= num; k++)', 'printf("" *"");', 'if(space > i)', 'space = space -1;', 'num = num+2;', 'if(space <i)', 'space = space + 1;', 'num = num -2;', 'printf(""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; ++i)', 'for (j = 1; j <= i; ++j)', 'printf (""%d "", j);', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; ++i)', 'for (j = 1; j <= i; ++j)', 'printf (""%d "", i); // print the number', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = rows; i > 0; i--) // define the outer loop', 'for (j = i; j > 0; j--) // define the inner loop', 'printf (""%d "", j);', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = i; j < rows; j++)', 'printf(""  "");', 'for (k = 1; k <= i; k++)', 'printf("" %d"", k);', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = 1; j <= i; j++)', '{', 'printf(""  "");', '}', 'for (k = i; k <= rows; k++)', '{', 'printf("" %d"", k);', '}', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k = 1;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = 1; j <= i; j++)', 'printf(""%d "", k);', 'k += 1;', 'printf(""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'int space = rows-1, num=1;', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = 1; j <= space; j++)', 'printf("" "");', 'for ( k= 1; k <= num; k++)', 'printf(""%d"", k);', 'if(space > i)', 'space = space -1;', 'num = num+2;', 'if(space <i)', 'space = space + 1;', 'num = num -2;', 'printf(""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k = 0;', 'printf ("" Enter a number to define the rows: \\n"");', 'scanf (""%d"", &rows); // take a number', 'for ( i =1; i <= rows; i++)', 'for ( j = 1; j <= rows - i; j++)', 'printf (""  ""); // print the space', 'for ( k = 1; k <= ( 2 * i - 1); k++)', 'printf (""%d "",i); // print the number', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k, m = 1;', 'printf ("" Enter a number to define the rows: \\n"");', 'scanf (""%d"", &rows); // take a number', 'printf(""\\n"");', 'for ( i = rows; i >= 1; i--)', 'for ( j = 1; j <= m; j++)', 'printf (""  "");', 'for ( k = 1; k <= ( 2 * i - 1); k++)', 'printf (""%d "", i); // print the number', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k, m;', 'printf ("" Enter a number to define the rows: \\n"");', 'scanf (""%d"", &rows);', 'printf(""\\n"");', 'for ( i = 1; i <= rows; i++)', 'for ( j = 1; j <= rows-i; j++)', 'printf ("" "");', 'for ( k = 1; k <= i; k++)', 'printf (""%d"", k); // print the number', 'for (m = i-1; m >=1; m--)', 'printf(""%d"", m); // print the number', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n"");', 'scanf (""%d"", &rows); // take a number', 'printf(""\\n"");', 'for ( i = 1; i <= rows; i++)', 'for ( j = 1; j <= rows; j++)', 'if( j <= i)', 'printf (""%d"", j);', 'else', 'printf("" "");', 'for (j = rows; j >= 1; j--)', 'if(j <= i)', 'printf (""%d"", j);', 'else', 'printf("" "");', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; ++i) // define the outer loop', 'for (j = 1; j <= i; ++j) // define the inner loop', 'printf (""%c "", \'A\' + j - 1); // print the alphabets', 'printf (""\\n""); // jump to next line', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', ""int i, j, rows, ch = 'A';"", 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = rows; i > 1; i--)', 'for (j = 1; j < i; j++)', 'printf (""%c "", ch);', 'ch++;', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', ""int i, j, rows, k, ch='A';"", 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = i; j < rows; j++)', 'printf(""  "");', 'for (k = 1; k <= i; k++)', 'printf("" %c"", ch);', 'ch++;', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = 1; j <= i; j++)', '{', 'printf(""  "");', '}', 'for (k = i; k <= rows; k++)', '{', 'printf("" %c"", \'A\' + k);', '}', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', ""int i, j, rows, k, ch = 'A';"", 'printf ("" Enter a number to define the rows: \\n"");', 'scanf (""%d"", &rows);', 'for ( i =1; i <= rows; i++)', 'for ( j = 1; j <= rows - i; j++)', 'printf (""  "");', 'for ( k = 1; k <= ( 2 * i - 1); k++)', 'printf (""%c "", ch);', 'ch++;', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k, m = 1;', 'printf ("" Enter a number to define the rows: \\n"");', 'scanf (""%d"", &rows);', 'printf(""\\n"");', 'for ( i = rows; i >= 1; i--)', 'for ( j = 1; j <= m; j++)', 'printf (""  "");', 'for ( k = 1; k <= ( 2 * i - 1); k++)', 'printf (""%c "", \'A\' + k - 1);', 'printf (""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int i, j, rows, k;', 'printf ("" Enter a number to define the rows: \\n "");', 'scanf(""%d"", &rows);', 'int space = rows-1, num=1;', 'printf(""\\n"");', 'for (i = 1; i <= rows; i++)', 'for (j = 1; j <= space; j++)', 'printf("" "");', '}', 'for ( k= 1; k <= num; k++)', 'printf(""%c"", \'A\' + k - 1);', 'if(space > i)', 'space = space -1;', 'num = num+2;', 'if(space <i)', 'space = space + 1;', 'num = num -2;', 'printf(""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int num, i, j, m = 1; // declare local variables', 'printf ("" Enter the number to define the columns: \\n"");', 'scanf (""%d"", & num);', 'for (i = 1; i <= num; i++)', 'for (j = 1; j <= i; j++)', 'printf( ""%c"", \'A\' + j -1);', 'printf(""\\n"");', 'for (i = num-1; i >= 1; i--)', 'for (j = 1; j <= i; j++)', 'printf (""%c"", \'A\' + j -1);', 'printf(""\\n"");', 'getch();']",[],[],[]
161,['Random Function in C'],"[""In this topic, we will learn about the random function and how we can generate the random number in the C programming language. As we know, the random function is used to find the random number between any two defined numbers. In the C programming language, the random function has two inbuilt functions: rand() and srand() function. Let's understand these functions in the C language.""]","['https://www.javatpoint.com/floyds-triangle-in-c', 'https://www.javatpoint.com/pyramid-patterns-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/floyds-triangle-in-c', 'https://www.javatpoint.com/pyramid-patterns-in-c', 'https://www.javatpoint.com/floyds-triangle-in-c']",['https://static.javatpoint.com/cpages/images/random-function-in-c.png'],[],"['rand() function', 'srand() function', 'Program to generate float random numbers']","['Syntax', 'Generate the random numbers using the rand() function', 'Generate 5 random numbers using rand() function', 'Generate 10 random numbers from 1 to 100 using rand() function', 'Syntax', 'Generate the random numbers using srand() function', 'Generate the random numbers using srand() and time() function', 'Get a seeding value and print the random numbers using srand() function', 'Generate the random number using the random function']","['Note: If the random numbers are generated with the rand() function without calling the srand() function, it returns the same sequences of numbers each time the program is executed.']","[""Let's write a program to get the random number using rand() function."", ""Let's consider a program to generate 5 random number using rand() function in C programming language."", '2nd execution of the program:', '3rd execution of the program', 'As we can see in the above output, it returns the same sequence of random numbers on every execution of the programming code.', ""Let's consider a program to find the random number in C using rand() function."", 'rand_num.c', 'seed: It is an integer value that contains a seed for a new sequence of pseudo-random numbers.', ""Let's write a program to get the random numbers using srand() function in C."", 'srandNum.c', '2nd execution of the program:', 'As we can see in the above Output, it returns different sequences of random numbers on every execution of the programming code.', ""Let's write a program to get the random numbers using srand() with time() function."", 'srand_time.c', ""Let's write a program to get the seed value and random numbers using srand() function."", 'srand_time.c', '2nd execution of the program:', '3rd execution of the program:', ""Let's create a program to use stadlib header file to get the random number using random function in C."", ""Let's consider a program to print the float random numbers in C.""]","['The rand() function returns the random integers whose range from 0 to RAND_MAX. The RAND_MAX is a symbolic constant that defines in stdlib.h header file, whose value is greater but less than 32767 depending on the C libraries.', 'As we can see in the above Output, when we executed the same program again and again with different seeds values, it displays the different sequences of a random number from 1 to 6.']","['In the C programming language, the rand() function is a library function that generates the random number in the range [0, RAND_MAX]. When we use the rand() function in a program, we need to implement the stdlib.h header file because rand() function is defined in the stdlib header file. It does not contain any seed number. Therefore, when we execute the same program again and again, it returns the same values.', 'The srand() function is a C library function that determines the initial point to generate different series of pseudo-random numbers. A srand() function cannot be used without using a rand() function. The srand() function is required to set the value of the seed only once in a program to generate the different results of random integers before calling the rand() function.']","['int rand (void)', '#include <stdio.h>', '#include <conio.h>', '#include <stdlib.h>', 'void main()', 'printf ("" The random number is: %d"", rand());', 'printf (""\\n The random number is: %d"", rand());', 'printf ("" \\n The random number is: %d"", rand());', 'printf (""\\n The random number is: %d"", rand());', 'getch();', '#include <stdio.h>', '#include <stdlib.h>', 'int main()', 'int i;', '/* It returns the same sequence of random number', 'on every execution of the program. */', 'printf("" Random Numbers are: \\n"");', 'for (i = 0; i <5; i++)', 'printf("" %d"", rand());', 'return 0;', '#include <stdio.h>', '#include <conio.h>', '#include <stdlib.h>', 'int main()', 'int i, num;', 'printf ("" Program to get the random number from 1 to 100 \\n"");', 'for (i = 1; i <= 10; i++)', 'num = rand() % 100 + 1; // use rand() function to get the random number', 'printf ("" %d "", num);', 'getch();', 'int srand (unsigned int seed)', '#include <stdio.h>', '#include <stdlib.h>', '#include <time.h> // use time.h header file to use time', 'int main()', 'int num, i;', 'time_t t1; // declare time variable', 'printf("" Enter a number to set the limit for a random number \\n"");', 'scanf ("" %d"", #);', '/* define the random number generator */', 'srand ( (unsigned) time (&t1)); // pass the srand() parameter', 'printf(""\\n""); // print the space', '/* generate random number between 0 to 50 */', 'for (i = 0; i <num; i++)', 'printf( ""%d \\n"", rand() % 50);', 'return 0;', '#include <stdio.h>', '#include <stdlib.h>', 'int main()', 'int random = rand(); // assign the rand() function to random variable', 'srand( time(0));', 'printf( "" Seed = %d"", time(0));', 'printf( "" Random number = %d"", random);', 'return 0;', '#include <stdio.h>', '#include <stdlib.h>', 'int main()', 'int count;', 'unsigned int seed; // use for randomize number', 'printf("" Enter the Seeding value: \\n"");', 'scanf("" %u"", &seed);', 'srand (seed); // pass parameter', 'for (count = 1; count <= 10; ++count)', 'printf("" %5d"", 1 + (rand () % 6));', 'if (count % 5 == 0) // print the number in next line', 'puts("" "");', 'return 0;', '#include <stdio.h>', '#include <conio.h>', '#include <stdlib.h>', 'int main()', 'int i, num, max, temp;', 'printf ("" Enter a number to set the limit of random numbers \\n"");', 'scanf (""%d"", num);', 'printf ("" Enter the maximum number from you want to get the random number: \\n"");', 'scanf (""%d"", max);', 'printf ("" %d random number from 0 to %d number are: \\n"", num, max);', 'randomize();', 'for (i = 1; i <= num; i++)', 'temp = random(max)  /* use random() function to get the random number */', 'printf ("" %d "", temp); // print the temp', 'getch();', '#include <stdio.h>', '#include <stdlib.h>', '#include <time.h>', 'int main()', 'srand( (unsigned int) time(NULL));', 'float f1 = 5.0;', 'int i;', 'printf(?Float random numbers are: \\n?);', 'for (i = 0; i<10; i++)', 'printf(""%f"", ((float) rand()/ RAND_MAX) * f1);', 'printf(""\\n"");', 'return 0;']","['The random number is: 41', 'The random number is: 18467', 'The random number is: 6334', 'The random number is: 26500', 'Random Numbers are:', '41 18467 6334 26500 19169', 'Random Numbers are:', '41 18467 6334 26500 19169', 'Random Numbers are:', '41 18467 6334 26500 19169', 'Program to get the random number from 1 to 100', '42  68  35  1  70  25  79  59  63  65', 'Enter a number to set the limit for a random number', '10', '44      32      23      35      6       33      1       4       22      18', 'Enter a number to set the limit for a random number', '15', '13      30      24      27      4       30      28      35      36      13      44      39      21      5       7', 'Seed = 1619450091 Random number = 41', 'Enter the Seeding value:', '10', '6     4     3     3     6', '3     3     1     3     4', 'Enter the Seeding value:', '20', '2     4     2     4     5', '4     3     5     1     4', 'Enter the Seeding value:', '25', '1     6     1     6     4', '4     1     4     1     3', 'Enter a number to set the limit of random numbers', '17', 'Enter the maximum number from you want to get the random number:', '100', '15 random number from 0 to 100 number are:', '42  68  35  1  70  25  79  59  63  28 75 89 90 43 7 4 65', 'Float random numbers are:', '1.208075', '1.658376', '4.645070', '2.298807', '3.117161', '0.961486', '4.115573', '4.336223', '2.894833', '2.249825']",[],[]
162,"[""Floyd's Triangle in C""]","[""The Floyd's triangle is a right-angled triangle that contains consecutive natural numbers. In Floyd's triangle, the number starts with 1 in the top left corner, and then it consecutive filling the defined rows through the numbers.""]","['https://www.javatpoint.com/c-header-files', 'https://www.javatpoint.com/random-function-in-c', 'https://www.javatpoint.com/c-header-files', 'https://www.javatpoint.com/random-function-in-c', 'https://www.javatpoint.com/c-header-files']",[],[],[],"['Algorithm', ""Program to print the Floyd's triangle using for loop"", ""Program to print the Floyd's triangle using while loop"", ""Program to print the Floyd's triangle using the Recursion function"", ""Program to reverse the Floyd's triangle using for loop"", ""Program to print the star Floyd's triangle using for loop"", ""Program to print the Alphabets Floyd's triangle in C using for loop""]",[],"[""For example: suppose we have defined 5 rows in Floyd's triangle, it generates the following pattern in increasing order:"", ""Now we write several programs of Floyd's triangle using for loops in C language."", ""Let's consider an example to print the Floyd's triangle using for loop in C."", '2nd time execution of the program:', ""Let's consider an example to print the Floyd's triangle using while loop in C."", ""Let's consider a program to print the Floyd's triangle in C using the Recursion function."", 'Recursion.c', ""Let's consider a program to print the reverse Floyd's triangle in C using for loop."", ""Let's consider an example to print the Floyd's triangle using for loop in C."", 'program2.c', ""Let's consider an example to print the Floyd's triangle using for loop in C."", 'program5.c']",[],"[""In the above program, we have printed Floyd's triangle using nested for loop. The outer loop is used to define the rows, and the inner for loop representing the columns of Floyd's triangle. Where outer loop starts its execution from (i = 1) to the nth rows of the triangle. The inner loop starts its execution from (j = 1) and will be less than equal to i. Inside this loop, we used the k variable assigned by 1 and prints the incremented value by 1.""]","['7 8 9 10', '11 12 13 14 15', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int num, i, j, k = 1;', 'printf( "" Enter a number to define the rows in Floyd\'s triangle: \\n"");', 'scanf( ""%d"", #);', 'for (i = 1; i <= num; i++)', 'for (j = 1; j <= i; j++)', 'printf("" %2d"", k++); // print the number', 'printf( ""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int num, temp = 1, temp1 = 1, k;', 'printf( "" Enter a number to define the rows in Floyd\'s triangle: \\n"");', 'scanf( ""%d"", #);', 'while(temp1 <= num)', 'k = 1;', 'while (k <= temp1)', 'printf("" %2d"", temp); // print the number', 'temp++;', 'k++;', 'temp1++;', 'printf( ""\\n"");', 'getch();', '#include <stdio.h>', 'int row = 1;', 'int k = 1;', 'int main()', 'int num; // declare the variable', 'printf( "" Enter a number to define the rows in Floyd\'s triangle: \\n"");', 'scanf ("" %d"", #);', 'Floyd_triangle( num); // call the Floyd_triangle function', 'return 0;', 'void Floyd_triangle (int num) // function definition', 'int i;', 'if (num <= 0) // if num should be less than 0, it returns return.', 'return;', 'for ( i = 1; i <= row; i++)', 'printf( "" %d"", k++);', 'printf (""\\n"");', 'row++; // increment row by 1.', 'Floyd_triangle (num - 1);', '#include <stdio.h>', 'int main()', 'int num, i, j; // declare the variables', 'printf (""Enter a number to define the rows in Floyd\'s triangle: \\n"");', 'scanf ("" %d"", & num);', 'int k = num * ( num + 1) / 2;', 'for (i = num; i >= 0; i--)', 'for (j = 1; j <= i; j++)', 'printf ("" %d"", k--); /* at each iteration the value of k is decrement by 1. */', 'printf (""\\n"");', 'return 0;', '#include <stdio.h>', '#include <conio.h>', 'void main()', 'int num, i, j, k = 1;', 'printf( "" Enter a number to define the rows in Floyd\'s triangle: \\n"");', 'scanf( ""%d"", #);', 'for (i = 1; i <= num; i++)', 'for (j = 1; j <= i; j++)', 'printf("" *""); // print the star', 'printf( ""\\n"");', 'getch();', '#include <stdio.h>', '#include <conio.h>', 'void main()', ""int num, i, j, k = 'A';"", 'printf( "" Enter a number to define the rows in Floyd\'s triangle: \\n"");', 'scanf( ""%d"", #);', 'for (i = 1; i <= num; i++)', 'for (j = 1; j <= i; j++)', 'printf("" %c"", k); // print the Alphabets', 'k++;', 'printf( ""\\n"");', 'getch();']","[""Enter a number to define the rows in Floyd's triangle:"", '6', '1', '2  3', '4  5  6', '7  8  9 10', '11 12 13 14 15', '16 17 18 19 20 21', ""Enter a number to define the rows in Floyd's triangle:"", '5', '1', '2  3', '4  5  6', '7  8  9 10', '11 12 13 14 15', ""Enter a number to define the rows in Floyd's triangle:"", '6', '1', '2  3', '4  5  6', '7  8  9 10', '11 12 13 14 15', '16 17 18 19 20 21', ""Enter a number to define the rows in Floyd's triangle:"", '6', '1', '2 3', '4 5 6', '7 8 9 10', '11 12 13 14 15', '16 17 18 19 20 21', ""Enter a number to define the rows in Floyd's triangle:"", '6', '21 20 19 18 17 16', '15 14 13 12 11', '10 9 8 7', '6 5 4', '3 2', '1', ""Enter a number to define the rows in Floyd's triangle:"", '6', '*', '* *', '* * *', '* * * *', '* * * * *', '* * * * * *', ""Enter a number to define the rows in Floyd's triangle:"", '6', 'A', 'B C', 'D E F', 'G H I J', 'K L M N O', 'P Q R S T U']",[],['|||Outer for loop starts its iteration i = 1 up to n rows.|||Inner for loop starts its iteration from j = 1 up to (j <=i).|||&&&|||Create variables that hold rows and column values as i and j. Take a number to display the rows as num and set the variable k to 1as its initial value.|||Use nested for loops:||||||Outer for loop starts its iteration i = 1 up to n rows.|||Inner for loop starts its iteration from j = 1 up to (j <=i).||||||Print the values of k.|||Increment k by 1 or k = k + 1.|||Jump to newline after each iteration of the inner for loop.|||Stop|||']
163,['C Header Files'],"['A header file is a source file that has the .h extension. Header files contain the function prototypes or function declaration, whereas the source code contains the constants, macros, system-wide global variables. Whenever we require the definition of a function, then we simply include that header file in which function is declared.']","['https://www.javatpoint.com/abs-function-in-c', 'https://www.javatpoint.com/floyds-triangle-in-c', 'https://www.javatpoint.com/abs-function-in-c', 'https://www.javatpoint.com/floyds-triangle-in-c', 'https://www.javatpoint.com/abs-function-in-c']",['https://static.javatpoint.com/cpages/images/c-header-files.png'],[],[],['What is a header file?'],[],"['There are two types of header files defined in a program:', 'Include Operation', ""Let's suppose that header.h header file contains the following declaration:"", 'Definition of program.c source file is given below:', 'Compiler would replace the definition of header.h header file as shown below:', 'Once only headers', ""Let's understand the above scenario through an example."", 'Myheader.h', 'The following is the source code including the header file:', 'Create your own header file', 'The following are the steps to create our own header file:', 'Suppose the name of the file is multiply.h.', 'Some of the header files are given below:', ""Let's understand the usage of above header files through an example.""]","['If the header file in a source code is included twice, then it leads to an error, i.e., multiple declarations. To get rid of this problem, there is a standard way of enclosing the real content of the header file in a conditional as follows:', 'Header file is used to avoid writing large and complex code. When we create our own header file then we can simply use wherever we want. It enhances code readability and functionality.', 'In the above code, we have observed the usage of header files like string.h in which strlen() function is defined, and pow() function is defined in math.h header file.']","['Both the user-defined and system-defined header file can be included in a program with the help of using preprocessing directive (#). These preprocessor directives are used to instruct the compiler to process these files before compilation. There are two forms of including header file:', 'There is a difference between the header files given above. If the header file is defined within the predefined source path, we can specify the header within the angular brackets. If the header file is not defined within the predefined source path then we can specify the full path of the header file within the double-quotes.', 'In the above condition, if the header is included, then it will not be included again. If the header file is not included, then the header file will be included. The construct ""ifndef"" will become false if the header file is included twice and the preprocessor will skip all the contents of the file, and the compiler will ignore the second declaration of the header file.']","['int *test()', '#include""header.h""', 'int main()', 'puts(test());', 'return 0;', 'int *test()', 'int main()', 'puts(test());', 'return 0;', '#ifndef my_header_file', '#define my_header_file', '#ifndef my_header_file', '#define my_header_file', 'int a = 10;', '#include', '#include ""header.h""', '#include ""header.h""', 'int main()', 'printf(""The value of a is : %d"", a);', 'return 0;', 'In the above code, we have included the header file twice but it will not throw any error. Since we have specified the condition in the header file that if the header file is included then the header file should not be included again. When the program control comes to the second statement of #include ""header.h"" then it will not include this header file again.', 'int multiplyoftwonumbers(int a, int b)', 'return (a*b);', '#include<stdio.h>', '#include ""multiply.h""', 'int main()', 'int a =1, b = 2;  // definition of two numbers', 'cout << ""Result of multiplication is : ""', '<< multiplyoftwonumbers(a, b);', '#include', '#include', '#include', 'int main()', 'char str1[10] = ""hello"";', 'char str2[10] = ""javatpoint"";', 'long int a = pow(3, 3);', 'printf(""The value of a is %d"", a);', 'int length = strlen(str2);', 'printf(""\\nThe length of the string str2 is : %d"", length);', 'return 0;']",[],[],"['|||System defined header file: The header file which is predefined is known as a system defined header file.|||User-defined header file: The header file which is defined by the user is known as a user-defined header file.||||||#include<file>|||#include ""file""||||||First, we will write our own C or C++ code and save the file with .h extension. Below is the example to create our header file:||||||The second step is to include our header file in our main program.||||||#include<stdio.h>: It is used for performing input and output operations with the help of using printf() and scanf() function.|||#include<string.h>: It is used for performing string related functionalities like strlen(), strcmp(), etc.|||#include<iostream>: It is used to perform input and output operations with the help of using cin and cout objects.|||#include<math.h>: This header file contains some predefined math functions that perform mathematical operations, such as sqrt(), log2(), pow(), etc.|||#include<iomanip.h>: It contains the definition of set() and setprecision() function to limit the decimal places in variables.|||#include<signal.h>: It contains the definitions of functions that perform the signal handling functions such as signal(), raise().|||#include<errno.h>: It performs the error handling related operations like errno(), strerror(), perror(), etc.|||']"
164,['abs() function in C'],"['In this topic, we will discuss the abs function in the C programming language. The abs () function is a predefined function in the stdlib.h header file to return the absolute value of the given integers. So, if we want to return the absolute value of a given number, we need to implement the stdlib.h header file in the C program. The abs() function only returns the positive numbers. For example: Suppose we have an integer number -5, and we want to get the absolute number, we use the abs() function to return the positive number as 5. Furthermore, if we pass any positive number, it returns the same number.']","['https://www.javatpoint.com/atoi-function-in-c', 'https://www.javatpoint.com/c-header-files', 'https://www.javatpoint.com/https://www.javatpoint.com/for-loop-in-c', 'https://www.javatpoint.com/atoi-function-in-c', 'https://www.javatpoint.com/c-header-files', 'https://www.javatpoint.com/atoi-function-in-c']",['https://static.javatpoint.com/cpages/images/abs-function-in-c.png'],[],[],"['Program to get the absolute value of a number using the abs() function', 'Program to print the absolute values of the given integers using abs() function', 'Program to print the absolute values between two integers using for loop', 'Program to get the absolute value without using the abs() function']",['Note: The abs() function always returns a positive number even if the given number is either negative or positive.'],"[""Let's consider an example to print the absolute number using the abs() function in C program."", ""Let's create a program to print the absolute values of the given numbers using abs() function in C."", 'Absolute.c', ""Let's consider an example to print the absolute value between two integers using for loop in C program."", ""Let's create a C program to get the absolute value of a number without using the abs() function.""]","['In the above syntax, x is an integer data type that holds either negative or positive numbers and passed in the abs() function to return the positive value because the function has an integer data type.', 'As we can see in the above program, we have passed an integer number from the user. If the given number is negative, it will be multiplied by (-1) to return the positive number. And if the number is positive, it returns the same number.']",[],"['int abs (int x);', '#include', '#include   // use stdlib.h header file to use abs() function.', 'int main()', 'int num, n; // declare the local variable', 'printf ("" Enter a number to display the absolute value: "");', 'scanf (""%d"", #);', '/* define the abs() function to convert the given number into the absolute value. */', 'n = abs (num);', 'printf (""\\n The absolute value of %d is %d. "", num, n);', 'return 0;', '#include', '#include   // use stdlib.h header file to use abs() function.', '#include', 'int main()', 'printf ("" The absolute value of 27 is %d "", abs (27));', 'printf ("" \\n The absolute value of -16 is %d "", abs (-16));', 'printf ("" \\n The absolute value of -125 is %d "", abs (-125));', 'printf ("" \\n The absolute value of 18 is %d "", abs (18));', 'printf ("" \\n The absolute value of -29 is %d "", abs (-29));', 'printf ("" \\n The absolute value of 0 is %d "", abs (0));', 'return 0;', '#include <stdio.h>', '#include <stdlib.h>', '#include <math.h>', 'int main()', 'int i, num, last;', 'printf ("" Enter the first number: \\n "");', 'scanf ("" %d"", #);', 'printf (""\\n Enter the last number from which you want to get the absolute number: "");', 'scanf ("" %d"", &last);', 'for (i = num; i <= last; i++)', 'printf( ""\\n The absolute value of %d is %d. "", i, abs( i));', 'return 0;', '#include <stdio.h>', '#include <stdlib.h>  // use stdlib.h header file to use abs() function.', 'int getAbsolute (int num)', '/* if the passed value (num) is less than 0 (zero),', 'the number multiplied by (-1) to return an absolute value. */', 'if (num < 0)', 'num = ( -1 ) * num; // given negative number multiplied by (-1)', 'printf ("" The absolute value is: %d"", num);', 'printf ("" The absolute value is: %d"", num);', 'return num;', 'int main()', 'int num;', 'printf ("" Enter a number to display the absolute value: "");', 'scanf (""%d"", #);', 'getAbsolute(num);', 'return 0;']","['Enter a number to display the absolute value: -35', 'The absolute value of -35 is 35.', 'The absolute value of 27 is 27', 'The absolute value of -16 is 16', 'The absolute value of -125 is 125', 'The absolute value of 18 is 18', 'The absolute value of -29 is 29', 'The absolute value of 0 is 0', 'Enter the first negative number:', '-5', 'Enter the last number from which you want to get the absolute number:', '5', 'The absolute value of -5 is 5.', 'The absolute value of -4 is 4.', 'The absolute value of -3 is 3.', 'The absolute value of -2 is 2.', 'The absolute value of -1 is 1.', 'The absolute value of 0 is 0.', 'The absolute value of 1 is 1.', 'The absolute value of 2 is 2.', 'The absolute value of 3 is 3.', 'The absolute value of 4 is 4.', 'The absolute value of 5 is 5.', 'Enter a number to display the absolute value: -8', 'The absolute value is: 8']",[],[]
165,['Atoi() function in C'],"['In this article, we are going to discuss the atoi() function in c with their examples.']","['https://www.javatpoint.com/structure-pointer-in-c', 'https://www.javatpoint.com/abs-function-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/structure-pointer-in-c', 'https://www.javatpoint.com/abs-function-in-c', 'https://www.javatpoint.com/structure-pointer-in-c']",[],[],"['What is Atoi()?', 'Atoi() Library Function']","['Syntax of Atoi() function', 'Parameter', 'Return Value', 'Example 1:', 'Example 2:', 'Example 3:']",[],"['The pre-defined library function atoi() in C programming handles string to integer conversion. The function is specified in the header file stdlib.h.', 'The syntax of Atoi() function may be defined as:', ""Let's take an example to understand the atoi() function in C."", 'Output: After executing this above code, we will get the output as shown below:', 'Output: After executing this above code, we will get the output as shown below:', ""Let's take another C program to convert the string to integer using Atoi () function."", 'Output: After executing the above code, we will get the output as shown below:', 'The output is:']","['The Atoi() function works incrementally. In other words, it constructs numbers that are represented by strings one by one. The function only breaks when it encounters a non-ASCII.', 'The Atoi() function returns one of two possible values after breaking. If the function is called at the start of the string and no values have been transformed, it returns 0. Otherwise, it would return the recent number it has.', ""This example manages the negative numbers. If the first character is '-', place the sign as negative and then transform the remainder of the string to a number by multiplying the sign by it.""]","[""The atoi() function converts an integer value from a string of characters. The input string is a character string that may be turned into a return type numeric value. The function stops reading the input string when it encounters the first character that it does not consider part of a number. It may be the null character at the string ends. The atoi() function doesn't support the exponents and decimal numbers."", 'The function int atoi(const char *str) in the C library changes the string argument str to an integer. Generally, the function converts a string argument to an integer. The atoi() function skips all the white space characters at the starting of the string. It also converts the characters as the number part and stops when it finds the first non-number character.', 'Only one parameter, a string, is passed to the function. The important point to remember that the string is received as a constant. The atoi() function never changes a received string and only returns its transformed integer value. The header file ""stdlib.h"" supports all typecasting functions in the C language.', 'If str is a valid input, the function returns the integer number equal to the passed string number. If str has no valid input, the functions return zero value. In general, strings can be effectively converted to numbers include the following parameters:']","['int atoi(const char *str)', '#include <stdio.h>', '#include <stdlib.h>', '#include <string.h>', 'int main()', 'int val;', 'char string1[20] = ""99898989"";', 'val = atoi(string1);', 'printf(""String value = %s\\n"", string1);', 'printf(""Integer value = %d\\n"", val);', 'char string2[] = ""Javatpoint"";', 'val = atoi(string2);', 'printf(""String value = %s\\n"", string2);', 'printf(""Integer value = %d\\n"", val);', 'return (0);', '#include <stdio.h>', 'int myAtoi(char* str)', 'int res = 0;', 'int sign = 2;', 'int i = 0;', ""if (str[0] == '-') {"", 'sign = -2;', 'i++;', ""for (; str[i] != '\\0'; ++i)"", ""res = res * 5 + str[i] - '0';"", 'return sign * res;', 'int main()', 'char str[] = ""-23233"";', 'int val = myAtoi(str);', 'printf(""%d "", val);', 'return 0;', '#include <stdio.h>', '#include <stdlib.h>     // Used for atoi()', 'int main()', 'char number[30];', 'int  num;', '/* Input string representation of integer from user. */', 'printf(""Enter any integer: "");', 'fgets(number, 25, stdin);', '/* Convert string representation of number to integer */', 'num = atoi(number);', '/* Print converted integer */', 'printf(""Converted integer = %d\\n"", num);', 'return 0;']","['String value = 99898989', 'Integer value = 99898989', 'String value = Javatpoint', 'Integer value = 0', 'Output = -23233', 'Enter any integer = abc', 'Converted integer = 0', 'Enter any integer = 12221', 'Converted integer = 12221', 'Enter any integer = 1.1225112', 'Converted integer = 1']",[],"[""|||Strings made up entirely of ASCII digits '0123456789'.|||Strings that begin with the character '+' and are made up entirely of ASCII|||Strings made up entirely of ASCII digits and beginning with the character '-'.|||""]"
166,['Structure Pointer in C'],"[""In this section, we will discuss the Structure pointer in the C programming language. Before going to the concepts, let's understand the Structure. The structure is the collection of different data types grouped under the same name using the struct keyword. It is also known as the user-defined data type that enables the programmer to store different data type records in the Structure. Furthermore, the collection of data elements inside the Structure is termed as the member.""]","['https://www.javatpoint.com/sprintf-in-c', 'https://www.javatpoint.com/atoi-function-in-c', 'https://www.javatpoint.com/sprintf-in-c', 'https://www.javatpoint.com/atoi-function-in-c', 'https://www.javatpoint.com/sprintf-in-c']",['https://static.javatpoint.com/cpages/images/structure-pointer-in-c.png'],[],[],"['Syntax to define Structure', 'Program to demonstrate the structure and access their member', 'Structure Pointer', 'Declare a Structure Pointer', 'Initialization of the Structure Pointer', 'Access Structure member using pointer:', 'Program to access the structure member using structure pointer and the dot operator', 'Program to access the structure member using structure pointer and arrow (->) operator']",[],"['In this program creates a student structure and access its member using structure variable and dot (.) operator.', 'After defining the structure pointer, we need to initialize it, as the code is shown:', 'We can also initialize a Structure Pointer directly during the declaration of a pointer.', 'As we can see, a pointer ptr is pointing to the address structure_variable of the Structure.', 'There are two ways to access the member of the structure using Structure pointer:', ""Let's consider a program to access the structure members using the pointer and arrow (->) operator in C."", 'Pointer2.c']","['For example, suppose we want to create the records of a person containing name, age, id, city, etc., and these records cannot be grouped in the single dimension array. Therefore, we use the Structure to store multiple collections of data items.', ""Let's consider an example to create a Subject structure and access its members using a structure pointer that points to the address of the Subject variable in C.""]","['Here structure_name is the name of the Structure that is defined using the struct keyword. Inside the structure_name, it collects different data types (int, char, float) elements known as the member. And the last, str, is a variable of the Structure.', 'Explanation of the program: As we can see in the above program, we have created a structure with name student, and the student structure contains different members such as name (char), roll_no (int), state (char), age (int). The student structure also defines two variables like s1 and s2, that access the structure members using dot operator inside the main() function.', 'The structure pointer points to the address of a memory block where the Structure is being stored. Like a pointer that tells the address of another variable of any data type (int, char, float) in memory. And here, we use a structure pointer which tells the address of a structure in memory by pointing pointer variable ptr to the structure variable.', ""The declaration of a structure pointer is similar to the declaration of the structure variable. So, we can declare the structure pointer and variable inside and outside of the main() function. To declare a pointer variable in C, we use the asterisk (*) symbol before the variable's name."", ""In the above program, we have created the Subject structure that contains different data elements like sub_name (char), sub_id (int), sub_duration (char), and sub_type (char). In this, the sub is the structure variable, and ptr is the structure pointer variable that points to the address of the sub variable like ptr = &sub. In this way, each *ptr is accessing the address of the Subject structure's member."", 'In the above program, we have created an Employee structure containing two structure variables emp1 and emp2, with the pointer variables *ptr1 and *ptr2. The structure Employee is having the name, id, age, gender, and city as the member. All the Employee structure members take their respective values from the user one by one using the pointer variable and arrow operator that determine their space in memory.']","['struct structure_name', 'char name[40];', 'int roll_no;', 'float percentage;', 'char sub[30];', 'struct structure_name  str;  // str is a variable of the structure_name', '#include <stdio.h>', '#include <string.h>', 'struct student', 'char name[ 30];', 'int roll_no;', 'char state[100];', 'int age;', 'struct student s1, s2; // declare s1 and s2 variables of student structure', 'int main()', 'strcpy (s1.name, ""John"");', 's1.roll_no = 1101;', 'strcpy (s1.state, ""Los Angeles"");', 's1.age = 20;', 'strcpy (s2.name, "" Mark Douglas"");', 's2.roll_no = 111;', 'strcpy (s2.state, ""California"");', 's2.age = 18;', 'printf ("" Name of the student s1 is: %s\\t "", s1.name);', 'printf ("" \\n Roll No. of the student s1 is: %d\\t "", s1.roll_no);', 'printf ("" \\n The state of the student s1 is: %s\\t "", s1.state);', 'printf ("" \\n Age of the student s1 is: %d\\t "", s1.age);', 'printf (""\\n Name of the student s1 is: %s\\t "", s2.name);', 'printf ("" \\n Roll No. of the student s1 is: %d\\t "", s2.roll_no);', 'printf ("" \\n The state of the student s1 is: %s\\t "", s2.state);', 'printf ("" \\n Age of the student s1 is: %d\\t "", s2.age);', 'return 0;', 'struct structure_name *ptr;', 'ptr = &structure_variable;', 'struct structure_name *ptr = &structure_variable;', '#include <stdio.h>', 'struct Subject', 'char sub_name[30];', 'int sub_id;', 'char sub_duration[50];', 'char sub_type[50];', 'int main()', 'struct Subject sub; // declare the Subject variable', 'struct Subject *ptr; // create a pointer variable (*ptr)', 'ptr = ⊂ /* ptr variable pointing to the address of the structure variable sub */', 'strcpy (sub.sub_name, "" Computer Science"");', 'sub.sub_id = 1201;', 'strcpy (sub.sub_duration, ""6 Months"");', 'strcpy (sub.sub_type, "" Multiple Choice Question"");', 'printf ("" Subject Name: %s\\t "", (*ptr).sub_name);', 'printf ("" \\n Subject Id: %d\\t "", (*ptr).sub_id);', 'printf ("" \\n Duration of the Subject: %s\\t "", (*ptr).sub_duration);', 'printf ("" \\n Type of the Subject: %s\\t "", (*ptr).sub_type);', 'return 0;', '#include <stdio.h>', 'struct Employee', 'char name[30];', 'int id;', 'int age;', 'char gender[30];', 'char city[40];', 'struct Employee emp1, emp2, *ptr1, *ptr2;', 'int main()', 'ptr1 = &emp1', 'ptr2 = &emp2', 'printf ("" Enter the name of the Employee (emp1): "");', 'scanf ("" %s"", &ptr1->name);', 'printf ("" Enter the id of the Employee (emp1): "");', 'scanf ("" %d"", &ptr1->id);', 'printf ("" Enter the age of the Employee (emp1): "");', 'scanf ("" %d"", &ptr1->age);', 'printf ("" Enter the gender of the Employee (emp1): "");', 'scanf ("" %s"", &ptr1->gender);', 'printf ("" Enter the city of the Employee (emp1): "");', 'scanf ("" %s"", &ptr1->city);', 'printf ("" \\n Second Employee: \\n"");', 'printf ("" Enter the name of the Employee (emp2): "");', 'scanf ("" %s"", &ptr2->name);', 'printf ("" Enter the id of the Employee (emp2): "");', 'scanf ("" %d"", &ptr2->id);', 'printf ("" Enter the age of the Employee (emp2): "");', 'scanf ("" %d"", &ptr2->age);', 'printf ("" Enter the gender of the Employee (emp2): "");', 'scanf ("" %s"", &ptr2->gender);', 'printf ("" Enter the city of the Employee (emp2): "");', 'scanf ("" %s"", &ptr2->city);', 'printf (""\\n Display the Details of the Employee using Structure Pointer"");', 'printf (""\\n Details of the Employee (emp1) \\n"");', 'printf("" Name: %s\\n"", ptr1->name);', 'printf("" Id: %d\\n"", ptr1->id);', 'printf("" Age: %d\\n"", ptr1->age);', 'printf("" Gender: %s\\n"", ptr1->gender);', 'printf("" City: %s\\n"", ptr1->city);', 'printf (""\\n Details of the Employee (emp2) \\n"");', 'printf("" Name: %s\\n"", ptr2->name);', 'printf("" Id: %d\\n"", ptr2->id);', 'printf("" Age: %d\\n"", ptr2->age);', 'printf("" Gender: %s\\n"", ptr2->gender);', 'printf("" City: %s\\n"", ptr2->city);', 'return 0;']","['Name of the student s1 is: John', 'Roll No. of the student s1 is: 1101', 'state of the student s1 is: Los Angeles', 'Age of the student s1 is: 20', 'Name of the student s1 is:  Mark Douglas', 'Roll No. of the student s1 is: 111', 'The state of the student s1 is: California', 'Age of the student s1 is: 18', 'Subject Name:  Computer Science', 'Subject Id: 1201', 'Duration of the Subject: 6 Months', 'Type of the Subject:  Multiple Choice Question', 'Enter the name of the Employee (emp1): John', 'Enter the id of the Employee (emp1): 1099', 'Enter the age of the Employee (emp1): 28', 'Enter the gender of the Employee (emp1): Male', 'Enter the city of the Employee (emp1): California', 'Second Employee:', 'Enter the name of the Employee (emp2): Maria', 'Enter the id of the Employee (emp2): 1109', 'Enter the age of the Employee (emp2): 23', 'Enter the gender of the Employee (emp2): Female', 'Enter the city of the Employee (emp2): Los Angeles', 'Display the Details of the Employee using Structure Pointer', 'Details of the Employee (emp1)', 'Name: John', 'Id: 1099', 'Age: 28', 'Gender: Male', 'City: California', 'Details of the Employee (emp2) Name: Maria', 'Id: 1109', 'Age: 23', 'Gender: Female', 'City: Los Angeles']",[],['|||Using ( * ) asterisk or indirection operator and dot ( . ) operator.|||Using arrow ( -> ) operator or membership operator.|||']
167,['sprintf() in C'],"['sprintf stands for ""string print"". In C programming language, it is a file handling function that is used to send formatted output to the string. Instead of printing on console, sprintf() function stores the output on char buffer that is specified in sprintf.']","['https://www.javatpoint.com/range-of-int-in-c', 'https://www.javatpoint.com/structure-pointer-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-strings', 'https://www.javatpoint.com/range-of-int-in-c', 'https://www.javatpoint.com/structure-pointer-in-c', 'https://www.javatpoint.com/range-of-int-in-c']",[],[],[],"['Syntax', 'Parameter values', 'Example1', 'Example2', 'Example3']",[],"['The sprintf() function accepts some parameter values that are defined as follows -', 'str: It is the pointer to an array of char elements where the resulting string is stored. It is the buffer to put the data in.', ""Now, let's see some examples of using the sprintf() function in C."", 'This is a simple example to demonstrate the use of sprintf() function in C. Here, we are using multiple arguments with the sprintf() function.', 'This is another example of using the sprintf() function in C.']",[],"['format: It is C string that is used to describe the output along with placeholders for the integer arguments to be inserted in the formatted string. It is said to the string that contains the text to be written to buffer. It consists of characters along with the optional format specifiers starting with %.', 'This is another simple example to demonstrate the use of sprintf() function in C. In this example, there is a variable num which is float type. The sprintf() function convert the data of num variable into string and the resulting string will be stored in buffer.']","['int sprintf(char *str, const char *format, ...)', '#include <stdio.h>', 'int main()', 'char buffer[50];', 'int a = 15, b = 25, res;', 'res = a + b;', 'sprintf(buffer, ""The Sum of %d and %d is %d"", a, b, res);', 'printf(""%s"", buffer);', 'return 0;', '#include', 'int main() {', 'float num = 9.9;', 'printf(""Before using sprintf(), data is float type: %f\\n"", num);', 'char buffer[50]; //for storing the converted string', 'sprintf(buffer, ""%f"", num);', 'printf(""After using sprintf() data is string type: %s"", buffer);', '#include', '#include', 'int main () {', 'char buffer[20];', 'sprintf(buffer, ""Value of Pi = %f"", M_PI);', 'printf(""%s"", buffer);', 'return(0);']","['The Sum of 15 and 25 is 40', 'Before using sprintf(), data is float type: 9.900000', 'After using sprintf() data is string type: 9.900000', 'Value of Pi = 3.141593']",[],[]
168,['Range of Int in C'],"['In this article, we are going to discuss the range of int in C with programs.']","['https://www.javatpoint.com/c-program-to-convert-24-hour-time-to-12-hour-time', 'https://www.javatpoint.com/sprintf-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/size-of-operator-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/c-program-to-convert-24-hour-time-to-12-hour-time', 'https://www.javatpoint.com/sprintf-in-c', 'https://www.javatpoint.com/c-program-to-convert-24-hour-time-to-12-hour-time']",[],[],['Range of Int'],"['Find a range of data types manually without a C library', 'Find the range of data types using a C library']",[],"['The given formula defines the minimum and maximum range of a signed type:', 'The given formula defines the minimum and maximum range of an unsigned type:', ""Let's take an example to find the range of integers in C programming."", 'Output: After executing this code, we will get the output as shown below:', ""Now, let's take an example to understand how we can find the range of integers by using the C library."", 'Output: After executing this above code, we will get the output as shown below:', 'The output is:', 'Write a program that reads an integer type and checks it against the given range to see where it belongs.', 'Output: After executing this above code, we will get the output as shown below:', 'The Output is:', 'Output: After executing this above code, we will get the output as shown below:', 'The output is:']","['The method described above for obtaining any form of the range is interesting, but it is not recommended for use. Using the power of a pre-defined C library is often recommended.', 'The sizeof() operator is used to determine the size of an integer form or some other type. The given below program shows how to use the sizeof() operator to determine the sizes of various integer types in the system.']","[""Data types, and their size and range, play an important role in C programming. The sizeof() operator gives the number of bytes required to store a value in memory of a specific form. However, to prevent overflow and underflow errors in programming, we must be aware of a type's range. C specifies the exact minimum storage size for each integer form. For example, short requires at least two bytes, and long requires at least four bytes. The compiler determines the size and range of a data type. As a result, we should not hardcode the size and range values in the program."", 'Limits.h and float.h are two header files in C programming that define minimum and maximum constants. limits.h specifies constants for integer type and character types. Small and maximum size ranges, total bits, and many others. The float.h defines the floating-point numbers.']","['#include <stdio.h>', 'void printUnsignedRange(int bytes)', 'int bits = 8 * bytes;', 'unsigned long long to = (1LLU << (bits - 1)) + ((1LL << (bits - 1)) - 1);;', 'printf("" 0 to %llu\\n\\n"", to);', 'void printSignedRange(int bytes)', 'int bits = 8 * bytes;', 'long long from  = -(1LL << (bits - 1));', 'long long to    =  (1LL << (bits - 1)) - 1;', 'printf("" %lld to %lld\\n\\n"", from, to);', 'int main()', '/* print the range of integer type */', 'printf(""Range of int ="");', 'printSignedRange(sizeof(int));', 'printf(""Range of unsigned int ="");', 'printUnsignedRange(sizeof(unsigned int));', '/* print the range of character type */', 'printf(""Range of char ="");', 'printSignedRange(sizeof(char));', 'printf(""Range of unsigned char ="");', 'printUnsignedRange(sizeof(unsigned char));', '/*print the range of long type */', 'printf(""Range of long ="");', 'printSignedRange(sizeof(long));', 'printf(""Range of unsigned long ="");', 'printUnsignedRange(sizeof(unsigned long));', '/* print the range of short type */', 'printf(""Range of short ="");', 'printSignedRange(sizeof(short));', 'printf(""Range of unsigned short ="");', 'printUnsignedRange(sizeof(unsigned short));', '/* print the range of long long type */', 'printf(""Range of long long ="");', 'printSignedRange(sizeof(long long));', 'printf(""Range of unsigned long long ="");', 'printUnsignedRange(sizeof(unsigned long long));', 'return 0;', '#include <stdio.h>', '#include <limits.h>', '#include <float.h>', 'int main()', '/* print the range of signed integer type */', 'printf(""Range of signed int %d to %d\\n"", INT_MIN, INT_MAX);', '/* print the range of unsigned integer type */', 'printf(""Range of unsigned int 0 to %u\\n\\n"", UINT_MAX);', '/* print the range of signed char type */', 'printf(""Range of signed char %d to %d\\n"", SCHAR_MIN, SCHAR_MAX);', '/* print the range of unsigned char type */', 'printf(""Range of unsigned char 0 to %d\\n\\n"", UCHAR_MAX);', '/* print the range of signed long integer type */', 'printf(""Range of signed long int %ld to %ld\\n"", LONG_MIN, LONG_MAX);', '/* print the range of unsigned long integer type */', 'printf(""Range of unsigned long int 0 to %lu\\n\\n"", ULONG_MAX);', '/* print the range of signed short integer type */', 'printf(""Range of signed short int %d to %d\\n"", SHRT_MIN, SHRT_MAX);', '/* print the range of unsigned short integer type */', 'printf(""Range of unsigned short int 0 to %d\\n\\n"", USHRT_MAX);', '/* print the range of float type */', 'printf(""Range of float %e to %e\\n"", FLT_MIN, FLT_MAX);', '/* print the range of double type */', 'printf(""Range of double %e to %e\\n"", DBL_MIN, DBL_MAX);', '/* print the range of long double type */', 'printf(""Range of long double %Le to %Le\\n"", LDBL_MIN, LDBL_MAX);', 'return 0;', '#include <stdio.h>', 'int main() {', 'int x;', 'printf(""\\nInput an integer: "");', 'scanf(""%d"", &x);', 'if(x >=0 && x <= 25)', 'printf(""Range [0, 25]\\n"");', 'else if(x >=26 && x <= 40)', 'printf(""Range (26,50]\\n"");', 'else if(x >=41 && x <= 60)', 'printf(""Range (45,75]\\n"");', 'else if(x >61 && x <= 80) {', 'printf(""Range (61,80]\\n"");', 'printf(""Outside the range\\n"");', 'return 0;', '#include <stdio.h>', 'int main()', 'printf(""sizeof(short) = %d bytes\\n"",sizeof(short));', 'printf(""sizeof(int) = %d bytes\\n"",sizeof(int));', 'printf(""sizeof(unsigned int) = %d bytes\\n"",sizeof(unsigned int));', 'printf(""sizeof(long) = %d bytes\\n"",sizeof(long));', 'return 0;']","['Range of int = -2147483648 to 2147483647', 'Range of unsigned int = 0 to 4294967295', 'Range of char = -128 to 127', 'Range of unsigned char = 0 to 255', 'Range of long = -9223372036854775808 to 9223372036854775807', 'Range of unsigned long = 0 to 18446744073709551615', 'Range of short = -32768 to 32767', 'Range of unsigned short = 0 to 65535', 'Range of long long = -9223372036854775808 to 9223372036854775807', 'Range of unsigned long long = 0 to 18446744073709551615', 'Range of signed int -2147483648 to 2147483647', 'Range of unsigned int 0 to 4294967295', 'Range of signed char -128 to 127', 'Range of unsigned char 0 to 255', 'Range of signed long int -9223372036854775808 to 9223372036854775807', 'Range of unsigned long int 0 to 18446744073709551615', 'Range of signed short int -32768 to 32767', 'Range of unsigned short int 0 to 65535', 'Range of float 1.175494e-38 to 3.402823e+38', 'Range of double 2.225074e-308 to 1.797693e+308', 'Range of long double 3.362103e-4932 to 1.189731e+4932', 'Input an integer: 28', 'Range [26,50]', 'sizeof(short) = 2 bytes', 'sizeof(int) = 4 bytes', 'sizeof(unsigned int) = 4 bytes', 'sizeof(long) = 8 bytes']",[],['|||-(2N-1) to 2N-1 - 1 (Where N is sizeof(type) * 8 (it is the total number of bits used by integer type)).||||||0 to (2N-1) + (2N-1 - 1)|||']
169,['C Program to convert 24 Hour time to 12 Hour time'],"['In this tutorial, we will write a program that will convert a given time of 24-hour format to a 12-hour format.']","['https://www.javatpoint.com/what-is-double-in-c', 'https://www.javatpoint.com/range-of-int-in-c', 'https://www.javatpoint.com/what-is-double-in-c', 'https://www.javatpoint.com/range-of-int-in-c', 'https://www.javatpoint.com/what-is-double-in-c']",['https://static.javatpoint.com/cpages/images/c-program-to-convert-24-hour-time-to-12-hour-time.png'],[],"['Algorithm', 'C code Implementation', 'Code Explanation']",[],[],"['The time will be given in the format of - Hours: Minutes: Seconds', 'For example -', 'Input : 20:35:20', 'Output : 8:35:20 PM', 'Input : 00:15:40', 'Output : 12:15:40 AM', 'The case when there is 00 in the hour will be calculated as a separate case.']","['The midnight in 24-hour clock format is 00:00:00 and in 12-hour format is 12:00:00. Now we need to observe that the minutes and seconds in both the observations are the same. There is a change in hours only when there is a change in the meridian.', 'To check hours we will first convert the input string of hours into an integer. After changing it into integer we will modulo the hour with 12 and that will be in the 12-hour format.']",[],"['#include', '#include', 'void convert12(char* str) // Take the time array', ""int h1 = (int)str[0] - '0'; // Get the first digit of hour in 24 hour format"", ""int h2 = (int)str[1] - '0'; // Get the second digit of hour in 24 hour format"", 'int hh = h1 * 10 + h2; // Caluclate hour as an integer value', 'char Meridien[2]; // Make the AM or PM array', 'if (hh < 12) { // If the time is less than 12 hour it is AM', ""Meridien[0] = 'A';"", ""Meridien[1] = 'M';"", 'else {', ""Meridien[0] = 'P'; // When the time is 24 hour it is PM"", ""Meridien[1] = 'M';"", 'hh %= 12; // Calculate the 12 hour time', 'if (hh == 0) {', 'printf(""12""); // Base format as 00 in 24-hour is 12 in 12-hour', 'for (int i = 2; i < 8; ++i) {', 'printf(""%c"", str[i]);', '}', 'else {', 'printf(""%d"", hh);', 'for (int i = 2; i < 8; ++i) {', 'printf(""%c"", str[i]);', '}', 'printf("" %c%c"", Meridien[0], Meridien[1]);', 'int main()', 'char str[8] = ""17:35:20""; // array containing the time', 'convert12(str); // Call the function', 'return 0;', ""int h1 = (int)str[0] - '0'; // Get the first digit of hour in 24 hour format"", ""int h2 = (int)str[1] - '0'; // Get the second digit of hour in 24 hour format"", 'int hh = h1 * 10 + h2; // Caluclate hour as an integer value', 'if (hh < 12) { // If the time is less than 12 hour it is AM', ""Meridien[0] = 'A';"", ""Meridien[1] = 'M'"", ""Meridien[0] = 'P'; // When the time is 24 hour it is PM"", ""Meridien[1] = 'M';"", '}', 'hh %= 12; // Calculate the 12 hour time']",[],[],"[""|||Take the char str into the function.|||Obtain the first digit and second digit of the hour from the 24-hour format string. The '0' converts the string value to an integer.||||||As we have got individual digit of hour we will convert into a number.||||||Check if the hh is in 12 hour or 24 hour format using if-else and set the Meridian as AM or PM.||||||Modulo hh with 12 and convert the time into 12-hour format.||||||We will handle the 00 in 24-hour separately as it is the same as 12 in 12-hour format.|||After printing the hour print the minutes and seconds|||Print the minutes and seconds if it is not the 00 case|||Print the meridian of 12-hour format.|||""]"
170,['What is double in C?'],"['In this topic, we will discuss the double data type in the C programming language. The C language provides four main data types such as int, char, float, and float. The int data type is used to store an integer, the char data type is used to store character type, and the float data type is used to store decimal type data with single precision.']","['https://www.javatpoint.com/what-is-the-main-in-c', 'https://www.javatpoint.com/c-program-to-convert-24-hour-time-to-12-hour-time', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/what-is-the-main-in-c', 'https://www.javatpoint.com/c-program-to-convert-24-hour-time-to-12-hour-time', 'https://www.javatpoint.com/what-is-the-main-in-c']",['https://static.javatpoint.com/cpages/images/what-is-double-in-c.png'],[],[],"['Declaration and Initialization of double variable', 'Program to get the size of data types using sizeof() function', 'Program to convert feet into meter using the double data type', 'Program to convert an integer data into double data type', 'Program to convert Celsius to Fahrenheit temperature', 'Program to print the sum of two double number using function', 'float vs. double', 'Conclusion:']",[],"['For example, 4.5672, 2.45354, -5.22234, 3.12345678901, 0.15197e-7 etc.', 'Declaration of double variable: To declare a double variable in C, we need to specify the data type and a variable name.', 'Initialization of double variable: To initialize a variable, we can specify a valid value to a variable name.', 'Furthermore, we can declare and initialize the variable name in a single line.', ""Let's consider an example to print the size of all data types in C programming language."", 'Get_size.c', ""Let's consider an example to pass the double data number as the parameter to a function and then convert the feet into meters."", ""Let's consider an example to convert an int number into the double data type number in C."", ""Let's consider a program to convert a given Celsius temperature to Fahrenheit in C."", ""Let's consider a program to get the sum of two double numbers using a function in C.""]","['In the above program, we use a sizeof() function to get the size of an integer, float, character, and double data types bypassing the int, char, float, and double as the parameter.']","['A double is a data type in C language that stores high-precision floating-point data or numbers in computer memory. It is called double data type because it can hold the double size of data compared to the float data type. A double has 8 bytes, which is equal to 64 bits in size. In double data type, the 1 bit for sign representation, 11 bits for the exponent and the remaining 52 bits used for the mantissa. The range of double is 1.7E-308 to 1.7E+308. Double data can be represents in real number (1, 10), decimals (0.1, 11.002) and minus (-1, -0.00002). It can hold approximately 15 to 16 digits before and after the decimal point.', 'float data type: The float is a single-precision data type that holds a 32-bit floating-point or a decimal number and equals 4 bytes. It is a predefined data type or keyword whose meaning and name cannot be changed. The float data type is faster than double because its range is small. It can hold approximately 7 digits. Furthermore, the range of float data type is 1.5 x 10-45 to 3.4 x 1038.', 'double data type: A double is a precision data type hold 64 bits floating point or a decimal number and equals 8 bytes. It is also a predefined data type whose meaning and name cannot be changed. It is slower as compared to the float data type because its size is big. It can holds accommodate 15 to 17 digits. And the range of double data is 5.0 x 10-345 to 1.7 x 10308.', 'A double data type is double-precision floating pointing data. It can hold the double size of the data compared to the float data type because double takes 64 bits in computer memory, which is larger than 32 bits of float data type. It is usually used to deal with the huge computation of numbers and mantissa for precision makes. Many programmers choose the double data type because it gives accurate decimal-related results for complex numbers.']","['double data1;', 'Data1 = 3.2325467;', 'double data1 = 3.2325467;', '#include', '#include', 'void main()', 'printf ("" The size of int data type is %d"", sizeof(int));', 'printf ("" The size of char data type is %d"", sizeof(char));', 'printf ("" The size of float data type is %f"", sizeof(float));', 'printf ("" The size of double data type is %f"", sizeof(double));', 'getch()', '#include', 'double feet_to_meter (double f); // declare a user defined function', 'int main()', 'double feet, cnvt; // declare a variable as the double data type', 'printf ("" Enter the feet in double "");', 'scanf(""%lf"", &feet);', 'cnvt = feet_to_meter(feet); // call feet_to_meter function', 'printf ("" Converted feet to meter is: %lf"", cnvt);', 'return 0;', 'double feet_to_meter (double f)', 'return f / 3.28;', '#include', 'int main()', 'int sum = 17, count = 5;', 'double var;', 'var = (double) sum / count;', 'printf ("" Convert an int value into double data type is: %lf \\n"", var);', '#include', 'int main()', 'double c_temp, f_temp;', 'printf("" Enter the temperature in Celsius: "");', 'scanf ("" %lf"", &c_temp); // accept the Celsius temperature', 'f_temp  = ( c_temp * 1.8) + 32; // use conversion formula', 'printf ("" The temperature in Fahrenheit is: %lf"", f_temp);', 'return 0;', '#include', 'double sum_num(double p, double q);', 'int main()', 'double x, y, res;', 'printf ("" Enter two double numbers "");', 'scanf("" %lf %lf"", &x, &y); // take two double variable from user', 'res = sum_num(x, y); // call double function', 'printf ("" The result of two double number is: %lf"", res);', 'return 0;', 'double sum_num(double p, double q)', 'return p + q; // return the sum of double values']","['The size of int data type is 4', 'The size of char data type is 1', 'The size of float data type is 4', 'The size of double data type is 8', 'Enter the feet in double 45.78', 'Converted feet to meter is: 13.957317', 'Convert an int value into double data type is: 3.400000', 'Enter the temperature in Celsius: 56.8', 'The temperature in Fahrenheit is: 134.240000', 'Enter two double numbers 34.798', '43.567', 'The result of two double number is: 78.365000']",[],[]
171,['What is the main in C?'],"[""In this topic, we will discuss the main in C programming language. A main is a predefined keyword or function in C. It is the first function of every C program that is responsible for starting the execution and termination of the program. It is a special function that always starts executing code from the 'main' having 'int' or 'void' as return data type. In other words, a main() function is an entry point of the programming code to start its execution.""]","['https://www.javatpoint.com/calculator-program-in-c', 'https://www.javatpoint.com/what-is-double-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/calculator-program-in-c', 'https://www.javatpoint.com/what-is-double-in-c', 'https://www.javatpoint.com/calculator-program-in-c']",['https://static.javatpoint.com/cpages/images/what-is-the-main-in-c.png'],[],"['Importance points of the main() function', 'Types of the main() function']","['Syntax', 'Program to print a statement using main() function', 'Program to call nested function using main() function', 'void main() function', 'Program to demonstrate the void main() function', 'int main() function', 'Program to return a value using the int main() function in C', 'Program to print the iterative numbers using int main() function', 'Program to use the EXIT_SUCCESS statement in int main() function', 'int main (int argc, char *argv)', 'int main(void) function', 'Program to use the int main(void) function in C', 'void main (void) function', 'Program to use the void main(void) function in C']","[""Note: A return statement cannot be used with the void main() function because it return a value. Therefore, we can't use it with void main() function. However, we can use the EXIT statement with the void main() function.""]","[""Let's consider a program to print a statement without using the void and int main() function in C."", ""Let's consider a program to call nested function inside the main() function."", 'Following are the types of the main() function used in C', ""Let's write a simple program to demonstrate the void main() function."", ""Let's write a program to return a value using an int main() function in C language."", ""Let's consider an example to display the iterative sequence of number in C using int main() function."", ""Let's write a program in C to use the EXIT_SUCCESS statement in replacement of the return statement."", ""Let's consider a program to demonstrate the int main(void) function in C language."", 'prog_main.c', ""Let's consider a program to demonstrate the void main(void) function in C language."", 'Main_prog.c']","['A main() function can be called using command line arguments. It is a function that contains two parameters, integer (int argc) and character (char *argv) data type. The argc parameter stands for argument count, and argv stands for argument values.', 'An int main(void) function is similar to the int main() function to return an integer value. But we can pass more than one argument to the int main(), whereas the int main(void) can only be called without any argument.']","[""A void is a keyword that references an empty data type that has no return value. In other words, the void data type is used when we don't want to return any value to the calling function. Furthermore, it is used with the main() function to return nothing and can be used with user-defined and predefined functions in C programming."", 'An int is a keyword that references an integer data type. An int data type used with the main() function that indicates the function should return an integer value. When we use an int main() function, it is compulsory to write return 0; statement at the end of the main() function. The return 0; statement represents that the program has been successfully executed, whereas any other statement represents the unsuccessful termination of the program.', 'We can also use an EXIT_SUCCESS statement, which is the alternative statement of the return 0. If the program is not successfully executed, we can use the EXIT_FAILURE in the absence of the return 1 statement. The definition of the return statement in the standard input-output header file (stdio.h), whereas the EXIT statement is defined in the standard library (stdlib.h) header file.', 'A void main (void) function is similar to the void main() function that does not return a value. However, the void main() function can accept multiple parameters, but it does not return a value. It is an empty data type, whereas the void main(void) does not take any parameter because it has a predefined main(void) function.']","['#include', 'printf (""Welcome to the JavaTpoint"");', '#include', '#include', 'printf ("" It is a main() function "");', 'int fun2(); // jump to void fun1() function', 'printf (""\\n Finally exit from the main() function. "");', 'void fun1()', 'printf ("" It is a second function. "");', 'printf ("" Exit from the void fun1() function. "");', 'int fun2()', 'void fun1(); // jump to the int fun1() function', 'printf ("" It is a third function. "");', 'printf ("" Exit from the int fun2() function. "");', 'return 0;', 'void main()', '#include', '#include', 'void main()', 'printf ("" C is a programming language. "");', 'printf( "" \\n It is a void main() function in C. "" );', 'int main()', 'return 0;', '#include', 'int main()', 'printf ("" Welcome to the JAVATPOINT "");', 'printf( "" \\n It is an int main() function to return a value. "" );', 'return 0;', '#include', 'int main()', 'static int num = 20;', 'if ( --num)', 'printf ("" %d "", num); // print the number', 'main(20);', 'return 0;', '#include', '#include', 'int main()', 'printf ("" Hello, Welcome to the World "");', 'printf ("" \\n Use EXIT_SUCCESS on successful execution of the program "");', 'EXIT_SUCCESS; // use EXIT_SUCCESS statement in replacement of the return 0;', '#include', 'int main (void) // It does not accept any parameter other than void', 'printf ("" Welcome to the JAVATPOINT ""); // print the statement', 'return 0;', '#include', 'void main (void)', 'printf ("" Welcome to the JAVATPOINT ""); // print the statement']","['Welcome to the JavaTpoint', 'It is a main() function', 'Finally exit from the main() function.', 'C is a programming language.', 'It is a void main() function in C.', 'Welcome to the JAVATPOINT', 'It is an int main() function to return a value.', '19  18  17  16  15  14  13  12  11  10  9  8  7  6  5  4  3  2  1', 'Hello, Welcome to the World', 'Use EXIT_SUCCESS on successful execution of the program', 'Welcome to the JAVATPOINT', 'Welcome to the JAVATPOINT']",[],"['|||An operating system always calls the main() function when a programmers or users execute their programming code.|||It is responsible for starting and ends of the program.|||It is a universally accepted keyword in programming language and cannot change its meaning and name.|||A main() function is a user-defined function in C that means we can pass parameters to the main() function according to the requirement of a program.|||A main() function is used to invoke the programming code at the run time, not at the compile time of a program.|||A main() function is followed by opening and closing parenthesis brackets.||||||void main()|||int main()|||int main ( int argc, char **argv)|||int main( void)|||void main (void)|||']"
172,['Calculator Program in C'],"[""In this topic, we will discuss how we write a calculator program in the C programming language. A Calculator is a small electronic device used to perform various arithmetic operations like addition, subtraction, multiplication, division, percentage, etc. It makes our calculations easier and faster. It is a portable device that can use anywhere to perform simple mathematical operations. We use a scientific or sophisticated calculator in some situations, where we need to solve complex calculations like trigonometry functions, exponential operators, degrees, radians, log functions, hyperbolic functions etc. Let's discuss the various ways to create a calculator program in the C language.""]","['https://www.javatpoint.com/calloc-in-c', 'https://www.javatpoint.com/what-is-the-main-in-c', 'https://www.javatpoint.com/calloc-in-c', 'https://www.javatpoint.com/what-is-the-main-in-c', 'https://www.javatpoint.com/calloc-in-c']","['https://static.javatpoint.com/cpages/images/calculator-program-in-c.png', 'https://static.javatpoint.com/cpages/images/calculator-program-in-c2.png', 'https://static.javatpoint.com/cpages/images/calculator-program-in-c3.png', 'https://static.javatpoint.com/cpages/images/calculator-program-in-c4.png', 'https://static.javatpoint.com/cpages/images/calculator-program-in-c5.png']",[],['Algorithm of Calculator Program'],"['Different ways to create a Calculator Program in C', 'Example 1: Calculator Program in C using the switch statement', 'Example 2: Calculator Program in C using if else if statement', 'Example 3: Calculator Program in C using do while loop and switch statement', 'Example 4: Calculator Program in C using function and switch statement']",[],"['Step 2: Print the Choice (Addition, Subtraction, multiplication, division, etc.', 'Step 3: Enter the Choice', 'Step 4: Takes two numbers, n1 and n2', 'Step 5: Switch case jump to an operator selected by the user', 'Step 6: Store result into res variable.', 'Step 7: Display the operation result', 'Step 8: Exit from the program.', 'Following are the different ways to write a Calculator Program in the C language.', ""Let's write a program to create a Calculator program using switch statement"", ""Let's consider an example to write a simple Calculator program in C using if else if statement."", 'program2.c', ""Let's create a Calculator program using do while loop and switch case statement in C"", 'program3.c', ""Let's create a Calculator program using function and switch case statement in C"", 'program4.c']","['Step 1: Declare local variables n1, n2, res, opt. For example, where n1 and n2 take two numeric values, res will store results and opt variable define the operator symbols.']",[],"['#include', 'int main()', 'char opt;', 'int n1, n2;', 'float res;', 'printf ("" Choose an operator(+, -, *, /) to perform the operation in C Calculator \\n "");', 'scanf (""%c"", &opt); // take an operator', ""if (opt == '/' )"", 'printf ("" You have selected: Division"");', ""else if (opt == '*')"", 'printf ("" You have selected: Multiplication"");', ""else if (opt == '-')"", 'printf ("" You have selected: Subtraction"");', ""else if (opt == '+')"", 'printf ("" You have selected: Addition"");', 'printf ("" \\n Enter the first number: "");', 'scanf("" %d"", &n1); // take fist number', 'printf ("" Enter the second number: "");', 'scanf ("" %d"", &n2); // take second number', 'switch(opt)', ""case '+':"", 'res = n1 + n2; // add two numbers', 'printf ("" Addition of %d and %d is: %.2f"", n1, n2, res);', 'break;', ""case '-':"", 'res = n1 - n2; // subtract two numbers', 'printf ("" Subtraction of %d and %d is: %.2f"", n1, n2, res);', 'break;', ""case '*':"", 'res = n1 * n2; // multiply two numbers', 'printf ("" Multiplication of %d and %d is: %.2f"", n1, n2, res);', 'break;', ""case '/':"", 'if (n2 == 0)   // if n2 == 0, take another number', 'printf ("" \\n Divisor cannot be zero. Please enter another value "");', 'scanf (""%d"", &n2);', 'res = n1 / n2; // divide two numbers', 'printf ("" Division of %d and %d is: %.2f"", n1, n2, res);', 'break;', 'default:  /* use default to print default message if any condition is not satisfied */', 'printf ("" Something is wrong!! Please check the options "");', 'return 0;', '#include', 'int main()', 'char opt;', 'int n1, n2;', 'float res;', 'printf ("" Select an operator (+, -, *, /) to perform an operation in C calculator \\n "");', 'scanf (""%c"", &opt); // take an operator', 'printf ("" Enter the first number: "");', 'scanf("" %d"", &n1); // take fist number', 'printf ("" Enter the second number: "");', 'scanf ("" %d"", &n2); // take second number', ""if (opt == '+')"", 'res = n1 + n2; // add two numbers', 'printf ("" Addition of %d and %d is: %f"", n1, n2, res);', ""else if (opt == '-')"", 'res = n1 - n2; // subtract two numbers', 'printf ("" Subtraction of %d and %d is: %f"", n1, n2, res);', ""else if (opt == '*')"", 'res = n1 * n2; // multiply two numbers', 'printf ("" Multiplication of %d and %d is: %f"", n1, n2, res);', ""else if (opt == '/')"", 'if (n2 == 0)   // if n2 == 0, take another number', 'printf ("" \\n Divisor cannot be zero. Please enter another value "");', 'scanf (""%d"", &n2);', 'res = n1 / n2; // divide two numbers', 'printf ("" Division of %d and %d is: %.2f"", n1, n2, res);', 'printf("" \\n You have entered wrong inputs "");', 'return 0;', '#include', '#include', '#include', 'int main()', 'int op, n1, n2;', 'float res;', 'char ch;', 'printf ("" Select an operation to perform the calculation in C Calculator: "");', 'printf ("" \\n 1 Addition  \\t \\t 2 Subtraction \\n 3 Multiplication \\t 4 Division \\n 5 Square \\t \\t 6 Square Root \\n 7 Exit \\n \\n Please, Make a choice "");', 'scanf (""%d"", &op); // accepts a numeric input to choose the operation', 'switch (op)', 'case 1:', 'printf ("" You chose: Addition"");', 'printf (""\\n Enter First Number: "");', 'scanf ("" %d"", &n1);', 'printf ("" Enter Second Number: "");', 'scanf ("" %d"", &n2);', 'res = n1 + n2; // Add two numbers', 'printf ("" Addition of two numbers is: %.2f"", res);', 'break; // break the function', 'case 2:', 'printf ("" You chose: Subtraction"");', 'printf (""\\n Enter First Number: "");', 'scanf ("" %d"", &n1);', 'printf ("" Enter Second Number: "");', 'scanf ("" %d"", &n2);', 'res = n1 - n2; // subtract two numbers', 'printf ("" Subtraction of two numbers is: %.2f"", res);', 'break; // break the function', 'case 3:', 'printf ("" You chose: Multiplication"");', 'printf (""\\n Enter First Number: "");', 'scanf ("" %d"", &n1);', 'printf ("" Enter Second Number: "");', 'scanf ("" %d"", &n2);', 'res = n1 * n2; // multiply two numbers', 'printf ("" Multiplication of two numbers is: %.2f"", res);', 'break; // break the function', 'case 4:', 'printf ("" You chose: Division"");', 'printf (""\\n Enter First Number: "");', 'scanf ("" %d"", &n1);', 'printf ("" Enter Second Number: "");', 'scanf ("" %d"", &n2);', 'if (n2 == 0)', 'printf ("" \\n Divisor cannot be zero. Please enter another value "");', 'scanf (""%d"", &n2);', 'res = n1 / n2; // divide two numbers', 'printf ("" Division of two numbers is: %.2f"", res);', 'break; // break the function', 'case 5:', 'printf ("" You chose: Square"");', 'printf (""\\n Enter First Number: "");', 'scanf ("" %d"", &n1);', 'res = n1 * n1; // get square of a number', 'printf ("" Square of %d number is: %.2f"", n1, res);', 'break; // break the function', 'case 6:', 'printf ("" You chose: Square Root"");', 'printf (""\\n Enter First Number: "");', 'scanf ("" %d"", &n1);', 'res = sqrt(n1); // use sqrt() function to find the Square Root', 'printf ("" Square Root of %d numbers is: %.2f"", n1, res);', 'break; // break the function', 'case 7:', 'printf ("" You chose: Exit"");', 'exit(0);', 'break; // break the function', 'default:', 'printf("" Something is wrong!! "");', 'break;', 'printf ("" \\n \\n ********************************************** \\n "");', '} while (op != 7);', 'return 0;', '#include', '#include', '#include', '#include', 'int addition();', 'int subtract();', 'int multiply();', 'int divide();', 'int sq();', 'int sqrt1();', 'void exit();', 'int main()', 'int op;', 'printf ("" Select an operation to perform the calculation in C Calculator: "");', 'printf ("" \\n 1 Addition  \\t \\t 2 Subtraction \\n 3 Multiplication \\t 4 Division \\n 5 Square \\t \\t 6 Square Root \\n 7 Exit \\n \\n Please, Make a choice "");', 'scanf (""%d"", &op); // accepts a numeric input to choose the operation', 'switch (op)', 'case 1:', 'addition(); /* It call the addition() function  to add the given numbers */', 'break; // break the function', 'case 2:', 'subtract(); /* It call the subtract() function  to subtract the given numbers */', 'break; // break the function', 'case 3:', 'multiply(); /* It call the multiply() function  to multiply the given numbers */', 'break; // break the function', 'case 4:', 'divide(); // It call the divide() function  to divide the given numbers', 'break; // break the function', 'case 5:', 'sq(); // It call the sq() function  to get the square of given numbers', 'break; // break the function', 'case 6:', 'sqrt1(); /* It call the sqrt1() function  to get the square root of given numbers */', 'break; // break the function', 'case 7:', 'exit(0); // It call the exit() function  to exit from the program', 'break; // break the function', 'default:', 'printf("" Something is wrong!! "");', 'break;', 'printf ("" \\n \\n ********************************************** \\n "");', '} while (op != 7);', 'return 0;', 'int addition()', 'int i, sum = 0, num, f_num; // declare a local variable', 'printf ("" How many numbers you want to add: "");', 'scanf (""%d"", #);', 'printf ("" Enter the numbers: \\n "");', 'for (i = 1; i <= num; i++)', 'scanf("" %d"", &f_num);', 'sum = sum + f_num;', 'printf ("" Total Sum of the numbers = %d"", sum);', 'return 0;', 'int subtract()', 'int n1, n2, res;', 'printf ("" The first number is: "");', 'scanf (""  %d"", &n1);', 'printf ("" The second number is: "");', 'scanf (""  %d"", &n2);', 'res = n1 - n2;', 'printf ("" The subtraction of %d - %d is: %d"", n1, n2, res);', 'int multiply()', 'int n1, n2, res;', 'printf ("" The first number is: "");', 'scanf (""  %d"", &n1);', 'printf ("" The second number is: "");', 'scanf (""  %d"", &n2);', 'res = n1 * n2;', 'printf ("" The multiply of %d * %d is: %d"", n1, n2, res);', 'int divide()', 'int n1, n2, res;', 'printf ("" The first number is: "");', 'scanf (""  %d"", &n1);', 'printf ("" The second number is: "");', 'scanf (""  %d"", &n2);', 'if (n2 == 0)', 'printf ("" \\n Divisor cannot be zero. Please enter another value "");', 'scanf (""%d"", &n2);', 'res = n1 / n2;', 'printf ("" \\n The division of %d / %d is: %d"", n1, n2, res);', 'int sq()', 'int n1, res;', 'printf ("" Enter a number to get the Square: "");', 'scanf (""  %d"", &n1);', 'res = n1 * n1;', 'printf ("" \\n The Square of %d is: %d"", n1, res);', 'int sqrt1()', 'float res;', 'int n1;', 'printf ("" Enter a number to get the Square Root: "");', 'scanf (""  %d"", &n1);', 'res = sqrt(n1);', 'printf ("" \\n The Square Root of %d is: %f"", n1, res);']",[],[],['|||Calculator Program in C using the switch statement|||Calculator Program in C using if else if statement|||Calculator Program in C using do-while loop and switch statement|||Calculator Program in C using function and switch statement|||']
173,['Calloc in C'],"[""This topic will discuss how to create dynamic memory allocation using the calloc() function in the C programming language. Before going through the concepts, let's discuss the dynamic memory allocation in C. Dynamic memory is a structure programming procedure that allows users to allocate the memory at the run time of a program. Using dynamic memory allocation, we can increase or decrease the memory during the execution of a program. In this way, it avoids the wastage of computer memory. A memory allocation is divided into two parts are malloc() and calloc() function. ""]","['https://www.javatpoint.com/user-defined-vs-library-function-in-c', 'https://www.javatpoint.com/calculator-program-in-c', 'https://www.javatpoint.com/user-defined-vs-library-function-in-c', 'https://www.javatpoint.com/calculator-program-in-c', 'https://www.javatpoint.com/user-defined-vs-library-function-in-c']",['https://static.javatpoint.com/cpages/images/calloc-in-c.png'],[],[],"['Program to check dynamic memory is allocated using calloc() function', 'Program to demonstrate the use of the calloc() function', 'Program to release dynamic memory allocation using free() function']",[],"['Return: It returns the base address of the first block to the ptr variable.', ""Let's write a simple program to check whether the dynamic memory is allocated in C."", ""Let's consider creating dynamic memory allocation using calloc() function and storing data into the memory blocks."", 'Program2.c', 'Here free() is a function that releases the allocated memory using the pointer ptr variable.']","['In the above syntax, the calloc() function has two parameters. The first parameter defines the number of blocks and the second parameter defines the size of each block in memory. The size of the blocks and cast_type can be in int, char, float, etc.', ""Let's consider creating dynamic memory allocation using the calloc() function and then releasing occupied space using the free() function in the C program.""]","['A calloc() function is a predefined library function that stands for contiguous memory allocation. A calloc() function is used to create multiple blocks at the run time of a program having the same size in the memory. A calloc function is defined inside the stdlib.h header file. It has two parameters, no. of blocks and the size of each block. When the dynamic memory is allocated using the calloc() function, it returns the base address of the first block, and each block is initialized with 0. And if memory is not created, it returns a NULL pointer.', 'For example, suppose we want to create three blocks of memory using the calloc() function, we need to pass two parameters, a number of blocks (3) and the size of each block (int, char, float, etc.) in the byte. In this way, it creates three blocks whose size is the same inside the computer memory.', 'free() function: A free() function is used to release the dynamic memory which is created either calloc() or malloc() function. These allocated memories cannot be freed to their own, and they will exist till the end of the program. So, it is our responsibility to release that memory that can be reused, and hence we explicitly use the free() function to release the memory.']","['ptr = (cast_type *) calloc ( number_of_blocks, size_of_block);', '#include', '#include', 'int main()', 'int *ptr;', '/* use calloc() function to define the no. of blocks and size of each blocks. */', 'ptr = calloc (4, sizeof(int)); // here 4 is the no. of block and int is the size of block', 'if (ptr != NULL)', 'printf ("" Memory is created successfully \\n"");', 'printf ("" Memory is not created "");', 'return 0;', '#include', '#include', '#include', 'void main()', 'int n, *ptr, *p, i, sum = 0;', '/* n = number of elements, *ptr = store base address of the dynamic memory,', '*p store temporary address of the *ptr */', 'printf ("" Enter the number of elements: "");', 'scanf ("" %d"", &n); // it takes number of elements', 'ptr = (int *) calloc (n, sizeof(int));', 'p = ptr; // assign the address of ptr', 'if (ptr == NULL) // it checks whether the memory is allocated', 'printf ("" Memory is not allocated. "");', 'exit(0); // exit from the program', 'printf ("" Enter %d numbers \\n"", n);', 'for ( i = 1; i <= n; i++)', 'scanf ( ""%d"", ptr);', 'sum = sum + *ptr;', 'ptr++;', 'printf ("" Elements are: "");', 'for (i = 1;  i <= n; i++)', 'printf ("" %d"", *p);', 'printf ("" \\n The addition of the elements is: %d "", sum);', 'getch();', 'free (ptr);', '#include', '#include', '#include', 'void main()', 'int n, *ptr, *p, i, sum = 0;', 'printf ("" Define the number of elements to be entered: "");', 'scanf ("" %d"", &n);', 'ptr = (int *) calloc (n, sizeof(int));', 'p = ptr; // store the base address in p', 'if (ptr == NULL)', 'printf ("" Out of memory "");', 'exit(0);', 'printf ("" Enter the elements \\n"", n);', 'for ( i = 1; i <= n; i++)', 'scanf ( ""%d"", ptr);', 'sum = sum + *ptr;', 'ptr++;', 'printf ("" Elements are: "");', 'for (i = 1;  i <= n; i++)', 'printf ("" %d"", *p);', 'printf ("" \\n The addition of the elements is: %d "", sum);', 'free(ptr); /* Use free() function to release the dynamic memory allocation */', 'getch();']","['Memory is created successfully', 'Enter the number of elements: 5', 'Enter 5 numbers', '1', '2', '3', '4', '5', 'Elements are:  1 2 3 4 5', 'The addition of the elements is: 15', 'Define the number of elements to be entered: 6', 'Enter the elements', '2', '4', '6', '8', '10', '12', 'Elements are:  2 4 6 8 10 12', 'The addition of the elements is: 42']",[],[]
174,['Difference between the user-defined and the library function in C'],"[""This topic will discuss the difference between the user-defined and the library function in the C programming language. Before going to the topic, let's understand the function in the C language. A function is a self-contained group of subprograms used to perform some specific, well-defined task. The functions are divided into two parts: the user-defined and the library function.""]","['https://www.javatpoint.com/memset-c', 'https://www.javatpoint.com/calloc-in-c', 'https://www.javatpoint.com/memset-c', 'https://www.javatpoint.com/calloc-in-c', 'https://www.javatpoint.com/memset-c']",['https://static.javatpoint.com/cpages/images/user-defined-vs-library-function-in-c.png'],[],"['User- defined Function', 'Library Function', 'Difference between the user-defined and the library function in C']","['Function Definition', 'Function Calling', 'Function Declaration', 'Program to calculate the area of circle using user-defined function in C', 'Program to sum two numbers using user defined function in C', 'Program to demonstrate the library function in C']",[],"['The function definition defines the actual body of the function that perform some specific tasks in a program.', 'Here, arg1, arg2 are the actual arguments passed to the function_name.']","['Here return type represents the function that can return any defined data type values. The return type value can be int, float, char, double, etc., where the function_name represents the name of a function that contains more than one argument in it.', 'After defining the function definition, we need to call the defined function in a program to execute its tasks. However, a function can be called multiple times by writing the function name followed by arguments lists.', 'The function declaration defines the function name, return type and the passed arguments in it. A function definition is always defined outside of the main() function in any C program.', 'In the above program, we use a printf() and getch() built-in function whose meaning or tasks are already defined in the C compiler. Therefore, we did not require to write complete code to use the printf() and getch() function in the C program.']","['As the name suggests, a user-defined function is a function written by the user to write any program code and execute specific actions. These user-defined functions can be modified and execute according to the requirement of the programmer. A programmer can change the user-defined function, but these functions are not defined in the C header files. A user-defined function is made up using the function declaration, function definition, and the function call.', 'C programming language provides some library functions to perform some predefined tasks. These functions are also called the built-in or predefined function in the C header files whose meaning cannot change. When we use these functions on any program, we call the function name with appropriate header files because these functions are defined inside the header files. In other words, we did not require to write the complete code to perform a specific task; instead, we can directly call the function in our program whenever it is required. For example: printf(), scanf(), getch(), etc., are the predefined library functions.']","['return_type function_name ( data_type arg1, data_type arg2, ... ) {', 'statement to be executed;', 'return (expr);', 'function_name(arg1, arg2, ...)', 'return_type function_name (  data_type arg1, data_type arg2, ..) ;', '#include', 'int func(int rad);', 'int main()', 'int r, result;', 'printf("" Enter the radius of a circle "");', 'scanf(""%d"", &r);', 'result = func(r);', 'printf ("" The area of a circle is: %d"", result);', 'return 0;', 'int func(int rad)', 'int area;', 'float pi = 3.14;', 'area = pi * rad * rad;', 'return area;', '#include', 'int sum_numbers(int x, int y); // function prototype', 'int main()', 'int sum; // store the result', 'int num1, num2; // declare variables', 'printf("" Enter two numbers \\n"");', 'scanf(""%d %d"", &num1, &num2);', 'sum = sum_numbers(num1, num2); // function call', 'printf( "" The addition of two numbers is %d"", sum);', 'return 0;', 'int sum_numbers(int x, int y) // pass x and y as the parameters', 'int result;', 'result = x + y; //add two numbers', 'return result;', '#include', '#include', 'void main()', 'printf ("" Welcome to the JavaTpoint "");', 'printf ("" \\n It is a library function in the C program. "");', 'getch(); // It holds the console screen']","['Enter the radius of a circle: 5', 'The area of a circle is: 78', 'Enter two numbers', '5', '6', 'The addition of two numbers is 11', 'Welcome to the JavaTpoint', 'It is a library function in the C program']","[""S.No|||User defined Function|||Library function&&&1.|||A programmer creates a function according to the requirement of a program, which is called a user-defined function.|||A function whose prototypes are already defined in the C library is called the library function.&&&2.|||A user-defined function is required to write the complete code before using the function in a program.|||We don't require writing a complete code to use the library function in a program.&&&3.|||The name of any user-defined function can change easily.|||We can't change or modify the name of the library function because the functionality of these functions is already defined in the compiler. &&&4.|||A user defined function is not compulsory to use in any C program.|||We need to use the library function in every C program.&&&5.|||A user-defined function does not require writing any code inside the header files.|||For example: swap() function does not require any header file.|||All the library functions are predefined inside the header files.|||For example: printf(), and scanf() function are defined in the stdio.h header file. And the strpcy(), strcmp() function are defined in the string.h header file.&&&6.|||A user-defined function is part of a program.|||Library functions are part of the C header file.&&&7.|||The programmer or user define the function at the time of writing the code.|||The developer in the C compiler predefines the library function.&&&8.|||Example: multiply(), sum() divide(), etc. are the user defined or user created function in a program.|||Example: printf(), sqrt(), strcpy(), etc.""]",[]
175,['Memset C'],"['More than a third word of the alphabet, C is a strictly compiled programming language that forms the base of all other languages in the programming world today. In other words, the programs written in C run only after being compiled. C is constrained to certain parameters or functions but contains some different functions that serve some specific purpose. In this article, you would be learning about memset() in C and other factors and use cases associated with it.']","['https://www.javatpoint.com/ascii-table-in-c', 'https://www.javatpoint.com/user-defined-vs-library-function-in-c', 'https://www.javatpoint.com/ascii-table-in-c', 'https://www.javatpoint.com/user-defined-vs-library-function-in-c', 'https://www.javatpoint.com/ascii-table-in-c']","['https://static.javatpoint.com/cpages/images/memset-c.png', 'https://static.javatpoint.com/cpages/images/memset-c2.png']",[],"['What is memset()?', 'How to use memset()?', 'When is memset() used?', 'Applications of memset()', 'Memset() vs calloc() vs naive iteration', 'Conclusion']",['Return value of memset()'],[],"['The function memset(""memory setter"") is a standard library function in C language that sets or fills a memory block semantically with a value.', 'To use memset() in your program, the first thing you need to do is to include the string header file in your program, as shown below.']","['The first parameter represents a pointer of type void since the memory block is initially empty or about to be filled. The type void signifies the pointer can reference the memory regardless of type.', ""In general, memset() is a great tool to be considered while working with C and memory allocation methods. In simple words, if you can't initialize it, memset it.""]","['For instance, consider that you have an array of 8 characters consuming 8 bytes of memory when this array is declared, your computer chunks off 8 bytes of memory on the heap available in your system. This memory allocation is not random. Randomization occurs only when the process like Address Space Layout Randomization occurs for some exemplary purposes or, hexadecimal allocation of address in the range of 0x00 to 0x07. Consider you declare an array of array of 8 characters as shown.', 'Initially, you are completely unaware of the contents of this block memory taken by the array without initializing the array. Although it can be nothing but can be an old value that you might have used in the previous programs, or the block in the memory might be undefined.', 'In general, and to keep up with good practices while working with C, it is best to gain full control over any memory used in any given program. Therefore, instead of leaving these 8 bytes of memory vacant, you must always set or fill the memory with a known or given value along with a null byte (\\0). In this way, you can ensure full control of the memory block consumed by the array defined by you. See the image below to get a visual of what is being discussed.', 'In other words, all you want is to memset the functional blocks of memory. The memset() takes the following parameters. The function accepts three parameters, a pointer to the block of memory and an integer followed by a size_t which is nothing but an unsigned integer variable designed to hold any index of an array.', 'The second parameter is the integer to fill with the pointer allocation. Note that this parameter is received as an integer argument that later gets converted to the character when memory filling is required. This conversion ensures that functions keep only 8 bits needed from the integer parameter. Else it might consume more memory than needed.', ""The third parameter represents the given size of the memory block that has to be filled. When the pointer references the memory location to fill this space, it tells nothing about how much memory it should fill. Therefore, the main purpose of passing this parameter is to ensure proper and positive size so that memory allocation doesn't suffer memory loss."", 'The default return value of memset() is void * (pointer with no return type). You might receive nothing back from the memset() if you expect to get what you gave to these functions. You might only expect to get some output after the function turns around and returns a pointer with the same memory address passed when you try to call the memset function.', 'Once the string library of C is included in your program, you need nothing more. You can easily access the memset function directly. To make it clearer and easy, consider the below code snippet containing two other libraries like <stdio.h> and <stdlib.h> (for the usage of exit and printf purposes).', ""As previously discussed, while programming in C, it is always a best practice to have tight control and maintenance of memory while allocating memory and initializing it. In case you don't initialize immediately, other dedicated functions like strcpy might come into use. Proper usage of strcpy involves a new block memory allocation method where a copy of a string is kept aside before actually using it. Since it is not initialized, it might need to be declared first before actually using strcpy. In such cases, memset() is very suitable to fill the block or clear them out initially. Consider the example given below to understand why is memset() used."", 'So far, you have to see all the relevant examples and use cases for a particular memset() instance. But, to understand better, you need to look at multiple examples that will be discussed as an application of memset. Consider the below examples that describes its applications.', 'It is quite clear from the previous as well as this example how memset() handles initialization. In the code given above, you can see how memset acts with the variable defining the size of the character array or string. After using the memset() function, you see five repeated characters of H from the given string.', 'This example is similar to the previous one with a catchy hook. It is important to understand the variations of the same programs with different usage techniques of memset(). In the above example, you can see that only the offset location is being filled. In this example, the only difference is the last five characters filled with H since you can see that the memory location or initialization of address has already been done.', 'There are times when you can opt to use memset() to zero for array initialization. Often, there exists some performance issues of other functions like naive approaches or using calloc() function. There are also some speed issues and memory allocation techniques that are hard to understand and implement. To understand how memset solves these kinds of problems, see the below example code to find why memset() is beneficial to use and how both memset() and calloc() can run on a Linux machine using the <time.h> header file.', 'In the above example, you can easily observe and understand that memset() is thrice as fast as both the native iteration and calloc(). It is so fast because it is already optimized based on the architecture provided by the C compiler, the speed is automatically enhanced.', ""As popularly said, when you don't initialize, memset it. This proverb usually talks about the advantage of memset over other approaches like calloc() or native iteration. In this article, you saw how to deal with such issues while initializing an array when the space is vacant or unused. The problems and solutions you find in this article tell you how memset can be an important aspect while dealing with memory allocation with a programming language like C.""]","['char array[8];', 'void *s, int c, size_t', '#include', '#include', '#include', '#include', 'int main(void)', 'char memory[8];', '/* Fill the memory block with null bytes */', ""memset(memory, '\\0', 8);"", 'printf(""%s\\', '"", memory);', '/* Fill the memory block with hashes */', ""memset(memory, '#', 8);"", 'printf(""%s\\', '"", memory);', '/* Fill the memory block with dollar signs */', ""memset(memory, '$', 8);"", 'printf(""%s\\', '"", memory);', 'return (EXIT_SUCCESS);', '#include', '#include', '#include', 'int main(void)', 'char src[7] = ""Source"";', 'char dest[7];', '/* Initialize dest with null bytes for good practice */', ""memset(dest, '\\0', sizeof(dest));"", '/* Before copying */', 'printf(""String src before copy: %s\\', '"", src);', 'printf(""String dest before copy: %s\\', '"", dest);', '/* Copy src into dest */', 'strcpy(dest, src);', '/* After copying */', 'printf(""String src after copy: %s\\', '"", src);', 'printf(""String dest after copy: %s\\', '"", dest);', 'return (EXIT_SUCCESS);', '#include', '#include', 'int main() {', 'char a[] = {""Hello from JournalDev""};', 'printf(""a = %s\\n"", a);', 'printf(""Filling the first 5 characters a with \'H\' using memset\\n"");', ""memset(a, 'H', 5 * sizeof(char));"", 'printf(""After memset, a = %s\\n"", a);', 'return 0;', '#include', '#include', 'int main() {', 'char a[] = {""Hello from JournalDev""};', 'printf(""a = %s\\n"", a);', 'printf(""Filling the last 5 characters a with \'H\' using memset\\n"");', 'size_t a_len = strlen(a);', ""memset(a + (a_len - 5), 'H', 5 * sizeof(char));"", 'printf(""After memset, a = %s\\n"", a);', 'return 0;', '#include', '#include', '#include', '#include', 'void* init_with_memset(int* arr, size_t num_locations) {', 'return memset(arr, 0, num_locations * sizeof(int));', 'void* init_with_calloc(int* arr, size_t num_locations) {', 'arr = calloc(num_locations, sizeof(int));', 'return arr;', 'void* init_with_iteration(int* arr, size_t num_locations) {', 'for (int i=0; i']","['a = Hello from JournalDev', ""Filling the first five characters a with 'H' using memset"", 'After memset, a = HHHHH from JournalDev', 'a = Hello from JournalDev', ""Filling the last five characters a with 'H' using memset"", 'After memset, a = Hello from JournHHHHH', 'Time for memset() = 0.000002 seconds', 'Time for calloc() = 0.000005 seconds', 'Time for naive iteration = 0.000006 seconds']",[],[]
176,['ASCII Table in C'],['This topic will discuss the ASCII codes and how to write a program to print an ASCII table in the C programming language. ASCII stands for American Standard Code for Information Interchange. ASCII code is a character encoding scheme used to define the value of basic character elements for exchanging information in computers and other electronic devices.'],"['https://www.javatpoint.com/static-function-in-c', 'https://www.javatpoint.com/memset-c', 'https://www.javatpoint.com/static-function-in-c', 'https://www.javatpoint.com/memset-c', 'https://www.javatpoint.com/static-function-in-c']","['https://static.javatpoint.com/cpages/images/ascii-table-in-c.png', 'https://static.javatpoint.com/cpages/images/ascii-table-in-c2.png']",[],[],"['Program to get the ASCII value of the capital letters', 'Program to get the ASCII value of the small letters', 'Program to get the ASCII value of the given characters', 'Program to get the ASCII value of the special characters', 'Program to print the complete ASCII tables in C']",[],"['Program2.c', 'Program3.c', 'Program4.c', 'Program6.c']",[],"['Furthermore, the ASCII code is a collection of 255 symbols in the character set, divided into two parts, the standard ASCII code, and the extended ASCII code. The standard ASCII code ranges from 0 to 127, 7 bits long, and the extended ASCII code from 128 to 255 is 8 bits long. These characters are a combination of symbol letters (uppercase and lowercase (a-z, AZ), digits (0-9), special characters (!, @, #, $, etc.), punctuation marks, and control characters. Hence, we can say, each character has its own ASCII value.', 'For example, when we enter a string as ""HELLO"", the computer machine does not directly store the string we entered. Instead, the system stores the strings in their equivalent ASCII value, such as \'7269767679\'. The ASCII value of H is 72, E is 69, L is 76, and O is 79.']","['#include', 'int main()', 'int caps;', 'for ( caps = 65; caps < 91; caps++)', 'printf ("" \\n The ASCII value of %c is %d "", caps, caps);', 'return 0;', '#include', 'int main()', 'int small;', 'for ( small = 97; small < 123; small++)', 'printf ("" \\n The ASCII value of %c is %d "", small, small);', 'return 0;', '#include', 'int main()', 'char arr[30]; // declare the size of character array', 'int count = 0; // declare a count variable', 'printf ("" \\n Enter the name to get the ASCII codes: "");', 'scanf ("" %s"", &arr);', ""while (arr[count] != '\\0')"", 'printf ("" \\n The ascii code of the character %c is %d "", arr[count], arr[count]);', 'count++; // increment one by one', 'return 0;', '#include', 'int main()', 'int specialCh;', 'for (specialCh = 33; specialCh < 48; specialCh++)', 'printf ("" \\n The ASCII value of \'%c\' special character is: %d"", specialCh, specialCh);', 'for (specialCh = 58; specialCh < 65; specialCh++)', 'printf ("" \\n The ASCII value of \'%c\' special character is: %d"", specialCh, specialCh);', 'for (specialCh = 123; specialCh < 127; specialCh++)', 'printf ("" \\n The ASCII value of \'%c\' special character is: %d"", specialCh, specialCh);', 'return 0;', '#include', 'int main()', 'int asciTable;', 'printf ("" The complete ASCII table of the characters in the C "");', 'for (asciTable = 0; asciTable < 255; asciTable++)', 'printf ("" \\n The value of \'%c\' character is: %d"", asciTable, asciTable);', 'return 0;']","['The ASCII value of A is 65', 'The ASCII value of B is 66', 'The ASCII value of C is 67', 'The ASCII value of D is 68', 'The ASCII value of E is 69', 'The ASCII value of F is 70', 'The ASCII value of G is 71', 'The ASCII value of H is 72', 'The ASCII value of I is 73', 'The ASCII value of J is 74', 'The ASCII value of K is 75', 'The ASCII value of L is 76', 'The ASCII value of M is 77', 'The ASCII value of N is 78', 'The ASCII value of O is 79', 'The ASCII value of P is 80', 'The ASCII value of Q is 81', 'The ASCII value of R is 82', 'The ASCII value of S is 83', 'The ASCII value of T is 84', 'The ASCII value of U is 85', 'The ASCII value of V is 86', 'The ASCII value of W is 87', 'The ASCII value of X is 88', 'The ASCII value of Y is 89', 'The ASCII value of Z is 90', 'The ASCII value of a is 97', 'The ASCII value of b is 98', 'The ASCII value of c is 99', 'The ASCII value of d is 100', 'The ASCII value of e is 101', 'The ASCII value of f is 102', 'The ASCII value of g is 103', 'The ASCII value of h is 104', 'The ASCII value of i is 105', 'The ASCII value of j is 106', 'The ASCII value of k is 107', 'The ASCII value of l is 108', 'The ASCII value of m is 109', 'The ASCII value of n is 110', 'The ASCII value of o is 111', 'The ASCII value of p is 112', 'The ASCII value of q is 113', 'The ASCII value of r is 114', 'The ASCII value of s is 115', 'The ASCII value of t is 116', 'The ASCII value of u is 117', 'The ASCII value of v is 118', 'The ASCII value of w is 119', 'The ASCII value of x is 120', 'The ASCII value of y is 121', 'The ASCII value of z is 122', 'Enter the name to get the ASCII codes: JAVATPOINT', 'The ASCII code of the character J is 74', 'The ASCII code of the character A is 65', 'The ASCII code of the character V is 86', 'The ASCII code of the character A is 65', 'The ASCII code of the character T is 84', 'The ASCII code of the character P is 80', 'The ASCII code of the character O is 79', 'The ASCII code of the character I is 73', 'The ASCII code of the character N is 78', 'The ASCII code of the character T is 84', ""The ASCII value of '!' special character is: 33"", 'The ASCII value of \'""\' special character is: 34', ""The ASCII value of '#' special character is: 35"", ""The ASCII value of '$' special character is: 36"", ""The ASCII value of '%' special character is: 37"", ""The ASCII value of '&' special character is: 38"", ""The ASCII value of ''' special character is: 39"", ""The ASCII value of '(' special character is: 40"", ""The ASCII value of ')' special character is: 41"", ""The ASCII value of '*' special character is: 42"", ""The ASCII value of '+' special character is: 43"", ""The ASCII value of ',' special character is: 44"", ""The ASCII value of '-' special character is: 45"", ""The ASCII value of '.' special character is: 46"", ""The ASCII value of '/' special character is: 47"", ""The ASCII value of ':' special character is: 58"", ""The ASCII value of ';' special character is: 59"", ""The ASCII value of '<' special character is: 60"", ""The ASCII value of '=' special character is: 61"", ""The ASCII value of '>' special character is: 62"", ""The ASCII value of '?' special character is: 63"", ""The ASCII value of '@' special character is: 64"", ""The ASCII value of '{' special character is: 123"", ""The ASCII value of '|' special character is: 124"", ""The ASCII value of '}' special character is: 125"", ""The ASCII value of '~' special character is: 126""]",[],[]
177,['Static function in C'],"[""In this topic, we will discuss the static function in the C programming language. By default, every function is declared as global that can be accessed anywhere inside a program. The static keyword is used before the function's name to make any function as the static function. And the scope of the static function in C is limited to its object files or only a program. It means that the static function is only visible to its program files and restricts other files or programs from accessing the static function.""]","['https://www.javatpoint.com/reverse-a-string-in-c', 'https://www.javatpoint.com/ascii-table-in-c', 'https://www.javatpoint.com/reverse-a-string-in-c', 'https://www.javatpoint.com/ascii-table-in-c', 'https://www.javatpoint.com/reverse-a-string-in-c']",['https://static.javatpoint.com/cpages/images/static-function-in-c.png'],[],[],"['Some important points of static function', 'Program to call a global function inside another file', 'Program to call a static function inside another file', 'Program to call a static function in same object file or function', 'Program to call multiple static function in same file']",[],"['Here, we use a static keyword before the function_name to make the given function th static.', 'In this program, we need to create two files, file1.c and file2.c. Now, we create a global function inside the file1.c, as shown below.', 'After defining the global function in the file1.c file, now we create another file file2.c and then call the global function add() in it.', ""Let's create a program to make a global function as a static function by adding the static keyword before the function and then call in file2.c."", 'Now we create another file with name file2.c and call the static function to check its scope.', ""Let's create a program to demonstrate the use of the static function in C."", ""Let's create a program to create multiple static function and call inside the main() function.""]","['When we compiled the above program, it throws an error as ""undefined reference to myFun(). Because of the static function myFun(), its object files can only access, and it does not allow other functions to access the static function.', 'In the above program, we create multiple static functions in the same object file, and each static function is called inside the main() function to return the value.']","['As we can see in the above program, we create two files, file1.c and file2.c. In file1.c, we define a global function add() that is called inside the file2.c. And in file2.c, file1.c will be treated as the reference file that contains the definition of the global function and is called inside the main() function to return the sum of two integer numbers.', 'In the above program, we create a static function inside the same object file File1.c. In File1.c, the main() function calls the static function mySqr() to return the square of the given number. The static function works correctly as the scope of the static function is only within its object file or program.']","['<function data_type> static <function_ name> ( ){}', 'static int function_name ()', 'int add(int x, int y) // this function is called to the file2.c', 'int sum; // declare the sum variable', 'sum = x + y; // store the sum of two number in sum', 'return sum;', '#include', '#include', '#include ""file1.c""  // file1.c is use as a refernce file', 'int add(int x, int y); // define the global function', 'int main()', 'int n1, n2, res; // define local variables', 'printf ("" Enter any two numbers: "");', 'scanf (""%d %d"", &n1, &n2); // accepts two numbers', 'res = add(n1, n2); // call global function from ""file1.c""', 'printf ("" The sum of the two numbers is: %d"", res);', 'return 0;', 'static void add(void) // It is a static function', 'printf ("" I am a static function"");', '#include', '#include', 'int main()', 'printf("" I am a main() function."");', 'myFun(); // call static function', 'return 0;', '#include', '#include', 'static int mySqr( int num)', 'return num * num;', 'int main()', 'int n1, res;', 'printf ("" Enter an integer number: "");', 'scanf (""%d"", &n1);', 'res = mySqr(n1); // call static function', 'printf("" The square of the %d is %d."", n1, res);', 'return 0;', '#include', '#include', '#include', 'static int mySqr( int num)', 'return num * num;', 'static void myfun2(void)', 'printf (""\\n I am inside the static function."");', 'static int myFun3(int num2)', 'return sqrt(num2);', 'int main()', 'int n1, res;', 'printf ("" Enter an integer number: "");', 'scanf (""%d"", &n1);', 'res = mySqr(n1); // call static function', 'printf("" The square of the %d is %d"", n1, res);', 'myfun2(); // call static function', 'res = myFun3(n1);', 'printf("" \\n The square root of the %d is %d"", n1, res);', 'return 0;']","['Enter any two numbers: 5', '20', 'The sum of the two numbers is: 25', 'Undefined reference to myFun() function.', 'Enter an integer number: 25', 'The square of the 25 is 625', 'Enter an integer number: 36', 'The square of the 36 is 1296', 'I am inside the static function.', 'The square root of the 36 is 6']",[],"['|||A static keyword can be used before the name of a function to make it static.|||However, the scope of the static function is throughout the program only. It means the static function can be called inside the same program or file.|||If we try to access the static function from another file, it throws an error.|||We can make a global function as the static by adding the static before the function name of a program.|||']"
178,['Reverse a String in C'],"['This topic will discuss several ways to reverse a string in the C programming language. Reversing a string is the technique that reverses or changes the order of a given string so that the last character of the string becomes the first character of the string and so on. Furthermore, we can also check the Palindrome of the given string by reversing the original string.']","['https://www.javatpoint.com/twin-prime-numbers-in-c', 'https://www.javatpoint.com/static-function-in-c', 'https://www.javatpoint.com/twin-prime-numbers-in-c', 'https://www.javatpoint.com/static-function-in-c', 'https://www.javatpoint.com/twin-prime-numbers-in-c']",['https://static.javatpoint.com/cpages/images/reverse-a-string-in-c.png'],[],[],"['Different ways to find the reverse of a string in the C', 'Program 1: Print the reverse of a string using strrev() function', 'Program 2: Print the reverse of a string without using the library function', 'Program 3: Print the reverse of a string using the recursion function', 'Program 4: Print the reverse of a string using for loop', 'Program 5: Print the reverse of a string using while loop', 'Program 6: Print the reverse of a string using pointers', 'Program 7: Program to check whether the reverse string is a Palindrome']",[],"['Following are the various ways to find the reverse of a string in the C programming language:', ""Let's consider an example to print the reverse of a string using the strrev() function."", 'Program1.c', ""Let's consider an example to print the reverse of a string using user defined function."", 'Program2.c', ""Let's consider an example to print the reverse of a string using the recursion function."", 'Recursion function: A recursion function is a function that continuously calls the same function without using a looping statement.', 'Program3.c', ""Let's consider an example to print the reverse of a string using for loop in C programming language."", 'Program4.c', ""Let's consider an example to print the reverse of a string using while loop in C programming language."", 'Program5.c', ""Let's consider an example to print the reverse of a string using pointers in the C programming language."", 'Program6.c', 'Consider a program to check whether the given string is a palindrome or not in the C programming language.', 'Program7.c']","['For example, we enter a string ""APPLE"", and then use the reverse algorithm. The reverse algorithm returns the string ""ELPPA"" which is completely reverse of the original string.']",[],"['#include', '#include', 'int main()', 'char str[40]; // declare the size of character string', 'printf ("" \\n Enter a string to be reversed: "");', 'scanf (""%s"", str);', 'printf ("" \\n After the reverse of a string: %s "", strrev(str));', 'return 0;', '#include', '#include', 'void revstr(char *str1)', 'int i, len, temp;', 'len = strlen(str1); // use strlen() to get the length of str string', 'for (i = 0; i < len/2; i++)', 'temp = str1[i];', 'str1[i] = str1[len - i - 1];', 'str1[len - i - 1] = temp;', 'int main()', 'char str[50]; // size of char string', 'printf ("" Enter the string: "");', 'gets(str); // use gets() function to take string', 'printf ("" \\n Before reversing the string: %s \\n"", str);', 'revstr(str);', 'printf ("" After reversing the string: %s"", str);', '#include', '#include', 'void revstr(char *str1)', 'static int i, len, temp;', 'len = strlen(str1); // use strlen() to get the length of str string', 'if (i < len/2){', 'temp = str1[i];', 'str1[i] = str1[len - i - 1];', 'str1[len - i - 1] = temp;', 'revstr(str1); // recusively calls the revstr() function', 'int main()', 'char str1[50]; // size of char string', 'printf ("" Enter the string: "");', 'gets(str1); // use gets() function to take string', 'printf ("" \\n Before reversing the string: %s \\n"", str1);', 'revstr(str1);', 'printf ("" After reversing the string: %s"", str1);', '#include', '#include', '#include', 'void main()', 'char str[50], temp; // define the size of str[] array', 'int i, left, right, len;', 'printf ("" \\n Display a reverse string in the C: \\n"");', 'printf ("" ----------------------- "");', 'printf ("" \\n Enter a string to reverse order: "");', 'scanf( ""%s"", &str);', 'len = strlen(str); // get the length of the string', 'left = 0; // set left index at 0', 'right = len - 1; // set right index len - 1', 'for (i = left; i', '#include', '#include', 'int main()', 'char str1[50], temp; // declare and initialize the size of string array.', 'int i = 0, j =0;', 'printf ("" Enter a string to be reversed: "");', 'scanf( ""%s"", str1);', 'j = strlen (str1) - 1;  // get the length of the string', 'while ( i < j)', 'temp = str1[j];', 'str1[j] = str1[i];', 'str1[i] = temp;', 'i++; // i incremented by 1', 'j--; // j is decremented by 1', 'printf ("" The reversed of the string: %s"", str1);', 'return 0;', '#include', '#include', 'int str_len( char *st);', 'void revstr( char *st);', 'int main()', 'char st[50];', 'printf ("" Enter a string to be reversed: "");', 'scanf( ""%s"", st);', 'revstr(st);', 'printf ("" The reverse string is: %s"", st);', 'return 0;', 'void revstr (char *st)', 'int len, i;', 'char *start, *end, temp;', 'len = str_len (st);', 'start = st;', 'end = st;', 'for (i = 0; i < len - 1; i++)', 'end++;', 'for (i = 0; i < len/2; i++)', 'temp = *end;', '*end = *start;', '*start = temp;', 'start++;', 'end--;', 'int str_len (char *ptr)', 'int i = 0;', ""while ( *(ptr + i) != '\\0')"", 'return i;', '#include', '#include', 'int main ()', 'char str1[30];', 'int i, len, flag = 0;', 'printf ("" Enter a string: "");', 'scanf (""%s"", str1);', 'len = strlen( str1 ); // get the string length', 'for ( i = 0; i < len; i++)', 'if (str1[i] != str1[len - i - 1])', 'flag = 1;', 'break; // exit from if statement', 'if (flag)', 'printf ("" %s is not a palindrome string"", str1);', 'printf ("" %s is a palindrome"", str1);', 'return 0;']","['Enter a string to be reversed: AMBULANCE', 'After the reverse of a string: ECNALUBMA', 'Enter the string: Welcome Friends', 'Before reversing the string: Welcome Friends', 'After reversing the string: sdneirF emocleW', 'Enter the string: LIFE INSURANCE', 'Before reversing the string: LIFE INSURANCE', 'After reversing the string: ECNARUSNI EFIL', 'Display a reverse string in the C:', '-----------------------', 'Enter a string to reverse order: APPLE', 'The reverse of the original string is: ELPPA', 'Enter a string to be reversed: JAVATPOINT', 'The reversed of the string: TNIOPTAVAJ', 'Enter a string to be reversed: JAVATPOINT', 'The reverse string is: TNIOPTAVAJ', 'Enter a string: madam', 'madam is a palindrome string.']",[],['|||Reverse a string using the strrev() function|||Reverse a string without using the library function|||Reverse a string using the recursion function|||Reverse a string using for loop|||Reverse a string using while loop|||Reverse a string using pointers|||Reverse a string to check for Palindrome|||']
179,['Twin Prime Numbers in C'],"['This topic will discuss twin primes and how we can print twin primes in the C programming language. A twin prime is a pair of prime numbers representing the difference of two prime numbers always 2 and is therefore called a twin prime. In simple words, if the difference between two prime numbers is 2 and there is exactly one composite number between them, then the number is called twin prime numbers.']","['https://www.javatpoint.com/strchr-function-in-c', 'https://www.javatpoint.com/reverse-a-string-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/strchr-function-in-c', 'https://www.javatpoint.com/reverse-a-string-in-c', 'https://www.javatpoint.com/strchr-function-in-c']",['https://static.javatpoint.com/cpages/images/twin-prime-numbers-in-c.png'],[],[],"['Program to print twin primes from 2 to n using user defined function', 'Program to print twin primes using the Sieve of Eratosthenes algorithm', 'Program to check whether a given number is a twin prime or not']",[],"['For example, (59, 61) and (71, 73) are twin prime pairs, and the difference between these numbers is 61 - 59 = 2, and 73 - 71 = 2.', 'Properties of the twin prime number', 'Create a program in C programming language to generate twin prime number between 2 to n.', 'Program1.c', ""Let's consider an example to get the twin primes using the Sieve of Eratosthenes algorithm."", 'Program2.c', 'Let us consider an example of whether a given number is twin prime or not in the C programming language.', 'Program3.c', '2nd execution:']",[],"[""In the above program, a for loop that iterates over the numbers between the specified range of 2 to 100. After that, we create a twinprime() as a user-defined function called inside the for loop to check the primes of the 'i' and 'i+2' index. And if the condition is met, it prints the total pair of twin prime and the twin prime numbers."", 'The Sieve of Eratosthenes is an approach to get a list of all prime numbers that are less than or equal to a given number (n). It iterates the prime number up to n consecutive number and checks that both the ith and (i + 2) numbers are prime, and then it prints the prime number; otherwise, it moves to the next number to get the twin primes. Here, (3, 5), (5, 7), (11, 13) are examples of the Sieve of Eratosthenes algorithm.', 'In the above program, we take two numbers from the user to check whether the given number is twin prime or not. Here we take 5 and 7 as the prime number, and the function returns 5 and 7 are twin prime. Similarly, we take the numbers 15 and 17, and the function returns numbers, not twin primes.']","['#include', '#include', 'int main ()', 'int i, num, count = 0;', 'printf ("" Enter the last number: "");', 'scanf ("" %d"", #); // get the last number', 'for (i = 2; i <= num; i++)', 'if (twinprime (i) && twinprime (i+2))', 'printf ("" \\n The twin prime number is: (%d, %d) "", i, i+2);', 'count++; // counter increment by 1', 'printf ("" \\n \\n Total number of twin prime pairs: %d"", count);', 'return 0;', 'int twinprime( int n)', 'int i = 2;', 'for (i = 2; i <= n/2; i++)', 'if (n%i == 0)', 'return 0;', 'if (i > n / 2)', 'return 1;', '#include', '#include', 'int main()', 'int num;', 'printf ("" Enter the last number to get twin prime numbers: "");', 'scanf ("" %d"", #);', 'twinprime( num); // pass num as an argument', 'return 0;', 'void twinprime (int n)', 'int j;', ""/* here we create a unsigned char array 'prime[]' and initialize all its entries as true. */"", 'unsigned char prime[n + 1]; // declaration of the unsigned char prime[] array', 'memset (prime, 1, sizeof(prime));', 'for ( j = 2; (j * j) <= n; j++)', 'if (prime [j] == 1)', 'int i = 0;', 'for (i = (j * 2); i <= n; i += j)', 'prime[i] = 0;', '}', 'for ( j = 2; j <= (n - 2); j++)', 'if (prime[j] && prime[j + 2])', 'printf ("" \\n The twin prime numbers: (%d, %d) "", j, j +2);', '#include', '#include', 'void checktwin(num1, num2)', 'int i;', 'unsigned char isprime = 1;', 'for ( i = 2; i <= (num1 / 2); i++ )', 'if (num1 % i == 0)', 'isprime = 0;', 'break;', '/* here isprime is called and abs() function get the absolute result of num1 and num2 */', 'if (isprime && abs(num1 - num2) == 2)', 'unsigned char isprime2 = 1;', 'for ( i = 2; i <= num2 / 2; i++)', 'if (num2 % i == 0)', 'isprime2 = 0;', 'break;', 'if (isprime2)', 'printf ("" %d and %d are twin prime"", num1, num2);', 'printf ("" %d and %d are not twin prime"", num1, num2);', 'printf ("" %d and %d are not twin prime number"", num1, num2);', 'int main()', 'int num1, num2;', 'printf ("" Enter the first number: "");', 'scanf (""%d"", &num1); // get first number', 'printf ("" Enter the second number: "");', 'scanf ("" %d"", &num2); // get second number', 'checktwin(num1, num2); /* call the checktwin() function and pass num1 and num2 as parameters. */', 'return 0;']","['Enter the last number: 100', 'The twin prime number is: (3, 5)', 'The twin prime number is: (5, 7)', 'The twin prime number is: (11, 13)', 'The twin prime number is: (17, 19)', 'The twin prime number is: (29, 31)', 'The twin prime number is: (41, 43)', 'The twin prime number is: (59, 61)', 'The twin prime number is: (71, 73)', 'Total number of twin prime pairs: 8', 'Enter the last number to get twin prime numbers: 200', 'The twin prime numbers: (3, 5)', 'The twin prime numbers: (5, 7)', 'The twin prime numbers: (11, 13)', 'The twin prime numbers: (17, 19)', 'The twin prime numbers: (29, 31)', 'The twin prime numbers: (41, 43)', 'The twin prime numbers: (59, 61)', 'The twin prime numbers: (71, 73)', 'The twin prime numbers: (101, 103)', 'The twin prime numbers: (107, 109)', 'The twin prime numbers: (137, 139)', 'The twin prime numbers: (149, 151)', 'The twin prime numbers: (179, 181)', 'The twin prime numbers: (191, 193)', 'The twin prime numbers: (197, 199)', 'Enter the first number: 71', 'Enter the second number: 73', '71 and 73 are twin prime', 'Enter the first number: 15', 'Enter the second number: 17', '15 and 17 are not twin prime']",[],"['|||(2, 3) are not considered twin primes because there is no composite number between them, and neither is the difference of two prime numbers (2, 3) is equal to 2.|||(3, 5) is a pair of twin primes because the difference of two primes (5 - 3 = 2) is 2 and hence (3, 5) is a twin prime.|||Every twin other than (3, 5) is in the form of a prime number (6n - 1, 6n + 1), where n defines the natural number.|||5 is the only prime number in which the difference between both positive and negative primes is 5. So, 5 appears in two prime pairs (3, 5) and (5, 7).|||If we add two pairs of twin prime numbers, the result of twin primes will be divisible by 12, except for (3, 5) pairs of twin prime numbers.|||']"
180,['strchr() function in C'],"['This section will discuss the strchr() function of string headers in the C programming language. An strchr() function is used to find the first occurrence of a specified character within the original string. In other words, an strchr() function checks whether the original string contains defined characters. If the character is found inside the string, it returns a pointer value; otherwise, it returns a null pointer. While using the strchr() function in the C programming language, we need to import the <string.h> header file in the program.']","['https://www.javatpoint.com/structure-of-a-c-program', 'https://www.javatpoint.com/twin-prime-numbers-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/structure-of-a-c-program', 'https://www.javatpoint.com/twin-prime-numbers-in-c', 'https://www.javatpoint.com/structure-of-a-c-program']",['https://static.javatpoint.com/cpages/images/strchr-function-in-c.png'],[],[],"['Syntax', 'Program to demonstrate the use of a strchr() function', 'Program to search a character using the strchr() function and if-else statement', 'Program to get the occurrence of each character in a given string']",[],"['In the above syntax, an strchr() function has two parameters: str and ch.', 'str: A str represents the original string in which the character is to be searched.', 'ch: A ch is a character type variable representing a character searched in the string str.', 'Return value: It returns a pointer value containing the first occurrence of the character in the given string.', ""Let's consider an example to check the occurrence of a character in the given string."", 'Program1.c', 'Program1.c', '2nd execution:', 'Program3.c']","[""Let's consider an example to get the occurrence of the first character using the strchr() function and if-else statement in a given string of the C programming language."", ""Let's consider an example to print the occurrence of each character in a given string with strchr() function and while loop of C programming language.""]","[""In the above program, we pass an str parameter to the strchr() function to search for character 's', and when a character is found, it returns a pointer ptr value. A ptr variable contains a value from the specified character of the original string until the ch variable does not get a null character in the string."", 'In the above program, we pass a string ""javatpoint"" to search for a specified character. Here we take the \'p\' character as input from the user and search in the string. After that, the if statement checks for the occurrence of the character using the strchr() function and prints the specified character if it exists. Otherwise, it indicates that the character is not found in the string.']","['char *strchr (const char *str, int c);', '#include', '#include', 'int main ()', 'const char str[] = ""Use strchr() function in C."";', ""const char ch = 's'; // it is searched in str[] array"", 'char *ptr; // declare character pointer ptr', 'printf ("" Original string is: %s \\n"", str);', 'ptr = strchr( str, ch);', 'printf ("" The first occurrence of the \'%c\' in \'%s\' string  is: \'%s\' "", ch, str, ptr);', 'return 0;', '#include', '#include  // use string.h header file', 'int main ()', 'const char *s = ""javatpoint""; // initialization of the constant char pointer', 'char ch; // declare a ch variable', 'printf ("" Original string: \\""%s\\"" \\n "", s); // print the string', 'printf (""Please enter a character you want to search in the string: "");', 'scanf ("" %c"", &ch);', 'if ( strchr (s, ch) != NULL )', 'printf ("" \\n \'%c\' is found in \\""%s\\"" "", ch, s);', 'printf ("" \\n \'%c\' is not found in \\""%s\\"" "", ch, s);', 'return 0;', '#include', '#include', 'int main ()', 'char str[] = "" Welcome to the JavaTpoint site"";', 'char *ptr; // declare a pointer variable', 'int i = 1; // declare and initialize i', ""ptr = strchr (str, 'e' );"", 'while (ptr != NULL)', 'printf ("" Given character \'e\' found at position %d \\n"", (ptr - str + 1));', 'printf ("" Occurrence of the character \'e\' : %d \\n"", i);', 'printf ("" The occurrence of the character \'e\' in the string \\""%s\\"" is \\""%s\\"" \\n \\n"", str, ptr);', ""ptr = strchr (ptr + 1, 'e');"", 'return 0;']","['Original string is: Use strchr() function in C.', ""The first occurrence of the 's' in 'Use strchr() function in C.' string is: 'e strchr() function in C.'"", 'Original string: ""javatpoint""', 'Please enter a character you want to search in the string: p', '\'p\' is found in ""javatpoint""', 'Original string: ""javatpoint""', 'Please enter a character you want to search in the string: b', '\'b\' is not found in ""javatpoint""', ""Given character 'e' found at position 3"", ""Occurrence of the character 'e' : 1"", 'The occurrence of the character \'e\' in the string "" Welcome to the JavaTpoint site"" is ""elcome to the JavaTpoint site""', ""Given character 'e' found at position 8"", ""Occurrence of the character 'e' : 2"", 'The occurrence of the character \'e\' in the string "" Welcome to the JavaTpoint site"" is ""e to the JavaTpoint site""', ""Given character 'e' found at position 15"", ""Occurrence of the character 'e' : 3"", 'The occurrence of the character \'e\' in the string "" Welcome to the JavaTpoint site"" is ""e JavaTpoint site""', ""Given character 'e' found at position 31"", ""Occurrence of the character 'e' : 4"", 'The occurrence of the character \'e\' in the string "" Welcome to the JavaTpoint site"" is ""e""']",[],[]
181,['Structure of a C program'],"['The structure of a C program means the specific structure to start the programming in the C language. Without a proper structure, it becomes difficult to analyze the problem and the solution. It also gives us a reference to write more complex programs.']","['https://www.javatpoint.com/power-function-in-c', 'https://www.javatpoint.com/strchr-function-in-c', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://jmeubank.github.io/tdm-gcc/', 'https://www.javatpoint.com/power-function-in-c', 'https://www.javatpoint.com/strchr-function-in-c', 'https://www.javatpoint.com/power-function-in-c']","['https://static.javatpoint.com/cpages/images/structure-of-a-c-program.png', 'https://static.javatpoint.com/cpages/images/structure-of-a-c-program2.png', 'https://static.javatpoint.com/cpages/images/structure-of-a-c-program3.png', 'https://static.javatpoint.com/cpages/images/structure-of-a-c-program4.png', 'https://static.javatpoint.com/cpages/images/structure-of-a-c-program5.png']",[],"['C programming', 'Importance of structure of a C program', 'Sections of a C program', 'Compile and execution of a C program', 'Step to compile and run a C program']","['Documentation section', 'Preprocessor section', 'Define section', 'Global declaration', 'Main function', 'Local declarations', 'User defined functions', 'Examples', 'Create a program', 'Compile a program', 'Run or execute a program', 'Output of the program', 'Step: 1 - gcc complier installation', 'Step: 2 - creating a C program', 'Step: 3 - Opening the command prompt', 'Step: 4 - rechecking the gcc complier', 'Step: 5 - go to the source directory', 'Step: 6 - compile the source code', 'Step: 7 - Compile the source code', 'Step: 8 - Run the program']",[],"[""Let's first discuss about C programming."", 'The essential features of a C program are as follows:', 'Pointers: it allows reference to a memory location by the name assigned to it in a program.', 'Recursion: When a function calls itself, it is known as recursion.', ""Let's start with the importance of specifying the structure of a C program."", 'Thus, the structure helps us analyze the format to write a program for the least errors. It gives better clarity and the concept of a program.', 'Here, we will discuss the sections of a C program, some practical examples with explanations, steps to compile and execute a C program.', ""Let's start."", 'The sections of a C program are listed below:', ""Let's discuss it in detail."", ""It includes the statement specified at the beginning of a program, such as a program's name, date, description, and title. It is represented as:"", 'There are various header files available for different purposes. For example, # include <math.h>. It is used for mathematic functions in a program.', 'The define section comprises of different constants declared using the define keyword. It is given by:', 'The global section comprises of all the global declarations in the program. It is given by:', 'The size of the above global variables is listed as follows:', 'char = 1 byte', 'float = 4 bytes', 'int = 4 bytes', 'We can also declare user defined functions in the global variable section.', 'The main function is declared as:', 'Main function is further categorized into local declarations, statements, and expressions. ', 'The variable that is declared inside a given function or block refers to as local declarations.', 'Statements', 'The statements refers to if, else, while, do, for, etc. used in a program within the main function.', 'Expressions', 'An expression is a type of formula where operands are linked with each other by the use of operators. It is given by:', 'The user defined functions specified the functions specified as per the requirements of the user. For example, color(), sum(), division(), etc.', 'The program (basic or advance) follows the same sections as listed above.', 'Return type ends the execution of the function. It further returns control to the specified calling function. It is given by:', 'For example,', ""Let's begin with a simple program in C language."", 'Example 1: To find the sum of two numbers given by the user', 'It is given by:', 'The detailed explanation of each part of a code is as follows:', 'Example 2: To draw a box by accepting a number from the user', 'It is given by:', 'We can collectively say that the program includes preprocessor commands, variables, functions, statements, expressions, and comments.', 'Here, we will discuss the method to compile and run the C program with the help of the command prompt.', 'The steps involved in a complete program execution are as follows:', 'It refers to the code created in any text editor. We can also compile and run the C code in any software, such as Visual studio.', 'It is the last part of the program where the output of the specified code is produced as the result.', 'We can directly install the latest gcc complier through the link: https://jmeubank.github.io/tdm-gcc/', 'Complete all the steps during the installation till the process gets completed.', 'Create a C program using the simple text editor. Here, we have used notepad. It is shown below:', ""Now, save the file in any directory with the extension (.c). For example, we have saved the file with the name 'welcome.c' on the desktop."", 'Open the cmd or command prompt on our computer. We can simply type cmd on the search or the run option. The Command prompt will appear.', ""After the command prompt opens, type 'gcc -v' and press Enter. It will appear as the image shown below:"", 'It shows that gcc is successfully installed on our PC.', ""Run the command 'gcc space full name of the file saved with the extension (.c)' and press Enter, as shown below:"", 'If there is any error in our file, it will appear. Otherwise, move on to the step 7.', 'Here, we have given the executable name as hello. We can define the name as per our convenience.', 'Press Enter. The output will appear on the command prompt, as shown below:', 'Similarly, we can run multiple C programs using the same steps, as discussed above. ']","['Memory allocation: At the time of definition, memory is assigned to a variable name, allowing dynamic allocation of the memory. It means that the program itself can request the operating system to release memory for use at the execution time.', 'Bit-manipulation: It refers to the manipulation of data in its lowest form. It is also known as bits. The computer stores the information in binary format (0 and 1).', 'Both methods work as the document section in a program. It provides an overview of the program. Anything written inside will be considered a part of the documentation section and will not interfere with the specified code.', 'The preprocessor section contains all the header files used in a program. It informs the system to link the header files to the system libraries. It is given by:', 'main() is the first function to be executed by the computer. It is necessary for a code to include the main(). It is like any other function available in the C library. Parenthesis () are used for passing parameters (if any) to a function.', 'We can also use int or main with the main (). The void main() specifies that the program will not return any value. The int main() specifies that the program can return integer type data.', 'Return function is generally the last section of a code. But, it is not necessary to include. It is used when we want to return a value. The return function returns a value when the return type other than the void is specified with the function.', ""We have saved the file with the name boxexample.c. Let's compile and execute the code with the help of the command prompt. The file was created in the Notepad."", 'The steps to create, compile, and execute the code from the beginning have been explained later in the topic. It will help us compile any type of C code with the help of text editor (Notepad here) and cmd (Command Prompt).', 'If refers to the process of checking the errors in the code. The computer displays all the errors (if any) found in our specified C code. We can make further changes to correct those errors.', 'The next step is the run or execution part. A program is assembled and linked without any error. The computer performs different operations, such as decoding, ALU operations to run a program.', ""But, where to write a program and how to open a command prompt to run that program. Do not worry; it is very easy to do all these steps. Let's start with the step to compile and run a C program."", 'We need first to ensure that the gcc compiler is already present on our PC or not. If it is not installed, we need first to install the gcc compiler. We can also try other methods to run a C program. But here, we have used the gcc compiler.', ""We now need to specify the source directory on the cmd. Type 'cd space source directory' and press Enter. Since, we have saved our text editor file on the desktop, so we will specify the source directory as desktop. It is given by:"", 'It is the last step to run a program. We will run the program in the command prompt only. Here, we will type the name of the executable file without any extension. The executable name will be the same as specified in step 7. It is given by:']","['C language combines the power of a low-level language and a high-level language. The low-level languages are used for system programming, while the high-level languages are used for application programming. It is because such languages are flexible and easy to use. Hence, C language is a widely used computer language.', 'It supports various operators, constructors, data structures, and loop constructs. The features of C programming make it possible to use the language for system programming, development of interpreters, compilers, operating systems, graphics, general utilities, etc. C is also used to write other applications, such as databases, compilers, word processors, and spreadsheets.', 'Sometimes, when we begin with a new programming language, we are not aware about the basic structure of a program. The sections of a program usually get shuffled and the chance of omission of error rises. The structure of a language gives us a basic idea of the order of the sections in a program. We get to know when and where to use a particular statement, variable, function, curly braces, parentheses, etc. It also increases our interest in that programming language.', 'The #include statement includes the specific file as a part of a function at the time of the compilation. Thus, the contents of the included file are compiled along with the function being compiled. The #include<stdio.h> consists of the contents of the standard input output files, which contains the definition of stdin, stdout, and stderr. Whenever the definitions stdin, stdout, and stderr are used in a function, the statement #include<stdio.h> need to be used.', ""The executable file is not yet named because we have not told the compiler to perform any such task. So, we will first name the executable file by running the command 'gcc space -o space (name of executable file) space (name of the original file with the extension)' and press Enter. It is given by:""]","['Overview of the code', '#include<stdio.h>', '#include<conio.h>', '#define a = 2', 'float num = 2.54;', 'int a = 5;', ""char ch ='z';"", 'int main()', 'void main()', 'int i = 2;', 'return;', 'return expression ;', '/* Sum of two numbers */', '#include', 'int main()', 'int a, b, sum;', 'printf(""Enter two numbers to be added "");', 'scanf(""%d %d"", &a, &b);', 'sum = a + b;', 'printf(""%d + %d = %d"", a, b, sum);', 'return 0;  // return the integer value in the sum', '/* a simple code to draw a box by accepting a number from the user */', '#include  // preprocessor section that contains header files', '#include', 'void main()  // main section', 'char num;  //local statements', 'puts("" Enter number of lines of a box (1 to 3) \\n"");', '/* puts accepts, as parameter, a string constant, or a variable enclosed within the double quotes for display on the standard output*/', 'num = getchar(); // getchar() is also equal to getc(stdin) in C programming.', '/* It accepts a parameter and allows the character to be read during the program execution. */', 'fflush(stdin); // clears the buffer', ""if(num=='1')  // beginning of if-else condition"", 'puts(""-----------"");', 'puts(""|         |"");', 'puts(""-----------"");', ""else if(num=='2') /*if-else performs two different operations depending on the true or false condition of the expression.*/"", 'puts(""-----------"");', 'puts(""|         |"");', 'puts(""|         |"");', 'puts(""-----------"");', ""else if(num=='3')"", 'puts(""-----------"");', 'puts(""|         |"");', 'puts(""|         |"");', 'puts(""|         |"");', 'puts(""-----------"");', 'puts(""Invalid input"");', '#include', 'printf(""Hello, Welcome to the C programming \\n"");', 'return;', 'cd desktop', 'gcc welcome.c', 'gcc -o hello welcome.c']",[],"[""/* Sum of the two numbers */|||It is the comment section. Any statement described in it is not considered as a code. It is a part of the description section in a code.The comment line is optional. It can be in a separate line or part of an executable line.&&&#include<stdio.h>|||It is the standard input-output header file. It is a command of the preprocessor section.&&&int main()|||main() is the first function to be executed in every program. We have used int with the main() in order to return an integer value.&&&{…|||}|||The curly braces mark the beginning and end of a function. It is mandatory in all the functions.&&&printf()|||The printf() prints text on the screen. It is a function for displaying constant or variables data. Here, 'Enter two numbers to be added' is the parameter passed to it.&&&scanf()|||It reads data from the standard input stream and writes the result into the specified arguments.&&&sum = a + b|||The addition of the specified two numbers will be passed to the sum parameter in the output.&&&return 0|||A program can also run without a return 0 function. It simply states that a program is free from error and can be successfully exited.""]",['|||Documentation section|||Preprocessor section|||Definition section|||Global declaration|||Main function|||User defined functions||||||Create a program|||Compile a program|||Run or execute a program|||Output of the program|||']
182,['Power Function in C'],"['This article will discuss the power function and its various examples in the C language. The power function is used to find the power of any given number. The power function is a predefined library function of the math.h header file, and we need to import the math.h header file in our program while using the pow() function. In other words, a pow() function is used to calculate the power of the base number (x) by raising the power of (y) as (xy).']","['https://www.javatpoint.com/malloc-in-c', 'https://www.javatpoint.com/structure-of-a-c-program', 'https://www.javatpoint.com/malloc-in-c', 'https://www.javatpoint.com/structure-of-a-c-program', 'https://www.javatpoint.com/malloc-in-c']",['https://static.javatpoint.com/cpages/images/power-function-in-c.png'],[],['Conclusion'],"['Syntax', 'Parameters:', 'Program to find the power of an integer number using the pow() function', 'Program to calculate the power of double data value using the pow() function', 'Program to get the power of a number using a user-defined function', 'Program to get the power of a number using the recursion function and pow() function']",[],"['The pow() function has two integer arguments for raising the power of base value (x) by the exponent (y).', ""Let's consider an example to get the power of an integer number using the pow() function in the C programming language."", 'Program2.c', ""Let's consider an example to demonstrate the pow() function using the double data values in the C programming language."", 'Program2.c', ""Let's consider an example to create a user-defined function to get the power of a number in the C programming language."", 'Program1.c', ""Let's consider an example to find the power of a number using the recursion function and pow() function in the C programming language.""]",[],"['For example, we take base as 2 and power as 5, the power of a number using the pow(2, 5) function to return a value as the 32. Similarly, we pass 3 as the base and 4 as the exponent number to raise the power of the base number using the pow(3, 4), which returns results as 81.', 'A power function is used to find the power of any numeric data (int, float, double) using the pow() function. A power function has two arguments: the base number and the exponent number. The base number represents the power to be calculated, and the exponent defines the power of the base value.']","['int pow (int x, int y);', '#include', '#include', 'int main ()', 'int base, exp;', 'int result; // store the result', 'printf ("" Enter the base value from the user: "");', 'scanf ("" %d"", &base); // get base from user', 'printf ("" Enter the power value for raising the power of base: "");', 'scanf ("" %d"", &exp); // get exponent from user', 'result = pow ( base, exp);', 'printf ("" %d to the power of %d is = %d "", base, exp, result);', 'return 0;', '#include', '#include', 'int main ()', 'double base, exp;', 'double result; // store the result', 'printf ("" Enter the base value: "");', 'scanf ("" %lf"", &base); // get base from user', 'printf ("" Enter the power value: "");', 'scanf ("" %lf"", &exp); // get exponent from user', 'result = pow ( base, exp);', 'printf ("" %.1lf to the power of %.1lf is = %.2lf "", base, exp, result);', 'return 0;', '#include', '#include', 'int main ()', 'long int base, exp;', 'printf ("" Enter the base value: "");', 'scanf ("" %d"", &base); // take a number from user', 'printf ("" Enter the power value: "");', 'scanf ("" %d"", &exp); // take a number from user', 'printf ("" %d to the power %d is = %d "", base, exp, pow_num (base, exp));', 'int pow_num (int x, int y)', 'int power = 1, i; // declare variables', 'for (i = 1; i <= y; ++i)', 'power = power * x;', 'return power;', '#include', '#include', 'int main ()', 'long int base, exp;', 'printf ("" Enter the base value from the user "");', 'scanf ("" %d"", &base); // take a number from user', 'printf ("" Enter the power value from the user "");', 'scanf ("" %d"", &exp); // take a number from user', 'printf ("" %d to the power of %d is = %d "", base, exp, pow_num (base, exp));', 'int pow_num (int x, int y)', 'if ( y == 0)', 'return 1;', 'return pow_num (x, y - 1) * x;']","['Enter the base value from the user: 7', 'Enter the power value for raising the power of base: 5', '7 to the power of 5 is = 16807', 'Enter the base value from the user: 2.9', 'Enter the power value for raising the power of base: 8.3', '2.9 to the power of 8.3 is = 6884.99', 'Enter the base value: 25', 'Enter the power value: 6', '25 to the power 6 is = 244140625', 'Enter the base value from the user 5', 'Enter the power value from the user 6', '5 to the power of 6 is = 15625']",[],"['|||x: The x variable represents the base value, whose power is to be calculated.|||y: The y variable represents the power or exponent value.|||']"
183,['Malloc in C'],['This section will discuss the allocation of the Dynamic memory using the malloc in the C programming language. The malloc is a predefined library function that stands for memory allocation. A malloc is used to allocate a specified size of memory block at the run time of a program. It means it creates a dynamic memory allocation at the run time when the user/programmer does not know the amount of memory space is needed in the program.'],"['https://www.javatpoint.com/table-program-in-c', 'https://www.javatpoint.com/power-function-in-c', 'https://www.javatpoint.com/table-program-in-c', 'https://www.javatpoint.com/power-function-in-c', 'https://www.javatpoint.com/table-program-in-c']",['https://static.javatpoint.com/cpages/images/malloc-in-c.png'],[],[],"['Program to check memory is created using the malloc function', 'Program to create a dynamic memory using the malloc() function', 'Release memory space using the free() function']",[],"[""Let's consider an example to check memory is created using the malloc function in the C programming language."", 'Program1.c', 'Program2.c', 'Program3.c']","[""Let's consider an example of taking the size as an input from the user and then entering data at the run time using the malloc () function in the C programming language."", 'In the above syntax, we pass ptr inside the free() function that acts as the reference or base address of the dynamic memory to points to the memory block.']","['Therefore, it inputs the memory size (in bytes) at the run time to reserve a contiguous memory block that returns a pointer of type void, which is cast into a pointer of any form. The dynamic memory is created using the malloc does not initialize the memory at execution time, and hence the memory block contains some default garbage value. The malloc function is defined inside the stdlib.h header file. So, we need to use <stdlib.h> header file while using the malloc function in our program.', 'In the above syntax, the byte_size is an argument that specifies the size of the memory block (in byte), which is passed into the malloc function to reserve the contiguous memory. A malloc() function returns a type void pointer that can be cast into pointers of any defined form.', 'In the above program, we create an integer type dynamic memory using the malloc() function that returns an integer pointer to point to the base address. And if the statement checks whether the ptr is equal to NULL pointer and if the statement is true, it means the memory is not created. Else the memory is successfully created through the malloc() function.', 'A free() function releases the dynamic memory allocation created through the malloc() function. The dynamic memory could not free the occupied memory itself, and the existing space remains even program end. Therefore, we need to free the reserved memory so that other programs can reuse it.']","['ptr = ( cast_ type *) malloc (byte_size);', '#include', '#include  // use stdlib.h header file to malloc() function', 'int main ()', 'int *pt; // declare a pointer of type int', 'pt = malloc (sizeof(int));', 'if (pt != NULL)', 'printf ("" Memory is created using the malloc() function "");', 'printf ("" memory is not created "");', 'return 0;', '#include', '#include', 'int main ()', 'int *ptr, size, i;', 'printf ("" Enter the allocated size of memory "");', 'scanf ("" %d"", &size); // get the size of a memory', 'ptr = malloc (size * sizeof(int));', 'if (ptr != NULL)', 'printf ("" Enter numbers from the user: "");', 'for ( i = 0; i < size; i++)', 'scanf ("" %d"", ptr + i); // stores the numbers from base address of memory', 'printf ("" Numbers are stores in contiguous memory: \\n "");', 'for ( i = 0; i < size; i++)', 'printf ("" \\n The number is: %d"", *(ptr + i)); // here *(ptr + i) is same as ptr[i]', 'printf ("" \\n Memory is created using the malloc() function "");', 'return 0;', 'printf ("" memory is not created "");', 'return 0;', 'free (ptr);', '#include', '#include', 'void main()', 'int num, i, sum = 0;', 'int *ptr, *p;', 'printf ("" The number of elements to be entered: \\n "");', 'scanf ("" %d"", #); // define the no. of element to be entered', 'ptr = (int *) malloc (num);', 'p = ptr; // store the base address of ptr in p', 'if (ptr == NULL)', 'printf ("" Memory is not allocated "");', 'exit(0); // exit from program', 'printf ("" Memory is created using the malloc() function "");', 'printf (""\\n Enter the elements in allocated space: "");', 'for (i = 1; i <= num; i++)', 'scanf ("" %d"", ptr);', 'sum = sum + *ptr;', 'ptr++;', 'printf ("" Elements are: "");', 'for (i = 1; i <= num; i++)', 'printf ("" \\n %d"", *p);', 'printf ("" \\n The addition of stored elements is: %d "", sum);', 'free (ptr); // use free() function to release the occupy space using malloc() function', 'getch();']","['Memory is created using the malloc() function', 'Enter the allocated size of memory 10', 'Enter numbers from the user: 25', '40', '20', '13', '56', '78', '67', '24', '10', '7', 'Numbers are stores in contiguous memory:', 'The number is: 25', 'The number is: 40', 'The number is: 20', 'The number is: 13', 'The number is: 56', 'The number is: 78', 'The number is: 67', 'The number is: 24', 'The number is: 10', 'The number is: 7', 'Memory is created using the malloc() function', 'The number of elements to be entered:', '10', 'Memory is created using the malloc() function', 'Enter the elements in allocated space: 45', '12', '67', '89', '34', '56', '25', '25', '67', '34', 'Elements are:', '45', '12', '67', '89', '34', '56', '25', '25', '67', '34', 'The addition of stored elements is: 454']",[],[]
184,['Table Program in C'],"['This article will write the table programs using loops (for, do-while, and while loop) and functions (user-defined and recursion function) in the C programming language.']","['https://www.javatpoint.com/types-of-recursion-in-c', 'https://www.javatpoint.com/malloc-in-c', 'https://www.javatpoint.com/types-of-recursion-in-c', 'https://www.javatpoint.com/malloc-in-c', 'https://www.javatpoint.com/types-of-recursion-in-c']",['https://static.javatpoint.com/cpages/images/table-program-in-c.png'],[],[],"['Different ways to generate the table program', 'Program to generate the table of a given number using for loop', 'Program to generate the table of a number using while loop', 'Program to generate the table of a number using do-while loop', 'Program to generate the table using for loop and user-defined function', 'Program to generate the table of a number using recursion function', 'Program to generate the table of a number using goto statement', 'Program to generate the table of a number using pointer', 'Program to generate the table from 2 to 10 using nested for loop']",[],"['Following are the various ways to generate the table program in the C programming language.', ""Let's consider an example to print the table of the specific number using for loop in the C programming language."", 'Program1.c', ""Let's consider an example to print the table for a number using a while loop in the C programming language."", 'Program2.c', ""Let's consider an example to print the number table using a do-while loop in the C programming language."", 'Program3.c', ""Let's consider an example to print the table of the specific number using user-defined function and for loop in the C programming language."", 'Program4.c', ""Let's write an example to print the number table using the recursion function in the C programming language."", 'Program5.c', ""Let's consider an example to print the number table using a goto statement in the C programming language."", 'Program6.c', ""Let's consider an example to print the number table using a pointer in the C programming language."", 'Program7.c', ""Let's consider an example to print the table from 2 to 10 using nested for loop in the C programming language."", 'Program8.c']","['In the above code, for loop executes from 1 to 10, the given number is multiplied by 1, and the next iteration is multiplied by 2, and the process continues until it multiplies the number to 10. Finally, it prints the table on the screen.']","['A table (or multiplication table) of numbers is generated by multiplying a constant number with an iterative number from 1 to 10 to get the table. In other words, we can get the table of a number by multiplying the given number with counting from 1, 2, 3, 4, 5, ..., 9, 10. And on each iteration, the value of counting is incremented by 1, which goes up to 10, to print a complete table.', 'For example, suppose we want to write the table of 5 in C language. So, first, we take 5 as input from the user, and then, we use a loop or function that multiplies the number 5 by 1 (5 * 1), and then (5 * 2), (5 * 3), to the last (5 * 10) number, to get the complete table of the given numbers.']","['#include', 'int main()', 'int num, i; // declare a variable', 'printf ("" Enter a number to generate the table in C: "");', 'scanf ("" %d"", #); // take a positive number from the user', 'printf (""\\n Table of %d"", num);', 'for ( i = 1; i <= 10; i++)', 'printf (""\\n %d * %d = %d"", num, i, (num*i));', 'return 0;', '#include', 'int main()', 'int num, i = 1; // declare a variable', 'printf ("" Enter a number to generate the table in C: "");', 'scanf ("" %d"", #); // take a positive number from the user', 'printf (""\\n Table of %d \\n "", num);', 'while (i <= 10)', 'printf ("" %d x %d = %d \\n"", num, i, (num * i));', 'i++; // incremented by 1', 'return 0;', '#include', 'int main()', 'int num, i = 1; // declare a variable', 'printf ("" Enter a number to generate the table in C: "");', 'scanf ("" %d"", #); // take a positive number from the user', 'printf (""\\n Table of %d \\n"", num);', 'printf ("" %d x %d = %d \\n"", num, i, (num * i));', 'i++; // incremented by 1', '} while (i <= 10); // check condition', 'return 0;', '#include', 'void tab_num (int x);', 'int main ()', 'int number;', 'printf ("" Enter a number to get the table: "");', 'scanf ("" %d"", &number); // accept a number', 'printf (""\\n The multiplication table of %d \\n"", number);', 'tab_num (number); // call tab_num function', 'return 0;', 'void tab_num (int number)', 'int i; // declare variable', 'for ( i = 1; i <= 10; i++)', 'printf ("" %d x %d = %d \\n"", number, i, number * i);', '#include', 'int main()', 'int num, i = 0; // declare a variable', 'printf ("" Enter a number to generate the table in C: "");', 'scanf ("" %d"", #); // take a positive number from the user', 'printf (""\\n Table of %d"", num);', 'Multiply_tab (num, 1); // call function', 'void Multiply_tab (int num, int i)', 'printf ("" \\n"");', 'printf ("" %d x %d = %d "", num, i, (num * i));', 'if (i < 10)', 'return Multiply_tab (num, i + 1);', '#include', 'int main ()', 'int n, i = 1; // declare variable', 'printf ("" Enter a number to get the table: "");', 'scanf ("" %d"", &n); // take a positive number', 'table:  // It is a label', 'printf ("" %d * %d = %d \\n"", n, i, (n * i));', 'i++; // incremented by 1', '/* if statement check the value of i should not be greater than 10. */', 'if ( i <= 10)', 'goto table; // use goto statement to jump to the table label', '#include', 'int main ()', 'int n, i; // declare integer variables', 'int *ptr; // integer pointer variable', 'printf ("" Enter a number to print the table: "");', 'scanf ("" %d"", &n); // take a number', 'ptr = &n // store the address of n to ptr', 'printf ("" \\n Table of %d: \\n"", n);', 'for ( i = 1; i <= 10; i++)', 'printf ("" %d * %d = %d \\n"", n, i, (n*i));', 'return 0;', '#include', 'int main ()', 'int i, j; /* Here, the i variable is used for the outer loop, and j is used for the inner loop. */', 'int num1, num2;', 'printf ("" Enter the first number from to get the table: "");', 'scanf ("" %d"", &num1);', 'printf ("" Enter the last number: "");', 'scanf ("" %d"", &num2);', 'for (i = num1; i <= num2; i++)', 'num1 = i; /* Here the value of i is incremented by 1 and assigned to num variable on completion of each table. */', 'printf ("" Table of %d => "", num1);', 'for (j = 1; j <=10; j++)', 'printf("" | %3d |"", num1 * j);', 'printf ("" \\n"");', 'return 0;']","['Enter a number to generate the table in C: 7', 'Table of 7', '7 * 1 = 7', '7 * 2 = 14', '7 * 3 = 21', '7 * 4 = 28', '7 * 5 = 35', '7 * 6 = 42', '7 * 7 = 49', '7 * 8 = 56', '7 * 9 = 63', '7 * 10 = 70', 'Enter a number to generate the table in C: 8', 'Table of 8', '8 x 1 = 8', '8 x 2 = 16', '8 x 3 = 24', '8 x 4 = 32', '8 x 5 = 40', '8 x 6 = 48', '8 x 7 = 56', '8 x 8 = 64', '8 x 9 = 72', '8 x 10 = 80', 'Enter a number to generate the table in C: 3', 'Table of 3', '3 x 1 = 3', '3 x 2 = 6', '3 x 3 = 9', '3 x 4 = 12', '3 x 5 = 15', '3 x 6 = 18', '3 x 7 = 21', '3 x 8 = 24', '3 x 9 = 27', '3 x 10 = 30', 'Enter a number to get the table: 23', 'The multiplication table of 23', '23 x 1 = 23', '23 x 2 = 46', '23 x 3 = 69', '23 x 4 = 92', '23 x 5 = 115', '23 x 6 = 138', '23 x 7 = 161', '23 x 8 = 184', '23 x 9 = 207', '23 x 10 = 230', 'Enter a number to generate the table in C: 9', 'Table of 9', '9 x 1 = 9', '9 x 2 = 18', '9 x 3 = 27', '9 x 4 = 36', '9 x 5 = 45', '9 x 6 = 54', '9 x 7 = 63', '9 x 8 = 72', '9 x 9 = 81', '9 x 10 = 90', 'Enter a number to get the table: 5', '5 * 1 = 5', '5 * 2 = 10', '5 * 3 = 15', '5 * 4 = 20', '5 * 5 = 25', '5 * 6 = 30', '5 * 7 = 35', '5 * 8 = 40', '5 * 9 = 45', '5 * 10 = 50', 'Enter a number to print the table: 17', 'Table of 17:', '17 * 1 = 17', '17 * 2 = 34', '17 * 3 = 51', '17 * 4 = 68', '17 * 5 = 85', '17 * 6 = 102', '17 * 7 = 119', '17 * 8 = 136', '17 * 9 = 153', '17 * 10 = 170', 'Enter the first number from to get the table: 2', 'Enter the last number: 10', 'Table of 2 =>  |   2 | |   4 | |   6 | |   8 | |  10 | |  12 | |  14 | |  16 | |  18 | |  20 |', 'Table of 3 =>  |   3 | |   6 | |   9 | |  12 | |  15 | |  18 | |  21 | |  24 | |  27 | |  30 |', 'Table of 4 =>  |   4 | |   8 | |  12 | |  16 | |  20 | |  24 | |  28 | |  32 | |  36 | |  40 |', 'Table of 5 =>  |   5 | |  10 | |  15 | |  20 | |  25 | |  30 | |  35 | |  40 | |  45 | |  50 |', 'Table of 6 =>  |   6 | |  12 | |  18 | |  24 | |  30 | |  36 | |  42 | |  48 | |  54 | |  60 |', 'Table of 7 =>  |   7 | |  14 | |  21 | |  28 | |  35 | |  42 | |  49 | |  56 | |  63 | |  70 |', 'Table of 8 =>  |   8 | |  16 | |  24 | |  32 | |  40 | |  48 | |  56 | |  64 | |  72 | |  80 |', 'Table of 9 =>  |   9 | |  18 | |  27 | |  36 | |  45 | |  54 | |  63 | |  72 | |  81 | |  90 |', 'Table of 10 =>  |  10 | |  20 | |  30 | |  40 | |  50 | |  60 | |  70 | |  80 | |  90 | | 100 |']",[],['|||Using for loop|||Using while loop|||Using do-while loop|||Using user-defined function|||Using recursion function|||Using if and goto statement|||Using for loop and pointer|||Using nested for loop |||']
185,['Types of Recursion in C'],"['This section will discuss the different types of recursion in the C programming language. Recursion is the process in which a function calls itself up to n-number of times. If a program allows the user to call a function inside the same function recursively, the procedure is called a recursive call of the function. Furthermore, a recursive function can call itself directly or indirectly in the same program.']","['https://www.javatpoint.com/convert-uppercase-to-lowercase-in-c', 'https://www.javatpoint.com/table-program-in-c', 'https://www.javatpoint.com/convert-uppercase-to-lowercase-in-c', 'https://www.javatpoint.com/table-program-in-c', 'https://www.javatpoint.com/convert-uppercase-to-lowercase-in-c']",['https://static.javatpoint.com/cpages/images/types-of-recursion-in-c.png'],[],[],"['Different types of the recursion', 'Direct Recursion', 'Indirect Recursion', 'Tail Recursion', 'Non-Tail / Head Recursion', 'Linear Recursion', 'Tree Recursion']",[],"['Syntax of the Recursion function', 'Following are the types of the recursion in C programming language, as follows:', 'When a function calls itself within the same function repeatedly, it is called the direct recursion.', 'Structure of the direct recursion', ""Let's write a program to demonstrate the direct recursion in C programming language."", 'Program2.c', 'When a function is mutually called by another function in a circular manner, the function is called an indirect recursion function.', 'Structure of the indirect recursion', ""Let's write a program to demonstrate the indirect recursion in C programming language."", 'Program3.c', ""Let's write a program to demonstrate the tail recursion in C programming language."", 'Program4.c', ""Let's write a program to demonstrate the Head/Non-Tail recursion in C programming language."", 'Program5.c', ""Let's write a program to demonstrate the linear Recursion in C programming language."", 'Program6.c', 'A function is called the tree recursion, in which the function makes more than one call to itself within the recursive function.', ""Let's write a program to demonstrate the tree recursion in C programming language."", 'Program7.c']","[""In the above syntax, the main() function calls the recursion function only once. After that, the recursion function calls itself up to the defined condition, and if the user doesn't define the condition, it calls the same function infinite times."", 'In the above structure of the direct recursion, the outer fun() function recursively calls the inner fun() function, and this type of recursion is called the direct recursion.', 'A function is called the linear recursive if the function makes a single call to itself at each time the function runs and grows linearly in proportion to the size of the problem.']","['In this structure, there are four functions, fun1(), fun2(), fun3() and fun4(). When the fun1() function is executed, it calls the fun2() for its execution. And then, the fun2() function starts its execution calls the fun3() function. In this way, each function leads to another function to makes their execution circularly. And this type of approach is called indirect recursion.', 'A recursive function is called the tail-recursive if the function makes recursive calling itself, and that recursive call is the last statement executes by the function. After that, there is no function or statement is left to call the recursive function.', 'A function is called the non-tail or head recursive if a function makes a recursive call itself, the recursive call will be the first statement in the function. It means there should be no statement or operation is called before the recursive calls. Furthermore, the head recursive does not perform any operation at the time of recursive calling. Instead, all operations are done at the return time.']","['void recursion ()', 'recursion(); // The recursive function calls itself inside the same function', 'int main ()', 'recursion (); // function call', '#include', 'int fibo_num (int i)', 'if ( i == 0)', 'return 0;', 'if ( i == 1)', 'return 1;', 'return fibo_num (i - 1) + fibonacci (i -2);', 'int main ()', 'for ( i = 0; i < 10; i++)', 'printf ("" %d \\t "", fibo_num (i));', 'return 0;', '#include', 'void odd(); // Add 1 when the function is odd()', 'void even(); // Subtract 1 when the function is even', 'int num = 1; // global variable', 'void odd ()', 'if (num <= 10)', 'printf ("" %d "", num + 1);  // print a number by adding 1', 'num++; // increment by 1', 'even(); // invoke the even function', 'return;', 'void even ()', 'if ( num <= 10)', 'printf ("" %d "", num - 1); // print a number by subtracting 1', 'num++;', 'odd(); // call the odd() function', 'return;', 'int main ()', 'odd(); // main call the odd() function at once', 'return 0;', '#include', 'void fun1( int num)', 'if (num == 0)', 'return;', 'printf (""\\n Number is: %d"", num); // print the number', 'return fun1 (num - 1);\t\t// recursive call at the end in the fun() function', 'int main ()', 'fun1(7); // pass 7 as integer argument', 'return 0;', '#include', 'void head_fun (int num)', 'if ( num > 0 )', 'head_fun (num -1);', 'printf ("" %d"", num);', 'int main ()', 'int a = 5;', 'printf ("" Use of Non-Tail/Head Recursive function \\n"");', 'head_fun (a); // function calling', 'return 0;', '#include', '#define NUM 7', 'int rec_num( int *arr, int n)', 'if (n == 1)', 'return arr[0];', 'return Max_num (rec_num (arr, n-1), arr[n-1]);', 'int Max_num (int n, int m)', 'if (n > m)', 'return n;', 'return m;', 'int main ()', 'int arr[NUM] = { 4, 8, 23, 19, 5, 35, 2};', 'int max = rec_num(arr, NUM); // call function', 'printf ("" The maximum number is: %d\\n"", max); // print the largest number', '#include', 'int fibo_num (int num)', 'if (num <= 1)', 'return num;', 'return fibo_num (num - 1 ) + fibo_num(num - 2);', 'void main()', 'int num = 7;', 'printf ("" Use of Tree Recursion: \\n"");', 'printf ("" The Fibonacci number is: %d"", fibo_num(7));']","['0\t1\t1\t2\t3\t5\t8\t13\t21\t34', '2  1  4  3  6  5  8  7  10  9', 'Number is: 7', 'Number is: 6', 'Number is: 5', 'Number is: 4', 'Number is: 3', 'Number is: 2', 'Number is: 1', 'Use of Non-Tail/Head Recursive function', '1 2 3 4 5', 'The maximum number is: 35', 'Use of Tree Recursion:', 'The Fibonacci number is: 13']",[],['|||Direct Recursion|||Indirect Recursion|||Tail Recursion|||No Tail/ Head Recursion|||Linear recursion|||Tree Recursion|||']
186,['Convert Uppercase to Lowercase in C'],"['This section will discuss the different programs to convert the uppercase letters (character or strings) into lowercase in the C programming language. The uppercase letter is the capital letter of the alphabet. For example, capital letters are A, B, C, D, …, X, Y, Z. Similarly, a lowercase letter is represented by the small letter of the alphabet. For example, small letters are a, b, c, d, e…., w, x, y, z.']","['https://www.javatpoint.com/unary-operator-in-c', 'https://www.javatpoint.com/types-of-recursion-in-c', 'https://www.javatpoint.com/unary-operator-in-c', 'https://www.javatpoint.com/types-of-recursion-in-c', 'https://www.javatpoint.com/unary-operator-in-c']",['https://static.javatpoint.com/cpages/images/convert-uppercase-to-lowercase-in-c.png'],[],[],"['Program to convert the uppercase character into lowercase', 'Program to convert the uppercase string into lower case using for loop', 'Program to convert the uppercase string into lower case using while loop', 'Program to convert the uppercase string into lowercase using the strlwr() function', 'Program to convert the uppercase string into lowercase using the user-defined function', 'Program to convert the uppercase string into lowercase using the recursion function']",[],"[""Let's write a program to convert the uppercase character into lowercase character in C programming language."", 'Program1.c', ""Let's write a simple program to convert the uppercase string into lowercase using for loop in the C Programming."", 'Program2.c', ""Let's consider an example to print the lowercase string from uppercase using while loop in C programming."", 'Program3.c', ""Let's create a program to convert the uppercase string into the lowercase using the built-in strlwr() function in C programming."", 'Program4.c', ""Let's consider an example to convert the uppercase string into lowercase using the user-defined function in C programming."", 'Program5.c', ""Let's consider an example to print the lowercase string from uppercase using the recursion function in the C programming."", 'Program6.c']","['Strlwr() function: The strlwr() function is a predefined function of the string library used to convert the uppercase string into the lowercase by passing the given string as an argument to return the lowercase string.', 'The strlwr() function has a upr argument representing the uppercase string, and the strlwr() function takes upr argument to return a lowercase string.']","['When we convert the capital letters or strings into lowercase using the ASCII codes, the process converts the uppercase to the lowercase letters in C programming. The ASCII value of the uppercase letter (A -Z) is ranging from 65 to 90, and the ASCII value of the lowercase letter (a -z) is ranging from 97 to 122.', ""For example, we have the capital letter 'A' and want to convert it into lowercase letter 'a', we need to add 32 to the ASCII value of A (65) that returns character 'a' whose ASCII value is 97 (65 + 32). Similarly, we can convert the uppercase string 'HELLO' into the lowercase string 'hello'.""]","['#include', '#include', 'int main ()', 'char upr, lwr; // declare variables', 'int ascii;', 'printf ("" Enter the Upper Case Character: "");', 'scanf ("" %c"", &upr);', 'ascii = upr + 32;', 'printf ("" %c character in Lower case is: %c"", upr, ascii);', 'printf ("" \\n Enter the Lower Case Character: "");', 'scanf ("" %c"", &lwr);', 'ascii = lwr - 32;', 'printf ("" %c character in the Upper case is: %c"", lwr, ascii);', 'return 0;', '#include', '#include', 'int main ()', 'char str[30];', 'printf ("" Enter the string: "");', 'scanf ("" %s"", &str); // take a string', 'for ( i = 0; i <= strlen (str); i++)', 'if (str[i] >= 65 && str[i] <= 90)', 'str[i] = str[i] + 32; /* add 32 to string character to convert into lower case. */', 'printf ("" \\n Upper Case to Lower case string is: %s"", str);', 'return 0;', '#include', '#include', 'int main ()', 'char upr[50], lwr[50]; // declare character array', 'int i = 0;', 'printf ("" Enter an upper case string: "");', 'gets (upr); // use gets() function to take string', ""/* use while loop to iterate the character array string until '\\0' not occur. */"", ""while (upr [i] != '\\0')"", 'lwr [i] = upr[i] + 32; // Add 32 to string character to convert into lower case.\t\ti++;', 'printf ("" \\n The lowercase string is: %s"", lwr);', 'return 0;', 'strlwr (upr);', '#include', '#include', 'int main ()', 'char upr[50]; // declare character array', 'printf ("" Enter the upper case string: "");', 'gets (upr); // use gets() function to take string', 'printf ("" \\n The lowercase string is: %s"", strlwr(upr));', 'return 0;', '#include', '#include', 'void upr_lwr (char *str)', 'int i;', 'for ( i = 0; str[i]; i++)', 'if ( str [i] >= 65 && str [i] <= 90)', 'str[i] = str[i] + 32; /* add 32 to string character to change into lowercase */', 'int main ()', 'char str[100]; // declare the size of character array', 'printf ("" Enter the upper case string: "");', 'gets (str); // use gets() function to take string', 'upr_lwr (str);', 'printf ("" \\n The lowercase string is: %s"", str);', 'return 0;', '#include', '#include', '#include', 'int upr_lwr (char *str)', 'static int i = 0;', 'if (str[i])', ""/* If statement check the enter character's ASCII value is more than 65 and less than equal to 90. */"", 'if ( str[i] >= 65 && str[i] <= 90)', 'str[i] = str[i] + 32; // add 32 to string character to change into lowercase', 'upr_lwr(str);', 'int main ()', 'char str[100]; // declare the size of character array', 'printf ("" Enter the upper case string: "");', 'gets (str); // use gets() function to take string', 'upr_lwr (str);', 'printf ("" \\n The lowercase string is: %s"", str);']","['Enter the Upper Case Character: A', 'A character in Lower case is: a', 'Enter the Lower Case Character: z', 'z character in the Upper case is: Z', 'Enter the string: WELCOME', 'Upper Case to Lower case string is: welcome', 'Enter an upper case string: CPROGRAMMING', 'The lowercase string is: cprogramming', 'Enter the upper case string: GOOD BYE', 'The lowercase string is: good bye', 'Enter the upper case string: JAVATPOINT', 'The lowercase string is: javatpoint', 'Enter the upper case string: C PROGRAMMING LANGUAGE', 'The lowercase string is: c programming language']",[],[]
187,['Unary Operator in C'],"['In this section, we will discuss the unary operator in the C programming language. Operators are the special symbols used to perform mathematical and logical operations to the given numbers or operands and returns results based on passed operator between the operands.']","['https://www.javatpoint.com/arithmetic-operator-in-c', 'https://www.javatpoint.com/convert-uppercase-to-lowercase-in-c', 'https://www.javatpoint.com/arithmetic-operator-in-c', 'https://www.javatpoint.com/convert-uppercase-to-lowercase-in-c', 'https://www.javatpoint.com/arithmetic-operator-in-c']",['https://static.javatpoint.com/cpages/images/unary-operator-in-c.png'],[],['Types of the Unary Operator'],"['Unary Minus (-)', 'Unary plus (+)', 'Unary Increment Operator (++)', 'Unary Decrement Operator (--)', 'Unary Sizeof() Operator', 'Logical Not (!) Operator', 'AddressOf Operator (&)']",[],"['Following are the types of the unary operators in the C programming language.', 'Example 1:', 'The unary plus operator is represented as the ""+"" symbol, and it does not change to the operand value.', 'Example 2:', 'For example:', ""The initial value of x is 10, and using the pre-increment operator (++x) increases the operand value by 1 before assigning it to the variable 'A'."", 'For example:', ""Here the initial value of the x variable is 10 and using the post-increment operator (x++) to assign increment value of the 'x' to the variable 'A'. "", 'Example 3:', 'Example 4:', 'The sizeof is a keyword used to find the size of different data types or operands like int, float, char, double, etc.', 'Example 5:', 'Example 6:', 'The Unary AddressOf Operator is denoted as ampersand (&) symbol, which is used to find the address of a variable defined in computer memory.', 'Example 7:']","['It is the unary increment operator, which is denoted by the ""++"" symbol. The ""++"" symbol represents the operand\'s value is increased by 1. It can be used in two ways, as the post-increment and the pre-increment.', ""Pre Increment: The pre-increment operator is represented as (++a), which means the value of variable 'a' is increment by 1 before using operand to the expression."", ""Post Increment: The (a++) symbol represents the post-increment operator, which means the value of 'a' is incremented by 1 after assigning the original value to the expression or another variable."", 'Pre Decrement: The pre decrement operator is denoted as (--a) symbol, meaning the operand value is decreased by 1 before assigning to another variable or expression.', 'Post Decrement: The Post decrement operator is denoted as (a--) symbol, which means the original value is decreased by 1 after assigning to another variable or expression.', 'The logical not operator is used to reverse the given condition. For example, if the operand is true, the logical not operator (!) reverses and return false; if the operand is false, the logical operator returns true.']","[""A unary operator is an operator used to operate on a single operand to return a new value. In other words, it is an operator that updates the value of an operand or expression's value by using the appropriate unary operators. In Unary Operator, operators have equal priority from right to left side associativity."", 'The Unary Minus operator is represented using the symbol (-). The unary operator is used to change the sign of any positive value to a negative value. It means it changes the positive number to the negative, and a negative number becomes the positive number using the unary minus operator.', ""The unary decrement operator is opposite to the unary increment operator. The Unary decrement operator is represented by the double minus (--) symbol, and it is used to decrease the operand value by 1 according to the decrement's types. The Unary decrement operator is of two types: the Pre decrement operator and the Post Decrement operator.""]","['int a = 2;', 'int b = -(a);', '#include', '#include', 'int main ()', 'int a = 5; // positive value of a.', 'int b = -(a); // use unary minus operator to change the value', 'int n1 = 20;', 'int n2 = -30;', 'printf ("" The value of a: %d \\n"", a);', 'printf ("" The value of b: %d \\n"", b);', 'printf ("" The value of -n1: %d \\n"", -n1);', 'printf ("" The value of -n2: %d "", -n2);', 'return 0;', '#include', '#include', 'int main ()', 'int a = 10; // use unary plus operator', 'int b = (-10); // It does not change the operand value', 'printf ("" The value of a: %d \\n"", a);', 'printf ("" The value of b: %d \\n"", b);', 'return 0;', 'x = 10;', 'A = ++x;', 'x = 10;', 'A = x++;', '#include', '#include', 'int main ()', 'int x, y, a, b; // declare local variable', 'a = 10;', 'x = ++a; // It shows pre increment operator', 'printf ("" Pre Increment Operator"");', 'printf ("" \\n The value of x is %d."", x);', 'printf ("" \\n The value of a is %d."", a);', 'b = 20;', 'y = b++; // It shows the post increment operator', 'printf ("" \\n\\n Post Increment Operator"");', 'printf ("" \\n The value of y is %d."", y);', 'printf ("" \\n The value of b is %d."", b);', 'return 0;', 'int pre = --a;', 'int post = a--;', '#include', '#include', 'int main ()', 'int x, y, a, b; // declare local variable', 'a = 10;', 'x = --a; // It shows pre decrement operator', 'printf ("" Pre Decrement Operator"");', 'printf ("" \\n The value of x is %d."", x);', 'printf ("" \\n The value of a is %d."", a);', 'b = 20;', 'y = b--; // It shows the post decrement operator', 'printf ("" \\n\\n Post Decrement Operator"");', 'printf ("" \\n The value of y is %d."", y);', 'printf ("" \\n The value of b is %d."", b);', 'return 0;', 'sizeof(data_variable);', '#include', '#include', 'int main ()', 'float y;', 'char ch;', 'double z;', 'printf ("" The size of the int (x) variable is: %d"", sizeof(x));', 'printf ("" \\n The size of the float (y) variable is: %d"", sizeof(y));', 'printf ("" \\n The size of the char (ch) variable is: %d"", sizeof(ch));', 'printf ("" \\n The size of the double (z) variable is: %d"", sizeof(z));', 'return 0;', 'bool a = true;', 'bool b = !a; // It reverse the condition of variable b', '#include', '#include', 'int main ()', 'bool a = true;', 'bool  b;', 'b = !a; // use logical operator to reverse the condition', 'printf ("" The Boolean value of a is: %d"", a);', 'printf ("" \\n The Boolean value of b is: %d"", b);', 'bool c = 0;', 'bool d = !c;', 'printf ("" \\n The Boolean value of c is: %d"", c);', 'printf ("" \\n The Boolean value of d is: %d"", d);', 'return 0;', 'int a = 5;', 'int b = &a // variable b hold the address of variable a', '#include', '#include', 'int main ()', 'int a = 10;', 'printf ("" The value of variable a is: %d"", a);', 'printf ("" \\n The address of variable b is: %d"", b);', 'return 0;']","['The value of a: 5', 'The value of b: -5', 'The value of -n1: -20', 'The value of -n2: 30', 'The value of a: 10', 'The value of b: -10', 'Pre Increment Operator', 'The value of x is 11.', 'The value of a is 11.', 'Post Increment Operator', 'The value of y is 20.', 'The value of b is 21.', 'Pre Decrement Operator', 'The value of x is 9.', 'The value of a is 9.', 'Post Decrement Operator', 'The value of y is 20.', 'The value of b is 19.', 'The size of the int (x) variable is: 4', 'The size of the float (y) variable is: 4', 'The size of the char (ch) variable is: 1', 'The size of the double (z) variable is: 8', 'The Boolean value of a is: 1', 'The Boolean value of b is: 0', 'The Boolean value of c is: 0', 'The Boolean value of d is: 1', 'The value of variable a is: 10', 'The address of variable b is: 6487704']",[],['|||Unary Minus (-)|||Unary Plus (+)|||Increment (++)|||Decrement (--)|||Logical Negation (!)|||Address Operator (&)|||Sizeof() operator|||']
188,['Arithmetic Operator in C'],"['Operators are the special symbols in the C programming language, which is used to perform various mathematical and logical operations on the given operands to return the appropriate results. There are various operators in the C programming language such as Arithmetic Operators, Relational Operators, Shift Operators, Logical Operators, Bitwise Operators, Ternary or Conditional Operators, and Assignment Operators. But here, we will understand only the Arithmetic Operator in the C programming language.']","['https://www.javatpoint.com/ceil-function-in-c', 'https://www.javatpoint.com/unary-operator-in-c', 'https://www.javatpoint.com/ceil-function-in-c', 'https://www.javatpoint.com/unary-operator-in-c', 'https://www.javatpoint.com/ceil-function-in-c']",['https://static.javatpoint.com/cpages/images/arithmetic-operator-in-c.png'],[],[],"['Plus Operator', 'Minus Operator', 'Multiplication Operator', 'Division Operator', 'Modulus Operator', 'Increment Operator', 'Decrement Operator']",[],"['Program1.c', 'Program2.c', 'Program3.c', 'Program4.c', 'Program5.c', 'Increment Operator is the type of Arithmetic operator, which is denoted by double plus (++) operator. It is used to increase the integer value by 1.', 'For example, suppose the integer value of A is 10, the increment operator increases the operand value by 1, which returns 11.', 'Program6.c', 'Decrement Operator is denoted by the double minus (--) symbol, which decreases the operand value by 1.', 'For example, suppose the integer value of A is 10, the decrement operator decreases the operand value by 1 that returns 9.', 'Program7.c']","['Arithmetic Operator is used to performing mathematical operations such as addition, subtraction, multiplication, division, modulus, etc., on the given operands.', ""For example: 5 + 3 = 8, 5 - 3 = 2, 2 * 4 = 8, etc. are the examples of arithmetic operators. Let's discuss the different types of Arithmetic Operators in the C programming."", 'It is a simple Plus (+) Operator used to add two given operands. We can use Plus Operator with different data types such as integer, float, long, double, enumerated and string type data to add the given operand.', ""For example, there are two operands, 5 and 6, and we want to get the sum of these numbers. Therefore, we use the '+' Operator between the given numbers that return integer data 11."", ""For example, there are two operands, 15 and 6, and we want their subtraction result. So, we use the '-' Operator between the given numbers that return data 9."", 'The multiplication operator is represented as an asterisk (*) symbol, and it is used to return the product of n1 and n2 numbers. The data type of the given number can be different types such as int, float, and double in the C programing language.', ""For example, there are two operands 15 and 6, and we want to get their product. So, we can use the '*' Operator between the given numbers that return int data 90."", 'The division operator is an arithmetic operator that divides the first (n1) by the second (n2) number. Using division operator (/), we can divide the int, float, double and long data types variables.', ""For example, there are two operands, 25.5 and 5.0, and we want to get their division result. So, we use the '/' Operator between the given numbers that return float data 5.1."", 'The modulus operator is represented by the percentage sign (%), and it is used to return the remainder by dividing the first number by the second number.', ""For example, there are two operands 25 and 4, and we want to get their modulus result. So, we use the '%' operator in between the given numbers that return remainder 1.""]","['The minus operator is denoted by the minus (-) symbol. It is used to return the subtraction of the first number from the second number. The data type of the given number can be different types, such as int, float, double, long double, etc., in the programing language.']","['C = A + B;', '#include', '#include', 'int main ()', 'int num1, num2, res;', 'float f1, f2, res1;', 'double d1, d2, res2;', 'printf ("" Enter two integer numbers: "");', 'scanf (""%d %d"", &num1, &num2);', 'res = num1 + num2; // use + operator', 'printf ("" Enter two float numbers: \\n "");', 'scanf (""%f %f"", &f1, &f2);', 'res1 = f1 + f2; // use + operator', 'printf ("" Enter two double data type numbers: \\n "");', 'scanf (""%lf %lf"", &d1, &d2);', 'res2 = d1 + d2; // use + operator', 'printf ("" The sum of two integer numbers: %d \\n"", res);', 'printf ("" The sum of two float numbers: %f \\n "", res1);', 'printf ("" The sum of two double numbers: %lf"", res2);', 'return 0;', 'C = A - B;', '/* program to subtract the two numbers using minus operator */', '#include', '#include', 'int main ()', 'int num1, num2, res;', 'float f1, f2, res1;', 'double d1, d2, res2;', 'printf ("" Enter two integer numbers: "");', 'scanf (""%d %d"", &num1, &num2);', 'res = num1 - num2; // use + operator', 'printf ("" Enter two float numbers: \\n "");', 'scanf (""%f %f"", &f1, &f2);', 'res1 = f1 - f2; // use + operator', 'printf ("" Enter two double data type numbers: \\n "");', 'scanf (""%lf %lf"", &d1, &d2);', 'res2 = d1 - d2; // use + operator', 'printf ("" The subtraction of two integer numbers: %d \\n"", res);', 'printf ("" The subtraction of two float numbers: %f \\n "", res1);', 'printf ("" The subtraction of two double numbers: %lf"", res2);', 'return 0;', 'C = A * B;', '/* program to multiply two numbers using astrisk (*) operator. */', '#include', '#include', 'int main ()', 'int num1, num2, res;', 'float f1, f2, res1;', 'double d1, d2, res2;', 'printf ("" Enter two integer numbers: "");', 'scanf (""%d %d"", &num1, &num2);', 'res = num1 * num2; // use * operator', 'printf ("" Enter two float numbers: \\n "");', 'scanf (""%f %f"", &f1, &f2);', 'res1 = f1 * f2; // use * operator', 'printf ("" Enter two double data type numbers: \\n "");', 'scanf (""%lf %lf"", &d1, &d2);', 'res2 = d1 * d2; // use * operator', 'printf ("" The multiplication of two integer numbers: %d \\n"", res);', 'printf ("" The multiplication of two float numbers: %f \\n "", res1);', 'printf ("" The multiplication of two double numbers: %lf"", res2);', 'return 0;', 'C = A / B;', '/* program to divide the first number by second number using division (/) operator. */', '#include', '#include', 'int main ()', 'int num1, num2, res;', 'float f1, f2, res1;', 'double d1, d2, res2;', 'printf ("" Enter two integer numbers: "");', 'scanf (""%d %d"", &num1, &num2);', 'res = num1 / num2; // use / operator', 'printf ("" Enter two float numbers: \\n "");', 'scanf (""%f %f"", &f1, &f2);', 'res1 = f1 / f2; // use / operator', 'printf ("" Enter two double data type numbers: \\n "");', 'scanf (""%lf %lf"", &d1, &d2);', 'res2 = d1 / d2; // use / operator', 'printf ("" The division of two integer numbers: %d \\n"", res);', 'printf ("" The division of two float numbers: %f \\n "", res1);', 'printf ("" The division of two double numbers: %lf"", res2);', 'return 0;', 'C = A % B;', '/* program to return the remainder of two numbers using modulus (%) operator. */', '#include', '#include', 'int main ()', 'int num1, num2, res;', 'printf ("" Enter two integer numbers: "");', 'scanf (""%d %d"", &num1, &num2);', 'res = num1 % num2; // use % operator', 'printf ("" The modulus of two integer numbers: %d \\n"", res);', 'return 0;', 'B = A++;', '/* program to demonstrate the increment (++) operator. */', '#include', '#include', 'int main ()', 'int num1, res;', 'printf ("" Enter the positive number: "");', 'scanf (""%d"", &num1);', 'res = num1++; // use increment operator', 'printf ("" The incremented value is: %d "", num1);', 'return 0;', 'B = A--;', '/* program to demonstrate the decrement operator (--) in the Arithmetic Operator. */', '#include', '#include', 'int main ()', 'int num1, res;', 'printf ("" Enter the positive number: "");', 'scanf (""%d"", &num1);', 'res = num1--; // use decrement operator', 'printf ("" The decremented value is: %d "", num1);', 'return 0;']","['Enter two integer numbers: 25', '35', 'Enter two float numbers:', '79.21', '67.79', 'Enter two double data type numbers:', '234.123', '345.341', 'The sum of two integer numbers: 60', 'The sum of two float numbers: 147.000000', 'The sum of two double numbers: 579.464000', 'Enter two integer numbers: 56', '11', 'Enter two float numbers:', '78.98', '56.45', 'Enter two double data type numbers:', '47789.7149', '1234.7987', 'The subtraction of two integer numbers: 45', 'The subtraction of two float numbers: 22.530003', 'The subtraction of two double numbers: 46554.916200', 'Enter two integer numbers: 15', '12', 'Enter two float numbers:', '2.5', '3.5', 'Enter two double data type numbers:', '234.324', '798.124', 'The multiplication of two integer numbers: 180', 'The multiplication of two float numbers: 8.750000', 'The multiplication of two double numbers: 187019.608176', 'Enter two integer numbers: 125', '15', 'Enter two float numbers:', '214.32', '248.56', 'Enter two double data type numbers:', '4243.7691', '687.434', 'The division of two integer numbers: 8', 'The division of two float numbers: 0.862247', 'The division of two double numbers: 6.173348', 'Enter two integer numbers: 35', '3', 'The modulus of two integer numbers: 2', 'Enter the positive number: 10', 'The incremented value is: 11', 'Enter the positive number: 10', 'The decremented value is: 9']",[],[]
189,['Ceil Function in C'],"['This section will discuss the Ceil function in the C programming language. Ceil function is a predefined function of math.h header file. It returns the nearest integer number, which is greater than or equal to the number passed as an argument in it. For example, we pass the float number 3.4, and the ceil() function returns the greatest number 4.']","['https://www.javatpoint.com/relational-operator-in-c', 'https://www.javatpoint.com/arithmetic-operator-in-c', 'https://www.javatpoint.com/relational-operator-in-c', 'https://www.javatpoint.com/arithmetic-operator-in-c', 'https://www.javatpoint.com/relational-operator-in-c']",['https://static.javatpoint.com/cpages/images/ceil-function-in-c.png'],[],[],"['Syntax', 'Parameters', 'Returns', 'Properties of the ceil function', 'Example 1: Program to ceil a number using the ceil() function', 'Example 2: Program to ceil the floating number using the ceil() function', 'Example 3: Program to round up the floating number using the ceil() function', 'Example 4: Program to round up the positive and negative numbers using the ceil() function']","['Note: The ceil() function can only be used with floating-point positive and negative numbers to round off the given number. If the passed positive and negative number is an integer, the function returns the same number without ceiling or round off the nearest given number.']","['Here, x is an argument of the ceil function.', 'The ceil() function returns the smallest possible integer value to round up the passed number x.', 'As shown in the program, the value of variable num 9.37 is passed to the ceil() function returns the round off to its nearest integer value 10.']",[],[],"['double ceil ( double x);', '#include', '#include', 'int main ()', 'double num = 9.37;', 'int result;', 'result = ceil (num);', 'printf ( "" \\n The ceiling integer of %.2f = %d "", num, result);', 'return 0;', '#include', '#include', 'int main ()', 'float f1, f2, f3, f4, f5;', 'f1 = 2.3;', 'f2 = -2.7;', 'f3 = 5.1;', 'f4 = 56.4;', 'f5 = 2.8;', 'printf ("" The ceiling value of %.2f is %.2f \\n "", f1, ceil (f1));', 'printf ("" The ceiling value of %.2f is %.2f \\n "", f2, ceil (f2));', 'printf ("" The ceiling value of %.2f is %.2f \\n "", f3, ceil (f3));', 'printf ("" The ceiling value of %.2f is %.2f \\n "", f4, ceil (f4));', 'printf ("" The ceiling value of %.2f is %.2f \\n "", f5, ceil (f5));', 'return 0;', '#include', '#include', 'int main ()', 'float num;', 'float result;', 'printf ("" Enter the float number: "");', 'scanf ( ""%f"", #);', 'result = ceil (num);', 'printf ( "" The ceil of %.2f is %f "", num, result);', 'return 0;', '#include', '#include', 'int main ()', 'int num, result, num2, result2;', 'printf ("" Enter the positive integer: "");', 'scanf ("" %d"", #);', 'printf ("" Enter the negative integer: "");', 'scanf ("" %d"", &num2);', 'result = ceil (num);', 'result2 = ceil (num2);', 'printf ( "" \\n The ceiling integer of %d = %d "", num, result);', 'printf ( "" \\n The ceiling integer of %d = %d "", num2, result2);', 'return 0;']","['The ceiling integer of 9.37 = 10', 'The ceiling value of 2.30 is 3.00', 'The ceiling value of -2.70 is -2.00', 'The ceiling value of 5.10 is 6.00', 'The ceiling value of 56.40 is 57.00', 'The ceiling value of 2.80 is 3.00', 'Enter the float number: 55.6', 'The ceil of 55.60 is 56.000000', 'Enter the positive integer: 56', 'Enter the negative integer: -24', 'The ceiling integer of 56 = 56', 'The ceiling integer of -24 = -24']",[],"['|||It is a built-in method of math.h header file.|||Using the ceil() function to return the smallest number greater than or equal to the parametric number.|||If the passed number is 0, the ceil() function returns the 0.|||If the number is equal to the mathematical integer, the result generated by the ceil() function will be the same as the specified number.|||If a number is less than 0 but greater than -1.0, the result will be zero.|||']"
190,['Relational Operator in C'],"['Operators are the special symbols used to perform mathematical and logical operations to the given operands. There are various types of operators in C, such as arithmetic, logical, bitwise, relational, conditional or ternary, etc.']","['https://www.javatpoint.com/assignment-operator-in-c', 'https://www.javatpoint.com/ceil-function-in-c', 'https://www.javatpoint.com/assignment-operator-in-c', 'https://www.javatpoint.com/ceil-function-in-c', 'https://www.javatpoint.com/assignment-operator-in-c']",['https://static.javatpoint.com/cpages/images/relational-operator-in-c.png'],[],['Types of Relational Operators'],"['Equal To Operator (==)', 'Not Equal To Operator (!=)', 'Less than Operator (<)', 'Greater than Operator (>)', 'Less than Equal To Operator (<=)', 'Greater than Equal To Operator (>=)']",[],"['Relational Operators are the operators used to create a relationship and compare the values of two operands.', 'Following are the various types of relational operators in C.', 'It is used to compare both operands and returns 1 if both are equal or the same, and 0 represents the operands that are not equal.', ""Let's create a program to use the double equal to operator (==) for comparing the operands value in C."", 'Program1.c', ""Let's create a simple program to use the Not equal to (!=) operator for comparing the values of variable in C."", 'Program2.c', 'Here the operand A is less than operand B.', ""Let's create a program to use the less-than operator (<) to compare the operand value in C."", 'Program3.c', 'Here, operand A is greater than operand B.', ""Let's create a program to use the greater than operator (>) to compare the operand value in C."", 'Program4.c', 'Here, operand A is less than or equal to operand B. So, it is a Less than Equal to Operator.', ""Let's create a program to use the Less than Equal to operator (<=) to compare the operand value in C."", 'Program5.c', 'Here, operand A is greater than equal to the right operand B. So, it is the Greater than Equal To operator.', ""Let's create a program to use the Greater than Equal To operator to compare the operand value in C."", 'Program6.c']","['For example, there are two numbers, 5 and 15, and we can get the greatest number using the greater than operator (>) that returns 15 as the greatest or larger number to the 5.', 'The Not Equal To Operator is the opposite of the Equal To Operator and is represented as the (!=) operator. The Not Equal To Operator compares two operands and returns 1 if both operands are not the same; otherwise, it returns 0.', 'It is used to check whether the value of the left operand is less than the right operand, and if the statement is true, the operator is known as the Less than Operator.', 'The operator checks the value of the left operand is greater than the right operand, and if the statement is true, the operator is said to be the Greater Than Operator.', 'The operator checks whether the value of the left operand is less than or equal to the right operand, and if the statement is true, the operator is said to be the Less than Equal To Operator.', ""The operator checks whether the left operand's value is greater than or equal to the right operand. If the statement is true, the operator is said to be the Greater than Equal to Operator.""]",[],"['Opr1 == Opr2', '#include', '#include', 'int main ()', 'int a = 5;', 'int b = 10;', 'printf ("" a == b : %d"", (a == b));', 'if (a == b)', 'printf (""\\n %d is equal to %d"", a, b);', 'printf ("" \\n %d is not equal to %d"", a, b);', 'int x = 5;', 'int y = 5;', 'printf ("" \\n x == y : %d"", (x == y));', 'if (a == b)', 'printf ("" \\n %d is equal to %d"", x, y);', 'printf (""\\n %d is not equal to %d"", x, y);', 'return 0;', 'Opr1 != Opr2;', '#include', '#include', 'int main ()', 'int a = 5;', 'int b = 10;', 'printf ("" a != b : %d"", (a != b));', 'if (a != b)', 'printf (""\\n %d is equal to %d"", a, b);', 'printf ("" \\n %d is not equal to %d"", a, b);', 'int x = 5;', 'int y = 5;', 'printf ("" \\n x != y : %d"", (x != y));', 'if (a != b)', 'printf ("" \\n %d is equal to %d"", x, y);', 'printf (""\\n %d is not equal to %d"", x, y);', 'return 0;', '#include', 'int main ()', 'int num1, num2;', 'printf ("" Enter the value of num1: "");', 'scanf ("" %d"", &num1);', 'printf ("" \\n Enter the value of num2: "");', 'scanf ("" %d"", &num2);', 'if (num1 < num2)', 'printf ("" \\n The value of num1 is less than num2."");', 'printf ("" \\n The value of num2 is less than num1."");', 'return 0;', '#include', 'int main ()', 'int num1, num2;', 'printf ("" Enter the value of num1: "");', 'scanf ("" %d"", &num1);', 'printf ("" \\n Enter the value of num2: "");', 'scanf ("" %d"", &num2);', 'if (num1 > num2)', 'printf ("" \\n The value of num1 is greater than num2."");', 'printf ("" \\n The value of num2 is greater than num1."");', 'return 0;', 'A <= B;', '#include', 'int main ()', 'int num1, num2;', 'printf ("" Enter the value of num1: "");', 'scanf ("" %d"", &num1);', 'printf ("" \\n Enter the value of num2: "");', 'scanf ("" %d"", &num2);', 'if (num1 < num2)', 'printf ("" \\n The value of num1 is less than num2."");', 'else if (num1 <= num2 )', 'printf ("" \\n The value of num1 is equal to num2."");', 'printf ("" \\n The value of num2 is less than num1."");', 'return 0;', 'A >= B;', '#include', 'int main ()', 'int num1, num2;', 'printf ("" Enter the value of num1: "");', 'scanf ("" %d"", &num1);', 'printf ("" \\n Enter the value of num2: "");', 'scanf ("" %d"", &num2);', 'if (num1 > num2)', 'printf ("" \\n The value of num1 is greater than num2."");', 'else if (num1 >= num2 )  // greater than operator (>=)', 'printf ("" \\n The value of num1 is equal to num2."");', 'printf ("" \\n The value of num2 is greater than num1."");', 'return 0;']","['a == b : 0', '5 is not equal to 10', 'x == y : 1', '5 is not equal to 5', 'a != b : 1', '5 is equal to 10', 'x != y : 0', '5 is equal to 5', 'Enter the value of num1: 45', 'Enter the value of num2: 89', 'The value of num1 is less than num2.', 'Enter the value of num1: 20', 'Enter the value of num2: 30', 'The value of num2 is greater than num1.', 'Enter the value of num1: 45', 'Enter the value of num2: 45', 'The value of num1 is equal to num2.', 'Enter the value of num1: 28', 'Enter the value of num2: 79', 'The value of num2 is greater than num1.']",[],[]
191,['Assignment Operator in C'],"[""There are different kinds of the operators, such as arithmetic, relational, bitwise, assignment, etc., in the C programming language. The assignment operator is used to assign the value, variable and function to another variable. Let's discuss the various types of the assignment operators such as =, +=, -=, /=, *= and %=.""]","['https://www.javatpoint.com/pre-increment-and-post-increment-operator-in-c', 'https://www.javatpoint.com/relational-operator-in-c', 'https://www.javatpoint.com/pre-increment-and-post-increment-operator-in-c', 'https://www.javatpoint.com/relational-operator-in-c', 'https://www.javatpoint.com/pre-increment-and-post-increment-operator-in-c']",['https://static.javatpoint.com/cpages/images/assignment-operator-in-c.png'],[],[],"['Simple Assignment Operator (=):', 'Plus and Assign Operator (+=):', 'Subtract and Assign Operator (-=):', 'Multiply and Assign Operator (*=)', 'Divide and Assign Operator (/=):', 'Modulus and Assign Operator (%=):']",[],"['Example of the Assignment Operators:', 'It is the operator used to assign the right side operand or variable to the left side variable.', ""Let's create a program to use the simple assignment operator in C."", 'Program1.c', 'The operator is used to add the left side operand to the left operand and then assign results to the left operand.', ""Let's create a program to use the Plus and assign operator in C."", 'Program2.c', 'The operator is used to subtract the left operand with the right operand and then assigns the result to the left operand.', ""Let's create a program to use the Subtract and Assign (-=) operator in C."", 'Program3.c', 'The operator is used to multiply the left operand with the right operand and then assign result to the left operand.', ""Let's create a program to use the multiply and assign operator (*=) in C."", 'Program4.c', ""Let's create a program to use the divide and assign operator (/=) in C."", 'Program5.c', ""Let's create a program to use the divide and assign operator (%=) in C."", 'Program6.c']","['An operator is used between the left and right operands, which divides the first number by the second number to return the result in the left operand.', 'An operator used between the left operand and the right operand divides the first number (n1) by the second number (n2) and returns the remainder in the left operand.']",[],"['A = 5; // use Assignment symbol to assign 5 to the operand A', 'B = A; // Assign operand A to the B', 'B = &A // Assign the address of operand A to the variable B', 'A = 20 \\ 10 * 2 + 5; // assign equation to the variable A', 'int a = 5;', 'or int b = a;', ""ch = 'a';"", '#include', '#include', 'int main ()', 'int n1, n2, c, x, y;', 'n1 = 5;', 'n2 = n1;', 'c = n1 + n2;', 'x = 20 / 4 * 2 + 5;', 'printf ("" \\n The value of n1: %d"", n1);', 'printf ("" \\n The value of n2: %d"", n2);', 'printf ("" \\n The value of c: %d"", c);', 'printf ("" \\n The value of x: %d"", x);', 'return 0;', 'A += B;', 'A = A + B;', '#include', '#include', 'int main ()', 'int n1, n2, c;', 'n1 = 5;', 'n2 = 10;', 'n2 += n1;', 'printf ("" \\n The value of n1: %d"", n1);', 'printf ("" \\n The value of n2: %d"", n2);', 'return 0;', 'A -= B;', 'A = A - B;', '#include', '#include', 'int main ()', 'int n1, n2, c;', 'n1 = 5;', 'n2 = 10;', 'n2 -= n1; // Use Subtract and Equal operator (b = b - a)', 'printf ("" \\n The value of n1: %d"", n1);', 'printf ("" \\n The value of n2: %d"", n2);', 'return 0;', 'A *= B;', 'A = A * B;', '#include', '#include', 'int main ()', 'int n1, n2, c;', 'n1 = 5;', 'n2 = 10;', 'n2 *= n1; // Use Multiply and Equal operator (b = b * a)', 'printf ("" \\n The value of n1: %d"", n1);', 'printf ("" \\n The value of n2: %d"", n2);', 'return 0;', 'A /= B;', 'A = A / B;', '#include', '#include', 'int main ()', 'int n1, n2, c;', 'n1 = 5;', 'n2 = 10;', 'n2 /= n1; // Use divide and Equal operator (b = b / a)', 'printf ("" \\n The value of n1: %d"", n1);', 'printf ("" \\n The value of n2: %d"", n2);', 'return 0;', 'A %= B;', 'A = A % B;', '#include', '#include', 'int main ()', 'int n1, n2, c;', 'printf ("" Enter the value of n1: "");', 'scanf (""%d"", &n1);', 'printf ("" \\n Enter the value of n2: "");', 'scanf (""%d"", &n2);', 'n1 %= n2; // Use modulus and Equal operator (a = a % b)', 'printf ("" \\n The modulus value of n1: %d"", n1);', 'return 0;']","['The value of n1: 5', 'The value of n2: 5', 'The value of c: 10', 'The value of x: 15', 'The value of a: 5', 'The value of b: 15', 'The value of n1: 5', 'The value of n2: 5', 'The value of n1: 5', 'The value of n2: 50', 'The value of n1: 5', 'The value of n2: 2', 'Enter the value of n1: 23', 'Enter the value of n2: 5', 'The modulus value of n2: 3']",[],[]
192,['Pre-increment and Post-increment Operator in C'],"[""Increment operators are the operator of the C programming language used to increase the given variable's value by 1. The increment operator can increase the given value by 1 before assigning it to the variable. On the other hand, the increment operator can increase the given value by 1 after assigning the variable. The increment operator is represented as the double plus (++) symbol, which means the value is incremented by 1.""]","['https://www.javatpoint.com/pointer-vs-array-in-c', 'https://www.javatpoint.com/assignment-operator-in-c', 'https://www.javatpoint.com/pointer-vs-array-in-c', 'https://www.javatpoint.com/assignment-operator-in-c', 'https://www.javatpoint.com/pointer-vs-array-in-c']",['https://static.javatpoint.com/cpages/images/pre-increment-and-post-increment-operator-in-c.png'],[],[],"['Properties of the Increment operator', 'There are two types of the increment operators', 'Pre-increment operator', 'Post-increment Operator', 'Program to use the Pre-increment and Post-increment Operator']",[],"['There are some properties of the increment operator, as follows:', ""In the above syntax, the value of variable 'a' is first incremented by 1 before using in the expression."", ""Example 1: Let's create a simple program to use the pre-increment operator in C programming language."", 'Program1.c', ""Example 2: Let's create another program to use the pre-increment operator in mathematical expression."", 'Program2.c', ""Example 1: Let's create a simple program to use the post-increment operator in C programming language."", 'Program1.c', ""Example 2: Let's create another program to use the post-increment operator in mathematical expression."", 'Program2.c', ""Let's create a simple program to use the pre-increment and post-increment operator in the C programming language."", 'Program3.c']","[""In the above syntax, the operand 'a' value is assigned to the variable x, and then the post increment operator increases or updates the value of 'a' by 1.""]","[""The pre-increment operator is represented as the double plus (++a) symbol, appended before the variable's name. The pre-increment operator is used to increment the value of an operand by 1 before using it in the mathematical expression. In other words, the value of a variable is first incremented, and then the updated value is used in the expression."", ""Post-increment is an increment operator, represented as the double plus (a++) symbol followed by an operator 'a'. It increments the value of the operand by 1 after using it in the mathematical expression. In other words, the variable's original value is used in the expression first, and then the post-increment operator updates the operand value by 1.""]","['x = ++a;', '#include', '#include', 'int main ()', 'int a = 7;', 'int b = 2', 'printf ("" Use the pre-increment operator "" );', 'printf ("" The value of a is %d "", a);', 'printf ("" The value of b is %d "", b);', 'b = ++a;', 'printf ("" After using the pre-increment operator "");', 'printf ("" The value of a is %d "", a);', 'printf ("" The value of b is %d "", b);', 'return 0;', '#include', '#include', 'int main ()', 'int a, b, c, d, x;', 'a = 5;', 'b = 7;', 'c = 12;', 'd = 15;', 'x = ++a + ++b + ++c + ++d;', 'printf ( "" The value of x is: %d "", x);', 'printf ("" \\n The updated value of a = %d, b = %d, c = %d and d = %d "", a, b, c, d);', 'return 0;', 'x = a++;', '#include', '#include', 'int main ()', 'int a = 7;', 'int b = 0;', 'printf ("" Before using the post-increment operator "" );', 'printf ("" \\n The value of a is %d "", a);', 'printf ("" \\n The value of b is %d "", b);', 'b = a++;', 'printf ("" \\n\\n After using the post-increment operator "");', 'printf ("" \\n The value of a is %d "", a);', 'printf ("" \\n The value of b is %d "", b);', 'return 0;', '#include', '#include', 'int main ()', 'int a, b, c, d, x;', 'a = 5;', 'b = 7;', 'c = 12;', 'd = 15;', 'x = a++ + b++ + c++ + d++;', 'printf ( "" The value of x is: %d "", x);', 'printf ("" \\n The updated value of a = %d, b = %d, c = %d and d = %d "", a, b, c, d);', 'return 0;', '#include', '#include', 'int main ()', 'int x, y, z, exp;', 'printf ("" Enter the value of x: "");', 'scanf ("" %d"", &x);', 'printf ("" \\n Enter the value of y: "");', 'scanf ("" %d"", &y);', 'printf ("" \\n Enter the value of z: "");', 'scanf ("" %d"", &z);', 'printf ("" \\n Before using the increment operator: "");', 'printf ("" \\n The original value of x: %d"", x);', 'printf ("" \\n The original value of x: %d"", y);', 'printf ("" \\n The original value of x: %d"", z);', 'exp = x++ + ++x + ++y + y++ + ++z;', 'printf ("" \\n\\n After using the increment operator: "");', 'printf ("" \\n The result of the expression is: %d"", exp);', 'printf ("" \\n The updated value of x: %d"", x);', 'printf ("" \\n The updated value of y: %d"", y);', 'printf ("" \\n The updated value of z: %d"", z);', 'return 0;']","['Use the pre-increment operator', 'The value of a is 7', 'The value of b is 2', 'After using the pre-increment operator', 'The value of a is 8', 'The value of b is 10', 'The value of x is: 43', 'The updated value of a = 6, b = 8, c = 13 and d = 16', 'Before using the post-increment operator', 'The value of a is 7', 'The value of b is 0', 'After using the post-increment operator', 'The value of a is 8', 'The value of b is 7', 'The value of x is: 39', 'The updated value of a = 6, b = 8, c = 13 and d = 16', 'Enter the value of x: 7', 'Enter the value of y: 12', 'Enter the value of z: 15', 'Before using the increment operator:', 'The original value of x: 7', 'The original value of x: 12', 'The original value of x: 15', 'After using the increment operator:', 'The result of the expression is: 58', 'The updated value of x: 9', 'The updated value of y: 14', 'The updated value of z: 16']",[],['|||The increment operator is used to increase the current value of the variable by 1.|||We can only use these operators with variables.|||It is the operator represented by the double plus (++) symbol.||||||Pre-increment operator|||Post-increment operator|||']
193,['Pointer vs array in C'],"['Generally, in most cases, users assume that the pointer and array are both the same thing. However, it is not that simple because we will find some distinct differences if we look deeply at both. Therefore in this article, we will see whether the pointer and array are really the same or not.']","['https://www.javatpoint.com/restrict-keyword-in-c', 'https://www.javatpoint.com/pre-increment-and-post-increment-operator-in-c', 'https://www.javatpoint.com/restrict-keyword-in-c', 'https://www.javatpoint.com/pre-increment-and-post-increment-operator-in-c', 'https://www.javatpoint.com/restrict-keyword-in-c']",[],[],[],"['Definition of array', 'Definition of the pointers', 'What are the main differences between pointers and arrays?', 'Comparison Chart']",[],"['The pointer variable can be as declared as shown below:', 'Lets us see the quick comparison chart to understand the difference between both arrays and pointers in an easier manner:', 'Conclusion']","['If we use the ""sizeof(array)"", it will return the amount of memory used by all elements stored in the array. However, if we use the it for the pointer, e.g. ""sizeof(pointer)"", it only returns the amount of memory used by the pointer variable itself.', 'In this article, we have explained the key differences between Array and Pointers. Therefore, after reading this article, we hope that your confusion about pointer and array will be cleared forever.']","['Arrays are generally used for storing the same types of data items or values that are same in the nature. Although arrays cannot be used to store the data items or values that are not same in the nature, it is also considered a significant disadvantage of the arrays.', 'Apart from the arrays, if we talk about the pointer, they are generally used for storing the memory address of the other variable instead of storing the actual value of the variable. However, we can also use the pointer to access the whole array by using the pointer arithmetic. In addition, it also even makes the accessing array process much faster.', 'Apart from what we have discussed above, the key differences can be found while implementing the pointer and array. For example, when the arrays are implemented, the fixed size of the memory block is allocated. On the other hand, where the pointers are implemented, the memory is dynamically allocated. Thus, allocating the memory in both the pointers and arrays can be considered the key difference. However, it is not the only difference that lies between the arrays and pointer because some other differences also do exist that are as follows:']","['int mark[5] = {19, 10, 8, 17, 9};', 'type * name;']",[],"[""Basis for Comparison|||Pointer|||Array&&&Declaration|||//In C++type * var_name;|||//In C++type var_name[size];//In Java.type var-name[ ];var_name = new type[size];&&&Working|||It generally stores the address of another variable of the same data type as the pointer variable's datatype.|||Array usually stores the value of the variable of the same datatype.&&&Generation|||A pointer to an array can be generated.|||An array of pointers can be generated.&&&Storage|||Pointers are specially designed to store the address of variables.|||A normal array stores values of variables, and pointer array stores the address of variables.&&&Capacity|||Usually, arrays can store the number of elements the same size as the size of the array variable.|||A pointer variable can store the address of only one variable at a time.""]","['|||An array usually stores the variables ofsimilar data types, and the data types of the variables must match the type of array. However, the pointer variable stores the address of a variable of a type similar to a type of pointer variable type.|||We can generate an array of pointers, i.e. array whose variables are the pointer variables. On the other hand, we can also create a pointer that points to an array.|||In general, arrays are static, which means once the size of the array is declared, it cannot be resized according to users requirements. While on the other hand, pointers are dynamic, which means the memory allocated can be resized later at any point in time.|||Arrays are allocated at compile-time, while pointers are allocated at runtime|||If we talk about the size of an array, it usually depends on the number of variables are stored in it. While in the case of the pointer variable, it stores the address of the variable only. To understand it more clearly, you can consider the following given examples:|||The ""sizeof"" operator|||']"
194,['Restrict keyword in C'],"['In this article, we will learn what is restrict keyword in C and how to use it in C programs. However, it was first introduced in the C99 version of the C language. So, let us see what exactly this restricted keyword is.']","['https://www.javatpoint.com/exit-function-in-c', 'https://www.javatpoint.com/pointer-vs-array-in-c', 'https://www.javatpoint.com/exit-function-in-c', 'https://www.javatpoint.com/pointer-vs-array-in-c', 'https://www.javatpoint.com/exit-function-in-c']",[],[],['Introduction'],['Conclusion'],"[""Note: C++ does not support the restrict keyword, and it's only a keyword of the C programming language.""]","['Q1. Where can you use a restrict keyword?', 'A. To a pointer', ""Q2. What'll compiler assume if you add a 'restrict' keyword to the pointer?"", ""A. It'll assume that memory pointed by 'p', will be exclusively pointed by only 'p'."", ""Q3. How does the compiler's optimization help?""]","['To understand the use of ""restrict"" keywords in more detail, you can consider the following given examples in which we have used the ""restrict"" keywords in as simple ways as possible.', 'In this article, we have explained restrict keyword of the C language, and we have tried to keep things as simple as possible. In addition, answered some basic questions that are generally asked related to the ""restrict"" keyword.']","['Generally, the restrict keyword is mainly used for deceleration of pointer as a type of quantifier of the pointers. However, this keyword does not add any type of new functionalities or any new features to it, so what is the reason behind using it. The answer is quite straightforward because programmers can inform the compiler to optimize what can be optimized using this keyword.', 'In other words, we can say that whenever the ""restrict"" keyword is used with a pointer such as ptr, it informs the compiler that ptr is the only way to access the object pointed by it. Although, the compiler does not add and performs any additional checks. In short, there should be no other pointer which points to that particular object. However, if any user somehow violates this condition, it is quite possible that the user will get undefined results, or his program may behave abnormally.', 'A. In general a data pointed by a pointer can be modified by any other pointer as well. In general, for every instruction you execute that involves reading a pointer - you need to reload the stored value in the pointer(value pointed by) to the CPU register. But once you know it has only one pointer, you can skip reloading again in some cases.']","['#include', '/* In this function we are adding the value of variable c to other variables a and y */', 'void function(int* a, int* b, int* restrict c)', '*a += *c;', '/* Updating value of variable a by adding the value of variables a and c */', '*b += *c;', '/* Updating value of variable b by adding the value of variables b and c. Since c is restrict, compiler will not reload value at address c in its assembly code. Therefore generated assembly code will be optimized */', 'int main(void)', 'int a = 50 , b = 100 , c = 150 ;', 'function(&a, &b, &c);', 'printf(""%d %d %d"", a, b, c);', '#include', 'void my_function(int* x, int* y, int* restrict z) {', '*x += *z;', '*y += *z;', 'main(void) {', 'int x = 10, y = 20, z = 30;', 'my_function(&x, &y, &z);', 'printf(""%d %d %d"", x, y, z);', 'int* restrict p;']","['200 250 150', '40 50 30']",[],[]
195,['The exit() function in C'],"['The exit() function is used to terminate a process or function calling immediately in the program. It means any open file or function belonging to the process is closed immediately as the exit() function occurred in the program. The exit() function is the standard library function of the C, which is defined in the stdlib.h header file. So, we can say it is the function that forcefully terminates the current program and transfers the control to the operating system to exit the program. The exit(0) function determines the program terminates without any error message, and then the exit(1) function determines the program forcefully terminates the execution process.']","['https://www.javatpoint.com/const-qualifier-in-c', 'https://www.javatpoint.com/restrict-keyword-in-c', 'https://www.javatpoint.com/const-qualifier-in-c', 'https://www.javatpoint.com/restrict-keyword-in-c', 'https://www.javatpoint.com/const-qualifier-in-c']",['https://static.javatpoint.com/cpages/images/exit-function-in-c.png'],[],[],"['Important points of the exit() function', 'There are two types of exit status in C']",[],"['Following are the main points of the exit function in C programming as follows:', 'Syntax of the exit() function', 'The exit() function has no return type.', 'int status: It represents the status value of the exit function returned to the parent process.', 'Example 1: Program to use the exit() function in the for loop', ""Let's create a program to demonstrate the exit (0) function for normal terminating the process in the C programming language."", 'Following are the types of the exit function in the C programming language, as follows:', 'Syntax of the EXIT SUCCESS', 'Example 1: Program to demonstrate the usage of the EXIT_SUCCESS or exit(0) function', ""Let's create a simple program to demonstrate the working of the exit(0) function in C programming."", 'Example 2: Program to use the EXIT_SUCCESS macro in the exit() function', ""Let's create a C program to validate the whether the character is presents or not."", 'Syntax of the EXIT_FAILURE', ""Example 1: Let's create a program to use the EXIT_FAILURE or exit(1) function"", ""Example 2: Let's create another program to use the EXIT_FAILURE to terminate the C program.""]",[],"[""EXIT_SUCCESS: The EXIT_ SUCCESS is the exit() function type, which is represented by the exit(0) statement. Where the '0' represents the successful termination of the program without any error, or programming failure occurs during the program's execution."", ""EXIT_FAILURE: The EXIT_FAILURE is the macro of the exit() function to abnormally execute and terminate the program. The EXIT_FAILURE is also represented as the exit(1) function. Whether the '1' represents the abnormally terminates the program and transfer the control to the operating system.""]","['void exit ( int status);', '#include', '#include', 'int main ()', 'int i, num;', 'printf ( "" Enter the last number: "");', 'scanf ( "" %d"", #);', 'for ( i = 1; i', 'exit (EXIT_SUCCESS);', '#include', '#include', 'int main ()', 'printf ( "" Start the execution of the program.  \\n"");', 'printf ("" Exit from the program. \\n "");', 'exit (0);', 'printf ( ""Terminate the execution of the program.\\n "");', 'return 0;', '#include', '#include', 'int main ()', 'char ch;', 'printf("" Enter the character: "");', 'scanf ("" %c"", &ch);', ""if ( ch == 'Y')"", 'printf("" Great, you did it. "");', 'exit(EXIT_SUCCESS); // use exit() function to terminate the execution of a program', 'printf ("" You entered wrong character!! "");', 'return 0;', 'exit (EXIT_FAILURE);', '#include', '#include', 'int main ()', 'int num1, num2;', 'printf ("" Enter the num1: "");', 'scanf (""%d"", &num1);', 'printf ("" \\n Enter the num2: "");', 'scanf (""%d"", &num2);', 'if (num2 == 0)', 'printf ("" \\n Dividend cannot be zero. "");', 'exit(1);', 'float num3 = (float)num1 / (float)num2;', 'printf ("" %d / %d : %f"", num1, num2, num3);', 'exit(0);', '#include', '#include', 'int main ()', 'FILE *fptr = fopen ( ""javatpoint.txt"", ""r"" );', 'if ( fptr == NULL)', 'fprintf ( stderr, ""Unable to open the defined file \\n"" );', 'exit ( EXIT_FAILURE); // use exit function to check termination', 'fclose (fptr);', 'printf ( "" Normal termination of the program. "");', 'return 0;']","['Enter the last number: 10', 'Number is 1', 'Number is 2', 'Number is 3', 'Number is 4', 'Number is 5', 'Start the execution of the program.', 'Exit from the program.', 'Enter the character: Y', 'Great, you did it.', 'Enter the num1: 20', 'Enter the num2: 6', '20 / 6 : 3.333333', '2nd Run', 'Enter the num1: 20', 'Enter the num2: 6', 'Dividend cannot be zero', 'Unable to open the defined file.']",[],"[""|||We must include the stdlib.h header file while using the exit () function.|||It is used to terminate the normal execution of the program while encountered the exit () function.|||The exit () function calls the registered atexit() function in the reverse order of their registration.|||We can use the exit() function to flush or clean all open stream data like read or write with unwritten buffered data.|||It closed all opened files linked with a parent or another function or file and can remove all files created by the tmpfile function.|||The program's behaviour is undefined if the user calls the exit function more than one time or calls the exit and quick_exit function.|||The exit function is categorized into two parts: exit(0) and exit(1).||||||EXIT_ SUCCESS|||EXIT_FAILURE|||""]"
196,['Const Qualifier in C'],"[""In general, the const qualifier is used to declare a variable as constant, meaning its value cannot change once the variable has been initialized. However, there are several benefits of using const, such as if we have a constant value of the PI, we wouldn't like any part of the program to modify that value. Therefore we can declare it as a const using the const qualifier. But it has a little twist as usual because sometimes we are able to change the values of variables that are declared with const qualifiers. However, this is not always possible as it depends on where the const variables are stored in memory.""]","['https://www.javatpoint.com/sequence-points-in-c', 'https://www.javatpoint.com/exit-function-in-c', 'https://www.javatpoint.com/sequence-points-in-c', 'https://www.javatpoint.com/exit-function-in-c', 'https://www.javatpoint.com/sequence-points-in-c']",['https://static.javatpoint.com/cpages/images/const-qualifier-in-c.png'],[],[],"['1. Pointer to constant', '2. Constant pointer to a constant:']",[],"['Syntax of const variable', 'There are few rules that can help us decide when to use a const in the C program:', 'Now, let us see some examples in which we will use the const qualifier in our program with a pointer:', ""In function 'main':error: assignment of read-only location '*piIndex'"", 'Now, we will try to change the pointing variable in this example.', 'You can see that the above give code works perfectly, and we have successfully changed the pointing variable:', 'In this example, we will use the concept of a constant pointer to a constant.', ""As you can see that everything is working fine if we don't try to change the value of piData and *piData."", 'As you can see in the Output, we cannot change the value of ""*pidata"".', 'Here we will see that can we can point another integer variable to the pointer. Lets us see what happens:']","['In General, the const qualifier only gives only an indication to the compiler that the value of qualify object cannot be changed. In other words, we can say that the const means not modifiable (cannot assign any value to the object at the run time).', 'In this example, we will try to change the value of the integer variable using the pointer to constant (piIndex). However, If a user tries to change the value of the variable (iIndexData1) using the *piData, he will get the compiler error.', ""In this example, we will try to change the value of *piData. However, according to the concept, we will get the compiler error because *piData qualify to constant. Now let's see what happens:"", 'In the Output of both above given programs, you can see that in case of constant pointer to constant, we cannot change the constant value and neither we can point the constant pointer to another variable.']","['However, when we declare an identifier as constant using the const qualifier, it depends on the implementation (or on the compiler) where the ""constant variable"" will go or stored in the process control block. Thus several machines store the constant and jump tables in the text section, which only reads and contains all other executable instructions.', 'As you can see in the above declaration that ""xData"" is pointing to a constant integer variable. Therefore we cannot change the value of the pointed integer variable using the pointer (*xData), but we can change the pointer to point to any other integer variable. So now it is possible that, the pointer can point to any other variable because it is usually stored in the R&W area (or read and write memory). So lets us see an example of how we can implement it with the help of following the given examples.', 'As you can see in the above declaration, it is described that the constant pointer is pointing to a constant integer variable. This means we cannot change the value pointed by the pointer, and we can also not point the pointer to other integer variables.']","['const Data_Type Identifier = Value;', 'int Display ( const char *pcMessage)', 'const int *xData;', 'int const *xData;', '#include', 'int main(void)', '/*Integer variable*/', 'int iIndexData1 = 2;', '/*pointer to const int*/', 'const int *piIndex = NULL;', '/*Assign the address of iIndexData to a pointer to const,here integer variable qualify to const integer its called up qualification which is valid in c*/', 'piIndex = &iIndexData1', '*piIndex = 3; /*Try to change value constant object*/', 'printf(""Data is %d"",*piIndex);', 'return 0;', '#include', 'int main(void)', '/*Integer variable1*/', 'int iIndexData1 = 2;', '/*Integer variable2*/', 'int iIndexData2 = 4;', '/*Assign address of iIndexData to pointer to const,', 'here integer variable qualify to const integer*/', 'const int* piIndex = &iIndexData1', 'printf(""*piIndex is %d\\n"",*piIndex);', ""/*It's invalid because pointer is constant*/"", 'piIndex = &iIndexData2', 'printf(""*piIndex is %d\\n"",*piIndex);', 'return 0;', 'const int *const piData;', '#include', 'int main(void)', 'int Data = 2;', 'const int *const piData = &Data', 'printf(""*piData is %d\\n"",*piData);', 'return 0;', '#include', 'int main(void)', 'int Data = 2;', 'const int *const piData = &Data', '*piData = 3;', 'printf(""*piData is %d\\n"",*piData);', 'return 0;', '#include', 'int main(void)', '/*Integer variable1*/', 'int Data1 = 2;', '/*Integer variable2*/', 'int Data2 = 4;', 'const int* const piData = &Data1', 'printf(""*piData is %d\\n"",*piData);', ""/*It's invalid because pointer is constant*/"", 'piData = &Data2', 'printf(""*piData is %d\\n"",*piData);', 'return 0;']","['*piIndex = 3;', '*piIndex is 2', '*piIndex is 4', '*piData is 2', ""Error: assignment of read-only location '*piData'"", ""Error: assignment of read-only variable 'piData'""]",[],"[""|||We can use it when we don't want to change the variable's value after the initialization.|||In the case of call by reference, when we don't want to change the value of the passed variable. For e.g.,||||||We can also use it while mapping the I/O register with the help of pointers in C.|||""]"
197,['Sequence Points in C'],"['In this article, we will learn what are Sequence Points in C Programming Language are. Furthermore, to understand them more easily, we will also discuss some examples of sequence points along with their practical implementation.']","['https://www.javatpoint.com/anagram-in-c', 'https://www.javatpoint.com/const-qualifier-in-c', 'https://www.javatpoint.com/anagram-in-c', 'https://www.javatpoint.com/const-qualifier-in-c', 'https://www.javatpoint.com/anagram-in-c']",[],[],['Introduction'],['Sequence points'],['Note: The comma operator in a function call does not guarantee the order of evaluation.'],"['Side Effect', 'To understand the sequence point more detail, you can consider the following given examples:', 'These are some of the basic sequence points available in C Language', '1. logical AND &&', '2. logical OR ||', '3. Conditional?']","['The term ""Side Effect"" is nothing but the side effect or changes done by any sort of function or expression where the state of something gets changes.', 'In the case of logical OR ||, its left operand has to be completely executed first and all its side effects before continuing. However, if the left operand evaluates to false (or nonzero), the other operand would not be executed at all.', 'In the case of the conditional operator, The first operand of the conditional operator will be evaluated first, and all its side effects are completed before continuing.', 'The left operand of the comma operator has to be completely evaluated first, and all its side effects have to be taken place before continuing. However, both operands of the comma operator are always evaluated.']","['In general, we can consider the sequence point as it defines any point in the execution of a computer program at which it guarantees or ensures that all the side effects of the previous evaluation of the program\'s code are done or successfully performed. However, it also ensures that none of the alterations or side effects of the subsequent evaluations is yet performed at all. In other words, we can say that in imperative programming, a sequence point defines any point in the execution of a computer program at which it is guaranteed that all the side effects of the previous evaluation would have been done. In addition, No side effects from the subsequent evaluation have been performed yet. It\'s quite possible that the word ""side effect"" may be confusing to you here. However, if it does, then let us see what exactly is the ""side effect"" is.', 'The output of the above-given program is undefined or non-predictive because the output of the above program will differ on the different machine or compiler because it is like asking for the value of an undefined automatic variable. The main reason behind the undefined behaviour of the above program is that the ""+"" operator does not have any defined standard order of evaluation for its operand. Therefore, we can not predict which function ""f1"" or ""f2"" will execute first. However, several other operators are available similar to the ""+"" operator such as \'-\', \'/\', \'*\', Bitwise AND &, Bitwise OR |, .. etc.', 'The output of the above program is also undefined because even evaluation of the expression can also cause side effects. For example, in the above program, the final value of p is ambiguous because it totally depends on the order of expression evaluation. Therefore, if the function ""f1();"" executes first, the value of p will be 55; otherwise 40.', ""In case of the logical AND && operator, its left operand will be completly executed first, and it's all side effects before continuing. However, if the left operand evaluates to false, the execution process will stop, and the other operand will not execute at all.""]","['#include', 'int f1() { printf (""hi,there""); return 1;}', 'int f2() { printf (""hello, there""); return 1;}', 'int main()', 'int p = f1() + f2();', 'return 0;', '#include', 'int x = 20;', 'int f1() { x = x+10; return x;}', 'int f2() { x = x-5;  return x;}', 'int main()', 'int p = f1() + f2();', 'printf (""p = %d"", p);', 'return 0;']",[],[],"['|||logical AND &&|||logical OR |||||conditional ?|||comma ,|||']"
198,['Anagram in C'],"['This section will discuss the anagram and its program to check whether the given string is the Anagram or not. An anagram of a string is a string that contains the same characters in both the strings, except the order of characters can be different in the strings. In other words, anagrams are a technique of C programming that checks whether a given string contains the same number of characters, except that the sequence of characters can be changed in both strings.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/sequence-points-in-c', 'https://www.javatpoint.com/increment-and-decrement-operators-in-c', 'https://www.javatpoint.com/sequence-points-in-c', 'https://www.javatpoint.com/increment-and-decrement-operators-in-c']",['https://static.javatpoint.com/cpages/images/anagram-in-c.png'],[],[],['Algorithm of the Anagram string'],[],"['Following are the algorithms of the anagram string in C, as follows:', 'Example 1: Program to check the anagram of the string using user-defined function', 'Example 2: Program to check the anagram of the string using nested for loop', 'Example 3: Program to check the anagram of the string using the for and if statement', 'Example 4: Program to sort the string and check the anagram of the strings']",[],"['For example, suppose we have two strings: ""CAB"" and ""ABC"". Both contain the same characters in these strings, but the arrangements of the first strings\' characters are different from the second strings, and the process is termed the anagram of strings.']","['#include', 'int get_anagrm (char [],char []);', 'int main ()', 'char arr1 [50], arr2 [50];', 'int count;', 'printf ("" Enter the first string: \\n "");', 'scanf ("" %s"", arr1);', 'printf ("" Enter the second string: \\n "");', 'scanf ("" %s"", arr2);', 'count = get_anagrm (arr1, arr2);', 'if (count == 1)', 'printf ("" %s and %s strings are an anagram of each other. \\n"", arr1, arr2);', 'printf ("" %s and %s strings are not an anagram of each other. \\n"", arr1, arr2);', 'return 0;', 'int get_anagrm (char arr1[], char arr2[])', 'int num1[20] = {0}, num2[20] = {0}, i = 0;', ""while (arr1[i] != '\\0')"", ""num1[arr1[i] -'a']++;"", 'i = 0;', ""while (arr2[i] != '\\0')"", ""num2[arr2[i] -'a']++;"", 'for ( i = 0;i <20; i++)', 'if ( num1[i] != num2[i])', 'return 0;', 'return 1;', '#include', '#include', '#include', '#define No_Character 30', 'bool strAna (char *st1, char *st2)', 'int arr1[No_Character] = {0};', 'int arr2[No_Character] = {0};', 'int n = 0;', 'if (strlen (st1) != strlen (st2))', 'return false;', 'for ( n = 0; st1[n] && st2[n]; n++)', 'arr1[st1[n]-97]++;', 'arr2[st2[n]-97]++;', 'for (n = 0; n < No_Character; n++)', 'if (arr1[n] != arr2[n])', 'return false;', 'return true;', 'int main ()', 'char st1[50], st2[50];', 'printf ("" Input the first string: "");', 'gets(st1);', 'printf ("" Input the second string: "");', 'gets(st2);', 'if (strAna (st1, st2))', 'printf ("" \\n The first string is an anagram of the second string. "");', 'printf ("" \\n The first string is not an anagram of the second string. "");', 'return 0;', '#include', '#include', 'int main ()', 'char arr1[30], arr2[30];', 'int len1, len2, num, i, j, found = 0, not_found = 0;', 'printf ("" Input the first string: "");', 'scanf (""%s"", arr1);', 'printf ("" Input the second string: "");', 'scanf (""%s"", arr2);', 'len1 = strlen (arr1);', 'len2 = strlen (arr2);', 'if (len1 == len2)', 'num = len1; // assign the length to num variable', 'for ( i = 0; i < num; i++)', 'found = 0;', 'for ( j = 0; j < num; j++)', 'if (arr1[i] == arr2[j])', 'found = 1;', 'break;', 'if (found == 0)', 'not_found = 1; // assign 1 to not_found', 'break;', 'if (not_found == 1)', 'printf ("" \\n The first string is not an anagram of the second string. "");', 'printf ("" \\n The first string is an anagram of the second string. "");', 'printf ("" \\n Both string must contains same number of character to be the anagram of string. "");', 'return 0;', '#include', '#include', '#include', 'void cnvt_to_lwr (char []);', 'void sortArr (char []);', 'int main ()', 'char str1[] = ""course"", str2[] = ""source"";', 'int x, y = 0;', 'if (strlen (str1) != strlen (str2))', 'printf("" The given strings are not anagram of each other. "");', 'return 0;', 'cnvt_to_lwr (str1);', 'cnvt_to_lwr (str2);', 'sortArr (str1);', 'sortArr (str2);', 'for (x = 0; x < strlen (str1); x++)', 'if (str1[x] != str2[x])', 'printf ("" The given strings are not an anagram of each other."");', 'return 0;', 'printf ( "" Both strings are an anagram of each other. "");', 'return 0;', 'void cnvt_to_lwr (char a1[])', 'int num;', 'for ( num = 0; num < strlen(a1) -1; num++)', 'a1[num] = a1[num] + 32;', 'void sortArr (char a1[])', 'int temp = 0, i, l;', 'for (i = 0; i  a1[l])', 'temp = a1[i];', 'a1[i] = a1[l];', 'a1[l] = temp;']","['Enter the first string:', 'pine', 'Enter the second string', 'nipe', 'pine and nipe strings are an anagram of each other.', '2nd time run:', 'Enter the first string:', 'pine', 'Enter the second string', 'nip', 'pine and nip strings are not an anagram of each other.', 'Input the first string: triangle', 'Input the second string: agtrinle', 'The first string is an anagram of the second string.', 'Input the first string: SILENCE', 'Input the second string: LENSICE', 'The first string is an anagram of the second string.', 'Both strings are an anagram of each other.']",[],"[""|||Input two strings from the user.|||Check the length of each string. If the length of the first string is not equal to the second string, the strings are not an anagram.|||If the length of both strings is equal, convert the string's characters into lower case letters that make the comparison of the string easier.|||After this, sort the characters of the strings using the built-in function of the C library to sort the strings. And if there is no built-in function, we convert the string to a character array.|||We must sort the converted string into a character array.|||And last, we check for the equality of the strings.|||""]"
199,['Increment and Decrement Operators in C'],"['Operators are the predefined symbols of the C/C++ library, and it is used to perform logical as well as mathematical operations to the operands. There are various types of operators in the C programming language, such as arithmetic, logical, bitwise, increment or decrement operators, etc. ']","['https://www.javatpoint.com/logical-and-operator-in-c', 'https://www.javatpoint.com/anagram-in-c', 'https://www.javatpoint.com/logical-and-operator-in-c', 'https://www.javatpoint.com/anagram-in-c', 'https://www.javatpoint.com/logical-and-operator-in-c']",['https://static.javatpoint.com/cpages/images/increment-and-decrement-operators-in-c.png'],[],"['Increment Operator', 'Decrement Operator', 'Difference between the Increment and Decrement Operator in C']","['Pre-increment Operator', 'Post increment Operator', 'Pre Decrement Operator', 'Post decrement Operator:']",[],"['The pre-increment operator is used to increase the original value of the operand by 1 before assigning it to the expression.', ""In the above syntax, the value of operand 'A' is increased by 1, and then a new value is assigned to the variable 'B'."", 'Example 1: Program to use the pre-increment operator in C', 'The post-increment operator is used to increment the original value of the operand by 1 after assigning it to the expression.', ""In the above syntax, the value of operand 'A' is assigned to the variable 'X'. After that, the value of variable 'A' is incremented by 1."", 'Example 2: Program to use the post-increment operator in C', ""In the above syntax, the value of operand 'A' is decreased by 1, and then a new value is assigned to the variable 'B'."", 'Example 3: Program to demonstrate the pre decrement operator in C', 'Post decrement operator is used to decrease the original value of the operand by 1 after assigning to the expression.', ""In the above syntax, the value of operand 'A' is assigned to the variable 'B', and then the value of A is decreased by 1."", 'Example 4: Program to use the post decrement operator in C', 'Example 5: Program to perform the pre increment and pre decrement operator', 'Example 6: Program to print the post increment and post decrement operator']","['Increment Operators are the unary operators used to increment or add 1 to the operand value. The Increment operand is denoted by the double plus symbol (++). It has two types, Pre Increment and Post Increment Operators.', 'Decrement Operator is the unary operator, which is used to decrease the original value of the operand by 1. The decrement operator is represented as the double minus symbol (--). It has two types, Pre Decrement and Post Decrement operators.', 'The Pre Decrement Operator decreases the operand value by 1 before assigning it to the mathematical expression. In other words, the original value of the operand is first decreases, and then a new value is assigned to the other variable.']",[],"['X = ++A;', '#include', '#include', 'int main ()', 'int x, y, z;', 'printf ("" Input the value of X: "");', 'scanf ("" %d"", &x);', 'printf (""  Input the value of Y: "");', 'scanf ("" %d"", &y);', 'printf ("" Input the value of Z: "");', 'scanf ("" %d"", &z);', 'printf ("" \\n The updated value of the X: %d "", x);', 'printf ("" \\n The updated value of the Y: %d "", y);', 'printf ("" \\n The updated value of the Z: %d "", z);', 'return 0;', 'X = A++;', '#include', '#include', 'int main ()', 'int x, y, z, a, b, c;', 'printf ("" Input the value of X: "");', 'scanf ("" %d"", &x);', 'printf ("" Input the value of Y: "");', 'scanf ("" %d"", &y);', 'printf ("" Input the value of Z: "");', 'scanf ("" %d"", &z);', 'a = x++;', 'b = y++;', 'c = z++;', 'printf ("" \\n The original value of a: %d"", a);', 'printf ("" \\n The original value of b: %d"", b);', 'printf ("" \\n The original value of c: %d"", c);', 'printf ("" \\n\\n The updated value of the X: %d "", x);', 'printf ("" \\n The updated value of the Y: %d "", y);', 'printf ("" \\n The updated value of the Z: %d "", z);', 'return 0;', 'B = --A;', '#include', '#include', 'int main ()', 'int x, y, z;', 'printf ("" Input the value of X: "");', 'scanf ("" %d"", &x);', 'printf ("" \\n Input the value of Y: "");', 'scanf ("" %d"", &y);', 'printf (""n Input the value of Z: "");', 'scanf ("" %d"", &z);', 'printf ("" \\n The updated value of the X: %d "", x);', 'printf ("" \\n The updated value of the Y: %d "", y);', 'printf ("" \\n The updated value of the Z: %d "", z);', 'return 0;', 'B = A--;', '#include', '#include', 'int main ()', 'int x, y, z, a, b, c;', 'printf ("" Input the value of X: "");', 'scanf ("" %d"", &x);', 'printf ("" Input the value of Y: "");', 'scanf ("" %d"", &y);', 'printf ("" Input the value of Z: "");', 'scanf ("" %d"", &z);', 'a = x--;', 'b = y--;', 'c = z--;', 'printf ("" \\n The original value of a: %d"", a);', 'printf ("" \\n The original value of b: %d"", b);', 'printf ("" \\n The original value of c: %d"", c);', 'printf ("" \\n\\n The updated value of the X: %d "", x);', 'printf ("" \\n The updated value of the Y: %d "", y);', 'printf ("" \\n The updated value of the Z: %d "", z);', 'return 0;', '#include', '#include', 'int main ()', 'int i, j, x, y;', 'printf ("" Enter the value of i "" );', 'scanf ("" %d"", &i);', 'printf ("" Enter the value of j "" );', 'scanf ("" %d"", &j);', 'x = ++i;', 'printf ("" After using the pre-incrementing, the value of i is %d \\n"", i);', 'printf ("" The value of x is %d \\n"", x);', 'y = --j;', 'printf ("" After using the pre-decrementing, the value of j is %d \\n"", j);', 'printf ("" The value of y is %d \\n"", y);', 'return 0;', '#include', '#include', 'int main ()', 'int i, j, x, y;', 'printf ("" Enter the value of i "" );', 'scanf ("" %d"", &i);', 'printf ("" Enter the value of j "" );', 'scanf ("" %d"", &j);', 'x = i++;', 'printf ("" After using the post-incrementing, the value of i is  %d \\n"", i);', 'printf ("" The value of x is %d \\n"", x);', 'y = j--;', 'printf ("" After using the post-decrementing, the value of j is  %d \\n"", j);', 'printf ("" The value of y is %d \\n"", y);', 'return 0;']","['Input the value of X: 10', 'Input the value of Y: 15', 'Input the value of Z: 20', 'The updated value of the X: 11', 'The updated value of the Y: 16', 'The updated value of the Z: 21', 'Input the value of X: 10', 'Input the value of Y: 15', 'Input the value of Z: 20', 'The original value of a: 10', 'The original value of b: 15', 'The original value of c: 20', 'The updated value of the X: 11', 'The updated value of the Y: 16', 'The updated value of the Z: 21', 'Input the value of X: 5', 'Input the value of Y: 6', 'Input the value of Z: 7', 'The updated value of the X: 6', 'The updated value of the Y: 7', 'The updated value of the Z: 8', 'Input the value of X: 6', 'Input the value of Y: 12', 'Input the value of Z: 18', 'The original value of a: 6', 'The original value of b: 12', 'The original value of c: 18', 'The updated value of the X: 5', 'The updated value of the Y: 11', 'The updated value of the Z: 17', 'Enter the value of i', '5', 'Enter the value of j', '10', 'After using the pre-incrementing, the value of i is 6', 'The value of x is 6', 'After using the pre-decrementing, the value of j is 9', 'The value of y is 9', 'Enter the value of i 10', 'Enter the value of j 20', 'After using the post-incrementing, the value of i is 11', 'The value of x is 10', 'After using the post-decrementing, the value of j is 19', 'The value of y is 20']","[""Increment Operator|||Decrement Operator&&&It is used to increment the value of a variable by 1.|||It is used to decrease the operand values by 1.&&&The increment operator is represented as the double plus (++) symbol.|||The decrement operator is represented as the double minus (--) symbol.&&&It has two types: pre-increment operator and post-increment operator.|||Similarly, it has two types: the pre-decrement operator and the post-decrement operator.&&&Pre increment operator means the value of the operator is incremented first and then used in the expression.|||The post-increment operator means the operand is first used in the expression and then performs the increment operation to the original value by 1.|||Pre decrement means the value of the operator is decremented first and then assigned in the expression.|||Whereas the post decrement operator means the operand is first used in the expression and then performs the decrement operation to the operand's original value by 1.&&&Syntax for the pre increment operator: X = ++a;|||Syntax for the post increment operator: X = a++;|||Syntax for the pre decrement operator: X = --a;|||Syntax for the post decrement operator: X = a--;&&&Both operators' works only to the single operand, not values.|||Both operators' works only to the single operand, not values.""]",[]
200,['Logical AND Operator in C'],"['Logical operators perform logical operations on a given expression by joining two or more expressions or conditions. It can be used in various relational and conditional expressions. This operator is based on Boolean values to logically check the condition, and if the conditions are true, it returns 1. Otherwise, it returns 0 (False). In C programming, logical operators are classified into three types such as the logical AND (&&) operator, the logical OR operator (||), and the logical NOT (!) operator. Here, we learn about the Logical AND operator and its various examples in the C programming language.']","['https://www.javatpoint.com/shift-operators-in-c', 'https://www.javatpoint.com/increment-and-decrement-operators-in-c', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/shift-operators-in-c', 'https://www.javatpoint.com/increment-and-decrement-operators-in-c', 'https://www.javatpoint.com/shift-operators-in-c']",['https://static.javatpoint.com/cpages/images/logical-and-operator-in-c.png'],[],['Logical AND Operator'],['Truth table of the Logical AND (&&) operator'],"['Note: If the value of both is non-zero, the condition will remain true. Otherwise, the logical AND (&&) operator returns 0 (false).']","['Example 1: Program to demonstrate the Logical AND Operator in C', 'Example 2: Program to find the largest number using the Logical AND operator ', 'Example 3: Program to use the Logical AND (&&) operator to check whether the user is teenager or not.', 'Example 4: Program to validate whether the entered number is in the defined range or not. ', 'Example 5: Program to validate the username and password entered by the user is correct or not using the predefined username and password.']","['There are two conditions in the above syntax, condition1 and condition2, and in between the double (&&) ampersand symbol. If both the conditions are true, the logical AND operator returns Boolean value 1 or true. Otherwise, it returns false.']","[""The logical AND operator is represented as the '&&' double ampersand symbol. It checks the condition of two or more operands by combining in an expression, and if all the conditions are true, the logical AND operator returns the Boolean value true or 1. Else it returns false or 0.""]","['(condition1 && condition2)', '#include', '#include', 'int main ()', 'int n = 20;', 'printf ("" %d \\n"", (n == 20 && n >= 8)); // condition is true, therefore it returns 1', 'printf ("" %d \\n"", (n >= 1 && n >= 20));', 'printf ("" %d \\n"", (n == 10 && n >= 0));', 'printf ("" %d \\n"", (n >= 20 && n <= 40));', 'return 0;', '#include', '#include', 'int main ()', 'int x, y, z;', 'printf ("" Enter the first number: "");', 'scanf (""%d"", &x);', 'printf ("" Enter the second number: "");', 'scanf (""%d"", &y);', 'printf ("" Enter the third number: "");', 'scanf (""%d"", &z);', 'if ( x >= y && x >= z )', 'printf ("" %d is the largest number of all. "", x);', 'else if ( y >= x && y >= z)', 'printf ("" %d is the largest number of all. "", y);', 'printf ( "" %d is the largest number of all. "", z);', 'return 0;', '#include', '#include', 'int main ()', 'int age;', 'printf ("" Enter the age: "");', 'scanf ("" %d"", &age); // get age', 'if ( age >= 13 && age <= 19)', 'printf ("" %d is a teenager age. "", age);', 'printf ("" %d is not a teenager age. "", age);', 'return 0;', '#include', 'int main ()', 'int num;', 'printf ("" Enter a number between 1 to 50: "");', 'scanf ("" %d"", #); //get the number', 'if ( (num > 0 ) && (num <= 50))', 'printf ("" The entered number is in the range 0 and 50. "");', 'else if ( ( num > 50 ) && ( num <= 100))', 'printf ("" The entered number is in the range 50 and 100. "");', 'printf ("" Please enter the number is in the defined range. "");', 'return 0;', '#include', '#include', '#define UserName ""system""', '#define Password ""admin@123""', 'int main ()', 'char un[50], pass[50];', 'printf ( "" Enter the username: "" );', 'scanf ("" %s"", un);', 'printf ( "" Enter the password: "" );', 'scanf ("" %s"", pass);', 'if (strcmp (UserName, un) == 0 && strcmp (Password, pass) == 0)', 'printf ("" \\n The user\'s credentials are correct. "");', 'printf ( "" \\n The user\'s credentials are incorrect. "");', 'return 0;']","['1', '1', '0', '1', 'Enter the first number: 20', 'Enter the second number: 10', 'Enter the third number: 50', '50 is the largest number of all', 'Enter the age: 17', '17 is a teenager age.', '2nd execution:', 'Enter the age: 10', '10 is not a teenager age.', 'Enter a number between 1 to 50: 19', 'The entered number is in the range 0 and 50.', '2nd Run', 'Enter a number between 1 to 50:', '51', 'The entered number is in the range 50 and 100.', '3rd execution:', 'Enter a number between 1 to 50:', '0', 'Please enter the number is in the defined range.', 'Enter the username: system', 'Enter the password: [email\xa0protected]', ""The user's credentials are correct."", '2nd execution', 'Enter the username: system', 'Enter the password: [email\xa0protected]', ""The user's credentials are incorrect.""]",['A|||B|||A && B&&&1|||1|||1&&&1|||0|||0&&&0|||1|||0&&&0|||0|||0'],[]
201,['Shift Operators in C'],"[""This section will discuss the Bitwise shift operators in the c programming language. Bitwise shift operator is used to shift the binary bits either in the left direction or right direction according to the program's requirement.""]","['https://www.javatpoint.com/near-far-and-huge-pointers-in-c', 'https://www.javatpoint.com/logical-and-operator-in-c', 'https://www.javatpoint.com/near-far-and-huge-pointers-in-c', 'https://www.javatpoint.com/logical-and-operator-in-c', 'https://www.javatpoint.com/near-far-and-huge-pointers-in-c']",['https://static.javatpoint.com/cpages/images/shift-operators-in-c.png'],[],[],"['Left Shift Operator', 'Right shift operator']",[],"['Shift operators are classified into two types based on the shifting position of the bits.', 'Example 1: Program to demonstrate the use of the Left Shift operator in C', 'Example 2: Program to use the Left Shift operator in the unsigned int data of the C', 'Example 3: Program to input the positive number from the user to perform the Left shift operator ', 'Example 1: Program to demonstrate the use of the Right Shift operator in C', 'Example 2: Program to use the Right Shift operator in the unsigned int data of the C', 'Example 3: Program to input the positive number from the user to perform the Right shift operator']",[],"['The left shift operator is a type of Bitwise shift operator, which performs operations on the binary bits. It is a binary operator that requires two operands to shift or move the position of the bits to the left side and add zeroes to the empty space created at the right side after shifting the bits.', 'In the above syntax, var_name represents the integer variable name on which the left shift (<<) operation is to be performed to shift the binary bits at the left side. And the no_of_position variable represents the number of bits to be placed or shifted at the left side. In other words, the left shift operator shifts the binary bits of the first operand on the left side by the defined number of bits to the second operand.', 'For example, the value of the integer variable num is 22, and its binary form is 10110. Now we use the left shift operator to shift the binary bits 2, the num = num << 2 equal to the num = num * (2^2). And the new value of num is 22* (2 ^ 2) = 88, which is equal to the binary form 1011000.', 'In the above example, the binary bit of the user-defined positive number 40 is 101000. After that, we take 4 as the number to shift the binary bits on the left side. And then, the left-shifts operator shift 4 binary bits at the left side, and then space is created at the right side, which is filled or added by 4 zeroes to the right side that returns the binary value 1010000000, which is equivalent to the decimal number 640.', 'The right shift operator is a type of bitwise shift operator used to move the bits at the right side, and it is represented as the double (>>) arrow symbol. Like the Left shift operator, the Right shift operator also requires two operands to shift the bits at the right side and then insert the zeroes at the empty space created at the left side after shifting the bits.', 'In the above syntax, var_name represents the integer variable on which the right shift (>>) operation is to be performed to shift the binary bits at the right side. And the no_of_position variable represents the number of bits to be placed or shifted to the right side. In other words, the right shift operator shifts the binary bits of the first operand at the right side by defining the total number of bits to the second operand.']","['var_name << no_of_position', '#include', 'int main ()', 'int num;', 'printf ("" Enter a positive number: "");', 'scanf ("" %d"", #);', 'num = (num << 2); // It shifts two bits at the left side', 'printf ("" \\n After shifting the binary bits to the left side. "");', 'printf ("" \\n The new value of the variable num = %d"", num);', 'return 0;', '#include', 'int main ()', 'unsigned int num = 0xff;', 'num = (num << 2);', 'printf ("" \\n After shifting the binary bits to the left side. "");', 'printf ("" \\n The new value of the unsigned variable num = %d"", num);', 'return 0;', '#include', 'int main ()', 'int num, bit;', 'printf ("" Enter a positive number: "");', 'scanf ("" %d"", #);', 'printf ("" No. of binary bits shifted to the left side: "");', 'scanf ("" %d"", &bit);', 'num = (num << bit);', 'printf ("" \\n After shifting the bits to the left side. "");', 'printf ("" \\n The new value of the num = %d"", num);', 'return 0;', 'var_name >> no_of_position', '#include', 'int main ()', 'int num;', 'printf ("" Enter a positive number: "");', 'scanf ("" %d"", #);', 'num = (num >> 2); // It shifts two bits at the right side', 'printf ("" \\n After shifting the binary bits to the right side. "");', 'printf ("" \\n The new value of the variable num = %d"", num);', 'return 0;', '#include', 'int main ()', 'unsigned int num = 0xff;', 'num = (num >> 2);', 'printf ("" \\n After shifting the binary bits to the right side. "");', 'printf ("" \\n The new value of the unsigned variable num = %d"", num);', 'return 0;', '#include', 'int main ()', 'int num, bit;', 'printf ("" Enter a positive number: "");', 'scanf ("" %d"", #);', 'printf ("" No. of binary bits shifted to the right side: "");', 'scanf ("" %d"", &bit);', 'num = (num >> bit);', 'printf ("" \\n After using the right shift operator to shift the bits at the right side. "");', 'printf ("" \\n New value of the num = %d"", num);', 'return 0;']","['Enter a positive number: 25', 'After shifting the binary bits to the left side.', 'The new value of the variable num = 100', 'After shifting the binary bits to the left side.', 'The new value of the unsigned variable num = 1020', 'Enter a positive number: 40', 'No. of binary bits shifted to the left side: 4', 'After shifting the bits to the left side.', 'The new value of the num = 640', 'Enter a positive number: 25', 'After shifting the binary bits to the right side.', 'The new value of the variable num = 6', 'After shifting the binary bits to the right side.', 'The new value of the unsigned variable num = 63', 'Enter a positive number: 40', 'No. of binary bits shifted to the right side: 4', 'After using the right shift operator to shift the bits to the right.', 'The new value of the num = 2']",[],['|||Left Shift Operator|||Right Shift Operator|||']
202,"['Near, Far, and Huge pointers in C language']","['In this article, we learn some of the old concepts that were usually used and implemented in the 16 bit Intel architectures in the earlier days of Ms-Dos, but they are not used much nowadays. Still, these concepts are very important because they are like the building block of current technology. However, on the basis of the Memory model and segment, pointers can be classified into three types, which are as follows:']","['https://www.javatpoint.com/magic-number-in-c', 'https://www.javatpoint.com/shift-operators-in-c', 'https://www.javatpoint.com/magic-number-in-c', 'https://www.javatpoint.com/shift-operators-in-c', 'https://www.javatpoint.com/magic-number-in-c']",[],[],[],"['Near pointer', 'Far Pointer', 'Huge pointers', 'What is the difference between near, far, and huge pointers?']","['Note: These are non-standard keywords, also implementation-specific, and are irrelevant in modern platforms.']","['The syntax is as follows -', 'The following statement declares a near pointer for the variable s', 'Lets us see some important key points that can help us to understand the ""Near"" pointer.', 'To understand the ""Near"" pointer in more detail lets us see an example:', 'The syntax is given below:', 'The following statements declares a far pointer for the variable s', 'Lets us see some other important key points that can help us to understand the Far pointer.', 'Lets us see some other important key points that can help us to understand the ""Huge"" pointer.', 'The following-given example shows the usage of the huge pointer.', 'In the given program, p is the huge pointer, *p is the far pointer, and **p is the char type data variable.']",[],"['In general, we can consider the near point as it is used to store the address, which has a maximum size of 16 bits only. Using the near pointer, we can not store the address with a size greater than 16 bits. However, we can store all other smaller addresses that are within the 16 bits limit. You may think that the 16 bits are a little small because we can only access 64kb of data at a time. Thus, it is considered one of the major disadvantages of the near pointer, which is why it is no longer commonly used. Lets us see some other important key points that can help us to understand the near pointer.', ""In general, Far pointer is typically considered as a pointer of 32 bits size. However, it can also access the information stored outside the computer's memory from the current segment. Although to use this type of pointer, we usually need to allocate the sector register to store the data address in the current segment. In addition, we also need to allocate another register to store offset within the current segment."", 'Like the far pointer, the huge pointer also has the same size as 32 bits, but it can even access the bits stored or located outside the segment. However, the far pointer is quite similar to the Huge pointer, but it still has some advantages over the far pointer. For example, the Far Pointer which is fixed; thus, that part of the sector in which they are stored or located can not be changed or modified in any way. However, it is not the case with the Huge pointer because the Huge Pointer has the elasticity which allows it to do that.', 'In general, a virtual address is made up of a selector and an offset. A near-pointer does not have an explicit selector, while huge pointers have an explicit selector. When we perform pointer arithmetic on a far pointer, the selector is not modified, but it can be modified in the case of a huge pointer.']","['<data type> near <pointer definition>', 'char near *string;', '#include', 'int main()', '{', 'int x=25;', 'int near* ptr;', 'ptr=&x', 'printf(""%d"",sizeof ptr);', 'return 0;', '}', '<data type> far <pointer definition>', 'char far *s;', '#include', 'int main(){', 'int number=50;', 'int far *p;', 'p=&number', 'printf(""%d"",sizeof number);', 'return 0;', '#include', 'int main()', 'char huge * far *p;', 'printf(""%d %d %d"",sizeof(p),sizeof(*p),sizeof(**p));', 'return 0;']","['2', '4', '4 4 1']",[],"['|||Near pointer|||Far pointer|||Huge pointer||||||Near pointer cannot access beyond the data segment like graphics video memory, text video memory, etc. The size of the near pointer is two bytes. With the help of keyword near, we can make any pointer a near pointer.|||It is a pointer that works within the range of the 64Kb data segment of memory.|||It cannot access addresses beyond the given data segment.|||A near pointer can be incremented or decremented in the address range by using an arithmetic operator.||||||When the pointer is incremented or decremented, only the offset part is changed.|||It is such a type of pointer that stores both offset and segment address to which the pointer is differencing.|||A far pointer address ranges from 0 to 1MB.|||It can access all 16 segments.||||||A pointer that can point to any segment in the memory is known as a huge pointer. A huge pointer has a size of 4 bytes or 32-bits, and it can access up to 64K size in memory.|||The huge pointer can be incremented without suffering with segment work round.|||']"
203,['Magic Number in C'],"['In this section, we will discuss magic numbers in C programming language along with their various examples. When the sum of all the given digits of a number and the reverse of that sum is multiplied, which is equal to the original number, and then the number is called a magic number.']","['https://www.javatpoint.com/remove-duplicate-elements-from-an-array-in-c', 'https://www.javatpoint.com/near-far-and-huge-pointers-in-c', 'https://www.javatpoint.com/remove-duplicate-elements-from-an-array-in-c', 'https://www.javatpoint.com/near-far-and-huge-pointers-in-c', 'https://www.javatpoint.com/remove-duplicate-elements-from-an-array-in-c']",[],[],[],[],[],"['Steps to find the Magic number in C', 'Step 1: Declare an integer type variable and input a number from the user to store it in N.', 'Step 2: Get the sum of all digits of the original number and store it another variable A.', 'Step 3: Reverse the number of variable A and store into B.', 'Step 4: After that, multiply the values of variable A and B and store into C.', 'Step 5: Check whether C == N, then the number is a Magic Number. Else, the Number is not a Magic number.', 'Example 1: Program to check whether the number is a Magic number in C', ""Let's create a program to take a number from the user and validate whether the entered number is a magic number or not in the C programming language."", 'When we execute the above program in the C compiler, it produces the below output in the console screen.', 'Example 2: Program to check whether the number is a Magic number using the user-defined function', 'When we execute the above program in the C compiler, it produces the below output in your computer screen.', '2nd execution:', 'Method 2: Recursive Method to check the Magic number in C', 'Example 1: Program to find the Magic number using recursive Method', 'When we execute the above program in the C compiler, it produces the below output in the console screen.', '2nd execution:']","[""Let's create an example to take a number from the user and validate whether the entered number is a magic number or not in the C programming language."", 'A number is said to be a magic number, if the sum of the digits is recursively calculated till a single digit which is equal to 1. Otherwise the number is not a magic number', ""Let's create a program to input the integer data from the user and validate whether the number is a magic number or not in the C programming language.""]","['For example, suppose we have a 1729 number and we need to validate whether the number is a magic number or not. So, first we need to get the sum of all digits of the number which is 19 (1 + 7 + 2 + 9 = 19). Reverse the sum of the number is 91, and then get the product of the sum of original digits with the reverse of that sum as 19 * 19 = 1729. So, it is the magic number.', 'In the above program, we take 1729 from the user and assign the number to the temp variable. After that, use a while loop to extract the sum of the original digits (n) into sum_of_digits one by one and assign the result to the temp. Use the loop again to reverse the sum of the digits and print the reverse number. And finally compare the original digit (N) with the multiplication of sum_of_digits and rev variable that return the same result to show a magic number.', 'In the above program, we take 5189 from the user and create two user defined function getSum() and getRevere(). Where the getSum() function is used to calculate the sum of the given number, and the getReverse() function to reverse sum of the getSum() function. If the multiplication of the getSum() and getReverse()function is equal to the num, the number is a magic number.']","['#include', '#include', 'int main ()', 'int n, temp, rev = 0, digit, sum_of_digits = 0;', 'printf ("" Enter a Number: \\n"");', 'scanf ("" %d"", &n); // get the number', 'temp = n; // assign the number to temp variable', 'while ( temp > 0)', 'sum_of_digits = sum_of_digits + temp % 10; /* use modulus symbol to get the remainder of each iteration by temp % 10 */', 'temp = temp / 10;', 'temp = sum_of_digits; // assign the sum_of_digits to temp variable', 'printf ("" \\n The sum of the digits = %d"", temp);', 'while ( temp > 0)', 'rev = rev * 10 + temp % 10;', 'temp = temp / 10;', 'printf ("" \\n The reverse of the digits = %d"", rev);', 'printf ("" \\n The product of %d * %d = %d"", sum_of_digits, rev, rev * sum_of_digits);', 'if ( rev * sum_of_digits == n)', 'printf ("" \\n %d is a Magic Number. "", n);', 'printf ("" \\n %d is not a Magic Number. "", n);', 'return 0;', '/* program to check the magic number using the user-defined function in c programming. */', '#include', '#include', 'int getReverse (int num)', 'int revNum = 0;', 'while ( num > 0)', 'revNum = (revNum * 10) + (num % 10);', 'num = num / 10;', 'printf ("" \\n The reverse of the number = %d"", revNum);', 'return revNum;', 'int getSum ( int num)', 'int sum = 0; // initialize the sum variable with 0', 'while ( num > 0)', 'sum = sum + ( num % 10);', 'num = num / 10;', 'printf ( "" \\n The sum of the given number = %d"", sum);', 'return sum;', 'int main ()', 'int num, sum, revNum;', 'printf ("" Enter the number: "");', 'scanf ("" %d"", #);', 'sum = getSum (num); // call getSum () function', 'revNum = getReverse (sum); // callgetReverse () function and argument sum', 'int result = sum * revNum;', 'printf ("" \\n The product of %d and %d = %d "", sum, revNum, result);', 'if (sum * revNum == num)', 'printf ("" \\n %d is a magic number. "", num);', 'printf ( "" \\n %d is not a magic number. "", num);', '/* create a program to get the magic number by dividing the given number by 9. */', '#include', '#include', 'int main ()', 'int num;', 'printf ( "" Enter the number: "");', 'scanf ("" %d"", #);', 'if ( num % 9 == 1)', 'printf ( "" It is a Magic Number. "");', 'printf ( "" it is not a Magic Number. "");', 'return 0;']","['Enter a number', '1729', 'The sum of the digits = 19', 'The reverse of the digits = 91', 'The product of 19 * 91 = 1729', '1729 is a Magic Number.', 'Enter the number: 1729', 'The sum of the given number = 19', 'The reverse of the number = 91', 'The product of 19 and 91 = 1729', '1729 is a Magic Number.', 'Enter the number: 5189', 'The sum of the given number = 23', 'The reverse of the number = 32', 'The product of 23 and 32 = 736', '5189 is not a magic number.', 'Enter the number: 1789', 'It is a Magic Number.', 'Enter the number: 55057', 'It is not a Magic Number.']",[],[]
204,['Remove Duplicate Elements from an Array in C'],"['This section will discuss the removing or deletion of the duplicate elements from an array in the C programming language. When the same number of elements occurs in sorted or unsorted array, then the elements of the array is called the duplicate elements. And we need to delete these duplicate elements or same number from an array to make the resultant array consists of unique elements.']","['https://www.javatpoint.com/generic-linked-list-in-c', 'https://www.javatpoint.com/magic-number-in-c', 'https://www.javatpoint.com/generic-linked-list-in-c', 'https://www.javatpoint.com/magic-number-in-c', 'https://www.javatpoint.com/generic-linked-list-in-c']",[],[],[],[],[],"['Steps to delete the duplicate elements from unsorted array', 'Step 1: Input the size of an array from the user and store into the size variable.', 'Step 2: Use for loop to read the elements of an array and store in arr[i] variable.', 'Step 5: After that, print the unique elements of an array and the code is:', 'Example 1: Program to remove the duplicate elements from an array', ""Let's consider an example to delete the same number or duplicate elements from an array in the C programming language."", 'When we execute the above program in C compiler, it produces the given below output in the console screen.', 'Remove the Duplicate Elements from Sorted Array', 'Algorithm to delete the duplicate elements from sorted array', ""Following is the algorithm to delete the duplicate array's elements from the sorted array in the C programming language."", 'Example 2: Program to remove the duplicate elements from sorted array using the user-defined function ', ""Let's consider an example to delete the same number or duplicate elements from sorted array in the C programming language."", 'When we execute the above program in C compiler, it produces the given below output in the console screen.', 'Example 3: Program to remove the duplicate array elements using pointer ', ""Let's consider an example to print the unique array elements by removing the duplicate element using the pointers in the C programming language."", 'When we execute the above program in C compiler, it produces the given below output in the console screen.', 'Example 4: Delete Duplicate Elements from a sorted array by creating separate index for same elements', 'When we execute the above program in C compiler, it produces the given below output in the console screen.']","['Step 3: To get the duplicate elements from an array we need to use two for loops. Where the first loop start from 0 to size. And the structure of the loop is: for (i = 0; i < size; i++).', 'Step 4: If any duplicate element is encountered, delete the duplicate element from an array and the size of array is decrement by 1 such that, size = size - 1.', ""Let's consider an example to display the unique elements from a sorted array by creating extra space for same number of element/ index in the C programming language.""]","['For example, there is an integer type array arr[10] that contains { 5, 8, 3, 3, 5, 9} elements. In this array, 3 and 5 occurs two times. Hence, these elements are duplicate elements. So, after deleting the duplicate elements from an array arr[], we get 5, 8, 3,9 elements.', 'Another loop selects each element of the array and compare with the corresponding element to get the duplicate elements. And the structure of the inner loop is: for (j = i + 1; j < size; j++) and the code to find the subsequent same element is: if (arr[i] == arr[j]).', 'Suppose we have a given sorted array and the task is to remove the same number of elements from the array. For example, there is an integer type array whose size is 5 and contains arr[] = {2, 2, 3, 3, 5} elements. In this sorted array, 2 and 3 numbers occurs two times. Hence, these elements are duplicate elements. So, after deleting the duplicate elements from an array arr[], we get 2, 3, 5 elements and the new size of array is 3.']","['for (i = 0; i < size; i++)', 'printf (""%d \\t"" , arr[i]);', '#include', '#include', 'int main ()', 'int arr[20], i, j, k, size;', 'printf ("" Define the number of elements in an array: "");', 'scanf ("" %d"", &size);', 'printf ("" \\n Enter %d elements of an array: \\n "", size);', 'for ( i = 0; i < size; i++)', 'scanf ("" %d"", &arr[i]);', 'for ( i = 0; i < size; i ++)', 'for ( j = i + 1; j < size; j++)', 'if ( arr[i] == arr[j])', 'for ( k = j; k < size - 1; k++)', 'arr[k] = arr [k + 1];', 'size--;', 'j--;', '/* display an array after deletion or removing of the duplicate elements */', 'printf ("" \\n Array elements after deletion of the duplicate elements: "");', 'for ( i = 0; i < size; i++)', 'printf ("" %d \\t"", arr[i]);', 'return 0;', '/* program to delete the duplicate elements from sorted array in C. */', '#include', 'int duplicate_element ( int arr[], int num)', 'if (num == 0 || num == 1)', 'return num;', 'int temp [num];', 'int i, j = 0;', 'for (i = 0; i < num - 1; i++)', 'if (arr [i] != arr[i + 1])', 'temp[j++] = arr[i];', 'temp[j++] = arr[ num - 1];', 'for (i = 0; i < j; i++)', 'arr[i] = temp[i];', 'return j;', 'int main ()', 'int num;', 'printf ("" Define the no. of elements of the array: "");', 'scanf ("" %d"", #);', 'int arr[num], i;', 'printf ("" Enter the elements: "");', 'for ( i = 0; i < num; i++)', 'scanf ("" %d"", &arr[i]);', 'printf ("" \\n Elements before removing duplicates: "");', 'for ( i = 0; i < num; i++)', 'printf ("" %d"", arr[i]);', 'num = duplicate_element (arr, num);', 'printf ("" \\n Display array\'s elements after removing duplicates: "");', 'for ( i = 0; i < num; i++)', 'printf ("" %d"", arr[i]);', 'return 0;', '/* program to delete the duplicate elements from sorted array using pointers in C. */', '#include', '#include', 'int i, j;', 'int remove_element ( int *ptr, int num)', 'int temp;', 'for ( i = 0; i < num-1; i++)', 'for (j = i + 1; j < num; j++)', 'if ( *(ptr+i) == *(ptr+j))', 'temp = *(ptr + j);', '*(ptr + j) = *(ptr + num - 1);', '*(ptr + num - 1) = temp;', 'num--;', 'printf ("" After removing the duplicate elements: "");', 'for ( i = 0; i < num; i++)', 'printf ("" %d \\t"", *(ptr+i));', 'return 0;', 'int main ()', 'int num, *ptr;', 'printf ("" Define the size of the array element: "");', 'scanf ("" %d"", #);', 'ptr = (int *) malloc (num * sizeof(int));', 'printf ("" \\n Enter the elements of the array: \\n"");', 'for ( i = 0; i < num; i++)', 'scanf ("" %d"", (ptr+i));', 'remove_element (ptr, num);', 'return 0;', '#include', '#include', '/* deleteDuplicate() function to remove same elements', 'and return new array size. */', 'int deleteDuplicate (int arr[], int num)', 'if (num == 0 || num == 1)', 'return num;', 'int i, j = 0;', 'for (i = 0; i < num - 1; i++)', 'if ( arr[i] != arr[i+1])', 'arr[j++] = arr[i];', 'arr[j++] = arr[num -1];', 'return j;', 'int main ()', 'int i;', 'int arr[] = {5, 10, 10, 15, 15, 20, 25, 25, 30, 30};', 'int num = sizeof(arr) / sizeof(arr[0]);', '/* call deleteDuplicate() function to', 'delete duplicate element and return new size. */', 'num = deleteDuplicate(arr, num);', 'printf ("" Display the unique elements from the sorted array: \\n "");', 'for ( i = 0; i < num; i++)', 'printf ("" %d \\t"", arr[i]);', 'return 0;']","['Define the number of elements in an array: 10', 'Enter 10 elements of an array:', '57', '12', '89', '32', '62', '12', '89', '35', '67', '75', 'Array elements after deletion of the duplicate elements:  57    12      89      32      62      35      67      75', 'Define the no. of elements of the array: 10', 'Enter the elements: 5', '6', '6', '7', '8', '8', '9', '10', '11', '11', 'Elements before removing duplicates:  5 6 6 7 8 8 9 10 11 11', ""Display array's elements after removing duplicates:  5 6 7 8 9 10 11"", 'Define the size of the array element: 10', 'Enter the elements of the array:', '5', '5', '6', '7', '7', '8', '8', '9', '10', '11', 'After removing the duplicate elements:  5       11      6       7       10      8       9', 'Display the unique elements from the sorted array:', '5      10      15      20      25      30']",[],['|||Define the size of elements of the array.|||Read the array elements from the user.|||Repeat from i = 1 to num.||||||if (arr[i] != arr [i + 1]|||temp [j++] = arr[i]|||temp [j++] = arr[n- 1]|||Repeat from i = 1 to j|||arr[i] = temp[i]|||arr [i] = temp [i]|||Return j.||||||Print unique elements of the array.||||||if (arr[i] != arr [i + 1]|||temp [j++] = arr[i]|||temp [j++] = arr[n- 1]|||Repeat from i = 1 to j|||arr[i] = temp[i]|||arr [i] = temp [i]|||Return j.|||']
205,['Generic Linked list in C'],"[""A linked list is a linear collection of data elements for whom the order is determined by one's physical location in memory rather than by their physical order. Rather, each element serves as a stepping stone to the next. It's a data structure made up of nodes that symbolize a sequence. So every node contains data and a reference (a link) to the next node in the sequence in its most basic form. During iteration, this structure enables efficient insertion and removal of elements from any position in the sequence. More complex variants include extra links, allowing for more efficient insertion and removal of nodes at arbitrary positions.""]","['https://www.javatpoint.com/isalnum-function-in-c', 'https://www.javatpoint.com/remove-duplicate-elements-from-an-array-in-c', 'https://www.javatpoint.com/isalnum-function-in-c', 'https://www.javatpoint.com/remove-duplicate-elements-from-an-array-in-c', 'https://www.javatpoint.com/isalnum-function-in-c']",[],[],"['Types of Linked list', 'Singly Linked list']",[],[],"['Depending upon the type of pointer, the nodes of a linked list have the direction of the pointers of the linked list nodes.', 'There are different types of linked lists, and some of the major types of linked lists are:', 'The above code gives the following output:', 'While inserting a new node to the singly linked list, it is checked whether the first node is zero or not,']","['One disadvantage of linked lists is that access time is linear and difficult to the pipeline. It is not possible to provide faster access, such as random access. When compared to linked lists, arrays have better cache locality.', ""Now let's see a sample code to create a singly linked list, add elements in the list, and then traverse the singly linked list in the C programming language.""]","['Linked lists are one of the most basic and widely used data structures. They can be used to incorporate a variety of other popular abstract data types, such as lists, stacks, queues, associative arrays, and S-expressions; however, it is not rare to incorporate those data structures directly without using a linked list as the foundation or underlying data structure.', 'The primary advantage of a linked list over a traditional array is that the list elements can be easily inserted or removed without requiring reallocation or reorganization of the entire structure because the data items do not need to be stored contiguously in memory or on disc, whereas restructuring an array at run-time is a much more costly operation. Linked lists allow the addition and removal of nodes at any point in the list with a constant number of operations by keeping the link preceding the link being added or removed in memory during list traversal. However, because simple linked lists do not support random access to data or efficient indexing, many basic operations, such as obtaining the last node of the list, locating a node that contains a given datum, or locating the location where a new node should be inserted, may necessitate iterating through most or all of the list elements. The benefits and drawbacks of using linked lists are listed below.', 'A dynamic array is a data structure that allocates all elements in memory in a contiguous manner and keeps track of the current number of elements. If the dynamic array\'s allocated space is exceeded, it is reallocated and (possibly) copied, which is an expensive operation. There are several advantages to using linked lists over dynamic arrays. Insertion or deletion of an element at a specific point of a list is a constant-time operation (unless we have already indexed a pointer to the node (before the one to be removed or before the insertion point). In contrast, insertion in a dynamic array at random locations will require moving half of the elements on average and all of the elements in the worst case. While it is possible to ""delete"" an element from an array in constant time by marking its slot as ""vacant,"" this causes fragmentation that impedes iteration performance.', 'In a singly linked list, the node of the singly linked list points to the address of the memory location where the next node is stored. Similarly, in this way, all the nodes are storing the address of their respective next nodes. Other than the last node, the address in the pointer of the last node is NULL representing it is the last node of the linked list.', 'In the above code, we created different functions for different functionalities of the linked list like inserting a new node to the linked list, displaying the data present in all the nodes of the linked list, deleting a particular node present at a specific position in the linked list and counting the total number of nodes in the linked list.']","['/* A sample C code to perform the following functions on Singly Linked list Insert, Delete, Display and Count Operations */', '/* All Operations Example Program Using Functions in C*/', '#include <stdio.h>', '#include <malloc.h>', '#include <stdlib.h>', 'struct node {', 'int value;', 'struct node *next;', 'void insert();', 'void display();', 'void delete();', 'int count();', 'typedef struct node DATA_NODE;', 'DATA_NODE *head_node = 0;', 'DATA_NODE *first_node = 0;', 'DATA_NODE *temp_node = 0;', 'DATA_NODE *prev_node;', 'DATA_NODE next_node;', 'int data;', 'void insert() {', 'printf(""\\nEnter Element for Insert Linked list : \\n"");', 'scanf(""%d"", &data);', 'temp_node = (DATA_NODE *) malloc(sizeof (DATA_NODE));', 'temp_node->value = data;', 'if (first_node == 0) {', 'first_node = temp_node;', '} else {', 'head_node->next = temp_node;', 'temp_node->next = 0;', 'head_node = temp_node;', 'fflush(stdin);', '}//end of the insert function', 'void delete() {', 'int countvalue = 0;', 'int pos = 0;', 'int i = 0;', 'countvalue = count();', 'temp_node = first_node;', 'printf(""\\nDisplay Linked list : \\n"");', 'printf(""\\nEnter Position for Delete Element : \\n"");', 'scanf(""%d"", &pos);', 'if (pos > 0 && pos <= countvalue) {', 'if (pos == 1) {', 'temp_node = temp_node -> next;', 'first_node = temp_node;', 'printf(""\\nDeleted Successfully \\n\\n"");', '} else {', 'while (temp_node != 0) {', 'if (i == (pos - 1)) {', 'prev_node->next = temp_node->next;', 'if(i == (countvalue - 1))', '{', 'head_node = prev_node;', 'printf(""\\nDeleted Successfully \\n\\n"");', 'break;', '} else {', 'i++;', 'prev_node = temp_node;', 'temp_node = temp_node -> next;', '}', '}', '} else', 'printf(""\\nInvalid Position \\n\\n"");', '}// end of delete function', 'void display() {', 'int count = 0;', 'temp_node = first_node;', 'printf(""\\nDisplay Linked list : \\n"");', 'while (temp_node != 0) {', 'printf(""# %d # "", temp_node->value);', 'count++;', 'temp_node = temp_node -> next;', 'printf(""\\nNo Of Items In Linked list : %d\\n"", count);', '}// end of display function', 'int count() {', 'int count = 0;', 'temp_node = first_node;', 'while (temp_node != 0) {', 'count++;', 'temp_node = temp_node -> next;', 'printf(""\\nNo Of Items In Linked list : %d\\n"", count);', 'return count;', '}// end of count function', 'int main() {', 'char ch;', 'do', '{', 'printf(""Please Choose one of the Operations::\\n"");', 'printf(""1. To Insert Data in the Singly Linked list.\\n"");', 'printf(""2. To Delete Data from the Singly Linked list.\\n"");', 'printf(""3. To Display Data present in the Singly Linked list.\\n"");', 'printf(""4. To Display the count of nodes in the Singly Linked list.\\n"");', 'printf(""\\n"");', 'int choice;', 'scanf(""%d"",&choice);', 'switch (choice) {', 'case 1:', 'insert();', 'printf(""Data Added Sucessfully.\\n"");', 'break;', 'case 2:', 'delete();', 'break;', 'case 3:', 'display();', 'break;', 'case 4 :', 'count();', 'break;', 'default:', 'printf(""Please enter a valid option from the menu to proceed further.\\n \\n"");', 'break;', '}', 'printf(""\\nType [N or n] to terminate the program.\\nType [Y or y] to continue the program.\\n"");', 'scanf("" %c"",&ch);', ""} while (!(ch == 'N' || ch == 'n'));"", 'return 0;', '}// end of main function']","['Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '1', 'Enter Element for Insert Linked list:', '2', 'Data Added Successfully.', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '1', 'Enter Element for Insert Linked list:', '3', 'Data Added Successfully.', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '1', 'Enter Element for Insert Linked list:', '6', 'Data Added Successfully.', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '1', 'Enter Element for Insert Linked list:', '89', 'Data Added Successfully.', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '1', 'Enter Element for Insert Linked list:', '56', 'Data Added Successfully.', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '1', 'Enter Element for Insert Linked list:', '31', 'Data Added Successfully.', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '1', 'Enter Element for Insert Linked list:', '78', 'Data Added Successfully.', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '3', 'Display Linked list:', '# 2 # # 3 # # 6 # # 89 # # 56 # # 31 # # 78 #', 'No Of Items In Linked list: 7', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '2', 'No of Items In Linked list: 7', 'Display Linked list:', 'Enter Position for Delete Element:', '4', 'Deleted Successfully', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '3', 'Display Linked list:', '# 2 # # 3 # # 6 # # 56 # # 31 # # 78 #', 'No Of Items In Linked list: 6', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'y', 'Please Choose one of the Operations::', '1. To Insert Data in the Singly Linked list.', '2. To Delete Data from the Singly Linked list.', '3. To Display Data present in the Singly Linked list.', '4. To Display the count of nodes in the Singly Linked list.', '4', 'No of Items in Linked list: 6', 'Type [N or n] to terminate the program.', 'Type [Y or y] to continue the program.', 'n']",[],"['|||Singly Linked list|||Doubly Linked list|||Circular Linked list|||Doubly Circular Linked list||||||If the first node is zero, there are no nodes present in the singly linked list at that time, so that a new node is added at the start of the singly linked list, which will act as the head of the linked list.|||If the first node is not zero, then the new node is added. After that already the last existing node is present in the linked list. For deleting a node from the linked list, first, we need to take the index of that node from the user. Once we have the position of that node next step is to traverse to that node, and after reaching that node, the previous node of the node that we want to delete is holding the address of this node so but we need to change it to the node of the next of that position. And for the printing of the data present in all the nodes, we need to traverse the whole list beginning from the head (first) node all up to the last node, and while traversing each node, the data present in that node is displayed. A similar approach is followed for printing the total count of the nodes in the linked list.|||']"
206,['isalnum() function in C'],"['This section will discuss the isalnum() function in the C programming language to check whether the passed character as the argument is a valid alphanumeric character or not. The isalnum() function is declared in the ctype.h header file. The isalnum() function takes one argument and tests for both digits and the character of the alphabet. If the given character is either the digits (0 - 9) or alphabets (a - z or A to Z), it returns a true or non-zero value. Otherwise, it returns false or zero.']","['https://www.javatpoint.com/isalpha-function-in-c', 'https://www.javatpoint.com/generic-linked-list-in-c', 'https://www.javatpoint.com/isalpha-function-in-c', 'https://www.javatpoint.com/generic-linked-list-in-c', 'https://www.javatpoint.com/isalpha-function-in-c']",['https://static.javatpoint.com/cpages/images/isalnum-function-in-c.png'],[],[],"['Syntax of the isalnum() function', 'Parameters:', 'Return Value:']",[],"['Following is the syntax of the isalnum() function in the C programming languages, as follows:', 'Here, the isalnum function takes ch as the argument to check the given argument is alphanumeric or not.', 'ch: It represents the alphabets or numeric numbers to be checked.', ""It returns a non-zero value when the passed 'ch' character is a digit or a letter. Otherwise, it shows 0."", 'Example 1: Program to demonstrate the usage of the isalnum() function in C', ""Let's consider an example to check the given character is an alphanumeric in the C programming language."", 'Example 2: Program to input a character and check the alphanumeric using the isalnum() function', ""Let's consider an example to input the character from the user and check whether the given character is alphanumeric in the C programming language."", ""Here, we input the 't' character from the user and then use the isalnum() function to check the given character is alphanumeric."", '2nd execution:', '3rd execution:', 'Example 3: Program to return non-zeroes values for alphanumeric characters in C', 'Example 4: Program to check all alphanumeric character of the array using the isalnum() function', ""Let's consider an example to check all array character is alphanumeric or not using the isalnum() function in the C programming language""]","['Similarly, we input 7 from the user and check the given number is numeric or not. If the number contains 0 to 9 digits, the isalnum () function returns that the given number is numeric.', 'Here, we input the \'+"" character and use the isalnum() function to check the alphanumeric character. And we get the given character is not alphanumeric means neither the character is alphabets nor digits from 0 to 9.', ""Let's consider an example to validate the alphanumeric character and returns a non-zero values using the isalnum() function in the C programming language.""]","[""For example, if the given character is 'a', the isalnum() function returns a non-zero value. Similarly, we enter 5 as the numeric to the isalnum() function that returns a non-zero value. If the given number is neither the alphabets (a to z or A to Z) letter nor the digits from 0 to 9, it returns zero."", ""In the above program, the isalnum() function checks each variables' values whether the passed character is an alphanumeric value or not. If the given character is alphanumeric, it returns the %c is an alphanumeric character; else, it shows the %c is not an alphanumeric character.""]","['int isalnum (int ch);', '/* get the alphanumeric number using the isalnum() function in C. */', '#include', '#include', 'int main ()', ""int ch1 = 'A';"", ""int ch2 = 'e';"", ""int ch3 = '$';"", ""int ch4 = '7';"", ""int ch5 = ' ';"", ""int ch6 = '0';"", '/* use isalnum () function to check the given number is alphanumeric. */', 'if ( isalnum (ch1) )', 'printf ("" \'%c\' is an alphanumeric character. \\n"", ch1);', 'printf (""\'%c\' is not an alphabetic or numeric character. \\n"", ch1);', 'if ( isalnum (ch2) )', 'printf ("" \'%c\' is an alphanumeric character. \\n"", ch2);', 'printf (""\'%c\' is not an alphabetic or numeric character. \\n"", ch2);', 'if ( isalnum (ch3) )', 'printf ("" \'%c\' is an alphanumeric character. \\n"", ch3);', 'printf (""\'%c\' is not an alphabetic or numeric character. \\n"", ch3);', 'if ( isalnum (ch4) )', 'printf ("" \'%c\' is an alphanumeric character. \\n"", ch4);', 'printf ("" \'%c\' is not an alphabetic or numeric character. \\n"", ch4);', 'if ( isalnum (ch5) )', 'printf ("" \'%c\' is an alphanumeric character. \\n"", ch5);', 'printf ("" \'%c\' is not an alphabetic or numeric character. \\n"", ch5);', 'if ( isalnum (ch6) )', 'printf ("" \'%c\' is an alphanumeric character. \\n"", ch6);', 'printf ("" \'%c\' is not an alphabetic or numeric character. \\n"", ch6);', 'return 0;', '#include', '#include', 'int main ()', 'char ch;', 'printf ("" \\n Enter a valid character: "");', 'scanf ("" %c"", &ch);', '/* use isalnum() function to check the valid alphabets (a to z or A to Z) or numeric (0 to 9) character */', 'if (isalnum (ch))', 'printf ("" \\n \'%c\' is a valid alphanumeric character. "", ch);', 'printf ("" \\n %c is not an alphanumeric character. "", ch);', 'printf ("" \\n Please, enter a valid alphanumeric character (\'a\' to \'z\' or \'A\' to \'Z\' and (0 to 9)). "" );', 'return 0;', 'Enter a valid character: 7', ""'7' is a valid alphanumeric character."", 'Enter a valid character: +', ""'+' is not an alphanumeric character."", ""Please, enter a valid alphanumeric character ('a' to 'z' or 'A' to 'Z' and (0 to 9))."", '#include', '#include', 'int main ()', 'char ch;', ""ch = 'C';"", 'printf ("" \\n The result of valid uppercase alphanumeric is passed: %d "", isalnum (ch));', ""ch = 'h';"", 'printf ("" \\n The result of valid lowercase alphanumeric is passed: %d "", isalnum (ch));', ""ch = '05';"", 'printf ("" \\n The result of valid alphanumeric character is passed: %d "", isalnum (ch));', ""ch = '91';"", 'printf ("" \\n The result of valid alphanumeric character is passed: %d "", isalnum (ch));', ""ch = '&';"", 'printf ("" \\n The result of non-alphanumeric character is passed: %d "", isalnum (ch));', 'return 0;', '#include', '#include', '#include', 'int main()', ""char str[7] = {'#','&','@','9','Z','o', '!'};"", 'int arr[7] = {0, 0, 0, 0, 0, 0, 0};', 'int i;', 'for (i = 0; i < 7; i++)', 'arr[i] = isalnum (str[i]);', 'for (i = 0; i < 7; i++)', 'printf( ""\\n \'%c\'"", str[i]); // print character', 'if (arr[i] != 0)', 'printf( "" is an Alphanumeric character. "");', 'else', 'printf( "" is NOT an alphabet or numeric character. "");', 'return 0;']","[""'A' is an alphanumeric character."", ""'e' is an alphanumeric character."", ""'$' is not an alphabetic or numeric character."", ""'7' is an alphanumeric character."", ""' ' is not an alphabetic or numeric character."", ""'0' is an alphanumeric character."", 'Enter a valid character: t', ""'t' is a valid alphanumeric character."", 'The result of valid uppercase alphanumeric is passed: 1', 'The result of valid lowercase alphanumeric is passed: 2', 'The result of valid alphanumeric character is passed: 4', 'The result of valid alphanumeric character is passed: 4', 'The result of non-alphanumeric character is passed: 0', ""'#' is NOT an alphabet or numeric character."", ""'&' is NOT an alphabet or numeric character."", ""'@' is NOT an alphabet or numeric character."", ""'9' is an Alphanumeric character."", ""'Z' is an Alphanumeric character."", ""'0' is an Alphanumeric character."", ""'!' is NOT an alphabet or numeric character.""]",[],[]
207,['isalpha() function in C'],"['This section will discuss the isalpha() function of the C programming language. The islpha() function is a predefined library function of the ctype.h header file that takes an argument as the character type and validates for valid alphabets. If the given character is alphabets (a - z or A to Z), it returns a non-zero value; else, it returns 0. ']","['https://www.javatpoint.com/bisection-method-in-c', 'https://www.javatpoint.com/isalnum-function-in-c', 'https://www.javatpoint.com/bisection-method-in-c', 'https://www.javatpoint.com/isalnum-function-in-c', 'https://www.javatpoint.com/bisection-method-in-c']",['https://static.javatpoint.com/cpages/images/isalpha-function-in-c.png'],[],[],"['Syntax of the isalpha function', 'Parameters:', 'Return Value:']","['Note: While using the islpha() function, we must add the ctype.h header file in our program.']","['Following is the syntax for the isalpha() function in C programming, as follows.', 'Here, the isalpha() function takes ch as the character type argument to check the alphabetic letters.', 'Ch: It represents the character type variable to be checked.', ""The isalpha() function returns a non zero value when the 'ch' character is an alphabetic. Else, it shows the zero."", 'Example 1: Program to check the alphabetic character using the islpha() function ', ""Let's consider an example to check whether the given character is alphabet using the islpha() function in the C programming."", 'Example 2: Program to validate the given character using the isalpha() function ', ""Let's consider a example to use the isalpha() function and check whether the various given character is alphabets or not in the C programming."", 'Example 3: Program to get a character from user and check whether the character is valid character ', ""Let's consider an example to check valid characters using the isalpha function in C programming language."", '2nd execution:', 'Example 4: Program to return a non zeroes values for alphabetic character using the isalpha() function', 'Example 5: Program to check all valid characters of the array using the isalpha() function ', ""Let's create an example to use the isalpha function to check the array character in C programming language.""]","[""For example, if the given character is from 'a' to 'z' and 'A' to 'Z', the isalpha() function returns a non-zero value. And if the given character is not the letters of the alphabets, it returns zeroes for other characters ( '@', '$', '&', etc.)."", 'In the above program, we take the \'g\' character from the user and then use the isalpha() function to check whether the input character is an alphabet or not. If the character is an alphabet, it prints ""You entered a valid character"".', ""Let's consider an example to validate the alphabetic character and returns a non zero values using the isalpha() function in the C programming language."", 'In the above program, we get different non-zero values when the alphabetic character is passed to the isalpha() function. But, when we pass the non-alphabetic character to the isalpha() function, it always returns 0.']","['In the second execution, we input the \'$\' character and use the isalpha() function to check the character is an alphabet or not. Here \'$\' character is not an alphabet. So, it returns the ""$ is not an alphabet. Please, enter a valid alphabet character (\'a\' to \'z\' or \'A\' to \'Z\')"".']","[""Input character: 'b'"", 'Function returns 1', ""Input character: '&'"", 'Function returns 0', 'int isalpha (char Ch);', '#include', '#include  // use ctype.h header file', 'int main (int argc, const char *argv [])', 'unsigned char ch;', ""ch = 'a';"", '/* use isalpha () function to check the alphabet character */', 'if (isalpha (ch) != 0)', 'printf ("" \\n \'%c\' is a valid alphabetic character. "", ch);', 'printf ("" \'%c\' is not the valid alphabetic character. "", ch);', ""ch = '&';"", '/* use isalpha () function to check the alphabet character */', 'if (isalpha (ch) != 0)', 'printf ("" \\n \'%c\' is a valid alphabetic character. "", ch);', 'printf ("" \\n \'%c\' is not a valid alphabetic character. "", ch);', 'return 0;', '#include', '#include  // use ctype.h header file', 'int main ()', '/* use isalpha () function to check the alphabet character */', ""if (isalpha ( 'e') == 0)"", 'printf ("" \\n \'e\' is not an alphabetic character. "");', 'printf (""\\n \'e\' is an alphabetic character. "");', ""if (isalpha ('Z') == 0)"", 'printf ("" \\n \'Z\' is not an alphabetic character. "");', 'printf ("" \\n \'Z\' is an alphabetic character. "");', ""if (isalpha ('@') == 0)"", 'printf ("" \\n \'@\' is not an alphabetic character. "");', 'printf ("" \\n \'@\' is an alphabetic character. "");', ""if (isalpha ('5') == 0)"", 'printf ("" \\n \'5\' is not an alphabetic character. "");', 'printf ("" \\n \'5\' is an alphabetic character. "");', 'return 0;', '#include', '#include', 'int main ()', 'char ch;', 'printf ("" \\n Enter a valid character: "");', 'scanf ("" %c"", &ch);', 'if (isalpha (ch))', 'printf ("" \\n You entered a valid alphabet. "");', 'printf ("" \\n %c is not an alphabet. "");', 'printf ("" \\n Please, enter a valid alphabet character (\'a\' to \'z\' or \'A\' to \'Z\'). "" );', 'return 0;', 'Enter a valid character: $', '$ is not an alphabet.', ""Please, enter a valid alphabet character ('a' to 'z' or 'A' to 'Z')."", '#include', '#include', 'int main ()', 'char ch;', ""ch = 'C';"", 'printf ("" \\n The result of valid uppercase alphabetic character is passed: %d "", isalpha (ch));', ""ch = 'h';"", 'printf ("" \\n The result of valid lowercase alphabetic character is passed: %d "", isalpha (ch));', ""ch = '+';"", 'printf ("" \\n The result of non-alphabetic character is passed: %d "", isalpha (ch));', 'return 0;', '#include', '#include', '#include', 'int main()', ""char str[7] = {'*','$','@','7','Z','p', '!'};"", 'int arr[7] = {0, 0, 0, 0, 0, 0, 0};', '', 'int i;', 'for (i = 0; i < 7; i++)', 'arr[i] = isalpha (str[i]);', 'for (i = 0; i < 7; i++)', 'printf( "" \\n \'%c\'"", str[i]); // print character', 'if (arr[i] != 0)', 'printf( "" is an Alphabetic character. "");', 'else', 'printf( "" is NOT an Alphabetic character. "");', 'return 0;']","[""'a' is a valid alphabetic character."", ""'&' is not a valid alphabetic character."", ""'e' is an alphabetic character."", ""'Z' is an alphabetic character."", ""'@' is not an alphabetic character."", ""'5' is not an alphabetic character."", 'Enter a valid character: g', 'You entered a valid alphabet.', 'The result of valid uppercase alphabetic character is passed: 1', 'The result of valid lowercase alphabetic character is passed: 2', 'The result of non-alphabetic character is passed: 0', ""'*' is NOT an Alphabetic character."", ""'$' is NOT an Alphabetic character."", ""'@' is NOT an Alphabetic character."", ""'7' is NOT an Alphabetic character."", ""'Z' is an Alphabetic character."", ""'p' is an Alphabetic character."", ""'!' is NOT an Alphabetic character.""]",[],[]
208,['Bisection Method in C'],['This section will discuss the bisection method in the C programming language. The bisection method is a simple and convergence method used to get the real roots of non-linear equations. The Bisection method repeatedly bisects or separates the interval and selects a subinterval in which the root of the given equation is found.'],"['https://www.javatpoint.com/snprintf-function-in-c', 'https://www.javatpoint.com/isalpha-function-in-c', 'https://www.javatpoint.com/snprintf-function-in-c', 'https://www.javatpoint.com/isalpha-function-in-c', 'https://www.javatpoint.com/snprintf-function-in-c']",['https://static.javatpoint.com/cpages/images/bisection-method-in-c.png'],[],[],"['Bisection Method Algorithm:', 'Advantages of the Bisection Method:', 'Disadvantages of the Bisection Method']",[],"['Following is the algorithm of the Bisection Method in C.', 'If (f1 * f2) > 0, it displays the initial guesses are wrong and transfer control to step 11.', 'Example 1: Program to find the root of the given equation using the Bisection method', ""Let's consider an example to get the approximation root of an equation using the Bisection method and for loop in the C programming language."", 'Example 2: Program to find the real root of the (x3 + 3x - 5 = 0) equation using the Bisection method ', ""Let's consider an example to print the real roots using the Bisection method in the C programming language."", 'Example 3: Program to find the approximation root of the non-algebraic function using the Bisection method', ""Let's create a simple program to calculate the approximation root using the Bisection method and do while loop in C programming language.""]",[],"['It means if a function f(x) is continuous in the closed interval [a, b] and the f(a) and f(b) are two real numbers of opposite signs that contain at least one real root of f(x) = 0, between a and b. This method is also known as the Bolzano or Half Interval or Binary search method.']","['/* program to demonstrate the usage of the bisection method in C. */', '#include', 'void bisect (float *mid_pt, float int_st, float int_end, int *iter_cnt);', 'double get_fun (double res);', 'int main ()', 'int iter_cnt, mx_iter_cnt;', 'float mid_pt, int_st, int_end, err_all, root;', 'printf ("" \\n Enter the first starting point: "");', 'scanf ("" %f"", ∫_st);', 'printf ("" \\n Enter the second ending point: "");', 'scanf ("" %f"", ∫_end);', 'printf ("" \\n Enter the maximum iteration to be allowed: "");', 'scanf ("" %d"", &mx_iter_cnt);', 'printf ("" Input the no. of allowed error point: "");', 'scanf ("" %f"", &err_all);', 'bisect (∣_pt, int_st, int_end, &iter_cnt);', 'for (iter_cnt = 0; iter_cnt < mx_iter_cnt; mid_pt = root)', 'if ( get_fun (int_st) * get_fun (mid_pt) < 0)', 'int_end = mid_pt; // assign the mid_pt to int_end', 'int_st = mid_pt; // else it assign the mid_pt to int_st', 'bisect ( &root, int_st, int_end, &iter_cnt); // get the address', 'if ( fabs (root - mid_pt) < err_all)', 'printf ("" \\n The approximation root is: %f \\n"", root);', 'return 0;', 'printf ("" The iterations are insufficient: "");', 'return 0;', 'void bisect (float *mid_pt, float int_st, float int_end, int *iter_cnt)', '*mid_pt = (int_st + int_end) / 2; // get the middle value', '++(*iter_cnt); // increment the iteration value', 'printf ( "" Iteration \\t %d: \\t %f \\n"", *iter_cnt, *mid_pt);', 'double get_fun (double res)', 'return (res * res * res - 4 * res - 9);', '#include', '#include', 'double bisect ( double num)', 'return ( pow (num, 3) + 3 * num - 5);', 'int main ()', 'printf ( "" \\n Display the real roots of the given equation using the Bisection method: "");', 'printf ( "" \\n x ^ 3 + 3 * x - 5 = 0 \\n "");', 'double x0, x1;', 'printf ( "" \\n Enter the first approximation of the root: "");', 'scanf ("" %lf"", &x0);', 'printf ( "" \\n Enter the second approximation of the root: "");', 'scanf ("" %lf"", &x1);', 'int iterate;', 'printf ("" \\n Input the number of iteration you want to perform: "");', 'scanf ("" %d"", &iterate);', 'int count = 1;', 'double l1 = x0;', 'double l2 = x1;', 'double r, f1, f2, f3;', 'if (bisect (l1) == 0) // it is a root', 'r = l1;', 'else if ( bisect (l2) == 0)', 'r = l2;', 'while (count <= iterate) // here count is initialized with 1', 'f1 = bisect (l1);', 'r = (l1 + l2) / 2.0; // get the mid value of the interval l1 and l2', 'f2 = bisect (r);', 'f3 = bisect (l2);', 'if (f2 == 0)', 'r = f2;', 'break; // break the execution from the while loop statement', 'printf ("" \\n The root after %d iterations is %lf. \\n"", count, r);', 'if ( f1 * f2 < 0)', 'l2 = r;', 'else if (f2 * f3 < 0)', 'l1 = r;', 'count++;', 'printf ("" \\n The approximation of the root is: %lf \\n "", r);', 'return 0;', '/* program to get the roots of the given equation using the do while loop in C. */', '#include', '#include', '#include', '#include', 'double f (double a)', 'return 3 * a + sin (a) - exp (a);', 'int main ()', 'double x, y, z, eps;', 'int count; // integer data type', 'x:printf ("" \\n Input the initial approximation for x: \\n "");', 'scanf ("" %lf"", &x);', 'printf ("" Input the initial approximation for y: \\n "");', 'scanf ("" %lf"", &y);', 'printf ("" Define the input accuracy: \\n "");', 'scanf ("" %lf"", &eps);', 'printf ("" Input the maximum number of iteration: \\n "");', 'scanf ("" %d"", &count);', 'if (f(x) * f(y) <= 0)', 'int iter = 1; // initialize iter to 1', 'printf ("" Iteration \\t x \\t \\ty \\t\\tz \\t\\tf(z) \\t |x - y| \\n "");', 'z = (x + y) / 2; // get the mid value for z', 'printf ("" %d \\t %lf \\t %lf \\t %lf \\t %lf \\t %lf \\n"", iter, x, y, z, f(z), fabs(x - y));', 'if (f(x) * f(z) > 0)', 'x = z; // assign the value of z to x', 'else if (f(x) * f(z) < 0)', 'y = z; // assign the value of z to y', 'iter++; // increment counter by 1', 'while (fabs (x - y) >= eps && iter <= count);', 'printf ("" \\nThe root of the given equation is: %lf"", z);', 'printf ("" \\n The root doesn\'t exist in the given interval. "");', 'goto x;']","['Enter the first starting point: 5', 'Enter the second ending point: 9', 'Enter the maximum iteration to be allowed: 8', 'Input the no. of allowed error point: 0.02', 'Iteration\t1:\t7.000000', 'Iteration\t1: \t8.000000', 'Iteration\t2: \t8.500000', 'Iteration\t3: \t8.750000', 'Iteration\t4: \t8.875000', 'Iteration\t5: \t8.937500', 'Iteration\t6: \t8.968750', 'Iteration\t7: \t8.984375', 'The approximation root is: 8.984375', 'Display the real roots of the given equation using the Bisection method:', 'X ^ 3 + 3 * x - 5 = 0', 'Enter the first approximation of the root: 1', 'Enter the second approximation of the root: 5', 'Input the number of iteration you want to perform: 7', 'The root after 1 iterations is 3.000000', 'The root after 2 iterations is 2.000000.', 'The root after 3 iterations is 1.500000.', 'The root after 4 iterations is 1.250000.', 'The root after 5 iterations is 1.125000.', 'The root after 6 iterations is 1.187500.', 'The root after 7 iterations is 1.156250.', 'The approximation root is 1.156250', 'Input the initial approximation for x:', '1', 'Input the initial approximation for y:', '3', 'Define the input accuracy:', '.002', 'Input the maximum number of iteration:', '10', 'Iteration \t x \t \ty \t\tz \t\tf(z) \t |x - y|', '1 \t 1.000000 \t 3.000000 \t 2.000000 \t -0.479759 \t 2.000000', '2 \t 1.000000 \t 2.000000 \t 1.500000 \t 1.015806 \t 1.000000', '3 \t 1.500000 \t 2.000000 \t 1.750000 \t 0.479383 \t 0.500000', '4 \t 1.750000 \t 2.000000 \t 1.875000 \t 0.058267 \t 0.250000', '5 \t 1.875000 \t 2.000000 \t 1.937500 \t -0.195362 \t 0.125000', '6 \t 1.875000 \t 1.937500 \t 1.906250 \t -0.064801 \t 0.062500', '7 \t 1.875000 \t 1.906250 \t 1.890625 \t -0.002343 \t 0.031250', '8 \t 1.875000 \t 1.890625 \t 1.882812 \t 0.028192 \t 0.015625', '9 \t 1.882812 \t 1.890625 \t 1.886719 \t 0.012982 \t 0.007812', '10 \t 1.886719 \t 1.890625 \t 1.888672 \t 0.005334 \t 0.003906', '', 'The root of the given equation is: 1.888672']",[],"[""|||Start the program.|||Input two initial guesses x1 and x2. The 'e' is the absolute error to get the desired degree of accuracy.|||Compute the function value: f1 = f(x1) and f2 = f(x2)|||Now compare the product of f1 and f2 with 0, as||||||The Bisection method is guaranteed to the convergence of real roots.|||It reduces the chances of error in the non-linear equation.|||It evaluates one function at each iteration.|||It usually convergence in a linear fashion.|||We can control the error by increasing the number of iterations that return a more accurate root in the bisection method.|||It does not involve complex calculations to get the root.|||The bisection method is faster in the case of multiple roots.||||||In the Bisection method, the convergence is very slow as compared to other iterative methods.|||The rate of approximation of convergence in the bisection method is 0.5.|||It is a linear rate of convergence.|||It fails to get the complex root.|||It cannot be applied if there are any discontinuity occurrs in the guess interval.|||It is unable to find the root for some equations. For example, f(x) = x2 as there are no bracketing or bisect values.|||It cannot be used over an interval when the function takes the same sign values.|||""]"
209,['snprintf() function in C'],"['In this section, we will discuss the snprintf() function in the C programming language. The snprintf is a predefined library function of the stdio.h header file, which redirects the output of the standard printf() function to other buffers.']","['https://www.javatpoint.com/remove-an-element-from-an-array-in-c', 'https://www.javatpoint.com/bisection-method-in-c', 'https://www.javatpoint.com/remove-an-element-from-an-array-in-c', 'https://www.javatpoint.com/bisection-method-in-c', 'https://www.javatpoint.com/remove-an-element-from-an-array-in-c']",['https://static.javatpoint.com/cpages/images/snprintf-function-in-c.png'],[],[],"['Syntax of the snprintf() function in C', 'Parameters:', 'Return Values:']","['Note: The snprintf() function inserts a null character to the end of the resulting output that is also counted as the size of the buffer. Furthermore, the buffer is an array that stores only character type elements, not in the string type.']","['Following is the syntax of the snprintf() function in the c programming language.', 'str: It is a character type array buffer.', 'size: it defines the maximum number of characters that can store in the buffer.', '…: It is an optional (…) parameter or argument.', 'Example 1: Program to demonstrate the snprintf() function in C', ""Let's create a program to check the buffer size and return the number of character enter to the buffer using the snprintf() function in C."", 'When we execute the above program, it produces the given output on the console screen.', '2nd execution', 'Example 2: Program to use the snprintf() function in C', ""Let's create an example to insert the character to the buffer and return from the same using the snprintf() function in C programming language."", 'When we execute the above program, it produces the given output on the console screen.', '2nd execution']","['The snprintf function also returns the number of characters that are inserted or written to the buffer. However, these characters are returned or displayed by the printf() function in the print statement or characters in the stdout header file.', 'format: In C language, the string defines a format that contains the same type of specifications as the printf() function defines in the stdio.h header file.', 'Now we reduce the max input character from 34 to 14, and this time, it returns a negative number, indicating the buffer size is less than the given string.', 'When we define the buf_size as 35, the given statement is automatically truncated by the snprintf() function that returns a negative number (-1) and displays ""Buffer is not completely filled or written"".']","[""The snprint() function is used to format the given strings into a series of characters or values in the buffer area. The snprintf() function contains an 'n' argument representing the maximum number of characters, including the null character, stored in the buffer area."", 'The snprintf() function returns the number of characters or values that have been written or stored for a sufficiently large buffer without including the null terminating character. And if the written characters are larger than the buffer size, it returns a negative value. And if the buffer size is too small, the given string will be truncated or reduced to the buffer size.', 'In the above program, we declared the character type buffer buf[200], and the buf_size variable can insert the maximum characters is 55. If the given statement is in the defined range, the snprintf() function returns the total no. of characters read from the buffer. ']","['int snprintf (char *str, size_t size, const char *format, ?);', '/* create an example to use the snprintf function in c. */', '#include', '#include', 'int main ()', 'char *r = ""Javatpoint.com"";', 'char buf[100]; // define the size of character type buffer', '/* use the snprintf() function to return the no. of character founded in the buffer area */', 'int n = snprintf (buf, 34, ""%s \\n"", r); // 34 represents the size of buffer to store max characters', 'printf ("" The given string is: %s \\n Count the stored character: %d \\n"", buf, n);', 'return 0;', '#include', '#include', 'int main ()', 'char buf[200]; // define the size of character type buffer', 'int ret_val, buf_size = 55;', 'char name[] = ""David""; // define string', 'int age = 19;', 'ret_val = snprintf (buf, buf_size, ""Hello friend, My name is %s, and I am %d years old."", name, age);', '/* check ret_value should be greater than 0 and less than the size of the buffer (buf_size). */', 'if ( ret_val > 0 && ret_val < buf_size)', 'printf ("" Buffer is written successfully! \\n "");', 'printf ("" %s\\n"", buf);', 'printf ("" No. of characters read: %d"", ret_val);', 'printf ("" Buffer is not completely filled or written. \\n "");', 'printf ("" %s \\n"", buf);', 'printf ("" The return value: %d"", ret_val);', 'return 0;']","['The given string is: Javatpoint.com', 'Count the stored character: 16', 'The given string is: Javatpoint.com', 'Count the stored character: -1', 'Buffer is written successfully!', 'Hello friend, My name is David, and I am 19 years old.', 'No. of characters read: 53', 'Buffer is not completely filled or written.', 'Hello friend, My name is David and', 'The return value: -1']",[],[]
210,['Remove an element from an array in C'],"['In this topic, we will learn how to delete or remove a particular element from an array in the C programming language. An array is the collection of the same data type elements or items stored in a contiguous memory block. In C programming, an array is derived data that stores primitive data type values like int, char, float, etc.']","['https://www.javatpoint.com/square-root-in-c', 'https://www.javatpoint.com/snprintf-function-in-c', 'https://www.javatpoint.com/square-root-in-c', 'https://www.javatpoint.com/snprintf-function-in-c', 'https://www.javatpoint.com/square-root-in-c']",['https://static.javatpoint.com/cpages/images/remove-an-element-from-an-array-in-c.png'],[],[],"['Steps to remove an element from an array', 'Example 1: Program to remove an element from an array using for loop', 'Example 2: Program to remove the specific character from an array using for loop', 'Example 3: Program to delete a particular element from an array using the user-defined function', 'Example 4: Program to remove the specific element from an array using the pointers']",[],"['Following is the steps to remove a particular element from an array in C programming.', 'Step 1: Input the size of the array arr[] using num, and then declare the pos variable to define the position, and i represent the counter value.', 'Step 2: Use a loop to insert the elements in an array until (i < num) is satisfied.', 'Step 3: Now, input the position of the particular element that the user or programmer wants to delete from an array.', ""Step 5: Else removes the particular element and shift the rest elements' position to the left side in an array."", 'Step 6: Display the resultant array after deletion or removal of the element from an array.', 'Step 7: Terminate or exit from the program.', ""Let's create a program to delete an element from an array using for loop in the C programming language."", ""Let's consider an example to delete the particular position of the defined character from an array using for loop in the C programming language."", ""Let's consider an example to demonstrate the deletion of the particular element using the user defined function in the C programming language.""]","['Step 4: Compare the position of an element (pos) from the total no. of elements (num+1). If the pos is greater than the num+1, the deletion of the element is not possible and jump to step 7.', ""Let's consider an example of deleting the particular element from an array using the pointers and the user defined function in the C programming language.""]","[""To delete a specific element from an array, a user must define the position from which the array's element should be removed. The deletion of the element does not affect the size of an array. Furthermore, we should also check whether the deletion is possible or not in an array."", 'For example, suppose an array contains seven elements, arr[] = {10, 25, 14, 8, 12, 15, 5); and the user want to delete element 8. So, first, the user must define the position of the 8th element, which is the 4th, and then check whether the deletion is possible or not. The position of the particular element should not be more than the total elements of an array. Here, we have 7 elements in an array, and the user wants to delete the 8th position element, which is impossible.', 'In the above program, we input 8 elements for an array arr[] from the user. After that, the user enters the position of the particular element is 5. And then, we checked the defined position by the If statement (if (pos > num + 1)); Here, 5 is less than the (num+1). So the condition is false, and it executes the else block to remove the 5th position of the element is 10 using for loop and then prints the resultant array.']","['/* program to remove the specific elements from an array in C. */', '#include', '#include', 'int main ()', 'int arr[50];', 'int pos, i, num; // declare int type variable', 'printf ("" \\n Enter the number of elements in an array: \\n "");', 'scanf ("" %d"", #);', 'printf ("" \\n Enter %d elements in array: \\n "", num);', 'for (i = 0; i < num; i++ )', '{\tprintf ("" arr[%d] = "", i);', 'scanf ("" %d"", &arr[i]);', 'printf( "" Define the position of the array element where you want to delete: \\n "");', 'scanf ("" %d"", &pos);', 'if (pos >= num+1)', 'printf ("" \\n Deletion is not possible in the array."");', 'for (i = pos - 1; i < num -1; i++)', 'arr[i] = arr[i+1]; // assign arr[i+1] to arr[i]', 'printf ("" \\n The resultant array is: \\n"");', 'for (i = 0; i< num - 1; i++)', 'printf ("" arr[%d] = "", i);', 'printf ("" %d \\n"", arr[i]);', 'return 0;', '/* program to remove the specific elements from an array in C. */', '#include', '#include', 'int main ()', 'int arr[50];', 'int pos, i, num; // declare int type variable', 'printf ("" \\n Enter the number of elements in an array: \\n "");', 'scanf ("" %d"", #);', 'printf ("" \\n Enter %d elements in array: \\n "", num);', 'for (i = 0; i < num; i++ )', '{\tprintf ("" arr[%d] = "", i);', 'scanf ("" %c"", &arr[i]);', 'printf( "" Define the position of the array element where you want to delete: \\n "");', 'scanf ("" %d"", &pos);', 'if (pos >= num+1)', 'printf ("" \\n Deletion is not possible in the array."");', 'for (i = pos - 1; i < num -1; i++)', 'arr[i] = arr[i+1]; // assign arr[i+1] to arr[i]', 'printf ("" \\n The resultant array is: \\n"");', 'for (i = 0; i< num - 1; i++)', 'printf ("" arr[%d] = "", i);', 'printf ("" %c \\n"", arr[i]);', 'return 0;', '/* program to delete a particular element from an array using user defined function in c. */', '#include', '#include', 'addElement (int *arr, int num, int pos)', 'int i;', 'for (i = pos-1; i < num - 1; i++)', 'arr[i] = arr[i+1]; //', 'disp( int arr[], int num)', 'int i;', 'for ( i = 0; i < num; i++)', 'printf( ""\\n arr[%d] = %d"", i, arr[i]);', 'int main ()', 'int arr[100];', 'int i, num, pos, result;', 'printf ("" Enter the size of the array: "");', 'scanf ("" %d"", #);', 'printf ("" \\n Enter the %d elements in an array: \\n"", num);', 'for (i = 0; i < num; i++)', 'printf ("" arr[%d] = "", i);', 'scanf ("" %d"", &arr[i]);', 'printf ("" Enter the position of the element you want to delete from an array: "");', 'scanf ("" %d"", &pos);', 'if (pos <= num && pos > 0)', 'printf ("" Array before deletion: \\n"");', 'disp (arr, num);', 'addElement(arr, num, pos);', 'printf ("" \\n Array after deletion: \\n"");', 'disp( arr, num-1);', 'return 0;', '/* create a program to delete a specific element from an array using pointers in C. */', '#include', '#include', 'void del (int num, int *arr, int index);', 'int main ()', 'int *arr, num, i, index;', 'printf ("" Define the size of the array: "");', 'scanf ("" %d"", #);', 'arr = (int *) malloc (sizeof(int) *num);', 'printf ("" \\n Enter %d elements in an array: "", num);', 'for (i = 0; i < num; i++)', 'printf ("" \\n arr[%d] = "", i);', 'scanf ("" %d"", (arr + i));', 'printf ("" Enter the position of the element to be deleted from an array: "");', 'scanf ("" %d"", &index);', 'del (num, arr, index); /* call delete function to delete the position of element and print the resultant array. */', 'return 0;', 'void del (int num, int *arr, int index)', 'int i, j;', 'if (index <= num)', 'for (i = index - 1; i < num; i++)', 'j = i + 1; // assign the elments to j', '*(arr + i) = *(arr + j);', 'printf ("" \\n The resultant array after deletion of the array elements are: \\n"");', 'for (i = 0; i < num - 1; i++)', 'printf ("" arr[%d] = %d \\n"", i, ( *(arr + i)));', 'printf ("" \\n Please enter correct position."");']","['Enter the number of elements in an array:', '8', 'Enter 8 elements in array:', 'arr[0] = 3', 'arr[1] = 6', 'arr[2] = 2', 'arr[3] = 15', 'arr[4] = 10', 'arr[5] = 5', 'arr[6] = 8', 'arr[7] = 12', 'Define the position of the array element where you want to delete:', '5', 'The resultant array is:', 'arr[0] = 3', 'arr[1] = 6', 'arr[2] = 2', 'arr[3] = 15', 'arr[4] = 5', 'arr[5] = 8', 'arr[6] = 12', 'Enter the number of elements in an array:', '8', 'Enter 8 elements in array:', 'arr[0] = a', 'arr[1] = b', 'arr[2] = f', 'arr[3] = h', 'arr[4] = e', 'arr[5] = k', 'arr[6] = w', 'arr[7] = p', 'Define the position of the array element where you want to delete:', '4', 'The resultant array is:', 'arr[0] = a', 'arr[1] = b', 'arr[2] = f', 'arr[3] = e', 'arr[4] = k', 'arr[5] = w', 'arr[6] = p', 'Enter the size of the array: 8', 'Enter the 8 elements in an array:', 'arr[0] = 2', 'arr[1] = 4', 'arr[2] = 6', 'arr[3] = 8', 'arr[4] = 10', 'arr[5] = 3', 'arr[6] = 9', 'arr[7] = 12', 'Enter the position of the element you want to delete from an array: 4', 'Array before deletion:', 'arr[0] = 2', 'arr[1] = 4', 'arr[2] = 6', 'arr[3] = 8', 'arr[4] = 10', 'arr[5] = 3', 'arr[6] = 9', 'arr[7] = 12', 'Array after deletion:', 'arr[0] = 2', 'arr[1] = 4', 'arr[2] = 6', 'arr[3] = 10', 'arr[4] = 3', 'arr[5] = 9', 'arr[6] = 12', 'Define the size of the array: 8', 'Enter 8 elements in an array:', 'arr[0] = 5', 'arr[1] = 10', 'arr[2] = 15', 'arr[3] = 20', 'arr[4] = 25', 'arr[5] = 30', 'arr[6] = 35', 'arr[7] = 40', 'Enter the position of the element to be deleted from an array: 4', 'The resultant array after deletion of the array elements are:', 'arr[0] = 5', 'arr[1] = 10', 'arr[2] = 15', 'arr[3] = 25', 'arr[4] = 30', 'arr[5] = 35', 'arr[6] = 40']",[],[]
211,['Square Root in C'],"['This section will discuss finding the square root of a given number using the sqrt() function in the C programming language. In mathematics, the square root of a number is just the reverse of squaring of that number. It means when the same is multiplied by itself to return the square of a number. And the single number multiplied by itself is called the square root of a number. For example, suppose we want to get the square of any number is 3, the number 3 is multiplied by itself as 3 * 3 to return the square 9. And the same number 3 is called the square root of the number 9. Similarly, we have a number 81, and the square root of that number is 9 (9 * 9 = 81).']","['https://www.javatpoint.com/isprint-function-in-c', 'https://www.javatpoint.com/remove-an-element-from-an-array-in-c', 'https://www.javatpoint.com/isprint-function-in-c', 'https://www.javatpoint.com/remove-an-element-from-an-array-in-c', 'https://www.javatpoint.com/isprint-function-in-c']",['https://static.javatpoint.com/cpages/images/square-root-in-c.png'],[],[],"['Example 1: Program to get the square root of a number using the sqrt() function', 'Example 2: Program to take a number from user and to get the square root', 'Example 3: Program to find the square root using user defined function', 'pow() function', 'Example 4: Program to get the square root of a number using the pow() function', 'Example 5: Program to get the square root of a number without using the sqrt() function']","['Note: We can find the square root of the int, float, double or long double data type number by explicitly converting the given data type to another.']","['Syntax of the sqrt() function', 'In the above syntax, the sqrt() function takes a single argument as double to return its square root in double data types.', 'arg: It is a double data type argument of the sqrt() function.', 'Return value: The sqrt function returns a square root of the given number in a defined double data type.', 'Algorithm to find the Square Root', ""Let's consider an example to calculate the square root of the given number using the sqrt() function in C."", ""Let's consider an example to print the square root of a number by taking an input from the user and then use the sqrt() function in C."", ""Let's create a program to get the square root of the given number using the user defined function in the C programming language."", 'The pow() is a pre-defined function of math.h header file for calculating the power of a given number.', 'Syntax of the pow() function', ""Let's consider an example to print the square root of a number using the pow() function in C."", ""Let's consider an example to print the square root of a number without using the pre-defined sqrt() function in C.""]","['The pow() function takes two arguments: the first argument defines a variable to obtain the power, or the square root of the given number, and 0.5 is a default argument that is equal to ½ or 1 / 2 = 0.5.', 'In the above program, we take the integer value of variable x is 1225 from the user and pass x as an argument to the pow() function to return the power or square root of the given number.']","['In C programming, the sqrt() function is a pre-defined library function used to calculate the square root of a number. The sqrt() function is defined in the math.h header file. So, we need to write the <math.h> header file while using the sqrt() function in C. Furthermore, we can find the square root of the given number without using the sqrt function.', 'In the above program, we input a number from the user which we find the square root. So, first, we divide the given number by 2 and store it in the sqrt variable. After that, we initialize temp with 0. And then use the while loop that continuously iterates and checks sqrt is not equal to the temp, and on each iteration, it assigns the sqrt value to temp, and the sqrt gets a new value by solving the logic (num/temp + temp) /2; And then prints the square root of 2 is 1.414214. ']","['double sqrt( double arg);', '#include', '#include', '#include', 'int main ()', 'int x, res;', 'float y, res1;', 'double z, res2;', 'x = 289;', 'res = sqrt(x);', 'printf ("" The square root of %d is: %d"", x, res);', 'y = 12.25;', 'res1 = sqrt(y);', 'printf ("" \\n The square root of %.2f is: %.2f"", y, res1);', 'z = 144.00;', 'res2 = sqrt(z);', 'printf ("" \\n The square root of %.2lf is: %.2lf"", z, res2);', 'return 0;', '#include', '#include', '#include', 'int main ()', 'int x;', 'double res;', 'printf ("" Enter any number to get the square root: "");', 'scanf ("" %d"", &x);', 'res = sqrt(x);', 'printf ("" \\n The square root of %d is: %.2lf"", x, res);', 'return 0;', '#include', '#include', '#include', 'double getSqr (int num);', 'int main ()', 'int x;', 'double res;', 'printf ("" Enter any number to get the square root: "");', 'scanf ("" %d"", &x);', 'res = getSqr(x); // call the function', 'printf ("" \\n The square root of %d is: %.2lf"", x, res);', 'return 0;', 'double getSqr ( int num)', 'double getRes;', 'getRes = sqrt (num);', 'return getRes;', 'int pow( arg, 0.5);', '#include', '#include', '#include', 'int main ()', 'int x;', 'double res;', 'printf ("" Enter any number to get the square root: "");', 'scanf ("" %d"", &x);', 'res = pow(x, 0.5); //it takes two argument: input variable and 0.5 is default value', 'printf ("" \\n The square root of %d is: %.2lf"", x, res);', 'return 0;', '/* Display the square root of a number without using the sqrt() function in C. */', '#include', '#include', 'int main()', 'int num;', 'float sqrt, temp;', 'printf ("" Enter a number to get the square root: "");', 'scanf ("" %d"", #);', 'sqrt = num / 2;', 'temp = 0;', 'while (sqrt != temp) // Initially temp is 0 and sqrt = num', 'temp = sqrt; // assign sqrt to temp', 'sqrt = ( num / temp + temp) / 2;', 'printf ("" \\n The square root of %d is %f"", num, sqrt);', 'return 0;']","['The square root of 289 is: 17', 'The square root of 12.25 is: 3.50', 'The square root of 144.00 is: 12.00', 'Enter any number to get the square root: 625', 'The square root of 625 is: 25.00', 'Enter any number to get the square root: 87', 'The square root of 87 is: 9.33', 'Enter any number to get the square root: 1225', 'The square root of 1225 is: 35.00', 'Enter a number to get the square root: 2', 'The square root of 2 is 1.414214']",[],"['|||Declare an integer variable, as num.|||Use the sqrt() function to pass the num variable as an argument to find the square root.|||Print the result.|||Exit or terminate the program.|||']"
212,['isprint() function in C'],"['This section will discuss the isprint() function in the C programming language. The isprint() function is a predefined library function of the C language, which is used to check whether the input character is a printable character on the screen (including the space character) or not. It is defined in the ctype.h header file. So, we must add the ctype.h header file while writing a program in the C language. ']","['https://www.javatpoint.com/isdigit-function-in-c', 'https://www.javatpoint.com/square-root-in-c', 'https://www.javatpoint.com/isdigit-function-in-c', 'https://www.javatpoint.com/square-root-in-c', 'https://www.javatpoint.com/isdigit-function-in-c']",['https://static.javatpoint.com/cpages/images/isprint-function-in-c.png'],[],[],['Syntax of the isprint() function'],[],"['Following is the syntax of the isprint() function in the C language, as follows:', 'Parameter:', 'c: It indicates the character type value is passed to the isprint() function.', 'Return Value:', 'The isprint() function checks the passed argument, and if the character is printable, it returns a non-zero value. Otherwise, it returns zeroes.', 'Example 1: Program to find the printable character using the isprint() function ', ""Let's write a simple program to find the printable character on the screen using the isprint() function in the C language."", 'Example 2: Program to take a character from user and check whether the character is printable or not', ""Let's write a program to get a character from the user and display it using the isprint() function in the C language."", '2nd execution:', 'Example 3: Program to check the printable string using the isprint() function and while loop', ""Let's write an example to print the printable string characters using the while loop and isprint() function in C."", 'Example 4: Program to find all printable characters in C using the isprint() function ', ""Let's create a program to find the complete lists of printable characters in the C programming language."", 'Example 5: Program to print all printable characters of the array using the isprint() function', ""Let's create a program to print all character type array elements using the isprint() function in the C programming language.""]","['This function takes a character type argument from the user and validates whether the character is printable. If the passed character is printable, the function returns a positive non-zero value; else, it shows zero (0).', ""In the above program, we input character 'j' from the user and then use the isprint() function to validate the printable character that returns 'j' is a correct printable character.""]","[""For example, suppose the user enters the 'g' character as an argument to the isprint() function; the function checks the input character is printable or not. And if yes, it returns a non-zero value. Similarly, if we input a new line (\\n) or tab (\\t) character to the isprint function, it returns zero because it is not a printable character."", 'In the above program, we have defined various characters (\'b\', \'@\', \' \', \'%\', the new line (\\n), and the \'\\t\' (tab space)) to check the printable character. And then, the isprint() function check and print the only printable character, and if any character is not printable, it returns ""%c is not printable character"".', ""Similarly, we take another character or digit '8' from the user, and then the isprint() function checks the given printable character. After that, the isprint() function print '8' is a correct printable character. And if enter new line (\\n) or \\t, the isprint() function returns %c is not a printable character."", 'In the above program, we declare a character string ""Ab. \\n2 \\t*."" and then check whether the given string is printable or not using the isprint() function. So, first, we use a while loop that iterates each character of the string till the string is not equal to null. Inside the while loop, condition check and print each valid character using the isprint() function, including the white space. And if the character is not printable, it prints "" It is not a printable character."".']","['int isprint (char c);', '/* program to check the printable character using the isprint() function in C. */', '#include', '#include', '#include', 'int main ()', ""int ch1 = 'b';"", ""int ch2 = '@';"", ""int ch3 = ' ';"", ""int ch4 = '%';"", ""int ch5 = '\\n';"", ""int ch6 = '\\t';"", '/* use isprint () function to check the printable character. */', 'if ( isprint (ch1) )', 'printf ("" \'%c\' is a printable character. \\n"", ch1);', 'printf (""\'%c\' is not a printable character. \\n"", ch1);', 'if ( isprint (ch2) )', 'printf ("" \'%c\' is a printable character. \\n"", ch2);', 'printf (""\'%c\' is not a printable character. \\n"", ch2);', 'if ( isprint (ch3) )', 'printf ("" \'%c\' is a printable character. \\n"", ch3);', 'printf (""\'%c\' is not a printable character. \\n"", ch3);', 'if ( isprint (ch4) )', 'printf ("" \'%c\' is a printable character. \\n"", ch4);', 'printf (""\'%c\' is not a printable character. \\n"", ch4);', 'if ( isprint (ch5) )', 'printf ("" \'%c\' is a printable character. \\n"", ch5);', 'printf (""\'%c\' is not a printable character. \\n"", ch5);', 'if ( isprint (ch6) )', 'printf ("" \'%c\' is a printable character. \\n"", ch6);', 'printf (""\'%c\' is not a printable character. \\n"", ch6);', 'return 0;', '#include', '#include', 'int main ()', 'char c;', 'printf ("" \\n Input a printable character: "");', 'scanf ("" %c"", &c); // get a character', '/* use the isprint() function to print only printable character */', 'if (isprint (c))', 'printf ("" \\n \'%c\' is a correct printable character. "", c);', 'printf ("" \\n \'%c\' is not a printable character. "", c);', 'printf ("" \\n Input only printable character. "" );', 'return 0;', '#include', '#include', 'int main ()', 'char str[] = ""Zb. \\n2 \\t*."";', 'int i = 0;', ""while (str[i] != '\\0')"", '/* use the isprint() function to check the valid printable string character */', 'if (isprint (str[i]))', 'printf ("" \\n \'%c\' is a printable character. "", str[i]);', 'printf ("" \\n %c is not a printable character. "", str[i]);', 'return 0;', '#include', '#include', '#include', 'int main ()', 'int i = 0;', 'int count = 0; // count printable characters', 'while ( i < 256)', 'if ( isprint(i) != 0)', 'printf ("" %c"", i); // it prints only printable character', '++count; // count total printable character and update the count by 1', '++i;', 'printf ("" \\n There are total %d printable characters. \\n"", count);', 'getch();', '#include', '#include', '#include', 'int main()', ""char str[8] = {'G', '&', ' ', '6', '\\n', 'e',  '!', '\\t'};"", 'int arr[8] = {0, 0, 0, 0, 0, 0, 0};', ""int i; // declare 'i' as int type variable"", 'for (i = 0; i < 8; i++)', 'arr[i] = isprint (str[i]); /* the isprint() function check printable character and assign character to arr[i] */', 'for (i = 0; i < 8; i++)', 'printf( ""\\n \'%c\'"", str[i]);', 'if (arr[i] != 0)', 'printf( "" is a printable character. "");', 'else', 'printf( "" is NOT a printable character. "");', 'return 0;']","[""'b' is a printable character."", ""'@' is a printable character."", ""' ' is a printable character."", ""'%' is a printable character."", ""' ' is not a printable character."", ""'\t' is not a printable character."", 'Input a printable character: j', ""'j' is a correct printable character."", 'Input a printable character: 8', ""'8' is a correct printable character."", ""'Z' is a printable character."", ""'b' is a printable character."", ""'.' is a printable character."", 'is not a printable character.', ""'2' is a printable character."", ""' ' is a printable character."", 'is not a printable character.', ""'*' is a printable character."", ""'.' is a printable character."", '! "" # $ % & \' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~', 'There are total 95 printable characters.', ""'G' is a printable character."", ""'&' is a printable character."", ""' ' is a printable character."", ""'6' is a printable character."", ""'"", ""' is NOT a printable character."", ""'e' is a printable character."", ""'!' is a printable character."", ""'\t' is NOT a printable character.""]",[],[]
213,['isdigit() function in C'],"['This topic will discuss the isdigit() function in the C language. The isdigit() function is a predefined function of the C library, which is used to check whether the character is a numeric character from 0 to 9 or not. And if the given character is a numeric number or digit, it returns a true Boolean value or non-zero; else, it returns zero or false value. The isdigit function is declared inside the ctype.h header file, so we must add to the C program.']","['https://www.javatpoint.com/isgraph-function-in-c', 'https://www.javatpoint.com/isprint-function-in-c', 'https://www.javatpoint.com/isgraph-function-in-c', 'https://www.javatpoint.com/isprint-function-in-c', 'https://www.javatpoint.com/isgraph-function-in-c']",[],[],[],"['Syntax of the isdigit() function', 'Parameters:', 'Return Value:', 'Example 1: Program to check whether the given character is digit or not', 'Example 2: Program to check whether the character entered by the user is a digit or not', 'Example 3: Program to print zero and non-zero numbers for passed character in C', 'Example 4: Program to check all the array elements using the isdigit() function']",[],"['Following is the syntax of the isdigit() function in the C language.', 'Ch - It defines the numeric character to be passed in the isdigit() function.', ""Let's create a program to check the given characters are digit or not using the isdigit() function in the C programming."", ""Let's write a program to find whether the input character is valid or not using the isdigit() function in C."", '2nd execution', ""Let's write a program to find all the valid digits of the array element using the isdigit() function in C.""]","[""The isdigit() function checks the 'ch' argument, and if the passed character is a digit, it returns a non-zero value. Otherwise, it shows a zero or false Boolean value."", 'In the above program, we input the \'5\' character from the user and then use the isdigit function to check whether the passed argument is a digit. Here, the passed character is a digit, so the isdigit() function returns the statement ""It is a digit.""', ""Similarly, when we enter character 'A' to the isdigit() function, the function checks for the valid character, and we can see character 'A' is not a digit. So, the function returns the statement 'It is not a digit.'"", ""Let's write a program to check all given characters and returns zeroes and non-zeroes values based on the passed characters to the isdigit() function in C."", 'In the above program, we tests for valid given digit characters using the isdigit() function. The isdigit() function returns 1 to the numeric characters and 0 to the alphabetic or special symbols defined in the program that are not digits.']","[""For example, suppose we enter character 'h' to the isdigit() function; the function checks whether the input character is a digit or not. Here the character is not a digit. So the isdigit() function returns zero (0) or false value. Similarly, we again enter numeric character '5' to the isdigit() function. This time, the function returns a true or non-zero value because '5' is a numeric characte from 0 to 9 digits."", ""In the above program, we defined different characters like 'P', '3', '!', '$4', 0 to check whether these are valid characters or not using the isdigit() function. And then, we use the isdigit() function that checks and returns the characters 'P', '1', $4 are not digits."", 'We declared and initialized the arr[] variable with some elements in the above program. And then, we create another array arr2[] that contains zero (0) to assign the result to those elements that are not valid digits. The isdigit() function checks all the arr[] array elements and returns non-zero values to the valid digit elements. Else it returns zeroes (0) to non-digit elements.']","['int isdigit (int ch);', '/* Check whether the given characters are digits or not in C. */', '#include', '#include', 'int main ()', ""if (isdigit ( 'P' ) == 0)  //check 'P' is digit"", 'printf ("" \\n The given character \'P\' is not digit\'. "");', 'printf (""\\n The given character \'P\' is a digit. "");', ""if (isdigit ( '3' ) == 0)  //check for '3'"", 'printf ("" \\n The given character \'3\' is not digit\'. "");', 'printf (""\\n The given character \'3\' is a digit. "");', ""if (isdigit ( '!' ) == 0)  //check for '!' character"", 'printf ("" \\n The given character \'!\' is not digit\'. "");', 'printf (""\\n The given character \'!\' is a digit. "");', ""if (isdigit ( '$4' ) == 0)  //check for '44'"", 'printf ("" \\n The given character \'$4\' is not digit\'. "");', 'printf (""\\n The given character \'$4\' is a digit. "");', ""if (isdigit ( '0' ) == 0)  //check for '0'"", 'printf ("" \\n The given character \'0\' is not a digit. "");', 'printf (""\\n The given character \'0\' is a digit. "");', 'return 0;', '/* Check whether the given characters are digits or not in C. */', '#include', '#include', 'int main ()', 'char n; // declare an integer type variable n', 'printf ("" Enter a number to check for valid digits: "");', 'scanf (""%c"", &n);', 'if (isdigit (n))', 'printf ("" \\n It is a digit. "");', 'printf ("" \\n It is not a digit. "");', 'return 0;', '/* create a simple program to return zeroes and non-zeroes values based on the given characters. */', '#include', '#include', 'int main ()', 'char num; // declare num as the character type variable', ""num = '0';"", 'printf ("" \\n The isdigit() function returns result based on character (0) passed: %d "", isdigit (num));', ""num = 'o';"", 'printf ("" \\n The isdigit() function returns result based on character (o) passed: %d "", isdigit (num));', ""num = '08';"", 'printf ("" \\n The isdigit() function returns result based on character (08) passed: %d "", isdigit (num));', ""num = '+';"", 'printf ("" \\n The isdigit() function returns result based on character (+) passed: %d "", isdigit (num));', ""num = '%';"", 'printf ("" \\n The isdigit() function returns result based on character (\'%\') passed: %d "", isdigit (num));', 'return 0;', '#include', '#include', '#include', 'int main ()', 'int i;', ""char arr[8] = {'E', '08', '@', '-', '3', '/', '007', '$'};"", 'int arr2[8] = {0, 0, 0, 0, 0, 0, 0, 0}; // initialize arr2 with containing all zeroes element', 'for (i = 0; i < 8; i++)', 'arr2[i] = isdigit (arr[i]);', 'for (i = 0; i < 8; i++)', 'printf ("" \\n \'%c\'"", arr[i]);', 'if (arr2[i] != 0)', 'printf ("" is a digit character. "");', 'printf ("" is not a valid digit character. "");', 'return 0;']","[""The given character 'P' is not a digit."", ""The given character '3' is a digit."", ""The given character '!' is not a digit."", ""The given character '$4' is not a digit."", ""The given character '0' is not a digit."", 'Enter a number to check for valid digits: 5', 'It is a digit.', 'Enter a number to check for valid digits: A', 'It is not a digit.', 'The isdigit() function returns result based on character (0) passed: 1', 'The isdigit() function returns result based on character (o) passed: 0', 'The isdigit() function returns result based on character (08) passed: 1', 'The isdigit() function returns result based on character (+) passed: 0', 'The isdigit() function returns result based on character (%) passed: 0', ""'E' is not a valid digit character."", ""'8' is a digit character."", ""'@' is not a valid digit character."", ""'-' is not a valid digit character."", ""'3' is a digit character."", ""'/' is not a valid digit character."", ""'7' is a digit character."", ""'$' is not a valid digit character.""]",[],[]
214,['isgraph() function in C'],['This topic will discuss the isgraph() function in the C programming language. The isgraph() function in C programming is used to check whether a character is a graphic character or not.'],"['https://www.javatpoint.com/logical-not-operator-in-c', 'https://www.javatpoint.com/isdigit-function-in-c', 'https://www.javatpoint.com/logical-not-operator-in-c', 'https://www.javatpoint.com/isdigit-function-in-c', 'https://www.javatpoint.com/logical-not-operator-in-c']",['https://static.javatpoint.com/cpages/images/isgraph-function-in-c.png'],[],[],"['Syntax of the isgraph() function', 'Parameter:', 'Return Value:', 'Example 1: Program to check whether the passed character is the graphical characters', 'Example 2: Program to take an input from the user to validate the graphical character', 'Example 3: Program to print all graphical characters in C']",[],"['The following is the syntax of the isgraph() function in C.', 'Here, the isgraph() function contains one argument to check valid graphical characters.', ""C - The 'c' variable represents the character passed in the isdigit() function."", ""Let's write a simple program to check whether the given characters are the graphical characters in the C language."", ""Let's write the C program to input and validate the graphical character using the isgraph() function."", '2nd execution:', ""Let's write a simple program to check and display all the existing graphical characters in the C programming language.""]","['The isgraph() function determines whether the passed character is a graphic character and if yes, the function returns a non-zero value or returns zero value.', 'Here, the character \'*\' is passed as an argument to the isgraph() function for printing the graphical character. And if the given character is a graphical character, the function shows ""* is a graphical character"".']","[""The graphic characters are those graphical representation characters used to display or print characters on the screen. It means the graphical character prints passed characters without displaying whitespace, newline, and new tab characters like (' '), '\\n', '\\t', which is not considered as the isgraph() characters."", 'The isgraph() function is declared in the ctype.h header file. If the passed character is a graphical character, the isgraph() function returns a non-zero value. And if the given character is not the graphical or printable character, the function returns a zero value.', ""For example, suppose we enter characters 'u', 6, / to the isgraph function and then function check whether the input character is graphical or not. Here we pass different characters that return a non-zero value. Similarly, we passed the white space (' ') character to the isgraph() function that returns zero value."", ""In the above program, we input 5 from the user to check whether the passed character is a graphical character. If the 5 is a graphical character, it displays '5 is a graphical character'. So, we use the isgraph() function takes 5 as an argument to validate the graphical character."", 'Similarly, when we pass the white space (\'\') or newline (\\n) character to the isgraph() function for validating the graphical character. Here, the \'\' white space or new line is not a graphical function, so the isgraph() returns ""It is not a graphical character"".', ""In the above program, we use the isgraph() function to print all the graphical characters available in the C library. So, we declared and initialized the integer variables 'i' and 'count' with 0 to print and count the valid graphical characters in C. The while loop continuously iterates and prints the graphical character till (i < 257) condition is satisfied. And finally, it prints the total valid graphical characters.""]","['int isgraph( int c);', '#include', '#include', '#include', 'int main ()', '/* use the isgraph () function to check the graphical character. */', ""if ( isgraph ('@') )"", 'printf ("" It is a graphical character. \\n"" );', 'printf ("" It is not a graphical character. \\n"");', ""if ( isgraph ('\\n' ))"", 'printf ("" It is a graphical character. \\n"" );', 'printf ("" It is not a graphical character. \\n"");', ""if ( isgraph ('Ch') )"", 'printf ("" It is a graphical character. \\n"" );', 'printf ("" It is not a graphical character. \\n"");', ""if ( isgraph ('\\t' ))"", 'printf ("" It is a graphical character. \\n"" );', 'printf ("" It is not a graphical character. \\n"");', ""if ( isgraph ('#') )"", 'printf ("" It is a graphical character. \\n"" );', 'printf ("" It is not a graphical character. \\n"");', ""if ( isgraph ( ' ') )"", 'printf ("" It is a graphical character. \\n"" );', 'printf ("" It is not a graphical character. \\n"");', 'return 0;', '/* input a number from the user to display graphical characters. */', '#include', '#include', 'int main ()', 'char c;', 'printf ("" \\n Enter the graphical character: "");', 'scanf ("" %c"", &c); // get a graphical character', '/* use the isgraph() function to check graphical characters */', 'if (isgraph (c))', 'printf ("" \\n \'%c\' is a graphical character. "", c);', 'printf ("" \\n \'%c\' is not the graphical character. "", c);', 'printf ("" \\n Please, enter only graphical character. "" );', 'return 0;', '#include', '#include', '#include', 'int main ()', 'int i = 0;', 'int count = 0; // it counts the total graphical characters', 'while ( i < 256)', 'if ( isgraph(i) != 0)', 'printf ("" %c"", i); // It only print the graphical characters', '++count; // update the count by 1', '++i; // increment i by 1', 'printf ("" \\n There are total %d valid graphical characters. \\n"", count);', 'getch();']","['It is a graphical character.', 'It is not a graphical character.', 'It is a graphical character.', 'It is not a graphical character.', 'It is a graphical character.', 'It is not a graphical character.', 'Enter the graphical character: 5', ""'5' is a graphical character."", 'Enter the graphical character: *', ""'*' is a graphical character."", '! "" # $ % & \' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~', 'There are total 94 valid graphical characters.']",[],[]
215,['Logical NOT (!) Operator in C'],"['This section will discuss the logical NOT (!) operator in the C programming language. As we already know, the logical operator is used to perform the logical operation by combining two or more conditions on the given expressions. If the logical conditions of the operands are true, the operator returns true Boolean values or 1. Otherwise, it returns a false Boolean value or 0. The logical operators are classified into three parts: Logical AND, Logical OR, and Logical NOT operators.']","['https://www.javatpoint.com/self-referential-structure', 'https://www.javatpoint.com/isgraph-function-in-c', 'https://www.javatpoint.com/self-referential-structure', 'https://www.javatpoint.com/isgraph-function-in-c', 'https://www.javatpoint.com/self-referential-structure']",['https://static.javatpoint.com/cpages/images/logical-not-operator-in-c.png'],[],[],"['Logical NOT operator', 'The truth table of the logical NOT operator:', 'Example 1: Program to use the logical NOT operator in C', 'Example 2: Program to input a number to perform the logical NOT operator', 'Example 3: Program to find the leap year using the logical AND (&&), OR (||), and NOT (!) operator']",[],"['Syntax of the logical NOT operator', ""Here, the '!' symbol represents the logical NOT operator, which inverses the result of the given condition."", 'Following is the truth table of the logical not operator in C', ""Let's create a simple program to reverse the given condition of the operands in the C programming language."", ""Let's create a simple program to get the reverse result of an integer number using the logical NOT (!) operator in the C programming language."", '2nd execution:', 'Similarly, we input zero (0) from the user and use the logical NOT (!) operator to reverse the value of x to a non-zero value, which is 1.', 'In the above program, we enter 2020 and then check the given year by defining the if...else statement. In this statement, we defined two conditions;', '2nd execution:', 'Example 4: Program to check different conditions using the AND, OR, and the NOT logical operator', ""Let's write a program to demonstrate the multiple conditions of the given operands using the AND, OR, and the NOT logical operator in C.""]","['For example, suppose the user enters a non-zero value is 5, the logical NOT (!) operator returns the 0 or false Boolean value. And if the user enters a zero (0) value, the operator returns the true Boolean value or 1. ', 'In the above program, we input an integer number 7 from the user and store it into x variable. After that, the logical NOT (!) operator reverses the value of x (non-zero) and returns zero (0) to print the result of x.', ""Let's write a simple program to check whether the given year is a leap or not using the logical AND (&&), logical OR (||), and the logical NOT (!) operator in the C language.""]","[""The logical AND operator is used to check the conditions of two or more operands that remain are true in a given expression; the AND operator returns a true or non-zero (1) value. Else, it returns a false or 0 value. So, we can say the logical AND operator can perform only in an expression when conditions of both operands are true, and if any condition is not true, it returns 0. The logical AND operator is represented as the double ampersand '&&' symbol."", ""The logical OR operator is used to check both operands (A & B) conditions, and if one of the operands or expressions is true, the operator returns a true Boolean value. Similarly, if none of the expressions are true, it returns a false or zero value. The logical OR operator is denoted as the double pipe '||' symbol."", ""The logical NOT operator is represented as the '!' symbol, which is used to reverse the result of any given expression or condition. If the result of an expression is non-zero or true, the result will be reversed as zero or false value. Similarly, if the condition's result is false or 0, the NOT operator reverses the result and returns 1 or true."", 'In the above program, we use the NOT (!) operator to reverse the result of the various expression, such as the condition of the variable x is equal to 5, which is true. Still, the NOT operator reverses the result and returns 0. Similarly, we defined the condition (x!=5), but the logical operator changed its result and returned 1 and so on.']","['(A > b && b > c)', '(A > B) || (A < C)', ""! (condition); // It '!' represents the NOT operator"", 'condition\t!(condition)', '1             0', '0             1', '/* demonstration the use of the logical not operator in C. */', '#include', '#include', 'int main ()', 'int x = 5;', 'printf ("" The return value = %d \\n"", ! (x == 5));', 'printf ("" The return value = %d \\n"", ! (x != 5));', 'printf ("" The return value = %d \\n"", ! (x >= 3));', 'printf ("" The return value = %d \\n"", ! (x < 3));', 'return 0;', '/* demonstration the use of the logical not operator in C. */', '#include', '#include', 'int main ()', 'int x, n;', 'printf ("" Enter the number: "");', 'scanf (""%d"", &x);', 'n = !x; // use logical not operator to reverse the condition', 'printf ("" The result of x: %d"", n); // display the result', 'return 0;', '#include', '#include', 'int main ()', 'int yr; // declare int type variable', 'printf ("" Enter the year: "");', 'scanf (""%d"", &yr);', ""/* '&&' (AND) operator to validate both operand, '||' (OR) operator check ny given expressions are true,"", ""'!' (NOT) check the result of (yr % 100 != 0). */"", 'if ( (yr % 400 == 0) || (yr % 4 == 0 && yr % 100 != 0))', 'printf ("" %d is a leap year. \\n"", yr);', 'printf ("" %d is not a leap year. \\n"", yr);', 'return 0;', '/* program to check the various condition using the logical NOT operator in c. */', '#include', '#include', 'int main ()', 'int a = 20, b = 15;', 'int n1 = 15, n2 = 17;', 'if (a > b && a != 0)', 'printf ("" The AND (&&) operator said: Both conditions are true. \\n "");', 'if (n1 > n2 || n2 != 15)', 'printf ("" The OR (||) operator said: Only one condition is true. \\n "");', 'if ( ! (a > b && a != 0 ))', 'printf ("" The NOT (!) operator: Here both conditions are true. \\n "");', 'printf ("" The NOT (!) operator: Here, both conditions are true. ""', '"" But, the status of the condition is reversed as false. \\n"");', 'return 0;']","['The return value = 0', 'The return value = 1', 'The return value = 0', 'The return value = 1', 'Enter the number: 7', 'The result of x: 0', 'Enter the number: 0', 'The result of x: 1', 'Enter the year: 2020', '2020 is a leap year.', 'Enter the year: 2021', '2021 is not a leap year.', 'The AND (&&) operator is said: Both conditions are true.', 'The OR (||) operator is said: Only one condition is true.', 'The NOT (!) operator: Here, both conditions are true. But, the status of the condition is reversed as false.']",[],"['|||The given year is divided by 400, which is equal to 0. And then, we use the logical OR operator to check whether the left or right operand condition is true.|||In the second condition, the given year is divided by 4 and 100. But when we divide 2020 with 4, which is equal to 0. Similarly, we divide the year 2020 by 100, which is also not equal to 0. So, both the conditions are true that display the ""2020 is a leap year"".|||But when we enter the year 2021, it prints the given result ""2021 is not a leap year"".|||']"
216,['Self-referential structure'],['The self-referential structure is a structure that points to the same type of structure. It contains one or more pointers that ultimately point to the same structure.'],"['https://www.javatpoint.com/#', 'https://www.javatpoint.com/logical-not-operator-in-c', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/logical-not-operator-in-c', 'https://www.javatpoint.com/#']","['https://static.javatpoint.com/cpages/images/self-referential-structure1.png', 'https://static.javatpoint.com/cpages/images/self-referential-structure2.png', 'https://static.javatpoint.com/cpages/images/self-referential-structure3.png', 'https://static.javatpoint.com/cpages/images/self-referential-structure4.png']",[],"['Why do we require a Self-referential structure?', 'Linked list', 'Types of self-referential structure']","['Single Link self-referential structure', 'Multiple Link self-referential structures']",[],"['Operations like the insertion or deletion of nodes in a self-referential structure involve straightforward alteration of pointers.', 'Here, we will discuss the self-referential structure in more detail using the linked list concepts.', ""Let's understand the concept of self-referential structure in more detail using the example mentioned below:"", 'Example 1: Creating a random self-referential structure in the C programming language.', 'Example 2: Creating a random self-referential structure in a python programming language.', ""Let's look at the working of single link self-referential structure with the help of an example:"", 'The output of the above program is:', 'The output of the above program is:', 'Let us look at the working of, multiple link self-referential structure with the help of an example:', 'The output of the above program is:', 'The output of the above program is:']","['Here in the linked list, we will define a common structure, which contains the data and address pointer to carry the address of the next node, so to form the multiple nodes, we from each node using the node structure.', 'Unlike a static data structure such as an array where the size of the array limits the number of elements that can easily to inserted into the array, a self-referential structure can dynamically be expanded or contracted.']","['Self-referential structure plays a vital role in the linked list, trees, graphs, and many more data structures. By using the structure, we can easily implement these data structures efficiently. For defining a particular node, the structure plays a very important role. In a linked list, the structure is used to store the data information and the address of the next node in the given linked list. Mainly the data part is of integer type, and the link address part is of pointer type, which holds the address of the next node, so that it can for the Link ultimately.', 'As we all know, the role of a linked list is used to store the data elements of the same type, in which address locations are not at the consecutive difference. In this linear linked list, the current node holds the address of the next node so that it ultimately forms the Link between the current node and the next node.', 'As the name suggests, we can easily predict that these structures consist of a single Link, mainly the only one pointer link of structure type pointing to the same structure. To better understand it, we can connect this concept with the singly linked list.', 'In a singly linked list, there is only a single pointer that carries the address of the next node, and that pointer variable is of the structure node type itself. It is mainly used when we want to store the different data items by fetching out them from various addresses and connecting all of them by storing the address of one data item into the linked part of the other node. In this way, we can easily connect all the data items by using these connecting links.', 'As the name suggests, we can easily predict that these types of the structure consist of multiple Link, here we will make use of two pointer links of structure type which is pointing to the same structure, to understand it better, we can connect this concept with a doubly-linked list.', 'In a doubly-linked list, two single pointers carry the address of the next node and the previous node, and that pointer variable is of the structure node type itself. It is mainly used when we want to store the different data items by fetching out them from various addresses and connecting all of them by storing the address of one data item into the linked part of the other node; in this way, we can easily connect all the data items by using these connecting links.']","['struct node                                           // Creating a node of structure type contains data', 'int d1 ;                          // data 1 of integer type', 'int d2 ;                         // data 2 of integer type', 'struct node * link ;            // Self referential structure link is pointing the same', 'Int main()', 'Struct node obj;                                  // Creating an object of the node type, this object is // consists of three parts one is data 1 and', 'Return 0 ;', '# Dummy Self-referential structure in python language', 'class node:                                             # Creating a node that contains data', '# part of and a pointer of node type to', '# hold the address of the next node', 'def __init__(self):', 'self.data1=0', ""self.data2=' '"", 'self.link=None                    # Self-referential structure link is pointing the same', '# structure of the type node', ""if __name__ == '__main__':"", 'ob=node()', '# Creating a object of node type, this object is', '# consists of three parts one is data 1 and', '# second is of data 2 and third is of link type pointer', '# carries the address of the next node', '#include<stdio.h>', '#include<stdlib.h>', 'struct node', 'int info ;', 'struct node *link ;                  // Self-referential structure link is pointing the same', 'struct node *START = NULL ;   // start pointer to control the linked list //', 'struct node* createnode() ;', 'void insertatlast() ;          // insert node at last //', 'void deleteatfirst() ;          // delete node at first //', 'void viewlist() ;', 'void insertatfirst() ;', 'int getlength() ;', 'int menu() ;', 'void insertafteranynode() ;', 'void deleteatlast() ;', 'void deleteatposition() ;', 'struct node* createnode()           // create node dynamically //', 'struct node *n ;', 'n = malloc( sizeof(struct node) ) ;', 'return ( n ) ;', 'void insertatlast()', 'struct node *temp ,*t ;', 'temp = createnode() ;', 'printf( ""Enter the data in node \\n "" ) ;', 'scanf( "" %d"" , &temp->info ) ;', 'temp->link = NULL ;', 'if ( START == NULL )', 'START = temp ;', 't = START ;', 'while ( t->link != NULL )', 't = t->link ;', 't->link = temp ;', 'void deleteatfirst()                  // delete node at first //', 'if ( START == NULL )', 'printf ( ""List is empty \\n "" ) ;', 'struct node *q ;', 'q = START ;', 'START = START->link ;', 'free( q ) ;', 'void viewlist()', '{   struct node* t ;', 'if ( START == NULL )', 'printf ( ""No List \\n "" ) ;', 't = START ;', 'while ( t != NULL )', 'printf ( "" %d"" , t->info ) ;', 't = t->link ;', 'void insertatfirst()', '{  struct node*New ;', 'New = createnode() ;', 'printf ( ""Enter the data in node \\n "" ) ;', 'scanf ( "" %d"" , &New->info ) ;', 'if ( START == NULL )', 'START = New ;', 'else', 'New->link = START ;', 'START = New ;', 'int getlength()', 'int count = 0 ;', 'struct node* t ;', 'if ( START == NULL )', 'printf ( ""List is empty \\n "" ) ;', 't =START ;', 'while ( t != NULL )', 'count = count + 1 ;', 't = t->link ;', 'return count ;', 'void insertafteranynode()', 'int position ;', 'struct node* newnode ,*t ;', 'if ( START == NULL )', 'printf ( ""List is empty \\n "" ) ;', 'printf ( ""Enter position after which you want to add: \\n "" ) ;', 'scanf ( "" %d"" , &position ) ;', 'if ( position > getlength() )', 'printf ( ""Wrong position \\n "" ) ;', 'insertafteranynode() ;      // recursion //', '', 'int i = 1 ;', 'newnode = createnode() ;', 'printf ( ""Enter Data \\n "" ) ;', 'scanf ( "" %d"" , &newnode->info ) ;', 'newnode->link = NULL ;', 'if ( START == NULL )', 'START = newnode ;', 'else', 't = START ;', 'while ( i < position )', 't = t->link ;', 'i++ ;', 'newnode->link = t->link ;', 't->link = newnode ;', 'void deleteatlast()', 'struct node* t , *q ;', 'if ( START == NULL )', 'printf ( ""List is empty \\n "" ) ;', 't = START ;', 'q = START ;', 'while ( t->link != NULL )', 'q = t ;', 't = t->link ;', 'if ( t == START )', 'START == NULL ;', 'q->link = NULL ;', 'free( t ) ;', 'void deleteatposition()', 'struct node *t , *q ;', 'int position , i = 1 ;', 't = START ;', 'if ( START == NULL)', 'printf ( ""List is empty \\n "" ) ;', 'printf ( ""Enter position after which you want to delete: \\n "" ) ;', 'scanf ( "" %d"" , &position ) ;', 'if ( position > getlength() )', 'printf ( ""Wrong position \\n "" ) ;', 'deleteatposition() ;                  // recursion //', '', 'while ( i < position )', '{', 'q = t ;', 't = t->link ;', 'i++ ;', '}', 'if ( t == START )', 'START == NULL ;', 'q->link = t->link ;', 'free( t ) ;', '}', 'int menu()', 'int ch ;', 'printf ( "" \\t \\t \\t 1.ADD NODE LAST IN LINK \\n "" ) ;', 'printf ( "" \\t \\t \\t 2.ADD NODE AT FIRST IN LINK \\n "" ) ;', 'printf ( "" \\t \\t \\t 3.VIEW LIST IN LINK \\n "" ) ;', 'printf ( "" \\t \\t \\t 4.DELETE NODE AT FIRST IN LINK \\n "" ) ;', 'printf( "" \\t \\t \\t 5. TO SEE THE LENGTH OF LIST \\n "" ) ;', 'printf ( "" \\t \\t \\t 6. INSERT NODE IN BETWEEN \\n "" ) ;', 'printf ( "" \\t \\t \\t 7.DELETE NODE AT LAST IN LINK \\n "" ) ;', 'printf ( "" \\t \\t \\t 8.DELETE NODE AT SPECIFIC POSITION IN LINK \\n "" ) ;', 'printf ( "" \\t \\t \\t 9.EXIT \\n "" ) ;', 'printf ( ""ENTER THE CHOICE \\n "" ) ;', 'scanf ( "" %d"" , &ch ) ;', 'return( ch ) ;', 'void main()', '{   int k ;', 'while ( 1 )', 'switch ( menu() )', 'case 1 :', 'insertatlast() ;', 'break ;', 'case 2 :', 'insertatfirst() ;', 'break ;', 'case 3 :', 'viewlist() ;', 'break ;', 'case 4 :', 'deleteatfirst() ;', 'break ;', 'case 5 :', 'k = getlength() ;', 'printf ( ""THE LENGTH OF THE LIST IS %d \\n "" , k ) ;', 'break ;', 'case 6 :', 'insertafteranynode() ;', 'break ;', 'case 7 :', 'deleteatlast() ;', 'break ;', 'case 8 :', 'deleteatposition() ;', 'break ;', 'case 9 :', 'exit( 0 ) ;', 'break ;', 'default :', 'printf ( "" Not available \\n "" ) ;', '# Single link self-referential structure implementation in Python language', 'class node:', 'def __init__(self):', 'self.d1=0', 'self.d2=0', 'self.link=None', ""if __name__ == '__main__':"", 'obj1=node()                               # Node1', '# Initialization', 'obj1.link = None', 'obj1.d1 = 17', 'obj1.d2 = 14', 'obj2=node()                                 # Node2', '# Initialization', 'obj2.link = None', 'obj2.d1 = 36', 'obj2.d2 = 24', '# Linking obj1 and obj2', 'obj1.link = obj2', '# Accessing data members of obj2 using obj1', 'print(obj1.link.d1)', 'print(obj1.link.d2)', '#include<stdio.h>', '#include<stdlib.h>', 'struct node', 'int info ;', 'struct node *prev ;            // Self-referential structure link is pointing the same', 'struct node *next;                // Self-referential structure link is pointing the same', 'struct node * START = NULL ;            // Start pointer of the list and initially it must be null, // represents that no node is present', 'void insertnodeatfirst() ;', 'void deleteatfirst() ;', 'void viewlist() ;', 'int menu() ;', 'void insertnodeatfirst()                              // Inserting the node at first', 'struct node * newnode ;', 'newnode = malloc( sizeof( struct node ) ) ;', 'printf ( ""Enter Data: \\n "" ) ;', 'scanf ( "" %d"" , &newnode->info ) ;', 'newnode->prev = NULL ;', 'newnode->next = NULL ;', 'if ( START == NULL )', 'START = newnode ;', 'START->prev = newnode ;', 'newnode->next = START ;', 'START = newnode ;', 'void deleteatfirst()                     // deleting the first node', 'struct node * temp ;', 'if ( START == NULL )', 'printf ( ""List is empty \\n "" ) ;', 'temp = START ;', 'START = START->next ;', 'START->prev = NULL ;', 'free( temp ) ;', 'void viewlist()                               // displaying all the nodes in the list', 'struct node * t ;', 'if ( START == NULL )', 'printf ( ""List is empty \\n "" ) ;', 't = START ;', 'while ( t != NULL )', 'printf ( "" %d \\n "" , t->info ) ;', 't = t->next ;', 'int menu()', '{   int n ;', 'printf ( "" \\t \\t \\t 1. VIEW LIST \\n "" ) ;', 'printf ( "" \\t \\t \\t 2. INSERT AT FIRST IN LIST \\n "" ) ;', 'printf ( "" \\t \\t \\t 3. DELETE AT FIRST IN LIST \\n "" ) ;', 'printf ( "" \\t \\t \\t 4. EXIT \\n "" ) ;', 'printf ( ""ENTER YOUR CHOICE \\n "" ) ;', 'scanf ( "" %d"" , &n ) ;', 'return ( n ) ;', 'int main()', 'while ( 1 )', 'switch ( menu() )', 'case 1 :', 'viewlist() ;', 'break ;', 'case 2 :', 'insertnodeatfirst() ;', 'break ;', 'case 3 :', 'deleteatfirst() ;', 'break ;', 'case 4 :', 'exit ( 1 ) ;', 'break ;', 'default :', 'printf ( "" NOT AVAILABLE \\n "" ) ;', '# Multiple link self-referential structure implementation in Python language', 'class node:', 'def __init__(self):', 'self.data = 0', 'self.prev = None', 'self.next = None', ""if __name__ == '__main__':"", 'obj1=node()                                              # Node1', '# Initialization', 'obj1.prev = None', 'obj1.next = None', 'obj1.data = 15', 'obj2=node()                                             # Node2', '# Initialization', 'obj2.prev = None', 'obj2.next = None', 'obj2.data = 20', 'obj3 = node()                                             # Node3', '# Initialization', 'obj3.prev = None', 'obj3.next = None', 'obj3.data = 25', '# Forward links', 'obj1.next = obj2', 'obj2.next = obj3', '# Backward links', 'obj2.prev = obj1', 'obj3.prev = obj2', '# Accessing data of obj1, obj2 and obj3 by obj1', ""print(obj1.data , end='\\t')"", ""print(obj1.next.data , end='\\t')"", 'print(obj1.next.next.data)', '# Accessing data of obj1, obj2 and obj3 by obj2', ""print(obj2.prev.data , end='\\t')"", ""print(obj2.data , end='\\t')"", 'print(obj2.next.data)', '# Accessing data of obj1, obj2 and obj3 by obj3', ""print(obj3.prev.prev.data , end='\\t')"", ""print(obj3.prev.data , end='\\t')"", 'print(obj3.data)']","['36', '24', '15            20            25', '15            20            25', '15            20            25']",[],"[""|||Structures are a user-defined data structure type in C and C++.|||The main benefit of creating structure is that it can hold the different predefined data types.|||It is initialized with the struct keyword and the structure's name followed by this struct keyword.|||We can easily take the different data types like integer value, float, char, and others within the same structure.|||It reduces the complexity of the program.|||Using a single structure can hold the values and data set in a single place.|||In the C++ programming language, placing struct keywords is optional or not mandatory, but it is mandatory in the C programming language.|||Self-referential structure plays a very important role in creating other data structures like Linked list.|||In this type of structure, the object of the same structure points to the same data structure and refers to the data types of the same structure.|||It can have one or more pointers pointing to the same type of structure as their member.|||The self-referential structure is widely used in dynamic data structures such as trees, linked lists, etc.||||||A linked list is a useful data storage method, and it is very easy to implement it in C programming Language.|||Several kinds of linked lists, including single linked lists, double linked lists, and binary trees.|||Each type is suited for certain types of data storage.|||The one thing that these lists have in common is that the links between data items are defined by the information contained in the items themselves, in the form of pointers.|||The linked list is distinctly different from arrays, in which the links between data items result from the layout and storage of the array.|||&&&|||Single Link self-referential structure|||Multiple Link self-referential structures|||""]"
